
c:\Users\Kent4\Projects\Wildcat_Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ac0 	.word	0x20001ac0
6000142c:	20002ba0 	.word	0x20002ba0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d6 	bl	600017f0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f974 	bl	60001800 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fba2 	bl	60001c94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd35 	bl	60001fd0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9b0 	bl	60001910 <configure_external_ram>
	analog_init();
600015b0:	f000 fcd4 	bl	60001f5c <analog_init>
	pwm_init();
600015b4:	f000 fd20 	bl	60001ff8 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb9a 	bl	60001cf0 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f91a 	bl	600017f4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc2b 	bl	60001e20 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f913 	bl	600017fc <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f90f 	bl	600017f8 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fd01 	bl	60001fe0 <____libc_init_array_veneer>
	main();
600015de:	f000 fcf3 	bl	60001fc8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00009b88 	.word	0x00009b88
600015f0:	60002200 	.word	0x60002200
600015f4:	00000000 	.word	0x00000000
600015f8:	20001ac0 	.word	0x20001ac0
600015fc:	6000bd8c 	.word	0x6000bd8c
60001600:	20000000 	.word	0x20000000
60001604:	20001800 	.word	0x20001800
60001608:	00002c9d 	.word	0x00002c9d
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00001dfd 	.word	0x00001dfd
6000161c:	20002b30 	.word	0x20002b30
60001620:	00001e01 	.word	0x00001e01
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20002b34 	.word	0x20002b34
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20000778 	.word	0x20000778
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20000778 	.word	0x20000778

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20000778 	.word	0x20000778
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20000778 	.word	0x20000778

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_middle_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_default_late_hook>:
600017f8:	4770      	bx	lr
600017fa:	bf00      	nop

600017fc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017fc:	bf00      	nop
600017fe:	4770      	bx	lr

60001800 <configure_cache>:
{
60001800:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001806:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001808:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000180a:	4831      	ldr	r0, [pc, #196]	; (600018d0 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000180c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001814:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001816:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181a:	482e      	ldr	r0, [pc, #184]	; (600018d4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000181c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001820:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001822:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001826:	482c      	ldr	r0, [pc, #176]	; (600018d8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001828:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000182c:	4a2b      	ldr	r2, [pc, #172]	; (600018dc <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001832:	4c2b      	ldr	r4, [pc, #172]	; (600018e0 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001838:	482a      	ldr	r0, [pc, #168]	; (600018e4 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000183a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	4c29      	ldr	r4, [pc, #164]	; (600018e8 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001844:	4829      	ldr	r0, [pc, #164]	; (600018ec <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001846:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184e:	4c28      	ldr	r4, [pc, #160]	; (600018f0 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001854:	4827      	ldr	r0, [pc, #156]	; (600018f4 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001856:	4a28      	ldr	r2, [pc, #160]	; (600018f8 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001858:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000185c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001860:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001864:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001868:	4c24      	ldr	r4, [pc, #144]	; (600018fc <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000186c:	4824      	ldr	r0, [pc, #144]	; (60001900 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001872:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001876:	4a23      	ldr	r2, [pc, #140]	; (60001904 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001878:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000187c:	4c22      	ldr	r4, [pc, #136]	; (60001908 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001882:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001886:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188a:	4820      	ldr	r0, [pc, #128]	; (6000190c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001890:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001892:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001896:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	asm("nop");
600018a0:	bf00      	nop
	asm("nop");
600018a2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a4:	2201      	movs	r2, #1
600018a6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ae:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018b2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ba:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018be:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018ca:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ce:	4770      	bx	lr
600018d0:	1000003f 	.word	0x1000003f
600018d4:	07080025 	.word	0x07080025
600018d8:	00100009 	.word	0x00100009
600018dc:	20002ba0 	.word	0x20002ba0
600018e0:	00200013 	.word	0x00200013
600018e4:	07020021 	.word	0x07020021
600018e8:	20000014 	.word	0x20000014
600018ec:	13080025 	.word	0x13080025
600018f0:	10000009 	.word	0x10000009
600018f4:	20200016 	.word	0x20200016
600018f8:	130b0027 	.word	0x130b0027
600018fc:	40000017 	.word	0x40000017
60001900:	60000018 	.word	0x60000018
60001904:	070b002f 	.word	0x070b002f
60001908:	70000019 	.word	0x70000019
6000190c:	8000001a 	.word	0x8000001a

60001910 <configure_external_ram>:
{
60001910:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001912:	4bb8      	ldr	r3, [pc, #736]	; (60001bf4 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001916:	4eb8      	ldr	r6, [pc, #736]	; (60001bf8 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001918:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000191a:	4fb8      	ldr	r7, [pc, #736]	; (60001bfc <configure_external_ram+0x2ec>)
{
6000191c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000191e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001922:	49b7      	ldr	r1, [pc, #732]	; (60001c00 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001924:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001928:	4db6      	ldr	r5, [pc, #728]	; (60001c04 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000192a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000192e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001932:	4cb5      	ldr	r4, [pc, #724]	; (60001c08 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001934:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001938:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000193c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001940:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001944:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001948:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000194c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000194e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001950:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001952:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001954:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001962:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001966:	4aa9      	ldr	r2, [pc, #676]	; (60001c0c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001968:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
6000196c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001970:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001974:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001978:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000197c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000197e:	4ba4      	ldr	r3, [pc, #656]	; (60001c10 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001980:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	48a4      	ldr	r0, [pc, #656]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001986:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001988:	4aa4      	ldr	r2, [pc, #656]	; (60001c1c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000198a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000198c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001990:	f043 030c 	orr.w	r3, r3, #12
60001994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001998:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000199c:	6803      	ldr	r3, [r0, #0]
6000199e:	f043 0302 	orr.w	r3, r3, #2
600019a2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019a6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019a8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019ac:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ae:	4b9c      	ldr	r3, [pc, #624]	; (60001c20 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019b0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019b2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b6:	4c9b      	ldr	r4, [pc, #620]	; (60001c24 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ba:	4a9b      	ldr	r2, [pc, #620]	; (60001c28 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019c0:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c2:	68c3      	ldr	r3, [r0, #12]
600019c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600019c8:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	6a03      	ldr	r3, [r0, #32]
600019cc:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019ce:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d2:	6a03      	ldr	r3, [r0, #32]
600019d4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019d6:	4a95      	ldr	r2, [pc, #596]	; (60001c2c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	4c95      	ldr	r4, [pc, #596]	; (60001c30 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e0:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019e2:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019ec:	f043 0301 	orr.w	r3, r3, #1
600019f0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019f8:	498e      	ldr	r1, [pc, #568]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019fe:	f043 0301 	orr.w	r3, r3, #1
60001a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a18:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1e:	6803      	ldr	r3, [r0, #0]
60001a20:	f023 0302 	bic.w	r3, r3, #2
60001a24:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a28:	4b83      	ldr	r3, [pc, #524]	; (60001c38 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2a:	4984      	ldr	r1, [pc, #528]	; (60001c3c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2e:	f843 2b04 	str.w	r2, [r3], #4
60001a32:	428b      	cmp	r3, r1
60001a34:	d1fb      	bne.n	60001a2e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a36:	4a77      	ldr	r2, [pc, #476]	; (60001c14 <configure_external_ram+0x304>)
60001a38:	6813      	ldr	r3, [r2, #0]
60001a3a:	f043 0301 	orr.w	r3, r3, #1
60001a3e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	6813      	ldr	r3, [r2, #0]
60001a42:	f013 0301 	ands.w	r3, r3, #1
60001a46:	d1fb      	bne.n	60001a40 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a48:	487a      	ldr	r0, [pc, #488]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a4c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a50:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a52:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a56:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a58:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a60:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a64:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a68:	4975      	ldr	r1, [pc, #468]	; (60001c40 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a6a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a72:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a76:	4873      	ldr	r0, [pc, #460]	; (60001c44 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a78:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	4c71      	ldr	r4, [pc, #452]	; (60001c48 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a82:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a86:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	4970      	ldr	r1, [pc, #448]	; (60001c4c <configure_external_ram+0x33c>)
60001a8c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a90:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a92:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9a:	485e      	ldr	r0, [pc, #376]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa8:	6943      	ldr	r3, [r0, #20]
60001aaa:	07da      	lsls	r2, r3, #31
60001aac:	d5fc      	bpl.n	60001aa8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aae:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab6:	4957      	ldr	r1, [pc, #348]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001aba:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac6:	694b      	ldr	r3, [r1, #20]
60001ac8:	07db      	lsls	r3, r3, #31
60001aca:	d5fc      	bpl.n	60001ac6 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001acc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ace:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	4a4f      	ldr	r2, [pc, #316]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	6953      	ldr	r3, [r2, #20]
60001ae6:	07df      	lsls	r7, r3, #31
60001ae8:	d5fc      	bpl.n	60001ae4 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aee:	4858      	ldr	r0, [pc, #352]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af0:	4948      	ldr	r1, [pc, #288]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001af8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	694b      	ldr	r3, [r1, #20]
60001b02:	07de      	lsls	r6, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b06:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b0a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b0e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b10:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b12:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b14:	4293      	cmp	r3, r2
60001b16:	d165      	bne.n	60001be4 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b18:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b20:	483c      	ldr	r0, [pc, #240]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b22:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b26:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b2a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b2e:	6943      	ldr	r3, [r0, #20]
60001b30:	07dd      	lsls	r5, r3, #31
60001b32:	d5fc      	bpl.n	60001b2e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b34:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b36:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b3c:	4a35      	ldr	r2, [pc, #212]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b40:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b48:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b4c:	6953      	ldr	r3, [r2, #20]
60001b4e:	07dc      	lsls	r4, r3, #31
60001b50:	d5fc      	bpl.n	60001b4c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b52:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b54:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b5c:	492d      	ldr	r1, [pc, #180]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b60:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b6c:	694b      	ldr	r3, [r1, #20]
60001b6e:	07d8      	lsls	r0, r3, #31
60001b70:	d5fc      	bpl.n	60001b6c <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b72:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b74:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7c:	4a25      	ldr	r2, [pc, #148]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b7e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6953      	ldr	r3, [r2, #20]
60001b8e:	07d9      	lsls	r1, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b98:	482d      	ldr	r0, [pc, #180]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	491e      	ldr	r1, [pc, #120]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07da      	lsls	r2, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001bb0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bb8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bba:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bbc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bbe:	4293      	cmp	r3, r2
60001bc0:	d050      	beq.n	60001c64 <configure_external_ram+0x354>
60001bc2:	2508      	movs	r5, #8
60001bc4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001bc8:	4922      	ldr	r1, [pc, #136]	; (60001c54 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bca:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001bcc:	4b22      	ldr	r3, [pc, #136]	; (60001c58 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001bce:	4a23      	ldr	r2, [pc, #140]	; (60001c5c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd0:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001bd2:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001bd4:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd6:	2301      	movs	r3, #1
60001bd8:	4821      	ldr	r0, [pc, #132]	; (60001c60 <configure_external_ram+0x350>)
60001bda:	4422      	add	r2, r4
60001bdc:	f000 fa04 	bl	60001fe8 <__sm_set_pool_veneer>
}
60001be0:	b003      	add	sp, #12
60001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001be4:	4b1e      	ldr	r3, [pc, #120]	; (60001c60 <configure_external_ram+0x350>)
60001be6:	2200      	movs	r2, #0
60001be8:	e9c3 2200 	strd	r2, r2, [r3]
60001bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bf0:	b003      	add	sp, #12
60001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	401f8400 	.word	0x401f8400
60001c04:	000170f9 	.word	0x000170f9
60001c08:	400fc000 	.word	0x400fc000
60001c0c:	1ffffcff 	.word	0x1ffffcff
60001c10:	a0000300 	.word	0xa0000300
60001c14:	402a4000 	.word	0x402a4000
60001c18:	402a8000 	.word	0x402a8000
60001c1c:	ffff0012 	.word	0xffff0012
60001c20:	00f737ff 	.word	0x00f737ff
60001c24:	80000040 	.word	0x80000040
60001c28:	7cf0ff00 	.word	0x7cf0ff00
60001c2c:	830f00ff 	.word	0x830f00ff
60001c30:	00020063 	.word	0x00020063
60001c34:	5af05af0 	.word	0x5af05af0
60001c38:	402a4200 	.word	0x402a4200
60001c3c:	402a4300 	.word	0x402a4300
60001c40:	3018049f 	.word	0x3018049f
60001c44:	0a1806eb 	.word	0x0a1806eb
60001c48:	0a180638 	.word	0x0a180638
60001c4c:	26013206 	.word	0x26013206
60001c50:	00030004 	.word	0x00030004
60001c54:	70000000 	.word	0x70000000
60001c58:	70000000 	.word	0x70000000
60001c5c:	20002b5a 	.word	0x20002b5a
60001c60:	20002060 	.word	0x20002060
	FLEXSPI2_IPCR0 = addr;
60001c64:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c6e:	4808      	ldr	r0, [pc, #32]	; (60001c90 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c70:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c74:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c78:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7c:	6943      	ldr	r3, [r0, #20]
60001c7e:	07db      	lsls	r3, r3, #31
60001c80:	d5fc      	bpl.n	60001c7c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c82:	2301      	movs	r3, #1
60001c84:	2510      	movs	r5, #16
60001c86:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c8a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c8c:	e79c      	b.n	60001bc8 <configure_external_ram+0x2b8>
60001c8e:	bf00      	nop
60001c90:	402a4000 	.word	0x402a4000

60001c94 <usb_pll_start>:
{
60001c94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c96:	4a15      	ldr	r2, [pc, #84]	; (60001cec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001ca6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001caa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001cb0:	f013 0f02 	tst.w	r3, #2
60001cb4:	d10e      	bne.n	60001cd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001cba:	d00f      	beq.n	60001cdc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001cc0:	d00e      	beq.n	60001ce0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001cc2:	2b00      	cmp	r3, #0
60001cc4:	daf3      	bge.n	60001cae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001cca:	d10b      	bne.n	60001ce4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ccc:	065b      	lsls	r3, r3, #25
60001cce:	d50b      	bpl.n	60001ce8 <usb_pll_start+0x54>
}
60001cd0:	bcf0      	pop	{r4, r5, r6, r7}
60001cd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cd8:	6190      	str	r0, [r2, #24]
			continue;
60001cda:	e7e8      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cdc:	6155      	str	r5, [r2, #20]
			continue;
60001cde:	e7e6      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ce0:	6156      	str	r6, [r2, #20]
			continue;
60001ce2:	e7e4      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ce4:	6191      	str	r1, [r2, #24]
			continue;
60001ce6:	e7e2      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ce8:	6157      	str	r7, [r2, #20]
			continue;
60001cea:	e7e0      	b.n	60001cae <usb_pll_start+0x1a>
60001cec:	400d8000 	.word	0x400d8000

60001cf0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cf0:	4a3f      	ldr	r2, [pc, #252]	; (60001df0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cf2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cf4:	493f      	ldr	r1, [pc, #252]	; (60001df4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfe:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d02:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001df8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d06:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dfc <tempmon_init+0x10c>
{
60001d0e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d14:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d18:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d1c:	4d38      	ldr	r5, [pc, #224]	; (60001e00 <tempmon_init+0x110>)
60001d1e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d20:	4c38      	ldr	r4, [pc, #224]	; (60001e04 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d22:	4839      	ldr	r0, [pc, #228]	; (60001e08 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d24:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d26:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d2a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d2c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d34:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d38:	ee07 1a10 	vmov	s14, r1
60001d3c:	4b33      	ldr	r3, [pc, #204]	; (60001e0c <tempmon_init+0x11c>)
60001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d42:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d48:	4931      	ldr	r1, [pc, #196]	; (60001e10 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d52:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d56:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d5e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d62:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d6a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d6e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d76:	4827      	ldr	r0, [pc, #156]	; (60001e14 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d78:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d80:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d84:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d8c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001da0:	ee16 3a10 	vmov	r3, s12
60001da4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dac:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001db0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001dbe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001dc2:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001dc4:	4914      	ldr	r1, [pc, #80]	; (60001e18 <tempmon_init+0x128>)
60001dc6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001dce:	f043 0302 	orr.w	r3, r3, #2
60001dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001dd6:	4b11      	ldr	r3, [pc, #68]	; (60001e1c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dd8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ddc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001de4:	2201      	movs	r2, #1
}
60001de6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dec:	4770      	bx	lr
60001dee:	bf00      	nop
60001df0:	400d8100 	.word	0x400d8100
60001df4:	401f4400 	.word	0x401f4400
60001df8:	42aa0000 	.word	0x42aa0000
60001dfc:	42b40000 	.word	0x42b40000
60001e00:	20002b20 	.word	0x20002b20
60001e04:	20002b1c 	.word	0x20002b1c
60001e08:	20002b24 	.word	0x20002b24
60001e0c:	20002b28 	.word	0x20002b28
60001e10:	0fff0000 	.word	0x0fff0000
60001e14:	e000e400 	.word	0xe000e400
60001e18:	20001800 	.word	0x20001800
60001e1c:	00002e85 	.word	0x00002e85

60001e20 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e20:	4b31      	ldr	r3, [pc, #196]	; (60001ee8 <usb_init+0xc8>)
60001e22:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e26:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e2c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e30:	f000 f8d2 	bl	60001fd8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e34:	4a2d      	ldr	r2, [pc, #180]	; (60001eec <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e36:	492e      	ldr	r1, [pc, #184]	; (60001ef0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e3c:	482d      	ldr	r0, [pc, #180]	; (60001ef4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e3e:	f043 0303 	orr.w	r3, r3, #3
60001e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e46:	4b2c      	ldr	r3, [pc, #176]	; (60001ef8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e48:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e4c:	6802      	ldr	r2, [r0, #0]
60001e4e:	421a      	tst	r2, r3
60001e50:	d103      	bne.n	60001e5a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e52:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e56:	079a      	lsls	r2, r3, #30
60001e58:	d01b      	beq.n	60001e92 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e5a:	4a25      	ldr	r2, [pc, #148]	; (60001ef0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e60:	4b24      	ldr	r3, [pc, #144]	; (60001ef4 <usb_init+0xd4>)
60001e62:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e64:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e68:	f043 0302 	orr.w	r3, r3, #2
60001e6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e70:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e74:	079b      	lsls	r3, r3, #30
60001e76:	d4fb      	bmi.n	60001e70 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e80:	4b1c      	ldr	r3, [pc, #112]	; (60001ef4 <usb_init+0xd4>)
60001e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e86:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e8a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e8c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e8e:	f000 f8af 	bl	60001ff0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e92:	4a18      	ldr	r2, [pc, #96]	; (60001ef4 <usb_init+0xd4>)
60001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e98:	4c15      	ldr	r4, [pc, #84]	; (60001ef0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e9a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e9c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e9e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea0:	4b16      	ldr	r3, [pc, #88]	; (60001efc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ea2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ea8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eac:	4618      	mov	r0, r3
60001eae:	f000 f887 	bl	60001fc0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001eb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eb6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001eb8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ebc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001ec0:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001ec2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001ec6:	641a      	str	r2, [r3, #64]	; 0x40
60001ec8:	4b0d      	ldr	r3, [pc, #52]	; (60001f00 <usb_init+0xe0>)
60001eca:	4a0e      	ldr	r2, [pc, #56]	; (60001f04 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ecc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ed4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ed8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001edc:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ede:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ee2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ee6:	bd10      	pop	{r4, pc}
60001ee8:	400d8000 	.word	0x400d8000
60001eec:	400fc000 	.word	0x400fc000
60001ef0:	402e0000 	.word	0x402e0000
60001ef4:	400d9000 	.word	0x400d9000
60001ef8:	001e1c00 	.word	0x001e1c00
60001efc:	20000000 	.word	0x20000000
60001f00:	20001800 	.word	0x20001800
60001f04:	0000306d 	.word	0x0000306d

60001f08 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f08:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f0a:	4b0e      	ldr	r3, [pc, #56]	; (60001f44 <_reboot_Teensyduino_+0x3c>)
60001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f0e:	079b      	lsls	r3, r3, #30
60001f10:	d400      	bmi.n	60001f14 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f12:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f14:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f16:	4b0c      	ldr	r3, [pc, #48]	; (60001f48 <_reboot_Teensyduino_+0x40>)
60001f18:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f1a:	4a0c      	ldr	r2, [pc, #48]	; (60001f4c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f24:	490a      	ldr	r1, [pc, #40]	; (60001f50 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f26:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f2a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f2c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f2e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f36:	4807      	ldr	r0, [pc, #28]	; (60001f54 <_reboot_Teensyduino_+0x4c>)
60001f38:	4a07      	ldr	r2, [pc, #28]	; (60001f58 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f3c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3e:	689b      	ldr	r3, [r3, #8]
60001f40:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f42:	bf00      	nop
60001f44:	401f4400 	.word	0x401f4400
60001f48:	402e0000 	.word	0x402e0000
60001f4c:	400ac000 	.word	0x400ac000
60001f50:	00200003 	.word	0x00200003
60001f54:	20208000 	.word	0x20208000
60001f58:	eb120000 	.word	0xeb120000

60001f5c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f5c:	4b10      	ldr	r3, [pc, #64]	; (60001fa0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f5e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f60:	4a10      	ldr	r2, [pc, #64]	; (60001fa4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f64:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f68:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f6a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f6c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f72:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f76:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f78:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f7a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f7c:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f7e:	061b      	lsls	r3, r3, #24
60001f80:	d4fc      	bmi.n	60001f7c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f82:	4a09      	ldr	r2, [pc, #36]	; (60001fa8 <analog_init+0x4c>)
60001f84:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f88:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f8a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f8c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f94:	d1fb      	bne.n	60001f8e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f96:	4a05      	ldr	r2, [pc, #20]	; (60001fac <analog_init+0x50>)
60001f98:	7013      	strb	r3, [r2, #0]
}
60001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f9e:	4770      	bx	lr
60001fa0:	400fc000 	.word	0x400fc000
60001fa4:	400c4000 	.word	0x400c4000
60001fa8:	400c8000 	.word	0x400c8000
60001fac:	20002b59 	.word	0x20002b59

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__memset_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__memset_veneer+0x4>
60001fc4:	000058e9 	.word	0x000058e9

60001fc8 <__main_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__main_veneer+0x4>
60001fcc:	000027a1 	.word	0x000027a1

60001fd0 <__set_arm_clock_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <__set_arm_clock_veneer+0x4>
60001fd4:	00002321 	.word	0x00002321

60001fd8 <__usb_init_serialnumber_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <__usb_init_serialnumber_veneer+0x4>
60001fdc:	000037dd 	.word	0x000037dd

60001fe0 <____libc_init_array_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <____libc_init_array_veneer+0x4>
60001fe4:	00005fc9 	.word	0x00005fc9

60001fe8 <__sm_set_pool_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__sm_set_pool_veneer+0x4>
60001fec:	0000493d 	.word	0x0000493d

60001ff0 <__delay_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <__delay_veneer+0x4>
60001ff4:	00002611 	.word	0x00002611

60001ff8 <__pwm_init_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__pwm_init_veneer+0x4>
60001ffc:	000047d9 	.word	0x000047d9

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000045 00000691                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    *value = _buffer[0];
      24:	1a1b      	subs	r3, r3, r0
    *value <<= 8;
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    *value |= _buffer[1];
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
*/
/**************************************************************************/
void Adafruit_INA260::setAlertLimit(float limit) {
  Adafruit_I2CRegisterBits alert_limit =
      Adafruit_I2CRegisterBits(AlertLimit, 16, 0);
  alert_limit.write((int16_t)(limit / 1.25));
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
}
      34:	4718      	bx	r3
      36:	4770      	bx	lr
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20002ac8 	.word	0x20002ac8
      64:	6000e800 	.word	0x6000e800

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	4d59      	ldr	r5, [pc, #356]	; (1d4 <setup+0x16c>)
      6e:	f240 28ee 	movw	r8, #750	; 0x2ee
    }
    if (_miso != -1) {
      72:	4c59      	ldr	r4, [pc, #356]	; (1d8 <setup+0x170>)
      74:	4f59      	ldr	r7, [pc, #356]	; (1dc <setup+0x174>)
      76:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 21c <setup+0x1b4>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
      7a:	682e      	ldr	r6, [r5, #0]
      7c:	f003 ff8e 	bl	3f9c <yield>
			timer->_ms--;
      80:	7823      	ldrb	r3, [r4, #0]
      82:	2b00      	cmp	r3, #0
			break;
      84:	d05e      	beq.n	144 <setup+0xdc>
      86:	783b      	ldrb	r3, [r7, #0]
      88:	07db      	lsls	r3, r3, #31
      8a:	d55b      	bpl.n	144 <setup+0xdc>
      8c:	682b      	ldr	r3, [r5, #0]
      8e:	f8d9 2000 	ldr.w	r2, [r9]
      92:	1a9b      	subs	r3, r3, r2
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	2b0e      	cmp	r3, #14
      96:	d955      	bls.n	144 <setup+0xdc>
      98:	210e      	movs	r1, #14
      9a:	4851      	ldr	r0, [pc, #324]	; (1e0 <setup+0x178>)
		} while (n > 0);
      9c:	f003 ff00 	bl	3ea0 <usb_serial_write>
			write(iaddress.b[n]);
      a0:	4850      	ldr	r0, [pc, #320]	; (1e4 <setup+0x17c>)
      a2:	f001 ff11 	bl	1ec8 <Print::println()>
		} while (n > 0);
      a6:	2120      	movs	r1, #32
      a8:	484f      	ldr	r0, [pc, #316]	; (1e8 <setup+0x180>)
      aa:	f000 fe05 	bl	cb8 <PA12::begin(int)>
}
      ae:	200a      	movs	r0, #10

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      b0:	f002 faae 	bl	2610 <delay>
				//Serial.printf("  PINCFG: %x MODIR: %x\n", port->PINCFG, port->MODIR);	
				return;
			}
		}
	}
}
      b4:	f240 22ee 	movw	r2, #750	; 0x2ee
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      b8:	2100      	movs	r1, #0
      ba:	484b      	ldr	r0, [pc, #300]	; (1e8 <setup+0x180>)
      bc:	f001 f874 	bl	11a8 <PA12::movingSpeed(int, int)>
      c0:	2100      	movs	r1, #0
      c2:	4849      	ldr	r0, [pc, #292]	; (1e8 <setup+0x180>)
      c4:	f001 f88a 	bl	11dc <PA12::presentPosition(int)>
      c8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	f04f 0115 	mov.w	r1, #21
}
      d0:	d245      	bcs.n	15e <setup+0xf6>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4846      	ldr	r0, [pc, #280]	; (1ec <setup+0x184>)
      d4:	f003 fee4 	bl	3ea0 <usb_serial_write>
      d8:	4842      	ldr	r0, [pc, #264]	; (1e4 <setup+0x17c>)
      da:	f001 fef5 	bl	1ec8 <Print::println()>
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      de:	4a44      	ldr	r2, [pc, #272]	; (1f0 <setup+0x188>)
      e0:	2140      	movs	r1, #64	; 0x40
      e2:	4844      	ldr	r0, [pc, #272]	; (1f4 <setup+0x18c>)
      e4:	f001 f8f0 	bl	12c8 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
      e8:	200a      	movs	r0, #10
      ea:	f002 fa91 	bl	2610 <delay>
      ee:	4841      	ldr	r0, [pc, #260]	; (1f4 <setup+0x18c>)
      f0:	f001 f996 	bl	1420 <Adafruit_INA260::conversionReady()>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      f4:	2800      	cmp	r0, #0
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
      f6:	d044      	beq.n	182 <setup+0x11a>
      f8:	210c      	movs	r1, #12
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      fa:	483f      	ldr	r0, [pc, #252]	; (1f8 <setup+0x190>)
      fc:	f003 fed0 	bl	3ea0 <usb_serial_write>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     100:	4838      	ldr	r0, [pc, #224]	; (1e4 <setup+0x17c>)
     102:	f001 fee1 	bl	1ec8 <Print::println()>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4a3a      	ldr	r2, [pc, #232]	; (1f0 <setup+0x188>)
     108:	2164      	movs	r1, #100	; 0x64
     10a:	483c      	ldr	r0, [pc, #240]	; (1fc <setup+0x194>)
     10c:	f001 fe0c 	bl	1d28 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>
	if (newbuffer) {
     110:	200a      	movs	r0, #10
     112:	f002 fa7d 	bl	2610 <delay>
		capacity = maxStrLen;
     116:	493a      	ldr	r1, [pc, #232]	; (200 <setup+0x198>)
     118:	4b3a      	ldr	r3, [pc, #232]	; (204 <setup+0x19c>)
		return 1;
     11a:	2200      	movs	r2, #0
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
     11c:	8809      	ldrh	r1, [r1, #0]
     11e:	4837      	ldr	r0, [pc, #220]	; (1fc <setup+0x194>)
     120:	f001 fe1e 	bl	1d60 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
     124:	2109      	movs	r1, #9
     126:	4838      	ldr	r0, [pc, #224]	; (208 <setup+0x1a0>)
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     128:	f003 feba 	bl	3ea0 <usb_serial_write>
	mask = p->mask;
	if (pinmode & mask) {
     12c:	482d      	ldr	r0, [pc, #180]	; (1e4 <setup+0x17c>)
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	f001 fecb 	bl	1ec8 <Print::println()>
	pinmode = *(p->reg + 1);
     132:	210e      	movs	r1, #14
	mask = p->mask;
     134:	4835      	ldr	r0, [pc, #212]	; (20c <setup+0x1a4>)
	if (pinmode & mask) {
     136:	f003 feb3 	bl	3ea0 <usb_serial_write>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	482a      	ldr	r0, [pc, #168]	; (1e4 <setup+0x17c>)
     13c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     140:	f001 bec2 	b.w	1ec8 <Print::println()>
     144:	682b      	ldr	r3, [r5, #0]
     146:	7822      	ldrb	r2, [r4, #0]
     148:	1b9b      	subs	r3, r3, r6
     14a:	b12a      	cbz	r2, 158 <setup+0xf0>
     14c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     150:	d8a2      	bhi.n	98 <setup+0x30>
     152:	f003 ff23 	bl	3f9c <yield>
     156:	e791      	b.n	7c <setup+0x14>
     158:	4543      	cmp	r3, r8
     15a:	d9fa      	bls.n	152 <setup+0xea>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	e79c      	b.n	98 <setup+0x30>
     15e:	482c      	ldr	r0, [pc, #176]	; (210 <setup+0x1a8>)
     160:	f003 fe9e 	bl	3ea0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <setup+0x17c>)
     166:	f001 feaf 	bl	1ec8 <Print::println()>
    ina260.begin(0x40);
     16a:	4a21      	ldr	r2, [pc, #132]	; (1f0 <setup+0x188>)
     16c:	2140      	movs	r1, #64	; 0x40
     16e:	4821      	ldr	r0, [pc, #132]	; (1f4 <setup+0x18c>)
     170:	f001 f8aa 	bl	12c8 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     174:	200a      	movs	r0, #10
     176:	f002 fa4b 	bl	2610 <delay>
    if (ina260.conversionReady()) {
     17a:	481e      	ldr	r0, [pc, #120]	; (1f4 <setup+0x18c>)
     17c:	f001 f950 	bl	1420 <Adafruit_INA260::conversionReady()>
     180:	bb28      	cbnz	r0, 1ce <setup+0x166>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     182:	210c      	movs	r1, #12
     184:	4823      	ldr	r0, [pc, #140]	; (214 <setup+0x1ac>)
     186:	f003 fe8b 	bl	3ea0 <usb_serial_write>
     18a:	4816      	ldr	r0, [pc, #88]	; (1e4 <setup+0x17c>)
     18c:	f001 fe9c 	bl	1ec8 <Print::println()>
    dac.begin(0x64);
     190:	4a17      	ldr	r2, [pc, #92]	; (1f0 <setup+0x188>)
     192:	2164      	movs	r1, #100	; 0x64
     194:	4819      	ldr	r0, [pc, #100]	; (1fc <setup+0x194>)
     196:	f001 fdc7 	bl	1d28 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>
    delay(10);
     19a:	200a      	movs	r0, #10
     19c:	f002 fa38 	bl	2610 <delay>
    dac.setVoltage(dacValue, false);
     1a0:	4917      	ldr	r1, [pc, #92]	; (200 <setup+0x198>)
     1a2:	4b18      	ldr	r3, [pc, #96]	; (204 <setup+0x19c>)
     1a4:	2200      	movs	r2, #0
     1a6:	8809      	ldrh	r1, [r1, #0]
     1a8:	4814      	ldr	r0, [pc, #80]	; (1fc <setup+0x194>)
     1aa:	f001 fdd9 	bl	1d60 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
     1ae:	2109      	movs	r1, #9
     1b0:	4815      	ldr	r0, [pc, #84]	; (208 <setup+0x1a0>)
     1b2:	f003 fe75 	bl	3ea0 <usb_serial_write>
     1b6:	480b      	ldr	r0, [pc, #44]	; (1e4 <setup+0x17c>)
     1b8:	f001 fe86 	bl	1ec8 <Print::println()>
     1bc:	210c      	movs	r1, #12
     1be:	4816      	ldr	r0, [pc, #88]	; (218 <setup+0x1b0>)
     1c0:	f003 fe6e 	bl	3ea0 <usb_serial_write>
     1c4:	4807      	ldr	r0, [pc, #28]	; (1e4 <setup+0x17c>)
}
     1c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     1ca:	f001 be7d 	b.w	1ec8 <Print::println()>
     1ce:	210c      	movs	r1, #12
     1d0:	4809      	ldr	r0, [pc, #36]	; (1f8 <setup+0x190>)
     1d2:	e7d8      	b.n	186 <setup+0x11e>
     1d4:	20002b34 	.word	0x20002b34
     1d8:	20002b62 	.word	0x20002b62
     1dc:	20002b61 	.word	0x20002b61
     1e0:	20000afc 	.word	0x20000afc
     1e4:	20000d90 	.word	0x20000d90
     1e8:	20002080 	.word	0x20002080
     1ec:	20000b0c 	.word	0x20000b0c
     1f0:	20000e00 	.word	0x20000e00
     1f4:	20002070 	.word	0x20002070
     1f8:	20000b68 	.word	0x20000b68
     1fc:	20002048 	.word	0x20002048
     200:	200017c2 	.word	0x200017c2
     204:	00061a80 	.word	0x00061a80
     208:	20000b34 	.word	0x20000b34
     20c:	20000b78 	.word	0x20000b78
     210:	20000b40 	.word	0x20000b40
     214:	20000b24 	.word	0x20000b24
     218:	20000b58 	.word	0x20000b58
     21c:	20002b44 	.word	0x20002b44

00000220 <PrintOutput()>:
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     220:	b530      	push	{r4, r5, lr}
     222:	2100      	movs	r1, #0
     224:	b08b      	sub	sp, #44	; 0x2c
     226:	4893      	ldr	r0, [pc, #588]	; (474 <PrintOutput()+0x254>)
     228:	f003 fe3a 	bl	3ea0 <usb_serial_write>
     22c:	4892      	ldr	r0, [pc, #584]	; (478 <PrintOutput()+0x258>)
     22e:	f001 fe4b 	bl	1ec8 <Print::println()>
     232:	4992      	ldr	r1, [pc, #584]	; (47c <PrintOutput()+0x25c>)

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     234:	a804      	add	r0, sp, #16
     236:	ac07      	add	r4, sp, #28
     238:	f001 fea0 	bl	1f7c <String::String(char const*)>
     23c:	4b90      	ldr	r3, [pc, #576]	; (480 <PrintOutput()+0x260>)

void PrintOutput () {
    Serial.println("");
    Serial.println("Time: \t\t" + PadString(String(millis())));
     23e:	220a      	movs	r2, #10
     240:	a801      	add	r0, sp, #4
     242:	6819      	ldr	r1, [r3, #0]
     244:	f001 ff3a 	bl	20bc <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     248:	9b03      	ldr	r3, [sp, #12]
     24a:	2b07      	cmp	r3, #7
     24c:	d812      	bhi.n	274 <PrintOutput()+0x54>
     24e:	4d8d      	ldr	r5, [pc, #564]	; (484 <PrintOutput()+0x264>)
     250:	4629      	mov	r1, r5
     252:	4620      	mov	r0, r4
     254:	f001 fe92 	bl	1f7c <String::String(char const*)>
        str = " " + str;
     258:	a901      	add	r1, sp, #4
     25a:	4620      	mov	r0, r4
     25c:	f001 ffb8 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     260:	4601      	mov	r1, r0
     262:	a801      	add	r0, sp, #4
     264:	f001 ff5c 	bl	2120 <String::operator=(String const&)>
class StringSumHelper : public String
     268:	4620      	mov	r0, r4
     26a:	f001 fed5 	bl	2018 <String::~String()>
    while (str.length() < 8) {
     26e:	9b03      	ldr	r3, [sp, #12]
     270:	2b07      	cmp	r3, #7
     272:	d9ed      	bls.n	250 <PrintOutput()+0x30>
    return str;
     274:	a901      	add	r1, sp, #4
     276:	4620      	mov	r0, r4
     278:	f001 feba 	bl	1ff0 <String::String(String&&)>
    Serial.println("Time: \t\t" + PadString(String(millis())));
     27c:	4621      	mov	r1, r4
     27e:	a804      	add	r0, sp, #16
     280:	f001 ffa6 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     284:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     286:	487c      	ldr	r0, [pc, #496]	; (478 <PrintOutput()+0x258>)
     288:	f001 fdf8 	bl	1e7c <Print::print(String const&)>
     28c:	487a      	ldr	r0, [pc, #488]	; (478 <PrintOutput()+0x258>)
     28e:	f001 fe1b 	bl	1ec8 <Print::println()>
     292:	4620      	mov	r0, r4
     294:	f001 fec0 	bl	2018 <String::~String()>
     298:	a801      	add	r0, sp, #4
     29a:	f001 febd 	bl	2018 <String::~String()>
     29e:	a804      	add	r0, sp, #16
     2a0:	f001 feba 	bl	2018 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     2a4:	4978      	ldr	r1, [pc, #480]	; (488 <PrintOutput()+0x268>)
     2a6:	a804      	add	r0, sp, #16
     2a8:	f001 fe68 	bl	1f7c <String::String(char const*)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     2ac:	4b77      	ldr	r3, [pc, #476]	; (48c <PrintOutput()+0x26c>)
     2ae:	220a      	movs	r2, #10
     2b0:	a801      	add	r0, sp, #4
     2b2:	8819      	ldrh	r1, [r3, #0]
     2b4:	f001 feec 	bl	2090 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     2b8:	9b03      	ldr	r3, [sp, #12]
     2ba:	2b07      	cmp	r3, #7
     2bc:	d812      	bhi.n	2e4 <PrintOutput()+0xc4>
     2be:	4d71      	ldr	r5, [pc, #452]	; (484 <PrintOutput()+0x264>)
     2c0:	4629      	mov	r1, r5
     2c2:	4620      	mov	r0, r4
     2c4:	f001 fe5a 	bl	1f7c <String::String(char const*)>
        str = " " + str;
     2c8:	a901      	add	r1, sp, #4
     2ca:	4620      	mov	r0, r4
     2cc:	f001 ff80 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     2d0:	4601      	mov	r1, r0
     2d2:	a801      	add	r0, sp, #4
     2d4:	f001 ff24 	bl	2120 <String::operator=(String const&)>
class StringSumHelper : public String
     2d8:	4620      	mov	r0, r4
     2da:	f001 fe9d 	bl	2018 <String::~String()>
    while (str.length() < 8) {
     2de:	9b03      	ldr	r3, [sp, #12]
     2e0:	2b07      	cmp	r3, #7
     2e2:	d9ed      	bls.n	2c0 <PrintOutput()+0xa0>
    return str;
     2e4:	a901      	add	r1, sp, #4
     2e6:	4620      	mov	r0, r4
     2e8:	f001 fe82 	bl	1ff0 <String::String(String&&)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     2ec:	4621      	mov	r1, r4
     2ee:	a804      	add	r0, sp, #16
     2f0:	f001 ff6e 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     2f4:	4601      	mov	r1, r0
     2f6:	4860      	ldr	r0, [pc, #384]	; (478 <PrintOutput()+0x258>)
     2f8:	f001 fdc0 	bl	1e7c <Print::print(String const&)>
     2fc:	485e      	ldr	r0, [pc, #376]	; (478 <PrintOutput()+0x258>)
     2fe:	f001 fde3 	bl	1ec8 <Print::println()>
     302:	4620      	mov	r0, r4
     304:	f001 fe88 	bl	2018 <String::~String()>
     308:	a801      	add	r0, sp, #4
     30a:	f001 fe85 	bl	2018 <String::~String()>
     30e:	a804      	add	r0, sp, #16
     310:	f001 fe82 	bl	2018 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     314:	495e      	ldr	r1, [pc, #376]	; (490 <PrintOutput()+0x270>)
     316:	a804      	add	r0, sp, #16
     318:	f001 fe30 	bl	1f7c <String::String(char const*)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     31c:	485d      	ldr	r0, [pc, #372]	; (494 <PrintOutput()+0x274>)
     31e:	f001 f867 	bl	13f0 <Adafruit_INA260::readPower()>
     322:	2102      	movs	r1, #2
     324:	a801      	add	r0, sp, #4
     326:	f001 fedf 	bl	20e8 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     32a:	9b03      	ldr	r3, [sp, #12]
     32c:	2b07      	cmp	r3, #7
     32e:	d812      	bhi.n	356 <PrintOutput()+0x136>
     330:	4d54      	ldr	r5, [pc, #336]	; (484 <PrintOutput()+0x264>)
     332:	4629      	mov	r1, r5
     334:	4620      	mov	r0, r4
     336:	f001 fe21 	bl	1f7c <String::String(char const*)>
        str = " " + str;
     33a:	a901      	add	r1, sp, #4
     33c:	4620      	mov	r0, r4
     33e:	f001 ff47 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     342:	4601      	mov	r1, r0
     344:	a801      	add	r0, sp, #4
     346:	f001 feeb 	bl	2120 <String::operator=(String const&)>
class StringSumHelper : public String
     34a:	4620      	mov	r0, r4
     34c:	f001 fe64 	bl	2018 <String::~String()>
    while (str.length() < 8) {
     350:	9b03      	ldr	r3, [sp, #12]
     352:	2b07      	cmp	r3, #7
     354:	d9ed      	bls.n	332 <PrintOutput()+0x112>
    return str;
     356:	a901      	add	r1, sp, #4
     358:	4620      	mov	r0, r4
     35a:	f001 fe49 	bl	1ff0 <String::String(String&&)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     35e:	4621      	mov	r1, r4
     360:	a804      	add	r0, sp, #16
     362:	f001 ff35 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     366:	4601      	mov	r1, r0
     368:	4843      	ldr	r0, [pc, #268]	; (478 <PrintOutput()+0x258>)
     36a:	f001 fd87 	bl	1e7c <Print::print(String const&)>
     36e:	4842      	ldr	r0, [pc, #264]	; (478 <PrintOutput()+0x258>)
     370:	f001 fdaa 	bl	1ec8 <Print::println()>
     374:	4620      	mov	r0, r4
     376:	f001 fe4f 	bl	2018 <String::~String()>
     37a:	a801      	add	r0, sp, #4
     37c:	f001 fe4c 	bl	2018 <String::~String()>
     380:	a804      	add	r0, sp, #16
     382:	f001 fe49 	bl	2018 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     386:	4944      	ldr	r1, [pc, #272]	; (498 <PrintOutput()+0x278>)
     388:	a804      	add	r0, sp, #16
     38a:	f001 fdf7 	bl	1f7c <String::String(char const*)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     38e:	4841      	ldr	r0, [pc, #260]	; (494 <PrintOutput()+0x274>)
     390:	f001 f814 	bl	13bc <Adafruit_INA260::readBusVoltage()>
     394:	2102      	movs	r1, #2
     396:	a801      	add	r0, sp, #4
     398:	f001 fea6 	bl	20e8 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     39c:	9b03      	ldr	r3, [sp, #12]
     39e:	2b07      	cmp	r3, #7
     3a0:	d812      	bhi.n	3c8 <PrintOutput()+0x1a8>
     3a2:	4d38      	ldr	r5, [pc, #224]	; (484 <PrintOutput()+0x264>)
     3a4:	4629      	mov	r1, r5
     3a6:	4620      	mov	r0, r4
     3a8:	f001 fde8 	bl	1f7c <String::String(char const*)>
        str = " " + str;
     3ac:	a901      	add	r1, sp, #4
     3ae:	4620      	mov	r0, r4
     3b0:	f001 ff0e 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     3b4:	4601      	mov	r1, r0
     3b6:	a801      	add	r0, sp, #4
     3b8:	f001 feb2 	bl	2120 <String::operator=(String const&)>
class StringSumHelper : public String
     3bc:	4620      	mov	r0, r4
     3be:	f001 fe2b 	bl	2018 <String::~String()>
    while (str.length() < 8) {
     3c2:	9b03      	ldr	r3, [sp, #12]
     3c4:	2b07      	cmp	r3, #7
     3c6:	d9ed      	bls.n	3a4 <PrintOutput()+0x184>
    return str;
     3c8:	a901      	add	r1, sp, #4
     3ca:	4620      	mov	r0, r4
     3cc:	f001 fe10 	bl	1ff0 <String::String(String&&)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     3d0:	4621      	mov	r1, r4
     3d2:	a804      	add	r0, sp, #16
     3d4:	f001 fefc 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     3d8:	4601      	mov	r1, r0
     3da:	4827      	ldr	r0, [pc, #156]	; (478 <PrintOutput()+0x258>)
     3dc:	f001 fd4e 	bl	1e7c <Print::print(String const&)>
     3e0:	4825      	ldr	r0, [pc, #148]	; (478 <PrintOutput()+0x258>)
     3e2:	f001 fd71 	bl	1ec8 <Print::println()>
     3e6:	4620      	mov	r0, r4
     3e8:	f001 fe16 	bl	2018 <String::~String()>
     3ec:	a801      	add	r0, sp, #4
     3ee:	f001 fe13 	bl	2018 <String::~String()>
     3f2:	a804      	add	r0, sp, #16
     3f4:	f001 fe10 	bl	2018 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     3f8:	4928      	ldr	r1, [pc, #160]	; (49c <PrintOutput()+0x27c>)
     3fa:	a804      	add	r0, sp, #16
     3fc:	f001 fdbe 	bl	1f7c <String::String(char const*)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     400:	2100      	movs	r1, #0
     402:	4827      	ldr	r0, [pc, #156]	; (4a0 <PrintOutput()+0x280>)
     404:	f000 feea 	bl	11dc <PA12::presentPosition(int)>
     408:	220a      	movs	r2, #10
     40a:	4601      	mov	r1, r0
     40c:	a801      	add	r0, sp, #4
     40e:	f001 fe3f 	bl	2090 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     412:	9b03      	ldr	r3, [sp, #12]
     414:	2b07      	cmp	r3, #7
     416:	d812      	bhi.n	43e <PrintOutput()+0x21e>
     418:	4d1a      	ldr	r5, [pc, #104]	; (484 <PrintOutput()+0x264>)
     41a:	4629      	mov	r1, r5
     41c:	4620      	mov	r0, r4
     41e:	f001 fdad 	bl	1f7c <String::String(char const*)>
        str = " " + str;
     422:	a901      	add	r1, sp, #4
     424:	4620      	mov	r0, r4
     426:	f001 fed3 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     42a:	4601      	mov	r1, r0
     42c:	a801      	add	r0, sp, #4
     42e:	f001 fe77 	bl	2120 <String::operator=(String const&)>
class StringSumHelper : public String
     432:	4620      	mov	r0, r4
     434:	f001 fdf0 	bl	2018 <String::~String()>
    while (str.length() < 8) {
     438:	9b03      	ldr	r3, [sp, #12]
     43a:	2b07      	cmp	r3, #7
     43c:	d9ed      	bls.n	41a <PrintOutput()+0x1fa>
    return str;
     43e:	a901      	add	r1, sp, #4
     440:	4620      	mov	r0, r4
     442:	f001 fdd5 	bl	1ff0 <String::String(String&&)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     446:	4621      	mov	r1, r4
     448:	a804      	add	r0, sp, #16
     44a:	f001 fec1 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     44e:	4601      	mov	r1, r0
     450:	4809      	ldr	r0, [pc, #36]	; (478 <PrintOutput()+0x258>)
     452:	f001 fd13 	bl	1e7c <Print::print(String const&)>
     456:	4808      	ldr	r0, [pc, #32]	; (478 <PrintOutput()+0x258>)
     458:	f001 fd36 	bl	1ec8 <Print::println()>
     45c:	4620      	mov	r0, r4
     45e:	f001 fddb 	bl	2018 <String::~String()>
     462:	a801      	add	r0, sp, #4
     464:	f001 fdd8 	bl	2018 <String::~String()>
     468:	a804      	add	r0, sp, #16
     46a:	f001 fdd5 	bl	2018 <String::~String()>
}
     46e:	b00b      	add	sp, #44	; 0x2c
     470:	bd30      	pop	{r4, r5, pc}
     472:	bf00      	nop
     474:	20000388 	.word	0x20000388
     478:	20000d90 	.word	0x20000d90
     47c:	20000380 	.word	0x20000380
     480:	20002b34 	.word	0x20002b34
     484:	200003f0 	.word	0x200003f0
     488:	2000038c 	.word	0x2000038c
     48c:	200017c2 	.word	0x200017c2
     490:	20000394 	.word	0x20000394
     494:	20002070 	.word	0x20002070
     498:	200003a0 	.word	0x200003a0
     49c:	200003ac 	.word	0x200003ac
     4a0:	20002080 	.word	0x20002080

000004a4 <ProcessCommand(String)>:
    } else {
        return Command::INVALID;
    }
}

void ProcessCommand (String serialInput) {
     4a4:	b570      	push	{r4, r5, r6, lr}
     4a6:	b08a      	sub	sp, #40	; 0x28
     4a8:	4604      	mov	r4, r0
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     4aa:	4953      	ldr	r1, [pc, #332]	; (5f8 <ProcessCommand(String)+0x154>)
     4ac:	a804      	add	r0, sp, #16
     4ae:	f001 fd65 	bl	1f7c <String::String(char const*)>
     4b2:	a904      	add	r1, sp, #16
     4b4:	4620      	mov	r0, r4
     4b6:	f001 fec5 	bl	2244 <String::indexOf(String const&) const>
     4ba:	4621      	mov	r1, r4
     4bc:	4603      	mov	r3, r0
     4be:	2200      	movs	r2, #0
     4c0:	a807      	add	r0, sp, #28
     4c2:	f001 fefd 	bl	22c0 <String::substring(unsigned int, unsigned int) const>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     4c6:	494d      	ldr	r1, [pc, #308]	; (5fc <ProcessCommand(String)+0x158>)
     4c8:	a807      	add	r0, sp, #28
     4ca:	f001 fe89 	bl	21e0 <String::equals(char const*) const>
    if (command == "setDac") {
     4ce:	2800      	cmp	r0, #0
     4d0:	d040      	beq.n	554 <ProcessCommand(String)+0xb0>
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     4d2:	a807      	add	r0, sp, #28
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     4d4:	ae01      	add	r6, sp, #4
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     4d6:	f001 fd9f 	bl	2018 <String::~String()>
     4da:	a804      	add	r0, sp, #16
     4dc:	f001 fd9c 	bl	2018 <String::~String()>
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     4e0:	4945      	ldr	r1, [pc, #276]	; (5f8 <ProcessCommand(String)+0x154>)
     4e2:	a807      	add	r0, sp, #28
     4e4:	f001 fd4a 	bl	1f7c <String::String(char const*)>
     4e8:	a907      	add	r1, sp, #28
     4ea:	4620      	mov	r0, r4
     4ec:	f001 feaa 	bl	2244 <String::indexOf(String const&) const>
     4f0:	4621      	mov	r1, r4
     4f2:	1c42      	adds	r2, r0, #1
     4f4:	4630      	mov	r0, r6
     4f6:	f001 feb7 	bl	2268 <String::substring(unsigned int) const>
     4fa:	a807      	add	r0, sp, #28
     4fc:	f001 fd8c 	bl	2018 <String::~String()>
    switch (command) {
        case Command::INVALID:
            Serial.println("Invalid command");
            break;
        case Command::SETDAC:
            dacValue = args.toInt();
     500:	4630      	mov	r0, r6
     502:	f001 ff07 	bl	2314 <String::toInt() const>
     506:	4c3e      	ldr	r4, [pc, #248]	; (600 <ProcessCommand(String)+0x15c>)
     508:	b281      	uxth	r1, r0
            dac.setVoltage(dacValue, false);
     50a:	2200      	movs	r2, #0
     50c:	4b3d      	ldr	r3, [pc, #244]	; (604 <ProcessCommand(String)+0x160>)
     50e:	483e      	ldr	r0, [pc, #248]	; (608 <ProcessCommand(String)+0x164>)
            dacValue = args.toInt();
     510:	8021      	strh	r1, [r4, #0]
            dac.setVoltage(dacValue, false);
     512:	f001 fc25 	bl	1d60 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
	StringSumHelper(const char *p) : String(p) {}
     516:	493d      	ldr	r1, [pc, #244]	; (60c <ProcessCommand(String)+0x168>)
     518:	a807      	add	r0, sp, #28
     51a:	f001 fd2f 	bl	1f7c <String::String(char const*)>
            Serial.println("DAC set to " + String(dacValue));
     51e:	220a      	movs	r2, #10
     520:	8821      	ldrh	r1, [r4, #0]
            break;
        case Command::SETLA:
            myServo.goalPosition(LA_ID_NUM, args.toInt());
            Serial.println("Linear Actuator set to " + String(dacValue));
     522:	a804      	add	r0, sp, #16
     524:	f001 fdb4 	bl	2090 <String::String(int, unsigned char)>
     528:	a904      	add	r1, sp, #16
     52a:	a807      	add	r0, sp, #28
     52c:	f001 fe50 	bl	21d0 <operator+(StringSumHelper const&, String const&)>
     530:	4601      	mov	r1, r0
     532:	4837      	ldr	r0, [pc, #220]	; (610 <ProcessCommand(String)+0x16c>)
     534:	f001 fca2 	bl	1e7c <Print::print(String const&)>
     538:	4835      	ldr	r0, [pc, #212]	; (610 <ProcessCommand(String)+0x16c>)
     53a:	f001 fcc5 	bl	1ec8 <Print::println()>
     53e:	a804      	add	r0, sp, #16
     540:	f001 fd6a 	bl	2018 <String::~String()>
class StringSumHelper : public String
     544:	a807      	add	r0, sp, #28
     546:	f001 fd67 	bl	2018 <String::~String()>
            break;
    }
     54a:	4630      	mov	r0, r6
     54c:	f001 fd64 	bl	2018 <String::~String()>
     550:	b00a      	add	sp, #40	; 0x28
     552:	bd70      	pop	{r4, r5, r6, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     554:	4605      	mov	r5, r0
     556:	492f      	ldr	r1, [pc, #188]	; (614 <ProcessCommand(String)+0x170>)
     558:	a807      	add	r0, sp, #28
     55a:	f001 fe41 	bl	21e0 <String::equals(char const*) const>
    } else if (command == "setLA") {
     55e:	bb18      	cbnz	r0, 5a8 <ProcessCommand(String)+0x104>
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     560:	a807      	add	r0, sp, #28
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     562:	ae01      	add	r6, sp, #4
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     564:	f001 fd58 	bl	2018 <String::~String()>
     568:	a804      	add	r0, sp, #16
     56a:	f001 fd55 	bl	2018 <String::~String()>
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     56e:	a807      	add	r0, sp, #28
     570:	4921      	ldr	r1, [pc, #132]	; (5f8 <ProcessCommand(String)+0x154>)
     572:	f001 fd03 	bl	1f7c <String::String(char const*)>
     576:	a907      	add	r1, sp, #28
     578:	4620      	mov	r0, r4
     57a:	f001 fe63 	bl	2244 <String::indexOf(String const&) const>
     57e:	4602      	mov	r2, r0
     580:	4621      	mov	r1, r4
     582:	4630      	mov	r0, r6
     584:	3201      	adds	r2, #1
     586:	f001 fe6f 	bl	2268 <String::substring(unsigned int) const>
     58a:	a807      	add	r0, sp, #28
     58c:	f001 fd44 	bl	2018 <String::~String()>
     590:	210f      	movs	r1, #15
     592:	4821      	ldr	r0, [pc, #132]	; (618 <ProcessCommand(String)+0x174>)
     594:	f003 fc84 	bl	3ea0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     598:	481d      	ldr	r0, [pc, #116]	; (610 <ProcessCommand(String)+0x16c>)
     59a:	f001 fc95 	bl	1ec8 <Print::println()>
     59e:	4630      	mov	r0, r6
     5a0:	f001 fd3a 	bl	2018 <String::~String()>
     5a4:	b00a      	add	sp, #40	; 0x28
     5a6:	bd70      	pop	{r4, r5, r6, pc}
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     5a8:	a807      	add	r0, sp, #28
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     5aa:	ae01      	add	r6, sp, #4
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     5ac:	f001 fd34 	bl	2018 <String::~String()>
     5b0:	a804      	add	r0, sp, #16
     5b2:	f001 fd31 	bl	2018 <String::~String()>
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     5b6:	4910      	ldr	r1, [pc, #64]	; (5f8 <ProcessCommand(String)+0x154>)
     5b8:	a807      	add	r0, sp, #28
     5ba:	f001 fcdf 	bl	1f7c <String::String(char const*)>
     5be:	a907      	add	r1, sp, #28
     5c0:	4620      	mov	r0, r4
     5c2:	f001 fe3f 	bl	2244 <String::indexOf(String const&) const>
     5c6:	4621      	mov	r1, r4
     5c8:	1c42      	adds	r2, r0, #1
     5ca:	4630      	mov	r0, r6
     5cc:	f001 fe4c 	bl	2268 <String::substring(unsigned int) const>
     5d0:	a807      	add	r0, sp, #28
     5d2:	f001 fd21 	bl	2018 <String::~String()>
            myServo.goalPosition(LA_ID_NUM, args.toInt());
     5d6:	4630      	mov	r0, r6
     5d8:	f001 fe9c 	bl	2314 <String::toInt() const>
     5dc:	4629      	mov	r1, r5
     5de:	4602      	mov	r2, r0
     5e0:	480e      	ldr	r0, [pc, #56]	; (61c <ProcessCommand(String)+0x178>)
     5e2:	f000 fdc7 	bl	1174 <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     5e6:	490e      	ldr	r1, [pc, #56]	; (620 <ProcessCommand(String)+0x17c>)
     5e8:	a807      	add	r0, sp, #28
     5ea:	f001 fcc7 	bl	1f7c <String::String(char const*)>
            Serial.println("Linear Actuator set to " + String(dacValue));
     5ee:	4b04      	ldr	r3, [pc, #16]	; (600 <ProcessCommand(String)+0x15c>)
     5f0:	220a      	movs	r2, #10
     5f2:	8819      	ldrh	r1, [r3, #0]
     5f4:	e795      	b.n	522 <ProcessCommand(String)+0x7e>
     5f6:	bf00      	nop
     5f8:	200003f0 	.word	0x200003f0
     5fc:	20000370 	.word	0x20000370
     600:	200017c2 	.word	0x200017c2
     604:	00061a80 	.word	0x00061a80
     608:	20002048 	.word	0x20002048
     60c:	200003cc 	.word	0x200003cc
     610:	20000d90 	.word	0x20000d90
     614:	20000378 	.word	0x20000378
     618:	200003bc 	.word	0x200003bc
     61c:	20002080 	.word	0x20002080
     620:	200003d8 	.word	0x200003d8

00000624 <loop>:
void loop () {
     624:	b500      	push	{lr}
     626:	b087      	sub	sp, #28
        virtual int available() { return usb_serial_available(); }
     628:	f003 fbd0 	bl	3dcc <usb_serial_available>
    if (Serial.available() > 0) {
     62c:	2800      	cmp	r0, #0
     62e:	dd14      	ble.n	65a <loop+0x36>
        String serialInput = Serial.readStringUntil('\n');
     630:	2300      	movs	r3, #0
     632:	220a      	movs	r2, #10
     634:	4912      	ldr	r1, [pc, #72]	; (680 <loop+0x5c>)
     636:	4668      	mov	r0, sp
     638:	f001 fc64 	bl	1f04 <Stream::readStringUntil(char, unsigned int)>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     63c:	f003 fc64 	bl	3f08 <usb_serial_flush_output>
        ProcessCommand(serialInput);
     640:	4669      	mov	r1, sp
     642:	a803      	add	r0, sp, #12
     644:	f001 fcb8 	bl	1fb8 <String::String(String const&)>
     648:	a803      	add	r0, sp, #12
     64a:	f7ff ff2b 	bl	4a4 <ProcessCommand(String)>
     64e:	a803      	add	r0, sp, #12
     650:	f001 fce2 	bl	2018 <String::~String()>
    }
     654:	4668      	mov	r0, sp
     656:	f001 fcdf 	bl	2018 <String::~String()>
     65a:	4a0a      	ldr	r2, [pc, #40]	; (684 <loop+0x60>)
    if (printTimer < millis()) {
     65c:	4b0a      	ldr	r3, [pc, #40]	; (688 <loop+0x64>)
     65e:	6811      	ldr	r1, [r2, #0]
     660:	681a      	ldr	r2, [r3, #0]
     662:	428a      	cmp	r2, r1
     664:	d302      	bcc.n	66c <loop+0x48>
}
     666:	b007      	add	sp, #28
     668:	f85d fb04 	ldr.w	pc, [sp], #4
        printTimer += printTimerInterval;
     66c:	4907      	ldr	r1, [pc, #28]	; (68c <loop+0x68>)
     66e:	6809      	ldr	r1, [r1, #0]
     670:	440a      	add	r2, r1
     672:	601a      	str	r2, [r3, #0]
}
     674:	b007      	add	sp, #28
     676:	f85d eb04 	ldr.w	lr, [sp], #4
        PrintOutput();
     67a:	f7ff bdd1 	b.w	220 <PrintOutput()>
     67e:	bf00      	nop
     680:	20000d90 	.word	0x20000d90
     684:	20002b34 	.word	0x20002b34
     688:	20002ae0 	.word	0x20002ae0
     68c:	200017a8 	.word	0x200017a8

00000690 <_GLOBAL__sub_I_myServo>:
     690:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     692:	4c0a      	ldr	r4, [pc, #40]	; (6bc <_GLOBAL__sub_I_myServo+0x2c>)
     694:	2301      	movs	r3, #1
     696:	2210      	movs	r2, #16
     698:	4909      	ldr	r1, [pc, #36]	; (6c0 <_GLOBAL__sub_I_myServo+0x30>)
     69a:	4620      	mov	r0, r4
     69c:	f000 fafe 	bl	c9c <PA12::PA12(HardwareSerial*, int, bool)>
     6a0:	4a08      	ldr	r2, [pc, #32]	; (6c4 <_GLOBAL__sub_I_myServo+0x34>)
     6a2:	4909      	ldr	r1, [pc, #36]	; (6c8 <_GLOBAL__sub_I_myServo+0x38>)
     6a4:	4620      	mov	r0, r4
     6a6:	f004 f98b 	bl	49c0 <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     6aa:	4808      	ldr	r0, [pc, #32]	; (6cc <_GLOBAL__sub_I_myServo+0x3c>)
     6ac:	f000 fe0a 	bl	12c4 <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     6b0:	4807      	ldr	r0, [pc, #28]	; (6d0 <_GLOBAL__sub_I_myServo+0x40>)
     6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_MCP4725 dac;
     6b6:	f001 bb33 	b.w	1d20 <Adafruit_MCP4725::Adafruit_MCP4725()>
     6ba:	bf00      	nop
     6bc:	20002080 	.word	0x20002080
     6c0:	20000da0 	.word	0x20000da0
     6c4:	200011c8 	.word	0x200011c8
     6c8:	00000c79 	.word	0x00000c79
     6cc:	20002070 	.word	0x20002070
     6d0:	20002048 	.word	0x20002048

000006d4 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     6d4:	2000      	movs	r0, #0
     6d6:	4770      	bx	lr

000006d8 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     6d8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     6dc:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     6e0:	1a10      	subs	r0, r2, r0
     6e2:	4770      	bx	lr

000006e4 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6e4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     6e8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     6ec:	429a      	cmp	r2, r3
     6ee:	d905      	bls.n	6fc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     6f0:	1c5a      	adds	r2, r3, #1
     6f2:	4403      	add	r3, r0
     6f4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     6f8:	7e98      	ldrb	r0, [r3, #26]
     6fa:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     6fc:	f04f 30ff 	mov.w	r0, #4294967295
	}
     700:	4770      	bx	lr
     702:	bf00      	nop

00000704 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     704:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     708:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     70c:	429a      	cmp	r2, r3
     70e:	d902      	bls.n	716 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     710:	4418      	add	r0, r3
     712:	7e80      	ldrb	r0, [r0, #26]
     714:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     716:	f04f 30ff 	mov.w	r0, #4294967295
	}
     71a:	4770      	bx	lr

0000071c <TwoWire::flush()>:
	virtual void flush(void) {
	}
     71c:	4770      	bx	lr
     71e:	bf00      	nop

00000720 <TwoWire::write(unsigned char)>:
{
     720:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     722:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     726:	b178      	cbz	r0, 748 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     728:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     72c:	2a88      	cmp	r2, #136	; 0x88
     72e:	d903      	bls.n	738 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     730:	2201      	movs	r2, #1
			return 0;
     732:	2000      	movs	r0, #0
     734:	605a      	str	r2, [r3, #4]
     736:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     738:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     73c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     73e:	441a      	add	r2, r3
     740:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     744:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     748:	4770      	bx	lr
     74a:	bf00      	nop

0000074c <TwoWire::write(unsigned char const*, unsigned int)>:
{
     74c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     74e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     752:	b90c      	cbnz	r4, 758 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     754:	4620      	mov	r0, r4
     756:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     758:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     75c:	4605      	mov	r5, r0
     75e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     762:	42a2      	cmp	r2, r4
     764:	d80d      	bhi.n	782 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     766:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     768:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     76c:	4622      	mov	r2, r4
     76e:	4418      	add	r0, r3
     770:	f002 f81e 	bl	27b0 <memcpy>
		txBufferLength += quantity;
     774:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     778:	4620      	mov	r0, r4
		txBufferLength += quantity;
     77a:	4423      	add	r3, r4
     77c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     780:	bd38      	pop	{r3, r4, r5, pc}
     782:	2201      	movs	r2, #1
     784:	6042      	str	r2, [r0, #4]
     786:	e7ef      	b.n	768 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00000788 <TwoWire::force_clock()>:
{
     788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     78c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     790:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     792:	7e01      	ldrb	r1, [r0, #24]
{
     794:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     796:	7e43      	ldrb	r3, [r0, #25]
{
     798:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     79a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     79e:	4a38      	ldr	r2, [pc, #224]	; (880 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     7a0:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7a4:	4f37      	ldr	r7, [pc, #220]	; (884 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     7a6:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     7a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     7ac:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     7b0:	0109      	lsls	r1, r1, #4
     7b2:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     7b4:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     7b8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     7bc:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     7c0:	011b      	lsls	r3, r3, #4
     7c2:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     7c4:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     7c6:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     7ca:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     7ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     7d2:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     7d4:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     7d6:	492c      	ldr	r1, [pc, #176]	; (888 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     7d8:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     7da:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     7de:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     7e0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     7e4:	686b      	ldr	r3, [r5, #4]
     7e6:	4333      	orrs	r3, r6
     7e8:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7ea:	4b28      	ldr	r3, [pc, #160]	; (88c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     7ec:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     7ee:	683a      	ldr	r2, [r7, #0]
     7f0:	fba3 3202 	umull	r3, r2, r3, r2
     7f4:	0c92      	lsrs	r2, r2, #18
     7f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     7fa:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     7fc:	684b      	ldr	r3, [r1, #4]
     7fe:	1b1b      	subs	r3, r3, r4
     800:	429a      	cmp	r2, r3
     802:	d8fb      	bhi.n	7fc <TwoWire::force_clock()+0x74>
     804:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     808:	4a1f      	ldr	r2, [pc, #124]	; (888 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     80a:	f8df e080 	ldr.w	lr, [pc, #128]	; 88c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
     80e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     812:	4203      	tst	r3, r0
     814:	d002      	beq.n	81c <TwoWire::force_clock()+0x94>
     816:	68ab      	ldr	r3, [r5, #8]
     818:	4233      	tst	r3, r6
     81a:	d12f      	bne.n	87c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
     81c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     820:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     822:	6839      	ldr	r1, [r7, #0]
     824:	fbae 3101 	umull	r3, r1, lr, r1
     828:	0c89      	lsrs	r1, r1, #18
     82a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     82e:	6853      	ldr	r3, [r2, #4]
     830:	1b1b      	subs	r3, r3, r4
     832:	4299      	cmp	r1, r3
     834:	d8fb      	bhi.n	82e <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
     836:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     83a:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     83c:	6839      	ldr	r1, [r7, #0]
     83e:	fbae 3101 	umull	r3, r1, lr, r1
     842:	0c89      	lsrs	r1, r1, #18
     844:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     848:	6853      	ldr	r3, [r2, #4]
     84a:	1b1b      	subs	r3, r3, r4
     84c:	4299      	cmp	r1, r3
     84e:	d8fb      	bhi.n	848 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     850:	f1bc 0c01 	subs.w	ip, ip, #1
     854:	d1db      	bne.n	80e <TwoWire::force_clock()+0x86>
	bool ret = false;
     856:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     858:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     85c:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     85e:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     862:	68db      	ldr	r3, [r3, #12]
     864:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     868:	f899 3019 	ldrb.w	r3, [r9, #25]
     86c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     870:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     874:	6013      	str	r3, [r2, #0]
}
     876:	b003      	add	sp, #12
     878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     87c:	2001      	movs	r0, #1
     87e:	e7eb      	b.n	858 <TwoWire::force_clock()+0xd0>
     880:	20000778 	.word	0x20000778
     884:	20000d8c 	.word	0x20000d8c
     888:	e0001000 	.word	0xe0001000
     88c:	431bde83 	.word	0x431bde83

00000890 <TwoWire::wait_idle()>:
	return systick_millis_count;
     890:	4a0e      	ldr	r2, [pc, #56]	; (8cc <TwoWire::wait_idle()+0x3c>)
{
     892:	b510      	push	{r4, lr}
     894:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     896:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     898:	e005      	b.n	8a6 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     89a:	01db      	lsls	r3, r3, #7
     89c:	d407      	bmi.n	8ae <TwoWire::wait_idle()+0x1e>
     89e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     8a0:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     8a2:	2b10      	cmp	r3, #16
     8a4:	d808      	bhi.n	8b8 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     8a6:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     8a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     8ac:	d1f5      	bne.n	89a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     8ae:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     8b2:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     8b4:	6163      	str	r3, [r4, #20]
}
     8b6:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     8b8:	f7ff ff66 	bl	788 <TwoWire::force_clock()>
     8bc:	2800      	cmp	r0, #0
     8be:	d0fa      	beq.n	8b6 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     8c0:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     8c4:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     8c6:	6163      	str	r3, [r4, #20]
	return true;
     8c8:	e7f5      	b.n	8b6 <TwoWire::wait_idle()+0x26>
     8ca:	bf00      	nop
     8cc:	20002b34 	.word	0x20002b34

000008d0 <TwoWire::endTransmission(unsigned char)>:
{
     8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     8d4:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     8d8:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
     8da:	f1ba 0f00 	cmp.w	sl, #0
     8de:	d04f      	beq.n	980 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
     8e0:	4681      	mov	r9, r0
     8e2:	4688      	mov	r8, r1
     8e4:	f7ff ffd4 	bl	890 <TwoWire::wait_idle()>
     8e8:	2800      	cmp	r0, #0
     8ea:	d049      	beq.n	980 <TwoWire::endTransmission(unsigned char)+0xb0>
     8ec:	4e37      	ldr	r6, [pc, #220]	; (9cc <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     8ee:	2400      	movs	r4, #0
     8f0:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     8f2:	e018      	b.n	926 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
     8f4:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     8f6:	0519      	lsls	r1, r3, #20
     8f8:	d451      	bmi.n	99e <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
     8fa:	04da      	lsls	r2, r3, #19
     8fc:	d455      	bmi.n	9aa <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
     8fe:	0558      	lsls	r0, r3, #21
     900:	d459      	bmi.n	9b6 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     902:	0499      	lsls	r1, r3, #18
     904:	d441      	bmi.n	98a <TwoWire::endTransmission(unsigned char)+0xba>
     906:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     908:	1bd2      	subs	r2, r2, r7
     90a:	2a32      	cmp	r2, #50	; 0x32
     90c:	d83d      	bhi.n	98a <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
     90e:	4554      	cmp	r4, sl
     910:	d907      	bls.n	922 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
     912:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     914:	0752      	lsls	r2, r2, #29
     916:	d104      	bne.n	922 <TwoWire::endTransmission(unsigned char)+0x52>
     918:	059b      	lsls	r3, r3, #22
     91a:	d455      	bmi.n	9c8 <TwoWire::endTransmission(unsigned char)+0xf8>
     91c:	f1b8 0f00 	cmp.w	r8, #0
     920:	d052      	beq.n	9c8 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
     922:	f003 fb3b 	bl	3f9c <yield>
		if (tx_index <= tx_len) {
     926:	4554      	cmp	r4, sl
     928:	d8e4      	bhi.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     92a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     92c:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     92e:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     932:	d4df      	bmi.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
     934:	e013      	b.n	95e <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     936:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     93a:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     93c:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     93e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     942:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     944:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     946:	d01e      	beq.n	986 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
     948:	458a      	cmp	sl, r1
				fifo_used++;
     94a:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     94e:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     952:	d90e      	bls.n	972 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     954:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     958:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     95a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     95c:	d0ca      	beq.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
     95e:	2101      	movs	r1, #1
				if (tx_index == 0) {
     960:	2c00      	cmp	r4, #0
     962:	d0e8      	beq.n	936 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     964:	4621      	mov	r1, r4
				fifo_used++;
     966:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     968:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     96a:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     96c:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     970:	d8f0      	bhi.n	954 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     972:	f1b8 0f00 	cmp.w	r8, #0
     976:	d0bd      	beq.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
     978:	f44f 7300 	mov.w	r3, #512	; 0x200
     97c:	662b      	str	r3, [r5, #96]	; 0x60
					break;
     97e:	e7b9      	b.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
     980:	2004      	movs	r0, #4
}
     982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     986:	2401      	movs	r4, #1
     988:	e7b4      	b.n	8f4 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     98a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     98c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     990:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     992:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     996:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     998:	662a      	str	r2, [r5, #96]	; 0x60
}
     99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     99e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     9a0:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     9a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     9a6:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     9a8:	e7eb      	b.n	982 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     9aa:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
     9ac:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     9ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     9b2:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
     9b4:	e7e5      	b.n	982 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     9b6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     9b8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     9bc:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     9be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     9c2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     9c4:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
     9c6:	e7dc      	b.n	982 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
     9c8:	2000      	movs	r0, #0
     9ca:	e7da      	b.n	982 <TwoWire::endTransmission(unsigned char)+0xb2>
     9cc:	20002b34 	.word	0x20002b34

000009d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9d4:	4683      	mov	fp, r0
     9d6:	460c      	mov	r4, r1
     9d8:	4615      	mov	r5, r2
     9da:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     9dc:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
     9e0:	f7ff ff56 	bl	890 <TwoWire::wait_idle()>
     9e4:	2800      	cmp	r0, #0
     9e6:	f000 809e 	beq.w	b26 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
     9ea:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
     9ec:	2d01      	cmp	r5, #1
     9ee:	f8df 813c 	ldr.w	r8, [pc, #316]	; b2c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     9f2:	f240 4601 	movw	r6, #1025	; 0x401
     9f6:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
     9f8:	f04f 0100 	mov.w	r1, #0
     9fc:	bf38      	it	cc
     9fe:	2501      	movcc	r5, #1
     a00:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     a04:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a06:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
     a08:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     a0c:	e020      	b.n	a50 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
     a0e:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     a12:	2b87      	cmp	r3, #135	; 0x87
     a14:	d93f      	bls.n	a96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
     a16:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
     a1a:	0510      	lsls	r0, r2, #20
     a1c:	d45a      	bmi.n	ad4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     a1e:	f412 5f10 	tst.w	r2, #9216	; 0x2400
     a22:	d170      	bne.n	b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
     a24:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     a28:	eba3 0309 	sub.w	r3, r3, r9
     a2c:	2b32      	cmp	r3, #50	; 0x32
     a2e:	d86a      	bhi.n	b06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
     a30:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     a34:	42ab      	cmp	r3, r5
     a36:	d309      	bcc.n	a4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     a38:	2c02      	cmp	r4, #2
     a3a:	d907      	bls.n	a4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
     a3c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     a40:	0759      	lsls	r1, r3, #29
     a42:	d103      	bne.n	a4c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     a44:	0593      	lsls	r3, r2, #22
     a46:	d44b      	bmi.n	ae0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
     a48:	2f00      	cmp	r7, #0
     a4a:	d049      	beq.n	ae0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
     a4c:	f003 faa6 	bl	3f9c <yield>
		if (tx_state < 3) {
     a50:	2c02      	cmp	r4, #2
     a52:	d8dc      	bhi.n	a0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     a54:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
     a58:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
     a5c:	075b      	lsls	r3, r3, #29
     a5e:	d4d6      	bmi.n	a0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     a60:	1e68      	subs	r0, r5, #1
     a62:	4422      	add	r2, r4
     a64:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
     a68:	b94c      	cbnz	r4, a7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a6a:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
     a6e:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
     a70:	1b13      	subs	r3, r2, r4
     a72:	2b03      	cmp	r3, #3
     a74:	d8cb      	bhi.n	a0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
     a76:	2c02      	cmp	r4, #2
     a78:	d8c9      	bhi.n	a0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
     a7a:	2c00      	cmp	r4, #0
     a7c:	d0f5      	beq.n	a6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
     a7e:	2c01      	cmp	r4, #1
     a80:	d037      	beq.n	af2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     a82:	b11f      	cbz	r7, a8c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
     a84:	f44f 7300 	mov.w	r3, #512	; 0x200
     a88:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
     a8c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
     a90:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
     a92:	2b87      	cmp	r3, #135	; 0x87
     a94:	d8bf      	bhi.n	a16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     a96:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     a9a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     a9e:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     aa2:	d0b8      	beq.n	a16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
     aa4:	1c59      	adds	r1, r3, #1
     aa6:	449c      	add	ip, r3
     aa8:	3319      	adds	r3, #25
     aaa:	b2c9      	uxtb	r1, r1
     aac:	fa5f fc8c 	uxtb.w	ip, ip
     ab0:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
     ab4:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     ab8:	1c4a      	adds	r2, r1, #1
     aba:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
     abc:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     ac0:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
     ac2:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     ac6:	d0a6      	beq.n	a16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
     ac8:	2989      	cmp	r1, #137	; 0x89
     aca:	d1f3      	bne.n	ab4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
     acc:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
     ad0:	0510      	lsls	r0, r2, #20
     ad2:	d5a4      	bpl.n	a1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     ad4:	f8da 3010 	ldr.w	r3, [sl, #16]
     ad8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     adc:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     ae0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     ae4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     ae8:	d106      	bne.n	af8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
     aea:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
     aee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     af2:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
     af6:	e7ba      	b.n	a6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     af8:	f8da 3010 	ldr.w	r3, [sl, #16]
     afc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b00:	f8ca 3010 	str.w	r3, [sl, #16]
     b04:	e7f1      	b.n	aea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b06:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     b12:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     b16:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b1a:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b1e:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     b22:	d0e2      	beq.n	aea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
     b24:	e7e8      	b.n	af8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
     b26:	2004      	movs	r0, #4
}
     b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b2c:	20002b34 	.word	0x20002b34

00000b30 <TwoWire::isr()>:
{
     b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     b32:	6906      	ldr	r6, [r0, #16]
{
     b34:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
     b36:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
     b3a:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
     b3e:	d001      	beq.n	b44 <TwoWire::isr()+0x14>
     b40:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     b44:	07a8      	lsls	r0, r5, #30
     b46:	d50b      	bpl.n	b60 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
     b48:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
     b4c:	0411      	lsls	r1, r2, #16
     b4e:	d53d      	bpl.n	bcc <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
     b50:	2300      	movs	r3, #0
     b52:	2101      	movs	r1, #1
     b54:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
     b58:	4423      	add	r3, r4
     b5a:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
     b5e:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     b60:	07ea      	lsls	r2, r5, #31
     b62:	d510      	bpl.n	b86 <TwoWire::isr()+0x56>
		if (!transmitting) {
     b64:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
     b68:	b1f7      	cbz	r7, ba8 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
     b6a:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
     b6e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
     b72:	42bb      	cmp	r3, r7
     b74:	d926      	bls.n	bc4 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
     b76:	1c7b      	adds	r3, r7, #1
     b78:	4427      	add	r7, r4
     b7a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
     b7e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
     b82:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
     b86:	05ab      	lsls	r3, r5, #22
     b88:	d50d      	bpl.n	ba6 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
     b8a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
     b8e:	b118      	cbz	r0, b98 <TwoWire::isr()+0x68>
     b90:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     b94:	b103      	cbz	r3, b98 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
     b96:	4798      	blx	r3
		rxBufferIndex = 0;
     b98:	2300      	movs	r3, #0
     b9a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
     b9e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
     ba2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
     ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
     ba8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
     bac:	b103      	cbz	r3, bb0 <TwoWire::isr()+0x80>
				(*user_onRequest)();
     bae:	4798      	blx	r3
			txBufferIndex = 0;
     bb0:	2300      	movs	r3, #0
     bb2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
     bb6:	2301      	movs	r3, #1
     bb8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
     bbc:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
     bc0:	42bb      	cmp	r3, r7
     bc2:	d8d8      	bhi.n	b76 <TwoWire::isr()+0x46>
			port->STDR = 0;
     bc4:	2300      	movs	r3, #0
     bc6:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
     bca:	e7dc      	b.n	b86 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
     bcc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
     bd0:	2b87      	cmp	r3, #135	; 0x87
     bd2:	d8c5      	bhi.n	b60 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
     bd4:	1c59      	adds	r1, r3, #1
     bd6:	b2c9      	uxtb	r1, r1
     bd8:	e7be      	b.n	b58 <TwoWire::isr()+0x28>
     bda:	bf00      	nop

00000bdc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
     bdc:	4801      	ldr	r0, [pc, #4]	; (be4 <lpi2c1_isr()+0x8>)
     bde:	f7ff bfa7 	b.w	b30 <TwoWire::isr()>
     be2:	bf00      	nop
     be4:	20000e00 	.word	0x20000e00

00000be8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
     be8:	4801      	ldr	r0, [pc, #4]	; (bf0 <lpi2c3_isr()+0x8>)
     bea:	f7ff bfa1 	b.w	b30 <TwoWire::isr()>
     bee:	bf00      	nop
     bf0:	20000f40 	.word	0x20000f40

00000bf4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
     bf4:	4801      	ldr	r0, [pc, #4]	; (bfc <lpi2c4_isr()+0x8>)
     bf6:	f7ff bf9b 	b.w	b30 <TwoWire::isr()>
     bfa:	bf00      	nop
     bfc:	20001080 	.word	0x20001080

00000c00 <TwoWire::setClock(unsigned long)>:
{
     c00:	b410      	push	{r4}
	if (frequency < 400000) {
     c02:	4c14      	ldr	r4, [pc, #80]	; (c54 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
     c04:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     c06:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
     c08:	42a1      	cmp	r1, r4
	port->MCR = 0;
     c0a:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
     c0c:	d814      	bhi.n	c38 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
     c0e:	4c12      	ldr	r4, [pc, #72]	; (c58 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     c10:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
     c12:	4912      	ldr	r1, [pc, #72]	; (c5c <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
     c14:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
     c18:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
     c1a:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
     c1c:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
     c1e:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
     c20:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
     c22:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
     c28:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
     c2a:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
     c2c:	6218      	str	r0, [r3, #32]
}
     c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
     c32:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
     c34:	611a      	str	r2, [r3, #16]
}
     c36:	4770      	bx	lr
	} else if (frequency < 1000000) {
     c38:	4809      	ldr	r0, [pc, #36]	; (c60 <TwoWire::setClock(unsigned long)+0x60>)
     c3a:	4281      	cmp	r1, r0
     c3c:	d907      	bls.n	c4e <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
     c3e:	4c09      	ldr	r4, [pc, #36]	; (c64 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
     c40:	4809      	ldr	r0, [pc, #36]	; (c68 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
     c42:	490a      	ldr	r1, [pc, #40]	; (c6c <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
     c44:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
     c46:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
     c48:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
     c4a:	62d9      	str	r1, [r3, #44]	; 0x2c
     c4c:	e7e8      	b.n	c20 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
     c4e:	4c08      	ldr	r4, [pc, #32]	; (c70 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
     c50:	4808      	ldr	r0, [pc, #32]	; (c74 <TwoWire::setClock(unsigned long)+0x74>)
     c52:	e7f6      	b.n	c42 <TwoWire::setClock(unsigned long)+0x42>
     c54:	00061a7f 	.word	0x00061a7f
     c58:	1928373b 	.word	0x1928373b
     c5c:	05050bb8 	.word	0x05050bb8
     c60:	000f423f 	.word	0x000f423f
     c64:	0407090a 	.word	0x0407090a
     c68:	01010960 	.word	0x01010960
     c6c:	00057f00 	.word	0x00057f00
     c70:	0c121a1c 	.word	0x0c121a1c
     c74:	02020e10 	.word	0x02020e10

00000c78 <PA12::~PA12()>:
}
     c78:	4770      	bx	lr
     c7a:	bf00      	nop

00000c7c <PA12::~PA12()>:
PA12::~PA12() {
     c7c:	b510      	push	{r4, lr}
     c7e:	4604      	mov	r4, r0
}
     c80:	f640 2148 	movw	r1, #2632	; 0xa48
     c84:	f001 fe30 	bl	28e8 <operator delete(void*, unsigned int)>
     c88:	4620      	mov	r0, r4
     c8a:	bd10      	pop	{r4, pc}

00000c8c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
     c8c:	f003 b89e 	b.w	3dcc <usb_serial_available>

00000c90 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
     c90:	f003 b8e0 	b.w	3e54 <usb_serial_getchar>

00000c94 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     c94:	4608      	mov	r0, r1
     c96:	f003 b8ed 	b.w	3e74 <usb_serial_putchar>
     c9a:	bf00      	nop

00000c9c <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
     c9c:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
     c9e:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
     ca2:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
     ca4:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
     ca6:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
     ca8:	4a02      	ldr	r2, [pc, #8]	; (cb4 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
     caa:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
     cac:	e9c0 2300 	strd	r2, r3, [r0]
}
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop
     cb4:	200004b4 	.word	0x200004b4

00000cb8 <PA12::begin(int)>:
void PA12::begin(int baud){
     cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cba:	4604      	mov	r4, r0
     cbc:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
     cbe:	7b00      	ldrb	r0, [r0, #12]
     cc0:	2101      	movs	r1, #1
     cc2:	f001 fd35 	bl	2730 <pinMode>
	if(PA12_Serial_Type)
     cc6:	6866      	ldr	r6, [r4, #4]
     cc8:	b30e      	cbz	r6, d0e <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     cca:	68a6      	ldr	r6, [r4, #8]
     ccc:	4628      	mov	r0, r5
     cce:	f000 faa3 	bl	1218 <irp_get_baudrate>
     cd2:	4601      	mov	r1, r0
     cd4:	4630      	mov	r0, r6
     cd6:	f000 facf 	bl	1278 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
     cda:	7c21      	ldrb	r1, [r4, #16]
     cdc:	7b20      	ldrb	r0, [r4, #12]
     cde:	f001 fceb 	bl	26b8 <digitalWrite>
	mIRPtxrxStatus = 0;
     ce2:	2100      	movs	r1, #0
	SmartDelayFlag=1;
     ce4:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
     ce6:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
     ce8:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
     cea:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
     cee:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
     cf2:	2104      	movs	r1, #4
	SmartDelayFlag=1;
     cf4:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
     cf8:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
     cfc:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
     d00:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
     d04:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
     d08:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
     d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     d0e:	68a7      	ldr	r7, [r4, #8]
     d10:	4628      	mov	r0, r5
     d12:	683b      	ldr	r3, [r7, #0]
     d14:	69dd      	ldr	r5, [r3, #28]
     d16:	f000 fa7f 	bl	1218 <irp_get_baudrate>
     d1a:	4632      	mov	r2, r6
     d1c:	4601      	mov	r1, r0
     d1e:	4638      	mov	r0, r7
     d20:	47a8      	blx	r5
     d22:	e7da      	b.n	cda <PA12::begin(int)+0x22>

00000d24 <PA12::readRaw()>:
int PA12::readRaw(void){
     d24:	b510      	push	{r4, lr}
     d26:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
     d28:	6880      	ldr	r0, [r0, #8]
     d2a:	4a0c      	ldr	r2, [pc, #48]	; (d5c <PA12::readRaw()+0x38>)
     d2c:	6803      	ldr	r3, [r0, #0]
     d2e:	691b      	ldr	r3, [r3, #16]
     d30:	4293      	cmp	r3, r2
     d32:	d10d      	bne.n	d50 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
     d34:	f003 f84a 	bl	3dcc <usb_serial_available>
     d38:	b148      	cbz	r0, d4e <PA12::readRaw()+0x2a>
     d3a:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
     d3c:	4a08      	ldr	r2, [pc, #32]	; (d60 <PA12::readRaw()+0x3c>)
     d3e:	6803      	ldr	r3, [r0, #0]
     d40:	695b      	ldr	r3, [r3, #20]
     d42:	4293      	cmp	r3, r2
     d44:	d106      	bne.n	d54 <PA12::readRaw()+0x30>
}
     d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
     d4a:	f003 b883 	b.w	3e54 <usb_serial_getchar>
     d4e:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
     d50:	4798      	blx	r3
     d52:	e7f1      	b.n	d38 <PA12::readRaw()+0x14>
}
     d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
     d58:	4718      	bx	r3
     d5a:	bf00      	nop
     d5c:	00000c8d 	.word	0x00000c8d
     d60:	00000c91 	.word	0x00000c91

00000d64 <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	4d0e      	ldr	r5, [pc, #56]	; (da0 <PA12::clearBuffer()+0x3c>)
     d68:	4604      	mov	r4, r0
     d6a:	4e0e      	ldr	r6, [pc, #56]	; (da4 <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
     d6c:	68a0      	ldr	r0, [r4, #8]
     d6e:	6803      	ldr	r3, [r0, #0]
     d70:	691b      	ldr	r3, [r3, #16]
     d72:	42ab      	cmp	r3, r5
     d74:	d10e      	bne.n	d94 <PA12::clearBuffer()+0x30>
        virtual int available() { return usb_serial_available(); }
     d76:	f003 f829 	bl	3dcc <usb_serial_available>
	while((this->available()))
     d7a:	b170      	cbz	r0, d9a <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
     d7c:	68a0      	ldr	r0, [r4, #8]
     d7e:	6803      	ldr	r3, [r0, #0]
     d80:	695b      	ldr	r3, [r3, #20]
     d82:	42b3      	cmp	r3, r6
     d84:	d10a      	bne.n	d9c <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
     d86:	f003 f865 	bl	3e54 <usb_serial_getchar>
		return PA12_Serial->available();
     d8a:	68a0      	ldr	r0, [r4, #8]
     d8c:	6803      	ldr	r3, [r0, #0]
     d8e:	691b      	ldr	r3, [r3, #16]
     d90:	42ab      	cmp	r3, r5
     d92:	d0f0      	beq.n	d76 <PA12::clearBuffer()+0x12>
     d94:	4798      	blx	r3
	while((this->available()))
     d96:	2800      	cmp	r0, #0
     d98:	d1f0      	bne.n	d7c <PA12::clearBuffer()+0x18>
}
     d9a:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
     d9c:	4798      	blx	r3
     d9e:	e7e5      	b.n	d6c <PA12::clearBuffer()+0x8>
     da0:	00000c8d 	.word	0x00000c8d
     da4:	00000c91 	.word	0x00000c91

00000da8 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     dac:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
     dae:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     db0:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     db2:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
     db4:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
     db6:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
     dba:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     dbe:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
     dc0:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
     dc4:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
     dc8:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
     dcc:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     dd0:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
     dd4:	dd40      	ble.n	e58 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
     dd6:	f600 010c 	addw	r1, r0, #2060	; 0x80c
     dda:	00aa      	lsls	r2, r5, #2
     ddc:	f500 6085 	add.w	r0, r0, #1064	; 0x428
     de0:	f004 fd06 	bl	57f0 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     de4:	1dab      	adds	r3, r5, #6
     de6:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     dea:	2000      	movs	r0, #0
     dec:	2203      	movs	r2, #3
     dee:	e001      	b.n	df4 <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
     df0:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     df4:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
     df6:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     df8:	4293      	cmp	r3, r2
     dfa:	dcf9      	bgt.n	df0 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     dfc:	43c0      	mvns	r0, r0
     dfe:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e02:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     e04:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e08:	7b20      	ldrb	r0, [r4, #12]
     e0a:	f001 fc55 	bl	26b8 <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e0e:	2e00      	cmp	r6, #0
     e10:	dd17      	ble.n	e42 <PA12::txPacket(int, int, int)+0x9a>
     e12:	f204 480c 	addw	r8, r4, #1036	; 0x40c
     e16:	2500      	movs	r5, #0
     e18:	4f13      	ldr	r7, [pc, #76]	; (e68 <PA12::txPacket(int, int, int)+0xc0>)
     e1a:	e004      	b.n	e26 <PA12::txPacket(int, int, int)+0x7e>
     e1c:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     e1e:	f003 f829 	bl	3e74 <usb_serial_putchar>
     e22:	42ae      	cmp	r6, r5
     e24:	d00d      	beq.n	e42 <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
     e26:	68a2      	ldr	r2, [r4, #8]
     e28:	f858 0f04 	ldr.w	r0, [r8, #4]!
     e2c:	6813      	ldr	r3, [r2, #0]
     e2e:	b2c0      	uxtb	r0, r0
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	42bb      	cmp	r3, r7
     e34:	d0f2      	beq.n	e1c <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e36:	3501      	adds	r5, #1
PA12_Serial->write(value);
     e38:	4601      	mov	r1, r0
     e3a:	4610      	mov	r0, r2
     e3c:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e3e:	42ae      	cmp	r6, r5
     e40:	d1f1      	bne.n	e26 <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
     e42:	68a0      	ldr	r0, [r4, #8]
     e44:	6803      	ldr	r3, [r0, #0]
     e46:	68db      	ldr	r3, [r3, #12]
     e48:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
     e4a:	7b20      	ldrb	r0, [r4, #12]
     e4c:	7c61      	ldrb	r1, [r4, #17]
     e4e:	f001 fc33 	bl	26b8 <digitalWrite>
}
     e52:	4630      	mov	r0, r6
     e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e58:	1dab      	adds	r3, r5, #6
     e5a:	2b03      	cmp	r3, #3
     e5c:	dcc3      	bgt.n	de6 <PA12::txPacket(int, int, int)+0x3e>
     e5e:	f04f 30ff 	mov.w	r0, #4294967295
     e62:	2303      	movs	r3, #3
     e64:	e7cb      	b.n	dfe <PA12::txPacket(int, int, int)+0x56>
     e66:	bf00      	nop
     e68:	00000c95 	.word	0x00000c95

00000e6c <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
     e6c:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
     e6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e72:	4689      	mov	r9, r1
     e74:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
     e76:	d046      	beq.n	f06 <PA12::rxPacket(int)+0x9a>
     e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
     e7c:	4299      	cmp	r1, r3
     e7e:	d042      	beq.n	f06 <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
     e80:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
     e84:	f1b9 0f00 	cmp.w	r9, #0
     e88:	dd66      	ble.n	f58 <PA12::rxPacket(int)+0xec>
     e8a:	f104 0a10 	add.w	sl, r4, #16
     e8e:	3602      	adds	r6, #2
     e90:	2700      	movs	r7, #0
     e92:	4d5a      	ldr	r5, [pc, #360]	; (ffc <PA12::rxPacket(int)+0x190>)
     e94:	46d0      	mov	r8, sl
		ulCounter = 0;
     e96:	f04f 0b00 	mov.w	fp, #0
     e9a:	e007      	b.n	eac <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
     e9c:	f002 ff96 	bl	3dcc <usb_serial_available>
     ea0:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     ea2:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     ea6:	b963      	cbnz	r3, ec2 <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
     ea8:	45b3      	cmp	fp, r6
     eaa:	d02f      	beq.n	f0c <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
     eac:	68a0      	ldr	r0, [r4, #8]
     eae:	6803      	ldr	r3, [r0, #0]
     eb0:	691b      	ldr	r3, [r3, #16]
     eb2:	42ab      	cmp	r3, r5
     eb4:	d0f2      	beq.n	e9c <PA12::rxPacket(int)+0x30>
     eb6:	4798      	blx	r3
     eb8:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     eba:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     ebe:	2b00      	cmp	r3, #0
     ec0:	d0f2      	beq.n	ea8 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
     ec2:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
     ec4:	4620      	mov	r0, r4
     ec6:	f7ff ff2d 	bl	d24 <PA12::readRaw()>
     eca:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
     ece:	45b9      	cmp	r9, r7
     ed0:	d1e1      	bne.n	e96 <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     ed2:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     ed6:	f502 7382 	add.w	r3, r2, #260	; 0x104
     eda:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     ede:	29fe      	cmp	r1, #254	; 0xfe
     ee0:	d00e      	beq.n	f00 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
     ee2:	2f03      	cmp	r7, #3
     ee4:	dd0c      	ble.n	f00 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     ee6:	6963      	ldr	r3, [r4, #20]
     ee8:	2bff      	cmp	r3, #255	; 0xff
     eea:	d027      	beq.n	f3c <PA12::rxPacket(int)+0xd0>
     eec:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
     ef4:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
     ef6:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
     efa:	2700      	movs	r7, #0
				clearBuffer();
     efc:	f7ff ff32 	bl	d64 <PA12::clearBuffer()>
}
     f00:	4638      	mov	r0, r7
     f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
     f06:	f44f 3648 	mov.w	r6, #204800	; 0x32000
     f0a:	e7bb      	b.n	e84 <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     f0c:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     f10:	f502 7182 	add.w	r1, r2, #260	; 0x104
     f14:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
     f18:	29fe      	cmp	r1, #254	; 0xfe
     f1a:	d0f1      	beq.n	f00 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
     f1c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     f20:	d0df      	beq.n	ee2 <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f22:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
     f26:	461f      	mov	r7, r3
			clearBuffer();			
     f28:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f2e:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
     f32:	f7ff ff17 	bl	d64 <PA12::clearBuffer()>
}
     f36:	4638      	mov	r0, r7
     f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f3c:	69a3      	ldr	r3, [r4, #24]
     f3e:	2bff      	cmp	r3, #255	; 0xff
     f40:	d1d4      	bne.n	eec <PA12::rxPacket(int)+0x80>
     f42:	69e3      	ldr	r3, [r4, #28]
     f44:	2bff      	cmp	r3, #255	; 0xff
     f46:	d009      	beq.n	f5c <PA12::rxPacket(int)+0xf0>
     f48:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
     f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     f50:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f52:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
     f56:	e7cd      	b.n	ef4 <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
     f58:	2700      	movs	r7, #0
     f5a:	e7d1      	b.n	f00 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     f5c:	3204      	adds	r2, #4
     f5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
     f62:	685b      	ldr	r3, [r3, #4]
     f64:	428b      	cmp	r3, r1
     f66:	d02c      	beq.n	fc2 <PA12::rxPacket(int)+0x156>
     f68:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     f70:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
     f74:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
     f76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     f7a:	6852      	ldr	r2, [r2, #4]
     f7c:	428a      	cmp	r2, r1
     f7e:	d115      	bne.n	fac <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
     f80:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
     f84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     f88:	6951      	ldr	r1, [r2, #20]
     f8a:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
     f8e:	1aba      	subs	r2, r7, r2
     f90:	4291      	cmp	r1, r2
     f92:	d10b      	bne.n	fac <PA12::rxPacket(int)+0x140>
     f94:	f104 021c 	add.w	r2, r4, #28
     f98:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     f9c:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fa0:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     fa2:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fa4:	d1fa      	bne.n	f9c <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
     fa6:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
     fa8:	2bff      	cmp	r3, #255	; 0xff
     faa:	d0a9      	beq.n	f00 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     fac:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
     fb0:	4620      	mov	r0, r4
				return 0;
     fb2:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fb8:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
     fbc:	f7ff fed2 	bl	d64 <PA12::clearBuffer()>
				return 0;
     fc0:	e79e      	b.n	f00 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
     fc2:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
     fc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     fca:	6958      	ldr	r0, [r3, #20]
     fcc:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
     fd0:	1afb      	subs	r3, r7, r3
     fd2:	4298      	cmp	r0, r3
     fd4:	d1c8      	bne.n	f68 <PA12::rxPacket(int)+0xfc>
     fd6:	f104 001c 	add.w	r0, r4, #28
     fda:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
     fde:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     fe0:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fe4:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     fe6:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fe8:	d1fa      	bne.n	fe0 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
     fea:	2bff      	cmp	r3, #255	; 0xff
     fec:	d0c3      	beq.n	f76 <PA12::rxPacket(int)+0x10a>
     fee:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
     ff2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     ff6:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
     ffa:	e7bc      	b.n	f76 <PA12::rxPacket(int)+0x10a>
     ffc:	00000c8d 	.word	0x00000c8d

00001000 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    1004:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1006:	4698      	mov	r8, r3
    1008:	4605      	mov	r5, r0
	mBusUsed = 1;
    100a:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    100c:	468a      	mov	sl, r1
    100e:	4691      	mov	r9, r2
    1010:	4e56      	ldr	r6, [pc, #344]	; (116c <PA12::txRxPacket(int, int, int)+0x16c>)
    1012:	4f57      	ldr	r7, [pc, #348]	; (1170 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    1014:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    1018:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    101c:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    1020:	68a8      	ldr	r0, [r5, #8]
    1022:	6803      	ldr	r3, [r0, #0]
    1024:	691c      	ldr	r4, [r3, #16]
    1026:	42b4      	cmp	r4, r6
    1028:	d10f      	bne.n	104a <PA12::txRxPacket(int, int, int)+0x4a>
    102a:	f002 fecf 	bl	3dcc <usb_serial_available>
    102e:	4604      	mov	r4, r0
		while((this->available())){
    1030:	b17c      	cbz	r4, 1052 <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    1032:	68a8      	ldr	r0, [r5, #8]
    1034:	6803      	ldr	r3, [r0, #0]
    1036:	695b      	ldr	r3, [r3, #20]
    1038:	42bb      	cmp	r3, r7
    103a:	d14a      	bne.n	10d2 <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    103c:	f002 ff0a 	bl	3e54 <usb_serial_getchar>
		return PA12_Serial->available();
    1040:	68a8      	ldr	r0, [r5, #8]
    1042:	6803      	ldr	r3, [r0, #0]
    1044:	691c      	ldr	r4, [r3, #16]
    1046:	42b4      	cmp	r4, r6
    1048:	d0ef      	beq.n	102a <PA12::txRxPacket(int, int, int)+0x2a>
    104a:	47a0      	blx	r4
    104c:	4604      	mov	r4, r0
		while((this->available())){
    104e:	2c00      	cmp	r4, #0
    1050:	d1ef      	bne.n	1032 <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1052:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    1054:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1058:	464a      	mov	r2, r9
    105a:	4651      	mov	r1, sl
    105c:	4628      	mov	r0, r5
    105e:	f7ff fea3 	bl	da8 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    1062:	4580      	cmp	r8, r0
    1064:	d102      	bne.n	106c <PA12::txRxPacket(int, int, int)+0x6c>
    1066:	2301      	movs	r3, #1
    1068:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    106c:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    1070:	d043      	beq.n	10fa <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    1072:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    1076:	d02e      	beq.n	10d6 <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    1078:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    107c:	d065      	beq.n	114a <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    107e:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    1082:	2b01      	cmp	r3, #1
    1084:	dd53      	ble.n	112e <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    1086:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    108a:	2b01      	cmp	r3, #1
    108c:	d038      	beq.n	1100 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    108e:	230b      	movs	r3, #11
    1090:	461e      	mov	r6, r3
    1092:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1096:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    109a:	2b01      	cmp	r3, #1
    109c:	d038      	beq.n	1110 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    109e:	4631      	mov	r1, r6
    10a0:	4628      	mov	r0, r5
    10a2:	f7ff fee3 	bl	e6c <PA12::rxPacket(int)>
	mBusUsed = 0;
    10a6:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    10a8:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    10aa:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    10ae:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    10b2:	d007      	beq.n	10c4 <PA12::txRxPacket(int, int, int)+0xc4>
    10b4:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    10b8:	f503 7382 	add.w	r3, r3, #260	; 0x104
    10bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    10c0:	2bfe      	cmp	r3, #254	; 0xfe
    10c2:	d029      	beq.n	1118 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    10c4:	2302      	movs	r3, #2
	return 1;
    10c6:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    10c8:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    10cc:	4620      	mov	r0, r4
    10ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    10d2:	4798      	blx	r3
    10d4:	e7a4      	b.n	1020 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    10d6:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    10da:	3607      	adds	r6, #7
    10dc:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    10e0:	2e00      	cmp	r6, #0
    10e2:	d1d8      	bne.n	1096 <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    10e4:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    10e8:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    10ec:	f503 7382 	add.w	r3, r3, #260	; 0x104
    10f0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    10f4:	2bf1      	cmp	r3, #241	; 0xf1
    10f6:	d1e5      	bne.n	10c4 <PA12::txRxPacket(int, int, int)+0xc4>
    10f8:	e7e8      	b.n	10cc <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    10fa:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    10fe:	d02f      	beq.n	1160 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1100:	2307      	movs	r3, #7
    1102:	461e      	mov	r6, r3
    1104:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1108:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    110c:	2b01      	cmp	r3, #1
    110e:	d1c6      	bne.n	109e <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1110:	2096      	movs	r0, #150	; 0x96
    1112:	f001 fa7d 	bl	2610 <delay>
    1116:	e7c2      	b.n	109e <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1118:	2800      	cmp	r0, #0
    111a:	d1d3      	bne.n	10c4 <PA12::txRxPacket(int, int, int)+0xc4>
    111c:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1120:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1124:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1128:	2bf1      	cmp	r3, #241	; 0xf1
    112a:	d1cb      	bne.n	10c4 <PA12::txRxPacket(int, int, int)+0xc4>
    112c:	e7ce      	b.n	10cc <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    112e:	2300      	movs	r3, #0
    1130:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1134:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1138:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    113c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1140:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1144:	2bf1      	cmp	r3, #241	; 0xf1
    1146:	d1bd      	bne.n	10c4 <PA12::txRxPacket(int, int, int)+0xc4>
    1148:	e7c0      	b.n	10cc <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    114a:	f029 0910 	bic.w	r9, r9, #16
    114e:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    1152:	d1ec      	bne.n	112e <PA12::txRxPacket(int, int, int)+0x12e>
    1154:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1158:	461e      	mov	r6, r3
    115a:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    115e:	e79a      	b.n	1096 <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1160:	23ff      	movs	r3, #255	; 0xff
    1162:	461e      	mov	r6, r3
    1164:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1168:	e795      	b.n	1096 <PA12::txRxPacket(int, int, int)+0x96>
    116a:	bf00      	nop
    116c:	00000c8d 	.word	0x00000c8d
    1170:	00000c91 	.word	0x00000c91

00001174 <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    1174:	b530      	push	{r4, r5, lr}
    1176:	4615      	mov	r5, r2
    1178:	b083      	sub	sp, #12
    117a:	4604      	mov	r4, r0
    117c:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    117e:	f7ff fdf1 	bl	d64 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1182:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1184:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1186:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    118a:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    118c:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1190:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1192:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1196:	22f3      	movs	r2, #243	; 0xf3
    1198:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    119a:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    119e:	b003      	add	sp, #12
    11a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11a4:	f7ff bf2c 	b.w	1000 <PA12::txRxPacket(int, int, int)>

000011a8 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    11a8:	b530      	push	{r4, r5, lr}
    11aa:	4615      	mov	r5, r2
    11ac:	b083      	sub	sp, #12
    11ae:	4604      	mov	r4, r0
    11b0:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    11b2:	f7ff fdd7 	bl	d64 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11b6:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    11b8:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11ba:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11be:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    11c0:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11c4:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11c6:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11ca:	22f3      	movs	r2, #243	; 0xf3
    11cc:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11ce:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    11d2:	b003      	add	sp, #12
    11d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11d8:	f7ff bf12 	b.w	1000 <PA12::txRxPacket(int, int, int)>

000011dc <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    11dc:	b510      	push	{r4, lr}
    11de:	b082      	sub	sp, #8
    11e0:	4604      	mov	r4, r0
    11e2:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    11e4:	f7ff fdbe 	bl	d64 <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    11e8:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    11ea:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    11ec:	22f2      	movs	r2, #242	; 0xf2
    11ee:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    11f0:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    11f4:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    11f6:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    11fa:	f7ff ff01 	bl	1000 <PA12::txRxPacket(int, int, int)>
    11fe:	b138      	cbz	r0, 1210 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1200:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1202:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1206:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    120a:	b280      	uxth	r0, r0
}
    120c:	b002      	add	sp, #8
    120e:	bd10      	pop	{r4, pc}
		return 0xffff;
    1210:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1214:	b002      	add	sp, #8
    1216:	bd10      	pop	{r4, pc}

00001218 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1218:	2810      	cmp	r0, #16
    121a:	dc11      	bgt.n	1240 <irp_get_baudrate+0x28>
    121c:	2801      	cmp	r0, #1
    121e:	dd0c      	ble.n	123a <irp_get_baudrate+0x22>
    1220:	3802      	subs	r0, #2
    1222:	280e      	cmp	r0, #14
    1224:	d809      	bhi.n	123a <irp_get_baudrate+0x22>
    1226:	e8df f000 	tbb	[pc, r0]
    122a:	0819      	.short	0x0819
    122c:	0808081b 	.word	0x0808081b
    1230:	08080817 	.word	0x08080817
    1234:	08080808 	.word	0x08080808
    1238:	1d          	.byte	0x1d
    1239:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    123a:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    123e:	4770      	bx	lr
    switch(baudnum)
    1240:	2840      	cmp	r0, #64	; 0x40
    1242:	d006      	beq.n	1252 <irp_get_baudrate+0x3a>
        temp= 9600; break;
    1244:	2880      	cmp	r0, #128	; 0x80
    1246:	bf14      	ite	ne
    1248:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    124c:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    1250:	4770      	bx	lr
    switch(baudnum)
    1252:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    1256:	4770      	bx	lr
        temp= 2000000; break;
    1258:	4804      	ldr	r0, [pc, #16]	; (126c <irp_get_baudrate+0x54>)
    125a:	4770      	bx	lr
        temp= 4000000; break;
    125c:	4804      	ldr	r0, [pc, #16]	; (1270 <irp_get_baudrate+0x58>)
    125e:	4770      	bx	lr
        temp= 2500000; break;
    1260:	4804      	ldr	r0, [pc, #16]	; (1274 <irp_get_baudrate+0x5c>)
    1262:	4770      	bx	lr
        temp= 115200; break;
    1264:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	001e8480 	.word	0x001e8480
    1270:	003d0900 	.word	0x003d0900
    1274:	002625a0 	.word	0x002625a0

00001278 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    1278:	b410      	push	{r4}
	if (port) {
    127a:	6904      	ldr	r4, [r0, #16]
    127c:	b134      	cbz	r4, 128c <SoftwareSerial::begin(unsigned long)+0x14>
		port->begin(speed);
    127e:	6823      	ldr	r3, [r4, #0]
    1280:	4620      	mov	r0, r4
    1282:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    1284:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    1288:	69db      	ldr	r3, [r3, #28]
    128a:	4718      	bx	r3
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    128c:	460b      	mov	r3, r1
    128e:	4a0b      	ldr	r2, [pc, #44]	; (12bc <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1290:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    1294:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1298:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    129c:	fbb2 f3f3 	udiv	r3, r2, r3
    12a0:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12a2:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    12a6:	4a06      	ldr	r2, [pc, #24]	; (12c0 <SoftwareSerial::begin(unsigned long)+0x48>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    12ac:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    12b0:	6813      	ldr	r3, [r2, #0]
    12b2:	f043 0301 	orr.w	r3, r3, #1
    12b6:	6013      	str	r3, [r2, #0]
}
    12b8:	4770      	bx	lr
    12ba:	bf00      	nop
    12bc:	23c34600 	.word	0x23c34600
    12c0:	e0001000 	.word	0xe0001000

000012c4 <Adafruit_INA260::Adafruit_INA260()>:
Adafruit_INA260::Adafruit_INA260(void) {}
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop

000012c8 <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    12c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12cc:	b086      	sub	sp, #24
    12ce:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    12d0:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    12d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    12d6:	f001 fb05 	bl	28e4 <operator new(unsigned int)>
    12da:	4604      	mov	r4, r0
    12dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    12e0:	f000 f9d2 	bl	1688 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin()) {
    12e4:	2101      	movs	r1, #1
    12e6:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    12e8:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    12ea:	f000 f9d7 	bl	169c <Adafruit_I2CDevice::begin(bool)>
    12ee:	b920      	cbnz	r0, 12fa <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    12f0:	2400      	movs	r4, #0
}
    12f2:	4620      	mov	r0, r4
    12f4:	b006      	add	sp, #24
    12f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    12fa:	2601      	movs	r6, #1
    12fc:	4604      	mov	r4, r0
    12fe:	2018      	movs	r0, #24
    1300:	f001 faf0 	bl	28e4 <operator new(unsigned int)>
    1304:	2302      	movs	r3, #2
    1306:	22ff      	movs	r2, #255	; 0xff
    1308:	4680      	mov	r8, r0
    130a:	e9cd 6600 	strd	r6, r6, [sp]
    130e:	68e9      	ldr	r1, [r5, #12]
    1310:	f000 f898 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1314:	2018      	movs	r0, #24
    1316:	f001 fae5 	bl	28e4 <operator new(unsigned int)>
    131a:	2302      	movs	r3, #2
    131c:	22fe      	movs	r2, #254	; 0xfe
    131e:	4607      	mov	r7, r0
    1320:	e9cd 6600 	strd	r6, r6, [sp]
    1324:	68e9      	ldr	r1, [r5, #12]
    1326:	f000 f88d 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    132a:	2008      	movs	r0, #8
    132c:	f001 fada 	bl	28e4 <operator new(unsigned int)>
    1330:	4641      	mov	r1, r8
    1332:	2304      	movs	r3, #4
    1334:	220c      	movs	r2, #12
    1336:	4680      	mov	r8, r0
    1338:	f000 f97c 	bl	1634 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    133c:	4638      	mov	r0, r7
    133e:	f000 f957 	bl	15f0 <Adafruit_BusIO_Register::read()>
    1342:	f245 4349 	movw	r3, #21577	; 0x5449
    1346:	4298      	cmp	r0, r3
    1348:	d1d2      	bne.n	12f0 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    134a:	4640      	mov	r0, r8
    134c:	f000 f976 	bl	163c <Adafruit_BusIO_RegisterBits::read()>
    1350:	f240 2327 	movw	r3, #551	; 0x227
    1354:	4298      	cmp	r0, r3
    1356:	d1cb      	bne.n	12f0 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    1358:	2018      	movs	r0, #24
    135a:	f001 fac3 	bl	28e4 <operator new(unsigned int)>
    135e:	4607      	mov	r7, r0
    1360:	2302      	movs	r3, #2
    1362:	2200      	movs	r2, #0
    1364:	e9cd 6600 	strd	r6, r6, [sp]
    1368:	68e9      	ldr	r1, [r5, #12]
    136a:	f000 f86b 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    136e:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    1370:	2018      	movs	r0, #24
    1372:	f001 fab7 	bl	28e4 <operator new(unsigned int)>
    1376:	4607      	mov	r7, r0
    1378:	2302      	movs	r3, #2
    137a:	2206      	movs	r2, #6
    137c:	e9cd 6600 	strd	r6, r6, [sp]
    1380:	68e9      	ldr	r1, [r5, #12]
    1382:	f000 f85f 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    1386:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    1388:	2018      	movs	r0, #24
    138a:	f001 faab 	bl	28e4 <operator new(unsigned int)>
    138e:	4607      	mov	r7, r0
    1390:	2302      	movs	r3, #2
    1392:	2207      	movs	r2, #7
    1394:	e9cd 6600 	strd	r6, r6, [sp]
    1398:	68e9      	ldr	r1, [r5, #12]
    139a:	f000 f853 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    139e:	230f      	movs	r3, #15
    13a0:	6829      	ldr	r1, [r5, #0]
    13a2:	4632      	mov	r2, r6
    13a4:	a804      	add	r0, sp, #16
  AlertLimit =
    13a6:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    13a8:	f000 f944 	bl	1634 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    13ac:	4631      	mov	r1, r6
    13ae:	a804      	add	r0, sp, #16
    13b0:	f000 f952 	bl	1658 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    13b4:	2002      	movs	r0, #2
    13b6:	f001 f92b 	bl	2610 <delay>
  return true;
    13ba:	e79a      	b.n	12f2 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

000013bc <Adafruit_INA260::readBusVoltage()>:
float Adafruit_INA260::readBusVoltage(void) {
    13bc:	b510      	push	{r4, lr}
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    13be:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    13c0:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    13c2:	2401      	movs	r4, #1
    13c4:	68c1      	ldr	r1, [r0, #12]
    13c6:	461a      	mov	r2, r3
    13c8:	a802      	add	r0, sp, #8
    13ca:	e9cd 4400 	strd	r4, r4, [sp]
    13ce:	f000 f839 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    13d2:	a802      	add	r0, sp, #8
    13d4:	f000 f90c 	bl	15f0 <Adafruit_BusIO_Register::read()>
    13d8:	ee06 0a90 	vmov	s13, r0
    13dc:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    13e0:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    13e4:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    13e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    13ec:	b008      	add	sp, #32
    13ee:	bd10      	pop	{r4, pc}

000013f0 <Adafruit_INA260::readPower()>:
float Adafruit_INA260::readPower(void) {
    13f0:	b510      	push	{r4, lr}
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    13f2:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    13f4:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    13f6:	68c1      	ldr	r1, [r0, #12]
    13f8:	2302      	movs	r3, #2
    13fa:	2203      	movs	r2, #3
    13fc:	a802      	add	r0, sp, #8
    13fe:	e9cd 4400 	strd	r4, r4, [sp]
    1402:	f000 f81f 	bl	1444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    1406:	a802      	add	r0, sp, #8
    1408:	f000 f8f2 	bl	15f0 <Adafruit_BusIO_Register::read()>
    140c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1410:	fa00 f304 	lsl.w	r3, r0, r4
    1414:	ee00 3a10 	vmov	s0, r3
}
    1418:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    141c:	b008      	add	sp, #32
    141e:	bd10      	pop	{r4, pc}

00001420 <Adafruit_INA260::conversionReady()>:
bool Adafruit_INA260::conversionReady(void) {
    1420:	b500      	push	{lr}
    1422:	b083      	sub	sp, #12
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    1424:	6841      	ldr	r1, [r0, #4]
    1426:	2303      	movs	r3, #3
    1428:	2201      	movs	r2, #1
    142a:	4668      	mov	r0, sp
    142c:	f000 f902 	bl	1634 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1430:	4668      	mov	r0, sp
    1432:	f000 f903 	bl	163c <Adafruit_BusIO_RegisterBits::read()>
}
    1436:	3800      	subs	r0, #0
    1438:	bf18      	it	ne
    143a:	2001      	movne	r0, #1
    143c:	b003      	add	sp, #12
    143e:	f85d fb04 	ldr.w	pc, [sp], #4
    1442:	bf00      	nop

00001444 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    1444:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    1446:	2300      	movs	r3, #0
  _address = reg_addr;
    1448:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    144a:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    144c:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1450:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1452:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    1456:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1458:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    145a:	7343      	strb	r3, [r0, #13]
}
    145c:	4770      	bx	lr
    145e:	bf00      	nop

00001460 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1460:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1464:	4603      	mov	r3, r0
  if (_i2cdevice) {
    1466:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1468:	b570      	push	{r4, r5, r6, lr}
    146a:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    146c:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    1470:	b140      	cbz	r0, 1484 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    1472:	7b5c      	ldrb	r4, [r3, #13]
    1474:	ab03      	add	r3, sp, #12
    1476:	e9cd 3400 	strd	r3, r4, [sp]
    147a:	2301      	movs	r3, #1
    147c:	f000 f92a 	bl	16d4 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    1480:	b004      	add	sp, #16
    1482:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    1484:	6858      	ldr	r0, [r3, #4]
    1486:	2800      	cmp	r0, #0
    1488:	d0fa      	beq.n	1480 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    148a:	7a1e      	ldrb	r6, [r3, #8]
    148c:	fa5f f58c 	uxtb.w	r5, ip
    1490:	2e03      	cmp	r6, #3
    1492:	d021      	beq.n	14d8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1494:	460c      	mov	r4, r1
    1496:	4696      	mov	lr, r2
    1498:	b176      	cbz	r6, 14b8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    149a:	2e02      	cmp	r6, #2
    149c:	d111      	bne.n	14c2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    149e:	f065 057f 	orn	r5, r5, #127	; 0x7f
    14a2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    14a6:	7b5d      	ldrb	r5, [r3, #13]
    14a8:	4672      	mov	r2, lr
    14aa:	ab03      	add	r3, sp, #12
    14ac:	4621      	mov	r1, r4
    14ae:	9500      	str	r5, [sp, #0]
    14b0:	f000 fb42 	bl	1b38 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    14b4:	b004      	add	sp, #16
    14b6:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    14b8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    14bc:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    14c0:	e7f1      	b.n	14a6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    14c2:	2e01      	cmp	r6, #1
    14c4:	d1ef      	bne.n	14a6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    14c6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    14ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    14ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    14d2:	f88d 200c 	strb.w	r2, [sp, #12]
    14d6:	e7e6      	b.n	14a6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    14d8:	7b5c      	ldrb	r4, [r3, #13]
    14da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    14de:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    14e0:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    14e4:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    14e6:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    14ea:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    14ec:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    14f0:	f000 fb22 	bl	1b38 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    14f4:	e7c4      	b.n	1480 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    14f6:	bf00      	nop

000014f8 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    14f8:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    14fa:	b962      	cbnz	r2, 1516 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    14fc:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    14fe:	2c04      	cmp	r4, #4
    1500:	d824      	bhi.n	154c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1502:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1504:	b95c      	cbnz	r4, 151e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    1506:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    150a:	4622      	mov	r2, r4
    150c:	4671      	mov	r1, lr
}
    150e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    1512:	f7ff bfa5 	b.w	1460 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    1516:	2a04      	cmp	r2, #4
    1518:	4614      	mov	r4, r2
    151a:	d817      	bhi.n	154c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    151c:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    151e:	f100 0e0f 	add.w	lr, r0, #15
    1522:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    1526:	7b85      	ldrb	r5, [r0, #14]
    1528:	f100 020e 	add.w	r2, r0, #14
    152c:	fa50 f383 	uxtab	r3, r0, r3
    1530:	46f4      	mov	ip, lr
    1532:	b94d      	cbnz	r5, 1548 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    1534:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    1538:	3b01      	subs	r3, #1
    value >>= 8;
    153a:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    153c:	f10c 0c01 	add.w	ip, ip, #1
    1540:	4293      	cmp	r3, r2
    1542:	d0e2      	beq.n	150a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    1544:	2d00      	cmp	r5, #0
    1546:	d0f5      	beq.n	1534 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    1548:	7019      	strb	r1, [r3, #0]
    154a:	e7f5      	b.n	1538 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    154c:	2000      	movs	r0, #0
}
    154e:	bd30      	pop	{r4, r5, pc}

00001550 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1550:	b510      	push	{r4, lr}
    1552:	4684      	mov	ip, r0
    1554:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1556:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1558:	4614      	mov	r4, r2
    155a:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    155c:	b2c2      	uxtb	r2, r0
    155e:	f8ad 000c 	strh.w	r0, [sp, #12]
    1562:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    1566:	f8dc 0000 	ldr.w	r0, [ip]
    156a:	b148      	cbz	r0, 1580 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    156c:	2100      	movs	r1, #0
    156e:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1572:	9400      	str	r4, [sp, #0]
    1574:	9101      	str	r1, [sp, #4]
    1576:	a903      	add	r1, sp, #12
    1578:	f000 f918 	bl	17ac <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    157c:	b004      	add	sp, #16
    157e:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1580:	f8dc 0004 	ldr.w	r0, [ip, #4]
    1584:	2800      	cmp	r0, #0
    1586:	d0f9      	beq.n	157c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1588:	f89c 1008 	ldrb.w	r1, [ip, #8]
    158c:	2903      	cmp	r1, #3
    158e:	d01e      	beq.n	15ce <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1590:	b179      	cbz	r1, 15b2 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1592:	2902      	cmp	r1, #2
    1594:	d112      	bne.n	15bc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    1596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    159a:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    159e:	21ff      	movs	r1, #255	; 0xff
    15a0:	f89c 200d 	ldrb.w	r2, [ip, #13]
    15a4:	9400      	str	r4, [sp, #0]
    15a6:	9101      	str	r1, [sp, #4]
    15a8:	a903      	add	r1, sp, #12
    15aa:	f000 fb21 	bl	1bf0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    15ae:	b004      	add	sp, #16
    15b0:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    15b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    15b6:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    15ba:	e7f0      	b.n	159e <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    15bc:	2901      	cmp	r1, #1
    15be:	d1ee      	bne.n	159e <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    15c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
    15c4:	f062 023f 	orn	r2, r2, #63	; 0x3f
    15c8:	f88d 200c 	strb.w	r2, [sp, #12]
    15cc:	e7e7      	b.n	159e <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    15ce:	21ff      	movs	r1, #255	; 0xff
    15d0:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    15d2:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    15d6:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    15da:	f89c 200d 	ldrb.w	r2, [ip, #13]
    15de:	9101      	str	r1, [sp, #4]
    15e0:	a903      	add	r1, sp, #12
    15e2:	3201      	adds	r2, #1
      addrbuffer[0] =
    15e4:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    15e8:	f000 fb02 	bl	1bf0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    15ec:	e7c6      	b.n	157c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    15ee:	bf00      	nop

000015f0 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    15f0:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    15f2:	f100 050f 	add.w	r5, r0, #15
    15f6:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    15f8:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    15fa:	4629      	mov	r1, r5
    15fc:	f7ff ffa8 	bl	1550 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1600:	b1a0      	cbz	r0, 162c <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    1602:	7b20      	ldrb	r0, [r4, #12]
    1604:	b170      	cbz	r0, 1624 <Adafruit_BusIO_Register::read()+0x34>
    1606:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1608:	7ba6      	ldrb	r6, [r4, #14]
    160a:	4629      	mov	r1, r5
    160c:	f104 020e 	add.w	r2, r4, #14
    1610:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    1612:	2000      	movs	r0, #0
    value <<= 8;
    1614:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    1616:	b936      	cbnz	r6, 1626 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1618:	781c      	ldrb	r4, [r3, #0]
    161a:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    161c:	3b01      	subs	r3, #1
    161e:	3101      	adds	r1, #1
    1620:	4293      	cmp	r3, r2
    1622:	d1f7      	bne.n	1614 <Adafruit_BusIO_Register::read()+0x24>
}
    1624:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    1626:	780c      	ldrb	r4, [r1, #0]
    1628:	4320      	orrs	r0, r4
    162a:	e7f7      	b.n	161c <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    162c:	f04f 30ff 	mov.w	r0, #4294967295
}
    1630:	bd70      	pop	{r4, r5, r6, pc}
    1632:	bf00      	nop

00001634 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    1634:	6001      	str	r1, [r0, #0]
  _bits = bits;
    1636:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    1638:	7143      	strb	r3, [r0, #5]
}
    163a:	4770      	bx	lr

0000163c <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    163c:	b510      	push	{r4, lr}
    163e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    1640:	6800      	ldr	r0, [r0, #0]
    1642:	f7ff ffd5 	bl	15f0 <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    1646:	2301      	movs	r3, #1
    1648:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    164a:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    164c:	408b      	lsls	r3, r1
  val >>= _shift;
    164e:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    1650:	3b01      	subs	r3, #1
}
    1652:	4018      	ands	r0, r3
    1654:	bd10      	pop	{r4, pc}
    1656:	bf00      	nop

00001658 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1658:	b538      	push	{r3, r4, r5, lr}
    165a:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    165c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    165e:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    1660:	f7ff ffc6 	bl	15f0 <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    1664:	792a      	ldrb	r2, [r5, #4]
    1666:	2301      	movs	r3, #1
    1668:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    166a:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    166c:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    166e:	3b01      	subs	r3, #1
  data &= mask;
    1670:	401c      	ands	r4, r3
  mask <<= _shift;
    1672:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    1674:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    1676:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    167a:	7b2a      	ldrb	r2, [r5, #12]
    167c:	4628      	mov	r0, r5
    167e:	4321      	orrs	r1, r4
}
    1680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    1684:	f7ff bf38 	b.w	14f8 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

00001688 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    1688:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    168c:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    168e:	2220      	movs	r2, #32
  _addr = addr;
    1690:	7001      	strb	r1, [r0, #0]
  _begun = false;
    1692:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    1696:	60c2      	str	r2, [r0, #12]
}
    1698:	4770      	bx	lr
    169a:	bf00      	nop

0000169c <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    169c:	b538      	push	{r3, r4, r5, lr}
    169e:	4604      	mov	r4, r0
  _wire->begin();
    16a0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    16a2:	460d      	mov	r5, r1
  _wire->begin();
    16a4:	f008 fa68 	bl	9b78 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    16a8:	2101      	movs	r1, #1
    16aa:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    16ac:	b90d      	cbnz	r5, 16b2 <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    16ae:	4608      	mov	r0, r1
}
    16b0:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    16b2:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    16b4:	6862      	ldr	r2, [r4, #4]
    16b6:	4088      	lsls	r0, r1
		transmitting = 1;
    16b8:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    16bc:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    16c0:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    16c4:	6860      	ldr	r0, [r4, #4]
    16c6:	f7ff f903 	bl	8d0 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    16ca:	fab0 f080 	clz	r0, r0
    16ce:	0940      	lsrs	r0, r0, #5
}
    16d0:	bd38      	pop	{r3, r4, r5, pc}
    16d2:	bf00      	nop

000016d4 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    16d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16d8:	9f07      	ldr	r7, [sp, #28]
    16da:	4615      	mov	r5, r2
    16dc:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    16de:	68c3      	ldr	r3, [r0, #12]
    16e0:	443a      	add	r2, r7
    16e2:	429a      	cmp	r2, r3
    16e4:	d816      	bhi.n	1714 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    16e6:	7802      	ldrb	r2, [r0, #0]
    16e8:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    16ea:	6843      	ldr	r3, [r0, #4]
    16ec:	460e      	mov	r6, r1
    16ee:	0052      	lsls	r2, r2, #1
    16f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    16f4:	2201      	movs	r2, #1
    16f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    16fa:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    16fe:	b167      	cbz	r7, 171a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1700:	9b06      	ldr	r3, [sp, #24]
    1702:	b153      	cbz	r3, 171a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    1704:	6840      	ldr	r0, [r0, #4]
    1706:	463a      	mov	r2, r7
    1708:	9906      	ldr	r1, [sp, #24]
    170a:	6803      	ldr	r3, [r0, #0]
    170c:	685b      	ldr	r3, [r3, #4]
    170e:	4798      	blx	r3
    1710:	4287      	cmp	r7, r0
    1712:	d002      	beq.n	171a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    1714:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    1716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    171a:	6860      	ldr	r0, [r4, #4]
    171c:	4631      	mov	r1, r6
    171e:	462a      	mov	r2, r5
    1720:	6803      	ldr	r3, [r0, #0]
    1722:	685b      	ldr	r3, [r3, #4]
    1724:	4798      	blx	r3
    1726:	4285      	cmp	r5, r0
    1728:	d1f4      	bne.n	1714 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    172a:	4641      	mov	r1, r8
    172c:	6860      	ldr	r0, [r4, #4]
    172e:	f7ff f8cf 	bl	8d0 <TwoWire::endTransmission(unsigned char)>
    1732:	fab0 f080 	clz	r0, r0
    1736:	0940      	lsrs	r0, r0, #5
}
    1738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000173c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    173c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1740:	4615      	mov	r5, r2
    1742:	4606      	mov	r6, r0
    1744:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1746:	b2d2      	uxtb	r2, r2
    1748:	7801      	ldrb	r1, [r0, #0]
    174a:	6840      	ldr	r0, [r0, #4]
    174c:	f7ff f940 	bl	9d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    1750:	4285      	cmp	r5, r0
    1752:	d124      	bne.n	179e <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1754:	b305      	cbz	r5, 1798 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    1756:	2400      	movs	r4, #0
    1758:	f8df 904c 	ldr.w	r9, [pc, #76]	; 17a8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    175c:	46a0      	mov	r8, r4
    175e:	e013      	b.n	1788 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1760:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    1764:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1768:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    176a:	f10c 0201 	add.w	r2, ip, #1
    176e:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    1770:	d918      	bls.n	17a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    1772:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1776:	f89c 301a 	ldrb.w	r3, [ip, #26]
    177a:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    177c:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    1780:	b2a4      	uxth	r4, r4
    1782:	42a5      	cmp	r5, r4
    1784:	46a0      	mov	r8, r4
    1786:	d907      	bls.n	1798 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    1788:	6870      	ldr	r0, [r6, #4]
    178a:	6802      	ldr	r2, [r0, #0]
    178c:	6952      	ldr	r2, [r2, #20]
    178e:	454a      	cmp	r2, r9
    1790:	d0e6      	beq.n	1760 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    1792:	4790      	blx	r2
    1794:	b2c3      	uxtb	r3, r0
    1796:	e7f0      	b.n	177a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    1798:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    179a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    179e:	2000      	movs	r0, #0
}
    17a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17a4:	23ff      	movs	r3, #255	; 0xff
    17a6:	e7e8      	b.n	177a <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    17a8:	000006e5 	.word	0x000006e5

000017ac <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    17ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    17b0:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    17b2:	b082      	sub	sp, #8
    17b4:	461f      	mov	r7, r3
    17b6:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    17b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    17bc:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    17be:	e9cd 4400 	strd	r4, r4, [sp]
    17c2:	f7ff ff87 	bl	16d4 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    17c6:	b928      	cbnz	r0, 17d4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    17c8:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    17cc:	4640      	mov	r0, r8
    17ce:	b002      	add	sp, #8
    17d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    17d4:	4680      	mov	r8, r0
    17d6:	b915      	cbnz	r5, 17de <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    17d8:	e7f8      	b.n	17cc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    17da:	42a5      	cmp	r5, r4
    17dc:	d9f6      	bls.n	17cc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    17de:	1b2a      	subs	r2, r5, r4
    17e0:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    17e2:	1939      	adds	r1, r7, r4
    17e4:	4630      	mov	r0, r6
    17e6:	429a      	cmp	r2, r3
    17e8:	bf28      	it	cs
    17ea:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    17ec:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    17ee:	42a3      	cmp	r3, r4
    pos += read_len;
    17f0:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    17f2:	bf8c      	ite	hi
    17f4:	2300      	movhi	r3, #0
    17f6:	2301      	movls	r3, #1
    17f8:	f7ff ffa0 	bl	173c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    17fc:	2800      	cmp	r0, #0
    17fe:	d1ec      	bne.n	17da <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    1800:	e7e2      	b.n	17c8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    1802:	bf00      	nop

00001804 <Adafruit_I2CDevice::setSpeed(unsigned long)>:
  Serial.println(atwbr);
#endif
  return true;
#elif (ARDUINO >= 157) && !defined(ARDUINO_STM32_FEATHER) &&                   \
    !defined(TinyWireM_h)
  _wire->setClock(desiredclk);
    1804:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
    1806:	b508      	push	{r3, lr}
  _wire->setClock(desiredclk);
    1808:	f7ff f9fa 	bl	c00 <TwoWire::setClock(unsigned long)>

#else
  (void)desiredclk;
  return false;
#endif
}
    180c:	2001      	movs	r0, #1
    180e:	bd08      	pop	{r3, pc}

00001810 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    1810:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    1812:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    1818:	bf0c      	ite	eq
    181a:	2301      	moveq	r3, #1
    181c:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    181e:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    1820:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1824:	4e63      	ldr	r6, [pc, #396]	; (19b4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1826:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    182a:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    182c:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    182e:	bf0c      	ite	eq
    1830:	f04f 0a01 	moveq.w	sl, #1
    1834:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1838:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    183c:	2a00      	cmp	r2, #0
    183e:	f000 80b6 	beq.w	19ae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    1842:	3a01      	subs	r2, #1
    1844:	4604      	mov	r4, r0
    1846:	b2f6      	uxtb	r6, r6
    1848:	4688      	mov	r8, r1
    184a:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    184c:	f8df b170 	ldr.w	fp, [pc, #368]	; 19c0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    1850:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    1852:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    1854:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    1856:	2e00      	cmp	r6, #0
    1858:	d141      	bne.n	18de <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    185a:	7b63      	ldrb	r3, [r4, #13]
    185c:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1860:	d175      	bne.n	194e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    1862:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1866:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    186a:	bf14      	ite	ne
    186c:	2301      	movne	r3, #1
    186e:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1870:	1c42      	adds	r2, r0, #1
    1872:	d02f      	beq.n	18d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    1874:	4553      	cmp	r3, sl
    1876:	d02d      	beq.n	18d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    1878:	4619      	mov	r1, r3
    187a:	b2c0      	uxtb	r0, r0
    187c:	9301      	str	r3, [sp, #4]
    187e:	f000 ff1b 	bl	26b8 <digitalWrite>
        towrite = send & b;
    1882:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    1884:	2101      	movs	r1, #1
    1886:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    1888:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    188a:	f000 ff15 	bl	26b8 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    188e:	f994 0011 	ldrsb.w	r0, [r4, #17]
    1892:	1c42      	adds	r2, r0, #1
    1894:	d004      	beq.n	18a0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    1896:	b2c0      	uxtb	r0, r0
    1898:	f000 ff38 	bl	270c <digitalRead>
    189c:	b100      	cbz	r0, 18a0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    189e:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    18a0:	2100      	movs	r1, #0
    18a2:	7be0      	ldrb	r0, [r4, #15]
    18a4:	f000 ff08 	bl	26b8 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    18a8:	f994 3011 	ldrsb.w	r3, [r4, #17]
    18ac:	3301      	adds	r3, #1
        buffer[i] = reply;
    18ae:	bf18      	it	ne
    18b0:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    18b4:	7b23      	ldrb	r3, [r4, #12]
    18b6:	b94b      	cbnz	r3, 18cc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    18b8:	006d      	lsls	r5, r5, #1
    18ba:	b2ed      	uxtb	r5, r5
    18bc:	2d00      	cmp	r5, #0
    18be:	d1ca      	bne.n	1856 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    18c0:	9b03      	ldr	r3, [sp, #12]
    18c2:	4598      	cmp	r8, r3
    18c4:	d073      	beq.n	19ae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    18c6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    18ca:	e7c2      	b.n	1852 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    18cc:	086d      	lsrs	r5, r5, #1
    18ce:	2d00      	cmp	r5, #0
    18d0:	d1c1      	bne.n	1856 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    18d2:	e7f5      	b.n	18c0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    18d4:	2101      	movs	r1, #1
    18d6:	7be0      	ldrb	r0, [r4, #15]
    18d8:	f000 feee 	bl	26b8 <digitalWrite>
        if (bitdelay_us) {
    18dc:	e7d7      	b.n	188e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    18de:	4b36      	ldr	r3, [pc, #216]	; (19b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    18e0:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    18e4:	681a      	ldr	r2, [r3, #0]
    18e6:	4b35      	ldr	r3, [pc, #212]	; (19bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    18e8:	fba3 3202 	umull	r3, r2, r3, r2
    18ec:	0c92      	lsrs	r2, r2, #18
    18ee:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    18f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    18f6:	1a5b      	subs	r3, r3, r1
    18f8:	429a      	cmp	r2, r3
    18fa:	d8fa      	bhi.n	18f2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    18fc:	7b63      	ldrb	r3, [r4, #13]
    18fe:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1902:	d140      	bne.n	1986 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    1904:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1908:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    190c:	bf14      	ite	ne
    190e:	2101      	movne	r1, #1
    1910:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1912:	1c43      	adds	r3, r0, #1
    1914:	d007      	beq.n	1926 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    1916:	4551      	cmp	r1, sl
    1918:	d005      	beq.n	1926 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    191a:	b2c0      	uxtb	r0, r0
    191c:	9101      	str	r1, [sp, #4]
    191e:	f000 fecb 	bl	26b8 <digitalWrite>
        towrite = send & b;
    1922:	9901      	ldr	r1, [sp, #4]
    1924:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    1926:	2101      	movs	r1, #1
    1928:	7be0      	ldrb	r0, [r4, #15]
    192a:	f000 fec5 	bl	26b8 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    192e:	4b22      	ldr	r3, [pc, #136]	; (19b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1930:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1934:	681a      	ldr	r2, [r3, #0]
    1936:	4b21      	ldr	r3, [pc, #132]	; (19bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1938:	fba3 3202 	umull	r3, r2, r3, r2
    193c:	0c92      	lsrs	r2, r2, #18
    193e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1942:	f8db 3004 	ldr.w	r3, [fp, #4]
    1946:	1a5b      	subs	r3, r3, r1
    1948:	429a      	cmp	r2, r3
    194a:	d8fa      	bhi.n	1942 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    194c:	e79f      	b.n	188e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    194e:	2101      	movs	r1, #1
    1950:	7be0      	ldrb	r0, [r4, #15]
    1952:	f000 feb1 	bl	26b8 <digitalWrite>
        if (_mosi != -1) {
    1956:	f994 0010 	ldrsb.w	r0, [r4, #16]
    195a:	1c43      	adds	r3, r0, #1
    195c:	d004      	beq.n	1968 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    195e:	b2c0      	uxtb	r0, r0
    1960:	ea09 0105 	and.w	r1, r9, r5
    1964:	f000 fea8 	bl	26b8 <digitalWrite>
        digitalWrite(_sck, LOW);
    1968:	2100      	movs	r1, #0
    196a:	7be0      	ldrb	r0, [r4, #15]
    196c:	f000 fea4 	bl	26b8 <digitalWrite>
        if (_miso != -1) {
    1970:	f994 0011 	ldrsb.w	r0, [r4, #17]
    1974:	1c41      	adds	r1, r0, #1
    1976:	d09d      	beq.n	18b4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    1978:	b2c0      	uxtb	r0, r0
    197a:	f000 fec7 	bl	270c <digitalRead>
    197e:	2800      	cmp	r0, #0
    1980:	d092      	beq.n	18a8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    1982:	432f      	orrs	r7, r5
    1984:	e790      	b.n	18a8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    1986:	2101      	movs	r1, #1
    1988:	7be0      	ldrb	r0, [r4, #15]
    198a:	f000 fe95 	bl	26b8 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    198e:	4b0a      	ldr	r3, [pc, #40]	; (19b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1990:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1994:	681a      	ldr	r2, [r3, #0]
    1996:	4b09      	ldr	r3, [pc, #36]	; (19bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1998:	fba3 3202 	umull	r3, r2, r3, r2
    199c:	0c92      	lsrs	r2, r2, #18
    199e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    19a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    19a6:	1a5b      	subs	r3, r3, r1
    19a8:	429a      	cmp	r2, r3
    19aa:	d8fa      	bhi.n	19a2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    19ac:	e7d3      	b.n	1956 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    19ae:	b005      	add	sp, #20
    19b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19b4:	0007a120 	.word	0x0007a120
    19b8:	20000d8c 	.word	0x20000d8c
    19bc:	431bde83 	.word	0x431bde83
    19c0:	e0001000 	.word	0xe0001000

000019c4 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    19c4:	b430      	push	{r4, r5}
    19c6:	b082      	sub	sp, #8
    19c8:	460c      	mov	r4, r1
    19ca:	ab02      	add	r3, sp, #8
    19cc:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    19d0:	7cc3      	ldrb	r3, [r0, #19]
    19d2:	2b00      	cmp	r3, #0
    19d4:	d030      	beq.n	1a38 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    19d6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    19d8:	7cc3      	ldrb	r3, [r0, #19]
    19da:	07da      	lsls	r2, r3, #31
    19dc:	d508      	bpl.n	19f0 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    19de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    19e2:	6945      	ldr	r5, [r0, #20]
    19e4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    19e8:	402a      	ands	r2, r5
    19ea:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    19ec:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    19f0:	079d      	lsls	r5, r3, #30
    19f2:	d508      	bpl.n	1a06 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    19f4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    19f8:	6985      	ldr	r5, [r0, #24]
    19fa:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    19fe:	402a      	ands	r2, r5
    1a00:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1a02:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    1a06:	0759      	lsls	r1, r3, #29
    1a08:	d508      	bpl.n	1a1c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1a0a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a0e:	69c5      	ldr	r5, [r0, #28]
    1a10:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1a14:	402a      	ands	r2, r5
    1a16:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1a18:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    1a1c:	071a      	lsls	r2, r3, #28
    1a1e:	d508      	bpl.n	1a32 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1a20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a24:	6a05      	ldr	r5, [r0, #32]
    1a26:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1a2a:	402a      	ands	r2, r5
    1a2c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1a2e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    1a32:	06db      	lsls	r3, r3, #27
    1a34:	d42f      	bmi.n	1a96 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    1a36:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    1a38:	6883      	ldr	r3, [r0, #8]
    1a3a:	429c      	cmp	r4, r3
    1a3c:	d035      	beq.n	1aaa <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    1a3e:	4b22      	ldr	r3, [pc, #136]	; (1ac8 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1a40:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1a42:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1a44:	4a21      	ldr	r2, [pc, #132]	; (1acc <SPIClass::beginTransaction(SPISettings)+0x108>)
    1a46:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1a4a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1a4e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1a52:	3301      	adds	r3, #1
    1a54:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    1a58:	b1cc      	cbz	r4, 1a8e <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    1a5a:	4294      	cmp	r4, r2
    1a5c:	d827      	bhi.n	1aae <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1a5e:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1a62:	fbb2 f2f3 	udiv	r2, r2, r3
    1a66:	4294      	cmp	r4, r2
    1a68:	d32c      	bcc.n	1ac4 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1a6a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1a6e:	d320      	bcc.n	1ab2 <SPIClass::beginTransaction(SPISettings)+0xee>
    1a70:	4c17      	ldr	r4, [pc, #92]	; (1ad0 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1a72:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1a74:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1a76:	2203      	movs	r2, #3
		port().CR = 0;
    1a78:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1a7a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1a7c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1a7e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1a80:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1a82:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1a84:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1a86:	611a      	str	r2, [r3, #16]
	}
    1a88:	b002      	add	sp, #8
    1a8a:	bc30      	pop	{r4, r5}
    1a8c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1a8e:	4299      	cmp	r1, r3
    1a90:	d3ef      	bcc.n	1a72 <SPIClass::beginTransaction(SPISettings)+0xae>
    1a92:	1c53      	adds	r3, r2, #1
    1a94:	e7e9      	b.n	1a6a <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1a96:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1a9a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1a9c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1aa0:	400b      	ands	r3, r1
    1aa2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1aa4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1aa8:	e7c5      	b.n	1a36 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1aaa:	68c4      	ldr	r4, [r0, #12]
    1aac:	e7e2      	b.n	1a74 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1aae:	2400      	movs	r4, #0
    1ab0:	e7df      	b.n	1a72 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1ab2:	2b02      	cmp	r3, #2
    1ab4:	d9fb      	bls.n	1aae <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1ab6:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1ab8:	085a      	lsrs	r2, r3, #1
    1aba:	0214      	lsls	r4, r2, #8
    1abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1ac0:	431c      	orrs	r4, r3
    1ac2:	e7d6      	b.n	1a72 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1ac4:	461a      	mov	r2, r3
    1ac6:	e7e4      	b.n	1a92 <SPIClass::beginTransaction(SPISettings)+0xce>
    1ac8:	400fc000 	.word	0x400fc000
    1acc:	200004e0 	.word	0x200004e0
    1ad0:	007f7fff 	.word	0x007f7fff

00001ad4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    1ad4:	b510      	push	{r4, lr}
    1ad6:	4604      	mov	r4, r0
  if (_cs != -1) {
    1ad8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    1adc:	1c43      	adds	r3, r0, #1
    1ade:	d003      	beq.n	1ae8 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    1ae0:	2101      	movs	r1, #1
    1ae2:	b2c0      	uxtb	r0, r0
    1ae4:	f000 fde8 	bl	26b8 <digitalWrite>
  if (_spi) {
    1ae8:	6823      	ldr	r3, [r4, #0]
    1aea:	b323      	cbz	r3, 1b36 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    1aec:	7cda      	ldrb	r2, [r3, #19]
    1aee:	b312      	cbz	r2, 1b36 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1af0:	07d1      	lsls	r1, r2, #31
    1af2:	d504      	bpl.n	1afe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    1af4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1af6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1afa:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1afe:	0794      	lsls	r4, r2, #30
    1b00:	d504      	bpl.n	1b0c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    1b02:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1b04:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b08:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1b0c:	0750      	lsls	r0, r2, #29
    1b0e:	d504      	bpl.n	1b1a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    1b10:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1b12:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b16:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1b1a:	0711      	lsls	r1, r2, #28
    1b1c:	d504      	bpl.n	1b28 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    1b1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1b20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b24:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1b28:	06d2      	lsls	r2, r2, #27
    1b2a:	d504      	bpl.n	1b36 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    1b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1b2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1b32:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    1b36:	bd10      	pop	{r4, pc}

00001b38 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b3c:	4604      	mov	r4, r0
    1b3e:	b082      	sub	sp, #8
  if (_spi) {
    1b40:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    1b42:	468a      	mov	sl, r1
    1b44:	4690      	mov	r8, r2
    1b46:	461e      	mov	r6, r3
    1b48:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    1b4a:	b120      	cbz	r0, 1b56 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    1b4c:	6863      	ldr	r3, [r4, #4]
    1b4e:	e893 0006 	ldmia.w	r3, {r1, r2}
    1b52:	f7ff ff37 	bl	19c4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1b56:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1b5a:	1c43      	adds	r3, r0, #1
    1b5c:	d142      	bne.n	1be4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    1b5e:	b1d5      	cbz	r5, 1b96 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    1b60:	3e01      	subs	r6, #1
    1b62:	eb06 0905 	add.w	r9, r6, r5
    1b66:	f10d 0507 	add.w	r5, sp, #7
    1b6a:	e003      	b.n	1b74 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    1b6c:	f7ff fe50 	bl	1810 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1b70:	454e      	cmp	r6, r9
    1b72:	d010      	beq.n	1b96 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    1b74:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1b78:	2201      	movs	r2, #1
  if (_spi) {
    1b7a:	6827      	ldr	r7, [r4, #0]
    1b7c:	4629      	mov	r1, r5
    1b7e:	4620      	mov	r0, r4
  uint8_t data = send;
    1b80:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1b84:	2f00      	cmp	r7, #0
    1b86:	d0f1      	beq.n	1b6c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    1b88:	4613      	mov	r3, r2
    1b8a:	4638      	mov	r0, r7
    1b8c:	462a      	mov	r2, r5
    1b8e:	f000 f8c3 	bl	1d18 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    1b92:	454e      	cmp	r6, r9
    1b94:	d1ee      	bne.n	1b74 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    1b96:	f1b8 0f00 	cmp.w	r8, #0
    1b9a:	d01c      	beq.n	1bd6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    1b9c:	44d0      	add	r8, sl
    1b9e:	f10a 36ff 	add.w	r6, sl, #4294967295
    1ba2:	f10d 0507 	add.w	r5, sp, #7
    1ba6:	f108 38ff 	add.w	r8, r8, #4294967295
    1baa:	e003      	b.n	1bb4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    1bac:	f7ff fe30 	bl	1810 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1bb0:	45b0      	cmp	r8, r6
    1bb2:	d010      	beq.n	1bd6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    1bb4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1bb8:	2201      	movs	r2, #1
  if (_spi) {
    1bba:	6827      	ldr	r7, [r4, #0]
    1bbc:	4629      	mov	r1, r5
    1bbe:	4620      	mov	r0, r4
  uint8_t data = send;
    1bc0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1bc4:	2f00      	cmp	r7, #0
    1bc6:	d0f1      	beq.n	1bac <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    1bc8:	4613      	mov	r3, r2
    1bca:	4638      	mov	r0, r7
    1bcc:	462a      	mov	r2, r5
    1bce:	f000 f8a3 	bl	1d18 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    1bd2:	45b0      	cmp	r8, r6
    1bd4:	d1ee      	bne.n	1bb4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    1bd6:	4620      	mov	r0, r4
    1bd8:	f7ff ff7c 	bl	1ad4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1bdc:	2001      	movs	r0, #1
    1bde:	b002      	add	sp, #8
    1be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    1be4:	b2c0      	uxtb	r0, r0
    1be6:	2100      	movs	r1, #0
    1be8:	f000 fd66 	bl	26b8 <digitalWrite>
    1bec:	e7b7      	b.n	1b5e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    1bee:	bf00      	nop

00001bf0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    1bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bf4:	4604      	mov	r4, r0
    1bf6:	b083      	sub	sp, #12
  if (_spi) {
    1bf8:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    1bfa:	460f      	mov	r7, r1
    1bfc:	4615      	mov	r5, r2
    1bfe:	469b      	mov	fp, r3
    1c00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    1c04:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    1c08:	b120      	cbz	r0, 1c14 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    1c0a:	6863      	ldr	r3, [r4, #4]
    1c0c:	e893 0006 	ldmia.w	r3, {r1, r2}
    1c10:	f7ff fed8 	bl	19c4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1c14:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1c18:	1c43      	adds	r3, r0, #1
    1c1a:	d148      	bne.n	1cae <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    1c1c:	b1d5      	cbz	r5, 1c54 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    1c1e:	3f01      	subs	r7, #1
    1c20:	eb07 0905 	add.w	r9, r7, r5
    1c24:	f10d 0507 	add.w	r5, sp, #7
    1c28:	e003      	b.n	1c32 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    1c2a:	f7ff fdf1 	bl	1810 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1c2e:	454f      	cmp	r7, r9
    1c30:	d010      	beq.n	1c54 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    1c32:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    1c36:	2201      	movs	r2, #1
  if (_spi) {
    1c38:	6826      	ldr	r6, [r4, #0]
    1c3a:	4629      	mov	r1, r5
    1c3c:	4620      	mov	r0, r4
  uint8_t data = send;
    1c3e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1c42:	2e00      	cmp	r6, #0
    1c44:	d0f1      	beq.n	1c2a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    1c46:	4613      	mov	r3, r2
    1c48:	4630      	mov	r0, r6
    1c4a:	462a      	mov	r2, r5
    1c4c:	f000 f864 	bl	1d18 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    1c50:	454f      	cmp	r7, r9
    1c52:	d1ee      	bne.n	1c32 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    1c54:	f1ba 0f00 	cmp.w	sl, #0
    1c58:	d022      	beq.n	1ca0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    1c5a:	44da      	add	sl, fp
    1c5c:	f10b 36ff 	add.w	r6, fp, #4294967295
    1c60:	f10d 0507 	add.w	r5, sp, #7
    1c64:	f10a 3aff 	add.w	sl, sl, #4294967295
    1c68:	e007      	b.n	1c7a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    1c6a:	f7ff fdd1 	bl	1810 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    1c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1c72:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1c76:	45b2      	cmp	sl, r6
    1c78:	d012      	beq.n	1ca0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    1c7a:	6827      	ldr	r7, [r4, #0]
    1c7c:	2201      	movs	r2, #1
    1c7e:	4629      	mov	r1, r5
    1c80:	4620      	mov	r0, r4
  uint8_t data = send;
    1c82:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    1c86:	2f00      	cmp	r7, #0
    1c88:	d0ef      	beq.n	1c6a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    1c8a:	4613      	mov	r3, r2
    1c8c:	4638      	mov	r0, r7
    1c8e:	462a      	mov	r2, r5
    1c90:	f000 f842 	bl	1d18 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    1c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1c98:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1c9c:	45b2      	cmp	sl, r6
    1c9e:	d1ec      	bne.n	1c7a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    1ca0:	4620      	mov	r0, r4
    1ca2:	f7ff ff17 	bl	1ad4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    1ca6:	2001      	movs	r0, #1
    1ca8:	b003      	add	sp, #12
    1caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    1cae:	b2c0      	uxtb	r0, r0
    1cb0:	2100      	movs	r1, #0
    1cb2:	f000 fd01 	bl	26b8 <digitalWrite>
    1cb6:	e7b1      	b.n	1c1c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00001cb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1cb8:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1cba:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1cbc:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    1cc0:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1cc2:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    1cc4:	b1a3      	cbz	r3, 1cf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1cc6:	b321      	cbz	r1, 1d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    1cc8:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    1ccc:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1cce:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1cd0:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1cd2:	07af      	lsls	r7, r5, #30
    1cd4:	d407      	bmi.n	1ce6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    1cd6:	4615      	mov	r5, r2
				count_read--;
    1cd8:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1cda:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    1cdc:	b11a      	cbz	r2, 1ce6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1cde:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    1ce2:	462a      	mov	r2, r5
    1ce4:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1ce6:	6965      	ldr	r5, [r4, #20]
    1ce8:	07ed      	lsls	r5, r5, #31
    1cea:	d5f1      	bpl.n	1cd0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    1cec:	2b00      	cmp	r3, #0
    1cee:	d1ea      	bne.n	1cc6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1cf0:	b16e      	cbz	r6, 1d0e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    1cf2:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1cf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
    1cf6:	0789      	lsls	r1, r1, #30
    1cf8:	d4fa      	bmi.n	1cf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    1cfa:	4611      	mov	r1, r2
			count_read--;
    1cfc:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    1d00:	2a00      	cmp	r2, #0
    1d02:	d0f5      	beq.n	1cf0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d04:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    1d08:	460a      	mov	r2, r1
	while (count_read) {
    1d0a:	2e00      	cmp	r6, #0
    1d0c:	d1f1      	bne.n	1cf2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    1d0e:	bcf0      	pop	{r4, r5, r6, r7}
    1d10:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d12:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1d16:	e7d9      	b.n	1ccc <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00001d18 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    1d18:	b10b      	cbz	r3, 1d1e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1d1a:	f7ff bfcd 	b.w	1cb8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    1d1e:	4770      	bx	lr

00001d20 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/**************************************************************************/
/*!
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {}
    1d20:	2200      	movs	r2, #0
    1d22:	6002      	str	r2, [r0, #0]
    1d24:	4770      	bx	lr
    1d26:	bf00      	nop

00001d28 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>:
    @param i2c_address The I2C address of the DAC, defaults to 0x62
    @param wire The I2C TwoWire object to use, defaults to &Wire
    @returns True if DAC was found on the I2C address.
*/
/**************************************************************************/
bool Adafruit_MCP4725::begin(uint8_t i2c_address, TwoWire *wire) {
    1d28:	b530      	push	{r4, r5, lr}
    1d2a:	4604      	mov	r4, r0
  if (i2c_dev) {
    1d2c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_MCP4725::begin(uint8_t i2c_address, TwoWire *wire) {
    1d2e:	b083      	sub	sp, #12
    1d30:	460d      	mov	r5, r1
  if (i2c_dev) {
    1d32:	b120      	cbz	r0, 1d3e <Adafruit_MCP4725::begin(unsigned char, TwoWire*)+0x16>
    delete i2c_dev;
    1d34:	2110      	movs	r1, #16
    1d36:	9201      	str	r2, [sp, #4]
    1d38:	f000 fdd6 	bl	28e8 <operator delete(void*, unsigned int)>
    1d3c:	9a01      	ldr	r2, [sp, #4]
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
    1d3e:	2010      	movs	r0, #16
    1d40:	9201      	str	r2, [sp, #4]
    1d42:	f000 fdcf 	bl	28e4 <operator new(unsigned int)>
    1d46:	4629      	mov	r1, r5
    1d48:	4605      	mov	r5, r0
    1d4a:	9a01      	ldr	r2, [sp, #4]
    1d4c:	f7ff fc9c 	bl	1688 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>

  if (!i2c_dev->begin()) {
    1d50:	2101      	movs	r1, #1
    1d52:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
    1d54:	6025      	str	r5, [r4, #0]
    return false;
  }

  return true;
}
    1d56:	b003      	add	sp, #12
    1d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
    1d5c:	f7ff bc9e 	b.w	169c <Adafruit_I2CDevice::begin(bool)>

00001d60 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>:
    to the DAC, defaults to 400 KHz
    @returns True if able to write the value over I2C
*/
/**************************************************************************/
bool Adafruit_MCP4725::setVoltage(uint16_t output, bool writeEEPROM,
                                  uint32_t i2c_frequency) {
    1d60:	b570      	push	{r4, r5, r6, lr}
    1d62:	4616      	mov	r6, r2
    1d64:	b084      	sub	sp, #16
    1d66:	460c      	mov	r4, r1
    1d68:	4605      	mov	r5, r0
  i2c_dev->setSpeed(i2c_frequency); // Set I2C frequency to desired speed
    1d6a:	4619      	mov	r1, r3
    1d6c:	6800      	ldr	r0, [r0, #0]
    1d6e:	f7ff fd49 	bl	1804 <Adafruit_I2CDevice::setSpeed(unsigned long)>
  uint8_t packet[3];

  if (writeEEPROM) {
    packet[0] = MCP4725_CMD_WRITEDACEEPROM;
  } else {
    packet[0] = MCP4725_CMD_WRITEDAC;
    1d72:	2e00      	cmp	r6, #0
  }
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    1d74:	ea4f 1214 	mov.w	r2, r4, lsr #4
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)

  if (!i2c_dev->write(packet, 3)) {
    1d78:	f04f 0300 	mov.w	r3, #0
    packet[0] = MCP4725_CMD_WRITEDAC;
    1d7c:	bf14      	ite	ne
    1d7e:	2160      	movne	r1, #96	; 0x60
    1d80:	2140      	moveq	r1, #64	; 0x40
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    1d82:	0124      	lsls	r4, r4, #4
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    1d84:	f88d 200d 	strb.w	r2, [sp, #13]
    1d88:	f88d 100c 	strb.w	r1, [sp, #12]
  if (!i2c_dev->write(packet, 3)) {
    1d8c:	2203      	movs	r2, #3
    1d8e:	a903      	add	r1, sp, #12
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    1d90:	f88d 400e 	strb.w	r4, [sp, #14]
  if (!i2c_dev->write(packet, 3)) {
    1d94:	e9cd 3300 	strd	r3, r3, [sp]
    1d98:	2301      	movs	r3, #1
    1d9a:	6828      	ldr	r0, [r5, #0]
    1d9c:	f7ff fc9a 	bl	16d4 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    1da0:	4604      	mov	r4, r0
    1da2:	b118      	cbz	r0, 1dac <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x4c>
    return false;
  }

  i2c_dev->setSpeed(100000); // reset to arduino default
    1da4:	4903      	ldr	r1, [pc, #12]	; (1db4 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x54>)
    1da6:	6828      	ldr	r0, [r5, #0]
    1da8:	f7ff fd2c 	bl	1804 <Adafruit_I2CDevice::setSpeed(unsigned long)>
  return true;
}
    1dac:	4620      	mov	r0, r4
    1dae:	b004      	add	sp, #16
    1db0:	bd70      	pop	{r4, r5, r6, pc}
    1db2:	bf00      	nop
    1db4:	000186a0 	.word	0x000186a0

00001db8 <EventResponder::runFromInterrupt()>:
{
    1db8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1dba:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1dbe:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1dc0:	4c0c      	ldr	r4, [pc, #48]	; (1df4 <EventResponder::runFromInterrupt()+0x3c>)
    1dc2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1dc4:	b180      	cbz	r0, 1de8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    1dc6:	4e0c      	ldr	r6, [pc, #48]	; (1df8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1dc8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1dca:	6943      	ldr	r3, [r0, #20]
    1dcc:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1dce:	b173      	cbz	r3, 1dee <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1dd0:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1dd2:	b902      	cbnz	r2, 1dd6 <EventResponder::runFromInterrupt()+0x1e>
    1dd4:	b662      	cpsie	i
			(*(first->_function))(*first);
    1dd6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1dd8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1dda:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ddc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1de0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1de2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1de4:	2800      	cmp	r0, #0
    1de6:	d1f0      	bne.n	1dca <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1de8:	b902      	cbnz	r2, 1dec <EventResponder::runFromInterrupt()+0x34>
    1dea:	b662      	cpsie	i
}
    1dec:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1dee:	6033      	str	r3, [r6, #0]
    1df0:	e7ef      	b.n	1dd2 <EventResponder::runFromInterrupt()+0x1a>
    1df2:	bf00      	nop
    1df4:	20001d10 	.word	0x20001d10
    1df8:	20001d0c 	.word	0x20001d0c

00001dfc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1dfc:	f7ff bfdc 	b.w	1db8 <EventResponder::runFromInterrupt()>

00001e00 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1e00:	4904      	ldr	r1, [pc, #16]	; (1e14 <systick_isr+0x14>)
	systick_millis_count++;
    1e02:	4a05      	ldr	r2, [pc, #20]	; (1e18 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1e04:	6849      	ldr	r1, [r1, #4]
    1e06:	4b05      	ldr	r3, [pc, #20]	; (1e1c <systick_isr+0x1c>)
    1e08:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1e0a:	6813      	ldr	r3, [r2, #0]
    1e0c:	3301      	adds	r3, #1
    1e0e:	6013      	str	r3, [r2, #0]
}
    1e10:	4770      	bx	lr
    1e12:	bf00      	nop
    1e14:	e0001000 	.word	0xe0001000
    1e18:	20002b34 	.word	0x20002b34
    1e1c:	20002b30 	.word	0x20002b30

00001e20 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    1e20:	4801      	ldr	r0, [pc, #4]	; (1e28 <IRQHandler_Serial1+0x8>)
    1e22:	f002 bbf5 	b.w	4610 <HardwareSerialIMXRT::IRQHandler()>
    1e26:	bf00      	nop
    1e28:	20000da0 	.word	0x20000da0

00001e2c <Print::write(unsigned char const*, unsigned int)>:
{
    1e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1e30:	460c      	mov	r4, r1
    1e32:	b1d1      	cbz	r1, 1e6a <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    1e34:	b1ea      	cbz	r2, 1e72 <Print::write(unsigned char const*, unsigned int)+0x46>
    1e36:	4680      	mov	r8, r0
    1e38:	188e      	adds	r6, r1, r2
	size_t count = 0;
    1e3a:	2500      	movs	r5, #0
    1e3c:	4f0e      	ldr	r7, [pc, #56]	; (1e78 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    1e3e:	e004      	b.n	1e4a <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1e40:	f002 f818 	bl	3e74 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1e44:	42b4      	cmp	r4, r6
    1e46:	4405      	add	r5, r0
    1e48:	d00c      	beq.n	1e64 <Print::write(unsigned char const*, unsigned int)+0x38>
    1e4a:	f8d8 3000 	ldr.w	r3, [r8]
    1e4e:	f814 0b01 	ldrb.w	r0, [r4], #1
    1e52:	681b      	ldr	r3, [r3, #0]
    1e54:	42bb      	cmp	r3, r7
    1e56:	d0f3      	beq.n	1e40 <Print::write(unsigned char const*, unsigned int)+0x14>
    1e58:	4601      	mov	r1, r0
    1e5a:	4640      	mov	r0, r8
    1e5c:	4798      	blx	r3
    1e5e:	42b4      	cmp	r4, r6
    1e60:	4405      	add	r5, r0
    1e62:	d1f2      	bne.n	1e4a <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    1e64:	4628      	mov	r0, r5
    1e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1e6a:	460d      	mov	r5, r1
}
    1e6c:	4628      	mov	r0, r5
    1e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1e72:	4615      	mov	r5, r2
    1e74:	e7f6      	b.n	1e64 <Print::write(unsigned char const*, unsigned int)+0x38>
    1e76:	bf00      	nop
    1e78:	00000c95 	.word	0x00000c95

00001e7c <Print::print(String const&)>:
{
    1e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    1e80:	688c      	ldr	r4, [r1, #8]
    1e82:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    1e84:	b1dc      	cbz	r4, 1ebe <Print::print(String const&)+0x42>
	unsigned int index = 0;
    1e86:	2500      	movs	r5, #0
    1e88:	4688      	mov	r8, r1
    1e8a:	4606      	mov	r6, r0
	size_t count = 0;
    1e8c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    1e8e:	462b      	mov	r3, r5
    1e90:	2221      	movs	r2, #33	; 0x21
    1e92:	a901      	add	r1, sp, #4
    1e94:	4640      	mov	r0, r8
    1e96:	f000 f9b9 	bl	220c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    1e9a:	2c20      	cmp	r4, #32
    1e9c:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    1e9e:	6833      	ldr	r3, [r6, #0]
    1ea0:	bf28      	it	cs
    1ea2:	2220      	movcs	r2, #32
    1ea4:	a901      	add	r1, sp, #4
    1ea6:	4630      	mov	r0, r6
    1ea8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    1eaa:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    1eac:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    1eae:	4798      	blx	r3
    1eb0:	4407      	add	r7, r0
	while (len > 0) {
    1eb2:	2c00      	cmp	r4, #0
    1eb4:	d1eb      	bne.n	1e8e <Print::print(String const&)+0x12>
}
    1eb6:	4638      	mov	r0, r7
    1eb8:	b00a      	add	sp, #40	; 0x28
    1eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    1ebe:	4627      	mov	r7, r4
}
    1ec0:	4638      	mov	r0, r7
    1ec2:	b00a      	add	sp, #40	; 0x28
    1ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001ec8 <Print::println()>:
{
    1ec8:	b500      	push	{lr}
	return write(buf, 2);
    1eca:	6803      	ldr	r3, [r0, #0]
{
    1ecc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    1ece:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    1ed2:	2202      	movs	r2, #2
    1ed4:	a901      	add	r1, sp, #4
    1ed6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1ed8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1edc:	4798      	blx	r3
}
    1ede:	b003      	add	sp, #12
    1ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ee4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1ee4:	4b05      	ldr	r3, [pc, #20]	; (1efc <_write+0x18>)
    1ee6:	2802      	cmp	r0, #2
    1ee8:	bf88      	it	hi
    1eea:	4603      	movhi	r3, r0
{
    1eec:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1eee:	681c      	ldr	r4, [r3, #0]
    1ef0:	4618      	mov	r0, r3
    1ef2:	6863      	ldr	r3, [r4, #4]
}
    1ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1ef8:	4718      	bx	r3
    1efa:	bf00      	nop
    1efc:	20000d90 	.word	0x20000d90

00001f00 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1f00:	f001 bf42 	b.w	3d88 <usb_serial_peekchar>

00001f04 <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    1f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    1f08:	2700      	movs	r7, #0
{
    1f0a:	468b      	mov	fp, r1
    1f0c:	4681      	mov	r9, r0
    1f0e:	4692      	mov	sl, r2
	String str;
    1f10:	4639      	mov	r1, r7
    1f12:	f103 38ff 	add.w	r8, r3, #4294967295
    1f16:	4c17      	ldr	r4, [pc, #92]	; (1f74 <Stream::readStringUntil(char, unsigned int)+0x70>)
    1f18:	4e17      	ldr	r6, [pc, #92]	; (1f78 <Stream::readStringUntil(char, unsigned int)+0x74>)
    1f1a:	f000 f82f 	bl	1f7c <String::String(char const*)>
	return systick_millis_count;
    1f1e:	6825      	ldr	r5, [r4, #0]
    1f20:	e00b      	b.n	1f3a <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    1f22:	f001 ff97 	bl	3e54 <usb_serial_getchar>
    if (c >= 0) return c;
    1f26:	2800      	cmp	r0, #0
    1f28:	da10      	bge.n	1f4c <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    1f2a:	f002 f837 	bl	3f9c <yield>
    1f2e:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    1f30:	f8db 2008 	ldr.w	r2, [fp, #8]
    1f34:	1b5b      	subs	r3, r3, r5
    1f36:	4293      	cmp	r3, r2
    1f38:	d215      	bcs.n	1f66 <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    1f3a:	f8db 3000 	ldr.w	r3, [fp]
    1f3e:	695b      	ldr	r3, [r3, #20]
    1f40:	42b3      	cmp	r3, r6
    1f42:	d0ee      	beq.n	1f22 <Stream::readStringUntil(char, unsigned int)+0x1e>
    1f44:	4658      	mov	r0, fp
    1f46:	4798      	blx	r3
    if (c >= 0) return c;
    1f48:	2800      	cmp	r0, #0
    1f4a:	dbee      	blt.n	1f2a <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    1f4c:	d008      	beq.n	1f60 <Stream::readStringUntil(char, unsigned int)+0x5c>
    1f4e:	4582      	cmp	sl, r0
    1f50:	d006      	beq.n	1f60 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    1f52:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    1f54:	b2c1      	uxtb	r1, r0
    1f56:	4648      	mov	r0, r9
    1f58:	f000 f92a 	bl	21b0 <String::append(char)>
	while (length < max || !max) {
    1f5c:	4547      	cmp	r7, r8
    1f5e:	d9de      	bls.n	1f1e <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    1f60:	4648      	mov	r0, r9
    1f62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    1f66:	2301      	movs	r3, #1
    1f68:	4648      	mov	r0, r9
    1f6a:	f88b 300c 	strb.w	r3, [fp, #12]
    1f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f72:	bf00      	nop
    1f74:	20002b34 	.word	0x20002b34
    1f78:	00000c91 	.word	0x00000c91

00001f7c <String::String(char const*)>:
String::String(const char *cstr)
    1f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    1f7e:	2600      	movs	r6, #0
String::String(const char *cstr)
    1f80:	4604      	mov	r4, r0
	capacity = 0;
    1f82:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    1f86:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    1f88:	b129      	cbz	r1, 1f96 <String::String(char const*)+0x1a>
    1f8a:	4608      	mov	r0, r1
    1f8c:	460d      	mov	r5, r1
    1f8e:	f004 fa17 	bl	63c0 <strlen>
	if (length == 0) {
    1f92:	4607      	mov	r7, r0
    1f94:	b908      	cbnz	r0, 1f9a <String::String(char const*)+0x1e>
}
    1f96:	4620      	mov	r0, r4
    1f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1f9a:	3001      	adds	r0, #1
    1f9c:	f002 fd30 	bl	4a00 <malloc>
	if (newbuffer) {
    1fa0:	2800      	cmp	r0, #0
    1fa2:	d0f8      	beq.n	1f96 <String::String(char const*)+0x1a>
	strcpy(buffer, cstr);
    1fa4:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    1fa6:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    1fa8:	6020      	str	r0, [r4, #0]
	len = length;
    1faa:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    1fae:	f004 f9a5 	bl	62fc <strcpy>
}
    1fb2:	4620      	mov	r0, r4
    1fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fb6:	bf00      	nop

00001fb8 <String::String(String const&)>:
String::String(const String &value)
    1fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    1fba:	4288      	cmp	r0, r1
	buffer = NULL;
    1fbc:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    1fc0:	4604      	mov	r4, r0
	len = 0;
    1fc2:	6085      	str	r5, [r0, #8]
	capacity = 0;
    1fc4:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    1fc8:	d002      	beq.n	1fd0 <String::String(String const&)+0x18>
    1fca:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    1fcc:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    1fce:	b90e      	cbnz	r6, 1fd4 <String::String(String const&)+0x1c>
}
    1fd0:	4620      	mov	r0, r4
    1fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1fd4:	1c70      	adds	r0, r6, #1
    1fd6:	f002 fd13 	bl	4a00 <malloc>
	if (newbuffer) {
    1fda:	2800      	cmp	r0, #0
    1fdc:	d0f8      	beq.n	1fd0 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    1fde:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    1fe0:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    1fe2:	6020      	str	r0, [r4, #0]
	len = length;
    1fe4:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    1fe8:	f004 f988 	bl	62fc <strcpy>
}
    1fec:	4620      	mov	r0, r4
    1fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001ff0 <String::String(String&&)>:
	buffer = NULL;
    1ff0:	2300      	movs	r3, #0
	if (&rhs == this) return;
    1ff2:	4288      	cmp	r0, r1
	capacity = 0;
    1ff4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    1ff8:	6083      	str	r3, [r0, #8]
	if (&rhs == this) return;
    1ffa:	d00c      	beq.n	2016 <String::String(String&&)+0x26>
String::String(String &&rval)
    1ffc:	b410      	push	{r4}
	capacity = rhs.capacity;
    1ffe:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    2002:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    2006:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    200a:	688a      	ldr	r2, [r1, #8]
}
    200c:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    2010:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    2012:	6082      	str	r2, [r0, #8]
}
    2014:	4770      	bx	lr
    2016:	4770      	bx	lr

00002018 <String::~String()>:
String::~String()
    2018:	b510      	push	{r4, lr}
    201a:	4604      	mov	r4, r0
	free(buffer);
    201c:	6800      	ldr	r0, [r0, #0]
    201e:	f002 fcf7 	bl	4a10 <free>
}
    2022:	4620      	mov	r0, r4
    2024:	bd10      	pop	{r4, pc}
    2026:	bf00      	nop

00002028 <String::copy(char const*, unsigned int)>:
{
    2028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    202a:	4604      	mov	r4, r0
	if (length == 0) {
    202c:	4615      	mov	r5, r2
    202e:	b932      	cbnz	r2, 203e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2030:	6803      	ldr	r3, [r0, #0]
    2032:	b103      	cbz	r3, 2036 <String::copy(char const*, unsigned int)+0xe>
    2034:	701a      	strb	r2, [r3, #0]
		len = 0;
    2036:	2300      	movs	r3, #0
}
    2038:	4620      	mov	r0, r4
		len = 0;
    203a:	60a3      	str	r3, [r4, #8]
}
    203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    203e:	6843      	ldr	r3, [r0, #4]
    2040:	460e      	mov	r6, r1
    2042:	429a      	cmp	r2, r3
    2044:	d91c      	bls.n	2080 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2046:	1c51      	adds	r1, r2, #1
    2048:	6800      	ldr	r0, [r0, #0]
    204a:	f002 ffa5 	bl	4f98 <realloc>
	if (newbuffer) {
    204e:	4607      	mov	r7, r0
    2050:	b160      	cbz	r0, 206c <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    2052:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2054:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    2058:	b90b      	cbnz	r3, 205e <String::copy(char const*, unsigned int)+0x36>
    205a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    205c:	6827      	ldr	r7, [r4, #0]
    205e:	4631      	mov	r1, r6
    2060:	4638      	mov	r0, r7
	len = length;
    2062:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2064:	f004 f94a 	bl	62fc <strcpy>
}
    2068:	4620      	mov	r0, r4
    206a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    206c:	6820      	ldr	r0, [r4, #0]
    206e:	b110      	cbz	r0, 2076 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    2070:	f002 fcce 	bl	4a10 <free>
			buffer = NULL;
    2074:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    2076:	2300      	movs	r3, #0
}
    2078:	4620      	mov	r0, r4
		len = capacity = 0;
    207a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    2080:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    2082:	4631      	mov	r1, r6
	len = length;
    2084:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2086:	4638      	mov	r0, r7
    2088:	f004 f938 	bl	62fc <strcpy>
	return *this;
    208c:	e7ec      	b.n	2068 <String::copy(char const*, unsigned int)+0x40>
    208e:	bf00      	nop

00002090 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    2090:	b510      	push	{r4, lr}
	buffer = NULL;
    2092:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    2094:	b08a      	sub	sp, #40	; 0x28
    2096:	4604      	mov	r4, r0
	itoa(value, buf, base);
    2098:	4608      	mov	r0, r1
    209a:	a901      	add	r1, sp, #4
	len = 0;
    209c:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    209e:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    20a2:	f002 fc97 	bl	49d4 <itoa>
		copy(cstr, strlen(cstr));
    20a6:	a801      	add	r0, sp, #4
    20a8:	f004 f98a 	bl	63c0 <strlen>
    20ac:	a901      	add	r1, sp, #4
    20ae:	4602      	mov	r2, r0
    20b0:	4620      	mov	r0, r4
    20b2:	f7ff ffb9 	bl	2028 <String::copy(char const*, unsigned int)>
}
    20b6:	4620      	mov	r0, r4
    20b8:	b00a      	add	sp, #40	; 0x28
    20ba:	bd10      	pop	{r4, pc}

000020bc <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    20bc:	b510      	push	{r4, lr}
	buffer = NULL;
    20be:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    20c0:	b08a      	sub	sp, #40	; 0x28
    20c2:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    20c4:	4608      	mov	r0, r1
    20c6:	a901      	add	r1, sp, #4
	len = 0;
    20c8:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    20ca:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    20ce:	f000 fc0d 	bl	28ec <ultoa>
		copy(cstr, strlen(cstr));
    20d2:	a801      	add	r0, sp, #4
    20d4:	f004 f974 	bl	63c0 <strlen>
    20d8:	a901      	add	r1, sp, #4
    20da:	4602      	mov	r2, r0
    20dc:	4620      	mov	r0, r4
    20de:	f7ff ffa3 	bl	2028 <String::copy(char const*, unsigned int)>
}
    20e2:	4620      	mov	r0, r4
    20e4:	b00a      	add	sp, #40	; 0x28
    20e6:	bd10      	pop	{r4, pc}

000020e8 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    20e8:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    20ea:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    20ec:	4604      	mov	r4, r0
    20ee:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    20f0:	1c88      	adds	r0, r1, #2
	len = 0;
    20f2:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    20f4:	466a      	mov	r2, sp
	capacity = 0;
    20f6:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    20fa:	f000 fc29 	bl	2950 <dtostrf>
	if (cstr) {
    20fe:	4605      	mov	r5, r0
    2100:	b148      	cbz	r0, 2116 <String::String(float, unsigned char)+0x2e>
		copy(cstr, strlen(cstr));
    2102:	f004 f95d 	bl	63c0 <strlen>
    2106:	4629      	mov	r1, r5
    2108:	4602      	mov	r2, r0
    210a:	4620      	mov	r0, r4
    210c:	f7ff ff8c 	bl	2028 <String::copy(char const*, unsigned int)>
}
    2110:	4620      	mov	r0, r4
    2112:	b00b      	add	sp, #44	; 0x2c
    2114:	bd30      	pop	{r4, r5, pc}
		len = 0;
    2116:	60a0      	str	r0, [r4, #8]
}
    2118:	4620      	mov	r0, r4
    211a:	b00b      	add	sp, #44	; 0x2c
    211c:	bd30      	pop	{r4, r5, pc}
    211e:	bf00      	nop

00002120 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    2120:	4281      	cmp	r1, r0
    2122:	d003      	beq.n	212c <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    2124:	688a      	ldr	r2, [r1, #8]
    2126:	6809      	ldr	r1, [r1, #0]
    2128:	f7ff bf7e 	b.w	2028 <String::copy(char const*, unsigned int)>
}
    212c:	4770      	bx	lr
    212e:	bf00      	nop

00002130 <String::append(char const*, unsigned int)>:
{
    2130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2134:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2136:	6800      	ldr	r0, [r0, #0]
{
    2138:	460d      	mov	r5, r1
    213a:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    213c:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    213e:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2140:	d809      	bhi.n	2156 <String::append(char const*, unsigned int)+0x26>
    2142:	18c2      	adds	r2, r0, r3
    2144:	4291      	cmp	r1, r2
    2146:	d206      	bcs.n	2156 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    2148:	1a0f      	subs	r7, r1, r0
		self = true;
    214a:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    214e:	b936      	cbnz	r6, 215e <String::append(char const*, unsigned int)+0x2e>
}
    2150:	4620      	mov	r0, r4
    2152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    2156:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    215a:	2e00      	cmp	r6, #0
    215c:	d0f8      	beq.n	2150 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    215e:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    2162:	6862      	ldr	r2, [r4, #4]
    2164:	4590      	cmp	r8, r2
    2166:	d90c      	bls.n	2182 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2168:	f108 0101 	add.w	r1, r8, #1
    216c:	f002 ff14 	bl	4f98 <realloc>
	if (newbuffer) {
    2170:	2800      	cmp	r0, #0
    2172:	d0ed      	beq.n	2150 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    2174:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2176:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    217a:	b913      	cbnz	r3, 2182 <String::append(char const*, unsigned int)+0x52>
    217c:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    217e:	6820      	ldr	r0, [r4, #0]
    2180:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    2182:	f1b9 0f00 	cmp.w	r9, #0
    2186:	d108      	bne.n	219a <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    2188:	4629      	mov	r1, r5
    218a:	4418      	add	r0, r3
    218c:	f004 f8b6 	bl	62fc <strcpy>
}
    2190:	4620      	mov	r0, r4
	len = newlen;
    2192:	f8c4 8008 	str.w	r8, [r4, #8]
}
    2196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    219a:	4632      	mov	r2, r6
    219c:	19c1      	adds	r1, r0, r7
    219e:	4418      	add	r0, r3
    21a0:	f000 fb06 	bl	27b0 <memcpy>
		buffer[newlen] = 0;
    21a4:	6823      	ldr	r3, [r4, #0]
    21a6:	2200      	movs	r2, #0
    21a8:	f803 2008 	strb.w	r2, [r3, r8]
    21ac:	e7f0      	b.n	2190 <String::append(char const*, unsigned int)+0x60>
    21ae:	bf00      	nop

000021b0 <String::append(char)>:
{
    21b0:	b510      	push	{r4, lr}
    21b2:	b082      	sub	sp, #8
	buf[1] = 0;
    21b4:	2300      	movs	r3, #0
{
    21b6:	4604      	mov	r4, r0
	append(buf, 1);
    21b8:	2201      	movs	r2, #1
	buf[0] = c;
    21ba:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    21be:	a901      	add	r1, sp, #4
	buf[1] = 0;
    21c0:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    21c4:	f7ff ffb4 	bl	2130 <String::append(char const*, unsigned int)>
}
    21c8:	4620      	mov	r0, r4
    21ca:	b002      	add	sp, #8
    21cc:	bd10      	pop	{r4, pc}
    21ce:	bf00      	nop

000021d0 <operator+(StringSumHelper const&, String const&)>:
{
    21d0:	b510      	push	{r4, lr}
    21d2:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    21d4:	688a      	ldr	r2, [r1, #8]
    21d6:	6809      	ldr	r1, [r1, #0]
    21d8:	f7ff ffaa 	bl	2130 <String::append(char const*, unsigned int)>
}
    21dc:	4620      	mov	r0, r4
    21de:	bd10      	pop	{r4, pc}

000021e0 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    21e0:	6882      	ldr	r2, [r0, #8]
{
    21e2:	b508      	push	{r3, lr}
    21e4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    21e6:	b13a      	cbz	r2, 21f8 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    21e8:	b161      	cbz	r1, 2204 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    21ea:	6800      	ldr	r0, [r0, #0]
    21ec:	f003 ff1c 	bl	6028 <strcmp>
    21f0:	fab0 f080 	clz	r0, r0
    21f4:	0940      	lsrs	r0, r0, #5
}
    21f6:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    21f8:	b131      	cbz	r1, 2208 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    21fa:	7818      	ldrb	r0, [r3, #0]
    21fc:	fab0 f080 	clz	r0, r0
    2200:	0940      	lsrs	r0, r0, #5
}
    2202:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    2204:	6803      	ldr	r3, [r0, #0]
    2206:	e7f8      	b.n	21fa <String::equals(char const*) const+0x1a>
    2208:	2001      	movs	r0, #1
}
    220a:	bd08      	pop	{r3, pc}

0000220c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    220c:	b1c2      	cbz	r2, 2240 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    220e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    2210:	fab1 f681 	clz	r6, r1
    2214:	460c      	mov	r4, r1
    2216:	0976      	lsrs	r6, r6, #5
    2218:	b119      	cbz	r1, 2222 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    221a:	6885      	ldr	r5, [r0, #8]
    221c:	429d      	cmp	r5, r3
    221e:	d801      	bhi.n	2224 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    2220:	700e      	strb	r6, [r1, #0]
}
    2222:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    2224:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    2226:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    222a:	6801      	ldr	r1, [r0, #0]
    222c:	4620      	mov	r0, r4
    222e:	4565      	cmp	r5, ip
    2230:	4419      	add	r1, r3
    2232:	bf28      	it	cs
    2234:	4665      	movcs	r5, ip
    2236:	462a      	mov	r2, r5
    2238:	f003 fc0e 	bl	5a58 <strncpy>
	buf[n] = 0;
    223c:	5566      	strb	r6, [r4, r5]
}
    223e:	bd70      	pop	{r4, r5, r6, pc}
    2240:	4770      	bx	lr
    2242:	bf00      	nop

00002244 <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    2244:	6883      	ldr	r3, [r0, #8]
    2246:	b143      	cbz	r3, 225a <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2248:	6809      	ldr	r1, [r1, #0]
{
    224a:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    224c:	6804      	ldr	r4, [r0, #0]
    224e:	4620      	mov	r0, r4
    2250:	f003 fd94 	bl	5d7c <strstr>
	if (found == NULL) return -1;
    2254:	b120      	cbz	r0, 2260 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    2256:	1b00      	subs	r0, r0, r4
}
    2258:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    225a:	f04f 30ff 	mov.w	r0, #4294967295
}
    225e:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    2260:	f04f 30ff 	mov.w	r0, #4294967295
}
    2264:	bd10      	pop	{r4, pc}
    2266:	bf00      	nop

00002268 <String::substring(unsigned int) const>:
{
    2268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    226c:	688f      	ldr	r7, [r1, #8]
{
    226e:	460e      	mov	r6, r1
    2270:	4605      	mov	r5, r0
	if (left > right) {
    2272:	4297      	cmp	r7, r2
    2274:	d202      	bcs.n	227c <String::substring(unsigned int) const+0x14>
    2276:	4613      	mov	r3, r2
    2278:	463a      	mov	r2, r7
    227a:	461f      	mov	r7, r3
	buffer = NULL;
    227c:	2300      	movs	r3, #0
	len = 0;
    227e:	60ab      	str	r3, [r5, #8]
	if (left > len) return out;
    2280:	68b0      	ldr	r0, [r6, #8]
    2282:	4290      	cmp	r0, r2
	capacity = 0;
    2284:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    2288:	d314      	bcc.n	22b4 <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    228a:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    228c:	6831      	ldr	r1, [r6, #0]
    228e:	bf28      	it	cs
    2290:	4607      	movcs	r7, r0
    2292:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    2296:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    2298:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    229a:	189c      	adds	r4, r3, r2
    229c:	d00d      	beq.n	22ba <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    229e:	4620      	mov	r0, r4
    22a0:	f004 f88e 	bl	63c0 <strlen>
    22a4:	4621      	mov	r1, r4
    22a6:	4602      	mov	r2, r0
    22a8:	4628      	mov	r0, r5
    22aa:	f7ff febd 	bl	2028 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    22ae:	6833      	ldr	r3, [r6, #0]
    22b0:	f803 8007 	strb.w	r8, [r3, r7]
}
    22b4:	4628      	mov	r0, r5
    22b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    22ba:	60ac      	str	r4, [r5, #8]
    22bc:	e7f8      	b.n	22b0 <String::substring(unsigned int) const+0x48>
    22be:	bf00      	nop

000022c0 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    22c0:	429a      	cmp	r2, r3
{
    22c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22c6:	4605      	mov	r5, r0
    22c8:	460e      	mov	r6, r1
	if (left > right) {
    22ca:	d902      	bls.n	22d2 <String::substring(unsigned int, unsigned int) const+0x12>
    22cc:	4611      	mov	r1, r2
    22ce:	461a      	mov	r2, r3
    22d0:	460b      	mov	r3, r1
	buffer = NULL;
    22d2:	2100      	movs	r1, #0
	len = 0;
    22d4:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    22d6:	68b7      	ldr	r7, [r6, #8]
    22d8:	4297      	cmp	r7, r2
	capacity = 0;
    22da:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    22de:	d314      	bcc.n	230a <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    22e0:	429f      	cmp	r7, r3
    22e2:	bf28      	it	cs
    22e4:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    22e6:	6833      	ldr	r3, [r6, #0]
    22e8:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    22ec:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    22ee:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    22f0:	189c      	adds	r4, r3, r2
    22f2:	d00d      	beq.n	2310 <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    22f4:	4620      	mov	r0, r4
    22f6:	f004 f863 	bl	63c0 <strlen>
    22fa:	4621      	mov	r1, r4
    22fc:	4602      	mov	r2, r0
    22fe:	4628      	mov	r0, r5
    2300:	f7ff fe92 	bl	2028 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    2304:	6833      	ldr	r3, [r6, #0]
    2306:	f803 8007 	strb.w	r8, [r3, r7]
}
    230a:	4628      	mov	r0, r5
    230c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2310:	60ac      	str	r4, [r5, #8]
    2312:	e7f8      	b.n	2306 <String::substring(unsigned int, unsigned int) const+0x46>

00002314 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    2314:	6800      	ldr	r0, [r0, #0]
    2316:	b108      	cbz	r0, 231c <String::toInt() const+0x8>
    2318:	f002 bb58 	b.w	49cc <atol>
	return 0;
}
    231c:	4770      	bx	lr
    231e:	bf00      	nop

00002320 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2320:	49a2      	ldr	r1, [pc, #648]	; (25ac <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2322:	4ba3      	ldr	r3, [pc, #652]	; (25b0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2324:	4288      	cmp	r0, r1
{
    2326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    232a:	4ca2      	ldr	r4, [pc, #648]	; (25b4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    232c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    232e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2330:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2334:	d91b      	bls.n	236e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2336:	4ba0      	ldr	r3, [pc, #640]	; (25b8 <set_arm_clock+0x298>)
    2338:	4298      	cmp	r0, r3
    233a:	f240 8102 	bls.w	2542 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    233e:	1ac3      	subs	r3, r0, r3
    2340:	499e      	ldr	r1, [pc, #632]	; (25bc <set_arm_clock+0x29c>)
    2342:	0a1b      	lsrs	r3, r3, #8
    2344:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2348:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    234c:	09db      	lsrs	r3, r3, #7
    234e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2352:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2356:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    235a:	428b      	cmp	r3, r1
    235c:	bf28      	it	cs
    235e:	460b      	movcs	r3, r1
    2360:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2364:	4b96      	ldr	r3, [pc, #600]	; (25c0 <set_arm_clock+0x2a0>)
    2366:	fba3 3707 	umull	r3, r7, r3, r7
    236a:	08ff      	lsrs	r7, r7, #3
    236c:	e004      	b.n	2378 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    236e:	4f95      	ldr	r7, [pc, #596]	; (25c4 <set_arm_clock+0x2a4>)
    2370:	42b8      	cmp	r0, r7
    2372:	bf8c      	ite	hi
    2374:	270e      	movhi	r7, #14
    2376:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2378:	498d      	ldr	r1, [pc, #564]	; (25b0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    237a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    237e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2382:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2384:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2388:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    238c:	d20c      	bcs.n	23a8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    238e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2392:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2396:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    239a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    239e:	680b      	ldr	r3, [r1, #0]
    23a0:	2b00      	cmp	r3, #0
    23a2:	dafc      	bge.n	239e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    23a4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    23a8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    23ac:	d124      	bne.n	23f8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    23ae:	4986      	ldr	r1, [pc, #536]	; (25c8 <set_arm_clock+0x2a8>)
    23b0:	690c      	ldr	r4, [r1, #16]
    23b2:	4986      	ldr	r1, [pc, #536]	; (25cc <set_arm_clock+0x2ac>)
    23b4:	43a1      	bics	r1, r4
    23b6:	f000 80ea 	beq.w	258e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    23ba:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    23be:	4634      	mov	r4, r6
    23c0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    23c4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    23c8:	d004      	beq.n	23d4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    23ca:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    23ce:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    23d0:	4b77      	ldr	r3, [pc, #476]	; (25b0 <set_arm_clock+0x290>)
    23d2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    23d4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    23d8:	d007      	beq.n	23ea <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    23da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    23de:	4974      	ldr	r1, [pc, #464]	; (25b0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    23e0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    23e2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    23e4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    23e6:	071a      	lsls	r2, r3, #28
    23e8:	d4fc      	bmi.n	23e4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    23ea:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    23ee:	4a70      	ldr	r2, [pc, #448]	; (25b0 <set_arm_clock+0x290>)
    23f0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    23f2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    23f4:	069b      	lsls	r3, r3, #26
    23f6:	d4fc      	bmi.n	23f2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    23f8:	4c75      	ldr	r4, [pc, #468]	; (25d0 <set_arm_clock+0x2b0>)
    23fa:	42a0      	cmp	r0, r4
    23fc:	f200 80ce 	bhi.w	259c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    2400:	f04f 0c01 	mov.w	ip, #1
    2404:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    2406:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2408:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    240c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2410:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2414:	42a2      	cmp	r2, r4
    2416:	d818      	bhi.n	244a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2418:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    241c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2420:	f040 808d 	bne.w	253e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2424:	f1bc 0f04 	cmp.w	ip, #4
    2428:	f200 8091 	bhi.w	254e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    242c:	180a      	adds	r2, r1, r0
    242e:	42a2      	cmp	r2, r4
    2430:	f200 80a4 	bhi.w	257c <set_arm_clock+0x25c>
    2434:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2438:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    243a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    243e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2442:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2446:	42a2      	cmp	r2, r4
    2448:	d9e6      	bls.n	2418 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    244a:	f10c 31ff 	add.w	r1, ip, #4294967295
    244e:	028c      	lsls	r4, r1, #10
    2450:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2454:	485f      	ldr	r0, [pc, #380]	; (25d4 <set_arm_clock+0x2b4>)
    2456:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2458:	4a5f      	ldr	r2, [pc, #380]	; (25d8 <set_arm_clock+0x2b8>)
    245a:	4290      	cmp	r0, r2
    245c:	d97f      	bls.n	255e <set_arm_clock+0x23e>
    245e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 2604 <set_arm_clock+0x2e4>
    2462:	226c      	movs	r2, #108	; 0x6c
    2464:	485d      	ldr	r0, [pc, #372]	; (25dc <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2466:	4d58      	ldr	r5, [pc, #352]	; (25c8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2468:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    246c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2470:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2474:	f8df c190 	ldr.w	ip, [pc, #400]	; 2608 <set_arm_clock+0x2e8>
    2478:	ea0e 0c0c 	and.w	ip, lr, ip
    247c:	45d4      	cmp	ip, sl
    247e:	d009      	beq.n	2494 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2484:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2488:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    248c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    248e:	682a      	ldr	r2, [r5, #0]
    2490:	2a00      	cmp	r2, #0
    2492:	dafc      	bge.n	248e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2494:	4a46      	ldr	r2, [pc, #280]	; (25b0 <set_arm_clock+0x290>)
    2496:	6915      	ldr	r5, [r2, #16]
    2498:	f005 0507 	and.w	r5, r5, #7
    249c:	429d      	cmp	r5, r3
    249e:	d003      	beq.n	24a8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    24a0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    24a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    24a4:	03dd      	lsls	r5, r3, #15
    24a6:	d4fc      	bmi.n	24a2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    24a8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    24ac:	d009      	beq.n	24c2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    24ae:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    24b2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    24b6:	4a3e      	ldr	r2, [pc, #248]	; (25b0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    24b8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    24ba:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    24bc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    24be:	0799      	lsls	r1, r3, #30
    24c0:	d4fc      	bmi.n	24bc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    24c2:	4947      	ldr	r1, [pc, #284]	; (25e0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    24c4:	4a47      	ldr	r2, [pc, #284]	; (25e4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    24c6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    24c8:	4291      	cmp	r1, r2
    24ca:	d83c      	bhi.n	2546 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    24cc:	4b46      	ldr	r3, [pc, #280]	; (25e8 <set_arm_clock+0x2c8>)
    24ce:	09c9      	lsrs	r1, r1, #7
    24d0:	fba3 3101 	umull	r3, r1, r3, r1
    24d4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    24d6:	1e4b      	subs	r3, r1, #1
    24d8:	021b      	lsls	r3, r3, #8
    24da:	ea86 0203 	eor.w	r2, r6, r3
    24de:	f412 7f40 	tst.w	r2, #768	; 0x300
    24e2:	d006      	beq.n	24f2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    24e4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    24e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    24ec:	4a30      	ldr	r2, [pc, #192]	; (25b0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    24ee:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    24f0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    24f2:	4a2f      	ldr	r2, [pc, #188]	; (25b0 <set_arm_clock+0x290>)
    24f4:	6953      	ldr	r3, [r2, #20]
    24f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    24fa:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    24fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    24fe:	069b      	lsls	r3, r3, #26
    2500:	d4fc      	bmi.n	24fc <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2502:	4b3a      	ldr	r3, [pc, #232]	; (25ec <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2504:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2506:	fba3 2300 	umull	r2, r3, r3, r0
    250a:	f04f 32ff 	mov.w	r2, #4294967295
    250e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2512:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2516:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    251a:	4a35      	ldr	r2, [pc, #212]	; (25f0 <set_arm_clock+0x2d0>)
    251c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    251e:	4a35      	ldr	r2, [pc, #212]	; (25f4 <set_arm_clock+0x2d4>)
    2520:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2522:	4a35      	ldr	r2, [pc, #212]	; (25f8 <set_arm_clock+0x2d8>)
    2524:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2526:	d208      	bcs.n	253a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2528:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    252c:	4a21      	ldr	r2, [pc, #132]	; (25b4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    252e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2532:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2534:	6813      	ldr	r3, [r2, #0]
    2536:	2b00      	cmp	r3, #0
    2538:	dafc      	bge.n	2534 <set_arm_clock+0x214>
	}

	return frequency;
}
    253a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    253e:	4673      	mov	r3, lr
    2540:	e762      	b.n	2408 <set_arm_clock+0xe8>
    2542:	2712      	movs	r7, #18
    2544:	e718      	b.n	2378 <set_arm_clock+0x58>
    2546:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    254a:	2104      	movs	r1, #4
    254c:	e7c5      	b.n	24da <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    254e:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2552:	4820      	ldr	r0, [pc, #128]	; (25d4 <set_arm_clock+0x2b4>)
    2554:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2556:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2558:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    255a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    255e:	4a27      	ldr	r2, [pc, #156]	; (25fc <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2560:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 260c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2564:	fba2 2000 	umull	r2, r0, r2, r0
    2568:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    256a:	4825      	ldr	r0, [pc, #148]	; (2600 <set_arm_clock+0x2e0>)
    256c:	2a36      	cmp	r2, #54	; 0x36
    256e:	bf38      	it	cc
    2570:	2236      	movcc	r2, #54	; 0x36
    2572:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2576:	ea42 0a0a 	orr.w	sl, r2, sl
    257a:	e774      	b.n	2466 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    257c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2580:	2300      	movs	r3, #0
    2582:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    2586:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    258a:	46ac      	mov	ip, r5
    258c:	e762      	b.n	2454 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    258e:	461d      	mov	r5, r3
    2590:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2594:	4611      	mov	r1, r2
    2596:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    259a:	e713      	b.n	23c4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    259c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    259e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    25a2:	4602      	mov	r2, r0
    25a4:	4631      	mov	r1, r6
    25a6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    25a8:	46e6      	mov	lr, ip
    25aa:	e753      	b.n	2454 <set_arm_clock+0x134>
    25ac:	1f78a400 	.word	0x1f78a400
    25b0:	400fc000 	.word	0x400fc000
    25b4:	40080000 	.word	0x40080000
    25b8:	23c34600 	.word	0x23c34600
    25bc:	004cb223 	.word	0x004cb223
    25c0:	51eb851f 	.word	0x51eb851f
    25c4:	016e3600 	.word	0x016e3600
    25c8:	400d8000 	.word	0x400d8000
    25cc:	80003040 	.word	0x80003040
    25d0:	269fb1ff 	.word	0x269fb1ff
    25d4:	005b8d80 	.word	0x005b8d80
    25d8:	4df67eff 	.word	0x4df67eff
    25dc:	4d3f6400 	.word	0x4d3f6400
    25e0:	08f0d17f 	.word	0x08f0d17f
    25e4:	2cb4177f 	.word	0x2cb4177f
    25e8:	00e5109f 	.word	0x00e5109f
    25ec:	431bde83 	.word	0x431bde83
    25f0:	20000d8c 	.word	0x20000d8c
    25f4:	20000d88 	.word	0x20000d88
    25f8:	20002b2c 	.word	0x20002b2c
    25fc:	165e9f81 	.word	0x165e9f81
    2600:	00b71b00 	.word	0x00b71b00
    2604:	8000206c 	.word	0x8000206c
    2608:	8001307f 	.word	0x8001307f
    260c:	80002000 	.word	0x80002000

00002610 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2610:	b900      	cbnz	r0, 2614 <delay+0x4>
    2612:	4770      	bx	lr
{
    2614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2618:	2101      	movs	r1, #1
    261a:	4681      	mov	r9, r0
    261c:	4c21      	ldr	r4, [pc, #132]	; (26a4 <delay+0x94>)
    261e:	4d22      	ldr	r5, [pc, #136]	; (26a8 <delay+0x98>)
    2620:	4e22      	ldr	r6, [pc, #136]	; (26ac <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2622:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2626:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2628:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    262a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    262e:	2b00      	cmp	r3, #0
    2630:	d1f7      	bne.n	2622 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2632:	491f      	ldr	r1, [pc, #124]	; (26b0 <delay+0xa0>)
    2634:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2636:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    263a:	f8df a078 	ldr.w	sl, [pc, #120]	; 26b4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    263e:	1a1b      	subs	r3, r3, r0
    2640:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    2642:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2646:	f8da 2000 	ldr.w	r2, [sl]
    264a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    264e:	455a      	cmp	r2, fp
    2650:	bf94      	ite	ls
    2652:	4490      	addls	r8, r2
    2654:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2656:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    265a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    265c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    265e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2662:	2b00      	cmp	r3, #0
    2664:	d1f7      	bne.n	2656 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2666:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2668:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    266c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    266e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2672:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    2676:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    267a:	bf94      	ite	ls
    267c:	4462      	addls	r2, ip
    267e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    2682:	eba2 0208 	sub.w	r2, r2, r8
    2686:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    268a:	d306      	bcc.n	269a <delay+0x8a>
			if (--msec == 0) return;
    268c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    2690:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    2694:	d1df      	bne.n	2656 <delay+0x46>
}
    2696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    269a:	f001 fc7f 	bl	3f9c <yield>
		while ((micros() - start) >= 1000) {
    269e:	4904      	ldr	r1, [pc, #16]	; (26b0 <delay+0xa0>)
    26a0:	e7d9      	b.n	2656 <delay+0x46>
    26a2:	bf00      	nop
    26a4:	20002b38 	.word	0x20002b38
    26a8:	20002b34 	.word	0x20002b34
    26ac:	20002b30 	.word	0x20002b30
    26b0:	e0001000 	.word	0xe0001000
    26b4:	20002b2c 	.word	0x20002b2c

000026b8 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    26b8:	2836      	cmp	r0, #54	; 0x36
    26ba:	d816      	bhi.n	26ea <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    26bc:	0102      	lsls	r2, r0, #4
    26be:	4b10      	ldr	r3, [pc, #64]	; (2700 <digitalWrite+0x48>)
    26c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    26c4:	589b      	ldr	r3, [r3, r2]
{
    26c6:	b410      	push	{r4}
	mask = p->mask;
    26c8:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    26ca:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    26cc:	4214      	tst	r4, r2
    26ce:	d005      	beq.n	26dc <digitalWrite+0x24>
		if (val) {
    26d0:	b961      	cbnz	r1, 26ec <digitalWrite+0x34>
		}
	}
}
    26d2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    26d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    26da:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    26dc:	6883      	ldr	r3, [r0, #8]
		if (val) {
    26de:	b151      	cbz	r1, 26f6 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    26e0:	4a08      	ldr	r2, [pc, #32]	; (2704 <digitalWrite+0x4c>)
}
    26e2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    26e6:	601a      	str	r2, [r3, #0]
}
    26e8:	4770      	bx	lr
    26ea:	4770      	bx	lr
    26ec:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    26f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    26f4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    26f6:	4a04      	ldr	r2, [pc, #16]	; (2708 <digitalWrite+0x50>)
}
    26f8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    26fc:	601a      	str	r2, [r3, #0]
}
    26fe:	4770      	bx	lr
    2700:	20000778 	.word	0x20000778
    2704:	0001f038 	.word	0x0001f038
    2708:	00013038 	.word	0x00013038

0000270c <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    270c:	2836      	cmp	r0, #54	; 0x36
    270e:	d80b      	bhi.n	2728 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    2710:	4b06      	ldr	r3, [pc, #24]	; (272c <digitalRead+0x20>)
    2712:	0102      	lsls	r2, r0, #4
    2714:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    2718:	589a      	ldr	r2, [r3, r2]
    271a:	68c3      	ldr	r3, [r0, #12]
    271c:	6892      	ldr	r2, [r2, #8]
    271e:	421a      	tst	r2, r3
    2720:	bf14      	ite	ne
    2722:	2001      	movne	r0, #1
    2724:	2000      	moveq	r0, #0
    2726:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2728:	2000      	movs	r0, #0
}
    272a:	4770      	bx	lr
    272c:	20000778 	.word	0x20000778

00002730 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    2730:	2836      	cmp	r0, #54	; 0x36
    2732:	d829      	bhi.n	2788 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    2734:	4b16      	ldr	r3, [pc, #88]	; (2790 <pinMode+0x60>)
    2736:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2738:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    273a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    273e:	589a      	ldr	r2, [r3, r2]
{
    2740:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    2742:	6853      	ldr	r3, [r2, #4]
    2744:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    2746:	d00e      	beq.n	2766 <pinMode+0x36>
    2748:	2904      	cmp	r1, #4
    274a:	d00c      	beq.n	2766 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    274c:	ea23 0304 	bic.w	r3, r3, r4
    2750:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2752:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    2754:	b1a9      	cbz	r1, 2782 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    2756:	2902      	cmp	r1, #2
    2758:	d017      	beq.n	278a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    275a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    275c:	bf0c      	ite	eq
    275e:	4a0d      	ldreq	r2, [pc, #52]	; (2794 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    2760:	4a0d      	ldrne	r2, [pc, #52]	; (2798 <pinMode+0x68>)
    2762:	601a      	str	r2, [r3, #0]
    2764:	e007      	b.n	2776 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    2766:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    2768:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    276a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    276c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    276e:	d008      	beq.n	2782 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    2770:	f640 0238 	movw	r2, #2104	; 0x838
    2774:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    2776:	6843      	ldr	r3, [r0, #4]
    2778:	2215      	movs	r2, #21
}
    277a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    277e:	601a      	str	r2, [r3, #0]
}
    2780:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    2782:	2238      	movs	r2, #56	; 0x38
    2784:	601a      	str	r2, [r3, #0]
    2786:	e7f6      	b.n	2776 <pinMode+0x46>
    2788:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    278a:	4a04      	ldr	r2, [pc, #16]	; (279c <pinMode+0x6c>)
    278c:	601a      	str	r2, [r3, #0]
    278e:	e7f2      	b.n	2776 <pinMode+0x46>
    2790:	20000778 	.word	0x20000778
    2794:	00013038 	.word	0x00013038
    2798:	00010038 	.word	0x00010038
    279c:	0001f038 	.word	0x0001f038

000027a0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    27a0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    27a2:	f7fd fc61 	bl	68 <setup>
	while (1) {
		loop();
    27a6:	f7fd ff3d 	bl	624 <loop>
		yield();
    27aa:	f001 fbf7 	bl	3f9c <yield>
	while (1) {
    27ae:	e7fa      	b.n	27a6 <main+0x6>

000027b0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    27b0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    27b2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    27b6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    27ba:	d16d      	bne.n	2898 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    27bc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    27be:	d341      	bcc.n	2844 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    27c0:	f851 3b04 	ldr.w	r3, [r1], #4
    27c4:	f840 3b04 	str.w	r3, [r0], #4
    27c8:	f851 3b04 	ldr.w	r3, [r1], #4
    27cc:	f840 3b04 	str.w	r3, [r0], #4
    27d0:	f851 3b04 	ldr.w	r3, [r1], #4
    27d4:	f840 3b04 	str.w	r3, [r0], #4
    27d8:	f851 3b04 	ldr.w	r3, [r1], #4
    27dc:	f840 3b04 	str.w	r3, [r0], #4
    27e0:	f851 3b04 	ldr.w	r3, [r1], #4
    27e4:	f840 3b04 	str.w	r3, [r0], #4
    27e8:	f851 3b04 	ldr.w	r3, [r1], #4
    27ec:	f840 3b04 	str.w	r3, [r0], #4
    27f0:	f851 3b04 	ldr.w	r3, [r1], #4
    27f4:	f840 3b04 	str.w	r3, [r0], #4
    27f8:	f851 3b04 	ldr.w	r3, [r1], #4
    27fc:	f840 3b04 	str.w	r3, [r0], #4
    2800:	f851 3b04 	ldr.w	r3, [r1], #4
    2804:	f840 3b04 	str.w	r3, [r0], #4
    2808:	f851 3b04 	ldr.w	r3, [r1], #4
    280c:	f840 3b04 	str.w	r3, [r0], #4
    2810:	f851 3b04 	ldr.w	r3, [r1], #4
    2814:	f840 3b04 	str.w	r3, [r0], #4
    2818:	f851 3b04 	ldr.w	r3, [r1], #4
    281c:	f840 3b04 	str.w	r3, [r0], #4
    2820:	f851 3b04 	ldr.w	r3, [r1], #4
    2824:	f840 3b04 	str.w	r3, [r0], #4
    2828:	f851 3b04 	ldr.w	r3, [r1], #4
    282c:	f840 3b04 	str.w	r3, [r0], #4
    2830:	f851 3b04 	ldr.w	r3, [r1], #4
    2834:	f840 3b04 	str.w	r3, [r0], #4
    2838:	f851 3b04 	ldr.w	r3, [r1], #4
    283c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2840:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2842:	d2bd      	bcs.n	27c0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2844:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2846:	d311      	bcc.n	286c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2848:	f851 3b04 	ldr.w	r3, [r1], #4
    284c:	f840 3b04 	str.w	r3, [r0], #4
    2850:	f851 3b04 	ldr.w	r3, [r1], #4
    2854:	f840 3b04 	str.w	r3, [r0], #4
    2858:	f851 3b04 	ldr.w	r3, [r1], #4
    285c:	f840 3b04 	str.w	r3, [r0], #4
    2860:	f851 3b04 	ldr.w	r3, [r1], #4
    2864:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2868:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    286a:	d2ed      	bcs.n	2848 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    286c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    286e:	d305      	bcc.n	287c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2870:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2874:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    2878:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    287a:	d2f9      	bcs.n	2870 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    287c:	3204      	adds	r2, #4
	beq	.Ldone
    287e:	d008      	beq.n	2892 <memcpy+0xe2>

	lsls	r2, r2, #31
    2880:	07d2      	lsls	r2, r2, #31
	itt ne
    2882:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2884:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2888:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    288c:	d301      	bcc.n	2892 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    288e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2890:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2892:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2894:	4770      	bx	lr
    2896:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2898:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    289a:	d313      	bcc.n	28c4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    289c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    289e:	d08d      	beq.n	27bc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    28a0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    28a4:	d08a      	beq.n	27bc <memcpy+0xc>

	rsb	r3, #4
    28a6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    28aa:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    28ac:	07db      	lsls	r3, r3, #31
	itt ne
    28ae:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    28b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    28b4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    28b8:	d380      	bcc.n	27bc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    28ba:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    28be:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    28c2:	e77b      	b.n	27bc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    28c4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    28c6:	d3d9      	bcc.n	287c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    28c8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    28ca:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    28ce:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    28d2:	d2f9      	bcs.n	28c8 <memcpy+0x118>

	ldrb	r3, [r1]
    28d4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    28d6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    28d8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    28da:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    28dc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    28de:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    28e0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    28e2:	4770      	bx	lr

000028e4 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    28e4:	f002 b88c 	b.w	4a00 <malloc>

000028e8 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    28e8:	f002 b892 	b.w	4a10 <free>

000028ec <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    28ec:	f101 3cff 	add.w	ip, r1, #4294967295
{
    28f0:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    28f2:	4666      	mov	r6, ip
	int i=0, j;
    28f4:	2400      	movs	r4, #0
    28f6:	e000      	b.n	28fa <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    28f8:	3401      	adds	r4, #1
		digit = val % radix;
    28fa:	fbb0 f5f2 	udiv	r5, r0, r2
    28fe:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2902:	2b09      	cmp	r3, #9
    2904:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2908:	f103 0330 	add.w	r3, r3, #48	; 0x30
    290c:	fa5f fe8e 	uxtb.w	lr, lr
    2910:	bf98      	it	ls
    2912:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    2916:	4290      	cmp	r0, r2
		val /= radix;
    2918:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    291a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    291e:	d2eb      	bcs.n	28f8 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2920:	1c63      	adds	r3, r4, #1
    2922:	2200      	movs	r2, #0
    2924:	18c8      	adds	r0, r1, r3
    2926:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2928:	b17c      	cbz	r4, 294a <ultoa+0x5e>
		t = buf[j];
    292a:	4662      	mov	r2, ip
    292c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    2930:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    2934:	eba1 030c 	sub.w	r3, r1, ip
    2938:	3202      	adds	r2, #2
		buf[j] = buf[i];
    293a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    293e:	3b01      	subs	r3, #1
    2940:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    2942:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    2944:	4423      	add	r3, r4
    2946:	429a      	cmp	r2, r3
    2948:	dbef      	blt.n	292a <ultoa+0x3e>
	}
	return buf;
}
    294a:	4608      	mov	r0, r1
    294c:	bd70      	pop	{r4, r5, r6, pc}
    294e:	bf00      	nop

00002950 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    2950:	eeb4 0a40 	vcmp.f32	s0, s0
{
    2954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    2958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    295c:	4616      	mov	r6, r2
	int awidth = abs(width);
    295e:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    2962:	4607      	mov	r7, r0
    2964:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    2968:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    296c:	eeb0 8a40 	vmov.f32	s16, s0
    2970:	b085      	sub	sp, #20
	if (isnanf(val)) {
    2972:	f180 8148 	bvs.w	2c06 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    2976:	eef0 7ac0 	vabs.f32	s15, s0
    297a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2c90 <dtostrf+0x340>
    297e:	eef4 7a47 	vcmp.f32	s15, s14
    2982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2986:	dd29      	ble.n	29dc <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    2988:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2990:	f100 80ed 	bmi.w	2b6e <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2994:	2a03      	cmp	r2, #3
    2996:	f340 8091 	ble.w	2abc <dtostrf+0x16c>
    299a:	2303      	movs	r3, #3
		if (width<0) {
    299c:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    299e:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    29a2:	f2c0 8085 	blt.w	2ab0 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    29a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    29aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29ae:	f100 816a 	bmi.w	2c86 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    29b2:	2149      	movs	r1, #73	; 0x49
    29b4:	234e      	movs	r3, #78	; 0x4e
    29b6:	2046      	movs	r0, #70	; 0x46
    29b8:	1cf4      	adds	r4, r6, #3
    29ba:	7031      	strb	r1, [r6, #0]
    29bc:	70b0      	strb	r0, [r6, #2]
    29be:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    29c0:	b122      	cbz	r2, 29cc <dtostrf+0x7c>
			*buf++ = ' ';
    29c2:	4620      	mov	r0, r4
    29c4:	2120      	movs	r1, #32
    29c6:	4414      	add	r4, r2
    29c8:	f002 ff8e 	bl	58e8 <memset>
			awidth--;
		}
		*buf = 0;
    29cc:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    29ce:	4620      	mov	r0, r4
		*buf = 0;
    29d0:	7023      	strb	r3, [r4, #0]
}
    29d2:	b005      	add	sp, #20
    29d4:	ecbd 8b02 	vpop	{d8}
    29d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    29dc:	4689      	mov	r9, r1
    29de:	460d      	mov	r5, r1
    29e0:	aa02      	add	r2, sp, #8
    29e2:	a901      	add	r1, sp, #4
    29e4:	4648      	mov	r0, r9
    29e6:	f002 fdd3 	bl	5590 <fcvtf>
	if (precision == 0 && decpt == 0) {
    29ea:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    29ee:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    29f0:	ea59 030a 	orrs.w	r3, r9, sl
    29f4:	d172      	bne.n	2adc <dtostrf+0x18c>
		decpt++;
    29f6:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    29f8:	7802      	ldrb	r2, [r0, #0]
    29fa:	4ca6      	ldr	r4, [pc, #664]	; (2c94 <dtostrf+0x344>)
		decpt++;
    29fc:	469a      	mov	sl, r3
    29fe:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    2a00:	4ba5      	ldr	r3, [pc, #660]	; (2c98 <dtostrf+0x348>)
		decpt++;
    2a02:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    2a04:	2a34      	cmp	r2, #52	; 0x34
    2a06:	bf88      	it	hi
    2a08:	461c      	movhi	r4, r3
	if (sign) reqd++;
    2a0a:	9b02      	ldr	r3, [sp, #8]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d07d      	beq.n	2b0c <dtostrf+0x1bc>
    2a10:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    2a14:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    2a18:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    2a1c:	f1bb 0f00 	cmp.w	fp, #0
    2a20:	f340 80a1 	ble.w	2b66 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    2a24:	465a      	mov	r2, fp
    2a26:	2120      	movs	r1, #32
    2a28:	4630      	mov	r0, r6
		e += pad;
    2a2a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    2a2c:	f002 ff5c 	bl	58e8 <memset>
    2a30:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    2a34:	222d      	movs	r2, #45	; 0x2d
    2a36:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    2a3a:	f1ba 0f00 	cmp.w	sl, #0
    2a3e:	d177      	bne.n	2b30 <dtostrf+0x1e0>
    2a40:	f1b9 0f00 	cmp.w	r9, #0
    2a44:	d006      	beq.n	2a54 <dtostrf+0x104>
		*p++ = '0';
    2a46:	461a      	mov	r2, r3
    2a48:	2130      	movs	r1, #48	; 0x30
    2a4a:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    2a4e:	212e      	movs	r1, #46	; 0x2e
    2a50:	7059      	strb	r1, [r3, #1]
    2a52:	4613      	mov	r3, r2
	while (p < e) {
    2a54:	42ab      	cmp	r3, r5
    2a56:	d21f      	bcs.n	2a98 <dtostrf+0x148>
		*p++ = *s++;
    2a58:	46a4      	mov	ip, r4
    2a5a:	4619      	mov	r1, r3
    2a5c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    2a60:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    2a64:	42a9      	cmp	r1, r5
    2a66:	d018      	beq.n	2a9a <dtostrf+0x14a>
    2a68:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    2a6a:	202e      	movs	r0, #46	; 0x2e
    2a6c:	3c01      	subs	r4, #1
    2a6e:	e00b      	b.n	2a88 <dtostrf+0x138>
    2a70:	7058      	strb	r0, [r3, #1]
    2a72:	3302      	adds	r3, #2
		if (p == e) break;
    2a74:	3c01      	subs	r4, #1
	while (p < e) {
    2a76:	42ab      	cmp	r3, r5
		*p++ = *s++;
    2a78:	4619      	mov	r1, r3
	while (p < e) {
    2a7a:	d20d      	bcs.n	2a98 <dtostrf+0x148>
		*p++ = *s++;
    2a7c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    2a80:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    2a84:	42a9      	cmp	r1, r5
    2a86:	d008      	beq.n	2a9a <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    2a88:	9401      	str	r4, [sp, #4]
    2a8a:	2c00      	cmp	r4, #0
    2a8c:	d0f0      	beq.n	2a70 <dtostrf+0x120>
    2a8e:	460b      	mov	r3, r1
		if (p == e) break;
    2a90:	3c01      	subs	r4, #1
	while (p < e) {
    2a92:	42ab      	cmp	r3, r5
		*p++ = *s++;
    2a94:	4619      	mov	r1, r3
	while (p < e) {
    2a96:	d3f1      	bcc.n	2a7c <dtostrf+0x12c>
    2a98:	461d      	mov	r5, r3
	if (width < 0) {
    2a9a:	2f00      	cmp	r7, #0
    2a9c:	db6b      	blt.n	2b76 <dtostrf+0x226>
	return buf;
    2a9e:	4634      	mov	r4, r6
	*p = 0;
    2aa0:	2300      	movs	r3, #0
}
    2aa2:	4620      	mov	r0, r4
	*p = 0;
    2aa4:	702b      	strb	r3, [r5, #0]
}
    2aa6:	b005      	add	sp, #20
    2aa8:	ecbd 8b02 	vpop	{d8}
    2aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    2ab0:	b122      	cbz	r2, 2abc <dtostrf+0x16c>
				*buf++ = ' ';
    2ab2:	4630      	mov	r0, r6
    2ab4:	2120      	movs	r1, #32
    2ab6:	4416      	add	r6, r2
    2ab8:	f002 ff16 	bl	58e8 <memset>
		if (val<0) *buf++ = '-';
    2abc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    2ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ac4:	f140 80bd 	bpl.w	2c42 <dtostrf+0x2f2>
    2ac8:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2aca:	2249      	movs	r2, #73	; 0x49
    2acc:	234e      	movs	r3, #78	; 0x4e
    2ace:	2046      	movs	r0, #70	; 0x46
    2ad0:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    2ad2:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2ad4:	70f0      	strb	r0, [r6, #3]
    2ad6:	7072      	strb	r2, [r6, #1]
    2ad8:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2ada:	e777      	b.n	29cc <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    2adc:	f1ca 0300 	rsb	r3, sl, #0
    2ae0:	4599      	cmp	r9, r3
    2ae2:	da57      	bge.n	2b94 <dtostrf+0x244>
		decpt = -precision;
    2ae4:	f04f 0801 	mov.w	r8, #1
    2ae8:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    2aec:	4c69      	ldr	r4, [pc, #420]	; (2c94 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    2aee:	45c2      	cmp	sl, r8
		decpt = -precision;
    2af0:	4640      	mov	r0, r8
    2af2:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    2af6:	bfb8      	it	lt
    2af8:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    2afc:	f1ba 0f00 	cmp.w	sl, #0
    2b00:	d152      	bne.n	2ba8 <dtostrf+0x258>
	if (sign) reqd++;
    2b02:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    2b04:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d181      	bne.n	2a10 <dtostrf+0xc0>
	pad = width - reqd;
    2b0c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    2b10:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    2b14:	f1bb 0f00 	cmp.w	fp, #0
    2b18:	dd27      	ble.n	2b6a <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    2b1a:	465a      	mov	r2, fp
    2b1c:	2120      	movs	r1, #32
    2b1e:	4630      	mov	r0, r6
		e += pad;
    2b20:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    2b22:	f002 fee1 	bl	58e8 <memset>
    2b26:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    2b2a:	f1ba 0f00 	cmp.w	sl, #0
    2b2e:	d087      	beq.n	2a40 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    2b30:	f1ba 0f00 	cmp.w	sl, #0
    2b34:	da8e      	bge.n	2a54 <dtostrf+0x104>
    2b36:	f1b9 0f00 	cmp.w	r9, #0
    2b3a:	d08b      	beq.n	2a54 <dtostrf+0x104>
		*p++ = '0';
    2b3c:	4618      	mov	r0, r3
		*p++ = '.';
    2b3e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    2b40:	2130      	movs	r1, #48	; 0x30
    2b42:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    2b46:	705a      	strb	r2, [r3, #1]
    2b48:	4602      	mov	r2, r0
    2b4a:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    2b4c:	3301      	adds	r3, #1
			*p++ = '0';
    2b4e:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    2b52:	d1fb      	bne.n	2b4c <dtostrf+0x1fc>
			*p++ = '0';
    2b54:	f1ba 0f00 	cmp.w	sl, #0
    2b58:	9301      	str	r3, [sp, #4]
    2b5a:	f1ca 0300 	rsb	r3, sl, #0
    2b5e:	bfa8      	it	ge
    2b60:	2301      	movge	r3, #1
    2b62:	4403      	add	r3, r0
    2b64:	e776      	b.n	2a54 <dtostrf+0x104>
	if (pad > 0) {
    2b66:	4633      	mov	r3, r6
    2b68:	e764      	b.n	2a34 <dtostrf+0xe4>
    2b6a:	4633      	mov	r3, r6
    2b6c:	e765      	b.n	2a3a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2b6e:	2a04      	cmp	r2, #4
    2b70:	ddaa      	ble.n	2ac8 <dtostrf+0x178>
    2b72:	2304      	movs	r3, #4
    2b74:	e712      	b.n	299c <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    2b76:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    2b78:	f1b8 0f00 	cmp.w	r8, #0
    2b7c:	ea6f 0208 	mvn.w	r2, r8
    2b80:	da8d      	bge.n	2a9e <dtostrf+0x14e>
    2b82:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    2b86:	2120      	movs	r1, #32
    2b88:	4628      	mov	r0, r5
    2b8a:	3201      	adds	r2, #1
    2b8c:	4415      	add	r5, r2
    2b8e:	f002 feab 	bl	58e8 <memset>
    2b92:	e784      	b.n	2a9e <dtostrf+0x14e>
	reqd = strlen(s);
    2b94:	f003 fc14 	bl	63c0 <strlen>
    2b98:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    2b9a:	45c2      	cmp	sl, r8
    2b9c:	bfb8      	it	lt
    2b9e:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    2ba2:	f1ba 0f00 	cmp.w	sl, #0
    2ba6:	d0ac      	beq.n	2b02 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    2ba8:	f1ba 0f00 	cmp.w	sl, #0
    2bac:	f6bf af2d 	bge.w	2a0a <dtostrf+0xba>
    2bb0:	f1b9 0f00 	cmp.w	r9, #0
    2bb4:	f43f af29 	beq.w	2a0a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    2bb8:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    2bbc:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    2bc0:	4283      	cmp	r3, r0
    2bc2:	f4bf af22 	bcs.w	2a0a <dtostrf+0xba>
			while (newPrecision > 0) {
    2bc6:	f1b9 0f00 	cmp.w	r9, #0
    2bca:	dd05      	ble.n	2bd8 <dtostrf+0x288>
				val *= 10.0f;
    2bcc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    2bd0:	3d01      	subs	r5, #1
				val *= 10.0f;
    2bd2:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    2bd6:	d1fb      	bne.n	2bd0 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    2bd8:	aa02      	add	r2, sp, #8
    2bda:	eeb0 0a48 	vmov.f32	s0, s16
    2bde:	4628      	mov	r0, r5
    2be0:	a903      	add	r1, sp, #12
    2be2:	f002 fcd5 	bl	5590 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    2be6:	f8dd a004 	ldr.w	sl, [sp, #4]
    2bea:	9b03      	ldr	r3, [sp, #12]
    2bec:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    2bf0:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    2bf2:	eba3 030a 	sub.w	r3, r3, sl
    2bf6:	4293      	cmp	r3, r2
    2bf8:	f47f af07 	bne.w	2a0a <dtostrf+0xba>
    2bfc:	f10a 0a01 	add.w	sl, sl, #1
    2c00:	f8cd a004 	str.w	sl, [sp, #4]
    2c04:	e701      	b.n	2a0a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    2c06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    2c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c0e:	bf4c      	ite	mi
    2c10:	2304      	movmi	r3, #4
    2c12:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2c14:	4293      	cmp	r3, r2
    2c16:	da22      	bge.n	2c5e <dtostrf+0x30e>
		if (width<0) {
    2c18:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2c1a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    2c1e:	db18      	blt.n	2c52 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c20:	ee10 3a10 	vmov	r3, s0
    2c24:	2b00      	cmp	r3, #0
    2c26:	da02      	bge.n	2c2e <dtostrf+0x2de>
    2c28:	232d      	movs	r3, #45	; 0x2d
    2c2a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2c2e:	234e      	movs	r3, #78	; 0x4e
    2c30:	2141      	movs	r1, #65	; 0x41
    2c32:	1cf4      	adds	r4, r6, #3
    2c34:	7033      	strb	r3, [r6, #0]
    2c36:	7071      	strb	r1, [r6, #1]
    2c38:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2c3a:	2a00      	cmp	r2, #0
    2c3c:	f47f aec1 	bne.w	29c2 <dtostrf+0x72>
    2c40:	e6c4      	b.n	29cc <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2c42:	2149      	movs	r1, #73	; 0x49
    2c44:	224e      	movs	r2, #78	; 0x4e
    2c46:	2346      	movs	r3, #70	; 0x46
    2c48:	1cf4      	adds	r4, r6, #3
    2c4a:	7031      	strb	r1, [r6, #0]
    2c4c:	7072      	strb	r2, [r6, #1]
    2c4e:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2c50:	e6bc      	b.n	29cc <dtostrf+0x7c>
			while (awidth) {
    2c52:	b122      	cbz	r2, 2c5e <dtostrf+0x30e>
				*buf++ = ' ';
    2c54:	4630      	mov	r0, r6
    2c56:	2120      	movs	r1, #32
    2c58:	4416      	add	r6, r2
    2c5a:	f002 fe45 	bl	58e8 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c5e:	ee18 3a10 	vmov	r3, s16
    2c62:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2c64:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c68:	db05      	blt.n	2c76 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2c6a:	2241      	movs	r2, #65	; 0x41
    2c6c:	1cf4      	adds	r4, r6, #3
    2c6e:	7033      	strb	r3, [r6, #0]
    2c70:	7072      	strb	r2, [r6, #1]
    2c72:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2c74:	e6aa      	b.n	29cc <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c76:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2c78:	2241      	movs	r2, #65	; 0x41
    2c7a:	1d34      	adds	r4, r6, #4
    2c7c:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c7e:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2c80:	70b2      	strb	r2, [r6, #2]
    2c82:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    2c84:	e6a2      	b.n	29cc <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    2c86:	232d      	movs	r3, #45	; 0x2d
    2c88:	f806 3b01 	strb.w	r3, [r6], #1
    2c8c:	e691      	b.n	29b2 <dtostrf+0x62>
    2c8e:	bf00      	nop
    2c90:	7f7fffff 	.word	0x7f7fffff
    2c94:	20000ae8 	.word	0x20000ae8
    2c98:	20000aec 	.word	0x20000aec

00002c9c <unused_interrupt_vector>:
	__disable_irq();
    2c9c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2c9e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    2ca2:	4c52      	ldr	r4, [pc, #328]	; (2dec <unused_interrupt_vector+0x150>)
    2ca4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    2ca8:	f01e 0f04 	tst.w	lr, #4
    2cac:	bf0c      	ite	eq
    2cae:	f3ef 8208 	mrseq	r2, MSP
    2cb2:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    2cb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    2cba:	4e4d      	ldr	r6, [pc, #308]	; (2df0 <unused_interrupt_vector+0x154>)
	while (p < end) {
    2cbc:	4d4d      	ldr	r5, [pc, #308]	; (2df4 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    2cbe:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    2cc2:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    2cc6:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    2cca:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    2cce:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    2cd2:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    2cd6:	6993      	ldr	r3, [r2, #24]
    2cd8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2cdc:	69d3      	ldr	r3, [r2, #28]
    2cde:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    2ce2:	f000 f8d1 	bl	2e88 <tempmonGetTemp>
    2ce6:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    2cea:	f001 fdef 	bl	48cc <rtc_get>
	info->len = sizeof(*info) / 4;
    2cee:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    2cf0:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    2cf4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    2cf8:	460b      	mov	r3, r1
    2cfa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2cfe:	493e      	ldr	r1, [pc, #248]	; (2df8 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    2d00:	1d30      	adds	r0, r6, #4
    2d02:	405a      	eors	r2, r3
    2d04:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2d06:	f002 0301 	and.w	r3, r2, #1
    2d0a:	3c01      	subs	r4, #1
    2d0c:	fb01 f303 	mul.w	r3, r1, r3
    2d10:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    2d14:	d1f7      	bne.n	2d06 <unused_interrupt_vector+0x6a>
	while (p < end) {
    2d16:	42a8      	cmp	r0, r5
    2d18:	d002      	beq.n	2d20 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    2d1a:	6873      	ldr	r3, [r6, #4]
    2d1c:	4606      	mov	r6, r0
    2d1e:	e7ef      	b.n	2d00 <unused_interrupt_vector+0x64>
	info->crc = crc;
    2d20:	4b32      	ldr	r3, [pc, #200]	; (2dec <unused_interrupt_vector+0x150>)
    2d22:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2d26:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2d2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2d2e:	4930      	ldr	r1, [pc, #192]	; (2df0 <unused_interrupt_vector+0x154>)
    2d30:	4a32      	ldr	r2, [pc, #200]	; (2dfc <unused_interrupt_vector+0x160>)
    2d32:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    2d36:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    2d3a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2d3e:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d42:	4a2f      	ldr	r2, [pc, #188]	; (2e00 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    2d44:	2502      	movs	r5, #2
    2d46:	482f      	ldr	r0, [pc, #188]	; (2e04 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d48:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d4a:	492f      	ldr	r1, [pc, #188]	; (2e08 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2d4c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    2d50:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    2d52:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2d54:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d56:	482d      	ldr	r0, [pc, #180]	; (2e0c <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2d60:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2d62:	680b      	ldr	r3, [r1, #0]
    2d64:	4283      	cmp	r3, r0
    2d66:	d83d      	bhi.n	2de4 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    2d68:	4d26      	ldr	r5, [pc, #152]	; (2e04 <unused_interrupt_vector+0x168>)
    2d6a:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    2d6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2d70:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    2d74:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2d76:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    2d78:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    2d7c:	4924      	ldr	r1, [pc, #144]	; (2e10 <unused_interrupt_vector+0x174>)
    2d7e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2d82:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    2d86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2d8a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2d8e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    2d92:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    2d96:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2d9a:	e001      	b.n	2da0 <unused_interrupt_vector+0x104>
		usb_isr();
    2d9c:	f000 f966 	bl	306c <usb_isr>
		if (PIT_TFLG0) {
    2da0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2da4:	2b00      	cmp	r3, #0
    2da6:	d0f9      	beq.n	2d9c <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    2da8:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2daa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2dae:	2c4f      	cmp	r4, #79	; 0x4f
    2db0:	d9f4      	bls.n	2d9c <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2db2:	4b18      	ldr	r3, [pc, #96]	; (2e14 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    2db4:	2002      	movs	r0, #2
    2db6:	4918      	ldr	r1, [pc, #96]	; (2e18 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2dbc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2dc0:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2dc2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2dc6:	b93b      	cbnz	r3, 2dd8 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    2dc8:	4814      	ldr	r0, [pc, #80]	; (2e1c <unused_interrupt_vector+0x180>)
    2dca:	4915      	ldr	r1, [pc, #84]	; (2e20 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2dcc:	4a0d      	ldr	r2, [pc, #52]	; (2e04 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    2dce:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2dd0:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d0fa      	beq.n	2dce <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    2dd8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2ddc:	4a11      	ldr	r2, [pc, #68]	; (2e24 <unused_interrupt_vector+0x188>)
    2dde:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    2de2:	e7fe      	b.n	2de2 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2de4:	f7ff fa9c 	bl	2320 <set_arm_clock>
    2de8:	e7be      	b.n	2d68 <unused_interrupt_vector+0xcc>
    2dea:	bf00      	nop
    2dec:	2027ff00 	.word	0x2027ff00
    2df0:	2027ff80 	.word	0x2027ff80
    2df4:	2027ffa8 	.word	0x2027ffa8
    2df8:	edb88320 	.word	0xedb88320
    2dfc:	2027ffa0 	.word	0x2027ffa0
    2e00:	400fc000 	.word	0x400fc000
    2e04:	40084000 	.word	0x40084000
    2e08:	20000d8c 	.word	0x20000d8c
    2e0c:	0bcd3d80 	.word	0x0bcd3d80
    2e10:	00249f00 	.word	0x00249f00
    2e14:	400d9000 	.word	0x400d9000
    2e18:	402e0000 	.word	0x402e0000
    2e1c:	400f8000 	.word	0x400f8000
    2e20:	0bad00f1 	.word	0x0bad00f1
    2e24:	05fa0004 	.word	0x05fa0004

00002e28 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    2e28:	490a      	ldr	r1, [pc, #40]	; (2e54 <_sbrk+0x2c>)
    2e2a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    2e2c:	b138      	cbz	r0, 2e3e <_sbrk+0x16>
{
    2e2e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    2e30:	1813      	adds	r3, r2, r0
    2e32:	4809      	ldr	r0, [pc, #36]	; (2e58 <_sbrk+0x30>)
    2e34:	4283      	cmp	r3, r0
    2e36:	d804      	bhi.n	2e42 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2e38:	4610      	mov	r0, r2
                __brkval = prev + incr;
    2e3a:	600b      	str	r3, [r1, #0]
}
    2e3c:	bd08      	pop	{r3, pc}
    2e3e:	4610      	mov	r0, r2
    2e40:	4770      	bx	lr
                        errno = ENOMEM;
    2e42:	f003 f8bb 	bl	5fbc <__errno>
    2e46:	230c      	movs	r3, #12
                        return (void *)-1;
    2e48:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    2e4c:	6003      	str	r3, [r0, #0]
}
    2e4e:	4610      	mov	r0, r2
    2e50:	bd08      	pop	{r3, pc}
    2e52:	bf00      	nop
    2e54:	200011c4 	.word	0x200011c4
    2e58:	20280000 	.word	0x20280000

00002e5c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    2e5c:	2000      	movs	r0, #0
    2e5e:	4770      	bx	lr

00002e60 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    2e60:	f04f 30ff 	mov.w	r0, #4294967295
    2e64:	4770      	bx	lr
    2e66:	bf00      	nop

00002e68 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    2e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    2e6c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    2e6e:	604b      	str	r3, [r1, #4]
}
    2e70:	4770      	bx	lr
    2e72:	bf00      	nop

00002e74 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    2e74:	2001      	movs	r0, #1
    2e76:	4770      	bx	lr

00002e78 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    2e78:	f04f 30ff 	mov.w	r0, #4294967295
    2e7c:	4770      	bx	lr
    2e7e:	bf00      	nop

00002e80 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    2e80:	bf30      	wfi
    2e82:	e7fd      	b.n	2e80 <abort>

00002e84 <Panic_Temp_isr>:
  unused_interrupt_vector();
    2e84:	f7ff bf0a 	b.w	2c9c <unused_interrupt_vector>

00002e88 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2e88:	4a12      	ldr	r2, [pc, #72]	; (2ed4 <tempmonGetTemp+0x4c>)
    2e8a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2e8e:	075b      	lsls	r3, r3, #29
    2e90:	d5fb      	bpl.n	2e8a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2e92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2e96:	4810      	ldr	r0, [pc, #64]	; (2ed8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2e98:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2e9c:	490f      	ldr	r1, [pc, #60]	; (2edc <tempmonGetTemp+0x54>)
    2e9e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2ea2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2ea6:	ed91 6a00 	vldr	s12, [r1]
    2eaa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2eae:	4a0c      	ldr	r2, [pc, #48]	; (2ee0 <tempmonGetTemp+0x58>)
    2eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2eb4:	4b0b      	ldr	r3, [pc, #44]	; (2ee4 <tempmonGetTemp+0x5c>)
    2eb6:	edd2 6a00 	vldr	s13, [r2]
    2eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2ebe:	ed93 7a00 	vldr	s14, [r3]
    2ec2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2ec6:	ee67 7a86 	vmul.f32	s15, s15, s12
    2eca:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    2ece:	ee37 0a40 	vsub.f32	s0, s14, s0
    2ed2:	4770      	bx	lr
    2ed4:	400d8100 	.word	0x400d8100
    2ed8:	20002b1c 	.word	0x20002b1c
    2edc:	20002b24 	.word	0x20002b24
    2ee0:	20002b28 	.word	0x20002b28
    2ee4:	20002b20 	.word	0x20002b20

00002ee8 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2ee8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    2eea:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    2eec:	b11b      	cbz	r3, 2ef6 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2eee:	6853      	ldr	r3, [r2, #4]
    2ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2ef4:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    2ef6:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2ef8:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2efa:	b33c      	cbz	r4, 2f4c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2efc:	4b1a      	ldr	r3, [pc, #104]	; (2f68 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    2efe:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2f00:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2f04:	420c      	tst	r4, r1
    2f06:	d11d      	bne.n	2f44 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2f08:	4e18      	ldr	r6, [pc, #96]	; (2f6c <schedule_transfer+0x84>)
    2f0a:	6877      	ldr	r7, [r6, #4]
    2f0c:	e004      	b.n	2f18 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2f0e:	6874      	ldr	r4, [r6, #4]
    2f10:	1be4      	subs	r4, r4, r7
    2f12:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    2f16:	d20b      	bcs.n	2f30 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2f18:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2f1c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2f20:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2f24:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2f28:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2f2c:	0464      	lsls	r4, r4, #17
    2f2e:	d5ee      	bpl.n	2f0e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2f30:	400d      	ands	r5, r1
    2f32:	d107      	bne.n	2f44 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    2f34:	4c0c      	ldr	r4, [pc, #48]	; (2f68 <schedule_transfer+0x80>)
		endpoint->status = 0;
    2f36:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    2f3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2f3e:	430b      	orrs	r3, r1
    2f40:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    2f44:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2f46:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2f48:	bcf0      	pop	{r4, r5, r6, r7}
    2f4a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    2f4c:	4d06      	ldr	r5, [pc, #24]	; (2f68 <schedule_transfer+0x80>)
	endpoint->status = 0;
    2f4e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    2f52:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    2f56:	430b      	orrs	r3, r1
    2f58:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2f5c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    2f5e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2f60:	b662      	cpsie	i
}
    2f62:	bcf0      	pop	{r4, r5, r6, r7}
    2f64:	4770      	bx	lr
    2f66:	bf00      	nop
    2f68:	402e0000 	.word	0x402e0000
    2f6c:	e0001000 	.word	0xe0001000

00002f70 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2f70:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2f72:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    2f74:	b19d      	cbz	r5, 2f9e <run_callbacks+0x2e>
    2f76:	4606      	mov	r6, r0
    2f78:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    2f7a:	2400      	movs	r4, #0
    2f7c:	e003      	b.n	2f86 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2f7e:	6812      	ldr	r2, [r2, #0]
		count++;
    2f80:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    2f82:	2a01      	cmp	r2, #1
    2f84:	d00c      	beq.n	2fa0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    2f86:	6853      	ldr	r3, [r2, #4]
    2f88:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    2f8c:	d0f7      	beq.n	2f7e <run_callbacks+0xe>
			ep->first_transfer = t;
    2f8e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2f90:	b12c      	cbz	r4, 2f9e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    2f92:	4628      	mov	r0, r5
		ep->callback_function(first);
    2f94:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    2f96:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    2f98:	4798      	blx	r3
	while (count) {
    2f9a:	3c01      	subs	r4, #1
    2f9c:	d1f9      	bne.n	2f92 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    2f9e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    2fa0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    2fa4:	e7f4      	b.n	2f90 <run_callbacks+0x20>
    2fa6:	bf00      	nop

00002fa8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2fa8:	b430      	push	{r4, r5}
	if (len > 0) {
    2faa:	b9d9      	cbnz	r1, 2fe4 <endpoint0_transmit.constprop.0+0x3c>
    2fac:	4c1f      	ldr	r4, [pc, #124]	; (302c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    2fae:	4b20      	ldr	r3, [pc, #128]	; (3030 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    2fb0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2fb2:	4a20      	ldr	r2, [pc, #128]	; (3034 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    2fb4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2fb6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    2fba:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    2fbc:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    2fbe:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fc2:	2480      	movs	r4, #128	; 0x80
    2fc4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2fc6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2fca:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2fce:	481a      	ldr	r0, [pc, #104]	; (3038 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    2fd0:	432b      	orrs	r3, r5
    2fd2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2fd6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    2fd8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d1fb      	bne.n	2fd8 <endpoint0_transmit.constprop.0+0x30>
}
    2fe0:	bc30      	pop	{r4, r5}
    2fe2:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2fe4:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    2fe6:	4b15      	ldr	r3, [pc, #84]	; (303c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2fe8:	4c10      	ldr	r4, [pc, #64]	; (302c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    2fea:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2fec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2ff0:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    2ff2:	4a10      	ldr	r2, [pc, #64]	; (3034 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2ff4:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2ff6:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    2ffa:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2ffc:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2ffe:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3002:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3004:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3006:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    300a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    300e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    3010:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3012:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3014:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3016:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    301e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3022:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3026:	2b00      	cmp	r3, #0
    3028:	d1fb      	bne.n	3022 <endpoint0_transmit.constprop.0+0x7a>
    302a:	e7c0      	b.n	2fae <endpoint0_transmit.constprop.0+0x6>
    302c:	20000000 	.word	0x20000000
    3030:	20001ac0 	.word	0x20001ac0
    3034:	402e0000 	.word	0x402e0000
    3038:	20002054 	.word	0x20002054
    303c:	20001ae0 	.word	0x20001ae0

00003040 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    3040:	4908      	ldr	r1, [pc, #32]	; (3064 <usb_stop_sof_interrupts+0x24>)
    3042:	2201      	movs	r2, #1
    3044:	780b      	ldrb	r3, [r1, #0]
    3046:	fa02 f000 	lsl.w	r0, r2, r0
    304a:	ea23 0000 	bic.w	r0, r3, r0
    304e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    3050:	b930      	cbnz	r0, 3060 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3052:	4a05      	ldr	r2, [pc, #20]	; (3068 <usb_stop_sof_interrupts+0x28>)
    3054:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    3058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    305c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    3060:	4770      	bx	lr
    3062:	bf00      	nop
    3064:	20002b5d 	.word	0x20002b5d
    3068:	402e0000 	.word	0x402e0000

0000306c <usb_isr>:
{
    306c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    3070:	4c97      	ldr	r4, [pc, #604]	; (32d0 <usb_isr+0x264>)
{
    3072:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    3074:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3078:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    307a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    307e:	d553      	bpl.n	3128 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3080:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3084:	2a00      	cmp	r2, #0
    3086:	d04a      	beq.n	311e <usb_isr+0xb2>
    3088:	4e92      	ldr	r6, [pc, #584]	; (32d4 <usb_isr+0x268>)
    308a:	f8df a260 	ldr.w	sl, [pc, #608]	; 32ec <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    308e:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3304 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3092:	f8df b274 	ldr.w	fp, [pc, #628]	; 3308 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3096:	f8df 8274 	ldr.w	r8, [pc, #628]	; 330c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    309a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    309e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    30a2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    30a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    30aa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    30ae:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    30b2:	049d      	lsls	r5, r3, #18
    30b4:	d5f5      	bpl.n	30a2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    30b6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    30ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    30be:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    30c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    30c6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    30ca:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    30ce:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    30d2:	d1fa      	bne.n	30ca <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    30d4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    30d6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    30d8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    30dc:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    30e0:	f000 81cf 	beq.w	3482 <usb_isr+0x416>
    30e4:	f200 80db 	bhi.w	329e <usb_isr+0x232>
    30e8:	f240 3102 	movw	r1, #770	; 0x302
    30ec:	428b      	cmp	r3, r1
    30ee:	f000 81e7 	beq.w	34c0 <usb_isr+0x454>
    30f2:	f200 809a 	bhi.w	322a <usb_isr+0x1be>
    30f6:	2b82      	cmp	r3, #130	; 0x82
    30f8:	f000 81cb 	beq.w	3492 <usb_isr+0x426>
    30fc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3100:	f040 808a 	bne.w	3218 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    3104:	f010 0f78 	tst.w	r0, #120	; 0x78
    3108:	b283      	uxth	r3, r0
    310a:	f000 8203 	beq.w	3514 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    310e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3112:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3116:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    311a:	2a00      	cmp	r2, #0
    311c:	d1bd      	bne.n	309a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    311e:	4a6c      	ldr	r2, [pc, #432]	; (32d0 <usb_isr+0x264>)
    3120:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    3124:	2b00      	cmp	r3, #0
    3126:	d142      	bne.n	31ae <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    3128:	067e      	lsls	r6, r7, #25
    312a:	d516      	bpl.n	315a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    312c:	4b68      	ldr	r3, [pc, #416]	; (32d0 <usb_isr+0x264>)
    312e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    3132:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3136:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    313a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    313e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3142:	2c00      	cmp	r4, #0
    3144:	d1fb      	bne.n	313e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3146:	f04f 32ff 	mov.w	r2, #4294967295
    314a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    314e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    3152:	f000 fd27 	bl	3ba4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    3156:	4b60      	ldr	r3, [pc, #384]	; (32d8 <usb_isr+0x26c>)
    3158:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    315a:	01fc      	lsls	r4, r7, #7
    315c:	d503      	bpl.n	3166 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    315e:	4b5f      	ldr	r3, [pc, #380]	; (32dc <usb_isr+0x270>)
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	b103      	cbz	r3, 3166 <usb_isr+0xfa>
    3164:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    3166:	01b8      	lsls	r0, r7, #6
    3168:	d503      	bpl.n	3172 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    316a:	4b5d      	ldr	r3, [pc, #372]	; (32e0 <usb_isr+0x274>)
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	b103      	cbz	r3, 3172 <usb_isr+0x106>
    3170:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    3172:	0779      	lsls	r1, r7, #29
    3174:	d508      	bpl.n	3188 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    3176:	4b56      	ldr	r3, [pc, #344]	; (32d0 <usb_isr+0x264>)
    3178:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    317c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    3180:	d047      	beq.n	3212 <usb_isr+0x1a6>
			usb_high_speed = 1;
    3182:	4b58      	ldr	r3, [pc, #352]	; (32e4 <usb_isr+0x278>)
    3184:	2201      	movs	r2, #1
    3186:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3188:	4b51      	ldr	r3, [pc, #324]	; (32d0 <usb_isr+0x264>)
    318a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    318e:	061a      	lsls	r2, r3, #24
    3190:	d50a      	bpl.n	31a8 <usb_isr+0x13c>
    3192:	063b      	lsls	r3, r7, #24
    3194:	d508      	bpl.n	31a8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    3196:	4a54      	ldr	r2, [pc, #336]	; (32e8 <usb_isr+0x27c>)
    3198:	7813      	ldrb	r3, [r2, #0]
    319a:	b12b      	cbz	r3, 31a8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    319c:	3b01      	subs	r3, #1
    319e:	b2db      	uxtb	r3, r3
    31a0:	7013      	strb	r3, [r2, #0]
    31a2:	2b00      	cmp	r3, #0
    31a4:	f000 8272 	beq.w	368c <usb_isr+0x620>
}
    31a8:	b003      	add	sp, #12
    31aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    31ae:	494f      	ldr	r1, [pc, #316]	; (32ec <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    31b0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    31b4:	6808      	ldr	r0, [r1, #0]
    31b6:	4203      	tst	r3, r0
    31b8:	f040 81d1 	bne.w	355e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    31bc:	4a46      	ldr	r2, [pc, #280]	; (32d8 <usb_isr+0x26c>)
    31be:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    31c0:	401c      	ands	r4, r3
    31c2:	d0b1      	beq.n	3128 <usb_isr+0xbc>
				while (tx) {
    31c4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    31c8:	d010      	beq.n	31ec <usb_isr+0x180>
    31ca:	4e42      	ldr	r6, [pc, #264]	; (32d4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    31cc:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    31d0:	fa98 f5a8 	rbit	r5, r8
    31d4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    31d8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    31dc:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    31e0:	3040      	adds	r0, #64	; 0x40
    31e2:	f7ff fec5 	bl	2f70 <run_callbacks>
				while (tx) {
    31e6:	ea38 0805 	bics.w	r8, r8, r5
    31ea:	d1f1      	bne.n	31d0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    31ec:	b2a4      	uxth	r4, r4
				while(rx) {
    31ee:	2c00      	cmp	r4, #0
    31f0:	d09a      	beq.n	3128 <usb_isr+0xbc>
    31f2:	4e38      	ldr	r6, [pc, #224]	; (32d4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    31f4:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    31f8:	fa94 f5a4 	rbit	r5, r4
    31fc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3200:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    3204:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3208:	f7ff feb2 	bl	2f70 <run_callbacks>
				while(rx) {
    320c:	43ac      	bics	r4, r5
    320e:	d1f3      	bne.n	31f8 <usb_isr+0x18c>
    3210:	e78a      	b.n	3128 <usb_isr+0xbc>
			usb_high_speed = 0;
    3212:	4a34      	ldr	r2, [pc, #208]	; (32e4 <usb_isr+0x278>)
    3214:	7013      	strb	r3, [r2, #0]
    3216:	e7b7      	b.n	3188 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    3218:	2b80      	cmp	r3, #128	; 0x80
    321a:	f47f af78 	bne.w	310e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    321e:	4834      	ldr	r0, [pc, #208]	; (32f0 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    3220:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    3222:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3224:	f7ff fec0 	bl	2fa8 <endpoint0_transmit.constprop.0>
		return;
    3228:	e775      	b.n	3116 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    322a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    322e:	f000 810b 	beq.w	3448 <usb_isr+0x3dc>
    3232:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    3236:	2b01      	cmp	r3, #1
    3238:	f63f af69 	bhi.w	310e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    323c:	4b2d      	ldr	r3, [pc, #180]	; (32f4 <usb_isr+0x288>)
    323e:	685d      	ldr	r5, [r3, #4]
    3240:	2d00      	cmp	r5, #0
    3242:	f43f af64 	beq.w	310e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3246:	fa1f fc8c 	uxth.w	ip, ip
    324a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    324e:	e004      	b.n	325a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3250:	691d      	ldr	r5, [r3, #16]
    3252:	330c      	adds	r3, #12
    3254:	2d00      	cmp	r5, #0
    3256:	f43f af5a 	beq.w	310e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    325a:	881a      	ldrh	r2, [r3, #0]
    325c:	4572      	cmp	r2, lr
    325e:	d1f7      	bne.n	3250 <usb_isr+0x1e4>
    3260:	885a      	ldrh	r2, [r3, #2]
    3262:	4562      	cmp	r2, ip
    3264:	d1f4      	bne.n	3250 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    3266:	ea4f 221e 	mov.w	r2, lr, lsr #8
    326a:	2a03      	cmp	r2, #3
    326c:	f000 81a5 	beq.w	35ba <usb_isr+0x54e>
					datalen = list->length;
    3270:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    3272:	0c00      	lsrs	r0, r0, #16
    3274:	4282      	cmp	r2, r0
    3276:	bf28      	it	cs
    3278:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    327a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    327e:	f040 81a1 	bne.w	35c4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    3282:	4b18      	ldr	r3, [pc, #96]	; (32e4 <usb_isr+0x278>)
    3284:	491c      	ldr	r1, [pc, #112]	; (32f8 <usb_isr+0x28c>)
    3286:	7818      	ldrb	r0, [r3, #0]
    3288:	4b1c      	ldr	r3, [pc, #112]	; (32fc <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    328a:	9201      	str	r2, [sp, #4]
    328c:	2800      	cmp	r0, #0
    328e:	bf18      	it	ne
    3290:	4619      	movne	r1, r3
    3292:	481b      	ldr	r0, [pc, #108]	; (3300 <usb_isr+0x294>)
    3294:	f7ff fa8c 	bl	27b0 <memcpy>
    3298:	4d19      	ldr	r5, [pc, #100]	; (3300 <usb_isr+0x294>)
    329a:	9a01      	ldr	r2, [sp, #4]
    329c:	e1e1      	b.n	3662 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    329e:	f242 2121 	movw	r1, #8737	; 0x2221
    32a2:	428b      	cmp	r3, r1
    32a4:	d07c      	beq.n	33a0 <usb_isr+0x334>
    32a6:	d933      	bls.n	3310 <usb_isr+0x2a4>
    32a8:	f242 3121 	movw	r1, #8993	; 0x2321
    32ac:	428b      	cmp	r3, r1
    32ae:	f000 8081 	beq.w	33b4 <usb_isr+0x348>
    32b2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    32b6:	428b      	cmp	r3, r1
    32b8:	f47f af29 	bne.w	310e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    32bc:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    32c0:	b283      	uxth	r3, r0
    32c2:	f47f af24 	bne.w	310e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    32c6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    32ca:	f363 0c0f 	bfi	ip, r3, #0, #16
    32ce:	e7b5      	b.n	323c <usb_isr+0x1d0>
    32d0:	402e0000 	.word	0x402e0000
    32d4:	20000000 	.word	0x20000000
    32d8:	20002058 	.word	0x20002058
    32dc:	20002b48 	.word	0x20002b48
    32e0:	20002b4c 	.word	0x20002b4c
    32e4:	20002b63 	.word	0x20002b63
    32e8:	20002b64 	.word	0x20002b64
    32ec:	20002054 	.word	0x20002054
    32f0:	20002ae4 	.word	0x20002ae4
    32f4:	20000bd0 	.word	0x20000bd0
    32f8:	6000212c 	.word	0x6000212c
    32fc:	60002190 	.word	0x60002190
    3300:	20200000 	.word	0x20200000
    3304:	2000204c 	.word	0x2000204c
    3308:	b8c6cf5d 	.word	0xb8c6cf5d
    330c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    3310:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3314:	d066      	beq.n	33e4 <usb_isr+0x378>
    3316:	f242 0121 	movw	r1, #8225	; 0x2021
    331a:	428b      	cmp	r3, r1
    331c:	f47f aef7 	bne.w	310e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    3320:	0c03      	lsrs	r3, r0, #16
    3322:	2b07      	cmp	r3, #7
    3324:	f47f aef3 	bne.w	310e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    3328:	4bb2      	ldr	r3, [pc, #712]	; (35f4 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    332a:	49b3      	ldr	r1, [pc, #716]	; (35f8 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    332c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    332e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    3330:	49b2      	ldr	r1, [pc, #712]	; (35fc <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3332:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3334:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    3338:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    333c:	2201      	movs	r2, #1
    333e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3340:	4aaf      	ldr	r2, [pc, #700]	; (3600 <usb_isr+0x594>)
    3342:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3344:	4aaf      	ldr	r2, [pc, #700]	; (3604 <usb_isr+0x598>)
    3346:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    3348:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    334c:	f041 0101 	orr.w	r1, r1, #1
    3350:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3354:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3358:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    335c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    335e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    3360:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3364:	2b00      	cmp	r3, #0
    3366:	d1fb      	bne.n	3360 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    3368:	4aa7      	ldr	r2, [pc, #668]	; (3608 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    336a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    336c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    336e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3370:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    3372:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3374:	f248 0380 	movw	r3, #32896	; 0x8080
    3378:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    337a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    337e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3382:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    338a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    338e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3392:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    3396:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    339a:	2b00      	cmp	r3, #0
    339c:	d1fb      	bne.n	3396 <usb_isr+0x32a>
    339e:	e6ba      	b.n	3116 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    33a0:	b280      	uxth	r0, r0
    33a2:	b938      	cbnz	r0, 33b4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    33a4:	4b99      	ldr	r3, [pc, #612]	; (360c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    33a6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    33aa:	6819      	ldr	r1, [r3, #0]
    33ac:	4b98      	ldr	r3, [pc, #608]	; (3610 <usb_isr+0x5a4>)
    33ae:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    33b0:	4b98      	ldr	r3, [pc, #608]	; (3614 <usb_isr+0x5a8>)
    33b2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    33b4:	4b94      	ldr	r3, [pc, #592]	; (3608 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    33b6:	2200      	movs	r2, #0
    33b8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    33ba:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    33bc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    33be:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    33c0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    33c2:	2280      	movs	r2, #128	; 0x80
    33c4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    33c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    33ca:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    33ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    33d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    33d6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    33da:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    33de:	2b00      	cmp	r3, #0
    33e0:	d1fb      	bne.n	33da <usb_isr+0x36e>
    33e2:	e698      	b.n	3116 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    33e4:	f3c2 4207 	ubfx	r2, r2, #16, #8
    33e8:	4b8b      	ldr	r3, [pc, #556]	; (3618 <usb_isr+0x5ac>)
    33ea:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    33ec:	4b8b      	ldr	r3, [pc, #556]	; (361c <usb_isr+0x5b0>)
    33ee:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    33f2:	4b8b      	ldr	r3, [pc, #556]	; (3620 <usb_isr+0x5b4>)
    33f4:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    33f8:	4b8a      	ldr	r3, [pc, #552]	; (3624 <usb_isr+0x5b8>)
    33fa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    33fe:	f000 fbd3 	bl	3ba8 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    3402:	2280      	movs	r2, #128	; 0x80
    3404:	4629      	mov	r1, r5
    3406:	4888      	ldr	r0, [pc, #544]	; (3628 <usb_isr+0x5bc>)
    3408:	f002 fa6e 	bl	58e8 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    340c:	4b87      	ldr	r3, [pc, #540]	; (362c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    340e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3410:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3414:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    3418:	4b7b      	ldr	r3, [pc, #492]	; (3608 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    341a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    341c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    341e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3420:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    3422:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3424:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3426:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    342a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    342e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3436:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    343a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    343e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3442:	2b00      	cmp	r3, #0
    3444:	d1fb      	bne.n	343e <usb_isr+0x3d2>
    3446:	e666      	b.n	3116 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    3448:	4b6f      	ldr	r3, [pc, #444]	; (3608 <usb_isr+0x59c>)
    344a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    344c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    344e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3450:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3452:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3454:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3456:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3458:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    345c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3460:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3468:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    346c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3470:	2b00      	cmp	r3, #0
    3472:	d1fb      	bne.n	346c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3474:	0c13      	lsrs	r3, r2, #16
    3476:	065b      	lsls	r3, r3, #25
    3478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    347c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    3480:	e649      	b.n	3116 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    3482:	4b65      	ldr	r3, [pc, #404]	; (3618 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    3484:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    3486:	486a      	ldr	r0, [pc, #424]	; (3630 <usb_isr+0x5c4>)
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    348c:	f7ff fd8c 	bl	2fa8 <endpoint0_transmit.constprop.0>
		return;
    3490:	e641      	b.n	3116 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    3492:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    3494:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    3498:	f47f ae39 	bne.w	310e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    349c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    34a0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    34a4:	4a62      	ldr	r2, [pc, #392]	; (3630 <usb_isr+0x5c4>)
    34a6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    34a8:	0618      	lsls	r0, r3, #24
    34aa:	f100 809e 	bmi.w	35ea <usb_isr+0x57e>
    34ae:	07cb      	lsls	r3, r1, #31
    34b0:	d501      	bpl.n	34b6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    34b2:	2301      	movs	r3, #1
    34b4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    34b6:	2102      	movs	r1, #2
    34b8:	485d      	ldr	r0, [pc, #372]	; (3630 <usb_isr+0x5c4>)
    34ba:	f7ff fd75 	bl	2fa8 <endpoint0_transmit.constprop.0>
		return;
    34be:	e62a      	b.n	3116 <usb_isr+0xaa>
		if (endpoint > 7) break;
    34c0:	f010 0f78 	tst.w	r0, #120	; 0x78
    34c4:	b283      	uxth	r3, r0
    34c6:	f47f ae22 	bne.w	310e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    34ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    34ce:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    34d2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    34d6:	bf14      	ite	ne
    34d8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    34dc:	f043 0301 	orreq.w	r3, r3, #1
    34e0:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    34e4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    34e6:	4b48      	ldr	r3, [pc, #288]	; (3608 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    34e8:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    34ea:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    34ec:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    34ee:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    34f0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34f2:	2280      	movs	r2, #128	; 0x80
    34f4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    34f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    34fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    34fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3506:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    350a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    350e:	2b00      	cmp	r3, #0
    3510:	d1fb      	bne.n	350a <usb_isr+0x49e>
    3512:	e600      	b.n	3116 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    3514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    3518:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    351c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    3520:	bf14      	ite	ne
    3522:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    3526:	f023 0301 	biceq.w	r3, r3, #1
    352a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    352e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    3530:	4b35      	ldr	r3, [pc, #212]	; (3608 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3532:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    3534:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3536:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3538:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    353a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    353c:	2280      	movs	r2, #128	; 0x80
    353e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3540:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3544:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3548:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3550:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    3554:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3558:	2b00      	cmp	r3, #0
    355a:	d1fb      	bne.n	3554 <usb_isr+0x4e8>
    355c:	e5db      	b.n	3116 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    355e:	2000      	movs	r0, #0
    3560:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    3562:	4926      	ldr	r1, [pc, #152]	; (35fc <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3564:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    3566:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    3568:	f242 0121 	movw	r1, #8225	; 0x2021
    356c:	428c      	cmp	r4, r1
    356e:	f47f ae25 	bne.w	31bc <usb_isr+0x150>
    3572:	b280      	uxth	r0, r0
    3574:	2800      	cmp	r0, #0
    3576:	f47f ae21 	bne.w	31bc <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    357a:	492e      	ldr	r1, [pc, #184]	; (3634 <usb_isr+0x5c8>)
    357c:	4c2e      	ldr	r4, [pc, #184]	; (3638 <usb_isr+0x5cc>)
    357e:	c903      	ldmia	r1, {r0, r1}
    3580:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    3582:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3584:	ea4f 4111 	mov.w	r1, r1, lsr #16
    3588:	6020      	str	r0, [r4, #0]
    358a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    358c:	f47f ae16 	bne.w	31bc <usb_isr+0x150>
	__disable_irq();
    3590:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    3592:	482a      	ldr	r0, [pc, #168]	; (363c <usb_isr+0x5d0>)
    3594:	7801      	ldrb	r1, [r0, #0]
    3596:	f041 0108 	orr.w	r1, r1, #8
    359a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    359c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    35a0:	060d      	lsls	r5, r1, #24
    35a2:	d405      	bmi.n	35b0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    35a4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    35a6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    35a8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    35ac:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    35b0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    35b2:	4a23      	ldr	r2, [pc, #140]	; (3640 <usb_isr+0x5d4>)
    35b4:	2150      	movs	r1, #80	; 0x50
    35b6:	7011      	strb	r1, [r2, #0]
    35b8:	e600      	b.n	31bc <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    35ba:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    35bc:	782a      	ldrb	r2, [r5, #0]
    35be:	4282      	cmp	r2, r0
    35c0:	bf28      	it	cs
    35c2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    35c4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    35c8:	d144      	bne.n	3654 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    35ca:	4b1e      	ldr	r3, [pc, #120]	; (3644 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    35cc:	4d1e      	ldr	r5, [pc, #120]	; (3648 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    35ce:	7818      	ldrb	r0, [r3, #0]
    35d0:	491e      	ldr	r1, [pc, #120]	; (364c <usb_isr+0x5e0>)
    35d2:	4b1f      	ldr	r3, [pc, #124]	; (3650 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    35d4:	9201      	str	r2, [sp, #4]
    35d6:	2800      	cmp	r0, #0
    35d8:	bf18      	it	ne
    35da:	4619      	movne	r1, r3
    35dc:	4628      	mov	r0, r5
    35de:	f7ff f8e7 	bl	27b0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    35e2:	2307      	movs	r3, #7
    35e4:	706b      	strb	r3, [r5, #1]
    35e6:	9a01      	ldr	r2, [sp, #4]
    35e8:	e03b      	b.n	3662 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    35ea:	03c9      	lsls	r1, r1, #15
    35ec:	f53f af61 	bmi.w	34b2 <usb_isr+0x446>
    35f0:	e761      	b.n	34b6 <usb_isr+0x44a>
    35f2:	bf00      	nop
    35f4:	20001ae0 	.word	0x20001ae0
    35f8:	2000304c 	.word	0x2000304c
    35fc:	20001c80 	.word	0x20001c80
    3600:	00070080 	.word	0x00070080
    3604:	2000404c 	.word	0x2000404c
    3608:	20001ac0 	.word	0x20001ac0
    360c:	20002b34 	.word	0x20002b34
    3610:	20002b44 	.word	0x20002b44
    3614:	20002b61 	.word	0x20002b61
    3618:	20002b62 	.word	0x20002b62
    361c:	00cc0002 	.word	0x00cc0002
    3620:	000200c8 	.word	0x000200c8
    3624:	00c80002 	.word	0x00c80002
    3628:	20000080 	.word	0x20000080
    362c:	74d59319 	.word	0x74d59319
    3630:	20002ae4 	.word	0x20002ae4
    3634:	2000204c 	.word	0x2000204c
    3638:	20002b3c 	.word	0x20002b3c
    363c:	20002b5d 	.word	0x20002b5d
    3640:	20002b64 	.word	0x20002b64
    3644:	20002b63 	.word	0x20002b63
    3648:	20200000 	.word	0x20200000
    364c:	60002190 	.word	0x60002190
    3650:	6000212c 	.word	0x6000212c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    3654:	4629      	mov	r1, r5
    3656:	4d10      	ldr	r5, [pc, #64]	; (3698 <usb_isr+0x62c>)
    3658:	9201      	str	r2, [sp, #4]
    365a:	4628      	mov	r0, r5
    365c:	f7ff f8a8 	bl	27b0 <memcpy>
    3660:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    3662:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    3666:	4415      	add	r5, r2
	asm("dsb");
    3668:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    366c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3670:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    3674:	3320      	adds	r3, #32
	} while (location < end_addr);
    3676:	429d      	cmp	r5, r3
    3678:	d8fa      	bhi.n	3670 <usb_isr+0x604>
	asm("dsb");
    367a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    367e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    3682:	4805      	ldr	r0, [pc, #20]	; (3698 <usb_isr+0x62c>)
    3684:	4611      	mov	r1, r2
    3686:	f7ff fc8f 	bl	2fa8 <endpoint0_transmit.constprop.0>
				return;
    368a:	e544      	b.n	3116 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    368c:	2003      	movs	r0, #3
    368e:	f7ff fcd7 	bl	3040 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    3692:	f006 fa69 	bl	9b68 <___reboot_Teensyduino__veneer>
    3696:	bf00      	nop
    3698:	20200000 	.word	0x20200000

0000369c <usb_config_rx>:
{
    369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    36a0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    36a2:	1e83      	subs	r3, r0, #2
    36a4:	2b02      	cmp	r3, #2
    36a6:	d901      	bls.n	36ac <usb_config_rx+0x10>
}
    36a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    36ac:	f8df 904c 	ldr.w	r9, [pc, #76]	; 36fc <usb_config_rx+0x60>
    36b0:	4615      	mov	r5, r2
    36b2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    36b4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    36b6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    36ba:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    36bc:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    36c0:	2100      	movs	r1, #0
    36c2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    36c6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    36c8:	f002 f90e 	bl	58e8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    36cc:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    36d0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    36d2:	0952      	lsrs	r2, r2, #5
    36d4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    36d8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    36dc:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    36e0:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    36e4:	2f00      	cmp	r7, #0
    36e6:	d0df      	beq.n	36a8 <usb_config_rx+0xc>
    36e8:	4a03      	ldr	r2, [pc, #12]	; (36f8 <usb_config_rx+0x5c>)
    36ea:	40b3      	lsls	r3, r6
    36ec:	6811      	ldr	r1, [r2, #0]
    36ee:	430b      	orrs	r3, r1
    36f0:	6013      	str	r3, [r2, #0]
}
    36f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    36f6:	bf00      	nop
    36f8:	20002058 	.word	0x20002058
    36fc:	20000000 	.word	0x20000000

00003700 <usb_config_tx>:
{
    3700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3704:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3706:	1e81      	subs	r1, r0, #2
    3708:	2902      	cmp	r1, #2
    370a:	d901      	bls.n	3710 <usb_config_tx+0x10>
}
    370c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3710:	01c7      	lsls	r7, r0, #7
    3712:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3760 <usb_config_tx+0x60>
    3716:	4692      	mov	sl, r2
    3718:	4604      	mov	r4, r0
    371a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    371c:	223c      	movs	r2, #60	; 0x3c
    371e:	2100      	movs	r1, #0
    3720:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3722:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3726:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    3728:	f108 0004 	add.w	r0, r8, #4
    372c:	f002 f8dc 	bl	58e8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3730:	faba f28a 	clz	r2, sl
    3734:	0952      	lsrs	r2, r2, #5
    3736:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    373a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    373e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    3740:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    3744:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    3748:	2e00      	cmp	r6, #0
    374a:	d0df      	beq.n	370c <usb_config_tx+0xc>
    374c:	4b03      	ldr	r3, [pc, #12]	; (375c <usb_config_tx+0x5c>)
    374e:	3410      	adds	r4, #16
    3750:	6819      	ldr	r1, [r3, #0]
    3752:	40a2      	lsls	r2, r4
    3754:	430a      	orrs	r2, r1
    3756:	601a      	str	r2, [r3, #0]
}
    3758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    375c:	20002058 	.word	0x20002058
    3760:	20000000 	.word	0x20000000

00003764 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    3764:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    3766:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    3768:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    376a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    376e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    3772:	b410      	push	{r4}
	transfer->next = 1;
    3774:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    3776:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    3778:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    377c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    377e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    3782:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    3786:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    3788:	6181      	str	r1, [r0, #24]
}
    378a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    378e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    3792:	4770      	bx	lr

00003794 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3794:	1e83      	subs	r3, r0, #2
{
    3796:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3798:	2b02      	cmp	r3, #2
    379a:	d900      	bls.n	379e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    379c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    379e:	4b06      	ldr	r3, [pc, #24]	; (37b8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    37a0:	f100 0110 	add.w	r1, r0, #16
    37a4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    37a8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    37ac:	fa0c f101 	lsl.w	r1, ip, r1
    37b0:	3040      	adds	r0, #64	; 0x40
    37b2:	f7ff bb99 	b.w	2ee8 <schedule_transfer>
    37b6:	bf00      	nop
    37b8:	20000000 	.word	0x20000000

000037bc <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    37bc:	1e83      	subs	r3, r0, #2
{
    37be:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    37c0:	2b02      	cmp	r3, #2
    37c2:	d900      	bls.n	37c6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    37c4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    37c6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    37c8:	4b02      	ldr	r3, [pc, #8]	; (37d4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    37ca:	4081      	lsls	r1, r0
    37cc:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    37d0:	f7ff bb8a 	b.w	2ee8 <schedule_transfer>
    37d4:	20000000 	.word	0x20000000

000037d8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    37d8:	6840      	ldr	r0, [r0, #4]
#endif
}
    37da:	4770      	bx	lr

000037dc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    37dc:	4a12      	ldr	r2, [pc, #72]	; (3828 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    37de:	4b13      	ldr	r3, [pc, #76]	; (382c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    37e0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    37e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    37e8:	4298      	cmp	r0, r3
{
    37ea:	b510      	push	{r4, lr}
    37ec:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    37ee:	d202      	bcs.n	37f6 <usb_init_serialnumber+0x1a>
    37f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    37f4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    37f6:	4c0e      	ldr	r4, [pc, #56]	; (3830 <usb_init_serialnumber+0x54>)
    37f8:	a901      	add	r1, sp, #4
    37fa:	220a      	movs	r2, #10
    37fc:	f7ff f876 	bl	28ec <ultoa>
	for (i=0; i<10; i++) {
    3800:	a901      	add	r1, sp, #4
    3802:	2300      	movs	r3, #0
    3804:	4620      	mov	r0, r4
		char c = buf[i];
    3806:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    380a:	3301      	adds	r3, #1
		if (!c) break;
    380c:	b13a      	cbz	r2, 381e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    380e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    3810:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    3814:	d1f7      	bne.n	3806 <usb_init_serialnumber+0x2a>
    3816:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3818:	7023      	strb	r3, [r4, #0]
}
    381a:	b004      	add	sp, #16
    381c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    381e:	005b      	lsls	r3, r3, #1
    3820:	b2db      	uxtb	r3, r3
    3822:	7023      	strb	r3, [r4, #0]
}
    3824:	b004      	add	sp, #16
    3826:	bd10      	pop	{r4, pc}
    3828:	401f4400 	.word	0x401f4400
    382c:	00989680 	.word	0x00989680
    3830:	200017ac 	.word	0x200017ac

00003834 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    3834:	f000 bad6 	b.w	3de4 <usb_serial_flush_input>

00003838 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3838:	f000 bb66 	b.w	3f08 <usb_serial_flush_output>

0000383c <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    383c:	f000 bb3c 	b.w	3eb8 <usb_serial_write_buffer_free>

00003840 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3840:	4608      	mov	r0, r1
    3842:	4611      	mov	r1, r2
    3844:	f000 bb2c 	b.w	3ea0 <usb_serial_write>

00003848 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    3848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    384a:	4c14      	ldr	r4, [pc, #80]	; (389c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    384c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3850:	4e13      	ldr	r6, [pc, #76]	; (38a0 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    3856:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    385a:	4f12      	ldr	r7, [pc, #72]	; (38a4 <rx_queue_transfer+0x5c>)
    385c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    3860:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3862:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    3866:	4621      	mov	r1, r4
    3868:	883a      	ldrh	r2, [r7, #0]
    386a:	4630      	mov	r0, r6
    386c:	f7ff ff7a 	bl	3764 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    3870:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    3872:	4423      	add	r3, r4
	asm("dsb");
    3874:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    3878:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    387c:	3420      	adds	r4, #32
	} while (location < end_addr);
    387e:	42a3      	cmp	r3, r4
    3880:	d8fa      	bhi.n	3878 <rx_queue_transfer+0x30>
	asm("dsb");
    3882:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3886:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    388a:	2003      	movs	r0, #3
    388c:	4631      	mov	r1, r6
    388e:	f7ff ff95 	bl	37bc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3896:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    389c:	20200080 	.word	0x20200080
    38a0:	20001b00 	.word	0x20001b00
    38a4:	20002b50 	.word	0x20002b50

000038a8 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    38a8:	4b24      	ldr	r3, [pc, #144]	; (393c <rx_event+0x94>)
{
    38aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    38ae:	881c      	ldrh	r4, [r3, #0]
    38b0:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    38b2:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    38b4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    38b8:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    38ba:	2c00      	cmp	r4, #0
    38bc:	dd24      	ble.n	3908 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    38be:	4920      	ldr	r1, [pc, #128]	; (3940 <rx_event+0x98>)
		if (head != rx_tail) {
    38c0:	4820      	ldr	r0, [pc, #128]	; (3944 <rx_event+0x9c>)
		uint32_t head = rx_head;
    38c2:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    38c4:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    38c6:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    38c8:	4e1f      	ldr	r6, [pc, #124]	; (3948 <rx_event+0xa0>)
		if (head != rx_tail) {
    38ca:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    38cc:	481f      	ldr	r0, [pc, #124]	; (394c <rx_event+0xa4>)
		if (head != rx_tail) {
    38ce:	d007      	beq.n	38e0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    38d0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    38d4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    38d8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    38dc:	4294      	cmp	r4, r2
    38de:	d918      	bls.n	3912 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    38e0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    38e2:	2200      	movs	r2, #0
		rx_count[i] = len;
    38e4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    38e8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    38ea:	4e19      	ldr	r6, [pc, #100]	; (3950 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    38ec:	bf88      	it	hi
    38ee:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    38f0:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    38f4:	bf98      	it	ls
    38f6:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    38f8:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    38fa:	4b16      	ldr	r3, [pc, #88]	; (3954 <rx_event+0xac>)
		rx_head = head;
    38fc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    38fe:	681a      	ldr	r2, [r3, #0]
    3900:	4414      	add	r4, r2
    3902:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    3904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    3908:	4628      	mov	r0, r5
}
    390a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    390e:	f7ff bf9b 	b.w	3848 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3912:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3916:	4910      	ldr	r1, [pc, #64]	; (3958 <rx_event+0xb0>)
    3918:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    391a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    391c:	4408      	add	r0, r1
    391e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    3922:	f7fe ff45 	bl	27b0 <memcpy>
				rx_available += len;
    3926:	4a0b      	ldr	r2, [pc, #44]	; (3954 <rx_event+0xac>)
				rx_queue_transfer(i);
    3928:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    392a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    392e:	6813      	ldr	r3, [r2, #0]
    3930:	4423      	add	r3, r4
}
    3932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    3936:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    3938:	f7ff bf86 	b.w	3848 <rx_queue_transfer>
    393c:	20002b50 	.word	0x20002b50
    3940:	20002b5b 	.word	0x20002b5b
    3944:	20002b5c 	.word	0x20002b5c
    3948:	20002af0 	.word	0x20002af0
    394c:	20002b10 	.word	0x20002b10
    3950:	20002b00 	.word	0x20002b00
    3954:	20002aec 	.word	0x20002aec
    3958:	20200080 	.word	0x20200080

0000395c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    395c:	4b1d      	ldr	r3, [pc, #116]	; (39d4 <usb_serial_flush_callback+0x78>)
    395e:	781a      	ldrb	r2, [r3, #0]
    3960:	2a00      	cmp	r2, #0
    3962:	d136      	bne.n	39d2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    3964:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    3968:	4a1b      	ldr	r2, [pc, #108]	; (39d8 <usb_serial_flush_callback+0x7c>)
    396a:	7812      	ldrb	r2, [r2, #0]
    396c:	b38a      	cbz	r2, 39d2 <usb_serial_flush_callback+0x76>
{
    396e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    3972:	4d1a      	ldr	r5, [pc, #104]	; (39dc <usb_serial_flush_callback+0x80>)
    3974:	882a      	ldrh	r2, [r5, #0]
    3976:	b352      	cbz	r2, 39ce <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    3978:	4e19      	ldr	r6, [pc, #100]	; (39e0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    397a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    397e:	4f19      	ldr	r7, [pc, #100]	; (39e4 <usb_serial_flush_callback+0x88>)
    3980:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3982:	4c19      	ldr	r4, [pc, #100]	; (39e8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3984:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3988:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    398c:	4642      	mov	r2, r8
    398e:	4638      	mov	r0, r7
    3990:	4621      	mov	r1, r4
    3992:	f7ff fee7 	bl	3764 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3996:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    399a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    399e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    39a2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    39a6:	3420      	adds	r4, #32
	} while (location < end_addr);
    39a8:	42a2      	cmp	r2, r4
    39aa:	d8fa      	bhi.n	39a2 <usb_serial_flush_callback+0x46>
	asm("dsb");
    39ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    39b0:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    39b4:	2004      	movs	r0, #4
    39b6:	4639      	mov	r1, r7
    39b8:	f7ff feec 	bl	3794 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    39bc:	7833      	ldrb	r3, [r6, #0]
    39be:	3301      	adds	r3, #1
    39c0:	b2db      	uxtb	r3, r3
    39c2:	2b03      	cmp	r3, #3
    39c4:	bf88      	it	hi
    39c6:	2300      	movhi	r3, #0
    39c8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    39ca:	2300      	movs	r3, #0
    39cc:	802b      	strh	r3, [r5, #0]
}
    39ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39d2:	4770      	bx	lr
    39d4:	20002b60 	.word	0x20002b60
    39d8:	20002b62 	.word	0x20002b62
    39dc:	20002b52 	.word	0x20002b52
    39e0:	20002b5f 	.word	0x20002b5f
    39e4:	20001c00 	.word	0x20001c00
    39e8:	20201080 	.word	0x20201080

000039ec <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    39ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39f0:	b085      	sub	sp, #20
	while (size > 0) {
    39f2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    39f6:	2900      	cmp	r1, #0
    39f8:	f000 80bf 	beq.w	3b7a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    39fc:	2300      	movs	r3, #0
    39fe:	4c60      	ldr	r4, [pc, #384]	; (3b80 <usb_serial_write.part.0+0x194>)
    3a00:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3b9c <usb_serial_write.part.0+0x1b0>
    3a04:	f8df a198 	ldr.w	sl, [pc, #408]	; 3ba0 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    3a08:	4f5e      	ldr	r7, [pc, #376]	; (3b84 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    3a0a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    3a0c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    3a0e:	4a5e      	ldr	r2, [pc, #376]	; (3b88 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3a10:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    3a12:	4b5e      	ldr	r3, [pc, #376]	; (3b8c <usb_serial_write.part.0+0x1a0>)
    3a14:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    3a16:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    3a1a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    3a1e:	2b00      	cmp	r3, #0
    3a20:	f040 80a7 	bne.w	3b72 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    3a24:	461e      	mov	r6, r3
		int waiting=0;
    3a26:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    3a28:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    3a2a:	4648      	mov	r0, r9
    3a2c:	f7ff fed4 	bl	37d8 <usb_transfer_status>
			if (!(status & 0x80)) {
    3a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    3a34:	f000 808c 	beq.w	3b50 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    3a38:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    3a3c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    3a40:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    3a44:	b905      	cbnz	r5, 3a48 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    3a46:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d17d      	bne.n	3b48 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3a4c:	683b      	ldr	r3, [r7, #0]
    3a4e:	1b9b      	subs	r3, r3, r6
    3a50:	2b78      	cmp	r3, #120	; 0x78
    3a52:	f200 8087 	bhi.w	3b64 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    3a56:	4b4e      	ldr	r3, [pc, #312]	; (3b90 <usb_serial_write.part.0+0x1a4>)
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d074      	beq.n	3b48 <usb_serial_write.part.0+0x15c>
			yield();
    3a5e:	f000 fa9d 	bl	3f9c <yield>
			tx_noautoflush = 1;
    3a62:	2201      	movs	r2, #1
		while (!tx_available) {
    3a64:	f8b8 3000 	ldrh.w	r3, [r8]
    3a68:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    3a6a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d0dc      	beq.n	3a2a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3a70:	4a46      	ldr	r2, [pc, #280]	; (3b8c <usb_serial_write.part.0+0x1a0>)
    3a72:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3a76:	7811      	ldrb	r1, [r2, #0]
    3a78:	461a      	mov	r2, r3
    3a7a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    3a7e:	4d45      	ldr	r5, [pc, #276]	; (3b94 <usb_serial_write.part.0+0x1a8>)
    3a80:	02c9      	lsls	r1, r1, #11
    3a82:	4428      	add	r0, r5
		if (size >= tx_available) {
    3a84:	9d01      	ldr	r5, [sp, #4]
    3a86:	4295      	cmp	r5, r2
    3a88:	d217      	bcs.n	3aba <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    3a8a:	9303      	str	r3, [sp, #12]
    3a8c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3a90:	462a      	mov	r2, r5
    3a92:	f7fe fe8d 	bl	27b0 <memcpy>
			tx_available -= size;
    3a96:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3a98:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3a9c:	1b5b      	subs	r3, r3, r5
    3a9e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3aa2:	4b3d      	ldr	r3, [pc, #244]	; (3b98 <usb_serial_write.part.0+0x1ac>)
    3aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3aa8:	f3bf 8f4f 	dsb	sy
			sent += size;
    3aac:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    3aae:	2300      	movs	r3, #0
			sent += size;
    3ab0:	4428      	add	r0, r5
		tx_noautoflush = 0;
    3ab2:	7023      	strb	r3, [r4, #0]
}
    3ab4:	b005      	add	sp, #20
    3ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3aba:	4b36      	ldr	r3, [pc, #216]	; (3b94 <usb_serial_write.part.0+0x1a8>)
    3abc:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    3abe:	9902      	ldr	r1, [sp, #8]
    3ac0:	f7fe fe76 	bl	27b0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3ac4:	2300      	movs	r3, #0
    3ac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3aca:	4629      	mov	r1, r5
    3acc:	4648      	mov	r0, r9
    3ace:	f7ff fe49 	bl	3764 <usb_prepare_transfer>
	asm("dsb");
    3ad2:	f3bf 8f4f 	dsb	sy
    3ad6:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    3ada:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    3ade:	4293      	cmp	r3, r2
    3ae0:	bf34      	ite	cc
    3ae2:	2301      	movcc	r3, #1
    3ae4:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    3ae6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3aea:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    3aee:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    3af2:	3520      	adds	r5, #32
	} while (location < end_addr);
    3af4:	42ab      	cmp	r3, r5
    3af6:	d1fa      	bne.n	3aee <usb_serial_write.part.0+0x102>
	asm("dsb");
    3af8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3afc:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3b00:	2004      	movs	r0, #4
    3b02:	4649      	mov	r1, r9
    3b04:	f7ff fe46 	bl	3794 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3b08:	4a20      	ldr	r2, [pc, #128]	; (3b8c <usb_serial_write.part.0+0x1a0>)
    3b0a:	7813      	ldrb	r3, [r2, #0]
    3b0c:	3301      	adds	r3, #1
    3b0e:	b2db      	uxtb	r3, r3
    3b10:	2b03      	cmp	r3, #3
    3b12:	bf84      	itt	hi
    3b14:	2300      	movhi	r3, #0
    3b16:	4a1d      	ldrhi	r2, [pc, #116]	; (3b8c <usb_serial_write.part.0+0x1a0>)
    3b18:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3b1a:	f8b8 3000 	ldrh.w	r3, [r8]
    3b1e:	9a01      	ldr	r2, [sp, #4]
    3b20:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    3b22:	9a00      	ldr	r2, [sp, #0]
    3b24:	441a      	add	r2, r3
			size -= tx_available;
    3b26:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    3b28:	9200      	str	r2, [sp, #0]
			data += tx_available;
    3b2a:	9a02      	ldr	r2, [sp, #8]
    3b2c:	441a      	add	r2, r3
			tx_available = 0;
    3b2e:	2300      	movs	r3, #0
			data += tx_available;
    3b30:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    3b32:	4a19      	ldr	r2, [pc, #100]	; (3b98 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    3b34:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    3b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    3b3c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    3b40:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    3b42:	2900      	cmp	r1, #0
    3b44:	f47f af62 	bne.w	3a0c <usb_serial_write.part.0+0x20>
	return sent;
    3b48:	9800      	ldr	r0, [sp, #0]
}
    3b4a:	b005      	add	sp, #20
    3b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    3b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3b54:	4b0d      	ldr	r3, [pc, #52]	; (3b8c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    3b56:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3b5a:	7819      	ldrb	r1, [r3, #0]
				break;
    3b5c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    3b5e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    3b62:	e78a      	b.n	3a7a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    3b64:	2301      	movs	r3, #1
				return sent;
    3b66:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    3b68:	f88a 3000 	strb.w	r3, [sl]
}
    3b6c:	b005      	add	sp, #20
    3b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3b72:	461a      	mov	r2, r3
    3b74:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3b78:	e77f      	b.n	3a7a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    3b7a:	9801      	ldr	r0, [sp, #4]
	return sent;
    3b7c:	e7e5      	b.n	3b4a <usb_serial_write.part.0+0x15e>
    3b7e:	bf00      	nop
    3b80:	20002b60 	.word	0x20002b60
    3b84:	20002b34 	.word	0x20002b34
    3b88:	20001c00 	.word	0x20001c00
    3b8c:	20002b5f 	.word	0x20002b5f
    3b90:	20002b62 	.word	0x20002b62
    3b94:	20201080 	.word	0x20201080
    3b98:	402e0000 	.word	0x402e0000
    3b9c:	20002b52 	.word	0x20002b52
    3ba0:	20002b5e 	.word	0x20002b5e

00003ba4 <usb_serial_reset>:
}
    3ba4:	4770      	bx	lr
    3ba6:	bf00      	nop

00003ba8 <usb_serial_configure>:
	if (usb_high_speed) {
    3ba8:	4b2d      	ldr	r3, [pc, #180]	; (3c60 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3baa:	2100      	movs	r1, #0
    3bac:	2280      	movs	r2, #128	; 0x80
    3bae:	482d      	ldr	r0, [pc, #180]	; (3c64 <usb_serial_configure+0xbc>)
{
    3bb0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    3bb2:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    3bb4:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    3bb6:	4d2c      	ldr	r5, [pc, #176]	; (3c68 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    3bb8:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    3bba:	4e2c      	ldr	r6, [pc, #176]	; (3c6c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    3bbc:	bf0c      	ite	eq
    3bbe:	2340      	moveq	r3, #64	; 0x40
    3bc0:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    3bc4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3bc6:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3bc8:	f001 fe8e 	bl	58e8 <memset>
	tx_head = 0;
    3bcc:	4a28      	ldr	r2, [pc, #160]	; (3c70 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3bce:	4621      	mov	r1, r4
	tx_available = 0;
    3bd0:	4b28      	ldr	r3, [pc, #160]	; (3c74 <usb_serial_configure+0xcc>)
	tx_head = 0;
    3bd2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
    3bd8:	4827      	ldr	r0, [pc, #156]	; (3c78 <usb_serial_configure+0xd0>)
	tx_available = 0;
    3bda:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3bdc:	f001 fe84 	bl	58e8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3be0:	4a26      	ldr	r2, [pc, #152]	; (3c7c <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3be2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    3be4:	4b26      	ldr	r3, [pc, #152]	; (3c80 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3be6:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    3be8:	e9c2 4400 	strd	r4, r4, [r2]
    3bec:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    3bf0:	4a24      	ldr	r2, [pc, #144]	; (3c84 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    3bf2:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    3bf6:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    3bf8:	4a23      	ldr	r2, [pc, #140]	; (3c88 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    3bfa:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    3bfe:	4b23      	ldr	r3, [pc, #140]	; (3c8c <usb_serial_configure+0xe4>)
    3c00:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c02:	4623      	mov	r3, r4
	rx_available = 0;
    3c04:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c06:	4622      	mov	r2, r4
    3c08:	f7ff fd7a 	bl	3700 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3c0c:	4622      	mov	r2, r4
    3c0e:	8831      	ldrh	r1, [r6, #0]
    3c10:	2003      	movs	r0, #3
    3c12:	4b1f      	ldr	r3, [pc, #124]	; (3c90 <usb_serial_configure+0xe8>)
    3c14:	f7ff fd42 	bl	369c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3c18:	4623      	mov	r3, r4
    3c1a:	2201      	movs	r2, #1
    3c1c:	8829      	ldrh	r1, [r5, #0]
    3c1e:	2004      	movs	r0, #4
    3c20:	f7ff fd6e 	bl	3700 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3c24:	4620      	mov	r0, r4
    3c26:	3401      	adds	r4, #1
    3c28:	f7ff fe0e 	bl	3848 <rx_queue_transfer>
    3c2c:	2c08      	cmp	r4, #8
    3c2e:	d1f9      	bne.n	3c24 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    3c30:	4b18      	ldr	r3, [pc, #96]	; (3c94 <usb_serial_configure+0xec>)
    3c32:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    3c34:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    3c36:	4818      	ldr	r0, [pc, #96]	; (3c98 <usb_serial_configure+0xf0>)
    3c38:	4c18      	ldr	r4, [pc, #96]	; (3c9c <usb_serial_configure+0xf4>)
    3c3a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3c3c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3c44:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    3c48:	4915      	ldr	r1, [pc, #84]	; (3ca0 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3c4a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3c4e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    3c52:	b121      	cbz	r1, 3c5e <usb_serial_configure+0xb6>
    3c54:	4a13      	ldr	r2, [pc, #76]	; (3ca4 <usb_serial_configure+0xfc>)
    3c56:	7813      	ldrb	r3, [r2, #0]
    3c58:	f043 0301 	orr.w	r3, r3, #1
    3c5c:	7013      	strb	r3, [r2, #0]
}
    3c5e:	bd70      	pop	{r4, r5, r6, pc}
    3c60:	20002b63 	.word	0x20002b63
    3c64:	20001c00 	.word	0x20001c00
    3c68:	20002b54 	.word	0x20002b54
    3c6c:	20002b50 	.word	0x20002b50
    3c70:	20002b5f 	.word	0x20002b5f
    3c74:	20002b52 	.word	0x20002b52
    3c78:	20001b00 	.word	0x20001b00
    3c7c:	20002af0 	.word	0x20002af0
    3c80:	20002b00 	.word	0x20002b00
    3c84:	20002b5b 	.word	0x20002b5b
    3c88:	20002aec 	.word	0x20002aec
    3c8c:	20002b5c 	.word	0x20002b5c
    3c90:	000038a9 	.word	0x000038a9
    3c94:	402e0000 	.word	0x402e0000
    3c98:	20002b48 	.word	0x20002b48
    3c9c:	0000395d 	.word	0x0000395d
    3ca0:	00000000 	.word	0x00000000
    3ca4:	20002b65 	.word	0x20002b65

00003ca8 <usb_serial_read>:
{
    3ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    3cb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3d80 <usb_serial_read+0xd8>
{
    3cb8:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3cba:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    3cbe:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    3cc0:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    3cc4:	2900      	cmp	r1, #0
    3cc6:	d04f      	beq.n	3d68 <usb_serial_read+0xc0>
    3cc8:	4680      	mov	r8, r0
    3cca:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    3ccc:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    3cce:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3d84 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    3cd2:	4b26      	ldr	r3, [pc, #152]	; (3d6c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    3cd4:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3cd8:	4925      	ldr	r1, [pc, #148]	; (3d70 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    3cde:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    3ce2:	d03f      	beq.n	3d64 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    3ce4:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    3ce6:	4b23      	ldr	r3, [pc, #140]	; (3d74 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3ce8:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    3cea:	bf28      	it	cs
    3cec:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3cee:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    3cf0:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3cf4:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    3cf8:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    3cfa:	4b1f      	ldr	r3, [pc, #124]	; (3d78 <usb_serial_read+0xd0>)
    3cfc:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    3d00:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    3d04:	42aa      	cmp	r2, r5
    3d06:	d21c      	bcs.n	3d42 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3d08:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    3d0c:	4918      	ldr	r1, [pc, #96]	; (3d70 <usb_serial_read+0xc8>)
			rx_available -= len;
    3d0e:	4c1b      	ldr	r4, [pc, #108]	; (3d7c <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3d10:	4461      	add	r1, ip
    3d12:	9201      	str	r2, [sp, #4]
    3d14:	f7fe fd4c 	bl	27b0 <memcpy>
			rx_available -= len;
    3d18:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    3d1a:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    3d1e:	4658      	mov	r0, fp
			rx_index[i] += len;
    3d20:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    3d22:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    3d26:	442a      	add	r2, r5
			rx_available -= len;
    3d28:	4439      	add	r1, r7
			rx_index[i] += len;
    3d2a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    3d2e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3d30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3d38:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    3d3c:	b003      	add	sp, #12
    3d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3d42:	462a      	mov	r2, r5
			count += avail;
    3d44:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3d46:	f7fe fd33 	bl	27b0 <memcpy>
			rx_available -= avail;
    3d4a:	490c      	ldr	r1, [pc, #48]	; (3d7c <usb_serial_read+0xd4>)
			rx_tail = tail;
    3d4c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    3d4e:	4630      	mov	r0, r6
			rx_available -= avail;
    3d50:	680a      	ldr	r2, [r1, #0]
			p += avail;
    3d52:	44a8      	add	r8, r5
			rx_available -= avail;
    3d54:	1b52      	subs	r2, r2, r5
    3d56:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    3d58:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    3d5c:	f7ff fd74 	bl	3848 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    3d60:	45bb      	cmp	fp, r7
    3d62:	d8b6      	bhi.n	3cd2 <usb_serial_read+0x2a>
	return count;
    3d64:	4638      	mov	r0, r7
    3d66:	e7e3      	b.n	3d30 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    3d68:	4608      	mov	r0, r1
    3d6a:	e7e1      	b.n	3d30 <usb_serial_read+0x88>
    3d6c:	20002b5b 	.word	0x20002b5b
    3d70:	20200080 	.word	0x20200080
    3d74:	20002b10 	.word	0x20002b10
    3d78:	20002af0 	.word	0x20002af0
    3d7c:	20002aec 	.word	0x20002aec
    3d80:	20002b5c 	.word	0x20002b5c
    3d84:	20002b00 	.word	0x20002b00

00003d88 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3d88:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    3d8a:	4a0c      	ldr	r2, [pc, #48]	; (3dbc <usb_serial_peekchar+0x34>)
    3d8c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    3d8e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3d90:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    3d92:	428a      	cmp	r2, r1
    3d94:	d00d      	beq.n	3db2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3d96:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3d98:	4809      	ldr	r0, [pc, #36]	; (3dc0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3d9a:	4a0a      	ldr	r2, [pc, #40]	; (3dc4 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    3d9c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3d9e:	490a      	ldr	r1, [pc, #40]	; (3dc8 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3da0:	bf28      	it	cs
    3da2:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3da4:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3da6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3daa:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3dae:	5c58      	ldrb	r0, [r3, r1]
    3db0:	4770      	bx	lr
	if (tail == rx_head) return -1;
    3db2:	f04f 30ff 	mov.w	r0, #4294967295
}
    3db6:	4770      	bx	lr
    3db8:	20002b5b 	.word	0x20002b5b
    3dbc:	20002b5c 	.word	0x20002b5c
    3dc0:	20002b10 	.word	0x20002b10
    3dc4:	20200080 	.word	0x20200080
    3dc8:	20002b00 	.word	0x20002b00

00003dcc <usb_serial_available>:
	uint32_t n = rx_available;
    3dcc:	4b04      	ldr	r3, [pc, #16]	; (3de0 <usb_serial_available+0x14>)
{
    3dce:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    3dd0:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    3dd2:	b10c      	cbz	r4, 3dd8 <usb_serial_available+0xc>
}
    3dd4:	4620      	mov	r0, r4
    3dd6:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    3dd8:	f000 f8e0 	bl	3f9c <yield>
}
    3ddc:	4620      	mov	r0, r4
    3dde:	bd10      	pop	{r4, pc}
    3de0:	20002aec 	.word	0x20002aec

00003de4 <usb_serial_flush_input>:
{
    3de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3de8:	4e14      	ldr	r6, [pc, #80]	; (3e3c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    3dea:	4d15      	ldr	r5, [pc, #84]	; (3e40 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    3dec:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    3dee:	782a      	ldrb	r2, [r5, #0]
    3df0:	4293      	cmp	r3, r2
    3df2:	d021      	beq.n	3e38 <usb_serial_flush_input+0x54>
    3df4:	b2dc      	uxtb	r4, r3
    3df6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3e48 <usb_serial_flush_input+0x64>
    3dfa:	f8df b050 	ldr.w	fp, [pc, #80]	; 3e4c <usb_serial_flush_input+0x68>
    3dfe:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3e50 <usb_serial_flush_input+0x6c>
    3e02:	4f10      	ldr	r7, [pc, #64]	; (3e44 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    3e04:	3401      	adds	r4, #1
    3e06:	2c08      	cmp	r4, #8
		rx_tail = tail;
    3e08:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    3e0c:	d901      	bls.n	3e12 <usb_serial_flush_input+0x2e>
    3e0e:	2400      	movs	r4, #0
    3e10:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    3e12:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3e16:	f8db 3000 	ldr.w	r3, [fp]
    3e1a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    3e1e:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    3e22:	1a52      	subs	r2, r2, r1
    3e24:	1a9b      	subs	r3, r3, r2
    3e26:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3e2a:	f7ff fd0d 	bl	3848 <rx_queue_transfer>
		rx_tail = tail;
    3e2e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    3e32:	782b      	ldrb	r3, [r5, #0]
    3e34:	42a3      	cmp	r3, r4
    3e36:	d1e5      	bne.n	3e04 <usb_serial_flush_input+0x20>
}
    3e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e3c:	20002b5c 	.word	0x20002b5c
    3e40:	20002b5b 	.word	0x20002b5b
    3e44:	20002b00 	.word	0x20002b00
    3e48:	20002b10 	.word	0x20002b10
    3e4c:	20002aec 	.word	0x20002aec
    3e50:	20002af0 	.word	0x20002af0

00003e54 <usb_serial_getchar>:
{
    3e54:	b500      	push	{lr}
    3e56:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    3e58:	2101      	movs	r1, #1
    3e5a:	f10d 0007 	add.w	r0, sp, #7
    3e5e:	f7ff ff23 	bl	3ca8 <usb_serial_read>
    3e62:	b120      	cbz	r0, 3e6e <usb_serial_getchar+0x1a>
    3e64:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3e68:	b003      	add	sp, #12
    3e6a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    3e6e:	f04f 30ff 	mov.w	r0, #4294967295
    3e72:	e7f9      	b.n	3e68 <usb_serial_getchar+0x14>

00003e74 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    3e74:	4b09      	ldr	r3, [pc, #36]	; (3e9c <usb_serial_putchar+0x28>)
{
    3e76:	b500      	push	{lr}
    3e78:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    3e7a:	781b      	ldrb	r3, [r3, #0]
{
    3e7c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    3e80:	b13b      	cbz	r3, 3e92 <usb_serial_putchar+0x1e>
    3e82:	2101      	movs	r1, #1
    3e84:	f10d 0007 	add.w	r0, sp, #7
    3e88:	f7ff fdb0 	bl	39ec <usb_serial_write.part.0>
}
    3e8c:	b003      	add	sp, #12
    3e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    3e92:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3e96:	b003      	add	sp, #12
    3e98:	f85d fb04 	ldr.w	pc, [sp], #4
    3e9c:	20002b62 	.word	0x20002b62

00003ea0 <usb_serial_write>:
	if (!usb_configuration) return 0;
    3ea0:	4b04      	ldr	r3, [pc, #16]	; (3eb4 <usb_serial_write+0x14>)
    3ea2:	781b      	ldrb	r3, [r3, #0]
    3ea4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3ea8:	b10b      	cbz	r3, 3eae <usb_serial_write+0xe>
    3eaa:	f7ff bd9f 	b.w	39ec <usb_serial_write.part.0>
}
    3eae:	4610      	mov	r0, r2
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	20002b62 	.word	0x20002b62

00003eb8 <usb_serial_write_buffer_free>:
{
    3eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    3ebc:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    3ebe:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3f04 <usb_serial_write_buffer_free+0x4c>
    3ec2:	2301      	movs	r3, #1
    3ec4:	4d0d      	ldr	r5, [pc, #52]	; (3efc <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    3ec6:	4627      	mov	r7, r4
    3ec8:	4e0d      	ldr	r6, [pc, #52]	; (3f00 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    3eca:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    3ece:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3ed0:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    3ed2:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    3ed4:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    3ed6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3eda:	d005      	beq.n	3ee8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3edc:	f7ff fc7c 	bl	37d8 <usb_transfer_status>
    3ee0:	0603      	lsls	r3, r0, #24
    3ee2:	bf58      	it	pl
    3ee4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    3ee8:	2c04      	cmp	r4, #4
    3eea:	d1f0      	bne.n	3ece <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    3eec:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3ef0:	2300      	movs	r3, #0
}
    3ef2:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    3ef4:	f888 3000 	strb.w	r3, [r8]
}
    3ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3efc:	20001c00 	.word	0x20001c00
    3f00:	20002b5f 	.word	0x20002b5f
    3f04:	20002b60 	.word	0x20002b60

00003f08 <usb_serial_flush_output>:
{
    3f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    3f0c:	4b1d      	ldr	r3, [pc, #116]	; (3f84 <usb_serial_flush_output+0x7c>)
    3f0e:	781b      	ldrb	r3, [r3, #0]
    3f10:	b113      	cbz	r3, 3f18 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3f12:	4d1d      	ldr	r5, [pc, #116]	; (3f88 <usb_serial_flush_output+0x80>)
    3f14:	882a      	ldrh	r2, [r5, #0]
    3f16:	b90a      	cbnz	r2, 3f1c <usb_serial_flush_output+0x14>
}
    3f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    3f1c:	4e1b      	ldr	r6, [pc, #108]	; (3f8c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    3f1e:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    3f22:	491b      	ldr	r1, [pc, #108]	; (3f90 <usb_serial_flush_output+0x88>)
    3f24:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3f26:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3f28:	4c1a      	ldr	r4, [pc, #104]	; (3f94 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3f2a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    3f2e:	4f1a      	ldr	r7, [pc, #104]	; (3f98 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3f30:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    3f34:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3f36:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    3f38:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3f3a:	4621      	mov	r1, r4
    3f3c:	2300      	movs	r3, #0
    3f3e:	f7ff fc11 	bl	3764 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3f42:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    3f46:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3f4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3f4e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3f52:	3420      	adds	r4, #32
	} while (location < end_addr);
    3f54:	42a2      	cmp	r2, r4
    3f56:	d8fa      	bhi.n	3f4e <usb_serial_flush_output+0x46>
	asm("dsb");
    3f58:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3f5c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3f60:	2004      	movs	r0, #4
    3f62:	4641      	mov	r1, r8
    3f64:	f7ff fc16 	bl	3794 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3f68:	7833      	ldrb	r3, [r6, #0]
    3f6a:	3301      	adds	r3, #1
    3f6c:	b2db      	uxtb	r3, r3
    3f6e:	2b03      	cmp	r3, #3
    3f70:	bf88      	it	hi
    3f72:	2300      	movhi	r3, #0
    3f74:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3f76:	2300      	movs	r3, #0
    3f78:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    3f7a:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3f7e:	703b      	strb	r3, [r7, #0]
}
    3f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f84:	20002b62 	.word	0x20002b62
    3f88:	20002b52 	.word	0x20002b52
    3f8c:	20002b5f 	.word	0x20002b5f
    3f90:	20001c00 	.word	0x20001c00
    3f94:	20201080 	.word	0x20201080
    3f98:	20002b60 	.word	0x20002b60

00003f9c <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    3f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    3fa0:	4b2d      	ldr	r3, [pc, #180]	; (4058 <yield+0xbc>)
    3fa2:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    3fa4:	b166      	cbz	r6, 3fc0 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    3fa6:	4f2d      	ldr	r7, [pc, #180]	; (405c <yield+0xc0>)
    3fa8:	783b      	ldrb	r3, [r7, #0]
    3faa:	b94b      	cbnz	r3, 3fc0 <yield+0x24>
	running = 1;
    3fac:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3fae:	07f1      	lsls	r1, r6, #31
	running = 1;
    3fb0:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    3fb2:	d443      	bmi.n	403c <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    3fb4:	07b2      	lsls	r2, r6, #30
    3fb6:	d426      	bmi.n	4006 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    3fb8:	2300      	movs	r3, #0
    3fba:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    3fbc:	0773      	lsls	r3, r6, #29
    3fbe:	d401      	bmi.n	3fc4 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    3fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    3fc4:	4b26      	ldr	r3, [pc, #152]	; (4060 <yield+0xc4>)
    3fc6:	681a      	ldr	r2, [r3, #0]
    3fc8:	2a00      	cmp	r2, #0
    3fca:	d0f9      	beq.n	3fc0 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3fcc:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    3fd0:	2a00      	cmp	r2, #0
    3fd2:	d1f5      	bne.n	3fc0 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3fd4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    3fd8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    3fda:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    3fdc:	2800      	cmp	r0, #0
    3fde:	d034      	beq.n	404a <yield+0xae>
		if (runningFromYield) {
    3fe0:	4c20      	ldr	r4, [pc, #128]	; (4064 <yield+0xc8>)
    3fe2:	7821      	ldrb	r1, [r4, #0]
    3fe4:	2900      	cmp	r1, #0
    3fe6:	d130      	bne.n	404a <yield+0xae>
		runningFromYield = true;
    3fe8:	2201      	movs	r2, #1
    3fea:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    3fec:	6942      	ldr	r2, [r0, #20]
    3fee:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    3ff0:	2a00      	cmp	r2, #0
    3ff2:	d02e      	beq.n	4052 <yield+0xb6>
			firstYield->_prev = nullptr;
    3ff4:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    3ff6:	b905      	cbnz	r5, 3ffa <yield+0x5e>
    3ff8:	b662      	cpsie	i
		first->_triggered = false;
    3ffa:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    3ffc:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    3ffe:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4000:	4798      	blx	r3
		runningFromYield = false;
    4002:	7025      	strb	r5, [r4, #0]
    4004:	e7dc      	b.n	3fc0 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4006:	f8df 8064 	ldr.w	r8, [pc, #100]	; 406c <yield+0xd0>
    400a:	f898 3000 	ldrb.w	r3, [r8]
    400e:	2b00      	cmp	r3, #0
    4010:	d0d2      	beq.n	3fb8 <yield+0x1c>
    4012:	2500      	movs	r5, #0
    4014:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4070 <yield+0xd4>
    4018:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    401a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    401e:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4020:	6823      	ldr	r3, [r4, #0]
    4022:	4620      	mov	r0, r4
    4024:	691b      	ldr	r3, [r3, #16]
    4026:	4798      	blx	r3
    4028:	b110      	cbz	r0, 4030 <yield+0x94>
    402a:	6963      	ldr	r3, [r4, #20]
    402c:	689b      	ldr	r3, [r3, #8]
    402e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4030:	f898 2000 	ldrb.w	r2, [r8]
    4034:	b2eb      	uxtb	r3, r5
    4036:	429a      	cmp	r2, r3
    4038:	d8ef      	bhi.n	401a <yield+0x7e>
    403a:	e7bd      	b.n	3fb8 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    403c:	f7ff fec6 	bl	3dcc <usb_serial_available>
		if (Serial.available()) serialEvent();
    4040:	2800      	cmp	r0, #0
    4042:	d0b7      	beq.n	3fb4 <yield+0x18>
    4044:	f3af 8000 	nop.w
    4048:	e7b4      	b.n	3fb4 <yield+0x18>
		if (doit) __enable_irq();
    404a:	2d00      	cmp	r5, #0
    404c:	d1b8      	bne.n	3fc0 <yield+0x24>
    404e:	b662      	cpsie	i
    4050:	e7b6      	b.n	3fc0 <yield+0x24>
			lastYield = nullptr;
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <yield+0xcc>)
    4054:	601a      	str	r2, [r3, #0]
    4056:	e7ce      	b.n	3ff6 <yield+0x5a>
    4058:	20002b65 	.word	0x20002b65
    405c:	20002b58 	.word	0x20002b58
    4060:	20001d08 	.word	0x20001d08
    4064:	20002b56 	.word	0x20002b56
    4068:	20001d14 	.word	0x20001d14
    406c:	20002b57 	.word	0x20002b57
    4070:	20001d18 	.word	0x20001d18

00004074 <HardwareSerialIMXRT::operator bool()>:
	operator bool()			{ return true; }
    4074:	2001      	movs	r0, #1
    4076:	4770      	bx	lr

00004078 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    4078:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    407c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    4080:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    4082:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4084:	4293      	cmp	r3, r2
    4086:	d202      	bcs.n	408e <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    4088:	3a01      	subs	r2, #1
    408a:	1ad0      	subs	r0, r2, r3
}
    408c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    408e:	6b41      	ldr	r1, [r0, #52]	; 0x34
    4090:	3901      	subs	r1, #1
    4092:	440a      	add	r2, r1
    4094:	1ad0      	subs	r0, r2, r3
    4096:	4770      	bx	lr

00004098 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4098:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    409a:	b672      	cpsid	i
	head = rx_buffer_head_;
    409c:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    40a0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    40a4:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    40a6:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    40a8:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    40aa:	bf3c      	itt	cc
    40ac:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    40ae:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    40b0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    40b2:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    40b4:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    40b6:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    40ba:	4418      	add	r0, r3
    40bc:	4770      	bx	lr
    40be:	bf00      	nop

000040c0 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    40c0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    40c4:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    40c6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    40ca:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    40cc:	b29b      	uxth	r3, r3
	if (head == tail) {
    40ce:	4299      	cmp	r1, r3
{
    40d0:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    40d2:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    40d4:	d014      	beq.n	4100 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    40d6:	3301      	adds	r3, #1
    40d8:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    40da:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    40dc:	4298      	cmp	r0, r3
    40de:	bf98      	it	ls
    40e0:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    40e2:	4299      	cmp	r1, r3
    40e4:	d806      	bhi.n	40f4 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    40e6:	1a5b      	subs	r3, r3, r1
    40e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    40ea:	5cd0      	ldrb	r0, [r2, r3]
    40ec:	b2c0      	uxtb	r0, r0
	}
}
    40ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    40f2:	4770      	bx	lr
		return rx_buffer_[tail];
    40f4:	6a12      	ldr	r2, [r2, #32]
}
    40f6:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    40fa:	5cd0      	ldrb	r0, [r2, r3]
    40fc:	b2c0      	uxtb	r0, r0
}
    40fe:	4770      	bx	lr
		__disable_irq();
    4100:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    4102:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    4106:	b280      	uxth	r0, r0
		if (head == tail) {
    4108:	4281      	cmp	r1, r0
    410a:	d001      	beq.n	4110 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    410c:	b662      	cpsie	i
    410e:	e7e2      	b.n	40d6 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    4110:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4112:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4116:	d103      	bne.n	4120 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    4118:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    411c:	b662      	cpsie	i
			return c;
    411e:	e7e6      	b.n	40ee <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4120:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    4122:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    4124:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    4126:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    4128:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    412c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    4130:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    4132:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    4136:	704b      	strb	r3, [r1, #1]
    4138:	e7f0      	b.n	411c <HardwareSerialIMXRT::peek()+0x5c>
    413a:	bf00      	nop

0000413c <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    413c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4140:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4142:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4146:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4148:	b29b      	uxth	r3, r3
	if (head == tail) {
    414a:	4299      	cmp	r1, r3
{
    414c:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    414e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4150:	d025      	beq.n	419e <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4152:	3301      	adds	r3, #1
    4154:	6b94      	ldr	r4, [r2, #56]	; 0x38
    4156:	429c      	cmp	r4, r3
    4158:	d916      	bls.n	4188 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    415a:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    415c:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    4160:	4298      	cmp	r0, r3
    4162:	d917      	bls.n	4194 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    4164:	6a10      	ldr	r0, [r2, #32]
    4166:	5cc0      	ldrb	r0, [r0, r3]
    4168:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    416a:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    416c:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    4170:	b145      	cbz	r5, 4184 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    4172:	4299      	cmp	r1, r3
    4174:	d31c      	bcc.n	41b0 <HardwareSerialIMXRT::read()+0x74>
    4176:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    4178:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    417a:	4299      	cmp	r1, r3
    417c:	d302      	bcc.n	4184 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    417e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    4180:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    4184:	bc30      	pop	{r4, r5}
    4186:	4770      	bx	lr
    4188:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    418c:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    418e:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    4190:	4298      	cmp	r0, r3
    4192:	d8e7      	bhi.n	4164 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    4194:	1a18      	subs	r0, r3, r0
    4196:	6a55      	ldr	r5, [r2, #36]	; 0x24
    4198:	5c28      	ldrb	r0, [r5, r0]
    419a:	b2c0      	uxtb	r0, r0
    419c:	e7e5      	b.n	416a <HardwareSerialIMXRT::read()+0x2e>
    419e:	4608      	mov	r0, r1
		__disable_irq();
    41a0:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    41a2:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    41a6:	b289      	uxth	r1, r1
		if (head == tail) {
    41a8:	4288      	cmp	r0, r1
    41aa:	d004      	beq.n	41b6 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    41ac:	b662      	cpsie	i
    41ae:	e7d0      	b.n	4152 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    41b0:	440c      	add	r4, r1
    41b2:	1ae3      	subs	r3, r4, r3
    41b4:	e7e0      	b.n	4178 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    41b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    41b8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    41bc:	d103      	bne.n	41c6 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    41be:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    41c2:	b662      	cpsie	i
			return c;
    41c4:	e7de      	b.n	4184 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    41c6:	69e0      	ldr	r0, [r4, #28]
    41c8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    41cc:	e7f9      	b.n	41c2 <HardwareSerialIMXRT::read()+0x86>
    41ce:	bf00      	nop

000041d0 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    41d0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    41d4:	b143      	cbz	r3, 41e8 <HardwareSerialIMXRT::flush()+0x18>
{
    41d6:	b510      	push	{r4, lr}
    41d8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    41da:	f7ff fedf 	bl	3f9c <yield>
    41de:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    41e2:	2b00      	cmp	r3, #0
    41e4:	d1f9      	bne.n	41da <HardwareSerialIMXRT::flush()+0xa>
}
    41e6:	bd10      	pop	{r4, pc}
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop

000041ec <HardwareSerialIMXRT::end()>:
{
    41ec:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    41ee:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    41f2:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    41f6:	6809      	ldr	r1, [r1, #0]
    41f8:	4211      	tst	r1, r2
    41fa:	d028      	beq.n	424e <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    41fc:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    4200:	4604      	mov	r4, r0
    4202:	b132      	cbz	r2, 4212 <HardwareSerialIMXRT::end()+0x26>
    4204:	f7ff feca 	bl	3f9c <yield>
    4208:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    420c:	2b00      	cmp	r3, #0
    420e:	d1f9      	bne.n	4204 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4210:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    4212:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4214:	4a0e      	ldr	r2, [pc, #56]	; (4250 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    4216:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4218:	7e20      	ldrb	r0, [r4, #24]
    421a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    421e:	7d00      	ldrb	r0, [r0, #20]
    4220:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    4224:	6845      	ldr	r5, [r0, #4]
    4226:	2005      	movs	r0, #5
    4228:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    422a:	7e65      	ldrb	r5, [r4, #25]
    422c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    4234:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    4238:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    423a:	6852      	ldr	r2, [r2, #4]
    423c:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    423e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    4242:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    4246:	b113      	cbz	r3, 424e <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    4248:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    424a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    424e:	bd38      	pop	{r3, r4, r5, pc}
    4250:	20000778 	.word	0x20000778

00004254 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    4254:	ee07 1a90 	vmov	s15, r1
    4258:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 44c4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    425c:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    425e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    4262:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    4266:	ed9f 6a98 	vldr	s12, [pc, #608]	; 44c8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    426a:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    426e:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    4272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    4276:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4278:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    427a:	2401      	movs	r4, #1
		float div = base / (float)osr;
    427c:	ee07 1a90 	vmov	s15, r1
    4280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4284:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    4288:	ee77 7a05 	vadd.f32	s15, s14, s10
    428c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4290:	ee17 3a90 	vmov	r3, s15
    4294:	4563      	cmp	r3, ip
    4296:	bfa8      	it	ge
    4298:	4663      	movge	r3, ip
    429a:	2b01      	cmp	r3, #1
    429c:	bfb8      	it	lt
    429e:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    42a0:	ee07 3a90 	vmov	s15, r3
    42a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    42a8:	ee76 6ac7 	vsub.f32	s13, s13, s14
    42ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    42b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    42b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42b8:	bf48      	it	mi
    42ba:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    42be:	eef4 7ac6 	vcmpe.f32	s15, s12
    42c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42c6:	d803      	bhi.n	42d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    42c8:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    42cc:	468e      	mov	lr, r1
			bestdiv = divint;
    42ce:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    42d0:	3101      	adds	r1, #1
    42d2:	2921      	cmp	r1, #33	; 0x21
    42d4:	d1d2      	bne.n	427c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    42d6:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    42d8:	6943      	ldr	r3, [r0, #20]
    42da:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    42de:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    42e2:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    42e6:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    42e8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    42ec:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    42f0:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    42f4:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    42f8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    42fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    42fe:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4300:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    4304:	eba1 010c 	sub.w	r1, r1, ip
    4308:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    430c:	6839      	ldr	r1, [r7, #0]
    430e:	691e      	ldr	r6, [r3, #16]
    4310:	ea41 0106 	orr.w	r1, r1, r6
    4314:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    4316:	bf14      	ite	ne
    4318:	2101      	movne	r1, #1
    431a:	2100      	moveq	r1, #0
    431c:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    431e:	f040 80ac 	bne.w	447a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4322:	7e01      	ldrb	r1, [r0, #24]
    4324:	4e69      	ldr	r6, [pc, #420]	; (44cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    4326:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    432a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 44ec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    432e:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    4332:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4336:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    433a:	68b9      	ldr	r1, [r7, #8]
    433c:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    4340:	6879      	ldr	r1, [r7, #4]
    4342:	f8d8 7018 	ldr.w	r7, [r8, #24]
    4346:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    4348:	f1ba 0f00 	cmp.w	sl, #0
    434c:	d003      	beq.n	4356 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    434e:	f8d8 1020 	ldr.w	r1, [r8, #32]
    4352:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    4356:	7e47      	ldrb	r7, [r0, #25]
    4358:	21d9      	movs	r1, #217	; 0xd9
    435a:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    435e:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    4362:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    4366:	f8dc 7008 	ldr.w	r7, [ip, #8]
    436a:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    436c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    4370:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    4374:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    4376:	7e41      	ldrb	r1, [r0, #25]
    4378:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    437c:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    437e:	b10f      	cbz	r7, 4384 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    4380:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4382:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4384:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4388:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    438c:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4390:	bfcc      	ite	gt
    4392:	f04f 0e00 	movgt.w	lr, #0
    4396:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    439a:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    439e:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    43a2:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    43a4:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    43a6:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    43a8:	7859      	ldrb	r1, [r3, #1]
    43aa:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    43ae:	2100      	movs	r1, #0
    43b0:	60e9      	str	r1, [r5, #12]
    43b2:	4947      	ldr	r1, [pc, #284]	; (44d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    43b4:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    43b8:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    43ba:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    43be:	4c45      	ldr	r4, [pc, #276]	; (44d4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    43c0:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    43c4:	784f      	ldrb	r7, [r1, #1]
    43c6:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    43ca:	4b43      	ldr	r3, [pc, #268]	; (44d8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    43cc:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    43ce:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    43d2:	6944      	ldr	r4, [r0, #20]
    43d4:	7861      	ldrb	r1, [r4, #1]
    43d6:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    43da:	f001 011f 	and.w	r1, r1, #31
    43de:	009b      	lsls	r3, r3, #2
    43e0:	fa0e f101 	lsl.w	r1, lr, r1
    43e4:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    43e6:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    43e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    43ea:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    43ee:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    43f0:	0753      	lsls	r3, r2, #29
    43f2:	d43e      	bmi.n	4472 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    43f4:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    43f8:	f002 010f 	and.w	r1, r2, #15
    43fc:	2904      	cmp	r1, #4
    43fe:	bf08      	it	eq
    4400:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    4404:	0697      	lsls	r7, r2, #26
    4406:	d52e      	bpl.n	4466 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4408:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    440a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    440e:	2900      	cmp	r1, #0
    4410:	d13a      	bne.n	4488 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    4412:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    4414:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    4416:	d503      	bpl.n	4420 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    4418:	692b      	ldr	r3, [r5, #16]
    441a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    441e:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    4420:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    4422:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    4424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    4428:	bf48      	it	mi
    442a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    442e:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    4430:	05d3      	lsls	r3, r2, #23
    4432:	d503      	bpl.n	443c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    4434:	692b      	ldr	r3, [r5, #16]
    4436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    443a:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    443c:	68a3      	ldr	r3, [r4, #8]
    443e:	b183      	cbz	r3, 4462 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4440:	4e26      	ldr	r6, [pc, #152]	; (44dc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    4442:	7834      	ldrb	r4, [r6, #0]
    4444:	2c00      	cmp	r4, #0
    4446:	d03a      	beq.n	44be <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    4448:	1e61      	subs	r1, r4, #1
    444a:	4d25      	ldr	r5, [pc, #148]	; (44e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    444c:	b2c9      	uxtb	r1, r1
    444e:	1f2b      	subs	r3, r5, #4
    4450:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4454:	e001      	b.n	445a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    4456:	4299      	cmp	r1, r3
    4458:	d025      	beq.n	44a6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    445a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    445e:	4290      	cmp	r0, r2
    4460:	d1f9      	bne.n	4456 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    4462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4466:	7e81      	ldrb	r1, [r0, #26]
    4468:	2900      	cmp	r1, #0
    446a:	d0d2      	beq.n	4412 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    446c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    4470:	e7cf      	b.n	4412 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    4472:	4b1c      	ldr	r3, [pc, #112]	; (44e4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    4474:	ea4c 0303 	orr.w	r3, ip, r3
    4478:	e7be      	b.n	43f8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    447a:	7e47      	ldrb	r7, [r0, #25]
    447c:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    4480:	4e12      	ldr	r6, [pc, #72]	; (44cc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    4482:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    4486:	e76a      	b.n	435e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4488:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    448a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    448e:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    4492:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    4496:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    449a:	68b6      	ldr	r6, [r6, #8]
    449c:	6831      	ldr	r1, [r6, #0]
    449e:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    44a2:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    44a4:	e7b5      	b.n	4412 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    44a6:	1c63      	adds	r3, r4, #1
    44a8:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    44aa:	4a0f      	ldr	r2, [pc, #60]	; (44e8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    44ac:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    44ae:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    44b0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    44b4:	f043 0302 	orr.w	r3, r3, #2
    44b8:	7013      	strb	r3, [r2, #0]
};
    44ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    44be:	2301      	movs	r3, #1
    44c0:	4d07      	ldr	r5, [pc, #28]	; (44e0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    44c2:	e7f2      	b.n	44aa <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    44c4:	4bb71b00 	.word	0x4bb71b00
    44c8:	60ad78ec 	.word	0x60ad78ec
    44cc:	20000778 	.word	0x20000778
    44d0:	20001800 	.word	0x20001800
    44d4:	e000e400 	.word	0xe000e400
    44d8:	38003840 	.word	0x38003840
    44dc:	20002b57 	.word	0x20002b57
    44e0:	20001d18 	.word	0x20001d18
    44e4:	003c0010 	.word	0x003c0010
    44e8:	20002b65 	.word	0x20002b65
    44ec:	0001f038 	.word	0x0001f038

000044f0 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    44f0:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    44f4:	b9b8      	cbnz	r0, 4526 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    44f6:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    44fa:	b94b      	cbnz	r3, 4510 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    44fc:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    4500:	b93a      	cbnz	r2, 4512 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    4502:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    4506:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    450a:	b150      	cbz	r0, 4522 <nvic_execution_priority()+0x32>
    450c:	4298      	cmp	r0, r3
    450e:	d208      	bcs.n	4522 <nvic_execution_priority()+0x32>
}
    4510:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    4512:	2a0f      	cmp	r2, #15
    4514:	d9f7      	bls.n	4506 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    4516:	4b05      	ldr	r3, [pc, #20]	; (452c <nvic_execution_priority()+0x3c>)
    4518:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    451a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    451e:	2800      	cmp	r0, #0
    4520:	d1f4      	bne.n	450c <nvic_execution_priority()+0x1c>
    4522:	4618      	mov	r0, r3
	return priority;
    4524:	4770      	bx	lr
	if (faultmask) return -1;
    4526:	f04f 30ff 	mov.w	r0, #4294967295
    452a:	e7f1      	b.n	4510 <nvic_execution_priority()+0x20>
    452c:	e000e3f0 	.word	0xe000e3f0

00004530 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    4530:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    4532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4536:	4604      	mov	r4, r0
    4538:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    453a:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    453c:	b113      	cbz	r3, 4544 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    453e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    4540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    4544:	7ea3      	ldrb	r3, [r4, #26]
    4546:	b12b      	cbz	r3, 4554 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    4548:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    454a:	69b3      	ldr	r3, [r6, #24]
    454c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    4550:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    4552:	b662      	cpsie	i
	head = tx_buffer_head_;
    4554:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    4558:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    455a:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    455c:	3501      	adds	r5, #1
    455e:	42ab      	cmp	r3, r5
    4560:	d84c      	bhi.n	45fc <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    4562:	f04f 0800 	mov.w	r8, #0
    4566:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    4568:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    456c:	b29b      	uxth	r3, r3
    456e:	429d      	cmp	r5, r3
    4570:	d019      	beq.n	45a6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    4572:	e028      	b.n	45c6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    4574:	6973      	ldr	r3, [r6, #20]
    4576:	021b      	lsls	r3, r3, #8
    4578:	d510      	bpl.n	459c <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    457a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    457e:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    4580:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    4582:	3301      	adds	r3, #1
    4584:	429a      	cmp	r2, r3
    4586:	d936      	bls.n	45f6 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    4588:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    458a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    458c:	4299      	cmp	r1, r3
    458e:	d92d      	bls.n	45ec <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    4590:	69e1      	ldr	r1, [r4, #28]
    4592:	5ccb      	ldrb	r3, [r1, r3]
    4594:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    4596:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    4598:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    459c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    45a0:	b29b      	uxth	r3, r3
    45a2:	42ab      	cmp	r3, r5
    45a4:	d10f      	bne.n	45c6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    45a6:	f7ff ffa3 	bl	44f0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    45aa:	6963      	ldr	r3, [r4, #20]
    45ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    45b0:	4283      	cmp	r3, r0
    45b2:	dadf      	bge.n	4574 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    45b4:	28ff      	cmp	r0, #255	; 0xff
    45b6:	ddf1      	ble.n	459c <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    45b8:	f7ff fcf0 	bl	3f9c <yield>
	while (tx_buffer_tail_ == head) {
    45bc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    45c0:	b29b      	uxth	r3, r3
    45c2:	42ab      	cmp	r3, r5
    45c4:	d0ef      	beq.n	45a6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    45c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    45c8:	42ab      	cmp	r3, r5
    45ca:	d91a      	bls.n	4602 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    45cc:	b2ff      	uxtb	r7, r7
    45ce:	69e3      	ldr	r3, [r4, #28]
    45d0:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    45d2:	b672      	cpsid	i
	transmitting_ = 1;
    45d4:	2001      	movs	r0, #1
    45d6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    45da:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    45de:	69b3      	ldr	r3, [r6, #24]
    45e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    45e4:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    45e6:	b662      	cpsie	i
}
    45e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    45ec:	1a5b      	subs	r3, r3, r1
    45ee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    45f0:	5ccb      	ldrb	r3, [r1, r3]
    45f2:	b2db      	uxtb	r3, r3
    45f4:	e7cf      	b.n	4596 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    45f6:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    45f8:	4613      	mov	r3, r2
    45fa:	e7c6      	b.n	458a <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    45fc:	fa1f f885 	uxth.w	r8, r5
    4600:	e7b2      	b.n	4568 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    4602:	1aed      	subs	r5, r5, r3
    4604:	b2ff      	uxtb	r7, r7
    4606:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4608:	555f      	strb	r7, [r3, r5]
    460a:	e7e2      	b.n	45d2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

0000460c <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    460c:	f7ff bf90 	b.w	4530 <HardwareSerialIMXRT::write9bit(unsigned long)>

00004610 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4610:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    4612:	6953      	ldr	r3, [r2, #20]
    4614:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    4618:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    461a:	d043      	beq.n	46a4 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    461c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    461e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    4622:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    4626:	d03a      	beq.n	469e <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    4628:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    462c:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    4630:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    4632:	b2b6      	uxth	r6, r6
    4634:	e007      	b.n	4646 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    4636:	6a01      	ldr	r1, [r0, #32]
    4638:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    463c:	f10e 33ff 	add.w	r3, lr, #4294967295
    4640:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    4644:	d01d      	beq.n	4682 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4646:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    4648:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    464a:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    464c:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4650:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    4654:	429c      	cmp	r4, r3
    4656:	bf98      	it	ls
    4658:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    465a:	fa1f fc8c 	uxth.w	ip, ip
    465e:	459c      	cmp	ip, r3
    4660:	d0ec      	beq.n	463c <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    4662:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    4664:	fa5f fc81 	uxtb.w	ip, r1
    4668:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    466a:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    466c:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    4670:	d8e1      	bhi.n	4636 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    4672:	6a43      	ldr	r3, [r0, #36]	; 0x24
    4674:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    4678:	f10e 33ff 	add.w	r3, lr, #4294967295
    467c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    4680:	d1e1      	bne.n	4646 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    4682:	b2ab      	uxth	r3, r5
    4684:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    4688:	6d83      	ldr	r3, [r0, #88]	; 0x58
    468a:	b143      	cbz	r3, 469e <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    468c:	42b5      	cmp	r5, r6
    468e:	d354      	bcc.n	473a <HardwareSerialIMXRT::IRQHandler()+0x12a>
    4690:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    4692:	6c01      	ldr	r1, [r0, #64]	; 0x40
    4694:	42a9      	cmp	r1, r5
    4696:	d802      	bhi.n	469e <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    4698:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    469a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    469e:	6953      	ldr	r3, [r2, #20]
    46a0:	02d9      	lsls	r1, r3, #11
    46a2:	d445      	bmi.n	4730 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    46a4:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    46a6:	0233      	lsls	r3, r6, #8
    46a8:	d528      	bpl.n	46fc <HardwareSerialIMXRT::IRQHandler()+0xec>
    46aa:	6953      	ldr	r3, [r2, #20]
    46ac:	021d      	lsls	r5, r3, #8
    46ae:	d525      	bpl.n	46fc <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    46b0:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    46b4:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    46b8:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    46ba:	b29b      	uxth	r3, r3
    46bc:	e006      	b.n	46cc <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    46be:	69c1      	ldr	r1, [r0, #28]
    46c0:	5cc9      	ldrb	r1, [r1, r3]
    46c2:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    46c4:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    46c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    46c8:	054c      	lsls	r4, r1, #21
    46ca:	d412      	bmi.n	46f2 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    46cc:	42ab      	cmp	r3, r5
    46ce:	d038      	beq.n	4742 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    46d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
    46d2:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    46d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    46d6:	429c      	cmp	r4, r3
    46d8:	bf98      	it	ls
    46da:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    46dc:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    46de:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    46e2:	d8ec      	bhi.n	46be <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    46e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    46e6:	5d09      	ldrb	r1, [r1, r4]
    46e8:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    46ea:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    46ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    46ee:	054c      	lsls	r4, r1, #21
    46f0:	d5ec      	bpl.n	46cc <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    46f2:	b299      	uxth	r1, r3
		if (head == tail) {
    46f4:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    46f6:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    46fa:	d025      	beq.n	4748 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    46fc:	0271      	lsls	r1, r6, #9
    46fe:	d516      	bpl.n	472e <HardwareSerialIMXRT::IRQHandler()+0x11e>
    4700:	6953      	ldr	r3, [r2, #20]
    4702:	025b      	lsls	r3, r3, #9
    4704:	d513      	bpl.n	472e <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    4706:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    4708:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    470a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    470e:	b113      	cbz	r3, 4716 <HardwareSerialIMXRT::IRQHandler()+0x106>
    4710:	6d41      	ldr	r1, [r0, #84]	; 0x54
    4712:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    4716:	7e83      	ldrb	r3, [r0, #26]
    4718:	b12b      	cbz	r3, 4726 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    471a:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    471c:	6993      	ldr	r3, [r2, #24]
    471e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    4722:	6193      	str	r3, [r2, #24]
			__enable_irq();
    4724:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    4726:	6993      	ldr	r3, [r2, #24]
    4728:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    472c:	6193      	str	r3, [r2, #24]
}
    472e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    4730:	6953      	ldr	r3, [r2, #20]
    4732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    4736:	6153      	str	r3, [r2, #20]
    4738:	e7b4      	b.n	46a4 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    473a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    473c:	1b89      	subs	r1, r1, r6
    473e:	440d      	add	r5, r1
    4740:	e7a7      	b.n	4692 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    4742:	b29b      	uxth	r3, r3
    4744:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    4748:	6993      	ldr	r3, [r2, #24]
    474a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    474e:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    4750:	6993      	ldr	r3, [r2, #24]
    4752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    4756:	6193      	str	r3, [r2, #24]
    4758:	e7d0      	b.n	46fc <HardwareSerialIMXRT::IRQHandler()+0xec>
    475a:	bf00      	nop

0000475c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    475c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    475e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4760:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    4764:	4619      	mov	r1, r3
{
    4766:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4768:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    476c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4770:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4774:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    4778:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    477c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    477e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4782:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4786:	b29b      	uxth	r3, r3
    4788:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    478c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4790:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    4794:	3101      	adds	r1, #1
    4796:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    479a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    479c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    479e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    47a2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    47a4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    47a6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    47a8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    47aa:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    47ae:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    47b0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    47b2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    47b4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    47b6:	d1eb      	bne.n	4790 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    47b8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    47bc:	b29b      	uxth	r3, r3
    47be:	f043 030f 	orr.w	r3, r3, #15
    47c2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    47c6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    47ca:	b29b      	uxth	r3, r3
    47cc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    47d0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    47d4:	bd10      	pop	{r4, pc}
    47d6:	bf00      	nop

000047d8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    47d8:	4b37      	ldr	r3, [pc, #220]	; (48b8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    47da:	4a38      	ldr	r2, [pc, #224]	; (48bc <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    47dc:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    47de:	4838      	ldr	r0, [pc, #224]	; (48c0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    47e0:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    47e4:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    47e6:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    47e8:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    47ec:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    47f0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    47f4:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    47f8:	430a      	orrs	r2, r1
    47fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    47fe:	f7ff ffad 	bl	475c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    4802:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4806:	f7ff ffa9 	bl	475c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    480a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    480e:	f7ff ffa5 	bl	475c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    4812:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4816:	f7ff ffa1 	bl	475c <flexpwm_init>
	for (i=0; i < 4; i++) {
    481a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    481c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4820:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    4824:	4611      	mov	r1, r2
    4826:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    482a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    482e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4830:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    4832:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    4834:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4836:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    483a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    483c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    483e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    4842:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4844:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    4846:	d1ee      	bne.n	4826 <pwm_init+0x4e>
    4848:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    484a:	481e      	ldr	r0, [pc, #120]	; (48c4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    484c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4850:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    4854:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4856:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    485a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    485e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4862:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4866:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4868:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    486a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    486c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    486e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4872:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4874:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4876:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    487a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    487c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    487e:	d1ee      	bne.n	485e <pwm_init+0x86>
    4880:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4882:	4811      	ldr	r0, [pc, #68]	; (48c8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4884:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4886:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    488a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    488c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4890:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    4894:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4898:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    489c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    489e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    48a0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    48a2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48a4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48a6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48a8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    48aa:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    48ae:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48b0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    48b4:	d1ee      	bne.n	4894 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    48b6:	bd70      	pop	{r4, r5, r6, pc}
    48b8:	400fc000 	.word	0x400fc000
    48bc:	fc030000 	.word	0xfc030000
    48c0:	403dc000 	.word	0x403dc000
    48c4:	401e0000 	.word	0x401e0000
    48c8:	401e4000 	.word	0x401e4000

000048cc <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    48cc:	4a07      	ldr	r2, [pc, #28]	; (48ec <rtc_get+0x20>)
    48ce:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    48d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    48d2:	4619      	mov	r1, r3
    48d4:	4684      	mov	ip, r0
    48d6:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    48d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    48da:	4299      	cmp	r1, r3
    48dc:	d1f9      	bne.n	48d2 <rtc_get+0x6>
    48de:	4584      	cmp	ip, r0
    48e0:	d1f7      	bne.n	48d2 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    48e2:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    48e4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    48e8:	4770      	bx	lr
    48ea:	bf00      	nop
    48ec:	400d4000 	.word	0x400d4000

000048f0 <sm_align_pool>:
{
    48f0:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    48f2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    48f6:	b15b      	cbz	r3, 4910 <sm_align_pool+0x20>
    48f8:	b1ba      	cbz	r2, 492a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    48fa:	4b0f      	ldr	r3, [pc, #60]	; (4938 <sm_align_pool+0x48>)
    48fc:	fba3 1302 	umull	r1, r3, r3, r2
    4900:	08db      	lsrs	r3, r3, #3
    4902:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4906:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    490a:	d10a      	bne.n	4922 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    490c:	2001      	movs	r0, #1
}
    490e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    4910:	4b09      	ldr	r3, [pc, #36]	; (4938 <sm_align_pool+0x48>)
    4912:	fba3 1302 	umull	r1, r3, r3, r2
    4916:	08db      	lsrs	r3, r3, #3
    4918:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    491c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    4920:	d001      	beq.n	4926 <sm_align_pool+0x36>
    4922:	1ad2      	subs	r2, r2, r3
    4924:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    4926:	2af0      	cmp	r2, #240	; 0xf0
    4928:	d8f0      	bhi.n	490c <sm_align_pool+0x1c>
		errno = ENOSPC;
    492a:	f001 fb47 	bl	5fbc <__errno>
    492e:	221c      	movs	r2, #28
    4930:	4603      	mov	r3, r0
    4932:	2000      	movs	r0, #0
    4934:	601a      	str	r2, [r3, #0]
}
    4936:	bd08      	pop	{r3, pc}
    4938:	aaaaaaab 	.word	0xaaaaaaab

0000493c <sm_set_pool>:
{
    493c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    493e:	4604      	mov	r4, r0
    4940:	b338      	cbz	r0, 4992 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    4942:	b119      	cbz	r1, 494c <sm_set_pool+0x10>
    4944:	fab2 f682 	clz	r6, r2
    4948:	0976      	lsrs	r6, r6, #5
    494a:	b9a2      	cbnz	r2, 4976 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    494c:	6820      	ldr	r0, [r4, #0]
    494e:	b300      	cbz	r0, 4992 <sm_set_pool+0x56>
    4950:	6862      	ldr	r2, [r4, #4]
    4952:	b1f2      	cbz	r2, 4992 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    4954:	4b18      	ldr	r3, [pc, #96]	; (49b8 <sm_set_pool+0x7c>)
    4956:	4919      	ldr	r1, [pc, #100]	; (49bc <sm_set_pool+0x80>)
    4958:	fb02 f303 	mul.w	r3, r2, r3
    495c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    4960:	d317      	bcc.n	4992 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    4962:	68a3      	ldr	r3, [r4, #8]
    4964:	b9e3      	cbnz	r3, 49a0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    4966:	2200      	movs	r2, #0
			return 1;
    4968:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    496a:	6022      	str	r2, [r4, #0]
    496c:	6062      	str	r2, [r4, #4]
    496e:	60a2      	str	r2, [r4, #8]
    4970:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    4972:	4618      	mov	r0, r3
    4974:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    4976:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    4978:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    497a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    497e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    4980:	f7ff ffb6 	bl	48f0 <sm_align_pool>
    4984:	4603      	mov	r3, r0
    4986:	2800      	cmp	r0, #0
    4988:	d0f3      	beq.n	4972 <sm_set_pool+0x36>
	if (do_zero) {
    498a:	b96d      	cbnz	r5, 49a8 <sm_set_pool+0x6c>
	return 1;
    498c:	2301      	movs	r3, #1
}
    498e:	4618      	mov	r0, r3
    4990:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    4992:	f001 fb13 	bl	5fbc <__errno>
    4996:	2216      	movs	r2, #22
		return 0;
    4998:	2300      	movs	r3, #0
		errno = EINVAL;
    499a:	6002      	str	r2, [r0, #0]
}
    499c:	4618      	mov	r0, r3
    499e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    49a0:	2100      	movs	r1, #0
    49a2:	f000 ffa1 	bl	58e8 <memset>
    49a6:	e7de      	b.n	4966 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    49a8:	6862      	ldr	r2, [r4, #4]
    49aa:	4631      	mov	r1, r6
    49ac:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    49ae:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    49b0:	f000 ff9a 	bl	58e8 <memset>
	return 1;
    49b4:	2301      	movs	r3, #1
    49b6:	e7dc      	b.n	4972 <sm_set_pool+0x36>
    49b8:	aaaaaaab 	.word	0xaaaaaaab
    49bc:	15555555 	.word	0x15555555

000049c0 <__aeabi_atexit>:
    49c0:	4603      	mov	r3, r0
    49c2:	4608      	mov	r0, r1
    49c4:	4619      	mov	r1, r3
    49c6:	f000 bddd 	b.w	5584 <__cxa_atexit>
    49ca:	bf00      	nop

000049cc <atol>:
    49cc:	220a      	movs	r2, #10
    49ce:	2100      	movs	r1, #0
    49d0:	f000 bd7c 	b.w	54cc <strtol>

000049d4 <itoa>:
    49d4:	1e93      	subs	r3, r2, #2
    49d6:	2b22      	cmp	r3, #34	; 0x22
    49d8:	b510      	push	{r4, lr}
    49da:	460c      	mov	r4, r1
    49dc:	d80c      	bhi.n	49f8 <itoa+0x24>
    49de:	2a0a      	cmp	r2, #10
    49e0:	d003      	beq.n	49ea <itoa+0x16>
    49e2:	f000 fd81 	bl	54e8 <__utoa>
    49e6:	4620      	mov	r0, r4
    49e8:	bd10      	pop	{r4, pc}
    49ea:	2800      	cmp	r0, #0
    49ec:	daf9      	bge.n	49e2 <itoa+0xe>
    49ee:	232d      	movs	r3, #45	; 0x2d
    49f0:	f801 3b01 	strb.w	r3, [r1], #1
    49f4:	4240      	negs	r0, r0
    49f6:	e7f4      	b.n	49e2 <itoa+0xe>
    49f8:	2300      	movs	r3, #0
    49fa:	700b      	strb	r3, [r1, #0]
    49fc:	4618      	mov	r0, r3
    49fe:	bd10      	pop	{r4, pc}

00004a00 <malloc>:
    4a00:	4b02      	ldr	r3, [pc, #8]	; (4a0c <malloc+0xc>)
    4a02:	4601      	mov	r1, r0
    4a04:	6818      	ldr	r0, [r3, #0]
    4a06:	f000 b80b 	b.w	4a20 <_malloc_r>
    4a0a:	bf00      	nop
    4a0c:	20001754 	.word	0x20001754

00004a10 <free>:
    4a10:	4b02      	ldr	r3, [pc, #8]	; (4a1c <free+0xc>)
    4a12:	4601      	mov	r1, r0
    4a14:	6818      	ldr	r0, [r3, #0]
    4a16:	f001 bdd5 	b.w	65c4 <_free_r>
    4a1a:	bf00      	nop
    4a1c:	20001754 	.word	0x20001754

00004a20 <_malloc_r>:
    4a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a24:	f101 060b 	add.w	r6, r1, #11
    4a28:	2e16      	cmp	r6, #22
    4a2a:	b083      	sub	sp, #12
    4a2c:	4604      	mov	r4, r0
    4a2e:	d824      	bhi.n	4a7a <_malloc_r+0x5a>
    4a30:	2910      	cmp	r1, #16
    4a32:	f200 80ba 	bhi.w	4baa <_malloc_r+0x18a>
    4a36:	f000 faa3 	bl	4f80 <__malloc_lock>
    4a3a:	2610      	movs	r6, #16
    4a3c:	2218      	movs	r2, #24
    4a3e:	2002      	movs	r0, #2
    4a40:	4fb5      	ldr	r7, [pc, #724]	; (4d18 <_malloc_r+0x2f8>)
    4a42:	443a      	add	r2, r7
    4a44:	f1a2 0108 	sub.w	r1, r2, #8
    4a48:	6853      	ldr	r3, [r2, #4]
    4a4a:	428b      	cmp	r3, r1
    4a4c:	f000 80ba 	beq.w	4bc4 <_malloc_r+0x1a4>
    4a50:	685a      	ldr	r2, [r3, #4]
    4a52:	68d9      	ldr	r1, [r3, #12]
    4a54:	f022 0203 	bic.w	r2, r2, #3
    4a58:	441a      	add	r2, r3
    4a5a:	689d      	ldr	r5, [r3, #8]
    4a5c:	60e9      	str	r1, [r5, #12]
    4a5e:	608d      	str	r5, [r1, #8]
    4a60:	6851      	ldr	r1, [r2, #4]
    4a62:	f041 0101 	orr.w	r1, r1, #1
    4a66:	4620      	mov	r0, r4
    4a68:	6051      	str	r1, [r2, #4]
    4a6a:	f103 0508 	add.w	r5, r3, #8
    4a6e:	f000 fa8d 	bl	4f8c <__malloc_unlock>
    4a72:	4628      	mov	r0, r5
    4a74:	b003      	add	sp, #12
    4a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a7a:	f036 0607 	bics.w	r6, r6, #7
    4a7e:	f100 8094 	bmi.w	4baa <_malloc_r+0x18a>
    4a82:	42b1      	cmp	r1, r6
    4a84:	f200 8091 	bhi.w	4baa <_malloc_r+0x18a>
    4a88:	f000 fa7a 	bl	4f80 <__malloc_lock>
    4a8c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4a90:	f0c0 819a 	bcc.w	4dc8 <_malloc_r+0x3a8>
    4a94:	0a73      	lsrs	r3, r6, #9
    4a96:	f000 808f 	beq.w	4bb8 <_malloc_r+0x198>
    4a9a:	2b04      	cmp	r3, #4
    4a9c:	f200 816f 	bhi.w	4d7e <_malloc_r+0x35e>
    4aa0:	09b3      	lsrs	r3, r6, #6
    4aa2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4aa6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    4aaa:	00c3      	lsls	r3, r0, #3
    4aac:	4f9a      	ldr	r7, [pc, #616]	; (4d18 <_malloc_r+0x2f8>)
    4aae:	443b      	add	r3, r7
    4ab0:	f1a3 0508 	sub.w	r5, r3, #8
    4ab4:	685b      	ldr	r3, [r3, #4]
    4ab6:	429d      	cmp	r5, r3
    4ab8:	d106      	bne.n	4ac8 <_malloc_r+0xa8>
    4aba:	e00c      	b.n	4ad6 <_malloc_r+0xb6>
    4abc:	2900      	cmp	r1, #0
    4abe:	f280 8127 	bge.w	4d10 <_malloc_r+0x2f0>
    4ac2:	68db      	ldr	r3, [r3, #12]
    4ac4:	429d      	cmp	r5, r3
    4ac6:	d006      	beq.n	4ad6 <_malloc_r+0xb6>
    4ac8:	685a      	ldr	r2, [r3, #4]
    4aca:	f022 0203 	bic.w	r2, r2, #3
    4ace:	1b91      	subs	r1, r2, r6
    4ad0:	290f      	cmp	r1, #15
    4ad2:	ddf3      	ble.n	4abc <_malloc_r+0x9c>
    4ad4:	4660      	mov	r0, ip
    4ad6:	693d      	ldr	r5, [r7, #16]
    4ad8:	f8df c250 	ldr.w	ip, [pc, #592]	; 4d2c <_malloc_r+0x30c>
    4adc:	4565      	cmp	r5, ip
    4ade:	d07c      	beq.n	4bda <_malloc_r+0x1ba>
    4ae0:	686a      	ldr	r2, [r5, #4]
    4ae2:	f022 0203 	bic.w	r2, r2, #3
    4ae6:	1b93      	subs	r3, r2, r6
    4ae8:	2b0f      	cmp	r3, #15
    4aea:	f300 817b 	bgt.w	4de4 <_malloc_r+0x3c4>
    4aee:	2b00      	cmp	r3, #0
    4af0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    4af4:	f280 816c 	bge.w	4dd0 <_malloc_r+0x3b0>
    4af8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4afc:	f080 811a 	bcs.w	4d34 <_malloc_r+0x314>
    4b00:	08d3      	lsrs	r3, r2, #3
    4b02:	6879      	ldr	r1, [r7, #4]
    4b04:	3301      	adds	r3, #1
    4b06:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    4b0a:	2201      	movs	r2, #1
    4b0c:	fa02 f20e 	lsl.w	r2, r2, lr
    4b10:	430a      	orrs	r2, r1
    4b12:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    4b16:	f8c5 e008 	str.w	lr, [r5, #8]
    4b1a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    4b1e:	3908      	subs	r1, #8
    4b20:	60e9      	str	r1, [r5, #12]
    4b22:	607a      	str	r2, [r7, #4]
    4b24:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4b28:	f8ce 500c 	str.w	r5, [lr, #12]
    4b2c:	1083      	asrs	r3, r0, #2
    4b2e:	2101      	movs	r1, #1
    4b30:	4099      	lsls	r1, r3
    4b32:	4291      	cmp	r1, r2
    4b34:	d857      	bhi.n	4be6 <_malloc_r+0x1c6>
    4b36:	4211      	tst	r1, r2
    4b38:	d106      	bne.n	4b48 <_malloc_r+0x128>
    4b3a:	f020 0003 	bic.w	r0, r0, #3
    4b3e:	0049      	lsls	r1, r1, #1
    4b40:	4211      	tst	r1, r2
    4b42:	f100 0004 	add.w	r0, r0, #4
    4b46:	d0fa      	beq.n	4b3e <_malloc_r+0x11e>
    4b48:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4b4c:	464d      	mov	r5, r9
    4b4e:	4686      	mov	lr, r0
    4b50:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4b54:	4545      	cmp	r5, r8
    4b56:	d108      	bne.n	4b6a <_malloc_r+0x14a>
    4b58:	e11d      	b.n	4d96 <_malloc_r+0x376>
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	f280 8124 	bge.w	4da8 <_malloc_r+0x388>
    4b60:	f8d8 800c 	ldr.w	r8, [r8, #12]
    4b64:	4545      	cmp	r5, r8
    4b66:	f000 8116 	beq.w	4d96 <_malloc_r+0x376>
    4b6a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4b6e:	f022 0203 	bic.w	r2, r2, #3
    4b72:	1b93      	subs	r3, r2, r6
    4b74:	2b0f      	cmp	r3, #15
    4b76:	ddf0      	ble.n	4b5a <_malloc_r+0x13a>
    4b78:	4620      	mov	r0, r4
    4b7a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    4b7e:	eb08 0106 	add.w	r1, r8, r6
    4b82:	f046 0601 	orr.w	r6, r6, #1
    4b86:	f8c8 6004 	str.w	r6, [r8, #4]
    4b8a:	60ec      	str	r4, [r5, #12]
    4b8c:	60a5      	str	r5, [r4, #8]
    4b8e:	f043 0401 	orr.w	r4, r3, #1
    4b92:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4b96:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4b9a:	604c      	str	r4, [r1, #4]
    4b9c:	f848 3002 	str.w	r3, [r8, r2]
    4ba0:	f000 f9f4 	bl	4f8c <__malloc_unlock>
    4ba4:	f108 0508 	add.w	r5, r8, #8
    4ba8:	e002      	b.n	4bb0 <_malloc_r+0x190>
    4baa:	230c      	movs	r3, #12
    4bac:	6023      	str	r3, [r4, #0]
    4bae:	2500      	movs	r5, #0
    4bb0:	4628      	mov	r0, r5
    4bb2:	b003      	add	sp, #12
    4bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
    4bbc:	2040      	movs	r0, #64	; 0x40
    4bbe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    4bc2:	e773      	b.n	4aac <_malloc_r+0x8c>
    4bc4:	68d3      	ldr	r3, [r2, #12]
    4bc6:	429a      	cmp	r2, r3
    4bc8:	bf08      	it	eq
    4bca:	3002      	addeq	r0, #2
    4bcc:	f47f af40 	bne.w	4a50 <_malloc_r+0x30>
    4bd0:	693d      	ldr	r5, [r7, #16]
    4bd2:	f8df c158 	ldr.w	ip, [pc, #344]	; 4d2c <_malloc_r+0x30c>
    4bd6:	4565      	cmp	r5, ip
    4bd8:	d182      	bne.n	4ae0 <_malloc_r+0xc0>
    4bda:	687a      	ldr	r2, [r7, #4]
    4bdc:	1083      	asrs	r3, r0, #2
    4bde:	2101      	movs	r1, #1
    4be0:	4099      	lsls	r1, r3
    4be2:	4291      	cmp	r1, r2
    4be4:	d9a7      	bls.n	4b36 <_malloc_r+0x116>
    4be6:	68bd      	ldr	r5, [r7, #8]
    4be8:	686b      	ldr	r3, [r5, #4]
    4bea:	f023 0903 	bic.w	r9, r3, #3
    4bee:	454e      	cmp	r6, r9
    4bf0:	d803      	bhi.n	4bfa <_malloc_r+0x1da>
    4bf2:	eba9 0306 	sub.w	r3, r9, r6
    4bf6:	2b0f      	cmp	r3, #15
    4bf8:	dc7a      	bgt.n	4cf0 <_malloc_r+0x2d0>
    4bfa:	f8df b134 	ldr.w	fp, [pc, #308]	; 4d30 <_malloc_r+0x310>
    4bfe:	4b47      	ldr	r3, [pc, #284]	; (4d1c <_malloc_r+0x2fc>)
    4c00:	f8db 2000 	ldr.w	r2, [fp]
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	3201      	adds	r2, #1
    4c08:	4433      	add	r3, r6
    4c0a:	eb05 0a09 	add.w	sl, r5, r9
    4c0e:	f000 8133 	beq.w	4e78 <_malloc_r+0x458>
    4c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4c16:	330f      	adds	r3, #15
    4c18:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    4c1c:	f028 080f 	bic.w	r8, r8, #15
    4c20:	4641      	mov	r1, r8
    4c22:	4620      	mov	r0, r4
    4c24:	f001 f9a2 	bl	5f6c <_sbrk_r>
    4c28:	1c41      	adds	r1, r0, #1
    4c2a:	4602      	mov	r2, r0
    4c2c:	f000 80f3 	beq.w	4e16 <_malloc_r+0x3f6>
    4c30:	4582      	cmp	sl, r0
    4c32:	f200 80ee 	bhi.w	4e12 <_malloc_r+0x3f2>
    4c36:	4b3a      	ldr	r3, [pc, #232]	; (4d20 <_malloc_r+0x300>)
    4c38:	6819      	ldr	r1, [r3, #0]
    4c3a:	4441      	add	r1, r8
    4c3c:	6019      	str	r1, [r3, #0]
    4c3e:	4608      	mov	r0, r1
    4c40:	f000 814e 	beq.w	4ee0 <_malloc_r+0x4c0>
    4c44:	f8db 1000 	ldr.w	r1, [fp]
    4c48:	9301      	str	r3, [sp, #4]
    4c4a:	3101      	adds	r1, #1
    4c4c:	bf1b      	ittet	ne
    4c4e:	eba2 010a 	subne.w	r1, r2, sl
    4c52:	1809      	addne	r1, r1, r0
    4c54:	f8cb 2000 	streq.w	r2, [fp]
    4c58:	6019      	strne	r1, [r3, #0]
    4c5a:	f012 0b07 	ands.w	fp, r2, #7
    4c5e:	f000 8117 	beq.w	4e90 <_malloc_r+0x470>
    4c62:	f1cb 0108 	rsb	r1, fp, #8
    4c66:	440a      	add	r2, r1
    4c68:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    4c6c:	4490      	add	r8, r2
    4c6e:	3108      	adds	r1, #8
    4c70:	eba1 0108 	sub.w	r1, r1, r8
    4c74:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4c78:	4651      	mov	r1, sl
    4c7a:	4620      	mov	r0, r4
    4c7c:	9200      	str	r2, [sp, #0]
    4c7e:	f001 f975 	bl	5f6c <_sbrk_r>
    4c82:	1c42      	adds	r2, r0, #1
    4c84:	e9dd 2300 	ldrd	r2, r3, [sp]
    4c88:	f000 814f 	beq.w	4f2a <_malloc_r+0x50a>
    4c8c:	1a80      	subs	r0, r0, r2
    4c8e:	eb00 080a 	add.w	r8, r0, sl
    4c92:	6819      	ldr	r1, [r3, #0]
    4c94:	60ba      	str	r2, [r7, #8]
    4c96:	f048 0001 	orr.w	r0, r8, #1
    4c9a:	4451      	add	r1, sl
    4c9c:	42bd      	cmp	r5, r7
    4c9e:	6050      	str	r0, [r2, #4]
    4ca0:	6019      	str	r1, [r3, #0]
    4ca2:	f000 8129 	beq.w	4ef8 <_malloc_r+0x4d8>
    4ca6:	f1b9 0f0f 	cmp.w	r9, #15
    4caa:	f240 8127 	bls.w	4efc <_malloc_r+0x4dc>
    4cae:	6868      	ldr	r0, [r5, #4]
    4cb0:	f1a9 0c0c 	sub.w	ip, r9, #12
    4cb4:	f02c 0c07 	bic.w	ip, ip, #7
    4cb8:	f000 0001 	and.w	r0, r0, #1
    4cbc:	ea40 000c 	orr.w	r0, r0, ip
    4cc0:	6068      	str	r0, [r5, #4]
    4cc2:	f04f 0e05 	mov.w	lr, #5
    4cc6:	eb05 000c 	add.w	r0, r5, ip
    4cca:	f1bc 0f0f 	cmp.w	ip, #15
    4cce:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    4cd2:	f200 8132 	bhi.w	4f3a <_malloc_r+0x51a>
    4cd6:	6850      	ldr	r0, [r2, #4]
    4cd8:	4615      	mov	r5, r2
    4cda:	4b12      	ldr	r3, [pc, #72]	; (4d24 <_malloc_r+0x304>)
    4cdc:	681a      	ldr	r2, [r3, #0]
    4cde:	428a      	cmp	r2, r1
    4ce0:	bf38      	it	cc
    4ce2:	6019      	strcc	r1, [r3, #0]
    4ce4:	4b10      	ldr	r3, [pc, #64]	; (4d28 <_malloc_r+0x308>)
    4ce6:	681a      	ldr	r2, [r3, #0]
    4ce8:	428a      	cmp	r2, r1
    4cea:	bf38      	it	cc
    4cec:	6019      	strcc	r1, [r3, #0]
    4cee:	e094      	b.n	4e1a <_malloc_r+0x3fa>
    4cf0:	19aa      	adds	r2, r5, r6
    4cf2:	f043 0301 	orr.w	r3, r3, #1
    4cf6:	f046 0601 	orr.w	r6, r6, #1
    4cfa:	606e      	str	r6, [r5, #4]
    4cfc:	4620      	mov	r0, r4
    4cfe:	60ba      	str	r2, [r7, #8]
    4d00:	6053      	str	r3, [r2, #4]
    4d02:	f000 f943 	bl	4f8c <__malloc_unlock>
    4d06:	3508      	adds	r5, #8
    4d08:	4628      	mov	r0, r5
    4d0a:	b003      	add	sp, #12
    4d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d10:	68d9      	ldr	r1, [r3, #12]
    4d12:	441a      	add	r2, r3
    4d14:	e6a1      	b.n	4a5a <_malloc_r+0x3a>
    4d16:	bf00      	nop
    4d18:	20001338 	.word	0x20001338
    4d1c:	20001f08 	.word	0x20001f08
    4d20:	20001ed8 	.word	0x20001ed8
    4d24:	20001f00 	.word	0x20001f00
    4d28:	20001f04 	.word	0x20001f04
    4d2c:	20001340 	.word	0x20001340
    4d30:	20001740 	.word	0x20001740
    4d34:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    4d38:	ea4f 2352 	mov.w	r3, r2, lsr #9
    4d3c:	d363      	bcc.n	4e06 <_malloc_r+0x3e6>
    4d3e:	2b14      	cmp	r3, #20
    4d40:	f200 80b7 	bhi.w	4eb2 <_malloc_r+0x492>
    4d44:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    4d48:	00c9      	lsls	r1, r1, #3
    4d4a:	335b      	adds	r3, #91	; 0x5b
    4d4c:	eb07 0e01 	add.w	lr, r7, r1
    4d50:	5879      	ldr	r1, [r7, r1]
    4d52:	f1ae 0e08 	sub.w	lr, lr, #8
    4d56:	458e      	cmp	lr, r1
    4d58:	f000 8091 	beq.w	4e7e <_malloc_r+0x45e>
    4d5c:	684b      	ldr	r3, [r1, #4]
    4d5e:	f023 0303 	bic.w	r3, r3, #3
    4d62:	4293      	cmp	r3, r2
    4d64:	d902      	bls.n	4d6c <_malloc_r+0x34c>
    4d66:	6889      	ldr	r1, [r1, #8]
    4d68:	458e      	cmp	lr, r1
    4d6a:	d1f7      	bne.n	4d5c <_malloc_r+0x33c>
    4d6c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    4d70:	687a      	ldr	r2, [r7, #4]
    4d72:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    4d76:	f8ce 5008 	str.w	r5, [lr, #8]
    4d7a:	60cd      	str	r5, [r1, #12]
    4d7c:	e6d6      	b.n	4b2c <_malloc_r+0x10c>
    4d7e:	2b14      	cmp	r3, #20
    4d80:	d959      	bls.n	4e36 <_malloc_r+0x416>
    4d82:	2b54      	cmp	r3, #84	; 0x54
    4d84:	f200 809d 	bhi.w	4ec2 <_malloc_r+0x4a2>
    4d88:	0b33      	lsrs	r3, r6, #12
    4d8a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4d8e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    4d92:	00c3      	lsls	r3, r0, #3
    4d94:	e68a      	b.n	4aac <_malloc_r+0x8c>
    4d96:	f10e 0e01 	add.w	lr, lr, #1
    4d9a:	f01e 0f03 	tst.w	lr, #3
    4d9e:	f105 0508 	add.w	r5, r5, #8
    4da2:	f47f aed5 	bne.w	4b50 <_malloc_r+0x130>
    4da6:	e051      	b.n	4e4c <_malloc_r+0x42c>
    4da8:	4442      	add	r2, r8
    4daa:	4645      	mov	r5, r8
    4dac:	6853      	ldr	r3, [r2, #4]
    4dae:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4db2:	f043 0301 	orr.w	r3, r3, #1
    4db6:	6053      	str	r3, [r2, #4]
    4db8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    4dbc:	4620      	mov	r0, r4
    4dbe:	60d9      	str	r1, [r3, #12]
    4dc0:	608b      	str	r3, [r1, #8]
    4dc2:	f000 f8e3 	bl	4f8c <__malloc_unlock>
    4dc6:	e6f3      	b.n	4bb0 <_malloc_r+0x190>
    4dc8:	08f0      	lsrs	r0, r6, #3
    4dca:	f106 0208 	add.w	r2, r6, #8
    4dce:	e637      	b.n	4a40 <_malloc_r+0x20>
    4dd0:	442a      	add	r2, r5
    4dd2:	4620      	mov	r0, r4
    4dd4:	6853      	ldr	r3, [r2, #4]
    4dd6:	f043 0301 	orr.w	r3, r3, #1
    4dda:	6053      	str	r3, [r2, #4]
    4ddc:	3508      	adds	r5, #8
    4dde:	f000 f8d5 	bl	4f8c <__malloc_unlock>
    4de2:	e6e5      	b.n	4bb0 <_malloc_r+0x190>
    4de4:	19a9      	adds	r1, r5, r6
    4de6:	4620      	mov	r0, r4
    4de8:	f046 0601 	orr.w	r6, r6, #1
    4dec:	f043 0401 	orr.w	r4, r3, #1
    4df0:	606e      	str	r6, [r5, #4]
    4df2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4df6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4dfa:	604c      	str	r4, [r1, #4]
    4dfc:	50ab      	str	r3, [r5, r2]
    4dfe:	f000 f8c5 	bl	4f8c <__malloc_unlock>
    4e02:	3508      	adds	r5, #8
    4e04:	e6d4      	b.n	4bb0 <_malloc_r+0x190>
    4e06:	0993      	lsrs	r3, r2, #6
    4e08:	f103 0139 	add.w	r1, r3, #57	; 0x39
    4e0c:	00c9      	lsls	r1, r1, #3
    4e0e:	3338      	adds	r3, #56	; 0x38
    4e10:	e79c      	b.n	4d4c <_malloc_r+0x32c>
    4e12:	42bd      	cmp	r5, r7
    4e14:	d05f      	beq.n	4ed6 <_malloc_r+0x4b6>
    4e16:	68bd      	ldr	r5, [r7, #8]
    4e18:	6868      	ldr	r0, [r5, #4]
    4e1a:	f020 0803 	bic.w	r8, r0, #3
    4e1e:	4546      	cmp	r6, r8
    4e20:	eba8 0306 	sub.w	r3, r8, r6
    4e24:	d802      	bhi.n	4e2c <_malloc_r+0x40c>
    4e26:	2b0f      	cmp	r3, #15
    4e28:	f73f af62 	bgt.w	4cf0 <_malloc_r+0x2d0>
    4e2c:	4620      	mov	r0, r4
    4e2e:	f000 f8ad 	bl	4f8c <__malloc_unlock>
    4e32:	2500      	movs	r5, #0
    4e34:	e6bc      	b.n	4bb0 <_malloc_r+0x190>
    4e36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4e3a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    4e3e:	00c3      	lsls	r3, r0, #3
    4e40:	e634      	b.n	4aac <_malloc_r+0x8c>
    4e42:	f859 3908 	ldr.w	r3, [r9], #-8
    4e46:	454b      	cmp	r3, r9
    4e48:	f040 8096 	bne.w	4f78 <_malloc_r+0x558>
    4e4c:	f010 0f03 	tst.w	r0, #3
    4e50:	f100 30ff 	add.w	r0, r0, #4294967295
    4e54:	d1f5      	bne.n	4e42 <_malloc_r+0x422>
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	ea23 0301 	bic.w	r3, r3, r1
    4e5c:	607b      	str	r3, [r7, #4]
    4e5e:	0049      	lsls	r1, r1, #1
    4e60:	4299      	cmp	r1, r3
    4e62:	f63f aec0 	bhi.w	4be6 <_malloc_r+0x1c6>
    4e66:	b919      	cbnz	r1, 4e70 <_malloc_r+0x450>
    4e68:	e6bd      	b.n	4be6 <_malloc_r+0x1c6>
    4e6a:	0049      	lsls	r1, r1, #1
    4e6c:	f10e 0e04 	add.w	lr, lr, #4
    4e70:	4219      	tst	r1, r3
    4e72:	d0fa      	beq.n	4e6a <_malloc_r+0x44a>
    4e74:	4670      	mov	r0, lr
    4e76:	e667      	b.n	4b48 <_malloc_r+0x128>
    4e78:	f103 0810 	add.w	r8, r3, #16
    4e7c:	e6d0      	b.n	4c20 <_malloc_r+0x200>
    4e7e:	109a      	asrs	r2, r3, #2
    4e80:	f04f 0801 	mov.w	r8, #1
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	fa08 f202 	lsl.w	r2, r8, r2
    4e8a:	431a      	orrs	r2, r3
    4e8c:	607a      	str	r2, [r7, #4]
    4e8e:	e770      	b.n	4d72 <_malloc_r+0x352>
    4e90:	eb02 0108 	add.w	r1, r2, r8
    4e94:	4249      	negs	r1, r1
    4e96:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4e9a:	4651      	mov	r1, sl
    4e9c:	4620      	mov	r0, r4
    4e9e:	9200      	str	r2, [sp, #0]
    4ea0:	f001 f864 	bl	5f6c <_sbrk_r>
    4ea4:	1c43      	adds	r3, r0, #1
    4ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
    4eaa:	f47f aeef 	bne.w	4c8c <_malloc_r+0x26c>
    4eae:	46da      	mov	sl, fp
    4eb0:	e6ef      	b.n	4c92 <_malloc_r+0x272>
    4eb2:	2b54      	cmp	r3, #84	; 0x54
    4eb4:	d825      	bhi.n	4f02 <_malloc_r+0x4e2>
    4eb6:	0b13      	lsrs	r3, r2, #12
    4eb8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    4ebc:	00c9      	lsls	r1, r1, #3
    4ebe:	336e      	adds	r3, #110	; 0x6e
    4ec0:	e744      	b.n	4d4c <_malloc_r+0x32c>
    4ec2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4ec6:	d825      	bhi.n	4f14 <_malloc_r+0x4f4>
    4ec8:	0bf3      	lsrs	r3, r6, #15
    4eca:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4ece:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    4ed2:	00c3      	lsls	r3, r0, #3
    4ed4:	e5ea      	b.n	4aac <_malloc_r+0x8c>
    4ed6:	4b29      	ldr	r3, [pc, #164]	; (4f7c <_malloc_r+0x55c>)
    4ed8:	6818      	ldr	r0, [r3, #0]
    4eda:	4440      	add	r0, r8
    4edc:	6018      	str	r0, [r3, #0]
    4ede:	e6b1      	b.n	4c44 <_malloc_r+0x224>
    4ee0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    4ee4:	f1bc 0f00 	cmp.w	ip, #0
    4ee8:	f47f aeac 	bne.w	4c44 <_malloc_r+0x224>
    4eec:	68bd      	ldr	r5, [r7, #8]
    4eee:	44c8      	add	r8, r9
    4ef0:	f048 0001 	orr.w	r0, r8, #1
    4ef4:	6068      	str	r0, [r5, #4]
    4ef6:	e6f0      	b.n	4cda <_malloc_r+0x2ba>
    4ef8:	4615      	mov	r5, r2
    4efa:	e6ee      	b.n	4cda <_malloc_r+0x2ba>
    4efc:	2301      	movs	r3, #1
    4efe:	6053      	str	r3, [r2, #4]
    4f00:	e794      	b.n	4e2c <_malloc_r+0x40c>
    4f02:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4f06:	d823      	bhi.n	4f50 <_malloc_r+0x530>
    4f08:	0bd3      	lsrs	r3, r2, #15
    4f0a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    4f0e:	00c9      	lsls	r1, r1, #3
    4f10:	3377      	adds	r3, #119	; 0x77
    4f12:	e71b      	b.n	4d4c <_malloc_r+0x32c>
    4f14:	f240 5254 	movw	r2, #1364	; 0x554
    4f18:	4293      	cmp	r3, r2
    4f1a:	d823      	bhi.n	4f64 <_malloc_r+0x544>
    4f1c:	0cb3      	lsrs	r3, r6, #18
    4f1e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    4f22:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    4f26:	00c3      	lsls	r3, r0, #3
    4f28:	e5c0      	b.n	4aac <_malloc_r+0x8c>
    4f2a:	f1ab 0b08 	sub.w	fp, fp, #8
    4f2e:	44d8      	add	r8, fp
    4f30:	eba8 0802 	sub.w	r8, r8, r2
    4f34:	f04f 0a00 	mov.w	sl, #0
    4f38:	e6ab      	b.n	4c92 <_malloc_r+0x272>
    4f3a:	f105 0108 	add.w	r1, r5, #8
    4f3e:	4620      	mov	r0, r4
    4f40:	9300      	str	r3, [sp, #0]
    4f42:	f001 fb3f 	bl	65c4 <_free_r>
    4f46:	68bd      	ldr	r5, [r7, #8]
    4f48:	9b00      	ldr	r3, [sp, #0]
    4f4a:	6868      	ldr	r0, [r5, #4]
    4f4c:	6819      	ldr	r1, [r3, #0]
    4f4e:	e6c4      	b.n	4cda <_malloc_r+0x2ba>
    4f50:	f240 5154 	movw	r1, #1364	; 0x554
    4f54:	428b      	cmp	r3, r1
    4f56:	d80b      	bhi.n	4f70 <_malloc_r+0x550>
    4f58:	0c93      	lsrs	r3, r2, #18
    4f5a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    4f5e:	00c9      	lsls	r1, r1, #3
    4f60:	337c      	adds	r3, #124	; 0x7c
    4f62:	e6f3      	b.n	4d4c <_malloc_r+0x32c>
    4f64:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    4f68:	207f      	movs	r0, #127	; 0x7f
    4f6a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    4f6e:	e59d      	b.n	4aac <_malloc_r+0x8c>
    4f70:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    4f74:	237e      	movs	r3, #126	; 0x7e
    4f76:	e6e9      	b.n	4d4c <_malloc_r+0x32c>
    4f78:	687b      	ldr	r3, [r7, #4]
    4f7a:	e770      	b.n	4e5e <_malloc_r+0x43e>
    4f7c:	20001ed8 	.word	0x20001ed8

00004f80 <__malloc_lock>:
    4f80:	4801      	ldr	r0, [pc, #4]	; (4f88 <__malloc_lock+0x8>)
    4f82:	f001 b849 	b.w	6018 <__retarget_lock_acquire_recursive>
    4f86:	bf00      	nop
    4f88:	20001ed0 	.word	0x20001ed0

00004f8c <__malloc_unlock>:
    4f8c:	4801      	ldr	r0, [pc, #4]	; (4f94 <__malloc_unlock+0x8>)
    4f8e:	f001 b845 	b.w	601c <__retarget_lock_release_recursive>
    4f92:	bf00      	nop
    4f94:	20001ed0 	.word	0x20001ed0

00004f98 <realloc>:
    4f98:	b410      	push	{r4}
    4f9a:	4c04      	ldr	r4, [pc, #16]	; (4fac <realloc+0x14>)
    4f9c:	4603      	mov	r3, r0
    4f9e:	460a      	mov	r2, r1
    4fa0:	6820      	ldr	r0, [r4, #0]
    4fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
    4fa6:	4619      	mov	r1, r3
    4fa8:	f000 b802 	b.w	4fb0 <_realloc_r>
    4fac:	20001754 	.word	0x20001754

00004fb0 <_realloc_r>:
    4fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fb4:	4617      	mov	r7, r2
    4fb6:	2900      	cmp	r1, #0
    4fb8:	f000 8098 	beq.w	50ec <_realloc_r+0x13c>
    4fbc:	460c      	mov	r4, r1
    4fbe:	f107 050b 	add.w	r5, r7, #11
    4fc2:	4680      	mov	r8, r0
    4fc4:	f7ff ffdc 	bl	4f80 <__malloc_lock>
    4fc8:	2d16      	cmp	r5, #22
    4fca:	f854 1c04 	ldr.w	r1, [r4, #-4]
    4fce:	d85b      	bhi.n	5088 <_realloc_r+0xd8>
    4fd0:	2510      	movs	r5, #16
    4fd2:	462a      	mov	r2, r5
    4fd4:	42af      	cmp	r7, r5
    4fd6:	d85c      	bhi.n	5092 <_realloc_r+0xe2>
    4fd8:	f021 0603 	bic.w	r6, r1, #3
    4fdc:	4296      	cmp	r6, r2
    4fde:	f1a4 0908 	sub.w	r9, r4, #8
    4fe2:	da62      	bge.n	50aa <_realloc_r+0xfa>
    4fe4:	4bbc      	ldr	r3, [pc, #752]	; (52d8 <_realloc_r+0x328>)
    4fe6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    4fea:	eb09 0006 	add.w	r0, r9, r6
    4fee:	4584      	cmp	ip, r0
    4ff0:	f000 8097 	beq.w	5122 <_realloc_r+0x172>
    4ff4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4ff8:	f02c 0301 	bic.w	r3, ip, #1
    4ffc:	4403      	add	r3, r0
    4ffe:	685b      	ldr	r3, [r3, #4]
    5000:	07db      	lsls	r3, r3, #31
    5002:	d468      	bmi.n	50d6 <_realloc_r+0x126>
    5004:	f02c 0c03 	bic.w	ip, ip, #3
    5008:	eb06 030c 	add.w	r3, r6, ip
    500c:	4293      	cmp	r3, r2
    500e:	da47      	bge.n	50a0 <_realloc_r+0xf0>
    5010:	07cb      	lsls	r3, r1, #31
    5012:	d410      	bmi.n	5036 <_realloc_r+0x86>
    5014:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5018:	eba9 0a03 	sub.w	sl, r9, r3
    501c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5020:	f023 0103 	bic.w	r1, r3, #3
    5024:	448c      	add	ip, r1
    5026:	44b4      	add	ip, r6
    5028:	4594      	cmp	ip, r2
    502a:	f280 8111 	bge.w	5250 <_realloc_r+0x2a0>
    502e:	1873      	adds	r3, r6, r1
    5030:	4293      	cmp	r3, r2
    5032:	f280 80e8 	bge.w	5206 <_realloc_r+0x256>
    5036:	4639      	mov	r1, r7
    5038:	4640      	mov	r0, r8
    503a:	f7ff fcf1 	bl	4a20 <_malloc_r>
    503e:	4607      	mov	r7, r0
    5040:	b1e0      	cbz	r0, 507c <_realloc_r+0xcc>
    5042:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5046:	f023 0301 	bic.w	r3, r3, #1
    504a:	444b      	add	r3, r9
    504c:	f1a0 0208 	sub.w	r2, r0, #8
    5050:	4293      	cmp	r3, r2
    5052:	f000 80d2 	beq.w	51fa <_realloc_r+0x24a>
    5056:	1f32      	subs	r2, r6, #4
    5058:	2a24      	cmp	r2, #36	; 0x24
    505a:	f200 80f5 	bhi.w	5248 <_realloc_r+0x298>
    505e:	2a13      	cmp	r2, #19
    5060:	f200 80ac 	bhi.w	51bc <_realloc_r+0x20c>
    5064:	4603      	mov	r3, r0
    5066:	4622      	mov	r2, r4
    5068:	6811      	ldr	r1, [r2, #0]
    506a:	6019      	str	r1, [r3, #0]
    506c:	6851      	ldr	r1, [r2, #4]
    506e:	6059      	str	r1, [r3, #4]
    5070:	6892      	ldr	r2, [r2, #8]
    5072:	609a      	str	r2, [r3, #8]
    5074:	4621      	mov	r1, r4
    5076:	4640      	mov	r0, r8
    5078:	f001 faa4 	bl	65c4 <_free_r>
    507c:	4640      	mov	r0, r8
    507e:	f7ff ff85 	bl	4f8c <__malloc_unlock>
    5082:	4638      	mov	r0, r7
    5084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5088:	f025 0507 	bic.w	r5, r5, #7
    508c:	2d00      	cmp	r5, #0
    508e:	462a      	mov	r2, r5
    5090:	daa0      	bge.n	4fd4 <_realloc_r+0x24>
    5092:	230c      	movs	r3, #12
    5094:	f8c8 3000 	str.w	r3, [r8]
    5098:	2700      	movs	r7, #0
    509a:	4638      	mov	r0, r7
    509c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50a0:	461e      	mov	r6, r3
    50a2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    50a6:	60d3      	str	r3, [r2, #12]
    50a8:	609a      	str	r2, [r3, #8]
    50aa:	1b73      	subs	r3, r6, r5
    50ac:	2b0f      	cmp	r3, #15
    50ae:	d822      	bhi.n	50f6 <_realloc_r+0x146>
    50b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    50b4:	f003 0301 	and.w	r3, r3, #1
    50b8:	4333      	orrs	r3, r6
    50ba:	444e      	add	r6, r9
    50bc:	f8c9 3004 	str.w	r3, [r9, #4]
    50c0:	6873      	ldr	r3, [r6, #4]
    50c2:	f043 0301 	orr.w	r3, r3, #1
    50c6:	6073      	str	r3, [r6, #4]
    50c8:	4640      	mov	r0, r8
    50ca:	4627      	mov	r7, r4
    50cc:	f7ff ff5e 	bl	4f8c <__malloc_unlock>
    50d0:	4638      	mov	r0, r7
    50d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50d6:	07c9      	lsls	r1, r1, #31
    50d8:	d4ad      	bmi.n	5036 <_realloc_r+0x86>
    50da:	f854 3c08 	ldr.w	r3, [r4, #-8]
    50de:	eba9 0a03 	sub.w	sl, r9, r3
    50e2:	f8da 1004 	ldr.w	r1, [sl, #4]
    50e6:	f021 0103 	bic.w	r1, r1, #3
    50ea:	e7a0      	b.n	502e <_realloc_r+0x7e>
    50ec:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50f0:	4611      	mov	r1, r2
    50f2:	f7ff bc95 	b.w	4a20 <_malloc_r>
    50f6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    50fa:	eb09 0105 	add.w	r1, r9, r5
    50fe:	f002 0201 	and.w	r2, r2, #1
    5102:	444e      	add	r6, r9
    5104:	f043 0301 	orr.w	r3, r3, #1
    5108:	432a      	orrs	r2, r5
    510a:	f8c9 2004 	str.w	r2, [r9, #4]
    510e:	604b      	str	r3, [r1, #4]
    5110:	6873      	ldr	r3, [r6, #4]
    5112:	f043 0301 	orr.w	r3, r3, #1
    5116:	3108      	adds	r1, #8
    5118:	6073      	str	r3, [r6, #4]
    511a:	4640      	mov	r0, r8
    511c:	f001 fa52 	bl	65c4 <_free_r>
    5120:	e7d2      	b.n	50c8 <_realloc_r+0x118>
    5122:	f8dc 0004 	ldr.w	r0, [ip, #4]
    5126:	f020 0b03 	bic.w	fp, r0, #3
    512a:	eb06 0c0b 	add.w	ip, r6, fp
    512e:	f105 0010 	add.w	r0, r5, #16
    5132:	4584      	cmp	ip, r0
    5134:	da4d      	bge.n	51d2 <_realloc_r+0x222>
    5136:	07c9      	lsls	r1, r1, #31
    5138:	f53f af7d 	bmi.w	5036 <_realloc_r+0x86>
    513c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5140:	eba9 0a01 	sub.w	sl, r9, r1
    5144:	f8da 1004 	ldr.w	r1, [sl, #4]
    5148:	f021 0103 	bic.w	r1, r1, #3
    514c:	448b      	add	fp, r1
    514e:	44b3      	add	fp, r6
    5150:	4558      	cmp	r0, fp
    5152:	f73f af6c 	bgt.w	502e <_realloc_r+0x7e>
    5156:	4657      	mov	r7, sl
    5158:	f8da 100c 	ldr.w	r1, [sl, #12]
    515c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5160:	1f32      	subs	r2, r6, #4
    5162:	2a24      	cmp	r2, #36	; 0x24
    5164:	60c1      	str	r1, [r0, #12]
    5166:	6088      	str	r0, [r1, #8]
    5168:	f200 80db 	bhi.w	5322 <_realloc_r+0x372>
    516c:	2a13      	cmp	r2, #19
    516e:	f240 80d6 	bls.w	531e <_realloc_r+0x36e>
    5172:	6821      	ldr	r1, [r4, #0]
    5174:	f8ca 1008 	str.w	r1, [sl, #8]
    5178:	6861      	ldr	r1, [r4, #4]
    517a:	f8ca 100c 	str.w	r1, [sl, #12]
    517e:	2a1b      	cmp	r2, #27
    5180:	f200 80df 	bhi.w	5342 <_realloc_r+0x392>
    5184:	3408      	adds	r4, #8
    5186:	f10a 0210 	add.w	r2, sl, #16
    518a:	6821      	ldr	r1, [r4, #0]
    518c:	6011      	str	r1, [r2, #0]
    518e:	6861      	ldr	r1, [r4, #4]
    5190:	6051      	str	r1, [r2, #4]
    5192:	68a1      	ldr	r1, [r4, #8]
    5194:	6091      	str	r1, [r2, #8]
    5196:	eb0a 0105 	add.w	r1, sl, r5
    519a:	ebab 0205 	sub.w	r2, fp, r5
    519e:	f042 0201 	orr.w	r2, r2, #1
    51a2:	6099      	str	r1, [r3, #8]
    51a4:	604a      	str	r2, [r1, #4]
    51a6:	f8da 3004 	ldr.w	r3, [sl, #4]
    51aa:	f003 0301 	and.w	r3, r3, #1
    51ae:	432b      	orrs	r3, r5
    51b0:	4640      	mov	r0, r8
    51b2:	f8ca 3004 	str.w	r3, [sl, #4]
    51b6:	f7ff fee9 	bl	4f8c <__malloc_unlock>
    51ba:	e76e      	b.n	509a <_realloc_r+0xea>
    51bc:	6823      	ldr	r3, [r4, #0]
    51be:	6003      	str	r3, [r0, #0]
    51c0:	6863      	ldr	r3, [r4, #4]
    51c2:	6043      	str	r3, [r0, #4]
    51c4:	2a1b      	cmp	r2, #27
    51c6:	d868      	bhi.n	529a <_realloc_r+0x2ea>
    51c8:	f104 0208 	add.w	r2, r4, #8
    51cc:	f100 0308 	add.w	r3, r0, #8
    51d0:	e74a      	b.n	5068 <_realloc_r+0xb8>
    51d2:	eb09 0205 	add.w	r2, r9, r5
    51d6:	609a      	str	r2, [r3, #8]
    51d8:	ebac 0305 	sub.w	r3, ip, r5
    51dc:	f043 0301 	orr.w	r3, r3, #1
    51e0:	6053      	str	r3, [r2, #4]
    51e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    51e6:	f003 0301 	and.w	r3, r3, #1
    51ea:	432b      	orrs	r3, r5
    51ec:	4640      	mov	r0, r8
    51ee:	f844 3c04 	str.w	r3, [r4, #-4]
    51f2:	f7ff fecb 	bl	4f8c <__malloc_unlock>
    51f6:	4627      	mov	r7, r4
    51f8:	e74f      	b.n	509a <_realloc_r+0xea>
    51fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
    51fe:	f023 0303 	bic.w	r3, r3, #3
    5202:	441e      	add	r6, r3
    5204:	e751      	b.n	50aa <_realloc_r+0xfa>
    5206:	4657      	mov	r7, sl
    5208:	f8da 100c 	ldr.w	r1, [sl, #12]
    520c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5210:	1f32      	subs	r2, r6, #4
    5212:	2a24      	cmp	r2, #36	; 0x24
    5214:	60c1      	str	r1, [r0, #12]
    5216:	6088      	str	r0, [r1, #8]
    5218:	d84c      	bhi.n	52b4 <_realloc_r+0x304>
    521a:	2a13      	cmp	r2, #19
    521c:	d948      	bls.n	52b0 <_realloc_r+0x300>
    521e:	6821      	ldr	r1, [r4, #0]
    5220:	f8ca 1008 	str.w	r1, [sl, #8]
    5224:	6861      	ldr	r1, [r4, #4]
    5226:	f8ca 100c 	str.w	r1, [sl, #12]
    522a:	2a1b      	cmp	r2, #27
    522c:	d856      	bhi.n	52dc <_realloc_r+0x32c>
    522e:	3408      	adds	r4, #8
    5230:	f10a 0210 	add.w	r2, sl, #16
    5234:	461e      	mov	r6, r3
    5236:	6823      	ldr	r3, [r4, #0]
    5238:	6013      	str	r3, [r2, #0]
    523a:	6863      	ldr	r3, [r4, #4]
    523c:	6053      	str	r3, [r2, #4]
    523e:	68a3      	ldr	r3, [r4, #8]
    5240:	6093      	str	r3, [r2, #8]
    5242:	46d1      	mov	r9, sl
    5244:	463c      	mov	r4, r7
    5246:	e730      	b.n	50aa <_realloc_r+0xfa>
    5248:	4621      	mov	r1, r4
    524a:	f000 fad1 	bl	57f0 <memmove>
    524e:	e711      	b.n	5074 <_realloc_r+0xc4>
    5250:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    5254:	4657      	mov	r7, sl
    5256:	60cb      	str	r3, [r1, #12]
    5258:	6099      	str	r1, [r3, #8]
    525a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    525e:	f8da 300c 	ldr.w	r3, [sl, #12]
    5262:	60cb      	str	r3, [r1, #12]
    5264:	1f32      	subs	r2, r6, #4
    5266:	2a24      	cmp	r2, #36	; 0x24
    5268:	6099      	str	r1, [r3, #8]
    526a:	d82d      	bhi.n	52c8 <_realloc_r+0x318>
    526c:	2a13      	cmp	r2, #19
    526e:	d929      	bls.n	52c4 <_realloc_r+0x314>
    5270:	6823      	ldr	r3, [r4, #0]
    5272:	f8ca 3008 	str.w	r3, [sl, #8]
    5276:	6863      	ldr	r3, [r4, #4]
    5278:	f8ca 300c 	str.w	r3, [sl, #12]
    527c:	2a1b      	cmp	r2, #27
    527e:	d842      	bhi.n	5306 <_realloc_r+0x356>
    5280:	3408      	adds	r4, #8
    5282:	f10a 0310 	add.w	r3, sl, #16
    5286:	6822      	ldr	r2, [r4, #0]
    5288:	601a      	str	r2, [r3, #0]
    528a:	6862      	ldr	r2, [r4, #4]
    528c:	605a      	str	r2, [r3, #4]
    528e:	68a2      	ldr	r2, [r4, #8]
    5290:	609a      	str	r2, [r3, #8]
    5292:	4666      	mov	r6, ip
    5294:	46d1      	mov	r9, sl
    5296:	463c      	mov	r4, r7
    5298:	e707      	b.n	50aa <_realloc_r+0xfa>
    529a:	68a3      	ldr	r3, [r4, #8]
    529c:	6083      	str	r3, [r0, #8]
    529e:	68e3      	ldr	r3, [r4, #12]
    52a0:	60c3      	str	r3, [r0, #12]
    52a2:	2a24      	cmp	r2, #36	; 0x24
    52a4:	d026      	beq.n	52f4 <_realloc_r+0x344>
    52a6:	f104 0210 	add.w	r2, r4, #16
    52aa:	f100 0310 	add.w	r3, r0, #16
    52ae:	e6db      	b.n	5068 <_realloc_r+0xb8>
    52b0:	463a      	mov	r2, r7
    52b2:	e7bf      	b.n	5234 <_realloc_r+0x284>
    52b4:	4621      	mov	r1, r4
    52b6:	4638      	mov	r0, r7
    52b8:	461e      	mov	r6, r3
    52ba:	46d1      	mov	r9, sl
    52bc:	f000 fa98 	bl	57f0 <memmove>
    52c0:	463c      	mov	r4, r7
    52c2:	e6f2      	b.n	50aa <_realloc_r+0xfa>
    52c4:	463b      	mov	r3, r7
    52c6:	e7de      	b.n	5286 <_realloc_r+0x2d6>
    52c8:	4621      	mov	r1, r4
    52ca:	4638      	mov	r0, r7
    52cc:	4666      	mov	r6, ip
    52ce:	46d1      	mov	r9, sl
    52d0:	f000 fa8e 	bl	57f0 <memmove>
    52d4:	463c      	mov	r4, r7
    52d6:	e6e8      	b.n	50aa <_realloc_r+0xfa>
    52d8:	20001338 	.word	0x20001338
    52dc:	68a1      	ldr	r1, [r4, #8]
    52de:	f8ca 1010 	str.w	r1, [sl, #16]
    52e2:	68e1      	ldr	r1, [r4, #12]
    52e4:	f8ca 1014 	str.w	r1, [sl, #20]
    52e8:	2a24      	cmp	r2, #36	; 0x24
    52ea:	d020      	beq.n	532e <_realloc_r+0x37e>
    52ec:	3410      	adds	r4, #16
    52ee:	f10a 0218 	add.w	r2, sl, #24
    52f2:	e79f      	b.n	5234 <_realloc_r+0x284>
    52f4:	6923      	ldr	r3, [r4, #16]
    52f6:	6103      	str	r3, [r0, #16]
    52f8:	6961      	ldr	r1, [r4, #20]
    52fa:	6141      	str	r1, [r0, #20]
    52fc:	f104 0218 	add.w	r2, r4, #24
    5300:	f100 0318 	add.w	r3, r0, #24
    5304:	e6b0      	b.n	5068 <_realloc_r+0xb8>
    5306:	68a3      	ldr	r3, [r4, #8]
    5308:	f8ca 3010 	str.w	r3, [sl, #16]
    530c:	68e3      	ldr	r3, [r4, #12]
    530e:	f8ca 3014 	str.w	r3, [sl, #20]
    5312:	2a24      	cmp	r2, #36	; 0x24
    5314:	d021      	beq.n	535a <_realloc_r+0x3aa>
    5316:	3410      	adds	r4, #16
    5318:	f10a 0318 	add.w	r3, sl, #24
    531c:	e7b3      	b.n	5286 <_realloc_r+0x2d6>
    531e:	463a      	mov	r2, r7
    5320:	e733      	b.n	518a <_realloc_r+0x1da>
    5322:	4621      	mov	r1, r4
    5324:	4638      	mov	r0, r7
    5326:	f000 fa63 	bl	57f0 <memmove>
    532a:	4b16      	ldr	r3, [pc, #88]	; (5384 <_realloc_r+0x3d4>)
    532c:	e733      	b.n	5196 <_realloc_r+0x1e6>
    532e:	6922      	ldr	r2, [r4, #16]
    5330:	f8ca 2018 	str.w	r2, [sl, #24]
    5334:	6962      	ldr	r2, [r4, #20]
    5336:	f8ca 201c 	str.w	r2, [sl, #28]
    533a:	3418      	adds	r4, #24
    533c:	f10a 0220 	add.w	r2, sl, #32
    5340:	e778      	b.n	5234 <_realloc_r+0x284>
    5342:	68a1      	ldr	r1, [r4, #8]
    5344:	f8ca 1010 	str.w	r1, [sl, #16]
    5348:	68e1      	ldr	r1, [r4, #12]
    534a:	f8ca 1014 	str.w	r1, [sl, #20]
    534e:	2a24      	cmp	r2, #36	; 0x24
    5350:	d00d      	beq.n	536e <_realloc_r+0x3be>
    5352:	3410      	adds	r4, #16
    5354:	f10a 0218 	add.w	r2, sl, #24
    5358:	e717      	b.n	518a <_realloc_r+0x1da>
    535a:	6923      	ldr	r3, [r4, #16]
    535c:	f8ca 3018 	str.w	r3, [sl, #24]
    5360:	6963      	ldr	r3, [r4, #20]
    5362:	f8ca 301c 	str.w	r3, [sl, #28]
    5366:	3418      	adds	r4, #24
    5368:	f10a 0320 	add.w	r3, sl, #32
    536c:	e78b      	b.n	5286 <_realloc_r+0x2d6>
    536e:	6922      	ldr	r2, [r4, #16]
    5370:	f8ca 2018 	str.w	r2, [sl, #24]
    5374:	6962      	ldr	r2, [r4, #20]
    5376:	f8ca 201c 	str.w	r2, [sl, #28]
    537a:	3418      	adds	r4, #24
    537c:	f10a 0220 	add.w	r2, sl, #32
    5380:	e703      	b.n	518a <_realloc_r+0x1da>
    5382:	bf00      	nop
    5384:	20001338 	.word	0x20001338

00005388 <_strtol_l.constprop.0>:
    5388:	2b01      	cmp	r3, #1
    538a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    538e:	d040      	beq.n	5412 <_strtol_l.constprop.0+0x8a>
    5390:	2b24      	cmp	r3, #36	; 0x24
    5392:	4698      	mov	r8, r3
    5394:	d83d      	bhi.n	5412 <_strtol_l.constprop.0+0x8a>
    5396:	4d4c      	ldr	r5, [pc, #304]	; (54c8 <_strtol_l.constprop.0+0x140>)
    5398:	468e      	mov	lr, r1
    539a:	4676      	mov	r6, lr
    539c:	f81e bb01 	ldrb.w	fp, [lr], #1
    53a0:	f815 400b 	ldrb.w	r4, [r5, fp]
    53a4:	f014 0408 	ands.w	r4, r4, #8
    53a8:	d1f7      	bne.n	539a <_strtol_l.constprop.0+0x12>
    53aa:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    53ae:	d072      	beq.n	5496 <_strtol_l.constprop.0+0x10e>
    53b0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    53b4:	bf08      	it	eq
    53b6:	f89e b000 	ldrbeq.w	fp, [lr]
    53ba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    53be:	bf08      	it	eq
    53c0:	f106 0e02 	addeq.w	lr, r6, #2
    53c4:	2b00      	cmp	r3, #0
    53c6:	d042      	beq.n	544e <_strtol_l.constprop.0+0xc6>
    53c8:	2b10      	cmp	r3, #16
    53ca:	d057      	beq.n	547c <_strtol_l.constprop.0+0xf4>
    53cc:	fbb9 f7f8 	udiv	r7, r9, r8
    53d0:	2500      	movs	r5, #0
    53d2:	462e      	mov	r6, r5
    53d4:	fb08 9a17 	mls	sl, r8, r7, r9
    53d8:	e005      	b.n	53e6 <_strtol_l.constprop.0+0x5e>
    53da:	d033      	beq.n	5444 <_strtol_l.constprop.0+0xbc>
    53dc:	fb08 c606 	mla	r6, r8, r6, ip
    53e0:	2501      	movs	r5, #1
    53e2:	f81e bb01 	ldrb.w	fp, [lr], #1
    53e6:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    53ea:	f1bc 0f09 	cmp.w	ip, #9
    53ee:	d906      	bls.n	53fe <_strtol_l.constprop.0+0x76>
    53f0:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    53f4:	f1bc 0f19 	cmp.w	ip, #25
    53f8:	d812      	bhi.n	5420 <_strtol_l.constprop.0+0x98>
    53fa:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    53fe:	4563      	cmp	r3, ip
    5400:	dd17      	ble.n	5432 <_strtol_l.constprop.0+0xaa>
    5402:	f1b5 3fff 	cmp.w	r5, #4294967295
    5406:	d0ec      	beq.n	53e2 <_strtol_l.constprop.0+0x5a>
    5408:	42b7      	cmp	r7, r6
    540a:	d2e6      	bcs.n	53da <_strtol_l.constprop.0+0x52>
    540c:	f04f 35ff 	mov.w	r5, #4294967295
    5410:	e7e7      	b.n	53e2 <_strtol_l.constprop.0+0x5a>
    5412:	f000 fdd3 	bl	5fbc <__errno>
    5416:	2316      	movs	r3, #22
    5418:	6003      	str	r3, [r0, #0]
    541a:	2000      	movs	r0, #0
    541c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5420:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    5424:	f1bc 0f19 	cmp.w	ip, #25
    5428:	d803      	bhi.n	5432 <_strtol_l.constprop.0+0xaa>
    542a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    542e:	4563      	cmp	r3, ip
    5430:	dce7      	bgt.n	5402 <_strtol_l.constprop.0+0x7a>
    5432:	1c6b      	adds	r3, r5, #1
    5434:	d027      	beq.n	5486 <_strtol_l.constprop.0+0xfe>
    5436:	b98c      	cbnz	r4, 545c <_strtol_l.constprop.0+0xd4>
    5438:	b10a      	cbz	r2, 543e <_strtol_l.constprop.0+0xb6>
    543a:	bba5      	cbnz	r5, 54a6 <_strtol_l.constprop.0+0x11e>
    543c:	6011      	str	r1, [r2, #0]
    543e:	4630      	mov	r0, r6
    5440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5444:	45e2      	cmp	sl, ip
    5446:	dac9      	bge.n	53dc <_strtol_l.constprop.0+0x54>
    5448:	f04f 35ff 	mov.w	r5, #4294967295
    544c:	e7c9      	b.n	53e2 <_strtol_l.constprop.0+0x5a>
    544e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5452:	d005      	beq.n	5460 <_strtol_l.constprop.0+0xd8>
    5454:	f04f 080a 	mov.w	r8, #10
    5458:	4643      	mov	r3, r8
    545a:	e7b7      	b.n	53cc <_strtol_l.constprop.0+0x44>
    545c:	4276      	negs	r6, r6
    545e:	e7eb      	b.n	5438 <_strtol_l.constprop.0+0xb0>
    5460:	f89e 3000 	ldrb.w	r3, [lr]
    5464:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5468:	2b58      	cmp	r3, #88	; 0x58
    546a:	d121      	bne.n	54b0 <_strtol_l.constprop.0+0x128>
    546c:	f04f 0810 	mov.w	r8, #16
    5470:	f89e b001 	ldrb.w	fp, [lr, #1]
    5474:	4643      	mov	r3, r8
    5476:	f10e 0e02 	add.w	lr, lr, #2
    547a:	e7a7      	b.n	53cc <_strtol_l.constprop.0+0x44>
    547c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5480:	d01a      	beq.n	54b8 <_strtol_l.constprop.0+0x130>
    5482:	4698      	mov	r8, r3
    5484:	e7a2      	b.n	53cc <_strtol_l.constprop.0+0x44>
    5486:	2322      	movs	r3, #34	; 0x22
    5488:	6003      	str	r3, [r0, #0]
    548a:	b172      	cbz	r2, 54aa <_strtol_l.constprop.0+0x122>
    548c:	f10e 31ff 	add.w	r1, lr, #4294967295
    5490:	464e      	mov	r6, r9
    5492:	6011      	str	r1, [r2, #0]
    5494:	e7d3      	b.n	543e <_strtol_l.constprop.0+0xb6>
    5496:	f89e b000 	ldrb.w	fp, [lr]
    549a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    549e:	f106 0e02 	add.w	lr, r6, #2
    54a2:	2401      	movs	r4, #1
    54a4:	e78e      	b.n	53c4 <_strtol_l.constprop.0+0x3c>
    54a6:	46b1      	mov	r9, r6
    54a8:	e7f0      	b.n	548c <_strtol_l.constprop.0+0x104>
    54aa:	464e      	mov	r6, r9
    54ac:	4630      	mov	r0, r6
    54ae:	e7c7      	b.n	5440 <_strtol_l.constprop.0+0xb8>
    54b0:	f04f 0808 	mov.w	r8, #8
    54b4:	4643      	mov	r3, r8
    54b6:	e789      	b.n	53cc <_strtol_l.constprop.0+0x44>
    54b8:	f89e 5000 	ldrb.w	r5, [lr]
    54bc:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    54c0:	2d58      	cmp	r5, #88	; 0x58
    54c2:	d0d3      	beq.n	546c <_strtol_l.constprop.0+0xe4>
    54c4:	4698      	mov	r8, r3
    54c6:	e781      	b.n	53cc <_strtol_l.constprop.0+0x44>
    54c8:	200005c9 	.word	0x200005c9

000054cc <strtol>:
    54cc:	b410      	push	{r4}
    54ce:	4c05      	ldr	r4, [pc, #20]	; (54e4 <strtol+0x18>)
    54d0:	4684      	mov	ip, r0
    54d2:	4613      	mov	r3, r2
    54d4:	6820      	ldr	r0, [r4, #0]
    54d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    54da:	460a      	mov	r2, r1
    54dc:	4661      	mov	r1, ip
    54de:	f7ff bf53 	b.w	5388 <_strtol_l.constprop.0>
    54e2:	bf00      	nop
    54e4:	20001754 	.word	0x20001754

000054e8 <__utoa>:
    54e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ea:	4f25      	ldr	r7, [pc, #148]	; (5580 <__utoa+0x98>)
    54ec:	f1a2 0e02 	sub.w	lr, r2, #2
    54f0:	4616      	mov	r6, r2
    54f2:	4605      	mov	r5, r0
    54f4:	460c      	mov	r4, r1
    54f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    54f8:	b08b      	sub	sp, #44	; 0x2c
    54fa:	46ec      	mov	ip, sp
    54fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5500:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5502:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5506:	e897 0003 	ldmia.w	r7, {r0, r1}
    550a:	f84c 0b04 	str.w	r0, [ip], #4
    550e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    5512:	f88c 1000 	strb.w	r1, [ip]
    5516:	d82e      	bhi.n	5576 <__utoa+0x8e>
    5518:	f104 3eff 	add.w	lr, r4, #4294967295
    551c:	4670      	mov	r0, lr
    551e:	f04f 0c00 	mov.w	ip, #0
    5522:	fbb5 f2f6 	udiv	r2, r5, r6
    5526:	fb06 5312 	mls	r3, r6, r2, r5
    552a:	3328      	adds	r3, #40	; 0x28
    552c:	446b      	add	r3, sp
    552e:	4661      	mov	r1, ip
    5530:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    5534:	f800 cf01 	strb.w	ip, [r0, #1]!
    5538:	462b      	mov	r3, r5
    553a:	429e      	cmp	r6, r3
    553c:	f101 0c01 	add.w	ip, r1, #1
    5540:	4615      	mov	r5, r2
    5542:	d9ee      	bls.n	5522 <__utoa+0x3a>
    5544:	2300      	movs	r3, #0
    5546:	f804 300c 	strb.w	r3, [r4, ip]
    554a:	b189      	cbz	r1, 5570 <__utoa+0x88>
    554c:	44a4      	add	ip, r4
    554e:	4672      	mov	r2, lr
    5550:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    5554:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    5558:	f88e 5000 	strb.w	r5, [lr]
    555c:	eba4 030e 	sub.w	r3, r4, lr
    5560:	3202      	adds	r2, #2
    5562:	3b01      	subs	r3, #1
    5564:	1b12      	subs	r2, r2, r4
    5566:	440b      	add	r3, r1
    5568:	429a      	cmp	r2, r3
    556a:	f88c 0000 	strb.w	r0, [ip]
    556e:	dbee      	blt.n	554e <__utoa+0x66>
    5570:	4620      	mov	r0, r4
    5572:	b00b      	add	sp, #44	; 0x2c
    5574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5576:	2300      	movs	r3, #0
    5578:	4618      	mov	r0, r3
    557a:	7023      	strb	r3, [r4, #0]
    557c:	b00b      	add	sp, #44	; 0x2c
    557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5580:	200005a0 	.word	0x200005a0

00005584 <__cxa_atexit>:
    5584:	4613      	mov	r3, r2
    5586:	460a      	mov	r2, r1
    5588:	4601      	mov	r1, r0
    558a:	2002      	movs	r0, #2
    558c:	f000 bf86 	b.w	649c <__register_exitproc>

00005590 <fcvtf>:
    5590:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    5594:	2300      	movs	r3, #0
    5596:	f001 bcfb 	b.w	6f90 <fcvtbuf>
    559a:	bf00      	nop

0000559c <stdio_exit_handler>:
    559c:	4a02      	ldr	r2, [pc, #8]	; (55a8 <stdio_exit_handler+0xc>)
    559e:	4903      	ldr	r1, [pc, #12]	; (55ac <stdio_exit_handler+0x10>)
    55a0:	4803      	ldr	r0, [pc, #12]	; (55b0 <stdio_exit_handler+0x14>)
    55a2:	f000 b8bb 	b.w	571c <_fwalk_sglue>
    55a6:	bf00      	nop
    55a8:	20001748 	.word	0x20001748
    55ac:	00007035 	.word	0x00007035
    55b0:	20000c68 	.word	0x20000c68

000055b4 <cleanup_stdio>:
    55b4:	4b0c      	ldr	r3, [pc, #48]	; (55e8 <cleanup_stdio+0x34>)
    55b6:	6841      	ldr	r1, [r0, #4]
    55b8:	4299      	cmp	r1, r3
    55ba:	b510      	push	{r4, lr}
    55bc:	4604      	mov	r4, r0
    55be:	d001      	beq.n	55c4 <cleanup_stdio+0x10>
    55c0:	f001 fd38 	bl	7034 <_fclose_r>
    55c4:	68a1      	ldr	r1, [r4, #8]
    55c6:	4b09      	ldr	r3, [pc, #36]	; (55ec <cleanup_stdio+0x38>)
    55c8:	4299      	cmp	r1, r3
    55ca:	d002      	beq.n	55d2 <cleanup_stdio+0x1e>
    55cc:	4620      	mov	r0, r4
    55ce:	f001 fd31 	bl	7034 <_fclose_r>
    55d2:	68e1      	ldr	r1, [r4, #12]
    55d4:	4b06      	ldr	r3, [pc, #24]	; (55f0 <cleanup_stdio+0x3c>)
    55d6:	4299      	cmp	r1, r3
    55d8:	d004      	beq.n	55e4 <cleanup_stdio+0x30>
    55da:	4620      	mov	r0, r4
    55dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    55e0:	f001 bd28 	b.w	7034 <_fclose_r>
    55e4:	bd10      	pop	{r4, pc}
    55e6:	bf00      	nop
    55e8:	20001f0c 	.word	0x20001f0c
    55ec:	20001f74 	.word	0x20001f74
    55f0:	20001fdc 	.word	0x20001fdc

000055f4 <global_stdio_init.part.0>:
    55f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55f8:	4c2a      	ldr	r4, [pc, #168]	; (56a4 <global_stdio_init.part.0+0xb0>)
    55fa:	4b2b      	ldr	r3, [pc, #172]	; (56a8 <global_stdio_init.part.0+0xb4>)
    55fc:	482b      	ldr	r0, [pc, #172]	; (56ac <global_stdio_init.part.0+0xb8>)
    55fe:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 56c0 <global_stdio_init.part.0+0xcc>
    5602:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 56c4 <global_stdio_init.part.0+0xd0>
    5606:	4f2a      	ldr	r7, [pc, #168]	; (56b0 <global_stdio_init.part.0+0xbc>)
    5608:	6018      	str	r0, [r3, #0]
    560a:	2500      	movs	r5, #0
    560c:	2304      	movs	r3, #4
    560e:	2208      	movs	r2, #8
    5610:	4629      	mov	r1, r5
    5612:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5616:	4e27      	ldr	r6, [pc, #156]	; (56b4 <global_stdio_init.part.0+0xc0>)
    5618:	6665      	str	r5, [r4, #100]	; 0x64
    561a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    561e:	e9c4 5500 	strd	r5, r5, [r4]
    5622:	e9c4 5504 	strd	r5, r5, [r4, #16]
    5626:	61a5      	str	r5, [r4, #24]
    5628:	f000 f95e 	bl	58e8 <memset>
    562c:	4b22      	ldr	r3, [pc, #136]	; (56b8 <global_stdio_init.part.0+0xc4>)
    562e:	6763      	str	r3, [r4, #116]	; 0x74
    5630:	2208      	movs	r2, #8
    5632:	4629      	mov	r1, r5
    5634:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5638:	e9c4 4907 	strd	r4, r9, [r4, #28]
    563c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5640:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    5644:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5648:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    564c:	6725      	str	r5, [r4, #112]	; 0x70
    564e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5652:	62e6      	str	r6, [r4, #44]	; 0x2c
    5654:	f000 f948 	bl	58e8 <memset>
    5658:	4b18      	ldr	r3, [pc, #96]	; (56bc <global_stdio_init.part.0+0xc8>)
    565a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    565e:	4629      	mov	r1, r5
    5660:	f104 0368 	add.w	r3, r4, #104	; 0x68
    5664:	2208      	movs	r2, #8
    5666:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    566a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    566e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5672:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    5676:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    567a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    567e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5682:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    5686:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    568a:	f000 f92d 	bl	58e8 <memset>
    568e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5692:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    5696:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    569a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    569e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    56a2:	bf00      	nop
    56a4:	20001f0c 	.word	0x20001f0c
    56a8:	20002044 	.word	0x20002044
    56ac:	0000559d 	.word	0x0000559d
    56b0:	000057c9 	.word	0x000057c9
    56b4:	000057e9 	.word	0x000057e9
    56b8:	00010009 	.word	0x00010009
    56bc:	00020012 	.word	0x00020012
    56c0:	00005765 	.word	0x00005765
    56c4:	00005789 	.word	0x00005789

000056c8 <__sinit>:
    56c8:	b510      	push	{r4, lr}
    56ca:	4604      	mov	r4, r0
    56cc:	480a      	ldr	r0, [pc, #40]	; (56f8 <__sinit+0x30>)
    56ce:	f000 fca3 	bl	6018 <__retarget_lock_acquire_recursive>
    56d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    56d4:	b923      	cbnz	r3, 56e0 <__sinit+0x18>
    56d6:	4b09      	ldr	r3, [pc, #36]	; (56fc <__sinit+0x34>)
    56d8:	4a09      	ldr	r2, [pc, #36]	; (5700 <__sinit+0x38>)
    56da:	681b      	ldr	r3, [r3, #0]
    56dc:	6362      	str	r2, [r4, #52]	; 0x34
    56de:	b123      	cbz	r3, 56ea <__sinit+0x22>
    56e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56e4:	4804      	ldr	r0, [pc, #16]	; (56f8 <__sinit+0x30>)
    56e6:	f000 bc99 	b.w	601c <__retarget_lock_release_recursive>
    56ea:	f7ff ff83 	bl	55f4 <global_stdio_init.part.0>
    56ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    56f2:	4801      	ldr	r0, [pc, #4]	; (56f8 <__sinit+0x30>)
    56f4:	f000 bc92 	b.w	601c <__retarget_lock_release_recursive>
    56f8:	20001ed4 	.word	0x20001ed4
    56fc:	20002044 	.word	0x20002044
    5700:	000055b5 	.word	0x000055b5

00005704 <__sfp_lock_acquire>:
    5704:	4801      	ldr	r0, [pc, #4]	; (570c <__sfp_lock_acquire+0x8>)
    5706:	f000 bc87 	b.w	6018 <__retarget_lock_acquire_recursive>
    570a:	bf00      	nop
    570c:	20001ed4 	.word	0x20001ed4

00005710 <__sfp_lock_release>:
    5710:	4801      	ldr	r0, [pc, #4]	; (5718 <__sfp_lock_release+0x8>)
    5712:	f000 bc83 	b.w	601c <__retarget_lock_release_recursive>
    5716:	bf00      	nop
    5718:	20001ed4 	.word	0x20001ed4

0000571c <_fwalk_sglue>:
    571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5720:	4680      	mov	r8, r0
    5722:	460f      	mov	r7, r1
    5724:	4616      	mov	r6, r2
    5726:	f04f 0900 	mov.w	r9, #0
    572a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    572e:	3d01      	subs	r5, #1
    5730:	d411      	bmi.n	5756 <_fwalk_sglue+0x3a>
    5732:	89a3      	ldrh	r3, [r4, #12]
    5734:	2b01      	cmp	r3, #1
    5736:	f105 35ff 	add.w	r5, r5, #4294967295
    573a:	d908      	bls.n	574e <_fwalk_sglue+0x32>
    573c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5740:	3301      	adds	r3, #1
    5742:	4621      	mov	r1, r4
    5744:	d003      	beq.n	574e <_fwalk_sglue+0x32>
    5746:	4640      	mov	r0, r8
    5748:	47b8      	blx	r7
    574a:	ea49 0900 	orr.w	r9, r9, r0
    574e:	1c6b      	adds	r3, r5, #1
    5750:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5754:	d1ed      	bne.n	5732 <_fwalk_sglue+0x16>
    5756:	6836      	ldr	r6, [r6, #0]
    5758:	2e00      	cmp	r6, #0
    575a:	d1e6      	bne.n	572a <_fwalk_sglue+0xe>
    575c:	4648      	mov	r0, r9
    575e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5762:	bf00      	nop

00005764 <__sread>:
    5764:	b510      	push	{r4, lr}
    5766:	460c      	mov	r4, r1
    5768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    576c:	f000 fbe8 	bl	5f40 <_read_r>
    5770:	2800      	cmp	r0, #0
    5772:	db03      	blt.n	577c <__sread+0x18>
    5774:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5776:	4403      	add	r3, r0
    5778:	6523      	str	r3, [r4, #80]	; 0x50
    577a:	bd10      	pop	{r4, pc}
    577c:	89a3      	ldrh	r3, [r4, #12]
    577e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5782:	81a3      	strh	r3, [r4, #12]
    5784:	bd10      	pop	{r4, pc}
    5786:	bf00      	nop

00005788 <__swrite>:
    5788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    578c:	460c      	mov	r4, r1
    578e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5792:	461f      	mov	r7, r3
    5794:	05cb      	lsls	r3, r1, #23
    5796:	4605      	mov	r5, r0
    5798:	4616      	mov	r6, r2
    579a:	d40b      	bmi.n	57b4 <__swrite+0x2c>
    579c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    57a0:	81a1      	strh	r1, [r4, #12]
    57a2:	463b      	mov	r3, r7
    57a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    57a8:	4632      	mov	r2, r6
    57aa:	4628      	mov	r0, r5
    57ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    57b0:	f000 bbee 	b.w	5f90 <_write_r>
    57b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    57b8:	2302      	movs	r3, #2
    57ba:	2200      	movs	r2, #0
    57bc:	f000 fbaa 	bl	5f14 <_lseek_r>
    57c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    57c4:	e7ea      	b.n	579c <__swrite+0x14>
    57c6:	bf00      	nop

000057c8 <__sseek>:
    57c8:	b510      	push	{r4, lr}
    57ca:	460c      	mov	r4, r1
    57cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    57d0:	f000 fba0 	bl	5f14 <_lseek_r>
    57d4:	89a3      	ldrh	r3, [r4, #12]
    57d6:	1c42      	adds	r2, r0, #1
    57d8:	bf0e      	itee	eq
    57da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    57de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    57e2:	6520      	strne	r0, [r4, #80]	; 0x50
    57e4:	81a3      	strh	r3, [r4, #12]
    57e6:	bd10      	pop	{r4, pc}

000057e8 <__sclose>:
    57e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    57ec:	f000 bb80 	b.w	5ef0 <_close_r>

000057f0 <memmove>:
    57f0:	4288      	cmp	r0, r1
    57f2:	d90d      	bls.n	5810 <memmove+0x20>
    57f4:	188b      	adds	r3, r1, r2
    57f6:	4283      	cmp	r3, r0
    57f8:	d90a      	bls.n	5810 <memmove+0x20>
    57fa:	eb00 0c02 	add.w	ip, r0, r2
    57fe:	b1ba      	cbz	r2, 5830 <memmove+0x40>
    5800:	4662      	mov	r2, ip
    5802:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5806:	f802 cd01 	strb.w	ip, [r2, #-1]!
    580a:	4299      	cmp	r1, r3
    580c:	d1f9      	bne.n	5802 <memmove+0x12>
    580e:	4770      	bx	lr
    5810:	2a0f      	cmp	r2, #15
    5812:	d80e      	bhi.n	5832 <memmove+0x42>
    5814:	4603      	mov	r3, r0
    5816:	f102 3cff 	add.w	ip, r2, #4294967295
    581a:	b14a      	cbz	r2, 5830 <memmove+0x40>
    581c:	f10c 0c01 	add.w	ip, ip, #1
    5820:	3b01      	subs	r3, #1
    5822:	448c      	add	ip, r1
    5824:	f811 2b01 	ldrb.w	r2, [r1], #1
    5828:	f803 2f01 	strb.w	r2, [r3, #1]!
    582c:	4561      	cmp	r1, ip
    582e:	d1f9      	bne.n	5824 <memmove+0x34>
    5830:	4770      	bx	lr
    5832:	ea40 0301 	orr.w	r3, r0, r1
    5836:	079b      	lsls	r3, r3, #30
    5838:	d150      	bne.n	58dc <memmove+0xec>
    583a:	f1a2 0310 	sub.w	r3, r2, #16
    583e:	b570      	push	{r4, r5, r6, lr}
    5840:	f101 0c20 	add.w	ip, r1, #32
    5844:	f023 050f 	bic.w	r5, r3, #15
    5848:	f101 0e10 	add.w	lr, r1, #16
    584c:	f100 0410 	add.w	r4, r0, #16
    5850:	44ac      	add	ip, r5
    5852:	091b      	lsrs	r3, r3, #4
    5854:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5858:	f844 5c10 	str.w	r5, [r4, #-16]
    585c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5860:	f844 5c0c 	str.w	r5, [r4, #-12]
    5864:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5868:	f844 5c08 	str.w	r5, [r4, #-8]
    586c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5870:	f844 5c04 	str.w	r5, [r4, #-4]
    5874:	f10e 0e10 	add.w	lr, lr, #16
    5878:	45e6      	cmp	lr, ip
    587a:	f104 0410 	add.w	r4, r4, #16
    587e:	d1e9      	bne.n	5854 <memmove+0x64>
    5880:	3301      	adds	r3, #1
    5882:	f012 0f0c 	tst.w	r2, #12
    5886:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    588a:	f002 040f 	and.w	r4, r2, #15
    588e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5892:	d027      	beq.n	58e4 <memmove+0xf4>
    5894:	3c04      	subs	r4, #4
    5896:	f024 0603 	bic.w	r6, r4, #3
    589a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    589e:	441e      	add	r6, r3
    58a0:	1f1c      	subs	r4, r3, #4
    58a2:	468e      	mov	lr, r1
    58a4:	f85e 5b04 	ldr.w	r5, [lr], #4
    58a8:	f844 5f04 	str.w	r5, [r4, #4]!
    58ac:	42b4      	cmp	r4, r6
    58ae:	d1f9      	bne.n	58a4 <memmove+0xb4>
    58b0:	f10c 0401 	add.w	r4, ip, #1
    58b4:	f002 0203 	and.w	r2, r2, #3
    58b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    58c0:	f102 3cff 	add.w	ip, r2, #4294967295
    58c4:	b14a      	cbz	r2, 58da <memmove+0xea>
    58c6:	f10c 0c01 	add.w	ip, ip, #1
    58ca:	3b01      	subs	r3, #1
    58cc:	448c      	add	ip, r1
    58ce:	f811 2b01 	ldrb.w	r2, [r1], #1
    58d2:	f803 2f01 	strb.w	r2, [r3, #1]!
    58d6:	4561      	cmp	r1, ip
    58d8:	d1f9      	bne.n	58ce <memmove+0xde>
    58da:	bd70      	pop	{r4, r5, r6, pc}
    58dc:	f102 3cff 	add.w	ip, r2, #4294967295
    58e0:	4603      	mov	r3, r0
    58e2:	e79b      	b.n	581c <memmove+0x2c>
    58e4:	4622      	mov	r2, r4
    58e6:	e7eb      	b.n	58c0 <memmove+0xd0>

000058e8 <memset>:
    58e8:	0783      	lsls	r3, r0, #30
    58ea:	b530      	push	{r4, r5, lr}
    58ec:	d048      	beq.n	5980 <memset+0x98>
    58ee:	1e54      	subs	r4, r2, #1
    58f0:	2a00      	cmp	r2, #0
    58f2:	d03f      	beq.n	5974 <memset+0x8c>
    58f4:	b2ca      	uxtb	r2, r1
    58f6:	4603      	mov	r3, r0
    58f8:	e001      	b.n	58fe <memset+0x16>
    58fa:	3c01      	subs	r4, #1
    58fc:	d33a      	bcc.n	5974 <memset+0x8c>
    58fe:	f803 2b01 	strb.w	r2, [r3], #1
    5902:	079d      	lsls	r5, r3, #30
    5904:	d1f9      	bne.n	58fa <memset+0x12>
    5906:	2c03      	cmp	r4, #3
    5908:	d92d      	bls.n	5966 <memset+0x7e>
    590a:	b2cd      	uxtb	r5, r1
    590c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5910:	2c0f      	cmp	r4, #15
    5912:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5916:	d936      	bls.n	5986 <memset+0x9e>
    5918:	f1a4 0210 	sub.w	r2, r4, #16
    591c:	f022 0c0f 	bic.w	ip, r2, #15
    5920:	f103 0e20 	add.w	lr, r3, #32
    5924:	44e6      	add	lr, ip
    5926:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    592a:	f103 0210 	add.w	r2, r3, #16
    592e:	e942 5504 	strd	r5, r5, [r2, #-16]
    5932:	e942 5502 	strd	r5, r5, [r2, #-8]
    5936:	3210      	adds	r2, #16
    5938:	4572      	cmp	r2, lr
    593a:	d1f8      	bne.n	592e <memset+0x46>
    593c:	f10c 0201 	add.w	r2, ip, #1
    5940:	f014 0f0c 	tst.w	r4, #12
    5944:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5948:	f004 0c0f 	and.w	ip, r4, #15
    594c:	d013      	beq.n	5976 <memset+0x8e>
    594e:	f1ac 0304 	sub.w	r3, ip, #4
    5952:	f023 0303 	bic.w	r3, r3, #3
    5956:	3304      	adds	r3, #4
    5958:	4413      	add	r3, r2
    595a:	f842 5b04 	str.w	r5, [r2], #4
    595e:	4293      	cmp	r3, r2
    5960:	d1fb      	bne.n	595a <memset+0x72>
    5962:	f00c 0403 	and.w	r4, ip, #3
    5966:	b12c      	cbz	r4, 5974 <memset+0x8c>
    5968:	b2c9      	uxtb	r1, r1
    596a:	441c      	add	r4, r3
    596c:	f803 1b01 	strb.w	r1, [r3], #1
    5970:	429c      	cmp	r4, r3
    5972:	d1fb      	bne.n	596c <memset+0x84>
    5974:	bd30      	pop	{r4, r5, pc}
    5976:	4664      	mov	r4, ip
    5978:	4613      	mov	r3, r2
    597a:	2c00      	cmp	r4, #0
    597c:	d1f4      	bne.n	5968 <memset+0x80>
    597e:	e7f9      	b.n	5974 <memset+0x8c>
    5980:	4603      	mov	r3, r0
    5982:	4614      	mov	r4, r2
    5984:	e7bf      	b.n	5906 <memset+0x1e>
    5986:	461a      	mov	r2, r3
    5988:	46a4      	mov	ip, r4
    598a:	e7e0      	b.n	594e <memset+0x66>

0000598c <strchr>:
    598c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    5990:	4603      	mov	r3, r0
    5992:	d044      	beq.n	5a1e <strchr+0x92>
    5994:	0782      	lsls	r2, r0, #30
    5996:	d132      	bne.n	59fe <strchr+0x72>
    5998:	b510      	push	{r4, lr}
    599a:	6804      	ldr	r4, [r0, #0]
    599c:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    59a0:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    59a4:	ea8e 0204 	eor.w	r2, lr, r4
    59a8:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    59ac:	ea23 0302 	bic.w	r3, r3, r2
    59b0:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    59b4:	ea22 0204 	bic.w	r2, r2, r4
    59b8:	4313      	orrs	r3, r2
    59ba:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    59be:	d10f      	bne.n	59e0 <strchr+0x54>
    59c0:	f850 4f04 	ldr.w	r4, [r0, #4]!
    59c4:	ea84 0c0e 	eor.w	ip, r4, lr
    59c8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    59cc:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    59d0:	ea23 0304 	bic.w	r3, r3, r4
    59d4:	ea22 020c 	bic.w	r2, r2, ip
    59d8:	4313      	orrs	r3, r2
    59da:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    59de:	d0ef      	beq.n	59c0 <strchr+0x34>
    59e0:	7803      	ldrb	r3, [r0, #0]
    59e2:	b923      	cbnz	r3, 59ee <strchr+0x62>
    59e4:	e036      	b.n	5a54 <strchr+0xc8>
    59e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    59ea:	2b00      	cmp	r3, #0
    59ec:	d032      	beq.n	5a54 <strchr+0xc8>
    59ee:	4299      	cmp	r1, r3
    59f0:	d1f9      	bne.n	59e6 <strchr+0x5a>
    59f2:	bd10      	pop	{r4, pc}
    59f4:	428a      	cmp	r2, r1
    59f6:	d011      	beq.n	5a1c <strchr+0x90>
    59f8:	079a      	lsls	r2, r3, #30
    59fa:	4618      	mov	r0, r3
    59fc:	d0cc      	beq.n	5998 <strchr+0xc>
    59fe:	4618      	mov	r0, r3
    5a00:	f813 2b01 	ldrb.w	r2, [r3], #1
    5a04:	2a00      	cmp	r2, #0
    5a06:	d1f5      	bne.n	59f4 <strchr+0x68>
    5a08:	4610      	mov	r0, r2
    5a0a:	4770      	bx	lr
    5a0c:	0799      	lsls	r1, r3, #30
    5a0e:	4618      	mov	r0, r3
    5a10:	d007      	beq.n	5a22 <strchr+0x96>
    5a12:	4618      	mov	r0, r3
    5a14:	3301      	adds	r3, #1
    5a16:	7802      	ldrb	r2, [r0, #0]
    5a18:	2a00      	cmp	r2, #0
    5a1a:	d1f7      	bne.n	5a0c <strchr+0x80>
    5a1c:	4770      	bx	lr
    5a1e:	0782      	lsls	r2, r0, #30
    5a20:	d1f7      	bne.n	5a12 <strchr+0x86>
    5a22:	6802      	ldr	r2, [r0, #0]
    5a24:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5a28:	ea23 0302 	bic.w	r3, r3, r2
    5a2c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5a30:	d108      	bne.n	5a44 <strchr+0xb8>
    5a32:	f850 2f04 	ldr.w	r2, [r0, #4]!
    5a36:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    5a3a:	ea23 0302 	bic.w	r3, r3, r2
    5a3e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    5a42:	d0f6      	beq.n	5a32 <strchr+0xa6>
    5a44:	7803      	ldrb	r3, [r0, #0]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d0e8      	beq.n	5a1c <strchr+0x90>
    5a4a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d1fb      	bne.n	5a4a <strchr+0xbe>
    5a52:	4770      	bx	lr
    5a54:	4618      	mov	r0, r3
    5a56:	bd10      	pop	{r4, pc}

00005a58 <strncpy>:
    5a58:	ea40 0301 	orr.w	r3, r0, r1
    5a5c:	079b      	lsls	r3, r3, #30
    5a5e:	b530      	push	{r4, r5, lr}
    5a60:	d101      	bne.n	5a66 <strncpy+0xe>
    5a62:	2a03      	cmp	r2, #3
    5a64:	d80f      	bhi.n	5a86 <strncpy+0x2e>
    5a66:	4684      	mov	ip, r0
    5a68:	f101 3eff 	add.w	lr, r1, #4294967295
    5a6c:	e007      	b.n	5a7e <strncpy+0x26>
    5a6e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    5a72:	f803 1b01 	strb.w	r1, [r3], #1
    5a76:	1e54      	subs	r4, r2, #1
    5a78:	b1c1      	cbz	r1, 5aac <strncpy+0x54>
    5a7a:	469c      	mov	ip, r3
    5a7c:	4622      	mov	r2, r4
    5a7e:	4663      	mov	r3, ip
    5a80:	2a00      	cmp	r2, #0
    5a82:	d1f4      	bne.n	5a6e <strncpy+0x16>
    5a84:	bd30      	pop	{r4, r5, pc}
    5a86:	460b      	mov	r3, r1
    5a88:	4684      	mov	ip, r0
    5a8a:	4619      	mov	r1, r3
    5a8c:	f853 5b04 	ldr.w	r5, [r3], #4
    5a90:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    5a94:	ea24 0405 	bic.w	r4, r4, r5
    5a98:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    5a9c:	d1e4      	bne.n	5a68 <strncpy+0x10>
    5a9e:	3a04      	subs	r2, #4
    5aa0:	2a03      	cmp	r2, #3
    5aa2:	f84c 5b04 	str.w	r5, [ip], #4
    5aa6:	4619      	mov	r1, r3
    5aa8:	d8ef      	bhi.n	5a8a <strncpy+0x32>
    5aaa:	e7dd      	b.n	5a68 <strncpy+0x10>
    5aac:	4494      	add	ip, r2
    5aae:	2c00      	cmp	r4, #0
    5ab0:	d0e8      	beq.n	5a84 <strncpy+0x2c>
    5ab2:	f803 1b01 	strb.w	r1, [r3], #1
    5ab6:	4563      	cmp	r3, ip
    5ab8:	d1fb      	bne.n	5ab2 <strncpy+0x5a>
    5aba:	bd30      	pop	{r4, r5, pc}

00005abc <critical_factorization>:
    5abc:	2901      	cmp	r1, #1
    5abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ac2:	d95b      	bls.n	5b7c <critical_factorization+0xc0>
    5ac4:	f04f 0801 	mov.w	r8, #1
    5ac8:	46c6      	mov	lr, r8
    5aca:	2400      	movs	r4, #0
    5acc:	f04f 35ff 	mov.w	r5, #4294967295
    5ad0:	4643      	mov	r3, r8
    5ad2:	e008      	b.n	5ae6 <critical_factorization+0x2a>
    5ad4:	eba3 0805 	sub.w	r8, r3, r5
    5ad8:	461c      	mov	r4, r3
    5ada:	f04f 0e01 	mov.w	lr, #1
    5ade:	eb04 030e 	add.w	r3, r4, lr
    5ae2:	428b      	cmp	r3, r1
    5ae4:	d210      	bcs.n	5b08 <critical_factorization+0x4c>
    5ae6:	eb00 0c0e 	add.w	ip, r0, lr
    5aea:	5cc7      	ldrb	r7, [r0, r3]
    5aec:	f81c 6005 	ldrb.w	r6, [ip, r5]
    5af0:	42b7      	cmp	r7, r6
    5af2:	d3ef      	bcc.n	5ad4 <critical_factorization+0x18>
    5af4:	d032      	beq.n	5b5c <critical_factorization+0xa0>
    5af6:	f04f 0801 	mov.w	r8, #1
    5afa:	4625      	mov	r5, r4
    5afc:	46c6      	mov	lr, r8
    5afe:	4444      	add	r4, r8
    5b00:	eb04 030e 	add.w	r3, r4, lr
    5b04:	428b      	cmp	r3, r1
    5b06:	d3ee      	bcc.n	5ae6 <critical_factorization+0x2a>
    5b08:	2701      	movs	r7, #1
    5b0a:	f8c2 8000 	str.w	r8, [r2]
    5b0e:	46be      	mov	lr, r7
    5b10:	2400      	movs	r4, #0
    5b12:	f04f 36ff 	mov.w	r6, #4294967295
    5b16:	463b      	mov	r3, r7
    5b18:	e007      	b.n	5b2a <critical_factorization+0x6e>
    5b1a:	1b9f      	subs	r7, r3, r6
    5b1c:	461c      	mov	r4, r3
    5b1e:	f04f 0e01 	mov.w	lr, #1
    5b22:	eb04 030e 	add.w	r3, r4, lr
    5b26:	428b      	cmp	r3, r1
    5b28:	d210      	bcs.n	5b4c <critical_factorization+0x90>
    5b2a:	eb00 0c06 	add.w	ip, r0, r6
    5b2e:	f810 8003 	ldrb.w	r8, [r0, r3]
    5b32:	f81c c00e 	ldrb.w	ip, [ip, lr]
    5b36:	45e0      	cmp	r8, ip
    5b38:	d8ef      	bhi.n	5b1a <critical_factorization+0x5e>
    5b3a:	d017      	beq.n	5b6c <critical_factorization+0xb0>
    5b3c:	2701      	movs	r7, #1
    5b3e:	4626      	mov	r6, r4
    5b40:	46be      	mov	lr, r7
    5b42:	443c      	add	r4, r7
    5b44:	eb04 030e 	add.w	r3, r4, lr
    5b48:	428b      	cmp	r3, r1
    5b4a:	d3ee      	bcc.n	5b2a <critical_factorization+0x6e>
    5b4c:	3601      	adds	r6, #1
    5b4e:	1c68      	adds	r0, r5, #1
    5b50:	4286      	cmp	r6, r0
    5b52:	d301      	bcc.n	5b58 <critical_factorization+0x9c>
    5b54:	6017      	str	r7, [r2, #0]
    5b56:	4630      	mov	r0, r6
    5b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b5c:	45c6      	cmp	lr, r8
    5b5e:	bf0a      	itet	eq
    5b60:	4474      	addeq	r4, lr
    5b62:	f10e 0e01 	addne.w	lr, lr, #1
    5b66:	f04f 0e01 	moveq.w	lr, #1
    5b6a:	e7b8      	b.n	5ade <critical_factorization+0x22>
    5b6c:	45be      	cmp	lr, r7
    5b6e:	bf0a      	itet	eq
    5b70:	4474      	addeq	r4, lr
    5b72:	f10e 0e01 	addne.w	lr, lr, #1
    5b76:	f04f 0e01 	moveq.w	lr, #1
    5b7a:	e7d2      	b.n	5b22 <critical_factorization+0x66>
    5b7c:	2701      	movs	r7, #1
    5b7e:	2600      	movs	r6, #0
    5b80:	e7e8      	b.n	5b54 <critical_factorization+0x98>
    5b82:	bf00      	nop

00005b84 <two_way_long_needle>:
    5b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b88:	4692      	mov	sl, r2
    5b8a:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    5b8e:	aa05      	add	r2, sp, #20
    5b90:	4681      	mov	r9, r0
    5b92:	460f      	mov	r7, r1
    5b94:	4650      	mov	r0, sl
    5b96:	4619      	mov	r1, r3
    5b98:	461d      	mov	r5, r3
    5b9a:	f7ff ff8f 	bl	5abc <critical_factorization>
    5b9e:	4613      	mov	r3, r2
    5ba0:	4683      	mov	fp, r0
    5ba2:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    5ba6:	f843 5f04 	str.w	r5, [r3, #4]!
    5baa:	4293      	cmp	r3, r2
    5bac:	d1fb      	bne.n	5ba6 <two_way_long_needle+0x22>
    5bae:	2d00      	cmp	r5, #0
    5bb0:	f000 80df 	beq.w	5d72 <two_way_long_needle+0x1ee>
    5bb4:	1e6c      	subs	r4, r5, #1
    5bb6:	ae06      	add	r6, sp, #24
    5bb8:	f10a 32ff 	add.w	r2, sl, #4294967295
    5bbc:	eb0a 0004 	add.w	r0, sl, r4
    5bc0:	9600      	str	r6, [sp, #0]
    5bc2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    5bc6:	1aab      	subs	r3, r5, r2
    5bc8:	3b01      	subs	r3, #1
    5bca:	4453      	add	r3, sl
    5bcc:	4282      	cmp	r2, r0
    5bce:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    5bd2:	d1f6      	bne.n	5bc2 <two_way_long_needle+0x3e>
    5bd4:	9905      	ldr	r1, [sp, #20]
    5bd6:	465a      	mov	r2, fp
    5bd8:	4451      	add	r1, sl
    5bda:	4650      	mov	r0, sl
    5bdc:	f001 fb50 	bl	7280 <memcmp>
    5be0:	2800      	cmp	r0, #0
    5be2:	d16f      	bne.n	5cc4 <two_way_long_needle+0x140>
    5be4:	f10b 33ff 	add.w	r3, fp, #4294967295
    5be8:	9303      	str	r3, [sp, #12]
    5bea:	f1cb 0301 	rsb	r3, fp, #1
    5bee:	4680      	mov	r8, r0
    5bf0:	4606      	mov	r6, r0
    5bf2:	9301      	str	r3, [sp, #4]
    5bf4:	eb09 0e06 	add.w	lr, r9, r6
    5bf8:	9a00      	ldr	r2, [sp, #0]
    5bfa:	f81e 3004 	ldrb.w	r3, [lr, r4]
    5bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c02:	b1db      	cbz	r3, 5c3c <two_way_long_needle+0xb8>
    5c04:	f1b8 0f00 	cmp.w	r8, #0
    5c08:	d003      	beq.n	5c12 <two_way_long_needle+0x8e>
    5c0a:	9a05      	ldr	r2, [sp, #20]
    5c0c:	429a      	cmp	r2, r3
    5c0e:	d900      	bls.n	5c12 <two_way_long_needle+0x8e>
    5c10:	1aab      	subs	r3, r5, r2
    5c12:	441e      	add	r6, r3
    5c14:	f04f 0800 	mov.w	r8, #0
    5c18:	1b7b      	subs	r3, r7, r5
    5c1a:	429e      	cmp	r6, r3
    5c1c:	d9ea      	bls.n	5bf4 <two_way_long_needle+0x70>
    5c1e:	eb09 0007 	add.w	r0, r9, r7
    5c22:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    5c26:	f001 fb5b 	bl	72e0 <strnlen>
    5c2a:	4407      	add	r7, r0
    5c2c:	1b7b      	subs	r3, r7, r5
    5c2e:	429e      	cmp	r6, r3
    5c30:	d9e0      	bls.n	5bf4 <two_way_long_needle+0x70>
    5c32:	2000      	movs	r0, #0
    5c34:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    5c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c3c:	45c3      	cmp	fp, r8
    5c3e:	465b      	mov	r3, fp
    5c40:	bf38      	it	cc
    5c42:	4643      	movcc	r3, r8
    5c44:	42a3      	cmp	r3, r4
    5c46:	d210      	bcs.n	5c6a <two_way_long_needle+0xe6>
    5c48:	1e59      	subs	r1, r3, #1
    5c4a:	18f2      	adds	r2, r6, r3
    5c4c:	4451      	add	r1, sl
    5c4e:	444a      	add	r2, r9
    5c50:	e002      	b.n	5c58 <two_way_long_needle+0xd4>
    5c52:	3301      	adds	r3, #1
    5c54:	42a3      	cmp	r3, r4
    5c56:	d208      	bcs.n	5c6a <two_way_long_needle+0xe6>
    5c58:	f812 0b01 	ldrb.w	r0, [r2], #1
    5c5c:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    5c60:	4584      	cmp	ip, r0
    5c62:	d0f6      	beq.n	5c52 <two_way_long_needle+0xce>
    5c64:	9a01      	ldr	r2, [sp, #4]
    5c66:	4416      	add	r6, r2
    5c68:	e7d3      	b.n	5c12 <two_way_long_needle+0x8e>
    5c6a:	45c3      	cmp	fp, r8
    5c6c:	9b03      	ldr	r3, [sp, #12]
    5c6e:	d97e      	bls.n	5d6e <two_way_long_needle+0x1ea>
    5c70:	eb06 020b 	add.w	r2, r6, fp
    5c74:	444a      	add	r2, r9
    5c76:	eb0a 010b 	add.w	r1, sl, fp
    5c7a:	9602      	str	r6, [sp, #8]
    5c7c:	e002      	b.n	5c84 <two_way_long_needle+0x100>
    5c7e:	4543      	cmp	r3, r8
    5c80:	d015      	beq.n	5cae <two_way_long_needle+0x12a>
    5c82:	4603      	mov	r3, r0
    5c84:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    5c88:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    5c8c:	4286      	cmp	r6, r0
    5c8e:	f103 0c01 	add.w	ip, r3, #1
    5c92:	f103 30ff 	add.w	r0, r3, #4294967295
    5c96:	d0f2      	beq.n	5c7e <two_way_long_needle+0xfa>
    5c98:	9e02      	ldr	r6, [sp, #8]
    5c9a:	4663      	mov	r3, ip
    5c9c:	f108 0801 	add.w	r8, r8, #1
    5ca0:	4598      	cmp	r8, r3
    5ca2:	d80a      	bhi.n	5cba <two_way_long_needle+0x136>
    5ca4:	9b05      	ldr	r3, [sp, #20]
    5ca6:	441e      	add	r6, r3
    5ca8:	eba5 0803 	sub.w	r8, r5, r3
    5cac:	e7b4      	b.n	5c18 <two_way_long_needle+0x94>
    5cae:	4643      	mov	r3, r8
    5cb0:	f108 0801 	add.w	r8, r8, #1
    5cb4:	4598      	cmp	r8, r3
    5cb6:	9e02      	ldr	r6, [sp, #8]
    5cb8:	d9f4      	bls.n	5ca4 <two_way_long_needle+0x120>
    5cba:	4670      	mov	r0, lr
    5cbc:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    5cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cc4:	eba5 030b 	sub.w	r3, r5, fp
    5cc8:	455b      	cmp	r3, fp
    5cca:	bf38      	it	cc
    5ccc:	465b      	movcc	r3, fp
    5cce:	3301      	adds	r3, #1
    5cd0:	9305      	str	r3, [sp, #20]
    5cd2:	f10b 33ff 	add.w	r3, fp, #4294967295
    5cd6:	9301      	str	r3, [sp, #4]
    5cd8:	f1cb 0301 	rsb	r3, fp, #1
    5cdc:	2600      	movs	r6, #0
    5cde:	9302      	str	r3, [sp, #8]
    5ce0:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    5ce4:	eb09 0106 	add.w	r1, r9, r6
    5ce8:	9a00      	ldr	r2, [sp, #0]
    5cea:	5d0b      	ldrb	r3, [r1, r4]
    5cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cf0:	b16b      	cbz	r3, 5d0e <two_way_long_needle+0x18a>
    5cf2:	441e      	add	r6, r3
    5cf4:	1b7b      	subs	r3, r7, r5
    5cf6:	42b3      	cmp	r3, r6
    5cf8:	d2f4      	bcs.n	5ce4 <two_way_long_needle+0x160>
    5cfa:	eb09 0007 	add.w	r0, r9, r7
    5cfe:	4641      	mov	r1, r8
    5d00:	f001 faee 	bl	72e0 <strnlen>
    5d04:	4407      	add	r7, r0
    5d06:	1b7b      	subs	r3, r7, r5
    5d08:	42b3      	cmp	r3, r6
    5d0a:	d2eb      	bcs.n	5ce4 <two_way_long_needle+0x160>
    5d0c:	e791      	b.n	5c32 <two_way_long_needle+0xae>
    5d0e:	45a3      	cmp	fp, r4
    5d10:	d214      	bcs.n	5d3c <two_way_long_needle+0x1b8>
    5d12:	9b01      	ldr	r3, [sp, #4]
    5d14:	eb0b 0206 	add.w	r2, fp, r6
    5d18:	eb0a 0c03 	add.w	ip, sl, r3
    5d1c:	444a      	add	r2, r9
    5d1e:	465b      	mov	r3, fp
    5d20:	e002      	b.n	5d28 <two_way_long_needle+0x1a4>
    5d22:	3301      	adds	r3, #1
    5d24:	42a3      	cmp	r3, r4
    5d26:	d209      	bcs.n	5d3c <two_way_long_needle+0x1b8>
    5d28:	f812 0b01 	ldrb.w	r0, [r2], #1
    5d2c:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    5d30:	4586      	cmp	lr, r0
    5d32:	d0f6      	beq.n	5d22 <two_way_long_needle+0x19e>
    5d34:	9a02      	ldr	r2, [sp, #8]
    5d36:	4416      	add	r6, r2
    5d38:	441e      	add	r6, r3
    5d3a:	e7db      	b.n	5cf4 <two_way_long_needle+0x170>
    5d3c:	f1bb 0f00 	cmp.w	fp, #0
    5d40:	d010      	beq.n	5d64 <two_way_long_needle+0x1e0>
    5d42:	eb0b 0006 	add.w	r0, fp, r6
    5d46:	4448      	add	r0, r9
    5d48:	eb0a 020b 	add.w	r2, sl, fp
    5d4c:	e001      	b.n	5d52 <two_way_long_needle+0x1ce>
    5d4e:	4553      	cmp	r3, sl
    5d50:	d008      	beq.n	5d64 <two_way_long_needle+0x1e0>
    5d52:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    5d56:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    5d5a:	45e6      	cmp	lr, ip
    5d5c:	4613      	mov	r3, r2
    5d5e:	d0f6      	beq.n	5d4e <two_way_long_needle+0x1ca>
    5d60:	9b05      	ldr	r3, [sp, #20]
    5d62:	e7c6      	b.n	5cf2 <two_way_long_needle+0x16e>
    5d64:	4608      	mov	r0, r1
    5d66:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    5d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d6e:	465b      	mov	r3, fp
    5d70:	e794      	b.n	5c9c <two_way_long_needle+0x118>
    5d72:	ab06      	add	r3, sp, #24
    5d74:	f04f 34ff 	mov.w	r4, #4294967295
    5d78:	9300      	str	r3, [sp, #0]
    5d7a:	e72b      	b.n	5bd4 <two_way_long_needle+0x50>

00005d7c <strstr>:
    5d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d80:	460d      	mov	r5, r1
    5d82:	7809      	ldrb	r1, [r1, #0]
    5d84:	b090      	sub	sp, #64	; 0x40
    5d86:	4604      	mov	r4, r0
    5d88:	2900      	cmp	r1, #0
    5d8a:	d054      	beq.n	5e36 <strstr+0xba>
    5d8c:	786a      	ldrb	r2, [r5, #1]
    5d8e:	2a00      	cmp	r2, #0
    5d90:	f000 8083 	beq.w	5e9a <strstr+0x11e>
    5d94:	78ab      	ldrb	r3, [r5, #2]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d051      	beq.n	5e3e <strstr+0xc2>
    5d9a:	78e8      	ldrb	r0, [r5, #3]
    5d9c:	682e      	ldr	r6, [r5, #0]
    5d9e:	2800      	cmp	r0, #0
    5da0:	f000 8082 	beq.w	5ea8 <strstr+0x12c>
    5da4:	792b      	ldrb	r3, [r5, #4]
    5da6:	2b00      	cmp	r3, #0
    5da8:	d057      	beq.n	5e5a <strstr+0xde>
    5daa:	4628      	mov	r0, r5
    5dac:	f000 fb08 	bl	63c0 <strlen>
    5db0:	4606      	mov	r6, r0
    5db2:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    5db6:	4620      	mov	r0, r4
    5db8:	f001 fa92 	bl	72e0 <strnlen>
    5dbc:	4286      	cmp	r6, r0
    5dbe:	d85b      	bhi.n	5e78 <strstr+0xfc>
    5dc0:	2efe      	cmp	r6, #254	; 0xfe
    5dc2:	f200 8086 	bhi.w	5ed2 <strstr+0x156>
    5dc6:	1b80      	subs	r0, r0, r6
    5dc8:	1827      	adds	r7, r4, r0
    5dca:	2240      	movs	r2, #64	; 0x40
    5dcc:	1c71      	adds	r1, r6, #1
    5dce:	4668      	mov	r0, sp
    5dd0:	f7ff fd8a 	bl	58e8 <memset>
    5dd4:	b17e      	cbz	r6, 5df6 <strstr+0x7a>
    5dd6:	1e6a      	subs	r2, r5, #1
    5dd8:	fa5f fc86 	uxtb.w	ip, r6
    5ddc:	1990      	adds	r0, r2, r6
    5dde:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    5de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5de6:	3340      	adds	r3, #64	; 0x40
    5de8:	446b      	add	r3, sp
    5dea:	1aa9      	subs	r1, r5, r2
    5dec:	4461      	add	r1, ip
    5dee:	4282      	cmp	r2, r0
    5df0:	f803 1c40 	strb.w	r1, [r3, #-64]
    5df4:	d1f3      	bne.n	5dde <strstr+0x62>
    5df6:	3c01      	subs	r4, #1
    5df8:	5da3      	ldrb	r3, [r4, r6]
    5dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5dfe:	3340      	adds	r3, #64	; 0x40
    5e00:	446b      	add	r3, sp
    5e02:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    5e06:	441c      	add	r4, r3
    5e08:	42a7      	cmp	r7, r4
    5e0a:	d203      	bcs.n	5e14 <strstr+0x98>
    5e0c:	e039      	b.n	5e82 <strstr+0x106>
    5e0e:	4444      	add	r4, r8
    5e10:	42a7      	cmp	r7, r4
    5e12:	d336      	bcc.n	5e82 <strstr+0x106>
    5e14:	f814 c006 	ldrb.w	ip, [r4, r6]
    5e18:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    5e1c:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    5e20:	eb0d 0c03 	add.w	ip, sp, r3
    5e24:	4620      	mov	r0, r4
    5e26:	4632      	mov	r2, r6
    5e28:	4629      	mov	r1, r5
    5e2a:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    5e2e:	f001 fa27 	bl	7280 <memcmp>
    5e32:	2800      	cmp	r0, #0
    5e34:	d1eb      	bne.n	5e0e <strstr+0x92>
    5e36:	4620      	mov	r0, r4
    5e38:	b010      	add	sp, #64	; 0x40
    5e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e3e:	7800      	ldrb	r0, [r0, #0]
    5e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    5e44:	e000      	b.n	5e48 <strstr+0xcc>
    5e46:	460c      	mov	r4, r1
    5e48:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    5e4c:	1c61      	adds	r1, r4, #1
    5e4e:	b198      	cbz	r0, 5e78 <strstr+0xfc>
    5e50:	429a      	cmp	r2, r3
    5e52:	7860      	ldrb	r0, [r4, #1]
    5e54:	d1f7      	bne.n	5e46 <strstr+0xca>
    5e56:	3c01      	subs	r4, #1
    5e58:	e7ed      	b.n	5e36 <strstr+0xba>
    5e5a:	7822      	ldrb	r2, [r4, #0]
    5e5c:	b162      	cbz	r2, 5e78 <strstr+0xfc>
    5e5e:	ba31      	rev	r1, r6
    5e60:	e001      	b.n	5e66 <strstr+0xea>
    5e62:	4299      	cmp	r1, r3
    5e64:	d01e      	beq.n	5ea4 <strstr+0x128>
    5e66:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5e6a:	4620      	mov	r0, r4
    5e6c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    5e70:	2a00      	cmp	r2, #0
    5e72:	d1f6      	bne.n	5e62 <strstr+0xe6>
    5e74:	4299      	cmp	r1, r3
    5e76:	d015      	beq.n	5ea4 <strstr+0x128>
    5e78:	2400      	movs	r4, #0
    5e7a:	4620      	mov	r0, r4
    5e7c:	b010      	add	sp, #64	; 0x40
    5e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e82:	5dbb      	ldrb	r3, [r7, r6]
    5e84:	19b8      	adds	r0, r7, r6
    5e86:	2b00      	cmp	r3, #0
    5e88:	d0f6      	beq.n	5e78 <strstr+0xfc>
    5e8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    5e8e:	f001 fa27 	bl	72e0 <strnlen>
    5e92:	4407      	add	r7, r0
    5e94:	42bc      	cmp	r4, r7
    5e96:	d9ae      	bls.n	5df6 <strstr+0x7a>
    5e98:	e7ee      	b.n	5e78 <strstr+0xfc>
    5e9a:	b010      	add	sp, #64	; 0x40
    5e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ea0:	f7ff bd74 	b.w	598c <strchr>
    5ea4:	1ec4      	subs	r4, r0, #3
    5ea6:	e7c6      	b.n	5e36 <strstr+0xba>
    5ea8:	0412      	lsls	r2, r2, #16
    5eaa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    5eae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    5eb2:	7821      	ldrb	r1, [r4, #0]
    5eb4:	4602      	mov	r2, r0
    5eb6:	e000      	b.n	5eba <strstr+0x13e>
    5eb8:	462c      	mov	r4, r5
    5eba:	ea41 0002 	orr.w	r0, r1, r2
    5ebe:	1c65      	adds	r5, r4, #1
    5ec0:	0202      	lsls	r2, r0, #8
    5ec2:	2900      	cmp	r1, #0
    5ec4:	d0d8      	beq.n	5e78 <strstr+0xfc>
    5ec6:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    5eca:	7861      	ldrb	r1, [r4, #1]
    5ecc:	d1f4      	bne.n	5eb8 <strstr+0x13c>
    5ece:	3c02      	subs	r4, #2
    5ed0:	e7b1      	b.n	5e36 <strstr+0xba>
    5ed2:	4601      	mov	r1, r0
    5ed4:	4633      	mov	r3, r6
    5ed6:	462a      	mov	r2, r5
    5ed8:	4620      	mov	r0, r4
    5eda:	b010      	add	sp, #64	; 0x40
    5edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ee0:	f7ff be50 	b.w	5b84 <two_way_long_needle>

00005ee4 <__locale_mb_cur_max>:
    5ee4:	4b01      	ldr	r3, [pc, #4]	; (5eec <__locale_mb_cur_max+0x8>)
    5ee6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    5eea:	4770      	bx	lr
    5eec:	200011cc 	.word	0x200011cc

00005ef0 <_close_r>:
    5ef0:	b538      	push	{r3, r4, r5, lr}
    5ef2:	4d07      	ldr	r5, [pc, #28]	; (5f10 <_close_r+0x20>)
    5ef4:	2200      	movs	r2, #0
    5ef6:	4604      	mov	r4, r0
    5ef8:	4608      	mov	r0, r1
    5efa:	602a      	str	r2, [r5, #0]
    5efc:	f7fc ffb0 	bl	2e60 <_close>
    5f00:	1c43      	adds	r3, r0, #1
    5f02:	d000      	beq.n	5f06 <_close_r+0x16>
    5f04:	bd38      	pop	{r3, r4, r5, pc}
    5f06:	682b      	ldr	r3, [r5, #0]
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d0fb      	beq.n	5f04 <_close_r+0x14>
    5f0c:	6023      	str	r3, [r4, #0]
    5f0e:	bd38      	pop	{r3, r4, r5, pc}
    5f10:	2000205c 	.word	0x2000205c

00005f14 <_lseek_r>:
    5f14:	b538      	push	{r3, r4, r5, lr}
    5f16:	460c      	mov	r4, r1
    5f18:	4d08      	ldr	r5, [pc, #32]	; (5f3c <_lseek_r+0x28>)
    5f1a:	4684      	mov	ip, r0
    5f1c:	4611      	mov	r1, r2
    5f1e:	4620      	mov	r0, r4
    5f20:	461a      	mov	r2, r3
    5f22:	2300      	movs	r3, #0
    5f24:	602b      	str	r3, [r5, #0]
    5f26:	4664      	mov	r4, ip
    5f28:	f7fc ffa6 	bl	2e78 <_lseek>
    5f2c:	1c43      	adds	r3, r0, #1
    5f2e:	d000      	beq.n	5f32 <_lseek_r+0x1e>
    5f30:	bd38      	pop	{r3, r4, r5, pc}
    5f32:	682b      	ldr	r3, [r5, #0]
    5f34:	2b00      	cmp	r3, #0
    5f36:	d0fb      	beq.n	5f30 <_lseek_r+0x1c>
    5f38:	6023      	str	r3, [r4, #0]
    5f3a:	bd38      	pop	{r3, r4, r5, pc}
    5f3c:	2000205c 	.word	0x2000205c

00005f40 <_read_r>:
    5f40:	b538      	push	{r3, r4, r5, lr}
    5f42:	460c      	mov	r4, r1
    5f44:	4d08      	ldr	r5, [pc, #32]	; (5f68 <_read_r+0x28>)
    5f46:	4684      	mov	ip, r0
    5f48:	4611      	mov	r1, r2
    5f4a:	4620      	mov	r0, r4
    5f4c:	461a      	mov	r2, r3
    5f4e:	2300      	movs	r3, #0
    5f50:	602b      	str	r3, [r5, #0]
    5f52:	4664      	mov	r4, ip
    5f54:	f7fc ff82 	bl	2e5c <_read>
    5f58:	1c43      	adds	r3, r0, #1
    5f5a:	d000      	beq.n	5f5e <_read_r+0x1e>
    5f5c:	bd38      	pop	{r3, r4, r5, pc}
    5f5e:	682b      	ldr	r3, [r5, #0]
    5f60:	2b00      	cmp	r3, #0
    5f62:	d0fb      	beq.n	5f5c <_read_r+0x1c>
    5f64:	6023      	str	r3, [r4, #0]
    5f66:	bd38      	pop	{r3, r4, r5, pc}
    5f68:	2000205c 	.word	0x2000205c

00005f6c <_sbrk_r>:
    5f6c:	b538      	push	{r3, r4, r5, lr}
    5f6e:	4d07      	ldr	r5, [pc, #28]	; (5f8c <_sbrk_r+0x20>)
    5f70:	2200      	movs	r2, #0
    5f72:	4604      	mov	r4, r0
    5f74:	4608      	mov	r0, r1
    5f76:	602a      	str	r2, [r5, #0]
    5f78:	f7fc ff56 	bl	2e28 <_sbrk>
    5f7c:	1c43      	adds	r3, r0, #1
    5f7e:	d000      	beq.n	5f82 <_sbrk_r+0x16>
    5f80:	bd38      	pop	{r3, r4, r5, pc}
    5f82:	682b      	ldr	r3, [r5, #0]
    5f84:	2b00      	cmp	r3, #0
    5f86:	d0fb      	beq.n	5f80 <_sbrk_r+0x14>
    5f88:	6023      	str	r3, [r4, #0]
    5f8a:	bd38      	pop	{r3, r4, r5, pc}
    5f8c:	2000205c 	.word	0x2000205c

00005f90 <_write_r>:
    5f90:	b538      	push	{r3, r4, r5, lr}
    5f92:	460c      	mov	r4, r1
    5f94:	4d08      	ldr	r5, [pc, #32]	; (5fb8 <_write_r+0x28>)
    5f96:	4684      	mov	ip, r0
    5f98:	4611      	mov	r1, r2
    5f9a:	4620      	mov	r0, r4
    5f9c:	461a      	mov	r2, r3
    5f9e:	2300      	movs	r3, #0
    5fa0:	602b      	str	r3, [r5, #0]
    5fa2:	4664      	mov	r4, ip
    5fa4:	f7fb ff9e 	bl	1ee4 <_write>
    5fa8:	1c43      	adds	r3, r0, #1
    5faa:	d000      	beq.n	5fae <_write_r+0x1e>
    5fac:	bd38      	pop	{r3, r4, r5, pc}
    5fae:	682b      	ldr	r3, [r5, #0]
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d0fb      	beq.n	5fac <_write_r+0x1c>
    5fb4:	6023      	str	r3, [r4, #0]
    5fb6:	bd38      	pop	{r3, r4, r5, pc}
    5fb8:	2000205c 	.word	0x2000205c

00005fbc <__errno>:
    5fbc:	4b01      	ldr	r3, [pc, #4]	; (5fc4 <__errno+0x8>)
    5fbe:	6818      	ldr	r0, [r3, #0]
    5fc0:	4770      	bx	lr
    5fc2:	bf00      	nop
    5fc4:	20001754 	.word	0x20001754

00005fc8 <__libc_init_array>:
    5fc8:	b570      	push	{r4, r5, r6, lr}
    5fca:	4e0d      	ldr	r6, [pc, #52]	; (6000 <__libc_init_array+0x38>)
    5fcc:	4d0d      	ldr	r5, [pc, #52]	; (6004 <__libc_init_array+0x3c>)
    5fce:	1b76      	subs	r6, r6, r5
    5fd0:	10b6      	asrs	r6, r6, #2
    5fd2:	d006      	beq.n	5fe2 <__libc_init_array+0x1a>
    5fd4:	2400      	movs	r4, #0
    5fd6:	f855 3b04 	ldr.w	r3, [r5], #4
    5fda:	3401      	adds	r4, #1
    5fdc:	4798      	blx	r3
    5fde:	42a6      	cmp	r6, r4
    5fe0:	d1f9      	bne.n	5fd6 <__libc_init_array+0xe>
    5fe2:	4e09      	ldr	r6, [pc, #36]	; (6008 <__libc_init_array+0x40>)
    5fe4:	4d09      	ldr	r5, [pc, #36]	; (600c <__libc_init_array+0x44>)
    5fe6:	1b76      	subs	r6, r6, r5
    5fe8:	f003 fdc2 	bl	9b70 <___init_veneer>
    5fec:	10b6      	asrs	r6, r6, #2
    5fee:	d006      	beq.n	5ffe <__libc_init_array+0x36>
    5ff0:	2400      	movs	r4, #0
    5ff2:	f855 3b04 	ldr.w	r3, [r5], #4
    5ff6:	3401      	adds	r4, #1
    5ff8:	4798      	blx	r3
    5ffa:	42a6      	cmp	r6, r4
    5ffc:	d1f9      	bne.n	5ff2 <__libc_init_array+0x2a>
    5ffe:	bd70      	pop	{r4, r5, r6, pc}
    6000:	60002000 	.word	0x60002000
    6004:	60002000 	.word	0x60002000
    6008:	60002008 	.word	0x60002008
    600c:	60002000 	.word	0x60002000

00006010 <__retarget_lock_init_recursive>:
    6010:	4770      	bx	lr
    6012:	bf00      	nop

00006014 <__retarget_lock_close_recursive>:
    6014:	4770      	bx	lr
    6016:	bf00      	nop

00006018 <__retarget_lock_acquire_recursive>:
    6018:	4770      	bx	lr
    601a:	bf00      	nop

0000601c <__retarget_lock_release_recursive>:
    601c:	4770      	bx	lr
    601e:	bf00      	nop
    6020:	eba2 0003 	sub.w	r0, r2, r3
    6024:	4770      	bx	lr
    6026:	bf00      	nop

00006028 <strcmp>:
    6028:	7802      	ldrb	r2, [r0, #0]
    602a:	780b      	ldrb	r3, [r1, #0]
    602c:	2a01      	cmp	r2, #1
    602e:	bf28      	it	cs
    6030:	429a      	cmpcs	r2, r3
    6032:	d1f5      	bne.n	6020 <__retarget_lock_release_recursive+0x4>
    6034:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    6038:	ea40 0401 	orr.w	r4, r0, r1
    603c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6040:	f06f 0c00 	mvn.w	ip, #0
    6044:	ea4f 7244 	mov.w	r2, r4, lsl #29
    6048:	b312      	cbz	r2, 6090 <strcmp+0x68>
    604a:	ea80 0401 	eor.w	r4, r0, r1
    604e:	f014 0f07 	tst.w	r4, #7
    6052:	d16a      	bne.n	612a <strcmp+0x102>
    6054:	f000 0407 	and.w	r4, r0, #7
    6058:	f020 0007 	bic.w	r0, r0, #7
    605c:	f004 0503 	and.w	r5, r4, #3
    6060:	f021 0107 	bic.w	r1, r1, #7
    6064:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6068:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    606c:	f014 0f04 	tst.w	r4, #4
    6070:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6074:	fa0c f405 	lsl.w	r4, ip, r5
    6078:	ea62 0204 	orn	r2, r2, r4
    607c:	ea66 0604 	orn	r6, r6, r4
    6080:	d00a      	beq.n	6098 <strcmp+0x70>
    6082:	ea63 0304 	orn	r3, r3, r4
    6086:	4662      	mov	r2, ip
    6088:	ea67 0704 	orn	r7, r7, r4
    608c:	4666      	mov	r6, ip
    608e:	e003      	b.n	6098 <strcmp+0x70>
    6090:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    6094:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6098:	fa82 f54c 	uadd8	r5, r2, ip
    609c:	ea82 0406 	eor.w	r4, r2, r6
    60a0:	faa4 f48c 	sel	r4, r4, ip
    60a4:	bb6c      	cbnz	r4, 6102 <strcmp+0xda>
    60a6:	fa83 f54c 	uadd8	r5, r3, ip
    60aa:	ea83 0507 	eor.w	r5, r3, r7
    60ae:	faa5 f58c 	sel	r5, r5, ip
    60b2:	b995      	cbnz	r5, 60da <strcmp+0xb2>
    60b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    60b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    60bc:	fa82 f54c 	uadd8	r5, r2, ip
    60c0:	ea82 0406 	eor.w	r4, r2, r6
    60c4:	faa4 f48c 	sel	r4, r4, ip
    60c8:	fa83 f54c 	uadd8	r5, r3, ip
    60cc:	ea83 0507 	eor.w	r5, r3, r7
    60d0:	faa5 f58c 	sel	r5, r5, ip
    60d4:	4325      	orrs	r5, r4
    60d6:	d0db      	beq.n	6090 <strcmp+0x68>
    60d8:	b99c      	cbnz	r4, 6102 <strcmp+0xda>
    60da:	ba2d      	rev	r5, r5
    60dc:	fab5 f485 	clz	r4, r5
    60e0:	f024 0407 	bic.w	r4, r4, #7
    60e4:	fa27 f104 	lsr.w	r1, r7, r4
    60e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    60ec:	fa23 f304 	lsr.w	r3, r3, r4
    60f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    60f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    60f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    60fc:	eba0 0001 	sub.w	r0, r0, r1
    6100:	4770      	bx	lr
    6102:	ba24      	rev	r4, r4
    6104:	fab4 f484 	clz	r4, r4
    6108:	f024 0407 	bic.w	r4, r4, #7
    610c:	fa26 f104 	lsr.w	r1, r6, r4
    6110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    6114:	fa22 f204 	lsr.w	r2, r2, r4
    6118:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    611c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6120:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6124:	eba0 0001 	sub.w	r0, r0, r1
    6128:	4770      	bx	lr
    612a:	f014 0f03 	tst.w	r4, #3
    612e:	d13c      	bne.n	61aa <strcmp+0x182>
    6130:	f010 0403 	ands.w	r4, r0, #3
    6134:	d128      	bne.n	6188 <strcmp+0x160>
    6136:	f850 2b08 	ldr.w	r2, [r0], #8
    613a:	f851 3b08 	ldr.w	r3, [r1], #8
    613e:	fa82 f54c 	uadd8	r5, r2, ip
    6142:	ea82 0503 	eor.w	r5, r2, r3
    6146:	faa5 f58c 	sel	r5, r5, ip
    614a:	b95d      	cbnz	r5, 6164 <strcmp+0x13c>
    614c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6150:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6154:	fa82 f54c 	uadd8	r5, r2, ip
    6158:	ea82 0503 	eor.w	r5, r2, r3
    615c:	faa5 f58c 	sel	r5, r5, ip
    6160:	2d00      	cmp	r5, #0
    6162:	d0e8      	beq.n	6136 <strcmp+0x10e>
    6164:	ba2d      	rev	r5, r5
    6166:	fab5 f485 	clz	r4, r5
    616a:	f024 0407 	bic.w	r4, r4, #7
    616e:	fa23 f104 	lsr.w	r1, r3, r4
    6172:	fa22 f204 	lsr.w	r2, r2, r4
    6176:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    617a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    617e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6182:	eba0 0001 	sub.w	r0, r0, r1
    6186:	4770      	bx	lr
    6188:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    618c:	f020 0003 	bic.w	r0, r0, #3
    6190:	f850 2b08 	ldr.w	r2, [r0], #8
    6194:	f021 0103 	bic.w	r1, r1, #3
    6198:	f851 3b08 	ldr.w	r3, [r1], #8
    619c:	fa0c f404 	lsl.w	r4, ip, r4
    61a0:	ea62 0204 	orn	r2, r2, r4
    61a4:	ea63 0304 	orn	r3, r3, r4
    61a8:	e7c9      	b.n	613e <strcmp+0x116>
    61aa:	f010 0403 	ands.w	r4, r0, #3
    61ae:	d01a      	beq.n	61e6 <strcmp+0x1be>
    61b0:	eba1 0104 	sub.w	r1, r1, r4
    61b4:	f020 0003 	bic.w	r0, r0, #3
    61b8:	07e4      	lsls	r4, r4, #31
    61ba:	f850 2b04 	ldr.w	r2, [r0], #4
    61be:	d006      	beq.n	61ce <strcmp+0x1a6>
    61c0:	d20f      	bcs.n	61e2 <strcmp+0x1ba>
    61c2:	788b      	ldrb	r3, [r1, #2]
    61c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    61c8:	1ae4      	subs	r4, r4, r3
    61ca:	d106      	bne.n	61da <strcmp+0x1b2>
    61cc:	b12b      	cbz	r3, 61da <strcmp+0x1b2>
    61ce:	78cb      	ldrb	r3, [r1, #3]
    61d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    61d4:	1ae4      	subs	r4, r4, r3
    61d6:	d100      	bne.n	61da <strcmp+0x1b2>
    61d8:	b91b      	cbnz	r3, 61e2 <strcmp+0x1ba>
    61da:	4620      	mov	r0, r4
    61dc:	f85d 4b10 	ldr.w	r4, [sp], #16
    61e0:	4770      	bx	lr
    61e2:	f101 0104 	add.w	r1, r1, #4
    61e6:	f850 2b04 	ldr.w	r2, [r0], #4
    61ea:	07cc      	lsls	r4, r1, #31
    61ec:	f021 0103 	bic.w	r1, r1, #3
    61f0:	f851 3b04 	ldr.w	r3, [r1], #4
    61f4:	d848      	bhi.n	6288 <strcmp+0x260>
    61f6:	d224      	bcs.n	6242 <strcmp+0x21a>
    61f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    61fc:	fa82 f54c 	uadd8	r5, r2, ip
    6200:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    6204:	faa5 f58c 	sel	r5, r5, ip
    6208:	d10a      	bne.n	6220 <strcmp+0x1f8>
    620a:	b965      	cbnz	r5, 6226 <strcmp+0x1fe>
    620c:	f851 3b04 	ldr.w	r3, [r1], #4
    6210:	ea84 0402 	eor.w	r4, r4, r2
    6214:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    6218:	d10e      	bne.n	6238 <strcmp+0x210>
    621a:	f850 2b04 	ldr.w	r2, [r0], #4
    621e:	e7eb      	b.n	61f8 <strcmp+0x1d0>
    6220:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6224:	e055      	b.n	62d2 <strcmp+0x2aa>
    6226:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    622a:	d14d      	bne.n	62c8 <strcmp+0x2a0>
    622c:	7808      	ldrb	r0, [r1, #0]
    622e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6232:	f1c0 0000 	rsb	r0, r0, #0
    6236:	4770      	bx	lr
    6238:	ea4f 6212 	mov.w	r2, r2, lsr #24
    623c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6240:	e047      	b.n	62d2 <strcmp+0x2aa>
    6242:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    6246:	fa82 f54c 	uadd8	r5, r2, ip
    624a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    624e:	faa5 f58c 	sel	r5, r5, ip
    6252:	d10a      	bne.n	626a <strcmp+0x242>
    6254:	b965      	cbnz	r5, 6270 <strcmp+0x248>
    6256:	f851 3b04 	ldr.w	r3, [r1], #4
    625a:	ea84 0402 	eor.w	r4, r4, r2
    625e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    6262:	d10c      	bne.n	627e <strcmp+0x256>
    6264:	f850 2b04 	ldr.w	r2, [r0], #4
    6268:	e7eb      	b.n	6242 <strcmp+0x21a>
    626a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    626e:	e030      	b.n	62d2 <strcmp+0x2aa>
    6270:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    6274:	d128      	bne.n	62c8 <strcmp+0x2a0>
    6276:	880b      	ldrh	r3, [r1, #0]
    6278:	ea4f 4212 	mov.w	r2, r2, lsr #16
    627c:	e029      	b.n	62d2 <strcmp+0x2aa>
    627e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    6282:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    6286:	e024      	b.n	62d2 <strcmp+0x2aa>
    6288:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    628c:	fa82 f54c 	uadd8	r5, r2, ip
    6290:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    6294:	faa5 f58c 	sel	r5, r5, ip
    6298:	d10a      	bne.n	62b0 <strcmp+0x288>
    629a:	b965      	cbnz	r5, 62b6 <strcmp+0x28e>
    629c:	f851 3b04 	ldr.w	r3, [r1], #4
    62a0:	ea84 0402 	eor.w	r4, r4, r2
    62a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    62a8:	d109      	bne.n	62be <strcmp+0x296>
    62aa:	f850 2b04 	ldr.w	r2, [r0], #4
    62ae:	e7eb      	b.n	6288 <strcmp+0x260>
    62b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    62b4:	e00d      	b.n	62d2 <strcmp+0x2aa>
    62b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    62ba:	d105      	bne.n	62c8 <strcmp+0x2a0>
    62bc:	680b      	ldr	r3, [r1, #0]
    62be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    62c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    62c6:	e004      	b.n	62d2 <strcmp+0x2aa>
    62c8:	f04f 0000 	mov.w	r0, #0
    62cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    62d0:	4770      	bx	lr
    62d2:	ba12      	rev	r2, r2
    62d4:	ba1b      	rev	r3, r3
    62d6:	fa82 f44c 	uadd8	r4, r2, ip
    62da:	ea82 0403 	eor.w	r4, r2, r3
    62de:	faa4 f58c 	sel	r5, r4, ip
    62e2:	fab5 f485 	clz	r4, r5
    62e6:	fa02 f204 	lsl.w	r2, r2, r4
    62ea:	fa03 f304 	lsl.w	r3, r3, r4
    62ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    62f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    62f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    62fa:	4770      	bx	lr

000062fc <strcpy>:
    62fc:	ea80 0201 	eor.w	r2, r0, r1
    6300:	4684      	mov	ip, r0
    6302:	f012 0f03 	tst.w	r2, #3
    6306:	d14f      	bne.n	63a8 <strcpy+0xac>
    6308:	f011 0f03 	tst.w	r1, #3
    630c:	d132      	bne.n	6374 <strcpy+0x78>
    630e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6312:	f011 0f04 	tst.w	r1, #4
    6316:	f851 3b04 	ldr.w	r3, [r1], #4
    631a:	d00b      	beq.n	6334 <strcpy+0x38>
    631c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6320:	439a      	bics	r2, r3
    6322:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6326:	bf04      	itt	eq
    6328:	f84c 3b04 	streq.w	r3, [ip], #4
    632c:	f851 3b04 	ldreq.w	r3, [r1], #4
    6330:	d116      	bne.n	6360 <strcpy+0x64>
    6332:	bf00      	nop
    6334:	f851 4b04 	ldr.w	r4, [r1], #4
    6338:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    633c:	439a      	bics	r2, r3
    633e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6342:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6346:	d10b      	bne.n	6360 <strcpy+0x64>
    6348:	f84c 3b04 	str.w	r3, [ip], #4
    634c:	43a2      	bics	r2, r4
    634e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6352:	bf04      	itt	eq
    6354:	f851 3b04 	ldreq.w	r3, [r1], #4
    6358:	f84c 4b04 	streq.w	r4, [ip], #4
    635c:	d0ea      	beq.n	6334 <strcpy+0x38>
    635e:	4623      	mov	r3, r4
    6360:	f80c 3b01 	strb.w	r3, [ip], #1
    6364:	f013 0fff 	tst.w	r3, #255	; 0xff
    6368:	ea4f 2333 	mov.w	r3, r3, ror #8
    636c:	d1f8      	bne.n	6360 <strcpy+0x64>
    636e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6372:	4770      	bx	lr
    6374:	f011 0f01 	tst.w	r1, #1
    6378:	d006      	beq.n	6388 <strcpy+0x8c>
    637a:	f811 2b01 	ldrb.w	r2, [r1], #1
    637e:	f80c 2b01 	strb.w	r2, [ip], #1
    6382:	2a00      	cmp	r2, #0
    6384:	bf08      	it	eq
    6386:	4770      	bxeq	lr
    6388:	f011 0f02 	tst.w	r1, #2
    638c:	d0bf      	beq.n	630e <strcpy+0x12>
    638e:	f831 2b02 	ldrh.w	r2, [r1], #2
    6392:	f012 0fff 	tst.w	r2, #255	; 0xff
    6396:	bf16      	itet	ne
    6398:	f82c 2b02 	strhne.w	r2, [ip], #2
    639c:	f88c 2000 	strbeq.w	r2, [ip]
    63a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    63a4:	d1b3      	bne.n	630e <strcpy+0x12>
    63a6:	4770      	bx	lr
    63a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    63ac:	f80c 2b01 	strb.w	r2, [ip], #1
    63b0:	2a00      	cmp	r2, #0
    63b2:	d1f9      	bne.n	63a8 <strcpy+0xac>
    63b4:	4770      	bx	lr
    63b6:	bf00      	nop
	...

000063c0 <strlen>:
    63c0:	f890 f000 	pld	[r0]
    63c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    63c8:	f020 0107 	bic.w	r1, r0, #7
    63cc:	f06f 0c00 	mvn.w	ip, #0
    63d0:	f010 0407 	ands.w	r4, r0, #7
    63d4:	f891 f020 	pld	[r1, #32]
    63d8:	f040 8049 	bne.w	646e <strlen+0xae>
    63dc:	f04f 0400 	mov.w	r4, #0
    63e0:	f06f 0007 	mvn.w	r0, #7
    63e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    63e8:	f891 f040 	pld	[r1, #64]	; 0x40
    63ec:	f100 0008 	add.w	r0, r0, #8
    63f0:	fa82 f24c 	uadd8	r2, r2, ip
    63f4:	faa4 f28c 	sel	r2, r4, ip
    63f8:	fa83 f34c 	uadd8	r3, r3, ip
    63fc:	faa2 f38c 	sel	r3, r2, ip
    6400:	bb4b      	cbnz	r3, 6456 <strlen+0x96>
    6402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6406:	fa82 f24c 	uadd8	r2, r2, ip
    640a:	f100 0008 	add.w	r0, r0, #8
    640e:	faa4 f28c 	sel	r2, r4, ip
    6412:	fa83 f34c 	uadd8	r3, r3, ip
    6416:	faa2 f38c 	sel	r3, r2, ip
    641a:	b9e3      	cbnz	r3, 6456 <strlen+0x96>
    641c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6420:	fa82 f24c 	uadd8	r2, r2, ip
    6424:	f100 0008 	add.w	r0, r0, #8
    6428:	faa4 f28c 	sel	r2, r4, ip
    642c:	fa83 f34c 	uadd8	r3, r3, ip
    6430:	faa2 f38c 	sel	r3, r2, ip
    6434:	b97b      	cbnz	r3, 6456 <strlen+0x96>
    6436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    643a:	f101 0120 	add.w	r1, r1, #32
    643e:	fa82 f24c 	uadd8	r2, r2, ip
    6442:	f100 0008 	add.w	r0, r0, #8
    6446:	faa4 f28c 	sel	r2, r4, ip
    644a:	fa83 f34c 	uadd8	r3, r3, ip
    644e:	faa2 f38c 	sel	r3, r2, ip
    6452:	2b00      	cmp	r3, #0
    6454:	d0c6      	beq.n	63e4 <strlen+0x24>
    6456:	2a00      	cmp	r2, #0
    6458:	bf04      	itt	eq
    645a:	3004      	addeq	r0, #4
    645c:	461a      	moveq	r2, r3
    645e:	ba12      	rev	r2, r2
    6460:	fab2 f282 	clz	r2, r2
    6464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    6468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    646c:	4770      	bx	lr
    646e:	e9d1 2300 	ldrd	r2, r3, [r1]
    6472:	f004 0503 	and.w	r5, r4, #3
    6476:	f1c4 0000 	rsb	r0, r4, #0
    647a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    647e:	f014 0f04 	tst.w	r4, #4
    6482:	f891 f040 	pld	[r1, #64]	; 0x40
    6486:	fa0c f505 	lsl.w	r5, ip, r5
    648a:	ea62 0205 	orn	r2, r2, r5
    648e:	bf1c      	itt	ne
    6490:	ea63 0305 	ornne	r3, r3, r5
    6494:	4662      	movne	r2, ip
    6496:	f04f 0400 	mov.w	r4, #0
    649a:	e7a9      	b.n	63f0 <strlen+0x30>

0000649c <__register_exitproc>:
    649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6520 <__register_exitproc+0x84>
    64a4:	4606      	mov	r6, r0
    64a6:	f8da 0000 	ldr.w	r0, [sl]
    64aa:	4698      	mov	r8, r3
    64ac:	460f      	mov	r7, r1
    64ae:	4691      	mov	r9, r2
    64b0:	f7ff fdb2 	bl	6018 <__retarget_lock_acquire_recursive>
    64b4:	4b18      	ldr	r3, [pc, #96]	; (6518 <__register_exitproc+0x7c>)
    64b6:	681c      	ldr	r4, [r3, #0]
    64b8:	b324      	cbz	r4, 6504 <__register_exitproc+0x68>
    64ba:	6865      	ldr	r5, [r4, #4]
    64bc:	2d1f      	cmp	r5, #31
    64be:	dc24      	bgt.n	650a <__register_exitproc+0x6e>
    64c0:	b95e      	cbnz	r6, 64da <__register_exitproc+0x3e>
    64c2:	1c6b      	adds	r3, r5, #1
    64c4:	3502      	adds	r5, #2
    64c6:	f8da 0000 	ldr.w	r0, [sl]
    64ca:	6063      	str	r3, [r4, #4]
    64cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    64d0:	f7ff fda4 	bl	601c <__retarget_lock_release_recursive>
    64d4:	2000      	movs	r0, #0
    64d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    64de:	2301      	movs	r3, #1
    64e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    64e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    64e8:	40ab      	lsls	r3, r5
    64ea:	431a      	orrs	r2, r3
    64ec:	2e02      	cmp	r6, #2
    64ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    64f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    64f6:	d1e4      	bne.n	64c2 <__register_exitproc+0x26>
    64f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    64fc:	431a      	orrs	r2, r3
    64fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6502:	e7de      	b.n	64c2 <__register_exitproc+0x26>
    6504:	4c05      	ldr	r4, [pc, #20]	; (651c <__register_exitproc+0x80>)
    6506:	601c      	str	r4, [r3, #0]
    6508:	e7d7      	b.n	64ba <__register_exitproc+0x1e>
    650a:	f8da 0000 	ldr.w	r0, [sl]
    650e:	f7ff fd85 	bl	601c <__retarget_lock_release_recursive>
    6512:	f04f 30ff 	mov.w	r0, #4294967295
    6516:	e7de      	b.n	64d6 <__register_exitproc+0x3a>
    6518:	20001d38 	.word	0x20001d38
    651c:	20001d3c 	.word	0x20001d3c
    6520:	200011c0 	.word	0x200011c0

00006524 <_malloc_trim_r>:
    6524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6526:	4f24      	ldr	r7, [pc, #144]	; (65b8 <_malloc_trim_r+0x94>)
    6528:	460c      	mov	r4, r1
    652a:	4606      	mov	r6, r0
    652c:	f7fe fd28 	bl	4f80 <__malloc_lock>
    6530:	68bb      	ldr	r3, [r7, #8]
    6532:	685d      	ldr	r5, [r3, #4]
    6534:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6538:	310f      	adds	r1, #15
    653a:	f025 0503 	bic.w	r5, r5, #3
    653e:	194b      	adds	r3, r1, r5
    6540:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    6544:	f023 030f 	bic.w	r3, r3, #15
    6548:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    654c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    6550:	db07      	blt.n	6562 <_malloc_trim_r+0x3e>
    6552:	2100      	movs	r1, #0
    6554:	4630      	mov	r0, r6
    6556:	f7ff fd09 	bl	5f6c <_sbrk_r>
    655a:	68bb      	ldr	r3, [r7, #8]
    655c:	442b      	add	r3, r5
    655e:	4298      	cmp	r0, r3
    6560:	d004      	beq.n	656c <_malloc_trim_r+0x48>
    6562:	4630      	mov	r0, r6
    6564:	f7fe fd12 	bl	4f8c <__malloc_unlock>
    6568:	2000      	movs	r0, #0
    656a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    656c:	4261      	negs	r1, r4
    656e:	4630      	mov	r0, r6
    6570:	f7ff fcfc 	bl	5f6c <_sbrk_r>
    6574:	3001      	adds	r0, #1
    6576:	d00d      	beq.n	6594 <_malloc_trim_r+0x70>
    6578:	4a10      	ldr	r2, [pc, #64]	; (65bc <_malloc_trim_r+0x98>)
    657a:	68bb      	ldr	r3, [r7, #8]
    657c:	1b2d      	subs	r5, r5, r4
    657e:	f045 0501 	orr.w	r5, r5, #1
    6582:	605d      	str	r5, [r3, #4]
    6584:	6813      	ldr	r3, [r2, #0]
    6586:	4630      	mov	r0, r6
    6588:	1b1b      	subs	r3, r3, r4
    658a:	6013      	str	r3, [r2, #0]
    658c:	f7fe fcfe 	bl	4f8c <__malloc_unlock>
    6590:	2001      	movs	r0, #1
    6592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6594:	2100      	movs	r1, #0
    6596:	4630      	mov	r0, r6
    6598:	f7ff fce8 	bl	5f6c <_sbrk_r>
    659c:	68ba      	ldr	r2, [r7, #8]
    659e:	1a83      	subs	r3, r0, r2
    65a0:	2b0f      	cmp	r3, #15
    65a2:	ddde      	ble.n	6562 <_malloc_trim_r+0x3e>
    65a4:	f043 0301 	orr.w	r3, r3, #1
    65a8:	6053      	str	r3, [r2, #4]
    65aa:	4b05      	ldr	r3, [pc, #20]	; (65c0 <_malloc_trim_r+0x9c>)
    65ac:	4903      	ldr	r1, [pc, #12]	; (65bc <_malloc_trim_r+0x98>)
    65ae:	681b      	ldr	r3, [r3, #0]
    65b0:	1ac0      	subs	r0, r0, r3
    65b2:	6008      	str	r0, [r1, #0]
    65b4:	e7d5      	b.n	6562 <_malloc_trim_r+0x3e>
    65b6:	bf00      	nop
    65b8:	20001338 	.word	0x20001338
    65bc:	20001ed8 	.word	0x20001ed8
    65c0:	20001740 	.word	0x20001740

000065c4 <_free_r>:
    65c4:	2900      	cmp	r1, #0
    65c6:	d061      	beq.n	668c <_free_r+0xc8>
    65c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65ca:	460c      	mov	r4, r1
    65cc:	4606      	mov	r6, r0
    65ce:	f7fe fcd7 	bl	4f80 <__malloc_lock>
    65d2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    65d6:	4f7b      	ldr	r7, [pc, #492]	; (67c4 <_free_r+0x200>)
    65d8:	f1a4 0508 	sub.w	r5, r4, #8
    65dc:	f022 0101 	bic.w	r1, r2, #1
    65e0:	eb05 0c01 	add.w	ip, r5, r1
    65e4:	68b8      	ldr	r0, [r7, #8]
    65e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    65ea:	4560      	cmp	r0, ip
    65ec:	f023 0303 	bic.w	r3, r3, #3
    65f0:	f000 808b 	beq.w	670a <_free_r+0x146>
    65f4:	07d2      	lsls	r2, r2, #31
    65f6:	f8cc 3004 	str.w	r3, [ip, #4]
    65fa:	d432      	bmi.n	6662 <_free_r+0x9e>
    65fc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6600:	1aad      	subs	r5, r5, r2
    6602:	4411      	add	r1, r2
    6604:	68aa      	ldr	r2, [r5, #8]
    6606:	f107 0008 	add.w	r0, r7, #8
    660a:	4282      	cmp	r2, r0
    660c:	d06a      	beq.n	66e4 <_free_r+0x120>
    660e:	eb0c 0403 	add.w	r4, ip, r3
    6612:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6616:	68ec      	ldr	r4, [r5, #12]
    6618:	60d4      	str	r4, [r2, #12]
    661a:	f01e 0f01 	tst.w	lr, #1
    661e:	60a2      	str	r2, [r4, #8]
    6620:	f000 8097 	beq.w	6752 <_free_r+0x18e>
    6624:	f041 0301 	orr.w	r3, r1, #1
    6628:	606b      	str	r3, [r5, #4]
    662a:	f8cc 1000 	str.w	r1, [ip]
    662e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6632:	d235      	bcs.n	66a0 <_free_r+0xdc>
    6634:	6878      	ldr	r0, [r7, #4]
    6636:	08cb      	lsrs	r3, r1, #3
    6638:	2201      	movs	r2, #1
    663a:	0949      	lsrs	r1, r1, #5
    663c:	3301      	adds	r3, #1
    663e:	408a      	lsls	r2, r1
    6640:	4302      	orrs	r2, r0
    6642:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6646:	607a      	str	r2, [r7, #4]
    6648:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    664c:	3a08      	subs	r2, #8
    664e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    6652:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6656:	60cd      	str	r5, [r1, #12]
    6658:	4630      	mov	r0, r6
    665a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    665e:	f7fe bc95 	b.w	4f8c <__malloc_unlock>
    6662:	eb0c 0203 	add.w	r2, ip, r3
    6666:	6852      	ldr	r2, [r2, #4]
    6668:	07d0      	lsls	r0, r2, #31
    666a:	d410      	bmi.n	668e <_free_r+0xca>
    666c:	4419      	add	r1, r3
    666e:	f107 0008 	add.w	r0, r7, #8
    6672:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6676:	4283      	cmp	r3, r0
    6678:	d073      	beq.n	6762 <_free_r+0x19e>
    667a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    667e:	60da      	str	r2, [r3, #12]
    6680:	6093      	str	r3, [r2, #8]
    6682:	f041 0301 	orr.w	r3, r1, #1
    6686:	606b      	str	r3, [r5, #4]
    6688:	5069      	str	r1, [r5, r1]
    668a:	e7d0      	b.n	662e <_free_r+0x6a>
    668c:	4770      	bx	lr
    668e:	f041 0301 	orr.w	r3, r1, #1
    6692:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6696:	f844 3c04 	str.w	r3, [r4, #-4]
    669a:	f8cc 1000 	str.w	r1, [ip]
    669e:	d3c9      	bcc.n	6634 <_free_r+0x70>
    66a0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    66a4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    66a8:	d248      	bcs.n	673c <_free_r+0x178>
    66aa:	098b      	lsrs	r3, r1, #6
    66ac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    66b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    66b4:	00c3      	lsls	r3, r0, #3
    66b6:	18f8      	adds	r0, r7, r3
    66b8:	58fb      	ldr	r3, [r7, r3]
    66ba:	3808      	subs	r0, #8
    66bc:	4298      	cmp	r0, r3
    66be:	d059      	beq.n	6774 <_free_r+0x1b0>
    66c0:	685a      	ldr	r2, [r3, #4]
    66c2:	f022 0203 	bic.w	r2, r2, #3
    66c6:	428a      	cmp	r2, r1
    66c8:	d902      	bls.n	66d0 <_free_r+0x10c>
    66ca:	689b      	ldr	r3, [r3, #8]
    66cc:	4298      	cmp	r0, r3
    66ce:	d1f7      	bne.n	66c0 <_free_r+0xfc>
    66d0:	68d8      	ldr	r0, [r3, #12]
    66d2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    66d6:	6085      	str	r5, [r0, #8]
    66d8:	60dd      	str	r5, [r3, #12]
    66da:	4630      	mov	r0, r6
    66dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    66e0:	f7fe bc54 	b.w	4f8c <__malloc_unlock>
    66e4:	eb0c 0203 	add.w	r2, ip, r3
    66e8:	6852      	ldr	r2, [r2, #4]
    66ea:	07d2      	lsls	r2, r2, #31
    66ec:	d463      	bmi.n	67b6 <_free_r+0x1f2>
    66ee:	440b      	add	r3, r1
    66f0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    66f4:	60ca      	str	r2, [r1, #12]
    66f6:	6091      	str	r1, [r2, #8]
    66f8:	f043 0201 	orr.w	r2, r3, #1
    66fc:	606a      	str	r2, [r5, #4]
    66fe:	4630      	mov	r0, r6
    6700:	50eb      	str	r3, [r5, r3]
    6702:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6706:	f7fe bc41 	b.w	4f8c <__malloc_unlock>
    670a:	440b      	add	r3, r1
    670c:	07d1      	lsls	r1, r2, #31
    670e:	d407      	bmi.n	6720 <_free_r+0x15c>
    6710:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6714:	1aad      	subs	r5, r5, r2
    6716:	4413      	add	r3, r2
    6718:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    671c:	60ca      	str	r2, [r1, #12]
    671e:	6091      	str	r1, [r2, #8]
    6720:	f043 0201 	orr.w	r2, r3, #1
    6724:	606a      	str	r2, [r5, #4]
    6726:	4a28      	ldr	r2, [pc, #160]	; (67c8 <_free_r+0x204>)
    6728:	60bd      	str	r5, [r7, #8]
    672a:	6812      	ldr	r2, [r2, #0]
    672c:	429a      	cmp	r2, r3
    672e:	d893      	bhi.n	6658 <_free_r+0x94>
    6730:	4b26      	ldr	r3, [pc, #152]	; (67cc <_free_r+0x208>)
    6732:	4630      	mov	r0, r6
    6734:	6819      	ldr	r1, [r3, #0]
    6736:	f7ff fef5 	bl	6524 <_malloc_trim_r>
    673a:	e78d      	b.n	6658 <_free_r+0x94>
    673c:	2b14      	cmp	r3, #20
    673e:	d90a      	bls.n	6756 <_free_r+0x192>
    6740:	2b54      	cmp	r3, #84	; 0x54
    6742:	d81f      	bhi.n	6784 <_free_r+0x1c0>
    6744:	0b0b      	lsrs	r3, r1, #12
    6746:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    674a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    674e:	00c3      	lsls	r3, r0, #3
    6750:	e7b1      	b.n	66b6 <_free_r+0xf2>
    6752:	4419      	add	r1, r3
    6754:	e78d      	b.n	6672 <_free_r+0xae>
    6756:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    675a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    675e:	00c3      	lsls	r3, r0, #3
    6760:	e7a9      	b.n	66b6 <_free_r+0xf2>
    6762:	f041 0301 	orr.w	r3, r1, #1
    6766:	e9c7 5504 	strd	r5, r5, [r7, #16]
    676a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    676e:	606b      	str	r3, [r5, #4]
    6770:	5069      	str	r1, [r5, r1]
    6772:	e771      	b.n	6658 <_free_r+0x94>
    6774:	6879      	ldr	r1, [r7, #4]
    6776:	1092      	asrs	r2, r2, #2
    6778:	2401      	movs	r4, #1
    677a:	fa04 f202 	lsl.w	r2, r4, r2
    677e:	430a      	orrs	r2, r1
    6780:	607a      	str	r2, [r7, #4]
    6782:	e7a6      	b.n	66d2 <_free_r+0x10e>
    6784:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6788:	d806      	bhi.n	6798 <_free_r+0x1d4>
    678a:	0bcb      	lsrs	r3, r1, #15
    678c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6790:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6794:	00c3      	lsls	r3, r0, #3
    6796:	e78e      	b.n	66b6 <_free_r+0xf2>
    6798:	f240 5254 	movw	r2, #1364	; 0x554
    679c:	4293      	cmp	r3, r2
    679e:	d806      	bhi.n	67ae <_free_r+0x1ea>
    67a0:	0c8b      	lsrs	r3, r1, #18
    67a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    67a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    67aa:	00c3      	lsls	r3, r0, #3
    67ac:	e783      	b.n	66b6 <_free_r+0xf2>
    67ae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    67b2:	227e      	movs	r2, #126	; 0x7e
    67b4:	e77f      	b.n	66b6 <_free_r+0xf2>
    67b6:	f041 0301 	orr.w	r3, r1, #1
    67ba:	606b      	str	r3, [r5, #4]
    67bc:	f8cc 1000 	str.w	r1, [ip]
    67c0:	e74a      	b.n	6658 <_free_r+0x94>
    67c2:	bf00      	nop
    67c4:	20001338 	.word	0x20001338
    67c8:	20001744 	.word	0x20001744
    67cc:	20001f08 	.word	0x20001f08

000067d0 <__ascii_mbtowc>:
    67d0:	b082      	sub	sp, #8
    67d2:	b149      	cbz	r1, 67e8 <__ascii_mbtowc+0x18>
    67d4:	b15a      	cbz	r2, 67ee <__ascii_mbtowc+0x1e>
    67d6:	b16b      	cbz	r3, 67f4 <__ascii_mbtowc+0x24>
    67d8:	7813      	ldrb	r3, [r2, #0]
    67da:	600b      	str	r3, [r1, #0]
    67dc:	7812      	ldrb	r2, [r2, #0]
    67de:	1e10      	subs	r0, r2, #0
    67e0:	bf18      	it	ne
    67e2:	2001      	movne	r0, #1
    67e4:	b002      	add	sp, #8
    67e6:	4770      	bx	lr
    67e8:	a901      	add	r1, sp, #4
    67ea:	2a00      	cmp	r2, #0
    67ec:	d1f3      	bne.n	67d6 <__ascii_mbtowc+0x6>
    67ee:	4610      	mov	r0, r2
    67f0:	b002      	add	sp, #8
    67f2:	4770      	bx	lr
    67f4:	f06f 0001 	mvn.w	r0, #1
    67f8:	e7f4      	b.n	67e4 <__ascii_mbtowc+0x14>
    67fa:	bf00      	nop

000067fc <_Balloc>:
    67fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    67fe:	b570      	push	{r4, r5, r6, lr}
    6800:	4605      	mov	r5, r0
    6802:	460c      	mov	r4, r1
    6804:	b14b      	cbz	r3, 681a <_Balloc+0x1e>
    6806:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    680a:	b180      	cbz	r0, 682e <_Balloc+0x32>
    680c:	6802      	ldr	r2, [r0, #0]
    680e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    6812:	2300      	movs	r3, #0
    6814:	e9c0 3303 	strd	r3, r3, [r0, #12]
    6818:	bd70      	pop	{r4, r5, r6, pc}
    681a:	2221      	movs	r2, #33	; 0x21
    681c:	2104      	movs	r1, #4
    681e:	f000 fde7 	bl	73f0 <_calloc_r>
    6822:	4603      	mov	r3, r0
    6824:	6468      	str	r0, [r5, #68]	; 0x44
    6826:	2800      	cmp	r0, #0
    6828:	d1ed      	bne.n	6806 <_Balloc+0xa>
    682a:	2000      	movs	r0, #0
    682c:	bd70      	pop	{r4, r5, r6, pc}
    682e:	2101      	movs	r1, #1
    6830:	fa01 f604 	lsl.w	r6, r1, r4
    6834:	1d72      	adds	r2, r6, #5
    6836:	0092      	lsls	r2, r2, #2
    6838:	4628      	mov	r0, r5
    683a:	f000 fdd9 	bl	73f0 <_calloc_r>
    683e:	2800      	cmp	r0, #0
    6840:	d0f3      	beq.n	682a <_Balloc+0x2e>
    6842:	e9c0 4601 	strd	r4, r6, [r0, #4]
    6846:	e7e4      	b.n	6812 <_Balloc+0x16>

00006848 <_Bfree>:
    6848:	b131      	cbz	r1, 6858 <_Bfree+0x10>
    684a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    684c:	684a      	ldr	r2, [r1, #4]
    684e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6852:	6008      	str	r0, [r1, #0]
    6854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6858:	4770      	bx	lr
    685a:	bf00      	nop

0000685c <__multadd>:
    685c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6860:	690e      	ldr	r6, [r1, #16]
    6862:	4680      	mov	r8, r0
    6864:	460f      	mov	r7, r1
    6866:	461d      	mov	r5, r3
    6868:	f101 0e14 	add.w	lr, r1, #20
    686c:	2000      	movs	r0, #0
    686e:	f8de 1000 	ldr.w	r1, [lr]
    6872:	b28c      	uxth	r4, r1
    6874:	fb02 5304 	mla	r3, r2, r4, r5
    6878:	0c09      	lsrs	r1, r1, #16
    687a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    687e:	fb02 cc01 	mla	ip, r2, r1, ip
    6882:	3001      	adds	r0, #1
    6884:	b29c      	uxth	r4, r3
    6886:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    688a:	4286      	cmp	r6, r0
    688c:	f84e 4b04 	str.w	r4, [lr], #4
    6890:	ea4f 451c 	mov.w	r5, ip, lsr #16
    6894:	dceb      	bgt.n	686e <__multadd+0x12>
    6896:	b13d      	cbz	r5, 68a8 <__multadd+0x4c>
    6898:	68bb      	ldr	r3, [r7, #8]
    689a:	42b3      	cmp	r3, r6
    689c:	dd07      	ble.n	68ae <__multadd+0x52>
    689e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    68a2:	3601      	adds	r6, #1
    68a4:	615d      	str	r5, [r3, #20]
    68a6:	613e      	str	r6, [r7, #16]
    68a8:	4638      	mov	r0, r7
    68aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68ae:	6879      	ldr	r1, [r7, #4]
    68b0:	4640      	mov	r0, r8
    68b2:	3101      	adds	r1, #1
    68b4:	f7ff ffa2 	bl	67fc <_Balloc>
    68b8:	4604      	mov	r4, r0
    68ba:	b1b0      	cbz	r0, 68ea <__multadd+0x8e>
    68bc:	693a      	ldr	r2, [r7, #16]
    68be:	3202      	adds	r2, #2
    68c0:	f107 010c 	add.w	r1, r7, #12
    68c4:	0092      	lsls	r2, r2, #2
    68c6:	300c      	adds	r0, #12
    68c8:	f7fb ff72 	bl	27b0 <memcpy>
    68cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    68d0:	687a      	ldr	r2, [r7, #4]
    68d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    68d6:	6039      	str	r1, [r7, #0]
    68d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    68dc:	4627      	mov	r7, r4
    68de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    68e2:	3601      	adds	r6, #1
    68e4:	615d      	str	r5, [r3, #20]
    68e6:	613e      	str	r6, [r7, #16]
    68e8:	e7de      	b.n	68a8 <__multadd+0x4c>
    68ea:	4b03      	ldr	r3, [pc, #12]	; (68f8 <__multadd+0x9c>)
    68ec:	4803      	ldr	r0, [pc, #12]	; (68fc <__multadd+0xa0>)
    68ee:	4622      	mov	r2, r4
    68f0:	21ba      	movs	r1, #186	; 0xba
    68f2:	f000 fd5d 	bl	73b0 <__assert_func>
    68f6:	bf00      	nop
    68f8:	20000530 	.word	0x20000530
    68fc:	20000544 	.word	0x20000544

00006900 <__hi0bits>:
    6900:	0c03      	lsrs	r3, r0, #16
    6902:	041b      	lsls	r3, r3, #16
    6904:	b9d3      	cbnz	r3, 693c <__hi0bits+0x3c>
    6906:	0400      	lsls	r0, r0, #16
    6908:	2310      	movs	r3, #16
    690a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    690e:	bf04      	itt	eq
    6910:	0200      	lsleq	r0, r0, #8
    6912:	3308      	addeq	r3, #8
    6914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    6918:	bf04      	itt	eq
    691a:	0100      	lsleq	r0, r0, #4
    691c:	3304      	addeq	r3, #4
    691e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    6922:	bf04      	itt	eq
    6924:	0080      	lsleq	r0, r0, #2
    6926:	3302      	addeq	r3, #2
    6928:	2800      	cmp	r0, #0
    692a:	db05      	blt.n	6938 <__hi0bits+0x38>
    692c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    6930:	f103 0301 	add.w	r3, r3, #1
    6934:	bf08      	it	eq
    6936:	2320      	moveq	r3, #32
    6938:	4618      	mov	r0, r3
    693a:	4770      	bx	lr
    693c:	2300      	movs	r3, #0
    693e:	e7e4      	b.n	690a <__hi0bits+0xa>

00006940 <__lo0bits>:
    6940:	6803      	ldr	r3, [r0, #0]
    6942:	f013 0207 	ands.w	r2, r3, #7
    6946:	d008      	beq.n	695a <__lo0bits+0x1a>
    6948:	07d9      	lsls	r1, r3, #31
    694a:	d41f      	bmi.n	698c <__lo0bits+0x4c>
    694c:	079a      	lsls	r2, r3, #30
    694e:	d522      	bpl.n	6996 <__lo0bits+0x56>
    6950:	085b      	lsrs	r3, r3, #1
    6952:	6003      	str	r3, [r0, #0]
    6954:	2201      	movs	r2, #1
    6956:	4610      	mov	r0, r2
    6958:	4770      	bx	lr
    695a:	b299      	uxth	r1, r3
    695c:	b909      	cbnz	r1, 6962 <__lo0bits+0x22>
    695e:	0c1b      	lsrs	r3, r3, #16
    6960:	2210      	movs	r2, #16
    6962:	b2d9      	uxtb	r1, r3
    6964:	b909      	cbnz	r1, 696a <__lo0bits+0x2a>
    6966:	3208      	adds	r2, #8
    6968:	0a1b      	lsrs	r3, r3, #8
    696a:	0719      	lsls	r1, r3, #28
    696c:	bf04      	itt	eq
    696e:	091b      	lsreq	r3, r3, #4
    6970:	3204      	addeq	r2, #4
    6972:	0799      	lsls	r1, r3, #30
    6974:	bf04      	itt	eq
    6976:	089b      	lsreq	r3, r3, #2
    6978:	3202      	addeq	r2, #2
    697a:	07d9      	lsls	r1, r3, #31
    697c:	d403      	bmi.n	6986 <__lo0bits+0x46>
    697e:	085b      	lsrs	r3, r3, #1
    6980:	f102 0201 	add.w	r2, r2, #1
    6984:	d005      	beq.n	6992 <__lo0bits+0x52>
    6986:	6003      	str	r3, [r0, #0]
    6988:	4610      	mov	r0, r2
    698a:	4770      	bx	lr
    698c:	2200      	movs	r2, #0
    698e:	4610      	mov	r0, r2
    6990:	4770      	bx	lr
    6992:	2220      	movs	r2, #32
    6994:	e7df      	b.n	6956 <__lo0bits+0x16>
    6996:	089b      	lsrs	r3, r3, #2
    6998:	2202      	movs	r2, #2
    699a:	6003      	str	r3, [r0, #0]
    699c:	4610      	mov	r0, r2
    699e:	4770      	bx	lr

000069a0 <__i2b>:
    69a0:	b538      	push	{r3, r4, r5, lr}
    69a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    69a4:	4604      	mov	r4, r0
    69a6:	460d      	mov	r5, r1
    69a8:	b14b      	cbz	r3, 69be <__i2b+0x1e>
    69aa:	6858      	ldr	r0, [r3, #4]
    69ac:	b1b0      	cbz	r0, 69dc <__i2b+0x3c>
    69ae:	6802      	ldr	r2, [r0, #0]
    69b0:	605a      	str	r2, [r3, #4]
    69b2:	2200      	movs	r2, #0
    69b4:	2301      	movs	r3, #1
    69b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    69ba:	60c2      	str	r2, [r0, #12]
    69bc:	bd38      	pop	{r3, r4, r5, pc}
    69be:	2221      	movs	r2, #33	; 0x21
    69c0:	2104      	movs	r1, #4
    69c2:	f000 fd15 	bl	73f0 <_calloc_r>
    69c6:	4603      	mov	r3, r0
    69c8:	6460      	str	r0, [r4, #68]	; 0x44
    69ca:	2800      	cmp	r0, #0
    69cc:	d1ed      	bne.n	69aa <__i2b+0xa>
    69ce:	4b09      	ldr	r3, [pc, #36]	; (69f4 <__i2b+0x54>)
    69d0:	4809      	ldr	r0, [pc, #36]	; (69f8 <__i2b+0x58>)
    69d2:	2200      	movs	r2, #0
    69d4:	f240 1145 	movw	r1, #325	; 0x145
    69d8:	f000 fcea 	bl	73b0 <__assert_func>
    69dc:	221c      	movs	r2, #28
    69de:	2101      	movs	r1, #1
    69e0:	4620      	mov	r0, r4
    69e2:	f000 fd05 	bl	73f0 <_calloc_r>
    69e6:	2800      	cmp	r0, #0
    69e8:	d0f1      	beq.n	69ce <__i2b+0x2e>
    69ea:	2201      	movs	r2, #1
    69ec:	2302      	movs	r3, #2
    69ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    69f2:	e7de      	b.n	69b2 <__i2b+0x12>
    69f4:	20000530 	.word	0x20000530
    69f8:	20000544 	.word	0x20000544

000069fc <__multiply>:
    69fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a00:	690e      	ldr	r6, [r1, #16]
    6a02:	6915      	ldr	r5, [r2, #16]
    6a04:	42ae      	cmp	r6, r5
    6a06:	b085      	sub	sp, #20
    6a08:	4688      	mov	r8, r1
    6a0a:	4614      	mov	r4, r2
    6a0c:	db05      	blt.n	6a1a <__multiply+0x1e>
    6a0e:	462a      	mov	r2, r5
    6a10:	4623      	mov	r3, r4
    6a12:	4635      	mov	r5, r6
    6a14:	460c      	mov	r4, r1
    6a16:	4616      	mov	r6, r2
    6a18:	4698      	mov	r8, r3
    6a1a:	68a3      	ldr	r3, [r4, #8]
    6a1c:	6861      	ldr	r1, [r4, #4]
    6a1e:	19af      	adds	r7, r5, r6
    6a20:	42bb      	cmp	r3, r7
    6a22:	bfb8      	it	lt
    6a24:	3101      	addlt	r1, #1
    6a26:	f7ff fee9 	bl	67fc <_Balloc>
    6a2a:	9001      	str	r0, [sp, #4]
    6a2c:	2800      	cmp	r0, #0
    6a2e:	f000 8087 	beq.w	6b40 <__multiply+0x144>
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	f103 0914 	add.w	r9, r3, #20
    6a38:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    6a3c:	45d1      	cmp	r9, sl
    6a3e:	d205      	bcs.n	6a4c <__multiply+0x50>
    6a40:	464b      	mov	r3, r9
    6a42:	2200      	movs	r2, #0
    6a44:	f843 2b04 	str.w	r2, [r3], #4
    6a48:	459a      	cmp	sl, r3
    6a4a:	d8fb      	bhi.n	6a44 <__multiply+0x48>
    6a4c:	f108 0814 	add.w	r8, r8, #20
    6a50:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    6a54:	f104 0314 	add.w	r3, r4, #20
    6a58:	45d8      	cmp	r8, fp
    6a5a:	461a      	mov	r2, r3
    6a5c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6a60:	d25f      	bcs.n	6b22 <__multiply+0x126>
    6a62:	1b2b      	subs	r3, r5, r4
    6a64:	3b15      	subs	r3, #21
    6a66:	f023 0303 	bic.w	r3, r3, #3
    6a6a:	3304      	adds	r3, #4
    6a6c:	3415      	adds	r4, #21
    6a6e:	42a5      	cmp	r5, r4
    6a70:	bf38      	it	cc
    6a72:	2304      	movcc	r3, #4
    6a74:	e9cd a702 	strd	sl, r7, [sp, #8]
    6a78:	46ac      	mov	ip, r5
    6a7a:	461f      	mov	r7, r3
    6a7c:	4692      	mov	sl, r2
    6a7e:	e005      	b.n	6a8c <__multiply+0x90>
    6a80:	0c09      	lsrs	r1, r1, #16
    6a82:	d129      	bne.n	6ad8 <__multiply+0xdc>
    6a84:	45c3      	cmp	fp, r8
    6a86:	f109 0904 	add.w	r9, r9, #4
    6a8a:	d948      	bls.n	6b1e <__multiply+0x122>
    6a8c:	f858 1b04 	ldr.w	r1, [r8], #4
    6a90:	b28d      	uxth	r5, r1
    6a92:	2d00      	cmp	r5, #0
    6a94:	d0f4      	beq.n	6a80 <__multiply+0x84>
    6a96:	4656      	mov	r6, sl
    6a98:	464c      	mov	r4, r9
    6a9a:	2300      	movs	r3, #0
    6a9c:	f856 1b04 	ldr.w	r1, [r6], #4
    6aa0:	6822      	ldr	r2, [r4, #0]
    6aa2:	fa1f fe81 	uxth.w	lr, r1
    6aa6:	b290      	uxth	r0, r2
    6aa8:	0c09      	lsrs	r1, r1, #16
    6aaa:	fb05 000e 	mla	r0, r5, lr, r0
    6aae:	0c12      	lsrs	r2, r2, #16
    6ab0:	4403      	add	r3, r0
    6ab2:	fb05 2201 	mla	r2, r5, r1, r2
    6ab6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6aba:	b29b      	uxth	r3, r3
    6abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6ac0:	45b4      	cmp	ip, r6
    6ac2:	f844 3b04 	str.w	r3, [r4], #4
    6ac6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    6aca:	d8e7      	bhi.n	6a9c <__multiply+0xa0>
    6acc:	f849 3007 	str.w	r3, [r9, r7]
    6ad0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    6ad4:	0c09      	lsrs	r1, r1, #16
    6ad6:	d0d5      	beq.n	6a84 <__multiply+0x88>
    6ad8:	f8d9 3000 	ldr.w	r3, [r9]
    6adc:	4650      	mov	r0, sl
    6ade:	461a      	mov	r2, r3
    6ae0:	464c      	mov	r4, r9
    6ae2:	2600      	movs	r6, #0
    6ae4:	8805      	ldrh	r5, [r0, #0]
    6ae6:	0c12      	lsrs	r2, r2, #16
    6ae8:	fb01 2205 	mla	r2, r1, r5, r2
    6aec:	4416      	add	r6, r2
    6aee:	b29b      	uxth	r3, r3
    6af0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    6af4:	f844 3b04 	str.w	r3, [r4], #4
    6af8:	f850 5b04 	ldr.w	r5, [r0], #4
    6afc:	6822      	ldr	r2, [r4, #0]
    6afe:	0c2d      	lsrs	r5, r5, #16
    6b00:	b293      	uxth	r3, r2
    6b02:	fb01 3305 	mla	r3, r1, r5, r3
    6b06:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    6b0a:	4584      	cmp	ip, r0
    6b0c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    6b10:	d8e8      	bhi.n	6ae4 <__multiply+0xe8>
    6b12:	45c3      	cmp	fp, r8
    6b14:	f849 3007 	str.w	r3, [r9, r7]
    6b18:	f109 0904 	add.w	r9, r9, #4
    6b1c:	d8b6      	bhi.n	6a8c <__multiply+0x90>
    6b1e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    6b22:	2f00      	cmp	r7, #0
    6b24:	dc02      	bgt.n	6b2c <__multiply+0x130>
    6b26:	e005      	b.n	6b34 <__multiply+0x138>
    6b28:	3f01      	subs	r7, #1
    6b2a:	d003      	beq.n	6b34 <__multiply+0x138>
    6b2c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    6b30:	2b00      	cmp	r3, #0
    6b32:	d0f9      	beq.n	6b28 <__multiply+0x12c>
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	4618      	mov	r0, r3
    6b38:	611f      	str	r7, [r3, #16]
    6b3a:	b005      	add	sp, #20
    6b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b40:	4b03      	ldr	r3, [pc, #12]	; (6b50 <__multiply+0x154>)
    6b42:	4804      	ldr	r0, [pc, #16]	; (6b54 <__multiply+0x158>)
    6b44:	9a01      	ldr	r2, [sp, #4]
    6b46:	f44f 71b1 	mov.w	r1, #354	; 0x162
    6b4a:	f000 fc31 	bl	73b0 <__assert_func>
    6b4e:	bf00      	nop
    6b50:	20000530 	.word	0x20000530
    6b54:	20000544 	.word	0x20000544

00006b58 <__pow5mult>:
    6b58:	f012 0303 	ands.w	r3, r2, #3
    6b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b60:	4614      	mov	r4, r2
    6b62:	4606      	mov	r6, r0
    6b64:	d132      	bne.n	6bcc <__pow5mult+0x74>
    6b66:	460d      	mov	r5, r1
    6b68:	10a4      	asrs	r4, r4, #2
    6b6a:	d020      	beq.n	6bae <__pow5mult+0x56>
    6b6c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    6b70:	f1b8 0f00 	cmp.w	r8, #0
    6b74:	d033      	beq.n	6bde <__pow5mult+0x86>
    6b76:	07e3      	lsls	r3, r4, #31
    6b78:	f04f 0700 	mov.w	r7, #0
    6b7c:	d407      	bmi.n	6b8e <__pow5mult+0x36>
    6b7e:	1064      	asrs	r4, r4, #1
    6b80:	d015      	beq.n	6bae <__pow5mult+0x56>
    6b82:	f8d8 0000 	ldr.w	r0, [r8]
    6b86:	b1a8      	cbz	r0, 6bb4 <__pow5mult+0x5c>
    6b88:	4680      	mov	r8, r0
    6b8a:	07e3      	lsls	r3, r4, #31
    6b8c:	d5f7      	bpl.n	6b7e <__pow5mult+0x26>
    6b8e:	4642      	mov	r2, r8
    6b90:	4629      	mov	r1, r5
    6b92:	4630      	mov	r0, r6
    6b94:	f7ff ff32 	bl	69fc <__multiply>
    6b98:	b1b5      	cbz	r5, 6bc8 <__pow5mult+0x70>
    6b9a:	6869      	ldr	r1, [r5, #4]
    6b9c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    6b9e:	1064      	asrs	r4, r4, #1
    6ba0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    6ba4:	602a      	str	r2, [r5, #0]
    6ba6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6baa:	4605      	mov	r5, r0
    6bac:	d1e9      	bne.n	6b82 <__pow5mult+0x2a>
    6bae:	4628      	mov	r0, r5
    6bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bb4:	4642      	mov	r2, r8
    6bb6:	4641      	mov	r1, r8
    6bb8:	4630      	mov	r0, r6
    6bba:	f7ff ff1f 	bl	69fc <__multiply>
    6bbe:	f8c8 0000 	str.w	r0, [r8]
    6bc2:	6007      	str	r7, [r0, #0]
    6bc4:	4680      	mov	r8, r0
    6bc6:	e7e0      	b.n	6b8a <__pow5mult+0x32>
    6bc8:	4605      	mov	r5, r0
    6bca:	e7d8      	b.n	6b7e <__pow5mult+0x26>
    6bcc:	3b01      	subs	r3, #1
    6bce:	4a0f      	ldr	r2, [pc, #60]	; (6c0c <__pow5mult+0xb4>)
    6bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6bd4:	2300      	movs	r3, #0
    6bd6:	f7ff fe41 	bl	685c <__multadd>
    6bda:	4605      	mov	r5, r0
    6bdc:	e7c4      	b.n	6b68 <__pow5mult+0x10>
    6bde:	2101      	movs	r1, #1
    6be0:	4630      	mov	r0, r6
    6be2:	f7ff fe0b 	bl	67fc <_Balloc>
    6be6:	4680      	mov	r8, r0
    6be8:	b140      	cbz	r0, 6bfc <__pow5mult+0xa4>
    6bea:	2301      	movs	r3, #1
    6bec:	f240 2271 	movw	r2, #625	; 0x271
    6bf0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    6bf4:	2300      	movs	r3, #0
    6bf6:	6430      	str	r0, [r6, #64]	; 0x40
    6bf8:	6003      	str	r3, [r0, #0]
    6bfa:	e7bc      	b.n	6b76 <__pow5mult+0x1e>
    6bfc:	4b04      	ldr	r3, [pc, #16]	; (6c10 <__pow5mult+0xb8>)
    6bfe:	4805      	ldr	r0, [pc, #20]	; (6c14 <__pow5mult+0xbc>)
    6c00:	4642      	mov	r2, r8
    6c02:	f240 1145 	movw	r1, #325	; 0x145
    6c06:	f000 fbd3 	bl	73b0 <__assert_func>
    6c0a:	bf00      	nop
    6c0c:	20000af0 	.word	0x20000af0
    6c10:	20000530 	.word	0x20000530
    6c14:	20000544 	.word	0x20000544

00006c18 <__lshift>:
    6c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c1c:	460d      	mov	r5, r1
    6c1e:	4614      	mov	r4, r2
    6c20:	692f      	ldr	r7, [r5, #16]
    6c22:	68ab      	ldr	r3, [r5, #8]
    6c24:	6849      	ldr	r1, [r1, #4]
    6c26:	eb07 1762 	add.w	r7, r7, r2, asr #5
    6c2a:	1c7e      	adds	r6, r7, #1
    6c2c:	429e      	cmp	r6, r3
    6c2e:	4680      	mov	r8, r0
    6c30:	ea4f 1962 	mov.w	r9, r2, asr #5
    6c34:	dd04      	ble.n	6c40 <__lshift+0x28>
    6c36:	005b      	lsls	r3, r3, #1
    6c38:	429e      	cmp	r6, r3
    6c3a:	f101 0101 	add.w	r1, r1, #1
    6c3e:	dcfa      	bgt.n	6c36 <__lshift+0x1e>
    6c40:	4640      	mov	r0, r8
    6c42:	f7ff fddb 	bl	67fc <_Balloc>
    6c46:	4684      	mov	ip, r0
    6c48:	2800      	cmp	r0, #0
    6c4a:	d052      	beq.n	6cf2 <__lshift+0xda>
    6c4c:	f1b9 0f00 	cmp.w	r9, #0
    6c50:	f100 0214 	add.w	r2, r0, #20
    6c54:	dd0e      	ble.n	6c74 <__lshift+0x5c>
    6c56:	f109 0105 	add.w	r1, r9, #5
    6c5a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    6c5e:	4613      	mov	r3, r2
    6c60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6c64:	2000      	movs	r0, #0
    6c66:	f843 0b04 	str.w	r0, [r3], #4
    6c6a:	428b      	cmp	r3, r1
    6c6c:	d1fb      	bne.n	6c66 <__lshift+0x4e>
    6c6e:	f1ae 0314 	sub.w	r3, lr, #20
    6c72:	441a      	add	r2, r3
    6c74:	6929      	ldr	r1, [r5, #16]
    6c76:	f105 0314 	add.w	r3, r5, #20
    6c7a:	f014 0e1f 	ands.w	lr, r4, #31
    6c7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6c82:	d02e      	beq.n	6ce2 <__lshift+0xca>
    6c84:	f1ce 0920 	rsb	r9, lr, #32
    6c88:	4610      	mov	r0, r2
    6c8a:	f04f 0a00 	mov.w	sl, #0
    6c8e:	681c      	ldr	r4, [r3, #0]
    6c90:	fa04 f40e 	lsl.w	r4, r4, lr
    6c94:	ea44 040a 	orr.w	r4, r4, sl
    6c98:	f840 4b04 	str.w	r4, [r0], #4
    6c9c:	f853 4b04 	ldr.w	r4, [r3], #4
    6ca0:	4299      	cmp	r1, r3
    6ca2:	fa24 fa09 	lsr.w	sl, r4, r9
    6ca6:	d8f2      	bhi.n	6c8e <__lshift+0x76>
    6ca8:	1b4b      	subs	r3, r1, r5
    6caa:	3b15      	subs	r3, #21
    6cac:	f023 0303 	bic.w	r3, r3, #3
    6cb0:	3304      	adds	r3, #4
    6cb2:	f105 0015 	add.w	r0, r5, #21
    6cb6:	4281      	cmp	r1, r0
    6cb8:	bf38      	it	cc
    6cba:	2304      	movcc	r3, #4
    6cbc:	f1ba 0f00 	cmp.w	sl, #0
    6cc0:	bf18      	it	ne
    6cc2:	4637      	movne	r7, r6
    6cc4:	f842 a003 	str.w	sl, [r2, r3]
    6cc8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6ccc:	686a      	ldr	r2, [r5, #4]
    6cce:	f8cc 7010 	str.w	r7, [ip, #16]
    6cd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6cd6:	6029      	str	r1, [r5, #0]
    6cd8:	4660      	mov	r0, ip
    6cda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    6cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ce2:	3a04      	subs	r2, #4
    6ce4:	f853 0b04 	ldr.w	r0, [r3], #4
    6ce8:	f842 0f04 	str.w	r0, [r2, #4]!
    6cec:	4299      	cmp	r1, r3
    6cee:	d8f9      	bhi.n	6ce4 <__lshift+0xcc>
    6cf0:	e7ea      	b.n	6cc8 <__lshift+0xb0>
    6cf2:	4b03      	ldr	r3, [pc, #12]	; (6d00 <__lshift+0xe8>)
    6cf4:	4803      	ldr	r0, [pc, #12]	; (6d04 <__lshift+0xec>)
    6cf6:	4662      	mov	r2, ip
    6cf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    6cfc:	f000 fb58 	bl	73b0 <__assert_func>
    6d00:	20000530 	.word	0x20000530
    6d04:	20000544 	.word	0x20000544

00006d08 <__mcmp>:
    6d08:	690b      	ldr	r3, [r1, #16]
    6d0a:	4684      	mov	ip, r0
    6d0c:	6900      	ldr	r0, [r0, #16]
    6d0e:	1ac0      	subs	r0, r0, r3
    6d10:	d116      	bne.n	6d40 <__mcmp+0x38>
    6d12:	f10c 0c14 	add.w	ip, ip, #20
    6d16:	3114      	adds	r1, #20
    6d18:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    6d1c:	b410      	push	{r4}
    6d1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6d22:	e001      	b.n	6d28 <__mcmp+0x20>
    6d24:	4594      	cmp	ip, r2
    6d26:	d208      	bcs.n	6d3a <__mcmp+0x32>
    6d28:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6d2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    6d30:	428c      	cmp	r4, r1
    6d32:	d0f7      	beq.n	6d24 <__mcmp+0x1c>
    6d34:	d205      	bcs.n	6d42 <__mcmp+0x3a>
    6d36:	f04f 30ff 	mov.w	r0, #4294967295
    6d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d3e:	4770      	bx	lr
    6d40:	4770      	bx	lr
    6d42:	2001      	movs	r0, #1
    6d44:	f85d 4b04 	ldr.w	r4, [sp], #4
    6d48:	4770      	bx	lr
    6d4a:	bf00      	nop

00006d4c <__mdiff>:
    6d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d50:	690f      	ldr	r7, [r1, #16]
    6d52:	6913      	ldr	r3, [r2, #16]
    6d54:	1aff      	subs	r7, r7, r3
    6d56:	2f00      	cmp	r7, #0
    6d58:	460e      	mov	r6, r1
    6d5a:	4690      	mov	r8, r2
    6d5c:	d17f      	bne.n	6e5e <__mdiff+0x112>
    6d5e:	f101 0514 	add.w	r5, r1, #20
    6d62:	3214      	adds	r2, #20
    6d64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6d68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6d6c:	e001      	b.n	6d72 <__mdiff+0x26>
    6d6e:	429d      	cmp	r5, r3
    6d70:	d278      	bcs.n	6e64 <__mdiff+0x118>
    6d72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    6d76:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    6d7a:	42a1      	cmp	r1, r4
    6d7c:	d0f7      	beq.n	6d6e <__mdiff+0x22>
    6d7e:	d369      	bcc.n	6e54 <__mdiff+0x108>
    6d80:	6871      	ldr	r1, [r6, #4]
    6d82:	f7ff fd3b 	bl	67fc <_Balloc>
    6d86:	4681      	mov	r9, r0
    6d88:	2800      	cmp	r0, #0
    6d8a:	d077      	beq.n	6e7c <__mdiff+0x130>
    6d8c:	6935      	ldr	r5, [r6, #16]
    6d8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    6d92:	60c7      	str	r7, [r0, #12]
    6d94:	f108 0e14 	add.w	lr, r8, #20
    6d98:	f106 0014 	add.w	r0, r6, #20
    6d9c:	f109 0a14 	add.w	sl, r9, #20
    6da0:	f106 0110 	add.w	r1, r6, #16
    6da4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    6da8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    6dac:	4656      	mov	r6, sl
    6dae:	f04f 0c00 	mov.w	ip, #0
    6db2:	f85e 4b04 	ldr.w	r4, [lr], #4
    6db6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    6dba:	b2a3      	uxth	r3, r4
    6dbc:	fa1c fc8b 	uxtah	ip, ip, fp
    6dc0:	ebac 0303 	sub.w	r3, ip, r3
    6dc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    6dc8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    6dcc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    6dd0:	b29b      	uxth	r3, r3
    6dd2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    6dd6:	4572      	cmp	r2, lr
    6dd8:	f846 3b04 	str.w	r3, [r6], #4
    6ddc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    6de0:	d8e7      	bhi.n	6db2 <__mdiff+0x66>
    6de2:	eba2 0108 	sub.w	r1, r2, r8
    6de6:	3915      	subs	r1, #21
    6de8:	f108 0815 	add.w	r8, r8, #21
    6dec:	4542      	cmp	r2, r8
    6dee:	f021 0403 	bic.w	r4, r1, #3
    6df2:	f104 0404 	add.w	r4, r4, #4
    6df6:	bf38      	it	cc
    6df8:	2404      	movcc	r4, #4
    6dfa:	4420      	add	r0, r4
    6dfc:	f021 0203 	bic.w	r2, r1, #3
    6e00:	bf38      	it	cc
    6e02:	2200      	movcc	r2, #0
    6e04:	4287      	cmp	r7, r0
    6e06:	4452      	add	r2, sl
    6e08:	4454      	add	r4, sl
    6e0a:	d918      	bls.n	6e3e <__mdiff+0xf2>
    6e0c:	4626      	mov	r6, r4
    6e0e:	4601      	mov	r1, r0
    6e10:	f851 3b04 	ldr.w	r3, [r1], #4
    6e14:	fa1c fc83 	uxtah	ip, ip, r3
    6e18:	ea4f 422c 	mov.w	r2, ip, asr #16
    6e1c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    6e20:	fa1f fc8c 	uxth.w	ip, ip
    6e24:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    6e28:	428f      	cmp	r7, r1
    6e2a:	f846 3b04 	str.w	r3, [r6], #4
    6e2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    6e32:	d8ed      	bhi.n	6e10 <__mdiff+0xc4>
    6e34:	3f01      	subs	r7, #1
    6e36:	1a3f      	subs	r7, r7, r0
    6e38:	f027 0703 	bic.w	r7, r7, #3
    6e3c:	19e2      	adds	r2, r4, r7
    6e3e:	b923      	cbnz	r3, 6e4a <__mdiff+0xfe>
    6e40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6e44:	3d01      	subs	r5, #1
    6e46:	2b00      	cmp	r3, #0
    6e48:	d0fa      	beq.n	6e40 <__mdiff+0xf4>
    6e4a:	f8c9 5010 	str.w	r5, [r9, #16]
    6e4e:	4648      	mov	r0, r9
    6e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e54:	4633      	mov	r3, r6
    6e56:	2701      	movs	r7, #1
    6e58:	4646      	mov	r6, r8
    6e5a:	4698      	mov	r8, r3
    6e5c:	e790      	b.n	6d80 <__mdiff+0x34>
    6e5e:	dbf9      	blt.n	6e54 <__mdiff+0x108>
    6e60:	2700      	movs	r7, #0
    6e62:	e78d      	b.n	6d80 <__mdiff+0x34>
    6e64:	2100      	movs	r1, #0
    6e66:	f7ff fcc9 	bl	67fc <_Balloc>
    6e6a:	4681      	mov	r9, r0
    6e6c:	b168      	cbz	r0, 6e8a <__mdiff+0x13e>
    6e6e:	2201      	movs	r2, #1
    6e70:	2300      	movs	r3, #0
    6e72:	e9c9 2304 	strd	r2, r3, [r9, #16]
    6e76:	4648      	mov	r0, r9
    6e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e7c:	4b06      	ldr	r3, [pc, #24]	; (6e98 <__mdiff+0x14c>)
    6e7e:	4807      	ldr	r0, [pc, #28]	; (6e9c <__mdiff+0x150>)
    6e80:	464a      	mov	r2, r9
    6e82:	f240 2145 	movw	r1, #581	; 0x245
    6e86:	f000 fa93 	bl	73b0 <__assert_func>
    6e8a:	4b03      	ldr	r3, [pc, #12]	; (6e98 <__mdiff+0x14c>)
    6e8c:	4803      	ldr	r0, [pc, #12]	; (6e9c <__mdiff+0x150>)
    6e8e:	464a      	mov	r2, r9
    6e90:	f240 2137 	movw	r1, #567	; 0x237
    6e94:	f000 fa8c 	bl	73b0 <__assert_func>
    6e98:	20000530 	.word	0x20000530
    6e9c:	20000544 	.word	0x20000544

00006ea0 <__d2b>:
    6ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ea4:	4688      	mov	r8, r1
    6ea6:	b083      	sub	sp, #12
    6ea8:	2101      	movs	r1, #1
    6eaa:	ec57 6b10 	vmov	r6, r7, d0
    6eae:	4615      	mov	r5, r2
    6eb0:	f7ff fca4 	bl	67fc <_Balloc>
    6eb4:	4604      	mov	r4, r0
    6eb6:	2800      	cmp	r0, #0
    6eb8:	d051      	beq.n	6f5e <__d2b+0xbe>
    6eba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    6ebe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    6ec2:	f1b9 0f00 	cmp.w	r9, #0
    6ec6:	d001      	beq.n	6ecc <__d2b+0x2c>
    6ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    6ecc:	2e00      	cmp	r6, #0
    6ece:	9301      	str	r3, [sp, #4]
    6ed0:	d118      	bne.n	6f04 <__d2b+0x64>
    6ed2:	a801      	add	r0, sp, #4
    6ed4:	f7ff fd34 	bl	6940 <__lo0bits>
    6ed8:	9a01      	ldr	r2, [sp, #4]
    6eda:	6162      	str	r2, [r4, #20]
    6edc:	2201      	movs	r2, #1
    6ede:	f100 0320 	add.w	r3, r0, #32
    6ee2:	6122      	str	r2, [r4, #16]
    6ee4:	f1b9 0f00 	cmp.w	r9, #0
    6ee8:	d025      	beq.n	6f36 <__d2b+0x96>
    6eea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    6eee:	eb09 0203 	add.w	r2, r9, r3
    6ef2:	4620      	mov	r0, r4
    6ef4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    6ef8:	f8c8 2000 	str.w	r2, [r8]
    6efc:	602b      	str	r3, [r5, #0]
    6efe:	b003      	add	sp, #12
    6f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f04:	4668      	mov	r0, sp
    6f06:	9600      	str	r6, [sp, #0]
    6f08:	f7ff fd1a 	bl	6940 <__lo0bits>
    6f0c:	4603      	mov	r3, r0
    6f0e:	b310      	cbz	r0, 6f56 <__d2b+0xb6>
    6f10:	e9dd 0200 	ldrd	r0, r2, [sp]
    6f14:	f1c3 0120 	rsb	r1, r3, #32
    6f18:	fa02 f101 	lsl.w	r1, r2, r1
    6f1c:	4301      	orrs	r1, r0
    6f1e:	40da      	lsrs	r2, r3
    6f20:	6161      	str	r1, [r4, #20]
    6f22:	9201      	str	r2, [sp, #4]
    6f24:	2a00      	cmp	r2, #0
    6f26:	61a2      	str	r2, [r4, #24]
    6f28:	bf14      	ite	ne
    6f2a:	2202      	movne	r2, #2
    6f2c:	2201      	moveq	r2, #1
    6f2e:	6122      	str	r2, [r4, #16]
    6f30:	f1b9 0f00 	cmp.w	r9, #0
    6f34:	d1d9      	bne.n	6eea <__d2b+0x4a>
    6f36:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    6f3a:	f8c8 3000 	str.w	r3, [r8]
    6f3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    6f42:	6918      	ldr	r0, [r3, #16]
    6f44:	f7ff fcdc 	bl	6900 <__hi0bits>
    6f48:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    6f4c:	4620      	mov	r0, r4
    6f4e:	602b      	str	r3, [r5, #0]
    6f50:	b003      	add	sp, #12
    6f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6f56:	9a00      	ldr	r2, [sp, #0]
    6f58:	6162      	str	r2, [r4, #20]
    6f5a:	9a01      	ldr	r2, [sp, #4]
    6f5c:	e7e2      	b.n	6f24 <__d2b+0x84>
    6f5e:	4b03      	ldr	r3, [pc, #12]	; (6f6c <__d2b+0xcc>)
    6f60:	4803      	ldr	r0, [pc, #12]	; (6f70 <__d2b+0xd0>)
    6f62:	4622      	mov	r2, r4
    6f64:	f240 310f 	movw	r1, #783	; 0x30f
    6f68:	f000 fa22 	bl	73b0 <__assert_func>
    6f6c:	20000530 	.word	0x20000530
    6f70:	20000544 	.word	0x20000544

00006f74 <__ascii_wctomb>:
    6f74:	b149      	cbz	r1, 6f8a <__ascii_wctomb+0x16>
    6f76:	2aff      	cmp	r2, #255	; 0xff
    6f78:	d802      	bhi.n	6f80 <__ascii_wctomb+0xc>
    6f7a:	700a      	strb	r2, [r1, #0]
    6f7c:	2001      	movs	r0, #1
    6f7e:	4770      	bx	lr
    6f80:	238a      	movs	r3, #138	; 0x8a
    6f82:	6003      	str	r3, [r0, #0]
    6f84:	f04f 30ff 	mov.w	r0, #4294967295
    6f88:	4770      	bx	lr
    6f8a:	4608      	mov	r0, r1
    6f8c:	4770      	bx	lr
    6f8e:	bf00      	nop

00006f90 <fcvtbuf>:
    6f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f94:	460e      	mov	r6, r1
    6f96:	4926      	ldr	r1, [pc, #152]	; (7030 <fcvtbuf+0xa0>)
    6f98:	b087      	sub	sp, #28
    6f9a:	680f      	ldr	r7, [r1, #0]
    6f9c:	4604      	mov	r4, r0
    6f9e:	4690      	mov	r8, r2
    6fa0:	461d      	mov	r5, r3
    6fa2:	b353      	cbz	r3, 6ffa <fcvtbuf+0x6a>
    6fa4:	aa05      	add	r2, sp, #20
    6fa6:	4633      	mov	r3, r6
    6fa8:	9201      	str	r2, [sp, #4]
    6faa:	2103      	movs	r1, #3
    6fac:	4622      	mov	r2, r4
    6fae:	f8cd 8000 	str.w	r8, [sp]
    6fb2:	4638      	mov	r0, r7
    6fb4:	f000 faec 	bl	7590 <_dtoa_r>
    6fb8:	9b05      	ldr	r3, [sp, #20]
    6fba:	6832      	ldr	r2, [r6, #0]
    6fbc:	4298      	cmp	r0, r3
    6fbe:	4684      	mov	ip, r0
    6fc0:	f1c2 0200 	rsb	r2, r2, #0
    6fc4:	4629      	mov	r1, r5
    6fc6:	d209      	bcs.n	6fdc <fcvtbuf+0x4c>
    6fc8:	1a10      	subs	r0, r2, r0
    6fca:	f81c 3b01 	ldrb.w	r3, [ip], #1
    6fce:	f801 3b01 	strb.w	r3, [r1], #1
    6fd2:	9b05      	ldr	r3, [sp, #20]
    6fd4:	4563      	cmp	r3, ip
    6fd6:	eb00 020c 	add.w	r2, r0, ip
    6fda:	d8f6      	bhi.n	6fca <fcvtbuf+0x3a>
    6fdc:	4294      	cmp	r4, r2
    6fde:	dd24      	ble.n	702a <fcvtbuf+0x9a>
    6fe0:	1aa2      	subs	r2, r4, r2
    6fe2:	440a      	add	r2, r1
    6fe4:	2330      	movs	r3, #48	; 0x30
    6fe6:	f801 3b01 	strb.w	r3, [r1], #1
    6fea:	4291      	cmp	r1, r2
    6fec:	d1fb      	bne.n	6fe6 <fcvtbuf+0x56>
    6fee:	2300      	movs	r3, #0
    6ff0:	7013      	strb	r3, [r2, #0]
    6ff2:	4628      	mov	r0, r5
    6ff4:	b007      	add	sp, #28
    6ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6ffc:	f100 0323 	add.w	r3, r0, #35	; 0x23
    7000:	429a      	cmp	r2, r3
    7002:	dd01      	ble.n	7008 <fcvtbuf+0x78>
    7004:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    7006:	e7cd      	b.n	6fa4 <fcvtbuf+0x14>
    7008:	f100 0924 	add.w	r9, r0, #36	; 0x24
    700c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    700e:	464a      	mov	r2, r9
    7010:	4638      	mov	r0, r7
    7012:	ed8d 0b02 	vstr	d0, [sp, #8]
    7016:	f7fd ffcb 	bl	4fb0 <_realloc_r>
    701a:	4605      	mov	r5, r0
    701c:	2800      	cmp	r0, #0
    701e:	d0e8      	beq.n	6ff2 <fcvtbuf+0x62>
    7020:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    7024:	ed9d 0b02 	vldr	d0, [sp, #8]
    7028:	e7bc      	b.n	6fa4 <fcvtbuf+0x14>
    702a:	460a      	mov	r2, r1
    702c:	e7df      	b.n	6fee <fcvtbuf+0x5e>
    702e:	bf00      	nop
    7030:	20001754 	.word	0x20001754

00007034 <_fclose_r>:
    7034:	b570      	push	{r4, r5, r6, lr}
    7036:	2900      	cmp	r1, #0
    7038:	d04b      	beq.n	70d2 <_fclose_r+0x9e>
    703a:	4606      	mov	r6, r0
    703c:	460c      	mov	r4, r1
    703e:	b110      	cbz	r0, 7046 <_fclose_r+0x12>
    7040:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7042:	2b00      	cmp	r3, #0
    7044:	d048      	beq.n	70d8 <_fclose_r+0xa4>
    7046:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7048:	07d8      	lsls	r0, r3, #31
    704a:	d534      	bpl.n	70b6 <_fclose_r+0x82>
    704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7050:	2b00      	cmp	r3, #0
    7052:	d03e      	beq.n	70d2 <_fclose_r+0x9e>
    7054:	4621      	mov	r1, r4
    7056:	4630      	mov	r0, r6
    7058:	f000 f850 	bl	70fc <__sflush_r>
    705c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    705e:	4605      	mov	r5, r0
    7060:	b133      	cbz	r3, 7070 <_fclose_r+0x3c>
    7062:	69e1      	ldr	r1, [r4, #28]
    7064:	4630      	mov	r0, r6
    7066:	4798      	blx	r3
    7068:	2800      	cmp	r0, #0
    706a:	bfb8      	it	lt
    706c:	f04f 35ff 	movlt.w	r5, #4294967295
    7070:	89a3      	ldrh	r3, [r4, #12]
    7072:	061a      	lsls	r2, r3, #24
    7074:	d43c      	bmi.n	70f0 <_fclose_r+0xbc>
    7076:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7078:	b141      	cbz	r1, 708c <_fclose_r+0x58>
    707a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    707e:	4299      	cmp	r1, r3
    7080:	d002      	beq.n	7088 <_fclose_r+0x54>
    7082:	4630      	mov	r0, r6
    7084:	f7ff fa9e 	bl	65c4 <_free_r>
    7088:	2300      	movs	r3, #0
    708a:	6323      	str	r3, [r4, #48]	; 0x30
    708c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    708e:	b121      	cbz	r1, 709a <_fclose_r+0x66>
    7090:	4630      	mov	r0, r6
    7092:	f7ff fa97 	bl	65c4 <_free_r>
    7096:	2300      	movs	r3, #0
    7098:	6463      	str	r3, [r4, #68]	; 0x44
    709a:	f7fe fb33 	bl	5704 <__sfp_lock_acquire>
    709e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    70a0:	2200      	movs	r2, #0
    70a2:	07db      	lsls	r3, r3, #31
    70a4:	81a2      	strh	r2, [r4, #12]
    70a6:	d51f      	bpl.n	70e8 <_fclose_r+0xb4>
    70a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    70aa:	f7fe ffb3 	bl	6014 <__retarget_lock_close_recursive>
    70ae:	f7fe fb2f 	bl	5710 <__sfp_lock_release>
    70b2:	4628      	mov	r0, r5
    70b4:	bd70      	pop	{r4, r5, r6, pc}
    70b6:	89a3      	ldrh	r3, [r4, #12]
    70b8:	0599      	lsls	r1, r3, #22
    70ba:	d4cb      	bmi.n	7054 <_fclose_r+0x20>
    70bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    70be:	f7fe ffab 	bl	6018 <__retarget_lock_acquire_recursive>
    70c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d1c4      	bne.n	7054 <_fclose_r+0x20>
    70ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
    70cc:	f015 0501 	ands.w	r5, r5, #1
    70d0:	d005      	beq.n	70de <_fclose_r+0xaa>
    70d2:	2500      	movs	r5, #0
    70d4:	4628      	mov	r0, r5
    70d6:	bd70      	pop	{r4, r5, r6, pc}
    70d8:	f7fe faf6 	bl	56c8 <__sinit>
    70dc:	e7b3      	b.n	7046 <_fclose_r+0x12>
    70de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    70e0:	f7fe ff9c 	bl	601c <__retarget_lock_release_recursive>
    70e4:	4628      	mov	r0, r5
    70e6:	bd70      	pop	{r4, r5, r6, pc}
    70e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    70ea:	f7fe ff97 	bl	601c <__retarget_lock_release_recursive>
    70ee:	e7db      	b.n	70a8 <_fclose_r+0x74>
    70f0:	6921      	ldr	r1, [r4, #16]
    70f2:	4630      	mov	r0, r6
    70f4:	f7ff fa66 	bl	65c4 <_free_r>
    70f8:	e7bd      	b.n	7076 <_fclose_r+0x42>
    70fa:	bf00      	nop

000070fc <__sflush_r>:
    70fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    7100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7104:	460c      	mov	r4, r1
    7106:	0711      	lsls	r1, r2, #28
    7108:	4680      	mov	r8, r0
    710a:	d447      	bmi.n	719c <__sflush_r+0xa0>
    710c:	6863      	ldr	r3, [r4, #4]
    710e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7112:	2b00      	cmp	r3, #0
    7114:	81a2      	strh	r2, [r4, #12]
    7116:	dd5e      	ble.n	71d6 <__sflush_r+0xda>
    7118:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    711a:	2d00      	cmp	r5, #0
    711c:	d058      	beq.n	71d0 <__sflush_r+0xd4>
    711e:	2300      	movs	r3, #0
    7120:	f8d8 6000 	ldr.w	r6, [r8]
    7124:	f8c8 3000 	str.w	r3, [r8]
    7128:	b293      	uxth	r3, r2
    712a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    712e:	d156      	bne.n	71de <__sflush_r+0xe2>
    7130:	2301      	movs	r3, #1
    7132:	69e1      	ldr	r1, [r4, #28]
    7134:	4640      	mov	r0, r8
    7136:	47a8      	blx	r5
    7138:	1c43      	adds	r3, r0, #1
    713a:	d067      	beq.n	720c <__sflush_r+0x110>
    713c:	89a3      	ldrh	r3, [r4, #12]
    713e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    7140:	075f      	lsls	r7, r3, #29
    7142:	d505      	bpl.n	7150 <__sflush_r+0x54>
    7144:	6863      	ldr	r3, [r4, #4]
    7146:	1ac0      	subs	r0, r0, r3
    7148:	6b23      	ldr	r3, [r4, #48]	; 0x30
    714a:	b10b      	cbz	r3, 7150 <__sflush_r+0x54>
    714c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    714e:	1ac0      	subs	r0, r0, r3
    7150:	69e1      	ldr	r1, [r4, #28]
    7152:	4602      	mov	r2, r0
    7154:	2300      	movs	r3, #0
    7156:	4640      	mov	r0, r8
    7158:	47a8      	blx	r5
    715a:	1c41      	adds	r1, r0, #1
    715c:	d141      	bne.n	71e2 <__sflush_r+0xe6>
    715e:	f8d8 3000 	ldr.w	r3, [r8]
    7162:	2b00      	cmp	r3, #0
    7164:	d03d      	beq.n	71e2 <__sflush_r+0xe6>
    7166:	2b1d      	cmp	r3, #29
    7168:	d001      	beq.n	716e <__sflush_r+0x72>
    716a:	2b16      	cmp	r3, #22
    716c:	d156      	bne.n	721c <__sflush_r+0x120>
    716e:	89a3      	ldrh	r3, [r4, #12]
    7170:	6922      	ldr	r2, [r4, #16]
    7172:	6022      	str	r2, [r4, #0]
    7174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7178:	2100      	movs	r1, #0
    717a:	6061      	str	r1, [r4, #4]
    717c:	81a3      	strh	r3, [r4, #12]
    717e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7180:	f8c8 6000 	str.w	r6, [r8]
    7184:	b321      	cbz	r1, 71d0 <__sflush_r+0xd4>
    7186:	f104 0340 	add.w	r3, r4, #64	; 0x40
    718a:	4299      	cmp	r1, r3
    718c:	d002      	beq.n	7194 <__sflush_r+0x98>
    718e:	4640      	mov	r0, r8
    7190:	f7ff fa18 	bl	65c4 <_free_r>
    7194:	2000      	movs	r0, #0
    7196:	6320      	str	r0, [r4, #48]	; 0x30
    7198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    719c:	6926      	ldr	r6, [r4, #16]
    719e:	b1be      	cbz	r6, 71d0 <__sflush_r+0xd4>
    71a0:	b293      	uxth	r3, r2
    71a2:	6825      	ldr	r5, [r4, #0]
    71a4:	6026      	str	r6, [r4, #0]
    71a6:	079a      	lsls	r2, r3, #30
    71a8:	bf0c      	ite	eq
    71aa:	6963      	ldreq	r3, [r4, #20]
    71ac:	2300      	movne	r3, #0
    71ae:	1bad      	subs	r5, r5, r6
    71b0:	60a3      	str	r3, [r4, #8]
    71b2:	e00b      	b.n	71cc <__sflush_r+0xd0>
    71b4:	462b      	mov	r3, r5
    71b6:	4632      	mov	r2, r6
    71b8:	69e1      	ldr	r1, [r4, #28]
    71ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
    71bc:	4640      	mov	r0, r8
    71be:	47b8      	blx	r7
    71c0:	f1b0 0c00 	subs.w	ip, r0, #0
    71c4:	eba5 050c 	sub.w	r5, r5, ip
    71c8:	4466      	add	r6, ip
    71ca:	dd17      	ble.n	71fc <__sflush_r+0x100>
    71cc:	2d00      	cmp	r5, #0
    71ce:	dcf1      	bgt.n	71b4 <__sflush_r+0xb8>
    71d0:	2000      	movs	r0, #0
    71d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    71d8:	2b00      	cmp	r3, #0
    71da:	dc9d      	bgt.n	7118 <__sflush_r+0x1c>
    71dc:	e7f8      	b.n	71d0 <__sflush_r+0xd4>
    71de:	6d20      	ldr	r0, [r4, #80]	; 0x50
    71e0:	e7ae      	b.n	7140 <__sflush_r+0x44>
    71e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    71e6:	6922      	ldr	r2, [r4, #16]
    71e8:	6022      	str	r2, [r4, #0]
    71ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    71ee:	81a3      	strh	r3, [r4, #12]
    71f0:	2200      	movs	r2, #0
    71f2:	04db      	lsls	r3, r3, #19
    71f4:	6062      	str	r2, [r4, #4]
    71f6:	d5c2      	bpl.n	717e <__sflush_r+0x82>
    71f8:	6520      	str	r0, [r4, #80]	; 0x50
    71fa:	e7c0      	b.n	717e <__sflush_r+0x82>
    71fc:	89a3      	ldrh	r3, [r4, #12]
    71fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7202:	f04f 30ff 	mov.w	r0, #4294967295
    7206:	81a3      	strh	r3, [r4, #12]
    7208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    720c:	f8d8 3000 	ldr.w	r3, [r8]
    7210:	2b00      	cmp	r3, #0
    7212:	d093      	beq.n	713c <__sflush_r+0x40>
    7214:	2b1d      	cmp	r3, #29
    7216:	d006      	beq.n	7226 <__sflush_r+0x12a>
    7218:	2b16      	cmp	r3, #22
    721a:	d004      	beq.n	7226 <__sflush_r+0x12a>
    721c:	89a3      	ldrh	r3, [r4, #12]
    721e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7222:	81a3      	strh	r3, [r4, #12]
    7224:	e7d5      	b.n	71d2 <__sflush_r+0xd6>
    7226:	f8c8 6000 	str.w	r6, [r8]
    722a:	e7d1      	b.n	71d0 <__sflush_r+0xd4>

0000722c <_fflush_r>:
    722c:	b538      	push	{r3, r4, r5, lr}
    722e:	460c      	mov	r4, r1
    7230:	4605      	mov	r5, r0
    7232:	b108      	cbz	r0, 7238 <_fflush_r+0xc>
    7234:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7236:	b303      	cbz	r3, 727a <_fflush_r+0x4e>
    7238:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    723c:	b188      	cbz	r0, 7262 <_fflush_r+0x36>
    723e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7240:	07db      	lsls	r3, r3, #31
    7242:	d401      	bmi.n	7248 <_fflush_r+0x1c>
    7244:	0581      	lsls	r1, r0, #22
    7246:	d50f      	bpl.n	7268 <_fflush_r+0x3c>
    7248:	4628      	mov	r0, r5
    724a:	4621      	mov	r1, r4
    724c:	f7ff ff56 	bl	70fc <__sflush_r>
    7250:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7252:	07da      	lsls	r2, r3, #31
    7254:	4605      	mov	r5, r0
    7256:	d402      	bmi.n	725e <_fflush_r+0x32>
    7258:	89a3      	ldrh	r3, [r4, #12]
    725a:	059b      	lsls	r3, r3, #22
    725c:	d508      	bpl.n	7270 <_fflush_r+0x44>
    725e:	4628      	mov	r0, r5
    7260:	bd38      	pop	{r3, r4, r5, pc}
    7262:	4605      	mov	r5, r0
    7264:	4628      	mov	r0, r5
    7266:	bd38      	pop	{r3, r4, r5, pc}
    7268:	6da0      	ldr	r0, [r4, #88]	; 0x58
    726a:	f7fe fed5 	bl	6018 <__retarget_lock_acquire_recursive>
    726e:	e7eb      	b.n	7248 <_fflush_r+0x1c>
    7270:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7272:	f7fe fed3 	bl	601c <__retarget_lock_release_recursive>
    7276:	4628      	mov	r0, r5
    7278:	bd38      	pop	{r3, r4, r5, pc}
    727a:	f7fe fa25 	bl	56c8 <__sinit>
    727e:	e7db      	b.n	7238 <_fflush_r+0xc>

00007280 <memcmp>:
    7280:	2a03      	cmp	r2, #3
    7282:	b570      	push	{r4, r5, r6, lr}
    7284:	d914      	bls.n	72b0 <memcmp+0x30>
    7286:	ea40 0301 	orr.w	r3, r0, r1
    728a:	079b      	lsls	r3, r3, #30
    728c:	d122      	bne.n	72d4 <memcmp+0x54>
    728e:	4604      	mov	r4, r0
    7290:	460b      	mov	r3, r1
    7292:	4619      	mov	r1, r3
    7294:	4620      	mov	r0, r4
    7296:	680e      	ldr	r6, [r1, #0]
    7298:	6805      	ldr	r5, [r0, #0]
    729a:	42b5      	cmp	r5, r6
    729c:	f104 0404 	add.w	r4, r4, #4
    72a0:	f103 0304 	add.w	r3, r3, #4
    72a4:	d116      	bne.n	72d4 <memcmp+0x54>
    72a6:	3a04      	subs	r2, #4
    72a8:	2a03      	cmp	r2, #3
    72aa:	4620      	mov	r0, r4
    72ac:	4619      	mov	r1, r3
    72ae:	d8f0      	bhi.n	7292 <memcmp+0x12>
    72b0:	1e54      	subs	r4, r2, #1
    72b2:	b19a      	cbz	r2, 72dc <memcmp+0x5c>
    72b4:	1e42      	subs	r2, r0, #1
    72b6:	3901      	subs	r1, #1
    72b8:	e001      	b.n	72be <memcmp+0x3e>
    72ba:	18c3      	adds	r3, r0, r3
    72bc:	d00c      	beq.n	72d8 <memcmp+0x58>
    72be:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    72c2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    72c6:	45e6      	cmp	lr, ip
    72c8:	eba4 0302 	sub.w	r3, r4, r2
    72cc:	d0f5      	beq.n	72ba <memcmp+0x3a>
    72ce:	ebae 000c 	sub.w	r0, lr, ip
    72d2:	bd70      	pop	{r4, r5, r6, pc}
    72d4:	1e54      	subs	r4, r2, #1
    72d6:	e7ed      	b.n	72b4 <memcmp+0x34>
    72d8:	4618      	mov	r0, r3
    72da:	bd70      	pop	{r4, r5, r6, pc}
    72dc:	4610      	mov	r0, r2
    72de:	bd70      	pop	{r4, r5, r6, pc}

000072e0 <strnlen>:
    72e0:	b171      	cbz	r1, 7300 <strnlen+0x20>
    72e2:	4603      	mov	r3, r0
    72e4:	eb00 0c01 	add.w	ip, r0, r1
    72e8:	e001      	b.n	72ee <strnlen+0xe>
    72ea:	4563      	cmp	r3, ip
    72ec:	d006      	beq.n	72fc <strnlen+0x1c>
    72ee:	461a      	mov	r2, r3
    72f0:	3301      	adds	r3, #1
    72f2:	7811      	ldrb	r1, [r2, #0]
    72f4:	2900      	cmp	r1, #0
    72f6:	d1f8      	bne.n	72ea <strnlen+0xa>
    72f8:	1a10      	subs	r0, r2, r0
    72fa:	4770      	bx	lr
    72fc:	1a18      	subs	r0, r3, r0
    72fe:	4770      	bx	lr
    7300:	4608      	mov	r0, r1
    7302:	4770      	bx	lr

00007304 <_localeconv_r>:
    7304:	4800      	ldr	r0, [pc, #0]	; (7308 <_localeconv_r+0x4>)
    7306:	4770      	bx	lr
    7308:	200012bc 	.word	0x200012bc
    730c:	00000000 	.word	0x00000000

00007310 <memchr>:
    7310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7314:	2a10      	cmp	r2, #16
    7316:	db2b      	blt.n	7370 <memchr+0x60>
    7318:	f010 0f07 	tst.w	r0, #7
    731c:	d008      	beq.n	7330 <memchr+0x20>
    731e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7322:	3a01      	subs	r2, #1
    7324:	428b      	cmp	r3, r1
    7326:	d02d      	beq.n	7384 <memchr+0x74>
    7328:	f010 0f07 	tst.w	r0, #7
    732c:	b342      	cbz	r2, 7380 <memchr+0x70>
    732e:	d1f6      	bne.n	731e <memchr+0xe>
    7330:	b4f0      	push	{r4, r5, r6, r7}
    7332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    733a:	f022 0407 	bic.w	r4, r2, #7
    733e:	f07f 0700 	mvns.w	r7, #0
    7342:	2300      	movs	r3, #0
    7344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7348:	3c08      	subs	r4, #8
    734a:	ea85 0501 	eor.w	r5, r5, r1
    734e:	ea86 0601 	eor.w	r6, r6, r1
    7352:	fa85 f547 	uadd8	r5, r5, r7
    7356:	faa3 f587 	sel	r5, r3, r7
    735a:	fa86 f647 	uadd8	r6, r6, r7
    735e:	faa5 f687 	sel	r6, r5, r7
    7362:	b98e      	cbnz	r6, 7388 <memchr+0x78>
    7364:	d1ee      	bne.n	7344 <memchr+0x34>
    7366:	bcf0      	pop	{r4, r5, r6, r7}
    7368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    736c:	f002 0207 	and.w	r2, r2, #7
    7370:	b132      	cbz	r2, 7380 <memchr+0x70>
    7372:	f810 3b01 	ldrb.w	r3, [r0], #1
    7376:	3a01      	subs	r2, #1
    7378:	ea83 0301 	eor.w	r3, r3, r1
    737c:	b113      	cbz	r3, 7384 <memchr+0x74>
    737e:	d1f8      	bne.n	7372 <memchr+0x62>
    7380:	2000      	movs	r0, #0
    7382:	4770      	bx	lr
    7384:	3801      	subs	r0, #1
    7386:	4770      	bx	lr
    7388:	2d00      	cmp	r5, #0
    738a:	bf06      	itte	eq
    738c:	4635      	moveq	r5, r6
    738e:	3803      	subeq	r0, #3
    7390:	3807      	subne	r0, #7
    7392:	f015 0f01 	tst.w	r5, #1
    7396:	d107      	bne.n	73a8 <memchr+0x98>
    7398:	3001      	adds	r0, #1
    739a:	f415 7f80 	tst.w	r5, #256	; 0x100
    739e:	bf02      	ittt	eq
    73a0:	3001      	addeq	r0, #1
    73a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    73a6:	3001      	addeq	r0, #1
    73a8:	bcf0      	pop	{r4, r5, r6, r7}
    73aa:	3801      	subs	r0, #1
    73ac:	4770      	bx	lr
    73ae:	bf00      	nop

000073b0 <__assert_func>:
    73b0:	b500      	push	{lr}
    73b2:	4c0b      	ldr	r4, [pc, #44]	; (73e0 <__assert_func+0x30>)
    73b4:	6825      	ldr	r5, [r4, #0]
    73b6:	4614      	mov	r4, r2
    73b8:	68ee      	ldr	r6, [r5, #12]
    73ba:	461a      	mov	r2, r3
    73bc:	b085      	sub	sp, #20
    73be:	4603      	mov	r3, r0
    73c0:	460d      	mov	r5, r1
    73c2:	b14c      	cbz	r4, 73d8 <__assert_func+0x28>
    73c4:	4907      	ldr	r1, [pc, #28]	; (73e4 <__assert_func+0x34>)
    73c6:	9500      	str	r5, [sp, #0]
    73c8:	e9cd 1401 	strd	r1, r4, [sp, #4]
    73cc:	4630      	mov	r0, r6
    73ce:	4906      	ldr	r1, [pc, #24]	; (73e8 <__assert_func+0x38>)
    73d0:	f000 ff86 	bl	82e0 <fiprintf>
    73d4:	f7fb fd54 	bl	2e80 <abort>
    73d8:	4904      	ldr	r1, [pc, #16]	; (73ec <__assert_func+0x3c>)
    73da:	460c      	mov	r4, r1
    73dc:	e7f3      	b.n	73c6 <__assert_func+0x16>
    73de:	bf00      	nop
    73e0:	20001754 	.word	0x20001754
    73e4:	200004f0 	.word	0x200004f0
    73e8:	20000500 	.word	0x20000500
    73ec:	20000388 	.word	0x20000388

000073f0 <_calloc_r>:
    73f0:	b538      	push	{r3, r4, r5, lr}
    73f2:	fba1 1402 	umull	r1, r4, r1, r2
    73f6:	bb8c      	cbnz	r4, 745c <_calloc_r+0x6c>
    73f8:	f7fd fb12 	bl	4a20 <_malloc_r>
    73fc:	4605      	mov	r5, r0
    73fe:	b1e0      	cbz	r0, 743a <_calloc_r+0x4a>
    7400:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7404:	f022 0203 	bic.w	r2, r2, #3
    7408:	3a04      	subs	r2, #4
    740a:	2a24      	cmp	r2, #36	; 0x24
    740c:	d817      	bhi.n	743e <_calloc_r+0x4e>
    740e:	2a13      	cmp	r2, #19
    7410:	d91a      	bls.n	7448 <_calloc_r+0x58>
    7412:	2a1b      	cmp	r2, #27
    7414:	e9c0 4400 	strd	r4, r4, [r0]
    7418:	d91d      	bls.n	7456 <_calloc_r+0x66>
    741a:	2a24      	cmp	r2, #36	; 0x24
    741c:	bf14      	ite	ne
    741e:	f100 0210 	addne.w	r2, r0, #16
    7422:	f100 0218 	addeq.w	r2, r0, #24
    7426:	f04f 0300 	mov.w	r3, #0
    742a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    742e:	bf04      	itt	eq
    7430:	6104      	streq	r4, [r0, #16]
    7432:	6144      	streq	r4, [r0, #20]
    7434:	e9c2 3300 	strd	r3, r3, [r2]
    7438:	6093      	str	r3, [r2, #8]
    743a:	4628      	mov	r0, r5
    743c:	bd38      	pop	{r3, r4, r5, pc}
    743e:	4621      	mov	r1, r4
    7440:	f7fe fa52 	bl	58e8 <memset>
    7444:	4628      	mov	r0, r5
    7446:	bd38      	pop	{r3, r4, r5, pc}
    7448:	4602      	mov	r2, r0
    744a:	2300      	movs	r3, #0
    744c:	e9c2 3300 	strd	r3, r3, [r2]
    7450:	6093      	str	r3, [r2, #8]
    7452:	4628      	mov	r0, r5
    7454:	bd38      	pop	{r3, r4, r5, pc}
    7456:	f100 0208 	add.w	r2, r0, #8
    745a:	e7f6      	b.n	744a <_calloc_r+0x5a>
    745c:	f7fe fdae 	bl	5fbc <__errno>
    7460:	230c      	movs	r3, #12
    7462:	2500      	movs	r5, #0
    7464:	6003      	str	r3, [r0, #0]
    7466:	e7e8      	b.n	743a <_calloc_r+0x4a>

00007468 <quorem>:
    7468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    746c:	6903      	ldr	r3, [r0, #16]
    746e:	690c      	ldr	r4, [r1, #16]
    7470:	42a3      	cmp	r3, r4
    7472:	b083      	sub	sp, #12
    7474:	f2c0 8087 	blt.w	7586 <quorem+0x11e>
    7478:	3c01      	subs	r4, #1
    747a:	f101 0514 	add.w	r5, r1, #20
    747e:	00a3      	lsls	r3, r4, #2
    7480:	f100 0814 	add.w	r8, r0, #20
    7484:	9300      	str	r3, [sp, #0]
    7486:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    748a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    748e:	3301      	adds	r3, #1
    7490:	4681      	mov	r9, r0
    7492:	429a      	cmp	r2, r3
    7494:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    7498:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    749c:	9001      	str	r0, [sp, #4]
    749e:	fbb2 f6f3 	udiv	r6, r2, r3
    74a2:	d33b      	bcc.n	751c <quorem+0xb4>
    74a4:	f04f 0c00 	mov.w	ip, #0
    74a8:	46ae      	mov	lr, r5
    74aa:	4640      	mov	r0, r8
    74ac:	46e2      	mov	sl, ip
    74ae:	4663      	mov	r3, ip
    74b0:	f85e bb04 	ldr.w	fp, [lr], #4
    74b4:	6802      	ldr	r2, [r0, #0]
    74b6:	fa1f fc8b 	uxth.w	ip, fp
    74ba:	fb06 330c 	mla	r3, r6, ip, r3
    74be:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    74c2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    74c6:	fb06 cc0b 	mla	ip, r6, fp, ip
    74ca:	b29b      	uxth	r3, r3
    74cc:	ebaa 0303 	sub.w	r3, sl, r3
    74d0:	fa1f fa8c 	uxth.w	sl, ip
    74d4:	fa13 f382 	uxtah	r3, r3, r2
    74d8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    74dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
    74e0:	b29b      	uxth	r3, r3
    74e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    74e6:	4577      	cmp	r7, lr
    74e8:	f840 3b04 	str.w	r3, [r0], #4
    74ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
    74f0:	ea4f 431c 	mov.w	r3, ip, lsr #16
    74f4:	d2dc      	bcs.n	74b0 <quorem+0x48>
    74f6:	9b00      	ldr	r3, [sp, #0]
    74f8:	f858 3003 	ldr.w	r3, [r8, r3]
    74fc:	b973      	cbnz	r3, 751c <quorem+0xb4>
    74fe:	9b01      	ldr	r3, [sp, #4]
    7500:	3b04      	subs	r3, #4
    7502:	4598      	cmp	r8, r3
    7504:	d304      	bcc.n	7510 <quorem+0xa8>
    7506:	e007      	b.n	7518 <quorem+0xb0>
    7508:	4598      	cmp	r8, r3
    750a:	f104 34ff 	add.w	r4, r4, #4294967295
    750e:	d203      	bcs.n	7518 <quorem+0xb0>
    7510:	f853 2904 	ldr.w	r2, [r3], #-4
    7514:	2a00      	cmp	r2, #0
    7516:	d0f7      	beq.n	7508 <quorem+0xa0>
    7518:	f8c9 4010 	str.w	r4, [r9, #16]
    751c:	4648      	mov	r0, r9
    751e:	f7ff fbf3 	bl	6d08 <__mcmp>
    7522:	2800      	cmp	r0, #0
    7524:	db2b      	blt.n	757e <quorem+0x116>
    7526:	3601      	adds	r6, #1
    7528:	4641      	mov	r1, r8
    752a:	2300      	movs	r3, #0
    752c:	f855 0b04 	ldr.w	r0, [r5], #4
    7530:	f8d1 c000 	ldr.w	ip, [r1]
    7534:	b282      	uxth	r2, r0
    7536:	1a9a      	subs	r2, r3, r2
    7538:	0c03      	lsrs	r3, r0, #16
    753a:	fa12 f28c 	uxtah	r2, r2, ip
    753e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    7542:	eb03 4322 	add.w	r3, r3, r2, asr #16
    7546:	b292      	uxth	r2, r2
    7548:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    754c:	42af      	cmp	r7, r5
    754e:	f841 2b04 	str.w	r2, [r1], #4
    7552:	ea4f 4323 	mov.w	r3, r3, asr #16
    7556:	d2e9      	bcs.n	752c <quorem+0xc4>
    7558:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    755c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    7560:	b96a      	cbnz	r2, 757e <quorem+0x116>
    7562:	3b04      	subs	r3, #4
    7564:	4598      	cmp	r8, r3
    7566:	d304      	bcc.n	7572 <quorem+0x10a>
    7568:	e007      	b.n	757a <quorem+0x112>
    756a:	4598      	cmp	r8, r3
    756c:	f104 34ff 	add.w	r4, r4, #4294967295
    7570:	d203      	bcs.n	757a <quorem+0x112>
    7572:	f853 2904 	ldr.w	r2, [r3], #-4
    7576:	2a00      	cmp	r2, #0
    7578:	d0f7      	beq.n	756a <quorem+0x102>
    757a:	f8c9 4010 	str.w	r4, [r9, #16]
    757e:	4630      	mov	r0, r6
    7580:	b003      	add	sp, #12
    7582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7586:	2000      	movs	r0, #0
    7588:	b003      	add	sp, #12
    758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    758e:	bf00      	nop

00007590 <_dtoa_r>:
    7590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7594:	ed2d 8b02 	vpush	{d8}
    7598:	b08f      	sub	sp, #60	; 0x3c
    759a:	ed8d 0b02 	vstr	d0, [sp, #8]
    759e:	9101      	str	r1, [sp, #4]
    75a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    75a2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    75a4:	9305      	str	r3, [sp, #20]
    75a6:	ec57 6b10 	vmov	r6, r7, d0
    75aa:	4604      	mov	r4, r0
    75ac:	4693      	mov	fp, r2
    75ae:	b141      	cbz	r1, 75c2 <_dtoa_r+0x32>
    75b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    75b2:	604a      	str	r2, [r1, #4]
    75b4:	2301      	movs	r3, #1
    75b6:	4093      	lsls	r3, r2
    75b8:	608b      	str	r3, [r1, #8]
    75ba:	f7ff f945 	bl	6848 <_Bfree>
    75be:	2300      	movs	r3, #0
    75c0:	63a3      	str	r3, [r4, #56]	; 0x38
    75c2:	f1b7 0800 	subs.w	r8, r7, #0
    75c6:	bfb4      	ite	lt
    75c8:	2301      	movlt	r3, #1
    75ca:	2300      	movge	r3, #0
    75cc:	602b      	str	r3, [r5, #0]
    75ce:	4bbe      	ldr	r3, [pc, #760]	; (78c8 <_dtoa_r+0x338>)
    75d0:	bfbc      	itt	lt
    75d2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    75d6:	f8cd 800c 	strlt.w	r8, [sp, #12]
    75da:	ea33 0308 	bics.w	r3, r3, r8
    75de:	f000 809f 	beq.w	7720 <_dtoa_r+0x190>
    75e2:	ed9d 8b02 	vldr	d8, [sp, #8]
    75e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    75ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    75ee:	d111      	bne.n	7614 <_dtoa_r+0x84>
    75f0:	9a05      	ldr	r2, [sp, #20]
    75f2:	2301      	movs	r3, #1
    75f4:	6013      	str	r3, [r2, #0]
    75f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    75f8:	2b00      	cmp	r3, #0
    75fa:	f000 823f 	beq.w	7a7c <_dtoa_r+0x4ec>
    75fe:	4bb3      	ldr	r3, [pc, #716]	; (78cc <_dtoa_r+0x33c>)
    7600:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7602:	6013      	str	r3, [r2, #0]
    7604:	3b01      	subs	r3, #1
    7606:	9300      	str	r3, [sp, #0]
    7608:	9800      	ldr	r0, [sp, #0]
    760a:	b00f      	add	sp, #60	; 0x3c
    760c:	ecbd 8b02 	vpop	{d8}
    7610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7614:	aa0c      	add	r2, sp, #48	; 0x30
    7616:	a90d      	add	r1, sp, #52	; 0x34
    7618:	4620      	mov	r0, r4
    761a:	eeb0 0b48 	vmov.f64	d0, d8
    761e:	f7ff fc3f 	bl	6ea0 <__d2b>
    7622:	ea5f 5318 	movs.w	r3, r8, lsr #20
    7626:	4605      	mov	r5, r0
    7628:	f040 8092 	bne.w	7750 <_dtoa_r+0x1c0>
    762c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    7630:	440b      	add	r3, r1
    7632:	f203 4232 	addw	r2, r3, #1074	; 0x432
    7636:	2a20      	cmp	r2, #32
    7638:	f340 82fa 	ble.w	7c30 <_dtoa_r+0x6a0>
    763c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7640:	fa08 f802 	lsl.w	r8, r8, r2
    7644:	f203 4212 	addw	r2, r3, #1042	; 0x412
    7648:	40d6      	lsrs	r6, r2
    764a:	ea48 0206 	orr.w	r2, r8, r6
    764e:	ee07 2a10 	vmov	s14, r2
    7652:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    7656:	1e58      	subs	r0, r3, #1
    7658:	ee17 6a90 	vmov	r6, s15
    765c:	ec53 2b17 	vmov	r2, r3, d7
    7660:	f04f 0a01 	mov.w	sl, #1
    7664:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7668:	ed9f 3b91 	vldr	d3, [pc, #580]	; 78b0 <_dtoa_r+0x320>
    766c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 78b8 <_dtoa_r+0x328>
    7670:	ed9f 5b93 	vldr	d5, [pc, #588]	; 78c0 <_dtoa_r+0x330>
    7674:	ee06 0a90 	vmov	s13, r0
    7678:	ec43 2b12 	vmov	d2, r2, r3
    767c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7680:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7684:	ee32 6b46 	vsub.f64	d6, d2, d6
    7688:	eea6 7b03 	vfma.f64	d7, d6, d3
    768c:	eea4 7b05 	vfma.f64	d7, d4, d5
    7690:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7694:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    7698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    769c:	ee16 7a90 	vmov	r7, s13
    76a0:	d508      	bpl.n	76b4 <_dtoa_r+0x124>
    76a2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    76a6:	eeb4 6b47 	vcmp.f64	d6, d7
    76aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76ae:	bf18      	it	ne
    76b0:	f107 37ff 	addne.w	r7, r7, #4294967295
    76b4:	2f16      	cmp	r7, #22
    76b6:	f200 8145 	bhi.w	7944 <_dtoa_r+0x3b4>
    76ba:	4b85      	ldr	r3, [pc, #532]	; (78d0 <_dtoa_r+0x340>)
    76bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    76c0:	ed93 7b00 	vldr	d7, [r3]
    76c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
    76c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76cc:	d557      	bpl.n	777e <_dtoa_r+0x1ee>
    76ce:	1a09      	subs	r1, r1, r0
    76d0:	2300      	movs	r3, #0
    76d2:	f1b1 0801 	subs.w	r8, r1, #1
    76d6:	f107 37ff 	add.w	r7, r7, #4294967295
    76da:	930a      	str	r3, [sp, #40]	; 0x28
    76dc:	f100 8139 	bmi.w	7952 <_dtoa_r+0x3c2>
    76e0:	2300      	movs	r3, #0
    76e2:	9306      	str	r3, [sp, #24]
    76e4:	2f00      	cmp	r7, #0
    76e6:	da52      	bge.n	778e <_dtoa_r+0x1fe>
    76e8:	9b06      	ldr	r3, [sp, #24]
    76ea:	9704      	str	r7, [sp, #16]
    76ec:	1bdb      	subs	r3, r3, r7
    76ee:	9306      	str	r3, [sp, #24]
    76f0:	427b      	negs	r3, r7
    76f2:	9308      	str	r3, [sp, #32]
    76f4:	9b01      	ldr	r3, [sp, #4]
    76f6:	2b09      	cmp	r3, #9
    76f8:	f04f 0700 	mov.w	r7, #0
    76fc:	d84e      	bhi.n	779c <_dtoa_r+0x20c>
    76fe:	2b05      	cmp	r3, #5
    7700:	f340 829d 	ble.w	7c3e <_dtoa_r+0x6ae>
    7704:	3b04      	subs	r3, #4
    7706:	9301      	str	r3, [sp, #4]
    7708:	2600      	movs	r6, #0
    770a:	9b01      	ldr	r3, [sp, #4]
    770c:	1e9a      	subs	r2, r3, #2
    770e:	2a03      	cmp	r2, #3
    7710:	f200 8125 	bhi.w	795e <_dtoa_r+0x3ce>
    7714:	e8df f012 	tbh	[pc, r2, lsl #1]
    7718:	03a703aa 	.word	0x03a703aa
    771c:	037e039d 	.word	0x037e039d
    7720:	9a05      	ldr	r2, [sp, #20]
    7722:	f3c8 0813 	ubfx	r8, r8, #0, #20
    7726:	f242 730f 	movw	r3, #9999	; 0x270f
    772a:	ea58 0806 	orrs.w	r8, r8, r6
    772e:	6013      	str	r3, [r2, #0]
    7730:	d11e      	bne.n	7770 <_dtoa_r+0x1e0>
    7732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7734:	2b00      	cmp	r3, #0
    7736:	f000 8591 	beq.w	825c <_dtoa_r+0xccc>
    773a:	4b66      	ldr	r3, [pc, #408]	; (78d4 <_dtoa_r+0x344>)
    773c:	9300      	str	r3, [sp, #0]
    773e:	3308      	adds	r3, #8
    7740:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7742:	9800      	ldr	r0, [sp, #0]
    7744:	6013      	str	r3, [r2, #0]
    7746:	b00f      	add	sp, #60	; 0x3c
    7748:	ecbd 8b02 	vpop	{d8}
    774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7750:	ee18 6a90 	vmov	r6, s17
    7754:	f3c6 0613 	ubfx	r6, r6, #0, #20
    7758:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    775c:	ec53 2b18 	vmov	r2, r3, d8
    7760:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    7764:	990c      	ldr	r1, [sp, #48]	; 0x30
    7766:	f04f 0a00 	mov.w	sl, #0
    776a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    776e:	e77b      	b.n	7668 <_dtoa_r+0xd8>
    7770:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7772:	2b00      	cmp	r3, #0
    7774:	f040 833b 	bne.w	7dee <_dtoa_r+0x85e>
    7778:	4b57      	ldr	r3, [pc, #348]	; (78d8 <_dtoa_r+0x348>)
    777a:	9300      	str	r3, [sp, #0]
    777c:	e744      	b.n	7608 <_dtoa_r+0x78>
    777e:	1a09      	subs	r1, r1, r0
    7780:	2300      	movs	r3, #0
    7782:	f1b1 0801 	subs.w	r8, r1, #1
    7786:	930a      	str	r3, [sp, #40]	; 0x28
    7788:	f100 80e3 	bmi.w	7952 <_dtoa_r+0x3c2>
    778c:	9306      	str	r3, [sp, #24]
    778e:	2300      	movs	r3, #0
    7790:	9308      	str	r3, [sp, #32]
    7792:	9b01      	ldr	r3, [sp, #4]
    7794:	9704      	str	r7, [sp, #16]
    7796:	2b09      	cmp	r3, #9
    7798:	44b8      	add	r8, r7
    779a:	d9b0      	bls.n	76fe <_dtoa_r+0x16e>
    779c:	2300      	movs	r3, #0
    779e:	2601      	movs	r6, #1
    77a0:	9301      	str	r3, [sp, #4]
    77a2:	9607      	str	r6, [sp, #28]
    77a4:	f04f 39ff 	mov.w	r9, #4294967295
    77a8:	469b      	mov	fp, r3
    77aa:	2100      	movs	r1, #0
    77ac:	63e1      	str	r1, [r4, #60]	; 0x3c
    77ae:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    77b2:	4620      	mov	r0, r4
    77b4:	f7ff f822 	bl	67fc <_Balloc>
    77b8:	9000      	str	r0, [sp, #0]
    77ba:	2800      	cmp	r0, #0
    77bc:	f000 8540 	beq.w	8240 <_dtoa_r+0xcb0>
    77c0:	9b00      	ldr	r3, [sp, #0]
    77c2:	63a3      	str	r3, [r4, #56]	; 0x38
    77c4:	f1b9 0f0e 	cmp.w	r9, #14
    77c8:	f200 80dc 	bhi.w	7984 <_dtoa_r+0x3f4>
    77cc:	2e00      	cmp	r6, #0
    77ce:	f000 80d9 	beq.w	7984 <_dtoa_r+0x3f4>
    77d2:	9b04      	ldr	r3, [sp, #16]
    77d4:	2b00      	cmp	r3, #0
    77d6:	f340 83de 	ble.w	7f96 <_dtoa_r+0xa06>
    77da:	4a3d      	ldr	r2, [pc, #244]	; (78d0 <_dtoa_r+0x340>)
    77dc:	f003 010f 	and.w	r1, r3, #15
    77e0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    77e4:	ed92 7b00 	vldr	d7, [r2]
    77e8:	111a      	asrs	r2, r3, #4
    77ea:	05db      	lsls	r3, r3, #23
    77ec:	f140 8382 	bpl.w	7ef4 <_dtoa_r+0x964>
    77f0:	493a      	ldr	r1, [pc, #232]	; (78dc <_dtoa_r+0x34c>)
    77f2:	ed91 6b08 	vldr	d6, [r1, #32]
    77f6:	f002 020f 	and.w	r2, r2, #15
    77fa:	2003      	movs	r0, #3
    77fc:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7800:	b15a      	cbz	r2, 781a <_dtoa_r+0x28a>
    7802:	4936      	ldr	r1, [pc, #216]	; (78dc <_dtoa_r+0x34c>)
    7804:	07d6      	lsls	r6, r2, #31
    7806:	d504      	bpl.n	7812 <_dtoa_r+0x282>
    7808:	ed91 6b00 	vldr	d6, [r1]
    780c:	3001      	adds	r0, #1
    780e:	ee27 7b06 	vmul.f64	d7, d7, d6
    7812:	1052      	asrs	r2, r2, #1
    7814:	f101 0108 	add.w	r1, r1, #8
    7818:	d1f4      	bne.n	7804 <_dtoa_r+0x274>
    781a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    781e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7820:	b13b      	cbz	r3, 7832 <_dtoa_r+0x2a2>
    7822:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7826:	eeb4 6bc7 	vcmpe.f64	d6, d7
    782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    782e:	f100 84ae 	bmi.w	818e <_dtoa_r+0xbfe>
    7832:	ee07 0a90 	vmov	s15, r0
    7836:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    783a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    783e:	eea5 7b06 	vfma.f64	d7, d5, d6
    7842:	ee17 2a90 	vmov	r2, s15
    7846:	ec51 0b17 	vmov	r0, r1, d7
    784a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    784e:	f1b9 0f00 	cmp.w	r9, #0
    7852:	f000 8388 	beq.w	7f66 <_dtoa_r+0x9d6>
    7856:	9e04      	ldr	r6, [sp, #16]
    7858:	464a      	mov	r2, r9
    785a:	9b07      	ldr	r3, [sp, #28]
    785c:	2b00      	cmp	r3, #0
    785e:	f000 8447 	beq.w	80f0 <_dtoa_r+0xb60>
    7862:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    7866:	4b1a      	ldr	r3, [pc, #104]	; (78d0 <_dtoa_r+0x340>)
    7868:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    786c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7870:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    7874:	ee36 7b47 	vsub.f64	d7, d6, d7
    7878:	ed1c 6b02 	vldr	d6, [ip, #-8]
    787c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7880:	ec41 0b16 	vmov	d6, r0, r1
    7884:	ee14 0a90 	vmov	r0, s9
    7888:	ee35 5b46 	vsub.f64	d5, d5, d6
    788c:	9900      	ldr	r1, [sp, #0]
    788e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    7892:	3030      	adds	r0, #48	; 0x30
    7894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7898:	f801 0b01 	strb.w	r0, [r1], #1
    789c:	f300 84ac 	bgt.w	81f8 <_dtoa_r+0xc68>
    78a0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    78a4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    78a8:	f04f 0c00 	mov.w	ip, #0
    78ac:	e031      	b.n	7912 <_dtoa_r+0x382>
    78ae:	bf00      	nop
    78b0:	636f4361 	.word	0x636f4361
    78b4:	3fd287a7 	.word	0x3fd287a7
    78b8:	8b60c8b3 	.word	0x8b60c8b3
    78bc:	3fc68a28 	.word	0x3fc68a28
    78c0:	509f79fb 	.word	0x509f79fb
    78c4:	3fd34413 	.word	0x3fd34413
    78c8:	7ff00000 	.word	0x7ff00000
    78cc:	20000ae9 	.word	0x20000ae9
    78d0:	200002a8 	.word	0x200002a8
    78d4:	200006cc 	.word	0x200006cc
    78d8:	200006d8 	.word	0x200006d8
    78dc:	20000280 	.word	0x20000280
    78e0:	f10c 0c01 	add.w	ip, ip, #1
    78e4:	4594      	cmp	ip, r2
    78e6:	da4d      	bge.n	7984 <_dtoa_r+0x3f4>
    78e8:	ee27 7b04 	vmul.f64	d7, d7, d4
    78ec:	ee25 5b04 	vmul.f64	d5, d5, d4
    78f0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    78f4:	ee16 3a90 	vmov	r3, s13
    78f8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    78fc:	3330      	adds	r3, #48	; 0x30
    78fe:	ee37 7b43 	vsub.f64	d7, d7, d3
    7902:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    790a:	f801 3b01 	strb.w	r3, [r1], #1
    790e:	f100 8473 	bmi.w	81f8 <_dtoa_r+0xc68>
    7912:	ee32 6b47 	vsub.f64	d6, d2, d7
    7916:	eeb4 6bc5 	vcmpe.f64	d6, d5
    791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    791e:	d5df      	bpl.n	78e0 <_dtoa_r+0x350>
    7920:	9a00      	ldr	r2, [sp, #0]
    7922:	9604      	str	r6, [sp, #16]
    7924:	e002      	b.n	792c <_dtoa_r+0x39c>
    7926:	428a      	cmp	r2, r1
    7928:	f000 8450 	beq.w	81cc <_dtoa_r+0xc3c>
    792c:	4689      	mov	r9, r1
    792e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    7932:	2b39      	cmp	r3, #57	; 0x39
    7934:	d0f7      	beq.n	7926 <_dtoa_r+0x396>
    7936:	3301      	adds	r3, #1
    7938:	b2db      	uxtb	r3, r3
    793a:	700b      	strb	r3, [r1, #0]
    793c:	9b04      	ldr	r3, [sp, #16]
    793e:	3301      	adds	r3, #1
    7940:	9304      	str	r3, [sp, #16]
    7942:	e155      	b.n	7bf0 <_dtoa_r+0x660>
    7944:	1a09      	subs	r1, r1, r0
    7946:	2301      	movs	r3, #1
    7948:	f1b1 0801 	subs.w	r8, r1, #1
    794c:	930a      	str	r3, [sp, #40]	; 0x28
    794e:	f57f aec7 	bpl.w	76e0 <_dtoa_r+0x150>
    7952:	f1c1 0301 	rsb	r3, r1, #1
    7956:	9306      	str	r3, [sp, #24]
    7958:	f04f 0800 	mov.w	r8, #0
    795c:	e6c2      	b.n	76e4 <_dtoa_r+0x154>
    795e:	2600      	movs	r6, #0
    7960:	63e6      	str	r6, [r4, #60]	; 0x3c
    7962:	4631      	mov	r1, r6
    7964:	4620      	mov	r0, r4
    7966:	f7fe ff49 	bl	67fc <_Balloc>
    796a:	9000      	str	r0, [sp, #0]
    796c:	2800      	cmp	r0, #0
    796e:	f000 8467 	beq.w	8240 <_dtoa_r+0xcb0>
    7972:	9b00      	ldr	r3, [sp, #0]
    7974:	63a3      	str	r3, [r4, #56]	; 0x38
    7976:	f04f 33ff 	mov.w	r3, #4294967295
    797a:	930b      	str	r3, [sp, #44]	; 0x2c
    797c:	4699      	mov	r9, r3
    797e:	2301      	movs	r3, #1
    7980:	46b3      	mov	fp, r6
    7982:	9307      	str	r3, [sp, #28]
    7984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7986:	2a00      	cmp	r2, #0
    7988:	db55      	blt.n	7a36 <_dtoa_r+0x4a6>
    798a:	9904      	ldr	r1, [sp, #16]
    798c:	290e      	cmp	r1, #14
    798e:	dc52      	bgt.n	7a36 <_dtoa_r+0x4a6>
    7990:	4bb7      	ldr	r3, [pc, #732]	; (7c70 <_dtoa_r+0x6e0>)
    7992:	f1bb 0f00 	cmp.w	fp, #0
    7996:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    799a:	ed93 6b00 	vldr	d6, [r3]
    799e:	da15      	bge.n	79cc <_dtoa_r+0x43c>
    79a0:	f1b9 0f00 	cmp.w	r9, #0
    79a4:	dc12      	bgt.n	79cc <_dtoa_r+0x43c>
    79a6:	f040 82f2 	bne.w	7f8e <_dtoa_r+0x9fe>
    79aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    79ae:	ee26 7b07 	vmul.f64	d7, d6, d7
    79b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    79b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79ba:	46ca      	mov	sl, r9
    79bc:	464e      	mov	r6, r9
    79be:	f200 826d 	bhi.w	7e9c <_dtoa_r+0x90c>
    79c2:	f8dd 8000 	ldr.w	r8, [sp]
    79c6:	ea6f 0b0b 	mvn.w	fp, fp
    79ca:	e270      	b.n	7eae <_dtoa_r+0x91e>
    79cc:	ee88 7b06 	vdiv.f64	d7, d8, d6
    79d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    79d4:	9900      	ldr	r1, [sp, #0]
    79d6:	ee17 3a10 	vmov	r3, s14
    79da:	f1b9 0f01 	cmp.w	r9, #1
    79de:	f103 0330 	add.w	r3, r3, #48	; 0x30
    79e2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    79e6:	f801 3b01 	strb.w	r3, [r1], #1
    79ea:	eea5 8b46 	vfms.f64	d8, d5, d6
    79ee:	f000 8334 	beq.w	805a <_dtoa_r+0xaca>
    79f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    79f6:	2301      	movs	r3, #1
    79f8:	e011      	b.n	7a1e <_dtoa_r+0x48e>
    79fa:	ee88 7b06 	vdiv.f64	d7, d8, d6
    79fe:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    7a02:	3301      	adds	r3, #1
    7a04:	ee17 2a10 	vmov	r2, s14
    7a08:	454b      	cmp	r3, r9
    7a0a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    7a0e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    7a12:	f801 2b01 	strb.w	r2, [r1], #1
    7a16:	eea5 8b46 	vfms.f64	d8, d5, d6
    7a1a:	f000 831e 	beq.w	805a <_dtoa_r+0xaca>
    7a1e:	ee28 8b04 	vmul.f64	d8, d8, d4
    7a22:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a2a:	d1e6      	bne.n	79fa <_dtoa_r+0x46a>
    7a2c:	9b04      	ldr	r3, [sp, #16]
    7a2e:	3301      	adds	r3, #1
    7a30:	9304      	str	r3, [sp, #16]
    7a32:	4689      	mov	r9, r1
    7a34:	e0dc      	b.n	7bf0 <_dtoa_r+0x660>
    7a36:	9b07      	ldr	r3, [sp, #28]
    7a38:	b343      	cbz	r3, 7a8c <_dtoa_r+0x4fc>
    7a3a:	9b01      	ldr	r3, [sp, #4]
    7a3c:	2b01      	cmp	r3, #1
    7a3e:	f340 8276 	ble.w	7f2e <_dtoa_r+0x99e>
    7a42:	9b08      	ldr	r3, [sp, #32]
    7a44:	f109 3aff 	add.w	sl, r9, #4294967295
    7a48:	4553      	cmp	r3, sl
    7a4a:	f280 823f 	bge.w	7ecc <_dtoa_r+0x93c>
    7a4e:	9b08      	ldr	r3, [sp, #32]
    7a50:	f8cd a020 	str.w	sl, [sp, #32]
    7a54:	ebaa 0203 	sub.w	r2, sl, r3
    7a58:	4417      	add	r7, r2
    7a5a:	f04f 0a00 	mov.w	sl, #0
    7a5e:	f1b9 0f00 	cmp.w	r9, #0
    7a62:	f2c0 8325 	blt.w	80b0 <_dtoa_r+0xb20>
    7a66:	9b06      	ldr	r3, [sp, #24]
    7a68:	9309      	str	r3, [sp, #36]	; 0x24
    7a6a:	444b      	add	r3, r9
    7a6c:	44c8      	add	r8, r9
    7a6e:	9306      	str	r3, [sp, #24]
    7a70:	2101      	movs	r1, #1
    7a72:	4620      	mov	r0, r4
    7a74:	f7fe ff94 	bl	69a0 <__i2b>
    7a78:	4606      	mov	r6, r0
    7a7a:	e00c      	b.n	7a96 <_dtoa_r+0x506>
    7a7c:	4b7d      	ldr	r3, [pc, #500]	; (7c74 <_dtoa_r+0x6e4>)
    7a7e:	9300      	str	r3, [sp, #0]
    7a80:	9800      	ldr	r0, [sp, #0]
    7a82:	b00f      	add	sp, #60	; 0x3c
    7a84:	ecbd 8b02 	vpop	{d8}
    7a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a8c:	9b06      	ldr	r3, [sp, #24]
    7a8e:	f8dd a020 	ldr.w	sl, [sp, #32]
    7a92:	9e07      	ldr	r6, [sp, #28]
    7a94:	9309      	str	r3, [sp, #36]	; 0x24
    7a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7a98:	b16b      	cbz	r3, 7ab6 <_dtoa_r+0x526>
    7a9a:	f1b8 0f00 	cmp.w	r8, #0
    7a9e:	dd0a      	ble.n	7ab6 <_dtoa_r+0x526>
    7aa0:	4543      	cmp	r3, r8
    7aa2:	9906      	ldr	r1, [sp, #24]
    7aa4:	461a      	mov	r2, r3
    7aa6:	bfa8      	it	ge
    7aa8:	4642      	movge	r2, r8
    7aaa:	1a89      	subs	r1, r1, r2
    7aac:	1a9b      	subs	r3, r3, r2
    7aae:	9106      	str	r1, [sp, #24]
    7ab0:	9309      	str	r3, [sp, #36]	; 0x24
    7ab2:	eba8 0802 	sub.w	r8, r8, r2
    7ab6:	9b08      	ldr	r3, [sp, #32]
    7ab8:	b163      	cbz	r3, 7ad4 <_dtoa_r+0x544>
    7aba:	9b07      	ldr	r3, [sp, #28]
    7abc:	2b00      	cmp	r3, #0
    7abe:	f000 82a7 	beq.w	8010 <_dtoa_r+0xa80>
    7ac2:	f1ba 0f00 	cmp.w	sl, #0
    7ac6:	f300 8204 	bgt.w	7ed2 <_dtoa_r+0x942>
    7aca:	9b08      	ldr	r3, [sp, #32]
    7acc:	ebb3 020a 	subs.w	r2, r3, sl
    7ad0:	f040 82ff 	bne.w	80d2 <_dtoa_r+0xb42>
    7ad4:	2101      	movs	r1, #1
    7ad6:	4620      	mov	r0, r4
    7ad8:	f7fe ff62 	bl	69a0 <__i2b>
    7adc:	2f00      	cmp	r7, #0
    7ade:	4682      	mov	sl, r0
    7ae0:	f300 80af 	bgt.w	7c42 <_dtoa_r+0x6b2>
    7ae4:	9b01      	ldr	r3, [sp, #4]
    7ae6:	2b01      	cmp	r3, #1
    7ae8:	f340 8187 	ble.w	7dfa <_dtoa_r+0x86a>
    7aec:	2300      	movs	r3, #0
    7aee:	9308      	str	r3, [sp, #32]
    7af0:	2001      	movs	r0, #1
    7af2:	2f00      	cmp	r7, #0
    7af4:	f040 80b1 	bne.w	7c5a <_dtoa_r+0x6ca>
    7af8:	4440      	add	r0, r8
    7afa:	f010 001f 	ands.w	r0, r0, #31
    7afe:	f000 817a 	beq.w	7df6 <_dtoa_r+0x866>
    7b02:	f1c0 0220 	rsb	r2, r0, #32
    7b06:	2a04      	cmp	r2, #4
    7b08:	f300 8088 	bgt.w	7c1c <_dtoa_r+0x68c>
    7b0c:	f040 81f6 	bne.w	7efc <_dtoa_r+0x96c>
    7b10:	9b06      	ldr	r3, [sp, #24]
    7b12:	2b00      	cmp	r3, #0
    7b14:	dd05      	ble.n	7b22 <_dtoa_r+0x592>
    7b16:	4629      	mov	r1, r5
    7b18:	461a      	mov	r2, r3
    7b1a:	4620      	mov	r0, r4
    7b1c:	f7ff f87c 	bl	6c18 <__lshift>
    7b20:	4605      	mov	r5, r0
    7b22:	f1b8 0f00 	cmp.w	r8, #0
    7b26:	dd05      	ble.n	7b34 <_dtoa_r+0x5a4>
    7b28:	4651      	mov	r1, sl
    7b2a:	4642      	mov	r2, r8
    7b2c:	4620      	mov	r0, r4
    7b2e:	f7ff f873 	bl	6c18 <__lshift>
    7b32:	4682      	mov	sl, r0
    7b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b36:	2b00      	cmp	r3, #0
    7b38:	f040 813f 	bne.w	7dba <_dtoa_r+0x82a>
    7b3c:	f1b9 0f00 	cmp.w	r9, #0
    7b40:	f340 8125 	ble.w	7d8e <_dtoa_r+0x7fe>
    7b44:	9b07      	ldr	r3, [sp, #28]
    7b46:	2b00      	cmp	r3, #0
    7b48:	f040 80a3 	bne.w	7c92 <_dtoa_r+0x702>
    7b4c:	9b04      	ldr	r3, [sp, #16]
    7b4e:	3301      	adds	r3, #1
    7b50:	9304      	str	r3, [sp, #16]
    7b52:	f8dd 8000 	ldr.w	r8, [sp]
    7b56:	2701      	movs	r7, #1
    7b58:	e007      	b.n	7b6a <_dtoa_r+0x5da>
    7b5a:	4629      	mov	r1, r5
    7b5c:	2300      	movs	r3, #0
    7b5e:	220a      	movs	r2, #10
    7b60:	4620      	mov	r0, r4
    7b62:	f7fe fe7b 	bl	685c <__multadd>
    7b66:	3701      	adds	r7, #1
    7b68:	4605      	mov	r5, r0
    7b6a:	4651      	mov	r1, sl
    7b6c:	4628      	mov	r0, r5
    7b6e:	f7ff fc7b 	bl	7468 <quorem>
    7b72:	45b9      	cmp	r9, r7
    7b74:	f100 0030 	add.w	r0, r0, #48	; 0x30
    7b78:	f808 0b01 	strb.w	r0, [r8], #1
    7b7c:	dced      	bgt.n	7b5a <_dtoa_r+0x5ca>
    7b7e:	f1b9 0f00 	cmp.w	r9, #0
    7b82:	9a00      	ldr	r2, [sp, #0]
    7b84:	bfcc      	ite	gt
    7b86:	46cb      	movgt	fp, r9
    7b88:	f04f 0b01 	movle.w	fp, #1
    7b8c:	4603      	mov	r3, r0
    7b8e:	4493      	add	fp, r2
    7b90:	2700      	movs	r7, #0
    7b92:	4629      	mov	r1, r5
    7b94:	2201      	movs	r2, #1
    7b96:	4620      	mov	r0, r4
    7b98:	9301      	str	r3, [sp, #4]
    7b9a:	f7ff f83d 	bl	6c18 <__lshift>
    7b9e:	4651      	mov	r1, sl
    7ba0:	4605      	mov	r5, r0
    7ba2:	f7ff f8b1 	bl	6d08 <__mcmp>
    7ba6:	2800      	cmp	r0, #0
    7ba8:	f340 81af 	ble.w	7f0a <_dtoa_r+0x97a>
    7bac:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    7bb0:	9a00      	ldr	r2, [sp, #0]
    7bb2:	f10b 3bff 	add.w	fp, fp, #4294967295
    7bb6:	e004      	b.n	7bc2 <_dtoa_r+0x632>
    7bb8:	455a      	cmp	r2, fp
    7bba:	f000 81b1 	beq.w	7f20 <_dtoa_r+0x990>
    7bbe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    7bc2:	2b39      	cmp	r3, #57	; 0x39
    7bc4:	f10b 0901 	add.w	r9, fp, #1
    7bc8:	d0f6      	beq.n	7bb8 <_dtoa_r+0x628>
    7bca:	3301      	adds	r3, #1
    7bcc:	f88b 3000 	strb.w	r3, [fp]
    7bd0:	4651      	mov	r1, sl
    7bd2:	4620      	mov	r0, r4
    7bd4:	f7fe fe38 	bl	6848 <_Bfree>
    7bd8:	b156      	cbz	r6, 7bf0 <_dtoa_r+0x660>
    7bda:	b12f      	cbz	r7, 7be8 <_dtoa_r+0x658>
    7bdc:	42b7      	cmp	r7, r6
    7bde:	d003      	beq.n	7be8 <_dtoa_r+0x658>
    7be0:	4639      	mov	r1, r7
    7be2:	4620      	mov	r0, r4
    7be4:	f7fe fe30 	bl	6848 <_Bfree>
    7be8:	4631      	mov	r1, r6
    7bea:	4620      	mov	r0, r4
    7bec:	f7fe fe2c 	bl	6848 <_Bfree>
    7bf0:	4629      	mov	r1, r5
    7bf2:	4620      	mov	r0, r4
    7bf4:	f7fe fe28 	bl	6848 <_Bfree>
    7bf8:	2300      	movs	r3, #0
    7bfa:	f889 3000 	strb.w	r3, [r9]
    7bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7c02:	601a      	str	r2, [r3, #0]
    7c04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7c06:	2b00      	cmp	r3, #0
    7c08:	f43f acfe 	beq.w	7608 <_dtoa_r+0x78>
    7c0c:	9800      	ldr	r0, [sp, #0]
    7c0e:	f8c3 9000 	str.w	r9, [r3]
    7c12:	b00f      	add	sp, #60	; 0x3c
    7c14:	ecbd 8b02 	vpop	{d8}
    7c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c1c:	f1c0 001c 	rsb	r0, r0, #28
    7c20:	9b06      	ldr	r3, [sp, #24]
    7c22:	4403      	add	r3, r0
    7c24:	9306      	str	r3, [sp, #24]
    7c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c28:	4403      	add	r3, r0
    7c2a:	9309      	str	r3, [sp, #36]	; 0x24
    7c2c:	4480      	add	r8, r0
    7c2e:	e76f      	b.n	7b10 <_dtoa_r+0x580>
    7c30:	f1c2 0220 	rsb	r2, r2, #32
    7c34:	fa06 f202 	lsl.w	r2, r6, r2
    7c38:	ee07 2a10 	vmov	s14, r2
    7c3c:	e509      	b.n	7652 <_dtoa_r+0xc2>
    7c3e:	2601      	movs	r6, #1
    7c40:	e563      	b.n	770a <_dtoa_r+0x17a>
    7c42:	4601      	mov	r1, r0
    7c44:	463a      	mov	r2, r7
    7c46:	4620      	mov	r0, r4
    7c48:	f7fe ff86 	bl	6b58 <__pow5mult>
    7c4c:	9b01      	ldr	r3, [sp, #4]
    7c4e:	2b01      	cmp	r3, #1
    7c50:	4682      	mov	sl, r0
    7c52:	f340 81c5 	ble.w	7fe0 <_dtoa_r+0xa50>
    7c56:	2300      	movs	r3, #0
    7c58:	9308      	str	r3, [sp, #32]
    7c5a:	f8da 2010 	ldr.w	r2, [sl, #16]
    7c5e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    7c62:	6910      	ldr	r0, [r2, #16]
    7c64:	f7fe fe4c 	bl	6900 <__hi0bits>
    7c68:	f1c0 0020 	rsb	r0, r0, #32
    7c6c:	e744      	b.n	7af8 <_dtoa_r+0x568>
    7c6e:	bf00      	nop
    7c70:	200002a8 	.word	0x200002a8
    7c74:	20000ae8 	.word	0x20000ae8
    7c78:	4631      	mov	r1, r6
    7c7a:	2300      	movs	r3, #0
    7c7c:	220a      	movs	r2, #10
    7c7e:	4620      	mov	r0, r4
    7c80:	f7fe fdec 	bl	685c <__multadd>
    7c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7c86:	2b00      	cmp	r3, #0
    7c88:	4606      	mov	r6, r0
    7c8a:	f340 82ce 	ble.w	822a <_dtoa_r+0xc9a>
    7c8e:	9704      	str	r7, [sp, #16]
    7c90:	4699      	mov	r9, r3
    7c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c94:	2b00      	cmp	r3, #0
    7c96:	dd05      	ble.n	7ca4 <_dtoa_r+0x714>
    7c98:	4631      	mov	r1, r6
    7c9a:	461a      	mov	r2, r3
    7c9c:	4620      	mov	r0, r4
    7c9e:	f7fe ffbb 	bl	6c18 <__lshift>
    7ca2:	4606      	mov	r6, r0
    7ca4:	9b08      	ldr	r3, [sp, #32]
    7ca6:	2b00      	cmp	r3, #0
    7ca8:	f040 81eb 	bne.w	8082 <_dtoa_r+0xaf2>
    7cac:	46b0      	mov	r8, r6
    7cae:	9b02      	ldr	r3, [sp, #8]
    7cb0:	9f00      	ldr	r7, [sp, #0]
    7cb2:	f003 0201 	and.w	r2, r3, #1
    7cb6:	1e7b      	subs	r3, r7, #1
    7cb8:	444b      	add	r3, r9
    7cba:	9308      	str	r3, [sp, #32]
    7cbc:	9b01      	ldr	r3, [sp, #4]
    7cbe:	920a      	str	r2, [sp, #40]	; 0x28
    7cc0:	4313      	orrs	r3, r2
    7cc2:	9309      	str	r3, [sp, #36]	; 0x24
    7cc4:	4651      	mov	r1, sl
    7cc6:	4628      	mov	r0, r5
    7cc8:	f7ff fbce 	bl	7468 <quorem>
    7ccc:	4631      	mov	r1, r6
    7cce:	4683      	mov	fp, r0
    7cd0:	4628      	mov	r0, r5
    7cd2:	f7ff f819 	bl	6d08 <__mcmp>
    7cd6:	4642      	mov	r2, r8
    7cd8:	4651      	mov	r1, sl
    7cda:	4681      	mov	r9, r0
    7cdc:	4620      	mov	r0, r4
    7cde:	f7ff f835 	bl	6d4c <__mdiff>
    7ce2:	68c2      	ldr	r2, [r0, #12]
    7ce4:	4601      	mov	r1, r0
    7ce6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    7cea:	2a00      	cmp	r2, #0
    7cec:	d142      	bne.n	7d74 <_dtoa_r+0x7e4>
    7cee:	e9cd 0306 	strd	r0, r3, [sp, #24]
    7cf2:	4628      	mov	r0, r5
    7cf4:	f7ff f808 	bl	6d08 <__mcmp>
    7cf8:	9906      	ldr	r1, [sp, #24]
    7cfa:	9002      	str	r0, [sp, #8]
    7cfc:	4620      	mov	r0, r4
    7cfe:	f7fe fda3 	bl	6848 <_Bfree>
    7d02:	9a02      	ldr	r2, [sp, #8]
    7d04:	9b07      	ldr	r3, [sp, #28]
    7d06:	b91a      	cbnz	r2, 7d10 <_dtoa_r+0x780>
    7d08:	9909      	ldr	r1, [sp, #36]	; 0x24
    7d0a:	2900      	cmp	r1, #0
    7d0c:	f000 827e 	beq.w	820c <_dtoa_r+0xc7c>
    7d10:	f1b9 0f00 	cmp.w	r9, #0
    7d14:	f2c0 8183 	blt.w	801e <_dtoa_r+0xa8e>
    7d18:	9901      	ldr	r1, [sp, #4]
    7d1a:	ea49 0901 	orr.w	r9, r9, r1
    7d1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    7d20:	ea51 0909 	orrs.w	r9, r1, r9
    7d24:	f000 817b 	beq.w	801e <_dtoa_r+0xa8e>
    7d28:	2a00      	cmp	r2, #0
    7d2a:	f300 81c6 	bgt.w	80ba <_dtoa_r+0xb2a>
    7d2e:	9a08      	ldr	r2, [sp, #32]
    7d30:	703b      	strb	r3, [r7, #0]
    7d32:	f107 0901 	add.w	r9, r7, #1
    7d36:	4297      	cmp	r7, r2
    7d38:	46cb      	mov	fp, r9
    7d3a:	f000 81c4 	beq.w	80c6 <_dtoa_r+0xb36>
    7d3e:	4629      	mov	r1, r5
    7d40:	2300      	movs	r3, #0
    7d42:	220a      	movs	r2, #10
    7d44:	4620      	mov	r0, r4
    7d46:	f7fe fd89 	bl	685c <__multadd>
    7d4a:	4546      	cmp	r6, r8
    7d4c:	4605      	mov	r5, r0
    7d4e:	4631      	mov	r1, r6
    7d50:	f04f 0300 	mov.w	r3, #0
    7d54:	f04f 020a 	mov.w	r2, #10
    7d58:	4620      	mov	r0, r4
    7d5a:	d012      	beq.n	7d82 <_dtoa_r+0x7f2>
    7d5c:	f7fe fd7e 	bl	685c <__multadd>
    7d60:	4641      	mov	r1, r8
    7d62:	4606      	mov	r6, r0
    7d64:	2300      	movs	r3, #0
    7d66:	220a      	movs	r2, #10
    7d68:	4620      	mov	r0, r4
    7d6a:	f7fe fd77 	bl	685c <__multadd>
    7d6e:	464f      	mov	r7, r9
    7d70:	4680      	mov	r8, r0
    7d72:	e7a7      	b.n	7cc4 <_dtoa_r+0x734>
    7d74:	4620      	mov	r0, r4
    7d76:	9302      	str	r3, [sp, #8]
    7d78:	f7fe fd66 	bl	6848 <_Bfree>
    7d7c:	9b02      	ldr	r3, [sp, #8]
    7d7e:	2201      	movs	r2, #1
    7d80:	e7c6      	b.n	7d10 <_dtoa_r+0x780>
    7d82:	f7fe fd6b 	bl	685c <__multadd>
    7d86:	464f      	mov	r7, r9
    7d88:	4606      	mov	r6, r0
    7d8a:	4680      	mov	r8, r0
    7d8c:	e79a      	b.n	7cc4 <_dtoa_r+0x734>
    7d8e:	9b01      	ldr	r3, [sp, #4]
    7d90:	2b02      	cmp	r3, #2
    7d92:	dc71      	bgt.n	7e78 <_dtoa_r+0x8e8>
    7d94:	9b07      	ldr	r3, [sp, #28]
    7d96:	2b00      	cmp	r3, #0
    7d98:	f47f af7b 	bne.w	7c92 <_dtoa_r+0x702>
    7d9c:	9b04      	ldr	r3, [sp, #16]
    7d9e:	4651      	mov	r1, sl
    7da0:	3301      	adds	r3, #1
    7da2:	4628      	mov	r0, r5
    7da4:	9304      	str	r3, [sp, #16]
    7da6:	f7ff fb5f 	bl	7468 <quorem>
    7daa:	f8dd b000 	ldr.w	fp, [sp]
    7dae:	f100 0330 	add.w	r3, r0, #48	; 0x30
    7db2:	f80b 3b01 	strb.w	r3, [fp], #1
    7db6:	2700      	movs	r7, #0
    7db8:	e6eb      	b.n	7b92 <_dtoa_r+0x602>
    7dba:	4651      	mov	r1, sl
    7dbc:	4628      	mov	r0, r5
    7dbe:	f7fe ffa3 	bl	6d08 <__mcmp>
    7dc2:	2800      	cmp	r0, #0
    7dc4:	f6bf aeba 	bge.w	7b3c <_dtoa_r+0x5ac>
    7dc8:	4629      	mov	r1, r5
    7dca:	2300      	movs	r3, #0
    7dcc:	220a      	movs	r2, #10
    7dce:	4620      	mov	r0, r4
    7dd0:	f7fe fd44 	bl	685c <__multadd>
    7dd4:	9b04      	ldr	r3, [sp, #16]
    7dd6:	1e5f      	subs	r7, r3, #1
    7dd8:	9b07      	ldr	r3, [sp, #28]
    7dda:	4605      	mov	r5, r0
    7ddc:	2b00      	cmp	r3, #0
    7dde:	f47f af4b 	bne.w	7c78 <_dtoa_r+0x6e8>
    7de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7de4:	2b00      	cmp	r3, #0
    7de6:	f340 8218 	ble.w	821a <_dtoa_r+0xc8a>
    7dea:	4699      	mov	r9, r3
    7dec:	e6b1      	b.n	7b52 <_dtoa_r+0x5c2>
    7dee:	4bbc      	ldr	r3, [pc, #752]	; (80e0 <_dtoa_r+0xb50>)
    7df0:	9300      	str	r3, [sp, #0]
    7df2:	3303      	adds	r3, #3
    7df4:	e4a4      	b.n	7740 <_dtoa_r+0x1b0>
    7df6:	201c      	movs	r0, #28
    7df8:	e712      	b.n	7c20 <_dtoa_r+0x690>
    7dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7dfe:	2800      	cmp	r0, #0
    7e00:	f47f ae74 	bne.w	7aec <_dtoa_r+0x55c>
    7e04:	f3c1 0213 	ubfx	r2, r1, #0, #20
    7e08:	2a00      	cmp	r2, #0
    7e0a:	f000 80f4 	beq.w	7ff6 <_dtoa_r+0xa66>
    7e0e:	9b02      	ldr	r3, [sp, #8]
    7e10:	9308      	str	r3, [sp, #32]
    7e12:	e66d      	b.n	7af0 <_dtoa_r+0x560>
    7e14:	2301      	movs	r3, #1
    7e16:	9307      	str	r3, [sp, #28]
    7e18:	9b04      	ldr	r3, [sp, #16]
    7e1a:	445b      	add	r3, fp
    7e1c:	f103 0901 	add.w	r9, r3, #1
    7e20:	f1b9 0f01 	cmp.w	r9, #1
    7e24:	46cc      	mov	ip, r9
    7e26:	930b      	str	r3, [sp, #44]	; 0x2c
    7e28:	bfb8      	it	lt
    7e2a:	f04f 0c01 	movlt.w	ip, #1
    7e2e:	2100      	movs	r1, #0
    7e30:	f1bc 0f17 	cmp.w	ip, #23
    7e34:	63e1      	str	r1, [r4, #60]	; 0x3c
    7e36:	f77f acbc 	ble.w	77b2 <_dtoa_r+0x222>
    7e3a:	2001      	movs	r0, #1
    7e3c:	2204      	movs	r2, #4
    7e3e:	0052      	lsls	r2, r2, #1
    7e40:	f102 0314 	add.w	r3, r2, #20
    7e44:	4563      	cmp	r3, ip
    7e46:	4601      	mov	r1, r0
    7e48:	f100 0001 	add.w	r0, r0, #1
    7e4c:	d9f7      	bls.n	7e3e <_dtoa_r+0x8ae>
    7e4e:	63e1      	str	r1, [r4, #60]	; 0x3c
    7e50:	e4af      	b.n	77b2 <_dtoa_r+0x222>
    7e52:	2301      	movs	r3, #1
    7e54:	9307      	str	r3, [sp, #28]
    7e56:	f1bb 0f00 	cmp.w	fp, #0
    7e5a:	dd52      	ble.n	7f02 <_dtoa_r+0x972>
    7e5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    7e60:	46d9      	mov	r9, fp
    7e62:	46dc      	mov	ip, fp
    7e64:	e7e3      	b.n	7e2e <_dtoa_r+0x89e>
    7e66:	2300      	movs	r3, #0
    7e68:	9307      	str	r3, [sp, #28]
    7e6a:	e7d5      	b.n	7e18 <_dtoa_r+0x888>
    7e6c:	2300      	movs	r3, #0
    7e6e:	9307      	str	r3, [sp, #28]
    7e70:	e7f1      	b.n	7e56 <_dtoa_r+0x8c6>
    7e72:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    7e76:	9704      	str	r7, [sp, #16]
    7e78:	f1b9 0f00 	cmp.w	r9, #0
    7e7c:	f47f ada1 	bne.w	79c2 <_dtoa_r+0x432>
    7e80:	4651      	mov	r1, sl
    7e82:	464b      	mov	r3, r9
    7e84:	2205      	movs	r2, #5
    7e86:	4620      	mov	r0, r4
    7e88:	f7fe fce8 	bl	685c <__multadd>
    7e8c:	4601      	mov	r1, r0
    7e8e:	4682      	mov	sl, r0
    7e90:	4628      	mov	r0, r5
    7e92:	f7fe ff39 	bl	6d08 <__mcmp>
    7e96:	2800      	cmp	r0, #0
    7e98:	f77f ad93 	ble.w	79c2 <_dtoa_r+0x432>
    7e9c:	9b04      	ldr	r3, [sp, #16]
    7e9e:	f103 0b01 	add.w	fp, r3, #1
    7ea2:	9b00      	ldr	r3, [sp, #0]
    7ea4:	2231      	movs	r2, #49	; 0x31
    7ea6:	4698      	mov	r8, r3
    7ea8:	f803 2b01 	strb.w	r2, [r3], #1
    7eac:	9300      	str	r3, [sp, #0]
    7eae:	4651      	mov	r1, sl
    7eb0:	4620      	mov	r0, r4
    7eb2:	f7fe fcc9 	bl	6848 <_Bfree>
    7eb6:	f10b 0301 	add.w	r3, fp, #1
    7eba:	f8dd 9000 	ldr.w	r9, [sp]
    7ebe:	9304      	str	r3, [sp, #16]
    7ec0:	f8cd 8000 	str.w	r8, [sp]
    7ec4:	2e00      	cmp	r6, #0
    7ec6:	f47f ae8f 	bne.w	7be8 <_dtoa_r+0x658>
    7eca:	e691      	b.n	7bf0 <_dtoa_r+0x660>
    7ecc:	eba3 0a0a 	sub.w	sl, r3, sl
    7ed0:	e5c5      	b.n	7a5e <_dtoa_r+0x4ce>
    7ed2:	4631      	mov	r1, r6
    7ed4:	4652      	mov	r2, sl
    7ed6:	4620      	mov	r0, r4
    7ed8:	f7fe fe3e 	bl	6b58 <__pow5mult>
    7edc:	462a      	mov	r2, r5
    7ede:	4601      	mov	r1, r0
    7ee0:	4606      	mov	r6, r0
    7ee2:	4620      	mov	r0, r4
    7ee4:	f7fe fd8a 	bl	69fc <__multiply>
    7ee8:	4629      	mov	r1, r5
    7eea:	4605      	mov	r5, r0
    7eec:	4620      	mov	r0, r4
    7eee:	f7fe fcab 	bl	6848 <_Bfree>
    7ef2:	e5ea      	b.n	7aca <_dtoa_r+0x53a>
    7ef4:	2002      	movs	r0, #2
    7ef6:	eeb0 5b48 	vmov.f64	d5, d8
    7efa:	e481      	b.n	7800 <_dtoa_r+0x270>
    7efc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    7f00:	e68e      	b.n	7c20 <_dtoa_r+0x690>
    7f02:	f04f 0b01 	mov.w	fp, #1
    7f06:	46d9      	mov	r9, fp
    7f08:	e44f      	b.n	77aa <_dtoa_r+0x21a>
    7f0a:	d103      	bne.n	7f14 <_dtoa_r+0x984>
    7f0c:	9b01      	ldr	r3, [sp, #4]
    7f0e:	07db      	lsls	r3, r3, #31
    7f10:	f53f ae4c 	bmi.w	7bac <_dtoa_r+0x61c>
    7f14:	46d9      	mov	r9, fp
    7f16:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    7f1a:	2b30      	cmp	r3, #48	; 0x30
    7f1c:	d0fa      	beq.n	7f14 <_dtoa_r+0x984>
    7f1e:	e657      	b.n	7bd0 <_dtoa_r+0x640>
    7f20:	9b04      	ldr	r3, [sp, #16]
    7f22:	9a00      	ldr	r2, [sp, #0]
    7f24:	3301      	adds	r3, #1
    7f26:	9304      	str	r3, [sp, #16]
    7f28:	2331      	movs	r3, #49	; 0x31
    7f2a:	7013      	strb	r3, [r2, #0]
    7f2c:	e650      	b.n	7bd0 <_dtoa_r+0x640>
    7f2e:	f1ba 0f00 	cmp.w	sl, #0
    7f32:	f000 8123 	beq.w	817c <_dtoa_r+0xbec>
    7f36:	f202 4233 	addw	r2, r2, #1075	; 0x433
    7f3a:	9b06      	ldr	r3, [sp, #24]
    7f3c:	9309      	str	r3, [sp, #36]	; 0x24
    7f3e:	4413      	add	r3, r2
    7f40:	f8dd a020 	ldr.w	sl, [sp, #32]
    7f44:	9306      	str	r3, [sp, #24]
    7f46:	4490      	add	r8, r2
    7f48:	e592      	b.n	7a70 <_dtoa_r+0x4e0>
    7f4a:	ee07 0a90 	vmov	s15, r0
    7f4e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    7f52:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    7f56:	eea6 5b07 	vfma.f64	d5, d6, d7
    7f5a:	ee15 2a90 	vmov	r2, s11
    7f5e:	ec51 0b15 	vmov	r0, r1, d5
    7f62:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7f66:	ec41 0b15 	vmov	d5, r0, r1
    7f6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    7f6e:	ee36 7b47 	vsub.f64	d7, d6, d7
    7f72:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f7a:	f300 8137 	bgt.w	81ec <_dtoa_r+0xc5c>
    7f7e:	eeb1 5b45 	vneg.f64	d5, d5
    7f82:	eeb4 7bc5 	vcmpe.f64	d7, d5
    7f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f8a:	f57f acfb 	bpl.w	7984 <_dtoa_r+0x3f4>
    7f8e:	f04f 0a00 	mov.w	sl, #0
    7f92:	4656      	mov	r6, sl
    7f94:	e515      	b.n	79c2 <_dtoa_r+0x432>
    7f96:	f000 80f5 	beq.w	8184 <_dtoa_r+0xbf4>
    7f9a:	9b04      	ldr	r3, [sp, #16]
    7f9c:	4951      	ldr	r1, [pc, #324]	; (80e4 <_dtoa_r+0xb54>)
    7f9e:	425a      	negs	r2, r3
    7fa0:	f002 000f 	and.w	r0, r2, #15
    7fa4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7fa8:	ed91 6b00 	vldr	d6, [r1]
    7fac:	1112      	asrs	r2, r2, #4
    7fae:	ee28 6b06 	vmul.f64	d6, d8, d6
    7fb2:	f000 8142 	beq.w	823a <_dtoa_r+0xcaa>
    7fb6:	eeb0 7b46 	vmov.f64	d7, d6
    7fba:	494b      	ldr	r1, [pc, #300]	; (80e8 <_dtoa_r+0xb58>)
    7fbc:	2600      	movs	r6, #0
    7fbe:	2002      	movs	r0, #2
    7fc0:	07d3      	lsls	r3, r2, #31
    7fc2:	d505      	bpl.n	7fd0 <_dtoa_r+0xa40>
    7fc4:	ed91 5b00 	vldr	d5, [r1]
    7fc8:	3001      	adds	r0, #1
    7fca:	2601      	movs	r6, #1
    7fcc:	ee27 7b05 	vmul.f64	d7, d7, d5
    7fd0:	1052      	asrs	r2, r2, #1
    7fd2:	f101 0108 	add.w	r1, r1, #8
    7fd6:	d1f3      	bne.n	7fc0 <_dtoa_r+0xa30>
    7fd8:	2e00      	cmp	r6, #0
    7fda:	fe06 6b07 	vseleq.f64	d6, d6, d7
    7fde:	e41e      	b.n	781e <_dtoa_r+0x28e>
    7fe0:	9b02      	ldr	r3, [sp, #8]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	f47f ae37 	bne.w	7c56 <_dtoa_r+0x6c6>
    7fe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7fec:	f3c1 0213 	ubfx	r2, r1, #0, #20
    7ff0:	2a00      	cmp	r2, #0
    7ff2:	f040 8137 	bne.w	8264 <_dtoa_r+0xcd4>
    7ff6:	4a3d      	ldr	r2, [pc, #244]	; (80ec <_dtoa_r+0xb5c>)
    7ff8:	400a      	ands	r2, r1
    7ffa:	2a00      	cmp	r2, #0
    7ffc:	f000 80fa 	beq.w	81f4 <_dtoa_r+0xc64>
    8000:	9b06      	ldr	r3, [sp, #24]
    8002:	3301      	adds	r3, #1
    8004:	9306      	str	r3, [sp, #24]
    8006:	2301      	movs	r3, #1
    8008:	f108 0801 	add.w	r8, r8, #1
    800c:	9308      	str	r3, [sp, #32]
    800e:	e56f      	b.n	7af0 <_dtoa_r+0x560>
    8010:	4629      	mov	r1, r5
    8012:	9a08      	ldr	r2, [sp, #32]
    8014:	4620      	mov	r0, r4
    8016:	f7fe fd9f 	bl	6b58 <__pow5mult>
    801a:	4605      	mov	r5, r0
    801c:	e55a      	b.n	7ad4 <_dtoa_r+0x544>
    801e:	2a00      	cmp	r2, #0
    8020:	dd12      	ble.n	8048 <_dtoa_r+0xab8>
    8022:	4629      	mov	r1, r5
    8024:	2201      	movs	r2, #1
    8026:	4620      	mov	r0, r4
    8028:	9301      	str	r3, [sp, #4]
    802a:	f7fe fdf5 	bl	6c18 <__lshift>
    802e:	4651      	mov	r1, sl
    8030:	4605      	mov	r5, r0
    8032:	f7fe fe69 	bl	6d08 <__mcmp>
    8036:	2800      	cmp	r0, #0
    8038:	9b01      	ldr	r3, [sp, #4]
    803a:	f340 80e1 	ble.w	8200 <_dtoa_r+0xc70>
    803e:	2b39      	cmp	r3, #57	; 0x39
    8040:	f000 80ca 	beq.w	81d8 <_dtoa_r+0xc48>
    8044:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    8048:	46b9      	mov	r9, r7
    804a:	f809 3b01 	strb.w	r3, [r9], #1
    804e:	9b04      	ldr	r3, [sp, #16]
    8050:	3301      	adds	r3, #1
    8052:	4637      	mov	r7, r6
    8054:	9304      	str	r3, [sp, #16]
    8056:	4646      	mov	r6, r8
    8058:	e5ba      	b.n	7bd0 <_dtoa_r+0x640>
    805a:	ee38 8b08 	vadd.f64	d8, d8, d8
    805e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    8062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8066:	dc0a      	bgt.n	807e <_dtoa_r+0xaee>
    8068:	eeb4 8b46 	vcmp.f64	d8, d6
    806c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8070:	f47f acdc 	bne.w	7a2c <_dtoa_r+0x49c>
    8074:	ee17 3a10 	vmov	r3, s14
    8078:	07d8      	lsls	r0, r3, #31
    807a:	f57f acd7 	bpl.w	7a2c <_dtoa_r+0x49c>
    807e:	9a00      	ldr	r2, [sp, #0]
    8080:	e454      	b.n	792c <_dtoa_r+0x39c>
    8082:	6871      	ldr	r1, [r6, #4]
    8084:	4620      	mov	r0, r4
    8086:	f7fe fbb9 	bl	67fc <_Balloc>
    808a:	4607      	mov	r7, r0
    808c:	2800      	cmp	r0, #0
    808e:	f000 80de 	beq.w	824e <_dtoa_r+0xcbe>
    8092:	6933      	ldr	r3, [r6, #16]
    8094:	3302      	adds	r3, #2
    8096:	009a      	lsls	r2, r3, #2
    8098:	f106 010c 	add.w	r1, r6, #12
    809c:	300c      	adds	r0, #12
    809e:	f7fa fb87 	bl	27b0 <memcpy>
    80a2:	4639      	mov	r1, r7
    80a4:	2201      	movs	r2, #1
    80a6:	4620      	mov	r0, r4
    80a8:	f7fe fdb6 	bl	6c18 <__lshift>
    80ac:	4680      	mov	r8, r0
    80ae:	e5fe      	b.n	7cae <_dtoa_r+0x71e>
    80b0:	9b06      	ldr	r3, [sp, #24]
    80b2:	eba3 0309 	sub.w	r3, r3, r9
    80b6:	9309      	str	r3, [sp, #36]	; 0x24
    80b8:	e4da      	b.n	7a70 <_dtoa_r+0x4e0>
    80ba:	2b39      	cmp	r3, #57	; 0x39
    80bc:	f000 808c 	beq.w	81d8 <_dtoa_r+0xc48>
    80c0:	46b9      	mov	r9, r7
    80c2:	3301      	adds	r3, #1
    80c4:	e7c1      	b.n	804a <_dtoa_r+0xaba>
    80c6:	9a04      	ldr	r2, [sp, #16]
    80c8:	3201      	adds	r2, #1
    80ca:	4637      	mov	r7, r6
    80cc:	9204      	str	r2, [sp, #16]
    80ce:	4646      	mov	r6, r8
    80d0:	e55f      	b.n	7b92 <_dtoa_r+0x602>
    80d2:	4629      	mov	r1, r5
    80d4:	4620      	mov	r0, r4
    80d6:	f7fe fd3f 	bl	6b58 <__pow5mult>
    80da:	4605      	mov	r5, r0
    80dc:	e4fa      	b.n	7ad4 <_dtoa_r+0x544>
    80de:	bf00      	nop
    80e0:	200006d8 	.word	0x200006d8
    80e4:	200002a8 	.word	0x200002a8
    80e8:	20000280 	.word	0x20000280
    80ec:	7ff00000 	.word	0x7ff00000
    80f0:	4b5e      	ldr	r3, [pc, #376]	; (826c <_dtoa_r+0xcdc>)
    80f2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    80f6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    80fa:	ed1c 3b02 	vldr	d3, [ip, #-8]
    80fe:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    8102:	ee36 7b47 	vsub.f64	d7, d6, d7
    8106:	ec41 0b16 	vmov	d6, r0, r1
    810a:	ee15 1a90 	vmov	r1, s11
    810e:	ee23 3b06 	vmul.f64	d3, d3, d6
    8112:	9800      	ldr	r0, [sp, #0]
    8114:	3130      	adds	r1, #48	; 0x30
    8116:	2a01      	cmp	r2, #1
    8118:	f800 1b01 	strb.w	r1, [r0], #1
    811c:	f000 8083 	beq.w	8226 <_dtoa_r+0xc96>
    8120:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    8124:	9b00      	ldr	r3, [sp, #0]
    8126:	1899      	adds	r1, r3, r2
    8128:	ee27 7b04 	vmul.f64	d7, d7, d4
    812c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8130:	ee16 3a90 	vmov	r3, s13
    8134:	3330      	adds	r3, #48	; 0x30
    8136:	f800 3b01 	strb.w	r3, [r0], #1
    813a:	4281      	cmp	r1, r0
    813c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    8140:	ee37 7b45 	vsub.f64	d7, d7, d5
    8144:	d1f0      	bne.n	8128 <_dtoa_r+0xb98>
    8146:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    814a:	ee33 5b06 	vadd.f64	d5, d3, d6
    814e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    8152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8156:	f53f abe3 	bmi.w	7920 <_dtoa_r+0x390>
    815a:	ee36 6b43 	vsub.f64	d6, d6, d3
    815e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    8162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8166:	f77f ac0d 	ble.w	7984 <_dtoa_r+0x3f4>
    816a:	4689      	mov	r9, r1
    816c:	3901      	subs	r1, #1
    816e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    8172:	2b30      	cmp	r3, #48	; 0x30
    8174:	d0f9      	beq.n	816a <_dtoa_r+0xbda>
    8176:	1c73      	adds	r3, r6, #1
    8178:	9304      	str	r3, [sp, #16]
    817a:	e539      	b.n	7bf0 <_dtoa_r+0x660>
    817c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    817e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    8182:	e6da      	b.n	7f3a <_dtoa_r+0x9aa>
    8184:	2002      	movs	r0, #2
    8186:	eeb0 6b48 	vmov.f64	d6, d8
    818a:	f7ff bb48 	b.w	781e <_dtoa_r+0x28e>
    818e:	f1b9 0f00 	cmp.w	r9, #0
    8192:	f43f aeda 	beq.w	7f4a <_dtoa_r+0x9ba>
    8196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8198:	2a00      	cmp	r2, #0
    819a:	f77f abf3 	ble.w	7984 <_dtoa_r+0x3f4>
    819e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    81a2:	ee26 6b04 	vmul.f64	d6, d6, d4
    81a6:	3001      	adds	r0, #1
    81a8:	ee07 0a90 	vmov	s15, r0
    81ac:	9b04      	ldr	r3, [sp, #16]
    81ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    81b2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    81b6:	eea6 7b05 	vfma.f64	d7, d6, d5
    81ba:	ee17 ca90 	vmov	ip, s15
    81be:	ec51 0b17 	vmov	r0, r1, d7
    81c2:	1e5e      	subs	r6, r3, #1
    81c4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    81c8:	f7ff bb47 	b.w	785a <_dtoa_r+0x2ca>
    81cc:	9b04      	ldr	r3, [sp, #16]
    81ce:	3301      	adds	r3, #1
    81d0:	9304      	str	r3, [sp, #16]
    81d2:	2331      	movs	r3, #49	; 0x31
    81d4:	f7ff bbb1 	b.w	793a <_dtoa_r+0x3aa>
    81d8:	9b04      	ldr	r3, [sp, #16]
    81da:	46bb      	mov	fp, r7
    81dc:	3301      	adds	r3, #1
    81de:	9304      	str	r3, [sp, #16]
    81e0:	2339      	movs	r3, #57	; 0x39
    81e2:	4637      	mov	r7, r6
    81e4:	f80b 3b01 	strb.w	r3, [fp], #1
    81e8:	4646      	mov	r6, r8
    81ea:	e4e1      	b.n	7bb0 <_dtoa_r+0x620>
    81ec:	f04f 0a00 	mov.w	sl, #0
    81f0:	4656      	mov	r6, sl
    81f2:	e653      	b.n	7e9c <_dtoa_r+0x90c>
    81f4:	9208      	str	r2, [sp, #32]
    81f6:	e47b      	b.n	7af0 <_dtoa_r+0x560>
    81f8:	1c73      	adds	r3, r6, #1
    81fa:	9304      	str	r3, [sp, #16]
    81fc:	4689      	mov	r9, r1
    81fe:	e4f7      	b.n	7bf0 <_dtoa_r+0x660>
    8200:	f47f af22 	bne.w	8048 <_dtoa_r+0xab8>
    8204:	07da      	lsls	r2, r3, #31
    8206:	f57f af1f 	bpl.w	8048 <_dtoa_r+0xab8>
    820a:	e718      	b.n	803e <_dtoa_r+0xaae>
    820c:	2b39      	cmp	r3, #57	; 0x39
    820e:	d0e3      	beq.n	81d8 <_dtoa_r+0xc48>
    8210:	f1b9 0f00 	cmp.w	r9, #0
    8214:	f73f af16 	bgt.w	8044 <_dtoa_r+0xab4>
    8218:	e716      	b.n	8048 <_dtoa_r+0xab8>
    821a:	9b01      	ldr	r3, [sp, #4]
    821c:	2b02      	cmp	r3, #2
    821e:	f73f ae28 	bgt.w	7e72 <_dtoa_r+0x8e2>
    8222:	9704      	str	r7, [sp, #16]
    8224:	e5ba      	b.n	7d9c <_dtoa_r+0x80c>
    8226:	4601      	mov	r1, r0
    8228:	e78d      	b.n	8146 <_dtoa_r+0xbb6>
    822a:	9b01      	ldr	r3, [sp, #4]
    822c:	2b02      	cmp	r3, #2
    822e:	f73f ae20 	bgt.w	7e72 <_dtoa_r+0x8e2>
    8232:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    8236:	9704      	str	r7, [sp, #16]
    8238:	e52b      	b.n	7c92 <_dtoa_r+0x702>
    823a:	2002      	movs	r0, #2
    823c:	f7ff baef 	b.w	781e <_dtoa_r+0x28e>
    8240:	4b0b      	ldr	r3, [pc, #44]	; (8270 <_dtoa_r+0xce0>)
    8242:	480c      	ldr	r0, [pc, #48]	; (8274 <_dtoa_r+0xce4>)
    8244:	2200      	movs	r2, #0
    8246:	f240 11af 	movw	r1, #431	; 0x1af
    824a:	f7ff f8b1 	bl	73b0 <__assert_func>
    824e:	4b08      	ldr	r3, [pc, #32]	; (8270 <_dtoa_r+0xce0>)
    8250:	4808      	ldr	r0, [pc, #32]	; (8274 <_dtoa_r+0xce4>)
    8252:	463a      	mov	r2, r7
    8254:	f240 21ef 	movw	r1, #751	; 0x2ef
    8258:	f7ff f8aa 	bl	73b0 <__assert_func>
    825c:	4b06      	ldr	r3, [pc, #24]	; (8278 <_dtoa_r+0xce8>)
    825e:	9300      	str	r3, [sp, #0]
    8260:	f7ff b9d2 	b.w	7608 <_dtoa_r+0x78>
    8264:	9b02      	ldr	r3, [sp, #8]
    8266:	9308      	str	r3, [sp, #32]
    8268:	e4f7      	b.n	7c5a <_dtoa_r+0x6ca>
    826a:	bf00      	nop
    826c:	200002a8 	.word	0x200002a8
    8270:	20000530 	.word	0x20000530
    8274:	200006dc 	.word	0x200006dc
    8278:	200006cc 	.word	0x200006cc

0000827c <_wcrtomb_r>:
    827c:	b570      	push	{r4, r5, r6, lr}
    827e:	4605      	mov	r5, r0
    8280:	b084      	sub	sp, #16
    8282:	b15b      	cbz	r3, 829c <_wcrtomb_r+0x20>
    8284:	461c      	mov	r4, r3
    8286:	b169      	cbz	r1, 82a4 <_wcrtomb_r+0x28>
    8288:	4b0e      	ldr	r3, [pc, #56]	; (82c4 <_wcrtomb_r+0x48>)
    828a:	4628      	mov	r0, r5
    828c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    8290:	4623      	mov	r3, r4
    8292:	47b0      	blx	r6
    8294:	1c43      	adds	r3, r0, #1
    8296:	d00f      	beq.n	82b8 <_wcrtomb_r+0x3c>
    8298:	b004      	add	sp, #16
    829a:	bd70      	pop	{r4, r5, r6, pc}
    829c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    82a0:	2900      	cmp	r1, #0
    82a2:	d1f1      	bne.n	8288 <_wcrtomb_r+0xc>
    82a4:	4a07      	ldr	r2, [pc, #28]	; (82c4 <_wcrtomb_r+0x48>)
    82a6:	4623      	mov	r3, r4
    82a8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    82ac:	4628      	mov	r0, r5
    82ae:	460a      	mov	r2, r1
    82b0:	a901      	add	r1, sp, #4
    82b2:	47b0      	blx	r6
    82b4:	1c43      	adds	r3, r0, #1
    82b6:	d1ef      	bne.n	8298 <_wcrtomb_r+0x1c>
    82b8:	2200      	movs	r2, #0
    82ba:	238a      	movs	r3, #138	; 0x8a
    82bc:	6022      	str	r2, [r4, #0]
    82be:	602b      	str	r3, [r5, #0]
    82c0:	b004      	add	sp, #16
    82c2:	bd70      	pop	{r4, r5, r6, pc}
    82c4:	200011cc 	.word	0x200011cc

000082c8 <_wcsrtombs_r>:
    82c8:	b510      	push	{r4, lr}
    82ca:	b082      	sub	sp, #8
    82cc:	9c04      	ldr	r4, [sp, #16]
    82ce:	e9cd 3400 	strd	r3, r4, [sp]
    82d2:	f04f 33ff 	mov.w	r3, #4294967295
    82d6:	f001 fb47 	bl	9968 <_wcsnrtombs_r>
    82da:	b002      	add	sp, #8
    82dc:	bd10      	pop	{r4, pc}
    82de:	bf00      	nop

000082e0 <fiprintf>:
    82e0:	b40e      	push	{r1, r2, r3}
    82e2:	b510      	push	{r4, lr}
    82e4:	b083      	sub	sp, #12
    82e6:	ab05      	add	r3, sp, #20
    82e8:	4c06      	ldr	r4, [pc, #24]	; (8304 <fiprintf+0x24>)
    82ea:	f853 2b04 	ldr.w	r2, [r3], #4
    82ee:	9301      	str	r3, [sp, #4]
    82f0:	4601      	mov	r1, r0
    82f2:	6820      	ldr	r0, [r4, #0]
    82f4:	f000 f844 	bl	8380 <_vfiprintf_r>
    82f8:	b003      	add	sp, #12
    82fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82fe:	b003      	add	sp, #12
    8300:	4770      	bx	lr
    8302:	bf00      	nop
    8304:	20001754 	.word	0x20001754

00008308 <__sprint_r.part.0>:
    8308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    830c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    830e:	049c      	lsls	r4, r3, #18
    8310:	4690      	mov	r8, r2
    8312:	d52d      	bpl.n	8370 <__sprint_r.part.0+0x68>
    8314:	6893      	ldr	r3, [r2, #8]
    8316:	6812      	ldr	r2, [r2, #0]
    8318:	b343      	cbz	r3, 836c <__sprint_r.part.0+0x64>
    831a:	468b      	mov	fp, r1
    831c:	4606      	mov	r6, r0
    831e:	f102 0908 	add.w	r9, r2, #8
    8322:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    8326:	ea5f 079a 	movs.w	r7, sl, lsr #2
    832a:	d015      	beq.n	8358 <__sprint_r.part.0+0x50>
    832c:	3d04      	subs	r5, #4
    832e:	2400      	movs	r4, #0
    8330:	e001      	b.n	8336 <__sprint_r.part.0+0x2e>
    8332:	42a7      	cmp	r7, r4
    8334:	d00e      	beq.n	8354 <__sprint_r.part.0+0x4c>
    8336:	f855 1f04 	ldr.w	r1, [r5, #4]!
    833a:	465a      	mov	r2, fp
    833c:	4630      	mov	r0, r6
    833e:	f001 fa5b 	bl	97f8 <_fputwc_r>
    8342:	1c43      	adds	r3, r0, #1
    8344:	f104 0401 	add.w	r4, r4, #1
    8348:	d1f3      	bne.n	8332 <__sprint_r.part.0+0x2a>
    834a:	2300      	movs	r3, #0
    834c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8354:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8358:	f02a 0a03 	bic.w	sl, sl, #3
    835c:	eba3 030a 	sub.w	r3, r3, sl
    8360:	f8c8 3008 	str.w	r3, [r8, #8]
    8364:	f109 0908 	add.w	r9, r9, #8
    8368:	2b00      	cmp	r3, #0
    836a:	d1da      	bne.n	8322 <__sprint_r.part.0+0x1a>
    836c:	2000      	movs	r0, #0
    836e:	e7ec      	b.n	834a <__sprint_r.part.0+0x42>
    8370:	f001 f80c 	bl	938c <__sfvwrite_r>
    8374:	2300      	movs	r3, #0
    8376:	e9c8 3301 	strd	r3, r3, [r8, #4]
    837a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    837e:	bf00      	nop

00008380 <_vfiprintf_r>:
    8380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8384:	ed2d 8b02 	vpush	{d8}
    8388:	b0c5      	sub	sp, #276	; 0x114
    838a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    838e:	4683      	mov	fp, r0
    8390:	ee08 1a10 	vmov	s16, r1
    8394:	4616      	mov	r6, r2
    8396:	2100      	movs	r1, #0
    8398:	2208      	movs	r2, #8
    839a:	4650      	mov	r0, sl
    839c:	461c      	mov	r4, r3
    839e:	9307      	str	r3, [sp, #28]
    83a0:	f7fd faa2 	bl	58e8 <memset>
    83a4:	f1bb 0f00 	cmp.w	fp, #0
    83a8:	d004      	beq.n	83b4 <_vfiprintf_r+0x34>
    83aa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    83ae:	2b00      	cmp	r3, #0
    83b0:	f000 86a0 	beq.w	90f4 <_vfiprintf_r+0xd74>
    83b4:	ee18 2a10 	vmov	r2, s16
    83b8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    83ba:	07db      	lsls	r3, r3, #31
    83bc:	f140 8513 	bpl.w	8de6 <_vfiprintf_r+0xa66>
    83c0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    83c4:	b28a      	uxth	r2, r1
    83c6:	0495      	lsls	r5, r2, #18
    83c8:	d40b      	bmi.n	83e2 <_vfiprintf_r+0x62>
    83ca:	ee18 3a10 	vmov	r3, s16
    83ce:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    83d2:	8199      	strh	r1, [r3, #12]
    83d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    83d6:	b28a      	uxth	r2, r1
    83d8:	ee18 1a10 	vmov	r1, s16
    83dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    83e0:	664b      	str	r3, [r1, #100]	; 0x64
    83e2:	0710      	lsls	r0, r2, #28
    83e4:	f140 8105 	bpl.w	85f2 <_vfiprintf_r+0x272>
    83e8:	ee18 3a10 	vmov	r3, s16
    83ec:	691b      	ldr	r3, [r3, #16]
    83ee:	2b00      	cmp	r3, #0
    83f0:	f000 80ff 	beq.w	85f2 <_vfiprintf_r+0x272>
    83f4:	f002 031a 	and.w	r3, r2, #26
    83f8:	2b0a      	cmp	r3, #10
    83fa:	f000 810a 	beq.w	8612 <_vfiprintf_r+0x292>
    83fe:	2300      	movs	r3, #0
    8400:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    8404:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    8408:	aa1b      	add	r2, sp, #108	; 0x6c
    840a:	930c      	str	r3, [sp, #48]	; 0x30
    840c:	9218      	str	r2, [sp, #96]	; 0x60
    840e:	4691      	mov	r9, r2
    8410:	930b      	str	r3, [sp, #44]	; 0x2c
    8412:	9305      	str	r3, [sp, #20]
    8414:	46b0      	mov	r8, r6
    8416:	4644      	mov	r4, r8
    8418:	4ba8      	ldr	r3, [pc, #672]	; (86bc <_vfiprintf_r+0x33c>)
    841a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    841e:	f7fd fd61 	bl	5ee4 <__locale_mb_cur_max>
    8422:	4622      	mov	r2, r4
    8424:	4603      	mov	r3, r0
    8426:	a912      	add	r1, sp, #72	; 0x48
    8428:	f8cd a000 	str.w	sl, [sp]
    842c:	4658      	mov	r0, fp
    842e:	47a8      	blx	r5
    8430:	2800      	cmp	r0, #0
    8432:	f000 8145 	beq.w	86c0 <_vfiprintf_r+0x340>
    8436:	f2c0 8139 	blt.w	86ac <_vfiprintf_r+0x32c>
    843a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    843c:	2a25      	cmp	r2, #37	; 0x25
    843e:	4603      	mov	r3, r0
    8440:	d001      	beq.n	8446 <_vfiprintf_r+0xc6>
    8442:	441c      	add	r4, r3
    8444:	e7e8      	b.n	8418 <_vfiprintf_r+0x98>
    8446:	ebb4 0608 	subs.w	r6, r4, r8
    844a:	4605      	mov	r5, r0
    844c:	f040 813c 	bne.w	86c8 <_vfiprintf_r+0x348>
    8450:	2300      	movs	r3, #0
    8452:	7861      	ldrb	r1, [r4, #1]
    8454:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8458:	f104 0801 	add.w	r8, r4, #1
    845c:	9306      	str	r3, [sp, #24]
    845e:	f04f 37ff 	mov.w	r7, #4294967295
    8462:	461e      	mov	r6, r3
    8464:	242b      	movs	r4, #43	; 0x2b
    8466:	f108 0801 	add.w	r8, r8, #1
    846a:	f1a1 0320 	sub.w	r3, r1, #32
    846e:	2b5a      	cmp	r3, #90	; 0x5a
    8470:	f200 8178 	bhi.w	8764 <_vfiprintf_r+0x3e4>
    8474:	e8df f013 	tbh	[pc, r3, lsl #1]
    8478:	017602b5 	.word	0x017602b5
    847c:	02b00176 	.word	0x02b00176
    8480:	01760176 	.word	0x01760176
    8484:	006a0176 	.word	0x006a0176
    8488:	01760176 	.word	0x01760176
    848c:	028d027d 	.word	0x028d027d
    8490:	02880176 	.word	0x02880176
    8494:	01760297 	.word	0x01760297
    8498:	005b0292 	.word	0x005b0292
    849c:	005b005b 	.word	0x005b005b
    84a0:	005b005b 	.word	0x005b005b
    84a4:	005b005b 	.word	0x005b005b
    84a8:	005b005b 	.word	0x005b005b
    84ac:	01760176 	.word	0x01760176
    84b0:	01760176 	.word	0x01760176
    84b4:	01760176 	.word	0x01760176
    84b8:	01760176 	.word	0x01760176
    84bc:	025c0176 	.word	0x025c0176
    84c0:	01760084 	.word	0x01760084
    84c4:	01760176 	.word	0x01760176
    84c8:	01760176 	.word	0x01760176
    84cc:	01760176 	.word	0x01760176
    84d0:	01760176 	.word	0x01760176
    84d4:	00e80176 	.word	0x00e80176
    84d8:	01760176 	.word	0x01760176
    84dc:	02330176 	.word	0x02330176
    84e0:	02da0176 	.word	0x02da0176
    84e4:	01760176 	.word	0x01760176
    84e8:	0176058b 	.word	0x0176058b
    84ec:	01760176 	.word	0x01760176
    84f0:	01760176 	.word	0x01760176
    84f4:	01760176 	.word	0x01760176
    84f8:	01760176 	.word	0x01760176
    84fc:	025c0176 	.word	0x025c0176
    8500:	01760086 	.word	0x01760086
    8504:	01760176 	.word	0x01760176
    8508:	008602cd 	.word	0x008602cd
    850c:	0176007f 	.word	0x0176007f
    8510:	017602c0 	.word	0x017602c0
    8514:	00ea02fd 	.word	0x00ea02fd
    8518:	007f02ed 	.word	0x007f02ed
    851c:	02330176 	.word	0x02330176
    8520:	0569007c 	.word	0x0569007c
    8524:	01760176 	.word	0x01760176
    8528:	0176056b 	.word	0x0176056b
    852c:	007c      	.short	0x007c
    852e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8532:	2200      	movs	r2, #0
    8534:	f818 1b01 	ldrb.w	r1, [r8], #1
    8538:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    853c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8540:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8544:	2b09      	cmp	r3, #9
    8546:	d9f5      	bls.n	8534 <_vfiprintf_r+0x1b4>
    8548:	9206      	str	r2, [sp, #24]
    854a:	e78e      	b.n	846a <_vfiprintf_r+0xea>
    854c:	4658      	mov	r0, fp
    854e:	f7fe fed9 	bl	7304 <_localeconv_r>
    8552:	6843      	ldr	r3, [r0, #4]
    8554:	930d      	str	r3, [sp, #52]	; 0x34
    8556:	4618      	mov	r0, r3
    8558:	f7fd ff32 	bl	63c0 <strlen>
    855c:	900e      	str	r0, [sp, #56]	; 0x38
    855e:	4605      	mov	r5, r0
    8560:	4658      	mov	r0, fp
    8562:	f7fe fecf 	bl	7304 <_localeconv_r>
    8566:	6883      	ldr	r3, [r0, #8]
    8568:	930b      	str	r3, [sp, #44]	; 0x2c
    856a:	2d00      	cmp	r5, #0
    856c:	f040 84d6 	bne.w	8f1c <_vfiprintf_r+0xb9c>
    8570:	f898 1000 	ldrb.w	r1, [r8]
    8574:	e777      	b.n	8466 <_vfiprintf_r+0xe6>
    8576:	f898 1000 	ldrb.w	r1, [r8]
    857a:	f046 0620 	orr.w	r6, r6, #32
    857e:	e772      	b.n	8466 <_vfiprintf_r+0xe6>
    8580:	f046 0610 	orr.w	r6, r6, #16
    8584:	06b4      	lsls	r4, r6, #26
    8586:	f140 818e 	bpl.w	88a6 <_vfiprintf_r+0x526>
    858a:	9b07      	ldr	r3, [sp, #28]
    858c:	3307      	adds	r3, #7
    858e:	f023 0307 	bic.w	r3, r3, #7
    8592:	461a      	mov	r2, r3
    8594:	6859      	ldr	r1, [r3, #4]
    8596:	f852 3b08 	ldr.w	r3, [r2], #8
    859a:	9207      	str	r2, [sp, #28]
    859c:	460a      	mov	r2, r1
    859e:	2900      	cmp	r1, #0
    85a0:	f2c0 8470 	blt.w	8e84 <_vfiprintf_r+0xb04>
    85a4:	1c79      	adds	r1, r7, #1
    85a6:	f000 85a2 	beq.w	90ee <_vfiprintf_r+0xd6e>
    85aa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    85ae:	9103      	str	r1, [sp, #12]
    85b0:	ea53 0102 	orrs.w	r1, r3, r2
    85b4:	f000 843f 	beq.w	8e36 <_vfiprintf_r+0xab6>
    85b8:	2b0a      	cmp	r3, #10
    85ba:	f172 0100 	sbcs.w	r1, r2, #0
    85be:	f080 8541 	bcs.w	9044 <_vfiprintf_r+0xcc4>
    85c2:	3330      	adds	r3, #48	; 0x30
    85c4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    85c8:	9e03      	ldr	r6, [sp, #12]
    85ca:	2301      	movs	r3, #1
    85cc:	9304      	str	r3, [sp, #16]
    85ce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    85d2:	9b04      	ldr	r3, [sp, #16]
    85d4:	42bb      	cmp	r3, r7
    85d6:	bfb8      	it	lt
    85d8:	463b      	movlt	r3, r7
    85da:	9303      	str	r3, [sp, #12]
    85dc:	2300      	movs	r3, #0
    85de:	9308      	str	r3, [sp, #32]
    85e0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    85e4:	2b00      	cmp	r3, #0
    85e6:	f000 80cb 	beq.w	8780 <_vfiprintf_r+0x400>
    85ea:	9b03      	ldr	r3, [sp, #12]
    85ec:	3301      	adds	r3, #1
    85ee:	9303      	str	r3, [sp, #12]
    85f0:	e0c6      	b.n	8780 <_vfiprintf_r+0x400>
    85f2:	ee18 1a10 	vmov	r1, s16
    85f6:	4658      	mov	r0, fp
    85f8:	ee18 5a10 	vmov	r5, s16
    85fc:	f001 f840 	bl	9680 <__swsetup_r>
    8600:	2800      	cmp	r0, #0
    8602:	f040 8652 	bne.w	92aa <_vfiprintf_r+0xf2a>
    8606:	89aa      	ldrh	r2, [r5, #12]
    8608:	f002 031a 	and.w	r3, r2, #26
    860c:	2b0a      	cmp	r3, #10
    860e:	f47f aef6 	bne.w	83fe <_vfiprintf_r+0x7e>
    8612:	ee18 1a10 	vmov	r1, s16
    8616:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    861a:	2b00      	cmp	r3, #0
    861c:	f6ff aeef 	blt.w	83fe <_vfiprintf_r+0x7e>
    8620:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8622:	07db      	lsls	r3, r3, #31
    8624:	d402      	bmi.n	862c <_vfiprintf_r+0x2ac>
    8626:	0597      	lsls	r7, r2, #22
    8628:	f140 8612 	bpl.w	9250 <_vfiprintf_r+0xed0>
    862c:	ee18 1a10 	vmov	r1, s16
    8630:	4623      	mov	r3, r4
    8632:	4632      	mov	r2, r6
    8634:	4658      	mov	r0, fp
    8636:	f000 fe69 	bl	930c <__sbprintf>
    863a:	9005      	str	r0, [sp, #20]
    863c:	9805      	ldr	r0, [sp, #20]
    863e:	b045      	add	sp, #276	; 0x114
    8640:	ecbd 8b02 	vpop	{d8}
    8644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8648:	f046 0610 	orr.w	r6, r6, #16
    864c:	f016 0220 	ands.w	r2, r6, #32
    8650:	f000 8136 	beq.w	88c0 <_vfiprintf_r+0x540>
    8654:	9b07      	ldr	r3, [sp, #28]
    8656:	3307      	adds	r3, #7
    8658:	f023 0307 	bic.w	r3, r3, #7
    865c:	4619      	mov	r1, r3
    865e:	685a      	ldr	r2, [r3, #4]
    8660:	f851 3b08 	ldr.w	r3, [r1], #8
    8664:	9107      	str	r1, [sp, #28]
    8666:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    866a:	9103      	str	r1, [sp, #12]
    866c:	2100      	movs	r1, #0
    866e:	2000      	movs	r0, #0
    8670:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    8674:	1c78      	adds	r0, r7, #1
    8676:	f000 8210 	beq.w	8a9a <_vfiprintf_r+0x71a>
    867a:	9803      	ldr	r0, [sp, #12]
    867c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8680:	ea53 0002 	orrs.w	r0, r3, r2
    8684:	f040 8208 	bne.w	8a98 <_vfiprintf_r+0x718>
    8688:	2f00      	cmp	r7, #0
    868a:	f040 8538 	bne.w	90fe <_vfiprintf_r+0xd7e>
    868e:	2900      	cmp	r1, #0
    8690:	f040 83d5 	bne.w	8e3e <_vfiprintf_r+0xabe>
    8694:	9b03      	ldr	r3, [sp, #12]
    8696:	f013 0301 	ands.w	r3, r3, #1
    869a:	9304      	str	r3, [sp, #16]
    869c:	f000 8411 	beq.w	8ec2 <_vfiprintf_r+0xb42>
    86a0:	2330      	movs	r3, #48	; 0x30
    86a2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    86a6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    86aa:	e792      	b.n	85d2 <_vfiprintf_r+0x252>
    86ac:	2208      	movs	r2, #8
    86ae:	2100      	movs	r1, #0
    86b0:	4650      	mov	r0, sl
    86b2:	f7fd f919 	bl	58e8 <memset>
    86b6:	2301      	movs	r3, #1
    86b8:	441c      	add	r4, r3
    86ba:	e6ad      	b.n	8418 <_vfiprintf_r+0x98>
    86bc:	200011cc 	.word	0x200011cc
    86c0:	ebb4 0608 	subs.w	r6, r4, r8
    86c4:	4605      	mov	r5, r0
    86c6:	d01b      	beq.n	8700 <_vfiprintf_r+0x380>
    86c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    86ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    86cc:	3301      	adds	r3, #1
    86ce:	4432      	add	r2, r6
    86d0:	2b07      	cmp	r3, #7
    86d2:	e9c9 8600 	strd	r8, r6, [r9]
    86d6:	921a      	str	r2, [sp, #104]	; 0x68
    86d8:	9319      	str	r3, [sp, #100]	; 0x64
    86da:	dd1c      	ble.n	8716 <_vfiprintf_r+0x396>
    86dc:	2a00      	cmp	r2, #0
    86de:	f000 83a6 	beq.w	8e2e <_vfiprintf_r+0xaae>
    86e2:	ee18 1a10 	vmov	r1, s16
    86e6:	aa18      	add	r2, sp, #96	; 0x60
    86e8:	4658      	mov	r0, fp
    86ea:	f7ff fe0d 	bl	8308 <__sprint_r.part.0>
    86ee:	bb20      	cbnz	r0, 873a <_vfiprintf_r+0x3ba>
    86f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    86f4:	9b05      	ldr	r3, [sp, #20]
    86f6:	4433      	add	r3, r6
    86f8:	9305      	str	r3, [sp, #20]
    86fa:	2d00      	cmp	r5, #0
    86fc:	f47f aea8 	bne.w	8450 <_vfiprintf_r+0xd0>
    8700:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8702:	2b00      	cmp	r3, #0
    8704:	f040 85c1 	bne.w	928a <_vfiprintf_r+0xf0a>
    8708:	ee18 3a10 	vmov	r3, s16
    870c:	2200      	movs	r2, #0
    870e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8712:	9219      	str	r2, [sp, #100]	; 0x64
    8714:	e015      	b.n	8742 <_vfiprintf_r+0x3c2>
    8716:	f109 0908 	add.w	r9, r9, #8
    871a:	e7eb      	b.n	86f4 <_vfiprintf_r+0x374>
    871c:	ee18 1a10 	vmov	r1, s16
    8720:	aa18      	add	r2, sp, #96	; 0x60
    8722:	4658      	mov	r0, fp
    8724:	f7ff fdf0 	bl	8308 <__sprint_r.part.0>
    8728:	2800      	cmp	r0, #0
    872a:	f000 80a6 	beq.w	887a <_vfiprintf_r+0x4fa>
    872e:	9b08      	ldr	r3, [sp, #32]
    8730:	b11b      	cbz	r3, 873a <_vfiprintf_r+0x3ba>
    8732:	9908      	ldr	r1, [sp, #32]
    8734:	4658      	mov	r0, fp
    8736:	f7fd ff45 	bl	65c4 <_free_r>
    873a:	ee18 3a10 	vmov	r3, s16
    873e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8742:	ee18 2a10 	vmov	r2, s16
    8746:	6e52      	ldr	r2, [r2, #100]	; 0x64
    8748:	f012 0f01 	tst.w	r2, #1
    874c:	b29a      	uxth	r2, r3
    874e:	f000 80a0 	beq.w	8892 <_vfiprintf_r+0x512>
    8752:	0650      	lsls	r0, r2, #25
    8754:	f100 85b2 	bmi.w	92bc <_vfiprintf_r+0xf3c>
    8758:	9805      	ldr	r0, [sp, #20]
    875a:	b045      	add	sp, #276	; 0x114
    875c:	ecbd 8b02 	vpop	{d8}
    8760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8764:	2900      	cmp	r1, #0
    8766:	d0cb      	beq.n	8700 <_vfiprintf_r+0x380>
    8768:	2300      	movs	r3, #0
    876a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    876e:	2301      	movs	r3, #1
    8770:	e9cd 3303 	strd	r3, r3, [sp, #12]
    8774:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8778:	ac2b      	add	r4, sp, #172	; 0xac
    877a:	2300      	movs	r3, #0
    877c:	9308      	str	r3, [sp, #32]
    877e:	461f      	mov	r7, r3
    8780:	f016 0302 	ands.w	r3, r6, #2
    8784:	9309      	str	r3, [sp, #36]	; 0x24
    8786:	d002      	beq.n	878e <_vfiprintf_r+0x40e>
    8788:	9b03      	ldr	r3, [sp, #12]
    878a:	3302      	adds	r3, #2
    878c:	9303      	str	r3, [sp, #12]
    878e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    8792:	930a      	str	r3, [sp, #40]	; 0x28
    8794:	d105      	bne.n	87a2 <_vfiprintf_r+0x422>
    8796:	9b06      	ldr	r3, [sp, #24]
    8798:	9a03      	ldr	r2, [sp, #12]
    879a:	1a9d      	subs	r5, r3, r2
    879c:	2d00      	cmp	r5, #0
    879e:	f300 827b 	bgt.w	8c98 <_vfiprintf_r+0x918>
    87a2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    87a6:	1c41      	adds	r1, r0, #1
    87a8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    87ac:	b182      	cbz	r2, 87d0 <_vfiprintf_r+0x450>
    87ae:	2201      	movs	r2, #1
    87b0:	3301      	adds	r3, #1
    87b2:	f8c9 2004 	str.w	r2, [r9, #4]
    87b6:	2907      	cmp	r1, #7
    87b8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    87bc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    87c0:	f8c9 2000 	str.w	r2, [r9]
    87c4:	f300 824a 	bgt.w	8c5c <_vfiprintf_r+0x8dc>
    87c8:	4608      	mov	r0, r1
    87ca:	f109 0908 	add.w	r9, r9, #8
    87ce:	3101      	adds	r1, #1
    87d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    87d2:	b1e2      	cbz	r2, 880e <_vfiprintf_r+0x48e>
    87d4:	aa11      	add	r2, sp, #68	; 0x44
    87d6:	3302      	adds	r3, #2
    87d8:	f8c9 2000 	str.w	r2, [r9]
    87dc:	2907      	cmp	r1, #7
    87de:	f04f 0202 	mov.w	r2, #2
    87e2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    87e6:	f8c9 2004 	str.w	r2, [r9, #4]
    87ea:	f340 8250 	ble.w	8c8e <_vfiprintf_r+0x90e>
    87ee:	2b00      	cmp	r3, #0
    87f0:	f000 8343 	beq.w	8e7a <_vfiprintf_r+0xafa>
    87f4:	ee18 1a10 	vmov	r1, s16
    87f8:	aa18      	add	r2, sp, #96	; 0x60
    87fa:	4658      	mov	r0, fp
    87fc:	f7ff fd84 	bl	8308 <__sprint_r.part.0>
    8800:	2800      	cmp	r0, #0
    8802:	d194      	bne.n	872e <_vfiprintf_r+0x3ae>
    8804:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8808:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    880c:	1c41      	adds	r1, r0, #1
    880e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8810:	2a80      	cmp	r2, #128	; 0x80
    8812:	f000 8184 	beq.w	8b1e <_vfiprintf_r+0x79e>
    8816:	9a04      	ldr	r2, [sp, #16]
    8818:	1abd      	subs	r5, r7, r2
    881a:	2d00      	cmp	r5, #0
    881c:	f300 81d7 	bgt.w	8bce <_vfiprintf_r+0x84e>
    8820:	9a04      	ldr	r2, [sp, #16]
    8822:	f8c9 4000 	str.w	r4, [r9]
    8826:	4413      	add	r3, r2
    8828:	2907      	cmp	r1, #7
    882a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    882e:	f8c9 2004 	str.w	r2, [r9, #4]
    8832:	f340 816e 	ble.w	8b12 <_vfiprintf_r+0x792>
    8836:	2b00      	cmp	r3, #0
    8838:	f000 8275 	beq.w	8d26 <_vfiprintf_r+0x9a6>
    883c:	ee18 1a10 	vmov	r1, s16
    8840:	aa18      	add	r2, sp, #96	; 0x60
    8842:	4658      	mov	r0, fp
    8844:	f7ff fd60 	bl	8308 <__sprint_r.part.0>
    8848:	2800      	cmp	r0, #0
    884a:	f47f af70 	bne.w	872e <_vfiprintf_r+0x3ae>
    884e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8850:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8854:	0775      	lsls	r5, r6, #29
    8856:	d505      	bpl.n	8864 <_vfiprintf_r+0x4e4>
    8858:	9a06      	ldr	r2, [sp, #24]
    885a:	9903      	ldr	r1, [sp, #12]
    885c:	1a54      	subs	r4, r2, r1
    885e:	2c00      	cmp	r4, #0
    8860:	f300 826b 	bgt.w	8d3a <_vfiprintf_r+0x9ba>
    8864:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8868:	9803      	ldr	r0, [sp, #12]
    886a:	4281      	cmp	r1, r0
    886c:	bfac      	ite	ge
    886e:	1852      	addge	r2, r2, r1
    8870:	1812      	addlt	r2, r2, r0
    8872:	9205      	str	r2, [sp, #20]
    8874:	2b00      	cmp	r3, #0
    8876:	f47f af51 	bne.w	871c <_vfiprintf_r+0x39c>
    887a:	9908      	ldr	r1, [sp, #32]
    887c:	2300      	movs	r3, #0
    887e:	9319      	str	r3, [sp, #100]	; 0x64
    8880:	2900      	cmp	r1, #0
    8882:	f000 8149 	beq.w	8b18 <_vfiprintf_r+0x798>
    8886:	4658      	mov	r0, fp
    8888:	f7fd fe9c 	bl	65c4 <_free_r>
    888c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8890:	e5c1      	b.n	8416 <_vfiprintf_r+0x96>
    8892:	059c      	lsls	r4, r3, #22
    8894:	f53f af5d 	bmi.w	8752 <_vfiprintf_r+0x3d2>
    8898:	ee18 4a10 	vmov	r4, s16
    889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    889e:	f7fd fbbd 	bl	601c <__retarget_lock_release_recursive>
    88a2:	89a2      	ldrh	r2, [r4, #12]
    88a4:	e755      	b.n	8752 <_vfiprintf_r+0x3d2>
    88a6:	06f0      	lsls	r0, r6, #27
    88a8:	9a07      	ldr	r2, [sp, #28]
    88aa:	f100 831f 	bmi.w	8eec <_vfiprintf_r+0xb6c>
    88ae:	0671      	lsls	r1, r6, #25
    88b0:	f140 8319 	bpl.w	8ee6 <_vfiprintf_r+0xb66>
    88b4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    88b8:	9207      	str	r2, [sp, #28]
    88ba:	17da      	asrs	r2, r3, #31
    88bc:	4611      	mov	r1, r2
    88be:	e66e      	b.n	859e <_vfiprintf_r+0x21e>
    88c0:	f016 0310 	ands.w	r3, r6, #16
    88c4:	9907      	ldr	r1, [sp, #28]
    88c6:	f040 8309 	bne.w	8edc <_vfiprintf_r+0xb5c>
    88ca:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    88ce:	f000 8301 	beq.w	8ed4 <_vfiprintf_r+0xb54>
    88d2:	461a      	mov	r2, r3
    88d4:	f851 3b04 	ldr.w	r3, [r1], #4
    88d8:	9107      	str	r1, [sp, #28]
    88da:	b29b      	uxth	r3, r3
    88dc:	e6c3      	b.n	8666 <_vfiprintf_r+0x2e6>
    88de:	9b07      	ldr	r3, [sp, #28]
    88e0:	461a      	mov	r2, r3
    88e2:	2300      	movs	r3, #0
    88e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    88e8:	4613      	mov	r3, r2
    88ea:	f853 4b04 	ldr.w	r4, [r3], #4
    88ee:	9303      	str	r3, [sp, #12]
    88f0:	2c00      	cmp	r4, #0
    88f2:	f000 8412 	beq.w	911a <_vfiprintf_r+0xd9a>
    88f6:	2953      	cmp	r1, #83	; 0x53
    88f8:	f000 8365 	beq.w	8fc6 <_vfiprintf_r+0xc46>
    88fc:	f016 0510 	ands.w	r5, r6, #16
    8900:	f040 8361 	bne.w	8fc6 <_vfiprintf_r+0xc46>
    8904:	1c7b      	adds	r3, r7, #1
    8906:	f000 84b3 	beq.w	9270 <_vfiprintf_r+0xef0>
    890a:	463a      	mov	r2, r7
    890c:	4629      	mov	r1, r5
    890e:	4620      	mov	r0, r4
    8910:	f7fe fcfe 	bl	7310 <memchr>
    8914:	9008      	str	r0, [sp, #32]
    8916:	2800      	cmp	r0, #0
    8918:	f000 849f 	beq.w	925a <_vfiprintf_r+0xeda>
    891c:	1b03      	subs	r3, r0, r4
    891e:	9a03      	ldr	r2, [sp, #12]
    8920:	9304      	str	r3, [sp, #16]
    8922:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8926:	462f      	mov	r7, r5
    8928:	9207      	str	r2, [sp, #28]
    892a:	9303      	str	r3, [sp, #12]
    892c:	9508      	str	r5, [sp, #32]
    892e:	e657      	b.n	85e0 <_vfiprintf_r+0x260>
    8930:	2943      	cmp	r1, #67	; 0x43
    8932:	d002      	beq.n	893a <_vfiprintf_r+0x5ba>
    8934:	06f5      	lsls	r5, r6, #27
    8936:	f140 832d 	bpl.w	8f94 <_vfiprintf_r+0xc14>
    893a:	9d07      	ldr	r5, [sp, #28]
    893c:	2208      	movs	r2, #8
    893e:	2100      	movs	r1, #0
    8940:	a816      	add	r0, sp, #88	; 0x58
    8942:	ac2b      	add	r4, sp, #172	; 0xac
    8944:	f7fc ffd0 	bl	58e8 <memset>
    8948:	ab16      	add	r3, sp, #88	; 0x58
    894a:	f855 2b04 	ldr.w	r2, [r5], #4
    894e:	4621      	mov	r1, r4
    8950:	4658      	mov	r0, fp
    8952:	f7ff fc93 	bl	827c <_wcrtomb_r>
    8956:	4603      	mov	r3, r0
    8958:	3301      	adds	r3, #1
    895a:	9004      	str	r0, [sp, #16]
    895c:	f000 84b3 	beq.w	92c6 <_vfiprintf_r+0xf46>
    8960:	9b04      	ldr	r3, [sp, #16]
    8962:	9507      	str	r5, [sp, #28]
    8964:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8968:	9303      	str	r3, [sp, #12]
    896a:	2300      	movs	r3, #0
    896c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8970:	e703      	b.n	877a <_vfiprintf_r+0x3fa>
    8972:	9b07      	ldr	r3, [sp, #28]
    8974:	f853 2b04 	ldr.w	r2, [r3], #4
    8978:	9206      	str	r2, [sp, #24]
    897a:	2a00      	cmp	r2, #0
    897c:	f280 829c 	bge.w	8eb8 <_vfiprintf_r+0xb38>
    8980:	9a06      	ldr	r2, [sp, #24]
    8982:	4252      	negs	r2, r2
    8984:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8988:	f898 1000 	ldrb.w	r1, [r8]
    898c:	f046 0604 	orr.w	r6, r6, #4
    8990:	e569      	b.n	8466 <_vfiprintf_r+0xe6>
    8992:	f898 1000 	ldrb.w	r1, [r8]
    8996:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    899a:	e564      	b.n	8466 <_vfiprintf_r+0xe6>
    899c:	f898 1000 	ldrb.w	r1, [r8]
    89a0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    89a4:	e55f      	b.n	8466 <_vfiprintf_r+0xe6>
    89a6:	4642      	mov	r2, r8
    89a8:	f812 1b01 	ldrb.w	r1, [r2], #1
    89ac:	292a      	cmp	r1, #42	; 0x2a
    89ae:	f000 8496 	beq.w	92de <_vfiprintf_r+0xf5e>
    89b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    89b6:	2b09      	cmp	r3, #9
    89b8:	4690      	mov	r8, r2
    89ba:	f04f 0700 	mov.w	r7, #0
    89be:	f63f ad54 	bhi.w	846a <_vfiprintf_r+0xea>
    89c2:	f818 1b01 	ldrb.w	r1, [r8], #1
    89c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    89ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    89ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    89d2:	2b09      	cmp	r3, #9
    89d4:	d9f5      	bls.n	89c2 <_vfiprintf_r+0x642>
    89d6:	e548      	b.n	846a <_vfiprintf_r+0xea>
    89d8:	f898 1000 	ldrb.w	r1, [r8]
    89dc:	f046 0601 	orr.w	r6, r6, #1
    89e0:	e541      	b.n	8466 <_vfiprintf_r+0xe6>
    89e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    89e6:	2b00      	cmp	r3, #0
    89e8:	f47f adc2 	bne.w	8570 <_vfiprintf_r+0x1f0>
    89ec:	2320      	movs	r3, #32
    89ee:	f898 1000 	ldrb.w	r1, [r8]
    89f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    89f6:	e536      	b.n	8466 <_vfiprintf_r+0xe6>
    89f8:	f898 1000 	ldrb.w	r1, [r8]
    89fc:	296c      	cmp	r1, #108	; 0x6c
    89fe:	bf03      	ittte	eq
    8a00:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8a04:	f046 0620 	orreq.w	r6, r6, #32
    8a08:	f108 0801 	addeq.w	r8, r8, #1
    8a0c:	f046 0610 	orrne.w	r6, r6, #16
    8a10:	e529      	b.n	8466 <_vfiprintf_r+0xe6>
    8a12:	f898 1000 	ldrb.w	r1, [r8]
    8a16:	2968      	cmp	r1, #104	; 0x68
    8a18:	bf03      	ittte	eq
    8a1a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    8a1e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    8a22:	f108 0801 	addeq.w	r8, r8, #1
    8a26:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    8a2a:	e51c      	b.n	8466 <_vfiprintf_r+0xe6>
    8a2c:	f046 0310 	orr.w	r3, r6, #16
    8a30:	9303      	str	r3, [sp, #12]
    8a32:	9b03      	ldr	r3, [sp, #12]
    8a34:	f013 0220 	ands.w	r2, r3, #32
    8a38:	f000 8206 	beq.w	8e48 <_vfiprintf_r+0xac8>
    8a3c:	9b07      	ldr	r3, [sp, #28]
    8a3e:	3307      	adds	r3, #7
    8a40:	f023 0307 	bic.w	r3, r3, #7
    8a44:	4619      	mov	r1, r3
    8a46:	685a      	ldr	r2, [r3, #4]
    8a48:	f851 3b08 	ldr.w	r3, [r1], #8
    8a4c:	9107      	str	r1, [sp, #28]
    8a4e:	2101      	movs	r1, #1
    8a50:	e60d      	b.n	866e <_vfiprintf_r+0x2ee>
    8a52:	9a07      	ldr	r2, [sp, #28]
    8a54:	f046 0302 	orr.w	r3, r6, #2
    8a58:	9303      	str	r3, [sp, #12]
    8a5a:	f852 3b04 	ldr.w	r3, [r2], #4
    8a5e:	9207      	str	r2, [sp, #28]
    8a60:	f647 0230 	movw	r2, #30768	; 0x7830
    8a64:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    8a68:	4ab8      	ldr	r2, [pc, #736]	; (8d4c <_vfiprintf_r+0x9cc>)
    8a6a:	920c      	str	r2, [sp, #48]	; 0x30
    8a6c:	2102      	movs	r1, #2
    8a6e:	2200      	movs	r2, #0
    8a70:	e5fd      	b.n	866e <_vfiprintf_r+0x2ee>
    8a72:	06b7      	lsls	r7, r6, #26
    8a74:	f100 8248 	bmi.w	8f08 <_vfiprintf_r+0xb88>
    8a78:	06f5      	lsls	r5, r6, #27
    8a7a:	f100 8346 	bmi.w	910a <_vfiprintf_r+0xd8a>
    8a7e:	0674      	lsls	r4, r6, #25
    8a80:	f100 83d5 	bmi.w	922e <_vfiprintf_r+0xeae>
    8a84:	05b0      	lsls	r0, r6, #22
    8a86:	f140 8340 	bpl.w	910a <_vfiprintf_r+0xd8a>
    8a8a:	9b07      	ldr	r3, [sp, #28]
    8a8c:	9905      	ldr	r1, [sp, #20]
    8a8e:	f853 2b04 	ldr.w	r2, [r3], #4
    8a92:	9307      	str	r3, [sp, #28]
    8a94:	7011      	strb	r1, [r2, #0]
    8a96:	e4be      	b.n	8416 <_vfiprintf_r+0x96>
    8a98:	9603      	str	r6, [sp, #12]
    8a9a:	2901      	cmp	r1, #1
    8a9c:	f43f ad8c 	beq.w	85b8 <_vfiprintf_r+0x238>
    8aa0:	2902      	cmp	r1, #2
    8aa2:	ac44      	add	r4, sp, #272	; 0x110
    8aa4:	d111      	bne.n	8aca <_vfiprintf_r+0x74a>
    8aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    8aa8:	f003 010f 	and.w	r1, r3, #15
    8aac:	091b      	lsrs	r3, r3, #4
    8aae:	5c41      	ldrb	r1, [r0, r1]
    8ab0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8ab4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    8ab8:	0912      	lsrs	r2, r2, #4
    8aba:	ea53 0102 	orrs.w	r1, r3, r2
    8abe:	d1f3      	bne.n	8aa8 <_vfiprintf_r+0x728>
    8ac0:	9e03      	ldr	r6, [sp, #12]
    8ac2:	ab44      	add	r3, sp, #272	; 0x110
    8ac4:	1b1b      	subs	r3, r3, r4
    8ac6:	9304      	str	r3, [sp, #16]
    8ac8:	e583      	b.n	85d2 <_vfiprintf_r+0x252>
    8aca:	f003 0107 	and.w	r1, r3, #7
    8ace:	08db      	lsrs	r3, r3, #3
    8ad0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    8ad4:	08d2      	lsrs	r2, r2, #3
    8ad6:	3130      	adds	r1, #48	; 0x30
    8ad8:	ea53 0502 	orrs.w	r5, r3, r2
    8adc:	4620      	mov	r0, r4
    8ade:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8ae2:	d1f2      	bne.n	8aca <_vfiprintf_r+0x74a>
    8ae4:	9e03      	ldr	r6, [sp, #12]
    8ae6:	07f3      	lsls	r3, r6, #31
    8ae8:	d5eb      	bpl.n	8ac2 <_vfiprintf_r+0x742>
    8aea:	2930      	cmp	r1, #48	; 0x30
    8aec:	d0e8      	beq.n	8ac0 <_vfiprintf_r+0x740>
    8aee:	2330      	movs	r3, #48	; 0x30
    8af0:	3802      	subs	r0, #2
    8af2:	f804 3c01 	strb.w	r3, [r4, #-1]
    8af6:	ab44      	add	r3, sp, #272	; 0x110
    8af8:	1a1b      	subs	r3, r3, r0
    8afa:	9e03      	ldr	r6, [sp, #12]
    8afc:	9304      	str	r3, [sp, #16]
    8afe:	4604      	mov	r4, r0
    8b00:	e567      	b.n	85d2 <_vfiprintf_r+0x252>
    8b02:	9b04      	ldr	r3, [sp, #16]
    8b04:	941b      	str	r4, [sp, #108]	; 0x6c
    8b06:	2201      	movs	r2, #1
    8b08:	931c      	str	r3, [sp, #112]	; 0x70
    8b0a:	931a      	str	r3, [sp, #104]	; 0x68
    8b0c:	9219      	str	r2, [sp, #100]	; 0x64
    8b0e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8b12:	f109 0908 	add.w	r9, r9, #8
    8b16:	e69d      	b.n	8854 <_vfiprintf_r+0x4d4>
    8b18:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8b1c:	e47b      	b.n	8416 <_vfiprintf_r+0x96>
    8b1e:	9a06      	ldr	r2, [sp, #24]
    8b20:	9d03      	ldr	r5, [sp, #12]
    8b22:	1b55      	subs	r5, r2, r5
    8b24:	2d00      	cmp	r5, #0
    8b26:	f77f ae76 	ble.w	8816 <_vfiprintf_r+0x496>
    8b2a:	2d10      	cmp	r5, #16
    8b2c:	f340 83bb 	ble.w	92a6 <_vfiprintf_r+0xf26>
    8b30:	9409      	str	r4, [sp, #36]	; 0x24
    8b32:	ee18 4a10 	vmov	r4, s16
    8b36:	e007      	b.n	8b48 <_vfiprintf_r+0x7c8>
    8b38:	f100 0c02 	add.w	ip, r0, #2
    8b3c:	f109 0908 	add.w	r9, r9, #8
    8b40:	4610      	mov	r0, r2
    8b42:	3d10      	subs	r5, #16
    8b44:	2d10      	cmp	r5, #16
    8b46:	dd1e      	ble.n	8b86 <_vfiprintf_r+0x806>
    8b48:	4981      	ldr	r1, [pc, #516]	; (8d50 <_vfiprintf_r+0x9d0>)
    8b4a:	f8c9 1000 	str.w	r1, [r9]
    8b4e:	1c42      	adds	r2, r0, #1
    8b50:	3310      	adds	r3, #16
    8b52:	2110      	movs	r1, #16
    8b54:	2a07      	cmp	r2, #7
    8b56:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8b5a:	f8c9 1004 	str.w	r1, [r9, #4]
    8b5e:	ddeb      	ble.n	8b38 <_vfiprintf_r+0x7b8>
    8b60:	aa18      	add	r2, sp, #96	; 0x60
    8b62:	2b00      	cmp	r3, #0
    8b64:	d074      	beq.n	8c50 <_vfiprintf_r+0x8d0>
    8b66:	4621      	mov	r1, r4
    8b68:	4658      	mov	r0, fp
    8b6a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8b6e:	f7ff fbcb 	bl	8308 <__sprint_r.part.0>
    8b72:	2800      	cmp	r0, #0
    8b74:	f47f addb 	bne.w	872e <_vfiprintf_r+0x3ae>
    8b78:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8b7c:	3d10      	subs	r5, #16
    8b7e:	2d10      	cmp	r5, #16
    8b80:	f100 0c01 	add.w	ip, r0, #1
    8b84:	dce0      	bgt.n	8b48 <_vfiprintf_r+0x7c8>
    8b86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8b88:	4a71      	ldr	r2, [pc, #452]	; (8d50 <_vfiprintf_r+0x9d0>)
    8b8a:	f8c9 5004 	str.w	r5, [r9, #4]
    8b8e:	442b      	add	r3, r5
    8b90:	f1bc 0f07 	cmp.w	ip, #7
    8b94:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    8b98:	f8c9 2000 	str.w	r2, [r9]
    8b9c:	f340 8194 	ble.w	8ec8 <_vfiprintf_r+0xb48>
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	f000 831f 	beq.w	91e4 <_vfiprintf_r+0xe64>
    8ba6:	ee18 1a10 	vmov	r1, s16
    8baa:	aa18      	add	r2, sp, #96	; 0x60
    8bac:	4658      	mov	r0, fp
    8bae:	f7ff fbab 	bl	8308 <__sprint_r.part.0>
    8bb2:	2800      	cmp	r0, #0
    8bb4:	f47f adbb 	bne.w	872e <_vfiprintf_r+0x3ae>
    8bb8:	9a04      	ldr	r2, [sp, #16]
    8bba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8bbe:	1abd      	subs	r5, r7, r2
    8bc0:	2d00      	cmp	r5, #0
    8bc2:	f100 0101 	add.w	r1, r0, #1
    8bc6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8bca:	f77f ae29 	ble.w	8820 <_vfiprintf_r+0x4a0>
    8bce:	2d10      	cmp	r5, #16
    8bd0:	dd29      	ble.n	8c26 <_vfiprintf_r+0x8a6>
    8bd2:	9409      	str	r4, [sp, #36]	; 0x24
    8bd4:	2710      	movs	r7, #16
    8bd6:	ee18 4a10 	vmov	r4, s16
    8bda:	e007      	b.n	8bec <_vfiprintf_r+0x86c>
    8bdc:	f100 0c02 	add.w	ip, r0, #2
    8be0:	f109 0908 	add.w	r9, r9, #8
    8be4:	4610      	mov	r0, r2
    8be6:	3d10      	subs	r5, #16
    8be8:	2d10      	cmp	r5, #16
    8bea:	dd1a      	ble.n	8c22 <_vfiprintf_r+0x8a2>
    8bec:	1c42      	adds	r2, r0, #1
    8bee:	4958      	ldr	r1, [pc, #352]	; (8d50 <_vfiprintf_r+0x9d0>)
    8bf0:	3310      	adds	r3, #16
    8bf2:	2a07      	cmp	r2, #7
    8bf4:	e9c9 1700 	strd	r1, r7, [r9]
    8bf8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8bfc:	ddee      	ble.n	8bdc <_vfiprintf_r+0x85c>
    8bfe:	aa18      	add	r2, sp, #96	; 0x60
    8c00:	b303      	cbz	r3, 8c44 <_vfiprintf_r+0x8c4>
    8c02:	4621      	mov	r1, r4
    8c04:	4658      	mov	r0, fp
    8c06:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c0a:	f7ff fb7d 	bl	8308 <__sprint_r.part.0>
    8c0e:	2800      	cmp	r0, #0
    8c10:	f47f ad8d 	bne.w	872e <_vfiprintf_r+0x3ae>
    8c14:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8c18:	3d10      	subs	r5, #16
    8c1a:	2d10      	cmp	r5, #16
    8c1c:	f100 0c01 	add.w	ip, r0, #1
    8c20:	dce4      	bgt.n	8bec <_vfiprintf_r+0x86c>
    8c22:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8c24:	4661      	mov	r1, ip
    8c26:	4a4a      	ldr	r2, [pc, #296]	; (8d50 <_vfiprintf_r+0x9d0>)
    8c28:	f8c9 5004 	str.w	r5, [r9, #4]
    8c2c:	442b      	add	r3, r5
    8c2e:	2907      	cmp	r1, #7
    8c30:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8c34:	f8c9 2000 	str.w	r2, [r9]
    8c38:	f300 80e7 	bgt.w	8e0a <_vfiprintf_r+0xa8a>
    8c3c:	f109 0908 	add.w	r9, r9, #8
    8c40:	3101      	adds	r1, #1
    8c42:	e5ed      	b.n	8820 <_vfiprintf_r+0x4a0>
    8c44:	f04f 0c01 	mov.w	ip, #1
    8c48:	4618      	mov	r0, r3
    8c4a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c4e:	e7ca      	b.n	8be6 <_vfiprintf_r+0x866>
    8c50:	f04f 0c01 	mov.w	ip, #1
    8c54:	4618      	mov	r0, r3
    8c56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c5a:	e772      	b.n	8b42 <_vfiprintf_r+0x7c2>
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	f000 8104 	beq.w	8e6a <_vfiprintf_r+0xaea>
    8c62:	ee18 1a10 	vmov	r1, s16
    8c66:	aa18      	add	r2, sp, #96	; 0x60
    8c68:	4658      	mov	r0, fp
    8c6a:	f7ff fb4d 	bl	8308 <__sprint_r.part.0>
    8c6e:	2800      	cmp	r0, #0
    8c70:	f47f ad5d 	bne.w	872e <_vfiprintf_r+0x3ae>
    8c74:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8c78:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c7c:	1c41      	adds	r1, r0, #1
    8c7e:	e5a7      	b.n	87d0 <_vfiprintf_r+0x450>
    8c80:	2302      	movs	r3, #2
    8c82:	aa11      	add	r2, sp, #68	; 0x44
    8c84:	931c      	str	r3, [sp, #112]	; 0x70
    8c86:	921b      	str	r2, [sp, #108]	; 0x6c
    8c88:	2101      	movs	r1, #1
    8c8a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8c8e:	4608      	mov	r0, r1
    8c90:	f109 0908 	add.w	r9, r9, #8
    8c94:	1c41      	adds	r1, r0, #1
    8c96:	e5ba      	b.n	880e <_vfiprintf_r+0x48e>
    8c98:	2d10      	cmp	r5, #16
    8c9a:	f340 82e5 	ble.w	9268 <_vfiprintf_r+0xee8>
    8c9e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8ca2:	940f      	str	r4, [sp, #60]	; 0x3c
    8ca4:	4608      	mov	r0, r1
    8ca6:	ee18 4a10 	vmov	r4, s16
    8caa:	e007      	b.n	8cbc <_vfiprintf_r+0x93c>
    8cac:	f100 0c02 	add.w	ip, r0, #2
    8cb0:	f109 0908 	add.w	r9, r9, #8
    8cb4:	4610      	mov	r0, r2
    8cb6:	3d10      	subs	r5, #16
    8cb8:	2d10      	cmp	r5, #16
    8cba:	dd1d      	ble.n	8cf8 <_vfiprintf_r+0x978>
    8cbc:	4925      	ldr	r1, [pc, #148]	; (8d54 <_vfiprintf_r+0x9d4>)
    8cbe:	f8c9 1000 	str.w	r1, [r9]
    8cc2:	1c42      	adds	r2, r0, #1
    8cc4:	3310      	adds	r3, #16
    8cc6:	2110      	movs	r1, #16
    8cc8:	2a07      	cmp	r2, #7
    8cca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8cce:	f8c9 1004 	str.w	r1, [r9, #4]
    8cd2:	ddeb      	ble.n	8cac <_vfiprintf_r+0x92c>
    8cd4:	aa18      	add	r2, sp, #96	; 0x60
    8cd6:	b303      	cbz	r3, 8d1a <_vfiprintf_r+0x99a>
    8cd8:	4621      	mov	r1, r4
    8cda:	4658      	mov	r0, fp
    8cdc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8ce0:	f7ff fb12 	bl	8308 <__sprint_r.part.0>
    8ce4:	2800      	cmp	r0, #0
    8ce6:	f47f ad22 	bne.w	872e <_vfiprintf_r+0x3ae>
    8cea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8cee:	3d10      	subs	r5, #16
    8cf0:	2d10      	cmp	r5, #16
    8cf2:	f100 0c01 	add.w	ip, r0, #1
    8cf6:	dce1      	bgt.n	8cbc <_vfiprintf_r+0x93c>
    8cf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    8cfa:	4660      	mov	r0, ip
    8cfc:	4a15      	ldr	r2, [pc, #84]	; (8d54 <_vfiprintf_r+0x9d4>)
    8cfe:	f8c9 5004 	str.w	r5, [r9, #4]
    8d02:	442b      	add	r3, r5
    8d04:	2807      	cmp	r0, #7
    8d06:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8d0a:	f8c9 2000 	str.w	r2, [r9]
    8d0e:	f300 80c1 	bgt.w	8e94 <_vfiprintf_r+0xb14>
    8d12:	f109 0908 	add.w	r9, r9, #8
    8d16:	1c41      	adds	r1, r0, #1
    8d18:	e546      	b.n	87a8 <_vfiprintf_r+0x428>
    8d1a:	4618      	mov	r0, r3
    8d1c:	f04f 0c01 	mov.w	ip, #1
    8d20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d24:	e7c7      	b.n	8cb6 <_vfiprintf_r+0x936>
    8d26:	0776      	lsls	r6, r6, #29
    8d28:	9319      	str	r3, [sp, #100]	; 0x64
    8d2a:	d553      	bpl.n	8dd4 <_vfiprintf_r+0xa54>
    8d2c:	9a06      	ldr	r2, [sp, #24]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	1a54      	subs	r4, r2, r1
    8d32:	2c00      	cmp	r4, #0
    8d34:	dd4e      	ble.n	8dd4 <_vfiprintf_r+0xa54>
    8d36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d3a:	2c10      	cmp	r4, #16
    8d3c:	f340 82b0 	ble.w	92a0 <_vfiprintf_r+0xf20>
    8d40:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d42:	ee18 6a10 	vmov	r6, s16
    8d46:	2510      	movs	r5, #16
    8d48:	e00d      	b.n	8d66 <_vfiprintf_r+0x9e6>
    8d4a:	bf00      	nop
    8d4c:	2000074c 	.word	0x2000074c
    8d50:	20000c54 	.word	0x20000c54
    8d54:	20000768 	.word	0x20000768
    8d58:	1c88      	adds	r0, r1, #2
    8d5a:	f109 0908 	add.w	r9, r9, #8
    8d5e:	4611      	mov	r1, r2
    8d60:	3c10      	subs	r4, #16
    8d62:	2c10      	cmp	r4, #16
    8d64:	dd1a      	ble.n	8d9c <_vfiprintf_r+0xa1c>
    8d66:	1c4a      	adds	r2, r1, #1
    8d68:	48b3      	ldr	r0, [pc, #716]	; (9038 <_vfiprintf_r+0xcb8>)
    8d6a:	3310      	adds	r3, #16
    8d6c:	2a07      	cmp	r2, #7
    8d6e:	e9c9 0500 	strd	r0, r5, [r9]
    8d72:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    8d76:	ddef      	ble.n	8d58 <_vfiprintf_r+0x9d8>
    8d78:	aa18      	add	r2, sp, #96	; 0x60
    8d7a:	b333      	cbz	r3, 8dca <_vfiprintf_r+0xa4a>
    8d7c:	4631      	mov	r1, r6
    8d7e:	4658      	mov	r0, fp
    8d80:	f7ff fac2 	bl	8308 <__sprint_r.part.0>
    8d84:	2800      	cmp	r0, #0
    8d86:	f47f acd2 	bne.w	872e <_vfiprintf_r+0x3ae>
    8d8a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    8d8e:	3c10      	subs	r4, #16
    8d90:	2c10      	cmp	r4, #16
    8d92:	f101 0001 	add.w	r0, r1, #1
    8d96:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8d9a:	dce4      	bgt.n	8d66 <_vfiprintf_r+0x9e6>
    8d9c:	4aa6      	ldr	r2, [pc, #664]	; (9038 <_vfiprintf_r+0xcb8>)
    8d9e:	f8c9 4004 	str.w	r4, [r9, #4]
    8da2:	4423      	add	r3, r4
    8da4:	2807      	cmp	r0, #7
    8da6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    8daa:	f8c9 2000 	str.w	r2, [r9]
    8dae:	f77f ad59 	ble.w	8864 <_vfiprintf_r+0x4e4>
    8db2:	b17b      	cbz	r3, 8dd4 <_vfiprintf_r+0xa54>
    8db4:	ee18 1a10 	vmov	r1, s16
    8db8:	aa18      	add	r2, sp, #96	; 0x60
    8dba:	4658      	mov	r0, fp
    8dbc:	f7ff faa4 	bl	8308 <__sprint_r.part.0>
    8dc0:	2800      	cmp	r0, #0
    8dc2:	f47f acb4 	bne.w	872e <_vfiprintf_r+0x3ae>
    8dc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8dc8:	e54c      	b.n	8864 <_vfiprintf_r+0x4e4>
    8dca:	2001      	movs	r0, #1
    8dcc:	4619      	mov	r1, r3
    8dce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8dd2:	e7c5      	b.n	8d60 <_vfiprintf_r+0x9e0>
    8dd4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    8dd8:	9903      	ldr	r1, [sp, #12]
    8dda:	428a      	cmp	r2, r1
    8ddc:	bfac      	ite	ge
    8dde:	189b      	addge	r3, r3, r2
    8de0:	185b      	addlt	r3, r3, r1
    8de2:	9305      	str	r3, [sp, #20]
    8de4:	e549      	b.n	887a <_vfiprintf_r+0x4fa>
    8de6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    8dea:	058f      	lsls	r7, r1, #22
    8dec:	ee18 3a10 	vmov	r3, s16
    8df0:	b28a      	uxth	r2, r1
    8df2:	f53f aae8 	bmi.w	83c6 <_vfiprintf_r+0x46>
    8df6:	ee18 5a10 	vmov	r5, s16
    8dfa:	6d98      	ldr	r0, [r3, #88]	; 0x58
    8dfc:	f7fd f90c 	bl	6018 <__retarget_lock_acquire_recursive>
    8e00:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    8e04:	b28a      	uxth	r2, r1
    8e06:	f7ff bade 	b.w	83c6 <_vfiprintf_r+0x46>
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	f43f ae79 	beq.w	8b02 <_vfiprintf_r+0x782>
    8e10:	ee18 1a10 	vmov	r1, s16
    8e14:	aa18      	add	r2, sp, #96	; 0x60
    8e16:	4658      	mov	r0, fp
    8e18:	f7ff fa76 	bl	8308 <__sprint_r.part.0>
    8e1c:	2800      	cmp	r0, #0
    8e1e:	f47f ac86 	bne.w	872e <_vfiprintf_r+0x3ae>
    8e22:	9919      	ldr	r1, [sp, #100]	; 0x64
    8e24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8e26:	3101      	adds	r1, #1
    8e28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e2c:	e4f8      	b.n	8820 <_vfiprintf_r+0x4a0>
    8e2e:	9219      	str	r2, [sp, #100]	; 0x64
    8e30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e34:	e45e      	b.n	86f4 <_vfiprintf_r+0x374>
    8e36:	2f00      	cmp	r7, #0
    8e38:	f47f abc3 	bne.w	85c2 <_vfiprintf_r+0x242>
    8e3c:	9e03      	ldr	r6, [sp, #12]
    8e3e:	2700      	movs	r7, #0
    8e40:	9704      	str	r7, [sp, #16]
    8e42:	ac44      	add	r4, sp, #272	; 0x110
    8e44:	f7ff bbc5 	b.w	85d2 <_vfiprintf_r+0x252>
    8e48:	9b03      	ldr	r3, [sp, #12]
    8e4a:	f013 0310 	ands.w	r3, r3, #16
    8e4e:	d154      	bne.n	8efa <_vfiprintf_r+0xb7a>
    8e50:	9a03      	ldr	r2, [sp, #12]
    8e52:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    8e56:	f000 816b 	beq.w	9130 <_vfiprintf_r+0xdb0>
    8e5a:	9907      	ldr	r1, [sp, #28]
    8e5c:	461a      	mov	r2, r3
    8e5e:	f851 3b04 	ldr.w	r3, [r1], #4
    8e62:	9107      	str	r1, [sp, #28]
    8e64:	b29b      	uxth	r3, r3
    8e66:	2101      	movs	r1, #1
    8e68:	e401      	b.n	866e <_vfiprintf_r+0x2ee>
    8e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8e6c:	2a00      	cmp	r2, #0
    8e6e:	d164      	bne.n	8f3a <_vfiprintf_r+0xbba>
    8e70:	4618      	mov	r0, r3
    8e72:	2101      	movs	r1, #1
    8e74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e78:	e4c9      	b.n	880e <_vfiprintf_r+0x48e>
    8e7a:	2101      	movs	r1, #1
    8e7c:	4618      	mov	r0, r3
    8e7e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e82:	e4c4      	b.n	880e <_vfiprintf_r+0x48e>
    8e84:	425b      	negs	r3, r3
    8e86:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    8e8a:	9603      	str	r6, [sp, #12]
    8e8c:	202d      	movs	r0, #45	; 0x2d
    8e8e:	2101      	movs	r1, #1
    8e90:	f7ff bbee 	b.w	8670 <_vfiprintf_r+0x2f0>
    8e94:	2b00      	cmp	r3, #0
    8e96:	f000 8088 	beq.w	8faa <_vfiprintf_r+0xc2a>
    8e9a:	ee18 1a10 	vmov	r1, s16
    8e9e:	aa18      	add	r2, sp, #96	; 0x60
    8ea0:	4658      	mov	r0, fp
    8ea2:	f7ff fa31 	bl	8308 <__sprint_r.part.0>
    8ea6:	2800      	cmp	r0, #0
    8ea8:	f47f ac41 	bne.w	872e <_vfiprintf_r+0x3ae>
    8eac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8eb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8eb4:	1c41      	adds	r1, r0, #1
    8eb6:	e477      	b.n	87a8 <_vfiprintf_r+0x428>
    8eb8:	f898 1000 	ldrb.w	r1, [r8]
    8ebc:	9307      	str	r3, [sp, #28]
    8ebe:	f7ff bad2 	b.w	8466 <_vfiprintf_r+0xe6>
    8ec2:	ac44      	add	r4, sp, #272	; 0x110
    8ec4:	f7ff bb85 	b.w	85d2 <_vfiprintf_r+0x252>
    8ec8:	f109 0908 	add.w	r9, r9, #8
    8ecc:	f10c 0101 	add.w	r1, ip, #1
    8ed0:	4660      	mov	r0, ip
    8ed2:	e4a0      	b.n	8816 <_vfiprintf_r+0x496>
    8ed4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    8ed8:	f040 8197 	bne.w	920a <_vfiprintf_r+0xe8a>
    8edc:	f851 3b04 	ldr.w	r3, [r1], #4
    8ee0:	9107      	str	r1, [sp, #28]
    8ee2:	f7ff bbc0 	b.w	8666 <_vfiprintf_r+0x2e6>
    8ee6:	05b3      	lsls	r3, r6, #22
    8ee8:	f100 8188 	bmi.w	91fc <_vfiprintf_r+0xe7c>
    8eec:	f852 3b04 	ldr.w	r3, [r2], #4
    8ef0:	9207      	str	r2, [sp, #28]
    8ef2:	17da      	asrs	r2, r3, #31
    8ef4:	4611      	mov	r1, r2
    8ef6:	f7ff bb52 	b.w	859e <_vfiprintf_r+0x21e>
    8efa:	9907      	ldr	r1, [sp, #28]
    8efc:	f851 3b04 	ldr.w	r3, [r1], #4
    8f00:	9107      	str	r1, [sp, #28]
    8f02:	2101      	movs	r1, #1
    8f04:	f7ff bbb3 	b.w	866e <_vfiprintf_r+0x2ee>
    8f08:	9b07      	ldr	r3, [sp, #28]
    8f0a:	9805      	ldr	r0, [sp, #20]
    8f0c:	f853 1b04 	ldr.w	r1, [r3], #4
    8f10:	9307      	str	r3, [sp, #28]
    8f12:	17c2      	asrs	r2, r0, #31
    8f14:	e9c1 0200 	strd	r0, r2, [r1]
    8f18:	f7ff ba7d 	b.w	8416 <_vfiprintf_r+0x96>
    8f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f1e:	2b00      	cmp	r3, #0
    8f20:	f43f ab26 	beq.w	8570 <_vfiprintf_r+0x1f0>
    8f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f26:	781b      	ldrb	r3, [r3, #0]
    8f28:	2b00      	cmp	r3, #0
    8f2a:	f43f ab21 	beq.w	8570 <_vfiprintf_r+0x1f0>
    8f2e:	f898 1000 	ldrb.w	r1, [r8]
    8f32:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    8f36:	f7ff ba96 	b.w	8466 <_vfiprintf_r+0xe6>
    8f3a:	2302      	movs	r3, #2
    8f3c:	aa11      	add	r2, sp, #68	; 0x44
    8f3e:	931c      	str	r3, [sp, #112]	; 0x70
    8f40:	921b      	str	r2, [sp, #108]	; 0x6c
    8f42:	2001      	movs	r0, #1
    8f44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f48:	e6a2      	b.n	8c90 <_vfiprintf_r+0x910>
    8f4a:	9603      	str	r6, [sp, #12]
    8f4c:	e571      	b.n	8a32 <_vfiprintf_r+0x6b2>
    8f4e:	4b3b      	ldr	r3, [pc, #236]	; (903c <_vfiprintf_r+0xcbc>)
    8f50:	930c      	str	r3, [sp, #48]	; 0x30
    8f52:	f016 0220 	ands.w	r2, r6, #32
    8f56:	d059      	beq.n	900c <_vfiprintf_r+0xc8c>
    8f58:	9b07      	ldr	r3, [sp, #28]
    8f5a:	3307      	adds	r3, #7
    8f5c:	f023 0307 	bic.w	r3, r3, #7
    8f60:	4618      	mov	r0, r3
    8f62:	685a      	ldr	r2, [r3, #4]
    8f64:	f850 3b08 	ldr.w	r3, [r0], #8
    8f68:	9007      	str	r0, [sp, #28]
    8f6a:	07f4      	lsls	r4, r6, #31
    8f6c:	d509      	bpl.n	8f82 <_vfiprintf_r+0xc02>
    8f6e:	ea53 0002 	orrs.w	r0, r3, r2
    8f72:	d006      	beq.n	8f82 <_vfiprintf_r+0xc02>
    8f74:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    8f78:	2130      	movs	r1, #48	; 0x30
    8f7a:	f046 0602 	orr.w	r6, r6, #2
    8f7e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    8f82:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8f86:	9103      	str	r1, [sp, #12]
    8f88:	2102      	movs	r1, #2
    8f8a:	f7ff bb70 	b.w	866e <_vfiprintf_r+0x2ee>
    8f8e:	4b2c      	ldr	r3, [pc, #176]	; (9040 <_vfiprintf_r+0xcc0>)
    8f90:	930c      	str	r3, [sp, #48]	; 0x30
    8f92:	e7de      	b.n	8f52 <_vfiprintf_r+0xbd2>
    8f94:	9b07      	ldr	r3, [sp, #28]
    8f96:	2101      	movs	r1, #1
    8f98:	f853 2b04 	ldr.w	r2, [r3], #4
    8f9c:	9103      	str	r1, [sp, #12]
    8f9e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    8fa2:	9307      	str	r3, [sp, #28]
    8fa4:	9104      	str	r1, [sp, #16]
    8fa6:	ac2b      	add	r4, sp, #172	; 0xac
    8fa8:	e4df      	b.n	896a <_vfiprintf_r+0x5ea>
    8faa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8fae:	2a00      	cmp	r2, #0
    8fb0:	f040 8132 	bne.w	9218 <_vfiprintf_r+0xe98>
    8fb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8fb6:	2a00      	cmp	r2, #0
    8fb8:	f47f ae62 	bne.w	8c80 <_vfiprintf_r+0x900>
    8fbc:	4618      	mov	r0, r3
    8fbe:	2101      	movs	r1, #1
    8fc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8fc4:	e427      	b.n	8816 <_vfiprintf_r+0x496>
    8fc6:	2100      	movs	r1, #0
    8fc8:	2208      	movs	r2, #8
    8fca:	a816      	add	r0, sp, #88	; 0x58
    8fcc:	9413      	str	r4, [sp, #76]	; 0x4c
    8fce:	f7fc fc8b 	bl	58e8 <memset>
    8fd2:	1c79      	adds	r1, r7, #1
    8fd4:	f000 80bc 	beq.w	9150 <_vfiprintf_r+0xdd0>
    8fd8:	2500      	movs	r5, #0
    8fda:	9407      	str	r4, [sp, #28]
    8fdc:	462c      	mov	r4, r5
    8fde:	e00c      	b.n	8ffa <_vfiprintf_r+0xc7a>
    8fe0:	a92b      	add	r1, sp, #172	; 0xac
    8fe2:	4658      	mov	r0, fp
    8fe4:	f7ff f94a 	bl	827c <_wcrtomb_r>
    8fe8:	1c42      	adds	r2, r0, #1
    8fea:	4420      	add	r0, r4
    8fec:	f000 816b 	beq.w	92c6 <_vfiprintf_r+0xf46>
    8ff0:	42b8      	cmp	r0, r7
    8ff2:	dc08      	bgt.n	9006 <_vfiprintf_r+0xc86>
    8ff4:	f000 8170 	beq.w	92d8 <_vfiprintf_r+0xf58>
    8ff8:	4604      	mov	r4, r0
    8ffa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8ffc:	5952      	ldr	r2, [r2, r5]
    8ffe:	ab16      	add	r3, sp, #88	; 0x58
    9000:	3504      	adds	r5, #4
    9002:	2a00      	cmp	r2, #0
    9004:	d1ec      	bne.n	8fe0 <_vfiprintf_r+0xc60>
    9006:	9404      	str	r4, [sp, #16]
    9008:	9c07      	ldr	r4, [sp, #28]
    900a:	e0af      	b.n	916c <_vfiprintf_r+0xdec>
    900c:	f016 0310 	ands.w	r3, r6, #16
    9010:	9807      	ldr	r0, [sp, #28]
    9012:	d10c      	bne.n	902e <_vfiprintf_r+0xcae>
    9014:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    9018:	d005      	beq.n	9026 <_vfiprintf_r+0xca6>
    901a:	461a      	mov	r2, r3
    901c:	f850 3b04 	ldr.w	r3, [r0], #4
    9020:	9007      	str	r0, [sp, #28]
    9022:	b29b      	uxth	r3, r3
    9024:	e7a1      	b.n	8f6a <_vfiprintf_r+0xbea>
    9026:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    902a:	f040 80e1 	bne.w	91f0 <_vfiprintf_r+0xe70>
    902e:	f850 3b04 	ldr.w	r3, [r0], #4
    9032:	9007      	str	r0, [sp, #28]
    9034:	e799      	b.n	8f6a <_vfiprintf_r+0xbea>
    9036:	bf00      	nop
    9038:	20000768 	.word	0x20000768
    903c:	2000074c 	.word	0x2000074c
    9040:	20000738 	.word	0x20000738
    9044:	9903      	ldr	r1, [sp, #12]
    9046:	9704      	str	r7, [sp, #16]
    9048:	ac44      	add	r4, sp, #272	; 0x110
    904a:	469e      	mov	lr, r3
    904c:	ee08 ba90 	vmov	s17, fp
    9050:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    9054:	f04f 0c00 	mov.w	ip, #0
    9058:	4623      	mov	r3, r4
    905a:	e006      	b.n	906a <_vfiprintf_r+0xcea>
    905c:	f1be 0f0a 	cmp.w	lr, #10
    9060:	f172 0200 	sbcs.w	r2, r2, #0
    9064:	d339      	bcc.n	90da <_vfiprintf_r+0xd5a>
    9066:	46a6      	mov	lr, r4
    9068:	462a      	mov	r2, r5
    906a:	49a6      	ldr	r1, [pc, #664]	; (9304 <_vfiprintf_r+0xf84>)
    906c:	eb1e 0002 	adds.w	r0, lr, r2
    9070:	f140 0000 	adc.w	r0, r0, #0
    9074:	460f      	mov	r7, r1
    9076:	fba1 1400 	umull	r1, r4, r1, r0
    907a:	f024 0103 	bic.w	r1, r4, #3
    907e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    9082:	1a40      	subs	r0, r0, r1
    9084:	ebbe 0100 	subs.w	r1, lr, r0
    9088:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    908c:	f162 0400 	sbc.w	r4, r2, #0
    9090:	fb05 f501 	mul.w	r5, r5, r1
    9094:	fb07 5504 	mla	r5, r7, r4, r5
    9098:	fba1 4107 	umull	r4, r1, r1, r7
    909c:	440d      	add	r5, r1
    909e:	2705      	movs	r7, #5
    90a0:	f004 0101 	and.w	r1, r4, #1
    90a4:	fba1 1b07 	umull	r1, fp, r1, r7
    90a8:	1809      	adds	r1, r1, r0
    90aa:	0864      	lsrs	r4, r4, #1
    90ac:	3130      	adds	r1, #48	; 0x30
    90ae:	f803 1c01 	strb.w	r1, [r3, #-1]
    90b2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    90b6:	f10c 0c01 	add.w	ip, ip, #1
    90ba:	3b01      	subs	r3, #1
    90bc:	086d      	lsrs	r5, r5, #1
    90be:	2e00      	cmp	r6, #0
    90c0:	d0cc      	beq.n	905c <_vfiprintf_r+0xcdc>
    90c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    90c4:	7809      	ldrb	r1, [r1, #0]
    90c6:	4561      	cmp	r1, ip
    90c8:	d1c8      	bne.n	905c <_vfiprintf_r+0xcdc>
    90ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    90ce:	d0c5      	beq.n	905c <_vfiprintf_r+0xcdc>
    90d0:	f1be 0f0a 	cmp.w	lr, #10
    90d4:	f172 0200 	sbcs.w	r2, r2, #0
    90d8:	d26c      	bcs.n	91b4 <_vfiprintf_r+0xe34>
    90da:	461c      	mov	r4, r3
    90dc:	ab44      	add	r3, sp, #272	; 0x110
    90de:	1b1b      	subs	r3, r3, r4
    90e0:	9f04      	ldr	r7, [sp, #16]
    90e2:	9e03      	ldr	r6, [sp, #12]
    90e4:	9304      	str	r3, [sp, #16]
    90e6:	ee18 ba90 	vmov	fp, s17
    90ea:	f7ff ba72 	b.w	85d2 <_vfiprintf_r+0x252>
    90ee:	9603      	str	r6, [sp, #12]
    90f0:	f7ff ba62 	b.w	85b8 <_vfiprintf_r+0x238>
    90f4:	4658      	mov	r0, fp
    90f6:	f7fc fae7 	bl	56c8 <__sinit>
    90fa:	f7ff b95b 	b.w	83b4 <_vfiprintf_r+0x34>
    90fe:	2901      	cmp	r1, #1
    9100:	9603      	str	r6, [sp, #12]
    9102:	f47f accd 	bne.w	8aa0 <_vfiprintf_r+0x720>
    9106:	f7ff ba5c 	b.w	85c2 <_vfiprintf_r+0x242>
    910a:	9b07      	ldr	r3, [sp, #28]
    910c:	9905      	ldr	r1, [sp, #20]
    910e:	f853 2b04 	ldr.w	r2, [r3], #4
    9112:	6011      	str	r1, [r2, #0]
    9114:	9307      	str	r3, [sp, #28]
    9116:	f7ff b97e 	b.w	8416 <_vfiprintf_r+0x96>
    911a:	2f06      	cmp	r7, #6
    911c:	463b      	mov	r3, r7
    911e:	9a03      	ldr	r2, [sp, #12]
    9120:	4c79      	ldr	r4, [pc, #484]	; (9308 <_vfiprintf_r+0xf88>)
    9122:	9207      	str	r2, [sp, #28]
    9124:	bf28      	it	cs
    9126:	2306      	movcs	r3, #6
    9128:	9304      	str	r3, [sp, #16]
    912a:	9303      	str	r3, [sp, #12]
    912c:	f7ff bb25 	b.w	877a <_vfiprintf_r+0x3fa>
    9130:	9b03      	ldr	r3, [sp, #12]
    9132:	9907      	ldr	r1, [sp, #28]
    9134:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    9138:	bf14      	ite	ne
    913a:	f851 3b04 	ldrne.w	r3, [r1], #4
    913e:	f851 3b04 	ldreq.w	r3, [r1], #4
    9142:	9107      	str	r1, [sp, #28]
    9144:	bf1c      	itt	ne
    9146:	4602      	movne	r2, r0
    9148:	b2db      	uxtbne	r3, r3
    914a:	2101      	movs	r1, #1
    914c:	f7ff ba8f 	b.w	866e <_vfiprintf_r+0x2ee>
    9150:	ab16      	add	r3, sp, #88	; 0x58
    9152:	9300      	str	r3, [sp, #0]
    9154:	2300      	movs	r3, #0
    9156:	4619      	mov	r1, r3
    9158:	aa13      	add	r2, sp, #76	; 0x4c
    915a:	4658      	mov	r0, fp
    915c:	f7ff f8b4 	bl	82c8 <_wcsrtombs_r>
    9160:	4603      	mov	r3, r0
    9162:	3301      	adds	r3, #1
    9164:	9004      	str	r0, [sp, #16]
    9166:	f000 80ae 	beq.w	92c6 <_vfiprintf_r+0xf46>
    916a:	9413      	str	r4, [sp, #76]	; 0x4c
    916c:	9b04      	ldr	r3, [sp, #16]
    916e:	2b00      	cmp	r3, #0
    9170:	d030      	beq.n	91d4 <_vfiprintf_r+0xe54>
    9172:	2b63      	cmp	r3, #99	; 0x63
    9174:	dc63      	bgt.n	923e <_vfiprintf_r+0xebe>
    9176:	2300      	movs	r3, #0
    9178:	9308      	str	r3, [sp, #32]
    917a:	ac2b      	add	r4, sp, #172	; 0xac
    917c:	2208      	movs	r2, #8
    917e:	2100      	movs	r1, #0
    9180:	a816      	add	r0, sp, #88	; 0x58
    9182:	f7fc fbb1 	bl	58e8 <memset>
    9186:	9d04      	ldr	r5, [sp, #16]
    9188:	ab16      	add	r3, sp, #88	; 0x58
    918a:	9300      	str	r3, [sp, #0]
    918c:	aa13      	add	r2, sp, #76	; 0x4c
    918e:	462b      	mov	r3, r5
    9190:	4621      	mov	r1, r4
    9192:	4658      	mov	r0, fp
    9194:	f7ff f898 	bl	82c8 <_wcsrtombs_r>
    9198:	4285      	cmp	r5, r0
    919a:	f040 80ab 	bne.w	92f4 <_vfiprintf_r+0xf74>
    919e:	9b03      	ldr	r3, [sp, #12]
    91a0:	9a04      	ldr	r2, [sp, #16]
    91a2:	9307      	str	r3, [sp, #28]
    91a4:	2300      	movs	r3, #0
    91a6:	54a3      	strb	r3, [r4, r2]
    91a8:	461f      	mov	r7, r3
    91aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    91ae:	9303      	str	r3, [sp, #12]
    91b0:	f7ff ba16 	b.w	85e0 <_vfiprintf_r+0x260>
    91b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    91b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    91b8:	1a9b      	subs	r3, r3, r2
    91ba:	4618      	mov	r0, r3
    91bc:	9308      	str	r3, [sp, #32]
    91be:	f7fc fc4b 	bl	5a58 <strncpy>
    91c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91c4:	9b08      	ldr	r3, [sp, #32]
    91c6:	784a      	ldrb	r2, [r1, #1]
    91c8:	b10a      	cbz	r2, 91ce <_vfiprintf_r+0xe4e>
    91ca:	3101      	adds	r1, #1
    91cc:	910b      	str	r1, [sp, #44]	; 0x2c
    91ce:	f04f 0c00 	mov.w	ip, #0
    91d2:	e748      	b.n	9066 <_vfiprintf_r+0xce6>
    91d4:	9b03      	ldr	r3, [sp, #12]
    91d6:	9307      	str	r3, [sp, #28]
    91d8:	9b04      	ldr	r3, [sp, #16]
    91da:	9303      	str	r3, [sp, #12]
    91dc:	461f      	mov	r7, r3
    91de:	9308      	str	r3, [sp, #32]
    91e0:	f7ff b9fe 	b.w	85e0 <_vfiprintf_r+0x260>
    91e4:	2101      	movs	r1, #1
    91e6:	4618      	mov	r0, r3
    91e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    91ec:	f7ff bb13 	b.w	8816 <_vfiprintf_r+0x496>
    91f0:	f850 3b04 	ldr.w	r3, [r0], #4
    91f4:	9007      	str	r0, [sp, #28]
    91f6:	4622      	mov	r2, r4
    91f8:	b2db      	uxtb	r3, r3
    91fa:	e6b6      	b.n	8f6a <_vfiprintf_r+0xbea>
    91fc:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9200:	9207      	str	r2, [sp, #28]
    9202:	17da      	asrs	r2, r3, #31
    9204:	4611      	mov	r1, r2
    9206:	f7ff b9ca 	b.w	859e <_vfiprintf_r+0x21e>
    920a:	f851 3b04 	ldr.w	r3, [r1], #4
    920e:	9107      	str	r1, [sp, #28]
    9210:	4602      	mov	r2, r0
    9212:	b2db      	uxtb	r3, r3
    9214:	f7ff ba27 	b.w	8666 <_vfiprintf_r+0x2e6>
    9218:	2301      	movs	r3, #1
    921a:	931c      	str	r3, [sp, #112]	; 0x70
    921c:	2101      	movs	r1, #1
    921e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    9222:	931b      	str	r3, [sp, #108]	; 0x6c
    9224:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9228:	460b      	mov	r3, r1
    922a:	f7ff bacd 	b.w	87c8 <_vfiprintf_r+0x448>
    922e:	9b07      	ldr	r3, [sp, #28]
    9230:	9905      	ldr	r1, [sp, #20]
    9232:	f853 2b04 	ldr.w	r2, [r3], #4
    9236:	9307      	str	r3, [sp, #28]
    9238:	8011      	strh	r1, [r2, #0]
    923a:	f7ff b8ec 	b.w	8416 <_vfiprintf_r+0x96>
    923e:	1c59      	adds	r1, r3, #1
    9240:	4658      	mov	r0, fp
    9242:	f7fb fbed 	bl	4a20 <_malloc_r>
    9246:	4604      	mov	r4, r0
    9248:	2800      	cmp	r0, #0
    924a:	d03c      	beq.n	92c6 <_vfiprintf_r+0xf46>
    924c:	9008      	str	r0, [sp, #32]
    924e:	e795      	b.n	917c <_vfiprintf_r+0xdfc>
    9250:	6d88      	ldr	r0, [r1, #88]	; 0x58
    9252:	f7fc fee3 	bl	601c <__retarget_lock_release_recursive>
    9256:	f7ff b9e9 	b.w	862c <_vfiprintf_r+0x2ac>
    925a:	9b03      	ldr	r3, [sp, #12]
    925c:	9307      	str	r3, [sp, #28]
    925e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    9262:	9f08      	ldr	r7, [sp, #32]
    9264:	f7ff b9bc 	b.w	85e0 <_vfiprintf_r+0x260>
    9268:	9819      	ldr	r0, [sp, #100]	; 0x64
    926a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    926c:	3001      	adds	r0, #1
    926e:	e545      	b.n	8cfc <_vfiprintf_r+0x97c>
    9270:	9b03      	ldr	r3, [sp, #12]
    9272:	9307      	str	r3, [sp, #28]
    9274:	4620      	mov	r0, r4
    9276:	f7fd f8a3 	bl	63c0 <strlen>
    927a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    927e:	462f      	mov	r7, r5
    9280:	9004      	str	r0, [sp, #16]
    9282:	9303      	str	r3, [sp, #12]
    9284:	9508      	str	r5, [sp, #32]
    9286:	f7ff b9ab 	b.w	85e0 <_vfiprintf_r+0x260>
    928a:	ee18 1a10 	vmov	r1, s16
    928e:	aa18      	add	r2, sp, #96	; 0x60
    9290:	4658      	mov	r0, fp
    9292:	f7ff f839 	bl	8308 <__sprint_r.part.0>
    9296:	2800      	cmp	r0, #0
    9298:	f43f aa36 	beq.w	8708 <_vfiprintf_r+0x388>
    929c:	f7ff ba4d 	b.w	873a <_vfiprintf_r+0x3ba>
    92a0:	9819      	ldr	r0, [sp, #100]	; 0x64
    92a2:	3001      	adds	r0, #1
    92a4:	e57a      	b.n	8d9c <_vfiprintf_r+0xa1c>
    92a6:	468c      	mov	ip, r1
    92a8:	e46e      	b.n	8b88 <_vfiprintf_r+0x808>
    92aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    92ac:	07d9      	lsls	r1, r3, #31
    92ae:	d405      	bmi.n	92bc <_vfiprintf_r+0xf3c>
    92b0:	89ab      	ldrh	r3, [r5, #12]
    92b2:	059a      	lsls	r2, r3, #22
    92b4:	d402      	bmi.n	92bc <_vfiprintf_r+0xf3c>
    92b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    92b8:	f7fc feb0 	bl	601c <__retarget_lock_release_recursive>
    92bc:	f04f 33ff 	mov.w	r3, #4294967295
    92c0:	9305      	str	r3, [sp, #20]
    92c2:	f7ff ba49 	b.w	8758 <_vfiprintf_r+0x3d8>
    92c6:	ee18 2a10 	vmov	r2, s16
    92ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    92ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92d2:	8193      	strh	r3, [r2, #12]
    92d4:	f7ff ba35 	b.w	8742 <_vfiprintf_r+0x3c2>
    92d8:	9c07      	ldr	r4, [sp, #28]
    92da:	9704      	str	r7, [sp, #16]
    92dc:	e746      	b.n	916c <_vfiprintf_r+0xdec>
    92de:	9b07      	ldr	r3, [sp, #28]
    92e0:	f898 1001 	ldrb.w	r1, [r8, #1]
    92e4:	f853 7b04 	ldr.w	r7, [r3], #4
    92e8:	9307      	str	r3, [sp, #28]
    92ea:	4690      	mov	r8, r2
    92ec:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    92f0:	f7ff b8b9 	b.w	8466 <_vfiprintf_r+0xe6>
    92f4:	ee18 2a10 	vmov	r2, s16
    92f8:	8993      	ldrh	r3, [r2, #12]
    92fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    92fe:	8193      	strh	r3, [r2, #12]
    9300:	f7ff ba15 	b.w	872e <_vfiprintf_r+0x3ae>
    9304:	cccccccd 	.word	0xcccccccd
    9308:	20000760 	.word	0x20000760

0000930c <__sbprintf>:
    930c:	b570      	push	{r4, r5, r6, lr}
    930e:	460c      	mov	r4, r1
    9310:	8989      	ldrh	r1, [r1, #12]
    9312:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    9316:	f021 0102 	bic.w	r1, r1, #2
    931a:	f8ad 1014 	strh.w	r1, [sp, #20]
    931e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    9320:	911b      	str	r1, [sp, #108]	; 0x6c
    9322:	89e1      	ldrh	r1, [r4, #14]
    9324:	f8ad 1016 	strh.w	r1, [sp, #22]
    9328:	69e1      	ldr	r1, [r4, #28]
    932a:	9109      	str	r1, [sp, #36]	; 0x24
    932c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    932e:	910b      	str	r1, [sp, #44]	; 0x2c
    9330:	a91c      	add	r1, sp, #112	; 0x70
    9332:	9102      	str	r1, [sp, #8]
    9334:	9106      	str	r1, [sp, #24]
    9336:	f44f 6180 	mov.w	r1, #1024	; 0x400
    933a:	4606      	mov	r6, r0
    933c:	9104      	str	r1, [sp, #16]
    933e:	9107      	str	r1, [sp, #28]
    9340:	a818      	add	r0, sp, #96	; 0x60
    9342:	2100      	movs	r1, #0
    9344:	e9cd 3200 	strd	r3, r2, [sp]
    9348:	9108      	str	r1, [sp, #32]
    934a:	f7fc fe61 	bl	6010 <__retarget_lock_init_recursive>
    934e:	e9dd 3200 	ldrd	r3, r2, [sp]
    9352:	a902      	add	r1, sp, #8
    9354:	4630      	mov	r0, r6
    9356:	f7ff f813 	bl	8380 <_vfiprintf_r>
    935a:	1e05      	subs	r5, r0, #0
    935c:	db07      	blt.n	936e <__sbprintf+0x62>
    935e:	a902      	add	r1, sp, #8
    9360:	4630      	mov	r0, r6
    9362:	f7fd ff63 	bl	722c <_fflush_r>
    9366:	2800      	cmp	r0, #0
    9368:	bf18      	it	ne
    936a:	f04f 35ff 	movne.w	r5, #4294967295
    936e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9372:	065b      	lsls	r3, r3, #25
    9374:	d503      	bpl.n	937e <__sbprintf+0x72>
    9376:	89a3      	ldrh	r3, [r4, #12]
    9378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    937c:	81a3      	strh	r3, [r4, #12]
    937e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9380:	f7fc fe48 	bl	6014 <__retarget_lock_close_recursive>
    9384:	4628      	mov	r0, r5
    9386:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    938a:	bd70      	pop	{r4, r5, r6, pc}

0000938c <__sfvwrite_r>:
    938c:	6893      	ldr	r3, [r2, #8]
    938e:	2b00      	cmp	r3, #0
    9390:	f000 8085 	beq.w	949e <__sfvwrite_r+0x112>
    9394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9398:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    939c:	460c      	mov	r4, r1
    939e:	0719      	lsls	r1, r3, #28
    93a0:	4680      	mov	r8, r0
    93a2:	b083      	sub	sp, #12
    93a4:	4617      	mov	r7, r2
    93a6:	b298      	uxth	r0, r3
    93a8:	d525      	bpl.n	93f6 <__sfvwrite_r+0x6a>
    93aa:	6923      	ldr	r3, [r4, #16]
    93ac:	b31b      	cbz	r3, 93f6 <__sfvwrite_r+0x6a>
    93ae:	f010 0302 	ands.w	r3, r0, #2
    93b2:	683d      	ldr	r5, [r7, #0]
    93b4:	d02d      	beq.n	9412 <__sfvwrite_r+0x86>
    93b6:	f04f 0a00 	mov.w	sl, #0
    93ba:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 967c <__sfvwrite_r+0x2f0>
    93be:	4656      	mov	r6, sl
    93c0:	46b9      	mov	r9, r7
    93c2:	455e      	cmp	r6, fp
    93c4:	4633      	mov	r3, r6
    93c6:	4652      	mov	r2, sl
    93c8:	bf28      	it	cs
    93ca:	465b      	movcs	r3, fp
    93cc:	4640      	mov	r0, r8
    93ce:	2e00      	cmp	r6, #0
    93d0:	d052      	beq.n	9478 <__sfvwrite_r+0xec>
    93d2:	69e1      	ldr	r1, [r4, #28]
    93d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    93d6:	47b8      	blx	r7
    93d8:	2800      	cmp	r0, #0
    93da:	dd56      	ble.n	948a <__sfvwrite_r+0xfe>
    93dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
    93e0:	1a1b      	subs	r3, r3, r0
    93e2:	4482      	add	sl, r0
    93e4:	1a36      	subs	r6, r6, r0
    93e6:	f8c9 3008 	str.w	r3, [r9, #8]
    93ea:	2b00      	cmp	r3, #0
    93ec:	d1e9      	bne.n	93c2 <__sfvwrite_r+0x36>
    93ee:	2000      	movs	r0, #0
    93f0:	b003      	add	sp, #12
    93f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93f6:	4621      	mov	r1, r4
    93f8:	4640      	mov	r0, r8
    93fa:	f000 f941 	bl	9680 <__swsetup_r>
    93fe:	2800      	cmp	r0, #0
    9400:	f040 8138 	bne.w	9674 <__sfvwrite_r+0x2e8>
    9404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9408:	683d      	ldr	r5, [r7, #0]
    940a:	b298      	uxth	r0, r3
    940c:	f010 0302 	ands.w	r3, r0, #2
    9410:	d1d1      	bne.n	93b6 <__sfvwrite_r+0x2a>
    9412:	f010 0901 	ands.w	r9, r0, #1
    9416:	d144      	bne.n	94a2 <__sfvwrite_r+0x116>
    9418:	464e      	mov	r6, r9
    941a:	9700      	str	r7, [sp, #0]
    941c:	b346      	cbz	r6, 9470 <__sfvwrite_r+0xe4>
    941e:	0582      	lsls	r2, r0, #22
    9420:	f8d4 b008 	ldr.w	fp, [r4, #8]
    9424:	f140 8085 	bpl.w	9532 <__sfvwrite_r+0x1a6>
    9428:	45b3      	cmp	fp, r6
    942a:	465a      	mov	r2, fp
    942c:	f200 80b4 	bhi.w	9598 <__sfvwrite_r+0x20c>
    9430:	f410 6f90 	tst.w	r0, #1152	; 0x480
    9434:	f040 80c1 	bne.w	95ba <__sfvwrite_r+0x22e>
    9438:	6820      	ldr	r0, [r4, #0]
    943a:	9201      	str	r2, [sp, #4]
    943c:	4649      	mov	r1, r9
    943e:	f7fc f9d7 	bl	57f0 <memmove>
    9442:	68a3      	ldr	r3, [r4, #8]
    9444:	9a01      	ldr	r2, [sp, #4]
    9446:	eba3 010b 	sub.w	r1, r3, fp
    944a:	6823      	ldr	r3, [r4, #0]
    944c:	60a1      	str	r1, [r4, #8]
    944e:	4413      	add	r3, r2
    9450:	46b2      	mov	sl, r6
    9452:	6023      	str	r3, [r4, #0]
    9454:	2600      	movs	r6, #0
    9456:	9a00      	ldr	r2, [sp, #0]
    9458:	6893      	ldr	r3, [r2, #8]
    945a:	eba3 030a 	sub.w	r3, r3, sl
    945e:	44d1      	add	r9, sl
    9460:	6093      	str	r3, [r2, #8]
    9462:	2b00      	cmp	r3, #0
    9464:	d0c3      	beq.n	93ee <__sfvwrite_r+0x62>
    9466:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    946a:	b280      	uxth	r0, r0
    946c:	2e00      	cmp	r6, #0
    946e:	d1d6      	bne.n	941e <__sfvwrite_r+0x92>
    9470:	e9d5 9600 	ldrd	r9, r6, [r5]
    9474:	3508      	adds	r5, #8
    9476:	e7d1      	b.n	941c <__sfvwrite_r+0x90>
    9478:	e9d5 a600 	ldrd	sl, r6, [r5]
    947c:	3508      	adds	r5, #8
    947e:	e7a0      	b.n	93c2 <__sfvwrite_r+0x36>
    9480:	4621      	mov	r1, r4
    9482:	4640      	mov	r0, r8
    9484:	f7fd fed2 	bl	722c <_fflush_r>
    9488:	b388      	cbz	r0, 94ee <__sfvwrite_r+0x162>
    948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9492:	f04f 30ff 	mov.w	r0, #4294967295
    9496:	81a3      	strh	r3, [r4, #12]
    9498:	b003      	add	sp, #12
    949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    949e:	2000      	movs	r0, #0
    94a0:	4770      	bx	lr
    94a2:	461e      	mov	r6, r3
    94a4:	46ba      	mov	sl, r7
    94a6:	4699      	mov	r9, r3
    94a8:	4618      	mov	r0, r3
    94aa:	9500      	str	r5, [sp, #0]
    94ac:	461f      	mov	r7, r3
    94ae:	b366      	cbz	r6, 950a <__sfvwrite_r+0x17e>
    94b0:	2800      	cmp	r0, #0
    94b2:	d032      	beq.n	951a <__sfvwrite_r+0x18e>
    94b4:	464a      	mov	r2, r9
    94b6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    94ba:	6820      	ldr	r0, [r4, #0]
    94bc:	68a5      	ldr	r5, [r4, #8]
    94be:	42b2      	cmp	r2, r6
    94c0:	bf28      	it	cs
    94c2:	4632      	movcs	r2, r6
    94c4:	4288      	cmp	r0, r1
    94c6:	d904      	bls.n	94d2 <__sfvwrite_r+0x146>
    94c8:	eb05 0b03 	add.w	fp, r5, r3
    94cc:	455a      	cmp	r2, fp
    94ce:	f300 80a7 	bgt.w	9620 <__sfvwrite_r+0x294>
    94d2:	4293      	cmp	r3, r2
    94d4:	dc64      	bgt.n	95a0 <__sfvwrite_r+0x214>
    94d6:	69e1      	ldr	r1, [r4, #28]
    94d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    94da:	463a      	mov	r2, r7
    94dc:	4640      	mov	r0, r8
    94de:	47a8      	blx	r5
    94e0:	f1b0 0b00 	subs.w	fp, r0, #0
    94e4:	ddd1      	ble.n	948a <__sfvwrite_r+0xfe>
    94e6:	ebb9 090b 	subs.w	r9, r9, fp
    94ea:	d0c9      	beq.n	9480 <__sfvwrite_r+0xf4>
    94ec:	2001      	movs	r0, #1
    94ee:	f8da 3008 	ldr.w	r3, [sl, #8]
    94f2:	eba3 030b 	sub.w	r3, r3, fp
    94f6:	445f      	add	r7, fp
    94f8:	eba6 060b 	sub.w	r6, r6, fp
    94fc:	f8ca 3008 	str.w	r3, [sl, #8]
    9500:	2b00      	cmp	r3, #0
    9502:	f43f af74 	beq.w	93ee <__sfvwrite_r+0x62>
    9506:	2e00      	cmp	r6, #0
    9508:	d1d2      	bne.n	94b0 <__sfvwrite_r+0x124>
    950a:	9a00      	ldr	r2, [sp, #0]
    950c:	6856      	ldr	r6, [r2, #4]
    950e:	4613      	mov	r3, r2
    9510:	3208      	adds	r2, #8
    9512:	9200      	str	r2, [sp, #0]
    9514:	2e00      	cmp	r6, #0
    9516:	d0f8      	beq.n	950a <__sfvwrite_r+0x17e>
    9518:	681f      	ldr	r7, [r3, #0]
    951a:	4632      	mov	r2, r6
    951c:	210a      	movs	r1, #10
    951e:	4638      	mov	r0, r7
    9520:	f7fd fef6 	bl	7310 <memchr>
    9524:	2800      	cmp	r0, #0
    9526:	f000 809c 	beq.w	9662 <__sfvwrite_r+0x2d6>
    952a:	3001      	adds	r0, #1
    952c:	eba0 0907 	sub.w	r9, r0, r7
    9530:	e7c0      	b.n	94b4 <__sfvwrite_r+0x128>
    9532:	6820      	ldr	r0, [r4, #0]
    9534:	6923      	ldr	r3, [r4, #16]
    9536:	4298      	cmp	r0, r3
    9538:	d816      	bhi.n	9568 <__sfvwrite_r+0x1dc>
    953a:	6962      	ldr	r2, [r4, #20]
    953c:	42b2      	cmp	r2, r6
    953e:	d813      	bhi.n	9568 <__sfvwrite_r+0x1dc>
    9540:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9544:	42b3      	cmp	r3, r6
    9546:	bf28      	it	cs
    9548:	4633      	movcs	r3, r6
    954a:	69e1      	ldr	r1, [r4, #28]
    954c:	fb93 f3f2 	sdiv	r3, r3, r2
    9550:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9552:	fb02 f303 	mul.w	r3, r2, r3
    9556:	4640      	mov	r0, r8
    9558:	464a      	mov	r2, r9
    955a:	47b8      	blx	r7
    955c:	f1b0 0a00 	subs.w	sl, r0, #0
    9560:	dd93      	ble.n	948a <__sfvwrite_r+0xfe>
    9562:	eba6 060a 	sub.w	r6, r6, sl
    9566:	e776      	b.n	9456 <__sfvwrite_r+0xca>
    9568:	45b3      	cmp	fp, r6
    956a:	46da      	mov	sl, fp
    956c:	bf28      	it	cs
    956e:	46b2      	movcs	sl, r6
    9570:	4652      	mov	r2, sl
    9572:	4649      	mov	r1, r9
    9574:	f7fc f93c 	bl	57f0 <memmove>
    9578:	68a3      	ldr	r3, [r4, #8]
    957a:	6822      	ldr	r2, [r4, #0]
    957c:	eba3 030a 	sub.w	r3, r3, sl
    9580:	4452      	add	r2, sl
    9582:	60a3      	str	r3, [r4, #8]
    9584:	6022      	str	r2, [r4, #0]
    9586:	2b00      	cmp	r3, #0
    9588:	d1eb      	bne.n	9562 <__sfvwrite_r+0x1d6>
    958a:	4621      	mov	r1, r4
    958c:	4640      	mov	r0, r8
    958e:	f7fd fe4d 	bl	722c <_fflush_r>
    9592:	2800      	cmp	r0, #0
    9594:	d0e5      	beq.n	9562 <__sfvwrite_r+0x1d6>
    9596:	e778      	b.n	948a <__sfvwrite_r+0xfe>
    9598:	6820      	ldr	r0, [r4, #0]
    959a:	46b3      	mov	fp, r6
    959c:	4632      	mov	r2, r6
    959e:	e74c      	b.n	943a <__sfvwrite_r+0xae>
    95a0:	4639      	mov	r1, r7
    95a2:	9201      	str	r2, [sp, #4]
    95a4:	f7fc f924 	bl	57f0 <memmove>
    95a8:	9a01      	ldr	r2, [sp, #4]
    95aa:	68a3      	ldr	r3, [r4, #8]
    95ac:	1a9b      	subs	r3, r3, r2
    95ae:	60a3      	str	r3, [r4, #8]
    95b0:	6823      	ldr	r3, [r4, #0]
    95b2:	4413      	add	r3, r2
    95b4:	6023      	str	r3, [r4, #0]
    95b6:	4693      	mov	fp, r2
    95b8:	e795      	b.n	94e6 <__sfvwrite_r+0x15a>
    95ba:	6823      	ldr	r3, [r4, #0]
    95bc:	6921      	ldr	r1, [r4, #16]
    95be:	eba3 0b01 	sub.w	fp, r3, r1
    95c2:	6963      	ldr	r3, [r4, #20]
    95c4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    95c8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    95cc:	f10b 0301 	add.w	r3, fp, #1
    95d0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    95d4:	4433      	add	r3, r6
    95d6:	4553      	cmp	r3, sl
    95d8:	4652      	mov	r2, sl
    95da:	bf84      	itt	hi
    95dc:	469a      	movhi	sl, r3
    95de:	4652      	movhi	r2, sl
    95e0:	0543      	lsls	r3, r0, #21
    95e2:	d52c      	bpl.n	963e <__sfvwrite_r+0x2b2>
    95e4:	4611      	mov	r1, r2
    95e6:	4640      	mov	r0, r8
    95e8:	f7fb fa1a 	bl	4a20 <_malloc_r>
    95ec:	2800      	cmp	r0, #0
    95ee:	d03b      	beq.n	9668 <__sfvwrite_r+0x2dc>
    95f0:	465a      	mov	r2, fp
    95f2:	6921      	ldr	r1, [r4, #16]
    95f4:	9001      	str	r0, [sp, #4]
    95f6:	f7f9 f8db 	bl	27b0 <memcpy>
    95fa:	89a2      	ldrh	r2, [r4, #12]
    95fc:	9b01      	ldr	r3, [sp, #4]
    95fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    9602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9606:	81a2      	strh	r2, [r4, #12]
    9608:	eb03 000b 	add.w	r0, r3, fp
    960c:	6123      	str	r3, [r4, #16]
    960e:	ebaa 030b 	sub.w	r3, sl, fp
    9612:	f8c4 a014 	str.w	sl, [r4, #20]
    9616:	60a3      	str	r3, [r4, #8]
    9618:	6020      	str	r0, [r4, #0]
    961a:	46b3      	mov	fp, r6
    961c:	4632      	mov	r2, r6
    961e:	e70c      	b.n	943a <__sfvwrite_r+0xae>
    9620:	4639      	mov	r1, r7
    9622:	465a      	mov	r2, fp
    9624:	f7fc f8e4 	bl	57f0 <memmove>
    9628:	6823      	ldr	r3, [r4, #0]
    962a:	445b      	add	r3, fp
    962c:	6023      	str	r3, [r4, #0]
    962e:	4621      	mov	r1, r4
    9630:	4640      	mov	r0, r8
    9632:	f7fd fdfb 	bl	722c <_fflush_r>
    9636:	2800      	cmp	r0, #0
    9638:	f43f af55 	beq.w	94e6 <__sfvwrite_r+0x15a>
    963c:	e725      	b.n	948a <__sfvwrite_r+0xfe>
    963e:	4640      	mov	r0, r8
    9640:	f7fb fcb6 	bl	4fb0 <_realloc_r>
    9644:	4603      	mov	r3, r0
    9646:	2800      	cmp	r0, #0
    9648:	d1de      	bne.n	9608 <__sfvwrite_r+0x27c>
    964a:	6921      	ldr	r1, [r4, #16]
    964c:	4640      	mov	r0, r8
    964e:	f7fc ffb9 	bl	65c4 <_free_r>
    9652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9656:	220c      	movs	r2, #12
    9658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    965c:	f8c8 2000 	str.w	r2, [r8]
    9660:	e715      	b.n	948e <__sfvwrite_r+0x102>
    9662:	1c72      	adds	r2, r6, #1
    9664:	4691      	mov	r9, r2
    9666:	e726      	b.n	94b6 <__sfvwrite_r+0x12a>
    9668:	220c      	movs	r2, #12
    966a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    966e:	f8c8 2000 	str.w	r2, [r8]
    9672:	e70c      	b.n	948e <__sfvwrite_r+0x102>
    9674:	f04f 30ff 	mov.w	r0, #4294967295
    9678:	e6ba      	b.n	93f0 <__sfvwrite_r+0x64>
    967a:	bf00      	nop
    967c:	7ffffc00 	.word	0x7ffffc00

00009680 <__swsetup_r>:
    9680:	b538      	push	{r3, r4, r5, lr}
    9682:	4b31      	ldr	r3, [pc, #196]	; (9748 <__swsetup_r+0xc8>)
    9684:	681b      	ldr	r3, [r3, #0]
    9686:	4605      	mov	r5, r0
    9688:	460c      	mov	r4, r1
    968a:	b113      	cbz	r3, 9692 <__swsetup_r+0x12>
    968c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    968e:	2a00      	cmp	r2, #0
    9690:	d04e      	beq.n	9730 <__swsetup_r+0xb0>
    9692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9696:	0718      	lsls	r0, r3, #28
    9698:	b29a      	uxth	r2, r3
    969a:	d51c      	bpl.n	96d6 <__swsetup_r+0x56>
    969c:	6921      	ldr	r1, [r4, #16]
    969e:	b329      	cbz	r1, 96ec <__swsetup_r+0x6c>
    96a0:	f012 0001 	ands.w	r0, r2, #1
    96a4:	d007      	beq.n	96b6 <__swsetup_r+0x36>
    96a6:	2000      	movs	r0, #0
    96a8:	60a0      	str	r0, [r4, #8]
    96aa:	6960      	ldr	r0, [r4, #20]
    96ac:	4240      	negs	r0, r0
    96ae:	61a0      	str	r0, [r4, #24]
    96b0:	b139      	cbz	r1, 96c2 <__swsetup_r+0x42>
    96b2:	2000      	movs	r0, #0
    96b4:	bd38      	pop	{r3, r4, r5, pc}
    96b6:	0795      	lsls	r5, r2, #30
    96b8:	bf58      	it	pl
    96ba:	6960      	ldrpl	r0, [r4, #20]
    96bc:	60a0      	str	r0, [r4, #8]
    96be:	2900      	cmp	r1, #0
    96c0:	d1f7      	bne.n	96b2 <__swsetup_r+0x32>
    96c2:	0612      	lsls	r2, r2, #24
    96c4:	bf58      	it	pl
    96c6:	4608      	movpl	r0, r1
    96c8:	d5f4      	bpl.n	96b4 <__swsetup_r+0x34>
    96ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    96ce:	81a3      	strh	r3, [r4, #12]
    96d0:	f04f 30ff 	mov.w	r0, #4294967295
    96d4:	bd38      	pop	{r3, r4, r5, pc}
    96d6:	06d1      	lsls	r1, r2, #27
    96d8:	d52e      	bpl.n	9738 <__swsetup_r+0xb8>
    96da:	0752      	lsls	r2, r2, #29
    96dc:	d414      	bmi.n	9708 <__swsetup_r+0x88>
    96de:	6921      	ldr	r1, [r4, #16]
    96e0:	f043 0308 	orr.w	r3, r3, #8
    96e4:	81a3      	strh	r3, [r4, #12]
    96e6:	b29a      	uxth	r2, r3
    96e8:	2900      	cmp	r1, #0
    96ea:	d1d9      	bne.n	96a0 <__swsetup_r+0x20>
    96ec:	f402 7020 	and.w	r0, r2, #640	; 0x280
    96f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    96f4:	d0d4      	beq.n	96a0 <__swsetup_r+0x20>
    96f6:	4621      	mov	r1, r4
    96f8:	4628      	mov	r0, r5
    96fa:	f000 f947 	bl	998c <__smakebuf_r>
    96fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9702:	6921      	ldr	r1, [r4, #16]
    9704:	b29a      	uxth	r2, r3
    9706:	e7cb      	b.n	96a0 <__swsetup_r+0x20>
    9708:	6b21      	ldr	r1, [r4, #48]	; 0x30
    970a:	b151      	cbz	r1, 9722 <__swsetup_r+0xa2>
    970c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9710:	4291      	cmp	r1, r2
    9712:	d004      	beq.n	971e <__swsetup_r+0x9e>
    9714:	4628      	mov	r0, r5
    9716:	f7fc ff55 	bl	65c4 <_free_r>
    971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    971e:	2200      	movs	r2, #0
    9720:	6322      	str	r2, [r4, #48]	; 0x30
    9722:	6921      	ldr	r1, [r4, #16]
    9724:	2200      	movs	r2, #0
    9726:	e9c4 1200 	strd	r1, r2, [r4]
    972a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    972e:	e7d7      	b.n	96e0 <__swsetup_r+0x60>
    9730:	4618      	mov	r0, r3
    9732:	f7fb ffc9 	bl	56c8 <__sinit>
    9736:	e7ac      	b.n	9692 <__swsetup_r+0x12>
    9738:	2209      	movs	r2, #9
    973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    973e:	602a      	str	r2, [r5, #0]
    9740:	f04f 30ff 	mov.w	r0, #4294967295
    9744:	81a3      	strh	r3, [r4, #12]
    9746:	bd38      	pop	{r3, r4, r5, pc}
    9748:	20001754 	.word	0x20001754

0000974c <__fputwc>:
    974c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9750:	b082      	sub	sp, #8
    9752:	4682      	mov	sl, r0
    9754:	4688      	mov	r8, r1
    9756:	4614      	mov	r4, r2
    9758:	f7fc fbc4 	bl	5ee4 <__locale_mb_cur_max>
    975c:	2801      	cmp	r0, #1
    975e:	d103      	bne.n	9768 <__fputwc+0x1c>
    9760:	f108 33ff 	add.w	r3, r8, #4294967295
    9764:	2bfe      	cmp	r3, #254	; 0xfe
    9766:	d936      	bls.n	97d6 <__fputwc+0x8a>
    9768:	f10d 0904 	add.w	r9, sp, #4
    976c:	4642      	mov	r2, r8
    976e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    9772:	4649      	mov	r1, r9
    9774:	4650      	mov	r0, sl
    9776:	f7fe fd81 	bl	827c <_wcrtomb_r>
    977a:	1c42      	adds	r2, r0, #1
    977c:	4606      	mov	r6, r0
    977e:	d032      	beq.n	97e6 <__fputwc+0x9a>
    9780:	b320      	cbz	r0, 97cc <__fputwc+0x80>
    9782:	f89d c004 	ldrb.w	ip, [sp, #4]
    9786:	2500      	movs	r5, #0
    9788:	e009      	b.n	979e <__fputwc+0x52>
    978a:	6823      	ldr	r3, [r4, #0]
    978c:	1c5a      	adds	r2, r3, #1
    978e:	6022      	str	r2, [r4, #0]
    9790:	f883 c000 	strb.w	ip, [r3]
    9794:	3501      	adds	r5, #1
    9796:	42b5      	cmp	r5, r6
    9798:	d218      	bcs.n	97cc <__fputwc+0x80>
    979a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    979e:	68a3      	ldr	r3, [r4, #8]
    97a0:	3b01      	subs	r3, #1
    97a2:	2b00      	cmp	r3, #0
    97a4:	60a3      	str	r3, [r4, #8]
    97a6:	daf0      	bge.n	978a <__fputwc+0x3e>
    97a8:	69a7      	ldr	r7, [r4, #24]
    97aa:	42bb      	cmp	r3, r7
    97ac:	4661      	mov	r1, ip
    97ae:	4622      	mov	r2, r4
    97b0:	4650      	mov	r0, sl
    97b2:	db02      	blt.n	97ba <__fputwc+0x6e>
    97b4:	f1bc 0f0a 	cmp.w	ip, #10
    97b8:	d1e7      	bne.n	978a <__fputwc+0x3e>
    97ba:	f000 f953 	bl	9a64 <__swbuf_r>
    97be:	1c43      	adds	r3, r0, #1
    97c0:	d1e8      	bne.n	9794 <__fputwc+0x48>
    97c2:	4606      	mov	r6, r0
    97c4:	4630      	mov	r0, r6
    97c6:	b002      	add	sp, #8
    97c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97cc:	4646      	mov	r6, r8
    97ce:	4630      	mov	r0, r6
    97d0:	b002      	add	sp, #8
    97d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97d6:	fa5f fc88 	uxtb.w	ip, r8
    97da:	f88d c004 	strb.w	ip, [sp, #4]
    97de:	4606      	mov	r6, r0
    97e0:	f10d 0904 	add.w	r9, sp, #4
    97e4:	e7cf      	b.n	9786 <__fputwc+0x3a>
    97e6:	89a3      	ldrh	r3, [r4, #12]
    97e8:	4630      	mov	r0, r6
    97ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    97ee:	81a3      	strh	r3, [r4, #12]
    97f0:	b002      	add	sp, #8
    97f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97f6:	bf00      	nop

000097f8 <_fputwc_r>:
    97f8:	b530      	push	{r4, r5, lr}
    97fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
    97fc:	f013 0f01 	tst.w	r3, #1
    9800:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9804:	4614      	mov	r4, r2
    9806:	b083      	sub	sp, #12
    9808:	4605      	mov	r5, r0
    980a:	b29a      	uxth	r2, r3
    980c:	d101      	bne.n	9812 <_fputwc_r+0x1a>
    980e:	0598      	lsls	r0, r3, #22
    9810:	d51c      	bpl.n	984c <_fputwc_r+0x54>
    9812:	0490      	lsls	r0, r2, #18
    9814:	d406      	bmi.n	9824 <_fputwc_r+0x2c>
    9816:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    981c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9820:	81a3      	strh	r3, [r4, #12]
    9822:	6662      	str	r2, [r4, #100]	; 0x64
    9824:	4622      	mov	r2, r4
    9826:	4628      	mov	r0, r5
    9828:	f7ff ff90 	bl	974c <__fputwc>
    982c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    982e:	07da      	lsls	r2, r3, #31
    9830:	4605      	mov	r5, r0
    9832:	d402      	bmi.n	983a <_fputwc_r+0x42>
    9834:	89a3      	ldrh	r3, [r4, #12]
    9836:	059b      	lsls	r3, r3, #22
    9838:	d502      	bpl.n	9840 <_fputwc_r+0x48>
    983a:	4628      	mov	r0, r5
    983c:	b003      	add	sp, #12
    983e:	bd30      	pop	{r4, r5, pc}
    9840:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9842:	f7fc fbeb 	bl	601c <__retarget_lock_release_recursive>
    9846:	4628      	mov	r0, r5
    9848:	b003      	add	sp, #12
    984a:	bd30      	pop	{r4, r5, pc}
    984c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    984e:	9101      	str	r1, [sp, #4]
    9850:	f7fc fbe2 	bl	6018 <__retarget_lock_acquire_recursive>
    9854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9858:	9901      	ldr	r1, [sp, #4]
    985a:	b29a      	uxth	r2, r3
    985c:	e7d9      	b.n	9812 <_fputwc_r+0x1a>
    985e:	bf00      	nop

00009860 <_wcsnrtombs_l>:
    9860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9864:	b08b      	sub	sp, #44	; 0x2c
    9866:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    986a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    986c:	9103      	str	r1, [sp, #12]
    986e:	4681      	mov	r9, r0
    9870:	9205      	str	r2, [sp, #20]
    9872:	461e      	mov	r6, r3
    9874:	f1b8 0f00 	cmp.w	r8, #0
    9878:	d05c      	beq.n	9934 <_wcsnrtombs_l+0xd4>
    987a:	9b03      	ldr	r3, [sp, #12]
    987c:	2b00      	cmp	r3, #0
    987e:	d05e      	beq.n	993e <_wcsnrtombs_l+0xde>
    9880:	9b05      	ldr	r3, [sp, #20]
    9882:	681d      	ldr	r5, [r3, #0]
    9884:	2f00      	cmp	r7, #0
    9886:	d06a      	beq.n	995e <_wcsnrtombs_l+0xfe>
    9888:	1e74      	subs	r4, r6, #1
    988a:	b34e      	cbz	r6, 98e0 <_wcsnrtombs_l+0x80>
    988c:	9b03      	ldr	r3, [sp, #12]
    988e:	9304      	str	r3, [sp, #16]
    9890:	3d04      	subs	r5, #4
    9892:	2600      	movs	r6, #0
    9894:	9501      	str	r5, [sp, #4]
    9896:	e00b      	b.n	98b0 <_wcsnrtombs_l+0x50>
    9898:	9b03      	ldr	r3, [sp, #12]
    989a:	bb2b      	cbnz	r3, 98e8 <_wcsnrtombs_l+0x88>
    989c:	9b01      	ldr	r3, [sp, #4]
    989e:	681a      	ldr	r2, [r3, #0]
    98a0:	2a00      	cmp	r2, #0
    98a2:	d03a      	beq.n	991a <_wcsnrtombs_l+0xba>
    98a4:	45bc      	cmp	ip, r7
    98a6:	d25c      	bcs.n	9962 <_wcsnrtombs_l+0x102>
    98a8:	3c01      	subs	r4, #1
    98aa:	1c63      	adds	r3, r4, #1
    98ac:	4666      	mov	r6, ip
    98ae:	d017      	beq.n	98e0 <_wcsnrtombs_l+0x80>
    98b0:	f8d8 3000 	ldr.w	r3, [r8]
    98b4:	9302      	str	r3, [sp, #8]
    98b6:	9b01      	ldr	r3, [sp, #4]
    98b8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    98bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    98c0:	9301      	str	r3, [sp, #4]
    98c2:	a907      	add	r1, sp, #28
    98c4:	4643      	mov	r3, r8
    98c6:	4648      	mov	r0, r9
    98c8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    98cc:	47a8      	blx	r5
    98ce:	1c42      	adds	r2, r0, #1
    98d0:	d03a      	beq.n	9948 <_wcsnrtombs_l+0xe8>
    98d2:	eb00 0c06 	add.w	ip, r0, r6
    98d6:	45bc      	cmp	ip, r7
    98d8:	d9de      	bls.n	9898 <_wcsnrtombs_l+0x38>
    98da:	9b02      	ldr	r3, [sp, #8]
    98dc:	e9c8 3b00 	strd	r3, fp, [r8]
    98e0:	4630      	mov	r0, r6
    98e2:	b00b      	add	sp, #44	; 0x2c
    98e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98e8:	2800      	cmp	r0, #0
    98ea:	dd0e      	ble.n	990a <_wcsnrtombs_l+0xaa>
    98ec:	9b04      	ldr	r3, [sp, #16]
    98ee:	9d01      	ldr	r5, [sp, #4]
    98f0:	4418      	add	r0, r3
    98f2:	1e5a      	subs	r2, r3, #1
    98f4:	a907      	add	r1, sp, #28
    98f6:	f100 3eff 	add.w	lr, r0, #4294967295
    98fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    98fe:	f802 3f01 	strb.w	r3, [r2, #1]!
    9902:	4572      	cmp	r2, lr
    9904:	d1f9      	bne.n	98fa <_wcsnrtombs_l+0x9a>
    9906:	9501      	str	r5, [sp, #4]
    9908:	9004      	str	r0, [sp, #16]
    990a:	9b05      	ldr	r3, [sp, #20]
    990c:	681a      	ldr	r2, [r3, #0]
    990e:	3204      	adds	r2, #4
    9910:	601a      	str	r2, [r3, #0]
    9912:	9b01      	ldr	r3, [sp, #4]
    9914:	681a      	ldr	r2, [r3, #0]
    9916:	2a00      	cmp	r2, #0
    9918:	d1c4      	bne.n	98a4 <_wcsnrtombs_l+0x44>
    991a:	9b03      	ldr	r3, [sp, #12]
    991c:	b10b      	cbz	r3, 9922 <_wcsnrtombs_l+0xc2>
    991e:	9b05      	ldr	r3, [sp, #20]
    9920:	601a      	str	r2, [r3, #0]
    9922:	f10c 36ff 	add.w	r6, ip, #4294967295
    9926:	2200      	movs	r2, #0
    9928:	4630      	mov	r0, r6
    992a:	f8c8 2000 	str.w	r2, [r8]
    992e:	b00b      	add	sp, #44	; 0x2c
    9930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9934:	9b03      	ldr	r3, [sp, #12]
    9936:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    993a:	2b00      	cmp	r3, #0
    993c:	d1a0      	bne.n	9880 <_wcsnrtombs_l+0x20>
    993e:	9b05      	ldr	r3, [sp, #20]
    9940:	f04f 37ff 	mov.w	r7, #4294967295
    9944:	681d      	ldr	r5, [r3, #0]
    9946:	e79f      	b.n	9888 <_wcsnrtombs_l+0x28>
    9948:	4606      	mov	r6, r0
    994a:	218a      	movs	r1, #138	; 0x8a
    994c:	2200      	movs	r2, #0
    994e:	4630      	mov	r0, r6
    9950:	f8c9 1000 	str.w	r1, [r9]
    9954:	f8c8 2000 	str.w	r2, [r8]
    9958:	b00b      	add	sp, #44	; 0x2c
    995a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    995e:	463e      	mov	r6, r7
    9960:	e7be      	b.n	98e0 <_wcsnrtombs_l+0x80>
    9962:	4666      	mov	r6, ip
    9964:	e7bc      	b.n	98e0 <_wcsnrtombs_l+0x80>
    9966:	bf00      	nop

00009968 <_wcsnrtombs_r>:
    9968:	b510      	push	{r4, lr}
    996a:	b084      	sub	sp, #16
    996c:	4c05      	ldr	r4, [pc, #20]	; (9984 <_wcsnrtombs_r+0x1c>)
    996e:	9806      	ldr	r0, [sp, #24]
    9970:	9000      	str	r0, [sp, #0]
    9972:	9807      	ldr	r0, [sp, #28]
    9974:	9001      	str	r0, [sp, #4]
    9976:	4804      	ldr	r0, [pc, #16]	; (9988 <_wcsnrtombs_r+0x20>)
    9978:	6800      	ldr	r0, [r0, #0]
    997a:	9402      	str	r4, [sp, #8]
    997c:	f7ff ff70 	bl	9860 <_wcsnrtombs_l>
    9980:	b004      	add	sp, #16
    9982:	bd10      	pop	{r4, pc}
    9984:	200011cc 	.word	0x200011cc
    9988:	20001754 	.word	0x20001754

0000998c <__smakebuf_r>:
    998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9990:	898b      	ldrh	r3, [r1, #12]
    9992:	460c      	mov	r4, r1
    9994:	0799      	lsls	r1, r3, #30
    9996:	b096      	sub	sp, #88	; 0x58
    9998:	d508      	bpl.n	99ac <__smakebuf_r+0x20>
    999a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    999e:	2201      	movs	r2, #1
    99a0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    99a4:	6023      	str	r3, [r4, #0]
    99a6:	b016      	add	sp, #88	; 0x58
    99a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    99b0:	2900      	cmp	r1, #0
    99b2:	4606      	mov	r6, r0
    99b4:	db25      	blt.n	9a02 <__smakebuf_r+0x76>
    99b6:	466a      	mov	r2, sp
    99b8:	f000 f8ac 	bl	9b14 <_fstat_r>
    99bc:	2800      	cmp	r0, #0
    99be:	db1f      	blt.n	9a00 <__smakebuf_r+0x74>
    99c0:	9d01      	ldr	r5, [sp, #4]
    99c2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    99c6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    99ca:	fab5 f585 	clz	r5, r5
    99ce:	f44f 6880 	mov.w	r8, #1024	; 0x400
    99d2:	096d      	lsrs	r5, r5, #5
    99d4:	f44f 6700 	mov.w	r7, #2048	; 0x800
    99d8:	4641      	mov	r1, r8
    99da:	4630      	mov	r0, r6
    99dc:	f7fb f820 	bl	4a20 <_malloc_r>
    99e0:	b1e0      	cbz	r0, 9a1c <__smakebuf_r+0x90>
    99e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    99e6:	f8c4 8014 	str.w	r8, [r4, #20]
    99ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    99ee:	6020      	str	r0, [r4, #0]
    99f0:	6120      	str	r0, [r4, #16]
    99f2:	81a3      	strh	r3, [r4, #12]
    99f4:	bb35      	cbnz	r5, 9a44 <__smakebuf_r+0xb8>
    99f6:	433b      	orrs	r3, r7
    99f8:	81a3      	strh	r3, [r4, #12]
    99fa:	b016      	add	sp, #88	; 0x58
    99fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a00:	89a3      	ldrh	r3, [r4, #12]
    9a02:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    9a06:	d019      	beq.n	9a3c <__smakebuf_r+0xb0>
    9a08:	f04f 0840 	mov.w	r8, #64	; 0x40
    9a0c:	2500      	movs	r5, #0
    9a0e:	4641      	mov	r1, r8
    9a10:	4630      	mov	r0, r6
    9a12:	462f      	mov	r7, r5
    9a14:	f7fb f804 	bl	4a20 <_malloc_r>
    9a18:	2800      	cmp	r0, #0
    9a1a:	d1e2      	bne.n	99e2 <__smakebuf_r+0x56>
    9a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9a20:	059a      	lsls	r2, r3, #22
    9a22:	d4c0      	bmi.n	99a6 <__smakebuf_r+0x1a>
    9a24:	f023 0303 	bic.w	r3, r3, #3
    9a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
    9a2c:	f043 0302 	orr.w	r3, r3, #2
    9a30:	2101      	movs	r1, #1
    9a32:	e9c4 2104 	strd	r2, r1, [r4, #16]
    9a36:	81a3      	strh	r3, [r4, #12]
    9a38:	6022      	str	r2, [r4, #0]
    9a3a:	e7b4      	b.n	99a6 <__smakebuf_r+0x1a>
    9a3c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    9a40:	462f      	mov	r7, r5
    9a42:	e7c9      	b.n	99d8 <__smakebuf_r+0x4c>
    9a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    9a48:	4630      	mov	r0, r6
    9a4a:	f000 f879 	bl	9b40 <_isatty_r>
    9a4e:	b910      	cbnz	r0, 9a56 <__smakebuf_r+0xca>
    9a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9a54:	e7cf      	b.n	99f6 <__smakebuf_r+0x6a>
    9a56:	89a3      	ldrh	r3, [r4, #12]
    9a58:	f023 0303 	bic.w	r3, r3, #3
    9a5c:	f043 0301 	orr.w	r3, r3, #1
    9a60:	b21b      	sxth	r3, r3
    9a62:	e7c8      	b.n	99f6 <__smakebuf_r+0x6a>

00009a64 <__swbuf_r>:
    9a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a66:	460d      	mov	r5, r1
    9a68:	4614      	mov	r4, r2
    9a6a:	4606      	mov	r6, r0
    9a6c:	b110      	cbz	r0, 9a74 <__swbuf_r+0x10>
    9a6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9a70:	2b00      	cmp	r3, #0
    9a72:	d04c      	beq.n	9b0e <__swbuf_r+0xaa>
    9a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9a78:	69a3      	ldr	r3, [r4, #24]
    9a7a:	60a3      	str	r3, [r4, #8]
    9a7c:	0717      	lsls	r7, r2, #28
    9a7e:	b290      	uxth	r0, r2
    9a80:	d51b      	bpl.n	9aba <__swbuf_r+0x56>
    9a82:	6923      	ldr	r3, [r4, #16]
    9a84:	b1cb      	cbz	r3, 9aba <__swbuf_r+0x56>
    9a86:	b2ed      	uxtb	r5, r5
    9a88:	0481      	lsls	r1, r0, #18
    9a8a:	462f      	mov	r7, r5
    9a8c:	d522      	bpl.n	9ad4 <__swbuf_r+0x70>
    9a8e:	6822      	ldr	r2, [r4, #0]
    9a90:	6961      	ldr	r1, [r4, #20]
    9a92:	1ad3      	subs	r3, r2, r3
    9a94:	4299      	cmp	r1, r3
    9a96:	dd29      	ble.n	9aec <__swbuf_r+0x88>
    9a98:	3301      	adds	r3, #1
    9a9a:	68a1      	ldr	r1, [r4, #8]
    9a9c:	3901      	subs	r1, #1
    9a9e:	60a1      	str	r1, [r4, #8]
    9aa0:	1c51      	adds	r1, r2, #1
    9aa2:	6021      	str	r1, [r4, #0]
    9aa4:	7015      	strb	r5, [r2, #0]
    9aa6:	6962      	ldr	r2, [r4, #20]
    9aa8:	429a      	cmp	r2, r3
    9aaa:	d027      	beq.n	9afc <__swbuf_r+0x98>
    9aac:	89a3      	ldrh	r3, [r4, #12]
    9aae:	07db      	lsls	r3, r3, #31
    9ab0:	d501      	bpl.n	9ab6 <__swbuf_r+0x52>
    9ab2:	2d0a      	cmp	r5, #10
    9ab4:	d022      	beq.n	9afc <__swbuf_r+0x98>
    9ab6:	4638      	mov	r0, r7
    9ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9aba:	4621      	mov	r1, r4
    9abc:	4630      	mov	r0, r6
    9abe:	f7ff fddf 	bl	9680 <__swsetup_r>
    9ac2:	bb08      	cbnz	r0, 9b08 <__swbuf_r+0xa4>
    9ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    9ac8:	6923      	ldr	r3, [r4, #16]
    9aca:	b290      	uxth	r0, r2
    9acc:	b2ed      	uxtb	r5, r5
    9ace:	0481      	lsls	r1, r0, #18
    9ad0:	462f      	mov	r7, r5
    9ad2:	d4dc      	bmi.n	9a8e <__swbuf_r+0x2a>
    9ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9ad8:	81a2      	strh	r2, [r4, #12]
    9ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9adc:	6961      	ldr	r1, [r4, #20]
    9ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    9ae2:	6662      	str	r2, [r4, #100]	; 0x64
    9ae4:	6822      	ldr	r2, [r4, #0]
    9ae6:	1ad3      	subs	r3, r2, r3
    9ae8:	4299      	cmp	r1, r3
    9aea:	dcd5      	bgt.n	9a98 <__swbuf_r+0x34>
    9aec:	4621      	mov	r1, r4
    9aee:	4630      	mov	r0, r6
    9af0:	f7fd fb9c 	bl	722c <_fflush_r>
    9af4:	b940      	cbnz	r0, 9b08 <__swbuf_r+0xa4>
    9af6:	6822      	ldr	r2, [r4, #0]
    9af8:	2301      	movs	r3, #1
    9afa:	e7ce      	b.n	9a9a <__swbuf_r+0x36>
    9afc:	4621      	mov	r1, r4
    9afe:	4630      	mov	r0, r6
    9b00:	f7fd fb94 	bl	722c <_fflush_r>
    9b04:	2800      	cmp	r0, #0
    9b06:	d0d6      	beq.n	9ab6 <__swbuf_r+0x52>
    9b08:	f04f 37ff 	mov.w	r7, #4294967295
    9b0c:	e7d3      	b.n	9ab6 <__swbuf_r+0x52>
    9b0e:	f7fb fddb 	bl	56c8 <__sinit>
    9b12:	e7af      	b.n	9a74 <__swbuf_r+0x10>

00009b14 <_fstat_r>:
    9b14:	b570      	push	{r4, r5, r6, lr}
    9b16:	460c      	mov	r4, r1
    9b18:	4d08      	ldr	r5, [pc, #32]	; (9b3c <_fstat_r+0x28>)
    9b1a:	4603      	mov	r3, r0
    9b1c:	2600      	movs	r6, #0
    9b1e:	4620      	mov	r0, r4
    9b20:	4611      	mov	r1, r2
    9b22:	461c      	mov	r4, r3
    9b24:	602e      	str	r6, [r5, #0]
    9b26:	f7f9 f99f 	bl	2e68 <_fstat>
    9b2a:	1c43      	adds	r3, r0, #1
    9b2c:	d000      	beq.n	9b30 <_fstat_r+0x1c>
    9b2e:	bd70      	pop	{r4, r5, r6, pc}
    9b30:	682b      	ldr	r3, [r5, #0]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d0fb      	beq.n	9b2e <_fstat_r+0x1a>
    9b36:	6023      	str	r3, [r4, #0]
    9b38:	bd70      	pop	{r4, r5, r6, pc}
    9b3a:	bf00      	nop
    9b3c:	2000205c 	.word	0x2000205c

00009b40 <_isatty_r>:
    9b40:	b538      	push	{r3, r4, r5, lr}
    9b42:	4d07      	ldr	r5, [pc, #28]	; (9b60 <_isatty_r+0x20>)
    9b44:	2200      	movs	r2, #0
    9b46:	4604      	mov	r4, r0
    9b48:	4608      	mov	r0, r1
    9b4a:	602a      	str	r2, [r5, #0]
    9b4c:	f7f9 f992 	bl	2e74 <_isatty>
    9b50:	1c43      	adds	r3, r0, #1
    9b52:	d000      	beq.n	9b56 <_isatty_r+0x16>
    9b54:	bd38      	pop	{r3, r4, r5, pc}
    9b56:	682b      	ldr	r3, [r5, #0]
    9b58:	2b00      	cmp	r3, #0
    9b5a:	d0fb      	beq.n	9b54 <_isatty_r+0x14>
    9b5c:	6023      	str	r3, [r4, #0]
    9b5e:	bd38      	pop	{r3, r4, r5, pc}
    9b60:	2000205c 	.word	0x2000205c
    9b64:	00000000 	.word	0x00000000

00009b68 <___reboot_Teensyduino__veneer>:
    9b68:	f85f f000 	ldr.w	pc, [pc]	; 9b6c <___reboot_Teensyduino__veneer+0x4>
    9b6c:	60001f09 	.word	0x60001f09

00009b70 <___init_veneer>:
    9b70:	f85f f000 	ldr.w	pc, [pc]	; 9b74 <___init_veneer+0x4>
    9b74:	60001fb1 	.word	0x60001fb1

00009b78 <___ZN7TwoWire5beginEv_veneer>:
    9b78:	f85f f000 	ldr.w	pc, [pc]	; 9b7c <___ZN7TwoWire5beginEv_veneer+0x4>
    9b7c:	60001789 	.word	0x60001789

Disassembly of section .fini:

00009b80 <_fini>:
    9b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b82:	bf00      	nop
