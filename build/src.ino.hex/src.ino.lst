
C:\Users\Kent4\Projects\Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f9d0 	bl	600017d0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f97c 	bl	600017e0 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fb9e 	bl	60001c5c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fd41 	bl	60001fb8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f9ac 	bl	600018d8 <configure_external_ram>
	analog_init();
60001580:	f000 fcd0 	bl	60001f24 <analog_init>
	pwm_init();
60001584:	f000 fd10 	bl	60001fa8 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fb96 	bl	60001cb8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f922 	bl	600017d4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fc27 	bl	60001de8 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f91b 	bl	600017dc <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f917 	bl	600017d8 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fced 	bl	60001f88 <____libc_init_array_veneer>
	main();
600015ae:	f000 fcf3 	bl	60001f98 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000a288 	.word	0x0000a288
600015c0:	600021fc 	.word	0x600021fc
600015c4:	00000000 	.word	0x00000000
600015c8:	20001ac0 	.word	0x20001ac0
600015cc:	6000c488 	.word	0x6000c488
600015d0:	20000000 	.word	0x20000000
600015d4:	20003620 	.word	0x20003620
600015d8:	20001ac0 	.word	0x20001ac0
600015dc:	20001800 	.word	0x20001800
600015e0:	00003be1 	.word	0x00003be1
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000020cd 	.word	0x000020cd
600015f4:	200035b8 	.word	0x200035b8
600015f8:	000020d1 	.word	0x000020d1
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	200035bc 	.word	0x200035bc
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001654:	6943      	ldr	r3, [r0, #20]
60001656:	4a0a      	ldr	r2, [pc, #40]	; (60001680 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001658:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000165c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165e:	7a03      	ldrb	r3, [r0, #8]
60001660:	4c08      	ldr	r4, [pc, #32]	; (60001684 <TwoWire::configSDApin(unsigned char)+0x30>)
60001662:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001666:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000166c:	68c2      	ldr	r2, [r0, #12]
6000166e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001670:	6903      	ldr	r3, [r0, #16]
60001672:	b10b      	cbz	r3, 60001678 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001674:	6942      	ldr	r2, [r0, #20]
60001676:	601a      	str	r2, [r3, #0]
	}
}
60001678:	f85d 4b04 	ldr.w	r4, [sp], #4
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop
60001680:	200008c8 	.word	0x200008c8
60001684:	0001f861 	.word	0x0001f861

60001688 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	7e02      	ldrb	r2, [r0, #24]
6000168c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001690:	f892 c008 	ldrb.w	ip, [r2, #8]
60001694:	458c      	cmp	ip, r1
60001696:	d01c      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001698:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000169a:	2aff      	cmp	r2, #255	; 0xff
6000169c:	d019      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000169e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016a0:	b510      	push	{r4, lr}
600016a2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016a4:	d016      	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016a6:	7e1a      	ldrb	r2, [r3, #24]
600016a8:	2aff      	cmp	r2, #255	; 0xff
600016aa:	d006      	beq.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016ac:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
600016b2:	6812      	ldr	r2, [r2, #0]
600016b4:	421a      	tst	r2, r3
600016b6:	d101      	bne.n	600016bc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016b8:	7621      	strb	r1, [r4, #24]
}
600016ba:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016bc:	4b06      	ldr	r3, [pc, #24]	; (600016d8 <TwoWire::setSDA(unsigned char)+0x50>)
600016be:	2205      	movs	r2, #5
		configSDApin(newindex);
600016c0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016c6:	685b      	ldr	r3, [r3, #4]
600016c8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ca:	f7ff ffc3 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ce:	7621      	strb	r1, [r4, #24]
600016d0:	e7f3      	b.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016d2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016d4:	2100      	movs	r1, #0
600016d6:	e7ea      	b.n	600016ae <TwoWire::setSDA(unsigned char)+0x26>
600016d8:	200008c8 	.word	0x200008c8

600016dc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	4a0a      	ldr	r2, [pc, #40]	; (60001708 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e0:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e4:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
600016ea:	4c08      	ldr	r4, [pc, #32]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x30>)
600016ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f0:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
600016f8:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
600016fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
600016fc:	b10b      	cbz	r3, 60001702 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
600016fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001700:	601a      	str	r2, [r3, #0]
	}
}
60001702:	f85d 4b04 	ldr.w	r4, [sp], #4
60001706:	4770      	bx	lr
60001708:	200008c8 	.word	0x200008c8
6000170c:	0001f861 	.word	0x0001f861

60001710 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001710:	6943      	ldr	r3, [r0, #20]
60001712:	7e42      	ldrb	r2, [r0, #25]
60001714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001718:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000171c:	458c      	cmp	ip, r1
6000171e:	d01e      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001720:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001724:	2aff      	cmp	r2, #255	; 0xff
60001726:	d01a      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001728:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000172a:	b510      	push	{r4, lr}
6000172c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000172e:	d017      	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001734:	2aff      	cmp	r2, #255	; 0xff
60001736:	d006      	beq.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
60001738:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000173e:	6812      	ldr	r2, [r2, #0]
60001740:	421a      	tst	r2, r3
60001742:	d101      	bne.n	60001748 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001744:	7661      	strb	r1, [r4, #25]
}
60001746:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001748:	4b06      	ldr	r3, [pc, #24]	; (60001764 <TwoWire::setSCL(unsigned char)+0x54>)
6000174a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000174c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001752:	685b      	ldr	r3, [r3, #4]
60001754:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001756:	f7ff ffc1 	bl	600016dc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175a:	7661      	strb	r1, [r4, #25]
6000175c:	e7f3      	b.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
6000175e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001760:	2100      	movs	r1, #0
60001762:	e7ea      	b.n	6000173a <TwoWire::setSCL(unsigned char)+0x2a>
60001764:	200008c8 	.word	0x200008c8

60001768 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001768:	4916      	ldr	r1, [pc, #88]	; (600017c4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000176e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001776:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001778:	638b      	str	r3, [r1, #56]	; 0x38
{
6000177a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000177c:	4d12      	ldr	r5, [pc, #72]	; (600017c8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000177e:	e9d2 1300 	ldrd	r1, r3, [r2]
60001782:	680a      	ldr	r2, [r1, #0]
60001784:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
60001786:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001788:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000178a:	2202      	movs	r2, #2
	port->MCR = 0;
6000178c:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
6000178e:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001790:	4a0e      	ldr	r2, [pc, #56]	; (600017cc <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001792:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001794:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001796:	2201      	movs	r2, #1
60001798:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000179c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017a0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017a2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017a8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017aa:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ac:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ae:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017b0:	7e01      	ldrb	r1, [r0, #24]
600017b2:	f7ff ff4f 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017b6:	7e61      	ldrb	r1, [r4, #25]
600017b8:	4620      	mov	r0, r4
}
600017ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017be:	f7ff bf8d 	b.w	600016dc <TwoWire::configSCLpin(unsigned char)>
600017c2:	bf00      	nop
600017c4:	400fc000 	.word	0x400fc000
600017c8:	05050bb8 	.word	0x05050bb8
600017cc:	1928373b 	.word	0x1928373b

600017d0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017d0:	4770      	bx	lr
600017d2:	bf00      	nop

600017d4 <startup_default_middle_hook>:
600017d4:	4770      	bx	lr
600017d6:	bf00      	nop

600017d8 <startup_default_late_hook>:
600017d8:	4770      	bx	lr
600017da:	bf00      	nop

600017dc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017dc:	bf00      	nop
600017de:	4770      	bx	lr

600017e0 <configure_cache>:
{
600017e0:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017e6:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e8:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ea:	482b      	ldr	r0, [pc, #172]	; (60001898 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600017ec:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017fa:	4828      	ldr	r0, [pc, #160]	; (6000189c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001800:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001802:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001806:	4826      	ldr	r0, [pc, #152]	; (600018a0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001808:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000180c:	4a25      	ldr	r2, [pc, #148]	; (600018a4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000180e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001812:	4c25      	ldr	r4, [pc, #148]	; (600018a8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001814:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001818:	4824      	ldr	r0, [pc, #144]	; (600018ac <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001822:	4c23      	ldr	r4, [pc, #140]	; (600018b0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001824:	4823      	ldr	r0, [pc, #140]	; (600018b4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001826:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000182e:	4c22      	ldr	r4, [pc, #136]	; (600018b8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001834:	4821      	ldr	r0, [pc, #132]	; (600018bc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001836:	4a22      	ldr	r2, [pc, #136]	; (600018c0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001838:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000183c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001840:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001844:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000184a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000184c:	481e      	ldr	r0, [pc, #120]	; (600018c8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000184e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001852:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001856:	4a1d      	ldr	r2, [pc, #116]	; (600018cc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000185c:	4c1c      	ldr	r4, [pc, #112]	; (600018d0 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000185e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001862:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001864:	481b      	ldr	r0, [pc, #108]	; (600018d4 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001866:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000186e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001872:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001876:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000187a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000187e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001882:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001886:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000188a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000188e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001892:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001896:	4770      	bx	lr
60001898:	1000003f 	.word	0x1000003f
6000189c:	03080025 	.word	0x03080025
600018a0:	00100009 	.word	0x00100009
600018a4:	20003620 	.word	0x20003620
600018a8:	00200013 	.word	0x00200013
600018ac:	07020021 	.word	0x07020021
600018b0:	20000014 	.word	0x20000014
600018b4:	13080025 	.word	0x13080025
600018b8:	10000009 	.word	0x10000009
600018bc:	20200016 	.word	0x20200016
600018c0:	130b0027 	.word	0x130b0027
600018c4:	40000017 	.word	0x40000017
600018c8:	60000018 	.word	0x60000018
600018cc:	070b002f 	.word	0x070b002f
600018d0:	70000019 	.word	0x70000019
600018d4:	130b002f 	.word	0x130b002f

600018d8 <configure_external_ram>:
{
600018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018da:	4bb8      	ldr	r3, [pc, #736]	; (60001bbc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018dc:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018de:	4eb8      	ldr	r6, [pc, #736]	; (60001bc0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018e2:	4fb8      	ldr	r7, [pc, #736]	; (60001bc4 <configure_external_ram+0x2ec>)
{
600018e4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018e6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ea:	49b7      	ldr	r1, [pc, #732]	; (60001bc8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ec:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	4db6      	ldr	r5, [pc, #728]	; (60001bcc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018f2:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018f6:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fa:	4cb5      	ldr	r4, [pc, #724]	; (60001bd0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018fc:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001900:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001904:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001908:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000190c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001910:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001916:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001918:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000191a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000191c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000191e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000192a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000192e:	4aa9      	ldr	r2, [pc, #676]	; (60001bd4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001930:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001934:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001938:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000193c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001940:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001944:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001946:	4ba4      	ldr	r3, [pc, #656]	; (60001bd8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001948:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000194a:	48a4      	ldr	r0, [pc, #656]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	49a4      	ldr	r1, [pc, #656]	; (60001be0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000194e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001950:	4aa4      	ldr	r2, [pc, #656]	; (60001be4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001952:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001958:	f043 030c 	orr.w	r3, r3, #12
6000195c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001960:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001964:	6803      	ldr	r3, [r0, #0]
60001966:	f043 0302 	orr.w	r3, r3, #2
6000196a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000196c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000196e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001970:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001974:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001976:	4b9c      	ldr	r3, [pc, #624]	; (60001be8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001978:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000197a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000197c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	4c9b      	ldr	r4, [pc, #620]	; (60001bec <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001980:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001982:	4a9b      	ldr	r2, [pc, #620]	; (60001bf0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001988:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000198a:	68c3      	ldr	r3, [r0, #12]
6000198c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001990:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001992:	6a03      	ldr	r3, [r0, #32]
60001994:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001998:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199a:	6a03      	ldr	r3, [r0, #32]
6000199c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000199e:	4a95      	ldr	r2, [pc, #596]	; (60001bf4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019a0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a2:	4c95      	ldr	r4, [pc, #596]	; (60001bf8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019a4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019aa:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019b4:	f043 0301 	orr.w	r3, r3, #1
600019b8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019bc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	498e      	ldr	r1, [pc, #568]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019c6:	f043 0301 	orr.w	r3, r3, #1
600019ca:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ce:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600019d2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019dc:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019de:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e6:	6803      	ldr	r3, [r0, #0]
600019e8:	f023 0302 	bic.w	r3, r3, #2
600019ec:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ee:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f0:	4b83      	ldr	r3, [pc, #524]	; (60001c00 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	4984      	ldr	r1, [pc, #528]	; (60001c04 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f4:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f6:	f843 2b04 	str.w	r2, [r3], #4
600019fa:	428b      	cmp	r3, r1
600019fc:	d1fb      	bne.n	600019f6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fe:	4a77      	ldr	r2, [pc, #476]	; (60001bdc <configure_external_ram+0x304>)
60001a00:	6813      	ldr	r3, [r2, #0]
60001a02:	f043 0301 	orr.w	r3, r3, #1
60001a06:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a08:	6813      	ldr	r3, [r2, #0]
60001a0a:	f013 0301 	ands.w	r3, r3, #1
60001a0e:	d1fb      	bne.n	60001a08 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a10:	487a      	ldr	r0, [pc, #488]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a12:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a14:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a18:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a1a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a20:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a24:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a28:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a30:	4975      	ldr	r1, [pc, #468]	; (60001c08 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a32:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a36:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a3a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a3e:	4873      	ldr	r0, [pc, #460]	; (60001c0c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a40:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a44:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	4c71      	ldr	r4, [pc, #452]	; (60001c10 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a4a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a4e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a52:	4970      	ldr	r1, [pc, #448]	; (60001c14 <configure_external_ram+0x33c>)
60001a54:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a5a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a62:	485e      	ldr	r0, [pc, #376]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	6943      	ldr	r3, [r0, #20]
60001a72:	07da      	lsls	r2, r3, #31
60001a74:	d5fc      	bpl.n	60001a70 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a78:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a7e:	4957      	ldr	r1, [pc, #348]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a80:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a82:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a86:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	694b      	ldr	r3, [r1, #20]
60001a90:	07db      	lsls	r3, r3, #31
60001a92:	d5fc      	bpl.n	60001a8e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a94:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a96:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9c:	4a4f      	ldr	r2, [pc, #316]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a9e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001aa0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aac:	6953      	ldr	r3, [r2, #20]
60001aae:	07df      	lsls	r7, r3, #31
60001ab0:	d5fc      	bpl.n	60001aac <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ab6:	4858      	ldr	r0, [pc, #352]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab8:	4948      	ldr	r1, [pc, #288]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	694b      	ldr	r3, [r1, #20]
60001aca:	07de      	lsls	r6, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001ace:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ad2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ad6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001ad8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ada:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001adc:	4293      	cmp	r3, r2
60001ade:	d165      	bne.n	60001bac <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001ae0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae8:	483c      	ldr	r0, [pc, #240]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001aea:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aee:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af6:	6943      	ldr	r3, [r0, #20]
60001af8:	07dd      	lsls	r5, r3, #31
60001afa:	d5fc      	bpl.n	60001af6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001afc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001afe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b02:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	4a35      	ldr	r2, [pc, #212]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b08:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b0c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b10:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b14:	6953      	ldr	r3, [r2, #20]
60001b16:	07dc      	lsls	r4, r3, #31
60001b18:	d5fc      	bpl.n	60001b14 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b1a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b1c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b24:	492d      	ldr	r1, [pc, #180]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b26:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b28:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b30:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	694b      	ldr	r3, [r1, #20]
60001b36:	07d8      	lsls	r0, r3, #31
60001b38:	d5fc      	bpl.n	60001b34 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4a25      	ldr	r2, [pc, #148]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6953      	ldr	r3, [r2, #20]
60001b56:	07d9      	lsls	r1, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b60:	482d      	ldr	r0, [pc, #180]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	491e      	ldr	r1, [pc, #120]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b64:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b66:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b6a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b72:	694b      	ldr	r3, [r1, #20]
60001b74:	07da      	lsls	r2, r3, #31
60001b76:	d5fc      	bpl.n	60001b72 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b78:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b7c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b80:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b82:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b84:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b86:	4293      	cmp	r3, r2
60001b88:	d050      	beq.n	60001c2c <configure_external_ram+0x354>
60001b8a:	2508      	movs	r5, #8
60001b8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b90:	4922      	ldr	r1, [pc, #136]	; (60001c1c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b92:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001b94:	4b22      	ldr	r3, [pc, #136]	; (60001c20 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b96:	4a23      	ldr	r2, [pc, #140]	; (60001c24 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b98:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001b9a:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b9c:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b9e:	2301      	movs	r3, #1
60001ba0:	4821      	ldr	r0, [pc, #132]	; (60001c28 <configure_external_ram+0x350>)
60001ba2:	4422      	add	r2, r4
60001ba4:	f000 fa0c 	bl	60001fc0 <__sm_set_pool_veneer>
}
60001ba8:	b003      	add	sp, #12
60001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001bac:	4b1e      	ldr	r3, [pc, #120]	; (60001c28 <configure_external_ram+0x350>)
60001bae:	2200      	movs	r2, #0
60001bb0:	e9c3 2200 	strd	r2, r2, [r3]
60001bb4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bb8:	b003      	add	sp, #12
60001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bbc:	401f8000 	.word	0x401f8000
60001bc0:	0001b0f9 	.word	0x0001b0f9
60001bc4:	000110f9 	.word	0x000110f9
60001bc8:	401f8400 	.word	0x401f8400
60001bcc:	000170f9 	.word	0x000170f9
60001bd0:	400fc000 	.word	0x400fc000
60001bd4:	1ffffcff 	.word	0x1ffffcff
60001bd8:	a0000300 	.word	0xa0000300
60001bdc:	402a4000 	.word	0x402a4000
60001be0:	402a8000 	.word	0x402a8000
60001be4:	ffff0012 	.word	0xffff0012
60001be8:	00f737ff 	.word	0x00f737ff
60001bec:	80000040 	.word	0x80000040
60001bf0:	7cf0ff00 	.word	0x7cf0ff00
60001bf4:	830f00ff 	.word	0x830f00ff
60001bf8:	00020063 	.word	0x00020063
60001bfc:	5af05af0 	.word	0x5af05af0
60001c00:	402a4200 	.word	0x402a4200
60001c04:	402a4300 	.word	0x402a4300
60001c08:	3018049f 	.word	0x3018049f
60001c0c:	0a1806eb 	.word	0x0a1806eb
60001c10:	0a180638 	.word	0x0a180638
60001c14:	26013206 	.word	0x26013206
60001c18:	00030004 	.word	0x00030004
60001c1c:	70000000 	.word	0x70000000
60001c20:	70000000 	.word	0x70000000
60001c24:	200035e2 	.word	0x200035e2
60001c28:	20002ae8 	.word	0x20002ae8
	FLEXSPI2_IPCR0 = addr;
60001c2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c34:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c36:	4808      	ldr	r0, [pc, #32]	; (60001c58 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6943      	ldr	r3, [r0, #20]
60001c46:	07db      	lsls	r3, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
60001c4c:	2510      	movs	r5, #16
60001c4e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c52:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c54:	e79c      	b.n	60001b90 <configure_external_ram+0x2b8>
60001c56:	bf00      	nop
60001c58:	402a4000 	.word	0x402a4000

60001c5c <usb_pll_start>:
{
60001c5c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5e:	4a15      	ldr	r2, [pc, #84]	; (60001cb4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c76:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c78:	f013 0f02 	tst.w	r3, #2
60001c7c:	d10e      	bne.n	60001c9c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c82:	d00f      	beq.n	60001ca4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c88:	d00e      	beq.n	60001ca8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c8a:	2b00      	cmp	r3, #0
60001c8c:	daf3      	bge.n	60001c76 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c92:	d10b      	bne.n	60001cac <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c94:	065b      	lsls	r3, r3, #25
60001c96:	d50b      	bpl.n	60001cb0 <usb_pll_start+0x54>
}
60001c98:	bcf0      	pop	{r4, r5, r6, r7}
60001c9a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c9c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c9e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ca0:	6190      	str	r0, [r2, #24]
			continue;
60001ca2:	e7e8      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca4:	6155      	str	r5, [r2, #20]
			continue;
60001ca6:	e7e6      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ca8:	6156      	str	r6, [r2, #20]
			continue;
60001caa:	e7e4      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cac:	6191      	str	r1, [r2, #24]
			continue;
60001cae:	e7e2      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cb0:	6157      	str	r7, [r2, #20]
			continue;
60001cb2:	e7e0      	b.n	60001c76 <usb_pll_start+0x1a>
60001cb4:	400d8000 	.word	0x400d8000

60001cb8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb8:	4a3f      	ldr	r2, [pc, #252]	; (60001db8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cba:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cbc:	493f      	ldr	r1, [pc, #252]	; (60001dbc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cbe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cca:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001dc0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cce:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dc4 <tempmon_init+0x10c>
{
60001cd6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cdc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001ce0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ce4:	4d38      	ldr	r5, [pc, #224]	; (60001dc8 <tempmon_init+0x110>)
60001ce6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce8:	4c38      	ldr	r4, [pc, #224]	; (60001dcc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cea:	4839      	ldr	r0, [pc, #228]	; (60001dd0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cee:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cfc:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d00:	ee07 1a10 	vmov	s14, r1
60001d04:	4b33      	ldr	r3, [pc, #204]	; (60001dd4 <tempmon_init+0x11c>)
60001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d0a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d10:	4931      	ldr	r1, [pc, #196]	; (60001dd8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d12:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d16:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d22:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d26:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d32:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d36:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d3a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d3e:	4827      	ldr	r0, [pc, #156]	; (60001ddc <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d40:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d44:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d48:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d4c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d54:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d58:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d60:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	ee16 3a10 	vmov	r3, s12
60001d6c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d74:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001d78:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d7e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001d86:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001d8a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001d8c:	4914      	ldr	r1, [pc, #80]	; (60001de0 <tempmon_init+0x128>)
60001d8e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001d96:	f043 0302 	orr.w	r3, r3, #2
60001d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001d9e:	4b11      	ldr	r3, [pc, #68]	; (60001de4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001da0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001da4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dac:	2201      	movs	r2, #1
}
60001dae:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001db4:	4770      	bx	lr
60001db6:	bf00      	nop
60001db8:	400d8100 	.word	0x400d8100
60001dbc:	401f4400 	.word	0x401f4400
60001dc0:	42aa0000 	.word	0x42aa0000
60001dc4:	42b40000 	.word	0x42b40000
60001dc8:	200035a8 	.word	0x200035a8
60001dcc:	200035a4 	.word	0x200035a4
60001dd0:	200035ac 	.word	0x200035ac
60001dd4:	200035b0 	.word	0x200035b0
60001dd8:	0fff0000 	.word	0x0fff0000
60001ddc:	e000e400 	.word	0xe000e400
60001de0:	20001800 	.word	0x20001800
60001de4:	00003dbd 	.word	0x00003dbd

60001de8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001de8:	4b31      	ldr	r3, [pc, #196]	; (60001eb0 <usb_init+0xc8>)
60001dea:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001dee:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001df4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001df8:	f000 f8da 	bl	60001fb0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001dfc:	4a2d      	ldr	r2, [pc, #180]	; (60001eb4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001dfe:	492e      	ldr	r1, [pc, #184]	; (60001eb8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e04:	482d      	ldr	r0, [pc, #180]	; (60001ebc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e06:	f043 0303 	orr.w	r3, r3, #3
60001e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e0e:	4b2c      	ldr	r3, [pc, #176]	; (60001ec0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e10:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e14:	6802      	ldr	r2, [r0, #0]
60001e16:	421a      	tst	r2, r3
60001e18:	d103      	bne.n	60001e22 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e1a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e1e:	079a      	lsls	r2, r3, #30
60001e20:	d01b      	beq.n	60001e5a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e22:	4a25      	ldr	r2, [pc, #148]	; (60001eb8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e28:	4b24      	ldr	r3, [pc, #144]	; (60001ebc <usb_init+0xd4>)
60001e2a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e2c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e30:	f043 0302 	orr.w	r3, r3, #2
60001e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e38:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e3c:	079b      	lsls	r3, r3, #30
60001e3e:	d4fb      	bmi.n	60001e38 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e48:	4b1c      	ldr	r3, [pc, #112]	; (60001ebc <usb_init+0xd4>)
60001e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e4e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e52:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e54:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e56:	f000 f89b 	bl	60001f90 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e5a:	4a18      	ldr	r2, [pc, #96]	; (60001ebc <usb_init+0xd4>)
60001e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e60:	4c15      	ldr	r4, [pc, #84]	; (60001eb8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e62:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e64:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e66:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e68:	4b16      	ldr	r3, [pc, #88]	; (60001ec4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001e6a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e6c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e70:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e74:	4618      	mov	r0, r3
60001e76:	f000 f893 	bl	60001fa0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e7e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e80:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e84:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e88:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e8a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001e8e:	641a      	str	r2, [r3, #64]	; 0x40
60001e90:	4b0d      	ldr	r3, [pc, #52]	; (60001ec8 <usb_init+0xe0>)
60001e92:	4a0e      	ldr	r2, [pc, #56]	; (60001ecc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e94:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001e9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ea0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ea4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ea6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001eaa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001eae:	bd10      	pop	{r4, pc}
60001eb0:	400d8000 	.word	0x400d8000
60001eb4:	400fc000 	.word	0x400fc000
60001eb8:	402e0000 	.word	0x402e0000
60001ebc:	400d9000 	.word	0x400d9000
60001ec0:	001e1c00 	.word	0x001e1c00
60001ec4:	20000000 	.word	0x20000000
60001ec8:	20001800 	.word	0x20001800
60001ecc:	00003fa5 	.word	0x00003fa5

60001ed0 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ed0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ed2:	4b0e      	ldr	r3, [pc, #56]	; (60001f0c <_reboot_Teensyduino_+0x3c>)
60001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ed6:	079b      	lsls	r3, r3, #30
60001ed8:	d400      	bmi.n	60001edc <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001eda:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001edc:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ede:	4b0c      	ldr	r3, [pc, #48]	; (60001f10 <_reboot_Teensyduino_+0x40>)
60001ee0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ee2:	4a0c      	ldr	r2, [pc, #48]	; (60001f14 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ee4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ee8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001eec:	490a      	ldr	r1, [pc, #40]	; (60001f18 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001eee:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ef2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ef4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ef6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001efe:	4807      	ldr	r0, [pc, #28]	; (60001f1c <_reboot_Teensyduino_+0x4c>)
60001f00:	4a07      	ldr	r2, [pc, #28]	; (60001f20 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f02:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f04:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f06:	689b      	ldr	r3, [r3, #8]
60001f08:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f0a:	bf00      	nop
60001f0c:	401f4400 	.word	0x401f4400
60001f10:	402e0000 	.word	0x402e0000
60001f14:	400ac000 	.word	0x400ac000
60001f18:	00200003 	.word	0x00200003
60001f1c:	20208000 	.word	0x20208000
60001f20:	eb120000 	.word	0xeb120000

60001f24 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f24:	4b10      	ldr	r3, [pc, #64]	; (60001f68 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f26:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f28:	4a10      	ldr	r2, [pc, #64]	; (60001f6c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f2c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f30:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f32:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f34:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f40:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f42:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f46:	061b      	lsls	r3, r3, #24
60001f48:	d4fc      	bmi.n	60001f44 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f4a:	4a09      	ldr	r2, [pc, #36]	; (60001f70 <analog_init+0x4c>)
60001f4c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f50:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f52:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f54:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f56:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f58:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f5c:	d1fb      	bne.n	60001f56 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f5e:	4a05      	ldr	r2, [pc, #20]	; (60001f74 <analog_init+0x50>)
60001f60:	7013      	strb	r3, [r2, #0]
}
60001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f66:	4770      	bx	lr
60001f68:	400fc000 	.word	0x400fc000
60001f6c:	400c4000 	.word	0x400c4000
60001f70:	400c8000 	.word	0x400c8000
60001f74:	200035e1 	.word	0x200035e1

60001f78 <_init>:
60001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f7a:	bf00      	nop
60001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f7e:	bc08      	pop	{r3}
60001f80:	469e      	mov	lr, r3
60001f82:	4770      	bx	lr
60001f84:	0000      	movs	r0, r0
	...

60001f88 <____libc_init_array_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <____libc_init_array_veneer+0x4>
60001f8c:	000066c5 	.word	0x000066c5

60001f90 <__delay_veneer>:
60001f90:	f85f f000 	ldr.w	pc, [pc]	; 60001f94 <__delay_veneer+0x4>
60001f94:	000033a5 	.word	0x000033a5

60001f98 <__main_veneer>:
60001f98:	f85f f000 	ldr.w	pc, [pc]	; 60001f9c <__main_veneer+0x4>
60001f9c:	00003535 	.word	0x00003535

60001fa0 <__memset_veneer>:
60001fa0:	f85f f000 	ldr.w	pc, [pc]	; 60001fa4 <__memset_veneer+0x4>
60001fa4:	00005fe5 	.word	0x00005fe5

60001fa8 <__pwm_init_veneer>:
60001fa8:	f85f f000 	ldr.w	pc, [pc]	; 60001fac <__pwm_init_veneer+0x4>
60001fac:	00003acd 	.word	0x00003acd

60001fb0 <__usb_init_serialnumber_veneer>:
60001fb0:	f85f f000 	ldr.w	pc, [pc]	; 60001fb4 <__usb_init_serialnumber_veneer+0x4>
60001fb4:	00004715 	.word	0x00004715

60001fb8 <__set_arm_clock_veneer>:
60001fb8:	f85f f000 	ldr.w	pc, [pc]	; 60001fbc <__set_arm_clock_veneer+0x4>
60001fbc:	000030b5 	.word	0x000030b5

60001fc0 <__sm_set_pool_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__sm_set_pool_veneer+0x4>
60001fc4:	00005025 	.word	0x00005025

60001fc8 <__frame_dummy_init_array_entry>:
60001fc8:	00000045 000006a9 00000c61 00001f51     E.......a...Q...
60001fd8:	00002761 000027e1 00002865 000028e9     a'...'..e(...(..
60001fe8:	0000296d 000029f1 00002a75 00002af9     m)...)..u*...*..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    *value = _buffer[0];
      24:	1a1b      	subs	r3, r3, r0
    *value <<= 8;
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    *value |= _buffer[1];
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
  return (int16_t)current.read() * 1.25;
}
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      36:	4770      	bx	lr
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20003550 	.word	0x20003550
      64:	6000ec00 	.word	0x6000ec00

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	4d5f      	ldr	r5, [pc, #380]	; (1ec <setup+0x184>)
      6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    }
    if (_miso != -1) {
      72:	f003 f997 	bl	33a4 <delay>
      76:	4c5e      	ldr	r4, [pc, #376]	; (1f0 <setup+0x188>)
      78:	682e      	ldr	r6, [r5, #0]
}
      7a:	f240 28ee 	movw	r8, #750	; 0x2ee
      7e:	4f5d      	ldr	r7, [pc, #372]	; (1f4 <setup+0x18c>)
      80:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 230 <setup+0x1c8>
      84:	f004 ff1c 	bl	4ec0 <yield>
      88:	7823      	ldrb	r3, [r4, #0]
      8a:	2b00      	cmp	r3, #0
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	d05e      	beq.n	14c <setup+0xe4>
      8e:	783b      	ldrb	r3, [r7, #0]
      90:	07db      	lsls	r3, r3, #31
      92:	d55b      	bpl.n	14c <setup+0xe4>
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	682b      	ldr	r3, [r5, #0]
      96:	f8d9 2000 	ldr.w	r2, [r9]
      9a:	1a9b      	subs	r3, r3, r2
}
      9c:	2b0e      	cmp	r3, #14
      9e:	d955      	bls.n	14c <setup+0xe4>
      a0:	210e      	movs	r1, #14
      a2:	4855      	ldr	r0, [pc, #340]	; (1f8 <setup+0x190>)
      a4:	f004 fe8e 	bl	4dc4 <usb_serial_write>
      a8:	4854      	ldr	r0, [pc, #336]	; (1fc <setup+0x194>)
      aa:	f002 fdaf 	bl	2c0c <Print::println()>

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      ae:	2120      	movs	r1, #32
      b0:	4853      	ldr	r0, [pc, #332]	; (200 <setup+0x198>)
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b2:	f000 fe17 	bl	ce4 <PA12::begin(int)>
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
      b6:	2064      	movs	r0, #100	; 0x64
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      b8:	f003 f974 	bl	33a4 <delay>
      bc:	4850      	ldr	r0, [pc, #320]	; (200 <setup+0x198>)
      be:	f000 fe67 	bl	d90 <PA12::available()>
      c2:	2115      	movs	r1, #21
      c4:	4604      	mov	r4, r0
      c6:	2800      	cmp	r0, #0
      c8:	d04d      	beq.n	166 <setup+0xfe>
      ca:	484e      	ldr	r0, [pc, #312]	; (204 <setup+0x19c>)
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	f004 fe7a 	bl	4dc4 <usb_serial_write>
}
      d0:	484a      	ldr	r0, [pc, #296]	; (1fc <setup+0x194>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	f002 fd9b 	bl	2c0c <Print::println()>
      d6:	f240 22ee 	movw	r2, #750	; 0x2ee
      da:	2100      	movs	r1, #0
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      dc:	4848      	ldr	r0, [pc, #288]	; (200 <setup+0x198>)
      de:	f001 f885 	bl	11ec <PA12::movingSpeed(int, int)>
      e2:	2100      	movs	r1, #0
      e4:	4846      	ldr	r0, [pc, #280]	; (200 <setup+0x198>)
      e6:	f001 f89b 	bl	1220 <PA12::presentPosition(int)>
      ea:	4a47      	ldr	r2, [pc, #284]	; (208 <setup+0x1a0>)
      ec:	2140      	movs	r1, #64	; 0x40
      ee:	4847      	ldr	r0, [pc, #284]	; (20c <setup+0x1a4>)
      f0:	f001 f90a 	bl	1308 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      f4:	200a      	movs	r0, #10
      f6:	f003 f955 	bl	33a4 <delay>
      fa:	4844      	ldr	r0, [pc, #272]	; (20c <setup+0x1a4>)
      fc:	f001 f9b0 	bl	1460 <Adafruit_INA260::conversionReady()>
     100:	2800      	cmp	r0, #0
     102:	d04c      	beq.n	19e <setup+0x136>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	210c      	movs	r1, #12
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4842      	ldr	r0, [pc, #264]	; (210 <setup+0x1a8>)
     108:	f004 fe5c 	bl	4dc4 <usb_serial_write>
     10c:	483b      	ldr	r0, [pc, #236]	; (1fc <setup+0x194>)
     10e:	f002 fd7d 	bl	2c0c <Print::println()>
	if (newbuffer) {
     112:	2164      	movs	r1, #100	; 0x64
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	483f      	ldr	r0, [pc, #252]	; (214 <setup+0x1ac>)
		capacity = maxStrLen;
     116:	f001 ff41 	bl	1f9c <Adafruit_MCP4725::begin(unsigned char)>
		return 1;
     11a:	200a      	movs	r0, #10
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	f003 f942 	bl	33a4 <delay>
     120:	4b3d      	ldr	r3, [pc, #244]	; (218 <setup+0x1b0>)
     122:	2200      	movs	r2, #0
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	483b      	ldr	r0, [pc, #236]	; (214 <setup+0x1ac>)
	mask = p->mask;
     126:	8819      	ldrh	r1, [r3, #0]
	pinmode = *(p->reg + 1);
     128:	f001 ff40 	bl	1fac <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	if (pinmode & mask) {
     12c:	2109      	movs	r1, #9
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	483b      	ldr	r0, [pc, #236]	; (21c <setup+0x1b4>)
     130:	f004 fe48 	bl	4dc4 <usb_serial_write>
	mask = p->mask;
     134:	4831      	ldr	r0, [pc, #196]	; (1fc <setup+0x194>)
	if (pinmode & mask) {
     136:	f002 fd69 	bl	2c0c <Print::println()>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	210e      	movs	r1, #14
     13c:	4838      	ldr	r0, [pc, #224]	; (220 <setup+0x1b8>)
     13e:	f004 fe41 	bl	4dc4 <usb_serial_write>
     142:	482e      	ldr	r0, [pc, #184]	; (1fc <setup+0x194>)
     144:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     148:	f002 bd60 	b.w	2c0c <Print::println()>
     14c:	682b      	ldr	r3, [r5, #0]
     14e:	7822      	ldrb	r2, [r4, #0]
     150:	1b9b      	subs	r3, r3, r6
     152:	b12a      	cbz	r2, 160 <setup+0xf8>
     154:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     158:	d8a2      	bhi.n	a0 <setup+0x38>
     15a:	f004 feb1 	bl	4ec0 <yield>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	e791      	b.n	84 <setup+0x1c>
     160:	4543      	cmp	r3, r8
     162:	d9fa      	bls.n	15a <setup+0xf2>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     164:	e79c      	b.n	a0 <setup+0x38>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     166:	482f      	ldr	r0, [pc, #188]	; (224 <setup+0x1bc>)
     168:	f004 fe2c 	bl	4dc4 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     16c:	4823      	ldr	r0, [pc, #140]	; (1fc <setup+0x194>)
     16e:	f002 fd4d 	bl	2c0c <Print::println()>
    myServo.movingSpeed(LA_ID_NUM, 750);
     172:	f240 22ee 	movw	r2, #750	; 0x2ee
     176:	4822      	ldr	r0, [pc, #136]	; (200 <setup+0x198>)
     178:	4621      	mov	r1, r4
     17a:	f001 f837 	bl	11ec <PA12::movingSpeed(int, int)>
    int pos = myServo.presentPosition(LA_ID_NUM);
     17e:	4621      	mov	r1, r4
     180:	481f      	ldr	r0, [pc, #124]	; (200 <setup+0x198>)
     182:	f001 f84d 	bl	1220 <PA12::presentPosition(int)>
    ina260.begin(0x40);
     186:	4a20      	ldr	r2, [pc, #128]	; (208 <setup+0x1a0>)
     188:	2140      	movs	r1, #64	; 0x40
     18a:	4820      	ldr	r0, [pc, #128]	; (20c <setup+0x1a4>)
     18c:	f001 f8bc 	bl	1308 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     190:	200a      	movs	r0, #10
     192:	f003 f907 	bl	33a4 <delay>
    if (ina260.conversionReady()) {
     196:	481d      	ldr	r0, [pc, #116]	; (20c <setup+0x1a4>)
     198:	f001 f962 	bl	1460 <Adafruit_INA260::conversionReady()>
     19c:	bb18      	cbnz	r0, 1e6 <setup+0x17e>
     19e:	210c      	movs	r1, #12
     1a0:	4821      	ldr	r0, [pc, #132]	; (228 <setup+0x1c0>)
     1a2:	f004 fe0f 	bl	4dc4 <usb_serial_write>
     1a6:	4815      	ldr	r0, [pc, #84]	; (1fc <setup+0x194>)
     1a8:	f002 fd30 	bl	2c0c <Print::println()>
    dac.begin(0x64);
     1ac:	2164      	movs	r1, #100	; 0x64
     1ae:	4819      	ldr	r0, [pc, #100]	; (214 <setup+0x1ac>)
     1b0:	f001 fef4 	bl	1f9c <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     1b4:	200a      	movs	r0, #10
     1b6:	f003 f8f5 	bl	33a4 <delay>
    dac.setVoltage(dacValue, false);
     1ba:	4b17      	ldr	r3, [pc, #92]	; (218 <setup+0x1b0>)
     1bc:	2200      	movs	r2, #0
     1be:	4815      	ldr	r0, [pc, #84]	; (214 <setup+0x1ac>)
     1c0:	8819      	ldrh	r1, [r3, #0]
     1c2:	f001 fef3 	bl	1fac <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     1c6:	2109      	movs	r1, #9
     1c8:	4814      	ldr	r0, [pc, #80]	; (21c <setup+0x1b4>)
     1ca:	f004 fdfb 	bl	4dc4 <usb_serial_write>
     1ce:	480b      	ldr	r0, [pc, #44]	; (1fc <setup+0x194>)
     1d0:	f002 fd1c 	bl	2c0c <Print::println()>
     1d4:	210c      	movs	r1, #12
     1d6:	4815      	ldr	r0, [pc, #84]	; (22c <setup+0x1c4>)
     1d8:	f004 fdf4 	bl	4dc4 <usb_serial_write>
     1dc:	4807      	ldr	r0, [pc, #28]	; (1fc <setup+0x194>)
}
     1de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     1e2:	f002 bd13 	b.w	2c0c <Print::println()>
     1e6:	210c      	movs	r1, #12
     1e8:	4809      	ldr	r0, [pc, #36]	; (210 <setup+0x1a8>)
     1ea:	e7da      	b.n	1a2 <setup+0x13a>
     1ec:	200035bc 	.word	0x200035bc
     1f0:	200035ea 	.word	0x200035ea
     1f4:	200035e9 	.word	0x200035e9
     1f8:	20000c4c 	.word	0x20000c4c
     1fc:	20000ee0 	.word	0x20000ee0
     200:	20002b08 	.word	0x20002b08
     204:	20000c5c 	.word	0x20000c5c
     208:	20002078 	.word	0x20002078
     20c:	20002af8 	.word	0x20002af8
     210:	20000cb8 	.word	0x20000cb8
     214:	20002ad0 	.word	0x20002ad0
     218:	200017ae 	.word	0x200017ae
     21c:	20000c84 	.word	0x20000c84
     220:	20000cc8 	.word	0x20000cc8
     224:	20000c90 	.word	0x20000c90
     228:	20000c74 	.word	0x20000c74
     22c:	20000ca8 	.word	0x20000ca8
     230:	200035cc 	.word	0x200035cc

00000234 <PrintOutput()>:

void PrintOutput () {
     234:	b530      	push	{r4, r5, lr}
     236:	2100      	movs	r1, #0
     238:	b08d      	sub	sp, #52	; 0x34
     23a:	4893      	ldr	r0, [pc, #588]	; (488 <PrintOutput()+0x254>)
     23c:	f004 fdc2 	bl	4dc4 <usb_serial_write>
     240:	4892      	ldr	r0, [pc, #584]	; (48c <PrintOutput()+0x258>)
     242:	f002 fce3 	bl	2c0c <Print::println()>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     246:	4992      	ldr	r1, [pc, #584]	; (490 <PrintOutput()+0x25c>)
     248:	a804      	add	r0, sp, #16
     24a:	ac08      	add	r4, sp, #32
     24c:	f002 fda8 	bl	2da0 <String::String(char const*)>
     250:	4b90      	ldr	r3, [pc, #576]	; (494 <PrintOutput()+0x260>)
    Serial.println("");
    Serial.println("Time: \t\t" + PadString(String(millis())));
     252:	220a      	movs	r2, #10
     254:	4668      	mov	r0, sp
     256:	6819      	ldr	r1, [r3, #0]
     258:	f002 fde6 	bl	2e28 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     25c:	9b02      	ldr	r3, [sp, #8]
     25e:	2b07      	cmp	r3, #7
     260:	d812      	bhi.n	288 <PrintOutput()+0x54>
     262:	4d8d      	ldr	r5, [pc, #564]	; (498 <PrintOutput()+0x264>)
     264:	4629      	mov	r1, r5
     266:	4620      	mov	r0, r4
     268:	f002 fd9a 	bl	2da0 <String::String(char const*)>
        str = " " + str;
     26c:	4669      	mov	r1, sp
     26e:	4620      	mov	r0, r4
     270:	f002 fe66 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     274:	4601      	mov	r1, r0
     276:	4668      	mov	r0, sp
     278:	f002 fe0a 	bl	2e90 <String::operator=(String const&)>
class StringSumHelper : public String
     27c:	4620      	mov	r0, r4
     27e:	f002 fd53 	bl	2d28 <String::~String()>
    while (str.length() < 8) {
     282:	9b02      	ldr	r3, [sp, #8]
     284:	2b07      	cmp	r3, #7
     286:	d9ed      	bls.n	264 <PrintOutput()+0x30>
    return str;
     288:	4669      	mov	r1, sp
     28a:	4620      	mov	r0, r4
     28c:	f002 fd36 	bl	2cfc <String::String(String&&)>
    Serial.println("Time: \t\t" + PadString(String(millis())));
     290:	4621      	mov	r1, r4
     292:	a804      	add	r0, sp, #16
     294:	f002 fe54 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     298:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     29a:	487c      	ldr	r0, [pc, #496]	; (48c <PrintOutput()+0x258>)
     29c:	f002 fc90 	bl	2bc0 <Print::print(String const&)>
     2a0:	487a      	ldr	r0, [pc, #488]	; (48c <PrintOutput()+0x258>)
     2a2:	f002 fcb3 	bl	2c0c <Print::println()>
     2a6:	4620      	mov	r0, r4
     2a8:	f002 fd3e 	bl	2d28 <String::~String()>
     2ac:	4668      	mov	r0, sp
     2ae:	f002 fd3b 	bl	2d28 <String::~String()>
     2b2:	a804      	add	r0, sp, #16
     2b4:	f002 fd38 	bl	2d28 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     2b8:	4978      	ldr	r1, [pc, #480]	; (49c <PrintOutput()+0x268>)
     2ba:	a804      	add	r0, sp, #16
     2bc:	f002 fd70 	bl	2da0 <String::String(char const*)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     2c0:	4b77      	ldr	r3, [pc, #476]	; (4a0 <PrintOutput()+0x26c>)
     2c2:	220a      	movs	r2, #10
     2c4:	4668      	mov	r0, sp
     2c6:	8819      	ldrh	r1, [r3, #0]
     2c8:	f002 fd7e 	bl	2dc8 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     2cc:	9b02      	ldr	r3, [sp, #8]
     2ce:	2b07      	cmp	r3, #7
     2d0:	d812      	bhi.n	2f8 <PrintOutput()+0xc4>
     2d2:	4d71      	ldr	r5, [pc, #452]	; (498 <PrintOutput()+0x264>)
     2d4:	4629      	mov	r1, r5
     2d6:	4620      	mov	r0, r4
     2d8:	f002 fd62 	bl	2da0 <String::String(char const*)>
        str = " " + str;
     2dc:	4669      	mov	r1, sp
     2de:	4620      	mov	r0, r4
     2e0:	f002 fe2e 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     2e4:	4601      	mov	r1, r0
     2e6:	4668      	mov	r0, sp
     2e8:	f002 fdd2 	bl	2e90 <String::operator=(String const&)>
class StringSumHelper : public String
     2ec:	4620      	mov	r0, r4
     2ee:	f002 fd1b 	bl	2d28 <String::~String()>
    while (str.length() < 8) {
     2f2:	9b02      	ldr	r3, [sp, #8]
     2f4:	2b07      	cmp	r3, #7
     2f6:	d9ed      	bls.n	2d4 <PrintOutput()+0xa0>
    return str;
     2f8:	4669      	mov	r1, sp
     2fa:	4620      	mov	r0, r4
     2fc:	f002 fcfe 	bl	2cfc <String::String(String&&)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     300:	4621      	mov	r1, r4
     302:	a804      	add	r0, sp, #16
     304:	f002 fe1c 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     308:	4601      	mov	r1, r0
     30a:	4860      	ldr	r0, [pc, #384]	; (48c <PrintOutput()+0x258>)
     30c:	f002 fc58 	bl	2bc0 <Print::print(String const&)>
     310:	485e      	ldr	r0, [pc, #376]	; (48c <PrintOutput()+0x258>)
     312:	f002 fc7b 	bl	2c0c <Print::println()>
     316:	4620      	mov	r0, r4
     318:	f002 fd06 	bl	2d28 <String::~String()>
     31c:	4668      	mov	r0, sp
     31e:	f002 fd03 	bl	2d28 <String::~String()>
     322:	a804      	add	r0, sp, #16
     324:	f002 fd00 	bl	2d28 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     328:	495e      	ldr	r1, [pc, #376]	; (4a4 <PrintOutput()+0x270>)
     32a:	a804      	add	r0, sp, #16
     32c:	f002 fd38 	bl	2da0 <String::String(char const*)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     330:	485d      	ldr	r0, [pc, #372]	; (4a8 <PrintOutput()+0x274>)
     332:	f001 f87d 	bl	1430 <Adafruit_INA260::readPower()>
     336:	2102      	movs	r1, #2
     338:	4668      	mov	r0, sp
     33a:	f002 fd8d 	bl	2e58 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     33e:	9b02      	ldr	r3, [sp, #8]
     340:	2b07      	cmp	r3, #7
     342:	d812      	bhi.n	36a <PrintOutput()+0x136>
     344:	4d54      	ldr	r5, [pc, #336]	; (498 <PrintOutput()+0x264>)
     346:	4629      	mov	r1, r5
     348:	4620      	mov	r0, r4
     34a:	f002 fd29 	bl	2da0 <String::String(char const*)>
        str = " " + str;
     34e:	4669      	mov	r1, sp
     350:	4620      	mov	r0, r4
     352:	f002 fdf5 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     356:	4601      	mov	r1, r0
     358:	4668      	mov	r0, sp
     35a:	f002 fd99 	bl	2e90 <String::operator=(String const&)>
class StringSumHelper : public String
     35e:	4620      	mov	r0, r4
     360:	f002 fce2 	bl	2d28 <String::~String()>
    while (str.length() < 8) {
     364:	9b02      	ldr	r3, [sp, #8]
     366:	2b07      	cmp	r3, #7
     368:	d9ed      	bls.n	346 <PrintOutput()+0x112>
    return str;
     36a:	4669      	mov	r1, sp
     36c:	4620      	mov	r0, r4
     36e:	f002 fcc5 	bl	2cfc <String::String(String&&)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     372:	4621      	mov	r1, r4
     374:	a804      	add	r0, sp, #16
     376:	f002 fde3 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     37a:	4601      	mov	r1, r0
     37c:	4843      	ldr	r0, [pc, #268]	; (48c <PrintOutput()+0x258>)
     37e:	f002 fc1f 	bl	2bc0 <Print::print(String const&)>
     382:	4842      	ldr	r0, [pc, #264]	; (48c <PrintOutput()+0x258>)
     384:	f002 fc42 	bl	2c0c <Print::println()>
     388:	4620      	mov	r0, r4
     38a:	f002 fccd 	bl	2d28 <String::~String()>
     38e:	4668      	mov	r0, sp
     390:	f002 fcca 	bl	2d28 <String::~String()>
     394:	a804      	add	r0, sp, #16
     396:	f002 fcc7 	bl	2d28 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     39a:	4944      	ldr	r1, [pc, #272]	; (4ac <PrintOutput()+0x278>)
     39c:	a804      	add	r0, sp, #16
     39e:	f002 fcff 	bl	2da0 <String::String(char const*)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     3a2:	4841      	ldr	r0, [pc, #260]	; (4a8 <PrintOutput()+0x274>)
     3a4:	f001 f82a 	bl	13fc <Adafruit_INA260::readBusVoltage()>
     3a8:	2102      	movs	r1, #2
     3aa:	4668      	mov	r0, sp
     3ac:	f002 fd54 	bl	2e58 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     3b0:	9b02      	ldr	r3, [sp, #8]
     3b2:	2b07      	cmp	r3, #7
     3b4:	d812      	bhi.n	3dc <PrintOutput()+0x1a8>
     3b6:	4d38      	ldr	r5, [pc, #224]	; (498 <PrintOutput()+0x264>)
     3b8:	4629      	mov	r1, r5
     3ba:	4620      	mov	r0, r4
     3bc:	f002 fcf0 	bl	2da0 <String::String(char const*)>
        str = " " + str;
     3c0:	4669      	mov	r1, sp
     3c2:	4620      	mov	r0, r4
     3c4:	f002 fdbc 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     3c8:	4601      	mov	r1, r0
     3ca:	4668      	mov	r0, sp
     3cc:	f002 fd60 	bl	2e90 <String::operator=(String const&)>
class StringSumHelper : public String
     3d0:	4620      	mov	r0, r4
     3d2:	f002 fca9 	bl	2d28 <String::~String()>
    while (str.length() < 8) {
     3d6:	9b02      	ldr	r3, [sp, #8]
     3d8:	2b07      	cmp	r3, #7
     3da:	d9ed      	bls.n	3b8 <PrintOutput()+0x184>
    return str;
     3dc:	4669      	mov	r1, sp
     3de:	4620      	mov	r0, r4
     3e0:	f002 fc8c 	bl	2cfc <String::String(String&&)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     3e4:	4621      	mov	r1, r4
     3e6:	a804      	add	r0, sp, #16
     3e8:	f002 fdaa 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     3ec:	4601      	mov	r1, r0
     3ee:	4827      	ldr	r0, [pc, #156]	; (48c <PrintOutput()+0x258>)
     3f0:	f002 fbe6 	bl	2bc0 <Print::print(String const&)>
     3f4:	4825      	ldr	r0, [pc, #148]	; (48c <PrintOutput()+0x258>)
     3f6:	f002 fc09 	bl	2c0c <Print::println()>
     3fa:	4620      	mov	r0, r4
     3fc:	f002 fc94 	bl	2d28 <String::~String()>
     400:	4668      	mov	r0, sp
     402:	f002 fc91 	bl	2d28 <String::~String()>
     406:	a804      	add	r0, sp, #16
     408:	f002 fc8e 	bl	2d28 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     40c:	4928      	ldr	r1, [pc, #160]	; (4b0 <PrintOutput()+0x27c>)
     40e:	a804      	add	r0, sp, #16
     410:	f002 fcc6 	bl	2da0 <String::String(char const*)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     414:	2100      	movs	r1, #0
     416:	4827      	ldr	r0, [pc, #156]	; (4b4 <PrintOutput()+0x280>)
     418:	f000 ff02 	bl	1220 <PA12::presentPosition(int)>
     41c:	220a      	movs	r2, #10
     41e:	4601      	mov	r1, r0
     420:	4668      	mov	r0, sp
     422:	f002 fcd1 	bl	2dc8 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     426:	9b02      	ldr	r3, [sp, #8]
     428:	2b07      	cmp	r3, #7
     42a:	d812      	bhi.n	452 <PrintOutput()+0x21e>
     42c:	4d1a      	ldr	r5, [pc, #104]	; (498 <PrintOutput()+0x264>)
     42e:	4629      	mov	r1, r5
     430:	4620      	mov	r0, r4
     432:	f002 fcb5 	bl	2da0 <String::String(char const*)>
        str = " " + str;
     436:	4669      	mov	r1, sp
     438:	4620      	mov	r0, r4
     43a:	f002 fd81 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     43e:	4601      	mov	r1, r0
     440:	4668      	mov	r0, sp
     442:	f002 fd25 	bl	2e90 <String::operator=(String const&)>
class StringSumHelper : public String
     446:	4620      	mov	r0, r4
     448:	f002 fc6e 	bl	2d28 <String::~String()>
    while (str.length() < 8) {
     44c:	9b02      	ldr	r3, [sp, #8]
     44e:	2b07      	cmp	r3, #7
     450:	d9ed      	bls.n	42e <PrintOutput()+0x1fa>
    return str;
     452:	4669      	mov	r1, sp
     454:	4620      	mov	r0, r4
     456:	f002 fc51 	bl	2cfc <String::String(String&&)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     45a:	4621      	mov	r1, r4
     45c:	a804      	add	r0, sp, #16
     45e:	f002 fd6f 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     462:	4601      	mov	r1, r0
     464:	4809      	ldr	r0, [pc, #36]	; (48c <PrintOutput()+0x258>)
     466:	f002 fbab 	bl	2bc0 <Print::print(String const&)>
     46a:	4808      	ldr	r0, [pc, #32]	; (48c <PrintOutput()+0x258>)
     46c:	f002 fbce 	bl	2c0c <Print::println()>
     470:	4620      	mov	r0, r4
     472:	f002 fc59 	bl	2d28 <String::~String()>
     476:	4668      	mov	r0, sp
     478:	f002 fc56 	bl	2d28 <String::~String()>
     47c:	a804      	add	r0, sp, #16
     47e:	f002 fc53 	bl	2d28 <String::~String()>
}
     482:	b00d      	add	sp, #52	; 0x34
     484:	bd30      	pop	{r4, r5, pc}
     486:	bf00      	nop
     488:	20000390 	.word	0x20000390
     48c:	20000ee0 	.word	0x20000ee0
     490:	20000388 	.word	0x20000388
     494:	200035bc 	.word	0x200035bc
     498:	200003f8 	.word	0x200003f8
     49c:	20000394 	.word	0x20000394
     4a0:	200017ae 	.word	0x200017ae
     4a4:	2000039c 	.word	0x2000039c
     4a8:	20002af8 	.word	0x20002af8
     4ac:	200003a8 	.word	0x200003a8
     4b0:	200003b4 	.word	0x200003b4
     4b4:	20002b08 	.word	0x20002b08

000004b8 <getCommand(String)>:

Command getCommand (String command) {
     4b8:	b510      	push	{r4, lr}
     4ba:	b084      	sub	sp, #16
     4bc:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
     4be:	4913      	ldr	r1, [pc, #76]	; (50c <getCommand(String)+0x54>)
     4c0:	4668      	mov	r0, sp
     4c2:	f002 fc6d 	bl	2da0 <String::String(char const*)>
    Serial.println("Comman:" + command);
     4c6:	4621      	mov	r1, r4
     4c8:	4668      	mov	r0, sp
     4ca:	f002 fd39 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     4ce:	4601      	mov	r1, r0
     4d0:	480f      	ldr	r0, [pc, #60]	; (510 <getCommand(String)+0x58>)
     4d2:	f002 fb75 	bl	2bc0 <Print::print(String const&)>
     4d6:	480e      	ldr	r0, [pc, #56]	; (510 <getCommand(String)+0x58>)
     4d8:	f002 fb98 	bl	2c0c <Print::println()>
class StringSumHelper : public String
     4dc:	4668      	mov	r0, sp
     4de:	f002 fc23 	bl	2d28 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     4e2:	490c      	ldr	r1, [pc, #48]	; (514 <getCommand(String)+0x5c>)
     4e4:	4620      	mov	r0, r4
     4e6:	f002 fd33 	bl	2f50 <String::equals(char const*) const>

    if (command == "setDac") {
     4ea:	b110      	cbz	r0, 4f2 <getCommand(String)+0x3a>
        return Command::SETDAC;
     4ec:	2001      	movs	r0, #1
    } else if (command.toLowerCase() == "setla") {
        return Command::SETLA;
    } else {
        return Command::INVALID;
    }
}
     4ee:	b004      	add	sp, #16
     4f0:	bd10      	pop	{r4, pc}
    } else if (command.toLowerCase() == "setla") {
     4f2:	4620      	mov	r0, r4
     4f4:	f002 fdc8 	bl	3088 <String::toLowerCase()>
     4f8:	4907      	ldr	r1, [pc, #28]	; (518 <getCommand(String)+0x60>)
     4fa:	f002 fd29 	bl	2f50 <String::equals(char const*) const>
     4fe:	3800      	subs	r0, #0
     500:	bf18      	it	ne
     502:	2001      	movne	r0, #1
     504:	0040      	lsls	r0, r0, #1
}
     506:	b004      	add	sp, #16
     508:	bd10      	pop	{r4, pc}
     50a:	bf00      	nop
     50c:	20000370 	.word	0x20000370
     510:	20000ee0 	.word	0x20000ee0
     514:	20000378 	.word	0x20000378
     518:	20000380 	.word	0x20000380

0000051c <ProcessCommand(String)>:

void ProcessCommand (String serialInput) {
     51c:	b530      	push	{r4, r5, lr}
     51e:	b08d      	sub	sp, #52	; 0x34
     520:	4604      	mov	r4, r0
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     522:	493e      	ldr	r1, [pc, #248]	; (61c <ProcessCommand(String)+0x100>)
     524:	a804      	add	r0, sp, #16
     526:	f002 fc3b 	bl	2da0 <String::String(char const*)>
     52a:	a904      	add	r1, sp, #16
     52c:	4620      	mov	r0, r4
     52e:	f002 fd41 	bl	2fb4 <String::indexOf(String const&) const>
     532:	2200      	movs	r2, #0
     534:	4603      	mov	r3, r0
     536:	4621      	mov	r1, r4
     538:	a808      	add	r0, sp, #32
     53a:	f002 fd79 	bl	3030 <String::substring(unsigned int, unsigned int) const>
     53e:	a808      	add	r0, sp, #32
     540:	f7ff ffba 	bl	4b8 <getCommand(String)>
     544:	4605      	mov	r5, r0
     546:	a808      	add	r0, sp, #32
     548:	f002 fbee 	bl	2d28 <String::~String()>
     54c:	a804      	add	r0, sp, #16
     54e:	f002 fbeb 	bl	2d28 <String::~String()>
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     552:	4932      	ldr	r1, [pc, #200]	; (61c <ProcessCommand(String)+0x100>)
     554:	a808      	add	r0, sp, #32
     556:	f002 fc23 	bl	2da0 <String::String(char const*)>
     55a:	a908      	add	r1, sp, #32
     55c:	4620      	mov	r0, r4
     55e:	f002 fd29 	bl	2fb4 <String::indexOf(String const&) const>
     562:	4621      	mov	r1, r4
     564:	1c42      	adds	r2, r0, #1
     566:	4668      	mov	r0, sp
     568:	f002 fd36 	bl	2fd8 <String::substring(unsigned int) const>
     56c:	a808      	add	r0, sp, #32
     56e:	f002 fbdb 	bl	2d28 <String::~String()>

    switch (command) {
     572:	2d01      	cmp	r5, #1
     574:	d007      	beq.n	586 <ProcessCommand(String)+0x6a>
     576:	2d02      	cmp	r5, #2
     578:	d03a      	beq.n	5f0 <ProcessCommand(String)+0xd4>
     57a:	b36d      	cbz	r5, 5d8 <ProcessCommand(String)+0xbc>
        case Command::SETLA:
            myServo.goalPosition(LA_ID_NUM, args.toInt());
            Serial.println("Linear Actuator set to " + String(args.toInt()));
            break;
    }
     57c:	4668      	mov	r0, sp
     57e:	f002 fbd3 	bl	2d28 <String::~String()>
     582:	b00d      	add	sp, #52	; 0x34
     584:	bd30      	pop	{r4, r5, pc}
            dacValue = args.toInt();
     586:	4668      	mov	r0, sp
     588:	4c25      	ldr	r4, [pc, #148]	; (620 <ProcessCommand(String)+0x104>)
     58a:	f002 fd8d 	bl	30a8 <String::toInt() const>
            dac.setVoltage(dacValue, false);
     58e:	2200      	movs	r2, #0
            dacValue = args.toInt();
     590:	b281      	uxth	r1, r0
            dac.setVoltage(dacValue, false);
     592:	4824      	ldr	r0, [pc, #144]	; (624 <ProcessCommand(String)+0x108>)
            dacValue = args.toInt();
     594:	8021      	strh	r1, [r4, #0]
            dac.setVoltage(dacValue, false);
     596:	f001 fd09 	bl	1fac <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	StringSumHelper(const char *p) : String(p) {}
     59a:	4923      	ldr	r1, [pc, #140]	; (628 <ProcessCommand(String)+0x10c>)
     59c:	a808      	add	r0, sp, #32
     59e:	f002 fbff 	bl	2da0 <String::String(char const*)>
            Serial.println("DAC set to " + String(dacValue));
     5a2:	220a      	movs	r2, #10
     5a4:	8821      	ldrh	r1, [r4, #0]
     5a6:	a804      	add	r0, sp, #16
     5a8:	f002 fc0e 	bl	2dc8 <String::String(int, unsigned char)>
            Serial.println("Linear Actuator set to " + String(args.toInt()));
     5ac:	a904      	add	r1, sp, #16
     5ae:	a808      	add	r0, sp, #32
     5b0:	f002 fcc6 	bl	2f40 <operator+(StringSumHelper const&, String const&)>
     5b4:	4601      	mov	r1, r0
     5b6:	481d      	ldr	r0, [pc, #116]	; (62c <ProcessCommand(String)+0x110>)
     5b8:	f002 fb02 	bl	2bc0 <Print::print(String const&)>
     5bc:	481b      	ldr	r0, [pc, #108]	; (62c <ProcessCommand(String)+0x110>)
     5be:	f002 fb25 	bl	2c0c <Print::println()>
     5c2:	a804      	add	r0, sp, #16
     5c4:	f002 fbb0 	bl	2d28 <String::~String()>
class StringSumHelper : public String
     5c8:	a808      	add	r0, sp, #32
     5ca:	f002 fbad 	bl	2d28 <String::~String()>
     5ce:	4668      	mov	r0, sp
     5d0:	f002 fbaa 	bl	2d28 <String::~String()>
     5d4:	b00d      	add	sp, #52	; 0x34
     5d6:	bd30      	pop	{r4, r5, pc}
     5d8:	210f      	movs	r1, #15
     5da:	4815      	ldr	r0, [pc, #84]	; (630 <ProcessCommand(String)+0x114>)
     5dc:	f004 fbf2 	bl	4dc4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     5e0:	4812      	ldr	r0, [pc, #72]	; (62c <ProcessCommand(String)+0x110>)
     5e2:	f002 fb13 	bl	2c0c <Print::println()>
     5e6:	4668      	mov	r0, sp
     5e8:	f002 fb9e 	bl	2d28 <String::~String()>
     5ec:	b00d      	add	sp, #52	; 0x34
     5ee:	bd30      	pop	{r4, r5, pc}
            myServo.goalPosition(LA_ID_NUM, args.toInt());
     5f0:	4668      	mov	r0, sp
     5f2:	f002 fd59 	bl	30a8 <String::toInt() const>
     5f6:	2100      	movs	r1, #0
     5f8:	4602      	mov	r2, r0
     5fa:	480e      	ldr	r0, [pc, #56]	; (634 <ProcessCommand(String)+0x118>)
     5fc:	f000 fddc 	bl	11b8 <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     600:	490d      	ldr	r1, [pc, #52]	; (638 <ProcessCommand(String)+0x11c>)
     602:	a808      	add	r0, sp, #32
     604:	f002 fbcc 	bl	2da0 <String::String(char const*)>
            Serial.println("Linear Actuator set to " + String(args.toInt()));
     608:	4668      	mov	r0, sp
     60a:	f002 fd4d 	bl	30a8 <String::toInt() const>
     60e:	220a      	movs	r2, #10
     610:	4601      	mov	r1, r0
     612:	a804      	add	r0, sp, #16
     614:	f002 fbf0 	bl	2df8 <String::String(long, unsigned char)>
     618:	e7c8      	b.n	5ac <ProcessCommand(String)+0x90>
     61a:	bf00      	nop
     61c:	200003f8 	.word	0x200003f8
     620:	200017ae 	.word	0x200017ae
     624:	20002ad0 	.word	0x20002ad0
     628:	200003d4 	.word	0x200003d4
     62c:	20000ee0 	.word	0x20000ee0
     630:	200003c4 	.word	0x200003c4
     634:	20002b08 	.word	0x20002b08
     638:	200003e0 	.word	0x200003e0

0000063c <loop>:
void loop () {
     63c:	b500      	push	{lr}
     63e:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
     640:	f004 fb56 	bl	4cf0 <usb_serial_available>
    if (Serial.available() > 0) {
     644:	2800      	cmp	r0, #0
     646:	dd14      	ble.n	672 <loop+0x36>
        String serialInput = Serial.readStringUntil('\n');
     648:	2300      	movs	r3, #0
     64a:	220a      	movs	r2, #10
     64c:	4912      	ldr	r1, [pc, #72]	; (698 <loop+0x5c>)
     64e:	4668      	mov	r0, sp
     650:	f002 fafa 	bl	2c48 <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     654:	4669      	mov	r1, sp
     656:	a804      	add	r0, sp, #16
     658:	f002 fb32 	bl	2cc0 <String::String(String const&)>
     65c:	a804      	add	r0, sp, #16
     65e:	f7ff ff5d 	bl	51c <ProcessCommand(String)>
     662:	a804      	add	r0, sp, #16
     664:	f002 fb60 	bl	2d28 <String::~String()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     668:	f004 fbe0 	bl	4e2c <usb_serial_flush_output>
    }
     66c:	4668      	mov	r0, sp
     66e:	f002 fb5b 	bl	2d28 <String::~String()>
     672:	4a0a      	ldr	r2, [pc, #40]	; (69c <loop+0x60>)
    if (printTimer < millis()) {
     674:	4b0a      	ldr	r3, [pc, #40]	; (6a0 <loop+0x64>)
     676:	6811      	ldr	r1, [r2, #0]
     678:	681a      	ldr	r2, [r3, #0]
     67a:	428a      	cmp	r2, r1
     67c:	d302      	bcc.n	684 <loop+0x48>
}
     67e:	b009      	add	sp, #36	; 0x24
     680:	f85d fb04 	ldr.w	pc, [sp], #4
        printTimer += printTimerInterval;
     684:	4907      	ldr	r1, [pc, #28]	; (6a4 <loop+0x68>)
     686:	6809      	ldr	r1, [r1, #0]
     688:	440a      	add	r2, r1
     68a:	601a      	str	r2, [r3, #0]
}
     68c:	b009      	add	sp, #36	; 0x24
     68e:	f85d eb04 	ldr.w	lr, [sp], #4
        PrintOutput();
     692:	f7ff bdcf 	b.w	234 <PrintOutput()>
     696:	bf00      	nop
     698:	20000ee0 	.word	0x20000ee0
     69c:	200035bc 	.word	0x200035bc
     6a0:	20003568 	.word	0x20003568
     6a4:	20001794 	.word	0x20001794

000006a8 <_GLOBAL__sub_I_myServo>:
     6a8:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     6aa:	4c0a      	ldr	r4, [pc, #40]	; (6d4 <_GLOBAL__sub_I_myServo+0x2c>)
     6ac:	2301      	movs	r3, #1
     6ae:	2210      	movs	r2, #16
     6b0:	4909      	ldr	r1, [pc, #36]	; (6d8 <_GLOBAL__sub_I_myServo+0x30>)
     6b2:	4620      	mov	r0, r4
     6b4:	f000 fb08 	bl	cc8 <PA12::PA12(HardwareSerial*, int, bool)>
     6b8:	4a08      	ldr	r2, [pc, #32]	; (6dc <_GLOBAL__sub_I_myServo+0x34>)
     6ba:	4909      	ldr	r1, [pc, #36]	; (6e0 <_GLOBAL__sub_I_myServo+0x38>)
     6bc:	4620      	mov	r0, r4
     6be:	f004 fcf3 	bl	50a8 <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     6c2:	4808      	ldr	r0, [pc, #32]	; (6e4 <_GLOBAL__sub_I_myServo+0x3c>)
     6c4:	f000 fe1e 	bl	1304 <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     6c8:	4807      	ldr	r0, [pc, #28]	; (6e8 <_GLOBAL__sub_I_myServo+0x40>)
     6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_MCP4725 dac;
     6ce:	f001 bc63 	b.w	1f98 <Adafruit_MCP4725::Adafruit_MCP4725()>
     6d2:	bf00      	nop
     6d4:	20002b08 	.word	0x20002b08
     6d8:	20001d78 	.word	0x20001d78
     6dc:	200011b4 	.word	0x200011b4
     6e0:	00000ca5 	.word	0x00000ca5
     6e4:	20002af8 	.word	0x20002af8
     6e8:	20002ad0 	.word	0x20002ad0

000006ec <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     6ec:	2000      	movs	r0, #0
     6ee:	4770      	bx	lr

000006f0 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     6f0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     6f4:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     6f8:	1a10      	subs	r0, r2, r0
     6fa:	4770      	bx	lr

000006fc <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     6fc:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     700:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     704:	429a      	cmp	r2, r3
     706:	d905      	bls.n	714 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     708:	1c5a      	adds	r2, r3, #1
     70a:	4403      	add	r3, r0
     70c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     710:	7e98      	ldrb	r0, [r3, #26]
     712:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     714:	f04f 30ff 	mov.w	r0, #4294967295
	}
     718:	4770      	bx	lr
     71a:	bf00      	nop

0000071c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     71c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     720:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     724:	429a      	cmp	r2, r3
     726:	d902      	bls.n	72e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     728:	4418      	add	r0, r3
     72a:	7e80      	ldrb	r0, [r0, #26]
     72c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     72e:	f04f 30ff 	mov.w	r0, #4294967295
	}
     732:	4770      	bx	lr

00000734 <TwoWire::flush()>:
	virtual void flush(void) {
	}
     734:	4770      	bx	lr
     736:	bf00      	nop

00000738 <TwoWire::write(unsigned char)>:
{
     738:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     73a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     73e:	b178      	cbz	r0, 760 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     740:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     744:	2a88      	cmp	r2, #136	; 0x88
     746:	d903      	bls.n	750 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     748:	2201      	movs	r2, #1
			return 0;
     74a:	2000      	movs	r0, #0
     74c:	605a      	str	r2, [r3, #4]
     74e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     750:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     754:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     756:	441a      	add	r2, r3
     758:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     75c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     760:	4770      	bx	lr
     762:	bf00      	nop

00000764 <TwoWire::write(unsigned char const*, unsigned int)>:
{
     764:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     766:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     76a:	b90c      	cbnz	r4, 770 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     76c:	4620      	mov	r0, r4
     76e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     770:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     774:	4605      	mov	r5, r0
     776:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     77a:	42a2      	cmp	r2, r4
     77c:	d80d      	bhi.n	79a <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     77e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     780:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     784:	4622      	mov	r2, r4
     786:	4418      	add	r0, r3
     788:	f002 fedc 	bl	3544 <memcpy>
		txBufferLength += quantity;
     78c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     790:	4620      	mov	r0, r4
		txBufferLength += quantity;
     792:	4423      	add	r3, r4
     794:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     798:	bd38      	pop	{r3, r4, r5, pc}
     79a:	2201      	movs	r2, #1
     79c:	6042      	str	r2, [r0, #4]
     79e:	e7ef      	b.n	780 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000007a0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
     7a0:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
     7a2:	2500      	movs	r5, #0
     7a4:	4613      	mov	r3, r2
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     7a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     7aa:	4604      	mov	r4, r0
     7ac:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
     7b0:	4815      	ldr	r0, [pc, #84]	; (808 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
     7b2:	2288      	movs	r2, #136	; 0x88
     7b4:	6121      	str	r1, [r4, #16]
     7b6:	4629      	mov	r1, r5
     7b8:	6020      	str	r0, [r4, #0]
     7ba:	f104 001a 	add.w	r0, r4, #26
     7be:	6163      	str	r3, [r4, #20]
     7c0:	7325      	strb	r5, [r4, #12]
     7c2:	7625      	strb	r5, [r4, #24]
     7c4:	7665      	strb	r5, [r4, #25]
     7c6:	f005 fc0d 	bl	5fe4 <memset>
     7ca:	2289      	movs	r2, #137	; 0x89
     7cc:	4629      	mov	r1, r5
     7ce:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
     7d2:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
     7d6:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
     7da:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
     7de:	f005 fc01 	bl	5fe4 <memset>
	}
     7e2:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
     7e4:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
     7e8:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     7ec:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
     7f0:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
     7f4:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
     7f8:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
     7fc:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
     800:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
     804:	bd38      	pop	{r3, r4, r5, pc}
     806:	bf00      	nop
     808:	20000614 	.word	0x20000614

0000080c <TwoWire::force_clock()>:
{
     80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     810:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     814:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     816:	7e01      	ldrb	r1, [r0, #24]
{
     818:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     81a:	7e43      	ldrb	r3, [r0, #25]
{
     81c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     81e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     822:	4a38      	ldr	r2, [pc, #224]	; (904 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     824:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     828:	4f37      	ldr	r7, [pc, #220]	; (908 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     82a:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     830:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     834:	0109      	lsls	r1, r1, #4
     836:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     838:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     83c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     840:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     844:	011b      	lsls	r3, r3, #4
     846:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     848:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     84a:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     84e:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     852:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     856:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     858:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     85a:	492c      	ldr	r1, [pc, #176]	; (90c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     85c:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     85e:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     862:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     864:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     868:	686b      	ldr	r3, [r5, #4]
     86a:	4333      	orrs	r3, r6
     86c:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     86e:	4b28      	ldr	r3, [pc, #160]	; (910 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     870:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     872:	683a      	ldr	r2, [r7, #0]
     874:	fba3 3202 	umull	r3, r2, r3, r2
     878:	0c92      	lsrs	r2, r2, #18
     87a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     87e:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     880:	684b      	ldr	r3, [r1, #4]
     882:	1b1b      	subs	r3, r3, r4
     884:	429a      	cmp	r2, r3
     886:	d8fb      	bhi.n	880 <TwoWire::force_clock()+0x74>
     888:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     88c:	4a1f      	ldr	r2, [pc, #124]	; (90c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     88e:	f8df e080 	ldr.w	lr, [pc, #128]	; 910 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
     892:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     896:	4203      	tst	r3, r0
     898:	d002      	beq.n	8a0 <TwoWire::force_clock()+0x94>
     89a:	68ab      	ldr	r3, [r5, #8]
     89c:	4233      	tst	r3, r6
     89e:	d12f      	bne.n	900 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
     8a0:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     8a4:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8a6:	6839      	ldr	r1, [r7, #0]
     8a8:	fbae 3101 	umull	r3, r1, lr, r1
     8ac:	0c89      	lsrs	r1, r1, #18
     8ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8b2:	6853      	ldr	r3, [r2, #4]
     8b4:	1b1b      	subs	r3, r3, r4
     8b6:	4299      	cmp	r1, r3
     8b8:	d8fb      	bhi.n	8b2 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
     8ba:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     8be:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8c0:	6839      	ldr	r1, [r7, #0]
     8c2:	fbae 3101 	umull	r3, r1, lr, r1
     8c6:	0c89      	lsrs	r1, r1, #18
     8c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8cc:	6853      	ldr	r3, [r2, #4]
     8ce:	1b1b      	subs	r3, r3, r4
     8d0:	4299      	cmp	r1, r3
     8d2:	d8fb      	bhi.n	8cc <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     8d4:	f1bc 0c01 	subs.w	ip, ip, #1
     8d8:	d1db      	bne.n	892 <TwoWire::force_clock()+0x86>
	bool ret = false;
     8da:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     8dc:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     8e0:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     8e2:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     8e6:	68db      	ldr	r3, [r3, #12]
     8e8:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     8ec:	f899 3019 	ldrb.w	r3, [r9, #25]
     8f0:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     8f4:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     8f8:	6013      	str	r3, [r2, #0]
}
     8fa:	b003      	add	sp, #12
     8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     900:	2001      	movs	r0, #1
     902:	e7eb      	b.n	8dc <TwoWire::force_clock()+0xd0>
     904:	200008c8 	.word	0x200008c8
     908:	20000edc 	.word	0x20000edc
     90c:	e0001000 	.word	0xe0001000
     910:	431bde83 	.word	0x431bde83

00000914 <TwoWire::wait_idle()>:
	return systick_millis_count;
     914:	4a0e      	ldr	r2, [pc, #56]	; (950 <TwoWire::wait_idle()+0x3c>)
{
     916:	b510      	push	{r4, lr}
     918:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
     91a:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     91c:	e005      	b.n	92a <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     91e:	01db      	lsls	r3, r3, #7
     920:	d407      	bmi.n	932 <TwoWire::wait_idle()+0x1e>
     922:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     924:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     926:	2b10      	cmp	r3, #16
     928:	d808      	bhi.n	93c <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     92a:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     92c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     930:	d1f5      	bne.n	91e <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     932:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     936:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     938:	6163      	str	r3, [r4, #20]
}
     93a:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     93c:	f7ff ff66 	bl	80c <TwoWire::force_clock()>
     940:	2800      	cmp	r0, #0
     942:	d0fa      	beq.n	93a <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     944:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     948:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     94a:	6163      	str	r3, [r4, #20]
	return true;
     94c:	e7f5      	b.n	93a <TwoWire::wait_idle()+0x26>
     94e:	bf00      	nop
     950:	200035bc 	.word	0x200035bc

00000954 <TwoWire::endTransmission(unsigned char)>:
{
     954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     958:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
     95c:	f1ba 0f00 	cmp.w	sl, #0
     960:	d058      	beq.n	a14 <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
     962:	4681      	mov	r9, r0
     964:	4688      	mov	r8, r1
     966:	f7ff ffd5 	bl	914 <TwoWire::wait_idle()>
     96a:	2800      	cmp	r0, #0
     96c:	d052      	beq.n	a14 <TwoWire::endTransmission(unsigned char)+0xc0>
     96e:	4e37      	ldr	r6, [pc, #220]	; (a4c <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     970:	2400      	movs	r4, #0
     972:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     974:	e016      	b.n	9a4 <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
     976:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     978:	051a      	lsls	r2, r3, #20
     97a:	d444      	bmi.n	a06 <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
     97c:	0558      	lsls	r0, r3, #21
     97e:	d458      	bmi.n	a32 <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     980:	0499      	lsls	r1, r3, #18
     982:	d44c      	bmi.n	a1e <TwoWire::endTransmission(unsigned char)+0xca>
     984:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     986:	1bd2      	subs	r2, r2, r7
     988:	2a32      	cmp	r2, #50	; 0x32
     98a:	d848      	bhi.n	a1e <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
     98c:	4554      	cmp	r4, sl
     98e:	d907      	bls.n	9a0 <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
     990:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     992:	0752      	lsls	r2, r2, #29
     994:	d104      	bne.n	9a0 <TwoWire::endTransmission(unsigned char)+0x4c>
     996:	059b      	lsls	r3, r3, #22
     998:	d455      	bmi.n	a46 <TwoWire::endTransmission(unsigned char)+0xf2>
     99a:	f1b8 0f00 	cmp.w	r8, #0
     99e:	d052      	beq.n	a46 <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
     9a0:	f004 fa8e 	bl	4ec0 <yield>
		if (tx_index <= tx_len) {
     9a4:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9a6:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
     9aa:	d8e4      	bhi.n	976 <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9ac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     9ae:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9b0:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     9b4:	d4df      	bmi.n	976 <TwoWire::endTransmission(unsigned char)+0x22>
     9b6:	e013      	b.n	9e0 <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9b8:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     9bc:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     9be:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     9c4:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9c6:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     9c8:	d027      	beq.n	a1a <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
     9ca:	458a      	cmp	sl, r1
				fifo_used++;
     9cc:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9d0:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     9d4:	d90e      	bls.n	9f4 <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9d6:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     9da:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9dc:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     9de:	d0ca      	beq.n	976 <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
     9e0:	2101      	movs	r1, #1
				if (tx_index == 0) {
     9e2:	2c00      	cmp	r4, #0
     9e4:	d0e8      	beq.n	9b8 <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9e6:	4621      	mov	r1, r4
				fifo_used++;
     9e8:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9ea:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     9ec:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9ee:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     9f2:	d8f0      	bhi.n	9d6 <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     9f4:	f1b8 0f00 	cmp.w	r8, #0
     9f8:	d0bd      	beq.n	976 <TwoWire::endTransmission(unsigned char)+0x22>
     9fa:	f44f 7300 	mov.w	r3, #512	; 0x200
     9fe:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
     a00:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     a02:	051a      	lsls	r2, r3, #20
     a04:	d5ba      	bpl.n	97c <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a06:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     a08:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a0e:	612b      	str	r3, [r5, #16]
}
     a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
     a14:	2004      	movs	r0, #4
}
     a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     a1a:	2401      	movs	r4, #1
     a1c:	e7ab      	b.n	976 <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a1e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     a20:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     a24:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a2a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     a2c:	662a      	str	r2, [r5, #96]	; 0x60
}
     a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a32:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     a34:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     a38:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a3e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     a40:	662a      	str	r2, [r5, #96]	; 0x60
}
     a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
     a46:	2000      	movs	r0, #0
     a48:	e7e5      	b.n	a16 <TwoWire::endTransmission(unsigned char)+0xc2>
     a4a:	bf00      	nop
     a4c:	200035bc 	.word	0x200035bc

00000a50 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a54:	4682      	mov	sl, r0
     a56:	460c      	mov	r4, r1
     a58:	4615      	mov	r5, r2
     a5a:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
     a5c:	f7ff ff5a 	bl	914 <TwoWire::wait_idle()>
     a60:	2800      	cmp	r0, #0
     a62:	f000 808f 	beq.w	b84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
     a66:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
     a68:	2100      	movs	r1, #0
     a6a:	2d01      	cmp	r5, #1
     a6c:	f8df 811c 	ldr.w	r8, [pc, #284]	; b8c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a70:	b2db      	uxtb	r3, r3
     a72:	f240 4601 	movw	r6, #1025	; 0x401
     a76:	bf38      	it	cc
     a78:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     a7a:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a7c:	431e      	orrs	r6, r3
     a7e:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
     a82:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     a86:	e01e      	b.n	ac6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
     a88:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     a8c:	2b87      	cmp	r3, #135	; 0x87
     a8e:	d93d      	bls.n	b0c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
     a90:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     a92:	050b      	lsls	r3, r1, #20
     a94:	d457      	bmi.n	b46 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     a96:	f411 5f10 	tst.w	r1, #9216	; 0x2400
     a9a:	d167      	bne.n	b6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
     a9c:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     aa0:	eba3 0309 	sub.w	r3, r3, r9
     aa4:	2b32      	cmp	r3, #50	; 0x32
     aa6:	d861      	bhi.n	b6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
     aa8:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     aac:	42ab      	cmp	r3, r5
     aae:	d308      	bcc.n	ac2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     ab0:	2c02      	cmp	r4, #2
     ab2:	d906      	bls.n	ac2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
     ab4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     ab6:	0758      	lsls	r0, r3, #29
     ab8:	d103      	bne.n	ac2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     aba:	058b      	lsls	r3, r1, #22
     abc:	d447      	bmi.n	b4e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
     abe:	2f00      	cmp	r7, #0
     ac0:	d045      	beq.n	b4e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
     ac2:	f004 f9fd 	bl	4ec0 <yield>
		if (tx_state < 3) {
     ac6:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     ac8:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
     acc:	d8dc      	bhi.n	a88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     ace:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
     ad0:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     ad2:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
     ad6:	d4d7      	bmi.n	a88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
     ad8:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     ada:	1e6c      	subs	r4, r5, #1
     adc:	4408      	add	r0, r1
     ade:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
     ae2:	b941      	cbnz	r1, af6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     ae4:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
     ae6:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
     ae8:	1a43      	subs	r3, r0, r1
     aea:	2b03      	cmp	r3, #3
     aec:	d801      	bhi.n	af2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
     aee:	2902      	cmp	r1, #2
     af0:	d9f7      	bls.n	ae2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
     af2:	460c      	mov	r4, r1
     af4:	e7c8      	b.n	a88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
     af6:	2901      	cmp	r1, #1
     af8:	d031      	beq.n	b5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     afa:	b117      	cbz	r7, b02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
     afc:	f44f 7300 	mov.w	r3, #512	; 0x200
     b00:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
     b02:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
     b06:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
     b08:	2b87      	cmp	r3, #135	; 0x87
     b0a:	d8c1      	bhi.n	a90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b0c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b0e:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b12:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b16:	d0bb      	beq.n	a90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     b18:	1c59      	adds	r1, r3, #1
     b1a:	449e      	add	lr, r3
     b1c:	3319      	adds	r3, #25
     b1e:	b2c9      	uxtb	r1, r1
     b20:	fa5f fe8e 	uxtb.w	lr, lr
     b24:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
     b28:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b2c:	1c48      	adds	r0, r1, #1
     b2e:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
     b30:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b34:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
     b36:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b3a:	d0a9      	beq.n	a90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     b3c:	2989      	cmp	r1, #137	; 0x89
     b3e:	d1f3      	bne.n	b28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
     b40:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     b42:	050b      	lsls	r3, r1, #20
     b44:	d5a7      	bpl.n	a96 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b46:	6913      	ldr	r3, [r2, #16]
     b48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     b4c:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b4e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b50:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     b54:	d105      	bne.n	b62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
     b56:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
     b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     b5e:	6614      	str	r4, [r2, #96]	; 0x60
     b60:	e7c1      	b.n	ae6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b62:	6913      	ldr	r3, [r2, #16]
     b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b68:	6113      	str	r3, [r2, #16]
     b6a:	e7f4      	b.n	b56 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b6c:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     b76:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     b78:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b7a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b7c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     b80:	d0e9      	beq.n	b56 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
     b82:	e7ee      	b.n	b62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
     b84:	2004      	movs	r0, #4
}
     b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b8a:	bf00      	nop
     b8c:	200035bc 	.word	0x200035bc

00000b90 <TwoWire::isr()>:
	uint32_t status = port->SSR;
     b90:	6903      	ldr	r3, [r0, #16]
{
     b92:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
     b94:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
     b98:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
     b9a:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
     b9e:	d001      	beq.n	ba4 <TwoWire::isr()+0x14>
     ba0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     ba4:	07ae      	lsls	r6, r5, #30
     ba6:	d50b      	bpl.n	bc0 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
     ba8:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
     bac:	0408      	lsls	r0, r1, #16
     bae:	d53e      	bpl.n	c2e <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
     bb0:	2200      	movs	r2, #0
     bb2:	2001      	movs	r0, #1
     bb4:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
     bb8:	4422      	add	r2, r4
     bba:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
     bbe:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     bc0:	07ea      	lsls	r2, r5, #31
     bc2:	d510      	bpl.n	be6 <TwoWire::isr()+0x56>
		if (!transmitting) {
     bc4:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
     bc8:	b1f6      	cbz	r6, c08 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
     bca:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
     bce:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
     bd2:	42b2      	cmp	r2, r6
     bd4:	d927      	bls.n	c26 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
     bd6:	1c72      	adds	r2, r6, #1
     bd8:	4426      	add	r6, r4
     bda:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
     bde:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
     be2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
     be6:	05ab      	lsls	r3, r5, #22
     be8:	d50d      	bpl.n	c06 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
     bea:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
     bee:	b118      	cbz	r0, bf8 <TwoWire::isr()+0x68>
     bf0:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     bf4:	b103      	cbz	r3, bf8 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
     bf6:	4798      	blx	r3
		rxBufferIndex = 0;
     bf8:	2300      	movs	r3, #0
     bfa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
     bfe:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
     c02:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
     c06:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
     c08:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
     c0c:	b10a      	cbz	r2, c12 <TwoWire::isr()+0x82>
				(*user_onRequest)();
     c0e:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
     c10:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
     c12:	2200      	movs	r2, #0
     c14:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
     c18:	2201      	movs	r2, #1
     c1a:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
     c1e:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
     c22:	42b2      	cmp	r2, r6
     c24:	d8d7      	bhi.n	bd6 <TwoWire::isr()+0x46>
			port->STDR = 0;
     c26:	2200      	movs	r2, #0
     c28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
     c2c:	e7db      	b.n	be6 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
     c2e:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
     c32:	2a87      	cmp	r2, #135	; 0x87
     c34:	d8c4      	bhi.n	bc0 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
     c36:	1c50      	adds	r0, r2, #1
     c38:	b2c0      	uxtb	r0, r0
     c3a:	e7bd      	b.n	bb8 <TwoWire::isr()+0x28>

00000c3c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
     c3c:	4801      	ldr	r0, [pc, #4]	; (c44 <lpi2c1_isr()+0x8>)
     c3e:	f7ff bfa7 	b.w	b90 <TwoWire::isr()>
     c42:	bf00      	nop
     c44:	20002078 	.word	0x20002078

00000c48 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
     c48:	4801      	ldr	r0, [pc, #4]	; (c50 <lpi2c3_isr()+0x8>)
     c4a:	f7ff bfa1 	b.w	b90 <TwoWire::isr()>
     c4e:	bf00      	nop
     c50:	200021b8 	.word	0x200021b8

00000c54 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
     c54:	4801      	ldr	r0, [pc, #4]	; (c5c <lpi2c4_isr()+0x8>)
     c56:	f7ff bf9b 	b.w	b90 <TwoWire::isr()>
     c5a:	bf00      	nop
     c5c:	200022f8 	.word	0x200022f8

00000c60 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
     c60:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
     c62:	4c09      	ldr	r4, [pc, #36]	; (c88 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
     c64:	4909      	ldr	r1, [pc, #36]	; (c8c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
     c66:	4622      	mov	r2, r4
     c68:	4809      	ldr	r0, [pc, #36]	; (c90 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
     c6a:	f7ff fd99 	bl	7a0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
     c6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
     c72:	4908      	ldr	r1, [pc, #32]	; (c94 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
     c74:	4808      	ldr	r0, [pc, #32]	; (c98 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
     c76:	f7ff fd93 	bl	7a0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
     c7a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
     c7e:	4907      	ldr	r1, [pc, #28]	; (c9c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
     c80:	4807      	ldr	r0, [pc, #28]	; (ca0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
     c82:	f7ff fd8d 	bl	7a0 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
     c86:	bd10      	pop	{r4, pc}
     c88:	60001ff8 	.word	0x60001ff8
     c8c:	403f0000 	.word	0x403f0000
     c90:	20002078 	.word	0x20002078
     c94:	403f8000 	.word	0x403f8000
     c98:	200021b8 	.word	0x200021b8
     c9c:	403fc000 	.word	0x403fc000
     ca0:	200022f8 	.word	0x200022f8

00000ca4 <PA12::~PA12()>:
}
     ca4:	4770      	bx	lr
     ca6:	bf00      	nop

00000ca8 <PA12::~PA12()>:
PA12::~PA12() {
     ca8:	b510      	push	{r4, lr}
     caa:	4604      	mov	r4, r0
}
     cac:	f640 2148 	movw	r1, #2632	; 0xa48
     cb0:	f002 fce4 	bl	367c <operator delete(void*, unsigned int)>
     cb4:	4620      	mov	r0, r4
     cb6:	bd10      	pop	{r4, pc}

00000cb8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
     cb8:	f004 b81a 	b.w	4cf0 <usb_serial_available>

00000cbc <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
     cbc:	f004 b85c 	b.w	4d78 <usb_serial_getchar>

00000cc0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     cc0:	4608      	mov	r0, r1
     cc2:	f004 b869 	b.w	4d98 <usb_serial_putchar>
     cc6:	bf00      	nop

00000cc8 <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
     cc8:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
     cca:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
     cce:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
     cd0:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
     cd2:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
     cd4:	4a02      	ldr	r2, [pc, #8]	; (ce0 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
     cd6:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
     cd8:	e9c0 2300 	strd	r2, r3, [r0]
}
     cdc:	4770      	bx	lr
     cde:	bf00      	nop
     ce0:	20000604 	.word	0x20000604

00000ce4 <PA12::begin(int)>:
void PA12::begin(int baud){
     ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ce6:	4604      	mov	r4, r0
     ce8:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
     cea:	7b00      	ldrb	r0, [r0, #12]
     cec:	2101      	movs	r1, #1
     cee:	f002 fbe9 	bl	34c4 <pinMode>
	if(PA12_Serial_Type)
     cf2:	6866      	ldr	r6, [r4, #4]
     cf4:	b30e      	cbz	r6, d3a <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     cf6:	68a6      	ldr	r6, [r4, #8]
     cf8:	4628      	mov	r0, r5
     cfa:	f000 faaf 	bl	125c <irp_get_baudrate>
     cfe:	4601      	mov	r1, r0
     d00:	4630      	mov	r0, r6
     d02:	f000 fadb 	bl	12bc <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
     d06:	7c21      	ldrb	r1, [r4, #16]
     d08:	7b20      	ldrb	r0, [r4, #12]
     d0a:	f002 fb9f 	bl	344c <digitalWrite>
	mIRPtxrxStatus = 0;
     d0e:	2100      	movs	r1, #0
	SmartDelayFlag=1;
     d10:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
     d12:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
     d14:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
     d16:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
     d1a:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
     d1e:	2104      	movs	r1, #4
	SmartDelayFlag=1;
     d20:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
     d24:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
     d28:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
     d2c:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
     d30:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
     d34:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
     d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     d3a:	68a7      	ldr	r7, [r4, #8]
     d3c:	4628      	mov	r0, r5
     d3e:	f000 fa8d 	bl	125c <irp_get_baudrate>
     d42:	4632      	mov	r2, r6
     d44:	4601      	mov	r1, r0
     d46:	4638      	mov	r0, r7
     d48:	f001 faa8 	bl	229c <HardwareSerial::begin(unsigned long, unsigned short)>
     d4c:	e7db      	b.n	d06 <PA12::begin(int)+0x22>
     d4e:	bf00      	nop

00000d50 <PA12::readRaw()>:
int PA12::readRaw(void){
     d50:	b510      	push	{r4, lr}
     d52:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
     d54:	6880      	ldr	r0, [r0, #8]
     d56:	4a0c      	ldr	r2, [pc, #48]	; (d88 <PA12::readRaw()+0x38>)
     d58:	6803      	ldr	r3, [r0, #0]
     d5a:	691b      	ldr	r3, [r3, #16]
     d5c:	4293      	cmp	r3, r2
     d5e:	d10d      	bne.n	d7c <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
     d60:	f003 ffc6 	bl	4cf0 <usb_serial_available>
     d64:	b148      	cbz	r0, d7a <PA12::readRaw()+0x2a>
     d66:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
     d68:	4a08      	ldr	r2, [pc, #32]	; (d8c <PA12::readRaw()+0x3c>)
     d6a:	6803      	ldr	r3, [r0, #0]
     d6c:	695b      	ldr	r3, [r3, #20]
     d6e:	4293      	cmp	r3, r2
     d70:	d106      	bne.n	d80 <PA12::readRaw()+0x30>
}
     d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
     d76:	f003 bfff 	b.w	4d78 <usb_serial_getchar>
     d7a:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
     d7c:	4798      	blx	r3
     d7e:	e7f1      	b.n	d64 <PA12::readRaw()+0x14>
}
     d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
     d84:	4718      	bx	r3
     d86:	bf00      	nop
     d88:	00000cb9 	.word	0x00000cb9
     d8c:	00000cbd 	.word	0x00000cbd

00000d90 <PA12::available()>:
		return PA12_Serial->available();
     d90:	6880      	ldr	r0, [r0, #8]
     d92:	4a04      	ldr	r2, [pc, #16]	; (da4 <PA12::available()+0x14>)
     d94:	6803      	ldr	r3, [r0, #0]
     d96:	691b      	ldr	r3, [r3, #16]
     d98:	4293      	cmp	r3, r2
     d9a:	d101      	bne.n	da0 <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
     d9c:	f003 bfa8 	b.w	4cf0 <usb_serial_available>
     da0:	4718      	bx	r3
     da2:	bf00      	nop
     da4:	00000cb9 	.word	0x00000cb9

00000da8 <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	4d0e      	ldr	r5, [pc, #56]	; (de4 <PA12::clearBuffer()+0x3c>)
     dac:	4604      	mov	r4, r0
     dae:	4e0e      	ldr	r6, [pc, #56]	; (de8 <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
     db0:	68a0      	ldr	r0, [r4, #8]
     db2:	6803      	ldr	r3, [r0, #0]
     db4:	691b      	ldr	r3, [r3, #16]
     db6:	42ab      	cmp	r3, r5
     db8:	d10e      	bne.n	dd8 <PA12::clearBuffer()+0x30>
     dba:	f003 ff99 	bl	4cf0 <usb_serial_available>
	while((this->available()))
     dbe:	b170      	cbz	r0, dde <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
     dc0:	68a0      	ldr	r0, [r4, #8]
     dc2:	6803      	ldr	r3, [r0, #0]
     dc4:	695b      	ldr	r3, [r3, #20]
     dc6:	42b3      	cmp	r3, r6
     dc8:	d10a      	bne.n	de0 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
     dca:	f003 ffd5 	bl	4d78 <usb_serial_getchar>
		return PA12_Serial->available();
     dce:	68a0      	ldr	r0, [r4, #8]
     dd0:	6803      	ldr	r3, [r0, #0]
     dd2:	691b      	ldr	r3, [r3, #16]
     dd4:	42ab      	cmp	r3, r5
     dd6:	d0f0      	beq.n	dba <PA12::clearBuffer()+0x12>
     dd8:	4798      	blx	r3
	while((this->available()))
     dda:	2800      	cmp	r0, #0
     ddc:	d1f0      	bne.n	dc0 <PA12::clearBuffer()+0x18>
}
     dde:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
     de0:	4798      	blx	r3
     de2:	e7e5      	b.n	db0 <PA12::clearBuffer()+0x8>
     de4:	00000cb9 	.word	0x00000cb9
     de8:	00000cbd 	.word	0x00000cbd

00000dec <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     df0:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
     df2:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     df4:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     df6:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
     df8:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
     dfa:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
     dfe:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e02:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
     e04:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
     e08:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
     e0c:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
     e10:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     e14:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
     e18:	dd40      	ble.n	e9c <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
     e1a:	f600 010c 	addw	r1, r0, #2060	; 0x80c
     e1e:	00aa      	lsls	r2, r5, #2
     e20:	f500 6085 	add.w	r0, r0, #1064	; 0x428
     e24:	f005 f862 	bl	5eec <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e28:	1dab      	adds	r3, r5, #6
     e2a:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e2e:	2000      	movs	r0, #0
     e30:	2203      	movs	r2, #3
     e32:	e001      	b.n	e38 <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
     e34:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e38:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
     e3a:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e3c:	4293      	cmp	r3, r2
     e3e:	dcf9      	bgt.n	e34 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     e40:	43c0      	mvns	r0, r0
     e42:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e46:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     e48:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e4c:	7b20      	ldrb	r0, [r4, #12]
     e4e:	f002 fafd 	bl	344c <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e52:	2e00      	cmp	r6, #0
     e54:	dd17      	ble.n	e86 <PA12::txPacket(int, int, int)+0x9a>
     e56:	f204 480c 	addw	r8, r4, #1036	; 0x40c
     e5a:	2500      	movs	r5, #0
     e5c:	4f13      	ldr	r7, [pc, #76]	; (eac <PA12::txPacket(int, int, int)+0xc0>)
     e5e:	e004      	b.n	e6a <PA12::txPacket(int, int, int)+0x7e>
     e60:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     e62:	f003 ff99 	bl	4d98 <usb_serial_putchar>
     e66:	42ae      	cmp	r6, r5
     e68:	d00d      	beq.n	e86 <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
     e6a:	68a2      	ldr	r2, [r4, #8]
     e6c:	f858 0f04 	ldr.w	r0, [r8, #4]!
     e70:	6813      	ldr	r3, [r2, #0]
     e72:	b2c0      	uxtb	r0, r0
     e74:	681b      	ldr	r3, [r3, #0]
     e76:	42bb      	cmp	r3, r7
     e78:	d0f2      	beq.n	e60 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e7a:	3501      	adds	r5, #1
PA12_Serial->write(value);
     e7c:	4601      	mov	r1, r0
     e7e:	4610      	mov	r0, r2
     e80:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e82:	42ae      	cmp	r6, r5
     e84:	d1f1      	bne.n	e6a <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
     e86:	68a0      	ldr	r0, [r4, #8]
     e88:	6803      	ldr	r3, [r0, #0]
     e8a:	68db      	ldr	r3, [r3, #12]
     e8c:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
     e8e:	7b20      	ldrb	r0, [r4, #12]
     e90:	7c61      	ldrb	r1, [r4, #17]
     e92:	f002 fadb 	bl	344c <digitalWrite>
}
     e96:	4630      	mov	r0, r6
     e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e9c:	1dab      	adds	r3, r5, #6
     e9e:	2b03      	cmp	r3, #3
     ea0:	dcc3      	bgt.n	e2a <PA12::txPacket(int, int, int)+0x3e>
     ea2:	f04f 30ff 	mov.w	r0, #4294967295
     ea6:	2303      	movs	r3, #3
     ea8:	e7cb      	b.n	e42 <PA12::txPacket(int, int, int)+0x56>
     eaa:	bf00      	nop
     eac:	00000cc1 	.word	0x00000cc1

00000eb0 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
     eb0:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
     eb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eb6:	4689      	mov	r9, r1
     eb8:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
     eba:	d046      	beq.n	f4a <PA12::rxPacket(int)+0x9a>
     ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
     ec0:	4299      	cmp	r1, r3
     ec2:	d042      	beq.n	f4a <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
     ec4:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
     ec8:	f1b9 0f00 	cmp.w	r9, #0
     ecc:	dd66      	ble.n	f9c <PA12::rxPacket(int)+0xec>
     ece:	f104 0a10 	add.w	sl, r4, #16
     ed2:	3602      	adds	r6, #2
     ed4:	2700      	movs	r7, #0
     ed6:	4d5a      	ldr	r5, [pc, #360]	; (1040 <PA12::rxPacket(int)+0x190>)
     ed8:	46d0      	mov	r8, sl
		ulCounter = 0;
     eda:	f04f 0b00 	mov.w	fp, #0
     ede:	e007      	b.n	ef0 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
     ee0:	f003 ff06 	bl	4cf0 <usb_serial_available>
     ee4:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     ee6:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     eea:	b963      	cbnz	r3, f06 <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
     eec:	45b3      	cmp	fp, r6
     eee:	d02f      	beq.n	f50 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
     ef0:	68a0      	ldr	r0, [r4, #8]
     ef2:	6803      	ldr	r3, [r0, #0]
     ef4:	691b      	ldr	r3, [r3, #16]
     ef6:	42ab      	cmp	r3, r5
     ef8:	d0f2      	beq.n	ee0 <PA12::rxPacket(int)+0x30>
     efa:	4798      	blx	r3
     efc:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     efe:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     f02:	2b00      	cmp	r3, #0
     f04:	d0f2      	beq.n	eec <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
     f06:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
     f08:	4620      	mov	r0, r4
     f0a:	f7ff ff21 	bl	d50 <PA12::readRaw()>
     f0e:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
     f12:	45b9      	cmp	r9, r7
     f14:	d1e1      	bne.n	eda <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     f16:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     f1a:	f502 7382 	add.w	r3, r2, #260	; 0x104
     f1e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     f22:	29fe      	cmp	r1, #254	; 0xfe
     f24:	d00e      	beq.n	f44 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
     f26:	2f03      	cmp	r7, #3
     f28:	dd0c      	ble.n	f44 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f2a:	6963      	ldr	r3, [r4, #20]
     f2c:	2bff      	cmp	r3, #255	; 0xff
     f2e:	d027      	beq.n	f80 <PA12::rxPacket(int)+0xd0>
     f30:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
     f38:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
     f3a:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
     f3e:	2700      	movs	r7, #0
				clearBuffer();
     f40:	f7ff ff32 	bl	da8 <PA12::clearBuffer()>
}
     f44:	4638      	mov	r0, r7
     f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
     f4a:	f44f 3648 	mov.w	r6, #204800	; 0x32000
     f4e:	e7bb      	b.n	ec8 <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     f50:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     f54:	f502 7182 	add.w	r1, r2, #260	; 0x104
     f58:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
     f5c:	29fe      	cmp	r1, #254	; 0xfe
     f5e:	d0f1      	beq.n	f44 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
     f60:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     f64:	d0df      	beq.n	f26 <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f66:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
     f6a:	461f      	mov	r7, r3
			clearBuffer();			
     f6c:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f72:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
     f76:	f7ff ff17 	bl	da8 <PA12::clearBuffer()>
}
     f7a:	4638      	mov	r0, r7
     f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f80:	69a3      	ldr	r3, [r4, #24]
     f82:	2bff      	cmp	r3, #255	; 0xff
     f84:	d1d4      	bne.n	f30 <PA12::rxPacket(int)+0x80>
     f86:	69e3      	ldr	r3, [r4, #28]
     f88:	2bff      	cmp	r3, #255	; 0xff
     f8a:	d009      	beq.n	fa0 <PA12::rxPacket(int)+0xf0>
     f8c:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
     f90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     f94:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f96:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
     f9a:	e7cd      	b.n	f38 <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
     f9c:	2700      	movs	r7, #0
     f9e:	e7d1      	b.n	f44 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     fa0:	3204      	adds	r2, #4
     fa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
     fa6:	685b      	ldr	r3, [r3, #4]
     fa8:	428b      	cmp	r3, r1
     faa:	d02c      	beq.n	1006 <PA12::rxPacket(int)+0x156>
     fac:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fb4:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
     fb8:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
     fba:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     fbe:	6852      	ldr	r2, [r2, #4]
     fc0:	428a      	cmp	r2, r1
     fc2:	d115      	bne.n	ff0 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
     fc4:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
     fc8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     fcc:	6951      	ldr	r1, [r2, #20]
     fce:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
     fd2:	1aba      	subs	r2, r7, r2
     fd4:	4291      	cmp	r1, r2
     fd6:	d10b      	bne.n	ff0 <PA12::rxPacket(int)+0x140>
     fd8:	f104 021c 	add.w	r2, r4, #28
     fdc:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     fe0:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fe4:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
     fe6:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
     fe8:	d1fa      	bne.n	fe0 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
     fea:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
     fec:	2bff      	cmp	r3, #255	; 0xff
     fee:	d0a9      	beq.n	f44 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     ff0:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
     ff4:	4620      	mov	r0, r4
				return 0;
     ff6:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     ffc:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1000:	f7ff fed2 	bl	da8 <PA12::clearBuffer()>
				return 0;
    1004:	e79e      	b.n	f44 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    1006:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    100a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    100e:	6958      	ldr	r0, [r3, #20]
    1010:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    1014:	1afb      	subs	r3, r7, r3
    1016:	4298      	cmp	r0, r3
    1018:	d1c8      	bne.n	fac <PA12::rxPacket(int)+0xfc>
    101a:	f104 001c 	add.w	r0, r4, #28
    101e:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    1022:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1024:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1028:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    102a:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    102c:	d1fa      	bne.n	1024 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    102e:	2bff      	cmp	r3, #255	; 0xff
    1030:	d0c3      	beq.n	fba <PA12::rxPacket(int)+0x10a>
    1032:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    1036:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    103a:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    103e:	e7bc      	b.n	fba <PA12::rxPacket(int)+0x10a>
    1040:	00000cb9 	.word	0x00000cb9

00001044 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    1048:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    104a:	4698      	mov	r8, r3
    104c:	4605      	mov	r5, r0
	mBusUsed = 1;
    104e:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1050:	468a      	mov	sl, r1
    1052:	4691      	mov	r9, r2
    1054:	4e56      	ldr	r6, [pc, #344]	; (11b0 <PA12::txRxPacket(int, int, int)+0x16c>)
    1056:	4f57      	ldr	r7, [pc, #348]	; (11b4 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    1058:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    105c:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    1060:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    1064:	68a8      	ldr	r0, [r5, #8]
    1066:	6803      	ldr	r3, [r0, #0]
    1068:	691c      	ldr	r4, [r3, #16]
    106a:	42b4      	cmp	r4, r6
    106c:	d10f      	bne.n	108e <PA12::txRxPacket(int, int, int)+0x4a>
    106e:	f003 fe3f 	bl	4cf0 <usb_serial_available>
    1072:	4604      	mov	r4, r0
		while((this->available())){
    1074:	b17c      	cbz	r4, 1096 <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    1076:	68a8      	ldr	r0, [r5, #8]
    1078:	6803      	ldr	r3, [r0, #0]
    107a:	695b      	ldr	r3, [r3, #20]
    107c:	42bb      	cmp	r3, r7
    107e:	d14a      	bne.n	1116 <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    1080:	f003 fe7a 	bl	4d78 <usb_serial_getchar>
		return PA12_Serial->available();
    1084:	68a8      	ldr	r0, [r5, #8]
    1086:	6803      	ldr	r3, [r0, #0]
    1088:	691c      	ldr	r4, [r3, #16]
    108a:	42b4      	cmp	r4, r6
    108c:	d0ef      	beq.n	106e <PA12::txRxPacket(int, int, int)+0x2a>
    108e:	47a0      	blx	r4
    1090:	4604      	mov	r4, r0
		while((this->available())){
    1092:	2c00      	cmp	r4, #0
    1094:	d1ef      	bne.n	1076 <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1096:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    1098:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    109c:	464a      	mov	r2, r9
    109e:	4651      	mov	r1, sl
    10a0:	4628      	mov	r0, r5
    10a2:	f7ff fea3 	bl	dec <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    10a6:	4580      	cmp	r8, r0
    10a8:	d102      	bne.n	10b0 <PA12::txRxPacket(int, int, int)+0x6c>
    10aa:	2301      	movs	r3, #1
    10ac:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    10b0:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    10b4:	d043      	beq.n	113e <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    10b6:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    10ba:	d02e      	beq.n	111a <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    10bc:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    10c0:	d065      	beq.n	118e <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    10c2:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    10c6:	2b01      	cmp	r3, #1
    10c8:	dd53      	ble.n	1172 <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    10ca:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    10ce:	2b01      	cmp	r3, #1
    10d0:	d038      	beq.n	1144 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    10d2:	230b      	movs	r3, #11
    10d4:	461e      	mov	r6, r3
    10d6:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    10da:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    10de:	2b01      	cmp	r3, #1
    10e0:	d038      	beq.n	1154 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    10e2:	4631      	mov	r1, r6
    10e4:	4628      	mov	r0, r5
    10e6:	f7ff fee3 	bl	eb0 <PA12::rxPacket(int)>
	mBusUsed = 0;
    10ea:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    10ec:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    10ee:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    10f2:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    10f6:	d007      	beq.n	1108 <PA12::txRxPacket(int, int, int)+0xc4>
    10f8:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    10fc:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1100:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1104:	2bfe      	cmp	r3, #254	; 0xfe
    1106:	d029      	beq.n	115c <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1108:	2302      	movs	r3, #2
	return 1;
    110a:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    110c:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    1110:	4620      	mov	r0, r4
    1112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    1116:	4798      	blx	r3
    1118:	e7a4      	b.n	1064 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    111a:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    111e:	3607      	adds	r6, #7
    1120:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1124:	2e00      	cmp	r6, #0
    1126:	d1d8      	bne.n	10da <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1128:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    112c:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1130:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1134:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1138:	2bf1      	cmp	r3, #241	; 0xf1
    113a:	d1e5      	bne.n	1108 <PA12::txRxPacket(int, int, int)+0xc4>
    113c:	e7e8      	b.n	1110 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    113e:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1142:	d02f      	beq.n	11a4 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1144:	2307      	movs	r3, #7
    1146:	461e      	mov	r6, r3
    1148:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    114c:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1150:	2b01      	cmp	r3, #1
    1152:	d1c6      	bne.n	10e2 <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1154:	2096      	movs	r0, #150	; 0x96
    1156:	f002 f925 	bl	33a4 <delay>
    115a:	e7c2      	b.n	10e2 <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    115c:	2800      	cmp	r0, #0
    115e:	d1d3      	bne.n	1108 <PA12::txRxPacket(int, int, int)+0xc4>
    1160:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1164:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1168:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    116c:	2bf1      	cmp	r3, #241	; 0xf1
    116e:	d1cb      	bne.n	1108 <PA12::txRxPacket(int, int, int)+0xc4>
    1170:	e7ce      	b.n	1110 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    1172:	2300      	movs	r3, #0
    1174:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1178:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    117c:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1180:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1184:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1188:	2bf1      	cmp	r3, #241	; 0xf1
    118a:	d1bd      	bne.n	1108 <PA12::txRxPacket(int, int, int)+0xc4>
    118c:	e7c0      	b.n	1110 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    118e:	f029 0910 	bic.w	r9, r9, #16
    1192:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    1196:	d1ec      	bne.n	1172 <PA12::txRxPacket(int, int, int)+0x12e>
    1198:	f64f 73ff 	movw	r3, #65535	; 0xffff
    119c:	461e      	mov	r6, r3
    119e:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    11a2:	e79a      	b.n	10da <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    11a4:	23ff      	movs	r3, #255	; 0xff
    11a6:	461e      	mov	r6, r3
    11a8:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    11ac:	e795      	b.n	10da <PA12::txRxPacket(int, int, int)+0x96>
    11ae:	bf00      	nop
    11b0:	00000cb9 	.word	0x00000cb9
    11b4:	00000cbd 	.word	0x00000cbd

000011b8 <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    11b8:	b530      	push	{r4, r5, lr}
    11ba:	4615      	mov	r5, r2
    11bc:	b083      	sub	sp, #12
    11be:	4604      	mov	r4, r0
    11c0:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    11c2:	f7ff fdf1 	bl	da8 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11c6:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    11c8:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11ca:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11ce:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    11d0:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11d4:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11d6:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11da:	22f3      	movs	r2, #243	; 0xf3
    11dc:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11de:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    11e2:	b003      	add	sp, #12
    11e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11e8:	f7ff bf2c 	b.w	1044 <PA12::txRxPacket(int, int, int)>

000011ec <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    11ec:	b530      	push	{r4, r5, lr}
    11ee:	4615      	mov	r5, r2
    11f0:	b083      	sub	sp, #12
    11f2:	4604      	mov	r4, r0
    11f4:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    11f6:	f7ff fdd7 	bl	da8 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11fa:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    11fc:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11fe:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1202:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1204:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1208:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    120a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    120e:	22f3      	movs	r2, #243	; 0xf3
    1210:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1212:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1216:	b003      	add	sp, #12
    1218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    121c:	f7ff bf12 	b.w	1044 <PA12::txRxPacket(int, int, int)>

00001220 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    1220:	b510      	push	{r4, lr}
    1222:	b082      	sub	sp, #8
    1224:	4604      	mov	r4, r0
    1226:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1228:	f7ff fdbe 	bl	da8 <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    122c:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    122e:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1230:	22f2      	movs	r2, #242	; 0xf2
    1232:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1234:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1238:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    123a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    123e:	f7ff ff01 	bl	1044 <PA12::txRxPacket(int, int, int)>
    1242:	b138      	cbz	r0, 1254 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1244:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1246:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    124a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    124e:	b280      	uxth	r0, r0
}
    1250:	b002      	add	sp, #8
    1252:	bd10      	pop	{r4, pc}
		return 0xffff;
    1254:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1258:	b002      	add	sp, #8
    125a:	bd10      	pop	{r4, pc}

0000125c <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    125c:	2810      	cmp	r0, #16
    125e:	dc11      	bgt.n	1284 <irp_get_baudrate+0x28>
    1260:	2801      	cmp	r0, #1
    1262:	dd0c      	ble.n	127e <irp_get_baudrate+0x22>
    1264:	3802      	subs	r0, #2
    1266:	280e      	cmp	r0, #14
    1268:	d809      	bhi.n	127e <irp_get_baudrate+0x22>
    126a:	e8df f000 	tbb	[pc, r0]
    126e:	0819      	.short	0x0819
    1270:	0808081b 	.word	0x0808081b
    1274:	08080817 	.word	0x08080817
    1278:	08080808 	.word	0x08080808
    127c:	1d          	.byte	0x1d
    127d:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    127e:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1282:	4770      	bx	lr
    switch(baudnum)
    1284:	2840      	cmp	r0, #64	; 0x40
    1286:	d006      	beq.n	1296 <irp_get_baudrate+0x3a>
        temp= 9600; break;
    1288:	2880      	cmp	r0, #128	; 0x80
    128a:	bf14      	ite	ne
    128c:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    1290:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    1294:	4770      	bx	lr
    switch(baudnum)
    1296:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    129a:	4770      	bx	lr
        temp= 2000000; break;
    129c:	4804      	ldr	r0, [pc, #16]	; (12b0 <irp_get_baudrate+0x54>)
    129e:	4770      	bx	lr
        temp= 4000000; break;
    12a0:	4804      	ldr	r0, [pc, #16]	; (12b4 <irp_get_baudrate+0x58>)
    12a2:	4770      	bx	lr
        temp= 2500000; break;
    12a4:	4804      	ldr	r0, [pc, #16]	; (12b8 <irp_get_baudrate+0x5c>)
    12a6:	4770      	bx	lr
        temp= 115200; break;
    12a8:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    12ac:	4770      	bx	lr
    12ae:	bf00      	nop
    12b0:	001e8480 	.word	0x001e8480
    12b4:	003d0900 	.word	0x003d0900
    12b8:	002625a0 	.word	0x002625a0

000012bc <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    12bc:	b410      	push	{r4}
	if (port) {
    12be:	6904      	ldr	r4, [r0, #16]
    12c0:	b12c      	cbz	r4, 12ce <SoftwareSerial::begin(unsigned long)+0x12>
		port->begin(speed);
    12c2:	4620      	mov	r0, r4
    12c4:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    12c6:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    12ca:	f000 bfe7 	b.w	229c <HardwareSerial::begin(unsigned long, unsigned short)>
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    12ce:	460b      	mov	r3, r1
    12d0:	4a0a      	ldr	r2, [pc, #40]	; (12fc <SoftwareSerial::begin(unsigned long)+0x40>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    12d6:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    12da:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    12de:	fbb2 f3f3 	udiv	r3, r2, r3
    12e2:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12e4:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    12e8:	4a05      	ldr	r2, [pc, #20]	; (1300 <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    12ee:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    12f2:	6813      	ldr	r3, [r2, #0]
    12f4:	f043 0301 	orr.w	r3, r3, #1
    12f8:	6013      	str	r3, [r2, #0]
}
    12fa:	4770      	bx	lr
    12fc:	23c34600 	.word	0x23c34600
    1300:	e0001000 	.word	0xe0001000

00001304 <Adafruit_INA260::Adafruit_INA260()>:
Adafruit_INA260::Adafruit_INA260(void) {}
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    130c:	b086      	sub	sp, #24
    130e:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1310:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1312:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1316:	f002 f9af 	bl	3678 <operator new(unsigned int)>
    131a:	4604      	mov	r4, r0
    131c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1320:	f000 f9d2 	bl	16c8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin()) {
    1324:	2101      	movs	r1, #1
    1326:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1328:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    132a:	f000 f9d7 	bl	16dc <Adafruit_I2CDevice::begin(bool)>
    132e:	b920      	cbnz	r0, 133a <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    1330:	2400      	movs	r4, #0
}
    1332:	4620      	mov	r0, r4
    1334:	b006      	add	sp, #24
    1336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    133a:	2601      	movs	r6, #1
    133c:	4604      	mov	r4, r0
    133e:	2018      	movs	r0, #24
    1340:	f002 f99a 	bl	3678 <operator new(unsigned int)>
    1344:	2302      	movs	r3, #2
    1346:	22ff      	movs	r2, #255	; 0xff
    1348:	4680      	mov	r8, r0
    134a:	e9cd 6600 	strd	r6, r6, [sp]
    134e:	68e9      	ldr	r1, [r5, #12]
    1350:	f000 f898 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1354:	2018      	movs	r0, #24
    1356:	f002 f98f 	bl	3678 <operator new(unsigned int)>
    135a:	2302      	movs	r3, #2
    135c:	22fe      	movs	r2, #254	; 0xfe
    135e:	4607      	mov	r7, r0
    1360:	e9cd 6600 	strd	r6, r6, [sp]
    1364:	68e9      	ldr	r1, [r5, #12]
    1366:	f000 f88d 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    136a:	2008      	movs	r0, #8
    136c:	f002 f984 	bl	3678 <operator new(unsigned int)>
    1370:	4641      	mov	r1, r8
    1372:	2304      	movs	r3, #4
    1374:	220c      	movs	r2, #12
    1376:	4680      	mov	r8, r0
    1378:	f000 f97c 	bl	1674 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    137c:	4638      	mov	r0, r7
    137e:	f000 f957 	bl	1630 <Adafruit_BusIO_Register::read()>
    1382:	f245 4349 	movw	r3, #21577	; 0x5449
    1386:	4298      	cmp	r0, r3
    1388:	d1d2      	bne.n	1330 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    138a:	4640      	mov	r0, r8
    138c:	f000 f976 	bl	167c <Adafruit_BusIO_RegisterBits::read()>
    1390:	f240 2327 	movw	r3, #551	; 0x227
    1394:	4298      	cmp	r0, r3
    1396:	d1cb      	bne.n	1330 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    1398:	2018      	movs	r0, #24
    139a:	f002 f96d 	bl	3678 <operator new(unsigned int)>
    139e:	4607      	mov	r7, r0
    13a0:	2302      	movs	r3, #2
    13a2:	2200      	movs	r2, #0
    13a4:	e9cd 6600 	strd	r6, r6, [sp]
    13a8:	68e9      	ldr	r1, [r5, #12]
    13aa:	f000 f86b 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    13ae:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    13b0:	2018      	movs	r0, #24
    13b2:	f002 f961 	bl	3678 <operator new(unsigned int)>
    13b6:	4607      	mov	r7, r0
    13b8:	2302      	movs	r3, #2
    13ba:	2206      	movs	r2, #6
    13bc:	e9cd 6600 	strd	r6, r6, [sp]
    13c0:	68e9      	ldr	r1, [r5, #12]
    13c2:	f000 f85f 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    13c6:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    13c8:	2018      	movs	r0, #24
    13ca:	f002 f955 	bl	3678 <operator new(unsigned int)>
    13ce:	4607      	mov	r7, r0
    13d0:	2302      	movs	r3, #2
    13d2:	2207      	movs	r2, #7
    13d4:	e9cd 6600 	strd	r6, r6, [sp]
    13d8:	68e9      	ldr	r1, [r5, #12]
    13da:	f000 f853 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    13de:	230f      	movs	r3, #15
    13e0:	6829      	ldr	r1, [r5, #0]
    13e2:	4632      	mov	r2, r6
    13e4:	a804      	add	r0, sp, #16
  AlertLimit =
    13e6:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    13e8:	f000 f944 	bl	1674 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    13ec:	4631      	mov	r1, r6
    13ee:	a804      	add	r0, sp, #16
    13f0:	f000 f952 	bl	1698 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    13f4:	2002      	movs	r0, #2
    13f6:	f001 ffd5 	bl	33a4 <delay>
  return true;
    13fa:	e79a      	b.n	1332 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

000013fc <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    13fc:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    13fe:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1400:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1402:	2401      	movs	r4, #1
    1404:	68c1      	ldr	r1, [r0, #12]
    1406:	461a      	mov	r2, r3
    1408:	a802      	add	r0, sp, #8
    140a:	e9cd 4400 	strd	r4, r4, [sp]
    140e:	f000 f839 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    1412:	a802      	add	r0, sp, #8
    1414:	f000 f90c 	bl	1630 <Adafruit_BusIO_Register::read()>
    1418:	ee06 0a90 	vmov	s13, r0
    141c:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1420:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    1424:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1428:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    142c:	b008      	add	sp, #32
    142e:	bd10      	pop	{r4, pc}

00001430 <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    1430:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1432:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    1434:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1436:	68c1      	ldr	r1, [r0, #12]
    1438:	2302      	movs	r3, #2
    143a:	2203      	movs	r2, #3
    143c:	a802      	add	r0, sp, #8
    143e:	e9cd 4400 	strd	r4, r4, [sp]
    1442:	f000 f81f 	bl	1484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    1446:	a802      	add	r0, sp, #8
    1448:	f000 f8f2 	bl	1630 <Adafruit_BusIO_Register::read()>
    144c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1450:	fa00 f304 	lsl.w	r3, r0, r4
    1454:	ee00 3a10 	vmov	s0, r3
}
    1458:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    145c:	b008      	add	sp, #32
    145e:	bd10      	pop	{r4, pc}

00001460 <Adafruit_INA260::conversionReady()>:
/*!
    @brief Checks if the most recent one shot measurement has completed
    @return true if the conversion has completed
*/
/**************************************************************************/
bool Adafruit_INA260::conversionReady(void) {
    1460:	b500      	push	{lr}
    1462:	b083      	sub	sp, #12
  Adafruit_I2CRegisterBits conversion_ready =
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    1464:	6841      	ldr	r1, [r0, #4]
    1466:	2303      	movs	r3, #3
    1468:	2201      	movs	r2, #1
    146a:	4668      	mov	r0, sp
    146c:	f000 f902 	bl	1674 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1470:	4668      	mov	r0, sp
    1472:	f000 f903 	bl	167c <Adafruit_BusIO_RegisterBits::read()>
}
    1476:	3800      	subs	r0, #0
    1478:	bf18      	it	ne
    147a:	2001      	movne	r0, #1
    147c:	b003      	add	sp, #12
    147e:	f85d fb04 	ldr.w	pc, [sp], #4
    1482:	bf00      	nop

00001484 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    1484:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    1486:	2300      	movs	r3, #0
  _address = reg_addr;
    1488:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    148a:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    148c:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1490:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1492:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    1496:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1498:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    149a:	7343      	strb	r3, [r0, #13]
}
    149c:	4770      	bx	lr
    149e:	bf00      	nop

000014a0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    14a0:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    14a4:	4603      	mov	r3, r0
  if (_i2cdevice) {
    14a6:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    14a8:	b570      	push	{r4, r5, r6, lr}
    14aa:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    14ac:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    14b0:	b140      	cbz	r0, 14c4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    14b2:	7b5c      	ldrb	r4, [r3, #13]
    14b4:	ab03      	add	r3, sp, #12
    14b6:	e9cd 3400 	strd	r3, r4, [sp]
    14ba:	2301      	movs	r3, #1
    14bc:	f000 f92a 	bl	1714 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    14c0:	b004      	add	sp, #16
    14c2:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    14c4:	6858      	ldr	r0, [r3, #4]
    14c6:	2800      	cmp	r0, #0
    14c8:	d0fa      	beq.n	14c0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    14ca:	7a1e      	ldrb	r6, [r3, #8]
    14cc:	fa5f f58c 	uxtb.w	r5, ip
    14d0:	2e03      	cmp	r6, #3
    14d2:	d021      	beq.n	1518 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    14d4:	460c      	mov	r4, r1
    14d6:	4696      	mov	lr, r2
    14d8:	b176      	cbz	r6, 14f8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    14da:	2e02      	cmp	r6, #2
    14dc:	d111      	bne.n	1502 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    14de:	f065 057f 	orn	r5, r5, #127	; 0x7f
    14e2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    14e6:	7b5d      	ldrb	r5, [r3, #13]
    14e8:	4672      	mov	r2, lr
    14ea:	ab03      	add	r3, sp, #12
    14ec:	4621      	mov	r1, r4
    14ee:	9500      	str	r5, [sp, #0]
    14f0:	f000 fb3c 	bl	1b6c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    14f4:	b004      	add	sp, #16
    14f6:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    14f8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    14fc:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1500:	e7f1      	b.n	14e6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    1502:	2e01      	cmp	r6, #1
    1504:	d1ef      	bne.n	14e6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    1506:	f89d 200c 	ldrb.w	r2, [sp, #12]
    150a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    150e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1512:	f88d 200c 	strb.w	r2, [sp, #12]
    1516:	e7e6      	b.n	14e6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1518:	7b5c      	ldrb	r4, [r3, #13]
    151a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    151e:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1520:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1524:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    1526:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    152a:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    152c:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1530:	f000 fb1c 	bl	1b6c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    1534:	e7c4      	b.n	14c0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    1536:	bf00      	nop

00001538 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    1538:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    153a:	b962      	cbnz	r2, 1556 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    153c:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    153e:	2c04      	cmp	r4, #4
    1540:	d824      	bhi.n	158c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1542:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1544:	b95c      	cbnz	r4, 155e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    1546:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    154a:	4622      	mov	r2, r4
    154c:	4671      	mov	r1, lr
}
    154e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    1552:	f7ff bfa5 	b.w	14a0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    1556:	2a04      	cmp	r2, #4
    1558:	4614      	mov	r4, r2
    155a:	d817      	bhi.n	158c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    155c:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    155e:	f100 0e0f 	add.w	lr, r0, #15
    1562:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    1566:	7b85      	ldrb	r5, [r0, #14]
    1568:	f100 020e 	add.w	r2, r0, #14
    156c:	fa50 f383 	uxtab	r3, r0, r3
    1570:	46f4      	mov	ip, lr
    1572:	b94d      	cbnz	r5, 1588 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    1574:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    1578:	3b01      	subs	r3, #1
    value >>= 8;
    157a:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    157c:	f10c 0c01 	add.w	ip, ip, #1
    1580:	4293      	cmp	r3, r2
    1582:	d0e2      	beq.n	154a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    1584:	2d00      	cmp	r5, #0
    1586:	d0f5      	beq.n	1574 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    1588:	7019      	strb	r1, [r3, #0]
    158a:	e7f5      	b.n	1578 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    158c:	2000      	movs	r0, #0
}
    158e:	bd30      	pop	{r4, r5, pc}

00001590 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1590:	b510      	push	{r4, lr}
    1592:	4684      	mov	ip, r0
    1594:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1596:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1598:	4614      	mov	r4, r2
    159a:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    159c:	b2c2      	uxtb	r2, r0
    159e:	f8ad 000c 	strh.w	r0, [sp, #12]
    15a2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    15a6:	f8dc 0000 	ldr.w	r0, [ip]
    15aa:	b148      	cbz	r0, 15c0 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    15ac:	2100      	movs	r1, #0
    15ae:	f89c 200d 	ldrb.w	r2, [ip, #13]
    15b2:	9400      	str	r4, [sp, #0]
    15b4:	9101      	str	r1, [sp, #4]
    15b6:	a903      	add	r1, sp, #12
    15b8:	f000 f918 	bl	17ec <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    15bc:	b004      	add	sp, #16
    15be:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    15c0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    15c4:	2800      	cmp	r0, #0
    15c6:	d0f9      	beq.n	15bc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    15c8:	f89c 1008 	ldrb.w	r1, [ip, #8]
    15cc:	2903      	cmp	r1, #3
    15ce:	d01e      	beq.n	160e <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    15d0:	b179      	cbz	r1, 15f2 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    15d2:	2902      	cmp	r1, #2
    15d4:	d112      	bne.n	15fc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    15d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    15da:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    15de:	21ff      	movs	r1, #255	; 0xff
    15e0:	f89c 200d 	ldrb.w	r2, [ip, #13]
    15e4:	9400      	str	r4, [sp, #0]
    15e6:	9101      	str	r1, [sp, #4]
    15e8:	a903      	add	r1, sp, #12
    15ea:	f000 fb1b 	bl	1c24 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    15ee:	b004      	add	sp, #16
    15f0:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    15f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    15f6:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    15fa:	e7f0      	b.n	15de <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    15fc:	2901      	cmp	r1, #1
    15fe:	d1ee      	bne.n	15de <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1600:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1604:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1608:	f88d 200c 	strb.w	r2, [sp, #12]
    160c:	e7e7      	b.n	15de <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    160e:	21ff      	movs	r1, #255	; 0xff
    1610:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1612:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    1616:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    161a:	f89c 200d 	ldrb.w	r2, [ip, #13]
    161e:	9101      	str	r1, [sp, #4]
    1620:	a903      	add	r1, sp, #12
    1622:	3201      	adds	r2, #1
      addrbuffer[0] =
    1624:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1628:	f000 fafc 	bl	1c24 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    162c:	e7c6      	b.n	15bc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    162e:	bf00      	nop

00001630 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1630:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    1632:	f100 050f 	add.w	r5, r0, #15
    1636:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    1638:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    163a:	4629      	mov	r1, r5
    163c:	f7ff ffa8 	bl	1590 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1640:	b1a0      	cbz	r0, 166c <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    1642:	7b20      	ldrb	r0, [r4, #12]
    1644:	b170      	cbz	r0, 1664 <Adafruit_BusIO_Register::read()+0x34>
    1646:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1648:	7ba6      	ldrb	r6, [r4, #14]
    164a:	4629      	mov	r1, r5
    164c:	f104 020e 	add.w	r2, r4, #14
    1650:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    1652:	2000      	movs	r0, #0
    value <<= 8;
    1654:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    1656:	b936      	cbnz	r6, 1666 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1658:	781c      	ldrb	r4, [r3, #0]
    165a:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    165c:	3b01      	subs	r3, #1
    165e:	3101      	adds	r1, #1
    1660:	4293      	cmp	r3, r2
    1662:	d1f7      	bne.n	1654 <Adafruit_BusIO_Register::read()+0x24>
}
    1664:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    1666:	780c      	ldrb	r4, [r1, #0]
    1668:	4320      	orrs	r0, r4
    166a:	e7f7      	b.n	165c <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    166c:	f04f 30ff 	mov.w	r0, #4294967295
}
    1670:	bd70      	pop	{r4, r5, r6, pc}
    1672:	bf00      	nop

00001674 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    1674:	6001      	str	r1, [r0, #0]
  _bits = bits;
    1676:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    1678:	7143      	strb	r3, [r0, #5]
}
    167a:	4770      	bx	lr

0000167c <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    167c:	b510      	push	{r4, lr}
    167e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    1680:	6800      	ldr	r0, [r0, #0]
    1682:	f7ff ffd5 	bl	1630 <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    1686:	2301      	movs	r3, #1
    1688:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    168a:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    168c:	408b      	lsls	r3, r1
  val >>= _shift;
    168e:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    1690:	3b01      	subs	r3, #1
}
    1692:	4018      	ands	r0, r3
    1694:	bd10      	pop	{r4, pc}
    1696:	bf00      	nop

00001698 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1698:	b538      	push	{r3, r4, r5, lr}
    169a:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    169c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    169e:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    16a0:	f7ff ffc6 	bl	1630 <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    16a4:	792a      	ldrb	r2, [r5, #4]
    16a6:	2301      	movs	r3, #1
    16a8:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    16aa:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    16ac:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    16ae:	3b01      	subs	r3, #1
  data &= mask;
    16b0:	401c      	ands	r4, r3
  mask <<= _shift;
    16b2:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    16b4:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    16b6:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    16ba:	7b2a      	ldrb	r2, [r5, #12]
    16bc:	4628      	mov	r0, r5
    16be:	4321      	orrs	r1, r4
}
    16c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    16c4:	f7ff bf38 	b.w	1538 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

000016c8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    16c8:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    16cc:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    16ce:	2220      	movs	r2, #32
  _addr = addr;
    16d0:	7001      	strb	r1, [r0, #0]
  _begun = false;
    16d2:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    16d6:	60c2      	str	r2, [r0, #12]
}
    16d8:	4770      	bx	lr
    16da:	bf00      	nop

000016dc <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    16dc:	b538      	push	{r3, r4, r5, lr}
    16de:	4604      	mov	r4, r0
  _wire->begin();
    16e0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    16e2:	460d      	mov	r5, r1
  _wire->begin();
    16e4:	f008 fdc8 	bl	a278 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    16e8:	2101      	movs	r1, #1
    16ea:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    16ec:	b90d      	cbnz	r5, 16f2 <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    16ee:	4608      	mov	r0, r1
}
    16f0:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    16f2:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    16f4:	6862      	ldr	r2, [r4, #4]
    16f6:	4088      	lsls	r0, r1
		transmitting = 1;
    16f8:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    16fc:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1700:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    1704:	6860      	ldr	r0, [r4, #4]
    1706:	f7ff f925 	bl	954 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    170a:	fab0 f080 	clz	r0, r0
    170e:	0940      	lsrs	r0, r0, #5
}
    1710:	bd38      	pop	{r3, r4, r5, pc}
    1712:	bf00      	nop

00001714 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1718:	9f07      	ldr	r7, [sp, #28]
    171a:	4615      	mov	r5, r2
    171c:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    171e:	68c3      	ldr	r3, [r0, #12]
    1720:	443a      	add	r2, r7
    1722:	429a      	cmp	r2, r3
    1724:	d816      	bhi.n	1754 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    1726:	7802      	ldrb	r2, [r0, #0]
    1728:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    172a:	6843      	ldr	r3, [r0, #4]
    172c:	460e      	mov	r6, r1
    172e:	0052      	lsls	r2, r2, #1
    1730:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    1734:	2201      	movs	r2, #1
    1736:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    173a:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    173e:	b167      	cbz	r7, 175a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1740:	9b06      	ldr	r3, [sp, #24]
    1742:	b153      	cbz	r3, 175a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    1744:	6840      	ldr	r0, [r0, #4]
    1746:	463a      	mov	r2, r7
    1748:	9906      	ldr	r1, [sp, #24]
    174a:	6803      	ldr	r3, [r0, #0]
    174c:	685b      	ldr	r3, [r3, #4]
    174e:	4798      	blx	r3
    1750:	4287      	cmp	r7, r0
    1752:	d002      	beq.n	175a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    1754:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    1756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    175a:	6860      	ldr	r0, [r4, #4]
    175c:	4631      	mov	r1, r6
    175e:	462a      	mov	r2, r5
    1760:	6803      	ldr	r3, [r0, #0]
    1762:	685b      	ldr	r3, [r3, #4]
    1764:	4798      	blx	r3
    1766:	4285      	cmp	r5, r0
    1768:	d1f4      	bne.n	1754 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    176a:	4641      	mov	r1, r8
    176c:	6860      	ldr	r0, [r4, #4]
    176e:	f7ff f8f1 	bl	954 <TwoWire::endTransmission(unsigned char)>
    1772:	fab0 f080 	clz	r0, r0
    1776:	0940      	lsrs	r0, r0, #5
}
    1778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000177c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1780:	4615      	mov	r5, r2
    1782:	4606      	mov	r6, r0
    1784:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1786:	b2d2      	uxtb	r2, r2
    1788:	7801      	ldrb	r1, [r0, #0]
    178a:	6840      	ldr	r0, [r0, #4]
    178c:	f7ff f960 	bl	a50 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    1790:	4285      	cmp	r5, r0
    1792:	d124      	bne.n	17de <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1794:	b305      	cbz	r5, 17d8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    1796:	2400      	movs	r4, #0
    1798:	f8df 904c 	ldr.w	r9, [pc, #76]	; 17e8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    179c:	46a0      	mov	r8, r4
    179e:	e013      	b.n	17c8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    17a0:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    17a4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    17a8:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    17aa:	f10c 0201 	add.w	r2, ip, #1
    17ae:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    17b0:	d918      	bls.n	17e4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    17b2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    17b6:	f89c 301a 	ldrb.w	r3, [ip, #26]
    17ba:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    17bc:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    17c0:	b2a4      	uxth	r4, r4
    17c2:	42a5      	cmp	r5, r4
    17c4:	46a0      	mov	r8, r4
    17c6:	d907      	bls.n	17d8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    17c8:	6870      	ldr	r0, [r6, #4]
    17ca:	6802      	ldr	r2, [r0, #0]
    17cc:	6952      	ldr	r2, [r2, #20]
    17ce:	454a      	cmp	r2, r9
    17d0:	d0e6      	beq.n	17a0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    17d2:	4790      	blx	r2
    17d4:	b2c3      	uxtb	r3, r0
    17d6:	e7f0      	b.n	17ba <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    17d8:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    17da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    17de:	2000      	movs	r0, #0
}
    17e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    17e4:	23ff      	movs	r3, #255	; 0xff
    17e6:	e7e8      	b.n	17ba <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    17e8:	000006fd 	.word	0x000006fd

000017ec <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    17ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    17f0:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    17f2:	b082      	sub	sp, #8
    17f4:	461f      	mov	r7, r3
    17f6:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    17f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    17fc:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    17fe:	e9cd 4400 	strd	r4, r4, [sp]
    1802:	f7ff ff87 	bl	1714 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    1806:	b928      	cbnz	r0, 1814 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    1808:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    180c:	4640      	mov	r0, r8
    180e:	b002      	add	sp, #8
    1810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    1814:	4680      	mov	r8, r0
    1816:	b915      	cbnz	r5, 181e <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    1818:	e7f8      	b.n	180c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    181a:	42a5      	cmp	r5, r4
    181c:	d9f6      	bls.n	180c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    181e:	1b2a      	subs	r2, r5, r4
    1820:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    1822:	1939      	adds	r1, r7, r4
    1824:	4630      	mov	r0, r6
    1826:	429a      	cmp	r2, r3
    1828:	bf28      	it	cs
    182a:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    182c:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    182e:	42a3      	cmp	r3, r4
    pos += read_len;
    1830:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    1832:	bf8c      	ite	hi
    1834:	2300      	movhi	r3, #0
    1836:	2301      	movls	r3, #1
    1838:	f7ff ffa0 	bl	177c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    183c:	2800      	cmp	r0, #0
    183e:	d1ec      	bne.n	181a <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    1840:	e7e2      	b.n	1808 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    1842:	bf00      	nop

00001844 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    1844:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    1846:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    184c:	bf0c      	ite	eq
    184e:	2301      	moveq	r3, #1
    1850:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1852:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    1854:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1858:	4e63      	ldr	r6, [pc, #396]	; (19e8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    185a:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    185e:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1860:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1862:	bf0c      	ite	eq
    1864:	f04f 0a01 	moveq.w	sl, #1
    1868:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    186c:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    1870:	2a00      	cmp	r2, #0
    1872:	f000 80b6 	beq.w	19e2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    1876:	3a01      	subs	r2, #1
    1878:	4604      	mov	r4, r0
    187a:	b2f6      	uxtb	r6, r6
    187c:	4688      	mov	r8, r1
    187e:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    1880:	f8df b170 	ldr.w	fp, [pc, #368]	; 19f4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    1884:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    1886:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    1888:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    188a:	2e00      	cmp	r6, #0
    188c:	d141      	bne.n	1912 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    188e:	7b63      	ldrb	r3, [r4, #13]
    1890:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1894:	d175      	bne.n	1982 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    1896:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    189a:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    189e:	bf14      	ite	ne
    18a0:	2301      	movne	r3, #1
    18a2:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    18a4:	1c42      	adds	r2, r0, #1
    18a6:	d02f      	beq.n	1908 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    18a8:	4553      	cmp	r3, sl
    18aa:	d02d      	beq.n	1908 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    18ac:	4619      	mov	r1, r3
    18ae:	b2c0      	uxtb	r0, r0
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	f001 fdcb 	bl	344c <digitalWrite>
        towrite = send & b;
    18b6:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    18b8:	2101      	movs	r1, #1
    18ba:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    18bc:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    18be:	f001 fdc5 	bl	344c <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    18c2:	f994 0011 	ldrsb.w	r0, [r4, #17]
    18c6:	1c42      	adds	r2, r0, #1
    18c8:	d004      	beq.n	18d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    18ca:	b2c0      	uxtb	r0, r0
    18cc:	f001 fde8 	bl	34a0 <digitalRead>
    18d0:	b100      	cbz	r0, 18d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    18d2:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    18d4:	2100      	movs	r1, #0
    18d6:	7be0      	ldrb	r0, [r4, #15]
    18d8:	f001 fdb8 	bl	344c <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    18dc:	f994 3011 	ldrsb.w	r3, [r4, #17]
    18e0:	3301      	adds	r3, #1
        buffer[i] = reply;
    18e2:	bf18      	it	ne
    18e4:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    18e8:	7b23      	ldrb	r3, [r4, #12]
    18ea:	b94b      	cbnz	r3, 1900 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    18ec:	006d      	lsls	r5, r5, #1
    18ee:	b2ed      	uxtb	r5, r5
    18f0:	2d00      	cmp	r5, #0
    18f2:	d1ca      	bne.n	188a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    18f4:	9b03      	ldr	r3, [sp, #12]
    18f6:	4598      	cmp	r8, r3
    18f8:	d073      	beq.n	19e2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    18fa:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    18fe:	e7c2      	b.n	1886 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    1900:	086d      	lsrs	r5, r5, #1
    1902:	2d00      	cmp	r5, #0
    1904:	d1c1      	bne.n	188a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    1906:	e7f5      	b.n	18f4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    1908:	2101      	movs	r1, #1
    190a:	7be0      	ldrb	r0, [r4, #15]
    190c:	f001 fd9e 	bl	344c <digitalWrite>
        if (bitdelay_us) {
    1910:	e7d7      	b.n	18c2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1912:	4b36      	ldr	r3, [pc, #216]	; (19ec <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1914:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1918:	681a      	ldr	r2, [r3, #0]
    191a:	4b35      	ldr	r3, [pc, #212]	; (19f0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    191c:	fba3 3202 	umull	r3, r2, r3, r2
    1920:	0c92      	lsrs	r2, r2, #18
    1922:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1926:	f8db 3004 	ldr.w	r3, [fp, #4]
    192a:	1a5b      	subs	r3, r3, r1
    192c:	429a      	cmp	r2, r3
    192e:	d8fa      	bhi.n	1926 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1930:	7b63      	ldrb	r3, [r4, #13]
    1932:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1936:	d140      	bne.n	19ba <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    1938:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    193c:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    1940:	bf14      	ite	ne
    1942:	2101      	movne	r1, #1
    1944:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1946:	1c43      	adds	r3, r0, #1
    1948:	d007      	beq.n	195a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    194a:	4551      	cmp	r1, sl
    194c:	d005      	beq.n	195a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    194e:	b2c0      	uxtb	r0, r0
    1950:	9101      	str	r1, [sp, #4]
    1952:	f001 fd7b 	bl	344c <digitalWrite>
        towrite = send & b;
    1956:	9901      	ldr	r1, [sp, #4]
    1958:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    195a:	2101      	movs	r1, #1
    195c:	7be0      	ldrb	r0, [r4, #15]
    195e:	f001 fd75 	bl	344c <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1962:	4b22      	ldr	r3, [pc, #136]	; (19ec <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1964:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1968:	681a      	ldr	r2, [r3, #0]
    196a:	4b21      	ldr	r3, [pc, #132]	; (19f0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    196c:	fba3 3202 	umull	r3, r2, r3, r2
    1970:	0c92      	lsrs	r2, r2, #18
    1972:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1976:	f8db 3004 	ldr.w	r3, [fp, #4]
    197a:	1a5b      	subs	r3, r3, r1
    197c:	429a      	cmp	r2, r3
    197e:	d8fa      	bhi.n	1976 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    1980:	e79f      	b.n	18c2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    1982:	2101      	movs	r1, #1
    1984:	7be0      	ldrb	r0, [r4, #15]
    1986:	f001 fd61 	bl	344c <digitalWrite>
        if (_mosi != -1) {
    198a:	f994 0010 	ldrsb.w	r0, [r4, #16]
    198e:	1c43      	adds	r3, r0, #1
    1990:	d004      	beq.n	199c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    1992:	b2c0      	uxtb	r0, r0
    1994:	ea09 0105 	and.w	r1, r9, r5
    1998:	f001 fd58 	bl	344c <digitalWrite>
        digitalWrite(_sck, LOW);
    199c:	2100      	movs	r1, #0
    199e:	7be0      	ldrb	r0, [r4, #15]
    19a0:	f001 fd54 	bl	344c <digitalWrite>
        if (_miso != -1) {
    19a4:	f994 0011 	ldrsb.w	r0, [r4, #17]
    19a8:	1c41      	adds	r1, r0, #1
    19aa:	d09d      	beq.n	18e8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    19ac:	b2c0      	uxtb	r0, r0
    19ae:	f001 fd77 	bl	34a0 <digitalRead>
    19b2:	2800      	cmp	r0, #0
    19b4:	d092      	beq.n	18dc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    19b6:	432f      	orrs	r7, r5
    19b8:	e790      	b.n	18dc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    19ba:	2101      	movs	r1, #1
    19bc:	7be0      	ldrb	r0, [r4, #15]
    19be:	f001 fd45 	bl	344c <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    19c2:	4b0a      	ldr	r3, [pc, #40]	; (19ec <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    19c4:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    19c8:	681a      	ldr	r2, [r3, #0]
    19ca:	4b09      	ldr	r3, [pc, #36]	; (19f0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    19cc:	fba3 3202 	umull	r3, r2, r3, r2
    19d0:	0c92      	lsrs	r2, r2, #18
    19d2:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    19d6:	f8db 3004 	ldr.w	r3, [fp, #4]
    19da:	1a5b      	subs	r3, r3, r1
    19dc:	429a      	cmp	r2, r3
    19de:	d8fa      	bhi.n	19d6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    19e0:	e7d3      	b.n	198a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    19e2:	b005      	add	sp, #20
    19e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19e8:	0007a120 	.word	0x0007a120
    19ec:	20000edc 	.word	0x20000edc
    19f0:	431bde83 	.word	0x431bde83
    19f4:	e0001000 	.word	0xe0001000

000019f8 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    19f8:	b430      	push	{r4, r5}
    19fa:	b082      	sub	sp, #8
    19fc:	460c      	mov	r4, r1
    19fe:	ab02      	add	r3, sp, #8
    1a00:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1a04:	7cc3      	ldrb	r3, [r0, #19]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d030      	beq.n	1a6c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1a0a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1a0c:	7cc3      	ldrb	r3, [r0, #19]
    1a0e:	07da      	lsls	r2, r3, #31
    1a10:	d508      	bpl.n	1a24 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1a12:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a16:	6945      	ldr	r5, [r0, #20]
    1a18:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1a1c:	402a      	ands	r2, r5
    1a1e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1a20:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1a24:	079d      	lsls	r5, r3, #30
    1a26:	d508      	bpl.n	1a3a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1a28:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a2c:	6985      	ldr	r5, [r0, #24]
    1a2e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    1a32:	402a      	ands	r2, r5
    1a34:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1a36:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1a3a:	0759      	lsls	r1, r3, #29
    1a3c:	d508      	bpl.n	1a50 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1a3e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a42:	69c5      	ldr	r5, [r0, #28]
    1a44:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1a48:	402a      	ands	r2, r5
    1a4a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1a4c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1a50:	071a      	lsls	r2, r3, #28
    1a52:	d508      	bpl.n	1a66 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1a54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a58:	6a05      	ldr	r5, [r0, #32]
    1a5a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1a5e:	402a      	ands	r2, r5
    1a60:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1a62:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1a66:	06db      	lsls	r3, r3, #27
    1a68:	d42f      	bmi.n	1aca <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1a6a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1a6c:	6883      	ldr	r3, [r0, #8]
    1a6e:	429c      	cmp	r4, r3
    1a70:	d035      	beq.n	1ade <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1a72:	4b22      	ldr	r3, [pc, #136]	; (1afc <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1a74:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1a76:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1a78:	4a21      	ldr	r2, [pc, #132]	; (1b00 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1a7a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1a7e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1a82:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1a86:	3301      	adds	r3, #1
    1a88:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1a8c:	b1cc      	cbz	r4, 1ac2 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1a8e:	4294      	cmp	r4, r2
    1a90:	d827      	bhi.n	1ae2 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1a92:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1a96:	fbb2 f2f3 	udiv	r2, r2, r3
    1a9a:	4294      	cmp	r4, r2
    1a9c:	d32c      	bcc.n	1af8 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1a9e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1aa2:	d320      	bcc.n	1ae6 <SPIClass::beginTransaction(SPISettings)+0xee>
    1aa4:	4c17      	ldr	r4, [pc, #92]	; (1b04 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1aa6:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1aa8:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1aaa:	2203      	movs	r2, #3
		port().CR = 0;
    1aac:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1aae:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1ab0:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1ab2:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1ab4:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1ab6:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1ab8:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1aba:	611a      	str	r2, [r3, #16]
	}
    1abc:	b002      	add	sp, #8
    1abe:	bc30      	pop	{r4, r5}
    1ac0:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1ac2:	4299      	cmp	r1, r3
    1ac4:	d3ef      	bcc.n	1aa6 <SPIClass::beginTransaction(SPISettings)+0xae>
    1ac6:	1c53      	adds	r3, r2, #1
    1ac8:	e7e9      	b.n	1a9e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1aca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1ace:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1ad0:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1ad4:	400b      	ands	r3, r1
    1ad6:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1ad8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1adc:	e7c5      	b.n	1a6a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1ade:	68c4      	ldr	r4, [r0, #12]
    1ae0:	e7e2      	b.n	1aa8 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1ae2:	2400      	movs	r4, #0
    1ae4:	e7df      	b.n	1aa6 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1ae6:	2b02      	cmp	r3, #2
    1ae8:	d9fb      	bls.n	1ae2 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1aea:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1aec:	085a      	lsrs	r2, r3, #1
    1aee:	0214      	lsls	r4, r2, #8
    1af0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1af4:	431c      	orrs	r4, r3
    1af6:	e7d6      	b.n	1aa6 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1af8:	461a      	mov	r2, r3
    1afa:	e7e4      	b.n	1ac6 <SPIClass::beginTransaction(SPISettings)+0xce>
    1afc:	400fc000 	.word	0x400fc000
    1b00:	20000630 	.word	0x20000630
    1b04:	007f7fff 	.word	0x007f7fff

00001b08 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    1b08:	b510      	push	{r4, lr}
    1b0a:	4604      	mov	r4, r0
  if (_cs != -1) {
    1b0c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    1b10:	1c43      	adds	r3, r0, #1
    1b12:	d003      	beq.n	1b1c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    1b14:	2101      	movs	r1, #1
    1b16:	b2c0      	uxtb	r0, r0
    1b18:	f001 fc98 	bl	344c <digitalWrite>
  if (_spi) {
    1b1c:	6823      	ldr	r3, [r4, #0]
    1b1e:	b323      	cbz	r3, 1b6a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    1b20:	7cda      	ldrb	r2, [r3, #19]
    1b22:	b312      	cbz	r2, 1b6a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1b24:	07d1      	lsls	r1, r2, #31
    1b26:	d504      	bpl.n	1b32 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    1b28:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1b2a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b2e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1b32:	0794      	lsls	r4, r2, #30
    1b34:	d504      	bpl.n	1b40 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    1b36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1b38:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b3c:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1b40:	0750      	lsls	r0, r2, #29
    1b42:	d504      	bpl.n	1b4e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    1b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1b46:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b4a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1b4e:	0711      	lsls	r1, r2, #28
    1b50:	d504      	bpl.n	1b5c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    1b52:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1b54:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b58:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1b5c:	06d2      	lsls	r2, r2, #27
    1b5e:	d504      	bpl.n	1b6a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    1b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1b62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1b66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    1b6a:	bd10      	pop	{r4, pc}

00001b6c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b70:	4604      	mov	r4, r0
    1b72:	b082      	sub	sp, #8
  if (_spi) {
    1b74:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    1b76:	468a      	mov	sl, r1
    1b78:	4690      	mov	r8, r2
    1b7a:	461e      	mov	r6, r3
    1b7c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    1b7e:	b120      	cbz	r0, 1b8a <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    1b80:	6863      	ldr	r3, [r4, #4]
    1b82:	e893 0006 	ldmia.w	r3, {r1, r2}
    1b86:	f7ff ff37 	bl	19f8 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1b8a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1b8e:	1c43      	adds	r3, r0, #1
    1b90:	d142      	bne.n	1c18 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    1b92:	b1d5      	cbz	r5, 1bca <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    1b94:	3e01      	subs	r6, #1
    1b96:	eb06 0905 	add.w	r9, r6, r5
    1b9a:	f10d 0507 	add.w	r5, sp, #7
    1b9e:	e003      	b.n	1ba8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    1ba0:	f7ff fe50 	bl	1844 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1ba4:	454e      	cmp	r6, r9
    1ba6:	d010      	beq.n	1bca <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    1ba8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1bac:	2201      	movs	r2, #1
  if (_spi) {
    1bae:	6827      	ldr	r7, [r4, #0]
    1bb0:	4629      	mov	r1, r5
    1bb2:	4620      	mov	r0, r4
  uint8_t data = send;
    1bb4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1bb8:	2f00      	cmp	r7, #0
    1bba:	d0f1      	beq.n	1ba0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    1bbc:	4613      	mov	r3, r2
    1bbe:	4638      	mov	r0, r7
    1bc0:	462a      	mov	r2, r5
    1bc2:	f000 f9c1 	bl	1f48 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    1bc6:	454e      	cmp	r6, r9
    1bc8:	d1ee      	bne.n	1ba8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    1bca:	f1b8 0f00 	cmp.w	r8, #0
    1bce:	d01c      	beq.n	1c0a <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    1bd0:	44d0      	add	r8, sl
    1bd2:	f10a 36ff 	add.w	r6, sl, #4294967295
    1bd6:	f10d 0507 	add.w	r5, sp, #7
    1bda:	f108 38ff 	add.w	r8, r8, #4294967295
    1bde:	e003      	b.n	1be8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    1be0:	f7ff fe30 	bl	1844 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1be4:	45b0      	cmp	r8, r6
    1be6:	d010      	beq.n	1c0a <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    1be8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1bec:	2201      	movs	r2, #1
  if (_spi) {
    1bee:	6827      	ldr	r7, [r4, #0]
    1bf0:	4629      	mov	r1, r5
    1bf2:	4620      	mov	r0, r4
  uint8_t data = send;
    1bf4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1bf8:	2f00      	cmp	r7, #0
    1bfa:	d0f1      	beq.n	1be0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    1bfc:	4613      	mov	r3, r2
    1bfe:	4638      	mov	r0, r7
    1c00:	462a      	mov	r2, r5
    1c02:	f000 f9a1 	bl	1f48 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    1c06:	45b0      	cmp	r8, r6
    1c08:	d1ee      	bne.n	1be8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    1c0a:	4620      	mov	r0, r4
    1c0c:	f7ff ff7c 	bl	1b08 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1c10:	2001      	movs	r0, #1
    1c12:	b002      	add	sp, #8
    1c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    1c18:	b2c0      	uxtb	r0, r0
    1c1a:	2100      	movs	r1, #0
    1c1c:	f001 fc16 	bl	344c <digitalWrite>
    1c20:	e7b7      	b.n	1b92 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    1c22:	bf00      	nop

00001c24 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    1c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c28:	4604      	mov	r4, r0
    1c2a:	b083      	sub	sp, #12
  if (_spi) {
    1c2c:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    1c2e:	460f      	mov	r7, r1
    1c30:	4615      	mov	r5, r2
    1c32:	469b      	mov	fp, r3
    1c34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    1c38:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    1c3c:	b120      	cbz	r0, 1c48 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    1c3e:	6863      	ldr	r3, [r4, #4]
    1c40:	e893 0006 	ldmia.w	r3, {r1, r2}
    1c44:	f7ff fed8 	bl	19f8 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1c48:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1c4c:	1c43      	adds	r3, r0, #1
    1c4e:	d148      	bne.n	1ce2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    1c50:	b1d5      	cbz	r5, 1c88 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    1c52:	3f01      	subs	r7, #1
    1c54:	eb07 0905 	add.w	r9, r7, r5
    1c58:	f10d 0507 	add.w	r5, sp, #7
    1c5c:	e003      	b.n	1c66 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    1c5e:	f7ff fdf1 	bl	1844 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1c62:	454f      	cmp	r7, r9
    1c64:	d010      	beq.n	1c88 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    1c66:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    1c6a:	2201      	movs	r2, #1
  if (_spi) {
    1c6c:	6826      	ldr	r6, [r4, #0]
    1c6e:	4629      	mov	r1, r5
    1c70:	4620      	mov	r0, r4
  uint8_t data = send;
    1c72:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1c76:	2e00      	cmp	r6, #0
    1c78:	d0f1      	beq.n	1c5e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    1c7a:	4613      	mov	r3, r2
    1c7c:	4630      	mov	r0, r6
    1c7e:	462a      	mov	r2, r5
    1c80:	f000 f962 	bl	1f48 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    1c84:	454f      	cmp	r7, r9
    1c86:	d1ee      	bne.n	1c66 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    1c88:	f1ba 0f00 	cmp.w	sl, #0
    1c8c:	d022      	beq.n	1cd4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    1c8e:	44da      	add	sl, fp
    1c90:	f10b 36ff 	add.w	r6, fp, #4294967295
    1c94:	f10d 0507 	add.w	r5, sp, #7
    1c98:	f10a 3aff 	add.w	sl, sl, #4294967295
    1c9c:	e007      	b.n	1cae <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    1c9e:	f7ff fdd1 	bl	1844 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    1ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1ca6:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1caa:	45b2      	cmp	sl, r6
    1cac:	d012      	beq.n	1cd4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    1cae:	6827      	ldr	r7, [r4, #0]
    1cb0:	2201      	movs	r2, #1
    1cb2:	4629      	mov	r1, r5
    1cb4:	4620      	mov	r0, r4
  uint8_t data = send;
    1cb6:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    1cba:	2f00      	cmp	r7, #0
    1cbc:	d0ef      	beq.n	1c9e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    1cbe:	4613      	mov	r3, r2
    1cc0:	4638      	mov	r0, r7
    1cc2:	462a      	mov	r2, r5
    1cc4:	f000 f940 	bl	1f48 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    1cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1ccc:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1cd0:	45b2      	cmp	sl, r6
    1cd2:	d1ec      	bne.n	1cae <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    1cd4:	4620      	mov	r0, r4
    1cd6:	f7ff ff17 	bl	1b08 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    1cda:	2001      	movs	r0, #1
    1cdc:	b003      	add	sp, #12
    1cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    1ce2:	b2c0      	uxtb	r0, r0
    1ce4:	2100      	movs	r1, #0
    1ce6:	f001 fbb1 	bl	344c <digitalWrite>
    1cea:	e7b1      	b.n	1c50 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00001cec <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1cec:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    1cf0:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    1cf2:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    1cf6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1cf8:	d101      	bne.n	1cfe <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    1cfa:	6883      	ldr	r3, [r0, #8]
    1cfc:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    1cfe:	f000 b981 	b.w	2004 <EventResponder::triggerEventNotImmediate()>
    1d02:	bf00      	nop

00001d04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1d04:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1d06:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d08:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    1d0c:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d0e:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    1d10:	b1a3      	cbz	r3, 1d3c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d12:	b321      	cbz	r1, 1d5e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    1d14:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    1d18:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d1a:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d1c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1d1e:	07af      	lsls	r7, r5, #30
    1d20:	d407      	bmi.n	1d32 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    1d22:	4615      	mov	r5, r2
				count_read--;
    1d24:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d26:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    1d28:	b11a      	cbz	r2, 1d32 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d2a:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    1d2e:	462a      	mov	r2, r5
    1d30:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1d32:	6965      	ldr	r5, [r4, #20]
    1d34:	07ed      	lsls	r5, r5, #31
    1d36:	d5f1      	bpl.n	1d1c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d1ea      	bne.n	1d12 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1d3c:	b16e      	cbz	r6, 1d5a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    1d3e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d40:	6f19      	ldr	r1, [r3, #112]	; 0x70
    1d42:	0789      	lsls	r1, r1, #30
    1d44:	d4fa      	bmi.n	1d3c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    1d46:	4611      	mov	r1, r2
			count_read--;
    1d48:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    1d4c:	2a00      	cmp	r2, #0
    1d4e:	d0f5      	beq.n	1d3c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d50:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    1d54:	460a      	mov	r2, r1
	while (count_read) {
    1d56:	2e00      	cmp	r6, #0
    1d58:	d1f1      	bne.n	1d3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    1d5a:	bcf0      	pop	{r4, r5, r6, r7}
    1d5c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d5e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1d62:	e7d9      	b.n	1d18 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00001d64 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1d64:	4b32      	ldr	r3, [pc, #200]	; (1e30 <_spi_dma_rxISR1()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1d66:	4933      	ldr	r1, [pc, #204]	; (1e34 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1d68:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1d6a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    1d6e:	7920      	ldrb	r0, [r4, #4]
    1d70:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1d74:	f895 c004 	ldrb.w	ip, [r5, #4]
    1d78:	f881 c01c 	strb.w	ip, [r1, #28]
    1d7c:	7708      	strb	r0, [r1, #28]
    1d7e:	b152      	cbz	r2, 1d96 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1d80:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1d84:	d323      	bcc.n	1dce <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1d86:	492c      	ldr	r1, [pc, #176]	; (1e38 <_spi_dma_rxISR1()+0xd4>)
    1d88:	4411      	add	r1, r2
		DMA_SERQ = channel;
    1d8a:	4a2a      	ldr	r2, [pc, #168]	; (1e34 <_spi_dma_rxISR1()+0xd0>)
    1d8c:	6419      	str	r1, [r3, #64]	; 0x40
    1d8e:	76d0      	strb	r0, [r2, #27]
    1d90:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1d94:	bd30      	pop	{r4, r5, pc}
    1d96:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1d98:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1d9a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1d9c:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1d9e:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1da2:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1da4:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1da6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    1daa:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1dac:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1dae:	6804      	ldr	r4, [r0, #0]
    1db0:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1db2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1db6:	4b21      	ldr	r3, [pc, #132]	; (1e3c <_spi_dma_rxISR1()+0xd8>)
    1db8:	429c      	cmp	r4, r3
    1dba:	d126      	bne.n	1e0a <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    1dbc:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    1dbe:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1dc0:	2b02      	cmp	r3, #2
		_data = data;
    1dc2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1dc4:	d126      	bne.n	1e14 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    1dc6:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1dc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1dcc:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    1dce:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1dd0:	8be9      	ldrh	r1, [r5, #30]
    1dd2:	0409      	lsls	r1, r1, #16
    1dd4:	d422      	bmi.n	1e1c <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    1dd6:	b292      	uxth	r2, r2
    1dd8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    1dda:	6821      	ldr	r1, [r4, #0]
    1ddc:	8bec      	ldrh	r4, [r5, #30]
    1dde:	b2a4      	uxth	r4, r4
    1de0:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1de2:	8bcc      	ldrh	r4, [r1, #30]
    1de4:	0424      	lsls	r4, r4, #16
    1de6:	d505      	bpl.n	1df4 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1de8:	8bcc      	ldrh	r4, [r1, #30]
    1dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1dee:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1df2:	4322      	orrs	r2, r4
    1df4:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1df6:	8bca      	ldrh	r2, [r1, #30]
    1df8:	b292      	uxth	r2, r2
    1dfa:	82ca      	strh	r2, [r1, #22]
    1dfc:	2100      	movs	r1, #0
    1dfe:	4a0d      	ldr	r2, [pc, #52]	; (1e34 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1e00:	6419      	str	r1, [r3, #64]	; 0x40
    1e02:	76d0      	strb	r0, [r2, #27]
    1e04:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e08:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    1e0a:	4623      	mov	r3, r4
    1e0c:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1e12:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1e18:	f000 b8f4 	b.w	2004 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e1c:	8be9      	ldrh	r1, [r5, #30]
    1e1e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    1e22:	b292      	uxth	r2, r2
    1e24:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1e28:	ea41 010e 	orr.w	r1, r1, lr
    1e2c:	83e9      	strh	r1, [r5, #30]
    1e2e:	e7d4      	b.n	1dda <_spi_dma_rxISR1()+0x76>
    1e30:	20001cd8 	.word	0x20001cd8
    1e34:	400e8000 	.word	0x400e8000
    1e38:	ffff8001 	.word	0xffff8001
    1e3c:	00001ced 	.word	0x00001ced

00001e40 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    1e40:	4b32      	ldr	r3, [pc, #200]	; (1f0c <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    1e42:	4933      	ldr	r1, [pc, #204]	; (1f10 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e44:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1e46:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    1e4a:	7920      	ldrb	r0, [r4, #4]
    1e4c:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    1e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    1e50:	f895 c004 	ldrb.w	ip, [r5, #4]
    1e54:	f881 c01c 	strb.w	ip, [r1, #28]
    1e58:	7708      	strb	r0, [r1, #28]
    1e5a:	b152      	cbz	r2, 1e72 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1e5c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1e60:	d323      	bcc.n	1eaa <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1e62:	492c      	ldr	r1, [pc, #176]	; (1f14 <_spi_dma_rxISR0()+0xd4>)
    1e64:	4411      	add	r1, r2
		DMA_SERQ = channel;
    1e66:	4a2a      	ldr	r2, [pc, #168]	; (1f10 <_spi_dma_rxISR0()+0xd0>)
    1e68:	6419      	str	r1, [r3, #64]	; 0x40
    1e6a:	76d0      	strb	r0, [r2, #27]
    1e6c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e70:	bd30      	pop	{r4, r5, pc}
    1e72:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1e74:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    1e76:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1e78:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1e7a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1e7e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1e80:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1e82:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    1e86:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e88:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1e8a:	6804      	ldr	r4, [r0, #0]
    1e8c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1e8e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1e92:	4b21      	ldr	r3, [pc, #132]	; (1f18 <_spi_dma_rxISR0()+0xd8>)
    1e94:	429c      	cmp	r4, r3
    1e96:	d126      	bne.n	1ee6 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    1e98:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    1e9a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1e9c:	2b02      	cmp	r3, #2
		_data = data;
    1e9e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1ea0:	d126      	bne.n	1ef0 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    1ea2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1ea8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    1eaa:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1eac:	8be9      	ldrh	r1, [r5, #30]
    1eae:	0409      	lsls	r1, r1, #16
    1eb0:	d422      	bmi.n	1ef8 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    1eb2:	b292      	uxth	r2, r2
    1eb4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    1eb6:	6821      	ldr	r1, [r4, #0]
    1eb8:	8bec      	ldrh	r4, [r5, #30]
    1eba:	b2a4      	uxth	r4, r4
    1ebc:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1ebe:	8bcc      	ldrh	r4, [r1, #30]
    1ec0:	0424      	lsls	r4, r4, #16
    1ec2:	d505      	bpl.n	1ed0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1ec4:	8bcc      	ldrh	r4, [r1, #30]
    1ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1eca:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1ece:	4322      	orrs	r2, r4
    1ed0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1ed2:	8bca      	ldrh	r2, [r1, #30]
    1ed4:	b292      	uxth	r2, r2
    1ed6:	82ca      	strh	r2, [r1, #22]
    1ed8:	2100      	movs	r1, #0
    1eda:	4a0d      	ldr	r2, [pc, #52]	; (1f10 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1edc:	6419      	str	r1, [r3, #64]	; 0x40
    1ede:	76d0      	strb	r0, [r2, #27]
    1ee0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ee4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    1ee6:	4623      	mov	r3, r4
    1ee8:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1eea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1eee:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1ef4:	f000 b886 	b.w	2004 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1ef8:	8be9      	ldrh	r1, [r5, #30]
    1efa:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    1efe:	b292      	uxth	r2, r2
    1f00:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1f04:	ea41 010e 	orr.w	r1, r1, lr
    1f08:	83e9      	strh	r1, [r5, #30]
    1f0a:	e7d4      	b.n	1eb6 <_spi_dma_rxISR0()+0x76>
    1f0c:	20001c88 	.word	0x20001c88
    1f10:	400e8000 	.word	0x400e8000
    1f14:	ffff8001 	.word	0xffff8001
    1f18:	00001ced 	.word	0x00001ced

00001f1c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    1f1c:	2300      	movs	r3, #0
    1f1e:	e9c0 1200 	strd	r1, r2, [r0]
    1f22:	e9c0 3302 	strd	r3, r3, [r0, #8]
    1f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1f2a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    1f2e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    1f32:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    1f36:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    1f3a:	6383      	str	r3, [r0, #56]	; 0x38
    1f3c:	8783      	strh	r3, [r0, #60]	; 0x3c
    1f3e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    1f42:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    1f46:	4770      	bx	lr

00001f48 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    1f48:	b10b      	cbz	r3, 1f4e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1f4a:	f7ff bedb 	b.w	1d04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    1f4e:	4770      	bx	lr

00001f50 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    1f50:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    1f52:	4a08      	ldr	r2, [pc, #32]	; (1f74 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    1f54:	4908      	ldr	r1, [pc, #32]	; (1f78 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    1f56:	4809      	ldr	r0, [pc, #36]	; (1f7c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    1f58:	f7ff ffe0 	bl	1f1c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    1f5c:	4a08      	ldr	r2, [pc, #32]	; (1f80 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    1f5e:	4909      	ldr	r1, [pc, #36]	; (1f84 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    1f60:	4809      	ldr	r0, [pc, #36]	; (1f88 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    1f62:	f7ff ffdb 	bl	1f1c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    1f66:	4a09      	ldr	r2, [pc, #36]	; (1f8c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    1f68:	4909      	ldr	r1, [pc, #36]	; (1f90 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    1f6a:	480a      	ldr	r0, [pc, #40]	; (1f94 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    1f6c:	f7ff ffd6 	bl	1f1c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    1f70:	bd08      	pop	{r3, pc}
    1f72:	bf00      	nop
    1f74:	20000540 	.word	0x20000540
    1f78:	403a0000 	.word	0x403a0000
    1f7c:	20001c88 	.word	0x20001c88
    1f80:	200004d0 	.word	0x200004d0
    1f84:	4039c000 	.word	0x4039c000
    1f88:	20001cd8 	.word	0x20001cd8
    1f8c:	20000460 	.word	0x20000460
    1f90:	40394000 	.word	0x40394000
    1f94:	20001d28 	.word	0x20001d28

00001f98 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/*! 
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {
}
    1f98:	4770      	bx	lr
    1f9a:	bf00      	nop

00001f9c <Adafruit_MCP4725::begin(unsigned char)>:
/**************************************************************************/
/*! 
    @brief  Setups the HW
*/
/**************************************************************************/
void Adafruit_MCP4725::begin(uint8_t addr) {
    1f9c:	4603      	mov	r3, r0
  _i2caddr = addr;
  Wire.begin();
    1f9e:	4802      	ldr	r0, [pc, #8]	; (1fa8 <Adafruit_MCP4725::begin(unsigned char)+0xc>)
  _i2caddr = addr;
    1fa0:	7019      	strb	r1, [r3, #0]
  Wire.begin();
    1fa2:	f008 b969 	b.w	a278 <___ZN7TwoWire5beginEv_veneer>
    1fa6:	bf00      	nop
    1fa8:	20002078 	.word	0x20002078

00001fac <Adafruit_MCP4725::setVoltage(unsigned short, bool)>:
                that the DAC will retain the current voltage output
                after power-down or reset.
*/
/**************************************************************************/
void Adafruit_MCP4725::setVoltage( uint16_t output, bool writeEEPROM )
{
    1fac:	b510      	push	{r4, lr}
		transmitting = 1;
    1fae:	f04f 0c01 	mov.w	ip, #1
		txBuffer[0] = (address << 1);
    1fb2:	7800      	ldrb	r0, [r0, #0]
    1fb4:	4b12      	ldr	r3, [pc, #72]	; (2000 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    1fb6:	460c      	mov	r4, r1
    1fb8:	fa00 f00c 	lsl.w	r0, r0, ip
		transmitting = 1;
    1fbc:	f883 c130 	strb.w	ip, [r3, #304]	; 0x130
		txBufferLength = 1;
    1fc0:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1fc4:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
#ifdef TWBR
  uint8_t twbrback = TWBR;
  TWBR = ((F_CPU / 400000L) - 16) / 2; // Set I2C frequency to 400kHz
#endif
  Wire.beginTransmission(_i2caddr);
  if (writeEEPROM)
    1fc8:	b1a2      	cbz	r2, 1ff4 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x48>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    1fca:	2160      	movs	r1, #96	; 0x60
    1fcc:	4618      	mov	r0, r3
    1fce:	f7fe fbb3 	bl	738 <TwoWire::write(unsigned char)>
    1fd2:	f3c4 1107 	ubfx	r1, r4, #4, #8
    1fd6:	480a      	ldr	r0, [pc, #40]	; (2000 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    1fd8:	f7fe fbae 	bl	738 <TwoWire::write(unsigned char)>
    1fdc:	4808      	ldr	r0, [pc, #32]	; (2000 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  else
  {
    Wire.write(MCP4726_CMD_WRITEDAC);
  }
  Wire.write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4)
  Wire.write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x)
    1fde:	0121      	lsls	r1, r4, #4
    1fe0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    1fe4:	f7fe fba8 	bl	738 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    1fe8:	2101      	movs	r1, #1
    1fea:	4805      	ldr	r0, [pc, #20]	; (2000 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  Wire.endTransmission();
#ifdef TWBR
  TWBR = twbrback;
#endif
}
    1fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1ff0:	f7fe bcb0 	b.w	954 <TwoWire::endTransmission(unsigned char)>
		return write((uint8_t)n);
    1ff4:	2140      	movs	r1, #64	; 0x40
    1ff6:	4618      	mov	r0, r3
    1ff8:	f7fe fb9e 	bl	738 <TwoWire::write(unsigned char)>
    1ffc:	e7e9      	b.n	1fd2 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x26>
    1ffe:	bf00      	nop
    2000:	20002078 	.word	0x20002078

00002004 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2004:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2008:	b672      	cpsid	i
	if (_triggered == false) {
    200a:	7f43      	ldrb	r3, [r0, #29]
    200c:	b95b      	cbnz	r3, 2026 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    200e:	7f01      	ldrb	r1, [r0, #28]
    2010:	2901      	cmp	r1, #1
{
    2012:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    2014:	d00b      	beq.n	202e <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    2016:	2903      	cmp	r1, #3
    2018:	d013      	beq.n	2042 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    201a:	2301      	movs	r3, #1
    201c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    201e:	b902      	cbnz	r2, 2022 <EventResponder::triggerEventNotImmediate()+0x1e>
    2020:	b662      	cpsie	i
}
    2022:	bc30      	pop	{r4, r5}
    2024:	4770      	bx	lr
    2026:	b90a      	cbnz	r2, 202c <EventResponder::triggerEventNotImmediate()+0x28>
    2028:	b662      	cpsie	i
    202a:	4770      	bx	lr
    202c:	4770      	bx	lr
			if (firstYield == nullptr) {
    202e:	4c12      	ldr	r4, [pc, #72]	; (2078 <EventResponder::triggerEventNotImmediate()+0x74>)
    2030:	6821      	ldr	r1, [r4, #0]
    2032:	b1b1      	cbz	r1, 2062 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    2034:	4911      	ldr	r1, [pc, #68]	; (207c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    2036:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    2038:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    203a:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    203c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    203e:	6158      	str	r0, [r3, #20]
				lastYield = this;
    2040:	e7eb      	b.n	201a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    2042:	4d0f      	ldr	r5, [pc, #60]	; (2080 <EventResponder::triggerEventNotImmediate()+0x7c>)
    2044:	490f      	ldr	r1, [pc, #60]	; (2084 <EventResponder::triggerEventNotImmediate()+0x80>)
    2046:	682c      	ldr	r4, [r5, #0]
    2048:	b18c      	cbz	r4, 206e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    204a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    204c:	680b      	ldr	r3, [r1, #0]
    204e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2050:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2052:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2056:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    205a:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    205c:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    2060:	e7db      	b.n	201a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    2062:	4b06      	ldr	r3, [pc, #24]	; (207c <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    2064:	6020      	str	r0, [r4, #0]
				lastYield = this;
    2066:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    2068:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    206c:	e7d5      	b.n	201a <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    206e:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    2072:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    2074:	e7ed      	b.n	2052 <EventResponder::triggerEventNotImmediate()+0x4e>
    2076:	bf00      	nop
    2078:	20002790 	.word	0x20002790
    207c:	2000279c 	.word	0x2000279c
    2080:	20002798 	.word	0x20002798
    2084:	20002794 	.word	0x20002794

00002088 <EventResponder::runFromInterrupt()>:
{
    2088:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    208a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    208e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2090:	4c0c      	ldr	r4, [pc, #48]	; (20c4 <EventResponder::runFromInterrupt()+0x3c>)
    2092:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2094:	b180      	cbz	r0, 20b8 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    2096:	4e0c      	ldr	r6, [pc, #48]	; (20c8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2098:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    209a:	6943      	ldr	r3, [r0, #20]
    209c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    209e:	b173      	cbz	r3, 20be <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    20a0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    20a2:	b902      	cbnz	r2, 20a6 <EventResponder::runFromInterrupt()+0x1e>
    20a4:	b662      	cpsie	i
			(*(first->_function))(*first);
    20a6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    20a8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    20aa:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20ac:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    20b0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    20b2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    20b4:	2800      	cmp	r0, #0
    20b6:	d1f0      	bne.n	209a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    20b8:	b902      	cbnz	r2, 20bc <EventResponder::runFromInterrupt()+0x34>
    20ba:	b662      	cpsie	i
}
    20bc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    20be:	6033      	str	r3, [r6, #0]
    20c0:	e7ef      	b.n	20a2 <EventResponder::runFromInterrupt()+0x1a>
    20c2:	bf00      	nop
    20c4:	20002798 	.word	0x20002798
    20c8:	20002794 	.word	0x20002794

000020cc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    20cc:	f7ff bfdc 	b.w	2088 <EventResponder::runFromInterrupt()>

000020d0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    20d0:	4904      	ldr	r1, [pc, #16]	; (20e4 <systick_isr+0x14>)
	systick_millis_count++;
    20d2:	4a05      	ldr	r2, [pc, #20]	; (20e8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    20d4:	6849      	ldr	r1, [r1, #4]
    20d6:	4b05      	ldr	r3, [pc, #20]	; (20ec <systick_isr+0x1c>)
    20d8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    20da:	6813      	ldr	r3, [r2, #0]
    20dc:	3301      	adds	r3, #1
    20de:	6013      	str	r3, [r2, #0]
}
    20e0:	4770      	bx	lr
    20e2:	bf00      	nop
    20e4:	e0001000 	.word	0xe0001000
    20e8:	200035bc 	.word	0x200035bc
    20ec:	200035b8 	.word	0x200035b8

000020f0 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    20f0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    20f4:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    20f8:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    20fa:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    20fc:	4293      	cmp	r3, r2
    20fe:	d202      	bcs.n	2106 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    2100:	3a01      	subs	r2, #1
    2102:	1ad0      	subs	r0, r2, r3
}
    2104:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2106:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2108:	3901      	subs	r1, #1
    210a:	440a      	add	r2, r1
    210c:	1ad0      	subs	r0, r2, r3
    210e:	4770      	bx	lr

00002110 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    2110:	b672      	cpsid	i
	head = rx_buffer_head_;
    2112:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    2116:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    211a:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    211c:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    211e:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    2120:	bf3c      	itt	cc
    2122:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    2124:	1852      	addcc	r2, r2, r1
    2126:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    2128:	6902      	ldr	r2, [r0, #16]
    212a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    212c:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    212e:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    2132:	4418      	add	r0, r3
    2134:	4770      	bx	lr
    2136:	bf00      	nop

00002138 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2138:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    213c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    213e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2142:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2144:	b29b      	uxth	r3, r3
	if (head == tail) {
    2146:	4299      	cmp	r1, r3
    2148:	d010      	beq.n	216c <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    214a:	3301      	adds	r3, #1
    214c:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    214e:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2150:	4298      	cmp	r0, r3
    2152:	bf98      	it	ls
    2154:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    2156:	4299      	cmp	r1, r3
    2158:	d903      	bls.n	2162 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    215a:	6a12      	ldr	r2, [r2, #32]
    215c:	5cd0      	ldrb	r0, [r2, r3]
    215e:	b2c0      	uxtb	r0, r0
    2160:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    2162:	1a5b      	subs	r3, r3, r1
    2164:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2166:	5cd0      	ldrb	r0, [r2, r3]
    2168:	b2c0      	uxtb	r0, r0
	}
}
    216a:	4770      	bx	lr
		__disable_irq();
    216c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    216e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    2172:	b280      	uxth	r0, r0
		if (head == tail) {
    2174:	4281      	cmp	r1, r0
    2176:	d001      	beq.n	217c <HardwareSerial::peek()+0x44>
		__enable_irq();
    2178:	b662      	cpsie	i
    217a:	e7e6      	b.n	214a <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    217c:	6913      	ldr	r3, [r2, #16]
    217e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2180:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    2184:	d103      	bne.n	218e <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    2186:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    218a:	b662      	cpsie	i
			return c;
    218c:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    218e:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    2190:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    2192:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    2196:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    2198:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    219c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    21a0:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    21a2:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    21a6:	704b      	strb	r3, [r1, #1]
    21a8:	e7ef      	b.n	218a <HardwareSerial::peek()+0x52>
    21aa:	bf00      	nop

000021ac <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    21ac:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    21b0:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    21b2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    21b6:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    21b8:	b29b      	uxth	r3, r3
	if (head == tail) {
    21ba:	4299      	cmp	r1, r3
    21bc:	d026      	beq.n	220c <HardwareSerial::read()+0x60>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21be:	3301      	adds	r3, #1
{
    21c0:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21c2:	6b94      	ldr	r4, [r2, #56]	; 0x38
    21c4:	429c      	cmp	r4, r3
    21c6:	d916      	bls.n	21f6 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    21c8:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    21ca:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    21ce:	4298      	cmp	r0, r3
    21d0:	d917      	bls.n	2202 <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    21d2:	6a10      	ldr	r0, [r2, #32]
    21d4:	5cc0      	ldrb	r0, [r0, r3]
    21d6:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    21d8:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    21da:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    21de:	b145      	cbz	r5, 21f2 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    21e0:	4299      	cmp	r1, r3
    21e2:	d31c      	bcc.n	221e <HardwareSerial::read()+0x72>
    21e4:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    21e6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    21e8:	4299      	cmp	r1, r3
    21ea:	d302      	bcc.n	21f2 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    21ec:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    21ee:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    21f2:	bc30      	pop	{r4, r5}
    21f4:	4770      	bx	lr
    21f6:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    21fa:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21fc:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    21fe:	4298      	cmp	r0, r3
    2200:	d8e7      	bhi.n	21d2 <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    2202:	1a18      	subs	r0, r3, r0
    2204:	6a55      	ldr	r5, [r2, #36]	; 0x24
    2206:	5c28      	ldrb	r0, [r5, r0]
    2208:	b2c0      	uxtb	r0, r0
    220a:	e7e5      	b.n	21d8 <HardwareSerial::read()+0x2c>
    220c:	4608      	mov	r0, r1
		__disable_irq();
    220e:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2210:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    2214:	b289      	uxth	r1, r1
		if (head == tail) {
    2216:	4288      	cmp	r0, r1
    2218:	d004      	beq.n	2224 <HardwareSerial::read()+0x78>
		__enable_irq();
    221a:	b662      	cpsie	i
    221c:	e7cf      	b.n	21be <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    221e:	440c      	add	r4, r1
    2220:	1ae3      	subs	r3, r4, r3
    2222:	e7e0      	b.n	21e6 <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    2224:	6913      	ldr	r3, [r2, #16]
    2226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2228:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    222c:	d103      	bne.n	2236 <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    222e:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2232:	b662      	cpsie	i
}	
    2234:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2236:	69d8      	ldr	r0, [r3, #28]
    2238:	f3c0 0009 	ubfx	r0, r0, #0, #10
    223c:	e7f9      	b.n	2232 <HardwareSerial::read()+0x86>
    223e:	bf00      	nop

00002240 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    2240:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    2244:	b143      	cbz	r3, 2258 <HardwareSerial::flush()+0x18>
{
    2246:	b510      	push	{r4, lr}
    2248:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    224a:	f002 fe39 	bl	4ec0 <yield>
    224e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2252:	2b00      	cmp	r3, #0
    2254:	d1f9      	bne.n	224a <HardwareSerial::flush()+0xa>
}
    2256:	bd10      	pop	{r4, pc}
    2258:	4770      	bx	lr
    225a:	bf00      	nop

0000225c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    225c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2260:	b9b8      	cbnz	r0, 2292 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2262:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    2266:	b94b      	cbnz	r3, 227c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2268:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    226c:	b93a      	cbnz	r2, 227e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    226e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2272:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2276:	b150      	cbz	r0, 228e <nvic_execution_priority()+0x32>
    2278:	4298      	cmp	r0, r3
    227a:	d208      	bcs.n	228e <nvic_execution_priority()+0x32>
}
    227c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    227e:	2a0f      	cmp	r2, #15
    2280:	d9f7      	bls.n	2272 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    2282:	4b05      	ldr	r3, [pc, #20]	; (2298 <nvic_execution_priority()+0x3c>)
    2284:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2286:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    228a:	2800      	cmp	r0, #0
    228c:	d1f4      	bne.n	2278 <nvic_execution_priority()+0x1c>
    228e:	4618      	mov	r0, r3
	return priority;
    2290:	4770      	bx	lr
	if (faultmask) return -1;
    2292:	f04f 30ff 	mov.w	r0, #4294967295
    2296:	e7f1      	b.n	227c <nvic_execution_priority()+0x20>
    2298:	e000e3f0 	.word	0xe000e3f0

0000229c <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    229c:	ee07 1a90 	vmov	s15, r1
    22a0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 24e8 <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>
	for (int osr=4; osr <= 32; osr++) {
    22a4:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    22a6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    22aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    22ae:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 24ec <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
    22b2:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    22b6:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    22ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    22be:	468e      	mov	lr, r1
	int bestdiv = 1;
    22c0:	2401      	movs	r4, #1
		float div = base / (float)osr;
    22c2:	ee07 1a90 	vmov	s15, r1
    22c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    22ca:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    22ce:	ee77 7a05 	vadd.f32	s15, s14, s10
    22d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    22d6:	ee17 3a90 	vmov	r3, s15
    22da:	4563      	cmp	r3, ip
    22dc:	bfa8      	it	ge
    22de:	4663      	movge	r3, ip
    22e0:	2b01      	cmp	r3, #1
    22e2:	bfb8      	it	lt
    22e4:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    22e6:	ee07 3a90 	vmov	s15, r3
    22ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    22ee:	ee76 6ac7 	vsub.f32	s13, s13, s14
    22f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    22f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    22fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22fe:	bf48      	it	mi
    2300:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    2304:	eef4 7ac6 	vcmpe.f32	s15, s12
    2308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    230c:	d803      	bhi.n	2316 <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    230e:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    2312:	468e      	mov	lr, r1
			bestdiv = divint;
    2314:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    2316:	3101      	adds	r1, #1
    2318:	2921      	cmp	r1, #33	; 0x21
    231a:	d1d2      	bne.n	22c2 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    231c:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    231e:	6943      	ldr	r3, [r0, #20]
    2320:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    2324:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2328:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    232c:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    232e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2332:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    2336:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    233a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    233e:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2342:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    2344:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2346:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    234a:	eba1 010c 	sub.w	r1, r1, ip
    234e:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    2352:	6831      	ldr	r1, [r6, #0]
    2354:	695d      	ldr	r5, [r3, #20]
    2356:	ea41 0105 	orr.w	r1, r1, r5
    235a:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    235c:	bf14      	ite	ne
    235e:	2101      	movne	r1, #1
    2360:	2100      	moveq	r1, #0
    2362:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    2364:	f040 8091 	bne.w	248a <HardwareSerial::begin(unsigned long, unsigned short)+0x1ee>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2368:	7e05      	ldrb	r5, [r0, #24]
    236a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2504 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    236e:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    2372:	4e5f      	ldr	r6, [pc, #380]	; (24f0 <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
    2374:	f89c 5018 	ldrb.w	r5, [ip, #24]
    2378:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    237c:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    237e:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2380:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    2382:	f8dc 601c 	ldr.w	r6, [ip, #28]
    2386:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    2388:	f8dc 5020 	ldr.w	r5, [ip, #32]
    238c:	b115      	cbz	r5, 2394 <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    238e:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    2392:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2394:	7e45      	ldrb	r5, [r0, #25]
    2396:	27d9      	movs	r7, #217	; 0xd9
    2398:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    239c:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    23a0:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    23a4:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    23a6:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    23a8:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    23aa:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    23ac:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    23ae:	7e41      	ldrb	r1, [r0, #25]
    23b0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    23b4:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    23b6:	b10d      	cbz	r5, 23bc <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    23b8:	6c49      	ldr	r1, [r1, #68]	; 0x44
    23ba:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23bc:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23c0:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    23c4:	685d      	ldr	r5, [r3, #4]
	port->PINCFG = 0;
    23c6:	f04f 0600 	mov.w	r6, #0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23ca:	bfcc      	ite	gt
    23cc:	f04f 0e00 	movgt.w	lr, #0
    23d0:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23d4:	0609      	lsls	r1, r1, #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23d6:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23da:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23de:	4321      	orrs	r1, r4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    23e0:	785c      	ldrb	r4, [r3, #1]
    23e2:	f104 0310 	add.w	r3, r4, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23e6:	6904      	ldr	r4, [r0, #16]
    23e8:	6121      	str	r1, [r4, #16]
    23ea:	4942      	ldr	r1, [pc, #264]	; (24f4 <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	port->PINCFG = 0;
    23ec:	60e6      	str	r6, [r4, #12]
    23ee:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23f2:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    23f4:	f04f 0c01 	mov.w	ip, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23f8:	493f      	ldr	r1, [pc, #252]	; (24f8 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    23fa:	f002 0503 	and.w	r5, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    23fe:	785c      	ldrb	r4, [r3, #1]
    2400:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    2404:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    2406:	6944      	ldr	r4, [r0, #20]
    2408:	4b3c      	ldr	r3, [pc, #240]	; (24fc <HardwareSerial::begin(unsigned long, unsigned short)+0x260>)
    240a:	7861      	ldrb	r1, [r4, #1]
    240c:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    2410:	f001 011f 	and.w	r1, r1, #31
    2414:	009b      	lsls	r3, r3, #2
    2416:	fa0c f101 	lsl.w	r1, ip, r1
    241a:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    241c:	f04f 1102 	mov.w	r1, #131074	; 0x20002
    2420:	6903      	ldr	r3, [r0, #16]
    2422:	62d9      	str	r1, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    2424:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2426:	f041 0188 	orr.w	r1, r1, #136	; 0x88
    242a:	6299      	str	r1, [r3, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    242c:	0751      	lsls	r1, r2, #29
    242e:	d429      	bmi.n	2484 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2430:	f445 1170 	orr.w	r1, r5, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2434:	f002 050f 	and.w	r5, r2, #15
    2438:	2d04      	cmp	r5, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    243a:	7e85      	ldrb	r5, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    243c:	bf08      	it	eq
    243e:	f041 4180 	orreq.w	r1, r1, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    2442:	0697      	lsls	r7, r2, #26
    2444:	bf48      	it	mi
    2446:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    244a:	b10d      	cbz	r5, 2450 <HardwareSerial::begin(unsigned long, unsigned short)+0x1b4>
    244c:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2450:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    2452:	6199      	str	r1, [r3, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2454:	d503      	bpl.n	245e <HardwareSerial::begin(unsigned long, unsigned short)+0x1c2>
    2456:	6919      	ldr	r1, [r3, #16]
    2458:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    245c:	6119      	str	r1, [r3, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    245e:	6959      	ldr	r1, [r3, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2460:	06d5      	lsls	r5, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2462:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2466:	bf48      	it	mi
    2468:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    246c:	05d2      	lsls	r2, r2, #23
	port->STAT = c;
    246e:	6159      	str	r1, [r3, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2470:	d503      	bpl.n	247a <HardwareSerial::begin(unsigned long, unsigned short)+0x1de>
    2472:	691a      	ldr	r2, [r3, #16]
    2474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    2478:	611a      	str	r2, [r3, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    247a:	68e3      	ldr	r3, [r4, #12]
    247c:	781b      	ldrb	r3, [r3, #0]
    247e:	b1a3      	cbz	r3, 24aa <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
};
    2480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2484:	491e      	ldr	r1, [pc, #120]	; (2500 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    2486:	4329      	orrs	r1, r5
    2488:	e7d4      	b.n	2434 <HardwareSerial::begin(unsigned long, unsigned short)+0x198>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    248a:	7e41      	ldrb	r1, [r0, #25]
    248c:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    2490:	4d1c      	ldr	r5, [pc, #112]	; (2504 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    2492:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2496:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    249a:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    249e:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    24a0:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    24a2:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    24a4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    24a6:	6029      	str	r1, [r5, #0]
    24a8:	e781      	b.n	23ae <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    24aa:	4e17      	ldr	r6, [pc, #92]	; (2508 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    24ac:	7834      	ldrb	r4, [r6, #0]
    24ae:	b1bc      	cbz	r4, 24e0 <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
    24b0:	1e61      	subs	r1, r4, #1
    24b2:	4d16      	ldr	r5, [pc, #88]	; (250c <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    24b4:	b2c9      	uxtb	r1, r1
    24b6:	1f2b      	subs	r3, r5, #4
    24b8:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    24bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    24c0:	4290      	cmp	r0, r2
    24c2:	d0dd      	beq.n	2480 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e4>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    24c4:	4299      	cmp	r1, r3
    24c6:	d1f9      	bne.n	24bc <HardwareSerial::begin(unsigned long, unsigned short)+0x220>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24c8:	1c63      	adds	r3, r4, #1
    24ca:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24cc:	4a10      	ldr	r2, [pc, #64]	; (2510 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24ce:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24d0:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24d2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24d6:	f043 0302 	orr.w	r3, r3, #2
    24da:	7013      	strb	r3, [r2, #0]
};
    24dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    24e0:	2301      	movs	r3, #1
    24e2:	4d0a      	ldr	r5, [pc, #40]	; (250c <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    24e4:	e7f2      	b.n	24cc <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
    24e6:	bf00      	nop
    24e8:	4bb71b00 	.word	0x4bb71b00
    24ec:	60ad78ec 	.word	0x60ad78ec
    24f0:	0001f038 	.word	0x0001f038
    24f4:	20001800 	.word	0x20001800
    24f8:	e000e400 	.word	0xe000e400
    24fc:	38003840 	.word	0x38003840
    2500:	003c0010 	.word	0x003c0010
    2504:	200008c8 	.word	0x200008c8
    2508:	200035df 	.word	0x200035df
    250c:	200027a0 	.word	0x200027a0
    2510:	200017b0 	.word	0x200017b0

00002514 <HardwareSerial::write9bit(unsigned long)>:
{
    2514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2516:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2518:	4604      	mov	r4, r0
    251a:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    251c:	b113      	cbz	r3, 2524 <HardwareSerial::write9bit(unsigned long)+0x10>
    251e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    2524:	7ea3      	ldrb	r3, [r4, #26]
    2526:	b133      	cbz	r3, 2536 <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    2528:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    252a:	6922      	ldr	r2, [r4, #16]
    252c:	6993      	ldr	r3, [r2, #24]
    252e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2532:	6193      	str	r3, [r2, #24]
		__enable_irq();
    2534:	b662      	cpsie	i
	head = tx_buffer_head_;
    2536:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    253a:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    253c:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    253e:	3501      	adds	r5, #1
    2540:	42ab      	cmp	r3, r5
    2542:	d84c      	bhi.n	25de <HardwareSerial::write9bit(unsigned long)+0xca>
    2544:	2700      	movs	r7, #0
    2546:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    2548:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    254c:	b29b      	uxth	r3, r3
    254e:	429d      	cmp	r5, r3
    2550:	d01a      	beq.n	2588 <HardwareSerial::write9bit(unsigned long)+0x74>
    2552:	e029      	b.n	25a8 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    2554:	6921      	ldr	r1, [r4, #16]
    2556:	694b      	ldr	r3, [r1, #20]
    2558:	021b      	lsls	r3, r3, #8
    255a:	d510      	bpl.n	257e <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    255c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2560:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    2562:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2564:	3301      	adds	r3, #1
    2566:	429a      	cmp	r2, r3
    2568:	d936      	bls.n	25d8 <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    256a:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    256c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    256e:	4298      	cmp	r0, r3
    2570:	d92d      	bls.n	25ce <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    2572:	69e0      	ldr	r0, [r4, #28]
    2574:	5cc3      	ldrb	r3, [r0, r3]
    2576:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    2578:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    257a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    257e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2582:	b29b      	uxth	r3, r3
    2584:	42ab      	cmp	r3, r5
    2586:	d10f      	bne.n	25a8 <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    2588:	f7ff fe68 	bl	225c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    258c:	6963      	ldr	r3, [r4, #20]
    258e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    2592:	4283      	cmp	r3, r0
    2594:	dade      	bge.n	2554 <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    2596:	28ff      	cmp	r0, #255	; 0xff
    2598:	ddf1      	ble.n	257e <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    259a:	f002 fc91 	bl	4ec0 <yield>
	while (tx_buffer_tail_ == head) {
    259e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    25a2:	b29b      	uxth	r3, r3
    25a4:	42ab      	cmp	r3, r5
    25a6:	d0ef      	beq.n	2588 <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    25a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25aa:	42ab      	cmp	r3, r5
    25ac:	d919      	bls.n	25e2 <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    25ae:	69e3      	ldr	r3, [r4, #28]
    25b0:	b2f6      	uxtb	r6, r6
    25b2:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    25b4:	b672      	cpsid	i
	transmitting_ = 1;
    25b6:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    25b8:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    25ba:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    25be:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    25c2:	6993      	ldr	r3, [r2, #24]
    25c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    25c8:	6193      	str	r3, [r2, #24]
	__enable_irq();
    25ca:	b662      	cpsie	i
}
    25cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    25ce:	1a1b      	subs	r3, r3, r0
    25d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    25d2:	5cc3      	ldrb	r3, [r0, r3]
    25d4:	b2db      	uxtb	r3, r3
    25d6:	e7cf      	b.n	2578 <HardwareSerial::write9bit(unsigned long)+0x64>
    25d8:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    25da:	4613      	mov	r3, r2
    25dc:	e7c6      	b.n	256c <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    25de:	b2af      	uxth	r7, r5
    25e0:	e7b2      	b.n	2548 <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    25e2:	1aed      	subs	r5, r5, r3
    25e4:	b2f6      	uxtb	r6, r6
    25e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25e8:	555e      	strb	r6, [r3, r5]
    25ea:	e7e3      	b.n	25b4 <HardwareSerial::write9bit(unsigned long)+0xa0>

000025ec <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    25ec:	f7ff bf92 	b.w	2514 <HardwareSerial::write9bit(unsigned long)>

000025f0 <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    25f0:	6902      	ldr	r2, [r0, #16]
    25f2:	6953      	ldr	r3, [r2, #20]
    25f4:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    25f8:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    25fa:	4615      	mov	r5, r2
    25fc:	d047      	beq.n	268e <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    25fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    2600:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2604:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    2608:	d03e      	beq.n	2688 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    260a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    260e:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    2612:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    2614:	b2ad      	uxth	r5, r5
    2616:	e008      	b.n	262a <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    2618:	6a02      	ldr	r2, [r0, #32]
    261a:	f802 c003 	strb.w	ip, [r2, r3]
    261e:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    2620:	f10e 33ff 	add.w	r3, lr, #4294967295
    2624:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2628:	d01e      	beq.n	2668 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    262a:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    262c:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    262e:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2632:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2634:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    2638:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    263c:	429e      	cmp	r6, r3
    263e:	bf98      	it	ls
    2640:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    2642:	459c      	cmp	ip, r3
    2644:	d0ec      	beq.n	2620 <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    2646:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2648:	fa5f fc81 	uxtb.w	ip, r1
    264c:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    264e:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2650:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    2654:	d8e0      	bhi.n	2618 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2656:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2658:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    265c:	f10e 33ff 	add.w	r3, lr, #4294967295
    2660:	6902      	ldr	r2, [r0, #16]
    2662:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2666:	d1e0      	bne.n	262a <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    2668:	b2a3      	uxth	r3, r4
    266a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    266e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2670:	2b00      	cmp	r3, #0
    2672:	d05a      	beq.n	272a <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    2674:	42ac      	cmp	r4, r5
    2676:	d35d      	bcc.n	2734 <HardwareSerial::IRQHandler()+0x144>
    2678:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    267a:	6c01      	ldr	r1, [r0, #64]	; 0x40
    267c:	42a1      	cmp	r1, r4
    267e:	d854      	bhi.n	272a <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2680:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    2682:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2684:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    2688:	6953      	ldr	r3, [r2, #20]
    268a:	02dc      	lsls	r4, r3, #11
    268c:	d448      	bmi.n	2720 <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    268e:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    2690:	0231      	lsls	r1, r6, #8
    2692:	d529      	bpl.n	26e8 <HardwareSerial::IRQHandler()+0xf8>
    2694:	6953      	ldr	r3, [r2, #20]
    2696:	021b      	lsls	r3, r3, #8
    2698:	d526      	bpl.n	26e8 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    269a:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    269e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    26a2:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    26a6:	b29b      	uxth	r3, r3
    26a8:	e006      	b.n	26b8 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    26aa:	69c1      	ldr	r1, [r0, #28]
    26ac:	5cc9      	ldrb	r1, [r1, r3]
    26ae:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    26b0:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    26b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    26b4:	054c      	lsls	r4, r1, #21
    26b6:	d412      	bmi.n	26de <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    26b8:	4563      	cmp	r3, ip
    26ba:	d03f      	beq.n	273c <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    26bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
    26be:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    26c0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    26c2:	429c      	cmp	r4, r3
    26c4:	bf98      	it	ls
    26c6:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    26c8:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    26ca:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    26ce:	d8ec      	bhi.n	26aa <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    26d0:	6a81      	ldr	r1, [r0, #40]	; 0x28
    26d2:	5d09      	ldrb	r1, [r1, r4]
    26d4:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    26d6:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    26d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    26da:	054c      	lsls	r4, r1, #21
    26dc:	d5ec      	bpl.n	26b8 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    26de:	b299      	uxth	r1, r3
		if (head == tail) {
    26e0:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    26e2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    26e6:	d02c      	beq.n	2742 <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    26e8:	0271      	lsls	r1, r6, #9
    26ea:	d518      	bpl.n	271e <HardwareSerial::IRQHandler()+0x12e>
    26ec:	6953      	ldr	r3, [r2, #20]
    26ee:	025b      	lsls	r3, r3, #9
    26f0:	d515      	bpl.n	271e <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    26f2:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    26f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    26f6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    26fa:	b113      	cbz	r3, 2702 <HardwareSerial::IRQHandler()+0x112>
    26fc:	6d42      	ldr	r2, [r0, #84]	; 0x54
    26fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    2702:	7e83      	ldrb	r3, [r0, #26]
    2704:	b13b      	cbz	r3, 2716 <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    2706:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    2708:	6902      	ldr	r2, [r0, #16]
    270a:	6993      	ldr	r3, [r2, #24]
    270c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2710:	6193      	str	r3, [r2, #24]
			__enable_irq();
    2712:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    2714:	6905      	ldr	r5, [r0, #16]
    2716:	69ab      	ldr	r3, [r5, #24]
    2718:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    271c:	61ab      	str	r3, [r5, #24]
}
    271e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    2720:	6953      	ldr	r3, [r2, #20]
    2722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2726:	6153      	str	r3, [r2, #20]
    2728:	e7b1      	b.n	268e <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    272a:	6953      	ldr	r3, [r2, #20]
    272c:	4615      	mov	r5, r2
    272e:	02dc      	lsls	r4, r3, #11
    2730:	d5ad      	bpl.n	268e <HardwareSerial::IRQHandler()+0x9e>
    2732:	e7f5      	b.n	2720 <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    2734:	6b81      	ldr	r1, [r0, #56]	; 0x38
    2736:	1b49      	subs	r1, r1, r5
    2738:	440c      	add	r4, r1
    273a:	e79e      	b.n	267a <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    273c:	b29b      	uxth	r3, r3
    273e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    2742:	6993      	ldr	r3, [r2, #24]
    2744:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2748:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    274a:	6993      	ldr	r3, [r2, #24]
    274c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2750:	6193      	str	r3, [r2, #24]
    2752:	e7c9      	b.n	26e8 <HardwareSerial::IRQHandler()+0xf8>

00002754 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    2754:	4801      	ldr	r0, [pc, #4]	; (275c <IRQHandler_Serial1+0x8>)
    2756:	f7ff bf4b 	b.w	25f0 <HardwareSerial::IRQHandler()>
    275a:	bf00      	nop
    275c:	20001d78 	.word	0x20001d78

00002760 <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    2760:	b410      	push	{r4}
    2762:	4b16      	ldr	r3, [pc, #88]	; (27bc <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    2764:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2768:	4815      	ldr	r0, [pc, #84]	; (27c0 <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    276a:	2200      	movs	r2, #0
    276c:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    276e:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    2770:	4c14      	ldr	r4, [pc, #80]	; (27c4 <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2772:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    2774:	4814      	ldr	r0, [pc, #80]	; (27c8 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    2776:	611c      	str	r4, [r3, #16]
    2778:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    277a:	4c14      	ldr	r4, [pc, #80]	; (27cc <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    277c:	4814      	ldr	r0, [pc, #80]	; (27d0 <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    277e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2782:	731a      	strb	r2, [r3, #12]
    2784:	831a      	strh	r2, [r3, #24]
    2786:	769a      	strb	r2, [r3, #26]
    2788:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    278c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    278e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2792:	f85d 4b04 	ldr.w	r4, [sp], #4
    2796:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    279a:	605a      	str	r2, [r3, #4]
    279c:	625a      	str	r2, [r3, #36]	; 0x24
    279e:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27a0:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27a6:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27aa:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    27ae:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    27b2:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    27b6:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    27ba:	4770      	bx	lr
    27bc:	20001d78 	.word	0x20001d78
    27c0:	200005b8 	.word	0x200005b8
    27c4:	40198000 	.word	0x40198000
    27c8:	200003fc 	.word	0x200003fc
    27cc:	20002638 	.word	0x20002638
    27d0:	20002438 	.word	0x20002438

000027d4 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    27d4:	4801      	ldr	r0, [pc, #4]	; (27dc <IRQHandler_Serial2+0x8>)
    27d6:	f7ff bf0b 	b.w	25f0 <HardwareSerial::IRQHandler()>
    27da:	bf00      	nop
    27dc:	20001dd8 	.word	0x20001dd8

000027e0 <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    27e0:	b410      	push	{r4}
    27e2:	4b17      	ldr	r3, [pc, #92]	; (2840 <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    27e4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    27e8:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27ea:	2028      	movs	r0, #40	; 0x28
    27ec:	609c      	str	r4, [r3, #8]
    27ee:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27f0:	4c14      	ldr	r4, [pc, #80]	; (2844 <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    27f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    27f6:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    27f8:	4c13      	ldr	r4, [pc, #76]	; (2848 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    27fa:	731a      	strb	r2, [r3, #12]
    27fc:	611c      	str	r4, [r3, #16]
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2800:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2802:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2804:	4c12      	ldr	r4, [pc, #72]	; (2850 <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2806:	769a      	strb	r2, [r3, #26]
    2808:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    280c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    280e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2812:	f85d 4b04 	ldr.w	r4, [sp], #4
    2816:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    281a:	605a      	str	r2, [r3, #4]
    281c:	625a      	str	r2, [r3, #36]	; 0x24
    281e:	641a      	str	r2, [r3, #64]	; 0x40
    2820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2824:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2828:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    282c:	4809      	ldr	r0, [pc, #36]	; (2854 <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    282e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2832:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2834:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2838:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    283c:	4770      	bx	lr
    283e:	bf00      	nop
    2840:	20001dd8 	.word	0x20001dd8
    2844:	200005b8 	.word	0x200005b8
    2848:	40190000 	.word	0x40190000
    284c:	2000101c 	.word	0x2000101c
    2850:	20002678 	.word	0x20002678
    2854:	20002478 	.word	0x20002478

00002858 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    2858:	4801      	ldr	r0, [pc, #4]	; (2860 <IRQHandler_Serial3+0x8>)
    285a:	f7ff bec9 	b.w	25f0 <HardwareSerial::IRQHandler()>
    285e:	bf00      	nop
    2860:	20001e38 	.word	0x20001e38

00002864 <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    2864:	b410      	push	{r4}
    2866:	4b17      	ldr	r3, [pc, #92]	; (28c4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    2868:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    286c:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    286e:	2028      	movs	r0, #40	; 0x28
    2870:	609c      	str	r4, [r3, #8]
    2872:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2874:	4c14      	ldr	r4, [pc, #80]	; (28c8 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    2876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    287a:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    287c:	4c13      	ldr	r4, [pc, #76]	; (28cc <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    287e:	731a      	strb	r2, [r3, #12]
    2880:	611c      	str	r4, [r3, #16]
    2882:	4c13      	ldr	r4, [pc, #76]	; (28d0 <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2884:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2886:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2888:	4c12      	ldr	r4, [pc, #72]	; (28d4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    288a:	769a      	strb	r2, [r3, #26]
    288c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2890:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2896:	f85d 4b04 	ldr.w	r4, [sp], #4
    289a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    289e:	605a      	str	r2, [r3, #4]
    28a0:	625a      	str	r2, [r3, #36]	; 0x24
    28a2:	641a      	str	r2, [r3, #64]	; 0x40
    28a4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28a8:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28ac:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28b0:	4809      	ldr	r0, [pc, #36]	; (28d8 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28b2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28b6:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28b8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    28bc:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop
    28c4:	20001e38 	.word	0x20001e38
    28c8:	200005b8 	.word	0x200005b8
    28cc:	40188000 	.word	0x40188000
    28d0:	20000f54 	.word	0x20000f54
    28d4:	200026a0 	.word	0x200026a0
    28d8:	200024b8 	.word	0x200024b8

000028dc <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    28dc:	4801      	ldr	r0, [pc, #4]	; (28e4 <IRQHandler_Serial4+0x8>)
    28de:	f7ff be87 	b.w	25f0 <HardwareSerial::IRQHandler()>
    28e2:	bf00      	nop
    28e4:	20001e98 	.word	0x20001e98

000028e8 <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    28e8:	b410      	push	{r4}
    28ea:	4b17      	ldr	r3, [pc, #92]	; (2948 <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    28ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    28f0:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28f2:	2028      	movs	r0, #40	; 0x28
    28f4:	609c      	str	r4, [r3, #8]
    28f6:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28f8:	4c14      	ldr	r4, [pc, #80]	; (294c <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    28fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    28fe:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2900:	4c13      	ldr	r4, [pc, #76]	; (2950 <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    2902:	731a      	strb	r2, [r3, #12]
    2904:	611c      	str	r4, [r3, #16]
    2906:	4c13      	ldr	r4, [pc, #76]	; (2954 <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2908:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    290a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    290c:	4c12      	ldr	r4, [pc, #72]	; (2958 <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    290e:	769a      	strb	r2, [r3, #26]
    2910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2914:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    291a:	f85d 4b04 	ldr.w	r4, [sp], #4
    291e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2922:	605a      	str	r2, [r3, #4]
    2924:	625a      	str	r2, [r3, #36]	; 0x24
    2926:	641a      	str	r2, [r3, #64]	; 0x40
    2928:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    292c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2930:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2934:	4809      	ldr	r0, [pc, #36]	; (295c <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2936:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    293a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    293c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2940:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2944:	4770      	bx	lr
    2946:	bf00      	nop
    2948:	20001e98 	.word	0x20001e98
    294c:	200005b8 	.word	0x200005b8
    2950:	4018c000 	.word	0x4018c000
    2954:	20000fb8 	.word	0x20000fb8
    2958:	200026c8 	.word	0x200026c8
    295c:	200024f8 	.word	0x200024f8

00002960 <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    2960:	4801      	ldr	r0, [pc, #4]	; (2968 <IRQHandler_Serial5+0x8>)
    2962:	f7ff be45 	b.w	25f0 <HardwareSerial::IRQHandler()>
    2966:	bf00      	nop
    2968:	20001ef8 	.word	0x20001ef8

0000296c <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    296c:	b410      	push	{r4}
    296e:	4b17      	ldr	r3, [pc, #92]	; (29cc <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    2970:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2974:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2976:	2028      	movs	r0, #40	; 0x28
    2978:	609c      	str	r4, [r3, #8]
    297a:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    297c:	4c14      	ldr	r4, [pc, #80]	; (29d0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    297e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2982:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2984:	4c13      	ldr	r4, [pc, #76]	; (29d4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    2986:	731a      	strb	r2, [r3, #12]
    2988:	611c      	str	r4, [r3, #16]
    298a:	4c13      	ldr	r4, [pc, #76]	; (29d8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    298c:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    298e:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2990:	4c12      	ldr	r4, [pc, #72]	; (29dc <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2992:	769a      	strb	r2, [r3, #26]
    2994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2998:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    299a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    299e:	f85d 4b04 	ldr.w	r4, [sp], #4
    29a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    29a6:	605a      	str	r2, [r3, #4]
    29a8:	625a      	str	r2, [r3, #36]	; 0x24
    29aa:	641a      	str	r2, [r3, #64]	; 0x40
    29ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29b0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29b4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29b8:	4809      	ldr	r0, [pc, #36]	; (29e0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29ba:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29be:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29c0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    29c4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    29c8:	4770      	bx	lr
    29ca:	bf00      	nop
    29cc:	20001ef8 	.word	0x20001ef8
    29d0:	200005b8 	.word	0x200005b8
    29d4:	401a0000 	.word	0x401a0000
    29d8:	20001148 	.word	0x20001148
    29dc:	200026f0 	.word	0x200026f0
    29e0:	20002538 	.word	0x20002538

000029e4 <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    29e4:	4801      	ldr	r0, [pc, #4]	; (29ec <IRQHandler_Serial6+0x8>)
    29e6:	f7ff be03 	b.w	25f0 <HardwareSerial::IRQHandler()>
    29ea:	bf00      	nop
    29ec:	20001f58 	.word	0x20001f58

000029f0 <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    29f0:	b410      	push	{r4}
    29f2:	4b17      	ldr	r3, [pc, #92]	; (2a50 <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    29f4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    29f8:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29fa:	2028      	movs	r0, #40	; 0x28
    29fc:	609c      	str	r4, [r3, #8]
    29fe:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a00:	4c14      	ldr	r4, [pc, #80]	; (2a54 <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    2a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2a06:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2a08:	4c13      	ldr	r4, [pc, #76]	; (2a58 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    2a0a:	731a      	strb	r2, [r3, #12]
    2a0c:	611c      	str	r4, [r3, #16]
    2a0e:	4c13      	ldr	r4, [pc, #76]	; (2a5c <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a10:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2a12:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a14:	4c12      	ldr	r4, [pc, #72]	; (2a60 <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a16:	769a      	strb	r2, [r3, #26]
    2a18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a1c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2a22:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2a2a:	605a      	str	r2, [r3, #4]
    2a2c:	625a      	str	r2, [r3, #36]	; 0x24
    2a2e:	641a      	str	r2, [r3, #64]	; 0x40
    2a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a34:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a38:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a3c:	4809      	ldr	r0, [pc, #36]	; (2a64 <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a3e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a42:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a44:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2a48:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop
    2a50:	20001f58 	.word	0x20001f58
    2a54:	200005b8 	.word	0x200005b8
    2a58:	40184000 	.word	0x40184000
    2a5c:	20000ef0 	.word	0x20000ef0
    2a60:	20002718 	.word	0x20002718
    2a64:	20002578 	.word	0x20002578

00002a68 <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    2a68:	4801      	ldr	r0, [pc, #4]	; (2a70 <IRQHandler_Serial7+0x8>)
    2a6a:	f7ff bdc1 	b.w	25f0 <HardwareSerial::IRQHandler()>
    2a6e:	bf00      	nop
    2a70:	20001fb8 	.word	0x20001fb8

00002a74 <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    2a74:	b410      	push	{r4}
    2a76:	4b17      	ldr	r3, [pc, #92]	; (2ad4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    2a78:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2a7c:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a7e:	2028      	movs	r0, #40	; 0x28
    2a80:	609c      	str	r4, [r3, #8]
    2a82:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a84:	4c14      	ldr	r4, [pc, #80]	; (2ad8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    2a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2a8a:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2a8c:	4c13      	ldr	r4, [pc, #76]	; (2adc <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    2a8e:	731a      	strb	r2, [r3, #12]
    2a90:	611c      	str	r4, [r3, #16]
    2a92:	4c13      	ldr	r4, [pc, #76]	; (2ae0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a94:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2a96:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a98:	4c12      	ldr	r4, [pc, #72]	; (2ae4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a9a:	769a      	strb	r2, [r3, #26]
    2a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2aa0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2aaa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2aae:	605a      	str	r2, [r3, #4]
    2ab0:	625a      	str	r2, [r3, #36]	; 0x24
    2ab2:	641a      	str	r2, [r3, #64]	; 0x40
    2ab4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ab8:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2abc:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ac0:	4809      	ldr	r0, [pc, #36]	; (2ae8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ac2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ac6:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ac8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2acc:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2ad0:	4770      	bx	lr
    2ad2:	bf00      	nop
    2ad4:	20001fb8 	.word	0x20001fb8
    2ad8:	200005b8 	.word	0x200005b8
    2adc:	4019c000 	.word	0x4019c000
    2ae0:	200010e4 	.word	0x200010e4
    2ae4:	20002740 	.word	0x20002740
    2ae8:	200025b8 	.word	0x200025b8

00002aec <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    2aec:	4801      	ldr	r0, [pc, #4]	; (2af4 <IRQHandler_Serial8+0x8>)
    2aee:	f7ff bd7f 	b.w	25f0 <HardwareSerial::IRQHandler()>
    2af2:	bf00      	nop
    2af4:	20002018 	.word	0x20002018

00002af8 <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    2af8:	b410      	push	{r4}
    2afa:	4b17      	ldr	r3, [pc, #92]	; (2b58 <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
    2afc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2b00:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b02:	2028      	movs	r0, #40	; 0x28
    2b04:	609c      	str	r4, [r3, #8]
    2b06:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b08:	4c14      	ldr	r4, [pc, #80]	; (2b5c <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    2b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2b0e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2b10:	4c13      	ldr	r4, [pc, #76]	; (2b60 <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    2b12:	731a      	strb	r2, [r3, #12]
    2b14:	611c      	str	r4, [r3, #16]
    2b16:	4c13      	ldr	r4, [pc, #76]	; (2b64 <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b18:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2b1a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b1c:	4c12      	ldr	r4, [pc, #72]	; (2b68 <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b1e:	769a      	strb	r2, [r3, #26]
    2b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b24:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2b32:	605a      	str	r2, [r3, #4]
    2b34:	625a      	str	r2, [r3, #36]	; 0x24
    2b36:	641a      	str	r2, [r3, #64]	; 0x40
    2b38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b3c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b40:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b44:	4809      	ldr	r0, [pc, #36]	; (2b6c <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b46:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b4a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b4c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2b50:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2b54:	4770      	bx	lr
    2b56:	bf00      	nop
    2b58:	20002018 	.word	0x20002018
    2b5c:	200005b8 	.word	0x200005b8
    2b60:	40194000 	.word	0x40194000
    2b64:	20001080 	.word	0x20001080
    2b68:	20002768 	.word	0x20002768
    2b6c:	200025f8 	.word	0x200025f8

00002b70 <Print::write(unsigned char const*, unsigned int)>:
{
    2b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    2b74:	460c      	mov	r4, r1
    2b76:	b1d1      	cbz	r1, 2bae <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    2b78:	b1ea      	cbz	r2, 2bb6 <Print::write(unsigned char const*, unsigned int)+0x46>
    2b7a:	4680      	mov	r8, r0
    2b7c:	188e      	adds	r6, r1, r2
	size_t count = 0;
    2b7e:	2500      	movs	r5, #0
    2b80:	4f0e      	ldr	r7, [pc, #56]	; (2bbc <Print::write(unsigned char const*, unsigned int)+0x4c>)
    2b82:	e004      	b.n	2b8e <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2b84:	f002 f908 	bl	4d98 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    2b88:	42b4      	cmp	r4, r6
    2b8a:	4405      	add	r5, r0
    2b8c:	d00c      	beq.n	2ba8 <Print::write(unsigned char const*, unsigned int)+0x38>
    2b8e:	f8d8 3000 	ldr.w	r3, [r8]
    2b92:	f814 0b01 	ldrb.w	r0, [r4], #1
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	42bb      	cmp	r3, r7
    2b9a:	d0f3      	beq.n	2b84 <Print::write(unsigned char const*, unsigned int)+0x14>
    2b9c:	4601      	mov	r1, r0
    2b9e:	4640      	mov	r0, r8
    2ba0:	4798      	blx	r3
    2ba2:	42b4      	cmp	r4, r6
    2ba4:	4405      	add	r5, r0
    2ba6:	d1f2      	bne.n	2b8e <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    2ba8:	4628      	mov	r0, r5
    2baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    2bae:	460d      	mov	r5, r1
}
    2bb0:	4628      	mov	r0, r5
    2bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    2bb6:	4615      	mov	r5, r2
    2bb8:	e7f6      	b.n	2ba8 <Print::write(unsigned char const*, unsigned int)+0x38>
    2bba:	bf00      	nop
    2bbc:	00000cc1 	.word	0x00000cc1

00002bc0 <Print::print(String const&)>:
{
    2bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    2bc4:	688c      	ldr	r4, [r1, #8]
    2bc6:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    2bc8:	b1dc      	cbz	r4, 2c02 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    2bca:	2500      	movs	r5, #0
    2bcc:	4688      	mov	r8, r1
    2bce:	4606      	mov	r6, r0
	size_t count = 0;
    2bd0:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    2bd2:	462b      	mov	r3, r5
    2bd4:	2221      	movs	r2, #33	; 0x21
    2bd6:	a901      	add	r1, sp, #4
    2bd8:	4640      	mov	r0, r8
    2bda:	f000 f9cf 	bl	2f7c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    2bde:	2c20      	cmp	r4, #32
    2be0:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    2be2:	6833      	ldr	r3, [r6, #0]
    2be4:	bf28      	it	cs
    2be6:	2220      	movcs	r2, #32
    2be8:	a901      	add	r1, sp, #4
    2bea:	4630      	mov	r0, r6
    2bec:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    2bee:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    2bf0:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    2bf2:	4798      	blx	r3
    2bf4:	4407      	add	r7, r0
	while (len > 0) {
    2bf6:	2c00      	cmp	r4, #0
    2bf8:	d1eb      	bne.n	2bd2 <Print::print(String const&)+0x12>
}
    2bfa:	4638      	mov	r0, r7
    2bfc:	b00a      	add	sp, #40	; 0x28
    2bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    2c02:	4627      	mov	r7, r4
}
    2c04:	4638      	mov	r0, r7
    2c06:	b00a      	add	sp, #40	; 0x28
    2c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002c0c <Print::println()>:
{
    2c0c:	b500      	push	{lr}
	return write(buf, 2);
    2c0e:	6803      	ldr	r3, [r0, #0]
{
    2c10:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    2c12:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    2c16:	2202      	movs	r2, #2
    2c18:	a901      	add	r1, sp, #4
    2c1a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    2c1c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    2c20:	4798      	blx	r3
}
    2c22:	b003      	add	sp, #12
    2c24:	f85d fb04 	ldr.w	pc, [sp], #4

00002c28 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c28:	4b05      	ldr	r3, [pc, #20]	; (2c40 <_write+0x18>)
    2c2a:	2802      	cmp	r0, #2
    2c2c:	bf88      	it	hi
    2c2e:	4603      	movhi	r3, r0
{
    2c30:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c32:	681c      	ldr	r4, [r3, #0]
    2c34:	4618      	mov	r0, r3
    2c36:	6863      	ldr	r3, [r4, #4]
}
    2c38:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c3c:	4718      	bx	r3
    2c3e:	bf00      	nop
    2c40:	20000ee0 	.word	0x20000ee0

00002c44 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2c44:	f002 b832 	b.w	4cac <usb_serial_peekchar>

00002c48 <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    2c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    2c4c:	2700      	movs	r7, #0
{
    2c4e:	468b      	mov	fp, r1
    2c50:	4681      	mov	r9, r0
    2c52:	4692      	mov	sl, r2
	String str;
    2c54:	4639      	mov	r1, r7
    2c56:	f103 38ff 	add.w	r8, r3, #4294967295
    2c5a:	4c17      	ldr	r4, [pc, #92]	; (2cb8 <Stream::readStringUntil(char, unsigned int)+0x70>)
    2c5c:	4e17      	ldr	r6, [pc, #92]	; (2cbc <Stream::readStringUntil(char, unsigned int)+0x74>)
    2c5e:	f000 f89f 	bl	2da0 <String::String(char const*)>
	return systick_millis_count;
    2c62:	6825      	ldr	r5, [r4, #0]
    2c64:	e00b      	b.n	2c7e <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    2c66:	f002 f887 	bl	4d78 <usb_serial_getchar>
    if (c >= 0) return c;
    2c6a:	2800      	cmp	r0, #0
    2c6c:	da10      	bge.n	2c90 <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    2c6e:	f002 f927 	bl	4ec0 <yield>
    2c72:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    2c74:	f8db 2008 	ldr.w	r2, [fp, #8]
    2c78:	1b5b      	subs	r3, r3, r5
    2c7a:	4293      	cmp	r3, r2
    2c7c:	d215      	bcs.n	2caa <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    2c7e:	f8db 3000 	ldr.w	r3, [fp]
    2c82:	695b      	ldr	r3, [r3, #20]
    2c84:	42b3      	cmp	r3, r6
    2c86:	d0ee      	beq.n	2c66 <Stream::readStringUntil(char, unsigned int)+0x1e>
    2c88:	4658      	mov	r0, fp
    2c8a:	4798      	blx	r3
    if (c >= 0) return c;
    2c8c:	2800      	cmp	r0, #0
    2c8e:	dbee      	blt.n	2c6e <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    2c90:	d008      	beq.n	2ca4 <Stream::readStringUntil(char, unsigned int)+0x5c>
    2c92:	4582      	cmp	sl, r0
    2c94:	d006      	beq.n	2ca4 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    2c96:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    2c98:	b2c1      	uxtb	r1, r0
    2c9a:	4648      	mov	r0, r9
    2c9c:	f000 f940 	bl	2f20 <String::append(char)>
	while (length < max || !max) {
    2ca0:	4547      	cmp	r7, r8
    2ca2:	d9de      	bls.n	2c62 <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    2ca4:	4648      	mov	r0, r9
    2ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    2caa:	2301      	movs	r3, #1
    2cac:	4648      	mov	r0, r9
    2cae:	f88b 300c 	strb.w	r3, [fp, #12]
    2cb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cb6:	bf00      	nop
    2cb8:	200035bc 	.word	0x200035bc
    2cbc:	00000cbd 	.word	0x00000cbd

00002cc0 <String::String(String const&)>:
String::String(const String &value)
    2cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    2cc2:	4288      	cmp	r0, r1
	buffer = NULL;
    2cc4:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    2cc8:	4604      	mov	r4, r0
	len = 0;
    2cca:	6085      	str	r5, [r0, #8]
	flags = 0;
    2ccc:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    2cce:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    2cd2:	d002      	beq.n	2cda <String::String(String const&)+0x1a>
    2cd4:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    2cd6:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    2cd8:	b90e      	cbnz	r6, 2cde <String::String(String const&)+0x1e>
}
    2cda:	4620      	mov	r0, r4
    2cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2cde:	1c70      	adds	r0, r6, #1
    2ce0:	f002 fa02 	bl	50e8 <malloc>
	if (newbuffer) {
    2ce4:	2800      	cmp	r0, #0
    2ce6:	d0f8      	beq.n	2cda <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    2ce8:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    2cea:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    2cec:	6020      	str	r0, [r4, #0]
	len = length;
    2cee:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    2cf2:	f003 fe83 	bl	69fc <strcpy>
}
    2cf6:	4620      	mov	r0, r4
    2cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cfa:	bf00      	nop

00002cfc <String::String(String&&)>:
	buffer = NULL;
    2cfc:	2300      	movs	r3, #0
	if (&rhs == this) return;
    2cfe:	4288      	cmp	r0, r1
	capacity = 0;
    2d00:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    2d04:	6083      	str	r3, [r0, #8]
	flags = 0;
    2d06:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    2d08:	d00c      	beq.n	2d24 <String::String(String&&)+0x28>
String::String(String &&rval)
    2d0a:	b410      	push	{r4}
	capacity = rhs.capacity;
    2d0c:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    2d10:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    2d14:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    2d18:	688a      	ldr	r2, [r1, #8]
}
    2d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    2d1e:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    2d20:	6082      	str	r2, [r0, #8]
}
    2d22:	4770      	bx	lr
    2d24:	4770      	bx	lr
    2d26:	bf00      	nop

00002d28 <String::~String()>:
String::~String()
    2d28:	b510      	push	{r4, lr}
    2d2a:	4604      	mov	r4, r0
	free(buffer);
    2d2c:	6800      	ldr	r0, [r0, #0]
    2d2e:	f002 f9e3 	bl	50f8 <free>
}
    2d32:	4620      	mov	r0, r4
    2d34:	bd10      	pop	{r4, pc}
    2d36:	bf00      	nop

00002d38 <String::copy(char const*, unsigned int)>:
{
    2d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d3a:	4604      	mov	r4, r0
	if (length == 0) {
    2d3c:	4615      	mov	r5, r2
    2d3e:	b932      	cbnz	r2, 2d4e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2d40:	6803      	ldr	r3, [r0, #0]
    2d42:	b103      	cbz	r3, 2d46 <String::copy(char const*, unsigned int)+0xe>
    2d44:	701a      	strb	r2, [r3, #0]
		len = 0;
    2d46:	2300      	movs	r3, #0
}
    2d48:	4620      	mov	r0, r4
		len = 0;
    2d4a:	60a3      	str	r3, [r4, #8]
}
    2d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    2d4e:	6843      	ldr	r3, [r0, #4]
    2d50:	460e      	mov	r6, r1
    2d52:	429a      	cmp	r2, r3
    2d54:	d91c      	bls.n	2d90 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2d56:	1c51      	adds	r1, r2, #1
    2d58:	6800      	ldr	r0, [r0, #0]
    2d5a:	f002 fc91 	bl	5680 <realloc>
	if (newbuffer) {
    2d5e:	4607      	mov	r7, r0
    2d60:	b160      	cbz	r0, 2d7c <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    2d62:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2d64:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    2d68:	b90b      	cbnz	r3, 2d6e <String::copy(char const*, unsigned int)+0x36>
    2d6a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    2d6c:	6827      	ldr	r7, [r4, #0]
    2d6e:	4631      	mov	r1, r6
    2d70:	4638      	mov	r0, r7
	len = length;
    2d72:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2d74:	f003 fe42 	bl	69fc <strcpy>
}
    2d78:	4620      	mov	r0, r4
    2d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    2d7c:	6820      	ldr	r0, [r4, #0]
    2d7e:	b110      	cbz	r0, 2d86 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    2d80:	f002 f9ba 	bl	50f8 <free>
			buffer = NULL;
    2d84:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    2d86:	2300      	movs	r3, #0
}
    2d88:	4620      	mov	r0, r4
		len = capacity = 0;
    2d8a:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    2d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    2d90:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    2d92:	4631      	mov	r1, r6
	len = length;
    2d94:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2d96:	4638      	mov	r0, r7
    2d98:	f003 fe30 	bl	69fc <strcpy>
	return *this;
    2d9c:	e7ec      	b.n	2d78 <String::copy(char const*, unsigned int)+0x40>
    2d9e:	bf00      	nop

00002da0 <String::String(char const*)>:
String::String(const char *cstr)
    2da0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    2da2:	2300      	movs	r3, #0
String::String(const char *cstr)
    2da4:	4604      	mov	r4, r0
	capacity = 0;
    2da6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    2daa:	6083      	str	r3, [r0, #8]
	flags = 0;
    2dac:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    2dae:	b141      	cbz	r1, 2dc2 <String::String(char const*)+0x22>
    2db0:	460d      	mov	r5, r1
    2db2:	4608      	mov	r0, r1
    2db4:	f003 fe84 	bl	6ac0 <strlen>
    2db8:	4602      	mov	r2, r0
    2dba:	4629      	mov	r1, r5
    2dbc:	4620      	mov	r0, r4
    2dbe:	f7ff ffbb 	bl	2d38 <String::copy(char const*, unsigned int)>
}
    2dc2:	4620      	mov	r0, r4
    2dc4:	bd38      	pop	{r3, r4, r5, pc}
    2dc6:	bf00      	nop

00002dc8 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    2dc8:	b510      	push	{r4, lr}
	buffer = NULL;
    2dca:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    2dcc:	b08a      	sub	sp, #40	; 0x28
    2dce:	4604      	mov	r4, r0
	itoa(value, buf, base);
    2dd0:	4608      	mov	r0, r1
    2dd2:	a901      	add	r1, sp, #4
	len = 0;
    2dd4:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2dd6:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2dd8:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    2ddc:	f002 f96e 	bl	50bc <itoa>
		copy(cstr, strlen(cstr));
    2de0:	a801      	add	r0, sp, #4
    2de2:	f003 fe6d 	bl	6ac0 <strlen>
    2de6:	a901      	add	r1, sp, #4
    2de8:	4602      	mov	r2, r0
    2dea:	4620      	mov	r0, r4
    2dec:	f7ff ffa4 	bl	2d38 <String::copy(char const*, unsigned int)>
}
    2df0:	4620      	mov	r0, r4
    2df2:	b00a      	add	sp, #40	; 0x28
    2df4:	bd10      	pop	{r4, pc}
    2df6:	bf00      	nop

00002df8 <String::String(long, unsigned char)>:
String::String(long value, unsigned char base)
    2df8:	b510      	push	{r4, lr}
	buffer = NULL;
    2dfa:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
    2dfc:	b08a      	sub	sp, #40	; 0x28
    2dfe:	4604      	mov	r4, r0
	ltoa(value, buf, base);
    2e00:	4608      	mov	r0, r1
    2e02:	a901      	add	r1, sp, #4
	len = 0;
    2e04:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2e06:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e08:	e9c4 3300 	strd	r3, r3, [r4]
	ltoa(value, buf, base);
    2e0c:	f000 fc6a 	bl	36e4 <ltoa>
		copy(cstr, strlen(cstr));
    2e10:	a801      	add	r0, sp, #4
    2e12:	f003 fe55 	bl	6ac0 <strlen>
    2e16:	a901      	add	r1, sp, #4
    2e18:	4602      	mov	r2, r0
    2e1a:	4620      	mov	r0, r4
    2e1c:	f7ff ff8c 	bl	2d38 <String::copy(char const*, unsigned int)>
}
    2e20:	4620      	mov	r0, r4
    2e22:	b00a      	add	sp, #40	; 0x28
    2e24:	bd10      	pop	{r4, pc}
    2e26:	bf00      	nop

00002e28 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    2e28:	b510      	push	{r4, lr}
	buffer = NULL;
    2e2a:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    2e2c:	b08a      	sub	sp, #40	; 0x28
    2e2e:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    2e30:	4608      	mov	r0, r1
    2e32:	a901      	add	r1, sp, #4
	len = 0;
    2e34:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2e36:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e38:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    2e3c:	f000 fc20 	bl	3680 <ultoa>
		copy(cstr, strlen(cstr));
    2e40:	a801      	add	r0, sp, #4
    2e42:	f003 fe3d 	bl	6ac0 <strlen>
    2e46:	a901      	add	r1, sp, #4
    2e48:	4602      	mov	r2, r0
    2e4a:	4620      	mov	r0, r4
    2e4c:	f7ff ff74 	bl	2d38 <String::copy(char const*, unsigned int)>
}
    2e50:	4620      	mov	r0, r4
    2e52:	b00a      	add	sp, #40	; 0x28
    2e54:	bd10      	pop	{r4, pc}
    2e56:	bf00      	nop

00002e58 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    2e58:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    2e5a:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    2e5c:	4604      	mov	r4, r0
    2e5e:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    2e60:	1c88      	adds	r0, r1, #2
	len = 0;
    2e62:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    2e64:	466a      	mov	r2, sp
	flags = 0;
    2e66:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e68:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    2e6c:	f000 fc4a 	bl	3704 <dtostrf>
	if (cstr) {
    2e70:	4605      	mov	r5, r0
    2e72:	b148      	cbz	r0, 2e88 <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
    2e74:	f003 fe24 	bl	6ac0 <strlen>
    2e78:	4629      	mov	r1, r5
    2e7a:	4602      	mov	r2, r0
    2e7c:	4620      	mov	r0, r4
    2e7e:	f7ff ff5b 	bl	2d38 <String::copy(char const*, unsigned int)>
}
    2e82:	4620      	mov	r0, r4
    2e84:	b00b      	add	sp, #44	; 0x2c
    2e86:	bd30      	pop	{r4, r5, pc}
		len = 0;
    2e88:	60a0      	str	r0, [r4, #8]
}
    2e8a:	4620      	mov	r0, r4
    2e8c:	b00b      	add	sp, #44	; 0x2c
    2e8e:	bd30      	pop	{r4, r5, pc}

00002e90 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    2e90:	4281      	cmp	r1, r0
    2e92:	d003      	beq.n	2e9c <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    2e94:	688a      	ldr	r2, [r1, #8]
    2e96:	6809      	ldr	r1, [r1, #0]
    2e98:	f7ff bf4e 	b.w	2d38 <String::copy(char const*, unsigned int)>
}
    2e9c:	4770      	bx	lr
    2e9e:	bf00      	nop

00002ea0 <String::append(char const*, unsigned int)>:
{
    2ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ea4:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2ea6:	6800      	ldr	r0, [r0, #0]
{
    2ea8:	460d      	mov	r5, r1
    2eaa:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2eac:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    2eae:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2eb0:	d809      	bhi.n	2ec6 <String::append(char const*, unsigned int)+0x26>
    2eb2:	18c2      	adds	r2, r0, r3
    2eb4:	4291      	cmp	r1, r2
    2eb6:	d206      	bcs.n	2ec6 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    2eb8:	1a0f      	subs	r7, r1, r0
		self = true;
    2eba:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    2ebe:	b936      	cbnz	r6, 2ece <String::append(char const*, unsigned int)+0x2e>
}
    2ec0:	4620      	mov	r0, r4
    2ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    2ec6:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    2eca:	2e00      	cmp	r6, #0
    2ecc:	d0f8      	beq.n	2ec0 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    2ece:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    2ed2:	6862      	ldr	r2, [r4, #4]
    2ed4:	4590      	cmp	r8, r2
    2ed6:	d90c      	bls.n	2ef2 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2ed8:	f108 0101 	add.w	r1, r8, #1
    2edc:	f002 fbd0 	bl	5680 <realloc>
	if (newbuffer) {
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d0ed      	beq.n	2ec0 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    2ee4:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2ee6:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    2eea:	b913      	cbnz	r3, 2ef2 <String::append(char const*, unsigned int)+0x52>
    2eec:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    2eee:	6820      	ldr	r0, [r4, #0]
    2ef0:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    2ef2:	f1b9 0f00 	cmp.w	r9, #0
    2ef6:	d108      	bne.n	2f0a <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    2ef8:	4629      	mov	r1, r5
    2efa:	4418      	add	r0, r3
    2efc:	f003 fd7e 	bl	69fc <strcpy>
}
    2f00:	4620      	mov	r0, r4
	len = newlen;
    2f02:	f8c4 8008 	str.w	r8, [r4, #8]
}
    2f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    2f0a:	4632      	mov	r2, r6
    2f0c:	19c1      	adds	r1, r0, r7
    2f0e:	4418      	add	r0, r3
    2f10:	f000 fb18 	bl	3544 <memcpy>
		buffer[newlen] = 0;
    2f14:	6823      	ldr	r3, [r4, #0]
    2f16:	2200      	movs	r2, #0
    2f18:	f803 2008 	strb.w	r2, [r3, r8]
    2f1c:	e7f0      	b.n	2f00 <String::append(char const*, unsigned int)+0x60>
    2f1e:	bf00      	nop

00002f20 <String::append(char)>:
{
    2f20:	b510      	push	{r4, lr}
    2f22:	b082      	sub	sp, #8
	buf[1] = 0;
    2f24:	2300      	movs	r3, #0
{
    2f26:	4604      	mov	r4, r0
	append(buf, 1);
    2f28:	2201      	movs	r2, #1
	buf[0] = c;
    2f2a:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    2f2e:	a901      	add	r1, sp, #4
	buf[1] = 0;
    2f30:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    2f34:	f7ff ffb4 	bl	2ea0 <String::append(char const*, unsigned int)>
}
    2f38:	4620      	mov	r0, r4
    2f3a:	b002      	add	sp, #8
    2f3c:	bd10      	pop	{r4, pc}
    2f3e:	bf00      	nop

00002f40 <operator+(StringSumHelper const&, String const&)>:
{
    2f40:	b510      	push	{r4, lr}
    2f42:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    2f44:	688a      	ldr	r2, [r1, #8]
    2f46:	6809      	ldr	r1, [r1, #0]
    2f48:	f7ff ffaa 	bl	2ea0 <String::append(char const*, unsigned int)>
}
    2f4c:	4620      	mov	r0, r4
    2f4e:	bd10      	pop	{r4, pc}

00002f50 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f50:	6882      	ldr	r2, [r0, #8]
{
    2f52:	b508      	push	{r3, lr}
    2f54:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f56:	b13a      	cbz	r2, 2f68 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    2f58:	b161      	cbz	r1, 2f74 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    2f5a:	6800      	ldr	r0, [r0, #0]
    2f5c:	f003 fbe4 	bl	6728 <strcmp>
    2f60:	fab0 f080 	clz	r0, r0
    2f64:	0940      	lsrs	r0, r0, #5
}
    2f66:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f68:	b131      	cbz	r1, 2f78 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    2f6a:	7818      	ldrb	r0, [r3, #0]
    2f6c:	fab0 f080 	clz	r0, r0
    2f70:	0940      	lsrs	r0, r0, #5
}
    2f72:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    2f74:	6803      	ldr	r3, [r0, #0]
    2f76:	e7f8      	b.n	2f6a <String::equals(char const*) const+0x1a>
    2f78:	2001      	movs	r0, #1
}
    2f7a:	bd08      	pop	{r3, pc}

00002f7c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    2f7c:	b1c2      	cbz	r2, 2fb0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    2f7e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    2f80:	fab1 f681 	clz	r6, r1
    2f84:	460c      	mov	r4, r1
    2f86:	0976      	lsrs	r6, r6, #5
    2f88:	b119      	cbz	r1, 2f92 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    2f8a:	6885      	ldr	r5, [r0, #8]
    2f8c:	429d      	cmp	r5, r3
    2f8e:	d801      	bhi.n	2f94 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    2f90:	700e      	strb	r6, [r1, #0]
}
    2f92:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    2f94:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    2f96:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    2f9a:	6801      	ldr	r1, [r0, #0]
    2f9c:	4620      	mov	r0, r4
    2f9e:	4565      	cmp	r5, ip
    2fa0:	4419      	add	r1, r3
    2fa2:	bf28      	it	cs
    2fa4:	4665      	movcs	r5, ip
    2fa6:	462a      	mov	r2, r5
    2fa8:	f003 f8d4 	bl	6154 <strncpy>
	buf[n] = 0;
    2fac:	5566      	strb	r6, [r4, r5]
}
    2fae:	bd70      	pop	{r4, r5, r6, pc}
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop

00002fb4 <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    2fb4:	6883      	ldr	r3, [r0, #8]
    2fb6:	b143      	cbz	r3, 2fca <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2fb8:	6809      	ldr	r1, [r1, #0]
{
    2fba:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2fbc:	6804      	ldr	r4, [r0, #0]
    2fbe:	4620      	mov	r0, r4
    2fc0:	f003 fa5a 	bl	6478 <strstr>
	if (found == NULL) return -1;
    2fc4:	b120      	cbz	r0, 2fd0 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    2fc6:	1b00      	subs	r0, r0, r4
}
    2fc8:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    2fca:	f04f 30ff 	mov.w	r0, #4294967295
}
    2fce:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    2fd0:	f04f 30ff 	mov.w	r0, #4294967295
}
    2fd4:	bd10      	pop	{r4, pc}
    2fd6:	bf00      	nop

00002fd8 <String::substring(unsigned int) const>:
{
    2fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    2fdc:	688f      	ldr	r7, [r1, #8]
{
    2fde:	460e      	mov	r6, r1
    2fe0:	4604      	mov	r4, r0
	if (left > right) {
    2fe2:	4297      	cmp	r7, r2
    2fe4:	d202      	bcs.n	2fec <String::substring(unsigned int) const+0x14>
    2fe6:	4613      	mov	r3, r2
    2fe8:	463a      	mov	r2, r7
    2fea:	461f      	mov	r7, r3
	buffer = NULL;
    2fec:	2300      	movs	r3, #0
	len = 0;
    2fee:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2ff0:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    2ff2:	68b0      	ldr	r0, [r6, #8]
    2ff4:	4290      	cmp	r0, r2
	capacity = 0;
    2ff6:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    2ffa:	d314      	bcc.n	3026 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    2ffc:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    2ffe:	6831      	ldr	r1, [r6, #0]
    3000:	bf28      	it	cs
    3002:	4607      	movcs	r7, r0
    3004:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    3008:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    300a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    300c:	189d      	adds	r5, r3, r2
    300e:	d00d      	beq.n	302c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    3010:	4628      	mov	r0, r5
    3012:	f003 fd55 	bl	6ac0 <strlen>
    3016:	4629      	mov	r1, r5
    3018:	4602      	mov	r2, r0
    301a:	4620      	mov	r0, r4
    301c:	f7ff fe8c 	bl	2d38 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3020:	6833      	ldr	r3, [r6, #0]
    3022:	f803 8007 	strb.w	r8, [r3, r7]
}
    3026:	4620      	mov	r0, r4
    3028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    302c:	60a5      	str	r5, [r4, #8]
    302e:	e7f8      	b.n	3022 <String::substring(unsigned int) const+0x4a>

00003030 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    3030:	429a      	cmp	r2, r3
{
    3032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3036:	4604      	mov	r4, r0
    3038:	460e      	mov	r6, r1
	if (left > right) {
    303a:	d902      	bls.n	3042 <String::substring(unsigned int, unsigned int) const+0x12>
    303c:	4611      	mov	r1, r2
    303e:	461a      	mov	r2, r3
    3040:	460b      	mov	r3, r1
	buffer = NULL;
    3042:	2000      	movs	r0, #0
	len = 0;
    3044:	60a0      	str	r0, [r4, #8]
	flags = 0;
    3046:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    3048:	68b7      	ldr	r7, [r6, #8]
    304a:	4297      	cmp	r7, r2
	capacity = 0;
    304c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    3050:	d314      	bcc.n	307c <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    3052:	429f      	cmp	r7, r3
    3054:	bf28      	it	cs
    3056:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    3058:	6833      	ldr	r3, [r6, #0]
    305a:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    305e:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    3060:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    3062:	189d      	adds	r5, r3, r2
    3064:	d00d      	beq.n	3082 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    3066:	4628      	mov	r0, r5
    3068:	f003 fd2a 	bl	6ac0 <strlen>
    306c:	4629      	mov	r1, r5
    306e:	4602      	mov	r2, r0
    3070:	4620      	mov	r0, r4
    3072:	f7ff fe61 	bl	2d38 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3076:	6833      	ldr	r3, [r6, #0]
    3078:	f803 8007 	strb.w	r8, [r3, r7]
}
    307c:	4620      	mov	r0, r4
    307e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    3082:	60a5      	str	r5, [r4, #8]
    3084:	e7f8      	b.n	3078 <String::substring(unsigned int, unsigned int) const+0x48>
    3086:	bf00      	nop

00003088 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    3088:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    308a:	6804      	ldr	r4, [r0, #0]
{
    308c:	4605      	mov	r5, r0
	if (!buffer) return *this;
    308e:	b144      	cbz	r4, 30a2 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    3090:	7820      	ldrb	r0, [r4, #0]
    3092:	b130      	cbz	r0, 30a2 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    3094:	f002 fdf6 	bl	5c84 <tolower>
    3098:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    309a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    309e:	2800      	cmp	r0, #0
    30a0:	d1f8      	bne.n	3094 <String::toLowerCase()+0xc>
	}
	return *this;
}
    30a2:	4628      	mov	r0, r5
    30a4:	bd38      	pop	{r3, r4, r5, pc}
    30a6:	bf00      	nop

000030a8 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    30a8:	6800      	ldr	r0, [r0, #0]
    30aa:	b108      	cbz	r0, 30b0 <String::toInt() const+0x8>
    30ac:	f002 b802 	b.w	50b4 <atol>
	return 0;
}
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop

000030b4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    30b4:	49a2      	ldr	r1, [pc, #648]	; (3340 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    30b6:	4ba3      	ldr	r3, [pc, #652]	; (3344 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    30b8:	4288      	cmp	r0, r1
{
    30ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    30be:	4ca2      	ldr	r4, [pc, #648]	; (3348 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    30c0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    30c2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    30c4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    30c8:	d91b      	bls.n	3102 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    30ca:	4ba0      	ldr	r3, [pc, #640]	; (334c <set_arm_clock+0x298>)
    30cc:	4298      	cmp	r0, r3
    30ce:	f240 8102 	bls.w	32d6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    30d2:	1ac3      	subs	r3, r0, r3
    30d4:	499e      	ldr	r1, [pc, #632]	; (3350 <set_arm_clock+0x29c>)
    30d6:	0a1b      	lsrs	r3, r3, #8
    30d8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30dc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    30e0:	09db      	lsrs	r3, r3, #7
    30e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30ea:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    30ee:	428b      	cmp	r3, r1
    30f0:	bf28      	it	cs
    30f2:	460b      	movcs	r3, r1
    30f4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    30f8:	4b96      	ldr	r3, [pc, #600]	; (3354 <set_arm_clock+0x2a0>)
    30fa:	fba3 3707 	umull	r3, r7, r3, r7
    30fe:	08ff      	lsrs	r7, r7, #3
    3100:	e004      	b.n	310c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3102:	4f95      	ldr	r7, [pc, #596]	; (3358 <set_arm_clock+0x2a4>)
    3104:	42b8      	cmp	r0, r7
    3106:	bf8c      	ite	hi
    3108:	270e      	movhi	r7, #14
    310a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    310c:	498d      	ldr	r1, [pc, #564]	; (3344 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    310e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3112:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3116:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3118:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    311c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3120:	d20c      	bcs.n	313c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3122:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3126:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    312a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    312e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3132:	680b      	ldr	r3, [r1, #0]
    3134:	2b00      	cmp	r3, #0
    3136:	dafc      	bge.n	3132 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3138:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    313c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3140:	d124      	bne.n	318c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3142:	4986      	ldr	r1, [pc, #536]	; (335c <set_arm_clock+0x2a8>)
    3144:	690c      	ldr	r4, [r1, #16]
    3146:	4986      	ldr	r1, [pc, #536]	; (3360 <set_arm_clock+0x2ac>)
    3148:	43a1      	bics	r1, r4
    314a:	f000 80ea 	beq.w	3322 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    314e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3152:	4634      	mov	r4, r6
    3154:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3158:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    315c:	d004      	beq.n	3168 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    315e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3162:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3164:	4b77      	ldr	r3, [pc, #476]	; (3344 <set_arm_clock+0x290>)
    3166:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3168:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    316c:	d007      	beq.n	317e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    316e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3172:	4974      	ldr	r1, [pc, #464]	; (3344 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3174:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    3176:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3178:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    317a:	071a      	lsls	r2, r3, #28
    317c:	d4fc      	bmi.n	3178 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    317e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3182:	4a70      	ldr	r2, [pc, #448]	; (3344 <set_arm_clock+0x290>)
    3184:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3186:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3188:	069b      	lsls	r3, r3, #26
    318a:	d4fc      	bmi.n	3186 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    318c:	4c75      	ldr	r4, [pc, #468]	; (3364 <set_arm_clock+0x2b0>)
    318e:	42a0      	cmp	r0, r4
    3190:	f200 80ce 	bhi.w	3330 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3194:	f04f 0c01 	mov.w	ip, #1
    3198:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    319a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    319c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    31a0:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    31a4:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31a8:	42a2      	cmp	r2, r4
    31aa:	d818      	bhi.n	31de <set_arm_clock+0x12a>
		if (div_arm < 8) {
    31ac:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    31b0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    31b4:	f040 808d 	bne.w	32d2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    31b8:	f1bc 0f04 	cmp.w	ip, #4
    31bc:	f200 8091 	bhi.w	32e2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    31c0:	180a      	adds	r2, r1, r0
    31c2:	42a2      	cmp	r2, r4
    31c4:	f200 80a4 	bhi.w	3310 <set_arm_clock+0x25c>
    31c8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    31cc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    31ce:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31d2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    31d6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31da:	42a2      	cmp	r2, r4
    31dc:	d9e6      	bls.n	31ac <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    31de:	f10c 31ff 	add.w	r1, ip, #4294967295
    31e2:	028c      	lsls	r4, r1, #10
    31e4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    31e8:	485f      	ldr	r0, [pc, #380]	; (3368 <set_arm_clock+0x2b4>)
    31ea:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    31ec:	4a5f      	ldr	r2, [pc, #380]	; (336c <set_arm_clock+0x2b8>)
    31ee:	4290      	cmp	r0, r2
    31f0:	d97f      	bls.n	32f2 <set_arm_clock+0x23e>
    31f2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3398 <set_arm_clock+0x2e4>
    31f6:	226c      	movs	r2, #108	; 0x6c
    31f8:	485d      	ldr	r0, [pc, #372]	; (3370 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    31fa:	4d58      	ldr	r5, [pc, #352]	; (335c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    31fc:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3200:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3204:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3208:	f8df c190 	ldr.w	ip, [pc, #400]	; 339c <set_arm_clock+0x2e8>
    320c:	ea0e 0c0c 	and.w	ip, lr, ip
    3210:	45d4      	cmp	ip, sl
    3212:	d009      	beq.n	3228 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3218:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    321c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3220:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3222:	682a      	ldr	r2, [r5, #0]
    3224:	2a00      	cmp	r2, #0
    3226:	dafc      	bge.n	3222 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3228:	4a46      	ldr	r2, [pc, #280]	; (3344 <set_arm_clock+0x290>)
    322a:	6915      	ldr	r5, [r2, #16]
    322c:	f005 0507 	and.w	r5, r5, #7
    3230:	429d      	cmp	r5, r3
    3232:	d003      	beq.n	323c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3234:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3236:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3238:	03dd      	lsls	r5, r3, #15
    323a:	d4fc      	bmi.n	3236 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    323c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3240:	d009      	beq.n	3256 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3242:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3246:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    324a:	4a3e      	ldr	r2, [pc, #248]	; (3344 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    324c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    324e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3250:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3252:	0799      	lsls	r1, r3, #30
    3254:	d4fc      	bmi.n	3250 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3256:	4947      	ldr	r1, [pc, #284]	; (3374 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3258:	4a47      	ldr	r2, [pc, #284]	; (3378 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    325a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    325c:	4291      	cmp	r1, r2
    325e:	d83c      	bhi.n	32da <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3260:	4b46      	ldr	r3, [pc, #280]	; (337c <set_arm_clock+0x2c8>)
    3262:	09c9      	lsrs	r1, r1, #7
    3264:	fba3 3101 	umull	r3, r1, r3, r1
    3268:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    326a:	1e4b      	subs	r3, r1, #1
    326c:	021b      	lsls	r3, r3, #8
    326e:	ea86 0203 	eor.w	r2, r6, r3
    3272:	f412 7f40 	tst.w	r2, #768	; 0x300
    3276:	d006      	beq.n	3286 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3278:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3280:	4a30      	ldr	r2, [pc, #192]	; (3344 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3282:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3284:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3286:	4a2f      	ldr	r2, [pc, #188]	; (3344 <set_arm_clock+0x290>)
    3288:	6953      	ldr	r3, [r2, #20]
    328a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    328e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3290:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3292:	069b      	lsls	r3, r3, #26
    3294:	d4fc      	bmi.n	3290 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3296:	4b3a      	ldr	r3, [pc, #232]	; (3380 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3298:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    329a:	fba3 2300 	umull	r2, r3, r3, r0
    329e:	f04f 32ff 	mov.w	r2, #4294967295
    32a2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    32a6:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32aa:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    32ae:	4a35      	ldr	r2, [pc, #212]	; (3384 <set_arm_clock+0x2d0>)
    32b0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    32b2:	4a35      	ldr	r2, [pc, #212]	; (3388 <set_arm_clock+0x2d4>)
    32b4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32b6:	4a35      	ldr	r2, [pc, #212]	; (338c <set_arm_clock+0x2d8>)
    32b8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    32ba:	d208      	bcs.n	32ce <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    32bc:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    32c0:	4a21      	ldr	r2, [pc, #132]	; (3348 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    32c2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    32c6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    32c8:	6813      	ldr	r3, [r2, #0]
    32ca:	2b00      	cmp	r3, #0
    32cc:	dafc      	bge.n	32c8 <set_arm_clock+0x214>
	}

	return frequency;
}
    32ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32d2:	4673      	mov	r3, lr
    32d4:	e762      	b.n	319c <set_arm_clock+0xe8>
    32d6:	2712      	movs	r7, #18
    32d8:	e718      	b.n	310c <set_arm_clock+0x58>
    32da:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    32de:	2104      	movs	r1, #4
    32e0:	e7c5      	b.n	326e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32e2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32e6:	4820      	ldr	r0, [pc, #128]	; (3368 <set_arm_clock+0x2b4>)
    32e8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32ea:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32ec:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    32ee:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32f2:	4a27      	ldr	r2, [pc, #156]	; (3390 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    32f4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 33a0 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    32f8:	fba2 2000 	umull	r2, r0, r2, r0
    32fc:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    32fe:	4825      	ldr	r0, [pc, #148]	; (3394 <set_arm_clock+0x2e0>)
    3300:	2a36      	cmp	r2, #54	; 0x36
    3302:	bf38      	it	cc
    3304:	2236      	movcc	r2, #54	; 0x36
    3306:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    330a:	ea42 0a0a 	orr.w	sl, r2, sl
    330e:	e774      	b.n	31fa <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3310:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3314:	2300      	movs	r3, #0
    3316:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    331a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    331e:	46ac      	mov	ip, r5
    3320:	e762      	b.n	31e8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3322:	461d      	mov	r5, r3
    3324:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3328:	4611      	mov	r1, r2
    332a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    332e:	e713      	b.n	3158 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3330:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3332:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3336:	4602      	mov	r2, r0
    3338:	4631      	mov	r1, r6
    333a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    333c:	46e6      	mov	lr, ip
    333e:	e753      	b.n	31e8 <set_arm_clock+0x134>
    3340:	1f78a400 	.word	0x1f78a400
    3344:	400fc000 	.word	0x400fc000
    3348:	40080000 	.word	0x40080000
    334c:	23c34600 	.word	0x23c34600
    3350:	004cb223 	.word	0x004cb223
    3354:	51eb851f 	.word	0x51eb851f
    3358:	016e3600 	.word	0x016e3600
    335c:	400d8000 	.word	0x400d8000
    3360:	80003040 	.word	0x80003040
    3364:	269fb1ff 	.word	0x269fb1ff
    3368:	005b8d80 	.word	0x005b8d80
    336c:	4df67eff 	.word	0x4df67eff
    3370:	4d3f6400 	.word	0x4d3f6400
    3374:	08f0d17f 	.word	0x08f0d17f
    3378:	2cb4177f 	.word	0x2cb4177f
    337c:	00e5109f 	.word	0x00e5109f
    3380:	431bde83 	.word	0x431bde83
    3384:	20000edc 	.word	0x20000edc
    3388:	20000ed8 	.word	0x20000ed8
    338c:	200035b4 	.word	0x200035b4
    3390:	165e9f81 	.word	0x165e9f81
    3394:	00b71b00 	.word	0x00b71b00
    3398:	8000206c 	.word	0x8000206c
    339c:	8001307f 	.word	0x8001307f
    33a0:	80002000 	.word	0x80002000

000033a4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    33a4:	b900      	cbnz	r0, 33a8 <delay+0x4>
    33a6:	4770      	bx	lr
{
    33a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    33ac:	2101      	movs	r1, #1
    33ae:	4681      	mov	r9, r0
    33b0:	4c21      	ldr	r4, [pc, #132]	; (3438 <delay+0x94>)
    33b2:	4d22      	ldr	r5, [pc, #136]	; (343c <delay+0x98>)
    33b4:	4e22      	ldr	r6, [pc, #136]	; (3440 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    33b6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    33ba:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    33bc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    33be:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    33c2:	2b00      	cmp	r3, #0
    33c4:	d1f7      	bne.n	33b6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    33c6:	491f      	ldr	r1, [pc, #124]	; (3444 <delay+0xa0>)
    33c8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    33ca:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33ce:	f8df a078 	ldr.w	sl, [pc, #120]	; 3448 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    33d2:	1a1b      	subs	r3, r3, r0
    33d4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    33d6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33da:	f8da 2000 	ldr.w	r2, [sl]
    33de:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    33e2:	455a      	cmp	r2, fp
    33e4:	bf94      	ite	ls
    33e6:	4490      	addls	r8, r2
    33e8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    33ea:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    33ee:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    33f0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    33f2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    33f6:	2b00      	cmp	r3, #0
    33f8:	d1f7      	bne.n	33ea <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    33fa:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33fc:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3400:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3402:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3406:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    340a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    340e:	bf94      	ite	ls
    3410:	4462      	addls	r2, ip
    3412:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    3416:	eba2 0208 	sub.w	r2, r2, r8
    341a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    341e:	d306      	bcc.n	342e <delay+0x8a>
			if (--msec == 0) return;
    3420:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3424:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3428:	d1df      	bne.n	33ea <delay+0x46>
}
    342a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    342e:	f001 fd47 	bl	4ec0 <yield>
		while ((micros() - start) >= 1000) {
    3432:	4904      	ldr	r1, [pc, #16]	; (3444 <delay+0xa0>)
    3434:	e7d9      	b.n	33ea <delay+0x46>
    3436:	bf00      	nop
    3438:	200035c0 	.word	0x200035c0
    343c:	200035bc 	.word	0x200035bc
    3440:	200035b8 	.word	0x200035b8
    3444:	e0001000 	.word	0xe0001000
    3448:	200035b4 	.word	0x200035b4

0000344c <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    344c:	2836      	cmp	r0, #54	; 0x36
    344e:	d816      	bhi.n	347e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3450:	0102      	lsls	r2, r0, #4
    3452:	4b10      	ldr	r3, [pc, #64]	; (3494 <digitalWrite+0x48>)
    3454:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3458:	589b      	ldr	r3, [r3, r2]
{
    345a:	b410      	push	{r4}
	mask = p->mask;
    345c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    345e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3460:	4214      	tst	r4, r2
    3462:	d005      	beq.n	3470 <digitalWrite+0x24>
		if (val) {
    3464:	b961      	cbnz	r1, 3480 <digitalWrite+0x34>
		}
	}
}
    3466:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    346a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    346e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3470:	6883      	ldr	r3, [r0, #8]
		if (val) {
    3472:	b151      	cbz	r1, 348a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3474:	4a08      	ldr	r2, [pc, #32]	; (3498 <digitalWrite+0x4c>)
}
    3476:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    347a:	601a      	str	r2, [r3, #0]
}
    347c:	4770      	bx	lr
    347e:	4770      	bx	lr
    3480:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    3484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3488:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    348a:	4a04      	ldr	r2, [pc, #16]	; (349c <digitalWrite+0x50>)
}
    348c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3490:	601a      	str	r2, [r3, #0]
}
    3492:	4770      	bx	lr
    3494:	200008c8 	.word	0x200008c8
    3498:	0001f038 	.word	0x0001f038
    349c:	00013038 	.word	0x00013038

000034a0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    34a0:	2836      	cmp	r0, #54	; 0x36
    34a2:	d80b      	bhi.n	34bc <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    34a4:	4b06      	ldr	r3, [pc, #24]	; (34c0 <digitalRead+0x20>)
    34a6:	0102      	lsls	r2, r0, #4
    34a8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    34ac:	589a      	ldr	r2, [r3, r2]
    34ae:	68c3      	ldr	r3, [r0, #12]
    34b0:	6892      	ldr	r2, [r2, #8]
    34b2:	421a      	tst	r2, r3
    34b4:	bf14      	ite	ne
    34b6:	2001      	movne	r0, #1
    34b8:	2000      	moveq	r0, #0
    34ba:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    34bc:	2000      	movs	r0, #0
}
    34be:	4770      	bx	lr
    34c0:	200008c8 	.word	0x200008c8

000034c4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    34c4:	2836      	cmp	r0, #54	; 0x36
    34c6:	d829      	bhi.n	351c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    34c8:	4b16      	ldr	r3, [pc, #88]	; (3524 <pinMode+0x60>)
    34ca:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    34cc:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    34ce:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    34d2:	589a      	ldr	r2, [r3, r2]
{
    34d4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    34d6:	6853      	ldr	r3, [r2, #4]
    34d8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    34da:	d00e      	beq.n	34fa <pinMode+0x36>
    34dc:	2904      	cmp	r1, #4
    34de:	d00c      	beq.n	34fa <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    34e0:	ea23 0304 	bic.w	r3, r3, r4
    34e4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    34e6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    34e8:	b1a9      	cbz	r1, 3516 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    34ea:	2902      	cmp	r1, #2
    34ec:	d017      	beq.n	351e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    34ee:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    34f0:	bf0c      	ite	eq
    34f2:	4a0d      	ldreq	r2, [pc, #52]	; (3528 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    34f4:	4a0d      	ldrne	r2, [pc, #52]	; (352c <pinMode+0x68>)
    34f6:	601a      	str	r2, [r3, #0]
    34f8:	e007      	b.n	350a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    34fa:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    34fc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    34fe:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3500:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    3502:	d008      	beq.n	3516 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3504:	f640 0238 	movw	r2, #2104	; 0x838
    3508:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    350a:	6843      	ldr	r3, [r0, #4]
    350c:	2215      	movs	r2, #21
}
    350e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    3512:	601a      	str	r2, [r3, #0]
}
    3514:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3516:	2238      	movs	r2, #56	; 0x38
    3518:	601a      	str	r2, [r3, #0]
    351a:	e7f6      	b.n	350a <pinMode+0x46>
    351c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    351e:	4a04      	ldr	r2, [pc, #16]	; (3530 <pinMode+0x6c>)
    3520:	601a      	str	r2, [r3, #0]
    3522:	e7f2      	b.n	350a <pinMode+0x46>
    3524:	200008c8 	.word	0x200008c8
    3528:	00013038 	.word	0x00013038
    352c:	00010038 	.word	0x00010038
    3530:	0001f038 	.word	0x0001f038

00003534 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3534:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3536:	f7fc fd97 	bl	68 <setup>
	while (1) {
		loop();
    353a:	f7fd f87f 	bl	63c <loop>
		yield();
    353e:	f001 fcbf 	bl	4ec0 <yield>
	while (1) {
    3542:	e7fa      	b.n	353a <main+0x6>

00003544 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3544:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3546:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    354a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    354e:	d16d      	bne.n	362c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3550:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3552:	d341      	bcc.n	35d8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3554:	f851 3b04 	ldr.w	r3, [r1], #4
    3558:	f840 3b04 	str.w	r3, [r0], #4
    355c:	f851 3b04 	ldr.w	r3, [r1], #4
    3560:	f840 3b04 	str.w	r3, [r0], #4
    3564:	f851 3b04 	ldr.w	r3, [r1], #4
    3568:	f840 3b04 	str.w	r3, [r0], #4
    356c:	f851 3b04 	ldr.w	r3, [r1], #4
    3570:	f840 3b04 	str.w	r3, [r0], #4
    3574:	f851 3b04 	ldr.w	r3, [r1], #4
    3578:	f840 3b04 	str.w	r3, [r0], #4
    357c:	f851 3b04 	ldr.w	r3, [r1], #4
    3580:	f840 3b04 	str.w	r3, [r0], #4
    3584:	f851 3b04 	ldr.w	r3, [r1], #4
    3588:	f840 3b04 	str.w	r3, [r0], #4
    358c:	f851 3b04 	ldr.w	r3, [r1], #4
    3590:	f840 3b04 	str.w	r3, [r0], #4
    3594:	f851 3b04 	ldr.w	r3, [r1], #4
    3598:	f840 3b04 	str.w	r3, [r0], #4
    359c:	f851 3b04 	ldr.w	r3, [r1], #4
    35a0:	f840 3b04 	str.w	r3, [r0], #4
    35a4:	f851 3b04 	ldr.w	r3, [r1], #4
    35a8:	f840 3b04 	str.w	r3, [r0], #4
    35ac:	f851 3b04 	ldr.w	r3, [r1], #4
    35b0:	f840 3b04 	str.w	r3, [r0], #4
    35b4:	f851 3b04 	ldr.w	r3, [r1], #4
    35b8:	f840 3b04 	str.w	r3, [r0], #4
    35bc:	f851 3b04 	ldr.w	r3, [r1], #4
    35c0:	f840 3b04 	str.w	r3, [r0], #4
    35c4:	f851 3b04 	ldr.w	r3, [r1], #4
    35c8:	f840 3b04 	str.w	r3, [r0], #4
    35cc:	f851 3b04 	ldr.w	r3, [r1], #4
    35d0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    35d4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    35d6:	d2bd      	bcs.n	3554 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    35d8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    35da:	d311      	bcc.n	3600 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    35dc:	f851 3b04 	ldr.w	r3, [r1], #4
    35e0:	f840 3b04 	str.w	r3, [r0], #4
    35e4:	f851 3b04 	ldr.w	r3, [r1], #4
    35e8:	f840 3b04 	str.w	r3, [r0], #4
    35ec:	f851 3b04 	ldr.w	r3, [r1], #4
    35f0:	f840 3b04 	str.w	r3, [r0], #4
    35f4:	f851 3b04 	ldr.w	r3, [r1], #4
    35f8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    35fc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    35fe:	d2ed      	bcs.n	35dc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3600:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3602:	d305      	bcc.n	3610 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3604:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3608:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    360c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    360e:	d2f9      	bcs.n	3604 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3610:	3204      	adds	r2, #4
	beq	.Ldone
    3612:	d008      	beq.n	3626 <memcpy+0xe2>

	lsls	r2, r2, #31
    3614:	07d2      	lsls	r2, r2, #31
	itt ne
    3616:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3618:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    361c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3620:	d301      	bcc.n	3626 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3622:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3624:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3626:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3628:	4770      	bx	lr
    362a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    362c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    362e:	d313      	bcc.n	3658 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3630:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3632:	d08d      	beq.n	3550 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3634:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3638:	d08a      	beq.n	3550 <memcpy+0xc>

	rsb	r3, #4
    363a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    363e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3640:	07db      	lsls	r3, r3, #31
	itt ne
    3642:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3644:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3648:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    364c:	d380      	bcc.n	3550 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    364e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3652:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3656:	e77b      	b.n	3550 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3658:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    365a:	d3d9      	bcc.n	3610 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    365c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    365e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3662:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3666:	d2f9      	bcs.n	365c <memcpy+0x118>

	ldrb	r3, [r1]
    3668:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    366a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    366c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    366e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3670:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3672:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3674:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3676:	4770      	bx	lr

00003678 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    3678:	f001 bd36 	b.w	50e8 <malloc>

0000367c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    367c:	f001 bd3c 	b.w	50f8 <free>

00003680 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    3680:	f101 3cff 	add.w	ip, r1, #4294967295
{
    3684:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    3686:	4666      	mov	r6, ip
	int i=0, j;
    3688:	2400      	movs	r4, #0
    368a:	e000      	b.n	368e <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    368c:	3401      	adds	r4, #1
		digit = val % radix;
    368e:	fbb0 f5f2 	udiv	r5, r0, r2
    3692:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3696:	2b09      	cmp	r3, #9
    3698:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    369c:	f103 0330 	add.w	r3, r3, #48	; 0x30
    36a0:	fa5f fe8e 	uxtb.w	lr, lr
    36a4:	bf98      	it	ls
    36a6:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    36aa:	4290      	cmp	r0, r2
		val /= radix;
    36ac:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    36ae:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    36b2:	d2eb      	bcs.n	368c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    36b4:	1c63      	adds	r3, r4, #1
    36b6:	2200      	movs	r2, #0
    36b8:	18c8      	adds	r0, r1, r3
    36ba:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    36bc:	b17c      	cbz	r4, 36de <ultoa+0x5e>
		t = buf[j];
    36be:	4662      	mov	r2, ip
    36c0:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    36c4:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    36c8:	eba1 030c 	sub.w	r3, r1, ip
    36cc:	3202      	adds	r2, #2
		buf[j] = buf[i];
    36ce:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    36d2:	3b01      	subs	r3, #1
    36d4:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    36d6:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    36d8:	4423      	add	r3, r4
    36da:	429a      	cmp	r2, r3
    36dc:	dbef      	blt.n	36be <ultoa+0x3e>
	}
	return buf;
}
    36de:	4608      	mov	r0, r1
    36e0:	bd70      	pop	{r4, r5, r6, pc}
    36e2:	bf00      	nop

000036e4 <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
    36e4:	1e03      	subs	r3, r0, #0
    36e6:	db01      	blt.n	36ec <ltoa+0x8>
		return ultoa(val, buf, radix);
    36e8:	f7ff bfca 	b.w	3680 <ultoa>
	} else {
		buf[0] = '-';
    36ec:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
		ultoa(-val, buf + 1, radix);
    36f0:	4258      	negs	r0, r3
{
    36f2:	b510      	push	{r4, lr}
    36f4:	460c      	mov	r4, r1
		buf[0] = '-';
    36f6:	f801 cb01 	strb.w	ip, [r1], #1
		ultoa(-val, buf + 1, radix);
    36fa:	f7ff ffc1 	bl	3680 <ultoa>
		return buf;
	}
}
    36fe:	4620      	mov	r0, r4
    3700:	bd10      	pop	{r4, pc}
    3702:	bf00      	nop

00003704 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    3704:	eeb4 0a40 	vcmp.f32	s0, s0
{
    3708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    3710:	4616      	mov	r6, r2
	int awidth = abs(width);
    3712:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    3716:	4607      	mov	r7, r0
    3718:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    371c:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    3720:	eeb0 8a40 	vmov.f32	s16, s0
    3724:	b085      	sub	sp, #20
	if (isnanf(val)) {
    3726:	f180 8148 	bvs.w	39ba <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    372a:	eef0 7ac0 	vabs.f32	s15, s0
    372e:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 3a44 <dtostrf+0x340>
    3732:	eef4 7a47 	vcmp.f32	s15, s14
    3736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    373a:	dd29      	ble.n	3790 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    373c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3744:	f100 80ed 	bmi.w	3922 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3748:	2a03      	cmp	r2, #3
    374a:	f340 8091 	ble.w	3870 <dtostrf+0x16c>
    374e:	2303      	movs	r3, #3
		if (width<0) {
    3750:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3752:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    3756:	f2c0 8085 	blt.w	3864 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    375a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3762:	f100 816a 	bmi.w	3a3a <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3766:	2149      	movs	r1, #73	; 0x49
    3768:	234e      	movs	r3, #78	; 0x4e
    376a:	2046      	movs	r0, #70	; 0x46
    376c:	1cf4      	adds	r4, r6, #3
    376e:	7031      	strb	r1, [r6, #0]
    3770:	70b0      	strb	r0, [r6, #2]
    3772:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    3774:	b122      	cbz	r2, 3780 <dtostrf+0x7c>
			*buf++ = ' ';
    3776:	4620      	mov	r0, r4
    3778:	2120      	movs	r1, #32
    377a:	4414      	add	r4, r2
    377c:	f002 fc32 	bl	5fe4 <memset>
			awidth--;
		}
		*buf = 0;
    3780:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    3782:	4620      	mov	r0, r4
		*buf = 0;
    3784:	7023      	strb	r3, [r4, #0]
}
    3786:	b005      	add	sp, #20
    3788:	ecbd 8b02 	vpop	{d8}
    378c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    3790:	4689      	mov	r9, r1
    3792:	460d      	mov	r5, r1
    3794:	aa02      	add	r2, sp, #8
    3796:	a901      	add	r1, sp, #4
    3798:	4648      	mov	r0, r9
    379a:	f002 fa6d 	bl	5c78 <fcvtf>
	if (precision == 0 && decpt == 0) {
    379e:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    37a2:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    37a4:	ea59 030a 	orrs.w	r3, r9, sl
    37a8:	d172      	bne.n	3890 <dtostrf+0x18c>
		decpt++;
    37aa:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    37ac:	7802      	ldrb	r2, [r0, #0]
    37ae:	4ca6      	ldr	r4, [pc, #664]	; (3a48 <dtostrf+0x344>)
		decpt++;
    37b0:	469a      	mov	sl, r3
    37b2:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    37b4:	4ba5      	ldr	r3, [pc, #660]	; (3a4c <dtostrf+0x348>)
		decpt++;
    37b6:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    37b8:	2a34      	cmp	r2, #52	; 0x34
    37ba:	bf88      	it	hi
    37bc:	461c      	movhi	r4, r3
	if (sign) reqd++;
    37be:	9b02      	ldr	r3, [sp, #8]
    37c0:	2b00      	cmp	r3, #0
    37c2:	d07d      	beq.n	38c0 <dtostrf+0x1bc>
    37c4:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    37c8:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    37cc:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    37d0:	f1bb 0f00 	cmp.w	fp, #0
    37d4:	f340 80a1 	ble.w	391a <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    37d8:	465a      	mov	r2, fp
    37da:	2120      	movs	r1, #32
    37dc:	4630      	mov	r0, r6
		e += pad;
    37de:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    37e0:	f002 fc00 	bl	5fe4 <memset>
    37e4:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    37e8:	222d      	movs	r2, #45	; 0x2d
    37ea:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    37ee:	f1ba 0f00 	cmp.w	sl, #0
    37f2:	d177      	bne.n	38e4 <dtostrf+0x1e0>
    37f4:	f1b9 0f00 	cmp.w	r9, #0
    37f8:	d006      	beq.n	3808 <dtostrf+0x104>
		*p++ = '0';
    37fa:	461a      	mov	r2, r3
    37fc:	2130      	movs	r1, #48	; 0x30
    37fe:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    3802:	212e      	movs	r1, #46	; 0x2e
    3804:	7059      	strb	r1, [r3, #1]
    3806:	4613      	mov	r3, r2
	while (p < e) {
    3808:	42ab      	cmp	r3, r5
    380a:	d21f      	bcs.n	384c <dtostrf+0x148>
		*p++ = *s++;
    380c:	46a4      	mov	ip, r4
    380e:	4619      	mov	r1, r3
    3810:	f81c 2b01 	ldrb.w	r2, [ip], #1
    3814:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3818:	42a9      	cmp	r1, r5
    381a:	d018      	beq.n	384e <dtostrf+0x14a>
    381c:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    381e:	202e      	movs	r0, #46	; 0x2e
    3820:	3c01      	subs	r4, #1
    3822:	e00b      	b.n	383c <dtostrf+0x138>
    3824:	7058      	strb	r0, [r3, #1]
    3826:	3302      	adds	r3, #2
		if (p == e) break;
    3828:	3c01      	subs	r4, #1
	while (p < e) {
    382a:	42ab      	cmp	r3, r5
		*p++ = *s++;
    382c:	4619      	mov	r1, r3
	while (p < e) {
    382e:	d20d      	bcs.n	384c <dtostrf+0x148>
		*p++ = *s++;
    3830:	f81c 2b01 	ldrb.w	r2, [ip], #1
    3834:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3838:	42a9      	cmp	r1, r5
    383a:	d008      	beq.n	384e <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    383c:	9401      	str	r4, [sp, #4]
    383e:	2c00      	cmp	r4, #0
    3840:	d0f0      	beq.n	3824 <dtostrf+0x120>
    3842:	460b      	mov	r3, r1
		if (p == e) break;
    3844:	3c01      	subs	r4, #1
	while (p < e) {
    3846:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3848:	4619      	mov	r1, r3
	while (p < e) {
    384a:	d3f1      	bcc.n	3830 <dtostrf+0x12c>
    384c:	461d      	mov	r5, r3
	if (width < 0) {
    384e:	2f00      	cmp	r7, #0
    3850:	db6b      	blt.n	392a <dtostrf+0x226>
	return buf;
    3852:	4634      	mov	r4, r6
	*p = 0;
    3854:	2300      	movs	r3, #0
}
    3856:	4620      	mov	r0, r4
	*p = 0;
    3858:	702b      	strb	r3, [r5, #0]
}
    385a:	b005      	add	sp, #20
    385c:	ecbd 8b02 	vpop	{d8}
    3860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    3864:	b122      	cbz	r2, 3870 <dtostrf+0x16c>
				*buf++ = ' ';
    3866:	4630      	mov	r0, r6
    3868:	2120      	movs	r1, #32
    386a:	4416      	add	r6, r2
    386c:	f002 fbba 	bl	5fe4 <memset>
		if (val<0) *buf++ = '-';
    3870:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    3874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3878:	f140 80bd 	bpl.w	39f6 <dtostrf+0x2f2>
    387c:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    387e:	2249      	movs	r2, #73	; 0x49
    3880:	234e      	movs	r3, #78	; 0x4e
    3882:	2046      	movs	r0, #70	; 0x46
    3884:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    3886:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3888:	70f0      	strb	r0, [r6, #3]
    388a:	7072      	strb	r2, [r6, #1]
    388c:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    388e:	e777      	b.n	3780 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    3890:	f1ca 0300 	rsb	r3, sl, #0
    3894:	4599      	cmp	r9, r3
    3896:	da57      	bge.n	3948 <dtostrf+0x244>
		decpt = -precision;
    3898:	f04f 0801 	mov.w	r8, #1
    389c:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    38a0:	4c69      	ldr	r4, [pc, #420]	; (3a48 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    38a2:	45c2      	cmp	sl, r8
		decpt = -precision;
    38a4:	4640      	mov	r0, r8
    38a6:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    38aa:	bfb8      	it	lt
    38ac:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    38b0:	f1ba 0f00 	cmp.w	sl, #0
    38b4:	d152      	bne.n	395c <dtostrf+0x258>
	if (sign) reqd++;
    38b6:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    38b8:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    38bc:	2b00      	cmp	r3, #0
    38be:	d181      	bne.n	37c4 <dtostrf+0xc0>
	pad = width - reqd;
    38c0:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    38c4:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    38c8:	f1bb 0f00 	cmp.w	fp, #0
    38cc:	dd27      	ble.n	391e <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    38ce:	465a      	mov	r2, fp
    38d0:	2120      	movs	r1, #32
    38d2:	4630      	mov	r0, r6
		e += pad;
    38d4:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    38d6:	f002 fb85 	bl	5fe4 <memset>
    38da:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    38de:	f1ba 0f00 	cmp.w	sl, #0
    38e2:	d087      	beq.n	37f4 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    38e4:	f1ba 0f00 	cmp.w	sl, #0
    38e8:	da8e      	bge.n	3808 <dtostrf+0x104>
    38ea:	f1b9 0f00 	cmp.w	r9, #0
    38ee:	d08b      	beq.n	3808 <dtostrf+0x104>
		*p++ = '0';
    38f0:	4618      	mov	r0, r3
		*p++ = '.';
    38f2:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    38f4:	2130      	movs	r1, #48	; 0x30
    38f6:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    38fa:	705a      	strb	r2, [r3, #1]
    38fc:	4602      	mov	r2, r0
    38fe:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    3900:	3301      	adds	r3, #1
			*p++ = '0';
    3902:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    3906:	d1fb      	bne.n	3900 <dtostrf+0x1fc>
			*p++ = '0';
    3908:	f1ba 0f00 	cmp.w	sl, #0
    390c:	9301      	str	r3, [sp, #4]
    390e:	f1ca 0300 	rsb	r3, sl, #0
    3912:	bfa8      	it	ge
    3914:	2301      	movge	r3, #1
    3916:	4403      	add	r3, r0
    3918:	e776      	b.n	3808 <dtostrf+0x104>
	if (pad > 0) {
    391a:	4633      	mov	r3, r6
    391c:	e764      	b.n	37e8 <dtostrf+0xe4>
    391e:	4633      	mov	r3, r6
    3920:	e765      	b.n	37ee <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3922:	2a04      	cmp	r2, #4
    3924:	ddaa      	ble.n	387c <dtostrf+0x178>
    3926:	2304      	movs	r3, #4
    3928:	e712      	b.n	3750 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    392a:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    392c:	f1b8 0f00 	cmp.w	r8, #0
    3930:	ea6f 0208 	mvn.w	r2, r8
    3934:	da8d      	bge.n	3852 <dtostrf+0x14e>
    3936:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    393a:	2120      	movs	r1, #32
    393c:	4628      	mov	r0, r5
    393e:	3201      	adds	r2, #1
    3940:	4415      	add	r5, r2
    3942:	f002 fb4f 	bl	5fe4 <memset>
    3946:	e784      	b.n	3852 <dtostrf+0x14e>
	reqd = strlen(s);
    3948:	f003 f8ba 	bl	6ac0 <strlen>
    394c:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    394e:	45c2      	cmp	sl, r8
    3950:	bfb8      	it	lt
    3952:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    3956:	f1ba 0f00 	cmp.w	sl, #0
    395a:	d0ac      	beq.n	38b6 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    395c:	f1ba 0f00 	cmp.w	sl, #0
    3960:	f6bf af2d 	bge.w	37be <dtostrf+0xba>
    3964:	f1b9 0f00 	cmp.w	r9, #0
    3968:	f43f af29 	beq.w	37be <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    396c:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    3970:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    3974:	4283      	cmp	r3, r0
    3976:	f4bf af22 	bcs.w	37be <dtostrf+0xba>
			while (newPrecision > 0) {
    397a:	f1b9 0f00 	cmp.w	r9, #0
    397e:	dd05      	ble.n	398c <dtostrf+0x288>
				val *= 10.0f;
    3980:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    3984:	3d01      	subs	r5, #1
				val *= 10.0f;
    3986:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    398a:	d1fb      	bne.n	3984 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    398c:	aa02      	add	r2, sp, #8
    398e:	eeb0 0a48 	vmov.f32	s0, s16
    3992:	4628      	mov	r0, r5
    3994:	a903      	add	r1, sp, #12
    3996:	f002 f96f 	bl	5c78 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    399a:	f8dd a004 	ldr.w	sl, [sp, #4]
    399e:	9b03      	ldr	r3, [sp, #12]
    39a0:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    39a4:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    39a6:	eba3 030a 	sub.w	r3, r3, sl
    39aa:	4293      	cmp	r3, r2
    39ac:	f47f af07 	bne.w	37be <dtostrf+0xba>
    39b0:	f10a 0a01 	add.w	sl, sl, #1
    39b4:	f8cd a004 	str.w	sl, [sp, #4]
    39b8:	e701      	b.n	37be <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    39ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    39be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39c2:	bf4c      	ite	mi
    39c4:	2304      	movmi	r3, #4
    39c6:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    39c8:	4293      	cmp	r3, r2
    39ca:	da22      	bge.n	3a12 <dtostrf+0x30e>
		if (width<0) {
    39cc:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    39ce:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    39d2:	db18      	blt.n	3a06 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    39d4:	ee10 3a10 	vmov	r3, s0
    39d8:	2b00      	cmp	r3, #0
    39da:	da02      	bge.n	39e2 <dtostrf+0x2de>
    39dc:	232d      	movs	r3, #45	; 0x2d
    39de:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    39e2:	234e      	movs	r3, #78	; 0x4e
    39e4:	2141      	movs	r1, #65	; 0x41
    39e6:	1cf4      	adds	r4, r6, #3
    39e8:	7033      	strb	r3, [r6, #0]
    39ea:	7071      	strb	r1, [r6, #1]
    39ec:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    39ee:	2a00      	cmp	r2, #0
    39f0:	f47f aec1 	bne.w	3776 <dtostrf+0x72>
    39f4:	e6c4      	b.n	3780 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    39f6:	2149      	movs	r1, #73	; 0x49
    39f8:	224e      	movs	r2, #78	; 0x4e
    39fa:	2346      	movs	r3, #70	; 0x46
    39fc:	1cf4      	adds	r4, r6, #3
    39fe:	7031      	strb	r1, [r6, #0]
    3a00:	7072      	strb	r2, [r6, #1]
    3a02:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3a04:	e6bc      	b.n	3780 <dtostrf+0x7c>
			while (awidth) {
    3a06:	b122      	cbz	r2, 3a12 <dtostrf+0x30e>
				*buf++ = ' ';
    3a08:	4630      	mov	r0, r6
    3a0a:	2120      	movs	r1, #32
    3a0c:	4416      	add	r6, r2
    3a0e:	f002 fae9 	bl	5fe4 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a12:	ee18 3a10 	vmov	r3, s16
    3a16:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a18:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a1c:	db05      	blt.n	3a2a <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a1e:	2241      	movs	r2, #65	; 0x41
    3a20:	1cf4      	adds	r4, r6, #3
    3a22:	7033      	strb	r3, [r6, #0]
    3a24:	7072      	strb	r2, [r6, #1]
    3a26:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3a28:	e6aa      	b.n	3780 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a2a:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a2c:	2241      	movs	r2, #65	; 0x41
    3a2e:	1d34      	adds	r4, r6, #4
    3a30:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a32:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a34:	70b2      	strb	r2, [r6, #2]
    3a36:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    3a38:	e6a2      	b.n	3780 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    3a3a:	232d      	movs	r3, #45	; 0x2d
    3a3c:	f806 3b01 	strb.w	r3, [r6], #1
    3a40:	e691      	b.n	3766 <dtostrf+0x62>
    3a42:	bf00      	nop
    3a44:	7f7fffff 	.word	0x7f7fffff
    3a48:	20000c38 	.word	0x20000c38
    3a4c:	20000c3c 	.word	0x20000c3c

00003a50 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3a50:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    3a52:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3a54:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    3a58:	4619      	mov	r1, r3
{
    3a5a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a5c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a60:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a64:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a68:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    3a6c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    3a70:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    3a72:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3a76:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3a7a:	b29b      	uxth	r3, r3
    3a7c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    3a80:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a84:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    3a88:	3101      	adds	r1, #1
    3a8a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    3a8e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a90:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a92:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3a96:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3a98:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3a9a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3a9c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3a9e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    3aa2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3aa4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3aa6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3aa8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    3aaa:	d1eb      	bne.n	3a84 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3aac:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3ab0:	b29b      	uxth	r3, r3
    3ab2:	f043 030f 	orr.w	r3, r3, #15
    3ab6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3aba:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3abe:	b29b      	uxth	r3, r3
    3ac0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3ac4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    3ac8:	bd10      	pop	{r4, pc}
    3aca:	bf00      	nop

00003acc <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3acc:	4b37      	ldr	r3, [pc, #220]	; (3bac <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3ace:	4a38      	ldr	r2, [pc, #224]	; (3bb0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3ad0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    3ad2:	4838      	ldr	r0, [pc, #224]	; (3bb4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3ad4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    3ad8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3ada:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3adc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3ae0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3ae4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3ae8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3aec:	430a      	orrs	r2, r1
    3aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    3af2:	f7ff ffad 	bl	3a50 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    3af6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3afa:	f7ff ffa9 	bl	3a50 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    3afe:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3b02:	f7ff ffa5 	bl	3a50 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    3b06:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3b0a:	f7ff ffa1 	bl	3a50 <flexpwm_init>
	for (i=0; i < 4; i++) {
    3b0e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b10:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b14:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    3b18:	4611      	mov	r1, r2
    3b1a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3b1e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3b22:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b24:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3b26:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3b28:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b2a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b2e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b30:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b32:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3b36:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b38:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    3b3a:	d1ee      	bne.n	3b1a <pwm_init+0x4e>
    3b3c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b3e:	481e      	ldr	r0, [pc, #120]	; (3bb8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b40:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b44:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    3b48:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b4a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b4e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    3b52:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3b56:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3b5a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b5c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3b5e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3b60:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b62:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b66:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b68:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b6a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3b6e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b70:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    3b72:	d1ee      	bne.n	3b52 <pwm_init+0x86>
    3b74:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b76:	4811      	ldr	r0, [pc, #68]	; (3bbc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b78:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b7a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    3b7e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b80:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b84:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    3b88:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3b8c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3b90:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b92:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3b94:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3b96:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b98:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b9a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b9c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b9e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3ba2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3ba4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    3ba8:	d1ee      	bne.n	3b88 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3baa:	bd70      	pop	{r4, r5, r6, pc}
    3bac:	400fc000 	.word	0x400fc000
    3bb0:	fc030000 	.word	0xfc030000
    3bb4:	403dc000 	.word	0x403dc000
    3bb8:	401e0000 	.word	0x401e0000
    3bbc:	401e4000 	.word	0x401e4000

00003bc0 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    3bc0:	4770      	bx	lr
    3bc2:	bf00      	nop

00003bc4 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop

00003bc8 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop

00003bcc <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop

00003bd0 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    3bd0:	4770      	bx	lr
    3bd2:	bf00      	nop

00003bd4 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop

00003bd8 <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop

00003bdc <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop

00003be0 <unused_interrupt_vector>:
	__disable_irq();
    3be0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    3be2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    3be6:	4c4f      	ldr	r4, [pc, #316]	; (3d24 <unused_interrupt_vector+0x144>)
    3be8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    3bec:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    3bf0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    3bf4:	4e4c      	ldr	r6, [pc, #304]	; (3d28 <unused_interrupt_vector+0x148>)
	while (p < end) {
    3bf6:	4d4d      	ldr	r5, [pc, #308]	; (3d2c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    3bf8:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    3bfc:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    3c00:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    3c04:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    3c08:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    3c0c:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    3c10:	6993      	ldr	r3, [r2, #24]
    3c12:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    3c16:	69d3      	ldr	r3, [r2, #28]
    3c18:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    3c1c:	f000 f8d0 	bl	3dc0 <tempmonGetTemp>
    3c20:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    3c24:	f001 f9c4 	bl	4fb0 <rtc_get>
	info->len = sizeof(*info) / 4;
    3c28:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    3c2a:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    3c2e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    3c32:	460b      	mov	r3, r1
    3c34:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3c38:	493d      	ldr	r1, [pc, #244]	; (3d30 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    3c3a:	1d30      	adds	r0, r6, #4
    3c3c:	405a      	eors	r2, r3
    3c3e:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3c40:	f002 0301 	and.w	r3, r2, #1
    3c44:	3c01      	subs	r4, #1
    3c46:	fb01 f303 	mul.w	r3, r1, r3
    3c4a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    3c4e:	d1f7      	bne.n	3c40 <unused_interrupt_vector+0x60>
	while (p < end) {
    3c50:	42a8      	cmp	r0, r5
    3c52:	d002      	beq.n	3c5a <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    3c54:	6873      	ldr	r3, [r6, #4]
    3c56:	4606      	mov	r6, r0
    3c58:	e7ef      	b.n	3c3a <unused_interrupt_vector+0x5a>
	info->crc = crc;
    3c5a:	4b32      	ldr	r3, [pc, #200]	; (3d24 <unused_interrupt_vector+0x144>)
    3c5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3c60:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3c68:	492f      	ldr	r1, [pc, #188]	; (3d28 <unused_interrupt_vector+0x148>)
    3c6a:	4a32      	ldr	r2, [pc, #200]	; (3d34 <unused_interrupt_vector+0x154>)
    3c6c:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    3c70:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    3c74:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3c78:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3c7c:	4a2e      	ldr	r2, [pc, #184]	; (3d38 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    3c7e:	2502      	movs	r5, #2
    3c80:	482e      	ldr	r0, [pc, #184]	; (3d3c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3c82:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3c84:	492e      	ldr	r1, [pc, #184]	; (3d40 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3c86:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    3c8a:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    3c8c:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3c8e:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3c90:	482c      	ldr	r0, [pc, #176]	; (3d44 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c9a:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3c9c:	680b      	ldr	r3, [r1, #0]
    3c9e:	4283      	cmp	r3, r0
    3ca0:	d83d      	bhi.n	3d1e <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    3ca2:	4d26      	ldr	r5, [pc, #152]	; (3d3c <unused_interrupt_vector+0x15c>)
    3ca4:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    3ca6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3caa:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    3cae:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3cb0:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    3cb2:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    3cb6:	4924      	ldr	r1, [pc, #144]	; (3d48 <unused_interrupt_vector+0x168>)
    3cb8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3cbc:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    3cc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    3cc4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    3cc8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    3ccc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    3cd0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    3cd4:	e001      	b.n	3cda <unused_interrupt_vector+0xfa>
		usb_isr();
    3cd6:	f000 f965 	bl	3fa4 <usb_isr>
		if (PIT_TFLG0) {
    3cda:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d0f9      	beq.n	3cd6 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    3ce2:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    3ce4:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    3ce8:	2c4f      	cmp	r4, #79	; 0x4f
    3cea:	d9f4      	bls.n	3cd6 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3cec:	4b17      	ldr	r3, [pc, #92]	; (3d4c <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    3cee:	2002      	movs	r0, #2
    3cf0:	4917      	ldr	r1, [pc, #92]	; (3d50 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3cf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    3cf6:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3cfa:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3cfc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3d00:	b93b      	cbnz	r3, 3d12 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    3d02:	4814      	ldr	r0, [pc, #80]	; (3d54 <unused_interrupt_vector+0x174>)
    3d04:	4914      	ldr	r1, [pc, #80]	; (3d58 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3d06:	4a0d      	ldr	r2, [pc, #52]	; (3d3c <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    3d08:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3d0a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    3d0e:	2b00      	cmp	r3, #0
    3d10:	d0fa      	beq.n	3d08 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    3d12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d16:	4a11      	ldr	r2, [pc, #68]	; (3d5c <unused_interrupt_vector+0x17c>)
    3d18:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    3d1c:	e7fe      	b.n	3d1c <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3d1e:	f7ff f9c9 	bl	30b4 <set_arm_clock>
    3d22:	e7be      	b.n	3ca2 <unused_interrupt_vector+0xc2>
    3d24:	2027ff00 	.word	0x2027ff00
    3d28:	2027ff80 	.word	0x2027ff80
    3d2c:	2027ffa8 	.word	0x2027ffa8
    3d30:	edb88320 	.word	0xedb88320
    3d34:	2027ffa0 	.word	0x2027ffa0
    3d38:	400fc000 	.word	0x400fc000
    3d3c:	40084000 	.word	0x40084000
    3d40:	20000edc 	.word	0x20000edc
    3d44:	0bcd3d80 	.word	0x0bcd3d80
    3d48:	00249f00 	.word	0x00249f00
    3d4c:	400d9000 	.word	0x400d9000
    3d50:	402e0000 	.word	0x402e0000
    3d54:	400f8000 	.word	0x400f8000
    3d58:	0bad00f1 	.word	0x0bad00f1
    3d5c:	05fa0004 	.word	0x05fa0004

00003d60 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    3d60:	490a      	ldr	r1, [pc, #40]	; (3d8c <_sbrk+0x2c>)
    3d62:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    3d64:	b138      	cbz	r0, 3d76 <_sbrk+0x16>
{
    3d66:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    3d68:	1813      	adds	r3, r2, r0
    3d6a:	4809      	ldr	r0, [pc, #36]	; (3d90 <_sbrk+0x30>)
    3d6c:	4283      	cmp	r3, r0
    3d6e:	d804      	bhi.n	3d7a <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3d70:	4610      	mov	r0, r2
                __brkval = prev + incr;
    3d72:	600b      	str	r3, [r1, #0]
}
    3d74:	bd08      	pop	{r3, pc}
    3d76:	4610      	mov	r0, r2
    3d78:	4770      	bx	lr
                        errno = ENOMEM;
    3d7a:	f002 fc9d 	bl	66b8 <__errno>
    3d7e:	230c      	movs	r3, #12
                        return (void *)-1;
    3d80:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    3d84:	6003      	str	r3, [r0, #0]
}
    3d86:	4610      	mov	r0, r2
    3d88:	bd08      	pop	{r3, pc}
    3d8a:	bf00      	nop
    3d8c:	200011b0 	.word	0x200011b0
    3d90:	20280000 	.word	0x20280000

00003d94 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    3d94:	2000      	movs	r0, #0
    3d96:	4770      	bx	lr

00003d98 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    3d98:	f04f 30ff 	mov.w	r0, #4294967295
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop

00003da0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    3da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    3da4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    3da6:	604b      	str	r3, [r1, #4]
}
    3da8:	4770      	bx	lr
    3daa:	bf00      	nop

00003dac <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    3dac:	2001      	movs	r0, #1
    3dae:	4770      	bx	lr

00003db0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    3db0:	f04f 30ff 	mov.w	r0, #4294967295
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop

00003db8 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    3db8:	bf30      	wfi
    3dba:	e7fd      	b.n	3db8 <abort>

00003dbc <Panic_Temp_isr>:
  unused_interrupt_vector();
    3dbc:	f7ff bf10 	b.w	3be0 <unused_interrupt_vector>

00003dc0 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    3dc0:	4a12      	ldr	r2, [pc, #72]	; (3e0c <tempmonGetTemp+0x4c>)
    3dc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    3dc6:	075b      	lsls	r3, r3, #29
    3dc8:	d5fb      	bpl.n	3dc2 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3dce:	4810      	ldr	r0, [pc, #64]	; (3e10 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3dd0:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3dd4:	490f      	ldr	r1, [pc, #60]	; (3e14 <tempmonGetTemp+0x54>)
    3dd6:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3dda:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3dde:	ed91 6a00 	vldr	s12, [r1]
    3de2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3de6:	4a0c      	ldr	r2, [pc, #48]	; (3e18 <tempmonGetTemp+0x58>)
    3de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3dec:	4b0b      	ldr	r3, [pc, #44]	; (3e1c <tempmonGetTemp+0x5c>)
    3dee:	edd2 6a00 	vldr	s13, [r2]
    3df2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3df6:	ed93 7a00 	vldr	s14, [r3]
    3dfa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3dfe:	ee67 7a86 	vmul.f32	s15, s15, s12
    3e02:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    3e06:	ee37 0a40 	vsub.f32	s0, s14, s0
    3e0a:	4770      	bx	lr
    3e0c:	400d8100 	.word	0x400d8100
    3e10:	200035a4 	.word	0x200035a4
    3e14:	200035ac 	.word	0x200035ac
    3e18:	200035b0 	.word	0x200035b0
    3e1c:	200035a8 	.word	0x200035a8

00003e20 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3e20:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    3e22:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    3e24:	b11b      	cbz	r3, 3e2e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    3e26:	6853      	ldr	r3, [r2, #4]
    3e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3e2c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3e2e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3e30:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    3e32:	b33c      	cbz	r4, 3e84 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3e34:	4b1a      	ldr	r3, [pc, #104]	; (3ea0 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    3e36:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3e38:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3e3c:	420c      	tst	r4, r1
    3e3e:	d11d      	bne.n	3e7c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3e40:	4e18      	ldr	r6, [pc, #96]	; (3ea4 <schedule_transfer+0x84>)
    3e42:	6877      	ldr	r7, [r6, #4]
    3e44:	e004      	b.n	3e50 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3e46:	6874      	ldr	r4, [r6, #4]
    3e48:	1be4      	subs	r4, r4, r7
    3e4a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3e4e:	d20b      	bcs.n	3e68 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3e50:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3e54:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3e58:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3e5c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3e60:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3e64:	0464      	lsls	r4, r4, #17
    3e66:	d5ee      	bpl.n	3e46 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3e68:	400d      	ands	r5, r1
    3e6a:	d107      	bne.n	3e7c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    3e6c:	4c0c      	ldr	r4, [pc, #48]	; (3ea0 <schedule_transfer+0x80>)
		endpoint->status = 0;
    3e6e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    3e72:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e76:	430b      	orrs	r3, r1
    3e78:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    3e7c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3e7e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3e80:	bcf0      	pop	{r4, r5, r6, r7}
    3e82:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    3e84:	4d06      	ldr	r5, [pc, #24]	; (3ea0 <schedule_transfer+0x80>)
	endpoint->status = 0;
    3e86:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    3e8a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    3e8e:	430b      	orrs	r3, r1
    3e90:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3e94:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    3e96:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3e98:	b662      	cpsie	i
}
    3e9a:	bcf0      	pop	{r4, r5, r6, r7}
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	402e0000 	.word	0x402e0000
    3ea4:	e0001000 	.word	0xe0001000

00003ea8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3ea8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3eaa:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    3eac:	b19d      	cbz	r5, 3ed6 <run_callbacks+0x2e>
    3eae:	4606      	mov	r6, r0
    3eb0:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    3eb2:	2400      	movs	r4, #0
    3eb4:	e003      	b.n	3ebe <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3eb6:	6812      	ldr	r2, [r2, #0]
		count++;
    3eb8:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    3eba:	2a01      	cmp	r2, #1
    3ebc:	d00c      	beq.n	3ed8 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    3ebe:	6853      	ldr	r3, [r2, #4]
    3ec0:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3ec4:	d0f7      	beq.n	3eb6 <run_callbacks+0xe>
			ep->first_transfer = t;
    3ec6:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3ec8:	b12c      	cbz	r4, 3ed6 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    3eca:	4628      	mov	r0, r5
		ep->callback_function(first);
    3ecc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    3ece:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    3ed0:	4798      	blx	r3
	while (count) {
    3ed2:	3c01      	subs	r4, #1
    3ed4:	d1f9      	bne.n	3eca <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    3ed6:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    3ed8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    3edc:	e7f4      	b.n	3ec8 <run_callbacks+0x20>
    3ede:	bf00      	nop

00003ee0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3ee0:	b430      	push	{r4, r5}
	if (len > 0) {
    3ee2:	b9d9      	cbnz	r1, 3f1c <endpoint0_transmit.constprop.0+0x3c>
    3ee4:	4c1f      	ldr	r4, [pc, #124]	; (3f64 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    3ee6:	4b20      	ldr	r3, [pc, #128]	; (3f68 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    3ee8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3eea:	4a20      	ldr	r2, [pc, #128]	; (3f6c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    3eec:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3eee:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    3ef2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3ef4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    3ef6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3efa:	2480      	movs	r4, #128	; 0x80
    3efc:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3efe:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3f02:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f06:	481a      	ldr	r0, [pc, #104]	; (3f70 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    3f08:	432b      	orrs	r3, r5
    3f0a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f0e:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    3f10:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f14:	2b00      	cmp	r3, #0
    3f16:	d1fb      	bne.n	3f10 <endpoint0_transmit.constprop.0+0x30>
}
    3f18:	bc30      	pop	{r4, r5}
    3f1a:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f1c:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    3f1e:	4b15      	ldr	r3, [pc, #84]	; (3f74 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3f20:	4c10      	ldr	r4, [pc, #64]	; (3f64 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    3f22:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f24:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3f28:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    3f2a:	4a10      	ldr	r2, [pc, #64]	; (3f6c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f2c:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f2e:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    3f32:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f34:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f36:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3f3a:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f3c:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f3e:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f42:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f46:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    3f48:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f4a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3f4c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3f4e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f56:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3f5a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1fb      	bne.n	3f5a <endpoint0_transmit.constprop.0+0x7a>
    3f62:	e7c0      	b.n	3ee6 <endpoint0_transmit.constprop.0+0x6>
    3f64:	20000000 	.word	0x20000000
    3f68:	20001ac0 	.word	0x20001ac0
    3f6c:	402e0000 	.word	0x402e0000
    3f70:	20002adc 	.word	0x20002adc
    3f74:	20001ae0 	.word	0x20001ae0

00003f78 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    3f78:	4908      	ldr	r1, [pc, #32]	; (3f9c <usb_stop_sof_interrupts+0x24>)
    3f7a:	2201      	movs	r2, #1
    3f7c:	780b      	ldrb	r3, [r1, #0]
    3f7e:	fa02 f000 	lsl.w	r0, r2, r0
    3f82:	ea23 0000 	bic.w	r0, r3, r0
    3f86:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    3f88:	b930      	cbnz	r0, 3f98 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3f8a:	4a05      	ldr	r2, [pc, #20]	; (3fa0 <usb_stop_sof_interrupts+0x28>)
    3f8c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    3f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3f94:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    3f98:	4770      	bx	lr
    3f9a:	bf00      	nop
    3f9c:	200035e5 	.word	0x200035e5
    3fa0:	402e0000 	.word	0x402e0000

00003fa4 <usb_isr>:
{
    3fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    3fa8:	4c97      	ldr	r4, [pc, #604]	; (4208 <usb_isr+0x264>)
{
    3faa:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    3fac:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3fb0:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    3fb2:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3fb6:	d553      	bpl.n	4060 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3fb8:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3fbc:	2a00      	cmp	r2, #0
    3fbe:	d04a      	beq.n	4056 <usb_isr+0xb2>
    3fc0:	4e92      	ldr	r6, [pc, #584]	; (420c <usb_isr+0x268>)
    3fc2:	f8df a260 	ldr.w	sl, [pc, #608]	; 4224 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    3fc6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 423c <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3fca:	f8df b274 	ldr.w	fp, [pc, #628]	; 4240 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3fce:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4244 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    3fd2:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    3fd6:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3fda:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3fe2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    3fe6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3fea:	049d      	lsls	r5, r3, #18
    3fec:	d5f5      	bpl.n	3fda <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3fee:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3ff6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3ffa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3ffe:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4002:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    4006:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    400a:	d1fa      	bne.n	4002 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    400c:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    400e:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    4010:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    4014:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4018:	f000 81cf 	beq.w	43ba <usb_isr+0x416>
    401c:	f200 80db 	bhi.w	41d6 <usb_isr+0x232>
    4020:	f240 3102 	movw	r1, #770	; 0x302
    4024:	428b      	cmp	r3, r1
    4026:	f000 81e7 	beq.w	43f8 <usb_isr+0x454>
    402a:	f200 809a 	bhi.w	4162 <usb_isr+0x1be>
    402e:	2b82      	cmp	r3, #130	; 0x82
    4030:	f000 81cb 	beq.w	43ca <usb_isr+0x426>
    4034:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4038:	f040 808a 	bne.w	4150 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    403c:	f010 0f78 	tst.w	r0, #120	; 0x78
    4040:	b283      	uxth	r3, r0
    4042:	f000 8203 	beq.w	444c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    4046:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    404a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    404e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4052:	2a00      	cmp	r2, #0
    4054:	d1bd      	bne.n	3fd2 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    4056:	4a6c      	ldr	r2, [pc, #432]	; (4208 <usb_isr+0x264>)
    4058:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    405c:	2b00      	cmp	r3, #0
    405e:	d142      	bne.n	40e6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    4060:	067e      	lsls	r6, r7, #25
    4062:	d516      	bpl.n	4092 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4064:	4b68      	ldr	r3, [pc, #416]	; (4208 <usb_isr+0x264>)
    4066:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    406a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    406e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    4072:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4076:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    407a:	2c00      	cmp	r4, #0
    407c:	d1fb      	bne.n	4076 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    407e:	f04f 32ff 	mov.w	r2, #4294967295
    4082:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    4086:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    408a:	f000 fd27 	bl	4adc <usb_serial_reset>
		endpointN_notify_mask = 0;
    408e:	4b60      	ldr	r3, [pc, #384]	; (4210 <usb_isr+0x26c>)
    4090:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    4092:	01fc      	lsls	r4, r7, #7
    4094:	d503      	bpl.n	409e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    4096:	4b5f      	ldr	r3, [pc, #380]	; (4214 <usb_isr+0x270>)
    4098:	681b      	ldr	r3, [r3, #0]
    409a:	b103      	cbz	r3, 409e <usb_isr+0xfa>
    409c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    409e:	01b8      	lsls	r0, r7, #6
    40a0:	d503      	bpl.n	40aa <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    40a2:	4b5d      	ldr	r3, [pc, #372]	; (4218 <usb_isr+0x274>)
    40a4:	681b      	ldr	r3, [r3, #0]
    40a6:	b103      	cbz	r3, 40aa <usb_isr+0x106>
    40a8:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    40aa:	0779      	lsls	r1, r7, #29
    40ac:	d508      	bpl.n	40c0 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    40ae:	4b56      	ldr	r3, [pc, #344]	; (4208 <usb_isr+0x264>)
    40b0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    40b4:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    40b8:	d047      	beq.n	414a <usb_isr+0x1a6>
			usb_high_speed = 1;
    40ba:	4b58      	ldr	r3, [pc, #352]	; (421c <usb_isr+0x278>)
    40bc:	2201      	movs	r2, #1
    40be:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    40c0:	4b51      	ldr	r3, [pc, #324]	; (4208 <usb_isr+0x264>)
    40c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    40c6:	061a      	lsls	r2, r3, #24
    40c8:	d50a      	bpl.n	40e0 <usb_isr+0x13c>
    40ca:	063b      	lsls	r3, r7, #24
    40cc:	d508      	bpl.n	40e0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    40ce:	4a54      	ldr	r2, [pc, #336]	; (4220 <usb_isr+0x27c>)
    40d0:	7813      	ldrb	r3, [r2, #0]
    40d2:	b12b      	cbz	r3, 40e0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    40d4:	3b01      	subs	r3, #1
    40d6:	b2db      	uxtb	r3, r3
    40d8:	7013      	strb	r3, [r2, #0]
    40da:	2b00      	cmp	r3, #0
    40dc:	f000 8272 	beq.w	45c4 <usb_isr+0x620>
}
    40e0:	b003      	add	sp, #12
    40e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    40e6:	494f      	ldr	r1, [pc, #316]	; (4224 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    40e8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    40ec:	6808      	ldr	r0, [r1, #0]
    40ee:	4203      	tst	r3, r0
    40f0:	f040 81d1 	bne.w	4496 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    40f4:	4a46      	ldr	r2, [pc, #280]	; (4210 <usb_isr+0x26c>)
    40f6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    40f8:	401c      	ands	r4, r3
    40fa:	d0b1      	beq.n	4060 <usb_isr+0xbc>
				while (tx) {
    40fc:	ea5f 4814 	movs.w	r8, r4, lsr #16
    4100:	d010      	beq.n	4124 <usb_isr+0x180>
    4102:	4e42      	ldr	r6, [pc, #264]	; (420c <usb_isr+0x268>)
					tx &= ~(1<<p);
    4104:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    4108:	fa98 f5a8 	rbit	r5, r8
    410c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4110:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    4114:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4118:	3040      	adds	r0, #64	; 0x40
    411a:	f7ff fec5 	bl	3ea8 <run_callbacks>
				while (tx) {
    411e:	ea38 0805 	bics.w	r8, r8, r5
    4122:	d1f1      	bne.n	4108 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    4124:	b2a4      	uxth	r4, r4
				while(rx) {
    4126:	2c00      	cmp	r4, #0
    4128:	d09a      	beq.n	4060 <usb_isr+0xbc>
    412a:	4e38      	ldr	r6, [pc, #224]	; (420c <usb_isr+0x268>)
					rx &= ~(1<<p);
    412c:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    4130:	fa94 f5a4 	rbit	r5, r4
    4134:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4138:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    413c:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4140:	f7ff feb2 	bl	3ea8 <run_callbacks>
				while(rx) {
    4144:	43ac      	bics	r4, r5
    4146:	d1f3      	bne.n	4130 <usb_isr+0x18c>
    4148:	e78a      	b.n	4060 <usb_isr+0xbc>
			usb_high_speed = 0;
    414a:	4a34      	ldr	r2, [pc, #208]	; (421c <usb_isr+0x278>)
    414c:	7013      	strb	r3, [r2, #0]
    414e:	e7b7      	b.n	40c0 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    4150:	2b80      	cmp	r3, #128	; 0x80
    4152:	f47f af78 	bne.w	4046 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    4156:	4834      	ldr	r0, [pc, #208]	; (4228 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    4158:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    415a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    415c:	f7ff fec0 	bl	3ee0 <endpoint0_transmit.constprop.0>
		return;
    4160:	e775      	b.n	404e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    4162:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    4166:	f000 810b 	beq.w	4380 <usb_isr+0x3dc>
    416a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    416e:	2b01      	cmp	r3, #1
    4170:	f63f af69 	bhi.w	4046 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4174:	4b2d      	ldr	r3, [pc, #180]	; (422c <usb_isr+0x288>)
    4176:	685d      	ldr	r5, [r3, #4]
    4178:	2d00      	cmp	r5, #0
    417a:	f43f af64 	beq.w	4046 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    417e:	fa1f fc8c 	uxth.w	ip, ip
    4182:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    4186:	e004      	b.n	4192 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4188:	691d      	ldr	r5, [r3, #16]
    418a:	330c      	adds	r3, #12
    418c:	2d00      	cmp	r5, #0
    418e:	f43f af5a 	beq.w	4046 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4192:	881a      	ldrh	r2, [r3, #0]
    4194:	4572      	cmp	r2, lr
    4196:	d1f7      	bne.n	4188 <usb_isr+0x1e4>
    4198:	885a      	ldrh	r2, [r3, #2]
    419a:	4562      	cmp	r2, ip
    419c:	d1f4      	bne.n	4188 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    419e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    41a2:	2a03      	cmp	r2, #3
    41a4:	f000 81a5 	beq.w	44f2 <usb_isr+0x54e>
					datalen = list->length;
    41a8:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    41aa:	0c00      	lsrs	r0, r0, #16
    41ac:	4282      	cmp	r2, r0
    41ae:	bf28      	it	cs
    41b0:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    41b2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    41b6:	f040 81a1 	bne.w	44fc <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    41ba:	4b18      	ldr	r3, [pc, #96]	; (421c <usb_isr+0x278>)
    41bc:	491c      	ldr	r1, [pc, #112]	; (4230 <usb_isr+0x28c>)
    41be:	7818      	ldrb	r0, [r3, #0]
    41c0:	4b1c      	ldr	r3, [pc, #112]	; (4234 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    41c2:	9201      	str	r2, [sp, #4]
    41c4:	2800      	cmp	r0, #0
    41c6:	bf18      	it	ne
    41c8:	4619      	movne	r1, r3
    41ca:	481b      	ldr	r0, [pc, #108]	; (4238 <usb_isr+0x294>)
    41cc:	f7ff f9ba 	bl	3544 <memcpy>
    41d0:	4d19      	ldr	r5, [pc, #100]	; (4238 <usb_isr+0x294>)
    41d2:	9a01      	ldr	r2, [sp, #4]
    41d4:	e1e1      	b.n	459a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    41d6:	f242 2121 	movw	r1, #8737	; 0x2221
    41da:	428b      	cmp	r3, r1
    41dc:	d07c      	beq.n	42d8 <usb_isr+0x334>
    41de:	d933      	bls.n	4248 <usb_isr+0x2a4>
    41e0:	f242 3121 	movw	r1, #8993	; 0x2321
    41e4:	428b      	cmp	r3, r1
    41e6:	f000 8081 	beq.w	42ec <usb_isr+0x348>
    41ea:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    41ee:	428b      	cmp	r3, r1
    41f0:	f47f af29 	bne.w	4046 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    41f4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    41f8:	b283      	uxth	r3, r0
    41fa:	f47f af24 	bne.w	4046 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    41fe:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    4202:	f363 0c0f 	bfi	ip, r3, #0, #16
    4206:	e7b5      	b.n	4174 <usb_isr+0x1d0>
    4208:	402e0000 	.word	0x402e0000
    420c:	20000000 	.word	0x20000000
    4210:	20002ae0 	.word	0x20002ae0
    4214:	200035d0 	.word	0x200035d0
    4218:	200035d4 	.word	0x200035d4
    421c:	200035eb 	.word	0x200035eb
    4220:	200035ec 	.word	0x200035ec
    4224:	20002adc 	.word	0x20002adc
    4228:	2000356c 	.word	0x2000356c
    422c:	20000d20 	.word	0x20000d20
    4230:	60002128 	.word	0x60002128
    4234:	6000218c 	.word	0x6000218c
    4238:	20200000 	.word	0x20200000
    423c:	20002ad4 	.word	0x20002ad4
    4240:	b8c6cf5d 	.word	0xb8c6cf5d
    4244:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    4248:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    424c:	d066      	beq.n	431c <usb_isr+0x378>
    424e:	f242 0121 	movw	r1, #8225	; 0x2021
    4252:	428b      	cmp	r3, r1
    4254:	f47f aef7 	bne.w	4046 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    4258:	0c03      	lsrs	r3, r0, #16
    425a:	2b07      	cmp	r3, #7
    425c:	f47f aef3 	bne.w	4046 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    4260:	4bb2      	ldr	r3, [pc, #712]	; (452c <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4262:	49b3      	ldr	r1, [pc, #716]	; (4530 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    4264:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4266:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    4268:	49b2      	ldr	r1, [pc, #712]	; (4534 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    426a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    426c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    4270:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    4274:	2201      	movs	r2, #1
    4276:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4278:	4aaf      	ldr	r2, [pc, #700]	; (4538 <usb_isr+0x594>)
    427a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    427c:	4aaf      	ldr	r2, [pc, #700]	; (453c <usb_isr+0x598>)
    427e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    4280:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    4284:	f041 0101 	orr.w	r1, r1, #1
    4288:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    428c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4290:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4294:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4296:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    4298:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    429c:	2b00      	cmp	r3, #0
    429e:	d1fb      	bne.n	4298 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    42a0:	4aa7      	ldr	r2, [pc, #668]	; (4540 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    42a2:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    42a4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    42a6:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    42a8:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    42aa:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42ac:	f248 0380 	movw	r3, #32896	; 0x8080
    42b0:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    42b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    42b6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    42ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    42c2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    42c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42ca:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    42ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42d2:	2b00      	cmp	r3, #0
    42d4:	d1fb      	bne.n	42ce <usb_isr+0x32a>
    42d6:	e6ba      	b.n	404e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    42d8:	b280      	uxth	r0, r0
    42da:	b938      	cbnz	r0, 42ec <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    42dc:	4b99      	ldr	r3, [pc, #612]	; (4544 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    42de:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    42e2:	6819      	ldr	r1, [r3, #0]
    42e4:	4b98      	ldr	r3, [pc, #608]	; (4548 <usb_isr+0x5a4>)
    42e6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    42e8:	4b98      	ldr	r3, [pc, #608]	; (454c <usb_isr+0x5a8>)
    42ea:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    42ec:	4b94      	ldr	r3, [pc, #592]	; (4540 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    42ee:	2200      	movs	r2, #0
    42f0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    42f2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    42f4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    42f6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    42f8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42fa:	2280      	movs	r2, #128	; 0x80
    42fc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    42fe:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4302:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4306:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    430e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4312:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4316:	2b00      	cmp	r3, #0
    4318:	d1fb      	bne.n	4312 <usb_isr+0x36e>
    431a:	e698      	b.n	404e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    431c:	f3c2 4207 	ubfx	r2, r2, #16, #8
    4320:	4b8b      	ldr	r3, [pc, #556]	; (4550 <usb_isr+0x5ac>)
    4322:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4324:	4b8b      	ldr	r3, [pc, #556]	; (4554 <usb_isr+0x5b0>)
    4326:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    432a:	4b8b      	ldr	r3, [pc, #556]	; (4558 <usb_isr+0x5b4>)
    432c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4330:	4b8a      	ldr	r3, [pc, #552]	; (455c <usb_isr+0x5b8>)
    4332:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    4336:	f000 fbd3 	bl	4ae0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    433a:	2280      	movs	r2, #128	; 0x80
    433c:	4629      	mov	r1, r5
    433e:	4888      	ldr	r0, [pc, #544]	; (4560 <usb_isr+0x5bc>)
    4340:	f001 fe50 	bl	5fe4 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4344:	4b87      	ldr	r3, [pc, #540]	; (4564 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4346:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4348:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    434c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    4350:	4b7b      	ldr	r3, [pc, #492]	; (4540 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4352:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4354:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    4356:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4358:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    435a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    435c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    435e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4362:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4366:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    436e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4372:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    4376:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    437a:	2b00      	cmp	r3, #0
    437c:	d1fb      	bne.n	4376 <usb_isr+0x3d2>
    437e:	e666      	b.n	404e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    4380:	4b6f      	ldr	r3, [pc, #444]	; (4540 <usb_isr+0x59c>)
    4382:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    4384:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4386:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4388:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    438a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    438c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    438e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4390:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4394:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4398:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    439c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    43a0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    43a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    43a8:	2b00      	cmp	r3, #0
    43aa:	d1fb      	bne.n	43a4 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    43ac:	0c13      	lsrs	r3, r2, #16
    43ae:	065b      	lsls	r3, r3, #25
    43b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    43b4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    43b8:	e649      	b.n	404e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    43ba:	4b65      	ldr	r3, [pc, #404]	; (4550 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    43bc:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    43be:	486a      	ldr	r0, [pc, #424]	; (4568 <usb_isr+0x5c4>)
    43c0:	781b      	ldrb	r3, [r3, #0]
    43c2:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    43c4:	f7ff fd8c 	bl	3ee0 <endpoint0_transmit.constprop.0>
		return;
    43c8:	e641      	b.n	404e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    43ca:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    43cc:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    43d0:	f47f ae39 	bne.w	4046 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    43d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    43d8:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    43dc:	4a62      	ldr	r2, [pc, #392]	; (4568 <usb_isr+0x5c4>)
    43de:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    43e0:	0618      	lsls	r0, r3, #24
    43e2:	f100 809e 	bmi.w	4522 <usb_isr+0x57e>
    43e6:	07cb      	lsls	r3, r1, #31
    43e8:	d501      	bpl.n	43ee <usb_isr+0x44a>
			reply_buffer[0] = 1;
    43ea:	2301      	movs	r3, #1
    43ec:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    43ee:	2102      	movs	r1, #2
    43f0:	485d      	ldr	r0, [pc, #372]	; (4568 <usb_isr+0x5c4>)
    43f2:	f7ff fd75 	bl	3ee0 <endpoint0_transmit.constprop.0>
		return;
    43f6:	e62a      	b.n	404e <usb_isr+0xaa>
		if (endpoint > 7) break;
    43f8:	f010 0f78 	tst.w	r0, #120	; 0x78
    43fc:	b283      	uxth	r3, r0
    43fe:	f47f ae22 	bne.w	4046 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4406:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    440a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    440e:	bf14      	ite	ne
    4410:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4414:	f043 0301 	orreq.w	r3, r3, #1
    4418:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    441c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    441e:	4b48      	ldr	r3, [pc, #288]	; (4540 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4420:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4422:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4424:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4426:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4428:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    442a:	2280      	movs	r2, #128	; 0x80
    442c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    442e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4432:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4436:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    443e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4442:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4446:	2b00      	cmp	r3, #0
    4448:	d1fb      	bne.n	4442 <usb_isr+0x49e>
    444a:	e600      	b.n	404e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    444c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4450:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4454:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4458:	bf14      	ite	ne
    445a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    445e:	f023 0301 	biceq.w	r3, r3, #1
    4462:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4466:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4468:	4b35      	ldr	r3, [pc, #212]	; (4540 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    446a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    446c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    446e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4470:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4472:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4474:	2280      	movs	r2, #128	; 0x80
    4476:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4478:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    447c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4480:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4488:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    448c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4490:	2b00      	cmp	r3, #0
    4492:	d1fb      	bne.n	448c <usb_isr+0x4e8>
    4494:	e5db      	b.n	404e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    4496:	2000      	movs	r0, #0
    4498:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    449a:	4926      	ldr	r1, [pc, #152]	; (4534 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    449c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    449e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    44a0:	f242 0121 	movw	r1, #8225	; 0x2021
    44a4:	428c      	cmp	r4, r1
    44a6:	f47f ae25 	bne.w	40f4 <usb_isr+0x150>
    44aa:	b280      	uxth	r0, r0
    44ac:	2800      	cmp	r0, #0
    44ae:	f47f ae21 	bne.w	40f4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    44b2:	492e      	ldr	r1, [pc, #184]	; (456c <usb_isr+0x5c8>)
    44b4:	4c2e      	ldr	r4, [pc, #184]	; (4570 <usb_isr+0x5cc>)
    44b6:	c903      	ldmia	r1, {r0, r1}
    44b8:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    44ba:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    44bc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    44c0:	6020      	str	r0, [r4, #0]
    44c2:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    44c4:	f47f ae16 	bne.w	40f4 <usb_isr+0x150>
	__disable_irq();
    44c8:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    44ca:	482a      	ldr	r0, [pc, #168]	; (4574 <usb_isr+0x5d0>)
    44cc:	7801      	ldrb	r1, [r0, #0]
    44ce:	f041 0108 	orr.w	r1, r1, #8
    44d2:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    44d4:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    44d8:	060d      	lsls	r5, r1, #24
    44da:	d405      	bmi.n	44e8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    44dc:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    44de:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    44e0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    44e4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    44e8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    44ea:	4a23      	ldr	r2, [pc, #140]	; (4578 <usb_isr+0x5d4>)
    44ec:	2150      	movs	r1, #80	; 0x50
    44ee:	7011      	strb	r1, [r2, #0]
    44f0:	e600      	b.n	40f4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    44f2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    44f4:	782a      	ldrb	r2, [r5, #0]
    44f6:	4282      	cmp	r2, r0
    44f8:	bf28      	it	cs
    44fa:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    44fc:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    4500:	d144      	bne.n	458c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    4502:	4b1e      	ldr	r3, [pc, #120]	; (457c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4504:	4d1e      	ldr	r5, [pc, #120]	; (4580 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    4506:	7818      	ldrb	r0, [r3, #0]
    4508:	491e      	ldr	r1, [pc, #120]	; (4584 <usb_isr+0x5e0>)
    450a:	4b1f      	ldr	r3, [pc, #124]	; (4588 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    450c:	9201      	str	r2, [sp, #4]
    450e:	2800      	cmp	r0, #0
    4510:	bf18      	it	ne
    4512:	4619      	movne	r1, r3
    4514:	4628      	mov	r0, r5
    4516:	f7ff f815 	bl	3544 <memcpy>
					usb_descriptor_buffer[1] = 7;
    451a:	2307      	movs	r3, #7
    451c:	706b      	strb	r3, [r5, #1]
    451e:	9a01      	ldr	r2, [sp, #4]
    4520:	e03b      	b.n	459a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4522:	03c9      	lsls	r1, r1, #15
    4524:	f53f af61 	bmi.w	43ea <usb_isr+0x446>
    4528:	e761      	b.n	43ee <usb_isr+0x44a>
    452a:	bf00      	nop
    452c:	20001ae0 	.word	0x20001ae0
    4530:	20003ad4 	.word	0x20003ad4
    4534:	20001c80 	.word	0x20001c80
    4538:	00070080 	.word	0x00070080
    453c:	20004ad4 	.word	0x20004ad4
    4540:	20001ac0 	.word	0x20001ac0
    4544:	200035bc 	.word	0x200035bc
    4548:	200035cc 	.word	0x200035cc
    454c:	200035e9 	.word	0x200035e9
    4550:	200035ea 	.word	0x200035ea
    4554:	00cc0002 	.word	0x00cc0002
    4558:	000200c8 	.word	0x000200c8
    455c:	00c80002 	.word	0x00c80002
    4560:	20000080 	.word	0x20000080
    4564:	74d59319 	.word	0x74d59319
    4568:	2000356c 	.word	0x2000356c
    456c:	20002ad4 	.word	0x20002ad4
    4570:	200035c4 	.word	0x200035c4
    4574:	200035e5 	.word	0x200035e5
    4578:	200035ec 	.word	0x200035ec
    457c:	200035eb 	.word	0x200035eb
    4580:	20200000 	.word	0x20200000
    4584:	6000218c 	.word	0x6000218c
    4588:	60002128 	.word	0x60002128
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    458c:	4629      	mov	r1, r5
    458e:	4d10      	ldr	r5, [pc, #64]	; (45d0 <usb_isr+0x62c>)
    4590:	9201      	str	r2, [sp, #4]
    4592:	4628      	mov	r0, r5
    4594:	f7fe ffd6 	bl	3544 <memcpy>
    4598:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    459a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    459e:	4415      	add	r5, r2
	asm("dsb");
    45a0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    45a4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    45a8:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    45ac:	3320      	adds	r3, #32
	} while (location < end_addr);
    45ae:	429d      	cmp	r5, r3
    45b0:	d8fa      	bhi.n	45a8 <usb_isr+0x604>
	asm("dsb");
    45b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    45b6:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    45ba:	4805      	ldr	r0, [pc, #20]	; (45d0 <usb_isr+0x62c>)
    45bc:	4611      	mov	r1, r2
    45be:	f7ff fc8f 	bl	3ee0 <endpoint0_transmit.constprop.0>
				return;
    45c2:	e544      	b.n	404e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    45c4:	2003      	movs	r0, #3
    45c6:	f7ff fcd7 	bl	3f78 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    45ca:	f005 fe4d 	bl	a268 <___reboot_Teensyduino__veneer>
    45ce:	bf00      	nop
    45d0:	20200000 	.word	0x20200000

000045d4 <usb_config_rx>:
{
    45d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45d8:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    45da:	1e83      	subs	r3, r0, #2
    45dc:	2b02      	cmp	r3, #2
    45de:	d901      	bls.n	45e4 <usb_config_rx+0x10>
}
    45e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    45e4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4634 <usb_config_rx+0x60>
    45e8:	4615      	mov	r5, r2
    45ea:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    45ec:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    45ee:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    45f2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    45f4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    45f8:	2100      	movs	r1, #0
    45fa:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    45fe:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    4600:	f001 fcf0 	bl	5fe4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4604:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    4608:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    460a:	0952      	lsrs	r2, r2, #5
    460c:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    4610:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    4614:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4618:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    461c:	2f00      	cmp	r7, #0
    461e:	d0df      	beq.n	45e0 <usb_config_rx+0xc>
    4620:	4a03      	ldr	r2, [pc, #12]	; (4630 <usb_config_rx+0x5c>)
    4622:	40b3      	lsls	r3, r6
    4624:	6811      	ldr	r1, [r2, #0]
    4626:	430b      	orrs	r3, r1
    4628:	6013      	str	r3, [r2, #0]
}
    462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    462e:	bf00      	nop
    4630:	20002ae0 	.word	0x20002ae0
    4634:	20000000 	.word	0x20000000

00004638 <usb_config_tx>:
{
    4638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    463c:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    463e:	1e81      	subs	r1, r0, #2
    4640:	2902      	cmp	r1, #2
    4642:	d901      	bls.n	4648 <usb_config_tx+0x10>
}
    4644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4648:	01c7      	lsls	r7, r0, #7
    464a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4698 <usb_config_tx+0x60>
    464e:	4692      	mov	sl, r2
    4650:	4604      	mov	r4, r0
    4652:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    4654:	223c      	movs	r2, #60	; 0x3c
    4656:	2100      	movs	r1, #0
    4658:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    465a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    465e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    4660:	f108 0004 	add.w	r0, r8, #4
    4664:	f001 fcbe 	bl	5fe4 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4668:	faba f28a 	clz	r2, sl
    466c:	0952      	lsrs	r2, r2, #5
    466e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    4672:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    4676:	2201      	movs	r2, #1
	qh->callback_function = callback;
    4678:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    467c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    4680:	2e00      	cmp	r6, #0
    4682:	d0df      	beq.n	4644 <usb_config_tx+0xc>
    4684:	4b03      	ldr	r3, [pc, #12]	; (4694 <usb_config_tx+0x5c>)
    4686:	3410      	adds	r4, #16
    4688:	6819      	ldr	r1, [r3, #0]
    468a:	40a2      	lsls	r2, r4
    468c:	430a      	orrs	r2, r1
    468e:	601a      	str	r2, [r3, #0]
}
    4690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4694:	20002ae0 	.word	0x20002ae0
    4698:	20000000 	.word	0x20000000

0000469c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    469c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    469e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    46a0:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    46a2:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    46a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    46aa:	b410      	push	{r4}
	transfer->next = 1;
    46ac:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    46ae:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    46b0:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    46b4:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    46b6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    46ba:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    46be:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    46c0:	6181      	str	r1, [r0, #24]
}
    46c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    46c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    46ca:	4770      	bx	lr

000046cc <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46cc:	1e83      	subs	r3, r0, #2
{
    46ce:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46d0:	2b02      	cmp	r3, #2
    46d2:	d900      	bls.n	46d6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    46d4:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    46d6:	4b06      	ldr	r3, [pc, #24]	; (46f0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    46d8:	f100 0110 	add.w	r1, r0, #16
    46dc:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    46e0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    46e4:	fa0c f101 	lsl.w	r1, ip, r1
    46e8:	3040      	adds	r0, #64	; 0x40
    46ea:	f7ff bb99 	b.w	3e20 <schedule_transfer>
    46ee:	bf00      	nop
    46f0:	20000000 	.word	0x20000000

000046f4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46f4:	1e83      	subs	r3, r0, #2
{
    46f6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46f8:	2b02      	cmp	r3, #2
    46fa:	d900      	bls.n	46fe <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    46fc:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    46fe:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    4700:	4b02      	ldr	r3, [pc, #8]	; (470c <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    4702:	4081      	lsls	r1, r0
    4704:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    4708:	f7ff bb8a 	b.w	3e20 <schedule_transfer>
    470c:	20000000 	.word	0x20000000

00004710 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    4710:	6840      	ldr	r0, [r0, #4]
#endif
}
    4712:	4770      	bx	lr

00004714 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4714:	4a12      	ldr	r2, [pc, #72]	; (4760 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4716:	4b13      	ldr	r3, [pc, #76]	; (4764 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4718:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    471c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    4720:	4298      	cmp	r0, r3
{
    4722:	b510      	push	{r4, lr}
    4724:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    4726:	d202      	bcs.n	472e <usb_init_serialnumber+0x1a>
    4728:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    472c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    472e:	4c0e      	ldr	r4, [pc, #56]	; (4768 <usb_init_serialnumber+0x54>)
    4730:	a901      	add	r1, sp, #4
    4732:	220a      	movs	r2, #10
    4734:	f7fe ffa4 	bl	3680 <ultoa>
	for (i=0; i<10; i++) {
    4738:	a901      	add	r1, sp, #4
    473a:	2300      	movs	r3, #0
    473c:	4620      	mov	r0, r4
		char c = buf[i];
    473e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    4742:	3301      	adds	r3, #1
		if (!c) break;
    4744:	b13a      	cbz	r2, 4756 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    4746:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    4748:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    474c:	d1f7      	bne.n	473e <usb_init_serialnumber+0x2a>
    474e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4750:	7023      	strb	r3, [r4, #0]
}
    4752:	b004      	add	sp, #16
    4754:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4756:	005b      	lsls	r3, r3, #1
    4758:	b2db      	uxtb	r3, r3
    475a:	7023      	strb	r3, [r4, #0]
}
    475c:	b004      	add	sp, #16
    475e:	bd10      	pop	{r4, pc}
    4760:	401f4400 	.word	0x401f4400
    4764:	00989680 	.word	0x00989680
    4768:	20001798 	.word	0x20001798

0000476c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    476c:	f000 bacc 	b.w	4d08 <usb_serial_flush_input>

00004770 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4770:	f000 bb5c 	b.w	4e2c <usb_serial_flush_output>

00004774 <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4774:	f000 bb32 	b.w	4ddc <usb_serial_write_buffer_free>

00004778 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4778:	4608      	mov	r0, r1
    477a:	4611      	mov	r1, r2
    477c:	f000 bb22 	b.w	4dc4 <usb_serial_write>

00004780 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4782:	4c14      	ldr	r4, [pc, #80]	; (47d4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4784:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4788:	4e13      	ldr	r6, [pc, #76]	; (47d8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    478a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    478e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4792:	4f12      	ldr	r7, [pc, #72]	; (47dc <rx_queue_transfer+0x5c>)
    4794:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    4798:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    479a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    479e:	4621      	mov	r1, r4
    47a0:	883a      	ldrh	r2, [r7, #0]
    47a2:	4630      	mov	r0, r6
    47a4:	f7ff ff7a 	bl	469c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    47a8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    47aa:	4423      	add	r3, r4
	asm("dsb");
    47ac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    47b0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    47b4:	3420      	adds	r4, #32
	} while (location < end_addr);
    47b6:	42a3      	cmp	r3, r4
    47b8:	d8fa      	bhi.n	47b0 <rx_queue_transfer+0x30>
	asm("dsb");
    47ba:	f3bf 8f4f 	dsb	sy
	asm("isb");
    47be:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    47c2:	2003      	movs	r0, #3
    47c4:	4631      	mov	r1, r6
    47c6:	f7ff ff95 	bl	46f4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    47ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    47ce:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    47d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d4:	20200080 	.word	0x20200080
    47d8:	20001b00 	.word	0x20001b00
    47dc:	200035d8 	.word	0x200035d8

000047e0 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    47e0:	4b24      	ldr	r3, [pc, #144]	; (4874 <rx_event+0x94>)
{
    47e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    47e6:	881c      	ldrh	r4, [r3, #0]
    47e8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    47ea:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    47ec:	f3c3 430e 	ubfx	r3, r3, #16, #15
    47f0:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    47f2:	2c00      	cmp	r4, #0
    47f4:	dd24      	ble.n	4840 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    47f6:	4920      	ldr	r1, [pc, #128]	; (4878 <rx_event+0x98>)
		if (head != rx_tail) {
    47f8:	4820      	ldr	r0, [pc, #128]	; (487c <rx_event+0x9c>)
		uint32_t head = rx_head;
    47fa:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    47fc:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    47fe:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    4800:	4e1f      	ldr	r6, [pc, #124]	; (4880 <rx_event+0xa0>)
		if (head != rx_tail) {
    4802:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    4804:	481f      	ldr	r0, [pc, #124]	; (4884 <rx_event+0xa4>)
		if (head != rx_tail) {
    4806:	d007      	beq.n	4818 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    4808:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    480c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    4810:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    4814:	4294      	cmp	r4, r2
    4816:	d918      	bls.n	484a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4818:	3301      	adds	r3, #1
		rx_index[i] = 0;
    481a:	2200      	movs	r2, #0
		rx_count[i] = len;
    481c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    4820:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    4822:	4e19      	ldr	r6, [pc, #100]	; (4888 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    4824:	bf88      	it	hi
    4826:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    4828:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    482c:	bf98      	it	ls
    482e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    4830:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    4832:	4b16      	ldr	r3, [pc, #88]	; (488c <rx_event+0xac>)
		rx_head = head;
    4834:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    4836:	681a      	ldr	r2, [r3, #0]
    4838:	4414      	add	r4, r2
    483a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    483c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    4840:	4628      	mov	r0, r5
}
    4842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    4846:	f7ff bf9b 	b.w	4780 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    484a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    484e:	4910      	ldr	r1, [pc, #64]	; (4890 <rx_event+0xb0>)
    4850:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    4852:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4854:	4408      	add	r0, r1
    4856:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    485a:	f7fe fe73 	bl	3544 <memcpy>
				rx_available += len;
    485e:	4a0b      	ldr	r2, [pc, #44]	; (488c <rx_event+0xac>)
				rx_queue_transfer(i);
    4860:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    4862:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    4866:	6813      	ldr	r3, [r2, #0]
    4868:	4423      	add	r3, r4
}
    486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    486e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    4870:	f7ff bf86 	b.w	4780 <rx_queue_transfer>
    4874:	200035d8 	.word	0x200035d8
    4878:	200035e3 	.word	0x200035e3
    487c:	200035e4 	.word	0x200035e4
    4880:	20003578 	.word	0x20003578
    4884:	20003598 	.word	0x20003598
    4888:	20003588 	.word	0x20003588
    488c:	20003574 	.word	0x20003574
    4890:	20200080 	.word	0x20200080

00004894 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    4894:	4b1d      	ldr	r3, [pc, #116]	; (490c <usb_serial_flush_callback+0x78>)
    4896:	781a      	ldrb	r2, [r3, #0]
    4898:	2a00      	cmp	r2, #0
    489a:	d136      	bne.n	490a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    489c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    48a0:	4a1b      	ldr	r2, [pc, #108]	; (4910 <usb_serial_flush_callback+0x7c>)
    48a2:	7812      	ldrb	r2, [r2, #0]
    48a4:	b38a      	cbz	r2, 490a <usb_serial_flush_callback+0x76>
{
    48a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    48aa:	4d1a      	ldr	r5, [pc, #104]	; (4914 <usb_serial_flush_callback+0x80>)
    48ac:	882a      	ldrh	r2, [r5, #0]
    48ae:	b352      	cbz	r2, 4906 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    48b0:	4e19      	ldr	r6, [pc, #100]	; (4918 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    48b2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    48b6:	4f19      	ldr	r7, [pc, #100]	; (491c <usb_serial_flush_callback+0x88>)
    48b8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    48ba:	4c19      	ldr	r4, [pc, #100]	; (4920 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    48bc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    48c0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    48c4:	4642      	mov	r2, r8
    48c6:	4638      	mov	r0, r7
    48c8:	4621      	mov	r1, r4
    48ca:	f7ff fee7 	bl	469c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    48ce:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    48d2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    48d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    48da:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    48de:	3420      	adds	r4, #32
	} while (location < end_addr);
    48e0:	42a2      	cmp	r2, r4
    48e2:	d8fa      	bhi.n	48da <usb_serial_flush_callback+0x46>
	asm("dsb");
    48e4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    48e8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    48ec:	2004      	movs	r0, #4
    48ee:	4639      	mov	r1, r7
    48f0:	f7ff feec 	bl	46cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    48f4:	7833      	ldrb	r3, [r6, #0]
    48f6:	3301      	adds	r3, #1
    48f8:	b2db      	uxtb	r3, r3
    48fa:	2b03      	cmp	r3, #3
    48fc:	bf88      	it	hi
    48fe:	2300      	movhi	r3, #0
    4900:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4902:	2300      	movs	r3, #0
    4904:	802b      	strh	r3, [r5, #0]
}
    4906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    490a:	4770      	bx	lr
    490c:	200035e8 	.word	0x200035e8
    4910:	200035ea 	.word	0x200035ea
    4914:	200035da 	.word	0x200035da
    4918:	200035e7 	.word	0x200035e7
    491c:	20001c00 	.word	0x20001c00
    4920:	20201080 	.word	0x20201080

00004924 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    4924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4928:	b085      	sub	sp, #20
	while (size > 0) {
    492a:	e9cd 1001 	strd	r1, r0, [sp, #4]
    492e:	2900      	cmp	r1, #0
    4930:	f000 80bf 	beq.w	4ab2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    4934:	2300      	movs	r3, #0
    4936:	4c60      	ldr	r4, [pc, #384]	; (4ab8 <usb_serial_write.part.0+0x194>)
    4938:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4ad4 <usb_serial_write.part.0+0x1b0>
    493c:	f8df a198 	ldr.w	sl, [pc, #408]	; 4ad8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    4940:	4f5e      	ldr	r7, [pc, #376]	; (4abc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    4942:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    4944:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    4946:	4a5e      	ldr	r2, [pc, #376]	; (4ac0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    4948:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    494a:	4b5e      	ldr	r3, [pc, #376]	; (4ac4 <usb_serial_write.part.0+0x1a0>)
    494c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    494e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    4952:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    4956:	2b00      	cmp	r3, #0
    4958:	f040 80a7 	bne.w	4aaa <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    495c:	461e      	mov	r6, r3
		int waiting=0;
    495e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    4960:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    4962:	4648      	mov	r0, r9
    4964:	f7ff fed4 	bl	4710 <usb_transfer_status>
			if (!(status & 0x80)) {
    4968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    496c:	f000 808c 	beq.w	4a88 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    4970:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    4974:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    4978:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    497c:	b905      	cbnz	r5, 4980 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    497e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    4980:	2b00      	cmp	r3, #0
    4982:	d17d      	bne.n	4a80 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    4984:	683b      	ldr	r3, [r7, #0]
    4986:	1b9b      	subs	r3, r3, r6
    4988:	2b78      	cmp	r3, #120	; 0x78
    498a:	f200 8087 	bhi.w	4a9c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    498e:	4b4e      	ldr	r3, [pc, #312]	; (4ac8 <usb_serial_write.part.0+0x1a4>)
    4990:	781b      	ldrb	r3, [r3, #0]
    4992:	2b00      	cmp	r3, #0
    4994:	d074      	beq.n	4a80 <usb_serial_write.part.0+0x15c>
			yield();
    4996:	f000 fa93 	bl	4ec0 <yield>
			tx_noautoflush = 1;
    499a:	2201      	movs	r2, #1
		while (!tx_available) {
    499c:	f8b8 3000 	ldrh.w	r3, [r8]
    49a0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    49a2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    49a4:	2b00      	cmp	r3, #0
    49a6:	d0dc      	beq.n	4962 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    49a8:	4a46      	ldr	r2, [pc, #280]	; (4ac4 <usb_serial_write.part.0+0x1a0>)
    49aa:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    49ae:	7811      	ldrb	r1, [r2, #0]
    49b0:	461a      	mov	r2, r3
    49b2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    49b6:	4d45      	ldr	r5, [pc, #276]	; (4acc <usb_serial_write.part.0+0x1a8>)
    49b8:	02c9      	lsls	r1, r1, #11
    49ba:	4428      	add	r0, r5
		if (size >= tx_available) {
    49bc:	9d01      	ldr	r5, [sp, #4]
    49be:	4295      	cmp	r5, r2
    49c0:	d217      	bcs.n	49f2 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    49c2:	9303      	str	r3, [sp, #12]
    49c4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    49c8:	462a      	mov	r2, r5
    49ca:	f7fe fdbb 	bl	3544 <memcpy>
			tx_available -= size;
    49ce:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    49d0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    49d4:	1b5b      	subs	r3, r3, r5
    49d6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    49da:	4b3d      	ldr	r3, [pc, #244]	; (4ad0 <usb_serial_write.part.0+0x1ac>)
    49dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    49e0:	f3bf 8f4f 	dsb	sy
			sent += size;
    49e4:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    49e6:	2300      	movs	r3, #0
			sent += size;
    49e8:	4428      	add	r0, r5
		tx_noautoflush = 0;
    49ea:	7023      	strb	r3, [r4, #0]
}
    49ec:	b005      	add	sp, #20
    49ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    49f2:	4b36      	ldr	r3, [pc, #216]	; (4acc <usb_serial_write.part.0+0x1a8>)
    49f4:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    49f6:	9902      	ldr	r1, [sp, #8]
    49f8:	f7fe fda4 	bl	3544 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    49fc:	2300      	movs	r3, #0
    49fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4a02:	4629      	mov	r1, r5
    4a04:	4648      	mov	r0, r9
    4a06:	f7ff fe49 	bl	469c <usb_prepare_transfer>
	asm("dsb");
    4a0a:	f3bf 8f4f 	dsb	sy
    4a0e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    4a12:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    4a16:	4293      	cmp	r3, r2
    4a18:	bf34      	ite	cc
    4a1a:	2301      	movcc	r3, #1
    4a1c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    4a1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4a22:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    4a26:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    4a2a:	3520      	adds	r5, #32
	} while (location < end_addr);
    4a2c:	42ab      	cmp	r3, r5
    4a2e:	d1fa      	bne.n	4a26 <usb_serial_write.part.0+0x102>
	asm("dsb");
    4a30:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a34:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4a38:	2004      	movs	r0, #4
    4a3a:	4649      	mov	r1, r9
    4a3c:	f7ff fe46 	bl	46cc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4a40:	4a20      	ldr	r2, [pc, #128]	; (4ac4 <usb_serial_write.part.0+0x1a0>)
    4a42:	7813      	ldrb	r3, [r2, #0]
    4a44:	3301      	adds	r3, #1
    4a46:	b2db      	uxtb	r3, r3
    4a48:	2b03      	cmp	r3, #3
    4a4a:	bf84      	itt	hi
    4a4c:	2300      	movhi	r3, #0
    4a4e:	4a1d      	ldrhi	r2, [pc, #116]	; (4ac4 <usb_serial_write.part.0+0x1a0>)
    4a50:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4a52:	f8b8 3000 	ldrh.w	r3, [r8]
    4a56:	9a01      	ldr	r2, [sp, #4]
    4a58:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    4a5a:	9a00      	ldr	r2, [sp, #0]
    4a5c:	441a      	add	r2, r3
			size -= tx_available;
    4a5e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    4a60:	9200      	str	r2, [sp, #0]
			data += tx_available;
    4a62:	9a02      	ldr	r2, [sp, #8]
    4a64:	441a      	add	r2, r3
			tx_available = 0;
    4a66:	2300      	movs	r3, #0
			data += tx_available;
    4a68:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    4a6a:	4a19      	ldr	r2, [pc, #100]	; (4ad0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    4a6c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    4a70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    4a74:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    4a78:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    4a7a:	2900      	cmp	r1, #0
    4a7c:	f47f af62 	bne.w	4944 <usb_serial_write.part.0+0x20>
	return sent;
    4a80:	9800      	ldr	r0, [sp, #0]
}
    4a82:	b005      	add	sp, #20
    4a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    4a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4a8c:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    4a8e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4a92:	7819      	ldrb	r1, [r3, #0]
				break;
    4a94:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    4a96:	f8a8 2000 	strh.w	r2, [r8]
				break;
    4a9a:	e78a      	b.n	49b2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    4a9c:	2301      	movs	r3, #1
				return sent;
    4a9e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    4aa0:	f88a 3000 	strb.w	r3, [sl]
}
    4aa4:	b005      	add	sp, #20
    4aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4aaa:	461a      	mov	r2, r3
    4aac:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4ab0:	e77f      	b.n	49b2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    4ab2:	9801      	ldr	r0, [sp, #4]
	return sent;
    4ab4:	e7e5      	b.n	4a82 <usb_serial_write.part.0+0x15e>
    4ab6:	bf00      	nop
    4ab8:	200035e8 	.word	0x200035e8
    4abc:	200035bc 	.word	0x200035bc
    4ac0:	20001c00 	.word	0x20001c00
    4ac4:	200035e7 	.word	0x200035e7
    4ac8:	200035ea 	.word	0x200035ea
    4acc:	20201080 	.word	0x20201080
    4ad0:	402e0000 	.word	0x402e0000
    4ad4:	200035da 	.word	0x200035da
    4ad8:	200035e6 	.word	0x200035e6

00004adc <usb_serial_reset>:
}
    4adc:	4770      	bx	lr
    4ade:	bf00      	nop

00004ae0 <usb_serial_configure>:
	if (usb_high_speed) {
    4ae0:	4b2a      	ldr	r3, [pc, #168]	; (4b8c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4ae2:	2100      	movs	r1, #0
    4ae4:	2280      	movs	r2, #128	; 0x80
    4ae6:	482a      	ldr	r0, [pc, #168]	; (4b90 <usb_serial_configure+0xb0>)
{
    4ae8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    4aea:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    4aec:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    4aee:	4d29      	ldr	r5, [pc, #164]	; (4b94 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    4af0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    4af2:	4e29      	ldr	r6, [pc, #164]	; (4b98 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    4af4:	bf0c      	ite	eq
    4af6:	2340      	moveq	r3, #64	; 0x40
    4af8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    4afc:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4afe:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4b00:	f001 fa70 	bl	5fe4 <memset>
	tx_head = 0;
    4b04:	4a25      	ldr	r2, [pc, #148]	; (4b9c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b06:	4621      	mov	r1, r4
	tx_available = 0;
    4b08:	4b25      	ldr	r3, [pc, #148]	; (4ba0 <usb_serial_configure+0xc0>)
	tx_head = 0;
    4b0a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b10:	4824      	ldr	r0, [pc, #144]	; (4ba4 <usb_serial_configure+0xc4>)
	tx_available = 0;
    4b12:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b14:	f001 fa66 	bl	5fe4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4b18:	4a23      	ldr	r2, [pc, #140]	; (4ba8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b1a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    4b1c:	4b23      	ldr	r3, [pc, #140]	; (4bac <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b1e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    4b20:	e9c2 4400 	strd	r4, r4, [r2]
    4b24:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    4b28:	4a21      	ldr	r2, [pc, #132]	; (4bb0 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    4b2a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    4b2e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    4b30:	4a20      	ldr	r2, [pc, #128]	; (4bb4 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    4b32:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    4b36:	4b20      	ldr	r3, [pc, #128]	; (4bb8 <usb_serial_configure+0xd8>)
    4b38:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b3a:	4623      	mov	r3, r4
	rx_available = 0;
    4b3c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b3e:	4622      	mov	r2, r4
    4b40:	f7ff fd7a 	bl	4638 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4b44:	4622      	mov	r2, r4
    4b46:	8831      	ldrh	r1, [r6, #0]
    4b48:	2003      	movs	r0, #3
    4b4a:	4b1c      	ldr	r3, [pc, #112]	; (4bbc <usb_serial_configure+0xdc>)
    4b4c:	f7ff fd42 	bl	45d4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4b50:	4623      	mov	r3, r4
    4b52:	2201      	movs	r2, #1
    4b54:	8829      	ldrh	r1, [r5, #0]
    4b56:	2004      	movs	r0, #4
    4b58:	f7ff fd6e 	bl	4638 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4b5c:	4620      	mov	r0, r4
    4b5e:	3401      	adds	r4, #1
    4b60:	f7ff fe0e 	bl	4780 <rx_queue_transfer>
    4b64:	2c08      	cmp	r4, #8
    4b66:	d1f9      	bne.n	4b5c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    4b68:	4b15      	ldr	r3, [pc, #84]	; (4bc0 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    4b6a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    4b6c:	4815      	ldr	r0, [pc, #84]	; (4bc4 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    4b6e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    4b70:	4c15      	ldr	r4, [pc, #84]	; (4bc8 <usb_serial_configure+0xe8>)
    4b72:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    4b74:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4b7c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4b80:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4b84:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    4b88:	bd70      	pop	{r4, r5, r6, pc}
    4b8a:	bf00      	nop
    4b8c:	200035eb 	.word	0x200035eb
    4b90:	20001c00 	.word	0x20001c00
    4b94:	200035dc 	.word	0x200035dc
    4b98:	200035d8 	.word	0x200035d8
    4b9c:	200035e7 	.word	0x200035e7
    4ba0:	200035da 	.word	0x200035da
    4ba4:	20001b00 	.word	0x20001b00
    4ba8:	20003578 	.word	0x20003578
    4bac:	20003588 	.word	0x20003588
    4bb0:	200035e3 	.word	0x200035e3
    4bb4:	20003574 	.word	0x20003574
    4bb8:	200035e4 	.word	0x200035e4
    4bbc:	000047e1 	.word	0x000047e1
    4bc0:	402e0000 	.word	0x402e0000
    4bc4:	200035d0 	.word	0x200035d0
    4bc8:	00004895 	.word	0x00004895

00004bcc <usb_serial_read>:
{
    4bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4bd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    4bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4ca4 <usb_serial_read+0xd8>
{
    4bdc:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4bde:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    4be2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    4be4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    4be8:	2900      	cmp	r1, #0
    4bea:	d04f      	beq.n	4c8c <usb_serial_read+0xc0>
    4bec:	4680      	mov	r8, r0
    4bee:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    4bf0:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    4bf2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4ca8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    4bf6:	4b26      	ldr	r3, [pc, #152]	; (4c90 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    4bf8:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4bfc:	4925      	ldr	r1, [pc, #148]	; (4c94 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    4bfe:	781b      	ldrb	r3, [r3, #0]
    4c00:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    4c02:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    4c06:	d03f      	beq.n	4c88 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    4c08:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    4c0a:	4b23      	ldr	r3, [pc, #140]	; (4c98 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c0c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    4c0e:	bf28      	it	cs
    4c10:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    4c12:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    4c14:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c18:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    4c1c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    4c1e:	4b1f      	ldr	r3, [pc, #124]	; (4c9c <usb_serial_read+0xd0>)
    4c20:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    4c24:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    4c28:	42aa      	cmp	r2, r5
    4c2a:	d21c      	bcs.n	4c66 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4c2c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    4c30:	4918      	ldr	r1, [pc, #96]	; (4c94 <usb_serial_read+0xc8>)
			rx_available -= len;
    4c32:	4c1b      	ldr	r4, [pc, #108]	; (4ca0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4c34:	4461      	add	r1, ip
    4c36:	9201      	str	r2, [sp, #4]
    4c38:	f7fe fc84 	bl	3544 <memcpy>
			rx_available -= len;
    4c3c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    4c3e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    4c42:	4658      	mov	r0, fp
			rx_index[i] += len;
    4c44:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    4c46:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    4c4a:	442a      	add	r2, r5
			rx_available -= len;
    4c4c:	4439      	add	r1, r7
			rx_index[i] += len;
    4c4e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    4c52:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4c54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4c5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    4c60:	b003      	add	sp, #12
    4c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c66:	462a      	mov	r2, r5
			count += avail;
    4c68:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c6a:	f7fe fc6b 	bl	3544 <memcpy>
			rx_available -= avail;
    4c6e:	490c      	ldr	r1, [pc, #48]	; (4ca0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    4c70:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    4c72:	4630      	mov	r0, r6
			rx_available -= avail;
    4c74:	680a      	ldr	r2, [r1, #0]
			p += avail;
    4c76:	44a8      	add	r8, r5
			rx_available -= avail;
    4c78:	1b52      	subs	r2, r2, r5
    4c7a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    4c7c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    4c80:	f7ff fd7e 	bl	4780 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    4c84:	45bb      	cmp	fp, r7
    4c86:	d8b6      	bhi.n	4bf6 <usb_serial_read+0x2a>
	return count;
    4c88:	4638      	mov	r0, r7
    4c8a:	e7e3      	b.n	4c54 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    4c8c:	4608      	mov	r0, r1
    4c8e:	e7e1      	b.n	4c54 <usb_serial_read+0x88>
    4c90:	200035e3 	.word	0x200035e3
    4c94:	20200080 	.word	0x20200080
    4c98:	20003598 	.word	0x20003598
    4c9c:	20003578 	.word	0x20003578
    4ca0:	20003574 	.word	0x20003574
    4ca4:	200035e4 	.word	0x200035e4
    4ca8:	20003588 	.word	0x20003588

00004cac <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    4cac:	4b0b      	ldr	r3, [pc, #44]	; (4cdc <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    4cae:	4a0c      	ldr	r2, [pc, #48]	; (4ce0 <usb_serial_peekchar+0x34>)
    4cb0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    4cb2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    4cb4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    4cb6:	428a      	cmp	r2, r1
    4cb8:	d00d      	beq.n	4cd6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4cba:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4cbc:	4809      	ldr	r0, [pc, #36]	; (4ce4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4cbe:	4a0a      	ldr	r2, [pc, #40]	; (4ce8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    4cc0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4cc2:	490a      	ldr	r1, [pc, #40]	; (4cec <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    4cc4:	bf28      	it	cs
    4cc6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4cc8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4cca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4cce:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    4cd2:	5c58      	ldrb	r0, [r3, r1]
    4cd4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    4cd6:	f04f 30ff 	mov.w	r0, #4294967295
}
    4cda:	4770      	bx	lr
    4cdc:	200035e3 	.word	0x200035e3
    4ce0:	200035e4 	.word	0x200035e4
    4ce4:	20003598 	.word	0x20003598
    4ce8:	20200080 	.word	0x20200080
    4cec:	20003588 	.word	0x20003588

00004cf0 <usb_serial_available>:
	uint32_t n = rx_available;
    4cf0:	4b04      	ldr	r3, [pc, #16]	; (4d04 <usb_serial_available+0x14>)
{
    4cf2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    4cf4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    4cf6:	b10c      	cbz	r4, 4cfc <usb_serial_available+0xc>
}
    4cf8:	4620      	mov	r0, r4
    4cfa:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    4cfc:	f000 f8e0 	bl	4ec0 <yield>
}
    4d00:	4620      	mov	r0, r4
    4d02:	bd10      	pop	{r4, pc}
    4d04:	20003574 	.word	0x20003574

00004d08 <usb_serial_flush_input>:
{
    4d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4d0c:	4e14      	ldr	r6, [pc, #80]	; (4d60 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    4d0e:	4d15      	ldr	r5, [pc, #84]	; (4d64 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    4d10:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    4d12:	782a      	ldrb	r2, [r5, #0]
    4d14:	4293      	cmp	r3, r2
    4d16:	d021      	beq.n	4d5c <usb_serial_flush_input+0x54>
    4d18:	b2dc      	uxtb	r4, r3
    4d1a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4d6c <usb_serial_flush_input+0x64>
    4d1e:	f8df b050 	ldr.w	fp, [pc, #80]	; 4d70 <usb_serial_flush_input+0x68>
    4d22:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4d74 <usb_serial_flush_input+0x6c>
    4d26:	4f10      	ldr	r7, [pc, #64]	; (4d68 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    4d28:	3401      	adds	r4, #1
    4d2a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    4d2c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    4d30:	d901      	bls.n	4d36 <usb_serial_flush_input+0x2e>
    4d32:	2400      	movs	r4, #0
    4d34:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4d36:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4d3a:	f8db 3000 	ldr.w	r3, [fp]
    4d3e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    4d42:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    4d46:	1a52      	subs	r2, r2, r1
    4d48:	1a9b      	subs	r3, r3, r2
    4d4a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4d4e:	f7ff fd17 	bl	4780 <rx_queue_transfer>
		rx_tail = tail;
    4d52:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    4d56:	782b      	ldrb	r3, [r5, #0]
    4d58:	42a3      	cmp	r3, r4
    4d5a:	d1e5      	bne.n	4d28 <usb_serial_flush_input+0x20>
}
    4d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d60:	200035e4 	.word	0x200035e4
    4d64:	200035e3 	.word	0x200035e3
    4d68:	20003588 	.word	0x20003588
    4d6c:	20003598 	.word	0x20003598
    4d70:	20003574 	.word	0x20003574
    4d74:	20003578 	.word	0x20003578

00004d78 <usb_serial_getchar>:
{
    4d78:	b500      	push	{lr}
    4d7a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    4d7c:	2101      	movs	r1, #1
    4d7e:	f10d 0007 	add.w	r0, sp, #7
    4d82:	f7ff ff23 	bl	4bcc <usb_serial_read>
    4d86:	b120      	cbz	r0, 4d92 <usb_serial_getchar+0x1a>
    4d88:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    4d8c:	b003      	add	sp, #12
    4d8e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    4d92:	f04f 30ff 	mov.w	r0, #4294967295
    4d96:	e7f9      	b.n	4d8c <usb_serial_getchar+0x14>

00004d98 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    4d98:	4b09      	ldr	r3, [pc, #36]	; (4dc0 <usb_serial_putchar+0x28>)
{
    4d9a:	b500      	push	{lr}
    4d9c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    4d9e:	781b      	ldrb	r3, [r3, #0]
{
    4da0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    4da4:	b13b      	cbz	r3, 4db6 <usb_serial_putchar+0x1e>
    4da6:	2101      	movs	r1, #1
    4da8:	f10d 0007 	add.w	r0, sp, #7
    4dac:	f7ff fdba 	bl	4924 <usb_serial_write.part.0>
}
    4db0:	b003      	add	sp, #12
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4
    4db6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4dba:	b003      	add	sp, #12
    4dbc:	f85d fb04 	ldr.w	pc, [sp], #4
    4dc0:	200035ea 	.word	0x200035ea

00004dc4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    4dc4:	4b04      	ldr	r3, [pc, #16]	; (4dd8 <usb_serial_write+0x14>)
    4dc6:	781b      	ldrb	r3, [r3, #0]
    4dc8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4dcc:	b10b      	cbz	r3, 4dd2 <usb_serial_write+0xe>
    4dce:	f7ff bda9 	b.w	4924 <usb_serial_write.part.0>
}
    4dd2:	4610      	mov	r0, r2
    4dd4:	4770      	bx	lr
    4dd6:	bf00      	nop
    4dd8:	200035ea 	.word	0x200035ea

00004ddc <usb_serial_write_buffer_free>:
{
    4ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    4de0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    4de2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4e28 <usb_serial_write_buffer_free+0x4c>
    4de6:	2301      	movs	r3, #1
    4de8:	4d0d      	ldr	r5, [pc, #52]	; (4e20 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    4dea:	4627      	mov	r7, r4
    4dec:	4e0d      	ldr	r6, [pc, #52]	; (4e24 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    4dee:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    4df2:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4df4:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    4df6:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    4df8:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    4dfa:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4dfe:	d005      	beq.n	4e0c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4e00:	f7ff fc86 	bl	4710 <usb_transfer_status>
    4e04:	0603      	lsls	r3, r0, #24
    4e06:	bf58      	it	pl
    4e08:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e0c:	2c04      	cmp	r4, #4
    4e0e:	d1f0      	bne.n	4df2 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    4e10:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4e14:	2300      	movs	r3, #0
}
    4e16:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    4e18:	f888 3000 	strb.w	r3, [r8]
}
    4e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e20:	20001c00 	.word	0x20001c00
    4e24:	200035e7 	.word	0x200035e7
    4e28:	200035e8 	.word	0x200035e8

00004e2c <usb_serial_flush_output>:
{
    4e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    4e30:	4b1d      	ldr	r3, [pc, #116]	; (4ea8 <usb_serial_flush_output+0x7c>)
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	b113      	cbz	r3, 4e3c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4e36:	4d1d      	ldr	r5, [pc, #116]	; (4eac <usb_serial_flush_output+0x80>)
    4e38:	882a      	ldrh	r2, [r5, #0]
    4e3a:	b90a      	cbnz	r2, 4e40 <usb_serial_flush_output+0x14>
}
    4e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    4e40:	4e1b      	ldr	r6, [pc, #108]	; (4eb0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    4e42:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    4e46:	491b      	ldr	r1, [pc, #108]	; (4eb4 <usb_serial_flush_output+0x88>)
    4e48:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e4a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e4c:	4c1a      	ldr	r4, [pc, #104]	; (4eb8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4e4e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    4e52:	4f1a      	ldr	r7, [pc, #104]	; (4ebc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e54:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    4e58:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e5a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    4e5c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e5e:	4621      	mov	r1, r4
    4e60:	2300      	movs	r3, #0
    4e62:	f7ff fc1b 	bl	469c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    4e66:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    4e6a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4e6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e72:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4e76:	3420      	adds	r4, #32
	} while (location < end_addr);
    4e78:	42a2      	cmp	r2, r4
    4e7a:	d8fa      	bhi.n	4e72 <usb_serial_flush_output+0x46>
	asm("dsb");
    4e7c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4e80:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4e84:	2004      	movs	r0, #4
    4e86:	4641      	mov	r1, r8
    4e88:	f7ff fc20 	bl	46cc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4e8c:	7833      	ldrb	r3, [r6, #0]
    4e8e:	3301      	adds	r3, #1
    4e90:	b2db      	uxtb	r3, r3
    4e92:	2b03      	cmp	r3, #3
    4e94:	bf88      	it	hi
    4e96:	2300      	movhi	r3, #0
    4e98:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4e9a:	2300      	movs	r3, #0
    4e9c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    4e9e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4ea2:	703b      	strb	r3, [r7, #0]
}
    4ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ea8:	200035ea 	.word	0x200035ea
    4eac:	200035da 	.word	0x200035da
    4eb0:	200035e7 	.word	0x200035e7
    4eb4:	20001c00 	.word	0x20001c00
    4eb8:	20201080 	.word	0x20201080
    4ebc:	200035e8 	.word	0x200035e8

00004ec0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4ec4:	4e32      	ldr	r6, [pc, #200]	; (4f90 <yield+0xd0>)
    4ec6:	7833      	ldrb	r3, [r6, #0]
    4ec8:	b163      	cbz	r3, 4ee4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    4eca:	4f32      	ldr	r7, [pc, #200]	; (4f94 <yield+0xd4>)
    4ecc:	783a      	ldrb	r2, [r7, #0]
    4ece:	b94a      	cbnz	r2, 4ee4 <yield+0x24>
	running = 1;
    4ed0:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4ed2:	07d9      	lsls	r1, r3, #31
	running = 1;
    4ed4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4ed6:	d444      	bmi.n	4f62 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    4ed8:	079a      	lsls	r2, r3, #30
    4eda:	d426      	bmi.n	4f2a <yield+0x6a>

	running = 0;
    4edc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4ede:	075b      	lsls	r3, r3, #29
	running = 0;
    4ee0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4ee2:	d401      	bmi.n	4ee8 <yield+0x28>
	
};
    4ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    4ee8:	4b2b      	ldr	r3, [pc, #172]	; (4f98 <yield+0xd8>)
    4eea:	681a      	ldr	r2, [r3, #0]
    4eec:	2a00      	cmp	r2, #0
    4eee:	d0f9      	beq.n	4ee4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4ef0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4ef4:	2a00      	cmp	r2, #0
    4ef6:	d1f5      	bne.n	4ee4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4ef8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    4efc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    4efe:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4f00:	2800      	cmp	r0, #0
    4f02:	d03b      	beq.n	4f7c <yield+0xbc>
		if (runningFromYield) {
    4f04:	4c25      	ldr	r4, [pc, #148]	; (4f9c <yield+0xdc>)
    4f06:	7821      	ldrb	r1, [r4, #0]
    4f08:	2900      	cmp	r1, #0
    4f0a:	d137      	bne.n	4f7c <yield+0xbc>
		runningFromYield = true;
    4f0c:	2201      	movs	r2, #1
    4f0e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    4f10:	6942      	ldr	r2, [r0, #20]
    4f12:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    4f14:	2a00      	cmp	r2, #0
    4f16:	d038      	beq.n	4f8a <yield+0xca>
			firstYield->_prev = nullptr;
    4f18:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    4f1a:	b905      	cbnz	r5, 4f1e <yield+0x5e>
    4f1c:	b662      	cpsie	i
		first->_triggered = false;
    4f1e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4f20:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    4f22:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4f24:	4798      	blx	r3
		runningFromYield = false;
    4f26:	7025      	strb	r5, [r4, #0]
    4f28:	e7dc      	b.n	4ee4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f2a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4fa8 <yield+0xe8>
    4f2e:	f898 2000 	ldrb.w	r2, [r8]
    4f32:	2a00      	cmp	r2, #0
    4f34:	d0d2      	beq.n	4edc <yield+0x1c>
    4f36:	2500      	movs	r5, #0
    4f38:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4fac <yield+0xec>
    4f3c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    4f3e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f42:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4f44:	6823      	ldr	r3, [r4, #0]
    4f46:	4620      	mov	r0, r4
    4f48:	691b      	ldr	r3, [r3, #16]
    4f4a:	4798      	blx	r3
    4f4c:	b110      	cbz	r0, 4f54 <yield+0x94>
    4f4e:	6963      	ldr	r3, [r4, #20]
    4f50:	689b      	ldr	r3, [r3, #8]
    4f52:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f54:	f898 2000 	ldrb.w	r2, [r8]
    4f58:	b2eb      	uxtb	r3, r5
    4f5a:	429a      	cmp	r2, r3
    4f5c:	d8ef      	bhi.n	4f3e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f5e:	7833      	ldrb	r3, [r6, #0]
    4f60:	e7bc      	b.n	4edc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    4f62:	f7ff fec5 	bl	4cf0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    4f66:	b968      	cbnz	r0, 4f84 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    4f68:	4b0d      	ldr	r3, [pc, #52]	; (4fa0 <yield+0xe0>)
    4f6a:	781b      	ldrb	r3, [r3, #0]
    4f6c:	b90b      	cbnz	r3, 4f72 <yield+0xb2>
    4f6e:	7833      	ldrb	r3, [r6, #0]
    4f70:	e7b2      	b.n	4ed8 <yield+0x18>
    4f72:	7833      	ldrb	r3, [r6, #0]
    4f74:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4f78:	7033      	strb	r3, [r6, #0]
    4f7a:	e7ad      	b.n	4ed8 <yield+0x18>
		if (doit) __enable_irq();
    4f7c:	2d00      	cmp	r5, #0
    4f7e:	d1b1      	bne.n	4ee4 <yield+0x24>
    4f80:	b662      	cpsie	i
    4f82:	e7af      	b.n	4ee4 <yield+0x24>
		if (Serial.available()) serialEvent();
    4f84:	f000 f826 	bl	4fd4 <serialEvent()>
    4f88:	e7ee      	b.n	4f68 <yield+0xa8>
			lastYield = nullptr;
    4f8a:	4b06      	ldr	r3, [pc, #24]	; (4fa4 <yield+0xe4>)
    4f8c:	601a      	str	r2, [r3, #0]
    4f8e:	e7c4      	b.n	4f1a <yield+0x5a>
    4f90:	200017b0 	.word	0x200017b0
    4f94:	200035e0 	.word	0x200035e0
    4f98:	20002790 	.word	0x20002790
    4f9c:	200035de 	.word	0x200035de
    4fa0:	600020ea 	.word	0x600020ea
    4fa4:	2000279c 	.word	0x2000279c
    4fa8:	200035df 	.word	0x200035df
    4fac:	200027a0 	.word	0x200027a0

00004fb0 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    4fb0:	4a07      	ldr	r2, [pc, #28]	; (4fd0 <rtc_get+0x20>)
    4fb2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    4fb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    4fb6:	4619      	mov	r1, r3
    4fb8:	4684      	mov	ip, r0
    4fba:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    4fbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    4fbe:	4299      	cmp	r1, r3
    4fc0:	d1f9      	bne.n	4fb6 <rtc_get+0x6>
    4fc2:	4584      	cmp	ip, r0
    4fc4:	d1f7      	bne.n	4fb6 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    4fc6:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    4fc8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    4fcc:	4770      	bx	lr
    4fce:	bf00      	nop
    4fd0:	400d4000 	.word	0x400d4000

00004fd4 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    4fd4:	4770      	bx	lr
    4fd6:	bf00      	nop

00004fd8 <sm_align_pool>:
{
    4fd8:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    4fda:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    4fde:	b15b      	cbz	r3, 4ff8 <sm_align_pool+0x20>
    4fe0:	b1ba      	cbz	r2, 5012 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    4fe2:	4b0f      	ldr	r3, [pc, #60]	; (5020 <sm_align_pool+0x48>)
    4fe4:	fba3 1302 	umull	r1, r3, r3, r2
    4fe8:	08db      	lsrs	r3, r3, #3
    4fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4fee:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    4ff2:	d10a      	bne.n	500a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    4ff4:	2001      	movs	r0, #1
}
    4ff6:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    4ff8:	4b09      	ldr	r3, [pc, #36]	; (5020 <sm_align_pool+0x48>)
    4ffa:	fba3 1302 	umull	r1, r3, r3, r2
    4ffe:	08db      	lsrs	r3, r3, #3
    5000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    5004:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5008:	d001      	beq.n	500e <sm_align_pool+0x36>
    500a:	1ad2      	subs	r2, r2, r3
    500c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    500e:	2af0      	cmp	r2, #240	; 0xf0
    5010:	d8f0      	bhi.n	4ff4 <sm_align_pool+0x1c>
		errno = ENOSPC;
    5012:	f001 fb51 	bl	66b8 <__errno>
    5016:	221c      	movs	r2, #28
    5018:	4603      	mov	r3, r0
    501a:	2000      	movs	r0, #0
    501c:	601a      	str	r2, [r3, #0]
}
    501e:	bd08      	pop	{r3, pc}
    5020:	aaaaaaab 	.word	0xaaaaaaab

00005024 <sm_set_pool>:
{
    5024:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    5026:	4604      	mov	r4, r0
    5028:	b338      	cbz	r0, 507a <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    502a:	b119      	cbz	r1, 5034 <sm_set_pool+0x10>
    502c:	fab2 f682 	clz	r6, r2
    5030:	0976      	lsrs	r6, r6, #5
    5032:	b9a2      	cbnz	r2, 505e <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    5034:	6820      	ldr	r0, [r4, #0]
    5036:	b300      	cbz	r0, 507a <sm_set_pool+0x56>
    5038:	6862      	ldr	r2, [r4, #4]
    503a:	b1f2      	cbz	r2, 507a <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    503c:	4b18      	ldr	r3, [pc, #96]	; (50a0 <sm_set_pool+0x7c>)
    503e:	4919      	ldr	r1, [pc, #100]	; (50a4 <sm_set_pool+0x80>)
    5040:	fb02 f303 	mul.w	r3, r2, r3
    5044:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    5048:	d317      	bcc.n	507a <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    504a:	68a3      	ldr	r3, [r4, #8]
    504c:	b9e3      	cbnz	r3, 5088 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    504e:	2200      	movs	r2, #0
			return 1;
    5050:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    5052:	6022      	str	r2, [r4, #0]
    5054:	6062      	str	r2, [r4, #4]
    5056:	60a2      	str	r2, [r4, #8]
    5058:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    505a:	4618      	mov	r0, r3
    505c:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    505e:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    5060:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    5062:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    5066:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    5068:	f7ff ffb6 	bl	4fd8 <sm_align_pool>
    506c:	4603      	mov	r3, r0
    506e:	2800      	cmp	r0, #0
    5070:	d0f3      	beq.n	505a <sm_set_pool+0x36>
	if (do_zero) {
    5072:	b96d      	cbnz	r5, 5090 <sm_set_pool+0x6c>
	return 1;
    5074:	2301      	movs	r3, #1
}
    5076:	4618      	mov	r0, r3
    5078:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    507a:	f001 fb1d 	bl	66b8 <__errno>
    507e:	2216      	movs	r2, #22
		return 0;
    5080:	2300      	movs	r3, #0
		errno = EINVAL;
    5082:	6002      	str	r2, [r0, #0]
}
    5084:	4618      	mov	r0, r3
    5086:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5088:	2100      	movs	r1, #0
    508a:	f000 ffab 	bl	5fe4 <memset>
    508e:	e7de      	b.n	504e <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    5090:	6862      	ldr	r2, [r4, #4]
    5092:	4631      	mov	r1, r6
    5094:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    5096:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    5098:	f000 ffa4 	bl	5fe4 <memset>
	return 1;
    509c:	2301      	movs	r3, #1
    509e:	e7dc      	b.n	505a <sm_set_pool+0x36>
    50a0:	aaaaaaab 	.word	0xaaaaaaab
    50a4:	15555555 	.word	0x15555555

000050a8 <__aeabi_atexit>:
    50a8:	4603      	mov	r3, r0
    50aa:	4608      	mov	r0, r1
    50ac:	4619      	mov	r1, r3
    50ae:	f000 bddd 	b.w	5c6c <__cxa_atexit>
    50b2:	bf00      	nop

000050b4 <atol>:
    50b4:	220a      	movs	r2, #10
    50b6:	2100      	movs	r1, #0
    50b8:	f000 bd7c 	b.w	5bb4 <strtol>

000050bc <itoa>:
    50bc:	1e93      	subs	r3, r2, #2
    50be:	2b22      	cmp	r3, #34	; 0x22
    50c0:	b510      	push	{r4, lr}
    50c2:	460c      	mov	r4, r1
    50c4:	d80c      	bhi.n	50e0 <itoa+0x24>
    50c6:	2a0a      	cmp	r2, #10
    50c8:	d003      	beq.n	50d2 <itoa+0x16>
    50ca:	f000 fd81 	bl	5bd0 <__utoa>
    50ce:	4620      	mov	r0, r4
    50d0:	bd10      	pop	{r4, pc}
    50d2:	2800      	cmp	r0, #0
    50d4:	daf9      	bge.n	50ca <itoa+0xe>
    50d6:	232d      	movs	r3, #45	; 0x2d
    50d8:	f801 3b01 	strb.w	r3, [r1], #1
    50dc:	4240      	negs	r0, r0
    50de:	e7f4      	b.n	50ca <itoa+0xe>
    50e0:	2300      	movs	r3, #0
    50e2:	700b      	strb	r3, [r1, #0]
    50e4:	4618      	mov	r0, r3
    50e6:	bd10      	pop	{r4, pc}

000050e8 <malloc>:
    50e8:	4b02      	ldr	r3, [pc, #8]	; (50f4 <malloc+0xc>)
    50ea:	4601      	mov	r1, r0
    50ec:	6818      	ldr	r0, [r3, #0]
    50ee:	f000 b80b 	b.w	5108 <_malloc_r>
    50f2:	bf00      	nop
    50f4:	20001740 	.word	0x20001740

000050f8 <free>:
    50f8:	4b02      	ldr	r3, [pc, #8]	; (5104 <free+0xc>)
    50fa:	4601      	mov	r1, r0
    50fc:	6818      	ldr	r0, [r3, #0]
    50fe:	f001 bde1 	b.w	6cc4 <_free_r>
    5102:	bf00      	nop
    5104:	20001740 	.word	0x20001740

00005108 <_malloc_r>:
    5108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    510c:	f101 060b 	add.w	r6, r1, #11
    5110:	2e16      	cmp	r6, #22
    5112:	b083      	sub	sp, #12
    5114:	4604      	mov	r4, r0
    5116:	d824      	bhi.n	5162 <_malloc_r+0x5a>
    5118:	2910      	cmp	r1, #16
    511a:	f200 80ba 	bhi.w	5292 <_malloc_r+0x18a>
    511e:	f000 faa3 	bl	5668 <__malloc_lock>
    5122:	2610      	movs	r6, #16
    5124:	2218      	movs	r2, #24
    5126:	2002      	movs	r0, #2
    5128:	4fb5      	ldr	r7, [pc, #724]	; (5400 <_malloc_r+0x2f8>)
    512a:	443a      	add	r2, r7
    512c:	f1a2 0108 	sub.w	r1, r2, #8
    5130:	6853      	ldr	r3, [r2, #4]
    5132:	428b      	cmp	r3, r1
    5134:	f000 80ba 	beq.w	52ac <_malloc_r+0x1a4>
    5138:	685a      	ldr	r2, [r3, #4]
    513a:	68d9      	ldr	r1, [r3, #12]
    513c:	f022 0203 	bic.w	r2, r2, #3
    5140:	441a      	add	r2, r3
    5142:	689d      	ldr	r5, [r3, #8]
    5144:	60e9      	str	r1, [r5, #12]
    5146:	608d      	str	r5, [r1, #8]
    5148:	6851      	ldr	r1, [r2, #4]
    514a:	f041 0101 	orr.w	r1, r1, #1
    514e:	4620      	mov	r0, r4
    5150:	6051      	str	r1, [r2, #4]
    5152:	f103 0508 	add.w	r5, r3, #8
    5156:	f000 fa8d 	bl	5674 <__malloc_unlock>
    515a:	4628      	mov	r0, r5
    515c:	b003      	add	sp, #12
    515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5162:	f036 0607 	bics.w	r6, r6, #7
    5166:	f100 8094 	bmi.w	5292 <_malloc_r+0x18a>
    516a:	42b1      	cmp	r1, r6
    516c:	f200 8091 	bhi.w	5292 <_malloc_r+0x18a>
    5170:	f000 fa7a 	bl	5668 <__malloc_lock>
    5174:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    5178:	f0c0 819a 	bcc.w	54b0 <_malloc_r+0x3a8>
    517c:	0a73      	lsrs	r3, r6, #9
    517e:	f000 808f 	beq.w	52a0 <_malloc_r+0x198>
    5182:	2b04      	cmp	r3, #4
    5184:	f200 816f 	bhi.w	5466 <_malloc_r+0x35e>
    5188:	09b3      	lsrs	r3, r6, #6
    518a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    518e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    5192:	00c3      	lsls	r3, r0, #3
    5194:	4f9a      	ldr	r7, [pc, #616]	; (5400 <_malloc_r+0x2f8>)
    5196:	443b      	add	r3, r7
    5198:	f1a3 0508 	sub.w	r5, r3, #8
    519c:	685b      	ldr	r3, [r3, #4]
    519e:	429d      	cmp	r5, r3
    51a0:	d106      	bne.n	51b0 <_malloc_r+0xa8>
    51a2:	e00c      	b.n	51be <_malloc_r+0xb6>
    51a4:	2900      	cmp	r1, #0
    51a6:	f280 8127 	bge.w	53f8 <_malloc_r+0x2f0>
    51aa:	68db      	ldr	r3, [r3, #12]
    51ac:	429d      	cmp	r5, r3
    51ae:	d006      	beq.n	51be <_malloc_r+0xb6>
    51b0:	685a      	ldr	r2, [r3, #4]
    51b2:	f022 0203 	bic.w	r2, r2, #3
    51b6:	1b91      	subs	r1, r2, r6
    51b8:	290f      	cmp	r1, #15
    51ba:	ddf3      	ble.n	51a4 <_malloc_r+0x9c>
    51bc:	4660      	mov	r0, ip
    51be:	693d      	ldr	r5, [r7, #16]
    51c0:	f8df c250 	ldr.w	ip, [pc, #592]	; 5414 <_malloc_r+0x30c>
    51c4:	4565      	cmp	r5, ip
    51c6:	d07c      	beq.n	52c2 <_malloc_r+0x1ba>
    51c8:	686a      	ldr	r2, [r5, #4]
    51ca:	f022 0203 	bic.w	r2, r2, #3
    51ce:	1b93      	subs	r3, r2, r6
    51d0:	2b0f      	cmp	r3, #15
    51d2:	f300 817b 	bgt.w	54cc <_malloc_r+0x3c4>
    51d6:	2b00      	cmp	r3, #0
    51d8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    51dc:	f280 816c 	bge.w	54b8 <_malloc_r+0x3b0>
    51e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    51e4:	f080 811a 	bcs.w	541c <_malloc_r+0x314>
    51e8:	08d3      	lsrs	r3, r2, #3
    51ea:	6879      	ldr	r1, [r7, #4]
    51ec:	3301      	adds	r3, #1
    51ee:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    51f2:	2201      	movs	r2, #1
    51f4:	fa02 f20e 	lsl.w	r2, r2, lr
    51f8:	430a      	orrs	r2, r1
    51fa:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    51fe:	f8c5 e008 	str.w	lr, [r5, #8]
    5202:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    5206:	3908      	subs	r1, #8
    5208:	60e9      	str	r1, [r5, #12]
    520a:	607a      	str	r2, [r7, #4]
    520c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5210:	f8ce 500c 	str.w	r5, [lr, #12]
    5214:	1083      	asrs	r3, r0, #2
    5216:	2101      	movs	r1, #1
    5218:	4099      	lsls	r1, r3
    521a:	4291      	cmp	r1, r2
    521c:	d857      	bhi.n	52ce <_malloc_r+0x1c6>
    521e:	4211      	tst	r1, r2
    5220:	d106      	bne.n	5230 <_malloc_r+0x128>
    5222:	f020 0003 	bic.w	r0, r0, #3
    5226:	0049      	lsls	r1, r1, #1
    5228:	4211      	tst	r1, r2
    522a:	f100 0004 	add.w	r0, r0, #4
    522e:	d0fa      	beq.n	5226 <_malloc_r+0x11e>
    5230:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    5234:	464d      	mov	r5, r9
    5236:	4686      	mov	lr, r0
    5238:	f8d5 800c 	ldr.w	r8, [r5, #12]
    523c:	4545      	cmp	r5, r8
    523e:	d108      	bne.n	5252 <_malloc_r+0x14a>
    5240:	e11d      	b.n	547e <_malloc_r+0x376>
    5242:	2b00      	cmp	r3, #0
    5244:	f280 8124 	bge.w	5490 <_malloc_r+0x388>
    5248:	f8d8 800c 	ldr.w	r8, [r8, #12]
    524c:	4545      	cmp	r5, r8
    524e:	f000 8116 	beq.w	547e <_malloc_r+0x376>
    5252:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5256:	f022 0203 	bic.w	r2, r2, #3
    525a:	1b93      	subs	r3, r2, r6
    525c:	2b0f      	cmp	r3, #15
    525e:	ddf0      	ble.n	5242 <_malloc_r+0x13a>
    5260:	4620      	mov	r0, r4
    5262:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    5266:	eb08 0106 	add.w	r1, r8, r6
    526a:	f046 0601 	orr.w	r6, r6, #1
    526e:	f8c8 6004 	str.w	r6, [r8, #4]
    5272:	60ec      	str	r4, [r5, #12]
    5274:	60a5      	str	r5, [r4, #8]
    5276:	f043 0401 	orr.w	r4, r3, #1
    527a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    527e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5282:	604c      	str	r4, [r1, #4]
    5284:	f848 3002 	str.w	r3, [r8, r2]
    5288:	f000 f9f4 	bl	5674 <__malloc_unlock>
    528c:	f108 0508 	add.w	r5, r8, #8
    5290:	e002      	b.n	5298 <_malloc_r+0x190>
    5292:	230c      	movs	r3, #12
    5294:	6023      	str	r3, [r4, #0]
    5296:	2500      	movs	r5, #0
    5298:	4628      	mov	r0, r5
    529a:	b003      	add	sp, #12
    529c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    52a4:	2040      	movs	r0, #64	; 0x40
    52a6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    52aa:	e773      	b.n	5194 <_malloc_r+0x8c>
    52ac:	68d3      	ldr	r3, [r2, #12]
    52ae:	429a      	cmp	r2, r3
    52b0:	bf08      	it	eq
    52b2:	3002      	addeq	r0, #2
    52b4:	f47f af40 	bne.w	5138 <_malloc_r+0x30>
    52b8:	693d      	ldr	r5, [r7, #16]
    52ba:	f8df c158 	ldr.w	ip, [pc, #344]	; 5414 <_malloc_r+0x30c>
    52be:	4565      	cmp	r5, ip
    52c0:	d182      	bne.n	51c8 <_malloc_r+0xc0>
    52c2:	687a      	ldr	r2, [r7, #4]
    52c4:	1083      	asrs	r3, r0, #2
    52c6:	2101      	movs	r1, #1
    52c8:	4099      	lsls	r1, r3
    52ca:	4291      	cmp	r1, r2
    52cc:	d9a7      	bls.n	521e <_malloc_r+0x116>
    52ce:	68bd      	ldr	r5, [r7, #8]
    52d0:	686b      	ldr	r3, [r5, #4]
    52d2:	f023 0903 	bic.w	r9, r3, #3
    52d6:	454e      	cmp	r6, r9
    52d8:	d803      	bhi.n	52e2 <_malloc_r+0x1da>
    52da:	eba9 0306 	sub.w	r3, r9, r6
    52de:	2b0f      	cmp	r3, #15
    52e0:	dc7a      	bgt.n	53d8 <_malloc_r+0x2d0>
    52e2:	f8df b134 	ldr.w	fp, [pc, #308]	; 5418 <_malloc_r+0x310>
    52e6:	4b47      	ldr	r3, [pc, #284]	; (5404 <_malloc_r+0x2fc>)
    52e8:	f8db 2000 	ldr.w	r2, [fp]
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	3201      	adds	r2, #1
    52f0:	4433      	add	r3, r6
    52f2:	eb05 0a09 	add.w	sl, r5, r9
    52f6:	f000 8133 	beq.w	5560 <_malloc_r+0x458>
    52fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    52fe:	330f      	adds	r3, #15
    5300:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    5304:	f028 080f 	bic.w	r8, r8, #15
    5308:	4641      	mov	r1, r8
    530a:	4620      	mov	r0, r4
    530c:	f001 f9ac 	bl	6668 <_sbrk_r>
    5310:	1c41      	adds	r1, r0, #1
    5312:	4602      	mov	r2, r0
    5314:	f000 80f3 	beq.w	54fe <_malloc_r+0x3f6>
    5318:	4582      	cmp	sl, r0
    531a:	f200 80ee 	bhi.w	54fa <_malloc_r+0x3f2>
    531e:	4b3a      	ldr	r3, [pc, #232]	; (5408 <_malloc_r+0x300>)
    5320:	6819      	ldr	r1, [r3, #0]
    5322:	4441      	add	r1, r8
    5324:	6019      	str	r1, [r3, #0]
    5326:	4608      	mov	r0, r1
    5328:	f000 814e 	beq.w	55c8 <_malloc_r+0x4c0>
    532c:	f8db 1000 	ldr.w	r1, [fp]
    5330:	9301      	str	r3, [sp, #4]
    5332:	3101      	adds	r1, #1
    5334:	bf1b      	ittet	ne
    5336:	eba2 010a 	subne.w	r1, r2, sl
    533a:	1809      	addne	r1, r1, r0
    533c:	f8cb 2000 	streq.w	r2, [fp]
    5340:	6019      	strne	r1, [r3, #0]
    5342:	f012 0b07 	ands.w	fp, r2, #7
    5346:	f000 8117 	beq.w	5578 <_malloc_r+0x470>
    534a:	f1cb 0108 	rsb	r1, fp, #8
    534e:	440a      	add	r2, r1
    5350:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    5354:	4490      	add	r8, r2
    5356:	3108      	adds	r1, #8
    5358:	eba1 0108 	sub.w	r1, r1, r8
    535c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5360:	4651      	mov	r1, sl
    5362:	4620      	mov	r0, r4
    5364:	9200      	str	r2, [sp, #0]
    5366:	f001 f97f 	bl	6668 <_sbrk_r>
    536a:	1c42      	adds	r2, r0, #1
    536c:	e9dd 2300 	ldrd	r2, r3, [sp]
    5370:	f000 814f 	beq.w	5612 <_malloc_r+0x50a>
    5374:	1a80      	subs	r0, r0, r2
    5376:	eb00 080a 	add.w	r8, r0, sl
    537a:	6819      	ldr	r1, [r3, #0]
    537c:	60ba      	str	r2, [r7, #8]
    537e:	f048 0001 	orr.w	r0, r8, #1
    5382:	4451      	add	r1, sl
    5384:	42bd      	cmp	r5, r7
    5386:	6050      	str	r0, [r2, #4]
    5388:	6019      	str	r1, [r3, #0]
    538a:	f000 8129 	beq.w	55e0 <_malloc_r+0x4d8>
    538e:	f1b9 0f0f 	cmp.w	r9, #15
    5392:	f240 8127 	bls.w	55e4 <_malloc_r+0x4dc>
    5396:	6868      	ldr	r0, [r5, #4]
    5398:	f1a9 0c0c 	sub.w	ip, r9, #12
    539c:	f02c 0c07 	bic.w	ip, ip, #7
    53a0:	f000 0001 	and.w	r0, r0, #1
    53a4:	ea40 000c 	orr.w	r0, r0, ip
    53a8:	6068      	str	r0, [r5, #4]
    53aa:	f04f 0e05 	mov.w	lr, #5
    53ae:	eb05 000c 	add.w	r0, r5, ip
    53b2:	f1bc 0f0f 	cmp.w	ip, #15
    53b6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    53ba:	f200 8132 	bhi.w	5622 <_malloc_r+0x51a>
    53be:	6850      	ldr	r0, [r2, #4]
    53c0:	4615      	mov	r5, r2
    53c2:	4b12      	ldr	r3, [pc, #72]	; (540c <_malloc_r+0x304>)
    53c4:	681a      	ldr	r2, [r3, #0]
    53c6:	428a      	cmp	r2, r1
    53c8:	bf38      	it	cc
    53ca:	6019      	strcc	r1, [r3, #0]
    53cc:	4b10      	ldr	r3, [pc, #64]	; (5410 <_malloc_r+0x308>)
    53ce:	681a      	ldr	r2, [r3, #0]
    53d0:	428a      	cmp	r2, r1
    53d2:	bf38      	it	cc
    53d4:	6019      	strcc	r1, [r3, #0]
    53d6:	e094      	b.n	5502 <_malloc_r+0x3fa>
    53d8:	19aa      	adds	r2, r5, r6
    53da:	f043 0301 	orr.w	r3, r3, #1
    53de:	f046 0601 	orr.w	r6, r6, #1
    53e2:	606e      	str	r6, [r5, #4]
    53e4:	4620      	mov	r0, r4
    53e6:	60ba      	str	r2, [r7, #8]
    53e8:	6053      	str	r3, [r2, #4]
    53ea:	f000 f943 	bl	5674 <__malloc_unlock>
    53ee:	3508      	adds	r5, #8
    53f0:	4628      	mov	r0, r5
    53f2:	b003      	add	sp, #12
    53f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53f8:	68d9      	ldr	r1, [r3, #12]
    53fa:	441a      	add	r2, r3
    53fc:	e6a1      	b.n	5142 <_malloc_r+0x3a>
    53fe:	bf00      	nop
    5400:	20001324 	.word	0x20001324
    5404:	20002990 	.word	0x20002990
    5408:	20002960 	.word	0x20002960
    540c:	20002988 	.word	0x20002988
    5410:	2000298c 	.word	0x2000298c
    5414:	2000132c 	.word	0x2000132c
    5418:	2000172c 	.word	0x2000172c
    541c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5420:	ea4f 2352 	mov.w	r3, r2, lsr #9
    5424:	d363      	bcc.n	54ee <_malloc_r+0x3e6>
    5426:	2b14      	cmp	r3, #20
    5428:	f200 80b7 	bhi.w	559a <_malloc_r+0x492>
    542c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5430:	00c9      	lsls	r1, r1, #3
    5432:	335b      	adds	r3, #91	; 0x5b
    5434:	eb07 0e01 	add.w	lr, r7, r1
    5438:	5879      	ldr	r1, [r7, r1]
    543a:	f1ae 0e08 	sub.w	lr, lr, #8
    543e:	458e      	cmp	lr, r1
    5440:	f000 8091 	beq.w	5566 <_malloc_r+0x45e>
    5444:	684b      	ldr	r3, [r1, #4]
    5446:	f023 0303 	bic.w	r3, r3, #3
    544a:	4293      	cmp	r3, r2
    544c:	d902      	bls.n	5454 <_malloc_r+0x34c>
    544e:	6889      	ldr	r1, [r1, #8]
    5450:	458e      	cmp	lr, r1
    5452:	d1f7      	bne.n	5444 <_malloc_r+0x33c>
    5454:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5458:	687a      	ldr	r2, [r7, #4]
    545a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    545e:	f8ce 5008 	str.w	r5, [lr, #8]
    5462:	60cd      	str	r5, [r1, #12]
    5464:	e6d6      	b.n	5214 <_malloc_r+0x10c>
    5466:	2b14      	cmp	r3, #20
    5468:	d959      	bls.n	551e <_malloc_r+0x416>
    546a:	2b54      	cmp	r3, #84	; 0x54
    546c:	f200 809d 	bhi.w	55aa <_malloc_r+0x4a2>
    5470:	0b33      	lsrs	r3, r6, #12
    5472:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5476:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    547a:	00c3      	lsls	r3, r0, #3
    547c:	e68a      	b.n	5194 <_malloc_r+0x8c>
    547e:	f10e 0e01 	add.w	lr, lr, #1
    5482:	f01e 0f03 	tst.w	lr, #3
    5486:	f105 0508 	add.w	r5, r5, #8
    548a:	f47f aed5 	bne.w	5238 <_malloc_r+0x130>
    548e:	e051      	b.n	5534 <_malloc_r+0x42c>
    5490:	4442      	add	r2, r8
    5492:	4645      	mov	r5, r8
    5494:	6853      	ldr	r3, [r2, #4]
    5496:	f8d8 100c 	ldr.w	r1, [r8, #12]
    549a:	f043 0301 	orr.w	r3, r3, #1
    549e:	6053      	str	r3, [r2, #4]
    54a0:	f855 3f08 	ldr.w	r3, [r5, #8]!
    54a4:	4620      	mov	r0, r4
    54a6:	60d9      	str	r1, [r3, #12]
    54a8:	608b      	str	r3, [r1, #8]
    54aa:	f000 f8e3 	bl	5674 <__malloc_unlock>
    54ae:	e6f3      	b.n	5298 <_malloc_r+0x190>
    54b0:	08f0      	lsrs	r0, r6, #3
    54b2:	f106 0208 	add.w	r2, r6, #8
    54b6:	e637      	b.n	5128 <_malloc_r+0x20>
    54b8:	442a      	add	r2, r5
    54ba:	4620      	mov	r0, r4
    54bc:	6853      	ldr	r3, [r2, #4]
    54be:	f043 0301 	orr.w	r3, r3, #1
    54c2:	6053      	str	r3, [r2, #4]
    54c4:	3508      	adds	r5, #8
    54c6:	f000 f8d5 	bl	5674 <__malloc_unlock>
    54ca:	e6e5      	b.n	5298 <_malloc_r+0x190>
    54cc:	19a9      	adds	r1, r5, r6
    54ce:	4620      	mov	r0, r4
    54d0:	f046 0601 	orr.w	r6, r6, #1
    54d4:	f043 0401 	orr.w	r4, r3, #1
    54d8:	606e      	str	r6, [r5, #4]
    54da:	e9c7 1104 	strd	r1, r1, [r7, #16]
    54de:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    54e2:	604c      	str	r4, [r1, #4]
    54e4:	50ab      	str	r3, [r5, r2]
    54e6:	f000 f8c5 	bl	5674 <__malloc_unlock>
    54ea:	3508      	adds	r5, #8
    54ec:	e6d4      	b.n	5298 <_malloc_r+0x190>
    54ee:	0993      	lsrs	r3, r2, #6
    54f0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    54f4:	00c9      	lsls	r1, r1, #3
    54f6:	3338      	adds	r3, #56	; 0x38
    54f8:	e79c      	b.n	5434 <_malloc_r+0x32c>
    54fa:	42bd      	cmp	r5, r7
    54fc:	d05f      	beq.n	55be <_malloc_r+0x4b6>
    54fe:	68bd      	ldr	r5, [r7, #8]
    5500:	6868      	ldr	r0, [r5, #4]
    5502:	f020 0803 	bic.w	r8, r0, #3
    5506:	4546      	cmp	r6, r8
    5508:	eba8 0306 	sub.w	r3, r8, r6
    550c:	d802      	bhi.n	5514 <_malloc_r+0x40c>
    550e:	2b0f      	cmp	r3, #15
    5510:	f73f af62 	bgt.w	53d8 <_malloc_r+0x2d0>
    5514:	4620      	mov	r0, r4
    5516:	f000 f8ad 	bl	5674 <__malloc_unlock>
    551a:	2500      	movs	r5, #0
    551c:	e6bc      	b.n	5298 <_malloc_r+0x190>
    551e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5522:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    5526:	00c3      	lsls	r3, r0, #3
    5528:	e634      	b.n	5194 <_malloc_r+0x8c>
    552a:	f859 3908 	ldr.w	r3, [r9], #-8
    552e:	454b      	cmp	r3, r9
    5530:	f040 8096 	bne.w	5660 <_malloc_r+0x558>
    5534:	f010 0f03 	tst.w	r0, #3
    5538:	f100 30ff 	add.w	r0, r0, #4294967295
    553c:	d1f5      	bne.n	552a <_malloc_r+0x422>
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	ea23 0301 	bic.w	r3, r3, r1
    5544:	607b      	str	r3, [r7, #4]
    5546:	0049      	lsls	r1, r1, #1
    5548:	4299      	cmp	r1, r3
    554a:	f63f aec0 	bhi.w	52ce <_malloc_r+0x1c6>
    554e:	b919      	cbnz	r1, 5558 <_malloc_r+0x450>
    5550:	e6bd      	b.n	52ce <_malloc_r+0x1c6>
    5552:	0049      	lsls	r1, r1, #1
    5554:	f10e 0e04 	add.w	lr, lr, #4
    5558:	4219      	tst	r1, r3
    555a:	d0fa      	beq.n	5552 <_malloc_r+0x44a>
    555c:	4670      	mov	r0, lr
    555e:	e667      	b.n	5230 <_malloc_r+0x128>
    5560:	f103 0810 	add.w	r8, r3, #16
    5564:	e6d0      	b.n	5308 <_malloc_r+0x200>
    5566:	109a      	asrs	r2, r3, #2
    5568:	f04f 0801 	mov.w	r8, #1
    556c:	687b      	ldr	r3, [r7, #4]
    556e:	fa08 f202 	lsl.w	r2, r8, r2
    5572:	431a      	orrs	r2, r3
    5574:	607a      	str	r2, [r7, #4]
    5576:	e770      	b.n	545a <_malloc_r+0x352>
    5578:	eb02 0108 	add.w	r1, r2, r8
    557c:	4249      	negs	r1, r1
    557e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5582:	4651      	mov	r1, sl
    5584:	4620      	mov	r0, r4
    5586:	9200      	str	r2, [sp, #0]
    5588:	f001 f86e 	bl	6668 <_sbrk_r>
    558c:	1c43      	adds	r3, r0, #1
    558e:	e9dd 2300 	ldrd	r2, r3, [sp]
    5592:	f47f aeef 	bne.w	5374 <_malloc_r+0x26c>
    5596:	46da      	mov	sl, fp
    5598:	e6ef      	b.n	537a <_malloc_r+0x272>
    559a:	2b54      	cmp	r3, #84	; 0x54
    559c:	d825      	bhi.n	55ea <_malloc_r+0x4e2>
    559e:	0b13      	lsrs	r3, r2, #12
    55a0:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    55a4:	00c9      	lsls	r1, r1, #3
    55a6:	336e      	adds	r3, #110	; 0x6e
    55a8:	e744      	b.n	5434 <_malloc_r+0x32c>
    55aa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    55ae:	d825      	bhi.n	55fc <_malloc_r+0x4f4>
    55b0:	0bf3      	lsrs	r3, r6, #15
    55b2:	f103 0078 	add.w	r0, r3, #120	; 0x78
    55b6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    55ba:	00c3      	lsls	r3, r0, #3
    55bc:	e5ea      	b.n	5194 <_malloc_r+0x8c>
    55be:	4b29      	ldr	r3, [pc, #164]	; (5664 <_malloc_r+0x55c>)
    55c0:	6818      	ldr	r0, [r3, #0]
    55c2:	4440      	add	r0, r8
    55c4:	6018      	str	r0, [r3, #0]
    55c6:	e6b1      	b.n	532c <_malloc_r+0x224>
    55c8:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    55cc:	f1bc 0f00 	cmp.w	ip, #0
    55d0:	f47f aeac 	bne.w	532c <_malloc_r+0x224>
    55d4:	68bd      	ldr	r5, [r7, #8]
    55d6:	44c8      	add	r8, r9
    55d8:	f048 0001 	orr.w	r0, r8, #1
    55dc:	6068      	str	r0, [r5, #4]
    55de:	e6f0      	b.n	53c2 <_malloc_r+0x2ba>
    55e0:	4615      	mov	r5, r2
    55e2:	e6ee      	b.n	53c2 <_malloc_r+0x2ba>
    55e4:	2301      	movs	r3, #1
    55e6:	6053      	str	r3, [r2, #4]
    55e8:	e794      	b.n	5514 <_malloc_r+0x40c>
    55ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    55ee:	d823      	bhi.n	5638 <_malloc_r+0x530>
    55f0:	0bd3      	lsrs	r3, r2, #15
    55f2:	f103 0178 	add.w	r1, r3, #120	; 0x78
    55f6:	00c9      	lsls	r1, r1, #3
    55f8:	3377      	adds	r3, #119	; 0x77
    55fa:	e71b      	b.n	5434 <_malloc_r+0x32c>
    55fc:	f240 5254 	movw	r2, #1364	; 0x554
    5600:	4293      	cmp	r3, r2
    5602:	d823      	bhi.n	564c <_malloc_r+0x544>
    5604:	0cb3      	lsrs	r3, r6, #18
    5606:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    560a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    560e:	00c3      	lsls	r3, r0, #3
    5610:	e5c0      	b.n	5194 <_malloc_r+0x8c>
    5612:	f1ab 0b08 	sub.w	fp, fp, #8
    5616:	44d8      	add	r8, fp
    5618:	eba8 0802 	sub.w	r8, r8, r2
    561c:	f04f 0a00 	mov.w	sl, #0
    5620:	e6ab      	b.n	537a <_malloc_r+0x272>
    5622:	f105 0108 	add.w	r1, r5, #8
    5626:	4620      	mov	r0, r4
    5628:	9300      	str	r3, [sp, #0]
    562a:	f001 fb4b 	bl	6cc4 <_free_r>
    562e:	68bd      	ldr	r5, [r7, #8]
    5630:	9b00      	ldr	r3, [sp, #0]
    5632:	6868      	ldr	r0, [r5, #4]
    5634:	6819      	ldr	r1, [r3, #0]
    5636:	e6c4      	b.n	53c2 <_malloc_r+0x2ba>
    5638:	f240 5154 	movw	r1, #1364	; 0x554
    563c:	428b      	cmp	r3, r1
    563e:	d80b      	bhi.n	5658 <_malloc_r+0x550>
    5640:	0c93      	lsrs	r3, r2, #18
    5642:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    5646:	00c9      	lsls	r1, r1, #3
    5648:	337c      	adds	r3, #124	; 0x7c
    564a:	e6f3      	b.n	5434 <_malloc_r+0x32c>
    564c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5650:	207f      	movs	r0, #127	; 0x7f
    5652:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    5656:	e59d      	b.n	5194 <_malloc_r+0x8c>
    5658:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    565c:	237e      	movs	r3, #126	; 0x7e
    565e:	e6e9      	b.n	5434 <_malloc_r+0x32c>
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	e770      	b.n	5546 <_malloc_r+0x43e>
    5664:	20002960 	.word	0x20002960

00005668 <__malloc_lock>:
    5668:	4801      	ldr	r0, [pc, #4]	; (5670 <__malloc_lock+0x8>)
    566a:	f001 b853 	b.w	6714 <__retarget_lock_acquire_recursive>
    566e:	bf00      	nop
    5670:	20002958 	.word	0x20002958

00005674 <__malloc_unlock>:
    5674:	4801      	ldr	r0, [pc, #4]	; (567c <__malloc_unlock+0x8>)
    5676:	f001 b84f 	b.w	6718 <__retarget_lock_release_recursive>
    567a:	bf00      	nop
    567c:	20002958 	.word	0x20002958

00005680 <realloc>:
    5680:	b410      	push	{r4}
    5682:	4c04      	ldr	r4, [pc, #16]	; (5694 <realloc+0x14>)
    5684:	4603      	mov	r3, r0
    5686:	460a      	mov	r2, r1
    5688:	6820      	ldr	r0, [r4, #0]
    568a:	f85d 4b04 	ldr.w	r4, [sp], #4
    568e:	4619      	mov	r1, r3
    5690:	f000 b802 	b.w	5698 <_realloc_r>
    5694:	20001740 	.word	0x20001740

00005698 <_realloc_r>:
    5698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    569c:	4617      	mov	r7, r2
    569e:	2900      	cmp	r1, #0
    56a0:	f000 8098 	beq.w	57d4 <_realloc_r+0x13c>
    56a4:	460c      	mov	r4, r1
    56a6:	f107 050b 	add.w	r5, r7, #11
    56aa:	4680      	mov	r8, r0
    56ac:	f7ff ffdc 	bl	5668 <__malloc_lock>
    56b0:	2d16      	cmp	r5, #22
    56b2:	f854 1c04 	ldr.w	r1, [r4, #-4]
    56b6:	d85b      	bhi.n	5770 <_realloc_r+0xd8>
    56b8:	2510      	movs	r5, #16
    56ba:	462a      	mov	r2, r5
    56bc:	42af      	cmp	r7, r5
    56be:	d85c      	bhi.n	577a <_realloc_r+0xe2>
    56c0:	f021 0603 	bic.w	r6, r1, #3
    56c4:	4296      	cmp	r6, r2
    56c6:	f1a4 0908 	sub.w	r9, r4, #8
    56ca:	da62      	bge.n	5792 <_realloc_r+0xfa>
    56cc:	4bbc      	ldr	r3, [pc, #752]	; (59c0 <_realloc_r+0x328>)
    56ce:	f8d3 c008 	ldr.w	ip, [r3, #8]
    56d2:	eb09 0006 	add.w	r0, r9, r6
    56d6:	4584      	cmp	ip, r0
    56d8:	f000 8097 	beq.w	580a <_realloc_r+0x172>
    56dc:	f8d0 c004 	ldr.w	ip, [r0, #4]
    56e0:	f02c 0301 	bic.w	r3, ip, #1
    56e4:	4403      	add	r3, r0
    56e6:	685b      	ldr	r3, [r3, #4]
    56e8:	07db      	lsls	r3, r3, #31
    56ea:	d468      	bmi.n	57be <_realloc_r+0x126>
    56ec:	f02c 0c03 	bic.w	ip, ip, #3
    56f0:	eb06 030c 	add.w	r3, r6, ip
    56f4:	4293      	cmp	r3, r2
    56f6:	da47      	bge.n	5788 <_realloc_r+0xf0>
    56f8:	07cb      	lsls	r3, r1, #31
    56fa:	d410      	bmi.n	571e <_realloc_r+0x86>
    56fc:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5700:	eba9 0a03 	sub.w	sl, r9, r3
    5704:	f8da 3004 	ldr.w	r3, [sl, #4]
    5708:	f023 0103 	bic.w	r1, r3, #3
    570c:	448c      	add	ip, r1
    570e:	44b4      	add	ip, r6
    5710:	4594      	cmp	ip, r2
    5712:	f280 8111 	bge.w	5938 <_realloc_r+0x2a0>
    5716:	1873      	adds	r3, r6, r1
    5718:	4293      	cmp	r3, r2
    571a:	f280 80e8 	bge.w	58ee <_realloc_r+0x256>
    571e:	4639      	mov	r1, r7
    5720:	4640      	mov	r0, r8
    5722:	f7ff fcf1 	bl	5108 <_malloc_r>
    5726:	4607      	mov	r7, r0
    5728:	b1e0      	cbz	r0, 5764 <_realloc_r+0xcc>
    572a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    572e:	f023 0301 	bic.w	r3, r3, #1
    5732:	444b      	add	r3, r9
    5734:	f1a0 0208 	sub.w	r2, r0, #8
    5738:	4293      	cmp	r3, r2
    573a:	f000 80d2 	beq.w	58e2 <_realloc_r+0x24a>
    573e:	1f32      	subs	r2, r6, #4
    5740:	2a24      	cmp	r2, #36	; 0x24
    5742:	f200 80f5 	bhi.w	5930 <_realloc_r+0x298>
    5746:	2a13      	cmp	r2, #19
    5748:	f200 80ac 	bhi.w	58a4 <_realloc_r+0x20c>
    574c:	4603      	mov	r3, r0
    574e:	4622      	mov	r2, r4
    5750:	6811      	ldr	r1, [r2, #0]
    5752:	6019      	str	r1, [r3, #0]
    5754:	6851      	ldr	r1, [r2, #4]
    5756:	6059      	str	r1, [r3, #4]
    5758:	6892      	ldr	r2, [r2, #8]
    575a:	609a      	str	r2, [r3, #8]
    575c:	4621      	mov	r1, r4
    575e:	4640      	mov	r0, r8
    5760:	f001 fab0 	bl	6cc4 <_free_r>
    5764:	4640      	mov	r0, r8
    5766:	f7ff ff85 	bl	5674 <__malloc_unlock>
    576a:	4638      	mov	r0, r7
    576c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5770:	f025 0507 	bic.w	r5, r5, #7
    5774:	2d00      	cmp	r5, #0
    5776:	462a      	mov	r2, r5
    5778:	daa0      	bge.n	56bc <_realloc_r+0x24>
    577a:	230c      	movs	r3, #12
    577c:	f8c8 3000 	str.w	r3, [r8]
    5780:	2700      	movs	r7, #0
    5782:	4638      	mov	r0, r7
    5784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5788:	461e      	mov	r6, r3
    578a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    578e:	60d3      	str	r3, [r2, #12]
    5790:	609a      	str	r2, [r3, #8]
    5792:	1b73      	subs	r3, r6, r5
    5794:	2b0f      	cmp	r3, #15
    5796:	d822      	bhi.n	57de <_realloc_r+0x146>
    5798:	f8d9 3004 	ldr.w	r3, [r9, #4]
    579c:	f003 0301 	and.w	r3, r3, #1
    57a0:	4333      	orrs	r3, r6
    57a2:	444e      	add	r6, r9
    57a4:	f8c9 3004 	str.w	r3, [r9, #4]
    57a8:	6873      	ldr	r3, [r6, #4]
    57aa:	f043 0301 	orr.w	r3, r3, #1
    57ae:	6073      	str	r3, [r6, #4]
    57b0:	4640      	mov	r0, r8
    57b2:	4627      	mov	r7, r4
    57b4:	f7ff ff5e 	bl	5674 <__malloc_unlock>
    57b8:	4638      	mov	r0, r7
    57ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57be:	07c9      	lsls	r1, r1, #31
    57c0:	d4ad      	bmi.n	571e <_realloc_r+0x86>
    57c2:	f854 3c08 	ldr.w	r3, [r4, #-8]
    57c6:	eba9 0a03 	sub.w	sl, r9, r3
    57ca:	f8da 1004 	ldr.w	r1, [sl, #4]
    57ce:	f021 0103 	bic.w	r1, r1, #3
    57d2:	e7a0      	b.n	5716 <_realloc_r+0x7e>
    57d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d8:	4611      	mov	r1, r2
    57da:	f7ff bc95 	b.w	5108 <_malloc_r>
    57de:	f8d9 2004 	ldr.w	r2, [r9, #4]
    57e2:	eb09 0105 	add.w	r1, r9, r5
    57e6:	f002 0201 	and.w	r2, r2, #1
    57ea:	444e      	add	r6, r9
    57ec:	f043 0301 	orr.w	r3, r3, #1
    57f0:	432a      	orrs	r2, r5
    57f2:	f8c9 2004 	str.w	r2, [r9, #4]
    57f6:	604b      	str	r3, [r1, #4]
    57f8:	6873      	ldr	r3, [r6, #4]
    57fa:	f043 0301 	orr.w	r3, r3, #1
    57fe:	3108      	adds	r1, #8
    5800:	6073      	str	r3, [r6, #4]
    5802:	4640      	mov	r0, r8
    5804:	f001 fa5e 	bl	6cc4 <_free_r>
    5808:	e7d2      	b.n	57b0 <_realloc_r+0x118>
    580a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    580e:	f020 0b03 	bic.w	fp, r0, #3
    5812:	eb06 0c0b 	add.w	ip, r6, fp
    5816:	f105 0010 	add.w	r0, r5, #16
    581a:	4584      	cmp	ip, r0
    581c:	da4d      	bge.n	58ba <_realloc_r+0x222>
    581e:	07c9      	lsls	r1, r1, #31
    5820:	f53f af7d 	bmi.w	571e <_realloc_r+0x86>
    5824:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5828:	eba9 0a01 	sub.w	sl, r9, r1
    582c:	f8da 1004 	ldr.w	r1, [sl, #4]
    5830:	f021 0103 	bic.w	r1, r1, #3
    5834:	448b      	add	fp, r1
    5836:	44b3      	add	fp, r6
    5838:	4558      	cmp	r0, fp
    583a:	f73f af6c 	bgt.w	5716 <_realloc_r+0x7e>
    583e:	4657      	mov	r7, sl
    5840:	f8da 100c 	ldr.w	r1, [sl, #12]
    5844:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5848:	1f32      	subs	r2, r6, #4
    584a:	2a24      	cmp	r2, #36	; 0x24
    584c:	60c1      	str	r1, [r0, #12]
    584e:	6088      	str	r0, [r1, #8]
    5850:	f200 80db 	bhi.w	5a0a <_realloc_r+0x372>
    5854:	2a13      	cmp	r2, #19
    5856:	f240 80d6 	bls.w	5a06 <_realloc_r+0x36e>
    585a:	6821      	ldr	r1, [r4, #0]
    585c:	f8ca 1008 	str.w	r1, [sl, #8]
    5860:	6861      	ldr	r1, [r4, #4]
    5862:	f8ca 100c 	str.w	r1, [sl, #12]
    5866:	2a1b      	cmp	r2, #27
    5868:	f200 80df 	bhi.w	5a2a <_realloc_r+0x392>
    586c:	3408      	adds	r4, #8
    586e:	f10a 0210 	add.w	r2, sl, #16
    5872:	6821      	ldr	r1, [r4, #0]
    5874:	6011      	str	r1, [r2, #0]
    5876:	6861      	ldr	r1, [r4, #4]
    5878:	6051      	str	r1, [r2, #4]
    587a:	68a1      	ldr	r1, [r4, #8]
    587c:	6091      	str	r1, [r2, #8]
    587e:	eb0a 0105 	add.w	r1, sl, r5
    5882:	ebab 0205 	sub.w	r2, fp, r5
    5886:	f042 0201 	orr.w	r2, r2, #1
    588a:	6099      	str	r1, [r3, #8]
    588c:	604a      	str	r2, [r1, #4]
    588e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5892:	f003 0301 	and.w	r3, r3, #1
    5896:	432b      	orrs	r3, r5
    5898:	4640      	mov	r0, r8
    589a:	f8ca 3004 	str.w	r3, [sl, #4]
    589e:	f7ff fee9 	bl	5674 <__malloc_unlock>
    58a2:	e76e      	b.n	5782 <_realloc_r+0xea>
    58a4:	6823      	ldr	r3, [r4, #0]
    58a6:	6003      	str	r3, [r0, #0]
    58a8:	6863      	ldr	r3, [r4, #4]
    58aa:	6043      	str	r3, [r0, #4]
    58ac:	2a1b      	cmp	r2, #27
    58ae:	d868      	bhi.n	5982 <_realloc_r+0x2ea>
    58b0:	f104 0208 	add.w	r2, r4, #8
    58b4:	f100 0308 	add.w	r3, r0, #8
    58b8:	e74a      	b.n	5750 <_realloc_r+0xb8>
    58ba:	eb09 0205 	add.w	r2, r9, r5
    58be:	609a      	str	r2, [r3, #8]
    58c0:	ebac 0305 	sub.w	r3, ip, r5
    58c4:	f043 0301 	orr.w	r3, r3, #1
    58c8:	6053      	str	r3, [r2, #4]
    58ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
    58ce:	f003 0301 	and.w	r3, r3, #1
    58d2:	432b      	orrs	r3, r5
    58d4:	4640      	mov	r0, r8
    58d6:	f844 3c04 	str.w	r3, [r4, #-4]
    58da:	f7ff fecb 	bl	5674 <__malloc_unlock>
    58de:	4627      	mov	r7, r4
    58e0:	e74f      	b.n	5782 <_realloc_r+0xea>
    58e2:	f850 3c04 	ldr.w	r3, [r0, #-4]
    58e6:	f023 0303 	bic.w	r3, r3, #3
    58ea:	441e      	add	r6, r3
    58ec:	e751      	b.n	5792 <_realloc_r+0xfa>
    58ee:	4657      	mov	r7, sl
    58f0:	f8da 100c 	ldr.w	r1, [sl, #12]
    58f4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    58f8:	1f32      	subs	r2, r6, #4
    58fa:	2a24      	cmp	r2, #36	; 0x24
    58fc:	60c1      	str	r1, [r0, #12]
    58fe:	6088      	str	r0, [r1, #8]
    5900:	d84c      	bhi.n	599c <_realloc_r+0x304>
    5902:	2a13      	cmp	r2, #19
    5904:	d948      	bls.n	5998 <_realloc_r+0x300>
    5906:	6821      	ldr	r1, [r4, #0]
    5908:	f8ca 1008 	str.w	r1, [sl, #8]
    590c:	6861      	ldr	r1, [r4, #4]
    590e:	f8ca 100c 	str.w	r1, [sl, #12]
    5912:	2a1b      	cmp	r2, #27
    5914:	d856      	bhi.n	59c4 <_realloc_r+0x32c>
    5916:	3408      	adds	r4, #8
    5918:	f10a 0210 	add.w	r2, sl, #16
    591c:	461e      	mov	r6, r3
    591e:	6823      	ldr	r3, [r4, #0]
    5920:	6013      	str	r3, [r2, #0]
    5922:	6863      	ldr	r3, [r4, #4]
    5924:	6053      	str	r3, [r2, #4]
    5926:	68a3      	ldr	r3, [r4, #8]
    5928:	6093      	str	r3, [r2, #8]
    592a:	46d1      	mov	r9, sl
    592c:	463c      	mov	r4, r7
    592e:	e730      	b.n	5792 <_realloc_r+0xfa>
    5930:	4621      	mov	r1, r4
    5932:	f000 fadb 	bl	5eec <memmove>
    5936:	e711      	b.n	575c <_realloc_r+0xc4>
    5938:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    593c:	4657      	mov	r7, sl
    593e:	60cb      	str	r3, [r1, #12]
    5940:	6099      	str	r1, [r3, #8]
    5942:	f857 1f08 	ldr.w	r1, [r7, #8]!
    5946:	f8da 300c 	ldr.w	r3, [sl, #12]
    594a:	60cb      	str	r3, [r1, #12]
    594c:	1f32      	subs	r2, r6, #4
    594e:	2a24      	cmp	r2, #36	; 0x24
    5950:	6099      	str	r1, [r3, #8]
    5952:	d82d      	bhi.n	59b0 <_realloc_r+0x318>
    5954:	2a13      	cmp	r2, #19
    5956:	d929      	bls.n	59ac <_realloc_r+0x314>
    5958:	6823      	ldr	r3, [r4, #0]
    595a:	f8ca 3008 	str.w	r3, [sl, #8]
    595e:	6863      	ldr	r3, [r4, #4]
    5960:	f8ca 300c 	str.w	r3, [sl, #12]
    5964:	2a1b      	cmp	r2, #27
    5966:	d842      	bhi.n	59ee <_realloc_r+0x356>
    5968:	3408      	adds	r4, #8
    596a:	f10a 0310 	add.w	r3, sl, #16
    596e:	6822      	ldr	r2, [r4, #0]
    5970:	601a      	str	r2, [r3, #0]
    5972:	6862      	ldr	r2, [r4, #4]
    5974:	605a      	str	r2, [r3, #4]
    5976:	68a2      	ldr	r2, [r4, #8]
    5978:	609a      	str	r2, [r3, #8]
    597a:	4666      	mov	r6, ip
    597c:	46d1      	mov	r9, sl
    597e:	463c      	mov	r4, r7
    5980:	e707      	b.n	5792 <_realloc_r+0xfa>
    5982:	68a3      	ldr	r3, [r4, #8]
    5984:	6083      	str	r3, [r0, #8]
    5986:	68e3      	ldr	r3, [r4, #12]
    5988:	60c3      	str	r3, [r0, #12]
    598a:	2a24      	cmp	r2, #36	; 0x24
    598c:	d026      	beq.n	59dc <_realloc_r+0x344>
    598e:	f104 0210 	add.w	r2, r4, #16
    5992:	f100 0310 	add.w	r3, r0, #16
    5996:	e6db      	b.n	5750 <_realloc_r+0xb8>
    5998:	463a      	mov	r2, r7
    599a:	e7bf      	b.n	591c <_realloc_r+0x284>
    599c:	4621      	mov	r1, r4
    599e:	4638      	mov	r0, r7
    59a0:	461e      	mov	r6, r3
    59a2:	46d1      	mov	r9, sl
    59a4:	f000 faa2 	bl	5eec <memmove>
    59a8:	463c      	mov	r4, r7
    59aa:	e6f2      	b.n	5792 <_realloc_r+0xfa>
    59ac:	463b      	mov	r3, r7
    59ae:	e7de      	b.n	596e <_realloc_r+0x2d6>
    59b0:	4621      	mov	r1, r4
    59b2:	4638      	mov	r0, r7
    59b4:	4666      	mov	r6, ip
    59b6:	46d1      	mov	r9, sl
    59b8:	f000 fa98 	bl	5eec <memmove>
    59bc:	463c      	mov	r4, r7
    59be:	e6e8      	b.n	5792 <_realloc_r+0xfa>
    59c0:	20001324 	.word	0x20001324
    59c4:	68a1      	ldr	r1, [r4, #8]
    59c6:	f8ca 1010 	str.w	r1, [sl, #16]
    59ca:	68e1      	ldr	r1, [r4, #12]
    59cc:	f8ca 1014 	str.w	r1, [sl, #20]
    59d0:	2a24      	cmp	r2, #36	; 0x24
    59d2:	d020      	beq.n	5a16 <_realloc_r+0x37e>
    59d4:	3410      	adds	r4, #16
    59d6:	f10a 0218 	add.w	r2, sl, #24
    59da:	e79f      	b.n	591c <_realloc_r+0x284>
    59dc:	6923      	ldr	r3, [r4, #16]
    59de:	6103      	str	r3, [r0, #16]
    59e0:	6961      	ldr	r1, [r4, #20]
    59e2:	6141      	str	r1, [r0, #20]
    59e4:	f104 0218 	add.w	r2, r4, #24
    59e8:	f100 0318 	add.w	r3, r0, #24
    59ec:	e6b0      	b.n	5750 <_realloc_r+0xb8>
    59ee:	68a3      	ldr	r3, [r4, #8]
    59f0:	f8ca 3010 	str.w	r3, [sl, #16]
    59f4:	68e3      	ldr	r3, [r4, #12]
    59f6:	f8ca 3014 	str.w	r3, [sl, #20]
    59fa:	2a24      	cmp	r2, #36	; 0x24
    59fc:	d021      	beq.n	5a42 <_realloc_r+0x3aa>
    59fe:	3410      	adds	r4, #16
    5a00:	f10a 0318 	add.w	r3, sl, #24
    5a04:	e7b3      	b.n	596e <_realloc_r+0x2d6>
    5a06:	463a      	mov	r2, r7
    5a08:	e733      	b.n	5872 <_realloc_r+0x1da>
    5a0a:	4621      	mov	r1, r4
    5a0c:	4638      	mov	r0, r7
    5a0e:	f000 fa6d 	bl	5eec <memmove>
    5a12:	4b16      	ldr	r3, [pc, #88]	; (5a6c <_realloc_r+0x3d4>)
    5a14:	e733      	b.n	587e <_realloc_r+0x1e6>
    5a16:	6922      	ldr	r2, [r4, #16]
    5a18:	f8ca 2018 	str.w	r2, [sl, #24]
    5a1c:	6962      	ldr	r2, [r4, #20]
    5a1e:	f8ca 201c 	str.w	r2, [sl, #28]
    5a22:	3418      	adds	r4, #24
    5a24:	f10a 0220 	add.w	r2, sl, #32
    5a28:	e778      	b.n	591c <_realloc_r+0x284>
    5a2a:	68a1      	ldr	r1, [r4, #8]
    5a2c:	f8ca 1010 	str.w	r1, [sl, #16]
    5a30:	68e1      	ldr	r1, [r4, #12]
    5a32:	f8ca 1014 	str.w	r1, [sl, #20]
    5a36:	2a24      	cmp	r2, #36	; 0x24
    5a38:	d00d      	beq.n	5a56 <_realloc_r+0x3be>
    5a3a:	3410      	adds	r4, #16
    5a3c:	f10a 0218 	add.w	r2, sl, #24
    5a40:	e717      	b.n	5872 <_realloc_r+0x1da>
    5a42:	6923      	ldr	r3, [r4, #16]
    5a44:	f8ca 3018 	str.w	r3, [sl, #24]
    5a48:	6963      	ldr	r3, [r4, #20]
    5a4a:	f8ca 301c 	str.w	r3, [sl, #28]
    5a4e:	3418      	adds	r4, #24
    5a50:	f10a 0320 	add.w	r3, sl, #32
    5a54:	e78b      	b.n	596e <_realloc_r+0x2d6>
    5a56:	6922      	ldr	r2, [r4, #16]
    5a58:	f8ca 2018 	str.w	r2, [sl, #24]
    5a5c:	6962      	ldr	r2, [r4, #20]
    5a5e:	f8ca 201c 	str.w	r2, [sl, #28]
    5a62:	3418      	adds	r4, #24
    5a64:	f10a 0220 	add.w	r2, sl, #32
    5a68:	e703      	b.n	5872 <_realloc_r+0x1da>
    5a6a:	bf00      	nop
    5a6c:	20001324 	.word	0x20001324

00005a70 <_strtol_l.constprop.0>:
    5a70:	2b01      	cmp	r3, #1
    5a72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a76:	d040      	beq.n	5afa <_strtol_l.constprop.0+0x8a>
    5a78:	2b24      	cmp	r3, #36	; 0x24
    5a7a:	4698      	mov	r8, r3
    5a7c:	d83d      	bhi.n	5afa <_strtol_l.constprop.0+0x8a>
    5a7e:	4d4c      	ldr	r5, [pc, #304]	; (5bb0 <_strtol_l.constprop.0+0x140>)
    5a80:	468e      	mov	lr, r1
    5a82:	4676      	mov	r6, lr
    5a84:	f81e bb01 	ldrb.w	fp, [lr], #1
    5a88:	f815 400b 	ldrb.w	r4, [r5, fp]
    5a8c:	f014 0408 	ands.w	r4, r4, #8
    5a90:	d1f7      	bne.n	5a82 <_strtol_l.constprop.0+0x12>
    5a92:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    5a96:	d072      	beq.n	5b7e <_strtol_l.constprop.0+0x10e>
    5a98:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    5a9c:	bf08      	it	eq
    5a9e:	f89e b000 	ldrbeq.w	fp, [lr]
    5aa2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    5aa6:	bf08      	it	eq
    5aa8:	f106 0e02 	addeq.w	lr, r6, #2
    5aac:	2b00      	cmp	r3, #0
    5aae:	d042      	beq.n	5b36 <_strtol_l.constprop.0+0xc6>
    5ab0:	2b10      	cmp	r3, #16
    5ab2:	d057      	beq.n	5b64 <_strtol_l.constprop.0+0xf4>
    5ab4:	fbb9 f7f8 	udiv	r7, r9, r8
    5ab8:	2500      	movs	r5, #0
    5aba:	462e      	mov	r6, r5
    5abc:	fb08 9a17 	mls	sl, r8, r7, r9
    5ac0:	e005      	b.n	5ace <_strtol_l.constprop.0+0x5e>
    5ac2:	d033      	beq.n	5b2c <_strtol_l.constprop.0+0xbc>
    5ac4:	fb08 c606 	mla	r6, r8, r6, ip
    5ac8:	2501      	movs	r5, #1
    5aca:	f81e bb01 	ldrb.w	fp, [lr], #1
    5ace:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    5ad2:	f1bc 0f09 	cmp.w	ip, #9
    5ad6:	d906      	bls.n	5ae6 <_strtol_l.constprop.0+0x76>
    5ad8:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    5adc:	f1bc 0f19 	cmp.w	ip, #25
    5ae0:	d812      	bhi.n	5b08 <_strtol_l.constprop.0+0x98>
    5ae2:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    5ae6:	4563      	cmp	r3, ip
    5ae8:	dd17      	ble.n	5b1a <_strtol_l.constprop.0+0xaa>
    5aea:	f1b5 3fff 	cmp.w	r5, #4294967295
    5aee:	d0ec      	beq.n	5aca <_strtol_l.constprop.0+0x5a>
    5af0:	42b7      	cmp	r7, r6
    5af2:	d2e6      	bcs.n	5ac2 <_strtol_l.constprop.0+0x52>
    5af4:	f04f 35ff 	mov.w	r5, #4294967295
    5af8:	e7e7      	b.n	5aca <_strtol_l.constprop.0+0x5a>
    5afa:	f000 fddd 	bl	66b8 <__errno>
    5afe:	2316      	movs	r3, #22
    5b00:	6003      	str	r3, [r0, #0]
    5b02:	2000      	movs	r0, #0
    5b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b08:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    5b0c:	f1bc 0f19 	cmp.w	ip, #25
    5b10:	d803      	bhi.n	5b1a <_strtol_l.constprop.0+0xaa>
    5b12:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    5b16:	4563      	cmp	r3, ip
    5b18:	dce7      	bgt.n	5aea <_strtol_l.constprop.0+0x7a>
    5b1a:	1c6b      	adds	r3, r5, #1
    5b1c:	d027      	beq.n	5b6e <_strtol_l.constprop.0+0xfe>
    5b1e:	b98c      	cbnz	r4, 5b44 <_strtol_l.constprop.0+0xd4>
    5b20:	b10a      	cbz	r2, 5b26 <_strtol_l.constprop.0+0xb6>
    5b22:	bba5      	cbnz	r5, 5b8e <_strtol_l.constprop.0+0x11e>
    5b24:	6011      	str	r1, [r2, #0]
    5b26:	4630      	mov	r0, r6
    5b28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b2c:	45e2      	cmp	sl, ip
    5b2e:	dac9      	bge.n	5ac4 <_strtol_l.constprop.0+0x54>
    5b30:	f04f 35ff 	mov.w	r5, #4294967295
    5b34:	e7c9      	b.n	5aca <_strtol_l.constprop.0+0x5a>
    5b36:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5b3a:	d005      	beq.n	5b48 <_strtol_l.constprop.0+0xd8>
    5b3c:	f04f 080a 	mov.w	r8, #10
    5b40:	4643      	mov	r3, r8
    5b42:	e7b7      	b.n	5ab4 <_strtol_l.constprop.0+0x44>
    5b44:	4276      	negs	r6, r6
    5b46:	e7eb      	b.n	5b20 <_strtol_l.constprop.0+0xb0>
    5b48:	f89e 3000 	ldrb.w	r3, [lr]
    5b4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5b50:	2b58      	cmp	r3, #88	; 0x58
    5b52:	d121      	bne.n	5b98 <_strtol_l.constprop.0+0x128>
    5b54:	f04f 0810 	mov.w	r8, #16
    5b58:	f89e b001 	ldrb.w	fp, [lr, #1]
    5b5c:	4643      	mov	r3, r8
    5b5e:	f10e 0e02 	add.w	lr, lr, #2
    5b62:	e7a7      	b.n	5ab4 <_strtol_l.constprop.0+0x44>
    5b64:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5b68:	d01a      	beq.n	5ba0 <_strtol_l.constprop.0+0x130>
    5b6a:	4698      	mov	r8, r3
    5b6c:	e7a2      	b.n	5ab4 <_strtol_l.constprop.0+0x44>
    5b6e:	2322      	movs	r3, #34	; 0x22
    5b70:	6003      	str	r3, [r0, #0]
    5b72:	b172      	cbz	r2, 5b92 <_strtol_l.constprop.0+0x122>
    5b74:	f10e 31ff 	add.w	r1, lr, #4294967295
    5b78:	464e      	mov	r6, r9
    5b7a:	6011      	str	r1, [r2, #0]
    5b7c:	e7d3      	b.n	5b26 <_strtol_l.constprop.0+0xb6>
    5b7e:	f89e b000 	ldrb.w	fp, [lr]
    5b82:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    5b86:	f106 0e02 	add.w	lr, r6, #2
    5b8a:	2401      	movs	r4, #1
    5b8c:	e78e      	b.n	5aac <_strtol_l.constprop.0+0x3c>
    5b8e:	46b1      	mov	r9, r6
    5b90:	e7f0      	b.n	5b74 <_strtol_l.constprop.0+0x104>
    5b92:	464e      	mov	r6, r9
    5b94:	4630      	mov	r0, r6
    5b96:	e7c7      	b.n	5b28 <_strtol_l.constprop.0+0xb8>
    5b98:	f04f 0808 	mov.w	r8, #8
    5b9c:	4643      	mov	r3, r8
    5b9e:	e789      	b.n	5ab4 <_strtol_l.constprop.0+0x44>
    5ba0:	f89e 5000 	ldrb.w	r5, [lr]
    5ba4:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    5ba8:	2d58      	cmp	r5, #88	; 0x58
    5baa:	d0d3      	beq.n	5b54 <_strtol_l.constprop.0+0xe4>
    5bac:	4698      	mov	r8, r3
    5bae:	e781      	b.n	5ab4 <_strtol_l.constprop.0+0x44>
    5bb0:	20000719 	.word	0x20000719

00005bb4 <strtol>:
    5bb4:	b410      	push	{r4}
    5bb6:	4c05      	ldr	r4, [pc, #20]	; (5bcc <strtol+0x18>)
    5bb8:	4684      	mov	ip, r0
    5bba:	4613      	mov	r3, r2
    5bbc:	6820      	ldr	r0, [r4, #0]
    5bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    5bc2:	460a      	mov	r2, r1
    5bc4:	4661      	mov	r1, ip
    5bc6:	f7ff bf53 	b.w	5a70 <_strtol_l.constprop.0>
    5bca:	bf00      	nop
    5bcc:	20001740 	.word	0x20001740

00005bd0 <__utoa>:
    5bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bd2:	4f25      	ldr	r7, [pc, #148]	; (5c68 <__utoa+0x98>)
    5bd4:	f1a2 0e02 	sub.w	lr, r2, #2
    5bd8:	4616      	mov	r6, r2
    5bda:	4605      	mov	r5, r0
    5bdc:	460c      	mov	r4, r1
    5bde:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5be0:	b08b      	sub	sp, #44	; 0x2c
    5be2:	46ec      	mov	ip, sp
    5be4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5bee:	e897 0003 	ldmia.w	r7, {r0, r1}
    5bf2:	f84c 0b04 	str.w	r0, [ip], #4
    5bf6:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    5bfa:	f88c 1000 	strb.w	r1, [ip]
    5bfe:	d82e      	bhi.n	5c5e <__utoa+0x8e>
    5c00:	f104 3eff 	add.w	lr, r4, #4294967295
    5c04:	4670      	mov	r0, lr
    5c06:	f04f 0c00 	mov.w	ip, #0
    5c0a:	fbb5 f2f6 	udiv	r2, r5, r6
    5c0e:	fb06 5312 	mls	r3, r6, r2, r5
    5c12:	3328      	adds	r3, #40	; 0x28
    5c14:	446b      	add	r3, sp
    5c16:	4661      	mov	r1, ip
    5c18:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    5c1c:	f800 cf01 	strb.w	ip, [r0, #1]!
    5c20:	462b      	mov	r3, r5
    5c22:	429e      	cmp	r6, r3
    5c24:	f101 0c01 	add.w	ip, r1, #1
    5c28:	4615      	mov	r5, r2
    5c2a:	d9ee      	bls.n	5c0a <__utoa+0x3a>
    5c2c:	2300      	movs	r3, #0
    5c2e:	f804 300c 	strb.w	r3, [r4, ip]
    5c32:	b189      	cbz	r1, 5c58 <__utoa+0x88>
    5c34:	44a4      	add	ip, r4
    5c36:	4672      	mov	r2, lr
    5c38:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    5c3c:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    5c40:	f88e 5000 	strb.w	r5, [lr]
    5c44:	eba4 030e 	sub.w	r3, r4, lr
    5c48:	3202      	adds	r2, #2
    5c4a:	3b01      	subs	r3, #1
    5c4c:	1b12      	subs	r2, r2, r4
    5c4e:	440b      	add	r3, r1
    5c50:	429a      	cmp	r2, r3
    5c52:	f88c 0000 	strb.w	r0, [ip]
    5c56:	dbee      	blt.n	5c36 <__utoa+0x66>
    5c58:	4620      	mov	r0, r4
    5c5a:	b00b      	add	sp, #44	; 0x2c
    5c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c5e:	2300      	movs	r3, #0
    5c60:	4618      	mov	r0, r3
    5c62:	7023      	strb	r3, [r4, #0]
    5c64:	b00b      	add	sp, #44	; 0x2c
    5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c68:	200006f0 	.word	0x200006f0

00005c6c <__cxa_atexit>:
    5c6c:	4613      	mov	r3, r2
    5c6e:	460a      	mov	r2, r1
    5c70:	4601      	mov	r1, r0
    5c72:	2002      	movs	r0, #2
    5c74:	f000 bf92 	b.w	6b9c <__register_exitproc>

00005c78 <fcvtf>:
    5c78:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    5c7c:	2300      	movs	r3, #0
    5c7e:	f001 bd07 	b.w	7690 <fcvtbuf>
    5c82:	bf00      	nop

00005c84 <tolower>:
    5c84:	4b03      	ldr	r3, [pc, #12]	; (5c94 <tolower+0x10>)
    5c86:	5c1b      	ldrb	r3, [r3, r0]
    5c88:	f003 0303 	and.w	r3, r3, #3
    5c8c:	2b01      	cmp	r3, #1
    5c8e:	bf08      	it	eq
    5c90:	3020      	addeq	r0, #32
    5c92:	4770      	bx	lr
    5c94:	20000719 	.word	0x20000719

00005c98 <stdio_exit_handler>:
    5c98:	4a02      	ldr	r2, [pc, #8]	; (5ca4 <stdio_exit_handler+0xc>)
    5c9a:	4903      	ldr	r1, [pc, #12]	; (5ca8 <stdio_exit_handler+0x10>)
    5c9c:	4803      	ldr	r0, [pc, #12]	; (5cac <stdio_exit_handler+0x14>)
    5c9e:	f000 b8bb 	b.w	5e18 <_fwalk_sglue>
    5ca2:	bf00      	nop
    5ca4:	20001734 	.word	0x20001734
    5ca8:	00007735 	.word	0x00007735
    5cac:	20000db8 	.word	0x20000db8

00005cb0 <cleanup_stdio>:
    5cb0:	4b0c      	ldr	r3, [pc, #48]	; (5ce4 <cleanup_stdio+0x34>)
    5cb2:	6841      	ldr	r1, [r0, #4]
    5cb4:	4299      	cmp	r1, r3
    5cb6:	b510      	push	{r4, lr}
    5cb8:	4604      	mov	r4, r0
    5cba:	d001      	beq.n	5cc0 <cleanup_stdio+0x10>
    5cbc:	f001 fd3a 	bl	7734 <_fclose_r>
    5cc0:	68a1      	ldr	r1, [r4, #8]
    5cc2:	4b09      	ldr	r3, [pc, #36]	; (5ce8 <cleanup_stdio+0x38>)
    5cc4:	4299      	cmp	r1, r3
    5cc6:	d002      	beq.n	5cce <cleanup_stdio+0x1e>
    5cc8:	4620      	mov	r0, r4
    5cca:	f001 fd33 	bl	7734 <_fclose_r>
    5cce:	68e1      	ldr	r1, [r4, #12]
    5cd0:	4b06      	ldr	r3, [pc, #24]	; (5cec <cleanup_stdio+0x3c>)
    5cd2:	4299      	cmp	r1, r3
    5cd4:	d004      	beq.n	5ce0 <cleanup_stdio+0x30>
    5cd6:	4620      	mov	r0, r4
    5cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cdc:	f001 bd2a 	b.w	7734 <_fclose_r>
    5ce0:	bd10      	pop	{r4, pc}
    5ce2:	bf00      	nop
    5ce4:	20002994 	.word	0x20002994
    5ce8:	200029fc 	.word	0x200029fc
    5cec:	20002a64 	.word	0x20002a64

00005cf0 <global_stdio_init.part.0>:
    5cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5cf4:	4c2a      	ldr	r4, [pc, #168]	; (5da0 <global_stdio_init.part.0+0xb0>)
    5cf6:	4b2b      	ldr	r3, [pc, #172]	; (5da4 <global_stdio_init.part.0+0xb4>)
    5cf8:	482b      	ldr	r0, [pc, #172]	; (5da8 <global_stdio_init.part.0+0xb8>)
    5cfa:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5dbc <global_stdio_init.part.0+0xcc>
    5cfe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5dc0 <global_stdio_init.part.0+0xd0>
    5d02:	4f2a      	ldr	r7, [pc, #168]	; (5dac <global_stdio_init.part.0+0xbc>)
    5d04:	6018      	str	r0, [r3, #0]
    5d06:	2500      	movs	r5, #0
    5d08:	2304      	movs	r3, #4
    5d0a:	2208      	movs	r2, #8
    5d0c:	4629      	mov	r1, r5
    5d0e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5d12:	4e27      	ldr	r6, [pc, #156]	; (5db0 <global_stdio_init.part.0+0xc0>)
    5d14:	6665      	str	r5, [r4, #100]	; 0x64
    5d16:	e9c4 5302 	strd	r5, r3, [r4, #8]
    5d1a:	e9c4 5500 	strd	r5, r5, [r4]
    5d1e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    5d22:	61a5      	str	r5, [r4, #24]
    5d24:	f000 f95e 	bl	5fe4 <memset>
    5d28:	4b22      	ldr	r3, [pc, #136]	; (5db4 <global_stdio_init.part.0+0xc4>)
    5d2a:	6763      	str	r3, [r4, #116]	; 0x74
    5d2c:	2208      	movs	r2, #8
    5d2e:	4629      	mov	r1, r5
    5d30:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5d34:	e9c4 4907 	strd	r4, r9, [r4, #28]
    5d38:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5d3c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    5d40:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5d44:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5d48:	6725      	str	r5, [r4, #112]	; 0x70
    5d4a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5d4e:	62e6      	str	r6, [r4, #44]	; 0x2c
    5d50:	f000 f948 	bl	5fe4 <memset>
    5d54:	4b18      	ldr	r3, [pc, #96]	; (5db8 <global_stdio_init.part.0+0xc8>)
    5d56:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5d5a:	4629      	mov	r1, r5
    5d5c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    5d60:	2208      	movs	r2, #8
    5d62:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5d66:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5d6a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5d6e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    5d72:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    5d76:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5d7a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5d7e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    5d82:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    5d86:	f000 f92d 	bl	5fe4 <memset>
    5d8a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5d8e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    5d92:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    5d96:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d9e:	bf00      	nop
    5da0:	20002994 	.word	0x20002994
    5da4:	20002acc 	.word	0x20002acc
    5da8:	00005c99 	.word	0x00005c99
    5dac:	00005ec5 	.word	0x00005ec5
    5db0:	00005ee5 	.word	0x00005ee5
    5db4:	00010009 	.word	0x00010009
    5db8:	00020012 	.word	0x00020012
    5dbc:	00005e61 	.word	0x00005e61
    5dc0:	00005e85 	.word	0x00005e85

00005dc4 <__sinit>:
    5dc4:	b510      	push	{r4, lr}
    5dc6:	4604      	mov	r4, r0
    5dc8:	480a      	ldr	r0, [pc, #40]	; (5df4 <__sinit+0x30>)
    5dca:	f000 fca3 	bl	6714 <__retarget_lock_acquire_recursive>
    5dce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5dd0:	b923      	cbnz	r3, 5ddc <__sinit+0x18>
    5dd2:	4b09      	ldr	r3, [pc, #36]	; (5df8 <__sinit+0x34>)
    5dd4:	4a09      	ldr	r2, [pc, #36]	; (5dfc <__sinit+0x38>)
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	6362      	str	r2, [r4, #52]	; 0x34
    5dda:	b123      	cbz	r3, 5de6 <__sinit+0x22>
    5ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5de0:	4804      	ldr	r0, [pc, #16]	; (5df4 <__sinit+0x30>)
    5de2:	f000 bc99 	b.w	6718 <__retarget_lock_release_recursive>
    5de6:	f7ff ff83 	bl	5cf0 <global_stdio_init.part.0>
    5dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5dee:	4801      	ldr	r0, [pc, #4]	; (5df4 <__sinit+0x30>)
    5df0:	f000 bc92 	b.w	6718 <__retarget_lock_release_recursive>
    5df4:	2000295c 	.word	0x2000295c
    5df8:	20002acc 	.word	0x20002acc
    5dfc:	00005cb1 	.word	0x00005cb1

00005e00 <__sfp_lock_acquire>:
    5e00:	4801      	ldr	r0, [pc, #4]	; (5e08 <__sfp_lock_acquire+0x8>)
    5e02:	f000 bc87 	b.w	6714 <__retarget_lock_acquire_recursive>
    5e06:	bf00      	nop
    5e08:	2000295c 	.word	0x2000295c

00005e0c <__sfp_lock_release>:
    5e0c:	4801      	ldr	r0, [pc, #4]	; (5e14 <__sfp_lock_release+0x8>)
    5e0e:	f000 bc83 	b.w	6718 <__retarget_lock_release_recursive>
    5e12:	bf00      	nop
    5e14:	2000295c 	.word	0x2000295c

00005e18 <_fwalk_sglue>:
    5e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e1c:	4680      	mov	r8, r0
    5e1e:	460f      	mov	r7, r1
    5e20:	4616      	mov	r6, r2
    5e22:	f04f 0900 	mov.w	r9, #0
    5e26:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5e2a:	3d01      	subs	r5, #1
    5e2c:	d411      	bmi.n	5e52 <_fwalk_sglue+0x3a>
    5e2e:	89a3      	ldrh	r3, [r4, #12]
    5e30:	2b01      	cmp	r3, #1
    5e32:	f105 35ff 	add.w	r5, r5, #4294967295
    5e36:	d908      	bls.n	5e4a <_fwalk_sglue+0x32>
    5e38:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5e3c:	3301      	adds	r3, #1
    5e3e:	4621      	mov	r1, r4
    5e40:	d003      	beq.n	5e4a <_fwalk_sglue+0x32>
    5e42:	4640      	mov	r0, r8
    5e44:	47b8      	blx	r7
    5e46:	ea49 0900 	orr.w	r9, r9, r0
    5e4a:	1c6b      	adds	r3, r5, #1
    5e4c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5e50:	d1ed      	bne.n	5e2e <_fwalk_sglue+0x16>
    5e52:	6836      	ldr	r6, [r6, #0]
    5e54:	2e00      	cmp	r6, #0
    5e56:	d1e6      	bne.n	5e26 <_fwalk_sglue+0xe>
    5e58:	4648      	mov	r0, r9
    5e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e5e:	bf00      	nop

00005e60 <__sread>:
    5e60:	b510      	push	{r4, lr}
    5e62:	460c      	mov	r4, r1
    5e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e68:	f000 fbe8 	bl	663c <_read_r>
    5e6c:	2800      	cmp	r0, #0
    5e6e:	db03      	blt.n	5e78 <__sread+0x18>
    5e70:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5e72:	4403      	add	r3, r0
    5e74:	6523      	str	r3, [r4, #80]	; 0x50
    5e76:	bd10      	pop	{r4, pc}
    5e78:	89a3      	ldrh	r3, [r4, #12]
    5e7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5e7e:	81a3      	strh	r3, [r4, #12]
    5e80:	bd10      	pop	{r4, pc}
    5e82:	bf00      	nop

00005e84 <__swrite>:
    5e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e88:	460c      	mov	r4, r1
    5e8a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5e8e:	461f      	mov	r7, r3
    5e90:	05cb      	lsls	r3, r1, #23
    5e92:	4605      	mov	r5, r0
    5e94:	4616      	mov	r6, r2
    5e96:	d40b      	bmi.n	5eb0 <__swrite+0x2c>
    5e98:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5e9c:	81a1      	strh	r1, [r4, #12]
    5e9e:	463b      	mov	r3, r7
    5ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5ea4:	4632      	mov	r2, r6
    5ea6:	4628      	mov	r0, r5
    5ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5eac:	f000 bbee 	b.w	668c <_write_r>
    5eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5eb4:	2302      	movs	r3, #2
    5eb6:	2200      	movs	r2, #0
    5eb8:	f000 fbaa 	bl	6610 <_lseek_r>
    5ebc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5ec0:	e7ea      	b.n	5e98 <__swrite+0x14>
    5ec2:	bf00      	nop

00005ec4 <__sseek>:
    5ec4:	b510      	push	{r4, lr}
    5ec6:	460c      	mov	r4, r1
    5ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5ecc:	f000 fba0 	bl	6610 <_lseek_r>
    5ed0:	89a3      	ldrh	r3, [r4, #12]
    5ed2:	1c42      	adds	r2, r0, #1
    5ed4:	bf0e      	itee	eq
    5ed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5eda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5ede:	6520      	strne	r0, [r4, #80]	; 0x50
    5ee0:	81a3      	strh	r3, [r4, #12]
    5ee2:	bd10      	pop	{r4, pc}

00005ee4 <__sclose>:
    5ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5ee8:	f000 bb80 	b.w	65ec <_close_r>

00005eec <memmove>:
    5eec:	4288      	cmp	r0, r1
    5eee:	d90d      	bls.n	5f0c <memmove+0x20>
    5ef0:	188b      	adds	r3, r1, r2
    5ef2:	4283      	cmp	r3, r0
    5ef4:	d90a      	bls.n	5f0c <memmove+0x20>
    5ef6:	eb00 0c02 	add.w	ip, r0, r2
    5efa:	b1ba      	cbz	r2, 5f2c <memmove+0x40>
    5efc:	4662      	mov	r2, ip
    5efe:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5f02:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5f06:	4299      	cmp	r1, r3
    5f08:	d1f9      	bne.n	5efe <memmove+0x12>
    5f0a:	4770      	bx	lr
    5f0c:	2a0f      	cmp	r2, #15
    5f0e:	d80e      	bhi.n	5f2e <memmove+0x42>
    5f10:	4603      	mov	r3, r0
    5f12:	f102 3cff 	add.w	ip, r2, #4294967295
    5f16:	b14a      	cbz	r2, 5f2c <memmove+0x40>
    5f18:	f10c 0c01 	add.w	ip, ip, #1
    5f1c:	3b01      	subs	r3, #1
    5f1e:	448c      	add	ip, r1
    5f20:	f811 2b01 	ldrb.w	r2, [r1], #1
    5f24:	f803 2f01 	strb.w	r2, [r3, #1]!
    5f28:	4561      	cmp	r1, ip
    5f2a:	d1f9      	bne.n	5f20 <memmove+0x34>
    5f2c:	4770      	bx	lr
    5f2e:	ea40 0301 	orr.w	r3, r0, r1
    5f32:	079b      	lsls	r3, r3, #30
    5f34:	d150      	bne.n	5fd8 <memmove+0xec>
    5f36:	f1a2 0310 	sub.w	r3, r2, #16
    5f3a:	b570      	push	{r4, r5, r6, lr}
    5f3c:	f101 0c20 	add.w	ip, r1, #32
    5f40:	f023 050f 	bic.w	r5, r3, #15
    5f44:	f101 0e10 	add.w	lr, r1, #16
    5f48:	f100 0410 	add.w	r4, r0, #16
    5f4c:	44ac      	add	ip, r5
    5f4e:	091b      	lsrs	r3, r3, #4
    5f50:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5f54:	f844 5c10 	str.w	r5, [r4, #-16]
    5f58:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5f5c:	f844 5c0c 	str.w	r5, [r4, #-12]
    5f60:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5f64:	f844 5c08 	str.w	r5, [r4, #-8]
    5f68:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5f6c:	f844 5c04 	str.w	r5, [r4, #-4]
    5f70:	f10e 0e10 	add.w	lr, lr, #16
    5f74:	45e6      	cmp	lr, ip
    5f76:	f104 0410 	add.w	r4, r4, #16
    5f7a:	d1e9      	bne.n	5f50 <memmove+0x64>
    5f7c:	3301      	adds	r3, #1
    5f7e:	f012 0f0c 	tst.w	r2, #12
    5f82:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5f86:	f002 040f 	and.w	r4, r2, #15
    5f8a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5f8e:	d027      	beq.n	5fe0 <memmove+0xf4>
    5f90:	3c04      	subs	r4, #4
    5f92:	f024 0603 	bic.w	r6, r4, #3
    5f96:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5f9a:	441e      	add	r6, r3
    5f9c:	1f1c      	subs	r4, r3, #4
    5f9e:	468e      	mov	lr, r1
    5fa0:	f85e 5b04 	ldr.w	r5, [lr], #4
    5fa4:	f844 5f04 	str.w	r5, [r4, #4]!
    5fa8:	42b4      	cmp	r4, r6
    5faa:	d1f9      	bne.n	5fa0 <memmove+0xb4>
    5fac:	f10c 0401 	add.w	r4, ip, #1
    5fb0:	f002 0203 	and.w	r2, r2, #3
    5fb4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5fbc:	f102 3cff 	add.w	ip, r2, #4294967295
    5fc0:	b14a      	cbz	r2, 5fd6 <memmove+0xea>
    5fc2:	f10c 0c01 	add.w	ip, ip, #1
    5fc6:	3b01      	subs	r3, #1
    5fc8:	448c      	add	ip, r1
    5fca:	f811 2b01 	ldrb.w	r2, [r1], #1
    5fce:	f803 2f01 	strb.w	r2, [r3, #1]!
    5fd2:	4561      	cmp	r1, ip
    5fd4:	d1f9      	bne.n	5fca <memmove+0xde>
    5fd6:	bd70      	pop	{r4, r5, r6, pc}
    5fd8:	f102 3cff 	add.w	ip, r2, #4294967295
    5fdc:	4603      	mov	r3, r0
    5fde:	e79b      	b.n	5f18 <memmove+0x2c>
    5fe0:	4622      	mov	r2, r4
    5fe2:	e7eb      	b.n	5fbc <memmove+0xd0>

00005fe4 <memset>:
    5fe4:	0783      	lsls	r3, r0, #30
    5fe6:	b530      	push	{r4, r5, lr}
    5fe8:	d048      	beq.n	607c <memset+0x98>
    5fea:	1e54      	subs	r4, r2, #1
    5fec:	2a00      	cmp	r2, #0
    5fee:	d03f      	beq.n	6070 <memset+0x8c>
    5ff0:	b2ca      	uxtb	r2, r1
    5ff2:	4603      	mov	r3, r0
    5ff4:	e001      	b.n	5ffa <memset+0x16>
    5ff6:	3c01      	subs	r4, #1
    5ff8:	d33a      	bcc.n	6070 <memset+0x8c>
    5ffa:	f803 2b01 	strb.w	r2, [r3], #1
    5ffe:	079d      	lsls	r5, r3, #30
    6000:	d1f9      	bne.n	5ff6 <memset+0x12>
    6002:	2c03      	cmp	r4, #3
    6004:	d92d      	bls.n	6062 <memset+0x7e>
    6006:	b2cd      	uxtb	r5, r1
    6008:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    600c:	2c0f      	cmp	r4, #15
    600e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    6012:	d936      	bls.n	6082 <memset+0x9e>
    6014:	f1a4 0210 	sub.w	r2, r4, #16
    6018:	f022 0c0f 	bic.w	ip, r2, #15
    601c:	f103 0e20 	add.w	lr, r3, #32
    6020:	44e6      	add	lr, ip
    6022:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    6026:	f103 0210 	add.w	r2, r3, #16
    602a:	e942 5504 	strd	r5, r5, [r2, #-16]
    602e:	e942 5502 	strd	r5, r5, [r2, #-8]
    6032:	3210      	adds	r2, #16
    6034:	4572      	cmp	r2, lr
    6036:	d1f8      	bne.n	602a <memset+0x46>
    6038:	f10c 0201 	add.w	r2, ip, #1
    603c:	f014 0f0c 	tst.w	r4, #12
    6040:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    6044:	f004 0c0f 	and.w	ip, r4, #15
    6048:	d013      	beq.n	6072 <memset+0x8e>
    604a:	f1ac 0304 	sub.w	r3, ip, #4
    604e:	f023 0303 	bic.w	r3, r3, #3
    6052:	3304      	adds	r3, #4
    6054:	4413      	add	r3, r2
    6056:	f842 5b04 	str.w	r5, [r2], #4
    605a:	4293      	cmp	r3, r2
    605c:	d1fb      	bne.n	6056 <memset+0x72>
    605e:	f00c 0403 	and.w	r4, ip, #3
    6062:	b12c      	cbz	r4, 6070 <memset+0x8c>
    6064:	b2c9      	uxtb	r1, r1
    6066:	441c      	add	r4, r3
    6068:	f803 1b01 	strb.w	r1, [r3], #1
    606c:	429c      	cmp	r4, r3
    606e:	d1fb      	bne.n	6068 <memset+0x84>
    6070:	bd30      	pop	{r4, r5, pc}
    6072:	4664      	mov	r4, ip
    6074:	4613      	mov	r3, r2
    6076:	2c00      	cmp	r4, #0
    6078:	d1f4      	bne.n	6064 <memset+0x80>
    607a:	e7f9      	b.n	6070 <memset+0x8c>
    607c:	4603      	mov	r3, r0
    607e:	4614      	mov	r4, r2
    6080:	e7bf      	b.n	6002 <memset+0x1e>
    6082:	461a      	mov	r2, r3
    6084:	46a4      	mov	ip, r4
    6086:	e7e0      	b.n	604a <memset+0x66>

00006088 <strchr>:
    6088:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    608c:	4603      	mov	r3, r0
    608e:	d044      	beq.n	611a <strchr+0x92>
    6090:	0782      	lsls	r2, r0, #30
    6092:	d132      	bne.n	60fa <strchr+0x72>
    6094:	b510      	push	{r4, lr}
    6096:	6804      	ldr	r4, [r0, #0]
    6098:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    609c:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    60a0:	ea8e 0204 	eor.w	r2, lr, r4
    60a4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    60a8:	ea23 0302 	bic.w	r3, r3, r2
    60ac:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    60b0:	ea22 0204 	bic.w	r2, r2, r4
    60b4:	4313      	orrs	r3, r2
    60b6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    60ba:	d10f      	bne.n	60dc <strchr+0x54>
    60bc:	f850 4f04 	ldr.w	r4, [r0, #4]!
    60c0:	ea84 0c0e 	eor.w	ip, r4, lr
    60c4:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    60c8:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    60cc:	ea23 0304 	bic.w	r3, r3, r4
    60d0:	ea22 020c 	bic.w	r2, r2, ip
    60d4:	4313      	orrs	r3, r2
    60d6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    60da:	d0ef      	beq.n	60bc <strchr+0x34>
    60dc:	7803      	ldrb	r3, [r0, #0]
    60de:	b923      	cbnz	r3, 60ea <strchr+0x62>
    60e0:	e036      	b.n	6150 <strchr+0xc8>
    60e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    60e6:	2b00      	cmp	r3, #0
    60e8:	d032      	beq.n	6150 <strchr+0xc8>
    60ea:	4299      	cmp	r1, r3
    60ec:	d1f9      	bne.n	60e2 <strchr+0x5a>
    60ee:	bd10      	pop	{r4, pc}
    60f0:	428a      	cmp	r2, r1
    60f2:	d011      	beq.n	6118 <strchr+0x90>
    60f4:	079a      	lsls	r2, r3, #30
    60f6:	4618      	mov	r0, r3
    60f8:	d0cc      	beq.n	6094 <strchr+0xc>
    60fa:	4618      	mov	r0, r3
    60fc:	f813 2b01 	ldrb.w	r2, [r3], #1
    6100:	2a00      	cmp	r2, #0
    6102:	d1f5      	bne.n	60f0 <strchr+0x68>
    6104:	4610      	mov	r0, r2
    6106:	4770      	bx	lr
    6108:	0799      	lsls	r1, r3, #30
    610a:	4618      	mov	r0, r3
    610c:	d007      	beq.n	611e <strchr+0x96>
    610e:	4618      	mov	r0, r3
    6110:	3301      	adds	r3, #1
    6112:	7802      	ldrb	r2, [r0, #0]
    6114:	2a00      	cmp	r2, #0
    6116:	d1f7      	bne.n	6108 <strchr+0x80>
    6118:	4770      	bx	lr
    611a:	0782      	lsls	r2, r0, #30
    611c:	d1f7      	bne.n	610e <strchr+0x86>
    611e:	6802      	ldr	r2, [r0, #0]
    6120:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    6124:	ea23 0302 	bic.w	r3, r3, r2
    6128:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    612c:	d108      	bne.n	6140 <strchr+0xb8>
    612e:	f850 2f04 	ldr.w	r2, [r0, #4]!
    6132:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    6136:	ea23 0302 	bic.w	r3, r3, r2
    613a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    613e:	d0f6      	beq.n	612e <strchr+0xa6>
    6140:	7803      	ldrb	r3, [r0, #0]
    6142:	2b00      	cmp	r3, #0
    6144:	d0e8      	beq.n	6118 <strchr+0x90>
    6146:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    614a:	2b00      	cmp	r3, #0
    614c:	d1fb      	bne.n	6146 <strchr+0xbe>
    614e:	4770      	bx	lr
    6150:	4618      	mov	r0, r3
    6152:	bd10      	pop	{r4, pc}

00006154 <strncpy>:
    6154:	ea40 0301 	orr.w	r3, r0, r1
    6158:	079b      	lsls	r3, r3, #30
    615a:	b530      	push	{r4, r5, lr}
    615c:	d101      	bne.n	6162 <strncpy+0xe>
    615e:	2a03      	cmp	r2, #3
    6160:	d80f      	bhi.n	6182 <strncpy+0x2e>
    6162:	4684      	mov	ip, r0
    6164:	f101 3eff 	add.w	lr, r1, #4294967295
    6168:	e007      	b.n	617a <strncpy+0x26>
    616a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    616e:	f803 1b01 	strb.w	r1, [r3], #1
    6172:	1e54      	subs	r4, r2, #1
    6174:	b1c1      	cbz	r1, 61a8 <strncpy+0x54>
    6176:	469c      	mov	ip, r3
    6178:	4622      	mov	r2, r4
    617a:	4663      	mov	r3, ip
    617c:	2a00      	cmp	r2, #0
    617e:	d1f4      	bne.n	616a <strncpy+0x16>
    6180:	bd30      	pop	{r4, r5, pc}
    6182:	460b      	mov	r3, r1
    6184:	4684      	mov	ip, r0
    6186:	4619      	mov	r1, r3
    6188:	f853 5b04 	ldr.w	r5, [r3], #4
    618c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    6190:	ea24 0405 	bic.w	r4, r4, r5
    6194:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    6198:	d1e4      	bne.n	6164 <strncpy+0x10>
    619a:	3a04      	subs	r2, #4
    619c:	2a03      	cmp	r2, #3
    619e:	f84c 5b04 	str.w	r5, [ip], #4
    61a2:	4619      	mov	r1, r3
    61a4:	d8ef      	bhi.n	6186 <strncpy+0x32>
    61a6:	e7dd      	b.n	6164 <strncpy+0x10>
    61a8:	4494      	add	ip, r2
    61aa:	2c00      	cmp	r4, #0
    61ac:	d0e8      	beq.n	6180 <strncpy+0x2c>
    61ae:	f803 1b01 	strb.w	r1, [r3], #1
    61b2:	4563      	cmp	r3, ip
    61b4:	d1fb      	bne.n	61ae <strncpy+0x5a>
    61b6:	bd30      	pop	{r4, r5, pc}

000061b8 <critical_factorization>:
    61b8:	2901      	cmp	r1, #1
    61ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61be:	d95b      	bls.n	6278 <critical_factorization+0xc0>
    61c0:	f04f 0801 	mov.w	r8, #1
    61c4:	46c6      	mov	lr, r8
    61c6:	2400      	movs	r4, #0
    61c8:	f04f 35ff 	mov.w	r5, #4294967295
    61cc:	4643      	mov	r3, r8
    61ce:	e008      	b.n	61e2 <critical_factorization+0x2a>
    61d0:	eba3 0805 	sub.w	r8, r3, r5
    61d4:	461c      	mov	r4, r3
    61d6:	f04f 0e01 	mov.w	lr, #1
    61da:	eb04 030e 	add.w	r3, r4, lr
    61de:	428b      	cmp	r3, r1
    61e0:	d210      	bcs.n	6204 <critical_factorization+0x4c>
    61e2:	eb00 0c0e 	add.w	ip, r0, lr
    61e6:	5cc7      	ldrb	r7, [r0, r3]
    61e8:	f81c 6005 	ldrb.w	r6, [ip, r5]
    61ec:	42b7      	cmp	r7, r6
    61ee:	d3ef      	bcc.n	61d0 <critical_factorization+0x18>
    61f0:	d032      	beq.n	6258 <critical_factorization+0xa0>
    61f2:	f04f 0801 	mov.w	r8, #1
    61f6:	4625      	mov	r5, r4
    61f8:	46c6      	mov	lr, r8
    61fa:	4444      	add	r4, r8
    61fc:	eb04 030e 	add.w	r3, r4, lr
    6200:	428b      	cmp	r3, r1
    6202:	d3ee      	bcc.n	61e2 <critical_factorization+0x2a>
    6204:	2701      	movs	r7, #1
    6206:	f8c2 8000 	str.w	r8, [r2]
    620a:	46be      	mov	lr, r7
    620c:	2400      	movs	r4, #0
    620e:	f04f 36ff 	mov.w	r6, #4294967295
    6212:	463b      	mov	r3, r7
    6214:	e007      	b.n	6226 <critical_factorization+0x6e>
    6216:	1b9f      	subs	r7, r3, r6
    6218:	461c      	mov	r4, r3
    621a:	f04f 0e01 	mov.w	lr, #1
    621e:	eb04 030e 	add.w	r3, r4, lr
    6222:	428b      	cmp	r3, r1
    6224:	d210      	bcs.n	6248 <critical_factorization+0x90>
    6226:	eb00 0c06 	add.w	ip, r0, r6
    622a:	f810 8003 	ldrb.w	r8, [r0, r3]
    622e:	f81c c00e 	ldrb.w	ip, [ip, lr]
    6232:	45e0      	cmp	r8, ip
    6234:	d8ef      	bhi.n	6216 <critical_factorization+0x5e>
    6236:	d017      	beq.n	6268 <critical_factorization+0xb0>
    6238:	2701      	movs	r7, #1
    623a:	4626      	mov	r6, r4
    623c:	46be      	mov	lr, r7
    623e:	443c      	add	r4, r7
    6240:	eb04 030e 	add.w	r3, r4, lr
    6244:	428b      	cmp	r3, r1
    6246:	d3ee      	bcc.n	6226 <critical_factorization+0x6e>
    6248:	3601      	adds	r6, #1
    624a:	1c68      	adds	r0, r5, #1
    624c:	4286      	cmp	r6, r0
    624e:	d301      	bcc.n	6254 <critical_factorization+0x9c>
    6250:	6017      	str	r7, [r2, #0]
    6252:	4630      	mov	r0, r6
    6254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6258:	45c6      	cmp	lr, r8
    625a:	bf0a      	itet	eq
    625c:	4474      	addeq	r4, lr
    625e:	f10e 0e01 	addne.w	lr, lr, #1
    6262:	f04f 0e01 	moveq.w	lr, #1
    6266:	e7b8      	b.n	61da <critical_factorization+0x22>
    6268:	45be      	cmp	lr, r7
    626a:	bf0a      	itet	eq
    626c:	4474      	addeq	r4, lr
    626e:	f10e 0e01 	addne.w	lr, lr, #1
    6272:	f04f 0e01 	moveq.w	lr, #1
    6276:	e7d2      	b.n	621e <critical_factorization+0x66>
    6278:	2701      	movs	r7, #1
    627a:	2600      	movs	r6, #0
    627c:	e7e8      	b.n	6250 <critical_factorization+0x98>
    627e:	bf00      	nop

00006280 <two_way_long_needle>:
    6280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6284:	4692      	mov	sl, r2
    6286:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    628a:	aa05      	add	r2, sp, #20
    628c:	4681      	mov	r9, r0
    628e:	460f      	mov	r7, r1
    6290:	4650      	mov	r0, sl
    6292:	4619      	mov	r1, r3
    6294:	461d      	mov	r5, r3
    6296:	f7ff ff8f 	bl	61b8 <critical_factorization>
    629a:	4613      	mov	r3, r2
    629c:	4683      	mov	fp, r0
    629e:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    62a2:	f843 5f04 	str.w	r5, [r3, #4]!
    62a6:	4293      	cmp	r3, r2
    62a8:	d1fb      	bne.n	62a2 <two_way_long_needle+0x22>
    62aa:	2d00      	cmp	r5, #0
    62ac:	f000 80df 	beq.w	646e <two_way_long_needle+0x1ee>
    62b0:	1e6c      	subs	r4, r5, #1
    62b2:	ae06      	add	r6, sp, #24
    62b4:	f10a 32ff 	add.w	r2, sl, #4294967295
    62b8:	eb0a 0004 	add.w	r0, sl, r4
    62bc:	9600      	str	r6, [sp, #0]
    62be:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    62c2:	1aab      	subs	r3, r5, r2
    62c4:	3b01      	subs	r3, #1
    62c6:	4453      	add	r3, sl
    62c8:	4282      	cmp	r2, r0
    62ca:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    62ce:	d1f6      	bne.n	62be <two_way_long_needle+0x3e>
    62d0:	9905      	ldr	r1, [sp, #20]
    62d2:	465a      	mov	r2, fp
    62d4:	4451      	add	r1, sl
    62d6:	4650      	mov	r0, sl
    62d8:	f001 fb52 	bl	7980 <memcmp>
    62dc:	2800      	cmp	r0, #0
    62de:	d16f      	bne.n	63c0 <two_way_long_needle+0x140>
    62e0:	f10b 33ff 	add.w	r3, fp, #4294967295
    62e4:	9303      	str	r3, [sp, #12]
    62e6:	f1cb 0301 	rsb	r3, fp, #1
    62ea:	4680      	mov	r8, r0
    62ec:	4606      	mov	r6, r0
    62ee:	9301      	str	r3, [sp, #4]
    62f0:	eb09 0e06 	add.w	lr, r9, r6
    62f4:	9a00      	ldr	r2, [sp, #0]
    62f6:	f81e 3004 	ldrb.w	r3, [lr, r4]
    62fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62fe:	b1db      	cbz	r3, 6338 <two_way_long_needle+0xb8>
    6300:	f1b8 0f00 	cmp.w	r8, #0
    6304:	d003      	beq.n	630e <two_way_long_needle+0x8e>
    6306:	9a05      	ldr	r2, [sp, #20]
    6308:	429a      	cmp	r2, r3
    630a:	d900      	bls.n	630e <two_way_long_needle+0x8e>
    630c:	1aab      	subs	r3, r5, r2
    630e:	441e      	add	r6, r3
    6310:	f04f 0800 	mov.w	r8, #0
    6314:	1b7b      	subs	r3, r7, r5
    6316:	429e      	cmp	r6, r3
    6318:	d9ea      	bls.n	62f0 <two_way_long_needle+0x70>
    631a:	eb09 0007 	add.w	r0, r9, r7
    631e:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    6322:	f001 fb5d 	bl	79e0 <strnlen>
    6326:	4407      	add	r7, r0
    6328:	1b7b      	subs	r3, r7, r5
    632a:	429e      	cmp	r6, r3
    632c:	d9e0      	bls.n	62f0 <two_way_long_needle+0x70>
    632e:	2000      	movs	r0, #0
    6330:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6338:	45c3      	cmp	fp, r8
    633a:	465b      	mov	r3, fp
    633c:	bf38      	it	cc
    633e:	4643      	movcc	r3, r8
    6340:	42a3      	cmp	r3, r4
    6342:	d210      	bcs.n	6366 <two_way_long_needle+0xe6>
    6344:	1e59      	subs	r1, r3, #1
    6346:	18f2      	adds	r2, r6, r3
    6348:	4451      	add	r1, sl
    634a:	444a      	add	r2, r9
    634c:	e002      	b.n	6354 <two_way_long_needle+0xd4>
    634e:	3301      	adds	r3, #1
    6350:	42a3      	cmp	r3, r4
    6352:	d208      	bcs.n	6366 <two_way_long_needle+0xe6>
    6354:	f812 0b01 	ldrb.w	r0, [r2], #1
    6358:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    635c:	4584      	cmp	ip, r0
    635e:	d0f6      	beq.n	634e <two_way_long_needle+0xce>
    6360:	9a01      	ldr	r2, [sp, #4]
    6362:	4416      	add	r6, r2
    6364:	e7d3      	b.n	630e <two_way_long_needle+0x8e>
    6366:	45c3      	cmp	fp, r8
    6368:	9b03      	ldr	r3, [sp, #12]
    636a:	d97e      	bls.n	646a <two_way_long_needle+0x1ea>
    636c:	eb06 020b 	add.w	r2, r6, fp
    6370:	444a      	add	r2, r9
    6372:	eb0a 010b 	add.w	r1, sl, fp
    6376:	9602      	str	r6, [sp, #8]
    6378:	e002      	b.n	6380 <two_way_long_needle+0x100>
    637a:	4543      	cmp	r3, r8
    637c:	d015      	beq.n	63aa <two_way_long_needle+0x12a>
    637e:	4603      	mov	r3, r0
    6380:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    6384:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    6388:	4286      	cmp	r6, r0
    638a:	f103 0c01 	add.w	ip, r3, #1
    638e:	f103 30ff 	add.w	r0, r3, #4294967295
    6392:	d0f2      	beq.n	637a <two_way_long_needle+0xfa>
    6394:	9e02      	ldr	r6, [sp, #8]
    6396:	4663      	mov	r3, ip
    6398:	f108 0801 	add.w	r8, r8, #1
    639c:	4598      	cmp	r8, r3
    639e:	d80a      	bhi.n	63b6 <two_way_long_needle+0x136>
    63a0:	9b05      	ldr	r3, [sp, #20]
    63a2:	441e      	add	r6, r3
    63a4:	eba5 0803 	sub.w	r8, r5, r3
    63a8:	e7b4      	b.n	6314 <two_way_long_needle+0x94>
    63aa:	4643      	mov	r3, r8
    63ac:	f108 0801 	add.w	r8, r8, #1
    63b0:	4598      	cmp	r8, r3
    63b2:	9e02      	ldr	r6, [sp, #8]
    63b4:	d9f4      	bls.n	63a0 <two_way_long_needle+0x120>
    63b6:	4670      	mov	r0, lr
    63b8:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    63bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63c0:	eba5 030b 	sub.w	r3, r5, fp
    63c4:	455b      	cmp	r3, fp
    63c6:	bf38      	it	cc
    63c8:	465b      	movcc	r3, fp
    63ca:	3301      	adds	r3, #1
    63cc:	9305      	str	r3, [sp, #20]
    63ce:	f10b 33ff 	add.w	r3, fp, #4294967295
    63d2:	9301      	str	r3, [sp, #4]
    63d4:	f1cb 0301 	rsb	r3, fp, #1
    63d8:	2600      	movs	r6, #0
    63da:	9302      	str	r3, [sp, #8]
    63dc:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    63e0:	eb09 0106 	add.w	r1, r9, r6
    63e4:	9a00      	ldr	r2, [sp, #0]
    63e6:	5d0b      	ldrb	r3, [r1, r4]
    63e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ec:	b16b      	cbz	r3, 640a <two_way_long_needle+0x18a>
    63ee:	441e      	add	r6, r3
    63f0:	1b7b      	subs	r3, r7, r5
    63f2:	42b3      	cmp	r3, r6
    63f4:	d2f4      	bcs.n	63e0 <two_way_long_needle+0x160>
    63f6:	eb09 0007 	add.w	r0, r9, r7
    63fa:	4641      	mov	r1, r8
    63fc:	f001 faf0 	bl	79e0 <strnlen>
    6400:	4407      	add	r7, r0
    6402:	1b7b      	subs	r3, r7, r5
    6404:	42b3      	cmp	r3, r6
    6406:	d2eb      	bcs.n	63e0 <two_way_long_needle+0x160>
    6408:	e791      	b.n	632e <two_way_long_needle+0xae>
    640a:	45a3      	cmp	fp, r4
    640c:	d214      	bcs.n	6438 <two_way_long_needle+0x1b8>
    640e:	9b01      	ldr	r3, [sp, #4]
    6410:	eb0b 0206 	add.w	r2, fp, r6
    6414:	eb0a 0c03 	add.w	ip, sl, r3
    6418:	444a      	add	r2, r9
    641a:	465b      	mov	r3, fp
    641c:	e002      	b.n	6424 <two_way_long_needle+0x1a4>
    641e:	3301      	adds	r3, #1
    6420:	42a3      	cmp	r3, r4
    6422:	d209      	bcs.n	6438 <two_way_long_needle+0x1b8>
    6424:	f812 0b01 	ldrb.w	r0, [r2], #1
    6428:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    642c:	4586      	cmp	lr, r0
    642e:	d0f6      	beq.n	641e <two_way_long_needle+0x19e>
    6430:	9a02      	ldr	r2, [sp, #8]
    6432:	4416      	add	r6, r2
    6434:	441e      	add	r6, r3
    6436:	e7db      	b.n	63f0 <two_way_long_needle+0x170>
    6438:	f1bb 0f00 	cmp.w	fp, #0
    643c:	d010      	beq.n	6460 <two_way_long_needle+0x1e0>
    643e:	eb0b 0006 	add.w	r0, fp, r6
    6442:	4448      	add	r0, r9
    6444:	eb0a 020b 	add.w	r2, sl, fp
    6448:	e001      	b.n	644e <two_way_long_needle+0x1ce>
    644a:	4553      	cmp	r3, sl
    644c:	d008      	beq.n	6460 <two_way_long_needle+0x1e0>
    644e:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    6452:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    6456:	45e6      	cmp	lr, ip
    6458:	4613      	mov	r3, r2
    645a:	d0f6      	beq.n	644a <two_way_long_needle+0x1ca>
    645c:	9b05      	ldr	r3, [sp, #20]
    645e:	e7c6      	b.n	63ee <two_way_long_needle+0x16e>
    6460:	4608      	mov	r0, r1
    6462:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    646a:	465b      	mov	r3, fp
    646c:	e794      	b.n	6398 <two_way_long_needle+0x118>
    646e:	ab06      	add	r3, sp, #24
    6470:	f04f 34ff 	mov.w	r4, #4294967295
    6474:	9300      	str	r3, [sp, #0]
    6476:	e72b      	b.n	62d0 <two_way_long_needle+0x50>

00006478 <strstr>:
    6478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    647c:	460d      	mov	r5, r1
    647e:	7809      	ldrb	r1, [r1, #0]
    6480:	b090      	sub	sp, #64	; 0x40
    6482:	4604      	mov	r4, r0
    6484:	2900      	cmp	r1, #0
    6486:	d054      	beq.n	6532 <strstr+0xba>
    6488:	786a      	ldrb	r2, [r5, #1]
    648a:	2a00      	cmp	r2, #0
    648c:	f000 8083 	beq.w	6596 <strstr+0x11e>
    6490:	78ab      	ldrb	r3, [r5, #2]
    6492:	2b00      	cmp	r3, #0
    6494:	d051      	beq.n	653a <strstr+0xc2>
    6496:	78e8      	ldrb	r0, [r5, #3]
    6498:	682e      	ldr	r6, [r5, #0]
    649a:	2800      	cmp	r0, #0
    649c:	f000 8082 	beq.w	65a4 <strstr+0x12c>
    64a0:	792b      	ldrb	r3, [r5, #4]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d057      	beq.n	6556 <strstr+0xde>
    64a6:	4628      	mov	r0, r5
    64a8:	f000 fb0a 	bl	6ac0 <strlen>
    64ac:	4606      	mov	r6, r0
    64ae:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    64b2:	4620      	mov	r0, r4
    64b4:	f001 fa94 	bl	79e0 <strnlen>
    64b8:	4286      	cmp	r6, r0
    64ba:	d85b      	bhi.n	6574 <strstr+0xfc>
    64bc:	2efe      	cmp	r6, #254	; 0xfe
    64be:	f200 8086 	bhi.w	65ce <strstr+0x156>
    64c2:	1b80      	subs	r0, r0, r6
    64c4:	1827      	adds	r7, r4, r0
    64c6:	2240      	movs	r2, #64	; 0x40
    64c8:	1c71      	adds	r1, r6, #1
    64ca:	4668      	mov	r0, sp
    64cc:	f7ff fd8a 	bl	5fe4 <memset>
    64d0:	b17e      	cbz	r6, 64f2 <strstr+0x7a>
    64d2:	1e6a      	subs	r2, r5, #1
    64d4:	fa5f fc86 	uxtb.w	ip, r6
    64d8:	1990      	adds	r0, r2, r6
    64da:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    64de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64e2:	3340      	adds	r3, #64	; 0x40
    64e4:	446b      	add	r3, sp
    64e6:	1aa9      	subs	r1, r5, r2
    64e8:	4461      	add	r1, ip
    64ea:	4282      	cmp	r2, r0
    64ec:	f803 1c40 	strb.w	r1, [r3, #-64]
    64f0:	d1f3      	bne.n	64da <strstr+0x62>
    64f2:	3c01      	subs	r4, #1
    64f4:	5da3      	ldrb	r3, [r4, r6]
    64f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    64fa:	3340      	adds	r3, #64	; 0x40
    64fc:	446b      	add	r3, sp
    64fe:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    6502:	441c      	add	r4, r3
    6504:	42a7      	cmp	r7, r4
    6506:	d203      	bcs.n	6510 <strstr+0x98>
    6508:	e039      	b.n	657e <strstr+0x106>
    650a:	4444      	add	r4, r8
    650c:	42a7      	cmp	r7, r4
    650e:	d336      	bcc.n	657e <strstr+0x106>
    6510:	f814 c006 	ldrb.w	ip, [r4, r6]
    6514:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    6518:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    651c:	eb0d 0c03 	add.w	ip, sp, r3
    6520:	4620      	mov	r0, r4
    6522:	4632      	mov	r2, r6
    6524:	4629      	mov	r1, r5
    6526:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    652a:	f001 fa29 	bl	7980 <memcmp>
    652e:	2800      	cmp	r0, #0
    6530:	d1eb      	bne.n	650a <strstr+0x92>
    6532:	4620      	mov	r0, r4
    6534:	b010      	add	sp, #64	; 0x40
    6536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    653a:	7800      	ldrb	r0, [r0, #0]
    653c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    6540:	e000      	b.n	6544 <strstr+0xcc>
    6542:	460c      	mov	r4, r1
    6544:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    6548:	1c61      	adds	r1, r4, #1
    654a:	b198      	cbz	r0, 6574 <strstr+0xfc>
    654c:	429a      	cmp	r2, r3
    654e:	7860      	ldrb	r0, [r4, #1]
    6550:	d1f7      	bne.n	6542 <strstr+0xca>
    6552:	3c01      	subs	r4, #1
    6554:	e7ed      	b.n	6532 <strstr+0xba>
    6556:	7822      	ldrb	r2, [r4, #0]
    6558:	b162      	cbz	r2, 6574 <strstr+0xfc>
    655a:	ba31      	rev	r1, r6
    655c:	e001      	b.n	6562 <strstr+0xea>
    655e:	4299      	cmp	r1, r3
    6560:	d01e      	beq.n	65a0 <strstr+0x128>
    6562:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6566:	4620      	mov	r0, r4
    6568:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    656c:	2a00      	cmp	r2, #0
    656e:	d1f6      	bne.n	655e <strstr+0xe6>
    6570:	4299      	cmp	r1, r3
    6572:	d015      	beq.n	65a0 <strstr+0x128>
    6574:	2400      	movs	r4, #0
    6576:	4620      	mov	r0, r4
    6578:	b010      	add	sp, #64	; 0x40
    657a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    657e:	5dbb      	ldrb	r3, [r7, r6]
    6580:	19b8      	adds	r0, r7, r6
    6582:	2b00      	cmp	r3, #0
    6584:	d0f6      	beq.n	6574 <strstr+0xfc>
    6586:	f44f 6100 	mov.w	r1, #2048	; 0x800
    658a:	f001 fa29 	bl	79e0 <strnlen>
    658e:	4407      	add	r7, r0
    6590:	42bc      	cmp	r4, r7
    6592:	d9ae      	bls.n	64f2 <strstr+0x7a>
    6594:	e7ee      	b.n	6574 <strstr+0xfc>
    6596:	b010      	add	sp, #64	; 0x40
    6598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    659c:	f7ff bd74 	b.w	6088 <strchr>
    65a0:	1ec4      	subs	r4, r0, #3
    65a2:	e7c6      	b.n	6532 <strstr+0xba>
    65a4:	0412      	lsls	r2, r2, #16
    65a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    65aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    65ae:	7821      	ldrb	r1, [r4, #0]
    65b0:	4602      	mov	r2, r0
    65b2:	e000      	b.n	65b6 <strstr+0x13e>
    65b4:	462c      	mov	r4, r5
    65b6:	ea41 0002 	orr.w	r0, r1, r2
    65ba:	1c65      	adds	r5, r4, #1
    65bc:	0202      	lsls	r2, r0, #8
    65be:	2900      	cmp	r1, #0
    65c0:	d0d8      	beq.n	6574 <strstr+0xfc>
    65c2:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    65c6:	7861      	ldrb	r1, [r4, #1]
    65c8:	d1f4      	bne.n	65b4 <strstr+0x13c>
    65ca:	3c02      	subs	r4, #2
    65cc:	e7b1      	b.n	6532 <strstr+0xba>
    65ce:	4601      	mov	r1, r0
    65d0:	4633      	mov	r3, r6
    65d2:	462a      	mov	r2, r5
    65d4:	4620      	mov	r0, r4
    65d6:	b010      	add	sp, #64	; 0x40
    65d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65dc:	f7ff be50 	b.w	6280 <two_way_long_needle>

000065e0 <__locale_mb_cur_max>:
    65e0:	4b01      	ldr	r3, [pc, #4]	; (65e8 <__locale_mb_cur_max+0x8>)
    65e2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    65e6:	4770      	bx	lr
    65e8:	200011b8 	.word	0x200011b8

000065ec <_close_r>:
    65ec:	b538      	push	{r3, r4, r5, lr}
    65ee:	4d07      	ldr	r5, [pc, #28]	; (660c <_close_r+0x20>)
    65f0:	2200      	movs	r2, #0
    65f2:	4604      	mov	r4, r0
    65f4:	4608      	mov	r0, r1
    65f6:	602a      	str	r2, [r5, #0]
    65f8:	f7fd fbce 	bl	3d98 <_close>
    65fc:	1c43      	adds	r3, r0, #1
    65fe:	d000      	beq.n	6602 <_close_r+0x16>
    6600:	bd38      	pop	{r3, r4, r5, pc}
    6602:	682b      	ldr	r3, [r5, #0]
    6604:	2b00      	cmp	r3, #0
    6606:	d0fb      	beq.n	6600 <_close_r+0x14>
    6608:	6023      	str	r3, [r4, #0]
    660a:	bd38      	pop	{r3, r4, r5, pc}
    660c:	20002ae4 	.word	0x20002ae4

00006610 <_lseek_r>:
    6610:	b538      	push	{r3, r4, r5, lr}
    6612:	460c      	mov	r4, r1
    6614:	4d08      	ldr	r5, [pc, #32]	; (6638 <_lseek_r+0x28>)
    6616:	4684      	mov	ip, r0
    6618:	4611      	mov	r1, r2
    661a:	4620      	mov	r0, r4
    661c:	461a      	mov	r2, r3
    661e:	2300      	movs	r3, #0
    6620:	602b      	str	r3, [r5, #0]
    6622:	4664      	mov	r4, ip
    6624:	f7fd fbc4 	bl	3db0 <_lseek>
    6628:	1c43      	adds	r3, r0, #1
    662a:	d000      	beq.n	662e <_lseek_r+0x1e>
    662c:	bd38      	pop	{r3, r4, r5, pc}
    662e:	682b      	ldr	r3, [r5, #0]
    6630:	2b00      	cmp	r3, #0
    6632:	d0fb      	beq.n	662c <_lseek_r+0x1c>
    6634:	6023      	str	r3, [r4, #0]
    6636:	bd38      	pop	{r3, r4, r5, pc}
    6638:	20002ae4 	.word	0x20002ae4

0000663c <_read_r>:
    663c:	b538      	push	{r3, r4, r5, lr}
    663e:	460c      	mov	r4, r1
    6640:	4d08      	ldr	r5, [pc, #32]	; (6664 <_read_r+0x28>)
    6642:	4684      	mov	ip, r0
    6644:	4611      	mov	r1, r2
    6646:	4620      	mov	r0, r4
    6648:	461a      	mov	r2, r3
    664a:	2300      	movs	r3, #0
    664c:	602b      	str	r3, [r5, #0]
    664e:	4664      	mov	r4, ip
    6650:	f7fd fba0 	bl	3d94 <_read>
    6654:	1c43      	adds	r3, r0, #1
    6656:	d000      	beq.n	665a <_read_r+0x1e>
    6658:	bd38      	pop	{r3, r4, r5, pc}
    665a:	682b      	ldr	r3, [r5, #0]
    665c:	2b00      	cmp	r3, #0
    665e:	d0fb      	beq.n	6658 <_read_r+0x1c>
    6660:	6023      	str	r3, [r4, #0]
    6662:	bd38      	pop	{r3, r4, r5, pc}
    6664:	20002ae4 	.word	0x20002ae4

00006668 <_sbrk_r>:
    6668:	b538      	push	{r3, r4, r5, lr}
    666a:	4d07      	ldr	r5, [pc, #28]	; (6688 <_sbrk_r+0x20>)
    666c:	2200      	movs	r2, #0
    666e:	4604      	mov	r4, r0
    6670:	4608      	mov	r0, r1
    6672:	602a      	str	r2, [r5, #0]
    6674:	f7fd fb74 	bl	3d60 <_sbrk>
    6678:	1c43      	adds	r3, r0, #1
    667a:	d000      	beq.n	667e <_sbrk_r+0x16>
    667c:	bd38      	pop	{r3, r4, r5, pc}
    667e:	682b      	ldr	r3, [r5, #0]
    6680:	2b00      	cmp	r3, #0
    6682:	d0fb      	beq.n	667c <_sbrk_r+0x14>
    6684:	6023      	str	r3, [r4, #0]
    6686:	bd38      	pop	{r3, r4, r5, pc}
    6688:	20002ae4 	.word	0x20002ae4

0000668c <_write_r>:
    668c:	b538      	push	{r3, r4, r5, lr}
    668e:	460c      	mov	r4, r1
    6690:	4d08      	ldr	r5, [pc, #32]	; (66b4 <_write_r+0x28>)
    6692:	4684      	mov	ip, r0
    6694:	4611      	mov	r1, r2
    6696:	4620      	mov	r0, r4
    6698:	461a      	mov	r2, r3
    669a:	2300      	movs	r3, #0
    669c:	602b      	str	r3, [r5, #0]
    669e:	4664      	mov	r4, ip
    66a0:	f7fc fac2 	bl	2c28 <_write>
    66a4:	1c43      	adds	r3, r0, #1
    66a6:	d000      	beq.n	66aa <_write_r+0x1e>
    66a8:	bd38      	pop	{r3, r4, r5, pc}
    66aa:	682b      	ldr	r3, [r5, #0]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d0fb      	beq.n	66a8 <_write_r+0x1c>
    66b0:	6023      	str	r3, [r4, #0]
    66b2:	bd38      	pop	{r3, r4, r5, pc}
    66b4:	20002ae4 	.word	0x20002ae4

000066b8 <__errno>:
    66b8:	4b01      	ldr	r3, [pc, #4]	; (66c0 <__errno+0x8>)
    66ba:	6818      	ldr	r0, [r3, #0]
    66bc:	4770      	bx	lr
    66be:	bf00      	nop
    66c0:	20001740 	.word	0x20001740

000066c4 <__libc_init_array>:
    66c4:	b570      	push	{r4, r5, r6, lr}
    66c6:	4e0d      	ldr	r6, [pc, #52]	; (66fc <__libc_init_array+0x38>)
    66c8:	4d0d      	ldr	r5, [pc, #52]	; (6700 <__libc_init_array+0x3c>)
    66ca:	1b76      	subs	r6, r6, r5
    66cc:	10b6      	asrs	r6, r6, #2
    66ce:	d006      	beq.n	66de <__libc_init_array+0x1a>
    66d0:	2400      	movs	r4, #0
    66d2:	f855 3b04 	ldr.w	r3, [r5], #4
    66d6:	3401      	adds	r4, #1
    66d8:	4798      	blx	r3
    66da:	42a6      	cmp	r6, r4
    66dc:	d1f9      	bne.n	66d2 <__libc_init_array+0xe>
    66de:	4e09      	ldr	r6, [pc, #36]	; (6704 <__libc_init_array+0x40>)
    66e0:	4d09      	ldr	r5, [pc, #36]	; (6708 <__libc_init_array+0x44>)
    66e2:	1b76      	subs	r6, r6, r5
    66e4:	f003 fdc4 	bl	a270 <___init_veneer>
    66e8:	10b6      	asrs	r6, r6, #2
    66ea:	d006      	beq.n	66fa <__libc_init_array+0x36>
    66ec:	2400      	movs	r4, #0
    66ee:	f855 3b04 	ldr.w	r3, [r5], #4
    66f2:	3401      	adds	r4, #1
    66f4:	4798      	blx	r3
    66f6:	42a6      	cmp	r6, r4
    66f8:	d1f9      	bne.n	66ee <__libc_init_array+0x2a>
    66fa:	bd70      	pop	{r4, r5, r6, pc}
    66fc:	60001fc8 	.word	0x60001fc8
    6700:	60001fc8 	.word	0x60001fc8
    6704:	60001ff8 	.word	0x60001ff8
    6708:	60001fc8 	.word	0x60001fc8

0000670c <__retarget_lock_init_recursive>:
    670c:	4770      	bx	lr
    670e:	bf00      	nop

00006710 <__retarget_lock_close_recursive>:
    6710:	4770      	bx	lr
    6712:	bf00      	nop

00006714 <__retarget_lock_acquire_recursive>:
    6714:	4770      	bx	lr
    6716:	bf00      	nop

00006718 <__retarget_lock_release_recursive>:
    6718:	4770      	bx	lr
    671a:	bf00      	nop
    671c:	0000      	movs	r0, r0
    671e:	0000      	movs	r0, r0
    6720:	eba2 0003 	sub.w	r0, r2, r3
    6724:	4770      	bx	lr
    6726:	bf00      	nop

00006728 <strcmp>:
    6728:	7802      	ldrb	r2, [r0, #0]
    672a:	780b      	ldrb	r3, [r1, #0]
    672c:	2a01      	cmp	r2, #1
    672e:	bf28      	it	cs
    6730:	429a      	cmpcs	r2, r3
    6732:	d1f5      	bne.n	6720 <__retarget_lock_release_recursive+0x8>
    6734:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    6738:	ea40 0401 	orr.w	r4, r0, r1
    673c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6740:	f06f 0c00 	mvn.w	ip, #0
    6744:	ea4f 7244 	mov.w	r2, r4, lsl #29
    6748:	b312      	cbz	r2, 6790 <strcmp+0x68>
    674a:	ea80 0401 	eor.w	r4, r0, r1
    674e:	f014 0f07 	tst.w	r4, #7
    6752:	d16a      	bne.n	682a <strcmp+0x102>
    6754:	f000 0407 	and.w	r4, r0, #7
    6758:	f020 0007 	bic.w	r0, r0, #7
    675c:	f004 0503 	and.w	r5, r4, #3
    6760:	f021 0107 	bic.w	r1, r1, #7
    6764:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6768:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    676c:	f014 0f04 	tst.w	r4, #4
    6770:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6774:	fa0c f405 	lsl.w	r4, ip, r5
    6778:	ea62 0204 	orn	r2, r2, r4
    677c:	ea66 0604 	orn	r6, r6, r4
    6780:	d00a      	beq.n	6798 <strcmp+0x70>
    6782:	ea63 0304 	orn	r3, r3, r4
    6786:	4662      	mov	r2, ip
    6788:	ea67 0704 	orn	r7, r7, r4
    678c:	4666      	mov	r6, ip
    678e:	e003      	b.n	6798 <strcmp+0x70>
    6790:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    6794:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    6798:	fa82 f54c 	uadd8	r5, r2, ip
    679c:	ea82 0406 	eor.w	r4, r2, r6
    67a0:	faa4 f48c 	sel	r4, r4, ip
    67a4:	bb6c      	cbnz	r4, 6802 <strcmp+0xda>
    67a6:	fa83 f54c 	uadd8	r5, r3, ip
    67aa:	ea83 0507 	eor.w	r5, r3, r7
    67ae:	faa5 f58c 	sel	r5, r5, ip
    67b2:	b995      	cbnz	r5, 67da <strcmp+0xb2>
    67b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    67b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    67bc:	fa82 f54c 	uadd8	r5, r2, ip
    67c0:	ea82 0406 	eor.w	r4, r2, r6
    67c4:	faa4 f48c 	sel	r4, r4, ip
    67c8:	fa83 f54c 	uadd8	r5, r3, ip
    67cc:	ea83 0507 	eor.w	r5, r3, r7
    67d0:	faa5 f58c 	sel	r5, r5, ip
    67d4:	4325      	orrs	r5, r4
    67d6:	d0db      	beq.n	6790 <strcmp+0x68>
    67d8:	b99c      	cbnz	r4, 6802 <strcmp+0xda>
    67da:	ba2d      	rev	r5, r5
    67dc:	fab5 f485 	clz	r4, r5
    67e0:	f024 0407 	bic.w	r4, r4, #7
    67e4:	fa27 f104 	lsr.w	r1, r7, r4
    67e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    67ec:	fa23 f304 	lsr.w	r3, r3, r4
    67f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    67f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    67f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    67fc:	eba0 0001 	sub.w	r0, r0, r1
    6800:	4770      	bx	lr
    6802:	ba24      	rev	r4, r4
    6804:	fab4 f484 	clz	r4, r4
    6808:	f024 0407 	bic.w	r4, r4, #7
    680c:	fa26 f104 	lsr.w	r1, r6, r4
    6810:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    6814:	fa22 f204 	lsr.w	r2, r2, r4
    6818:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    681c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6820:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6824:	eba0 0001 	sub.w	r0, r0, r1
    6828:	4770      	bx	lr
    682a:	f014 0f03 	tst.w	r4, #3
    682e:	d13c      	bne.n	68aa <strcmp+0x182>
    6830:	f010 0403 	ands.w	r4, r0, #3
    6834:	d128      	bne.n	6888 <strcmp+0x160>
    6836:	f850 2b08 	ldr.w	r2, [r0], #8
    683a:	f851 3b08 	ldr.w	r3, [r1], #8
    683e:	fa82 f54c 	uadd8	r5, r2, ip
    6842:	ea82 0503 	eor.w	r5, r2, r3
    6846:	faa5 f58c 	sel	r5, r5, ip
    684a:	b95d      	cbnz	r5, 6864 <strcmp+0x13c>
    684c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6850:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6854:	fa82 f54c 	uadd8	r5, r2, ip
    6858:	ea82 0503 	eor.w	r5, r2, r3
    685c:	faa5 f58c 	sel	r5, r5, ip
    6860:	2d00      	cmp	r5, #0
    6862:	d0e8      	beq.n	6836 <strcmp+0x10e>
    6864:	ba2d      	rev	r5, r5
    6866:	fab5 f485 	clz	r4, r5
    686a:	f024 0407 	bic.w	r4, r4, #7
    686e:	fa23 f104 	lsr.w	r1, r3, r4
    6872:	fa22 f204 	lsr.w	r2, r2, r4
    6876:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    687a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    687e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6882:	eba0 0001 	sub.w	r0, r0, r1
    6886:	4770      	bx	lr
    6888:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    688c:	f020 0003 	bic.w	r0, r0, #3
    6890:	f850 2b08 	ldr.w	r2, [r0], #8
    6894:	f021 0103 	bic.w	r1, r1, #3
    6898:	f851 3b08 	ldr.w	r3, [r1], #8
    689c:	fa0c f404 	lsl.w	r4, ip, r4
    68a0:	ea62 0204 	orn	r2, r2, r4
    68a4:	ea63 0304 	orn	r3, r3, r4
    68a8:	e7c9      	b.n	683e <strcmp+0x116>
    68aa:	f010 0403 	ands.w	r4, r0, #3
    68ae:	d01a      	beq.n	68e6 <strcmp+0x1be>
    68b0:	eba1 0104 	sub.w	r1, r1, r4
    68b4:	f020 0003 	bic.w	r0, r0, #3
    68b8:	07e4      	lsls	r4, r4, #31
    68ba:	f850 2b04 	ldr.w	r2, [r0], #4
    68be:	d006      	beq.n	68ce <strcmp+0x1a6>
    68c0:	d20f      	bcs.n	68e2 <strcmp+0x1ba>
    68c2:	788b      	ldrb	r3, [r1, #2]
    68c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    68c8:	1ae4      	subs	r4, r4, r3
    68ca:	d106      	bne.n	68da <strcmp+0x1b2>
    68cc:	b12b      	cbz	r3, 68da <strcmp+0x1b2>
    68ce:	78cb      	ldrb	r3, [r1, #3]
    68d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    68d4:	1ae4      	subs	r4, r4, r3
    68d6:	d100      	bne.n	68da <strcmp+0x1b2>
    68d8:	b91b      	cbnz	r3, 68e2 <strcmp+0x1ba>
    68da:	4620      	mov	r0, r4
    68dc:	f85d 4b10 	ldr.w	r4, [sp], #16
    68e0:	4770      	bx	lr
    68e2:	f101 0104 	add.w	r1, r1, #4
    68e6:	f850 2b04 	ldr.w	r2, [r0], #4
    68ea:	07cc      	lsls	r4, r1, #31
    68ec:	f021 0103 	bic.w	r1, r1, #3
    68f0:	f851 3b04 	ldr.w	r3, [r1], #4
    68f4:	d848      	bhi.n	6988 <strcmp+0x260>
    68f6:	d224      	bcs.n	6942 <strcmp+0x21a>
    68f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    68fc:	fa82 f54c 	uadd8	r5, r2, ip
    6900:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    6904:	faa5 f58c 	sel	r5, r5, ip
    6908:	d10a      	bne.n	6920 <strcmp+0x1f8>
    690a:	b965      	cbnz	r5, 6926 <strcmp+0x1fe>
    690c:	f851 3b04 	ldr.w	r3, [r1], #4
    6910:	ea84 0402 	eor.w	r4, r4, r2
    6914:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    6918:	d10e      	bne.n	6938 <strcmp+0x210>
    691a:	f850 2b04 	ldr.w	r2, [r0], #4
    691e:	e7eb      	b.n	68f8 <strcmp+0x1d0>
    6920:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6924:	e055      	b.n	69d2 <strcmp+0x2aa>
    6926:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    692a:	d14d      	bne.n	69c8 <strcmp+0x2a0>
    692c:	7808      	ldrb	r0, [r1, #0]
    692e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6932:	f1c0 0000 	rsb	r0, r0, #0
    6936:	4770      	bx	lr
    6938:	ea4f 6212 	mov.w	r2, r2, lsr #24
    693c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6940:	e047      	b.n	69d2 <strcmp+0x2aa>
    6942:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    6946:	fa82 f54c 	uadd8	r5, r2, ip
    694a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    694e:	faa5 f58c 	sel	r5, r5, ip
    6952:	d10a      	bne.n	696a <strcmp+0x242>
    6954:	b965      	cbnz	r5, 6970 <strcmp+0x248>
    6956:	f851 3b04 	ldr.w	r3, [r1], #4
    695a:	ea84 0402 	eor.w	r4, r4, r2
    695e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    6962:	d10c      	bne.n	697e <strcmp+0x256>
    6964:	f850 2b04 	ldr.w	r2, [r0], #4
    6968:	e7eb      	b.n	6942 <strcmp+0x21a>
    696a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    696e:	e030      	b.n	69d2 <strcmp+0x2aa>
    6970:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    6974:	d128      	bne.n	69c8 <strcmp+0x2a0>
    6976:	880b      	ldrh	r3, [r1, #0]
    6978:	ea4f 4212 	mov.w	r2, r2, lsr #16
    697c:	e029      	b.n	69d2 <strcmp+0x2aa>
    697e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    6982:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    6986:	e024      	b.n	69d2 <strcmp+0x2aa>
    6988:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    698c:	fa82 f54c 	uadd8	r5, r2, ip
    6990:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    6994:	faa5 f58c 	sel	r5, r5, ip
    6998:	d10a      	bne.n	69b0 <strcmp+0x288>
    699a:	b965      	cbnz	r5, 69b6 <strcmp+0x28e>
    699c:	f851 3b04 	ldr.w	r3, [r1], #4
    69a0:	ea84 0402 	eor.w	r4, r4, r2
    69a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    69a8:	d109      	bne.n	69be <strcmp+0x296>
    69aa:	f850 2b04 	ldr.w	r2, [r0], #4
    69ae:	e7eb      	b.n	6988 <strcmp+0x260>
    69b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    69b4:	e00d      	b.n	69d2 <strcmp+0x2aa>
    69b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    69ba:	d105      	bne.n	69c8 <strcmp+0x2a0>
    69bc:	680b      	ldr	r3, [r1, #0]
    69be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    69c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    69c6:	e004      	b.n	69d2 <strcmp+0x2aa>
    69c8:	f04f 0000 	mov.w	r0, #0
    69cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    69d0:	4770      	bx	lr
    69d2:	ba12      	rev	r2, r2
    69d4:	ba1b      	rev	r3, r3
    69d6:	fa82 f44c 	uadd8	r4, r2, ip
    69da:	ea82 0403 	eor.w	r4, r2, r3
    69de:	faa4 f58c 	sel	r5, r4, ip
    69e2:	fab5 f485 	clz	r4, r5
    69e6:	fa02 f204 	lsl.w	r2, r2, r4
    69ea:	fa03 f304 	lsl.w	r3, r3, r4
    69ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    69f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    69f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    69fa:	4770      	bx	lr

000069fc <strcpy>:
    69fc:	ea80 0201 	eor.w	r2, r0, r1
    6a00:	4684      	mov	ip, r0
    6a02:	f012 0f03 	tst.w	r2, #3
    6a06:	d14f      	bne.n	6aa8 <strcpy+0xac>
    6a08:	f011 0f03 	tst.w	r1, #3
    6a0c:	d132      	bne.n	6a74 <strcpy+0x78>
    6a0e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6a12:	f011 0f04 	tst.w	r1, #4
    6a16:	f851 3b04 	ldr.w	r3, [r1], #4
    6a1a:	d00b      	beq.n	6a34 <strcpy+0x38>
    6a1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6a20:	439a      	bics	r2, r3
    6a22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a26:	bf04      	itt	eq
    6a28:	f84c 3b04 	streq.w	r3, [ip], #4
    6a2c:	f851 3b04 	ldreq.w	r3, [r1], #4
    6a30:	d116      	bne.n	6a60 <strcpy+0x64>
    6a32:	bf00      	nop
    6a34:	f851 4b04 	ldr.w	r4, [r1], #4
    6a38:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6a3c:	439a      	bics	r2, r3
    6a3e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a42:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6a46:	d10b      	bne.n	6a60 <strcpy+0x64>
    6a48:	f84c 3b04 	str.w	r3, [ip], #4
    6a4c:	43a2      	bics	r2, r4
    6a4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a52:	bf04      	itt	eq
    6a54:	f851 3b04 	ldreq.w	r3, [r1], #4
    6a58:	f84c 4b04 	streq.w	r4, [ip], #4
    6a5c:	d0ea      	beq.n	6a34 <strcpy+0x38>
    6a5e:	4623      	mov	r3, r4
    6a60:	f80c 3b01 	strb.w	r3, [ip], #1
    6a64:	f013 0fff 	tst.w	r3, #255	; 0xff
    6a68:	ea4f 2333 	mov.w	r3, r3, ror #8
    6a6c:	d1f8      	bne.n	6a60 <strcpy+0x64>
    6a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    6a72:	4770      	bx	lr
    6a74:	f011 0f01 	tst.w	r1, #1
    6a78:	d006      	beq.n	6a88 <strcpy+0x8c>
    6a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
    6a7e:	f80c 2b01 	strb.w	r2, [ip], #1
    6a82:	2a00      	cmp	r2, #0
    6a84:	bf08      	it	eq
    6a86:	4770      	bxeq	lr
    6a88:	f011 0f02 	tst.w	r1, #2
    6a8c:	d0bf      	beq.n	6a0e <strcpy+0x12>
    6a8e:	f831 2b02 	ldrh.w	r2, [r1], #2
    6a92:	f012 0fff 	tst.w	r2, #255	; 0xff
    6a96:	bf16      	itet	ne
    6a98:	f82c 2b02 	strhne.w	r2, [ip], #2
    6a9c:	f88c 2000 	strbeq.w	r2, [ip]
    6aa0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    6aa4:	d1b3      	bne.n	6a0e <strcpy+0x12>
    6aa6:	4770      	bx	lr
    6aa8:	f811 2b01 	ldrb.w	r2, [r1], #1
    6aac:	f80c 2b01 	strb.w	r2, [ip], #1
    6ab0:	2a00      	cmp	r2, #0
    6ab2:	d1f9      	bne.n	6aa8 <strcpy+0xac>
    6ab4:	4770      	bx	lr
    6ab6:	bf00      	nop
	...

00006ac0 <strlen>:
    6ac0:	f890 f000 	pld	[r0]
    6ac4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6ac8:	f020 0107 	bic.w	r1, r0, #7
    6acc:	f06f 0c00 	mvn.w	ip, #0
    6ad0:	f010 0407 	ands.w	r4, r0, #7
    6ad4:	f891 f020 	pld	[r1, #32]
    6ad8:	f040 8049 	bne.w	6b6e <strlen+0xae>
    6adc:	f04f 0400 	mov.w	r4, #0
    6ae0:	f06f 0007 	mvn.w	r0, #7
    6ae4:	e9d1 2300 	ldrd	r2, r3, [r1]
    6ae8:	f891 f040 	pld	[r1, #64]	; 0x40
    6aec:	f100 0008 	add.w	r0, r0, #8
    6af0:	fa82 f24c 	uadd8	r2, r2, ip
    6af4:	faa4 f28c 	sel	r2, r4, ip
    6af8:	fa83 f34c 	uadd8	r3, r3, ip
    6afc:	faa2 f38c 	sel	r3, r2, ip
    6b00:	bb4b      	cbnz	r3, 6b56 <strlen+0x96>
    6b02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6b06:	fa82 f24c 	uadd8	r2, r2, ip
    6b0a:	f100 0008 	add.w	r0, r0, #8
    6b0e:	faa4 f28c 	sel	r2, r4, ip
    6b12:	fa83 f34c 	uadd8	r3, r3, ip
    6b16:	faa2 f38c 	sel	r3, r2, ip
    6b1a:	b9e3      	cbnz	r3, 6b56 <strlen+0x96>
    6b1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6b20:	fa82 f24c 	uadd8	r2, r2, ip
    6b24:	f100 0008 	add.w	r0, r0, #8
    6b28:	faa4 f28c 	sel	r2, r4, ip
    6b2c:	fa83 f34c 	uadd8	r3, r3, ip
    6b30:	faa2 f38c 	sel	r3, r2, ip
    6b34:	b97b      	cbnz	r3, 6b56 <strlen+0x96>
    6b36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    6b3a:	f101 0120 	add.w	r1, r1, #32
    6b3e:	fa82 f24c 	uadd8	r2, r2, ip
    6b42:	f100 0008 	add.w	r0, r0, #8
    6b46:	faa4 f28c 	sel	r2, r4, ip
    6b4a:	fa83 f34c 	uadd8	r3, r3, ip
    6b4e:	faa2 f38c 	sel	r3, r2, ip
    6b52:	2b00      	cmp	r3, #0
    6b54:	d0c6      	beq.n	6ae4 <strlen+0x24>
    6b56:	2a00      	cmp	r2, #0
    6b58:	bf04      	itt	eq
    6b5a:	3004      	addeq	r0, #4
    6b5c:	461a      	moveq	r2, r3
    6b5e:	ba12      	rev	r2, r2
    6b60:	fab2 f282 	clz	r2, r2
    6b64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    6b68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    6b6c:	4770      	bx	lr
    6b6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    6b72:	f004 0503 	and.w	r5, r4, #3
    6b76:	f1c4 0000 	rsb	r0, r4, #0
    6b7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6b7e:	f014 0f04 	tst.w	r4, #4
    6b82:	f891 f040 	pld	[r1, #64]	; 0x40
    6b86:	fa0c f505 	lsl.w	r5, ip, r5
    6b8a:	ea62 0205 	orn	r2, r2, r5
    6b8e:	bf1c      	itt	ne
    6b90:	ea63 0305 	ornne	r3, r3, r5
    6b94:	4662      	movne	r2, ip
    6b96:	f04f 0400 	mov.w	r4, #0
    6b9a:	e7a9      	b.n	6af0 <strlen+0x30>

00006b9c <__register_exitproc>:
    6b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ba0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6c20 <__register_exitproc+0x84>
    6ba4:	4606      	mov	r6, r0
    6ba6:	f8da 0000 	ldr.w	r0, [sl]
    6baa:	4698      	mov	r8, r3
    6bac:	460f      	mov	r7, r1
    6bae:	4691      	mov	r9, r2
    6bb0:	f7ff fdb0 	bl	6714 <__retarget_lock_acquire_recursive>
    6bb4:	4b18      	ldr	r3, [pc, #96]	; (6c18 <__register_exitproc+0x7c>)
    6bb6:	681c      	ldr	r4, [r3, #0]
    6bb8:	b324      	cbz	r4, 6c04 <__register_exitproc+0x68>
    6bba:	6865      	ldr	r5, [r4, #4]
    6bbc:	2d1f      	cmp	r5, #31
    6bbe:	dc24      	bgt.n	6c0a <__register_exitproc+0x6e>
    6bc0:	b95e      	cbnz	r6, 6bda <__register_exitproc+0x3e>
    6bc2:	1c6b      	adds	r3, r5, #1
    6bc4:	3502      	adds	r5, #2
    6bc6:	f8da 0000 	ldr.w	r0, [sl]
    6bca:	6063      	str	r3, [r4, #4]
    6bcc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    6bd0:	f7ff fda2 	bl	6718 <__retarget_lock_release_recursive>
    6bd4:	2000      	movs	r0, #0
    6bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6bda:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    6bde:	2301      	movs	r3, #1
    6be0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    6be4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    6be8:	40ab      	lsls	r3, r5
    6bea:	431a      	orrs	r2, r3
    6bec:	2e02      	cmp	r6, #2
    6bee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    6bf2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    6bf6:	d1e4      	bne.n	6bc2 <__register_exitproc+0x26>
    6bf8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    6bfc:	431a      	orrs	r2, r3
    6bfe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6c02:	e7de      	b.n	6bc2 <__register_exitproc+0x26>
    6c04:	4c05      	ldr	r4, [pc, #20]	; (6c1c <__register_exitproc+0x80>)
    6c06:	601c      	str	r4, [r3, #0]
    6c08:	e7d7      	b.n	6bba <__register_exitproc+0x1e>
    6c0a:	f8da 0000 	ldr.w	r0, [sl]
    6c0e:	f7ff fd83 	bl	6718 <__retarget_lock_release_recursive>
    6c12:	f04f 30ff 	mov.w	r0, #4294967295
    6c16:	e7de      	b.n	6bd6 <__register_exitproc+0x3a>
    6c18:	200027c0 	.word	0x200027c0
    6c1c:	200027c4 	.word	0x200027c4
    6c20:	200011ac 	.word	0x200011ac

00006c24 <_malloc_trim_r>:
    6c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c26:	4f24      	ldr	r7, [pc, #144]	; (6cb8 <_malloc_trim_r+0x94>)
    6c28:	460c      	mov	r4, r1
    6c2a:	4606      	mov	r6, r0
    6c2c:	f7fe fd1c 	bl	5668 <__malloc_lock>
    6c30:	68bb      	ldr	r3, [r7, #8]
    6c32:	685d      	ldr	r5, [r3, #4]
    6c34:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6c38:	310f      	adds	r1, #15
    6c3a:	f025 0503 	bic.w	r5, r5, #3
    6c3e:	194b      	adds	r3, r1, r5
    6c40:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    6c44:	f023 030f 	bic.w	r3, r3, #15
    6c48:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    6c4c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    6c50:	db07      	blt.n	6c62 <_malloc_trim_r+0x3e>
    6c52:	2100      	movs	r1, #0
    6c54:	4630      	mov	r0, r6
    6c56:	f7ff fd07 	bl	6668 <_sbrk_r>
    6c5a:	68bb      	ldr	r3, [r7, #8]
    6c5c:	442b      	add	r3, r5
    6c5e:	4298      	cmp	r0, r3
    6c60:	d004      	beq.n	6c6c <_malloc_trim_r+0x48>
    6c62:	4630      	mov	r0, r6
    6c64:	f7fe fd06 	bl	5674 <__malloc_unlock>
    6c68:	2000      	movs	r0, #0
    6c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c6c:	4261      	negs	r1, r4
    6c6e:	4630      	mov	r0, r6
    6c70:	f7ff fcfa 	bl	6668 <_sbrk_r>
    6c74:	3001      	adds	r0, #1
    6c76:	d00d      	beq.n	6c94 <_malloc_trim_r+0x70>
    6c78:	4a10      	ldr	r2, [pc, #64]	; (6cbc <_malloc_trim_r+0x98>)
    6c7a:	68bb      	ldr	r3, [r7, #8]
    6c7c:	1b2d      	subs	r5, r5, r4
    6c7e:	f045 0501 	orr.w	r5, r5, #1
    6c82:	605d      	str	r5, [r3, #4]
    6c84:	6813      	ldr	r3, [r2, #0]
    6c86:	4630      	mov	r0, r6
    6c88:	1b1b      	subs	r3, r3, r4
    6c8a:	6013      	str	r3, [r2, #0]
    6c8c:	f7fe fcf2 	bl	5674 <__malloc_unlock>
    6c90:	2001      	movs	r0, #1
    6c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c94:	2100      	movs	r1, #0
    6c96:	4630      	mov	r0, r6
    6c98:	f7ff fce6 	bl	6668 <_sbrk_r>
    6c9c:	68ba      	ldr	r2, [r7, #8]
    6c9e:	1a83      	subs	r3, r0, r2
    6ca0:	2b0f      	cmp	r3, #15
    6ca2:	ddde      	ble.n	6c62 <_malloc_trim_r+0x3e>
    6ca4:	f043 0301 	orr.w	r3, r3, #1
    6ca8:	6053      	str	r3, [r2, #4]
    6caa:	4b05      	ldr	r3, [pc, #20]	; (6cc0 <_malloc_trim_r+0x9c>)
    6cac:	4903      	ldr	r1, [pc, #12]	; (6cbc <_malloc_trim_r+0x98>)
    6cae:	681b      	ldr	r3, [r3, #0]
    6cb0:	1ac0      	subs	r0, r0, r3
    6cb2:	6008      	str	r0, [r1, #0]
    6cb4:	e7d5      	b.n	6c62 <_malloc_trim_r+0x3e>
    6cb6:	bf00      	nop
    6cb8:	20001324 	.word	0x20001324
    6cbc:	20002960 	.word	0x20002960
    6cc0:	2000172c 	.word	0x2000172c

00006cc4 <_free_r>:
    6cc4:	2900      	cmp	r1, #0
    6cc6:	d061      	beq.n	6d8c <_free_r+0xc8>
    6cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cca:	460c      	mov	r4, r1
    6ccc:	4606      	mov	r6, r0
    6cce:	f7fe fccb 	bl	5668 <__malloc_lock>
    6cd2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    6cd6:	4f7b      	ldr	r7, [pc, #492]	; (6ec4 <_free_r+0x200>)
    6cd8:	f1a4 0508 	sub.w	r5, r4, #8
    6cdc:	f022 0101 	bic.w	r1, r2, #1
    6ce0:	eb05 0c01 	add.w	ip, r5, r1
    6ce4:	68b8      	ldr	r0, [r7, #8]
    6ce6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6cea:	4560      	cmp	r0, ip
    6cec:	f023 0303 	bic.w	r3, r3, #3
    6cf0:	f000 808b 	beq.w	6e0a <_free_r+0x146>
    6cf4:	07d2      	lsls	r2, r2, #31
    6cf6:	f8cc 3004 	str.w	r3, [ip, #4]
    6cfa:	d432      	bmi.n	6d62 <_free_r+0x9e>
    6cfc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6d00:	1aad      	subs	r5, r5, r2
    6d02:	4411      	add	r1, r2
    6d04:	68aa      	ldr	r2, [r5, #8]
    6d06:	f107 0008 	add.w	r0, r7, #8
    6d0a:	4282      	cmp	r2, r0
    6d0c:	d06a      	beq.n	6de4 <_free_r+0x120>
    6d0e:	eb0c 0403 	add.w	r4, ip, r3
    6d12:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6d16:	68ec      	ldr	r4, [r5, #12]
    6d18:	60d4      	str	r4, [r2, #12]
    6d1a:	f01e 0f01 	tst.w	lr, #1
    6d1e:	60a2      	str	r2, [r4, #8]
    6d20:	f000 8097 	beq.w	6e52 <_free_r+0x18e>
    6d24:	f041 0301 	orr.w	r3, r1, #1
    6d28:	606b      	str	r3, [r5, #4]
    6d2a:	f8cc 1000 	str.w	r1, [ip]
    6d2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6d32:	d235      	bcs.n	6da0 <_free_r+0xdc>
    6d34:	6878      	ldr	r0, [r7, #4]
    6d36:	08cb      	lsrs	r3, r1, #3
    6d38:	2201      	movs	r2, #1
    6d3a:	0949      	lsrs	r1, r1, #5
    6d3c:	3301      	adds	r3, #1
    6d3e:	408a      	lsls	r2, r1
    6d40:	4302      	orrs	r2, r0
    6d42:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6d46:	607a      	str	r2, [r7, #4]
    6d48:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    6d4c:	3a08      	subs	r2, #8
    6d4e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    6d52:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6d56:	60cd      	str	r5, [r1, #12]
    6d58:	4630      	mov	r0, r6
    6d5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6d5e:	f7fe bc89 	b.w	5674 <__malloc_unlock>
    6d62:	eb0c 0203 	add.w	r2, ip, r3
    6d66:	6852      	ldr	r2, [r2, #4]
    6d68:	07d0      	lsls	r0, r2, #31
    6d6a:	d410      	bmi.n	6d8e <_free_r+0xca>
    6d6c:	4419      	add	r1, r3
    6d6e:	f107 0008 	add.w	r0, r7, #8
    6d72:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6d76:	4283      	cmp	r3, r0
    6d78:	d073      	beq.n	6e62 <_free_r+0x19e>
    6d7a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    6d7e:	60da      	str	r2, [r3, #12]
    6d80:	6093      	str	r3, [r2, #8]
    6d82:	f041 0301 	orr.w	r3, r1, #1
    6d86:	606b      	str	r3, [r5, #4]
    6d88:	5069      	str	r1, [r5, r1]
    6d8a:	e7d0      	b.n	6d2e <_free_r+0x6a>
    6d8c:	4770      	bx	lr
    6d8e:	f041 0301 	orr.w	r3, r1, #1
    6d92:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6d96:	f844 3c04 	str.w	r3, [r4, #-4]
    6d9a:	f8cc 1000 	str.w	r1, [ip]
    6d9e:	d3c9      	bcc.n	6d34 <_free_r+0x70>
    6da0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6da4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6da8:	d248      	bcs.n	6e3c <_free_r+0x178>
    6daa:	098b      	lsrs	r3, r1, #6
    6dac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6db0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6db4:	00c3      	lsls	r3, r0, #3
    6db6:	18f8      	adds	r0, r7, r3
    6db8:	58fb      	ldr	r3, [r7, r3]
    6dba:	3808      	subs	r0, #8
    6dbc:	4298      	cmp	r0, r3
    6dbe:	d059      	beq.n	6e74 <_free_r+0x1b0>
    6dc0:	685a      	ldr	r2, [r3, #4]
    6dc2:	f022 0203 	bic.w	r2, r2, #3
    6dc6:	428a      	cmp	r2, r1
    6dc8:	d902      	bls.n	6dd0 <_free_r+0x10c>
    6dca:	689b      	ldr	r3, [r3, #8]
    6dcc:	4298      	cmp	r0, r3
    6dce:	d1f7      	bne.n	6dc0 <_free_r+0xfc>
    6dd0:	68d8      	ldr	r0, [r3, #12]
    6dd2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    6dd6:	6085      	str	r5, [r0, #8]
    6dd8:	60dd      	str	r5, [r3, #12]
    6dda:	4630      	mov	r0, r6
    6ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6de0:	f7fe bc48 	b.w	5674 <__malloc_unlock>
    6de4:	eb0c 0203 	add.w	r2, ip, r3
    6de8:	6852      	ldr	r2, [r2, #4]
    6dea:	07d2      	lsls	r2, r2, #31
    6dec:	d463      	bmi.n	6eb6 <_free_r+0x1f2>
    6dee:	440b      	add	r3, r1
    6df0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    6df4:	60ca      	str	r2, [r1, #12]
    6df6:	6091      	str	r1, [r2, #8]
    6df8:	f043 0201 	orr.w	r2, r3, #1
    6dfc:	606a      	str	r2, [r5, #4]
    6dfe:	4630      	mov	r0, r6
    6e00:	50eb      	str	r3, [r5, r3]
    6e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6e06:	f7fe bc35 	b.w	5674 <__malloc_unlock>
    6e0a:	440b      	add	r3, r1
    6e0c:	07d1      	lsls	r1, r2, #31
    6e0e:	d407      	bmi.n	6e20 <_free_r+0x15c>
    6e10:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6e14:	1aad      	subs	r5, r5, r2
    6e16:	4413      	add	r3, r2
    6e18:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	6091      	str	r1, [r2, #8]
    6e20:	f043 0201 	orr.w	r2, r3, #1
    6e24:	606a      	str	r2, [r5, #4]
    6e26:	4a28      	ldr	r2, [pc, #160]	; (6ec8 <_free_r+0x204>)
    6e28:	60bd      	str	r5, [r7, #8]
    6e2a:	6812      	ldr	r2, [r2, #0]
    6e2c:	429a      	cmp	r2, r3
    6e2e:	d893      	bhi.n	6d58 <_free_r+0x94>
    6e30:	4b26      	ldr	r3, [pc, #152]	; (6ecc <_free_r+0x208>)
    6e32:	4630      	mov	r0, r6
    6e34:	6819      	ldr	r1, [r3, #0]
    6e36:	f7ff fef5 	bl	6c24 <_malloc_trim_r>
    6e3a:	e78d      	b.n	6d58 <_free_r+0x94>
    6e3c:	2b14      	cmp	r3, #20
    6e3e:	d90a      	bls.n	6e56 <_free_r+0x192>
    6e40:	2b54      	cmp	r3, #84	; 0x54
    6e42:	d81f      	bhi.n	6e84 <_free_r+0x1c0>
    6e44:	0b0b      	lsrs	r3, r1, #12
    6e46:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6e4a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    6e4e:	00c3      	lsls	r3, r0, #3
    6e50:	e7b1      	b.n	6db6 <_free_r+0xf2>
    6e52:	4419      	add	r1, r3
    6e54:	e78d      	b.n	6d72 <_free_r+0xae>
    6e56:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6e5a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    6e5e:	00c3      	lsls	r3, r0, #3
    6e60:	e7a9      	b.n	6db6 <_free_r+0xf2>
    6e62:	f041 0301 	orr.w	r3, r1, #1
    6e66:	e9c7 5504 	strd	r5, r5, [r7, #16]
    6e6a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    6e6e:	606b      	str	r3, [r5, #4]
    6e70:	5069      	str	r1, [r5, r1]
    6e72:	e771      	b.n	6d58 <_free_r+0x94>
    6e74:	6879      	ldr	r1, [r7, #4]
    6e76:	1092      	asrs	r2, r2, #2
    6e78:	2401      	movs	r4, #1
    6e7a:	fa04 f202 	lsl.w	r2, r4, r2
    6e7e:	430a      	orrs	r2, r1
    6e80:	607a      	str	r2, [r7, #4]
    6e82:	e7a6      	b.n	6dd2 <_free_r+0x10e>
    6e84:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6e88:	d806      	bhi.n	6e98 <_free_r+0x1d4>
    6e8a:	0bcb      	lsrs	r3, r1, #15
    6e8c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6e90:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6e94:	00c3      	lsls	r3, r0, #3
    6e96:	e78e      	b.n	6db6 <_free_r+0xf2>
    6e98:	f240 5254 	movw	r2, #1364	; 0x554
    6e9c:	4293      	cmp	r3, r2
    6e9e:	d806      	bhi.n	6eae <_free_r+0x1ea>
    6ea0:	0c8b      	lsrs	r3, r1, #18
    6ea2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6ea6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    6eaa:	00c3      	lsls	r3, r0, #3
    6eac:	e783      	b.n	6db6 <_free_r+0xf2>
    6eae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6eb2:	227e      	movs	r2, #126	; 0x7e
    6eb4:	e77f      	b.n	6db6 <_free_r+0xf2>
    6eb6:	f041 0301 	orr.w	r3, r1, #1
    6eba:	606b      	str	r3, [r5, #4]
    6ebc:	f8cc 1000 	str.w	r1, [ip]
    6ec0:	e74a      	b.n	6d58 <_free_r+0x94>
    6ec2:	bf00      	nop
    6ec4:	20001324 	.word	0x20001324
    6ec8:	20001730 	.word	0x20001730
    6ecc:	20002990 	.word	0x20002990

00006ed0 <__ascii_mbtowc>:
    6ed0:	b082      	sub	sp, #8
    6ed2:	b149      	cbz	r1, 6ee8 <__ascii_mbtowc+0x18>
    6ed4:	b15a      	cbz	r2, 6eee <__ascii_mbtowc+0x1e>
    6ed6:	b16b      	cbz	r3, 6ef4 <__ascii_mbtowc+0x24>
    6ed8:	7813      	ldrb	r3, [r2, #0]
    6eda:	600b      	str	r3, [r1, #0]
    6edc:	7812      	ldrb	r2, [r2, #0]
    6ede:	1e10      	subs	r0, r2, #0
    6ee0:	bf18      	it	ne
    6ee2:	2001      	movne	r0, #1
    6ee4:	b002      	add	sp, #8
    6ee6:	4770      	bx	lr
    6ee8:	a901      	add	r1, sp, #4
    6eea:	2a00      	cmp	r2, #0
    6eec:	d1f3      	bne.n	6ed6 <__ascii_mbtowc+0x6>
    6eee:	4610      	mov	r0, r2
    6ef0:	b002      	add	sp, #8
    6ef2:	4770      	bx	lr
    6ef4:	f06f 0001 	mvn.w	r0, #1
    6ef8:	e7f4      	b.n	6ee4 <__ascii_mbtowc+0x14>
    6efa:	bf00      	nop

00006efc <_Balloc>:
    6efc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6efe:	b570      	push	{r4, r5, r6, lr}
    6f00:	4605      	mov	r5, r0
    6f02:	460c      	mov	r4, r1
    6f04:	b14b      	cbz	r3, 6f1a <_Balloc+0x1e>
    6f06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6f0a:	b180      	cbz	r0, 6f2e <_Balloc+0x32>
    6f0c:	6802      	ldr	r2, [r0, #0]
    6f0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    6f12:	2300      	movs	r3, #0
    6f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
    6f18:	bd70      	pop	{r4, r5, r6, pc}
    6f1a:	2221      	movs	r2, #33	; 0x21
    6f1c:	2104      	movs	r1, #4
    6f1e:	f000 fde7 	bl	7af0 <_calloc_r>
    6f22:	4603      	mov	r3, r0
    6f24:	6468      	str	r0, [r5, #68]	; 0x44
    6f26:	2800      	cmp	r0, #0
    6f28:	d1ed      	bne.n	6f06 <_Balloc+0xa>
    6f2a:	2000      	movs	r0, #0
    6f2c:	bd70      	pop	{r4, r5, r6, pc}
    6f2e:	2101      	movs	r1, #1
    6f30:	fa01 f604 	lsl.w	r6, r1, r4
    6f34:	1d72      	adds	r2, r6, #5
    6f36:	0092      	lsls	r2, r2, #2
    6f38:	4628      	mov	r0, r5
    6f3a:	f000 fdd9 	bl	7af0 <_calloc_r>
    6f3e:	2800      	cmp	r0, #0
    6f40:	d0f3      	beq.n	6f2a <_Balloc+0x2e>
    6f42:	e9c0 4601 	strd	r4, r6, [r0, #4]
    6f46:	e7e4      	b.n	6f12 <_Balloc+0x16>

00006f48 <_Bfree>:
    6f48:	b131      	cbz	r1, 6f58 <_Bfree+0x10>
    6f4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6f4c:	684a      	ldr	r2, [r1, #4]
    6f4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6f52:	6008      	str	r0, [r1, #0]
    6f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6f58:	4770      	bx	lr
    6f5a:	bf00      	nop

00006f5c <__multadd>:
    6f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f60:	690e      	ldr	r6, [r1, #16]
    6f62:	4680      	mov	r8, r0
    6f64:	460f      	mov	r7, r1
    6f66:	461d      	mov	r5, r3
    6f68:	f101 0e14 	add.w	lr, r1, #20
    6f6c:	2000      	movs	r0, #0
    6f6e:	f8de 1000 	ldr.w	r1, [lr]
    6f72:	b28c      	uxth	r4, r1
    6f74:	fb02 5304 	mla	r3, r2, r4, r5
    6f78:	0c09      	lsrs	r1, r1, #16
    6f7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6f7e:	fb02 cc01 	mla	ip, r2, r1, ip
    6f82:	3001      	adds	r0, #1
    6f84:	b29c      	uxth	r4, r3
    6f86:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    6f8a:	4286      	cmp	r6, r0
    6f8c:	f84e 4b04 	str.w	r4, [lr], #4
    6f90:	ea4f 451c 	mov.w	r5, ip, lsr #16
    6f94:	dceb      	bgt.n	6f6e <__multadd+0x12>
    6f96:	b13d      	cbz	r5, 6fa8 <__multadd+0x4c>
    6f98:	68bb      	ldr	r3, [r7, #8]
    6f9a:	42b3      	cmp	r3, r6
    6f9c:	dd07      	ble.n	6fae <__multadd+0x52>
    6f9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    6fa2:	3601      	adds	r6, #1
    6fa4:	615d      	str	r5, [r3, #20]
    6fa6:	613e      	str	r6, [r7, #16]
    6fa8:	4638      	mov	r0, r7
    6faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fae:	6879      	ldr	r1, [r7, #4]
    6fb0:	4640      	mov	r0, r8
    6fb2:	3101      	adds	r1, #1
    6fb4:	f7ff ffa2 	bl	6efc <_Balloc>
    6fb8:	4604      	mov	r4, r0
    6fba:	b1b0      	cbz	r0, 6fea <__multadd+0x8e>
    6fbc:	693a      	ldr	r2, [r7, #16]
    6fbe:	3202      	adds	r2, #2
    6fc0:	f107 010c 	add.w	r1, r7, #12
    6fc4:	0092      	lsls	r2, r2, #2
    6fc6:	300c      	adds	r0, #12
    6fc8:	f7fc fabc 	bl	3544 <memcpy>
    6fcc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    6fd0:	687a      	ldr	r2, [r7, #4]
    6fd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6fd6:	6039      	str	r1, [r7, #0]
    6fd8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    6fdc:	4627      	mov	r7, r4
    6fde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    6fe2:	3601      	adds	r6, #1
    6fe4:	615d      	str	r5, [r3, #20]
    6fe6:	613e      	str	r6, [r7, #16]
    6fe8:	e7de      	b.n	6fa8 <__multadd+0x4c>
    6fea:	4b03      	ldr	r3, [pc, #12]	; (6ff8 <__multadd+0x9c>)
    6fec:	4803      	ldr	r0, [pc, #12]	; (6ffc <__multadd+0xa0>)
    6fee:	4622      	mov	r2, r4
    6ff0:	21ba      	movs	r1, #186	; 0xba
    6ff2:	f000 fd5d 	bl	7ab0 <__assert_func>
    6ff6:	bf00      	nop
    6ff8:	20000680 	.word	0x20000680
    6ffc:	20000694 	.word	0x20000694

00007000 <__hi0bits>:
    7000:	0c03      	lsrs	r3, r0, #16
    7002:	041b      	lsls	r3, r3, #16
    7004:	b9d3      	cbnz	r3, 703c <__hi0bits+0x3c>
    7006:	0400      	lsls	r0, r0, #16
    7008:	2310      	movs	r3, #16
    700a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    700e:	bf04      	itt	eq
    7010:	0200      	lsleq	r0, r0, #8
    7012:	3308      	addeq	r3, #8
    7014:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    7018:	bf04      	itt	eq
    701a:	0100      	lsleq	r0, r0, #4
    701c:	3304      	addeq	r3, #4
    701e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    7022:	bf04      	itt	eq
    7024:	0080      	lsleq	r0, r0, #2
    7026:	3302      	addeq	r3, #2
    7028:	2800      	cmp	r0, #0
    702a:	db05      	blt.n	7038 <__hi0bits+0x38>
    702c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    7030:	f103 0301 	add.w	r3, r3, #1
    7034:	bf08      	it	eq
    7036:	2320      	moveq	r3, #32
    7038:	4618      	mov	r0, r3
    703a:	4770      	bx	lr
    703c:	2300      	movs	r3, #0
    703e:	e7e4      	b.n	700a <__hi0bits+0xa>

00007040 <__lo0bits>:
    7040:	6803      	ldr	r3, [r0, #0]
    7042:	f013 0207 	ands.w	r2, r3, #7
    7046:	d008      	beq.n	705a <__lo0bits+0x1a>
    7048:	07d9      	lsls	r1, r3, #31
    704a:	d41f      	bmi.n	708c <__lo0bits+0x4c>
    704c:	079a      	lsls	r2, r3, #30
    704e:	d522      	bpl.n	7096 <__lo0bits+0x56>
    7050:	085b      	lsrs	r3, r3, #1
    7052:	6003      	str	r3, [r0, #0]
    7054:	2201      	movs	r2, #1
    7056:	4610      	mov	r0, r2
    7058:	4770      	bx	lr
    705a:	b299      	uxth	r1, r3
    705c:	b909      	cbnz	r1, 7062 <__lo0bits+0x22>
    705e:	0c1b      	lsrs	r3, r3, #16
    7060:	2210      	movs	r2, #16
    7062:	b2d9      	uxtb	r1, r3
    7064:	b909      	cbnz	r1, 706a <__lo0bits+0x2a>
    7066:	3208      	adds	r2, #8
    7068:	0a1b      	lsrs	r3, r3, #8
    706a:	0719      	lsls	r1, r3, #28
    706c:	bf04      	itt	eq
    706e:	091b      	lsreq	r3, r3, #4
    7070:	3204      	addeq	r2, #4
    7072:	0799      	lsls	r1, r3, #30
    7074:	bf04      	itt	eq
    7076:	089b      	lsreq	r3, r3, #2
    7078:	3202      	addeq	r2, #2
    707a:	07d9      	lsls	r1, r3, #31
    707c:	d403      	bmi.n	7086 <__lo0bits+0x46>
    707e:	085b      	lsrs	r3, r3, #1
    7080:	f102 0201 	add.w	r2, r2, #1
    7084:	d005      	beq.n	7092 <__lo0bits+0x52>
    7086:	6003      	str	r3, [r0, #0]
    7088:	4610      	mov	r0, r2
    708a:	4770      	bx	lr
    708c:	2200      	movs	r2, #0
    708e:	4610      	mov	r0, r2
    7090:	4770      	bx	lr
    7092:	2220      	movs	r2, #32
    7094:	e7df      	b.n	7056 <__lo0bits+0x16>
    7096:	089b      	lsrs	r3, r3, #2
    7098:	2202      	movs	r2, #2
    709a:	6003      	str	r3, [r0, #0]
    709c:	4610      	mov	r0, r2
    709e:	4770      	bx	lr

000070a0 <__i2b>:
    70a0:	b538      	push	{r3, r4, r5, lr}
    70a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    70a4:	4604      	mov	r4, r0
    70a6:	460d      	mov	r5, r1
    70a8:	b14b      	cbz	r3, 70be <__i2b+0x1e>
    70aa:	6858      	ldr	r0, [r3, #4]
    70ac:	b1b0      	cbz	r0, 70dc <__i2b+0x3c>
    70ae:	6802      	ldr	r2, [r0, #0]
    70b0:	605a      	str	r2, [r3, #4]
    70b2:	2200      	movs	r2, #0
    70b4:	2301      	movs	r3, #1
    70b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    70ba:	60c2      	str	r2, [r0, #12]
    70bc:	bd38      	pop	{r3, r4, r5, pc}
    70be:	2221      	movs	r2, #33	; 0x21
    70c0:	2104      	movs	r1, #4
    70c2:	f000 fd15 	bl	7af0 <_calloc_r>
    70c6:	4603      	mov	r3, r0
    70c8:	6460      	str	r0, [r4, #68]	; 0x44
    70ca:	2800      	cmp	r0, #0
    70cc:	d1ed      	bne.n	70aa <__i2b+0xa>
    70ce:	4b09      	ldr	r3, [pc, #36]	; (70f4 <__i2b+0x54>)
    70d0:	4809      	ldr	r0, [pc, #36]	; (70f8 <__i2b+0x58>)
    70d2:	2200      	movs	r2, #0
    70d4:	f240 1145 	movw	r1, #325	; 0x145
    70d8:	f000 fcea 	bl	7ab0 <__assert_func>
    70dc:	221c      	movs	r2, #28
    70de:	2101      	movs	r1, #1
    70e0:	4620      	mov	r0, r4
    70e2:	f000 fd05 	bl	7af0 <_calloc_r>
    70e6:	2800      	cmp	r0, #0
    70e8:	d0f1      	beq.n	70ce <__i2b+0x2e>
    70ea:	2201      	movs	r2, #1
    70ec:	2302      	movs	r3, #2
    70ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    70f2:	e7de      	b.n	70b2 <__i2b+0x12>
    70f4:	20000680 	.word	0x20000680
    70f8:	20000694 	.word	0x20000694

000070fc <__multiply>:
    70fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7100:	690e      	ldr	r6, [r1, #16]
    7102:	6915      	ldr	r5, [r2, #16]
    7104:	42ae      	cmp	r6, r5
    7106:	b085      	sub	sp, #20
    7108:	4688      	mov	r8, r1
    710a:	4614      	mov	r4, r2
    710c:	db05      	blt.n	711a <__multiply+0x1e>
    710e:	462a      	mov	r2, r5
    7110:	4623      	mov	r3, r4
    7112:	4635      	mov	r5, r6
    7114:	460c      	mov	r4, r1
    7116:	4616      	mov	r6, r2
    7118:	4698      	mov	r8, r3
    711a:	68a3      	ldr	r3, [r4, #8]
    711c:	6861      	ldr	r1, [r4, #4]
    711e:	19af      	adds	r7, r5, r6
    7120:	42bb      	cmp	r3, r7
    7122:	bfb8      	it	lt
    7124:	3101      	addlt	r1, #1
    7126:	f7ff fee9 	bl	6efc <_Balloc>
    712a:	9001      	str	r0, [sp, #4]
    712c:	2800      	cmp	r0, #0
    712e:	f000 8087 	beq.w	7240 <__multiply+0x144>
    7132:	9b01      	ldr	r3, [sp, #4]
    7134:	f103 0914 	add.w	r9, r3, #20
    7138:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    713c:	45d1      	cmp	r9, sl
    713e:	d205      	bcs.n	714c <__multiply+0x50>
    7140:	464b      	mov	r3, r9
    7142:	2200      	movs	r2, #0
    7144:	f843 2b04 	str.w	r2, [r3], #4
    7148:	459a      	cmp	sl, r3
    714a:	d8fb      	bhi.n	7144 <__multiply+0x48>
    714c:	f108 0814 	add.w	r8, r8, #20
    7150:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7154:	f104 0314 	add.w	r3, r4, #20
    7158:	45d8      	cmp	r8, fp
    715a:	461a      	mov	r2, r3
    715c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7160:	d25f      	bcs.n	7222 <__multiply+0x126>
    7162:	1b2b      	subs	r3, r5, r4
    7164:	3b15      	subs	r3, #21
    7166:	f023 0303 	bic.w	r3, r3, #3
    716a:	3304      	adds	r3, #4
    716c:	3415      	adds	r4, #21
    716e:	42a5      	cmp	r5, r4
    7170:	bf38      	it	cc
    7172:	2304      	movcc	r3, #4
    7174:	e9cd a702 	strd	sl, r7, [sp, #8]
    7178:	46ac      	mov	ip, r5
    717a:	461f      	mov	r7, r3
    717c:	4692      	mov	sl, r2
    717e:	e005      	b.n	718c <__multiply+0x90>
    7180:	0c09      	lsrs	r1, r1, #16
    7182:	d129      	bne.n	71d8 <__multiply+0xdc>
    7184:	45c3      	cmp	fp, r8
    7186:	f109 0904 	add.w	r9, r9, #4
    718a:	d948      	bls.n	721e <__multiply+0x122>
    718c:	f858 1b04 	ldr.w	r1, [r8], #4
    7190:	b28d      	uxth	r5, r1
    7192:	2d00      	cmp	r5, #0
    7194:	d0f4      	beq.n	7180 <__multiply+0x84>
    7196:	4656      	mov	r6, sl
    7198:	464c      	mov	r4, r9
    719a:	2300      	movs	r3, #0
    719c:	f856 1b04 	ldr.w	r1, [r6], #4
    71a0:	6822      	ldr	r2, [r4, #0]
    71a2:	fa1f fe81 	uxth.w	lr, r1
    71a6:	b290      	uxth	r0, r2
    71a8:	0c09      	lsrs	r1, r1, #16
    71aa:	fb05 000e 	mla	r0, r5, lr, r0
    71ae:	0c12      	lsrs	r2, r2, #16
    71b0:	4403      	add	r3, r0
    71b2:	fb05 2201 	mla	r2, r5, r1, r2
    71b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    71ba:	b29b      	uxth	r3, r3
    71bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    71c0:	45b4      	cmp	ip, r6
    71c2:	f844 3b04 	str.w	r3, [r4], #4
    71c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    71ca:	d8e7      	bhi.n	719c <__multiply+0xa0>
    71cc:	f849 3007 	str.w	r3, [r9, r7]
    71d0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    71d4:	0c09      	lsrs	r1, r1, #16
    71d6:	d0d5      	beq.n	7184 <__multiply+0x88>
    71d8:	f8d9 3000 	ldr.w	r3, [r9]
    71dc:	4650      	mov	r0, sl
    71de:	461a      	mov	r2, r3
    71e0:	464c      	mov	r4, r9
    71e2:	2600      	movs	r6, #0
    71e4:	8805      	ldrh	r5, [r0, #0]
    71e6:	0c12      	lsrs	r2, r2, #16
    71e8:	fb01 2205 	mla	r2, r1, r5, r2
    71ec:	4416      	add	r6, r2
    71ee:	b29b      	uxth	r3, r3
    71f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    71f4:	f844 3b04 	str.w	r3, [r4], #4
    71f8:	f850 5b04 	ldr.w	r5, [r0], #4
    71fc:	6822      	ldr	r2, [r4, #0]
    71fe:	0c2d      	lsrs	r5, r5, #16
    7200:	b293      	uxth	r3, r2
    7202:	fb01 3305 	mla	r3, r1, r5, r3
    7206:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    720a:	4584      	cmp	ip, r0
    720c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    7210:	d8e8      	bhi.n	71e4 <__multiply+0xe8>
    7212:	45c3      	cmp	fp, r8
    7214:	f849 3007 	str.w	r3, [r9, r7]
    7218:	f109 0904 	add.w	r9, r9, #4
    721c:	d8b6      	bhi.n	718c <__multiply+0x90>
    721e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    7222:	2f00      	cmp	r7, #0
    7224:	dc02      	bgt.n	722c <__multiply+0x130>
    7226:	e005      	b.n	7234 <__multiply+0x138>
    7228:	3f01      	subs	r7, #1
    722a:	d003      	beq.n	7234 <__multiply+0x138>
    722c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    7230:	2b00      	cmp	r3, #0
    7232:	d0f9      	beq.n	7228 <__multiply+0x12c>
    7234:	9b01      	ldr	r3, [sp, #4]
    7236:	4618      	mov	r0, r3
    7238:	611f      	str	r7, [r3, #16]
    723a:	b005      	add	sp, #20
    723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7240:	4b03      	ldr	r3, [pc, #12]	; (7250 <__multiply+0x154>)
    7242:	4804      	ldr	r0, [pc, #16]	; (7254 <__multiply+0x158>)
    7244:	9a01      	ldr	r2, [sp, #4]
    7246:	f44f 71b1 	mov.w	r1, #354	; 0x162
    724a:	f000 fc31 	bl	7ab0 <__assert_func>
    724e:	bf00      	nop
    7250:	20000680 	.word	0x20000680
    7254:	20000694 	.word	0x20000694

00007258 <__pow5mult>:
    7258:	f012 0303 	ands.w	r3, r2, #3
    725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7260:	4614      	mov	r4, r2
    7262:	4606      	mov	r6, r0
    7264:	d132      	bne.n	72cc <__pow5mult+0x74>
    7266:	460d      	mov	r5, r1
    7268:	10a4      	asrs	r4, r4, #2
    726a:	d020      	beq.n	72ae <__pow5mult+0x56>
    726c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    7270:	f1b8 0f00 	cmp.w	r8, #0
    7274:	d033      	beq.n	72de <__pow5mult+0x86>
    7276:	07e3      	lsls	r3, r4, #31
    7278:	f04f 0700 	mov.w	r7, #0
    727c:	d407      	bmi.n	728e <__pow5mult+0x36>
    727e:	1064      	asrs	r4, r4, #1
    7280:	d015      	beq.n	72ae <__pow5mult+0x56>
    7282:	f8d8 0000 	ldr.w	r0, [r8]
    7286:	b1a8      	cbz	r0, 72b4 <__pow5mult+0x5c>
    7288:	4680      	mov	r8, r0
    728a:	07e3      	lsls	r3, r4, #31
    728c:	d5f7      	bpl.n	727e <__pow5mult+0x26>
    728e:	4642      	mov	r2, r8
    7290:	4629      	mov	r1, r5
    7292:	4630      	mov	r0, r6
    7294:	f7ff ff32 	bl	70fc <__multiply>
    7298:	b1b5      	cbz	r5, 72c8 <__pow5mult+0x70>
    729a:	6869      	ldr	r1, [r5, #4]
    729c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    729e:	1064      	asrs	r4, r4, #1
    72a0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    72a4:	602a      	str	r2, [r5, #0]
    72a6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    72aa:	4605      	mov	r5, r0
    72ac:	d1e9      	bne.n	7282 <__pow5mult+0x2a>
    72ae:	4628      	mov	r0, r5
    72b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72b4:	4642      	mov	r2, r8
    72b6:	4641      	mov	r1, r8
    72b8:	4630      	mov	r0, r6
    72ba:	f7ff ff1f 	bl	70fc <__multiply>
    72be:	f8c8 0000 	str.w	r0, [r8]
    72c2:	6007      	str	r7, [r0, #0]
    72c4:	4680      	mov	r8, r0
    72c6:	e7e0      	b.n	728a <__pow5mult+0x32>
    72c8:	4605      	mov	r5, r0
    72ca:	e7d8      	b.n	727e <__pow5mult+0x26>
    72cc:	3b01      	subs	r3, #1
    72ce:	4a0f      	ldr	r2, [pc, #60]	; (730c <__pow5mult+0xb4>)
    72d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    72d4:	2300      	movs	r3, #0
    72d6:	f7ff fe41 	bl	6f5c <__multadd>
    72da:	4605      	mov	r5, r0
    72dc:	e7c4      	b.n	7268 <__pow5mult+0x10>
    72de:	2101      	movs	r1, #1
    72e0:	4630      	mov	r0, r6
    72e2:	f7ff fe0b 	bl	6efc <_Balloc>
    72e6:	4680      	mov	r8, r0
    72e8:	b140      	cbz	r0, 72fc <__pow5mult+0xa4>
    72ea:	2301      	movs	r3, #1
    72ec:	f240 2271 	movw	r2, #625	; 0x271
    72f0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    72f4:	2300      	movs	r3, #0
    72f6:	6430      	str	r0, [r6, #64]	; 0x40
    72f8:	6003      	str	r3, [r0, #0]
    72fa:	e7bc      	b.n	7276 <__pow5mult+0x1e>
    72fc:	4b04      	ldr	r3, [pc, #16]	; (7310 <__pow5mult+0xb8>)
    72fe:	4805      	ldr	r0, [pc, #20]	; (7314 <__pow5mult+0xbc>)
    7300:	4642      	mov	r2, r8
    7302:	f240 1145 	movw	r1, #325	; 0x145
    7306:	f000 fbd3 	bl	7ab0 <__assert_func>
    730a:	bf00      	nop
    730c:	20000c40 	.word	0x20000c40
    7310:	20000680 	.word	0x20000680
    7314:	20000694 	.word	0x20000694

00007318 <__lshift>:
    7318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    731c:	460d      	mov	r5, r1
    731e:	4614      	mov	r4, r2
    7320:	692f      	ldr	r7, [r5, #16]
    7322:	68ab      	ldr	r3, [r5, #8]
    7324:	6849      	ldr	r1, [r1, #4]
    7326:	eb07 1762 	add.w	r7, r7, r2, asr #5
    732a:	1c7e      	adds	r6, r7, #1
    732c:	429e      	cmp	r6, r3
    732e:	4680      	mov	r8, r0
    7330:	ea4f 1962 	mov.w	r9, r2, asr #5
    7334:	dd04      	ble.n	7340 <__lshift+0x28>
    7336:	005b      	lsls	r3, r3, #1
    7338:	429e      	cmp	r6, r3
    733a:	f101 0101 	add.w	r1, r1, #1
    733e:	dcfa      	bgt.n	7336 <__lshift+0x1e>
    7340:	4640      	mov	r0, r8
    7342:	f7ff fddb 	bl	6efc <_Balloc>
    7346:	4684      	mov	ip, r0
    7348:	2800      	cmp	r0, #0
    734a:	d052      	beq.n	73f2 <__lshift+0xda>
    734c:	f1b9 0f00 	cmp.w	r9, #0
    7350:	f100 0214 	add.w	r2, r0, #20
    7354:	dd0e      	ble.n	7374 <__lshift+0x5c>
    7356:	f109 0105 	add.w	r1, r9, #5
    735a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    735e:	4613      	mov	r3, r2
    7360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    7364:	2000      	movs	r0, #0
    7366:	f843 0b04 	str.w	r0, [r3], #4
    736a:	428b      	cmp	r3, r1
    736c:	d1fb      	bne.n	7366 <__lshift+0x4e>
    736e:	f1ae 0314 	sub.w	r3, lr, #20
    7372:	441a      	add	r2, r3
    7374:	6929      	ldr	r1, [r5, #16]
    7376:	f105 0314 	add.w	r3, r5, #20
    737a:	f014 0e1f 	ands.w	lr, r4, #31
    737e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7382:	d02e      	beq.n	73e2 <__lshift+0xca>
    7384:	f1ce 0920 	rsb	r9, lr, #32
    7388:	4610      	mov	r0, r2
    738a:	f04f 0a00 	mov.w	sl, #0
    738e:	681c      	ldr	r4, [r3, #0]
    7390:	fa04 f40e 	lsl.w	r4, r4, lr
    7394:	ea44 040a 	orr.w	r4, r4, sl
    7398:	f840 4b04 	str.w	r4, [r0], #4
    739c:	f853 4b04 	ldr.w	r4, [r3], #4
    73a0:	4299      	cmp	r1, r3
    73a2:	fa24 fa09 	lsr.w	sl, r4, r9
    73a6:	d8f2      	bhi.n	738e <__lshift+0x76>
    73a8:	1b4b      	subs	r3, r1, r5
    73aa:	3b15      	subs	r3, #21
    73ac:	f023 0303 	bic.w	r3, r3, #3
    73b0:	3304      	adds	r3, #4
    73b2:	f105 0015 	add.w	r0, r5, #21
    73b6:	4281      	cmp	r1, r0
    73b8:	bf38      	it	cc
    73ba:	2304      	movcc	r3, #4
    73bc:	f1ba 0f00 	cmp.w	sl, #0
    73c0:	bf18      	it	ne
    73c2:	4637      	movne	r7, r6
    73c4:	f842 a003 	str.w	sl, [r2, r3]
    73c8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    73cc:	686a      	ldr	r2, [r5, #4]
    73ce:	f8cc 7010 	str.w	r7, [ip, #16]
    73d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    73d6:	6029      	str	r1, [r5, #0]
    73d8:	4660      	mov	r0, ip
    73da:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    73de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73e2:	3a04      	subs	r2, #4
    73e4:	f853 0b04 	ldr.w	r0, [r3], #4
    73e8:	f842 0f04 	str.w	r0, [r2, #4]!
    73ec:	4299      	cmp	r1, r3
    73ee:	d8f9      	bhi.n	73e4 <__lshift+0xcc>
    73f0:	e7ea      	b.n	73c8 <__lshift+0xb0>
    73f2:	4b03      	ldr	r3, [pc, #12]	; (7400 <__lshift+0xe8>)
    73f4:	4803      	ldr	r0, [pc, #12]	; (7404 <__lshift+0xec>)
    73f6:	4662      	mov	r2, ip
    73f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    73fc:	f000 fb58 	bl	7ab0 <__assert_func>
    7400:	20000680 	.word	0x20000680
    7404:	20000694 	.word	0x20000694

00007408 <__mcmp>:
    7408:	690b      	ldr	r3, [r1, #16]
    740a:	4684      	mov	ip, r0
    740c:	6900      	ldr	r0, [r0, #16]
    740e:	1ac0      	subs	r0, r0, r3
    7410:	d116      	bne.n	7440 <__mcmp+0x38>
    7412:	f10c 0c14 	add.w	ip, ip, #20
    7416:	3114      	adds	r1, #20
    7418:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    741c:	b410      	push	{r4}
    741e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7422:	e001      	b.n	7428 <__mcmp+0x20>
    7424:	4594      	cmp	ip, r2
    7426:	d208      	bcs.n	743a <__mcmp+0x32>
    7428:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    742c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7430:	428c      	cmp	r4, r1
    7432:	d0f7      	beq.n	7424 <__mcmp+0x1c>
    7434:	d205      	bcs.n	7442 <__mcmp+0x3a>
    7436:	f04f 30ff 	mov.w	r0, #4294967295
    743a:	f85d 4b04 	ldr.w	r4, [sp], #4
    743e:	4770      	bx	lr
    7440:	4770      	bx	lr
    7442:	2001      	movs	r0, #1
    7444:	f85d 4b04 	ldr.w	r4, [sp], #4
    7448:	4770      	bx	lr
    744a:	bf00      	nop

0000744c <__mdiff>:
    744c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7450:	690f      	ldr	r7, [r1, #16]
    7452:	6913      	ldr	r3, [r2, #16]
    7454:	1aff      	subs	r7, r7, r3
    7456:	2f00      	cmp	r7, #0
    7458:	460e      	mov	r6, r1
    745a:	4690      	mov	r8, r2
    745c:	d17f      	bne.n	755e <__mdiff+0x112>
    745e:	f101 0514 	add.w	r5, r1, #20
    7462:	3214      	adds	r2, #20
    7464:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7468:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    746c:	e001      	b.n	7472 <__mdiff+0x26>
    746e:	429d      	cmp	r5, r3
    7470:	d278      	bcs.n	7564 <__mdiff+0x118>
    7472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7476:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    747a:	42a1      	cmp	r1, r4
    747c:	d0f7      	beq.n	746e <__mdiff+0x22>
    747e:	d369      	bcc.n	7554 <__mdiff+0x108>
    7480:	6871      	ldr	r1, [r6, #4]
    7482:	f7ff fd3b 	bl	6efc <_Balloc>
    7486:	4681      	mov	r9, r0
    7488:	2800      	cmp	r0, #0
    748a:	d077      	beq.n	757c <__mdiff+0x130>
    748c:	6935      	ldr	r5, [r6, #16]
    748e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    7492:	60c7      	str	r7, [r0, #12]
    7494:	f108 0e14 	add.w	lr, r8, #20
    7498:	f106 0014 	add.w	r0, r6, #20
    749c:	f109 0a14 	add.w	sl, r9, #20
    74a0:	f106 0110 	add.w	r1, r6, #16
    74a4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    74a8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    74ac:	4656      	mov	r6, sl
    74ae:	f04f 0c00 	mov.w	ip, #0
    74b2:	f85e 4b04 	ldr.w	r4, [lr], #4
    74b6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    74ba:	b2a3      	uxth	r3, r4
    74bc:	fa1c fc8b 	uxtah	ip, ip, fp
    74c0:	ebac 0303 	sub.w	r3, ip, r3
    74c4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    74c8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    74cc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    74d0:	b29b      	uxth	r3, r3
    74d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    74d6:	4572      	cmp	r2, lr
    74d8:	f846 3b04 	str.w	r3, [r6], #4
    74dc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    74e0:	d8e7      	bhi.n	74b2 <__mdiff+0x66>
    74e2:	eba2 0108 	sub.w	r1, r2, r8
    74e6:	3915      	subs	r1, #21
    74e8:	f108 0815 	add.w	r8, r8, #21
    74ec:	4542      	cmp	r2, r8
    74ee:	f021 0403 	bic.w	r4, r1, #3
    74f2:	f104 0404 	add.w	r4, r4, #4
    74f6:	bf38      	it	cc
    74f8:	2404      	movcc	r4, #4
    74fa:	4420      	add	r0, r4
    74fc:	f021 0203 	bic.w	r2, r1, #3
    7500:	bf38      	it	cc
    7502:	2200      	movcc	r2, #0
    7504:	4287      	cmp	r7, r0
    7506:	4452      	add	r2, sl
    7508:	4454      	add	r4, sl
    750a:	d918      	bls.n	753e <__mdiff+0xf2>
    750c:	4626      	mov	r6, r4
    750e:	4601      	mov	r1, r0
    7510:	f851 3b04 	ldr.w	r3, [r1], #4
    7514:	fa1c fc83 	uxtah	ip, ip, r3
    7518:	ea4f 422c 	mov.w	r2, ip, asr #16
    751c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7520:	fa1f fc8c 	uxth.w	ip, ip
    7524:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    7528:	428f      	cmp	r7, r1
    752a:	f846 3b04 	str.w	r3, [r6], #4
    752e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    7532:	d8ed      	bhi.n	7510 <__mdiff+0xc4>
    7534:	3f01      	subs	r7, #1
    7536:	1a3f      	subs	r7, r7, r0
    7538:	f027 0703 	bic.w	r7, r7, #3
    753c:	19e2      	adds	r2, r4, r7
    753e:	b923      	cbnz	r3, 754a <__mdiff+0xfe>
    7540:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    7544:	3d01      	subs	r5, #1
    7546:	2b00      	cmp	r3, #0
    7548:	d0fa      	beq.n	7540 <__mdiff+0xf4>
    754a:	f8c9 5010 	str.w	r5, [r9, #16]
    754e:	4648      	mov	r0, r9
    7550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7554:	4633      	mov	r3, r6
    7556:	2701      	movs	r7, #1
    7558:	4646      	mov	r6, r8
    755a:	4698      	mov	r8, r3
    755c:	e790      	b.n	7480 <__mdiff+0x34>
    755e:	dbf9      	blt.n	7554 <__mdiff+0x108>
    7560:	2700      	movs	r7, #0
    7562:	e78d      	b.n	7480 <__mdiff+0x34>
    7564:	2100      	movs	r1, #0
    7566:	f7ff fcc9 	bl	6efc <_Balloc>
    756a:	4681      	mov	r9, r0
    756c:	b168      	cbz	r0, 758a <__mdiff+0x13e>
    756e:	2201      	movs	r2, #1
    7570:	2300      	movs	r3, #0
    7572:	e9c9 2304 	strd	r2, r3, [r9, #16]
    7576:	4648      	mov	r0, r9
    7578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    757c:	4b06      	ldr	r3, [pc, #24]	; (7598 <__mdiff+0x14c>)
    757e:	4807      	ldr	r0, [pc, #28]	; (759c <__mdiff+0x150>)
    7580:	464a      	mov	r2, r9
    7582:	f240 2145 	movw	r1, #581	; 0x245
    7586:	f000 fa93 	bl	7ab0 <__assert_func>
    758a:	4b03      	ldr	r3, [pc, #12]	; (7598 <__mdiff+0x14c>)
    758c:	4803      	ldr	r0, [pc, #12]	; (759c <__mdiff+0x150>)
    758e:	464a      	mov	r2, r9
    7590:	f240 2137 	movw	r1, #567	; 0x237
    7594:	f000 fa8c 	bl	7ab0 <__assert_func>
    7598:	20000680 	.word	0x20000680
    759c:	20000694 	.word	0x20000694

000075a0 <__d2b>:
    75a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75a4:	4688      	mov	r8, r1
    75a6:	b083      	sub	sp, #12
    75a8:	2101      	movs	r1, #1
    75aa:	ec57 6b10 	vmov	r6, r7, d0
    75ae:	4615      	mov	r5, r2
    75b0:	f7ff fca4 	bl	6efc <_Balloc>
    75b4:	4604      	mov	r4, r0
    75b6:	2800      	cmp	r0, #0
    75b8:	d051      	beq.n	765e <__d2b+0xbe>
    75ba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    75be:	f3c7 0313 	ubfx	r3, r7, #0, #20
    75c2:	f1b9 0f00 	cmp.w	r9, #0
    75c6:	d001      	beq.n	75cc <__d2b+0x2c>
    75c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    75cc:	2e00      	cmp	r6, #0
    75ce:	9301      	str	r3, [sp, #4]
    75d0:	d118      	bne.n	7604 <__d2b+0x64>
    75d2:	a801      	add	r0, sp, #4
    75d4:	f7ff fd34 	bl	7040 <__lo0bits>
    75d8:	9a01      	ldr	r2, [sp, #4]
    75da:	6162      	str	r2, [r4, #20]
    75dc:	2201      	movs	r2, #1
    75de:	f100 0320 	add.w	r3, r0, #32
    75e2:	6122      	str	r2, [r4, #16]
    75e4:	f1b9 0f00 	cmp.w	r9, #0
    75e8:	d025      	beq.n	7636 <__d2b+0x96>
    75ea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    75ee:	eb09 0203 	add.w	r2, r9, r3
    75f2:	4620      	mov	r0, r4
    75f4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    75f8:	f8c8 2000 	str.w	r2, [r8]
    75fc:	602b      	str	r3, [r5, #0]
    75fe:	b003      	add	sp, #12
    7600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7604:	4668      	mov	r0, sp
    7606:	9600      	str	r6, [sp, #0]
    7608:	f7ff fd1a 	bl	7040 <__lo0bits>
    760c:	4603      	mov	r3, r0
    760e:	b310      	cbz	r0, 7656 <__d2b+0xb6>
    7610:	e9dd 0200 	ldrd	r0, r2, [sp]
    7614:	f1c3 0120 	rsb	r1, r3, #32
    7618:	fa02 f101 	lsl.w	r1, r2, r1
    761c:	4301      	orrs	r1, r0
    761e:	40da      	lsrs	r2, r3
    7620:	6161      	str	r1, [r4, #20]
    7622:	9201      	str	r2, [sp, #4]
    7624:	2a00      	cmp	r2, #0
    7626:	61a2      	str	r2, [r4, #24]
    7628:	bf14      	ite	ne
    762a:	2202      	movne	r2, #2
    762c:	2201      	moveq	r2, #1
    762e:	6122      	str	r2, [r4, #16]
    7630:	f1b9 0f00 	cmp.w	r9, #0
    7634:	d1d9      	bne.n	75ea <__d2b+0x4a>
    7636:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    763a:	f8c8 3000 	str.w	r3, [r8]
    763e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    7642:	6918      	ldr	r0, [r3, #16]
    7644:	f7ff fcdc 	bl	7000 <__hi0bits>
    7648:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    764c:	4620      	mov	r0, r4
    764e:	602b      	str	r3, [r5, #0]
    7650:	b003      	add	sp, #12
    7652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7656:	9a00      	ldr	r2, [sp, #0]
    7658:	6162      	str	r2, [r4, #20]
    765a:	9a01      	ldr	r2, [sp, #4]
    765c:	e7e2      	b.n	7624 <__d2b+0x84>
    765e:	4b03      	ldr	r3, [pc, #12]	; (766c <__d2b+0xcc>)
    7660:	4803      	ldr	r0, [pc, #12]	; (7670 <__d2b+0xd0>)
    7662:	4622      	mov	r2, r4
    7664:	f240 310f 	movw	r1, #783	; 0x30f
    7668:	f000 fa22 	bl	7ab0 <__assert_func>
    766c:	20000680 	.word	0x20000680
    7670:	20000694 	.word	0x20000694

00007674 <__ascii_wctomb>:
    7674:	b149      	cbz	r1, 768a <__ascii_wctomb+0x16>
    7676:	2aff      	cmp	r2, #255	; 0xff
    7678:	d802      	bhi.n	7680 <__ascii_wctomb+0xc>
    767a:	700a      	strb	r2, [r1, #0]
    767c:	2001      	movs	r0, #1
    767e:	4770      	bx	lr
    7680:	238a      	movs	r3, #138	; 0x8a
    7682:	6003      	str	r3, [r0, #0]
    7684:	f04f 30ff 	mov.w	r0, #4294967295
    7688:	4770      	bx	lr
    768a:	4608      	mov	r0, r1
    768c:	4770      	bx	lr
    768e:	bf00      	nop

00007690 <fcvtbuf>:
    7690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7694:	460e      	mov	r6, r1
    7696:	4926      	ldr	r1, [pc, #152]	; (7730 <fcvtbuf+0xa0>)
    7698:	b087      	sub	sp, #28
    769a:	680f      	ldr	r7, [r1, #0]
    769c:	4604      	mov	r4, r0
    769e:	4690      	mov	r8, r2
    76a0:	461d      	mov	r5, r3
    76a2:	b353      	cbz	r3, 76fa <fcvtbuf+0x6a>
    76a4:	aa05      	add	r2, sp, #20
    76a6:	4633      	mov	r3, r6
    76a8:	9201      	str	r2, [sp, #4]
    76aa:	2103      	movs	r1, #3
    76ac:	4622      	mov	r2, r4
    76ae:	f8cd 8000 	str.w	r8, [sp]
    76b2:	4638      	mov	r0, r7
    76b4:	f000 faec 	bl	7c90 <_dtoa_r>
    76b8:	9b05      	ldr	r3, [sp, #20]
    76ba:	6832      	ldr	r2, [r6, #0]
    76bc:	4298      	cmp	r0, r3
    76be:	4684      	mov	ip, r0
    76c0:	f1c2 0200 	rsb	r2, r2, #0
    76c4:	4629      	mov	r1, r5
    76c6:	d209      	bcs.n	76dc <fcvtbuf+0x4c>
    76c8:	1a10      	subs	r0, r2, r0
    76ca:	f81c 3b01 	ldrb.w	r3, [ip], #1
    76ce:	f801 3b01 	strb.w	r3, [r1], #1
    76d2:	9b05      	ldr	r3, [sp, #20]
    76d4:	4563      	cmp	r3, ip
    76d6:	eb00 020c 	add.w	r2, r0, ip
    76da:	d8f6      	bhi.n	76ca <fcvtbuf+0x3a>
    76dc:	4294      	cmp	r4, r2
    76de:	dd24      	ble.n	772a <fcvtbuf+0x9a>
    76e0:	1aa2      	subs	r2, r4, r2
    76e2:	440a      	add	r2, r1
    76e4:	2330      	movs	r3, #48	; 0x30
    76e6:	f801 3b01 	strb.w	r3, [r1], #1
    76ea:	4291      	cmp	r1, r2
    76ec:	d1fb      	bne.n	76e6 <fcvtbuf+0x56>
    76ee:	2300      	movs	r3, #0
    76f0:	7013      	strb	r3, [r2, #0]
    76f2:	4628      	mov	r0, r5
    76f4:	b007      	add	sp, #28
    76f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    76fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
    76fc:	f100 0323 	add.w	r3, r0, #35	; 0x23
    7700:	429a      	cmp	r2, r3
    7702:	dd01      	ble.n	7708 <fcvtbuf+0x78>
    7704:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    7706:	e7cd      	b.n	76a4 <fcvtbuf+0x14>
    7708:	f100 0924 	add.w	r9, r0, #36	; 0x24
    770c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    770e:	464a      	mov	r2, r9
    7710:	4638      	mov	r0, r7
    7712:	ed8d 0b02 	vstr	d0, [sp, #8]
    7716:	f7fd ffbf 	bl	5698 <_realloc_r>
    771a:	4605      	mov	r5, r0
    771c:	2800      	cmp	r0, #0
    771e:	d0e8      	beq.n	76f2 <fcvtbuf+0x62>
    7720:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    7724:	ed9d 0b02 	vldr	d0, [sp, #8]
    7728:	e7bc      	b.n	76a4 <fcvtbuf+0x14>
    772a:	460a      	mov	r2, r1
    772c:	e7df      	b.n	76ee <fcvtbuf+0x5e>
    772e:	bf00      	nop
    7730:	20001740 	.word	0x20001740

00007734 <_fclose_r>:
    7734:	b570      	push	{r4, r5, r6, lr}
    7736:	2900      	cmp	r1, #0
    7738:	d04b      	beq.n	77d2 <_fclose_r+0x9e>
    773a:	4606      	mov	r6, r0
    773c:	460c      	mov	r4, r1
    773e:	b110      	cbz	r0, 7746 <_fclose_r+0x12>
    7740:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7742:	2b00      	cmp	r3, #0
    7744:	d048      	beq.n	77d8 <_fclose_r+0xa4>
    7746:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7748:	07d8      	lsls	r0, r3, #31
    774a:	d534      	bpl.n	77b6 <_fclose_r+0x82>
    774c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7750:	2b00      	cmp	r3, #0
    7752:	d03e      	beq.n	77d2 <_fclose_r+0x9e>
    7754:	4621      	mov	r1, r4
    7756:	4630      	mov	r0, r6
    7758:	f000 f850 	bl	77fc <__sflush_r>
    775c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    775e:	4605      	mov	r5, r0
    7760:	b133      	cbz	r3, 7770 <_fclose_r+0x3c>
    7762:	69e1      	ldr	r1, [r4, #28]
    7764:	4630      	mov	r0, r6
    7766:	4798      	blx	r3
    7768:	2800      	cmp	r0, #0
    776a:	bfb8      	it	lt
    776c:	f04f 35ff 	movlt.w	r5, #4294967295
    7770:	89a3      	ldrh	r3, [r4, #12]
    7772:	061a      	lsls	r2, r3, #24
    7774:	d43c      	bmi.n	77f0 <_fclose_r+0xbc>
    7776:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7778:	b141      	cbz	r1, 778c <_fclose_r+0x58>
    777a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    777e:	4299      	cmp	r1, r3
    7780:	d002      	beq.n	7788 <_fclose_r+0x54>
    7782:	4630      	mov	r0, r6
    7784:	f7ff fa9e 	bl	6cc4 <_free_r>
    7788:	2300      	movs	r3, #0
    778a:	6323      	str	r3, [r4, #48]	; 0x30
    778c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    778e:	b121      	cbz	r1, 779a <_fclose_r+0x66>
    7790:	4630      	mov	r0, r6
    7792:	f7ff fa97 	bl	6cc4 <_free_r>
    7796:	2300      	movs	r3, #0
    7798:	6463      	str	r3, [r4, #68]	; 0x44
    779a:	f7fe fb31 	bl	5e00 <__sfp_lock_acquire>
    779e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    77a0:	2200      	movs	r2, #0
    77a2:	07db      	lsls	r3, r3, #31
    77a4:	81a2      	strh	r2, [r4, #12]
    77a6:	d51f      	bpl.n	77e8 <_fclose_r+0xb4>
    77a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77aa:	f7fe ffb1 	bl	6710 <__retarget_lock_close_recursive>
    77ae:	f7fe fb2d 	bl	5e0c <__sfp_lock_release>
    77b2:	4628      	mov	r0, r5
    77b4:	bd70      	pop	{r4, r5, r6, pc}
    77b6:	89a3      	ldrh	r3, [r4, #12]
    77b8:	0599      	lsls	r1, r3, #22
    77ba:	d4cb      	bmi.n	7754 <_fclose_r+0x20>
    77bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77be:	f7fe ffa9 	bl	6714 <__retarget_lock_acquire_recursive>
    77c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    77c6:	2b00      	cmp	r3, #0
    77c8:	d1c4      	bne.n	7754 <_fclose_r+0x20>
    77ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
    77cc:	f015 0501 	ands.w	r5, r5, #1
    77d0:	d005      	beq.n	77de <_fclose_r+0xaa>
    77d2:	2500      	movs	r5, #0
    77d4:	4628      	mov	r0, r5
    77d6:	bd70      	pop	{r4, r5, r6, pc}
    77d8:	f7fe faf4 	bl	5dc4 <__sinit>
    77dc:	e7b3      	b.n	7746 <_fclose_r+0x12>
    77de:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77e0:	f7fe ff9a 	bl	6718 <__retarget_lock_release_recursive>
    77e4:	4628      	mov	r0, r5
    77e6:	bd70      	pop	{r4, r5, r6, pc}
    77e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77ea:	f7fe ff95 	bl	6718 <__retarget_lock_release_recursive>
    77ee:	e7db      	b.n	77a8 <_fclose_r+0x74>
    77f0:	6921      	ldr	r1, [r4, #16]
    77f2:	4630      	mov	r0, r6
    77f4:	f7ff fa66 	bl	6cc4 <_free_r>
    77f8:	e7bd      	b.n	7776 <_fclose_r+0x42>
    77fa:	bf00      	nop

000077fc <__sflush_r>:
    77fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    7800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7804:	460c      	mov	r4, r1
    7806:	0711      	lsls	r1, r2, #28
    7808:	4680      	mov	r8, r0
    780a:	d447      	bmi.n	789c <__sflush_r+0xa0>
    780c:	6863      	ldr	r3, [r4, #4]
    780e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7812:	2b00      	cmp	r3, #0
    7814:	81a2      	strh	r2, [r4, #12]
    7816:	dd5e      	ble.n	78d6 <__sflush_r+0xda>
    7818:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    781a:	2d00      	cmp	r5, #0
    781c:	d058      	beq.n	78d0 <__sflush_r+0xd4>
    781e:	2300      	movs	r3, #0
    7820:	f8d8 6000 	ldr.w	r6, [r8]
    7824:	f8c8 3000 	str.w	r3, [r8]
    7828:	b293      	uxth	r3, r2
    782a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    782e:	d156      	bne.n	78de <__sflush_r+0xe2>
    7830:	2301      	movs	r3, #1
    7832:	69e1      	ldr	r1, [r4, #28]
    7834:	4640      	mov	r0, r8
    7836:	47a8      	blx	r5
    7838:	1c43      	adds	r3, r0, #1
    783a:	d067      	beq.n	790c <__sflush_r+0x110>
    783c:	89a3      	ldrh	r3, [r4, #12]
    783e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    7840:	075f      	lsls	r7, r3, #29
    7842:	d505      	bpl.n	7850 <__sflush_r+0x54>
    7844:	6863      	ldr	r3, [r4, #4]
    7846:	1ac0      	subs	r0, r0, r3
    7848:	6b23      	ldr	r3, [r4, #48]	; 0x30
    784a:	b10b      	cbz	r3, 7850 <__sflush_r+0x54>
    784c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    784e:	1ac0      	subs	r0, r0, r3
    7850:	69e1      	ldr	r1, [r4, #28]
    7852:	4602      	mov	r2, r0
    7854:	2300      	movs	r3, #0
    7856:	4640      	mov	r0, r8
    7858:	47a8      	blx	r5
    785a:	1c41      	adds	r1, r0, #1
    785c:	d141      	bne.n	78e2 <__sflush_r+0xe6>
    785e:	f8d8 3000 	ldr.w	r3, [r8]
    7862:	2b00      	cmp	r3, #0
    7864:	d03d      	beq.n	78e2 <__sflush_r+0xe6>
    7866:	2b1d      	cmp	r3, #29
    7868:	d001      	beq.n	786e <__sflush_r+0x72>
    786a:	2b16      	cmp	r3, #22
    786c:	d156      	bne.n	791c <__sflush_r+0x120>
    786e:	89a3      	ldrh	r3, [r4, #12]
    7870:	6922      	ldr	r2, [r4, #16]
    7872:	6022      	str	r2, [r4, #0]
    7874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7878:	2100      	movs	r1, #0
    787a:	6061      	str	r1, [r4, #4]
    787c:	81a3      	strh	r3, [r4, #12]
    787e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7880:	f8c8 6000 	str.w	r6, [r8]
    7884:	b321      	cbz	r1, 78d0 <__sflush_r+0xd4>
    7886:	f104 0340 	add.w	r3, r4, #64	; 0x40
    788a:	4299      	cmp	r1, r3
    788c:	d002      	beq.n	7894 <__sflush_r+0x98>
    788e:	4640      	mov	r0, r8
    7890:	f7ff fa18 	bl	6cc4 <_free_r>
    7894:	2000      	movs	r0, #0
    7896:	6320      	str	r0, [r4, #48]	; 0x30
    7898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    789c:	6926      	ldr	r6, [r4, #16]
    789e:	b1be      	cbz	r6, 78d0 <__sflush_r+0xd4>
    78a0:	b293      	uxth	r3, r2
    78a2:	6825      	ldr	r5, [r4, #0]
    78a4:	6026      	str	r6, [r4, #0]
    78a6:	079a      	lsls	r2, r3, #30
    78a8:	bf0c      	ite	eq
    78aa:	6963      	ldreq	r3, [r4, #20]
    78ac:	2300      	movne	r3, #0
    78ae:	1bad      	subs	r5, r5, r6
    78b0:	60a3      	str	r3, [r4, #8]
    78b2:	e00b      	b.n	78cc <__sflush_r+0xd0>
    78b4:	462b      	mov	r3, r5
    78b6:	4632      	mov	r2, r6
    78b8:	69e1      	ldr	r1, [r4, #28]
    78ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
    78bc:	4640      	mov	r0, r8
    78be:	47b8      	blx	r7
    78c0:	f1b0 0c00 	subs.w	ip, r0, #0
    78c4:	eba5 050c 	sub.w	r5, r5, ip
    78c8:	4466      	add	r6, ip
    78ca:	dd17      	ble.n	78fc <__sflush_r+0x100>
    78cc:	2d00      	cmp	r5, #0
    78ce:	dcf1      	bgt.n	78b4 <__sflush_r+0xb8>
    78d0:	2000      	movs	r0, #0
    78d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    78d8:	2b00      	cmp	r3, #0
    78da:	dc9d      	bgt.n	7818 <__sflush_r+0x1c>
    78dc:	e7f8      	b.n	78d0 <__sflush_r+0xd4>
    78de:	6d20      	ldr	r0, [r4, #80]	; 0x50
    78e0:	e7ae      	b.n	7840 <__sflush_r+0x44>
    78e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    78e6:	6922      	ldr	r2, [r4, #16]
    78e8:	6022      	str	r2, [r4, #0]
    78ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    78ee:	81a3      	strh	r3, [r4, #12]
    78f0:	2200      	movs	r2, #0
    78f2:	04db      	lsls	r3, r3, #19
    78f4:	6062      	str	r2, [r4, #4]
    78f6:	d5c2      	bpl.n	787e <__sflush_r+0x82>
    78f8:	6520      	str	r0, [r4, #80]	; 0x50
    78fa:	e7c0      	b.n	787e <__sflush_r+0x82>
    78fc:	89a3      	ldrh	r3, [r4, #12]
    78fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7902:	f04f 30ff 	mov.w	r0, #4294967295
    7906:	81a3      	strh	r3, [r4, #12]
    7908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    790c:	f8d8 3000 	ldr.w	r3, [r8]
    7910:	2b00      	cmp	r3, #0
    7912:	d093      	beq.n	783c <__sflush_r+0x40>
    7914:	2b1d      	cmp	r3, #29
    7916:	d006      	beq.n	7926 <__sflush_r+0x12a>
    7918:	2b16      	cmp	r3, #22
    791a:	d004      	beq.n	7926 <__sflush_r+0x12a>
    791c:	89a3      	ldrh	r3, [r4, #12]
    791e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7922:	81a3      	strh	r3, [r4, #12]
    7924:	e7d5      	b.n	78d2 <__sflush_r+0xd6>
    7926:	f8c8 6000 	str.w	r6, [r8]
    792a:	e7d1      	b.n	78d0 <__sflush_r+0xd4>

0000792c <_fflush_r>:
    792c:	b538      	push	{r3, r4, r5, lr}
    792e:	460c      	mov	r4, r1
    7930:	4605      	mov	r5, r0
    7932:	b108      	cbz	r0, 7938 <_fflush_r+0xc>
    7934:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7936:	b303      	cbz	r3, 797a <_fflush_r+0x4e>
    7938:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    793c:	b188      	cbz	r0, 7962 <_fflush_r+0x36>
    793e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7940:	07db      	lsls	r3, r3, #31
    7942:	d401      	bmi.n	7948 <_fflush_r+0x1c>
    7944:	0581      	lsls	r1, r0, #22
    7946:	d50f      	bpl.n	7968 <_fflush_r+0x3c>
    7948:	4628      	mov	r0, r5
    794a:	4621      	mov	r1, r4
    794c:	f7ff ff56 	bl	77fc <__sflush_r>
    7950:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7952:	07da      	lsls	r2, r3, #31
    7954:	4605      	mov	r5, r0
    7956:	d402      	bmi.n	795e <_fflush_r+0x32>
    7958:	89a3      	ldrh	r3, [r4, #12]
    795a:	059b      	lsls	r3, r3, #22
    795c:	d508      	bpl.n	7970 <_fflush_r+0x44>
    795e:	4628      	mov	r0, r5
    7960:	bd38      	pop	{r3, r4, r5, pc}
    7962:	4605      	mov	r5, r0
    7964:	4628      	mov	r0, r5
    7966:	bd38      	pop	{r3, r4, r5, pc}
    7968:	6da0      	ldr	r0, [r4, #88]	; 0x58
    796a:	f7fe fed3 	bl	6714 <__retarget_lock_acquire_recursive>
    796e:	e7eb      	b.n	7948 <_fflush_r+0x1c>
    7970:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7972:	f7fe fed1 	bl	6718 <__retarget_lock_release_recursive>
    7976:	4628      	mov	r0, r5
    7978:	bd38      	pop	{r3, r4, r5, pc}
    797a:	f7fe fa23 	bl	5dc4 <__sinit>
    797e:	e7db      	b.n	7938 <_fflush_r+0xc>

00007980 <memcmp>:
    7980:	2a03      	cmp	r2, #3
    7982:	b570      	push	{r4, r5, r6, lr}
    7984:	d914      	bls.n	79b0 <memcmp+0x30>
    7986:	ea40 0301 	orr.w	r3, r0, r1
    798a:	079b      	lsls	r3, r3, #30
    798c:	d122      	bne.n	79d4 <memcmp+0x54>
    798e:	4604      	mov	r4, r0
    7990:	460b      	mov	r3, r1
    7992:	4619      	mov	r1, r3
    7994:	4620      	mov	r0, r4
    7996:	680e      	ldr	r6, [r1, #0]
    7998:	6805      	ldr	r5, [r0, #0]
    799a:	42b5      	cmp	r5, r6
    799c:	f104 0404 	add.w	r4, r4, #4
    79a0:	f103 0304 	add.w	r3, r3, #4
    79a4:	d116      	bne.n	79d4 <memcmp+0x54>
    79a6:	3a04      	subs	r2, #4
    79a8:	2a03      	cmp	r2, #3
    79aa:	4620      	mov	r0, r4
    79ac:	4619      	mov	r1, r3
    79ae:	d8f0      	bhi.n	7992 <memcmp+0x12>
    79b0:	1e54      	subs	r4, r2, #1
    79b2:	b19a      	cbz	r2, 79dc <memcmp+0x5c>
    79b4:	1e42      	subs	r2, r0, #1
    79b6:	3901      	subs	r1, #1
    79b8:	e001      	b.n	79be <memcmp+0x3e>
    79ba:	18c3      	adds	r3, r0, r3
    79bc:	d00c      	beq.n	79d8 <memcmp+0x58>
    79be:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    79c2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    79c6:	45e6      	cmp	lr, ip
    79c8:	eba4 0302 	sub.w	r3, r4, r2
    79cc:	d0f5      	beq.n	79ba <memcmp+0x3a>
    79ce:	ebae 000c 	sub.w	r0, lr, ip
    79d2:	bd70      	pop	{r4, r5, r6, pc}
    79d4:	1e54      	subs	r4, r2, #1
    79d6:	e7ed      	b.n	79b4 <memcmp+0x34>
    79d8:	4618      	mov	r0, r3
    79da:	bd70      	pop	{r4, r5, r6, pc}
    79dc:	4610      	mov	r0, r2
    79de:	bd70      	pop	{r4, r5, r6, pc}

000079e0 <strnlen>:
    79e0:	b171      	cbz	r1, 7a00 <strnlen+0x20>
    79e2:	4603      	mov	r3, r0
    79e4:	eb00 0c01 	add.w	ip, r0, r1
    79e8:	e001      	b.n	79ee <strnlen+0xe>
    79ea:	4563      	cmp	r3, ip
    79ec:	d006      	beq.n	79fc <strnlen+0x1c>
    79ee:	461a      	mov	r2, r3
    79f0:	3301      	adds	r3, #1
    79f2:	7811      	ldrb	r1, [r2, #0]
    79f4:	2900      	cmp	r1, #0
    79f6:	d1f8      	bne.n	79ea <strnlen+0xa>
    79f8:	1a10      	subs	r0, r2, r0
    79fa:	4770      	bx	lr
    79fc:	1a18      	subs	r0, r3, r0
    79fe:	4770      	bx	lr
    7a00:	4608      	mov	r0, r1
    7a02:	4770      	bx	lr

00007a04 <_localeconv_r>:
    7a04:	4800      	ldr	r0, [pc, #0]	; (7a08 <_localeconv_r+0x4>)
    7a06:	4770      	bx	lr
    7a08:	200012a8 	.word	0x200012a8
    7a0c:	00000000 	.word	0x00000000

00007a10 <memchr>:
    7a10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a14:	2a10      	cmp	r2, #16
    7a16:	db2b      	blt.n	7a70 <memchr+0x60>
    7a18:	f010 0f07 	tst.w	r0, #7
    7a1c:	d008      	beq.n	7a30 <memchr+0x20>
    7a1e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a22:	3a01      	subs	r2, #1
    7a24:	428b      	cmp	r3, r1
    7a26:	d02d      	beq.n	7a84 <memchr+0x74>
    7a28:	f010 0f07 	tst.w	r0, #7
    7a2c:	b342      	cbz	r2, 7a80 <memchr+0x70>
    7a2e:	d1f6      	bne.n	7a1e <memchr+0xe>
    7a30:	b4f0      	push	{r4, r5, r6, r7}
    7a32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7a36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    7a3a:	f022 0407 	bic.w	r4, r2, #7
    7a3e:	f07f 0700 	mvns.w	r7, #0
    7a42:	2300      	movs	r3, #0
    7a44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7a48:	3c08      	subs	r4, #8
    7a4a:	ea85 0501 	eor.w	r5, r5, r1
    7a4e:	ea86 0601 	eor.w	r6, r6, r1
    7a52:	fa85 f547 	uadd8	r5, r5, r7
    7a56:	faa3 f587 	sel	r5, r3, r7
    7a5a:	fa86 f647 	uadd8	r6, r6, r7
    7a5e:	faa5 f687 	sel	r6, r5, r7
    7a62:	b98e      	cbnz	r6, 7a88 <memchr+0x78>
    7a64:	d1ee      	bne.n	7a44 <memchr+0x34>
    7a66:	bcf0      	pop	{r4, r5, r6, r7}
    7a68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a6c:	f002 0207 	and.w	r2, r2, #7
    7a70:	b132      	cbz	r2, 7a80 <memchr+0x70>
    7a72:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a76:	3a01      	subs	r2, #1
    7a78:	ea83 0301 	eor.w	r3, r3, r1
    7a7c:	b113      	cbz	r3, 7a84 <memchr+0x74>
    7a7e:	d1f8      	bne.n	7a72 <memchr+0x62>
    7a80:	2000      	movs	r0, #0
    7a82:	4770      	bx	lr
    7a84:	3801      	subs	r0, #1
    7a86:	4770      	bx	lr
    7a88:	2d00      	cmp	r5, #0
    7a8a:	bf06      	itte	eq
    7a8c:	4635      	moveq	r5, r6
    7a8e:	3803      	subeq	r0, #3
    7a90:	3807      	subne	r0, #7
    7a92:	f015 0f01 	tst.w	r5, #1
    7a96:	d107      	bne.n	7aa8 <memchr+0x98>
    7a98:	3001      	adds	r0, #1
    7a9a:	f415 7f80 	tst.w	r5, #256	; 0x100
    7a9e:	bf02      	ittt	eq
    7aa0:	3001      	addeq	r0, #1
    7aa2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7aa6:	3001      	addeq	r0, #1
    7aa8:	bcf0      	pop	{r4, r5, r6, r7}
    7aaa:	3801      	subs	r0, #1
    7aac:	4770      	bx	lr
    7aae:	bf00      	nop

00007ab0 <__assert_func>:
    7ab0:	b500      	push	{lr}
    7ab2:	4c0b      	ldr	r4, [pc, #44]	; (7ae0 <__assert_func+0x30>)
    7ab4:	6825      	ldr	r5, [r4, #0]
    7ab6:	4614      	mov	r4, r2
    7ab8:	68ee      	ldr	r6, [r5, #12]
    7aba:	461a      	mov	r2, r3
    7abc:	b085      	sub	sp, #20
    7abe:	4603      	mov	r3, r0
    7ac0:	460d      	mov	r5, r1
    7ac2:	b14c      	cbz	r4, 7ad8 <__assert_func+0x28>
    7ac4:	4907      	ldr	r1, [pc, #28]	; (7ae4 <__assert_func+0x34>)
    7ac6:	9500      	str	r5, [sp, #0]
    7ac8:	e9cd 1401 	strd	r1, r4, [sp, #4]
    7acc:	4630      	mov	r0, r6
    7ace:	4906      	ldr	r1, [pc, #24]	; (7ae8 <__assert_func+0x38>)
    7ad0:	f000 ff86 	bl	89e0 <fiprintf>
    7ad4:	f7fc f970 	bl	3db8 <abort>
    7ad8:	4904      	ldr	r1, [pc, #16]	; (7aec <__assert_func+0x3c>)
    7ada:	460c      	mov	r4, r1
    7adc:	e7f3      	b.n	7ac6 <__assert_func+0x16>
    7ade:	bf00      	nop
    7ae0:	20001740 	.word	0x20001740
    7ae4:	20000640 	.word	0x20000640
    7ae8:	20000650 	.word	0x20000650
    7aec:	20000390 	.word	0x20000390

00007af0 <_calloc_r>:
    7af0:	b538      	push	{r3, r4, r5, lr}
    7af2:	fba1 1402 	umull	r1, r4, r1, r2
    7af6:	bb8c      	cbnz	r4, 7b5c <_calloc_r+0x6c>
    7af8:	f7fd fb06 	bl	5108 <_malloc_r>
    7afc:	4605      	mov	r5, r0
    7afe:	b1e0      	cbz	r0, 7b3a <_calloc_r+0x4a>
    7b00:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7b04:	f022 0203 	bic.w	r2, r2, #3
    7b08:	3a04      	subs	r2, #4
    7b0a:	2a24      	cmp	r2, #36	; 0x24
    7b0c:	d817      	bhi.n	7b3e <_calloc_r+0x4e>
    7b0e:	2a13      	cmp	r2, #19
    7b10:	d91a      	bls.n	7b48 <_calloc_r+0x58>
    7b12:	2a1b      	cmp	r2, #27
    7b14:	e9c0 4400 	strd	r4, r4, [r0]
    7b18:	d91d      	bls.n	7b56 <_calloc_r+0x66>
    7b1a:	2a24      	cmp	r2, #36	; 0x24
    7b1c:	bf14      	ite	ne
    7b1e:	f100 0210 	addne.w	r2, r0, #16
    7b22:	f100 0218 	addeq.w	r2, r0, #24
    7b26:	f04f 0300 	mov.w	r3, #0
    7b2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    7b2e:	bf04      	itt	eq
    7b30:	6104      	streq	r4, [r0, #16]
    7b32:	6144      	streq	r4, [r0, #20]
    7b34:	e9c2 3300 	strd	r3, r3, [r2]
    7b38:	6093      	str	r3, [r2, #8]
    7b3a:	4628      	mov	r0, r5
    7b3c:	bd38      	pop	{r3, r4, r5, pc}
    7b3e:	4621      	mov	r1, r4
    7b40:	f7fe fa50 	bl	5fe4 <memset>
    7b44:	4628      	mov	r0, r5
    7b46:	bd38      	pop	{r3, r4, r5, pc}
    7b48:	4602      	mov	r2, r0
    7b4a:	2300      	movs	r3, #0
    7b4c:	e9c2 3300 	strd	r3, r3, [r2]
    7b50:	6093      	str	r3, [r2, #8]
    7b52:	4628      	mov	r0, r5
    7b54:	bd38      	pop	{r3, r4, r5, pc}
    7b56:	f100 0208 	add.w	r2, r0, #8
    7b5a:	e7f6      	b.n	7b4a <_calloc_r+0x5a>
    7b5c:	f7fe fdac 	bl	66b8 <__errno>
    7b60:	230c      	movs	r3, #12
    7b62:	2500      	movs	r5, #0
    7b64:	6003      	str	r3, [r0, #0]
    7b66:	e7e8      	b.n	7b3a <_calloc_r+0x4a>

00007b68 <quorem>:
    7b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b6c:	6903      	ldr	r3, [r0, #16]
    7b6e:	690c      	ldr	r4, [r1, #16]
    7b70:	42a3      	cmp	r3, r4
    7b72:	b083      	sub	sp, #12
    7b74:	f2c0 8087 	blt.w	7c86 <quorem+0x11e>
    7b78:	3c01      	subs	r4, #1
    7b7a:	f101 0514 	add.w	r5, r1, #20
    7b7e:	00a3      	lsls	r3, r4, #2
    7b80:	f100 0814 	add.w	r8, r0, #20
    7b84:	9300      	str	r3, [sp, #0]
    7b86:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7b8a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7b8e:	3301      	adds	r3, #1
    7b90:	4681      	mov	r9, r0
    7b92:	429a      	cmp	r2, r3
    7b94:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    7b98:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    7b9c:	9001      	str	r0, [sp, #4]
    7b9e:	fbb2 f6f3 	udiv	r6, r2, r3
    7ba2:	d33b      	bcc.n	7c1c <quorem+0xb4>
    7ba4:	f04f 0c00 	mov.w	ip, #0
    7ba8:	46ae      	mov	lr, r5
    7baa:	4640      	mov	r0, r8
    7bac:	46e2      	mov	sl, ip
    7bae:	4663      	mov	r3, ip
    7bb0:	f85e bb04 	ldr.w	fp, [lr], #4
    7bb4:	6802      	ldr	r2, [r0, #0]
    7bb6:	fa1f fc8b 	uxth.w	ip, fp
    7bba:	fb06 330c 	mla	r3, r6, ip, r3
    7bbe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    7bc2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    7bc6:	fb06 cc0b 	mla	ip, r6, fp, ip
    7bca:	b29b      	uxth	r3, r3
    7bcc:	ebaa 0303 	sub.w	r3, sl, r3
    7bd0:	fa1f fa8c 	uxth.w	sl, ip
    7bd4:	fa13 f382 	uxtah	r3, r3, r2
    7bd8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    7bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
    7be0:	b29b      	uxth	r3, r3
    7be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    7be6:	4577      	cmp	r7, lr
    7be8:	f840 3b04 	str.w	r3, [r0], #4
    7bec:	ea4f 4a22 	mov.w	sl, r2, asr #16
    7bf0:	ea4f 431c 	mov.w	r3, ip, lsr #16
    7bf4:	d2dc      	bcs.n	7bb0 <quorem+0x48>
    7bf6:	9b00      	ldr	r3, [sp, #0]
    7bf8:	f858 3003 	ldr.w	r3, [r8, r3]
    7bfc:	b973      	cbnz	r3, 7c1c <quorem+0xb4>
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	3b04      	subs	r3, #4
    7c02:	4598      	cmp	r8, r3
    7c04:	d304      	bcc.n	7c10 <quorem+0xa8>
    7c06:	e007      	b.n	7c18 <quorem+0xb0>
    7c08:	4598      	cmp	r8, r3
    7c0a:	f104 34ff 	add.w	r4, r4, #4294967295
    7c0e:	d203      	bcs.n	7c18 <quorem+0xb0>
    7c10:	f853 2904 	ldr.w	r2, [r3], #-4
    7c14:	2a00      	cmp	r2, #0
    7c16:	d0f7      	beq.n	7c08 <quorem+0xa0>
    7c18:	f8c9 4010 	str.w	r4, [r9, #16]
    7c1c:	4648      	mov	r0, r9
    7c1e:	f7ff fbf3 	bl	7408 <__mcmp>
    7c22:	2800      	cmp	r0, #0
    7c24:	db2b      	blt.n	7c7e <quorem+0x116>
    7c26:	3601      	adds	r6, #1
    7c28:	4641      	mov	r1, r8
    7c2a:	2300      	movs	r3, #0
    7c2c:	f855 0b04 	ldr.w	r0, [r5], #4
    7c30:	f8d1 c000 	ldr.w	ip, [r1]
    7c34:	b282      	uxth	r2, r0
    7c36:	1a9a      	subs	r2, r3, r2
    7c38:	0c03      	lsrs	r3, r0, #16
    7c3a:	fa12 f28c 	uxtah	r2, r2, ip
    7c3e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    7c42:	eb03 4322 	add.w	r3, r3, r2, asr #16
    7c46:	b292      	uxth	r2, r2
    7c48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    7c4c:	42af      	cmp	r7, r5
    7c4e:	f841 2b04 	str.w	r2, [r1], #4
    7c52:	ea4f 4323 	mov.w	r3, r3, asr #16
    7c56:	d2e9      	bcs.n	7c2c <quorem+0xc4>
    7c58:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7c5c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    7c60:	b96a      	cbnz	r2, 7c7e <quorem+0x116>
    7c62:	3b04      	subs	r3, #4
    7c64:	4598      	cmp	r8, r3
    7c66:	d304      	bcc.n	7c72 <quorem+0x10a>
    7c68:	e007      	b.n	7c7a <quorem+0x112>
    7c6a:	4598      	cmp	r8, r3
    7c6c:	f104 34ff 	add.w	r4, r4, #4294967295
    7c70:	d203      	bcs.n	7c7a <quorem+0x112>
    7c72:	f853 2904 	ldr.w	r2, [r3], #-4
    7c76:	2a00      	cmp	r2, #0
    7c78:	d0f7      	beq.n	7c6a <quorem+0x102>
    7c7a:	f8c9 4010 	str.w	r4, [r9, #16]
    7c7e:	4630      	mov	r0, r6
    7c80:	b003      	add	sp, #12
    7c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c86:	2000      	movs	r0, #0
    7c88:	b003      	add	sp, #12
    7c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c8e:	bf00      	nop

00007c90 <_dtoa_r>:
    7c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c94:	ed2d 8b02 	vpush	{d8}
    7c98:	b08f      	sub	sp, #60	; 0x3c
    7c9a:	ed8d 0b02 	vstr	d0, [sp, #8]
    7c9e:	9101      	str	r1, [sp, #4]
    7ca0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    7ca2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    7ca4:	9305      	str	r3, [sp, #20]
    7ca6:	ec57 6b10 	vmov	r6, r7, d0
    7caa:	4604      	mov	r4, r0
    7cac:	4693      	mov	fp, r2
    7cae:	b141      	cbz	r1, 7cc2 <_dtoa_r+0x32>
    7cb0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7cb2:	604a      	str	r2, [r1, #4]
    7cb4:	2301      	movs	r3, #1
    7cb6:	4093      	lsls	r3, r2
    7cb8:	608b      	str	r3, [r1, #8]
    7cba:	f7ff f945 	bl	6f48 <_Bfree>
    7cbe:	2300      	movs	r3, #0
    7cc0:	63a3      	str	r3, [r4, #56]	; 0x38
    7cc2:	f1b7 0800 	subs.w	r8, r7, #0
    7cc6:	bfb4      	ite	lt
    7cc8:	2301      	movlt	r3, #1
    7cca:	2300      	movge	r3, #0
    7ccc:	602b      	str	r3, [r5, #0]
    7cce:	4bbe      	ldr	r3, [pc, #760]	; (7fc8 <_dtoa_r+0x338>)
    7cd0:	bfbc      	itt	lt
    7cd2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    7cd6:	f8cd 800c 	strlt.w	r8, [sp, #12]
    7cda:	ea33 0308 	bics.w	r3, r3, r8
    7cde:	f000 809f 	beq.w	7e20 <_dtoa_r+0x190>
    7ce2:	ed9d 8b02 	vldr	d8, [sp, #8]
    7ce6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cee:	d111      	bne.n	7d14 <_dtoa_r+0x84>
    7cf0:	9a05      	ldr	r2, [sp, #20]
    7cf2:	2301      	movs	r3, #1
    7cf4:	6013      	str	r3, [r2, #0]
    7cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	f000 823f 	beq.w	817c <_dtoa_r+0x4ec>
    7cfe:	4bb3      	ldr	r3, [pc, #716]	; (7fcc <_dtoa_r+0x33c>)
    7d00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7d02:	6013      	str	r3, [r2, #0]
    7d04:	3b01      	subs	r3, #1
    7d06:	9300      	str	r3, [sp, #0]
    7d08:	9800      	ldr	r0, [sp, #0]
    7d0a:	b00f      	add	sp, #60	; 0x3c
    7d0c:	ecbd 8b02 	vpop	{d8}
    7d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d14:	aa0c      	add	r2, sp, #48	; 0x30
    7d16:	a90d      	add	r1, sp, #52	; 0x34
    7d18:	4620      	mov	r0, r4
    7d1a:	eeb0 0b48 	vmov.f64	d0, d8
    7d1e:	f7ff fc3f 	bl	75a0 <__d2b>
    7d22:	ea5f 5318 	movs.w	r3, r8, lsr #20
    7d26:	4605      	mov	r5, r0
    7d28:	f040 8092 	bne.w	7e50 <_dtoa_r+0x1c0>
    7d2c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    7d30:	440b      	add	r3, r1
    7d32:	f203 4232 	addw	r2, r3, #1074	; 0x432
    7d36:	2a20      	cmp	r2, #32
    7d38:	f340 82fa 	ble.w	8330 <_dtoa_r+0x6a0>
    7d3c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7d40:	fa08 f802 	lsl.w	r8, r8, r2
    7d44:	f203 4212 	addw	r2, r3, #1042	; 0x412
    7d48:	40d6      	lsrs	r6, r2
    7d4a:	ea48 0206 	orr.w	r2, r8, r6
    7d4e:	ee07 2a10 	vmov	s14, r2
    7d52:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    7d56:	1e58      	subs	r0, r3, #1
    7d58:	ee17 6a90 	vmov	r6, s15
    7d5c:	ec53 2b17 	vmov	r2, r3, d7
    7d60:	f04f 0a01 	mov.w	sl, #1
    7d64:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7d68:	ed9f 3b91 	vldr	d3, [pc, #580]	; 7fb0 <_dtoa_r+0x320>
    7d6c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 7fb8 <_dtoa_r+0x328>
    7d70:	ed9f 5b93 	vldr	d5, [pc, #588]	; 7fc0 <_dtoa_r+0x330>
    7d74:	ee06 0a90 	vmov	s13, r0
    7d78:	ec43 2b12 	vmov	d2, r2, r3
    7d7c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7d80:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7d84:	ee32 6b46 	vsub.f64	d6, d2, d6
    7d88:	eea6 7b03 	vfma.f64	d7, d6, d3
    7d8c:	eea4 7b05 	vfma.f64	d7, d4, d5
    7d90:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7d94:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    7d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d9c:	ee16 7a90 	vmov	r7, s13
    7da0:	d508      	bpl.n	7db4 <_dtoa_r+0x124>
    7da2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    7da6:	eeb4 6b47 	vcmp.f64	d6, d7
    7daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dae:	bf18      	it	ne
    7db0:	f107 37ff 	addne.w	r7, r7, #4294967295
    7db4:	2f16      	cmp	r7, #22
    7db6:	f200 8145 	bhi.w	8044 <_dtoa_r+0x3b4>
    7dba:	4b85      	ldr	r3, [pc, #532]	; (7fd0 <_dtoa_r+0x340>)
    7dbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    7dc0:	ed93 7b00 	vldr	d7, [r3]
    7dc4:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dcc:	d557      	bpl.n	7e7e <_dtoa_r+0x1ee>
    7dce:	1a09      	subs	r1, r1, r0
    7dd0:	2300      	movs	r3, #0
    7dd2:	f1b1 0801 	subs.w	r8, r1, #1
    7dd6:	f107 37ff 	add.w	r7, r7, #4294967295
    7dda:	930a      	str	r3, [sp, #40]	; 0x28
    7ddc:	f100 8139 	bmi.w	8052 <_dtoa_r+0x3c2>
    7de0:	2300      	movs	r3, #0
    7de2:	9306      	str	r3, [sp, #24]
    7de4:	2f00      	cmp	r7, #0
    7de6:	da52      	bge.n	7e8e <_dtoa_r+0x1fe>
    7de8:	9b06      	ldr	r3, [sp, #24]
    7dea:	9704      	str	r7, [sp, #16]
    7dec:	1bdb      	subs	r3, r3, r7
    7dee:	9306      	str	r3, [sp, #24]
    7df0:	427b      	negs	r3, r7
    7df2:	9308      	str	r3, [sp, #32]
    7df4:	9b01      	ldr	r3, [sp, #4]
    7df6:	2b09      	cmp	r3, #9
    7df8:	f04f 0700 	mov.w	r7, #0
    7dfc:	d84e      	bhi.n	7e9c <_dtoa_r+0x20c>
    7dfe:	2b05      	cmp	r3, #5
    7e00:	f340 829d 	ble.w	833e <_dtoa_r+0x6ae>
    7e04:	3b04      	subs	r3, #4
    7e06:	9301      	str	r3, [sp, #4]
    7e08:	2600      	movs	r6, #0
    7e0a:	9b01      	ldr	r3, [sp, #4]
    7e0c:	1e9a      	subs	r2, r3, #2
    7e0e:	2a03      	cmp	r2, #3
    7e10:	f200 8125 	bhi.w	805e <_dtoa_r+0x3ce>
    7e14:	e8df f012 	tbh	[pc, r2, lsl #1]
    7e18:	03a703aa 	.word	0x03a703aa
    7e1c:	037e039d 	.word	0x037e039d
    7e20:	9a05      	ldr	r2, [sp, #20]
    7e22:	f3c8 0813 	ubfx	r8, r8, #0, #20
    7e26:	f242 730f 	movw	r3, #9999	; 0x270f
    7e2a:	ea58 0806 	orrs.w	r8, r8, r6
    7e2e:	6013      	str	r3, [r2, #0]
    7e30:	d11e      	bne.n	7e70 <_dtoa_r+0x1e0>
    7e32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7e34:	2b00      	cmp	r3, #0
    7e36:	f000 8591 	beq.w	895c <_dtoa_r+0xccc>
    7e3a:	4b66      	ldr	r3, [pc, #408]	; (7fd4 <_dtoa_r+0x344>)
    7e3c:	9300      	str	r3, [sp, #0]
    7e3e:	3308      	adds	r3, #8
    7e40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7e42:	9800      	ldr	r0, [sp, #0]
    7e44:	6013      	str	r3, [r2, #0]
    7e46:	b00f      	add	sp, #60	; 0x3c
    7e48:	ecbd 8b02 	vpop	{d8}
    7e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e50:	ee18 6a90 	vmov	r6, s17
    7e54:	f3c6 0613 	ubfx	r6, r6, #0, #20
    7e58:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    7e5c:	ec53 2b18 	vmov	r2, r3, d8
    7e60:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    7e64:	990c      	ldr	r1, [sp, #48]	; 0x30
    7e66:	f04f 0a00 	mov.w	sl, #0
    7e6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7e6e:	e77b      	b.n	7d68 <_dtoa_r+0xd8>
    7e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7e72:	2b00      	cmp	r3, #0
    7e74:	f040 833b 	bne.w	84ee <_dtoa_r+0x85e>
    7e78:	4b57      	ldr	r3, [pc, #348]	; (7fd8 <_dtoa_r+0x348>)
    7e7a:	9300      	str	r3, [sp, #0]
    7e7c:	e744      	b.n	7d08 <_dtoa_r+0x78>
    7e7e:	1a09      	subs	r1, r1, r0
    7e80:	2300      	movs	r3, #0
    7e82:	f1b1 0801 	subs.w	r8, r1, #1
    7e86:	930a      	str	r3, [sp, #40]	; 0x28
    7e88:	f100 80e3 	bmi.w	8052 <_dtoa_r+0x3c2>
    7e8c:	9306      	str	r3, [sp, #24]
    7e8e:	2300      	movs	r3, #0
    7e90:	9308      	str	r3, [sp, #32]
    7e92:	9b01      	ldr	r3, [sp, #4]
    7e94:	9704      	str	r7, [sp, #16]
    7e96:	2b09      	cmp	r3, #9
    7e98:	44b8      	add	r8, r7
    7e9a:	d9b0      	bls.n	7dfe <_dtoa_r+0x16e>
    7e9c:	2300      	movs	r3, #0
    7e9e:	2601      	movs	r6, #1
    7ea0:	9301      	str	r3, [sp, #4]
    7ea2:	9607      	str	r6, [sp, #28]
    7ea4:	f04f 39ff 	mov.w	r9, #4294967295
    7ea8:	469b      	mov	fp, r3
    7eaa:	2100      	movs	r1, #0
    7eac:	63e1      	str	r1, [r4, #60]	; 0x3c
    7eae:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    7eb2:	4620      	mov	r0, r4
    7eb4:	f7ff f822 	bl	6efc <_Balloc>
    7eb8:	9000      	str	r0, [sp, #0]
    7eba:	2800      	cmp	r0, #0
    7ebc:	f000 8540 	beq.w	8940 <_dtoa_r+0xcb0>
    7ec0:	9b00      	ldr	r3, [sp, #0]
    7ec2:	63a3      	str	r3, [r4, #56]	; 0x38
    7ec4:	f1b9 0f0e 	cmp.w	r9, #14
    7ec8:	f200 80dc 	bhi.w	8084 <_dtoa_r+0x3f4>
    7ecc:	2e00      	cmp	r6, #0
    7ece:	f000 80d9 	beq.w	8084 <_dtoa_r+0x3f4>
    7ed2:	9b04      	ldr	r3, [sp, #16]
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	f340 83de 	ble.w	8696 <_dtoa_r+0xa06>
    7eda:	4a3d      	ldr	r2, [pc, #244]	; (7fd0 <_dtoa_r+0x340>)
    7edc:	f003 010f 	and.w	r1, r3, #15
    7ee0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    7ee4:	ed92 7b00 	vldr	d7, [r2]
    7ee8:	111a      	asrs	r2, r3, #4
    7eea:	05db      	lsls	r3, r3, #23
    7eec:	f140 8382 	bpl.w	85f4 <_dtoa_r+0x964>
    7ef0:	493a      	ldr	r1, [pc, #232]	; (7fdc <_dtoa_r+0x34c>)
    7ef2:	ed91 6b08 	vldr	d6, [r1, #32]
    7ef6:	f002 020f 	and.w	r2, r2, #15
    7efa:	2003      	movs	r0, #3
    7efc:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7f00:	b15a      	cbz	r2, 7f1a <_dtoa_r+0x28a>
    7f02:	4936      	ldr	r1, [pc, #216]	; (7fdc <_dtoa_r+0x34c>)
    7f04:	07d6      	lsls	r6, r2, #31
    7f06:	d504      	bpl.n	7f12 <_dtoa_r+0x282>
    7f08:	ed91 6b00 	vldr	d6, [r1]
    7f0c:	3001      	adds	r0, #1
    7f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
    7f12:	1052      	asrs	r2, r2, #1
    7f14:	f101 0108 	add.w	r1, r1, #8
    7f18:	d1f4      	bne.n	7f04 <_dtoa_r+0x274>
    7f1a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    7f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f20:	b13b      	cbz	r3, 7f32 <_dtoa_r+0x2a2>
    7f22:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7f26:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f2e:	f100 84ae 	bmi.w	888e <_dtoa_r+0xbfe>
    7f32:	ee07 0a90 	vmov	s15, r0
    7f36:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    7f3a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    7f3e:	eea5 7b06 	vfma.f64	d7, d5, d6
    7f42:	ee17 2a90 	vmov	r2, s15
    7f46:	ec51 0b17 	vmov	r0, r1, d7
    7f4a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7f4e:	f1b9 0f00 	cmp.w	r9, #0
    7f52:	f000 8388 	beq.w	8666 <_dtoa_r+0x9d6>
    7f56:	9e04      	ldr	r6, [sp, #16]
    7f58:	464a      	mov	r2, r9
    7f5a:	9b07      	ldr	r3, [sp, #28]
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	f000 8447 	beq.w	87f0 <_dtoa_r+0xb60>
    7f62:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    7f66:	4b1a      	ldr	r3, [pc, #104]	; (7fd0 <_dtoa_r+0x340>)
    7f68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    7f6c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7f70:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    7f74:	ee36 7b47 	vsub.f64	d7, d6, d7
    7f78:	ed1c 6b02 	vldr	d6, [ip, #-8]
    7f7c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7f80:	ec41 0b16 	vmov	d6, r0, r1
    7f84:	ee14 0a90 	vmov	r0, s9
    7f88:	ee35 5b46 	vsub.f64	d5, d5, d6
    7f8c:	9900      	ldr	r1, [sp, #0]
    7f8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    7f92:	3030      	adds	r0, #48	; 0x30
    7f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f98:	f801 0b01 	strb.w	r0, [r1], #1
    7f9c:	f300 84ac 	bgt.w	88f8 <_dtoa_r+0xc68>
    7fa0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    7fa4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7fa8:	f04f 0c00 	mov.w	ip, #0
    7fac:	e031      	b.n	8012 <_dtoa_r+0x382>
    7fae:	bf00      	nop
    7fb0:	636f4361 	.word	0x636f4361
    7fb4:	3fd287a7 	.word	0x3fd287a7
    7fb8:	8b60c8b3 	.word	0x8b60c8b3
    7fbc:	3fc68a28 	.word	0x3fc68a28
    7fc0:	509f79fb 	.word	0x509f79fb
    7fc4:	3fd34413 	.word	0x3fd34413
    7fc8:	7ff00000 	.word	0x7ff00000
    7fcc:	20000c39 	.word	0x20000c39
    7fd0:	200002a8 	.word	0x200002a8
    7fd4:	2000081c 	.word	0x2000081c
    7fd8:	20000828 	.word	0x20000828
    7fdc:	20000280 	.word	0x20000280
    7fe0:	f10c 0c01 	add.w	ip, ip, #1
    7fe4:	4594      	cmp	ip, r2
    7fe6:	da4d      	bge.n	8084 <_dtoa_r+0x3f4>
    7fe8:	ee27 7b04 	vmul.f64	d7, d7, d4
    7fec:	ee25 5b04 	vmul.f64	d5, d5, d4
    7ff0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7ff4:	ee16 3a90 	vmov	r3, s13
    7ff8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    7ffc:	3330      	adds	r3, #48	; 0x30
    7ffe:	ee37 7b43 	vsub.f64	d7, d7, d3
    8002:	eeb4 7bc5 	vcmpe.f64	d7, d5
    8006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    800a:	f801 3b01 	strb.w	r3, [r1], #1
    800e:	f100 8473 	bmi.w	88f8 <_dtoa_r+0xc68>
    8012:	ee32 6b47 	vsub.f64	d6, d2, d7
    8016:	eeb4 6bc5 	vcmpe.f64	d6, d5
    801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    801e:	d5df      	bpl.n	7fe0 <_dtoa_r+0x350>
    8020:	9a00      	ldr	r2, [sp, #0]
    8022:	9604      	str	r6, [sp, #16]
    8024:	e002      	b.n	802c <_dtoa_r+0x39c>
    8026:	428a      	cmp	r2, r1
    8028:	f000 8450 	beq.w	88cc <_dtoa_r+0xc3c>
    802c:	4689      	mov	r9, r1
    802e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    8032:	2b39      	cmp	r3, #57	; 0x39
    8034:	d0f7      	beq.n	8026 <_dtoa_r+0x396>
    8036:	3301      	adds	r3, #1
    8038:	b2db      	uxtb	r3, r3
    803a:	700b      	strb	r3, [r1, #0]
    803c:	9b04      	ldr	r3, [sp, #16]
    803e:	3301      	adds	r3, #1
    8040:	9304      	str	r3, [sp, #16]
    8042:	e155      	b.n	82f0 <_dtoa_r+0x660>
    8044:	1a09      	subs	r1, r1, r0
    8046:	2301      	movs	r3, #1
    8048:	f1b1 0801 	subs.w	r8, r1, #1
    804c:	930a      	str	r3, [sp, #40]	; 0x28
    804e:	f57f aec7 	bpl.w	7de0 <_dtoa_r+0x150>
    8052:	f1c1 0301 	rsb	r3, r1, #1
    8056:	9306      	str	r3, [sp, #24]
    8058:	f04f 0800 	mov.w	r8, #0
    805c:	e6c2      	b.n	7de4 <_dtoa_r+0x154>
    805e:	2600      	movs	r6, #0
    8060:	63e6      	str	r6, [r4, #60]	; 0x3c
    8062:	4631      	mov	r1, r6
    8064:	4620      	mov	r0, r4
    8066:	f7fe ff49 	bl	6efc <_Balloc>
    806a:	9000      	str	r0, [sp, #0]
    806c:	2800      	cmp	r0, #0
    806e:	f000 8467 	beq.w	8940 <_dtoa_r+0xcb0>
    8072:	9b00      	ldr	r3, [sp, #0]
    8074:	63a3      	str	r3, [r4, #56]	; 0x38
    8076:	f04f 33ff 	mov.w	r3, #4294967295
    807a:	930b      	str	r3, [sp, #44]	; 0x2c
    807c:	4699      	mov	r9, r3
    807e:	2301      	movs	r3, #1
    8080:	46b3      	mov	fp, r6
    8082:	9307      	str	r3, [sp, #28]
    8084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8086:	2a00      	cmp	r2, #0
    8088:	db55      	blt.n	8136 <_dtoa_r+0x4a6>
    808a:	9904      	ldr	r1, [sp, #16]
    808c:	290e      	cmp	r1, #14
    808e:	dc52      	bgt.n	8136 <_dtoa_r+0x4a6>
    8090:	4bb7      	ldr	r3, [pc, #732]	; (8370 <_dtoa_r+0x6e0>)
    8092:	f1bb 0f00 	cmp.w	fp, #0
    8096:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    809a:	ed93 6b00 	vldr	d6, [r3]
    809e:	da15      	bge.n	80cc <_dtoa_r+0x43c>
    80a0:	f1b9 0f00 	cmp.w	r9, #0
    80a4:	dc12      	bgt.n	80cc <_dtoa_r+0x43c>
    80a6:	f040 82f2 	bne.w	868e <_dtoa_r+0x9fe>
    80aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    80ae:	ee26 7b07 	vmul.f64	d7, d6, d7
    80b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    80b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80ba:	46ca      	mov	sl, r9
    80bc:	464e      	mov	r6, r9
    80be:	f200 826d 	bhi.w	859c <_dtoa_r+0x90c>
    80c2:	f8dd 8000 	ldr.w	r8, [sp]
    80c6:	ea6f 0b0b 	mvn.w	fp, fp
    80ca:	e270      	b.n	85ae <_dtoa_r+0x91e>
    80cc:	ee88 7b06 	vdiv.f64	d7, d8, d6
    80d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    80d4:	9900      	ldr	r1, [sp, #0]
    80d6:	ee17 3a10 	vmov	r3, s14
    80da:	f1b9 0f01 	cmp.w	r9, #1
    80de:	f103 0330 	add.w	r3, r3, #48	; 0x30
    80e2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    80e6:	f801 3b01 	strb.w	r3, [r1], #1
    80ea:	eea5 8b46 	vfms.f64	d8, d5, d6
    80ee:	f000 8334 	beq.w	875a <_dtoa_r+0xaca>
    80f2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    80f6:	2301      	movs	r3, #1
    80f8:	e011      	b.n	811e <_dtoa_r+0x48e>
    80fa:	ee88 7b06 	vdiv.f64	d7, d8, d6
    80fe:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    8102:	3301      	adds	r3, #1
    8104:	ee17 2a10 	vmov	r2, s14
    8108:	454b      	cmp	r3, r9
    810a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    810e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    8112:	f801 2b01 	strb.w	r2, [r1], #1
    8116:	eea5 8b46 	vfms.f64	d8, d5, d6
    811a:	f000 831e 	beq.w	875a <_dtoa_r+0xaca>
    811e:	ee28 8b04 	vmul.f64	d8, d8, d4
    8122:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    812a:	d1e6      	bne.n	80fa <_dtoa_r+0x46a>
    812c:	9b04      	ldr	r3, [sp, #16]
    812e:	3301      	adds	r3, #1
    8130:	9304      	str	r3, [sp, #16]
    8132:	4689      	mov	r9, r1
    8134:	e0dc      	b.n	82f0 <_dtoa_r+0x660>
    8136:	9b07      	ldr	r3, [sp, #28]
    8138:	b343      	cbz	r3, 818c <_dtoa_r+0x4fc>
    813a:	9b01      	ldr	r3, [sp, #4]
    813c:	2b01      	cmp	r3, #1
    813e:	f340 8276 	ble.w	862e <_dtoa_r+0x99e>
    8142:	9b08      	ldr	r3, [sp, #32]
    8144:	f109 3aff 	add.w	sl, r9, #4294967295
    8148:	4553      	cmp	r3, sl
    814a:	f280 823f 	bge.w	85cc <_dtoa_r+0x93c>
    814e:	9b08      	ldr	r3, [sp, #32]
    8150:	f8cd a020 	str.w	sl, [sp, #32]
    8154:	ebaa 0203 	sub.w	r2, sl, r3
    8158:	4417      	add	r7, r2
    815a:	f04f 0a00 	mov.w	sl, #0
    815e:	f1b9 0f00 	cmp.w	r9, #0
    8162:	f2c0 8325 	blt.w	87b0 <_dtoa_r+0xb20>
    8166:	9b06      	ldr	r3, [sp, #24]
    8168:	9309      	str	r3, [sp, #36]	; 0x24
    816a:	444b      	add	r3, r9
    816c:	44c8      	add	r8, r9
    816e:	9306      	str	r3, [sp, #24]
    8170:	2101      	movs	r1, #1
    8172:	4620      	mov	r0, r4
    8174:	f7fe ff94 	bl	70a0 <__i2b>
    8178:	4606      	mov	r6, r0
    817a:	e00c      	b.n	8196 <_dtoa_r+0x506>
    817c:	4b7d      	ldr	r3, [pc, #500]	; (8374 <_dtoa_r+0x6e4>)
    817e:	9300      	str	r3, [sp, #0]
    8180:	9800      	ldr	r0, [sp, #0]
    8182:	b00f      	add	sp, #60	; 0x3c
    8184:	ecbd 8b02 	vpop	{d8}
    8188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    818c:	9b06      	ldr	r3, [sp, #24]
    818e:	f8dd a020 	ldr.w	sl, [sp, #32]
    8192:	9e07      	ldr	r6, [sp, #28]
    8194:	9309      	str	r3, [sp, #36]	; 0x24
    8196:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8198:	b16b      	cbz	r3, 81b6 <_dtoa_r+0x526>
    819a:	f1b8 0f00 	cmp.w	r8, #0
    819e:	dd0a      	ble.n	81b6 <_dtoa_r+0x526>
    81a0:	4543      	cmp	r3, r8
    81a2:	9906      	ldr	r1, [sp, #24]
    81a4:	461a      	mov	r2, r3
    81a6:	bfa8      	it	ge
    81a8:	4642      	movge	r2, r8
    81aa:	1a89      	subs	r1, r1, r2
    81ac:	1a9b      	subs	r3, r3, r2
    81ae:	9106      	str	r1, [sp, #24]
    81b0:	9309      	str	r3, [sp, #36]	; 0x24
    81b2:	eba8 0802 	sub.w	r8, r8, r2
    81b6:	9b08      	ldr	r3, [sp, #32]
    81b8:	b163      	cbz	r3, 81d4 <_dtoa_r+0x544>
    81ba:	9b07      	ldr	r3, [sp, #28]
    81bc:	2b00      	cmp	r3, #0
    81be:	f000 82a7 	beq.w	8710 <_dtoa_r+0xa80>
    81c2:	f1ba 0f00 	cmp.w	sl, #0
    81c6:	f300 8204 	bgt.w	85d2 <_dtoa_r+0x942>
    81ca:	9b08      	ldr	r3, [sp, #32]
    81cc:	ebb3 020a 	subs.w	r2, r3, sl
    81d0:	f040 82ff 	bne.w	87d2 <_dtoa_r+0xb42>
    81d4:	2101      	movs	r1, #1
    81d6:	4620      	mov	r0, r4
    81d8:	f7fe ff62 	bl	70a0 <__i2b>
    81dc:	2f00      	cmp	r7, #0
    81de:	4682      	mov	sl, r0
    81e0:	f300 80af 	bgt.w	8342 <_dtoa_r+0x6b2>
    81e4:	9b01      	ldr	r3, [sp, #4]
    81e6:	2b01      	cmp	r3, #1
    81e8:	f340 8187 	ble.w	84fa <_dtoa_r+0x86a>
    81ec:	2300      	movs	r3, #0
    81ee:	9308      	str	r3, [sp, #32]
    81f0:	2001      	movs	r0, #1
    81f2:	2f00      	cmp	r7, #0
    81f4:	f040 80b1 	bne.w	835a <_dtoa_r+0x6ca>
    81f8:	4440      	add	r0, r8
    81fa:	f010 001f 	ands.w	r0, r0, #31
    81fe:	f000 817a 	beq.w	84f6 <_dtoa_r+0x866>
    8202:	f1c0 0220 	rsb	r2, r0, #32
    8206:	2a04      	cmp	r2, #4
    8208:	f300 8088 	bgt.w	831c <_dtoa_r+0x68c>
    820c:	f040 81f6 	bne.w	85fc <_dtoa_r+0x96c>
    8210:	9b06      	ldr	r3, [sp, #24]
    8212:	2b00      	cmp	r3, #0
    8214:	dd05      	ble.n	8222 <_dtoa_r+0x592>
    8216:	4629      	mov	r1, r5
    8218:	461a      	mov	r2, r3
    821a:	4620      	mov	r0, r4
    821c:	f7ff f87c 	bl	7318 <__lshift>
    8220:	4605      	mov	r5, r0
    8222:	f1b8 0f00 	cmp.w	r8, #0
    8226:	dd05      	ble.n	8234 <_dtoa_r+0x5a4>
    8228:	4651      	mov	r1, sl
    822a:	4642      	mov	r2, r8
    822c:	4620      	mov	r0, r4
    822e:	f7ff f873 	bl	7318 <__lshift>
    8232:	4682      	mov	sl, r0
    8234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8236:	2b00      	cmp	r3, #0
    8238:	f040 813f 	bne.w	84ba <_dtoa_r+0x82a>
    823c:	f1b9 0f00 	cmp.w	r9, #0
    8240:	f340 8125 	ble.w	848e <_dtoa_r+0x7fe>
    8244:	9b07      	ldr	r3, [sp, #28]
    8246:	2b00      	cmp	r3, #0
    8248:	f040 80a3 	bne.w	8392 <_dtoa_r+0x702>
    824c:	9b04      	ldr	r3, [sp, #16]
    824e:	3301      	adds	r3, #1
    8250:	9304      	str	r3, [sp, #16]
    8252:	f8dd 8000 	ldr.w	r8, [sp]
    8256:	2701      	movs	r7, #1
    8258:	e007      	b.n	826a <_dtoa_r+0x5da>
    825a:	4629      	mov	r1, r5
    825c:	2300      	movs	r3, #0
    825e:	220a      	movs	r2, #10
    8260:	4620      	mov	r0, r4
    8262:	f7fe fe7b 	bl	6f5c <__multadd>
    8266:	3701      	adds	r7, #1
    8268:	4605      	mov	r5, r0
    826a:	4651      	mov	r1, sl
    826c:	4628      	mov	r0, r5
    826e:	f7ff fc7b 	bl	7b68 <quorem>
    8272:	45b9      	cmp	r9, r7
    8274:	f100 0030 	add.w	r0, r0, #48	; 0x30
    8278:	f808 0b01 	strb.w	r0, [r8], #1
    827c:	dced      	bgt.n	825a <_dtoa_r+0x5ca>
    827e:	f1b9 0f00 	cmp.w	r9, #0
    8282:	9a00      	ldr	r2, [sp, #0]
    8284:	bfcc      	ite	gt
    8286:	46cb      	movgt	fp, r9
    8288:	f04f 0b01 	movle.w	fp, #1
    828c:	4603      	mov	r3, r0
    828e:	4493      	add	fp, r2
    8290:	2700      	movs	r7, #0
    8292:	4629      	mov	r1, r5
    8294:	2201      	movs	r2, #1
    8296:	4620      	mov	r0, r4
    8298:	9301      	str	r3, [sp, #4]
    829a:	f7ff f83d 	bl	7318 <__lshift>
    829e:	4651      	mov	r1, sl
    82a0:	4605      	mov	r5, r0
    82a2:	f7ff f8b1 	bl	7408 <__mcmp>
    82a6:	2800      	cmp	r0, #0
    82a8:	f340 81af 	ble.w	860a <_dtoa_r+0x97a>
    82ac:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    82b0:	9a00      	ldr	r2, [sp, #0]
    82b2:	f10b 3bff 	add.w	fp, fp, #4294967295
    82b6:	e004      	b.n	82c2 <_dtoa_r+0x632>
    82b8:	455a      	cmp	r2, fp
    82ba:	f000 81b1 	beq.w	8620 <_dtoa_r+0x990>
    82be:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    82c2:	2b39      	cmp	r3, #57	; 0x39
    82c4:	f10b 0901 	add.w	r9, fp, #1
    82c8:	d0f6      	beq.n	82b8 <_dtoa_r+0x628>
    82ca:	3301      	adds	r3, #1
    82cc:	f88b 3000 	strb.w	r3, [fp]
    82d0:	4651      	mov	r1, sl
    82d2:	4620      	mov	r0, r4
    82d4:	f7fe fe38 	bl	6f48 <_Bfree>
    82d8:	b156      	cbz	r6, 82f0 <_dtoa_r+0x660>
    82da:	b12f      	cbz	r7, 82e8 <_dtoa_r+0x658>
    82dc:	42b7      	cmp	r7, r6
    82de:	d003      	beq.n	82e8 <_dtoa_r+0x658>
    82e0:	4639      	mov	r1, r7
    82e2:	4620      	mov	r0, r4
    82e4:	f7fe fe30 	bl	6f48 <_Bfree>
    82e8:	4631      	mov	r1, r6
    82ea:	4620      	mov	r0, r4
    82ec:	f7fe fe2c 	bl	6f48 <_Bfree>
    82f0:	4629      	mov	r1, r5
    82f2:	4620      	mov	r0, r4
    82f4:	f7fe fe28 	bl	6f48 <_Bfree>
    82f8:	2300      	movs	r3, #0
    82fa:	f889 3000 	strb.w	r3, [r9]
    82fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8302:	601a      	str	r2, [r3, #0]
    8304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8306:	2b00      	cmp	r3, #0
    8308:	f43f acfe 	beq.w	7d08 <_dtoa_r+0x78>
    830c:	9800      	ldr	r0, [sp, #0]
    830e:	f8c3 9000 	str.w	r9, [r3]
    8312:	b00f      	add	sp, #60	; 0x3c
    8314:	ecbd 8b02 	vpop	{d8}
    8318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    831c:	f1c0 001c 	rsb	r0, r0, #28
    8320:	9b06      	ldr	r3, [sp, #24]
    8322:	4403      	add	r3, r0
    8324:	9306      	str	r3, [sp, #24]
    8326:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8328:	4403      	add	r3, r0
    832a:	9309      	str	r3, [sp, #36]	; 0x24
    832c:	4480      	add	r8, r0
    832e:	e76f      	b.n	8210 <_dtoa_r+0x580>
    8330:	f1c2 0220 	rsb	r2, r2, #32
    8334:	fa06 f202 	lsl.w	r2, r6, r2
    8338:	ee07 2a10 	vmov	s14, r2
    833c:	e509      	b.n	7d52 <_dtoa_r+0xc2>
    833e:	2601      	movs	r6, #1
    8340:	e563      	b.n	7e0a <_dtoa_r+0x17a>
    8342:	4601      	mov	r1, r0
    8344:	463a      	mov	r2, r7
    8346:	4620      	mov	r0, r4
    8348:	f7fe ff86 	bl	7258 <__pow5mult>
    834c:	9b01      	ldr	r3, [sp, #4]
    834e:	2b01      	cmp	r3, #1
    8350:	4682      	mov	sl, r0
    8352:	f340 81c5 	ble.w	86e0 <_dtoa_r+0xa50>
    8356:	2300      	movs	r3, #0
    8358:	9308      	str	r3, [sp, #32]
    835a:	f8da 2010 	ldr.w	r2, [sl, #16]
    835e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    8362:	6910      	ldr	r0, [r2, #16]
    8364:	f7fe fe4c 	bl	7000 <__hi0bits>
    8368:	f1c0 0020 	rsb	r0, r0, #32
    836c:	e744      	b.n	81f8 <_dtoa_r+0x568>
    836e:	bf00      	nop
    8370:	200002a8 	.word	0x200002a8
    8374:	20000c38 	.word	0x20000c38
    8378:	4631      	mov	r1, r6
    837a:	2300      	movs	r3, #0
    837c:	220a      	movs	r2, #10
    837e:	4620      	mov	r0, r4
    8380:	f7fe fdec 	bl	6f5c <__multadd>
    8384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8386:	2b00      	cmp	r3, #0
    8388:	4606      	mov	r6, r0
    838a:	f340 82ce 	ble.w	892a <_dtoa_r+0xc9a>
    838e:	9704      	str	r7, [sp, #16]
    8390:	4699      	mov	r9, r3
    8392:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8394:	2b00      	cmp	r3, #0
    8396:	dd05      	ble.n	83a4 <_dtoa_r+0x714>
    8398:	4631      	mov	r1, r6
    839a:	461a      	mov	r2, r3
    839c:	4620      	mov	r0, r4
    839e:	f7fe ffbb 	bl	7318 <__lshift>
    83a2:	4606      	mov	r6, r0
    83a4:	9b08      	ldr	r3, [sp, #32]
    83a6:	2b00      	cmp	r3, #0
    83a8:	f040 81eb 	bne.w	8782 <_dtoa_r+0xaf2>
    83ac:	46b0      	mov	r8, r6
    83ae:	9b02      	ldr	r3, [sp, #8]
    83b0:	9f00      	ldr	r7, [sp, #0]
    83b2:	f003 0201 	and.w	r2, r3, #1
    83b6:	1e7b      	subs	r3, r7, #1
    83b8:	444b      	add	r3, r9
    83ba:	9308      	str	r3, [sp, #32]
    83bc:	9b01      	ldr	r3, [sp, #4]
    83be:	920a      	str	r2, [sp, #40]	; 0x28
    83c0:	4313      	orrs	r3, r2
    83c2:	9309      	str	r3, [sp, #36]	; 0x24
    83c4:	4651      	mov	r1, sl
    83c6:	4628      	mov	r0, r5
    83c8:	f7ff fbce 	bl	7b68 <quorem>
    83cc:	4631      	mov	r1, r6
    83ce:	4683      	mov	fp, r0
    83d0:	4628      	mov	r0, r5
    83d2:	f7ff f819 	bl	7408 <__mcmp>
    83d6:	4642      	mov	r2, r8
    83d8:	4651      	mov	r1, sl
    83da:	4681      	mov	r9, r0
    83dc:	4620      	mov	r0, r4
    83de:	f7ff f835 	bl	744c <__mdiff>
    83e2:	68c2      	ldr	r2, [r0, #12]
    83e4:	4601      	mov	r1, r0
    83e6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    83ea:	2a00      	cmp	r2, #0
    83ec:	d142      	bne.n	8474 <_dtoa_r+0x7e4>
    83ee:	e9cd 0306 	strd	r0, r3, [sp, #24]
    83f2:	4628      	mov	r0, r5
    83f4:	f7ff f808 	bl	7408 <__mcmp>
    83f8:	9906      	ldr	r1, [sp, #24]
    83fa:	9002      	str	r0, [sp, #8]
    83fc:	4620      	mov	r0, r4
    83fe:	f7fe fda3 	bl	6f48 <_Bfree>
    8402:	9a02      	ldr	r2, [sp, #8]
    8404:	9b07      	ldr	r3, [sp, #28]
    8406:	b91a      	cbnz	r2, 8410 <_dtoa_r+0x780>
    8408:	9909      	ldr	r1, [sp, #36]	; 0x24
    840a:	2900      	cmp	r1, #0
    840c:	f000 827e 	beq.w	890c <_dtoa_r+0xc7c>
    8410:	f1b9 0f00 	cmp.w	r9, #0
    8414:	f2c0 8183 	blt.w	871e <_dtoa_r+0xa8e>
    8418:	9901      	ldr	r1, [sp, #4]
    841a:	ea49 0901 	orr.w	r9, r9, r1
    841e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8420:	ea51 0909 	orrs.w	r9, r1, r9
    8424:	f000 817b 	beq.w	871e <_dtoa_r+0xa8e>
    8428:	2a00      	cmp	r2, #0
    842a:	f300 81c6 	bgt.w	87ba <_dtoa_r+0xb2a>
    842e:	9a08      	ldr	r2, [sp, #32]
    8430:	703b      	strb	r3, [r7, #0]
    8432:	f107 0901 	add.w	r9, r7, #1
    8436:	4297      	cmp	r7, r2
    8438:	46cb      	mov	fp, r9
    843a:	f000 81c4 	beq.w	87c6 <_dtoa_r+0xb36>
    843e:	4629      	mov	r1, r5
    8440:	2300      	movs	r3, #0
    8442:	220a      	movs	r2, #10
    8444:	4620      	mov	r0, r4
    8446:	f7fe fd89 	bl	6f5c <__multadd>
    844a:	4546      	cmp	r6, r8
    844c:	4605      	mov	r5, r0
    844e:	4631      	mov	r1, r6
    8450:	f04f 0300 	mov.w	r3, #0
    8454:	f04f 020a 	mov.w	r2, #10
    8458:	4620      	mov	r0, r4
    845a:	d012      	beq.n	8482 <_dtoa_r+0x7f2>
    845c:	f7fe fd7e 	bl	6f5c <__multadd>
    8460:	4641      	mov	r1, r8
    8462:	4606      	mov	r6, r0
    8464:	2300      	movs	r3, #0
    8466:	220a      	movs	r2, #10
    8468:	4620      	mov	r0, r4
    846a:	f7fe fd77 	bl	6f5c <__multadd>
    846e:	464f      	mov	r7, r9
    8470:	4680      	mov	r8, r0
    8472:	e7a7      	b.n	83c4 <_dtoa_r+0x734>
    8474:	4620      	mov	r0, r4
    8476:	9302      	str	r3, [sp, #8]
    8478:	f7fe fd66 	bl	6f48 <_Bfree>
    847c:	9b02      	ldr	r3, [sp, #8]
    847e:	2201      	movs	r2, #1
    8480:	e7c6      	b.n	8410 <_dtoa_r+0x780>
    8482:	f7fe fd6b 	bl	6f5c <__multadd>
    8486:	464f      	mov	r7, r9
    8488:	4606      	mov	r6, r0
    848a:	4680      	mov	r8, r0
    848c:	e79a      	b.n	83c4 <_dtoa_r+0x734>
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	2b02      	cmp	r3, #2
    8492:	dc71      	bgt.n	8578 <_dtoa_r+0x8e8>
    8494:	9b07      	ldr	r3, [sp, #28]
    8496:	2b00      	cmp	r3, #0
    8498:	f47f af7b 	bne.w	8392 <_dtoa_r+0x702>
    849c:	9b04      	ldr	r3, [sp, #16]
    849e:	4651      	mov	r1, sl
    84a0:	3301      	adds	r3, #1
    84a2:	4628      	mov	r0, r5
    84a4:	9304      	str	r3, [sp, #16]
    84a6:	f7ff fb5f 	bl	7b68 <quorem>
    84aa:	f8dd b000 	ldr.w	fp, [sp]
    84ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
    84b2:	f80b 3b01 	strb.w	r3, [fp], #1
    84b6:	2700      	movs	r7, #0
    84b8:	e6eb      	b.n	8292 <_dtoa_r+0x602>
    84ba:	4651      	mov	r1, sl
    84bc:	4628      	mov	r0, r5
    84be:	f7fe ffa3 	bl	7408 <__mcmp>
    84c2:	2800      	cmp	r0, #0
    84c4:	f6bf aeba 	bge.w	823c <_dtoa_r+0x5ac>
    84c8:	4629      	mov	r1, r5
    84ca:	2300      	movs	r3, #0
    84cc:	220a      	movs	r2, #10
    84ce:	4620      	mov	r0, r4
    84d0:	f7fe fd44 	bl	6f5c <__multadd>
    84d4:	9b04      	ldr	r3, [sp, #16]
    84d6:	1e5f      	subs	r7, r3, #1
    84d8:	9b07      	ldr	r3, [sp, #28]
    84da:	4605      	mov	r5, r0
    84dc:	2b00      	cmp	r3, #0
    84de:	f47f af4b 	bne.w	8378 <_dtoa_r+0x6e8>
    84e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    84e4:	2b00      	cmp	r3, #0
    84e6:	f340 8218 	ble.w	891a <_dtoa_r+0xc8a>
    84ea:	4699      	mov	r9, r3
    84ec:	e6b1      	b.n	8252 <_dtoa_r+0x5c2>
    84ee:	4bbc      	ldr	r3, [pc, #752]	; (87e0 <_dtoa_r+0xb50>)
    84f0:	9300      	str	r3, [sp, #0]
    84f2:	3303      	adds	r3, #3
    84f4:	e4a4      	b.n	7e40 <_dtoa_r+0x1b0>
    84f6:	201c      	movs	r0, #28
    84f8:	e712      	b.n	8320 <_dtoa_r+0x690>
    84fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    84fe:	2800      	cmp	r0, #0
    8500:	f47f ae74 	bne.w	81ec <_dtoa_r+0x55c>
    8504:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8508:	2a00      	cmp	r2, #0
    850a:	f000 80f4 	beq.w	86f6 <_dtoa_r+0xa66>
    850e:	9b02      	ldr	r3, [sp, #8]
    8510:	9308      	str	r3, [sp, #32]
    8512:	e66d      	b.n	81f0 <_dtoa_r+0x560>
    8514:	2301      	movs	r3, #1
    8516:	9307      	str	r3, [sp, #28]
    8518:	9b04      	ldr	r3, [sp, #16]
    851a:	445b      	add	r3, fp
    851c:	f103 0901 	add.w	r9, r3, #1
    8520:	f1b9 0f01 	cmp.w	r9, #1
    8524:	46cc      	mov	ip, r9
    8526:	930b      	str	r3, [sp, #44]	; 0x2c
    8528:	bfb8      	it	lt
    852a:	f04f 0c01 	movlt.w	ip, #1
    852e:	2100      	movs	r1, #0
    8530:	f1bc 0f17 	cmp.w	ip, #23
    8534:	63e1      	str	r1, [r4, #60]	; 0x3c
    8536:	f77f acbc 	ble.w	7eb2 <_dtoa_r+0x222>
    853a:	2001      	movs	r0, #1
    853c:	2204      	movs	r2, #4
    853e:	0052      	lsls	r2, r2, #1
    8540:	f102 0314 	add.w	r3, r2, #20
    8544:	4563      	cmp	r3, ip
    8546:	4601      	mov	r1, r0
    8548:	f100 0001 	add.w	r0, r0, #1
    854c:	d9f7      	bls.n	853e <_dtoa_r+0x8ae>
    854e:	63e1      	str	r1, [r4, #60]	; 0x3c
    8550:	e4af      	b.n	7eb2 <_dtoa_r+0x222>
    8552:	2301      	movs	r3, #1
    8554:	9307      	str	r3, [sp, #28]
    8556:	f1bb 0f00 	cmp.w	fp, #0
    855a:	dd52      	ble.n	8602 <_dtoa_r+0x972>
    855c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    8560:	46d9      	mov	r9, fp
    8562:	46dc      	mov	ip, fp
    8564:	e7e3      	b.n	852e <_dtoa_r+0x89e>
    8566:	2300      	movs	r3, #0
    8568:	9307      	str	r3, [sp, #28]
    856a:	e7d5      	b.n	8518 <_dtoa_r+0x888>
    856c:	2300      	movs	r3, #0
    856e:	9307      	str	r3, [sp, #28]
    8570:	e7f1      	b.n	8556 <_dtoa_r+0x8c6>
    8572:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    8576:	9704      	str	r7, [sp, #16]
    8578:	f1b9 0f00 	cmp.w	r9, #0
    857c:	f47f ada1 	bne.w	80c2 <_dtoa_r+0x432>
    8580:	4651      	mov	r1, sl
    8582:	464b      	mov	r3, r9
    8584:	2205      	movs	r2, #5
    8586:	4620      	mov	r0, r4
    8588:	f7fe fce8 	bl	6f5c <__multadd>
    858c:	4601      	mov	r1, r0
    858e:	4682      	mov	sl, r0
    8590:	4628      	mov	r0, r5
    8592:	f7fe ff39 	bl	7408 <__mcmp>
    8596:	2800      	cmp	r0, #0
    8598:	f77f ad93 	ble.w	80c2 <_dtoa_r+0x432>
    859c:	9b04      	ldr	r3, [sp, #16]
    859e:	f103 0b01 	add.w	fp, r3, #1
    85a2:	9b00      	ldr	r3, [sp, #0]
    85a4:	2231      	movs	r2, #49	; 0x31
    85a6:	4698      	mov	r8, r3
    85a8:	f803 2b01 	strb.w	r2, [r3], #1
    85ac:	9300      	str	r3, [sp, #0]
    85ae:	4651      	mov	r1, sl
    85b0:	4620      	mov	r0, r4
    85b2:	f7fe fcc9 	bl	6f48 <_Bfree>
    85b6:	f10b 0301 	add.w	r3, fp, #1
    85ba:	f8dd 9000 	ldr.w	r9, [sp]
    85be:	9304      	str	r3, [sp, #16]
    85c0:	f8cd 8000 	str.w	r8, [sp]
    85c4:	2e00      	cmp	r6, #0
    85c6:	f47f ae8f 	bne.w	82e8 <_dtoa_r+0x658>
    85ca:	e691      	b.n	82f0 <_dtoa_r+0x660>
    85cc:	eba3 0a0a 	sub.w	sl, r3, sl
    85d0:	e5c5      	b.n	815e <_dtoa_r+0x4ce>
    85d2:	4631      	mov	r1, r6
    85d4:	4652      	mov	r2, sl
    85d6:	4620      	mov	r0, r4
    85d8:	f7fe fe3e 	bl	7258 <__pow5mult>
    85dc:	462a      	mov	r2, r5
    85de:	4601      	mov	r1, r0
    85e0:	4606      	mov	r6, r0
    85e2:	4620      	mov	r0, r4
    85e4:	f7fe fd8a 	bl	70fc <__multiply>
    85e8:	4629      	mov	r1, r5
    85ea:	4605      	mov	r5, r0
    85ec:	4620      	mov	r0, r4
    85ee:	f7fe fcab 	bl	6f48 <_Bfree>
    85f2:	e5ea      	b.n	81ca <_dtoa_r+0x53a>
    85f4:	2002      	movs	r0, #2
    85f6:	eeb0 5b48 	vmov.f64	d5, d8
    85fa:	e481      	b.n	7f00 <_dtoa_r+0x270>
    85fc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    8600:	e68e      	b.n	8320 <_dtoa_r+0x690>
    8602:	f04f 0b01 	mov.w	fp, #1
    8606:	46d9      	mov	r9, fp
    8608:	e44f      	b.n	7eaa <_dtoa_r+0x21a>
    860a:	d103      	bne.n	8614 <_dtoa_r+0x984>
    860c:	9b01      	ldr	r3, [sp, #4]
    860e:	07db      	lsls	r3, r3, #31
    8610:	f53f ae4c 	bmi.w	82ac <_dtoa_r+0x61c>
    8614:	46d9      	mov	r9, fp
    8616:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    861a:	2b30      	cmp	r3, #48	; 0x30
    861c:	d0fa      	beq.n	8614 <_dtoa_r+0x984>
    861e:	e657      	b.n	82d0 <_dtoa_r+0x640>
    8620:	9b04      	ldr	r3, [sp, #16]
    8622:	9a00      	ldr	r2, [sp, #0]
    8624:	3301      	adds	r3, #1
    8626:	9304      	str	r3, [sp, #16]
    8628:	2331      	movs	r3, #49	; 0x31
    862a:	7013      	strb	r3, [r2, #0]
    862c:	e650      	b.n	82d0 <_dtoa_r+0x640>
    862e:	f1ba 0f00 	cmp.w	sl, #0
    8632:	f000 8123 	beq.w	887c <_dtoa_r+0xbec>
    8636:	f202 4233 	addw	r2, r2, #1075	; 0x433
    863a:	9b06      	ldr	r3, [sp, #24]
    863c:	9309      	str	r3, [sp, #36]	; 0x24
    863e:	4413      	add	r3, r2
    8640:	f8dd a020 	ldr.w	sl, [sp, #32]
    8644:	9306      	str	r3, [sp, #24]
    8646:	4490      	add	r8, r2
    8648:	e592      	b.n	8170 <_dtoa_r+0x4e0>
    864a:	ee07 0a90 	vmov	s15, r0
    864e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    8652:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    8656:	eea6 5b07 	vfma.f64	d5, d6, d7
    865a:	ee15 2a90 	vmov	r2, s11
    865e:	ec51 0b15 	vmov	r0, r1, d5
    8662:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    8666:	ec41 0b15 	vmov	d5, r0, r1
    866a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    866e:	ee36 7b47 	vsub.f64	d7, d6, d7
    8672:	eeb4 7bc5 	vcmpe.f64	d7, d5
    8676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    867a:	f300 8137 	bgt.w	88ec <_dtoa_r+0xc5c>
    867e:	eeb1 5b45 	vneg.f64	d5, d5
    8682:	eeb4 7bc5 	vcmpe.f64	d7, d5
    8686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    868a:	f57f acfb 	bpl.w	8084 <_dtoa_r+0x3f4>
    868e:	f04f 0a00 	mov.w	sl, #0
    8692:	4656      	mov	r6, sl
    8694:	e515      	b.n	80c2 <_dtoa_r+0x432>
    8696:	f000 80f5 	beq.w	8884 <_dtoa_r+0xbf4>
    869a:	9b04      	ldr	r3, [sp, #16]
    869c:	4951      	ldr	r1, [pc, #324]	; (87e4 <_dtoa_r+0xb54>)
    869e:	425a      	negs	r2, r3
    86a0:	f002 000f 	and.w	r0, r2, #15
    86a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    86a8:	ed91 6b00 	vldr	d6, [r1]
    86ac:	1112      	asrs	r2, r2, #4
    86ae:	ee28 6b06 	vmul.f64	d6, d8, d6
    86b2:	f000 8142 	beq.w	893a <_dtoa_r+0xcaa>
    86b6:	eeb0 7b46 	vmov.f64	d7, d6
    86ba:	494b      	ldr	r1, [pc, #300]	; (87e8 <_dtoa_r+0xb58>)
    86bc:	2600      	movs	r6, #0
    86be:	2002      	movs	r0, #2
    86c0:	07d3      	lsls	r3, r2, #31
    86c2:	d505      	bpl.n	86d0 <_dtoa_r+0xa40>
    86c4:	ed91 5b00 	vldr	d5, [r1]
    86c8:	3001      	adds	r0, #1
    86ca:	2601      	movs	r6, #1
    86cc:	ee27 7b05 	vmul.f64	d7, d7, d5
    86d0:	1052      	asrs	r2, r2, #1
    86d2:	f101 0108 	add.w	r1, r1, #8
    86d6:	d1f3      	bne.n	86c0 <_dtoa_r+0xa30>
    86d8:	2e00      	cmp	r6, #0
    86da:	fe06 6b07 	vseleq.f64	d6, d6, d7
    86de:	e41e      	b.n	7f1e <_dtoa_r+0x28e>
    86e0:	9b02      	ldr	r3, [sp, #8]
    86e2:	2b00      	cmp	r3, #0
    86e4:	f47f ae37 	bne.w	8356 <_dtoa_r+0x6c6>
    86e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    86ec:	f3c1 0213 	ubfx	r2, r1, #0, #20
    86f0:	2a00      	cmp	r2, #0
    86f2:	f040 8137 	bne.w	8964 <_dtoa_r+0xcd4>
    86f6:	4a3d      	ldr	r2, [pc, #244]	; (87ec <_dtoa_r+0xb5c>)
    86f8:	400a      	ands	r2, r1
    86fa:	2a00      	cmp	r2, #0
    86fc:	f000 80fa 	beq.w	88f4 <_dtoa_r+0xc64>
    8700:	9b06      	ldr	r3, [sp, #24]
    8702:	3301      	adds	r3, #1
    8704:	9306      	str	r3, [sp, #24]
    8706:	2301      	movs	r3, #1
    8708:	f108 0801 	add.w	r8, r8, #1
    870c:	9308      	str	r3, [sp, #32]
    870e:	e56f      	b.n	81f0 <_dtoa_r+0x560>
    8710:	4629      	mov	r1, r5
    8712:	9a08      	ldr	r2, [sp, #32]
    8714:	4620      	mov	r0, r4
    8716:	f7fe fd9f 	bl	7258 <__pow5mult>
    871a:	4605      	mov	r5, r0
    871c:	e55a      	b.n	81d4 <_dtoa_r+0x544>
    871e:	2a00      	cmp	r2, #0
    8720:	dd12      	ble.n	8748 <_dtoa_r+0xab8>
    8722:	4629      	mov	r1, r5
    8724:	2201      	movs	r2, #1
    8726:	4620      	mov	r0, r4
    8728:	9301      	str	r3, [sp, #4]
    872a:	f7fe fdf5 	bl	7318 <__lshift>
    872e:	4651      	mov	r1, sl
    8730:	4605      	mov	r5, r0
    8732:	f7fe fe69 	bl	7408 <__mcmp>
    8736:	2800      	cmp	r0, #0
    8738:	9b01      	ldr	r3, [sp, #4]
    873a:	f340 80e1 	ble.w	8900 <_dtoa_r+0xc70>
    873e:	2b39      	cmp	r3, #57	; 0x39
    8740:	f000 80ca 	beq.w	88d8 <_dtoa_r+0xc48>
    8744:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    8748:	46b9      	mov	r9, r7
    874a:	f809 3b01 	strb.w	r3, [r9], #1
    874e:	9b04      	ldr	r3, [sp, #16]
    8750:	3301      	adds	r3, #1
    8752:	4637      	mov	r7, r6
    8754:	9304      	str	r3, [sp, #16]
    8756:	4646      	mov	r6, r8
    8758:	e5ba      	b.n	82d0 <_dtoa_r+0x640>
    875a:	ee38 8b08 	vadd.f64	d8, d8, d8
    875e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    8762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8766:	dc0a      	bgt.n	877e <_dtoa_r+0xaee>
    8768:	eeb4 8b46 	vcmp.f64	d8, d6
    876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8770:	f47f acdc 	bne.w	812c <_dtoa_r+0x49c>
    8774:	ee17 3a10 	vmov	r3, s14
    8778:	07d8      	lsls	r0, r3, #31
    877a:	f57f acd7 	bpl.w	812c <_dtoa_r+0x49c>
    877e:	9a00      	ldr	r2, [sp, #0]
    8780:	e454      	b.n	802c <_dtoa_r+0x39c>
    8782:	6871      	ldr	r1, [r6, #4]
    8784:	4620      	mov	r0, r4
    8786:	f7fe fbb9 	bl	6efc <_Balloc>
    878a:	4607      	mov	r7, r0
    878c:	2800      	cmp	r0, #0
    878e:	f000 80de 	beq.w	894e <_dtoa_r+0xcbe>
    8792:	6933      	ldr	r3, [r6, #16]
    8794:	3302      	adds	r3, #2
    8796:	009a      	lsls	r2, r3, #2
    8798:	f106 010c 	add.w	r1, r6, #12
    879c:	300c      	adds	r0, #12
    879e:	f7fa fed1 	bl	3544 <memcpy>
    87a2:	4639      	mov	r1, r7
    87a4:	2201      	movs	r2, #1
    87a6:	4620      	mov	r0, r4
    87a8:	f7fe fdb6 	bl	7318 <__lshift>
    87ac:	4680      	mov	r8, r0
    87ae:	e5fe      	b.n	83ae <_dtoa_r+0x71e>
    87b0:	9b06      	ldr	r3, [sp, #24]
    87b2:	eba3 0309 	sub.w	r3, r3, r9
    87b6:	9309      	str	r3, [sp, #36]	; 0x24
    87b8:	e4da      	b.n	8170 <_dtoa_r+0x4e0>
    87ba:	2b39      	cmp	r3, #57	; 0x39
    87bc:	f000 808c 	beq.w	88d8 <_dtoa_r+0xc48>
    87c0:	46b9      	mov	r9, r7
    87c2:	3301      	adds	r3, #1
    87c4:	e7c1      	b.n	874a <_dtoa_r+0xaba>
    87c6:	9a04      	ldr	r2, [sp, #16]
    87c8:	3201      	adds	r2, #1
    87ca:	4637      	mov	r7, r6
    87cc:	9204      	str	r2, [sp, #16]
    87ce:	4646      	mov	r6, r8
    87d0:	e55f      	b.n	8292 <_dtoa_r+0x602>
    87d2:	4629      	mov	r1, r5
    87d4:	4620      	mov	r0, r4
    87d6:	f7fe fd3f 	bl	7258 <__pow5mult>
    87da:	4605      	mov	r5, r0
    87dc:	e4fa      	b.n	81d4 <_dtoa_r+0x544>
    87de:	bf00      	nop
    87e0:	20000828 	.word	0x20000828
    87e4:	200002a8 	.word	0x200002a8
    87e8:	20000280 	.word	0x20000280
    87ec:	7ff00000 	.word	0x7ff00000
    87f0:	4b5e      	ldr	r3, [pc, #376]	; (896c <_dtoa_r+0xcdc>)
    87f2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    87f6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    87fa:	ed1c 3b02 	vldr	d3, [ip, #-8]
    87fe:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    8802:	ee36 7b47 	vsub.f64	d7, d6, d7
    8806:	ec41 0b16 	vmov	d6, r0, r1
    880a:	ee15 1a90 	vmov	r1, s11
    880e:	ee23 3b06 	vmul.f64	d3, d3, d6
    8812:	9800      	ldr	r0, [sp, #0]
    8814:	3130      	adds	r1, #48	; 0x30
    8816:	2a01      	cmp	r2, #1
    8818:	f800 1b01 	strb.w	r1, [r0], #1
    881c:	f000 8083 	beq.w	8926 <_dtoa_r+0xc96>
    8820:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    8824:	9b00      	ldr	r3, [sp, #0]
    8826:	1899      	adds	r1, r3, r2
    8828:	ee27 7b04 	vmul.f64	d7, d7, d4
    882c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8830:	ee16 3a90 	vmov	r3, s13
    8834:	3330      	adds	r3, #48	; 0x30
    8836:	f800 3b01 	strb.w	r3, [r0], #1
    883a:	4281      	cmp	r1, r0
    883c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    8840:	ee37 7b45 	vsub.f64	d7, d7, d5
    8844:	d1f0      	bne.n	8828 <_dtoa_r+0xb98>
    8846:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    884a:	ee33 5b06 	vadd.f64	d5, d3, d6
    884e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    8852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8856:	f53f abe3 	bmi.w	8020 <_dtoa_r+0x390>
    885a:	ee36 6b43 	vsub.f64	d6, d6, d3
    885e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    8862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8866:	f77f ac0d 	ble.w	8084 <_dtoa_r+0x3f4>
    886a:	4689      	mov	r9, r1
    886c:	3901      	subs	r1, #1
    886e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    8872:	2b30      	cmp	r3, #48	; 0x30
    8874:	d0f9      	beq.n	886a <_dtoa_r+0xbda>
    8876:	1c73      	adds	r3, r6, #1
    8878:	9304      	str	r3, [sp, #16]
    887a:	e539      	b.n	82f0 <_dtoa_r+0x660>
    887c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    887e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    8882:	e6da      	b.n	863a <_dtoa_r+0x9aa>
    8884:	2002      	movs	r0, #2
    8886:	eeb0 6b48 	vmov.f64	d6, d8
    888a:	f7ff bb48 	b.w	7f1e <_dtoa_r+0x28e>
    888e:	f1b9 0f00 	cmp.w	r9, #0
    8892:	f43f aeda 	beq.w	864a <_dtoa_r+0x9ba>
    8896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8898:	2a00      	cmp	r2, #0
    889a:	f77f abf3 	ble.w	8084 <_dtoa_r+0x3f4>
    889e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    88a2:	ee26 6b04 	vmul.f64	d6, d6, d4
    88a6:	3001      	adds	r0, #1
    88a8:	ee07 0a90 	vmov	s15, r0
    88ac:	9b04      	ldr	r3, [sp, #16]
    88ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    88b2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    88b6:	eea6 7b05 	vfma.f64	d7, d6, d5
    88ba:	ee17 ca90 	vmov	ip, s15
    88be:	ec51 0b17 	vmov	r0, r1, d7
    88c2:	1e5e      	subs	r6, r3, #1
    88c4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    88c8:	f7ff bb47 	b.w	7f5a <_dtoa_r+0x2ca>
    88cc:	9b04      	ldr	r3, [sp, #16]
    88ce:	3301      	adds	r3, #1
    88d0:	9304      	str	r3, [sp, #16]
    88d2:	2331      	movs	r3, #49	; 0x31
    88d4:	f7ff bbb1 	b.w	803a <_dtoa_r+0x3aa>
    88d8:	9b04      	ldr	r3, [sp, #16]
    88da:	46bb      	mov	fp, r7
    88dc:	3301      	adds	r3, #1
    88de:	9304      	str	r3, [sp, #16]
    88e0:	2339      	movs	r3, #57	; 0x39
    88e2:	4637      	mov	r7, r6
    88e4:	f80b 3b01 	strb.w	r3, [fp], #1
    88e8:	4646      	mov	r6, r8
    88ea:	e4e1      	b.n	82b0 <_dtoa_r+0x620>
    88ec:	f04f 0a00 	mov.w	sl, #0
    88f0:	4656      	mov	r6, sl
    88f2:	e653      	b.n	859c <_dtoa_r+0x90c>
    88f4:	9208      	str	r2, [sp, #32]
    88f6:	e47b      	b.n	81f0 <_dtoa_r+0x560>
    88f8:	1c73      	adds	r3, r6, #1
    88fa:	9304      	str	r3, [sp, #16]
    88fc:	4689      	mov	r9, r1
    88fe:	e4f7      	b.n	82f0 <_dtoa_r+0x660>
    8900:	f47f af22 	bne.w	8748 <_dtoa_r+0xab8>
    8904:	07da      	lsls	r2, r3, #31
    8906:	f57f af1f 	bpl.w	8748 <_dtoa_r+0xab8>
    890a:	e718      	b.n	873e <_dtoa_r+0xaae>
    890c:	2b39      	cmp	r3, #57	; 0x39
    890e:	d0e3      	beq.n	88d8 <_dtoa_r+0xc48>
    8910:	f1b9 0f00 	cmp.w	r9, #0
    8914:	f73f af16 	bgt.w	8744 <_dtoa_r+0xab4>
    8918:	e716      	b.n	8748 <_dtoa_r+0xab8>
    891a:	9b01      	ldr	r3, [sp, #4]
    891c:	2b02      	cmp	r3, #2
    891e:	f73f ae28 	bgt.w	8572 <_dtoa_r+0x8e2>
    8922:	9704      	str	r7, [sp, #16]
    8924:	e5ba      	b.n	849c <_dtoa_r+0x80c>
    8926:	4601      	mov	r1, r0
    8928:	e78d      	b.n	8846 <_dtoa_r+0xbb6>
    892a:	9b01      	ldr	r3, [sp, #4]
    892c:	2b02      	cmp	r3, #2
    892e:	f73f ae20 	bgt.w	8572 <_dtoa_r+0x8e2>
    8932:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    8936:	9704      	str	r7, [sp, #16]
    8938:	e52b      	b.n	8392 <_dtoa_r+0x702>
    893a:	2002      	movs	r0, #2
    893c:	f7ff baef 	b.w	7f1e <_dtoa_r+0x28e>
    8940:	4b0b      	ldr	r3, [pc, #44]	; (8970 <_dtoa_r+0xce0>)
    8942:	480c      	ldr	r0, [pc, #48]	; (8974 <_dtoa_r+0xce4>)
    8944:	2200      	movs	r2, #0
    8946:	f240 11af 	movw	r1, #431	; 0x1af
    894a:	f7ff f8b1 	bl	7ab0 <__assert_func>
    894e:	4b08      	ldr	r3, [pc, #32]	; (8970 <_dtoa_r+0xce0>)
    8950:	4808      	ldr	r0, [pc, #32]	; (8974 <_dtoa_r+0xce4>)
    8952:	463a      	mov	r2, r7
    8954:	f240 21ef 	movw	r1, #751	; 0x2ef
    8958:	f7ff f8aa 	bl	7ab0 <__assert_func>
    895c:	4b06      	ldr	r3, [pc, #24]	; (8978 <_dtoa_r+0xce8>)
    895e:	9300      	str	r3, [sp, #0]
    8960:	f7ff b9d2 	b.w	7d08 <_dtoa_r+0x78>
    8964:	9b02      	ldr	r3, [sp, #8]
    8966:	9308      	str	r3, [sp, #32]
    8968:	e4f7      	b.n	835a <_dtoa_r+0x6ca>
    896a:	bf00      	nop
    896c:	200002a8 	.word	0x200002a8
    8970:	20000680 	.word	0x20000680
    8974:	2000082c 	.word	0x2000082c
    8978:	2000081c 	.word	0x2000081c

0000897c <_wcrtomb_r>:
    897c:	b570      	push	{r4, r5, r6, lr}
    897e:	4605      	mov	r5, r0
    8980:	b084      	sub	sp, #16
    8982:	b15b      	cbz	r3, 899c <_wcrtomb_r+0x20>
    8984:	461c      	mov	r4, r3
    8986:	b169      	cbz	r1, 89a4 <_wcrtomb_r+0x28>
    8988:	4b0e      	ldr	r3, [pc, #56]	; (89c4 <_wcrtomb_r+0x48>)
    898a:	4628      	mov	r0, r5
    898c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    8990:	4623      	mov	r3, r4
    8992:	47b0      	blx	r6
    8994:	1c43      	adds	r3, r0, #1
    8996:	d00f      	beq.n	89b8 <_wcrtomb_r+0x3c>
    8998:	b004      	add	sp, #16
    899a:	bd70      	pop	{r4, r5, r6, pc}
    899c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    89a0:	2900      	cmp	r1, #0
    89a2:	d1f1      	bne.n	8988 <_wcrtomb_r+0xc>
    89a4:	4a07      	ldr	r2, [pc, #28]	; (89c4 <_wcrtomb_r+0x48>)
    89a6:	4623      	mov	r3, r4
    89a8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    89ac:	4628      	mov	r0, r5
    89ae:	460a      	mov	r2, r1
    89b0:	a901      	add	r1, sp, #4
    89b2:	47b0      	blx	r6
    89b4:	1c43      	adds	r3, r0, #1
    89b6:	d1ef      	bne.n	8998 <_wcrtomb_r+0x1c>
    89b8:	2200      	movs	r2, #0
    89ba:	238a      	movs	r3, #138	; 0x8a
    89bc:	6022      	str	r2, [r4, #0]
    89be:	602b      	str	r3, [r5, #0]
    89c0:	b004      	add	sp, #16
    89c2:	bd70      	pop	{r4, r5, r6, pc}
    89c4:	200011b8 	.word	0x200011b8

000089c8 <_wcsrtombs_r>:
    89c8:	b510      	push	{r4, lr}
    89ca:	b082      	sub	sp, #8
    89cc:	9c04      	ldr	r4, [sp, #16]
    89ce:	e9cd 3400 	strd	r3, r4, [sp]
    89d2:	f04f 33ff 	mov.w	r3, #4294967295
    89d6:	f001 fb47 	bl	a068 <_wcsnrtombs_r>
    89da:	b002      	add	sp, #8
    89dc:	bd10      	pop	{r4, pc}
    89de:	bf00      	nop

000089e0 <fiprintf>:
    89e0:	b40e      	push	{r1, r2, r3}
    89e2:	b510      	push	{r4, lr}
    89e4:	b083      	sub	sp, #12
    89e6:	ab05      	add	r3, sp, #20
    89e8:	4c06      	ldr	r4, [pc, #24]	; (8a04 <fiprintf+0x24>)
    89ea:	f853 2b04 	ldr.w	r2, [r3], #4
    89ee:	9301      	str	r3, [sp, #4]
    89f0:	4601      	mov	r1, r0
    89f2:	6820      	ldr	r0, [r4, #0]
    89f4:	f000 f844 	bl	8a80 <_vfiprintf_r>
    89f8:	b003      	add	sp, #12
    89fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    89fe:	b003      	add	sp, #12
    8a00:	4770      	bx	lr
    8a02:	bf00      	nop
    8a04:	20001740 	.word	0x20001740

00008a08 <__sprint_r.part.0>:
    8a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8a0e:	049c      	lsls	r4, r3, #18
    8a10:	4690      	mov	r8, r2
    8a12:	d52d      	bpl.n	8a70 <__sprint_r.part.0+0x68>
    8a14:	6893      	ldr	r3, [r2, #8]
    8a16:	6812      	ldr	r2, [r2, #0]
    8a18:	b343      	cbz	r3, 8a6c <__sprint_r.part.0+0x64>
    8a1a:	468b      	mov	fp, r1
    8a1c:	4606      	mov	r6, r0
    8a1e:	f102 0908 	add.w	r9, r2, #8
    8a22:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    8a26:	ea5f 079a 	movs.w	r7, sl, lsr #2
    8a2a:	d015      	beq.n	8a58 <__sprint_r.part.0+0x50>
    8a2c:	3d04      	subs	r5, #4
    8a2e:	2400      	movs	r4, #0
    8a30:	e001      	b.n	8a36 <__sprint_r.part.0+0x2e>
    8a32:	42a7      	cmp	r7, r4
    8a34:	d00e      	beq.n	8a54 <__sprint_r.part.0+0x4c>
    8a36:	f855 1f04 	ldr.w	r1, [r5, #4]!
    8a3a:	465a      	mov	r2, fp
    8a3c:	4630      	mov	r0, r6
    8a3e:	f001 fa5b 	bl	9ef8 <_fputwc_r>
    8a42:	1c43      	adds	r3, r0, #1
    8a44:	f104 0401 	add.w	r4, r4, #1
    8a48:	d1f3      	bne.n	8a32 <__sprint_r.part.0+0x2a>
    8a4a:	2300      	movs	r3, #0
    8a4c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a54:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8a58:	f02a 0a03 	bic.w	sl, sl, #3
    8a5c:	eba3 030a 	sub.w	r3, r3, sl
    8a60:	f8c8 3008 	str.w	r3, [r8, #8]
    8a64:	f109 0908 	add.w	r9, r9, #8
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d1da      	bne.n	8a22 <__sprint_r.part.0+0x1a>
    8a6c:	2000      	movs	r0, #0
    8a6e:	e7ec      	b.n	8a4a <__sprint_r.part.0+0x42>
    8a70:	f001 f80c 	bl	9a8c <__sfvwrite_r>
    8a74:	2300      	movs	r3, #0
    8a76:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a7e:	bf00      	nop

00008a80 <_vfiprintf_r>:
    8a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a84:	ed2d 8b02 	vpush	{d8}
    8a88:	b0c5      	sub	sp, #276	; 0x114
    8a8a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    8a8e:	4683      	mov	fp, r0
    8a90:	ee08 1a10 	vmov	s16, r1
    8a94:	4616      	mov	r6, r2
    8a96:	2100      	movs	r1, #0
    8a98:	2208      	movs	r2, #8
    8a9a:	4650      	mov	r0, sl
    8a9c:	461c      	mov	r4, r3
    8a9e:	9307      	str	r3, [sp, #28]
    8aa0:	f7fd faa0 	bl	5fe4 <memset>
    8aa4:	f1bb 0f00 	cmp.w	fp, #0
    8aa8:	d004      	beq.n	8ab4 <_vfiprintf_r+0x34>
    8aaa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    8aae:	2b00      	cmp	r3, #0
    8ab0:	f000 86a0 	beq.w	97f4 <_vfiprintf_r+0xd74>
    8ab4:	ee18 2a10 	vmov	r2, s16
    8ab8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    8aba:	07db      	lsls	r3, r3, #31
    8abc:	f140 8513 	bpl.w	94e6 <_vfiprintf_r+0xa66>
    8ac0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    8ac4:	b28a      	uxth	r2, r1
    8ac6:	0495      	lsls	r5, r2, #18
    8ac8:	d40b      	bmi.n	8ae2 <_vfiprintf_r+0x62>
    8aca:	ee18 3a10 	vmov	r3, s16
    8ace:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    8ad2:	8199      	strh	r1, [r3, #12]
    8ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    8ad6:	b28a      	uxth	r2, r1
    8ad8:	ee18 1a10 	vmov	r1, s16
    8adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8ae0:	664b      	str	r3, [r1, #100]	; 0x64
    8ae2:	0710      	lsls	r0, r2, #28
    8ae4:	f140 8105 	bpl.w	8cf2 <_vfiprintf_r+0x272>
    8ae8:	ee18 3a10 	vmov	r3, s16
    8aec:	691b      	ldr	r3, [r3, #16]
    8aee:	2b00      	cmp	r3, #0
    8af0:	f000 80ff 	beq.w	8cf2 <_vfiprintf_r+0x272>
    8af4:	f002 031a 	and.w	r3, r2, #26
    8af8:	2b0a      	cmp	r3, #10
    8afa:	f000 810a 	beq.w	8d12 <_vfiprintf_r+0x292>
    8afe:	2300      	movs	r3, #0
    8b00:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    8b04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    8b08:	aa1b      	add	r2, sp, #108	; 0x6c
    8b0a:	930c      	str	r3, [sp, #48]	; 0x30
    8b0c:	9218      	str	r2, [sp, #96]	; 0x60
    8b0e:	4691      	mov	r9, r2
    8b10:	930b      	str	r3, [sp, #44]	; 0x2c
    8b12:	9305      	str	r3, [sp, #20]
    8b14:	46b0      	mov	r8, r6
    8b16:	4644      	mov	r4, r8
    8b18:	4ba8      	ldr	r3, [pc, #672]	; (8dbc <_vfiprintf_r+0x33c>)
    8b1a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    8b1e:	f7fd fd5f 	bl	65e0 <__locale_mb_cur_max>
    8b22:	4622      	mov	r2, r4
    8b24:	4603      	mov	r3, r0
    8b26:	a912      	add	r1, sp, #72	; 0x48
    8b28:	f8cd a000 	str.w	sl, [sp]
    8b2c:	4658      	mov	r0, fp
    8b2e:	47a8      	blx	r5
    8b30:	2800      	cmp	r0, #0
    8b32:	f000 8145 	beq.w	8dc0 <_vfiprintf_r+0x340>
    8b36:	f2c0 8139 	blt.w	8dac <_vfiprintf_r+0x32c>
    8b3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8b3c:	2a25      	cmp	r2, #37	; 0x25
    8b3e:	4603      	mov	r3, r0
    8b40:	d001      	beq.n	8b46 <_vfiprintf_r+0xc6>
    8b42:	441c      	add	r4, r3
    8b44:	e7e8      	b.n	8b18 <_vfiprintf_r+0x98>
    8b46:	ebb4 0608 	subs.w	r6, r4, r8
    8b4a:	4605      	mov	r5, r0
    8b4c:	f040 813c 	bne.w	8dc8 <_vfiprintf_r+0x348>
    8b50:	2300      	movs	r3, #0
    8b52:	7861      	ldrb	r1, [r4, #1]
    8b54:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b58:	f104 0801 	add.w	r8, r4, #1
    8b5c:	9306      	str	r3, [sp, #24]
    8b5e:	f04f 37ff 	mov.w	r7, #4294967295
    8b62:	461e      	mov	r6, r3
    8b64:	242b      	movs	r4, #43	; 0x2b
    8b66:	f108 0801 	add.w	r8, r8, #1
    8b6a:	f1a1 0320 	sub.w	r3, r1, #32
    8b6e:	2b5a      	cmp	r3, #90	; 0x5a
    8b70:	f200 8178 	bhi.w	8e64 <_vfiprintf_r+0x3e4>
    8b74:	e8df f013 	tbh	[pc, r3, lsl #1]
    8b78:	017602b5 	.word	0x017602b5
    8b7c:	02b00176 	.word	0x02b00176
    8b80:	01760176 	.word	0x01760176
    8b84:	006a0176 	.word	0x006a0176
    8b88:	01760176 	.word	0x01760176
    8b8c:	028d027d 	.word	0x028d027d
    8b90:	02880176 	.word	0x02880176
    8b94:	01760297 	.word	0x01760297
    8b98:	005b0292 	.word	0x005b0292
    8b9c:	005b005b 	.word	0x005b005b
    8ba0:	005b005b 	.word	0x005b005b
    8ba4:	005b005b 	.word	0x005b005b
    8ba8:	005b005b 	.word	0x005b005b
    8bac:	01760176 	.word	0x01760176
    8bb0:	01760176 	.word	0x01760176
    8bb4:	01760176 	.word	0x01760176
    8bb8:	01760176 	.word	0x01760176
    8bbc:	025c0176 	.word	0x025c0176
    8bc0:	01760084 	.word	0x01760084
    8bc4:	01760176 	.word	0x01760176
    8bc8:	01760176 	.word	0x01760176
    8bcc:	01760176 	.word	0x01760176
    8bd0:	01760176 	.word	0x01760176
    8bd4:	00e80176 	.word	0x00e80176
    8bd8:	01760176 	.word	0x01760176
    8bdc:	02330176 	.word	0x02330176
    8be0:	02da0176 	.word	0x02da0176
    8be4:	01760176 	.word	0x01760176
    8be8:	0176058b 	.word	0x0176058b
    8bec:	01760176 	.word	0x01760176
    8bf0:	01760176 	.word	0x01760176
    8bf4:	01760176 	.word	0x01760176
    8bf8:	01760176 	.word	0x01760176
    8bfc:	025c0176 	.word	0x025c0176
    8c00:	01760086 	.word	0x01760086
    8c04:	01760176 	.word	0x01760176
    8c08:	008602cd 	.word	0x008602cd
    8c0c:	0176007f 	.word	0x0176007f
    8c10:	017602c0 	.word	0x017602c0
    8c14:	00ea02fd 	.word	0x00ea02fd
    8c18:	007f02ed 	.word	0x007f02ed
    8c1c:	02330176 	.word	0x02330176
    8c20:	0569007c 	.word	0x0569007c
    8c24:	01760176 	.word	0x01760176
    8c28:	0176056b 	.word	0x0176056b
    8c2c:	007c      	.short	0x007c
    8c2e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8c32:	2200      	movs	r2, #0
    8c34:	f818 1b01 	ldrb.w	r1, [r8], #1
    8c38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8c3c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8c40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8c44:	2b09      	cmp	r3, #9
    8c46:	d9f5      	bls.n	8c34 <_vfiprintf_r+0x1b4>
    8c48:	9206      	str	r2, [sp, #24]
    8c4a:	e78e      	b.n	8b6a <_vfiprintf_r+0xea>
    8c4c:	4658      	mov	r0, fp
    8c4e:	f7fe fed9 	bl	7a04 <_localeconv_r>
    8c52:	6843      	ldr	r3, [r0, #4]
    8c54:	930d      	str	r3, [sp, #52]	; 0x34
    8c56:	4618      	mov	r0, r3
    8c58:	f7fd ff32 	bl	6ac0 <strlen>
    8c5c:	900e      	str	r0, [sp, #56]	; 0x38
    8c5e:	4605      	mov	r5, r0
    8c60:	4658      	mov	r0, fp
    8c62:	f7fe fecf 	bl	7a04 <_localeconv_r>
    8c66:	6883      	ldr	r3, [r0, #8]
    8c68:	930b      	str	r3, [sp, #44]	; 0x2c
    8c6a:	2d00      	cmp	r5, #0
    8c6c:	f040 84d6 	bne.w	961c <_vfiprintf_r+0xb9c>
    8c70:	f898 1000 	ldrb.w	r1, [r8]
    8c74:	e777      	b.n	8b66 <_vfiprintf_r+0xe6>
    8c76:	f898 1000 	ldrb.w	r1, [r8]
    8c7a:	f046 0620 	orr.w	r6, r6, #32
    8c7e:	e772      	b.n	8b66 <_vfiprintf_r+0xe6>
    8c80:	f046 0610 	orr.w	r6, r6, #16
    8c84:	06b4      	lsls	r4, r6, #26
    8c86:	f140 818e 	bpl.w	8fa6 <_vfiprintf_r+0x526>
    8c8a:	9b07      	ldr	r3, [sp, #28]
    8c8c:	3307      	adds	r3, #7
    8c8e:	f023 0307 	bic.w	r3, r3, #7
    8c92:	461a      	mov	r2, r3
    8c94:	6859      	ldr	r1, [r3, #4]
    8c96:	f852 3b08 	ldr.w	r3, [r2], #8
    8c9a:	9207      	str	r2, [sp, #28]
    8c9c:	460a      	mov	r2, r1
    8c9e:	2900      	cmp	r1, #0
    8ca0:	f2c0 8470 	blt.w	9584 <_vfiprintf_r+0xb04>
    8ca4:	1c79      	adds	r1, r7, #1
    8ca6:	f000 85a2 	beq.w	97ee <_vfiprintf_r+0xd6e>
    8caa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    8cae:	9103      	str	r1, [sp, #12]
    8cb0:	ea53 0102 	orrs.w	r1, r3, r2
    8cb4:	f000 843f 	beq.w	9536 <_vfiprintf_r+0xab6>
    8cb8:	2b0a      	cmp	r3, #10
    8cba:	f172 0100 	sbcs.w	r1, r2, #0
    8cbe:	f080 8541 	bcs.w	9744 <_vfiprintf_r+0xcc4>
    8cc2:	3330      	adds	r3, #48	; 0x30
    8cc4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8cc8:	9e03      	ldr	r6, [sp, #12]
    8cca:	2301      	movs	r3, #1
    8ccc:	9304      	str	r3, [sp, #16]
    8cce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8cd2:	9b04      	ldr	r3, [sp, #16]
    8cd4:	42bb      	cmp	r3, r7
    8cd6:	bfb8      	it	lt
    8cd8:	463b      	movlt	r3, r7
    8cda:	9303      	str	r3, [sp, #12]
    8cdc:	2300      	movs	r3, #0
    8cde:	9308      	str	r3, [sp, #32]
    8ce0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8ce4:	2b00      	cmp	r3, #0
    8ce6:	f000 80cb 	beq.w	8e80 <_vfiprintf_r+0x400>
    8cea:	9b03      	ldr	r3, [sp, #12]
    8cec:	3301      	adds	r3, #1
    8cee:	9303      	str	r3, [sp, #12]
    8cf0:	e0c6      	b.n	8e80 <_vfiprintf_r+0x400>
    8cf2:	ee18 1a10 	vmov	r1, s16
    8cf6:	4658      	mov	r0, fp
    8cf8:	ee18 5a10 	vmov	r5, s16
    8cfc:	f001 f840 	bl	9d80 <__swsetup_r>
    8d00:	2800      	cmp	r0, #0
    8d02:	f040 8652 	bne.w	99aa <_vfiprintf_r+0xf2a>
    8d06:	89aa      	ldrh	r2, [r5, #12]
    8d08:	f002 031a 	and.w	r3, r2, #26
    8d0c:	2b0a      	cmp	r3, #10
    8d0e:	f47f aef6 	bne.w	8afe <_vfiprintf_r+0x7e>
    8d12:	ee18 1a10 	vmov	r1, s16
    8d16:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	f6ff aeef 	blt.w	8afe <_vfiprintf_r+0x7e>
    8d20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8d22:	07db      	lsls	r3, r3, #31
    8d24:	d402      	bmi.n	8d2c <_vfiprintf_r+0x2ac>
    8d26:	0597      	lsls	r7, r2, #22
    8d28:	f140 8612 	bpl.w	9950 <_vfiprintf_r+0xed0>
    8d2c:	ee18 1a10 	vmov	r1, s16
    8d30:	4623      	mov	r3, r4
    8d32:	4632      	mov	r2, r6
    8d34:	4658      	mov	r0, fp
    8d36:	f000 fe69 	bl	9a0c <__sbprintf>
    8d3a:	9005      	str	r0, [sp, #20]
    8d3c:	9805      	ldr	r0, [sp, #20]
    8d3e:	b045      	add	sp, #276	; 0x114
    8d40:	ecbd 8b02 	vpop	{d8}
    8d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d48:	f046 0610 	orr.w	r6, r6, #16
    8d4c:	f016 0220 	ands.w	r2, r6, #32
    8d50:	f000 8136 	beq.w	8fc0 <_vfiprintf_r+0x540>
    8d54:	9b07      	ldr	r3, [sp, #28]
    8d56:	3307      	adds	r3, #7
    8d58:	f023 0307 	bic.w	r3, r3, #7
    8d5c:	4619      	mov	r1, r3
    8d5e:	685a      	ldr	r2, [r3, #4]
    8d60:	f851 3b08 	ldr.w	r3, [r1], #8
    8d64:	9107      	str	r1, [sp, #28]
    8d66:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8d6a:	9103      	str	r1, [sp, #12]
    8d6c:	2100      	movs	r1, #0
    8d6e:	2000      	movs	r0, #0
    8d70:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    8d74:	1c78      	adds	r0, r7, #1
    8d76:	f000 8210 	beq.w	919a <_vfiprintf_r+0x71a>
    8d7a:	9803      	ldr	r0, [sp, #12]
    8d7c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8d80:	ea53 0002 	orrs.w	r0, r3, r2
    8d84:	f040 8208 	bne.w	9198 <_vfiprintf_r+0x718>
    8d88:	2f00      	cmp	r7, #0
    8d8a:	f040 8538 	bne.w	97fe <_vfiprintf_r+0xd7e>
    8d8e:	2900      	cmp	r1, #0
    8d90:	f040 83d5 	bne.w	953e <_vfiprintf_r+0xabe>
    8d94:	9b03      	ldr	r3, [sp, #12]
    8d96:	f013 0301 	ands.w	r3, r3, #1
    8d9a:	9304      	str	r3, [sp, #16]
    8d9c:	f000 8411 	beq.w	95c2 <_vfiprintf_r+0xb42>
    8da0:	2330      	movs	r3, #48	; 0x30
    8da2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8da6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8daa:	e792      	b.n	8cd2 <_vfiprintf_r+0x252>
    8dac:	2208      	movs	r2, #8
    8dae:	2100      	movs	r1, #0
    8db0:	4650      	mov	r0, sl
    8db2:	f7fd f917 	bl	5fe4 <memset>
    8db6:	2301      	movs	r3, #1
    8db8:	441c      	add	r4, r3
    8dba:	e6ad      	b.n	8b18 <_vfiprintf_r+0x98>
    8dbc:	200011b8 	.word	0x200011b8
    8dc0:	ebb4 0608 	subs.w	r6, r4, r8
    8dc4:	4605      	mov	r5, r0
    8dc6:	d01b      	beq.n	8e00 <_vfiprintf_r+0x380>
    8dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8dca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8dcc:	3301      	adds	r3, #1
    8dce:	4432      	add	r2, r6
    8dd0:	2b07      	cmp	r3, #7
    8dd2:	e9c9 8600 	strd	r8, r6, [r9]
    8dd6:	921a      	str	r2, [sp, #104]	; 0x68
    8dd8:	9319      	str	r3, [sp, #100]	; 0x64
    8dda:	dd1c      	ble.n	8e16 <_vfiprintf_r+0x396>
    8ddc:	2a00      	cmp	r2, #0
    8dde:	f000 83a6 	beq.w	952e <_vfiprintf_r+0xaae>
    8de2:	ee18 1a10 	vmov	r1, s16
    8de6:	aa18      	add	r2, sp, #96	; 0x60
    8de8:	4658      	mov	r0, fp
    8dea:	f7ff fe0d 	bl	8a08 <__sprint_r.part.0>
    8dee:	bb20      	cbnz	r0, 8e3a <_vfiprintf_r+0x3ba>
    8df0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8df4:	9b05      	ldr	r3, [sp, #20]
    8df6:	4433      	add	r3, r6
    8df8:	9305      	str	r3, [sp, #20]
    8dfa:	2d00      	cmp	r5, #0
    8dfc:	f47f aea8 	bne.w	8b50 <_vfiprintf_r+0xd0>
    8e00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8e02:	2b00      	cmp	r3, #0
    8e04:	f040 85c1 	bne.w	998a <_vfiprintf_r+0xf0a>
    8e08:	ee18 3a10 	vmov	r3, s16
    8e0c:	2200      	movs	r2, #0
    8e0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8e12:	9219      	str	r2, [sp, #100]	; 0x64
    8e14:	e015      	b.n	8e42 <_vfiprintf_r+0x3c2>
    8e16:	f109 0908 	add.w	r9, r9, #8
    8e1a:	e7eb      	b.n	8df4 <_vfiprintf_r+0x374>
    8e1c:	ee18 1a10 	vmov	r1, s16
    8e20:	aa18      	add	r2, sp, #96	; 0x60
    8e22:	4658      	mov	r0, fp
    8e24:	f7ff fdf0 	bl	8a08 <__sprint_r.part.0>
    8e28:	2800      	cmp	r0, #0
    8e2a:	f000 80a6 	beq.w	8f7a <_vfiprintf_r+0x4fa>
    8e2e:	9b08      	ldr	r3, [sp, #32]
    8e30:	b11b      	cbz	r3, 8e3a <_vfiprintf_r+0x3ba>
    8e32:	9908      	ldr	r1, [sp, #32]
    8e34:	4658      	mov	r0, fp
    8e36:	f7fd ff45 	bl	6cc4 <_free_r>
    8e3a:	ee18 3a10 	vmov	r3, s16
    8e3e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8e42:	ee18 2a10 	vmov	r2, s16
    8e46:	6e52      	ldr	r2, [r2, #100]	; 0x64
    8e48:	f012 0f01 	tst.w	r2, #1
    8e4c:	b29a      	uxth	r2, r3
    8e4e:	f000 80a0 	beq.w	8f92 <_vfiprintf_r+0x512>
    8e52:	0650      	lsls	r0, r2, #25
    8e54:	f100 85b2 	bmi.w	99bc <_vfiprintf_r+0xf3c>
    8e58:	9805      	ldr	r0, [sp, #20]
    8e5a:	b045      	add	sp, #276	; 0x114
    8e5c:	ecbd 8b02 	vpop	{d8}
    8e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e64:	2900      	cmp	r1, #0
    8e66:	d0cb      	beq.n	8e00 <_vfiprintf_r+0x380>
    8e68:	2300      	movs	r3, #0
    8e6a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8e6e:	2301      	movs	r3, #1
    8e70:	e9cd 3303 	strd	r3, r3, [sp, #12]
    8e74:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8e78:	ac2b      	add	r4, sp, #172	; 0xac
    8e7a:	2300      	movs	r3, #0
    8e7c:	9308      	str	r3, [sp, #32]
    8e7e:	461f      	mov	r7, r3
    8e80:	f016 0302 	ands.w	r3, r6, #2
    8e84:	9309      	str	r3, [sp, #36]	; 0x24
    8e86:	d002      	beq.n	8e8e <_vfiprintf_r+0x40e>
    8e88:	9b03      	ldr	r3, [sp, #12]
    8e8a:	3302      	adds	r3, #2
    8e8c:	9303      	str	r3, [sp, #12]
    8e8e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    8e92:	930a      	str	r3, [sp, #40]	; 0x28
    8e94:	d105      	bne.n	8ea2 <_vfiprintf_r+0x422>
    8e96:	9b06      	ldr	r3, [sp, #24]
    8e98:	9a03      	ldr	r2, [sp, #12]
    8e9a:	1a9d      	subs	r5, r3, r2
    8e9c:	2d00      	cmp	r5, #0
    8e9e:	f300 827b 	bgt.w	9398 <_vfiprintf_r+0x918>
    8ea2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8ea6:	1c41      	adds	r1, r0, #1
    8ea8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8eac:	b182      	cbz	r2, 8ed0 <_vfiprintf_r+0x450>
    8eae:	2201      	movs	r2, #1
    8eb0:	3301      	adds	r3, #1
    8eb2:	f8c9 2004 	str.w	r2, [r9, #4]
    8eb6:	2907      	cmp	r1, #7
    8eb8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    8ebc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8ec0:	f8c9 2000 	str.w	r2, [r9]
    8ec4:	f300 824a 	bgt.w	935c <_vfiprintf_r+0x8dc>
    8ec8:	4608      	mov	r0, r1
    8eca:	f109 0908 	add.w	r9, r9, #8
    8ece:	3101      	adds	r1, #1
    8ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8ed2:	b1e2      	cbz	r2, 8f0e <_vfiprintf_r+0x48e>
    8ed4:	aa11      	add	r2, sp, #68	; 0x44
    8ed6:	3302      	adds	r3, #2
    8ed8:	f8c9 2000 	str.w	r2, [r9]
    8edc:	2907      	cmp	r1, #7
    8ede:	f04f 0202 	mov.w	r2, #2
    8ee2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8ee6:	f8c9 2004 	str.w	r2, [r9, #4]
    8eea:	f340 8250 	ble.w	938e <_vfiprintf_r+0x90e>
    8eee:	2b00      	cmp	r3, #0
    8ef0:	f000 8343 	beq.w	957a <_vfiprintf_r+0xafa>
    8ef4:	ee18 1a10 	vmov	r1, s16
    8ef8:	aa18      	add	r2, sp, #96	; 0x60
    8efa:	4658      	mov	r0, fp
    8efc:	f7ff fd84 	bl	8a08 <__sprint_r.part.0>
    8f00:	2800      	cmp	r0, #0
    8f02:	d194      	bne.n	8e2e <_vfiprintf_r+0x3ae>
    8f04:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8f08:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f0c:	1c41      	adds	r1, r0, #1
    8f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8f10:	2a80      	cmp	r2, #128	; 0x80
    8f12:	f000 8184 	beq.w	921e <_vfiprintf_r+0x79e>
    8f16:	9a04      	ldr	r2, [sp, #16]
    8f18:	1abd      	subs	r5, r7, r2
    8f1a:	2d00      	cmp	r5, #0
    8f1c:	f300 81d7 	bgt.w	92ce <_vfiprintf_r+0x84e>
    8f20:	9a04      	ldr	r2, [sp, #16]
    8f22:	f8c9 4000 	str.w	r4, [r9]
    8f26:	4413      	add	r3, r2
    8f28:	2907      	cmp	r1, #7
    8f2a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8f2e:	f8c9 2004 	str.w	r2, [r9, #4]
    8f32:	f340 816e 	ble.w	9212 <_vfiprintf_r+0x792>
    8f36:	2b00      	cmp	r3, #0
    8f38:	f000 8275 	beq.w	9426 <_vfiprintf_r+0x9a6>
    8f3c:	ee18 1a10 	vmov	r1, s16
    8f40:	aa18      	add	r2, sp, #96	; 0x60
    8f42:	4658      	mov	r0, fp
    8f44:	f7ff fd60 	bl	8a08 <__sprint_r.part.0>
    8f48:	2800      	cmp	r0, #0
    8f4a:	f47f af70 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    8f4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f50:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f54:	0775      	lsls	r5, r6, #29
    8f56:	d505      	bpl.n	8f64 <_vfiprintf_r+0x4e4>
    8f58:	9a06      	ldr	r2, [sp, #24]
    8f5a:	9903      	ldr	r1, [sp, #12]
    8f5c:	1a54      	subs	r4, r2, r1
    8f5e:	2c00      	cmp	r4, #0
    8f60:	f300 826b 	bgt.w	943a <_vfiprintf_r+0x9ba>
    8f64:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8f68:	9803      	ldr	r0, [sp, #12]
    8f6a:	4281      	cmp	r1, r0
    8f6c:	bfac      	ite	ge
    8f6e:	1852      	addge	r2, r2, r1
    8f70:	1812      	addlt	r2, r2, r0
    8f72:	9205      	str	r2, [sp, #20]
    8f74:	2b00      	cmp	r3, #0
    8f76:	f47f af51 	bne.w	8e1c <_vfiprintf_r+0x39c>
    8f7a:	9908      	ldr	r1, [sp, #32]
    8f7c:	2300      	movs	r3, #0
    8f7e:	9319      	str	r3, [sp, #100]	; 0x64
    8f80:	2900      	cmp	r1, #0
    8f82:	f000 8149 	beq.w	9218 <_vfiprintf_r+0x798>
    8f86:	4658      	mov	r0, fp
    8f88:	f7fd fe9c 	bl	6cc4 <_free_r>
    8f8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f90:	e5c1      	b.n	8b16 <_vfiprintf_r+0x96>
    8f92:	059c      	lsls	r4, r3, #22
    8f94:	f53f af5d 	bmi.w	8e52 <_vfiprintf_r+0x3d2>
    8f98:	ee18 4a10 	vmov	r4, s16
    8f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8f9e:	f7fd fbbb 	bl	6718 <__retarget_lock_release_recursive>
    8fa2:	89a2      	ldrh	r2, [r4, #12]
    8fa4:	e755      	b.n	8e52 <_vfiprintf_r+0x3d2>
    8fa6:	06f0      	lsls	r0, r6, #27
    8fa8:	9a07      	ldr	r2, [sp, #28]
    8faa:	f100 831f 	bmi.w	95ec <_vfiprintf_r+0xb6c>
    8fae:	0671      	lsls	r1, r6, #25
    8fb0:	f140 8319 	bpl.w	95e6 <_vfiprintf_r+0xb66>
    8fb4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8fb8:	9207      	str	r2, [sp, #28]
    8fba:	17da      	asrs	r2, r3, #31
    8fbc:	4611      	mov	r1, r2
    8fbe:	e66e      	b.n	8c9e <_vfiprintf_r+0x21e>
    8fc0:	f016 0310 	ands.w	r3, r6, #16
    8fc4:	9907      	ldr	r1, [sp, #28]
    8fc6:	f040 8309 	bne.w	95dc <_vfiprintf_r+0xb5c>
    8fca:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    8fce:	f000 8301 	beq.w	95d4 <_vfiprintf_r+0xb54>
    8fd2:	461a      	mov	r2, r3
    8fd4:	f851 3b04 	ldr.w	r3, [r1], #4
    8fd8:	9107      	str	r1, [sp, #28]
    8fda:	b29b      	uxth	r3, r3
    8fdc:	e6c3      	b.n	8d66 <_vfiprintf_r+0x2e6>
    8fde:	9b07      	ldr	r3, [sp, #28]
    8fe0:	461a      	mov	r2, r3
    8fe2:	2300      	movs	r3, #0
    8fe4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8fe8:	4613      	mov	r3, r2
    8fea:	f853 4b04 	ldr.w	r4, [r3], #4
    8fee:	9303      	str	r3, [sp, #12]
    8ff0:	2c00      	cmp	r4, #0
    8ff2:	f000 8412 	beq.w	981a <_vfiprintf_r+0xd9a>
    8ff6:	2953      	cmp	r1, #83	; 0x53
    8ff8:	f000 8365 	beq.w	96c6 <_vfiprintf_r+0xc46>
    8ffc:	f016 0510 	ands.w	r5, r6, #16
    9000:	f040 8361 	bne.w	96c6 <_vfiprintf_r+0xc46>
    9004:	1c7b      	adds	r3, r7, #1
    9006:	f000 84b3 	beq.w	9970 <_vfiprintf_r+0xef0>
    900a:	463a      	mov	r2, r7
    900c:	4629      	mov	r1, r5
    900e:	4620      	mov	r0, r4
    9010:	f7fe fcfe 	bl	7a10 <memchr>
    9014:	9008      	str	r0, [sp, #32]
    9016:	2800      	cmp	r0, #0
    9018:	f000 849f 	beq.w	995a <_vfiprintf_r+0xeda>
    901c:	1b03      	subs	r3, r0, r4
    901e:	9a03      	ldr	r2, [sp, #12]
    9020:	9304      	str	r3, [sp, #16]
    9022:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9026:	462f      	mov	r7, r5
    9028:	9207      	str	r2, [sp, #28]
    902a:	9303      	str	r3, [sp, #12]
    902c:	9508      	str	r5, [sp, #32]
    902e:	e657      	b.n	8ce0 <_vfiprintf_r+0x260>
    9030:	2943      	cmp	r1, #67	; 0x43
    9032:	d002      	beq.n	903a <_vfiprintf_r+0x5ba>
    9034:	06f5      	lsls	r5, r6, #27
    9036:	f140 832d 	bpl.w	9694 <_vfiprintf_r+0xc14>
    903a:	9d07      	ldr	r5, [sp, #28]
    903c:	2208      	movs	r2, #8
    903e:	2100      	movs	r1, #0
    9040:	a816      	add	r0, sp, #88	; 0x58
    9042:	ac2b      	add	r4, sp, #172	; 0xac
    9044:	f7fc ffce 	bl	5fe4 <memset>
    9048:	ab16      	add	r3, sp, #88	; 0x58
    904a:	f855 2b04 	ldr.w	r2, [r5], #4
    904e:	4621      	mov	r1, r4
    9050:	4658      	mov	r0, fp
    9052:	f7ff fc93 	bl	897c <_wcrtomb_r>
    9056:	4603      	mov	r3, r0
    9058:	3301      	adds	r3, #1
    905a:	9004      	str	r0, [sp, #16]
    905c:	f000 84b3 	beq.w	99c6 <_vfiprintf_r+0xf46>
    9060:	9b04      	ldr	r3, [sp, #16]
    9062:	9507      	str	r5, [sp, #28]
    9064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9068:	9303      	str	r3, [sp, #12]
    906a:	2300      	movs	r3, #0
    906c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9070:	e703      	b.n	8e7a <_vfiprintf_r+0x3fa>
    9072:	9b07      	ldr	r3, [sp, #28]
    9074:	f853 2b04 	ldr.w	r2, [r3], #4
    9078:	9206      	str	r2, [sp, #24]
    907a:	2a00      	cmp	r2, #0
    907c:	f280 829c 	bge.w	95b8 <_vfiprintf_r+0xb38>
    9080:	9a06      	ldr	r2, [sp, #24]
    9082:	4252      	negs	r2, r2
    9084:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9088:	f898 1000 	ldrb.w	r1, [r8]
    908c:	f046 0604 	orr.w	r6, r6, #4
    9090:	e569      	b.n	8b66 <_vfiprintf_r+0xe6>
    9092:	f898 1000 	ldrb.w	r1, [r8]
    9096:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    909a:	e564      	b.n	8b66 <_vfiprintf_r+0xe6>
    909c:	f898 1000 	ldrb.w	r1, [r8]
    90a0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    90a4:	e55f      	b.n	8b66 <_vfiprintf_r+0xe6>
    90a6:	4642      	mov	r2, r8
    90a8:	f812 1b01 	ldrb.w	r1, [r2], #1
    90ac:	292a      	cmp	r1, #42	; 0x2a
    90ae:	f000 8496 	beq.w	99de <_vfiprintf_r+0xf5e>
    90b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    90b6:	2b09      	cmp	r3, #9
    90b8:	4690      	mov	r8, r2
    90ba:	f04f 0700 	mov.w	r7, #0
    90be:	f63f ad54 	bhi.w	8b6a <_vfiprintf_r+0xea>
    90c2:	f818 1b01 	ldrb.w	r1, [r8], #1
    90c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    90ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    90ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    90d2:	2b09      	cmp	r3, #9
    90d4:	d9f5      	bls.n	90c2 <_vfiprintf_r+0x642>
    90d6:	e548      	b.n	8b6a <_vfiprintf_r+0xea>
    90d8:	f898 1000 	ldrb.w	r1, [r8]
    90dc:	f046 0601 	orr.w	r6, r6, #1
    90e0:	e541      	b.n	8b66 <_vfiprintf_r+0xe6>
    90e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    90e6:	2b00      	cmp	r3, #0
    90e8:	f47f adc2 	bne.w	8c70 <_vfiprintf_r+0x1f0>
    90ec:	2320      	movs	r3, #32
    90ee:	f898 1000 	ldrb.w	r1, [r8]
    90f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    90f6:	e536      	b.n	8b66 <_vfiprintf_r+0xe6>
    90f8:	f898 1000 	ldrb.w	r1, [r8]
    90fc:	296c      	cmp	r1, #108	; 0x6c
    90fe:	bf03      	ittte	eq
    9100:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    9104:	f046 0620 	orreq.w	r6, r6, #32
    9108:	f108 0801 	addeq.w	r8, r8, #1
    910c:	f046 0610 	orrne.w	r6, r6, #16
    9110:	e529      	b.n	8b66 <_vfiprintf_r+0xe6>
    9112:	f898 1000 	ldrb.w	r1, [r8]
    9116:	2968      	cmp	r1, #104	; 0x68
    9118:	bf03      	ittte	eq
    911a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    911e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    9122:	f108 0801 	addeq.w	r8, r8, #1
    9126:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    912a:	e51c      	b.n	8b66 <_vfiprintf_r+0xe6>
    912c:	f046 0310 	orr.w	r3, r6, #16
    9130:	9303      	str	r3, [sp, #12]
    9132:	9b03      	ldr	r3, [sp, #12]
    9134:	f013 0220 	ands.w	r2, r3, #32
    9138:	f000 8206 	beq.w	9548 <_vfiprintf_r+0xac8>
    913c:	9b07      	ldr	r3, [sp, #28]
    913e:	3307      	adds	r3, #7
    9140:	f023 0307 	bic.w	r3, r3, #7
    9144:	4619      	mov	r1, r3
    9146:	685a      	ldr	r2, [r3, #4]
    9148:	f851 3b08 	ldr.w	r3, [r1], #8
    914c:	9107      	str	r1, [sp, #28]
    914e:	2101      	movs	r1, #1
    9150:	e60d      	b.n	8d6e <_vfiprintf_r+0x2ee>
    9152:	9a07      	ldr	r2, [sp, #28]
    9154:	f046 0302 	orr.w	r3, r6, #2
    9158:	9303      	str	r3, [sp, #12]
    915a:	f852 3b04 	ldr.w	r3, [r2], #4
    915e:	9207      	str	r2, [sp, #28]
    9160:	f647 0230 	movw	r2, #30768	; 0x7830
    9164:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    9168:	4ab8      	ldr	r2, [pc, #736]	; (944c <_vfiprintf_r+0x9cc>)
    916a:	920c      	str	r2, [sp, #48]	; 0x30
    916c:	2102      	movs	r1, #2
    916e:	2200      	movs	r2, #0
    9170:	e5fd      	b.n	8d6e <_vfiprintf_r+0x2ee>
    9172:	06b7      	lsls	r7, r6, #26
    9174:	f100 8248 	bmi.w	9608 <_vfiprintf_r+0xb88>
    9178:	06f5      	lsls	r5, r6, #27
    917a:	f100 8346 	bmi.w	980a <_vfiprintf_r+0xd8a>
    917e:	0674      	lsls	r4, r6, #25
    9180:	f100 83d5 	bmi.w	992e <_vfiprintf_r+0xeae>
    9184:	05b0      	lsls	r0, r6, #22
    9186:	f140 8340 	bpl.w	980a <_vfiprintf_r+0xd8a>
    918a:	9b07      	ldr	r3, [sp, #28]
    918c:	9905      	ldr	r1, [sp, #20]
    918e:	f853 2b04 	ldr.w	r2, [r3], #4
    9192:	9307      	str	r3, [sp, #28]
    9194:	7011      	strb	r1, [r2, #0]
    9196:	e4be      	b.n	8b16 <_vfiprintf_r+0x96>
    9198:	9603      	str	r6, [sp, #12]
    919a:	2901      	cmp	r1, #1
    919c:	f43f ad8c 	beq.w	8cb8 <_vfiprintf_r+0x238>
    91a0:	2902      	cmp	r1, #2
    91a2:	ac44      	add	r4, sp, #272	; 0x110
    91a4:	d111      	bne.n	91ca <_vfiprintf_r+0x74a>
    91a6:	980c      	ldr	r0, [sp, #48]	; 0x30
    91a8:	f003 010f 	and.w	r1, r3, #15
    91ac:	091b      	lsrs	r3, r3, #4
    91ae:	5c41      	ldrb	r1, [r0, r1]
    91b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    91b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    91b8:	0912      	lsrs	r2, r2, #4
    91ba:	ea53 0102 	orrs.w	r1, r3, r2
    91be:	d1f3      	bne.n	91a8 <_vfiprintf_r+0x728>
    91c0:	9e03      	ldr	r6, [sp, #12]
    91c2:	ab44      	add	r3, sp, #272	; 0x110
    91c4:	1b1b      	subs	r3, r3, r4
    91c6:	9304      	str	r3, [sp, #16]
    91c8:	e583      	b.n	8cd2 <_vfiprintf_r+0x252>
    91ca:	f003 0107 	and.w	r1, r3, #7
    91ce:	08db      	lsrs	r3, r3, #3
    91d0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    91d4:	08d2      	lsrs	r2, r2, #3
    91d6:	3130      	adds	r1, #48	; 0x30
    91d8:	ea53 0502 	orrs.w	r5, r3, r2
    91dc:	4620      	mov	r0, r4
    91de:	f804 1d01 	strb.w	r1, [r4, #-1]!
    91e2:	d1f2      	bne.n	91ca <_vfiprintf_r+0x74a>
    91e4:	9e03      	ldr	r6, [sp, #12]
    91e6:	07f3      	lsls	r3, r6, #31
    91e8:	d5eb      	bpl.n	91c2 <_vfiprintf_r+0x742>
    91ea:	2930      	cmp	r1, #48	; 0x30
    91ec:	d0e8      	beq.n	91c0 <_vfiprintf_r+0x740>
    91ee:	2330      	movs	r3, #48	; 0x30
    91f0:	3802      	subs	r0, #2
    91f2:	f804 3c01 	strb.w	r3, [r4, #-1]
    91f6:	ab44      	add	r3, sp, #272	; 0x110
    91f8:	1a1b      	subs	r3, r3, r0
    91fa:	9e03      	ldr	r6, [sp, #12]
    91fc:	9304      	str	r3, [sp, #16]
    91fe:	4604      	mov	r4, r0
    9200:	e567      	b.n	8cd2 <_vfiprintf_r+0x252>
    9202:	9b04      	ldr	r3, [sp, #16]
    9204:	941b      	str	r4, [sp, #108]	; 0x6c
    9206:	2201      	movs	r2, #1
    9208:	931c      	str	r3, [sp, #112]	; 0x70
    920a:	931a      	str	r3, [sp, #104]	; 0x68
    920c:	9219      	str	r2, [sp, #100]	; 0x64
    920e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9212:	f109 0908 	add.w	r9, r9, #8
    9216:	e69d      	b.n	8f54 <_vfiprintf_r+0x4d4>
    9218:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    921c:	e47b      	b.n	8b16 <_vfiprintf_r+0x96>
    921e:	9a06      	ldr	r2, [sp, #24]
    9220:	9d03      	ldr	r5, [sp, #12]
    9222:	1b55      	subs	r5, r2, r5
    9224:	2d00      	cmp	r5, #0
    9226:	f77f ae76 	ble.w	8f16 <_vfiprintf_r+0x496>
    922a:	2d10      	cmp	r5, #16
    922c:	f340 83bb 	ble.w	99a6 <_vfiprintf_r+0xf26>
    9230:	9409      	str	r4, [sp, #36]	; 0x24
    9232:	ee18 4a10 	vmov	r4, s16
    9236:	e007      	b.n	9248 <_vfiprintf_r+0x7c8>
    9238:	f100 0c02 	add.w	ip, r0, #2
    923c:	f109 0908 	add.w	r9, r9, #8
    9240:	4610      	mov	r0, r2
    9242:	3d10      	subs	r5, #16
    9244:	2d10      	cmp	r5, #16
    9246:	dd1e      	ble.n	9286 <_vfiprintf_r+0x806>
    9248:	4981      	ldr	r1, [pc, #516]	; (9450 <_vfiprintf_r+0x9d0>)
    924a:	f8c9 1000 	str.w	r1, [r9]
    924e:	1c42      	adds	r2, r0, #1
    9250:	3310      	adds	r3, #16
    9252:	2110      	movs	r1, #16
    9254:	2a07      	cmp	r2, #7
    9256:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    925a:	f8c9 1004 	str.w	r1, [r9, #4]
    925e:	ddeb      	ble.n	9238 <_vfiprintf_r+0x7b8>
    9260:	aa18      	add	r2, sp, #96	; 0x60
    9262:	2b00      	cmp	r3, #0
    9264:	d074      	beq.n	9350 <_vfiprintf_r+0x8d0>
    9266:	4621      	mov	r1, r4
    9268:	4658      	mov	r0, fp
    926a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    926e:	f7ff fbcb 	bl	8a08 <__sprint_r.part.0>
    9272:	2800      	cmp	r0, #0
    9274:	f47f addb 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    9278:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    927c:	3d10      	subs	r5, #16
    927e:	2d10      	cmp	r5, #16
    9280:	f100 0c01 	add.w	ip, r0, #1
    9284:	dce0      	bgt.n	9248 <_vfiprintf_r+0x7c8>
    9286:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9288:	4a71      	ldr	r2, [pc, #452]	; (9450 <_vfiprintf_r+0x9d0>)
    928a:	f8c9 5004 	str.w	r5, [r9, #4]
    928e:	442b      	add	r3, r5
    9290:	f1bc 0f07 	cmp.w	ip, #7
    9294:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    9298:	f8c9 2000 	str.w	r2, [r9]
    929c:	f340 8194 	ble.w	95c8 <_vfiprintf_r+0xb48>
    92a0:	2b00      	cmp	r3, #0
    92a2:	f000 831f 	beq.w	98e4 <_vfiprintf_r+0xe64>
    92a6:	ee18 1a10 	vmov	r1, s16
    92aa:	aa18      	add	r2, sp, #96	; 0x60
    92ac:	4658      	mov	r0, fp
    92ae:	f7ff fbab 	bl	8a08 <__sprint_r.part.0>
    92b2:	2800      	cmp	r0, #0
    92b4:	f47f adbb 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    92b8:	9a04      	ldr	r2, [sp, #16]
    92ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    92be:	1abd      	subs	r5, r7, r2
    92c0:	2d00      	cmp	r5, #0
    92c2:	f100 0101 	add.w	r1, r0, #1
    92c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    92ca:	f77f ae29 	ble.w	8f20 <_vfiprintf_r+0x4a0>
    92ce:	2d10      	cmp	r5, #16
    92d0:	dd29      	ble.n	9326 <_vfiprintf_r+0x8a6>
    92d2:	9409      	str	r4, [sp, #36]	; 0x24
    92d4:	2710      	movs	r7, #16
    92d6:	ee18 4a10 	vmov	r4, s16
    92da:	e007      	b.n	92ec <_vfiprintf_r+0x86c>
    92dc:	f100 0c02 	add.w	ip, r0, #2
    92e0:	f109 0908 	add.w	r9, r9, #8
    92e4:	4610      	mov	r0, r2
    92e6:	3d10      	subs	r5, #16
    92e8:	2d10      	cmp	r5, #16
    92ea:	dd1a      	ble.n	9322 <_vfiprintf_r+0x8a2>
    92ec:	1c42      	adds	r2, r0, #1
    92ee:	4958      	ldr	r1, [pc, #352]	; (9450 <_vfiprintf_r+0x9d0>)
    92f0:	3310      	adds	r3, #16
    92f2:	2a07      	cmp	r2, #7
    92f4:	e9c9 1700 	strd	r1, r7, [r9]
    92f8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    92fc:	ddee      	ble.n	92dc <_vfiprintf_r+0x85c>
    92fe:	aa18      	add	r2, sp, #96	; 0x60
    9300:	b303      	cbz	r3, 9344 <_vfiprintf_r+0x8c4>
    9302:	4621      	mov	r1, r4
    9304:	4658      	mov	r0, fp
    9306:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    930a:	f7ff fb7d 	bl	8a08 <__sprint_r.part.0>
    930e:	2800      	cmp	r0, #0
    9310:	f47f ad8d 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    9314:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9318:	3d10      	subs	r5, #16
    931a:	2d10      	cmp	r5, #16
    931c:	f100 0c01 	add.w	ip, r0, #1
    9320:	dce4      	bgt.n	92ec <_vfiprintf_r+0x86c>
    9322:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9324:	4661      	mov	r1, ip
    9326:	4a4a      	ldr	r2, [pc, #296]	; (9450 <_vfiprintf_r+0x9d0>)
    9328:	f8c9 5004 	str.w	r5, [r9, #4]
    932c:	442b      	add	r3, r5
    932e:	2907      	cmp	r1, #7
    9330:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    9334:	f8c9 2000 	str.w	r2, [r9]
    9338:	f300 80e7 	bgt.w	950a <_vfiprintf_r+0xa8a>
    933c:	f109 0908 	add.w	r9, r9, #8
    9340:	3101      	adds	r1, #1
    9342:	e5ed      	b.n	8f20 <_vfiprintf_r+0x4a0>
    9344:	f04f 0c01 	mov.w	ip, #1
    9348:	4618      	mov	r0, r3
    934a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    934e:	e7ca      	b.n	92e6 <_vfiprintf_r+0x866>
    9350:	f04f 0c01 	mov.w	ip, #1
    9354:	4618      	mov	r0, r3
    9356:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    935a:	e772      	b.n	9242 <_vfiprintf_r+0x7c2>
    935c:	2b00      	cmp	r3, #0
    935e:	f000 8104 	beq.w	956a <_vfiprintf_r+0xaea>
    9362:	ee18 1a10 	vmov	r1, s16
    9366:	aa18      	add	r2, sp, #96	; 0x60
    9368:	4658      	mov	r0, fp
    936a:	f7ff fb4d 	bl	8a08 <__sprint_r.part.0>
    936e:	2800      	cmp	r0, #0
    9370:	f47f ad5d 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    9374:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9378:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    937c:	1c41      	adds	r1, r0, #1
    937e:	e5a7      	b.n	8ed0 <_vfiprintf_r+0x450>
    9380:	2302      	movs	r3, #2
    9382:	aa11      	add	r2, sp, #68	; 0x44
    9384:	931c      	str	r3, [sp, #112]	; 0x70
    9386:	921b      	str	r2, [sp, #108]	; 0x6c
    9388:	2101      	movs	r1, #1
    938a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    938e:	4608      	mov	r0, r1
    9390:	f109 0908 	add.w	r9, r9, #8
    9394:	1c41      	adds	r1, r0, #1
    9396:	e5ba      	b.n	8f0e <_vfiprintf_r+0x48e>
    9398:	2d10      	cmp	r5, #16
    939a:	f340 82e5 	ble.w	9968 <_vfiprintf_r+0xee8>
    939e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    93a2:	940f      	str	r4, [sp, #60]	; 0x3c
    93a4:	4608      	mov	r0, r1
    93a6:	ee18 4a10 	vmov	r4, s16
    93aa:	e007      	b.n	93bc <_vfiprintf_r+0x93c>
    93ac:	f100 0c02 	add.w	ip, r0, #2
    93b0:	f109 0908 	add.w	r9, r9, #8
    93b4:	4610      	mov	r0, r2
    93b6:	3d10      	subs	r5, #16
    93b8:	2d10      	cmp	r5, #16
    93ba:	dd1d      	ble.n	93f8 <_vfiprintf_r+0x978>
    93bc:	4925      	ldr	r1, [pc, #148]	; (9454 <_vfiprintf_r+0x9d4>)
    93be:	f8c9 1000 	str.w	r1, [r9]
    93c2:	1c42      	adds	r2, r0, #1
    93c4:	3310      	adds	r3, #16
    93c6:	2110      	movs	r1, #16
    93c8:	2a07      	cmp	r2, #7
    93ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    93ce:	f8c9 1004 	str.w	r1, [r9, #4]
    93d2:	ddeb      	ble.n	93ac <_vfiprintf_r+0x92c>
    93d4:	aa18      	add	r2, sp, #96	; 0x60
    93d6:	b303      	cbz	r3, 941a <_vfiprintf_r+0x99a>
    93d8:	4621      	mov	r1, r4
    93da:	4658      	mov	r0, fp
    93dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    93e0:	f7ff fb12 	bl	8a08 <__sprint_r.part.0>
    93e4:	2800      	cmp	r0, #0
    93e6:	f47f ad22 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    93ea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    93ee:	3d10      	subs	r5, #16
    93f0:	2d10      	cmp	r5, #16
    93f2:	f100 0c01 	add.w	ip, r0, #1
    93f6:	dce1      	bgt.n	93bc <_vfiprintf_r+0x93c>
    93f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    93fa:	4660      	mov	r0, ip
    93fc:	4a15      	ldr	r2, [pc, #84]	; (9454 <_vfiprintf_r+0x9d4>)
    93fe:	f8c9 5004 	str.w	r5, [r9, #4]
    9402:	442b      	add	r3, r5
    9404:	2807      	cmp	r0, #7
    9406:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    940a:	f8c9 2000 	str.w	r2, [r9]
    940e:	f300 80c1 	bgt.w	9594 <_vfiprintf_r+0xb14>
    9412:	f109 0908 	add.w	r9, r9, #8
    9416:	1c41      	adds	r1, r0, #1
    9418:	e546      	b.n	8ea8 <_vfiprintf_r+0x428>
    941a:	4618      	mov	r0, r3
    941c:	f04f 0c01 	mov.w	ip, #1
    9420:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9424:	e7c7      	b.n	93b6 <_vfiprintf_r+0x936>
    9426:	0776      	lsls	r6, r6, #29
    9428:	9319      	str	r3, [sp, #100]	; 0x64
    942a:	d553      	bpl.n	94d4 <_vfiprintf_r+0xa54>
    942c:	9a06      	ldr	r2, [sp, #24]
    942e:	9903      	ldr	r1, [sp, #12]
    9430:	1a54      	subs	r4, r2, r1
    9432:	2c00      	cmp	r4, #0
    9434:	dd4e      	ble.n	94d4 <_vfiprintf_r+0xa54>
    9436:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    943a:	2c10      	cmp	r4, #16
    943c:	f340 82b0 	ble.w	99a0 <_vfiprintf_r+0xf20>
    9440:	9919      	ldr	r1, [sp, #100]	; 0x64
    9442:	ee18 6a10 	vmov	r6, s16
    9446:	2510      	movs	r5, #16
    9448:	e00d      	b.n	9466 <_vfiprintf_r+0x9e6>
    944a:	bf00      	nop
    944c:	2000089c 	.word	0x2000089c
    9450:	20000da4 	.word	0x20000da4
    9454:	200008b8 	.word	0x200008b8
    9458:	1c88      	adds	r0, r1, #2
    945a:	f109 0908 	add.w	r9, r9, #8
    945e:	4611      	mov	r1, r2
    9460:	3c10      	subs	r4, #16
    9462:	2c10      	cmp	r4, #16
    9464:	dd1a      	ble.n	949c <_vfiprintf_r+0xa1c>
    9466:	1c4a      	adds	r2, r1, #1
    9468:	48b3      	ldr	r0, [pc, #716]	; (9738 <_vfiprintf_r+0xcb8>)
    946a:	3310      	adds	r3, #16
    946c:	2a07      	cmp	r2, #7
    946e:	e9c9 0500 	strd	r0, r5, [r9]
    9472:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    9476:	ddef      	ble.n	9458 <_vfiprintf_r+0x9d8>
    9478:	aa18      	add	r2, sp, #96	; 0x60
    947a:	b333      	cbz	r3, 94ca <_vfiprintf_r+0xa4a>
    947c:	4631      	mov	r1, r6
    947e:	4658      	mov	r0, fp
    9480:	f7ff fac2 	bl	8a08 <__sprint_r.part.0>
    9484:	2800      	cmp	r0, #0
    9486:	f47f acd2 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    948a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    948e:	3c10      	subs	r4, #16
    9490:	2c10      	cmp	r4, #16
    9492:	f101 0001 	add.w	r0, r1, #1
    9496:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    949a:	dce4      	bgt.n	9466 <_vfiprintf_r+0x9e6>
    949c:	4aa6      	ldr	r2, [pc, #664]	; (9738 <_vfiprintf_r+0xcb8>)
    949e:	f8c9 4004 	str.w	r4, [r9, #4]
    94a2:	4423      	add	r3, r4
    94a4:	2807      	cmp	r0, #7
    94a6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    94aa:	f8c9 2000 	str.w	r2, [r9]
    94ae:	f77f ad59 	ble.w	8f64 <_vfiprintf_r+0x4e4>
    94b2:	b17b      	cbz	r3, 94d4 <_vfiprintf_r+0xa54>
    94b4:	ee18 1a10 	vmov	r1, s16
    94b8:	aa18      	add	r2, sp, #96	; 0x60
    94ba:	4658      	mov	r0, fp
    94bc:	f7ff faa4 	bl	8a08 <__sprint_r.part.0>
    94c0:	2800      	cmp	r0, #0
    94c2:	f47f acb4 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    94c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    94c8:	e54c      	b.n	8f64 <_vfiprintf_r+0x4e4>
    94ca:	2001      	movs	r0, #1
    94cc:	4619      	mov	r1, r3
    94ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    94d2:	e7c5      	b.n	9460 <_vfiprintf_r+0x9e0>
    94d4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    94d8:	9903      	ldr	r1, [sp, #12]
    94da:	428a      	cmp	r2, r1
    94dc:	bfac      	ite	ge
    94de:	189b      	addge	r3, r3, r2
    94e0:	185b      	addlt	r3, r3, r1
    94e2:	9305      	str	r3, [sp, #20]
    94e4:	e549      	b.n	8f7a <_vfiprintf_r+0x4fa>
    94e6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    94ea:	058f      	lsls	r7, r1, #22
    94ec:	ee18 3a10 	vmov	r3, s16
    94f0:	b28a      	uxth	r2, r1
    94f2:	f53f aae8 	bmi.w	8ac6 <_vfiprintf_r+0x46>
    94f6:	ee18 5a10 	vmov	r5, s16
    94fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
    94fc:	f7fd f90a 	bl	6714 <__retarget_lock_acquire_recursive>
    9500:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    9504:	b28a      	uxth	r2, r1
    9506:	f7ff bade 	b.w	8ac6 <_vfiprintf_r+0x46>
    950a:	2b00      	cmp	r3, #0
    950c:	f43f ae79 	beq.w	9202 <_vfiprintf_r+0x782>
    9510:	ee18 1a10 	vmov	r1, s16
    9514:	aa18      	add	r2, sp, #96	; 0x60
    9516:	4658      	mov	r0, fp
    9518:	f7ff fa76 	bl	8a08 <__sprint_r.part.0>
    951c:	2800      	cmp	r0, #0
    951e:	f47f ac86 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    9522:	9919      	ldr	r1, [sp, #100]	; 0x64
    9524:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9526:	3101      	adds	r1, #1
    9528:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    952c:	e4f8      	b.n	8f20 <_vfiprintf_r+0x4a0>
    952e:	9219      	str	r2, [sp, #100]	; 0x64
    9530:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9534:	e45e      	b.n	8df4 <_vfiprintf_r+0x374>
    9536:	2f00      	cmp	r7, #0
    9538:	f47f abc3 	bne.w	8cc2 <_vfiprintf_r+0x242>
    953c:	9e03      	ldr	r6, [sp, #12]
    953e:	2700      	movs	r7, #0
    9540:	9704      	str	r7, [sp, #16]
    9542:	ac44      	add	r4, sp, #272	; 0x110
    9544:	f7ff bbc5 	b.w	8cd2 <_vfiprintf_r+0x252>
    9548:	9b03      	ldr	r3, [sp, #12]
    954a:	f013 0310 	ands.w	r3, r3, #16
    954e:	d154      	bne.n	95fa <_vfiprintf_r+0xb7a>
    9550:	9a03      	ldr	r2, [sp, #12]
    9552:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    9556:	f000 816b 	beq.w	9830 <_vfiprintf_r+0xdb0>
    955a:	9907      	ldr	r1, [sp, #28]
    955c:	461a      	mov	r2, r3
    955e:	f851 3b04 	ldr.w	r3, [r1], #4
    9562:	9107      	str	r1, [sp, #28]
    9564:	b29b      	uxth	r3, r3
    9566:	2101      	movs	r1, #1
    9568:	e401      	b.n	8d6e <_vfiprintf_r+0x2ee>
    956a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    956c:	2a00      	cmp	r2, #0
    956e:	d164      	bne.n	963a <_vfiprintf_r+0xbba>
    9570:	4618      	mov	r0, r3
    9572:	2101      	movs	r1, #1
    9574:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9578:	e4c9      	b.n	8f0e <_vfiprintf_r+0x48e>
    957a:	2101      	movs	r1, #1
    957c:	4618      	mov	r0, r3
    957e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9582:	e4c4      	b.n	8f0e <_vfiprintf_r+0x48e>
    9584:	425b      	negs	r3, r3
    9586:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    958a:	9603      	str	r6, [sp, #12]
    958c:	202d      	movs	r0, #45	; 0x2d
    958e:	2101      	movs	r1, #1
    9590:	f7ff bbee 	b.w	8d70 <_vfiprintf_r+0x2f0>
    9594:	2b00      	cmp	r3, #0
    9596:	f000 8088 	beq.w	96aa <_vfiprintf_r+0xc2a>
    959a:	ee18 1a10 	vmov	r1, s16
    959e:	aa18      	add	r2, sp, #96	; 0x60
    95a0:	4658      	mov	r0, fp
    95a2:	f7ff fa31 	bl	8a08 <__sprint_r.part.0>
    95a6:	2800      	cmp	r0, #0
    95a8:	f47f ac41 	bne.w	8e2e <_vfiprintf_r+0x3ae>
    95ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    95b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    95b4:	1c41      	adds	r1, r0, #1
    95b6:	e477      	b.n	8ea8 <_vfiprintf_r+0x428>
    95b8:	f898 1000 	ldrb.w	r1, [r8]
    95bc:	9307      	str	r3, [sp, #28]
    95be:	f7ff bad2 	b.w	8b66 <_vfiprintf_r+0xe6>
    95c2:	ac44      	add	r4, sp, #272	; 0x110
    95c4:	f7ff bb85 	b.w	8cd2 <_vfiprintf_r+0x252>
    95c8:	f109 0908 	add.w	r9, r9, #8
    95cc:	f10c 0101 	add.w	r1, ip, #1
    95d0:	4660      	mov	r0, ip
    95d2:	e4a0      	b.n	8f16 <_vfiprintf_r+0x496>
    95d4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    95d8:	f040 8197 	bne.w	990a <_vfiprintf_r+0xe8a>
    95dc:	f851 3b04 	ldr.w	r3, [r1], #4
    95e0:	9107      	str	r1, [sp, #28]
    95e2:	f7ff bbc0 	b.w	8d66 <_vfiprintf_r+0x2e6>
    95e6:	05b3      	lsls	r3, r6, #22
    95e8:	f100 8188 	bmi.w	98fc <_vfiprintf_r+0xe7c>
    95ec:	f852 3b04 	ldr.w	r3, [r2], #4
    95f0:	9207      	str	r2, [sp, #28]
    95f2:	17da      	asrs	r2, r3, #31
    95f4:	4611      	mov	r1, r2
    95f6:	f7ff bb52 	b.w	8c9e <_vfiprintf_r+0x21e>
    95fa:	9907      	ldr	r1, [sp, #28]
    95fc:	f851 3b04 	ldr.w	r3, [r1], #4
    9600:	9107      	str	r1, [sp, #28]
    9602:	2101      	movs	r1, #1
    9604:	f7ff bbb3 	b.w	8d6e <_vfiprintf_r+0x2ee>
    9608:	9b07      	ldr	r3, [sp, #28]
    960a:	9805      	ldr	r0, [sp, #20]
    960c:	f853 1b04 	ldr.w	r1, [r3], #4
    9610:	9307      	str	r3, [sp, #28]
    9612:	17c2      	asrs	r2, r0, #31
    9614:	e9c1 0200 	strd	r0, r2, [r1]
    9618:	f7ff ba7d 	b.w	8b16 <_vfiprintf_r+0x96>
    961c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    961e:	2b00      	cmp	r3, #0
    9620:	f43f ab26 	beq.w	8c70 <_vfiprintf_r+0x1f0>
    9624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9626:	781b      	ldrb	r3, [r3, #0]
    9628:	2b00      	cmp	r3, #0
    962a:	f43f ab21 	beq.w	8c70 <_vfiprintf_r+0x1f0>
    962e:	f898 1000 	ldrb.w	r1, [r8]
    9632:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    9636:	f7ff ba96 	b.w	8b66 <_vfiprintf_r+0xe6>
    963a:	2302      	movs	r3, #2
    963c:	aa11      	add	r2, sp, #68	; 0x44
    963e:	931c      	str	r3, [sp, #112]	; 0x70
    9640:	921b      	str	r2, [sp, #108]	; 0x6c
    9642:	2001      	movs	r0, #1
    9644:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9648:	e6a2      	b.n	9390 <_vfiprintf_r+0x910>
    964a:	9603      	str	r6, [sp, #12]
    964c:	e571      	b.n	9132 <_vfiprintf_r+0x6b2>
    964e:	4b3b      	ldr	r3, [pc, #236]	; (973c <_vfiprintf_r+0xcbc>)
    9650:	930c      	str	r3, [sp, #48]	; 0x30
    9652:	f016 0220 	ands.w	r2, r6, #32
    9656:	d059      	beq.n	970c <_vfiprintf_r+0xc8c>
    9658:	9b07      	ldr	r3, [sp, #28]
    965a:	3307      	adds	r3, #7
    965c:	f023 0307 	bic.w	r3, r3, #7
    9660:	4618      	mov	r0, r3
    9662:	685a      	ldr	r2, [r3, #4]
    9664:	f850 3b08 	ldr.w	r3, [r0], #8
    9668:	9007      	str	r0, [sp, #28]
    966a:	07f4      	lsls	r4, r6, #31
    966c:	d509      	bpl.n	9682 <_vfiprintf_r+0xc02>
    966e:	ea53 0002 	orrs.w	r0, r3, r2
    9672:	d006      	beq.n	9682 <_vfiprintf_r+0xc02>
    9674:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    9678:	2130      	movs	r1, #48	; 0x30
    967a:	f046 0602 	orr.w	r6, r6, #2
    967e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    9682:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    9686:	9103      	str	r1, [sp, #12]
    9688:	2102      	movs	r1, #2
    968a:	f7ff bb70 	b.w	8d6e <_vfiprintf_r+0x2ee>
    968e:	4b2c      	ldr	r3, [pc, #176]	; (9740 <_vfiprintf_r+0xcc0>)
    9690:	930c      	str	r3, [sp, #48]	; 0x30
    9692:	e7de      	b.n	9652 <_vfiprintf_r+0xbd2>
    9694:	9b07      	ldr	r3, [sp, #28]
    9696:	2101      	movs	r1, #1
    9698:	f853 2b04 	ldr.w	r2, [r3], #4
    969c:	9103      	str	r1, [sp, #12]
    969e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    96a2:	9307      	str	r3, [sp, #28]
    96a4:	9104      	str	r1, [sp, #16]
    96a6:	ac2b      	add	r4, sp, #172	; 0xac
    96a8:	e4df      	b.n	906a <_vfiprintf_r+0x5ea>
    96aa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    96ae:	2a00      	cmp	r2, #0
    96b0:	f040 8132 	bne.w	9918 <_vfiprintf_r+0xe98>
    96b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96b6:	2a00      	cmp	r2, #0
    96b8:	f47f ae62 	bne.w	9380 <_vfiprintf_r+0x900>
    96bc:	4618      	mov	r0, r3
    96be:	2101      	movs	r1, #1
    96c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    96c4:	e427      	b.n	8f16 <_vfiprintf_r+0x496>
    96c6:	2100      	movs	r1, #0
    96c8:	2208      	movs	r2, #8
    96ca:	a816      	add	r0, sp, #88	; 0x58
    96cc:	9413      	str	r4, [sp, #76]	; 0x4c
    96ce:	f7fc fc89 	bl	5fe4 <memset>
    96d2:	1c79      	adds	r1, r7, #1
    96d4:	f000 80bc 	beq.w	9850 <_vfiprintf_r+0xdd0>
    96d8:	2500      	movs	r5, #0
    96da:	9407      	str	r4, [sp, #28]
    96dc:	462c      	mov	r4, r5
    96de:	e00c      	b.n	96fa <_vfiprintf_r+0xc7a>
    96e0:	a92b      	add	r1, sp, #172	; 0xac
    96e2:	4658      	mov	r0, fp
    96e4:	f7ff f94a 	bl	897c <_wcrtomb_r>
    96e8:	1c42      	adds	r2, r0, #1
    96ea:	4420      	add	r0, r4
    96ec:	f000 816b 	beq.w	99c6 <_vfiprintf_r+0xf46>
    96f0:	42b8      	cmp	r0, r7
    96f2:	dc08      	bgt.n	9706 <_vfiprintf_r+0xc86>
    96f4:	f000 8170 	beq.w	99d8 <_vfiprintf_r+0xf58>
    96f8:	4604      	mov	r4, r0
    96fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    96fc:	5952      	ldr	r2, [r2, r5]
    96fe:	ab16      	add	r3, sp, #88	; 0x58
    9700:	3504      	adds	r5, #4
    9702:	2a00      	cmp	r2, #0
    9704:	d1ec      	bne.n	96e0 <_vfiprintf_r+0xc60>
    9706:	9404      	str	r4, [sp, #16]
    9708:	9c07      	ldr	r4, [sp, #28]
    970a:	e0af      	b.n	986c <_vfiprintf_r+0xdec>
    970c:	f016 0310 	ands.w	r3, r6, #16
    9710:	9807      	ldr	r0, [sp, #28]
    9712:	d10c      	bne.n	972e <_vfiprintf_r+0xcae>
    9714:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    9718:	d005      	beq.n	9726 <_vfiprintf_r+0xca6>
    971a:	461a      	mov	r2, r3
    971c:	f850 3b04 	ldr.w	r3, [r0], #4
    9720:	9007      	str	r0, [sp, #28]
    9722:	b29b      	uxth	r3, r3
    9724:	e7a1      	b.n	966a <_vfiprintf_r+0xbea>
    9726:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    972a:	f040 80e1 	bne.w	98f0 <_vfiprintf_r+0xe70>
    972e:	f850 3b04 	ldr.w	r3, [r0], #4
    9732:	9007      	str	r0, [sp, #28]
    9734:	e799      	b.n	966a <_vfiprintf_r+0xbea>
    9736:	bf00      	nop
    9738:	200008b8 	.word	0x200008b8
    973c:	2000089c 	.word	0x2000089c
    9740:	20000888 	.word	0x20000888
    9744:	9903      	ldr	r1, [sp, #12]
    9746:	9704      	str	r7, [sp, #16]
    9748:	ac44      	add	r4, sp, #272	; 0x110
    974a:	469e      	mov	lr, r3
    974c:	ee08 ba90 	vmov	s17, fp
    9750:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    9754:	f04f 0c00 	mov.w	ip, #0
    9758:	4623      	mov	r3, r4
    975a:	e006      	b.n	976a <_vfiprintf_r+0xcea>
    975c:	f1be 0f0a 	cmp.w	lr, #10
    9760:	f172 0200 	sbcs.w	r2, r2, #0
    9764:	d339      	bcc.n	97da <_vfiprintf_r+0xd5a>
    9766:	46a6      	mov	lr, r4
    9768:	462a      	mov	r2, r5
    976a:	49a6      	ldr	r1, [pc, #664]	; (9a04 <_vfiprintf_r+0xf84>)
    976c:	eb1e 0002 	adds.w	r0, lr, r2
    9770:	f140 0000 	adc.w	r0, r0, #0
    9774:	460f      	mov	r7, r1
    9776:	fba1 1400 	umull	r1, r4, r1, r0
    977a:	f024 0103 	bic.w	r1, r4, #3
    977e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    9782:	1a40      	subs	r0, r0, r1
    9784:	ebbe 0100 	subs.w	r1, lr, r0
    9788:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    978c:	f162 0400 	sbc.w	r4, r2, #0
    9790:	fb05 f501 	mul.w	r5, r5, r1
    9794:	fb07 5504 	mla	r5, r7, r4, r5
    9798:	fba1 4107 	umull	r4, r1, r1, r7
    979c:	440d      	add	r5, r1
    979e:	2705      	movs	r7, #5
    97a0:	f004 0101 	and.w	r1, r4, #1
    97a4:	fba1 1b07 	umull	r1, fp, r1, r7
    97a8:	1809      	adds	r1, r1, r0
    97aa:	0864      	lsrs	r4, r4, #1
    97ac:	3130      	adds	r1, #48	; 0x30
    97ae:	f803 1c01 	strb.w	r1, [r3, #-1]
    97b2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    97b6:	f10c 0c01 	add.w	ip, ip, #1
    97ba:	3b01      	subs	r3, #1
    97bc:	086d      	lsrs	r5, r5, #1
    97be:	2e00      	cmp	r6, #0
    97c0:	d0cc      	beq.n	975c <_vfiprintf_r+0xcdc>
    97c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    97c4:	7809      	ldrb	r1, [r1, #0]
    97c6:	4561      	cmp	r1, ip
    97c8:	d1c8      	bne.n	975c <_vfiprintf_r+0xcdc>
    97ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    97ce:	d0c5      	beq.n	975c <_vfiprintf_r+0xcdc>
    97d0:	f1be 0f0a 	cmp.w	lr, #10
    97d4:	f172 0200 	sbcs.w	r2, r2, #0
    97d8:	d26c      	bcs.n	98b4 <_vfiprintf_r+0xe34>
    97da:	461c      	mov	r4, r3
    97dc:	ab44      	add	r3, sp, #272	; 0x110
    97de:	1b1b      	subs	r3, r3, r4
    97e0:	9f04      	ldr	r7, [sp, #16]
    97e2:	9e03      	ldr	r6, [sp, #12]
    97e4:	9304      	str	r3, [sp, #16]
    97e6:	ee18 ba90 	vmov	fp, s17
    97ea:	f7ff ba72 	b.w	8cd2 <_vfiprintf_r+0x252>
    97ee:	9603      	str	r6, [sp, #12]
    97f0:	f7ff ba62 	b.w	8cb8 <_vfiprintf_r+0x238>
    97f4:	4658      	mov	r0, fp
    97f6:	f7fc fae5 	bl	5dc4 <__sinit>
    97fa:	f7ff b95b 	b.w	8ab4 <_vfiprintf_r+0x34>
    97fe:	2901      	cmp	r1, #1
    9800:	9603      	str	r6, [sp, #12]
    9802:	f47f accd 	bne.w	91a0 <_vfiprintf_r+0x720>
    9806:	f7ff ba5c 	b.w	8cc2 <_vfiprintf_r+0x242>
    980a:	9b07      	ldr	r3, [sp, #28]
    980c:	9905      	ldr	r1, [sp, #20]
    980e:	f853 2b04 	ldr.w	r2, [r3], #4
    9812:	6011      	str	r1, [r2, #0]
    9814:	9307      	str	r3, [sp, #28]
    9816:	f7ff b97e 	b.w	8b16 <_vfiprintf_r+0x96>
    981a:	2f06      	cmp	r7, #6
    981c:	463b      	mov	r3, r7
    981e:	9a03      	ldr	r2, [sp, #12]
    9820:	4c79      	ldr	r4, [pc, #484]	; (9a08 <_vfiprintf_r+0xf88>)
    9822:	9207      	str	r2, [sp, #28]
    9824:	bf28      	it	cs
    9826:	2306      	movcs	r3, #6
    9828:	9304      	str	r3, [sp, #16]
    982a:	9303      	str	r3, [sp, #12]
    982c:	f7ff bb25 	b.w	8e7a <_vfiprintf_r+0x3fa>
    9830:	9b03      	ldr	r3, [sp, #12]
    9832:	9907      	ldr	r1, [sp, #28]
    9834:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    9838:	bf14      	ite	ne
    983a:	f851 3b04 	ldrne.w	r3, [r1], #4
    983e:	f851 3b04 	ldreq.w	r3, [r1], #4
    9842:	9107      	str	r1, [sp, #28]
    9844:	bf1c      	itt	ne
    9846:	4602      	movne	r2, r0
    9848:	b2db      	uxtbne	r3, r3
    984a:	2101      	movs	r1, #1
    984c:	f7ff ba8f 	b.w	8d6e <_vfiprintf_r+0x2ee>
    9850:	ab16      	add	r3, sp, #88	; 0x58
    9852:	9300      	str	r3, [sp, #0]
    9854:	2300      	movs	r3, #0
    9856:	4619      	mov	r1, r3
    9858:	aa13      	add	r2, sp, #76	; 0x4c
    985a:	4658      	mov	r0, fp
    985c:	f7ff f8b4 	bl	89c8 <_wcsrtombs_r>
    9860:	4603      	mov	r3, r0
    9862:	3301      	adds	r3, #1
    9864:	9004      	str	r0, [sp, #16]
    9866:	f000 80ae 	beq.w	99c6 <_vfiprintf_r+0xf46>
    986a:	9413      	str	r4, [sp, #76]	; 0x4c
    986c:	9b04      	ldr	r3, [sp, #16]
    986e:	2b00      	cmp	r3, #0
    9870:	d030      	beq.n	98d4 <_vfiprintf_r+0xe54>
    9872:	2b63      	cmp	r3, #99	; 0x63
    9874:	dc63      	bgt.n	993e <_vfiprintf_r+0xebe>
    9876:	2300      	movs	r3, #0
    9878:	9308      	str	r3, [sp, #32]
    987a:	ac2b      	add	r4, sp, #172	; 0xac
    987c:	2208      	movs	r2, #8
    987e:	2100      	movs	r1, #0
    9880:	a816      	add	r0, sp, #88	; 0x58
    9882:	f7fc fbaf 	bl	5fe4 <memset>
    9886:	9d04      	ldr	r5, [sp, #16]
    9888:	ab16      	add	r3, sp, #88	; 0x58
    988a:	9300      	str	r3, [sp, #0]
    988c:	aa13      	add	r2, sp, #76	; 0x4c
    988e:	462b      	mov	r3, r5
    9890:	4621      	mov	r1, r4
    9892:	4658      	mov	r0, fp
    9894:	f7ff f898 	bl	89c8 <_wcsrtombs_r>
    9898:	4285      	cmp	r5, r0
    989a:	f040 80ab 	bne.w	99f4 <_vfiprintf_r+0xf74>
    989e:	9b03      	ldr	r3, [sp, #12]
    98a0:	9a04      	ldr	r2, [sp, #16]
    98a2:	9307      	str	r3, [sp, #28]
    98a4:	2300      	movs	r3, #0
    98a6:	54a3      	strb	r3, [r4, r2]
    98a8:	461f      	mov	r7, r3
    98aa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    98ae:	9303      	str	r3, [sp, #12]
    98b0:	f7ff ba16 	b.w	8ce0 <_vfiprintf_r+0x260>
    98b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    98b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    98b8:	1a9b      	subs	r3, r3, r2
    98ba:	4618      	mov	r0, r3
    98bc:	9308      	str	r3, [sp, #32]
    98be:	f7fc fc49 	bl	6154 <strncpy>
    98c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    98c4:	9b08      	ldr	r3, [sp, #32]
    98c6:	784a      	ldrb	r2, [r1, #1]
    98c8:	b10a      	cbz	r2, 98ce <_vfiprintf_r+0xe4e>
    98ca:	3101      	adds	r1, #1
    98cc:	910b      	str	r1, [sp, #44]	; 0x2c
    98ce:	f04f 0c00 	mov.w	ip, #0
    98d2:	e748      	b.n	9766 <_vfiprintf_r+0xce6>
    98d4:	9b03      	ldr	r3, [sp, #12]
    98d6:	9307      	str	r3, [sp, #28]
    98d8:	9b04      	ldr	r3, [sp, #16]
    98da:	9303      	str	r3, [sp, #12]
    98dc:	461f      	mov	r7, r3
    98de:	9308      	str	r3, [sp, #32]
    98e0:	f7ff b9fe 	b.w	8ce0 <_vfiprintf_r+0x260>
    98e4:	2101      	movs	r1, #1
    98e6:	4618      	mov	r0, r3
    98e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    98ec:	f7ff bb13 	b.w	8f16 <_vfiprintf_r+0x496>
    98f0:	f850 3b04 	ldr.w	r3, [r0], #4
    98f4:	9007      	str	r0, [sp, #28]
    98f6:	4622      	mov	r2, r4
    98f8:	b2db      	uxtb	r3, r3
    98fa:	e6b6      	b.n	966a <_vfiprintf_r+0xbea>
    98fc:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9900:	9207      	str	r2, [sp, #28]
    9902:	17da      	asrs	r2, r3, #31
    9904:	4611      	mov	r1, r2
    9906:	f7ff b9ca 	b.w	8c9e <_vfiprintf_r+0x21e>
    990a:	f851 3b04 	ldr.w	r3, [r1], #4
    990e:	9107      	str	r1, [sp, #28]
    9910:	4602      	mov	r2, r0
    9912:	b2db      	uxtb	r3, r3
    9914:	f7ff ba27 	b.w	8d66 <_vfiprintf_r+0x2e6>
    9918:	2301      	movs	r3, #1
    991a:	931c      	str	r3, [sp, #112]	; 0x70
    991c:	2101      	movs	r1, #1
    991e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    9922:	931b      	str	r3, [sp, #108]	; 0x6c
    9924:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9928:	460b      	mov	r3, r1
    992a:	f7ff bacd 	b.w	8ec8 <_vfiprintf_r+0x448>
    992e:	9b07      	ldr	r3, [sp, #28]
    9930:	9905      	ldr	r1, [sp, #20]
    9932:	f853 2b04 	ldr.w	r2, [r3], #4
    9936:	9307      	str	r3, [sp, #28]
    9938:	8011      	strh	r1, [r2, #0]
    993a:	f7ff b8ec 	b.w	8b16 <_vfiprintf_r+0x96>
    993e:	1c59      	adds	r1, r3, #1
    9940:	4658      	mov	r0, fp
    9942:	f7fb fbe1 	bl	5108 <_malloc_r>
    9946:	4604      	mov	r4, r0
    9948:	2800      	cmp	r0, #0
    994a:	d03c      	beq.n	99c6 <_vfiprintf_r+0xf46>
    994c:	9008      	str	r0, [sp, #32]
    994e:	e795      	b.n	987c <_vfiprintf_r+0xdfc>
    9950:	6d88      	ldr	r0, [r1, #88]	; 0x58
    9952:	f7fc fee1 	bl	6718 <__retarget_lock_release_recursive>
    9956:	f7ff b9e9 	b.w	8d2c <_vfiprintf_r+0x2ac>
    995a:	9b03      	ldr	r3, [sp, #12]
    995c:	9307      	str	r3, [sp, #28]
    995e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    9962:	9f08      	ldr	r7, [sp, #32]
    9964:	f7ff b9bc 	b.w	8ce0 <_vfiprintf_r+0x260>
    9968:	9819      	ldr	r0, [sp, #100]	; 0x64
    996a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    996c:	3001      	adds	r0, #1
    996e:	e545      	b.n	93fc <_vfiprintf_r+0x97c>
    9970:	9b03      	ldr	r3, [sp, #12]
    9972:	9307      	str	r3, [sp, #28]
    9974:	4620      	mov	r0, r4
    9976:	f7fd f8a3 	bl	6ac0 <strlen>
    997a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    997e:	462f      	mov	r7, r5
    9980:	9004      	str	r0, [sp, #16]
    9982:	9303      	str	r3, [sp, #12]
    9984:	9508      	str	r5, [sp, #32]
    9986:	f7ff b9ab 	b.w	8ce0 <_vfiprintf_r+0x260>
    998a:	ee18 1a10 	vmov	r1, s16
    998e:	aa18      	add	r2, sp, #96	; 0x60
    9990:	4658      	mov	r0, fp
    9992:	f7ff f839 	bl	8a08 <__sprint_r.part.0>
    9996:	2800      	cmp	r0, #0
    9998:	f43f aa36 	beq.w	8e08 <_vfiprintf_r+0x388>
    999c:	f7ff ba4d 	b.w	8e3a <_vfiprintf_r+0x3ba>
    99a0:	9819      	ldr	r0, [sp, #100]	; 0x64
    99a2:	3001      	adds	r0, #1
    99a4:	e57a      	b.n	949c <_vfiprintf_r+0xa1c>
    99a6:	468c      	mov	ip, r1
    99a8:	e46e      	b.n	9288 <_vfiprintf_r+0x808>
    99aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    99ac:	07d9      	lsls	r1, r3, #31
    99ae:	d405      	bmi.n	99bc <_vfiprintf_r+0xf3c>
    99b0:	89ab      	ldrh	r3, [r5, #12]
    99b2:	059a      	lsls	r2, r3, #22
    99b4:	d402      	bmi.n	99bc <_vfiprintf_r+0xf3c>
    99b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    99b8:	f7fc feae 	bl	6718 <__retarget_lock_release_recursive>
    99bc:	f04f 33ff 	mov.w	r3, #4294967295
    99c0:	9305      	str	r3, [sp, #20]
    99c2:	f7ff ba49 	b.w	8e58 <_vfiprintf_r+0x3d8>
    99c6:	ee18 2a10 	vmov	r2, s16
    99ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    99ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    99d2:	8193      	strh	r3, [r2, #12]
    99d4:	f7ff ba35 	b.w	8e42 <_vfiprintf_r+0x3c2>
    99d8:	9c07      	ldr	r4, [sp, #28]
    99da:	9704      	str	r7, [sp, #16]
    99dc:	e746      	b.n	986c <_vfiprintf_r+0xdec>
    99de:	9b07      	ldr	r3, [sp, #28]
    99e0:	f898 1001 	ldrb.w	r1, [r8, #1]
    99e4:	f853 7b04 	ldr.w	r7, [r3], #4
    99e8:	9307      	str	r3, [sp, #28]
    99ea:	4690      	mov	r8, r2
    99ec:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    99f0:	f7ff b8b9 	b.w	8b66 <_vfiprintf_r+0xe6>
    99f4:	ee18 2a10 	vmov	r2, s16
    99f8:	8993      	ldrh	r3, [r2, #12]
    99fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    99fe:	8193      	strh	r3, [r2, #12]
    9a00:	f7ff ba15 	b.w	8e2e <_vfiprintf_r+0x3ae>
    9a04:	cccccccd 	.word	0xcccccccd
    9a08:	200008b0 	.word	0x200008b0

00009a0c <__sbprintf>:
    9a0c:	b570      	push	{r4, r5, r6, lr}
    9a0e:	460c      	mov	r4, r1
    9a10:	8989      	ldrh	r1, [r1, #12]
    9a12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    9a16:	f021 0102 	bic.w	r1, r1, #2
    9a1a:	f8ad 1014 	strh.w	r1, [sp, #20]
    9a1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    9a20:	911b      	str	r1, [sp, #108]	; 0x6c
    9a22:	89e1      	ldrh	r1, [r4, #14]
    9a24:	f8ad 1016 	strh.w	r1, [sp, #22]
    9a28:	69e1      	ldr	r1, [r4, #28]
    9a2a:	9109      	str	r1, [sp, #36]	; 0x24
    9a2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9a2e:	910b      	str	r1, [sp, #44]	; 0x2c
    9a30:	a91c      	add	r1, sp, #112	; 0x70
    9a32:	9102      	str	r1, [sp, #8]
    9a34:	9106      	str	r1, [sp, #24]
    9a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9a3a:	4606      	mov	r6, r0
    9a3c:	9104      	str	r1, [sp, #16]
    9a3e:	9107      	str	r1, [sp, #28]
    9a40:	a818      	add	r0, sp, #96	; 0x60
    9a42:	2100      	movs	r1, #0
    9a44:	e9cd 3200 	strd	r3, r2, [sp]
    9a48:	9108      	str	r1, [sp, #32]
    9a4a:	f7fc fe5f 	bl	670c <__retarget_lock_init_recursive>
    9a4e:	e9dd 3200 	ldrd	r3, r2, [sp]
    9a52:	a902      	add	r1, sp, #8
    9a54:	4630      	mov	r0, r6
    9a56:	f7ff f813 	bl	8a80 <_vfiprintf_r>
    9a5a:	1e05      	subs	r5, r0, #0
    9a5c:	db07      	blt.n	9a6e <__sbprintf+0x62>
    9a5e:	a902      	add	r1, sp, #8
    9a60:	4630      	mov	r0, r6
    9a62:	f7fd ff63 	bl	792c <_fflush_r>
    9a66:	2800      	cmp	r0, #0
    9a68:	bf18      	it	ne
    9a6a:	f04f 35ff 	movne.w	r5, #4294967295
    9a6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9a72:	065b      	lsls	r3, r3, #25
    9a74:	d503      	bpl.n	9a7e <__sbprintf+0x72>
    9a76:	89a3      	ldrh	r3, [r4, #12]
    9a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a7c:	81a3      	strh	r3, [r4, #12]
    9a7e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9a80:	f7fc fe46 	bl	6710 <__retarget_lock_close_recursive>
    9a84:	4628      	mov	r0, r5
    9a86:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    9a8a:	bd70      	pop	{r4, r5, r6, pc}

00009a8c <__sfvwrite_r>:
    9a8c:	6893      	ldr	r3, [r2, #8]
    9a8e:	2b00      	cmp	r3, #0
    9a90:	f000 8085 	beq.w	9b9e <__sfvwrite_r+0x112>
    9a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    9a9c:	460c      	mov	r4, r1
    9a9e:	0719      	lsls	r1, r3, #28
    9aa0:	4680      	mov	r8, r0
    9aa2:	b083      	sub	sp, #12
    9aa4:	4617      	mov	r7, r2
    9aa6:	b298      	uxth	r0, r3
    9aa8:	d525      	bpl.n	9af6 <__sfvwrite_r+0x6a>
    9aaa:	6923      	ldr	r3, [r4, #16]
    9aac:	b31b      	cbz	r3, 9af6 <__sfvwrite_r+0x6a>
    9aae:	f010 0302 	ands.w	r3, r0, #2
    9ab2:	683d      	ldr	r5, [r7, #0]
    9ab4:	d02d      	beq.n	9b12 <__sfvwrite_r+0x86>
    9ab6:	f04f 0a00 	mov.w	sl, #0
    9aba:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 9d7c <__sfvwrite_r+0x2f0>
    9abe:	4656      	mov	r6, sl
    9ac0:	46b9      	mov	r9, r7
    9ac2:	455e      	cmp	r6, fp
    9ac4:	4633      	mov	r3, r6
    9ac6:	4652      	mov	r2, sl
    9ac8:	bf28      	it	cs
    9aca:	465b      	movcs	r3, fp
    9acc:	4640      	mov	r0, r8
    9ace:	2e00      	cmp	r6, #0
    9ad0:	d052      	beq.n	9b78 <__sfvwrite_r+0xec>
    9ad2:	69e1      	ldr	r1, [r4, #28]
    9ad4:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9ad6:	47b8      	blx	r7
    9ad8:	2800      	cmp	r0, #0
    9ada:	dd56      	ble.n	9b8a <__sfvwrite_r+0xfe>
    9adc:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9ae0:	1a1b      	subs	r3, r3, r0
    9ae2:	4482      	add	sl, r0
    9ae4:	1a36      	subs	r6, r6, r0
    9ae6:	f8c9 3008 	str.w	r3, [r9, #8]
    9aea:	2b00      	cmp	r3, #0
    9aec:	d1e9      	bne.n	9ac2 <__sfvwrite_r+0x36>
    9aee:	2000      	movs	r0, #0
    9af0:	b003      	add	sp, #12
    9af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9af6:	4621      	mov	r1, r4
    9af8:	4640      	mov	r0, r8
    9afa:	f000 f941 	bl	9d80 <__swsetup_r>
    9afe:	2800      	cmp	r0, #0
    9b00:	f040 8138 	bne.w	9d74 <__sfvwrite_r+0x2e8>
    9b04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9b08:	683d      	ldr	r5, [r7, #0]
    9b0a:	b298      	uxth	r0, r3
    9b0c:	f010 0302 	ands.w	r3, r0, #2
    9b10:	d1d1      	bne.n	9ab6 <__sfvwrite_r+0x2a>
    9b12:	f010 0901 	ands.w	r9, r0, #1
    9b16:	d144      	bne.n	9ba2 <__sfvwrite_r+0x116>
    9b18:	464e      	mov	r6, r9
    9b1a:	9700      	str	r7, [sp, #0]
    9b1c:	b346      	cbz	r6, 9b70 <__sfvwrite_r+0xe4>
    9b1e:	0582      	lsls	r2, r0, #22
    9b20:	f8d4 b008 	ldr.w	fp, [r4, #8]
    9b24:	f140 8085 	bpl.w	9c32 <__sfvwrite_r+0x1a6>
    9b28:	45b3      	cmp	fp, r6
    9b2a:	465a      	mov	r2, fp
    9b2c:	f200 80b4 	bhi.w	9c98 <__sfvwrite_r+0x20c>
    9b30:	f410 6f90 	tst.w	r0, #1152	; 0x480
    9b34:	f040 80c1 	bne.w	9cba <__sfvwrite_r+0x22e>
    9b38:	6820      	ldr	r0, [r4, #0]
    9b3a:	9201      	str	r2, [sp, #4]
    9b3c:	4649      	mov	r1, r9
    9b3e:	f7fc f9d5 	bl	5eec <memmove>
    9b42:	68a3      	ldr	r3, [r4, #8]
    9b44:	9a01      	ldr	r2, [sp, #4]
    9b46:	eba3 010b 	sub.w	r1, r3, fp
    9b4a:	6823      	ldr	r3, [r4, #0]
    9b4c:	60a1      	str	r1, [r4, #8]
    9b4e:	4413      	add	r3, r2
    9b50:	46b2      	mov	sl, r6
    9b52:	6023      	str	r3, [r4, #0]
    9b54:	2600      	movs	r6, #0
    9b56:	9a00      	ldr	r2, [sp, #0]
    9b58:	6893      	ldr	r3, [r2, #8]
    9b5a:	eba3 030a 	sub.w	r3, r3, sl
    9b5e:	44d1      	add	r9, sl
    9b60:	6093      	str	r3, [r2, #8]
    9b62:	2b00      	cmp	r3, #0
    9b64:	d0c3      	beq.n	9aee <__sfvwrite_r+0x62>
    9b66:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9b6a:	b280      	uxth	r0, r0
    9b6c:	2e00      	cmp	r6, #0
    9b6e:	d1d6      	bne.n	9b1e <__sfvwrite_r+0x92>
    9b70:	e9d5 9600 	ldrd	r9, r6, [r5]
    9b74:	3508      	adds	r5, #8
    9b76:	e7d1      	b.n	9b1c <__sfvwrite_r+0x90>
    9b78:	e9d5 a600 	ldrd	sl, r6, [r5]
    9b7c:	3508      	adds	r5, #8
    9b7e:	e7a0      	b.n	9ac2 <__sfvwrite_r+0x36>
    9b80:	4621      	mov	r1, r4
    9b82:	4640      	mov	r0, r8
    9b84:	f7fd fed2 	bl	792c <_fflush_r>
    9b88:	b388      	cbz	r0, 9bee <__sfvwrite_r+0x162>
    9b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9b92:	f04f 30ff 	mov.w	r0, #4294967295
    9b96:	81a3      	strh	r3, [r4, #12]
    9b98:	b003      	add	sp, #12
    9b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b9e:	2000      	movs	r0, #0
    9ba0:	4770      	bx	lr
    9ba2:	461e      	mov	r6, r3
    9ba4:	46ba      	mov	sl, r7
    9ba6:	4699      	mov	r9, r3
    9ba8:	4618      	mov	r0, r3
    9baa:	9500      	str	r5, [sp, #0]
    9bac:	461f      	mov	r7, r3
    9bae:	b366      	cbz	r6, 9c0a <__sfvwrite_r+0x17e>
    9bb0:	2800      	cmp	r0, #0
    9bb2:	d032      	beq.n	9c1a <__sfvwrite_r+0x18e>
    9bb4:	464a      	mov	r2, r9
    9bb6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    9bba:	6820      	ldr	r0, [r4, #0]
    9bbc:	68a5      	ldr	r5, [r4, #8]
    9bbe:	42b2      	cmp	r2, r6
    9bc0:	bf28      	it	cs
    9bc2:	4632      	movcs	r2, r6
    9bc4:	4288      	cmp	r0, r1
    9bc6:	d904      	bls.n	9bd2 <__sfvwrite_r+0x146>
    9bc8:	eb05 0b03 	add.w	fp, r5, r3
    9bcc:	455a      	cmp	r2, fp
    9bce:	f300 80a7 	bgt.w	9d20 <__sfvwrite_r+0x294>
    9bd2:	4293      	cmp	r3, r2
    9bd4:	dc64      	bgt.n	9ca0 <__sfvwrite_r+0x214>
    9bd6:	69e1      	ldr	r1, [r4, #28]
    9bd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9bda:	463a      	mov	r2, r7
    9bdc:	4640      	mov	r0, r8
    9bde:	47a8      	blx	r5
    9be0:	f1b0 0b00 	subs.w	fp, r0, #0
    9be4:	ddd1      	ble.n	9b8a <__sfvwrite_r+0xfe>
    9be6:	ebb9 090b 	subs.w	r9, r9, fp
    9bea:	d0c9      	beq.n	9b80 <__sfvwrite_r+0xf4>
    9bec:	2001      	movs	r0, #1
    9bee:	f8da 3008 	ldr.w	r3, [sl, #8]
    9bf2:	eba3 030b 	sub.w	r3, r3, fp
    9bf6:	445f      	add	r7, fp
    9bf8:	eba6 060b 	sub.w	r6, r6, fp
    9bfc:	f8ca 3008 	str.w	r3, [sl, #8]
    9c00:	2b00      	cmp	r3, #0
    9c02:	f43f af74 	beq.w	9aee <__sfvwrite_r+0x62>
    9c06:	2e00      	cmp	r6, #0
    9c08:	d1d2      	bne.n	9bb0 <__sfvwrite_r+0x124>
    9c0a:	9a00      	ldr	r2, [sp, #0]
    9c0c:	6856      	ldr	r6, [r2, #4]
    9c0e:	4613      	mov	r3, r2
    9c10:	3208      	adds	r2, #8
    9c12:	9200      	str	r2, [sp, #0]
    9c14:	2e00      	cmp	r6, #0
    9c16:	d0f8      	beq.n	9c0a <__sfvwrite_r+0x17e>
    9c18:	681f      	ldr	r7, [r3, #0]
    9c1a:	4632      	mov	r2, r6
    9c1c:	210a      	movs	r1, #10
    9c1e:	4638      	mov	r0, r7
    9c20:	f7fd fef6 	bl	7a10 <memchr>
    9c24:	2800      	cmp	r0, #0
    9c26:	f000 809c 	beq.w	9d62 <__sfvwrite_r+0x2d6>
    9c2a:	3001      	adds	r0, #1
    9c2c:	eba0 0907 	sub.w	r9, r0, r7
    9c30:	e7c0      	b.n	9bb4 <__sfvwrite_r+0x128>
    9c32:	6820      	ldr	r0, [r4, #0]
    9c34:	6923      	ldr	r3, [r4, #16]
    9c36:	4298      	cmp	r0, r3
    9c38:	d816      	bhi.n	9c68 <__sfvwrite_r+0x1dc>
    9c3a:	6962      	ldr	r2, [r4, #20]
    9c3c:	42b2      	cmp	r2, r6
    9c3e:	d813      	bhi.n	9c68 <__sfvwrite_r+0x1dc>
    9c40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9c44:	42b3      	cmp	r3, r6
    9c46:	bf28      	it	cs
    9c48:	4633      	movcs	r3, r6
    9c4a:	69e1      	ldr	r1, [r4, #28]
    9c4c:	fb93 f3f2 	sdiv	r3, r3, r2
    9c50:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9c52:	fb02 f303 	mul.w	r3, r2, r3
    9c56:	4640      	mov	r0, r8
    9c58:	464a      	mov	r2, r9
    9c5a:	47b8      	blx	r7
    9c5c:	f1b0 0a00 	subs.w	sl, r0, #0
    9c60:	dd93      	ble.n	9b8a <__sfvwrite_r+0xfe>
    9c62:	eba6 060a 	sub.w	r6, r6, sl
    9c66:	e776      	b.n	9b56 <__sfvwrite_r+0xca>
    9c68:	45b3      	cmp	fp, r6
    9c6a:	46da      	mov	sl, fp
    9c6c:	bf28      	it	cs
    9c6e:	46b2      	movcs	sl, r6
    9c70:	4652      	mov	r2, sl
    9c72:	4649      	mov	r1, r9
    9c74:	f7fc f93a 	bl	5eec <memmove>
    9c78:	68a3      	ldr	r3, [r4, #8]
    9c7a:	6822      	ldr	r2, [r4, #0]
    9c7c:	eba3 030a 	sub.w	r3, r3, sl
    9c80:	4452      	add	r2, sl
    9c82:	60a3      	str	r3, [r4, #8]
    9c84:	6022      	str	r2, [r4, #0]
    9c86:	2b00      	cmp	r3, #0
    9c88:	d1eb      	bne.n	9c62 <__sfvwrite_r+0x1d6>
    9c8a:	4621      	mov	r1, r4
    9c8c:	4640      	mov	r0, r8
    9c8e:	f7fd fe4d 	bl	792c <_fflush_r>
    9c92:	2800      	cmp	r0, #0
    9c94:	d0e5      	beq.n	9c62 <__sfvwrite_r+0x1d6>
    9c96:	e778      	b.n	9b8a <__sfvwrite_r+0xfe>
    9c98:	6820      	ldr	r0, [r4, #0]
    9c9a:	46b3      	mov	fp, r6
    9c9c:	4632      	mov	r2, r6
    9c9e:	e74c      	b.n	9b3a <__sfvwrite_r+0xae>
    9ca0:	4639      	mov	r1, r7
    9ca2:	9201      	str	r2, [sp, #4]
    9ca4:	f7fc f922 	bl	5eec <memmove>
    9ca8:	9a01      	ldr	r2, [sp, #4]
    9caa:	68a3      	ldr	r3, [r4, #8]
    9cac:	1a9b      	subs	r3, r3, r2
    9cae:	60a3      	str	r3, [r4, #8]
    9cb0:	6823      	ldr	r3, [r4, #0]
    9cb2:	4413      	add	r3, r2
    9cb4:	6023      	str	r3, [r4, #0]
    9cb6:	4693      	mov	fp, r2
    9cb8:	e795      	b.n	9be6 <__sfvwrite_r+0x15a>
    9cba:	6823      	ldr	r3, [r4, #0]
    9cbc:	6921      	ldr	r1, [r4, #16]
    9cbe:	eba3 0b01 	sub.w	fp, r3, r1
    9cc2:	6963      	ldr	r3, [r4, #20]
    9cc4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    9cc8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    9ccc:	f10b 0301 	add.w	r3, fp, #1
    9cd0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    9cd4:	4433      	add	r3, r6
    9cd6:	4553      	cmp	r3, sl
    9cd8:	4652      	mov	r2, sl
    9cda:	bf84      	itt	hi
    9cdc:	469a      	movhi	sl, r3
    9cde:	4652      	movhi	r2, sl
    9ce0:	0543      	lsls	r3, r0, #21
    9ce2:	d52c      	bpl.n	9d3e <__sfvwrite_r+0x2b2>
    9ce4:	4611      	mov	r1, r2
    9ce6:	4640      	mov	r0, r8
    9ce8:	f7fb fa0e 	bl	5108 <_malloc_r>
    9cec:	2800      	cmp	r0, #0
    9cee:	d03b      	beq.n	9d68 <__sfvwrite_r+0x2dc>
    9cf0:	465a      	mov	r2, fp
    9cf2:	6921      	ldr	r1, [r4, #16]
    9cf4:	9001      	str	r0, [sp, #4]
    9cf6:	f7f9 fc25 	bl	3544 <memcpy>
    9cfa:	89a2      	ldrh	r2, [r4, #12]
    9cfc:	9b01      	ldr	r3, [sp, #4]
    9cfe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    9d02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9d06:	81a2      	strh	r2, [r4, #12]
    9d08:	eb03 000b 	add.w	r0, r3, fp
    9d0c:	6123      	str	r3, [r4, #16]
    9d0e:	ebaa 030b 	sub.w	r3, sl, fp
    9d12:	f8c4 a014 	str.w	sl, [r4, #20]
    9d16:	60a3      	str	r3, [r4, #8]
    9d18:	6020      	str	r0, [r4, #0]
    9d1a:	46b3      	mov	fp, r6
    9d1c:	4632      	mov	r2, r6
    9d1e:	e70c      	b.n	9b3a <__sfvwrite_r+0xae>
    9d20:	4639      	mov	r1, r7
    9d22:	465a      	mov	r2, fp
    9d24:	f7fc f8e2 	bl	5eec <memmove>
    9d28:	6823      	ldr	r3, [r4, #0]
    9d2a:	445b      	add	r3, fp
    9d2c:	6023      	str	r3, [r4, #0]
    9d2e:	4621      	mov	r1, r4
    9d30:	4640      	mov	r0, r8
    9d32:	f7fd fdfb 	bl	792c <_fflush_r>
    9d36:	2800      	cmp	r0, #0
    9d38:	f43f af55 	beq.w	9be6 <__sfvwrite_r+0x15a>
    9d3c:	e725      	b.n	9b8a <__sfvwrite_r+0xfe>
    9d3e:	4640      	mov	r0, r8
    9d40:	f7fb fcaa 	bl	5698 <_realloc_r>
    9d44:	4603      	mov	r3, r0
    9d46:	2800      	cmp	r0, #0
    9d48:	d1de      	bne.n	9d08 <__sfvwrite_r+0x27c>
    9d4a:	6921      	ldr	r1, [r4, #16]
    9d4c:	4640      	mov	r0, r8
    9d4e:	f7fc ffb9 	bl	6cc4 <_free_r>
    9d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d56:	220c      	movs	r2, #12
    9d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9d5c:	f8c8 2000 	str.w	r2, [r8]
    9d60:	e715      	b.n	9b8e <__sfvwrite_r+0x102>
    9d62:	1c72      	adds	r2, r6, #1
    9d64:	4691      	mov	r9, r2
    9d66:	e726      	b.n	9bb6 <__sfvwrite_r+0x12a>
    9d68:	220c      	movs	r2, #12
    9d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d6e:	f8c8 2000 	str.w	r2, [r8]
    9d72:	e70c      	b.n	9b8e <__sfvwrite_r+0x102>
    9d74:	f04f 30ff 	mov.w	r0, #4294967295
    9d78:	e6ba      	b.n	9af0 <__sfvwrite_r+0x64>
    9d7a:	bf00      	nop
    9d7c:	7ffffc00 	.word	0x7ffffc00

00009d80 <__swsetup_r>:
    9d80:	b538      	push	{r3, r4, r5, lr}
    9d82:	4b31      	ldr	r3, [pc, #196]	; (9e48 <__swsetup_r+0xc8>)
    9d84:	681b      	ldr	r3, [r3, #0]
    9d86:	4605      	mov	r5, r0
    9d88:	460c      	mov	r4, r1
    9d8a:	b113      	cbz	r3, 9d92 <__swsetup_r+0x12>
    9d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9d8e:	2a00      	cmp	r2, #0
    9d90:	d04e      	beq.n	9e30 <__swsetup_r+0xb0>
    9d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d96:	0718      	lsls	r0, r3, #28
    9d98:	b29a      	uxth	r2, r3
    9d9a:	d51c      	bpl.n	9dd6 <__swsetup_r+0x56>
    9d9c:	6921      	ldr	r1, [r4, #16]
    9d9e:	b329      	cbz	r1, 9dec <__swsetup_r+0x6c>
    9da0:	f012 0001 	ands.w	r0, r2, #1
    9da4:	d007      	beq.n	9db6 <__swsetup_r+0x36>
    9da6:	2000      	movs	r0, #0
    9da8:	60a0      	str	r0, [r4, #8]
    9daa:	6960      	ldr	r0, [r4, #20]
    9dac:	4240      	negs	r0, r0
    9dae:	61a0      	str	r0, [r4, #24]
    9db0:	b139      	cbz	r1, 9dc2 <__swsetup_r+0x42>
    9db2:	2000      	movs	r0, #0
    9db4:	bd38      	pop	{r3, r4, r5, pc}
    9db6:	0795      	lsls	r5, r2, #30
    9db8:	bf58      	it	pl
    9dba:	6960      	ldrpl	r0, [r4, #20]
    9dbc:	60a0      	str	r0, [r4, #8]
    9dbe:	2900      	cmp	r1, #0
    9dc0:	d1f7      	bne.n	9db2 <__swsetup_r+0x32>
    9dc2:	0612      	lsls	r2, r2, #24
    9dc4:	bf58      	it	pl
    9dc6:	4608      	movpl	r0, r1
    9dc8:	d5f4      	bpl.n	9db4 <__swsetup_r+0x34>
    9dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9dce:	81a3      	strh	r3, [r4, #12]
    9dd0:	f04f 30ff 	mov.w	r0, #4294967295
    9dd4:	bd38      	pop	{r3, r4, r5, pc}
    9dd6:	06d1      	lsls	r1, r2, #27
    9dd8:	d52e      	bpl.n	9e38 <__swsetup_r+0xb8>
    9dda:	0752      	lsls	r2, r2, #29
    9ddc:	d414      	bmi.n	9e08 <__swsetup_r+0x88>
    9dde:	6921      	ldr	r1, [r4, #16]
    9de0:	f043 0308 	orr.w	r3, r3, #8
    9de4:	81a3      	strh	r3, [r4, #12]
    9de6:	b29a      	uxth	r2, r3
    9de8:	2900      	cmp	r1, #0
    9dea:	d1d9      	bne.n	9da0 <__swsetup_r+0x20>
    9dec:	f402 7020 	and.w	r0, r2, #640	; 0x280
    9df0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    9df4:	d0d4      	beq.n	9da0 <__swsetup_r+0x20>
    9df6:	4621      	mov	r1, r4
    9df8:	4628      	mov	r0, r5
    9dfa:	f000 f947 	bl	a08c <__smakebuf_r>
    9dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e02:	6921      	ldr	r1, [r4, #16]
    9e04:	b29a      	uxth	r2, r3
    9e06:	e7cb      	b.n	9da0 <__swsetup_r+0x20>
    9e08:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9e0a:	b151      	cbz	r1, 9e22 <__swsetup_r+0xa2>
    9e0c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9e10:	4291      	cmp	r1, r2
    9e12:	d004      	beq.n	9e1e <__swsetup_r+0x9e>
    9e14:	4628      	mov	r0, r5
    9e16:	f7fc ff55 	bl	6cc4 <_free_r>
    9e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e1e:	2200      	movs	r2, #0
    9e20:	6322      	str	r2, [r4, #48]	; 0x30
    9e22:	6921      	ldr	r1, [r4, #16]
    9e24:	2200      	movs	r2, #0
    9e26:	e9c4 1200 	strd	r1, r2, [r4]
    9e2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    9e2e:	e7d7      	b.n	9de0 <__swsetup_r+0x60>
    9e30:	4618      	mov	r0, r3
    9e32:	f7fb ffc7 	bl	5dc4 <__sinit>
    9e36:	e7ac      	b.n	9d92 <__swsetup_r+0x12>
    9e38:	2209      	movs	r2, #9
    9e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e3e:	602a      	str	r2, [r5, #0]
    9e40:	f04f 30ff 	mov.w	r0, #4294967295
    9e44:	81a3      	strh	r3, [r4, #12]
    9e46:	bd38      	pop	{r3, r4, r5, pc}
    9e48:	20001740 	.word	0x20001740

00009e4c <__fputwc>:
    9e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e50:	b082      	sub	sp, #8
    9e52:	4682      	mov	sl, r0
    9e54:	4688      	mov	r8, r1
    9e56:	4614      	mov	r4, r2
    9e58:	f7fc fbc2 	bl	65e0 <__locale_mb_cur_max>
    9e5c:	2801      	cmp	r0, #1
    9e5e:	d103      	bne.n	9e68 <__fputwc+0x1c>
    9e60:	f108 33ff 	add.w	r3, r8, #4294967295
    9e64:	2bfe      	cmp	r3, #254	; 0xfe
    9e66:	d936      	bls.n	9ed6 <__fputwc+0x8a>
    9e68:	f10d 0904 	add.w	r9, sp, #4
    9e6c:	4642      	mov	r2, r8
    9e6e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    9e72:	4649      	mov	r1, r9
    9e74:	4650      	mov	r0, sl
    9e76:	f7fe fd81 	bl	897c <_wcrtomb_r>
    9e7a:	1c42      	adds	r2, r0, #1
    9e7c:	4606      	mov	r6, r0
    9e7e:	d032      	beq.n	9ee6 <__fputwc+0x9a>
    9e80:	b320      	cbz	r0, 9ecc <__fputwc+0x80>
    9e82:	f89d c004 	ldrb.w	ip, [sp, #4]
    9e86:	2500      	movs	r5, #0
    9e88:	e009      	b.n	9e9e <__fputwc+0x52>
    9e8a:	6823      	ldr	r3, [r4, #0]
    9e8c:	1c5a      	adds	r2, r3, #1
    9e8e:	6022      	str	r2, [r4, #0]
    9e90:	f883 c000 	strb.w	ip, [r3]
    9e94:	3501      	adds	r5, #1
    9e96:	42b5      	cmp	r5, r6
    9e98:	d218      	bcs.n	9ecc <__fputwc+0x80>
    9e9a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    9e9e:	68a3      	ldr	r3, [r4, #8]
    9ea0:	3b01      	subs	r3, #1
    9ea2:	2b00      	cmp	r3, #0
    9ea4:	60a3      	str	r3, [r4, #8]
    9ea6:	daf0      	bge.n	9e8a <__fputwc+0x3e>
    9ea8:	69a7      	ldr	r7, [r4, #24]
    9eaa:	42bb      	cmp	r3, r7
    9eac:	4661      	mov	r1, ip
    9eae:	4622      	mov	r2, r4
    9eb0:	4650      	mov	r0, sl
    9eb2:	db02      	blt.n	9eba <__fputwc+0x6e>
    9eb4:	f1bc 0f0a 	cmp.w	ip, #10
    9eb8:	d1e7      	bne.n	9e8a <__fputwc+0x3e>
    9eba:	f000 f953 	bl	a164 <__swbuf_r>
    9ebe:	1c43      	adds	r3, r0, #1
    9ec0:	d1e8      	bne.n	9e94 <__fputwc+0x48>
    9ec2:	4606      	mov	r6, r0
    9ec4:	4630      	mov	r0, r6
    9ec6:	b002      	add	sp, #8
    9ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ecc:	4646      	mov	r6, r8
    9ece:	4630      	mov	r0, r6
    9ed0:	b002      	add	sp, #8
    9ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ed6:	fa5f fc88 	uxtb.w	ip, r8
    9eda:	f88d c004 	strb.w	ip, [sp, #4]
    9ede:	4606      	mov	r6, r0
    9ee0:	f10d 0904 	add.w	r9, sp, #4
    9ee4:	e7cf      	b.n	9e86 <__fputwc+0x3a>
    9ee6:	89a3      	ldrh	r3, [r4, #12]
    9ee8:	4630      	mov	r0, r6
    9eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9eee:	81a3      	strh	r3, [r4, #12]
    9ef0:	b002      	add	sp, #8
    9ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ef6:	bf00      	nop

00009ef8 <_fputwc_r>:
    9ef8:	b530      	push	{r4, r5, lr}
    9efa:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9efc:	f013 0f01 	tst.w	r3, #1
    9f00:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9f04:	4614      	mov	r4, r2
    9f06:	b083      	sub	sp, #12
    9f08:	4605      	mov	r5, r0
    9f0a:	b29a      	uxth	r2, r3
    9f0c:	d101      	bne.n	9f12 <_fputwc_r+0x1a>
    9f0e:	0598      	lsls	r0, r3, #22
    9f10:	d51c      	bpl.n	9f4c <_fputwc_r+0x54>
    9f12:	0490      	lsls	r0, r2, #18
    9f14:	d406      	bmi.n	9f24 <_fputwc_r+0x2c>
    9f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9f20:	81a3      	strh	r3, [r4, #12]
    9f22:	6662      	str	r2, [r4, #100]	; 0x64
    9f24:	4622      	mov	r2, r4
    9f26:	4628      	mov	r0, r5
    9f28:	f7ff ff90 	bl	9e4c <__fputwc>
    9f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f2e:	07da      	lsls	r2, r3, #31
    9f30:	4605      	mov	r5, r0
    9f32:	d402      	bmi.n	9f3a <_fputwc_r+0x42>
    9f34:	89a3      	ldrh	r3, [r4, #12]
    9f36:	059b      	lsls	r3, r3, #22
    9f38:	d502      	bpl.n	9f40 <_fputwc_r+0x48>
    9f3a:	4628      	mov	r0, r5
    9f3c:	b003      	add	sp, #12
    9f3e:	bd30      	pop	{r4, r5, pc}
    9f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f42:	f7fc fbe9 	bl	6718 <__retarget_lock_release_recursive>
    9f46:	4628      	mov	r0, r5
    9f48:	b003      	add	sp, #12
    9f4a:	bd30      	pop	{r4, r5, pc}
    9f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f4e:	9101      	str	r1, [sp, #4]
    9f50:	f7fc fbe0 	bl	6714 <__retarget_lock_acquire_recursive>
    9f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9f58:	9901      	ldr	r1, [sp, #4]
    9f5a:	b29a      	uxth	r2, r3
    9f5c:	e7d9      	b.n	9f12 <_fputwc_r+0x1a>
    9f5e:	bf00      	nop

00009f60 <_wcsnrtombs_l>:
    9f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f64:	b08b      	sub	sp, #44	; 0x2c
    9f66:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9f6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9f6c:	9103      	str	r1, [sp, #12]
    9f6e:	4681      	mov	r9, r0
    9f70:	9205      	str	r2, [sp, #20]
    9f72:	461e      	mov	r6, r3
    9f74:	f1b8 0f00 	cmp.w	r8, #0
    9f78:	d05c      	beq.n	a034 <_wcsnrtombs_l+0xd4>
    9f7a:	9b03      	ldr	r3, [sp, #12]
    9f7c:	2b00      	cmp	r3, #0
    9f7e:	d05e      	beq.n	a03e <_wcsnrtombs_l+0xde>
    9f80:	9b05      	ldr	r3, [sp, #20]
    9f82:	681d      	ldr	r5, [r3, #0]
    9f84:	2f00      	cmp	r7, #0
    9f86:	d06a      	beq.n	a05e <_wcsnrtombs_l+0xfe>
    9f88:	1e74      	subs	r4, r6, #1
    9f8a:	b34e      	cbz	r6, 9fe0 <_wcsnrtombs_l+0x80>
    9f8c:	9b03      	ldr	r3, [sp, #12]
    9f8e:	9304      	str	r3, [sp, #16]
    9f90:	3d04      	subs	r5, #4
    9f92:	2600      	movs	r6, #0
    9f94:	9501      	str	r5, [sp, #4]
    9f96:	e00b      	b.n	9fb0 <_wcsnrtombs_l+0x50>
    9f98:	9b03      	ldr	r3, [sp, #12]
    9f9a:	bb2b      	cbnz	r3, 9fe8 <_wcsnrtombs_l+0x88>
    9f9c:	9b01      	ldr	r3, [sp, #4]
    9f9e:	681a      	ldr	r2, [r3, #0]
    9fa0:	2a00      	cmp	r2, #0
    9fa2:	d03a      	beq.n	a01a <_wcsnrtombs_l+0xba>
    9fa4:	45bc      	cmp	ip, r7
    9fa6:	d25c      	bcs.n	a062 <_wcsnrtombs_l+0x102>
    9fa8:	3c01      	subs	r4, #1
    9faa:	1c63      	adds	r3, r4, #1
    9fac:	4666      	mov	r6, ip
    9fae:	d017      	beq.n	9fe0 <_wcsnrtombs_l+0x80>
    9fb0:	f8d8 3000 	ldr.w	r3, [r8]
    9fb4:	9302      	str	r3, [sp, #8]
    9fb6:	9b01      	ldr	r3, [sp, #4]
    9fb8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9fbc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9fc0:	9301      	str	r3, [sp, #4]
    9fc2:	a907      	add	r1, sp, #28
    9fc4:	4643      	mov	r3, r8
    9fc6:	4648      	mov	r0, r9
    9fc8:	f8d8 b004 	ldr.w	fp, [r8, #4]
    9fcc:	47a8      	blx	r5
    9fce:	1c42      	adds	r2, r0, #1
    9fd0:	d03a      	beq.n	a048 <_wcsnrtombs_l+0xe8>
    9fd2:	eb00 0c06 	add.w	ip, r0, r6
    9fd6:	45bc      	cmp	ip, r7
    9fd8:	d9de      	bls.n	9f98 <_wcsnrtombs_l+0x38>
    9fda:	9b02      	ldr	r3, [sp, #8]
    9fdc:	e9c8 3b00 	strd	r3, fp, [r8]
    9fe0:	4630      	mov	r0, r6
    9fe2:	b00b      	add	sp, #44	; 0x2c
    9fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe8:	2800      	cmp	r0, #0
    9fea:	dd0e      	ble.n	a00a <_wcsnrtombs_l+0xaa>
    9fec:	9b04      	ldr	r3, [sp, #16]
    9fee:	9d01      	ldr	r5, [sp, #4]
    9ff0:	4418      	add	r0, r3
    9ff2:	1e5a      	subs	r2, r3, #1
    9ff4:	a907      	add	r1, sp, #28
    9ff6:	f100 3eff 	add.w	lr, r0, #4294967295
    9ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
    9ffe:	f802 3f01 	strb.w	r3, [r2, #1]!
    a002:	4572      	cmp	r2, lr
    a004:	d1f9      	bne.n	9ffa <_wcsnrtombs_l+0x9a>
    a006:	9501      	str	r5, [sp, #4]
    a008:	9004      	str	r0, [sp, #16]
    a00a:	9b05      	ldr	r3, [sp, #20]
    a00c:	681a      	ldr	r2, [r3, #0]
    a00e:	3204      	adds	r2, #4
    a010:	601a      	str	r2, [r3, #0]
    a012:	9b01      	ldr	r3, [sp, #4]
    a014:	681a      	ldr	r2, [r3, #0]
    a016:	2a00      	cmp	r2, #0
    a018:	d1c4      	bne.n	9fa4 <_wcsnrtombs_l+0x44>
    a01a:	9b03      	ldr	r3, [sp, #12]
    a01c:	b10b      	cbz	r3, a022 <_wcsnrtombs_l+0xc2>
    a01e:	9b05      	ldr	r3, [sp, #20]
    a020:	601a      	str	r2, [r3, #0]
    a022:	f10c 36ff 	add.w	r6, ip, #4294967295
    a026:	2200      	movs	r2, #0
    a028:	4630      	mov	r0, r6
    a02a:	f8c8 2000 	str.w	r2, [r8]
    a02e:	b00b      	add	sp, #44	; 0x2c
    a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a034:	9b03      	ldr	r3, [sp, #12]
    a036:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    a03a:	2b00      	cmp	r3, #0
    a03c:	d1a0      	bne.n	9f80 <_wcsnrtombs_l+0x20>
    a03e:	9b05      	ldr	r3, [sp, #20]
    a040:	f04f 37ff 	mov.w	r7, #4294967295
    a044:	681d      	ldr	r5, [r3, #0]
    a046:	e79f      	b.n	9f88 <_wcsnrtombs_l+0x28>
    a048:	4606      	mov	r6, r0
    a04a:	218a      	movs	r1, #138	; 0x8a
    a04c:	2200      	movs	r2, #0
    a04e:	4630      	mov	r0, r6
    a050:	f8c9 1000 	str.w	r1, [r9]
    a054:	f8c8 2000 	str.w	r2, [r8]
    a058:	b00b      	add	sp, #44	; 0x2c
    a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a05e:	463e      	mov	r6, r7
    a060:	e7be      	b.n	9fe0 <_wcsnrtombs_l+0x80>
    a062:	4666      	mov	r6, ip
    a064:	e7bc      	b.n	9fe0 <_wcsnrtombs_l+0x80>
    a066:	bf00      	nop

0000a068 <_wcsnrtombs_r>:
    a068:	b510      	push	{r4, lr}
    a06a:	b084      	sub	sp, #16
    a06c:	4c05      	ldr	r4, [pc, #20]	; (a084 <_wcsnrtombs_r+0x1c>)
    a06e:	9806      	ldr	r0, [sp, #24]
    a070:	9000      	str	r0, [sp, #0]
    a072:	9807      	ldr	r0, [sp, #28]
    a074:	9001      	str	r0, [sp, #4]
    a076:	4804      	ldr	r0, [pc, #16]	; (a088 <_wcsnrtombs_r+0x20>)
    a078:	6800      	ldr	r0, [r0, #0]
    a07a:	9402      	str	r4, [sp, #8]
    a07c:	f7ff ff70 	bl	9f60 <_wcsnrtombs_l>
    a080:	b004      	add	sp, #16
    a082:	bd10      	pop	{r4, pc}
    a084:	200011b8 	.word	0x200011b8
    a088:	20001740 	.word	0x20001740

0000a08c <__smakebuf_r>:
    a08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a090:	898b      	ldrh	r3, [r1, #12]
    a092:	460c      	mov	r4, r1
    a094:	0799      	lsls	r1, r3, #30
    a096:	b096      	sub	sp, #88	; 0x58
    a098:	d508      	bpl.n	a0ac <__smakebuf_r+0x20>
    a09a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    a09e:	2201      	movs	r2, #1
    a0a0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    a0a4:	6023      	str	r3, [r4, #0]
    a0a6:	b016      	add	sp, #88	; 0x58
    a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a0b0:	2900      	cmp	r1, #0
    a0b2:	4606      	mov	r6, r0
    a0b4:	db25      	blt.n	a102 <__smakebuf_r+0x76>
    a0b6:	466a      	mov	r2, sp
    a0b8:	f000 f8ac 	bl	a214 <_fstat_r>
    a0bc:	2800      	cmp	r0, #0
    a0be:	db1f      	blt.n	a100 <__smakebuf_r+0x74>
    a0c0:	9d01      	ldr	r5, [sp, #4]
    a0c2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    a0c6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    a0ca:	fab5 f585 	clz	r5, r5
    a0ce:	f44f 6880 	mov.w	r8, #1024	; 0x400
    a0d2:	096d      	lsrs	r5, r5, #5
    a0d4:	f44f 6700 	mov.w	r7, #2048	; 0x800
    a0d8:	4641      	mov	r1, r8
    a0da:	4630      	mov	r0, r6
    a0dc:	f7fb f814 	bl	5108 <_malloc_r>
    a0e0:	b1e0      	cbz	r0, a11c <__smakebuf_r+0x90>
    a0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a0e6:	f8c4 8014 	str.w	r8, [r4, #20]
    a0ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a0ee:	6020      	str	r0, [r4, #0]
    a0f0:	6120      	str	r0, [r4, #16]
    a0f2:	81a3      	strh	r3, [r4, #12]
    a0f4:	bb35      	cbnz	r5, a144 <__smakebuf_r+0xb8>
    a0f6:	433b      	orrs	r3, r7
    a0f8:	81a3      	strh	r3, [r4, #12]
    a0fa:	b016      	add	sp, #88	; 0x58
    a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a100:	89a3      	ldrh	r3, [r4, #12]
    a102:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    a106:	d019      	beq.n	a13c <__smakebuf_r+0xb0>
    a108:	f04f 0840 	mov.w	r8, #64	; 0x40
    a10c:	2500      	movs	r5, #0
    a10e:	4641      	mov	r1, r8
    a110:	4630      	mov	r0, r6
    a112:	462f      	mov	r7, r5
    a114:	f7fa fff8 	bl	5108 <_malloc_r>
    a118:	2800      	cmp	r0, #0
    a11a:	d1e2      	bne.n	a0e2 <__smakebuf_r+0x56>
    a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a120:	059a      	lsls	r2, r3, #22
    a122:	d4c0      	bmi.n	a0a6 <__smakebuf_r+0x1a>
    a124:	f023 0303 	bic.w	r3, r3, #3
    a128:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a12c:	f043 0302 	orr.w	r3, r3, #2
    a130:	2101      	movs	r1, #1
    a132:	e9c4 2104 	strd	r2, r1, [r4, #16]
    a136:	81a3      	strh	r3, [r4, #12]
    a138:	6022      	str	r2, [r4, #0]
    a13a:	e7b4      	b.n	a0a6 <__smakebuf_r+0x1a>
    a13c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    a140:	462f      	mov	r7, r5
    a142:	e7c9      	b.n	a0d8 <__smakebuf_r+0x4c>
    a144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a148:	4630      	mov	r0, r6
    a14a:	f000 f879 	bl	a240 <_isatty_r>
    a14e:	b910      	cbnz	r0, a156 <__smakebuf_r+0xca>
    a150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a154:	e7cf      	b.n	a0f6 <__smakebuf_r+0x6a>
    a156:	89a3      	ldrh	r3, [r4, #12]
    a158:	f023 0303 	bic.w	r3, r3, #3
    a15c:	f043 0301 	orr.w	r3, r3, #1
    a160:	b21b      	sxth	r3, r3
    a162:	e7c8      	b.n	a0f6 <__smakebuf_r+0x6a>

0000a164 <__swbuf_r>:
    a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a166:	460d      	mov	r5, r1
    a168:	4614      	mov	r4, r2
    a16a:	4606      	mov	r6, r0
    a16c:	b110      	cbz	r0, a174 <__swbuf_r+0x10>
    a16e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a170:	2b00      	cmp	r3, #0
    a172:	d04c      	beq.n	a20e <__swbuf_r+0xaa>
    a174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a178:	69a3      	ldr	r3, [r4, #24]
    a17a:	60a3      	str	r3, [r4, #8]
    a17c:	0717      	lsls	r7, r2, #28
    a17e:	b290      	uxth	r0, r2
    a180:	d51b      	bpl.n	a1ba <__swbuf_r+0x56>
    a182:	6923      	ldr	r3, [r4, #16]
    a184:	b1cb      	cbz	r3, a1ba <__swbuf_r+0x56>
    a186:	b2ed      	uxtb	r5, r5
    a188:	0481      	lsls	r1, r0, #18
    a18a:	462f      	mov	r7, r5
    a18c:	d522      	bpl.n	a1d4 <__swbuf_r+0x70>
    a18e:	6822      	ldr	r2, [r4, #0]
    a190:	6961      	ldr	r1, [r4, #20]
    a192:	1ad3      	subs	r3, r2, r3
    a194:	4299      	cmp	r1, r3
    a196:	dd29      	ble.n	a1ec <__swbuf_r+0x88>
    a198:	3301      	adds	r3, #1
    a19a:	68a1      	ldr	r1, [r4, #8]
    a19c:	3901      	subs	r1, #1
    a19e:	60a1      	str	r1, [r4, #8]
    a1a0:	1c51      	adds	r1, r2, #1
    a1a2:	6021      	str	r1, [r4, #0]
    a1a4:	7015      	strb	r5, [r2, #0]
    a1a6:	6962      	ldr	r2, [r4, #20]
    a1a8:	429a      	cmp	r2, r3
    a1aa:	d027      	beq.n	a1fc <__swbuf_r+0x98>
    a1ac:	89a3      	ldrh	r3, [r4, #12]
    a1ae:	07db      	lsls	r3, r3, #31
    a1b0:	d501      	bpl.n	a1b6 <__swbuf_r+0x52>
    a1b2:	2d0a      	cmp	r5, #10
    a1b4:	d022      	beq.n	a1fc <__swbuf_r+0x98>
    a1b6:	4638      	mov	r0, r7
    a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ba:	4621      	mov	r1, r4
    a1bc:	4630      	mov	r0, r6
    a1be:	f7ff fddf 	bl	9d80 <__swsetup_r>
    a1c2:	bb08      	cbnz	r0, a208 <__swbuf_r+0xa4>
    a1c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a1c8:	6923      	ldr	r3, [r4, #16]
    a1ca:	b290      	uxth	r0, r2
    a1cc:	b2ed      	uxtb	r5, r5
    a1ce:	0481      	lsls	r1, r0, #18
    a1d0:	462f      	mov	r7, r5
    a1d2:	d4dc      	bmi.n	a18e <__swbuf_r+0x2a>
    a1d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a1d8:	81a2      	strh	r2, [r4, #12]
    a1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a1dc:	6961      	ldr	r1, [r4, #20]
    a1de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    a1e2:	6662      	str	r2, [r4, #100]	; 0x64
    a1e4:	6822      	ldr	r2, [r4, #0]
    a1e6:	1ad3      	subs	r3, r2, r3
    a1e8:	4299      	cmp	r1, r3
    a1ea:	dcd5      	bgt.n	a198 <__swbuf_r+0x34>
    a1ec:	4621      	mov	r1, r4
    a1ee:	4630      	mov	r0, r6
    a1f0:	f7fd fb9c 	bl	792c <_fflush_r>
    a1f4:	b940      	cbnz	r0, a208 <__swbuf_r+0xa4>
    a1f6:	6822      	ldr	r2, [r4, #0]
    a1f8:	2301      	movs	r3, #1
    a1fa:	e7ce      	b.n	a19a <__swbuf_r+0x36>
    a1fc:	4621      	mov	r1, r4
    a1fe:	4630      	mov	r0, r6
    a200:	f7fd fb94 	bl	792c <_fflush_r>
    a204:	2800      	cmp	r0, #0
    a206:	d0d6      	beq.n	a1b6 <__swbuf_r+0x52>
    a208:	f04f 37ff 	mov.w	r7, #4294967295
    a20c:	e7d3      	b.n	a1b6 <__swbuf_r+0x52>
    a20e:	f7fb fdd9 	bl	5dc4 <__sinit>
    a212:	e7af      	b.n	a174 <__swbuf_r+0x10>

0000a214 <_fstat_r>:
    a214:	b570      	push	{r4, r5, r6, lr}
    a216:	460c      	mov	r4, r1
    a218:	4d08      	ldr	r5, [pc, #32]	; (a23c <_fstat_r+0x28>)
    a21a:	4603      	mov	r3, r0
    a21c:	2600      	movs	r6, #0
    a21e:	4620      	mov	r0, r4
    a220:	4611      	mov	r1, r2
    a222:	461c      	mov	r4, r3
    a224:	602e      	str	r6, [r5, #0]
    a226:	f7f9 fdbb 	bl	3da0 <_fstat>
    a22a:	1c43      	adds	r3, r0, #1
    a22c:	d000      	beq.n	a230 <_fstat_r+0x1c>
    a22e:	bd70      	pop	{r4, r5, r6, pc}
    a230:	682b      	ldr	r3, [r5, #0]
    a232:	2b00      	cmp	r3, #0
    a234:	d0fb      	beq.n	a22e <_fstat_r+0x1a>
    a236:	6023      	str	r3, [r4, #0]
    a238:	bd70      	pop	{r4, r5, r6, pc}
    a23a:	bf00      	nop
    a23c:	20002ae4 	.word	0x20002ae4

0000a240 <_isatty_r>:
    a240:	b538      	push	{r3, r4, r5, lr}
    a242:	4d07      	ldr	r5, [pc, #28]	; (a260 <_isatty_r+0x20>)
    a244:	2200      	movs	r2, #0
    a246:	4604      	mov	r4, r0
    a248:	4608      	mov	r0, r1
    a24a:	602a      	str	r2, [r5, #0]
    a24c:	f7f9 fdae 	bl	3dac <_isatty>
    a250:	1c43      	adds	r3, r0, #1
    a252:	d000      	beq.n	a256 <_isatty_r+0x16>
    a254:	bd38      	pop	{r3, r4, r5, pc}
    a256:	682b      	ldr	r3, [r5, #0]
    a258:	2b00      	cmp	r3, #0
    a25a:	d0fb      	beq.n	a254 <_isatty_r+0x14>
    a25c:	6023      	str	r3, [r4, #0]
    a25e:	bd38      	pop	{r3, r4, r5, pc}
    a260:	20002ae4 	.word	0x20002ae4
    a264:	00000000 	.word	0x00000000

0000a268 <___reboot_Teensyduino__veneer>:
    a268:	f85f f000 	ldr.w	pc, [pc]	; a26c <___reboot_Teensyduino__veneer+0x4>
    a26c:	60001ed1 	.word	0x60001ed1

0000a270 <___init_veneer>:
    a270:	f85f f000 	ldr.w	pc, [pc]	; a274 <___init_veneer+0x4>
    a274:	60001f79 	.word	0x60001f79

0000a278 <___ZN7TwoWire5beginEv_veneer>:
    a278:	f85f f000 	ldr.w	pc, [pc]	; a27c <___ZN7TwoWire5beginEv_veneer+0x4>
    a27c:	60001769 	.word	0x60001769

Disassembly of section .fini:

0000a280 <_fini>:
    a280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a282:	bf00      	nop
