
C:\Users\Kent4\Projects\Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f9d0 	bl	600017d0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f97c 	bl	600017e0 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fb9e 	bl	60001c5c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fd41 	bl	60001fb8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f9ac 	bl	600018d8 <configure_external_ram>
	analog_init();
60001580:	f000 fcd0 	bl	60001f24 <analog_init>
	pwm_init();
60001584:	f000 fd10 	bl	60001fa8 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fb96 	bl	60001cb8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f922 	bl	600017d4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fc27 	bl	60001de8 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f91b 	bl	600017dc <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f917 	bl	600017d8 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fced 	bl	60001f88 <____libc_init_array_veneer>
	main();
600015ae:	f000 fcf3 	bl	60001f98 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000a2c8 	.word	0x0000a2c8
600015c0:	600021fc 	.word	0x600021fc
600015c4:	00000000 	.word	0x00000000
600015c8:	20001ac0 	.word	0x20001ac0
600015cc:	6000c4c8 	.word	0x6000c4c8
600015d0:	20000000 	.word	0x20000000
600015d4:	20003620 	.word	0x20003620
600015d8:	20001ac0 	.word	0x20001ac0
600015dc:	20001800 	.word	0x20001800
600015e0:	00003c09 	.word	0x00003c09
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000020f5 	.word	0x000020f5
600015f4:	200035b8 	.word	0x200035b8
600015f8:	000020f9 	.word	0x000020f9
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	200035bc 	.word	0x200035bc
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001654:	6943      	ldr	r3, [r0, #20]
60001656:	4a0a      	ldr	r2, [pc, #40]	; (60001680 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001658:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000165c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165e:	7a03      	ldrb	r3, [r0, #8]
60001660:	4c08      	ldr	r4, [pc, #32]	; (60001684 <TwoWire::configSDApin(unsigned char)+0x30>)
60001662:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001666:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000166c:	68c2      	ldr	r2, [r0, #12]
6000166e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001670:	6903      	ldr	r3, [r0, #16]
60001672:	b10b      	cbz	r3, 60001678 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001674:	6942      	ldr	r2, [r0, #20]
60001676:	601a      	str	r2, [r3, #0]
	}
}
60001678:	f85d 4b04 	ldr.w	r4, [sp], #4
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop
60001680:	200008d4 	.word	0x200008d4
60001684:	0001f861 	.word	0x0001f861

60001688 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	7e02      	ldrb	r2, [r0, #24]
6000168c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001690:	f892 c008 	ldrb.w	ip, [r2, #8]
60001694:	458c      	cmp	ip, r1
60001696:	d01c      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001698:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000169a:	2aff      	cmp	r2, #255	; 0xff
6000169c:	d019      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000169e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016a0:	b510      	push	{r4, lr}
600016a2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016a4:	d016      	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016a6:	7e1a      	ldrb	r2, [r3, #24]
600016a8:	2aff      	cmp	r2, #255	; 0xff
600016aa:	d006      	beq.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016ac:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
600016b2:	6812      	ldr	r2, [r2, #0]
600016b4:	421a      	tst	r2, r3
600016b6:	d101      	bne.n	600016bc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016b8:	7621      	strb	r1, [r4, #24]
}
600016ba:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016bc:	4b06      	ldr	r3, [pc, #24]	; (600016d8 <TwoWire::setSDA(unsigned char)+0x50>)
600016be:	2205      	movs	r2, #5
		configSDApin(newindex);
600016c0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016c6:	685b      	ldr	r3, [r3, #4]
600016c8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ca:	f7ff ffc3 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ce:	7621      	strb	r1, [r4, #24]
600016d0:	e7f3      	b.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016d2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016d4:	2100      	movs	r1, #0
600016d6:	e7ea      	b.n	600016ae <TwoWire::setSDA(unsigned char)+0x26>
600016d8:	200008d4 	.word	0x200008d4

600016dc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	4a0a      	ldr	r2, [pc, #40]	; (60001708 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e0:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e4:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
600016ea:	4c08      	ldr	r4, [pc, #32]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x30>)
600016ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f0:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
600016f8:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
600016fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
600016fc:	b10b      	cbz	r3, 60001702 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
600016fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001700:	601a      	str	r2, [r3, #0]
	}
}
60001702:	f85d 4b04 	ldr.w	r4, [sp], #4
60001706:	4770      	bx	lr
60001708:	200008d4 	.word	0x200008d4
6000170c:	0001f861 	.word	0x0001f861

60001710 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001710:	6943      	ldr	r3, [r0, #20]
60001712:	7e42      	ldrb	r2, [r0, #25]
60001714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001718:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000171c:	458c      	cmp	ip, r1
6000171e:	d01e      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001720:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001724:	2aff      	cmp	r2, #255	; 0xff
60001726:	d01a      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001728:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000172a:	b510      	push	{r4, lr}
6000172c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000172e:	d017      	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001734:	2aff      	cmp	r2, #255	; 0xff
60001736:	d006      	beq.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
60001738:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000173e:	6812      	ldr	r2, [r2, #0]
60001740:	421a      	tst	r2, r3
60001742:	d101      	bne.n	60001748 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001744:	7661      	strb	r1, [r4, #25]
}
60001746:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001748:	4b06      	ldr	r3, [pc, #24]	; (60001764 <TwoWire::setSCL(unsigned char)+0x54>)
6000174a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000174c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001752:	685b      	ldr	r3, [r3, #4]
60001754:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001756:	f7ff ffc1 	bl	600016dc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175a:	7661      	strb	r1, [r4, #25]
6000175c:	e7f3      	b.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
6000175e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001760:	2100      	movs	r1, #0
60001762:	e7ea      	b.n	6000173a <TwoWire::setSCL(unsigned char)+0x2a>
60001764:	200008d4 	.word	0x200008d4

60001768 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001768:	4916      	ldr	r1, [pc, #88]	; (600017c4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000176e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001776:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001778:	638b      	str	r3, [r1, #56]	; 0x38
{
6000177a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000177c:	4d12      	ldr	r5, [pc, #72]	; (600017c8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000177e:	e9d2 1300 	ldrd	r1, r3, [r2]
60001782:	680a      	ldr	r2, [r1, #0]
60001784:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
60001786:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001788:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000178a:	2202      	movs	r2, #2
	port->MCR = 0;
6000178c:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
6000178e:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001790:	4a0e      	ldr	r2, [pc, #56]	; (600017cc <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001792:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001794:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001796:	2201      	movs	r2, #1
60001798:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000179c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017a0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017a2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017a8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017aa:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ac:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ae:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017b0:	7e01      	ldrb	r1, [r0, #24]
600017b2:	f7ff ff4f 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017b6:	7e61      	ldrb	r1, [r4, #25]
600017b8:	4620      	mov	r0, r4
}
600017ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017be:	f7ff bf8d 	b.w	600016dc <TwoWire::configSCLpin(unsigned char)>
600017c2:	bf00      	nop
600017c4:	400fc000 	.word	0x400fc000
600017c8:	05050bb8 	.word	0x05050bb8
600017cc:	1928373b 	.word	0x1928373b

600017d0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017d0:	4770      	bx	lr
600017d2:	bf00      	nop

600017d4 <startup_default_middle_hook>:
600017d4:	4770      	bx	lr
600017d6:	bf00      	nop

600017d8 <startup_default_late_hook>:
600017d8:	4770      	bx	lr
600017da:	bf00      	nop

600017dc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017dc:	bf00      	nop
600017de:	4770      	bx	lr

600017e0 <configure_cache>:
{
600017e0:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017e6:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e8:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ea:	482b      	ldr	r0, [pc, #172]	; (60001898 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600017ec:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017fa:	4828      	ldr	r0, [pc, #160]	; (6000189c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001800:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001802:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001806:	4826      	ldr	r0, [pc, #152]	; (600018a0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001808:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000180c:	4a25      	ldr	r2, [pc, #148]	; (600018a4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000180e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001812:	4c25      	ldr	r4, [pc, #148]	; (600018a8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001814:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001818:	4824      	ldr	r0, [pc, #144]	; (600018ac <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001822:	4c23      	ldr	r4, [pc, #140]	; (600018b0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001824:	4823      	ldr	r0, [pc, #140]	; (600018b4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001826:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000182e:	4c22      	ldr	r4, [pc, #136]	; (600018b8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001834:	4821      	ldr	r0, [pc, #132]	; (600018bc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001836:	4a22      	ldr	r2, [pc, #136]	; (600018c0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001838:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000183c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001840:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001844:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000184a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000184c:	481e      	ldr	r0, [pc, #120]	; (600018c8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000184e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001852:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001856:	4a1d      	ldr	r2, [pc, #116]	; (600018cc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000185c:	4c1c      	ldr	r4, [pc, #112]	; (600018d0 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000185e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001862:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001864:	481b      	ldr	r0, [pc, #108]	; (600018d4 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001866:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000186e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001872:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001876:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000187a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000187e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001882:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001886:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000188a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000188e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001892:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001896:	4770      	bx	lr
60001898:	1000003f 	.word	0x1000003f
6000189c:	03080025 	.word	0x03080025
600018a0:	00100009 	.word	0x00100009
600018a4:	20003620 	.word	0x20003620
600018a8:	00200013 	.word	0x00200013
600018ac:	07020021 	.word	0x07020021
600018b0:	20000014 	.word	0x20000014
600018b4:	13080025 	.word	0x13080025
600018b8:	10000009 	.word	0x10000009
600018bc:	20200016 	.word	0x20200016
600018c0:	130b0027 	.word	0x130b0027
600018c4:	40000017 	.word	0x40000017
600018c8:	60000018 	.word	0x60000018
600018cc:	070b002f 	.word	0x070b002f
600018d0:	70000019 	.word	0x70000019
600018d4:	130b002f 	.word	0x130b002f

600018d8 <configure_external_ram>:
{
600018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018da:	4bb8      	ldr	r3, [pc, #736]	; (60001bbc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018dc:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018de:	4eb8      	ldr	r6, [pc, #736]	; (60001bc0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018e2:	4fb8      	ldr	r7, [pc, #736]	; (60001bc4 <configure_external_ram+0x2ec>)
{
600018e4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018e6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ea:	49b7      	ldr	r1, [pc, #732]	; (60001bc8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ec:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	4db6      	ldr	r5, [pc, #728]	; (60001bcc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018f2:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018f6:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fa:	4cb5      	ldr	r4, [pc, #724]	; (60001bd0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018fc:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001900:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001904:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001908:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000190c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001910:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001916:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001918:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000191a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000191c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000191e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000192a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000192e:	4aa9      	ldr	r2, [pc, #676]	; (60001bd4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001930:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001934:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001938:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000193c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001940:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001944:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001946:	4ba4      	ldr	r3, [pc, #656]	; (60001bd8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001948:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000194a:	48a4      	ldr	r0, [pc, #656]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	49a4      	ldr	r1, [pc, #656]	; (60001be0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000194e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001950:	4aa4      	ldr	r2, [pc, #656]	; (60001be4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001952:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001958:	f043 030c 	orr.w	r3, r3, #12
6000195c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001960:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001964:	6803      	ldr	r3, [r0, #0]
60001966:	f043 0302 	orr.w	r3, r3, #2
6000196a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000196c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000196e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001970:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001974:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001976:	4b9c      	ldr	r3, [pc, #624]	; (60001be8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001978:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000197a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000197c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	4c9b      	ldr	r4, [pc, #620]	; (60001bec <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001980:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001982:	4a9b      	ldr	r2, [pc, #620]	; (60001bf0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001988:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000198a:	68c3      	ldr	r3, [r0, #12]
6000198c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001990:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001992:	6a03      	ldr	r3, [r0, #32]
60001994:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001998:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199a:	6a03      	ldr	r3, [r0, #32]
6000199c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000199e:	4a95      	ldr	r2, [pc, #596]	; (60001bf4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019a0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a2:	4c95      	ldr	r4, [pc, #596]	; (60001bf8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019a4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019aa:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019b4:	f043 0301 	orr.w	r3, r3, #1
600019b8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019bc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	498e      	ldr	r1, [pc, #568]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019c6:	f043 0301 	orr.w	r3, r3, #1
600019ca:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ce:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600019d2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019dc:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019de:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e6:	6803      	ldr	r3, [r0, #0]
600019e8:	f023 0302 	bic.w	r3, r3, #2
600019ec:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ee:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f0:	4b83      	ldr	r3, [pc, #524]	; (60001c00 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	4984      	ldr	r1, [pc, #528]	; (60001c04 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f4:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f6:	f843 2b04 	str.w	r2, [r3], #4
600019fa:	428b      	cmp	r3, r1
600019fc:	d1fb      	bne.n	600019f6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fe:	4a77      	ldr	r2, [pc, #476]	; (60001bdc <configure_external_ram+0x304>)
60001a00:	6813      	ldr	r3, [r2, #0]
60001a02:	f043 0301 	orr.w	r3, r3, #1
60001a06:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a08:	6813      	ldr	r3, [r2, #0]
60001a0a:	f013 0301 	ands.w	r3, r3, #1
60001a0e:	d1fb      	bne.n	60001a08 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a10:	487a      	ldr	r0, [pc, #488]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a12:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a14:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a18:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a1a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a20:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a24:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a28:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a30:	4975      	ldr	r1, [pc, #468]	; (60001c08 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a32:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a36:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a3a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a3e:	4873      	ldr	r0, [pc, #460]	; (60001c0c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a40:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a44:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	4c71      	ldr	r4, [pc, #452]	; (60001c10 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a4a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a4e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a52:	4970      	ldr	r1, [pc, #448]	; (60001c14 <configure_external_ram+0x33c>)
60001a54:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a5a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a62:	485e      	ldr	r0, [pc, #376]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	6943      	ldr	r3, [r0, #20]
60001a72:	07da      	lsls	r2, r3, #31
60001a74:	d5fc      	bpl.n	60001a70 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a78:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a7e:	4957      	ldr	r1, [pc, #348]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a80:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a82:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a86:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	694b      	ldr	r3, [r1, #20]
60001a90:	07db      	lsls	r3, r3, #31
60001a92:	d5fc      	bpl.n	60001a8e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a94:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a96:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9c:	4a4f      	ldr	r2, [pc, #316]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a9e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001aa0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aac:	6953      	ldr	r3, [r2, #20]
60001aae:	07df      	lsls	r7, r3, #31
60001ab0:	d5fc      	bpl.n	60001aac <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ab6:	4858      	ldr	r0, [pc, #352]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab8:	4948      	ldr	r1, [pc, #288]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	694b      	ldr	r3, [r1, #20]
60001aca:	07de      	lsls	r6, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001ace:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ad2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ad6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001ad8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ada:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001adc:	4293      	cmp	r3, r2
60001ade:	d165      	bne.n	60001bac <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001ae0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae8:	483c      	ldr	r0, [pc, #240]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001aea:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aee:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af6:	6943      	ldr	r3, [r0, #20]
60001af8:	07dd      	lsls	r5, r3, #31
60001afa:	d5fc      	bpl.n	60001af6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001afc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001afe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b02:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	4a35      	ldr	r2, [pc, #212]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b08:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b0c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b10:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b14:	6953      	ldr	r3, [r2, #20]
60001b16:	07dc      	lsls	r4, r3, #31
60001b18:	d5fc      	bpl.n	60001b14 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b1a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b1c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b24:	492d      	ldr	r1, [pc, #180]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b26:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b28:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b30:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	694b      	ldr	r3, [r1, #20]
60001b36:	07d8      	lsls	r0, r3, #31
60001b38:	d5fc      	bpl.n	60001b34 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4a25      	ldr	r2, [pc, #148]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6953      	ldr	r3, [r2, #20]
60001b56:	07d9      	lsls	r1, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b60:	482d      	ldr	r0, [pc, #180]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	491e      	ldr	r1, [pc, #120]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b64:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b66:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b6a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b72:	694b      	ldr	r3, [r1, #20]
60001b74:	07da      	lsls	r2, r3, #31
60001b76:	d5fc      	bpl.n	60001b72 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b78:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b7c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b80:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b82:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b84:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b86:	4293      	cmp	r3, r2
60001b88:	d050      	beq.n	60001c2c <configure_external_ram+0x354>
60001b8a:	2508      	movs	r5, #8
60001b8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b90:	4922      	ldr	r1, [pc, #136]	; (60001c1c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b92:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001b94:	4b22      	ldr	r3, [pc, #136]	; (60001c20 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b96:	4a23      	ldr	r2, [pc, #140]	; (60001c24 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b98:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001b9a:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b9c:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b9e:	2301      	movs	r3, #1
60001ba0:	4821      	ldr	r0, [pc, #132]	; (60001c28 <configure_external_ram+0x350>)
60001ba2:	4422      	add	r2, r4
60001ba4:	f000 fa0c 	bl	60001fc0 <__sm_set_pool_veneer>
}
60001ba8:	b003      	add	sp, #12
60001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001bac:	4b1e      	ldr	r3, [pc, #120]	; (60001c28 <configure_external_ram+0x350>)
60001bae:	2200      	movs	r2, #0
60001bb0:	e9c3 2200 	strd	r2, r2, [r3]
60001bb4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bb8:	b003      	add	sp, #12
60001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bbc:	401f8000 	.word	0x401f8000
60001bc0:	0001b0f9 	.word	0x0001b0f9
60001bc4:	000110f9 	.word	0x000110f9
60001bc8:	401f8400 	.word	0x401f8400
60001bcc:	000170f9 	.word	0x000170f9
60001bd0:	400fc000 	.word	0x400fc000
60001bd4:	1ffffcff 	.word	0x1ffffcff
60001bd8:	a0000300 	.word	0xa0000300
60001bdc:	402a4000 	.word	0x402a4000
60001be0:	402a8000 	.word	0x402a8000
60001be4:	ffff0012 	.word	0xffff0012
60001be8:	00f737ff 	.word	0x00f737ff
60001bec:	80000040 	.word	0x80000040
60001bf0:	7cf0ff00 	.word	0x7cf0ff00
60001bf4:	830f00ff 	.word	0x830f00ff
60001bf8:	00020063 	.word	0x00020063
60001bfc:	5af05af0 	.word	0x5af05af0
60001c00:	402a4200 	.word	0x402a4200
60001c04:	402a4300 	.word	0x402a4300
60001c08:	3018049f 	.word	0x3018049f
60001c0c:	0a1806eb 	.word	0x0a1806eb
60001c10:	0a180638 	.word	0x0a180638
60001c14:	26013206 	.word	0x26013206
60001c18:	00030004 	.word	0x00030004
60001c1c:	70000000 	.word	0x70000000
60001c20:	70000000 	.word	0x70000000
60001c24:	200035e2 	.word	0x200035e2
60001c28:	20002ae8 	.word	0x20002ae8
	FLEXSPI2_IPCR0 = addr;
60001c2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c34:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c36:	4808      	ldr	r0, [pc, #32]	; (60001c58 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6943      	ldr	r3, [r0, #20]
60001c46:	07db      	lsls	r3, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
60001c4c:	2510      	movs	r5, #16
60001c4e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c52:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c54:	e79c      	b.n	60001b90 <configure_external_ram+0x2b8>
60001c56:	bf00      	nop
60001c58:	402a4000 	.word	0x402a4000

60001c5c <usb_pll_start>:
{
60001c5c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5e:	4a15      	ldr	r2, [pc, #84]	; (60001cb4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c76:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c78:	f013 0f02 	tst.w	r3, #2
60001c7c:	d10e      	bne.n	60001c9c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c82:	d00f      	beq.n	60001ca4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c88:	d00e      	beq.n	60001ca8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c8a:	2b00      	cmp	r3, #0
60001c8c:	daf3      	bge.n	60001c76 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c92:	d10b      	bne.n	60001cac <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c94:	065b      	lsls	r3, r3, #25
60001c96:	d50b      	bpl.n	60001cb0 <usb_pll_start+0x54>
}
60001c98:	bcf0      	pop	{r4, r5, r6, r7}
60001c9a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c9c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c9e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ca0:	6190      	str	r0, [r2, #24]
			continue;
60001ca2:	e7e8      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca4:	6155      	str	r5, [r2, #20]
			continue;
60001ca6:	e7e6      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ca8:	6156      	str	r6, [r2, #20]
			continue;
60001caa:	e7e4      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cac:	6191      	str	r1, [r2, #24]
			continue;
60001cae:	e7e2      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cb0:	6157      	str	r7, [r2, #20]
			continue;
60001cb2:	e7e0      	b.n	60001c76 <usb_pll_start+0x1a>
60001cb4:	400d8000 	.word	0x400d8000

60001cb8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb8:	4a3f      	ldr	r2, [pc, #252]	; (60001db8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cba:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cbc:	493f      	ldr	r1, [pc, #252]	; (60001dbc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cbe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cca:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001dc0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cce:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dc4 <tempmon_init+0x10c>
{
60001cd6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cdc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001ce0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ce4:	4d38      	ldr	r5, [pc, #224]	; (60001dc8 <tempmon_init+0x110>)
60001ce6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce8:	4c38      	ldr	r4, [pc, #224]	; (60001dcc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cea:	4839      	ldr	r0, [pc, #228]	; (60001dd0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cee:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cfc:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d00:	ee07 1a10 	vmov	s14, r1
60001d04:	4b33      	ldr	r3, [pc, #204]	; (60001dd4 <tempmon_init+0x11c>)
60001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d0a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d10:	4931      	ldr	r1, [pc, #196]	; (60001dd8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d12:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d16:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d22:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d26:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d32:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d36:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d3a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d3e:	4827      	ldr	r0, [pc, #156]	; (60001ddc <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d40:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d44:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d48:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d4c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d54:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d58:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d60:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	ee16 3a10 	vmov	r3, s12
60001d6c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d74:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001d78:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d7e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001d86:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001d8a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001d8c:	4914      	ldr	r1, [pc, #80]	; (60001de0 <tempmon_init+0x128>)
60001d8e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001d96:	f043 0302 	orr.w	r3, r3, #2
60001d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001d9e:	4b11      	ldr	r3, [pc, #68]	; (60001de4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001da0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001da4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dac:	2201      	movs	r2, #1
}
60001dae:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001db4:	4770      	bx	lr
60001db6:	bf00      	nop
60001db8:	400d8100 	.word	0x400d8100
60001dbc:	401f4400 	.word	0x401f4400
60001dc0:	42aa0000 	.word	0x42aa0000
60001dc4:	42b40000 	.word	0x42b40000
60001dc8:	200035a8 	.word	0x200035a8
60001dcc:	200035a4 	.word	0x200035a4
60001dd0:	200035ac 	.word	0x200035ac
60001dd4:	200035b0 	.word	0x200035b0
60001dd8:	0fff0000 	.word	0x0fff0000
60001ddc:	e000e400 	.word	0xe000e400
60001de0:	20001800 	.word	0x20001800
60001de4:	00003de5 	.word	0x00003de5

60001de8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001de8:	4b31      	ldr	r3, [pc, #196]	; (60001eb0 <usb_init+0xc8>)
60001dea:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001dee:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001df4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001df8:	f000 f8da 	bl	60001fb0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001dfc:	4a2d      	ldr	r2, [pc, #180]	; (60001eb4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001dfe:	492e      	ldr	r1, [pc, #184]	; (60001eb8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e04:	482d      	ldr	r0, [pc, #180]	; (60001ebc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e06:	f043 0303 	orr.w	r3, r3, #3
60001e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e0e:	4b2c      	ldr	r3, [pc, #176]	; (60001ec0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e10:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e14:	6802      	ldr	r2, [r0, #0]
60001e16:	421a      	tst	r2, r3
60001e18:	d103      	bne.n	60001e22 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e1a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e1e:	079a      	lsls	r2, r3, #30
60001e20:	d01b      	beq.n	60001e5a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e22:	4a25      	ldr	r2, [pc, #148]	; (60001eb8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e28:	4b24      	ldr	r3, [pc, #144]	; (60001ebc <usb_init+0xd4>)
60001e2a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e2c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e30:	f043 0302 	orr.w	r3, r3, #2
60001e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e38:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e3c:	079b      	lsls	r3, r3, #30
60001e3e:	d4fb      	bmi.n	60001e38 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e48:	4b1c      	ldr	r3, [pc, #112]	; (60001ebc <usb_init+0xd4>)
60001e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e4e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e52:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e54:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e56:	f000 f89b 	bl	60001f90 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e5a:	4a18      	ldr	r2, [pc, #96]	; (60001ebc <usb_init+0xd4>)
60001e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e60:	4c15      	ldr	r4, [pc, #84]	; (60001eb8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e62:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e64:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e66:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e68:	4b16      	ldr	r3, [pc, #88]	; (60001ec4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001e6a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e6c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e70:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e74:	4618      	mov	r0, r3
60001e76:	f000 f893 	bl	60001fa0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e7e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e80:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e84:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e88:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e8a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001e8e:	641a      	str	r2, [r3, #64]	; 0x40
60001e90:	4b0d      	ldr	r3, [pc, #52]	; (60001ec8 <usb_init+0xe0>)
60001e92:	4a0e      	ldr	r2, [pc, #56]	; (60001ecc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e94:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001e9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ea0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ea4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ea6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001eaa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001eae:	bd10      	pop	{r4, pc}
60001eb0:	400d8000 	.word	0x400d8000
60001eb4:	400fc000 	.word	0x400fc000
60001eb8:	402e0000 	.word	0x402e0000
60001ebc:	400d9000 	.word	0x400d9000
60001ec0:	001e1c00 	.word	0x001e1c00
60001ec4:	20000000 	.word	0x20000000
60001ec8:	20001800 	.word	0x20001800
60001ecc:	00003fcd 	.word	0x00003fcd

60001ed0 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ed0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ed2:	4b0e      	ldr	r3, [pc, #56]	; (60001f0c <_reboot_Teensyduino_+0x3c>)
60001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ed6:	079b      	lsls	r3, r3, #30
60001ed8:	d400      	bmi.n	60001edc <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001eda:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001edc:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ede:	4b0c      	ldr	r3, [pc, #48]	; (60001f10 <_reboot_Teensyduino_+0x40>)
60001ee0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ee2:	4a0c      	ldr	r2, [pc, #48]	; (60001f14 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ee4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ee8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001eec:	490a      	ldr	r1, [pc, #40]	; (60001f18 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001eee:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ef2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ef4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ef6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001efe:	4807      	ldr	r0, [pc, #28]	; (60001f1c <_reboot_Teensyduino_+0x4c>)
60001f00:	4a07      	ldr	r2, [pc, #28]	; (60001f20 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f02:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f04:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f06:	689b      	ldr	r3, [r3, #8]
60001f08:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f0a:	bf00      	nop
60001f0c:	401f4400 	.word	0x401f4400
60001f10:	402e0000 	.word	0x402e0000
60001f14:	400ac000 	.word	0x400ac000
60001f18:	00200003 	.word	0x00200003
60001f1c:	20208000 	.word	0x20208000
60001f20:	eb120000 	.word	0xeb120000

60001f24 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f24:	4b10      	ldr	r3, [pc, #64]	; (60001f68 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f26:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f28:	4a10      	ldr	r2, [pc, #64]	; (60001f6c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f2c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f30:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f32:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f34:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f40:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f42:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f46:	061b      	lsls	r3, r3, #24
60001f48:	d4fc      	bmi.n	60001f44 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f4a:	4a09      	ldr	r2, [pc, #36]	; (60001f70 <analog_init+0x4c>)
60001f4c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f50:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f52:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f54:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f56:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f58:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f5c:	d1fb      	bne.n	60001f56 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f5e:	4a05      	ldr	r2, [pc, #20]	; (60001f74 <analog_init+0x50>)
60001f60:	7013      	strb	r3, [r2, #0]
}
60001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f66:	4770      	bx	lr
60001f68:	400fc000 	.word	0x400fc000
60001f6c:	400c4000 	.word	0x400c4000
60001f70:	400c8000 	.word	0x400c8000
60001f74:	200035e1 	.word	0x200035e1

60001f78 <_init>:
60001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f7a:	bf00      	nop
60001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f7e:	bc08      	pop	{r3}
60001f80:	469e      	mov	lr, r3
60001f82:	4770      	bx	lr
60001f84:	0000      	movs	r0, r0
	...

60001f88 <____libc_init_array_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <____libc_init_array_veneer+0x4>
60001f8c:	000066ed 	.word	0x000066ed

60001f90 <__delay_veneer>:
60001f90:	f85f f000 	ldr.w	pc, [pc]	; 60001f94 <__delay_veneer+0x4>
60001f94:	000033cd 	.word	0x000033cd

60001f98 <__main_veneer>:
60001f98:	f85f f000 	ldr.w	pc, [pc]	; 60001f9c <__main_veneer+0x4>
60001f9c:	0000355d 	.word	0x0000355d

60001fa0 <__memset_veneer>:
60001fa0:	f85f f000 	ldr.w	pc, [pc]	; 60001fa4 <__memset_veneer+0x4>
60001fa4:	0000600d 	.word	0x0000600d

60001fa8 <__pwm_init_veneer>:
60001fa8:	f85f f000 	ldr.w	pc, [pc]	; 60001fac <__pwm_init_veneer+0x4>
60001fac:	00003af5 	.word	0x00003af5

60001fb0 <__usb_init_serialnumber_veneer>:
60001fb0:	f85f f000 	ldr.w	pc, [pc]	; 60001fb4 <__usb_init_serialnumber_veneer+0x4>
60001fb4:	0000473d 	.word	0x0000473d

60001fb8 <__set_arm_clock_veneer>:
60001fb8:	f85f f000 	ldr.w	pc, [pc]	; 60001fbc <__set_arm_clock_veneer+0x4>
60001fbc:	000030dd 	.word	0x000030dd

60001fc0 <__sm_set_pool_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__sm_set_pool_veneer+0x4>
60001fc4:	0000504d 	.word	0x0000504d

60001fc8 <__frame_dummy_init_array_entry>:
60001fc8:	00000045 000006d1 00000c89 00001f79     E...........y...
60001fd8:	00002789 00002809 0000288d 00002911     .'...(...(...)..
60001fe8:	00002995 00002a19 00002a9d 00002b21     .)...*...*..!+..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    *value = _buffer[0];
      24:	1a1b      	subs	r3, r3, r0
    *value <<= 8;
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
    *value |= _buffer[1];
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
}
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
  return (int16_t)current.read() * 1.25;
}
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      36:	4770      	bx	lr
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20003550 	.word	0x20003550
      64:	6000ec00 	.word	0x6000ec00

00000068 <setup>:
      68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	4d5f      	ldr	r5, [pc, #380]	; (1ec <setup+0x184>)
      6e:	f240 28ee 	movw	r8, #750	; 0x2ee
    }
    if (_miso != -1) {
      72:	4c5f      	ldr	r4, [pc, #380]	; (1f0 <setup+0x188>)
      74:	4f5f      	ldr	r7, [pc, #380]	; (1f4 <setup+0x18c>)
      76:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 230 <setup+0x1c8>
}
      7a:	682e      	ldr	r6, [r5, #0]
      7c:	f004 ff34 	bl	4ee8 <yield>
      80:	7823      	ldrb	r3, [r4, #0]
      82:	2b00      	cmp	r3, #0
      84:	d062      	beq.n	14c <setup+0xe4>
      86:	783b      	ldrb	r3, [r7, #0]
      88:	07db      	lsls	r3, r3, #31
      8a:	d55f      	bpl.n	14c <setup+0xe4>
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	682b      	ldr	r3, [r5, #0]
      8e:	f8d9 2000 	ldr.w	r2, [r9]
      92:	1a9b      	subs	r3, r3, r2
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	2b0e      	cmp	r3, #14
      96:	d959      	bls.n	14c <setup+0xe4>
      98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
      9c:	f003 f996 	bl	33cc <delay>
      a0:	210e      	movs	r1, #14
      a2:	4855      	ldr	r0, [pc, #340]	; (1f8 <setup+0x190>)
      a4:	f004 fea2 	bl	4dec <usb_serial_write>
      a8:	4854      	ldr	r0, [pc, #336]	; (1fc <setup+0x194>)
      aa:	f002 fdc3 	bl	2c34 <Print::println()>

					// now set new pin info.
					*(portControlRegister(hardware->rx_pins[rx_pin_new_index].pin)) =  IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;;
					*(portConfigRegister(hardware->rx_pins[rx_pin_new_index].pin)) = hardware->rx_pins[rx_pin_new_index].mux_val;
					if (hardware->rx_pins[rx_pin_new_index].select_input_register) {
					 	*(hardware->rx_pins[rx_pin_new_index].select_input_register) =  hardware->rx_pins[rx_pin_new_index].select_val;		
      ae:	2120      	movs	r1, #32
      b0:	4853      	ldr	r0, [pc, #332]	; (200 <setup+0x198>)
					}
				}		
				rx_pin_index_ = rx_pin_new_index;
      b2:	f000 fe2b 	bl	d0c <PA12::begin(int)>
		for (uint8_t rx_pin_new_index = 0; rx_pin_new_index < cnt_rx_pins; rx_pin_new_index++) {
      b6:	2064      	movs	r0, #100	; 0x64
			if (pin == hardware->rx_pins[rx_pin_new_index].pin) {
      b8:	f003 f988 	bl	33cc <delay>
      bc:	4850      	ldr	r0, [pc, #320]	; (200 <setup+0x198>)
      be:	f000 fe7b 	bl	db8 <PA12::available()>
      c2:	2115      	movs	r1, #21
      c4:	4604      	mov	r4, r0
      c6:	2800      	cmp	r0, #0
      c8:	d04d      	beq.n	166 <setup+0xfe>
      ca:	484e      	ldr	r0, [pc, #312]	; (204 <setup+0x19c>)
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      cc:	f004 fe8e 	bl	4dec <usb_serial_write>
}
      d0:	484a      	ldr	r0, [pc, #296]	; (1fc <setup+0x194>)
	while (newdiv > 65535 && prescale < 7) {
      d2:	f002 fdaf 	bl	2c34 <Print::println()>
      d6:	f240 22ee 	movw	r2, #750	; 0x2ee
      da:	2100      	movs	r1, #0
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      dc:	4848      	ldr	r0, [pc, #288]	; (200 <setup+0x198>)
      de:	f001 f899 	bl	1214 <PA12::movingSpeed(int, int)>
      e2:	4a49      	ldr	r2, [pc, #292]	; (208 <setup+0x1a0>)
      e4:	2140      	movs	r1, #64	; 0x40
      e6:	4849      	ldr	r0, [pc, #292]	; (20c <setup+0x1a4>)
      e8:	f001 f922 	bl	1330 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
      ec:	200a      	movs	r0, #10
      ee:	f003 f96d 	bl	33cc <delay>
      f2:	4846      	ldr	r0, [pc, #280]	; (20c <setup+0x1a4>)
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      f4:	f001 f9c8 	bl	1488 <Adafruit_INA260::conversionReady()>
      f8:	2800      	cmp	r0, #0
      fa:	d04c      	beq.n	196 <setup+0x12e>
      fc:	210c      	movs	r1, #12
      fe:	4844      	ldr	r0, [pc, #272]	; (210 <setup+0x1a8>)
     100:	f004 fe74 	bl	4dec <usb_serial_write>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	483d      	ldr	r0, [pc, #244]	; (1fc <setup+0x194>)
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	f002 fd95 	bl	2c34 <Print::println()>
     10a:	2164      	movs	r1, #100	; 0x64
     10c:	4841      	ldr	r0, [pc, #260]	; (214 <setup+0x1ac>)
     10e:	f001 ff59 	bl	1fc4 <Adafruit_MCP4725::begin(unsigned char)>
	if (newbuffer) {
     112:	200a      	movs	r0, #10
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	f003 f95a 	bl	33cc <delay>
		capacity = maxStrLen;
     118:	4b3f      	ldr	r3, [pc, #252]	; (218 <setup+0x1b0>)
		return 1;
     11a:	2200      	movs	r2, #0
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	483d      	ldr	r0, [pc, #244]	; (214 <setup+0x1ac>)
     11e:	8819      	ldrh	r1, [r3, #0]
     120:	f001 ff58 	bl	1fd4 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	2109      	movs	r1, #9
	mask = p->mask;
     126:	483d      	ldr	r0, [pc, #244]	; (21c <setup+0x1b4>)
	pinmode = *(p->reg + 1);
     128:	f004 fe60 	bl	4dec <usb_serial_write>
	if (pinmode & mask) {
     12c:	4833      	ldr	r0, [pc, #204]	; (1fc <setup+0x194>)
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	f002 fd81 	bl	2c34 <Print::println()>
	pinmode = *(p->reg + 1);
     132:	2101      	movs	r1, #1
	mask = p->mask;
     134:	2021      	movs	r0, #33	; 0x21
	if (pinmode & mask) {
     136:	f003 f9d9 	bl	34ec <pinMode>
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	210e      	movs	r1, #14
     13c:	4838      	ldr	r0, [pc, #224]	; (220 <setup+0x1b8>)
     13e:	f004 fe55 	bl	4dec <usb_serial_write>
     142:	482e      	ldr	r0, [pc, #184]	; (1fc <setup+0x194>)
     144:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     148:	f002 bd74 	b.w	2c34 <Print::println()>
     14c:	682b      	ldr	r3, [r5, #0]
     14e:	7822      	ldrb	r2, [r4, #0]
     150:	1b9b      	subs	r3, r3, r6
     152:	b12a      	cbz	r2, 160 <setup+0xf8>
     154:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     158:	d89e      	bhi.n	98 <setup+0x30>
     15a:	f004 fec5 	bl	4ee8 <yield>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15e:	e78d      	b.n	7c <setup+0x14>
     160:	4543      	cmp	r3, r8
     162:	d9fa      	bls.n	15a <setup+0xf2>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     164:	e798      	b.n	98 <setup+0x30>
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     166:	482f      	ldr	r0, [pc, #188]	; (224 <setup+0x1bc>)
     168:	f004 fe40 	bl	4dec <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     16c:	4823      	ldr	r0, [pc, #140]	; (1fc <setup+0x194>)
     16e:	f002 fd61 	bl	2c34 <Print::println()>
    myServo.movingSpeed(LA_ID_NUM, 750);
     172:	f240 22ee 	movw	r2, #750	; 0x2ee
     176:	4621      	mov	r1, r4
     178:	4821      	ldr	r0, [pc, #132]	; (200 <setup+0x198>)
     17a:	f001 f84b 	bl	1214 <PA12::movingSpeed(int, int)>
    ina260.begin(0x40);
     17e:	4a22      	ldr	r2, [pc, #136]	; (208 <setup+0x1a0>)
     180:	2140      	movs	r1, #64	; 0x40
     182:	4822      	ldr	r0, [pc, #136]	; (20c <setup+0x1a4>)
     184:	f001 f8d4 	bl	1330 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     188:	200a      	movs	r0, #10
     18a:	f003 f91f 	bl	33cc <delay>
    if (ina260.conversionReady()) {
     18e:	481f      	ldr	r0, [pc, #124]	; (20c <setup+0x1a4>)
     190:	f001 f97a 	bl	1488 <Adafruit_INA260::conversionReady()>
     194:	bb38      	cbnz	r0, 1e6 <setup+0x17e>
     196:	210c      	movs	r1, #12
     198:	4823      	ldr	r0, [pc, #140]	; (228 <setup+0x1c0>)
     19a:	f004 fe27 	bl	4dec <usb_serial_write>
     19e:	4817      	ldr	r0, [pc, #92]	; (1fc <setup+0x194>)
     1a0:	f002 fd48 	bl	2c34 <Print::println()>
    dac.begin(0x64);
     1a4:	2164      	movs	r1, #100	; 0x64
     1a6:	481b      	ldr	r0, [pc, #108]	; (214 <setup+0x1ac>)
     1a8:	f001 ff0c 	bl	1fc4 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     1ac:	200a      	movs	r0, #10
     1ae:	f003 f90d 	bl	33cc <delay>
    dac.setVoltage(dacValue, false);
     1b2:	4b19      	ldr	r3, [pc, #100]	; (218 <setup+0x1b0>)
     1b4:	2200      	movs	r2, #0
     1b6:	4817      	ldr	r0, [pc, #92]	; (214 <setup+0x1ac>)
     1b8:	8819      	ldrh	r1, [r3, #0]
     1ba:	f001 ff0b 	bl	1fd4 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     1be:	2109      	movs	r1, #9
     1c0:	4816      	ldr	r0, [pc, #88]	; (21c <setup+0x1b4>)
     1c2:	f004 fe13 	bl	4dec <usb_serial_write>
     1c6:	480d      	ldr	r0, [pc, #52]	; (1fc <setup+0x194>)
     1c8:	f002 fd34 	bl	2c34 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     1cc:	2101      	movs	r1, #1
     1ce:	2021      	movs	r0, #33	; 0x21
     1d0:	f003 f98c 	bl	34ec <pinMode>
     1d4:	210c      	movs	r1, #12
     1d6:	4815      	ldr	r0, [pc, #84]	; (22c <setup+0x1c4>)
     1d8:	f004 fe08 	bl	4dec <usb_serial_write>
     1dc:	4807      	ldr	r0, [pc, #28]	; (1fc <setup+0x194>)
}
     1de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     1e2:	f002 bd27 	b.w	2c34 <Print::println()>
     1e6:	210c      	movs	r1, #12
     1e8:	4809      	ldr	r0, [pc, #36]	; (210 <setup+0x1a8>)
     1ea:	e7d6      	b.n	19a <setup+0x132>
     1ec:	200035bc 	.word	0x200035bc
     1f0:	200035ea 	.word	0x200035ea
     1f4:	200035e9 	.word	0x200035e9
     1f8:	20000c58 	.word	0x20000c58
     1fc:	20000ee8 	.word	0x20000ee8
     200:	20002b08 	.word	0x20002b08
     204:	20000c68 	.word	0x20000c68
     208:	20002078 	.word	0x20002078
     20c:	20002af8 	.word	0x20002af8
     210:	20000cc4 	.word	0x20000cc4
     214:	20002ad0 	.word	0x20002ad0
     218:	200017b6 	.word	0x200017b6
     21c:	20000c90 	.word	0x20000c90
     220:	20000cd4 	.word	0x20000cd4
     224:	20000c9c 	.word	0x20000c9c
     228:	20000c80 	.word	0x20000c80
     22c:	20000cb4 	.word	0x20000cb4
     230:	200035cc 	.word	0x200035cc

00000234 <PrintOutput()>:

void PrintOutput () {
     234:	b530      	push	{r4, r5, lr}
     236:	2100      	movs	r1, #0
     238:	b08d      	sub	sp, #52	; 0x34
     23a:	4893      	ldr	r0, [pc, #588]	; (488 <PrintOutput()+0x254>)
     23c:	f004 fdd6 	bl	4dec <usb_serial_write>
     240:	4892      	ldr	r0, [pc, #584]	; (48c <PrintOutput()+0x258>)
     242:	f002 fcf7 	bl	2c34 <Print::println()>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     246:	4992      	ldr	r1, [pc, #584]	; (490 <PrintOutput()+0x25c>)
     248:	a804      	add	r0, sp, #16
     24a:	ac08      	add	r4, sp, #32
     24c:	f002 fdbc 	bl	2dc8 <String::String(char const*)>
     250:	4b90      	ldr	r3, [pc, #576]	; (494 <PrintOutput()+0x260>)
    Serial.println("");
    Serial.println("Time: \t\t" + PadString(String(millis())));
     252:	220a      	movs	r2, #10
     254:	4668      	mov	r0, sp
     256:	6819      	ldr	r1, [r3, #0]
     258:	f002 fdfa 	bl	2e50 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     25c:	9b02      	ldr	r3, [sp, #8]
     25e:	2b07      	cmp	r3, #7
     260:	d812      	bhi.n	288 <PrintOutput()+0x54>
     262:	4d8d      	ldr	r5, [pc, #564]	; (498 <PrintOutput()+0x264>)
     264:	4629      	mov	r1, r5
     266:	4620      	mov	r0, r4
     268:	f002 fdae 	bl	2dc8 <String::String(char const*)>
        str = " " + str;
     26c:	4669      	mov	r1, sp
     26e:	4620      	mov	r0, r4
     270:	f002 fe7a 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     274:	4601      	mov	r1, r0
     276:	4668      	mov	r0, sp
     278:	f002 fe1e 	bl	2eb8 <String::operator=(String const&)>
class StringSumHelper : public String
     27c:	4620      	mov	r0, r4
     27e:	f002 fd67 	bl	2d50 <String::~String()>
    while (str.length() < 8) {
     282:	9b02      	ldr	r3, [sp, #8]
     284:	2b07      	cmp	r3, #7
     286:	d9ed      	bls.n	264 <PrintOutput()+0x30>
    return str;
     288:	4669      	mov	r1, sp
     28a:	4620      	mov	r0, r4
     28c:	f002 fd4a 	bl	2d24 <String::String(String&&)>
    Serial.println("Time: \t\t" + PadString(String(millis())));
     290:	4621      	mov	r1, r4
     292:	a804      	add	r0, sp, #16
     294:	f002 fe68 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     298:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     29a:	487c      	ldr	r0, [pc, #496]	; (48c <PrintOutput()+0x258>)
     29c:	f002 fca4 	bl	2be8 <Print::print(String const&)>
     2a0:	487a      	ldr	r0, [pc, #488]	; (48c <PrintOutput()+0x258>)
     2a2:	f002 fcc7 	bl	2c34 <Print::println()>
     2a6:	4620      	mov	r0, r4
     2a8:	f002 fd52 	bl	2d50 <String::~String()>
     2ac:	4668      	mov	r0, sp
     2ae:	f002 fd4f 	bl	2d50 <String::~String()>
     2b2:	a804      	add	r0, sp, #16
     2b4:	f002 fd4c 	bl	2d50 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     2b8:	4978      	ldr	r1, [pc, #480]	; (49c <PrintOutput()+0x268>)
     2ba:	a804      	add	r0, sp, #16
     2bc:	f002 fd84 	bl	2dc8 <String::String(char const*)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     2c0:	4b77      	ldr	r3, [pc, #476]	; (4a0 <PrintOutput()+0x26c>)
     2c2:	220a      	movs	r2, #10
     2c4:	4668      	mov	r0, sp
     2c6:	8819      	ldrh	r1, [r3, #0]
     2c8:	f002 fd92 	bl	2df0 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     2cc:	9b02      	ldr	r3, [sp, #8]
     2ce:	2b07      	cmp	r3, #7
     2d0:	d812      	bhi.n	2f8 <PrintOutput()+0xc4>
     2d2:	4d71      	ldr	r5, [pc, #452]	; (498 <PrintOutput()+0x264>)
     2d4:	4629      	mov	r1, r5
     2d6:	4620      	mov	r0, r4
     2d8:	f002 fd76 	bl	2dc8 <String::String(char const*)>
        str = " " + str;
     2dc:	4669      	mov	r1, sp
     2de:	4620      	mov	r0, r4
     2e0:	f002 fe42 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     2e4:	4601      	mov	r1, r0
     2e6:	4668      	mov	r0, sp
     2e8:	f002 fde6 	bl	2eb8 <String::operator=(String const&)>
class StringSumHelper : public String
     2ec:	4620      	mov	r0, r4
     2ee:	f002 fd2f 	bl	2d50 <String::~String()>
    while (str.length() < 8) {
     2f2:	9b02      	ldr	r3, [sp, #8]
     2f4:	2b07      	cmp	r3, #7
     2f6:	d9ed      	bls.n	2d4 <PrintOutput()+0xa0>
    return str;
     2f8:	4669      	mov	r1, sp
     2fa:	4620      	mov	r0, r4
     2fc:	f002 fd12 	bl	2d24 <String::String(String&&)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     300:	4621      	mov	r1, r4
     302:	a804      	add	r0, sp, #16
     304:	f002 fe30 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     308:	4601      	mov	r1, r0
     30a:	4860      	ldr	r0, [pc, #384]	; (48c <PrintOutput()+0x258>)
     30c:	f002 fc6c 	bl	2be8 <Print::print(String const&)>
     310:	485e      	ldr	r0, [pc, #376]	; (48c <PrintOutput()+0x258>)
     312:	f002 fc8f 	bl	2c34 <Print::println()>
     316:	4620      	mov	r0, r4
     318:	f002 fd1a 	bl	2d50 <String::~String()>
     31c:	4668      	mov	r0, sp
     31e:	f002 fd17 	bl	2d50 <String::~String()>
     322:	a804      	add	r0, sp, #16
     324:	f002 fd14 	bl	2d50 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     328:	495e      	ldr	r1, [pc, #376]	; (4a4 <PrintOutput()+0x270>)
     32a:	a804      	add	r0, sp, #16
     32c:	f002 fd4c 	bl	2dc8 <String::String(char const*)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     330:	485d      	ldr	r0, [pc, #372]	; (4a8 <PrintOutput()+0x274>)
     332:	f001 f891 	bl	1458 <Adafruit_INA260::readPower()>
     336:	2102      	movs	r1, #2
     338:	4668      	mov	r0, sp
     33a:	f002 fda1 	bl	2e80 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     33e:	9b02      	ldr	r3, [sp, #8]
     340:	2b07      	cmp	r3, #7
     342:	d812      	bhi.n	36a <PrintOutput()+0x136>
     344:	4d54      	ldr	r5, [pc, #336]	; (498 <PrintOutput()+0x264>)
     346:	4629      	mov	r1, r5
     348:	4620      	mov	r0, r4
     34a:	f002 fd3d 	bl	2dc8 <String::String(char const*)>
        str = " " + str;
     34e:	4669      	mov	r1, sp
     350:	4620      	mov	r0, r4
     352:	f002 fe09 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     356:	4601      	mov	r1, r0
     358:	4668      	mov	r0, sp
     35a:	f002 fdad 	bl	2eb8 <String::operator=(String const&)>
class StringSumHelper : public String
     35e:	4620      	mov	r0, r4
     360:	f002 fcf6 	bl	2d50 <String::~String()>
    while (str.length() < 8) {
     364:	9b02      	ldr	r3, [sp, #8]
     366:	2b07      	cmp	r3, #7
     368:	d9ed      	bls.n	346 <PrintOutput()+0x112>
    return str;
     36a:	4669      	mov	r1, sp
     36c:	4620      	mov	r0, r4
     36e:	f002 fcd9 	bl	2d24 <String::String(String&&)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     372:	4621      	mov	r1, r4
     374:	a804      	add	r0, sp, #16
     376:	f002 fdf7 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     37a:	4601      	mov	r1, r0
     37c:	4843      	ldr	r0, [pc, #268]	; (48c <PrintOutput()+0x258>)
     37e:	f002 fc33 	bl	2be8 <Print::print(String const&)>
     382:	4842      	ldr	r0, [pc, #264]	; (48c <PrintOutput()+0x258>)
     384:	f002 fc56 	bl	2c34 <Print::println()>
     388:	4620      	mov	r0, r4
     38a:	f002 fce1 	bl	2d50 <String::~String()>
     38e:	4668      	mov	r0, sp
     390:	f002 fcde 	bl	2d50 <String::~String()>
     394:	a804      	add	r0, sp, #16
     396:	f002 fcdb 	bl	2d50 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     39a:	4944      	ldr	r1, [pc, #272]	; (4ac <PrintOutput()+0x278>)
     39c:	a804      	add	r0, sp, #16
     39e:	f002 fd13 	bl	2dc8 <String::String(char const*)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     3a2:	4841      	ldr	r0, [pc, #260]	; (4a8 <PrintOutput()+0x274>)
     3a4:	f001 f83e 	bl	1424 <Adafruit_INA260::readBusVoltage()>
     3a8:	2102      	movs	r1, #2
     3aa:	4668      	mov	r0, sp
     3ac:	f002 fd68 	bl	2e80 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     3b0:	9b02      	ldr	r3, [sp, #8]
     3b2:	2b07      	cmp	r3, #7
     3b4:	d812      	bhi.n	3dc <PrintOutput()+0x1a8>
     3b6:	4d38      	ldr	r5, [pc, #224]	; (498 <PrintOutput()+0x264>)
     3b8:	4629      	mov	r1, r5
     3ba:	4620      	mov	r0, r4
     3bc:	f002 fd04 	bl	2dc8 <String::String(char const*)>
        str = " " + str;
     3c0:	4669      	mov	r1, sp
     3c2:	4620      	mov	r0, r4
     3c4:	f002 fdd0 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     3c8:	4601      	mov	r1, r0
     3ca:	4668      	mov	r0, sp
     3cc:	f002 fd74 	bl	2eb8 <String::operator=(String const&)>
class StringSumHelper : public String
     3d0:	4620      	mov	r0, r4
     3d2:	f002 fcbd 	bl	2d50 <String::~String()>
    while (str.length() < 8) {
     3d6:	9b02      	ldr	r3, [sp, #8]
     3d8:	2b07      	cmp	r3, #7
     3da:	d9ed      	bls.n	3b8 <PrintOutput()+0x184>
    return str;
     3dc:	4669      	mov	r1, sp
     3de:	4620      	mov	r0, r4
     3e0:	f002 fca0 	bl	2d24 <String::String(String&&)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     3e4:	4621      	mov	r1, r4
     3e6:	a804      	add	r0, sp, #16
     3e8:	f002 fdbe 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     3ec:	4601      	mov	r1, r0
     3ee:	4827      	ldr	r0, [pc, #156]	; (48c <PrintOutput()+0x258>)
     3f0:	f002 fbfa 	bl	2be8 <Print::print(String const&)>
     3f4:	4825      	ldr	r0, [pc, #148]	; (48c <PrintOutput()+0x258>)
     3f6:	f002 fc1d 	bl	2c34 <Print::println()>
     3fa:	4620      	mov	r0, r4
     3fc:	f002 fca8 	bl	2d50 <String::~String()>
     400:	4668      	mov	r0, sp
     402:	f002 fca5 	bl	2d50 <String::~String()>
     406:	a804      	add	r0, sp, #16
     408:	f002 fca2 	bl	2d50 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     40c:	4928      	ldr	r1, [pc, #160]	; (4b0 <PrintOutput()+0x27c>)
     40e:	a804      	add	r0, sp, #16
     410:	f002 fcda 	bl	2dc8 <String::String(char const*)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     414:	2100      	movs	r1, #0
     416:	4827      	ldr	r0, [pc, #156]	; (4b4 <PrintOutput()+0x280>)
     418:	f000 ff16 	bl	1248 <PA12::presentPosition(int)>
     41c:	220a      	movs	r2, #10
     41e:	4601      	mov	r1, r0
     420:	4668      	mov	r0, sp
     422:	f002 fce5 	bl	2df0 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     426:	9b02      	ldr	r3, [sp, #8]
     428:	2b07      	cmp	r3, #7
     42a:	d812      	bhi.n	452 <PrintOutput()+0x21e>
     42c:	4d1a      	ldr	r5, [pc, #104]	; (498 <PrintOutput()+0x264>)
     42e:	4629      	mov	r1, r5
     430:	4620      	mov	r0, r4
     432:	f002 fcc9 	bl	2dc8 <String::String(char const*)>
        str = " " + str;
     436:	4669      	mov	r1, sp
     438:	4620      	mov	r0, r4
     43a:	f002 fd95 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     43e:	4601      	mov	r1, r0
     440:	4668      	mov	r0, sp
     442:	f002 fd39 	bl	2eb8 <String::operator=(String const&)>
class StringSumHelper : public String
     446:	4620      	mov	r0, r4
     448:	f002 fc82 	bl	2d50 <String::~String()>
    while (str.length() < 8) {
     44c:	9b02      	ldr	r3, [sp, #8]
     44e:	2b07      	cmp	r3, #7
     450:	d9ed      	bls.n	42e <PrintOutput()+0x1fa>
    return str;
     452:	4669      	mov	r1, sp
     454:	4620      	mov	r0, r4
     456:	f002 fc65 	bl	2d24 <String::String(String&&)>
    Serial.println("LA Position: \t" + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     45a:	4621      	mov	r1, r4
     45c:	a804      	add	r0, sp, #16
     45e:	f002 fd83 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     462:	4601      	mov	r1, r0
     464:	4809      	ldr	r0, [pc, #36]	; (48c <PrintOutput()+0x258>)
     466:	f002 fbbf 	bl	2be8 <Print::print(String const&)>
     46a:	4808      	ldr	r0, [pc, #32]	; (48c <PrintOutput()+0x258>)
     46c:	f002 fbe2 	bl	2c34 <Print::println()>
     470:	4620      	mov	r0, r4
     472:	f002 fc6d 	bl	2d50 <String::~String()>
     476:	4668      	mov	r0, sp
     478:	f002 fc6a 	bl	2d50 <String::~String()>
     47c:	a804      	add	r0, sp, #16
     47e:	f002 fc67 	bl	2d50 <String::~String()>
}
     482:	b00d      	add	sp, #52	; 0x34
     484:	bd30      	pop	{r4, r5, pc}
     486:	bf00      	nop
     488:	2000039c 	.word	0x2000039c
     48c:	20000ee8 	.word	0x20000ee8
     490:	20000394 	.word	0x20000394
     494:	200035bc 	.word	0x200035bc
     498:	20000404 	.word	0x20000404
     49c:	200003a0 	.word	0x200003a0
     4a0:	200017b6 	.word	0x200017b6
     4a4:	200003a8 	.word	0x200003a8
     4a8:	20002af8 	.word	0x20002af8
     4ac:	200003b4 	.word	0x200003b4
     4b0:	200003c0 	.word	0x200003c0
     4b4:	20002b08 	.word	0x20002b08

000004b8 <getCommand(String)>:

Command getCommand (String command) {
     4b8:	b510      	push	{r4, lr}
     4ba:	b084      	sub	sp, #16
     4bc:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
     4be:	4917      	ldr	r1, [pc, #92]	; (51c <getCommand(String)+0x64>)
     4c0:	4668      	mov	r0, sp
     4c2:	f002 fc81 	bl	2dc8 <String::String(char const*)>
    Serial.println("Comman:" + command);
     4c6:	4621      	mov	r1, r4
     4c8:	4668      	mov	r0, sp
     4ca:	f002 fd4d 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     4ce:	4601      	mov	r1, r0
     4d0:	4813      	ldr	r0, [pc, #76]	; (520 <getCommand(String)+0x68>)
     4d2:	f002 fb89 	bl	2be8 <Print::print(String const&)>
     4d6:	4812      	ldr	r0, [pc, #72]	; (520 <getCommand(String)+0x68>)
     4d8:	f002 fbac 	bl	2c34 <Print::println()>
class StringSumHelper : public String
     4dc:	4668      	mov	r0, sp
     4de:	f002 fc37 	bl	2d50 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     4e2:	4910      	ldr	r1, [pc, #64]	; (524 <getCommand(String)+0x6c>)
     4e4:	4620      	mov	r0, r4
     4e6:	f002 fd47 	bl	2f78 <String::equals(char const*) const>

    if (command == "setDac") {
     4ea:	b110      	cbz	r0, 4f2 <getCommand(String)+0x3a>
        return Command::SETDAC;
     4ec:	2001      	movs	r0, #1
    } else if (command.toLowerCase() == "switchpcc") {
        return Command::SWITCHPCC;
    } else {
        return Command::INVALID;
    }
}
     4ee:	b004      	add	sp, #16
     4f0:	bd10      	pop	{r4, pc}
    } else if (command.toLowerCase() == "setla") {
     4f2:	4620      	mov	r0, r4
     4f4:	f002 fddc 	bl	30b0 <String::toLowerCase()>
     4f8:	490b      	ldr	r1, [pc, #44]	; (528 <getCommand(String)+0x70>)
     4fa:	f002 fd3d 	bl	2f78 <String::equals(char const*) const>
     4fe:	b950      	cbnz	r0, 516 <getCommand(String)+0x5e>
    } else if (command.toLowerCase() == "switchpcc") {
     500:	4620      	mov	r0, r4
     502:	f002 fdd5 	bl	30b0 <String::toLowerCase()>
     506:	4909      	ldr	r1, [pc, #36]	; (52c <getCommand(String)+0x74>)
     508:	f002 fd36 	bl	2f78 <String::equals(char const*) const>
        return Command::SWITCHPCC;
     50c:	2800      	cmp	r0, #0
     50e:	bf18      	it	ne
     510:	2003      	movne	r0, #3
}
     512:	b004      	add	sp, #16
     514:	bd10      	pop	{r4, pc}
        return Command::SETLA;
     516:	2002      	movs	r0, #2
}
     518:	b004      	add	sp, #16
     51a:	bd10      	pop	{r4, pc}
     51c:	20000370 	.word	0x20000370
     520:	20000ee8 	.word	0x20000ee8
     524:	20000378 	.word	0x20000378
     528:	20000380 	.word	0x20000380
     52c:	20000388 	.word	0x20000388

00000530 <ProcessCommand(String)>:

void ProcessCommand (String serialInput) {
     530:	b530      	push	{r4, r5, lr}
     532:	b08d      	sub	sp, #52	; 0x34
     534:	4604      	mov	r4, r0
    Command command = getCommand(serialInput.substring(0, serialInput.indexOf(" ")));
     536:	4943      	ldr	r1, [pc, #268]	; (644 <ProcessCommand(String)+0x114>)
     538:	a804      	add	r0, sp, #16
     53a:	f002 fc45 	bl	2dc8 <String::String(char const*)>
     53e:	a904      	add	r1, sp, #16
     540:	4620      	mov	r0, r4
     542:	f002 fd4b 	bl	2fdc <String::indexOf(String const&) const>
     546:	2200      	movs	r2, #0
     548:	4603      	mov	r3, r0
     54a:	4621      	mov	r1, r4
     54c:	a808      	add	r0, sp, #32
     54e:	f002 fd83 	bl	3058 <String::substring(unsigned int, unsigned int) const>
     552:	a808      	add	r0, sp, #32
     554:	f7ff ffb0 	bl	4b8 <getCommand(String)>
     558:	4605      	mov	r5, r0
     55a:	a808      	add	r0, sp, #32
     55c:	f002 fbf8 	bl	2d50 <String::~String()>
     560:	a804      	add	r0, sp, #16
     562:	f002 fbf5 	bl	2d50 <String::~String()>
    String args = serialInput.substring(serialInput.indexOf(" ") + 1);
     566:	4937      	ldr	r1, [pc, #220]	; (644 <ProcessCommand(String)+0x114>)
     568:	a808      	add	r0, sp, #32
     56a:	f002 fc2d 	bl	2dc8 <String::String(char const*)>
     56e:	a908      	add	r1, sp, #32
     570:	4620      	mov	r0, r4
     572:	f002 fd33 	bl	2fdc <String::indexOf(String const&) const>
     576:	4621      	mov	r1, r4
     578:	1c42      	adds	r2, r0, #1
     57a:	4668      	mov	r0, sp
     57c:	f002 fd40 	bl	3000 <String::substring(unsigned int) const>
     580:	a808      	add	r0, sp, #32
     582:	f002 fbe5 	bl	2d50 <String::~String()>

    switch (command) {
     586:	2d03      	cmp	r5, #3
     588:	d828      	bhi.n	5dc <ProcessCommand(String)+0xac>
     58a:	e8df f005 	tbb	[pc, r5]
     58e:	3b4f      	.short	0x3b4f
     590:	2c02      	.short	0x2c02
            dacValue = args.toInt();
            dac.setVoltage(dacValue, false);
            Serial.println("DAC set to " + String(dacValue));
            break;
        case Command::SETLA:
            myServo.goalPosition(LA_ID_NUM, args.toInt());
     592:	4668      	mov	r0, sp
     594:	f002 fd9c 	bl	30d0 <String::toInt() const>
     598:	2100      	movs	r1, #0
     59a:	4602      	mov	r2, r0
     59c:	482a      	ldr	r0, [pc, #168]	; (648 <ProcessCommand(String)+0x118>)
     59e:	f000 fe1f 	bl	11e0 <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     5a2:	492a      	ldr	r1, [pc, #168]	; (64c <ProcessCommand(String)+0x11c>)
     5a4:	a808      	add	r0, sp, #32
     5a6:	f002 fc0f 	bl	2dc8 <String::String(char const*)>
            Serial.println("Linear Actuator set to " + String(args.toInt()));
     5aa:	4668      	mov	r0, sp
     5ac:	f002 fd90 	bl	30d0 <String::toInt() const>
     5b0:	220a      	movs	r2, #10
     5b2:	4601      	mov	r1, r0
     5b4:	a804      	add	r0, sp, #16
     5b6:	f002 fc33 	bl	2e20 <String::String(long, unsigned char)>
     5ba:	a904      	add	r1, sp, #16
     5bc:	a808      	add	r0, sp, #32
     5be:	f002 fcd3 	bl	2f68 <operator+(StringSumHelper const&, String const&)>
     5c2:	4601      	mov	r1, r0
     5c4:	4822      	ldr	r0, [pc, #136]	; (650 <ProcessCommand(String)+0x120>)
     5c6:	f002 fb0f 	bl	2be8 <Print::print(String const&)>
     5ca:	4821      	ldr	r0, [pc, #132]	; (650 <ProcessCommand(String)+0x120>)
     5cc:	f002 fb32 	bl	2c34 <Print::println()>
     5d0:	a804      	add	r0, sp, #16
     5d2:	f002 fbbd 	bl	2d50 <String::~String()>
class StringSumHelper : public String
     5d6:	a808      	add	r0, sp, #32
     5d8:	f002 fbba 	bl	2d50 <String::~String()>
            break;
        case Command::SWITCHPCC:
            digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
    }
     5dc:	4668      	mov	r0, sp
     5de:	f002 fbb7 	bl	2d50 <String::~String()>
     5e2:	b00d      	add	sp, #52	; 0x34
     5e4:	bd30      	pop	{r4, r5, pc}
            digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     5e6:	2021      	movs	r0, #33	; 0x21
     5e8:	f002 ff6e 	bl	34c8 <digitalRead>
     5ec:	4601      	mov	r1, r0
     5ee:	2021      	movs	r0, #33	; 0x21
     5f0:	fab1 f181 	clz	r1, r1
     5f4:	0949      	lsrs	r1, r1, #5
     5f6:	f002 ff3d 	bl	3474 <digitalWrite>
     5fa:	4668      	mov	r0, sp
     5fc:	f002 fba8 	bl	2d50 <String::~String()>
     600:	b00d      	add	sp, #52	; 0x34
     602:	bd30      	pop	{r4, r5, pc}
            dacValue = args.toInt();
     604:	4668      	mov	r0, sp
     606:	4c13      	ldr	r4, [pc, #76]	; (654 <ProcessCommand(String)+0x124>)
     608:	f002 fd62 	bl	30d0 <String::toInt() const>
            dac.setVoltage(dacValue, false);
     60c:	2200      	movs	r2, #0
            dacValue = args.toInt();
     60e:	b281      	uxth	r1, r0
            dac.setVoltage(dacValue, false);
     610:	4811      	ldr	r0, [pc, #68]	; (658 <ProcessCommand(String)+0x128>)
            dacValue = args.toInt();
     612:	8021      	strh	r1, [r4, #0]
            dac.setVoltage(dacValue, false);
     614:	f001 fcde 	bl	1fd4 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	StringSumHelper(const char *p) : String(p) {}
     618:	4910      	ldr	r1, [pc, #64]	; (65c <ProcessCommand(String)+0x12c>)
     61a:	a808      	add	r0, sp, #32
     61c:	f002 fbd4 	bl	2dc8 <String::String(char const*)>
            Serial.println("DAC set to " + String(dacValue));
     620:	220a      	movs	r2, #10
     622:	8821      	ldrh	r1, [r4, #0]
     624:	a804      	add	r0, sp, #16
     626:	f002 fbe3 	bl	2df0 <String::String(int, unsigned char)>
     62a:	e7c6      	b.n	5ba <ProcessCommand(String)+0x8a>
     62c:	210f      	movs	r1, #15
     62e:	480c      	ldr	r0, [pc, #48]	; (660 <ProcessCommand(String)+0x130>)
     630:	f004 fbdc 	bl	4dec <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     634:	4806      	ldr	r0, [pc, #24]	; (650 <ProcessCommand(String)+0x120>)
     636:	f002 fafd 	bl	2c34 <Print::println()>
     63a:	4668      	mov	r0, sp
     63c:	f002 fb88 	bl	2d50 <String::~String()>
     640:	b00d      	add	sp, #52	; 0x34
     642:	bd30      	pop	{r4, r5, pc}
     644:	20000404 	.word	0x20000404
     648:	20002b08 	.word	0x20002b08
     64c:	200003ec 	.word	0x200003ec
     650:	20000ee8 	.word	0x20000ee8
     654:	200017b6 	.word	0x200017b6
     658:	20002ad0 	.word	0x20002ad0
     65c:	200003e0 	.word	0x200003e0
     660:	200003d0 	.word	0x200003d0

00000664 <loop>:
void loop () {
     664:	b500      	push	{lr}
     666:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
     668:	f004 fb56 	bl	4d18 <usb_serial_available>
    if (Serial.available() > 0) {
     66c:	2800      	cmp	r0, #0
     66e:	dd14      	ble.n	69a <loop+0x36>
        String serialInput = Serial.readStringUntil('\n');
     670:	2300      	movs	r3, #0
     672:	220a      	movs	r2, #10
     674:	4912      	ldr	r1, [pc, #72]	; (6c0 <loop+0x5c>)
     676:	4668      	mov	r0, sp
     678:	f002 fafa 	bl	2c70 <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     67c:	4669      	mov	r1, sp
     67e:	a804      	add	r0, sp, #16
     680:	f002 fb32 	bl	2ce8 <String::String(String const&)>
     684:	a804      	add	r0, sp, #16
     686:	f7ff ff53 	bl	530 <ProcessCommand(String)>
     68a:	a804      	add	r0, sp, #16
     68c:	f002 fb60 	bl	2d50 <String::~String()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     690:	f004 fbe0 	bl	4e54 <usb_serial_flush_output>
    }
     694:	4668      	mov	r0, sp
     696:	f002 fb5b 	bl	2d50 <String::~String()>
     69a:	4a0a      	ldr	r2, [pc, #40]	; (6c4 <loop+0x60>)
    if (printTimer < millis()) {
     69c:	4b0a      	ldr	r3, [pc, #40]	; (6c8 <loop+0x64>)
     69e:	6811      	ldr	r1, [r2, #0]
     6a0:	681a      	ldr	r2, [r3, #0]
     6a2:	428a      	cmp	r2, r1
     6a4:	d302      	bcc.n	6ac <loop+0x48>
}
     6a6:	b009      	add	sp, #36	; 0x24
     6a8:	f85d fb04 	ldr.w	pc, [sp], #4
        printTimer += printTimerInterval;
     6ac:	4907      	ldr	r1, [pc, #28]	; (6cc <loop+0x68>)
     6ae:	6809      	ldr	r1, [r1, #0]
     6b0:	440a      	add	r2, r1
     6b2:	601a      	str	r2, [r3, #0]
}
     6b4:	b009      	add	sp, #36	; 0x24
     6b6:	f85d eb04 	ldr.w	lr, [sp], #4
        PrintOutput();
     6ba:	f7ff bdbb 	b.w	234 <PrintOutput()>
     6be:	bf00      	nop
     6c0:	20000ee8 	.word	0x20000ee8
     6c4:	200035bc 	.word	0x200035bc
     6c8:	20003568 	.word	0x20003568
     6cc:	2000179c 	.word	0x2000179c

000006d0 <_GLOBAL__sub_I_myServo>:
     6d0:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     6d2:	4c0a      	ldr	r4, [pc, #40]	; (6fc <_GLOBAL__sub_I_myServo+0x2c>)
     6d4:	2301      	movs	r3, #1
     6d6:	2210      	movs	r2, #16
     6d8:	4909      	ldr	r1, [pc, #36]	; (700 <_GLOBAL__sub_I_myServo+0x30>)
     6da:	4620      	mov	r0, r4
     6dc:	f000 fb08 	bl	cf0 <PA12::PA12(HardwareSerial*, int, bool)>
     6e0:	4a08      	ldr	r2, [pc, #32]	; (704 <_GLOBAL__sub_I_myServo+0x34>)
     6e2:	4909      	ldr	r1, [pc, #36]	; (708 <_GLOBAL__sub_I_myServo+0x38>)
     6e4:	4620      	mov	r0, r4
     6e6:	f004 fcf3 	bl	50d0 <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     6ea:	4808      	ldr	r0, [pc, #32]	; (70c <_GLOBAL__sub_I_myServo+0x3c>)
     6ec:	f000 fe1e 	bl	132c <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     6f0:	4807      	ldr	r0, [pc, #28]	; (710 <_GLOBAL__sub_I_myServo+0x40>)
     6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_MCP4725 dac;
     6f6:	f001 bc63 	b.w	1fc0 <Adafruit_MCP4725::Adafruit_MCP4725()>
     6fa:	bf00      	nop
     6fc:	20002b08 	.word	0x20002b08
     700:	20001d78 	.word	0x20001d78
     704:	200011bc 	.word	0x200011bc
     708:	00000ccd 	.word	0x00000ccd
     70c:	20002af8 	.word	0x20002af8
     710:	20002ad0 	.word	0x20002ad0

00000714 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     714:	2000      	movs	r0, #0
     716:	4770      	bx	lr

00000718 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     718:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     71c:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     720:	1a10      	subs	r0, r2, r0
     722:	4770      	bx	lr

00000724 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     724:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     728:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     72c:	429a      	cmp	r2, r3
     72e:	d905      	bls.n	73c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     730:	1c5a      	adds	r2, r3, #1
     732:	4403      	add	r3, r0
     734:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     738:	7e98      	ldrb	r0, [r3, #26]
     73a:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     73c:	f04f 30ff 	mov.w	r0, #4294967295
	}
     740:	4770      	bx	lr
     742:	bf00      	nop

00000744 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     744:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     748:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     74c:	429a      	cmp	r2, r3
     74e:	d902      	bls.n	756 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     750:	4418      	add	r0, r3
     752:	7e80      	ldrb	r0, [r0, #26]
     754:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     756:	f04f 30ff 	mov.w	r0, #4294967295
	}
     75a:	4770      	bx	lr

0000075c <TwoWire::flush()>:
	virtual void flush(void) {
	}
     75c:	4770      	bx	lr
     75e:	bf00      	nop

00000760 <TwoWire::write(unsigned char)>:
{
     760:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     762:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     766:	b178      	cbz	r0, 788 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     768:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     76c:	2a88      	cmp	r2, #136	; 0x88
     76e:	d903      	bls.n	778 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     770:	2201      	movs	r2, #1
			return 0;
     772:	2000      	movs	r0, #0
     774:	605a      	str	r2, [r3, #4]
     776:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     778:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     77c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     77e:	441a      	add	r2, r3
     780:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     784:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     788:	4770      	bx	lr
     78a:	bf00      	nop

0000078c <TwoWire::write(unsigned char const*, unsigned int)>:
{
     78c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     78e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     792:	b90c      	cbnz	r4, 798 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     794:	4620      	mov	r0, r4
     796:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     798:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     79c:	4605      	mov	r5, r0
     79e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     7a2:	42a2      	cmp	r2, r4
     7a4:	d80d      	bhi.n	7c2 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     7a6:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     7a8:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     7ac:	4622      	mov	r2, r4
     7ae:	4418      	add	r0, r3
     7b0:	f002 fedc 	bl	356c <memcpy>
		txBufferLength += quantity;
     7b4:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     7b8:	4620      	mov	r0, r4
		txBufferLength += quantity;
     7ba:	4423      	add	r3, r4
     7bc:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     7c0:	bd38      	pop	{r3, r4, r5, pc}
     7c2:	2201      	movs	r2, #1
     7c4:	6042      	str	r2, [r0, #4]
     7c6:	e7ef      	b.n	7a8 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000007c8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
     7c8:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
     7ca:	2500      	movs	r5, #0
     7cc:	4613      	mov	r3, r2
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     7ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     7d2:	4604      	mov	r4, r0
     7d4:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
     7d8:	4815      	ldr	r0, [pc, #84]	; (830 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
     7da:	2288      	movs	r2, #136	; 0x88
     7dc:	6121      	str	r1, [r4, #16]
     7de:	4629      	mov	r1, r5
     7e0:	6020      	str	r0, [r4, #0]
     7e2:	f104 001a 	add.w	r0, r4, #26
     7e6:	6163      	str	r3, [r4, #20]
     7e8:	7325      	strb	r5, [r4, #12]
     7ea:	7625      	strb	r5, [r4, #24]
     7ec:	7665      	strb	r5, [r4, #25]
     7ee:	f005 fc0d 	bl	600c <memset>
     7f2:	2289      	movs	r2, #137	; 0x89
     7f4:	4629      	mov	r1, r5
     7f6:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
     7fa:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
     7fe:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
     802:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
     806:	f005 fc01 	bl	600c <memset>
	}
     80a:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
     80c:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
     810:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     814:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
     818:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
     81c:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
     820:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
     824:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
     828:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
     82c:	bd38      	pop	{r3, r4, r5, pc}
     82e:	bf00      	nop
     830:	20000620 	.word	0x20000620

00000834 <TwoWire::force_clock()>:
{
     834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     838:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     83c:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     83e:	7e01      	ldrb	r1, [r0, #24]
{
     840:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     842:	7e43      	ldrb	r3, [r0, #25]
{
     844:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     846:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     84a:	4a38      	ldr	r2, [pc, #224]	; (92c <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     84c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     850:	4f37      	ldr	r7, [pc, #220]	; (930 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     852:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     858:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     85c:	0109      	lsls	r1, r1, #4
     85e:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     860:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     864:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     868:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     86c:	011b      	lsls	r3, r3, #4
     86e:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     870:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     872:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     876:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     87a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     87e:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     880:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     882:	492c      	ldr	r1, [pc, #176]	; (934 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     884:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     886:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     88a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     88c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     890:	686b      	ldr	r3, [r5, #4]
     892:	4333      	orrs	r3, r6
     894:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     896:	4b28      	ldr	r3, [pc, #160]	; (938 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     898:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     89a:	683a      	ldr	r2, [r7, #0]
     89c:	fba3 3202 	umull	r3, r2, r3, r2
     8a0:	0c92      	lsrs	r2, r2, #18
     8a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     8a6:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8a8:	684b      	ldr	r3, [r1, #4]
     8aa:	1b1b      	subs	r3, r3, r4
     8ac:	429a      	cmp	r2, r3
     8ae:	d8fb      	bhi.n	8a8 <TwoWire::force_clock()+0x74>
     8b0:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     8b4:	4a1f      	ldr	r2, [pc, #124]	; (934 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8b6:	f8df e080 	ldr.w	lr, [pc, #128]	; 938 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
     8ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     8be:	4203      	tst	r3, r0
     8c0:	d002      	beq.n	8c8 <TwoWire::force_clock()+0x94>
     8c2:	68ab      	ldr	r3, [r5, #8]
     8c4:	4233      	tst	r3, r6
     8c6:	d12f      	bne.n	928 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
     8c8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     8cc:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8ce:	6839      	ldr	r1, [r7, #0]
     8d0:	fbae 3101 	umull	r3, r1, lr, r1
     8d4:	0c89      	lsrs	r1, r1, #18
     8d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8da:	6853      	ldr	r3, [r2, #4]
     8dc:	1b1b      	subs	r3, r3, r4
     8de:	4299      	cmp	r1, r3
     8e0:	d8fb      	bhi.n	8da <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
     8e2:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     8e6:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     8e8:	6839      	ldr	r1, [r7, #0]
     8ea:	fbae 3101 	umull	r3, r1, lr, r1
     8ee:	0c89      	lsrs	r1, r1, #18
     8f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     8f4:	6853      	ldr	r3, [r2, #4]
     8f6:	1b1b      	subs	r3, r3, r4
     8f8:	4299      	cmp	r1, r3
     8fa:	d8fb      	bhi.n	8f4 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     8fc:	f1bc 0c01 	subs.w	ip, ip, #1
     900:	d1db      	bne.n	8ba <TwoWire::force_clock()+0x86>
	bool ret = false;
     902:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     904:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     908:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     90a:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     90e:	68db      	ldr	r3, [r3, #12]
     910:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     914:	f899 3019 	ldrb.w	r3, [r9, #25]
     918:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     91c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     920:	6013      	str	r3, [r2, #0]
}
     922:	b003      	add	sp, #12
     924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     928:	2001      	movs	r0, #1
     92a:	e7eb      	b.n	904 <TwoWire::force_clock()+0xd0>
     92c:	200008d4 	.word	0x200008d4
     930:	20000ee4 	.word	0x20000ee4
     934:	e0001000 	.word	0xe0001000
     938:	431bde83 	.word	0x431bde83

0000093c <TwoWire::wait_idle()>:
	return systick_millis_count;
     93c:	4a0e      	ldr	r2, [pc, #56]	; (978 <TwoWire::wait_idle()+0x3c>)
{
     93e:	b510      	push	{r4, lr}
     940:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
     942:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     944:	e005      	b.n	952 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     946:	01db      	lsls	r3, r3, #7
     948:	d407      	bmi.n	95a <TwoWire::wait_idle()+0x1e>
     94a:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     94c:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     94e:	2b10      	cmp	r3, #16
     950:	d808      	bhi.n	964 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     952:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     954:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     958:	d1f5      	bne.n	946 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     95a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     95e:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     960:	6163      	str	r3, [r4, #20]
}
     962:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     964:	f7ff ff66 	bl	834 <TwoWire::force_clock()>
     968:	2800      	cmp	r0, #0
     96a:	d0fa      	beq.n	962 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     96c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     970:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     972:	6163      	str	r3, [r4, #20]
	return true;
     974:	e7f5      	b.n	962 <TwoWire::wait_idle()+0x26>
     976:	bf00      	nop
     978:	200035bc 	.word	0x200035bc

0000097c <TwoWire::endTransmission(unsigned char)>:
{
     97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     980:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
     984:	f1ba 0f00 	cmp.w	sl, #0
     988:	d058      	beq.n	a3c <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
     98a:	4681      	mov	r9, r0
     98c:	4688      	mov	r8, r1
     98e:	f7ff ffd5 	bl	93c <TwoWire::wait_idle()>
     992:	2800      	cmp	r0, #0
     994:	d052      	beq.n	a3c <TwoWire::endTransmission(unsigned char)+0xc0>
     996:	4e37      	ldr	r6, [pc, #220]	; (a74 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     998:	2400      	movs	r4, #0
     99a:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     99c:	e016      	b.n	9cc <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
     99e:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     9a0:	051a      	lsls	r2, r3, #20
     9a2:	d444      	bmi.n	a2e <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
     9a4:	0558      	lsls	r0, r3, #21
     9a6:	d458      	bmi.n	a5a <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     9a8:	0499      	lsls	r1, r3, #18
     9aa:	d44c      	bmi.n	a46 <TwoWire::endTransmission(unsigned char)+0xca>
     9ac:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     9ae:	1bd2      	subs	r2, r2, r7
     9b0:	2a32      	cmp	r2, #50	; 0x32
     9b2:	d848      	bhi.n	a46 <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
     9b4:	4554      	cmp	r4, sl
     9b6:	d907      	bls.n	9c8 <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
     9b8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     9ba:	0752      	lsls	r2, r2, #29
     9bc:	d104      	bne.n	9c8 <TwoWire::endTransmission(unsigned char)+0x4c>
     9be:	059b      	lsls	r3, r3, #22
     9c0:	d455      	bmi.n	a6e <TwoWire::endTransmission(unsigned char)+0xf2>
     9c2:	f1b8 0f00 	cmp.w	r8, #0
     9c6:	d052      	beq.n	a6e <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
     9c8:	f004 fa8e 	bl	4ee8 <yield>
		if (tx_index <= tx_len) {
     9cc:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9ce:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
     9d2:	d8e4      	bhi.n	99e <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9d4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     9d6:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     9d8:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     9dc:	d4df      	bmi.n	99e <TwoWire::endTransmission(unsigned char)+0x22>
     9de:	e013      	b.n	a08 <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9e0:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     9e4:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     9e6:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     9ec:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     9ee:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     9f0:	d027      	beq.n	a42 <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
     9f2:	458a      	cmp	sl, r1
				fifo_used++;
     9f4:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9f8:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     9fc:	d90e      	bls.n	a1c <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     9fe:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     a02:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     a04:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     a06:	d0ca      	beq.n	99e <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
     a08:	2101      	movs	r1, #1
				if (tx_index == 0) {
     a0a:	2c00      	cmp	r4, #0
     a0c:	d0e8      	beq.n	9e0 <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     a0e:	4621      	mov	r1, r4
				fifo_used++;
     a10:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     a12:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     a14:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     a16:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     a1a:	d8f0      	bhi.n	9fe <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     a1c:	f1b8 0f00 	cmp.w	r8, #0
     a20:	d0bd      	beq.n	99e <TwoWire::endTransmission(unsigned char)+0x22>
     a22:	f44f 7300 	mov.w	r3, #512	; 0x200
     a26:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
     a28:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     a2a:	051a      	lsls	r2, r3, #20
     a2c:	d5ba      	bpl.n	9a4 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a2e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     a30:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a32:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a36:	612b      	str	r3, [r5, #16]
}
     a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
     a3c:	2004      	movs	r0, #4
}
     a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     a42:	2401      	movs	r4, #1
     a44:	e7ab      	b.n	99e <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a46:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     a48:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     a4c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a52:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     a54:	662a      	str	r2, [r5, #96]	; 0x60
}
     a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a5a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     a60:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     a62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     a66:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     a68:	662a      	str	r2, [r5, #96]	; 0x60
}
     a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
     a6e:	2000      	movs	r0, #0
     a70:	e7e5      	b.n	a3e <TwoWire::endTransmission(unsigned char)+0xc2>
     a72:	bf00      	nop
     a74:	200035bc 	.word	0x200035bc

00000a78 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a7c:	4682      	mov	sl, r0
     a7e:	460c      	mov	r4, r1
     a80:	4615      	mov	r5, r2
     a82:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
     a84:	f7ff ff5a 	bl	93c <TwoWire::wait_idle()>
     a88:	2800      	cmp	r0, #0
     a8a:	f000 808f 	beq.w	bac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
     a8e:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
     a90:	2100      	movs	r1, #0
     a92:	2d01      	cmp	r5, #1
     a94:	f8df 811c 	ldr.w	r8, [pc, #284]	; bb4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     a98:	b2db      	uxtb	r3, r3
     a9a:	f240 4601 	movw	r6, #1025	; 0x401
     a9e:	bf38      	it	cc
     aa0:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     aa2:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     aa4:	431e      	orrs	r6, r3
     aa6:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
     aaa:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     aae:	e01e      	b.n	aee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
     ab0:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     ab4:	2b87      	cmp	r3, #135	; 0x87
     ab6:	d93d      	bls.n	b34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
     ab8:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     aba:	050b      	lsls	r3, r1, #20
     abc:	d457      	bmi.n	b6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     abe:	f411 5f10 	tst.w	r1, #9216	; 0x2400
     ac2:	d167      	bne.n	b94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
     ac4:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     ac8:	eba3 0309 	sub.w	r3, r3, r9
     acc:	2b32      	cmp	r3, #50	; 0x32
     ace:	d861      	bhi.n	b94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
     ad0:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     ad4:	42ab      	cmp	r3, r5
     ad6:	d308      	bcc.n	aea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     ad8:	2c02      	cmp	r4, #2
     ada:	d906      	bls.n	aea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
     adc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     ade:	0758      	lsls	r0, r3, #29
     ae0:	d103      	bne.n	aea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     ae2:	058b      	lsls	r3, r1, #22
     ae4:	d447      	bmi.n	b76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
     ae6:	2f00      	cmp	r7, #0
     ae8:	d045      	beq.n	b76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
     aea:	f004 f9fd 	bl	4ee8 <yield>
		if (tx_state < 3) {
     aee:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     af0:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
     af4:	d8dc      	bhi.n	ab0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     af6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
     af8:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     afa:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
     afe:	d4d7      	bmi.n	ab0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
     b00:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     b02:	1e6c      	subs	r4, r5, #1
     b04:	4408      	add	r0, r1
     b06:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
     b0a:	b941      	cbnz	r1, b1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     b0c:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
     b0e:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
     b10:	1a43      	subs	r3, r0, r1
     b12:	2b03      	cmp	r3, #3
     b14:	d801      	bhi.n	b1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
     b16:	2902      	cmp	r1, #2
     b18:	d9f7      	bls.n	b0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
     b1a:	460c      	mov	r4, r1
     b1c:	e7c8      	b.n	ab0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
     b1e:	2901      	cmp	r1, #1
     b20:	d031      	beq.n	b86 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     b22:	b117      	cbz	r7, b2a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
     b24:	f44f 7300 	mov.w	r3, #512	; 0x200
     b28:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
     b2a:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
     b2e:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
     b30:	2b87      	cmp	r3, #135	; 0x87
     b32:	d8c1      	bhi.n	ab8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b34:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b36:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b3a:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b3e:	d0bb      	beq.n	ab8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     b40:	1c59      	adds	r1, r3, #1
     b42:	449e      	add	lr, r3
     b44:	3319      	adds	r3, #25
     b46:	b2c9      	uxtb	r1, r1
     b48:	fa5f fe8e 	uxtb.w	lr, lr
     b4c:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
     b50:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b54:	1c48      	adds	r0, r1, #1
     b56:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
     b58:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b5c:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
     b5e:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     b62:	d0a9      	beq.n	ab8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     b64:	2989      	cmp	r1, #137	; 0x89
     b66:	d1f3      	bne.n	b50 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
     b68:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     b6a:	050b      	lsls	r3, r1, #20
     b6c:	d5a7      	bpl.n	abe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b6e:	6913      	ldr	r3, [r2, #16]
     b70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     b74:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     b76:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b78:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     b7c:	d105      	bne.n	b8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
     b7e:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
     b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     b86:	6614      	str	r4, [r2, #96]	; 0x60
     b88:	e7c1      	b.n	b0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     b8a:	6913      	ldr	r3, [r2, #16]
     b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b90:	6113      	str	r3, [r2, #16]
     b92:	e7f4      	b.n	b7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b94:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     b96:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     b9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     b9e:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     ba0:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     ba2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     ba4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     ba8:	d0e9      	beq.n	b7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
     baa:	e7ee      	b.n	b8a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
     bac:	2004      	movs	r0, #4
}
     bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bb2:	bf00      	nop
     bb4:	200035bc 	.word	0x200035bc

00000bb8 <TwoWire::isr()>:
	uint32_t status = port->SSR;
     bb8:	6903      	ldr	r3, [r0, #16]
{
     bba:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
     bbc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
     bc0:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
     bc2:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
     bc6:	d001      	beq.n	bcc <TwoWire::isr()+0x14>
     bc8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     bcc:	07ae      	lsls	r6, r5, #30
     bce:	d50b      	bpl.n	be8 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
     bd0:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
     bd4:	0408      	lsls	r0, r1, #16
     bd6:	d53e      	bpl.n	c56 <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
     bd8:	2200      	movs	r2, #0
     bda:	2001      	movs	r0, #1
     bdc:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
     be0:	4422      	add	r2, r4
     be2:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
     be6:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     be8:	07ea      	lsls	r2, r5, #31
     bea:	d510      	bpl.n	c0e <TwoWire::isr()+0x56>
		if (!transmitting) {
     bec:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
     bf0:	b1f6      	cbz	r6, c30 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
     bf2:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
     bf6:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
     bfa:	42b2      	cmp	r2, r6
     bfc:	d927      	bls.n	c4e <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
     bfe:	1c72      	adds	r2, r6, #1
     c00:	4426      	add	r6, r4
     c02:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
     c06:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
     c0a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
     c0e:	05ab      	lsls	r3, r5, #22
     c10:	d50d      	bpl.n	c2e <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
     c12:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
     c16:	b118      	cbz	r0, c20 <TwoWire::isr()+0x68>
     c18:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
     c1c:	b103      	cbz	r3, c20 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
     c1e:	4798      	blx	r3
		rxBufferIndex = 0;
     c20:	2300      	movs	r3, #0
     c22:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
     c26:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
     c2a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
     c2e:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
     c30:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
     c34:	b10a      	cbz	r2, c3a <TwoWire::isr()+0x82>
				(*user_onRequest)();
     c36:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
     c38:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
     c3a:	2200      	movs	r2, #0
     c3c:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
     c40:	2201      	movs	r2, #1
     c42:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
     c46:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
     c4a:	42b2      	cmp	r2, r6
     c4c:	d8d7      	bhi.n	bfe <TwoWire::isr()+0x46>
			port->STDR = 0;
     c4e:	2200      	movs	r2, #0
     c50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
     c54:	e7db      	b.n	c0e <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
     c56:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
     c5a:	2a87      	cmp	r2, #135	; 0x87
     c5c:	d8c4      	bhi.n	be8 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
     c5e:	1c50      	adds	r0, r2, #1
     c60:	b2c0      	uxtb	r0, r0
     c62:	e7bd      	b.n	be0 <TwoWire::isr()+0x28>

00000c64 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
     c64:	4801      	ldr	r0, [pc, #4]	; (c6c <lpi2c1_isr()+0x8>)
     c66:	f7ff bfa7 	b.w	bb8 <TwoWire::isr()>
     c6a:	bf00      	nop
     c6c:	20002078 	.word	0x20002078

00000c70 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
     c70:	4801      	ldr	r0, [pc, #4]	; (c78 <lpi2c3_isr()+0x8>)
     c72:	f7ff bfa1 	b.w	bb8 <TwoWire::isr()>
     c76:	bf00      	nop
     c78:	200021b8 	.word	0x200021b8

00000c7c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
     c7c:	4801      	ldr	r0, [pc, #4]	; (c84 <lpi2c4_isr()+0x8>)
     c7e:	f7ff bf9b 	b.w	bb8 <TwoWire::isr()>
     c82:	bf00      	nop
     c84:	200022f8 	.word	0x200022f8

00000c88 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
     c88:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
     c8a:	4c09      	ldr	r4, [pc, #36]	; (cb0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
     c8c:	4909      	ldr	r1, [pc, #36]	; (cb4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
     c8e:	4622      	mov	r2, r4
     c90:	4809      	ldr	r0, [pc, #36]	; (cb8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
     c92:	f7ff fd99 	bl	7c8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
     c96:	f104 0250 	add.w	r2, r4, #80	; 0x50
     c9a:	4908      	ldr	r1, [pc, #32]	; (cbc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
     c9c:	4808      	ldr	r0, [pc, #32]	; (cc0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
     c9e:	f7ff fd93 	bl	7c8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
     ca2:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
     ca6:	4907      	ldr	r1, [pc, #28]	; (cc4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
     ca8:	4807      	ldr	r0, [pc, #28]	; (cc8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
     caa:	f7ff fd8d 	bl	7c8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
     cae:	bd10      	pop	{r4, pc}
     cb0:	60001ff8 	.word	0x60001ff8
     cb4:	403f0000 	.word	0x403f0000
     cb8:	20002078 	.word	0x20002078
     cbc:	403f8000 	.word	0x403f8000
     cc0:	200021b8 	.word	0x200021b8
     cc4:	403fc000 	.word	0x403fc000
     cc8:	200022f8 	.word	0x200022f8

00000ccc <PA12::~PA12()>:
}
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <PA12::~PA12()>:
PA12::~PA12() {
     cd0:	b510      	push	{r4, lr}
     cd2:	4604      	mov	r4, r0
}
     cd4:	f640 2148 	movw	r1, #2632	; 0xa48
     cd8:	f002 fce4 	bl	36a4 <operator delete(void*, unsigned int)>
     cdc:	4620      	mov	r0, r4
     cde:	bd10      	pop	{r4, pc}

00000ce0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
     ce0:	f004 b81a 	b.w	4d18 <usb_serial_available>

00000ce4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
     ce4:	f004 b85c 	b.w	4da0 <usb_serial_getchar>

00000ce8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ce8:	4608      	mov	r0, r1
     cea:	f004 b869 	b.w	4dc0 <usb_serial_putchar>
     cee:	bf00      	nop

00000cf0 <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
     cf0:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
     cf2:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
     cf6:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
     cf8:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
     cfa:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
     cfc:	4a02      	ldr	r2, [pc, #8]	; (d08 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
     cfe:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
     d00:	e9c0 2300 	strd	r2, r3, [r0]
}
     d04:	4770      	bx	lr
     d06:	bf00      	nop
     d08:	20000610 	.word	0x20000610

00000d0c <PA12::begin(int)>:
void PA12::begin(int baud){
     d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d0e:	4604      	mov	r4, r0
     d10:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
     d12:	7b00      	ldrb	r0, [r0, #12]
     d14:	2101      	movs	r1, #1
     d16:	f002 fbe9 	bl	34ec <pinMode>
	if(PA12_Serial_Type)
     d1a:	6866      	ldr	r6, [r4, #4]
     d1c:	b30e      	cbz	r6, d62 <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     d1e:	68a6      	ldr	r6, [r4, #8]
     d20:	4628      	mov	r0, r5
     d22:	f000 faaf 	bl	1284 <irp_get_baudrate>
     d26:	4601      	mov	r1, r0
     d28:	4630      	mov	r0, r6
     d2a:	f000 fadb 	bl	12e4 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
     d2e:	7c21      	ldrb	r1, [r4, #16]
     d30:	7b20      	ldrb	r0, [r4, #12]
     d32:	f002 fb9f 	bl	3474 <digitalWrite>
	mIRPtxrxStatus = 0;
     d36:	2100      	movs	r1, #0
	SmartDelayFlag=1;
     d38:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
     d3a:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
     d3c:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
     d3e:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
     d42:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
     d46:	2104      	movs	r1, #4
	SmartDelayFlag=1;
     d48:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
     d4c:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
     d50:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
     d54:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
     d58:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
     d5c:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
     d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
     d62:	68a7      	ldr	r7, [r4, #8]
     d64:	4628      	mov	r0, r5
     d66:	f000 fa8d 	bl	1284 <irp_get_baudrate>
     d6a:	4632      	mov	r2, r6
     d6c:	4601      	mov	r1, r0
     d6e:	4638      	mov	r0, r7
     d70:	f001 faa8 	bl	22c4 <HardwareSerial::begin(unsigned long, unsigned short)>
     d74:	e7db      	b.n	d2e <PA12::begin(int)+0x22>
     d76:	bf00      	nop

00000d78 <PA12::readRaw()>:
int PA12::readRaw(void){
     d78:	b510      	push	{r4, lr}
     d7a:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
     d7c:	6880      	ldr	r0, [r0, #8]
     d7e:	4a0c      	ldr	r2, [pc, #48]	; (db0 <PA12::readRaw()+0x38>)
     d80:	6803      	ldr	r3, [r0, #0]
     d82:	691b      	ldr	r3, [r3, #16]
     d84:	4293      	cmp	r3, r2
     d86:	d10d      	bne.n	da4 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
     d88:	f003 ffc6 	bl	4d18 <usb_serial_available>
     d8c:	b148      	cbz	r0, da2 <PA12::readRaw()+0x2a>
     d8e:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
     d90:	4a08      	ldr	r2, [pc, #32]	; (db4 <PA12::readRaw()+0x3c>)
     d92:	6803      	ldr	r3, [r0, #0]
     d94:	695b      	ldr	r3, [r3, #20]
     d96:	4293      	cmp	r3, r2
     d98:	d106      	bne.n	da8 <PA12::readRaw()+0x30>
}
     d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
     d9e:	f003 bfff 	b.w	4da0 <usb_serial_getchar>
     da2:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
     da4:	4798      	blx	r3
     da6:	e7f1      	b.n	d8c <PA12::readRaw()+0x14>
}
     da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
     dac:	4718      	bx	r3
     dae:	bf00      	nop
     db0:	00000ce1 	.word	0x00000ce1
     db4:	00000ce5 	.word	0x00000ce5

00000db8 <PA12::available()>:
		return PA12_Serial->available();
     db8:	6880      	ldr	r0, [r0, #8]
     dba:	4a04      	ldr	r2, [pc, #16]	; (dcc <PA12::available()+0x14>)
     dbc:	6803      	ldr	r3, [r0, #0]
     dbe:	691b      	ldr	r3, [r3, #16]
     dc0:	4293      	cmp	r3, r2
     dc2:	d101      	bne.n	dc8 <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
     dc4:	f003 bfa8 	b.w	4d18 <usb_serial_available>
     dc8:	4718      	bx	r3
     dca:	bf00      	nop
     dcc:	00000ce1 	.word	0x00000ce1

00000dd0 <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
     dd0:	b570      	push	{r4, r5, r6, lr}
     dd2:	4d0e      	ldr	r5, [pc, #56]	; (e0c <PA12::clearBuffer()+0x3c>)
     dd4:	4604      	mov	r4, r0
     dd6:	4e0e      	ldr	r6, [pc, #56]	; (e10 <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
     dd8:	68a0      	ldr	r0, [r4, #8]
     dda:	6803      	ldr	r3, [r0, #0]
     ddc:	691b      	ldr	r3, [r3, #16]
     dde:	42ab      	cmp	r3, r5
     de0:	d10e      	bne.n	e00 <PA12::clearBuffer()+0x30>
     de2:	f003 ff99 	bl	4d18 <usb_serial_available>
	while((this->available()))
     de6:	b170      	cbz	r0, e06 <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
     de8:	68a0      	ldr	r0, [r4, #8]
     dea:	6803      	ldr	r3, [r0, #0]
     dec:	695b      	ldr	r3, [r3, #20]
     dee:	42b3      	cmp	r3, r6
     df0:	d10a      	bne.n	e08 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
     df2:	f003 ffd5 	bl	4da0 <usb_serial_getchar>
		return PA12_Serial->available();
     df6:	68a0      	ldr	r0, [r4, #8]
     df8:	6803      	ldr	r3, [r0, #0]
     dfa:	691b      	ldr	r3, [r3, #16]
     dfc:	42ab      	cmp	r3, r5
     dfe:	d0f0      	beq.n	de2 <PA12::clearBuffer()+0x12>
     e00:	4798      	blx	r3
	while((this->available()))
     e02:	2800      	cmp	r0, #0
     e04:	d1f0      	bne.n	de8 <PA12::clearBuffer()+0x18>
}
     e06:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
     e08:	4798      	blx	r3
     e0a:	e7e5      	b.n	dd8 <PA12::clearBuffer()+0x8>
     e0c:	00000ce1 	.word	0x00000ce1
     e10:	00000ce5 	.word	0x00000ce5

00000e14 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e18:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
     e1a:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     e1c:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e1e:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
     e20:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
     e22:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
     e26:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e2a:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
     e2c:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
     e30:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
     e34:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
     e38:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
     e3c:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
     e40:	dd40      	ble.n	ec4 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
     e42:	f600 010c 	addw	r1, r0, #2060	; 0x80c
     e46:	00aa      	lsls	r2, r5, #2
     e48:	f500 6085 	add.w	r0, r0, #1064	; 0x428
     e4c:	f005 f862 	bl	5f14 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e50:	1dab      	adds	r3, r5, #6
     e52:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
     e56:	2000      	movs	r0, #0
     e58:	2203      	movs	r2, #3
     e5a:	e001      	b.n	e60 <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
     e5c:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e60:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
     e62:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     e64:	4293      	cmp	r3, r2
     e66:	dcf9      	bgt.n	e5c <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     e68:	43c0      	mvns	r0, r0
     e6a:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e6e:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
     e70:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
     e74:	7b20      	ldrb	r0, [r4, #12]
     e76:	f002 fafd 	bl	3474 <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     e7a:	2e00      	cmp	r6, #0
     e7c:	dd17      	ble.n	eae <PA12::txPacket(int, int, int)+0x9a>
     e7e:	f204 480c 	addw	r8, r4, #1036	; 0x40c
     e82:	2500      	movs	r5, #0
     e84:	4f13      	ldr	r7, [pc, #76]	; (ed4 <PA12::txPacket(int, int, int)+0xc0>)
     e86:	e004      	b.n	e92 <PA12::txPacket(int, int, int)+0x7e>
     e88:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     e8a:	f003 ff99 	bl	4dc0 <usb_serial_putchar>
     e8e:	42ae      	cmp	r6, r5
     e90:	d00d      	beq.n	eae <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
     e92:	68a2      	ldr	r2, [r4, #8]
     e94:	f858 0f04 	ldr.w	r0, [r8, #4]!
     e98:	6813      	ldr	r3, [r2, #0]
     e9a:	b2c0      	uxtb	r0, r0
     e9c:	681b      	ldr	r3, [r3, #0]
     e9e:	42bb      	cmp	r3, r7
     ea0:	d0f2      	beq.n	e88 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
     ea2:	3501      	adds	r5, #1
PA12_Serial->write(value);
     ea4:	4601      	mov	r1, r0
     ea6:	4610      	mov	r0, r2
     ea8:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
     eaa:	42ae      	cmp	r6, r5
     eac:	d1f1      	bne.n	e92 <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
     eae:	68a0      	ldr	r0, [r4, #8]
     eb0:	6803      	ldr	r3, [r0, #0]
     eb2:	68db      	ldr	r3, [r3, #12]
     eb4:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
     eb6:	7b20      	ldrb	r0, [r4, #12]
     eb8:	7c61      	ldrb	r1, [r4, #17]
     eba:	f002 fadb 	bl	3474 <digitalWrite>
}
     ebe:	4630      	mov	r0, r6
     ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
     ec4:	1dab      	adds	r3, r5, #6
     ec6:	2b03      	cmp	r3, #3
     ec8:	dcc3      	bgt.n	e52 <PA12::txPacket(int, int, int)+0x3e>
     eca:	f04f 30ff 	mov.w	r0, #4294967295
     ece:	2303      	movs	r3, #3
     ed0:	e7cb      	b.n	e6a <PA12::txPacket(int, int, int)+0x56>
     ed2:	bf00      	nop
     ed4:	00000ce9 	.word	0x00000ce9

00000ed8 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
     ed8:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
     eda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ede:	4689      	mov	r9, r1
     ee0:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
     ee2:	d046      	beq.n	f72 <PA12::rxPacket(int)+0x9a>
     ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     ee8:	4299      	cmp	r1, r3
     eea:	d042      	beq.n	f72 <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
     eec:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
     ef0:	f1b9 0f00 	cmp.w	r9, #0
     ef4:	dd66      	ble.n	fc4 <PA12::rxPacket(int)+0xec>
     ef6:	f104 0a10 	add.w	sl, r4, #16
     efa:	3602      	adds	r6, #2
     efc:	2700      	movs	r7, #0
     efe:	4d5a      	ldr	r5, [pc, #360]	; (1068 <PA12::rxPacket(int)+0x190>)
     f00:	46d0      	mov	r8, sl
		ulCounter = 0;
     f02:	f04f 0b00 	mov.w	fp, #0
     f06:	e007      	b.n	f18 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
     f08:	f003 ff06 	bl	4d18 <usb_serial_available>
     f0c:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     f0e:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     f12:	b963      	cbnz	r3, f2e <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
     f14:	45b3      	cmp	fp, r6
     f16:	d02f      	beq.n	f78 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
     f18:	68a0      	ldr	r0, [r4, #8]
     f1a:	6803      	ldr	r3, [r0, #0]
     f1c:	691b      	ldr	r3, [r3, #16]
     f1e:	42ab      	cmp	r3, r5
     f20:	d0f2      	beq.n	f08 <PA12::rxPacket(int)+0x30>
     f22:	4798      	blx	r3
     f24:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
     f26:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
     f2a:	2b00      	cmp	r3, #0
     f2c:	d0f2      	beq.n	f14 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
     f2e:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
     f30:	4620      	mov	r0, r4
     f32:	f7ff ff21 	bl	d78 <PA12::readRaw()>
     f36:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
     f3a:	45b9      	cmp	r9, r7
     f3c:	d1e1      	bne.n	f02 <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     f3e:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     f42:	f502 7382 	add.w	r3, r2, #260	; 0x104
     f46:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
     f4a:	29fe      	cmp	r1, #254	; 0xfe
     f4c:	d00e      	beq.n	f6c <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
     f4e:	2f03      	cmp	r7, #3
     f50:	dd0c      	ble.n	f6c <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     f52:	6963      	ldr	r3, [r4, #20]
     f54:	2bff      	cmp	r3, #255	; 0xff
     f56:	d027      	beq.n	fa8 <PA12::rxPacket(int)+0xd0>
     f58:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
     f60:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
     f62:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
     f66:	2700      	movs	r7, #0
				clearBuffer();
     f68:	f7ff ff32 	bl	dd0 <PA12::clearBuffer()>
}
     f6c:	4638      	mov	r0, r7
     f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
     f72:	f44f 3648 	mov.w	r6, #204800	; 0x32000
     f76:	e7bb      	b.n	ef0 <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
     f78:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
     f7c:	f502 7182 	add.w	r1, r2, #260	; 0x104
     f80:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
     f84:	29fe      	cmp	r1, #254	; 0xfe
     f86:	d0f1      	beq.n	f6c <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
     f88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
     f8c:	d0df      	beq.n	f4e <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f8e:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
     f92:	461f      	mov	r7, r3
			clearBuffer();			
     f94:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
     f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f9a:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
     f9e:	f7ff ff17 	bl	dd0 <PA12::clearBuffer()>
}
     fa2:	4638      	mov	r0, r7
     fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     fa8:	69a3      	ldr	r3, [r4, #24]
     faa:	2bff      	cmp	r3, #255	; 0xff
     fac:	d1d4      	bne.n	f58 <PA12::rxPacket(int)+0x80>
     fae:	69e3      	ldr	r3, [r4, #28]
     fb0:	2bff      	cmp	r3, #255	; 0xff
     fb2:	d009      	beq.n	fc8 <PA12::rxPacket(int)+0xf0>
     fb4:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
     fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     fbc:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
     fbe:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
     fc2:	e7cd      	b.n	f60 <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
     fc4:	2700      	movs	r7, #0
     fc6:	e7d1      	b.n	f6c <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
     fc8:	3204      	adds	r2, #4
     fca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	428b      	cmp	r3, r1
     fd2:	d02c      	beq.n	102e <PA12::rxPacket(int)+0x156>
     fd4:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
     fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     fdc:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
     fe0:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
     fe2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     fe6:	6852      	ldr	r2, [r2, #4]
     fe8:	428a      	cmp	r2, r1
     fea:	d115      	bne.n	1018 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
     fec:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
     ff0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     ff4:	6951      	ldr	r1, [r2, #20]
     ff6:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
     ffa:	1aba      	subs	r2, r7, r2
     ffc:	4291      	cmp	r1, r2
     ffe:	d10b      	bne.n	1018 <PA12::rxPacket(int)+0x140>
    1000:	f104 021c 	add.w	r2, r4, #28
    1004:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1008:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    100c:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    100e:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1010:	d1fa      	bne.n	1008 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    1012:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    1014:	2bff      	cmp	r3, #255	; 0xff
    1016:	d0a9      	beq.n	f6c <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1018:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    101c:	4620      	mov	r0, r4
				return 0;
    101e:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1024:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1028:	f7ff fed2 	bl	dd0 <PA12::clearBuffer()>
				return 0;
    102c:	e79e      	b.n	f6c <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    102e:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    1032:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1036:	6958      	ldr	r0, [r3, #20]
    1038:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    103c:	1afb      	subs	r3, r7, r3
    103e:	4298      	cmp	r0, r3
    1040:	d1c8      	bne.n	fd4 <PA12::rxPacket(int)+0xfc>
    1042:	f104 001c 	add.w	r0, r4, #28
    1046:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    104a:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    104c:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1050:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1052:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1054:	d1fa      	bne.n	104c <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    1056:	2bff      	cmp	r3, #255	; 0xff
    1058:	d0c3      	beq.n	fe2 <PA12::rxPacket(int)+0x10a>
    105a:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    105e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1062:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    1066:	e7bc      	b.n	fe2 <PA12::rxPacket(int)+0x10a>
    1068:	00000ce1 	.word	0x00000ce1

0000106c <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    1070:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1072:	4698      	mov	r8, r3
    1074:	4605      	mov	r5, r0
	mBusUsed = 1;
    1076:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1078:	468a      	mov	sl, r1
    107a:	4691      	mov	r9, r2
    107c:	4e56      	ldr	r6, [pc, #344]	; (11d8 <PA12::txRxPacket(int, int, int)+0x16c>)
    107e:	4f57      	ldr	r7, [pc, #348]	; (11dc <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    1080:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    1084:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    1088:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    108c:	68a8      	ldr	r0, [r5, #8]
    108e:	6803      	ldr	r3, [r0, #0]
    1090:	691c      	ldr	r4, [r3, #16]
    1092:	42b4      	cmp	r4, r6
    1094:	d10f      	bne.n	10b6 <PA12::txRxPacket(int, int, int)+0x4a>
    1096:	f003 fe3f 	bl	4d18 <usb_serial_available>
    109a:	4604      	mov	r4, r0
		while((this->available())){
    109c:	b17c      	cbz	r4, 10be <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    109e:	68a8      	ldr	r0, [r5, #8]
    10a0:	6803      	ldr	r3, [r0, #0]
    10a2:	695b      	ldr	r3, [r3, #20]
    10a4:	42bb      	cmp	r3, r7
    10a6:	d14a      	bne.n	113e <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    10a8:	f003 fe7a 	bl	4da0 <usb_serial_getchar>
		return PA12_Serial->available();
    10ac:	68a8      	ldr	r0, [r5, #8]
    10ae:	6803      	ldr	r3, [r0, #0]
    10b0:	691c      	ldr	r4, [r3, #16]
    10b2:	42b4      	cmp	r4, r6
    10b4:	d0ef      	beq.n	1096 <PA12::txRxPacket(int, int, int)+0x2a>
    10b6:	47a0      	blx	r4
    10b8:	4604      	mov	r4, r0
		while((this->available())){
    10ba:	2c00      	cmp	r4, #0
    10bc:	d1ef      	bne.n	109e <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    10be:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    10c0:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    10c4:	464a      	mov	r2, r9
    10c6:	4651      	mov	r1, sl
    10c8:	4628      	mov	r0, r5
    10ca:	f7ff fea3 	bl	e14 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    10ce:	4580      	cmp	r8, r0
    10d0:	d102      	bne.n	10d8 <PA12::txRxPacket(int, int, int)+0x6c>
    10d2:	2301      	movs	r3, #1
    10d4:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    10d8:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    10dc:	d043      	beq.n	1166 <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    10de:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    10e2:	d02e      	beq.n	1142 <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    10e4:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    10e8:	d065      	beq.n	11b6 <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    10ea:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    10ee:	2b01      	cmp	r3, #1
    10f0:	dd53      	ble.n	119a <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    10f2:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    10f6:	2b01      	cmp	r3, #1
    10f8:	d038      	beq.n	116c <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    10fa:	230b      	movs	r3, #11
    10fc:	461e      	mov	r6, r3
    10fe:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1102:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1106:	2b01      	cmp	r3, #1
    1108:	d038      	beq.n	117c <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    110a:	4631      	mov	r1, r6
    110c:	4628      	mov	r0, r5
    110e:	f7ff fee3 	bl	ed8 <PA12::rxPacket(int)>
	mBusUsed = 0;
    1112:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1114:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    1116:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    111a:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    111e:	d007      	beq.n	1130 <PA12::txRxPacket(int, int, int)+0xc4>
    1120:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    1124:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1128:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    112c:	2bfe      	cmp	r3, #254	; 0xfe
    112e:	d029      	beq.n	1184 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1130:	2302      	movs	r3, #2
	return 1;
    1132:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1134:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    1138:	4620      	mov	r0, r4
    113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    113e:	4798      	blx	r3
    1140:	e7a4      	b.n	108c <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    1142:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    1146:	3607      	adds	r6, #7
    1148:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    114c:	2e00      	cmp	r6, #0
    114e:	d1d8      	bne.n	1102 <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1150:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    1154:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1158:	f503 7382 	add.w	r3, r3, #260	; 0x104
    115c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1160:	2bf1      	cmp	r3, #241	; 0xf1
    1162:	d1e5      	bne.n	1130 <PA12::txRxPacket(int, int, int)+0xc4>
    1164:	e7e8      	b.n	1138 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1166:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    116a:	d02f      	beq.n	11cc <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    116c:	2307      	movs	r3, #7
    116e:	461e      	mov	r6, r3
    1170:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1174:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1178:	2b01      	cmp	r3, #1
    117a:	d1c6      	bne.n	110a <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    117c:	2096      	movs	r0, #150	; 0x96
    117e:	f002 f925 	bl	33cc <delay>
    1182:	e7c2      	b.n	110a <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1184:	2800      	cmp	r0, #0
    1186:	d1d3      	bne.n	1130 <PA12::txRxPacket(int, int, int)+0xc4>
    1188:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    118c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1190:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1194:	2bf1      	cmp	r3, #241	; 0xf1
    1196:	d1cb      	bne.n	1130 <PA12::txRxPacket(int, int, int)+0xc4>
    1198:	e7ce      	b.n	1138 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    119a:	2300      	movs	r3, #0
    119c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    11a0:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    11a4:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    11a8:	f503 7382 	add.w	r3, r3, #260	; 0x104
    11ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    11b0:	2bf1      	cmp	r3, #241	; 0xf1
    11b2:	d1bd      	bne.n	1130 <PA12::txRxPacket(int, int, int)+0xc4>
    11b4:	e7c0      	b.n	1138 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    11b6:	f029 0910 	bic.w	r9, r9, #16
    11ba:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    11be:	d1ec      	bne.n	119a <PA12::txRxPacket(int, int, int)+0x12e>
    11c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    11c4:	461e      	mov	r6, r3
    11c6:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    11ca:	e79a      	b.n	1102 <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    11cc:	23ff      	movs	r3, #255	; 0xff
    11ce:	461e      	mov	r6, r3
    11d0:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    11d4:	e795      	b.n	1102 <PA12::txRxPacket(int, int, int)+0x96>
    11d6:	bf00      	nop
    11d8:	00000ce1 	.word	0x00000ce1
    11dc:	00000ce5 	.word	0x00000ce5

000011e0 <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    11e0:	b530      	push	{r4, r5, lr}
    11e2:	4615      	mov	r5, r2
    11e4:	b083      	sub	sp, #12
    11e6:	4604      	mov	r4, r0
    11e8:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    11ea:	f7ff fdf1 	bl	dd0 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11ee:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    11f0:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    11f2:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11f6:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    11f8:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    11fc:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    11fe:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1202:	22f3      	movs	r2, #243	; 0xf3
    1204:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1206:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    120a:	b003      	add	sp, #12
    120c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1210:	f7ff bf2c 	b.w	106c <PA12::txRxPacket(int, int, int)>

00001214 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    1214:	b530      	push	{r4, r5, lr}
    1216:	4615      	mov	r5, r2
    1218:	b083      	sub	sp, #12
    121a:	4604      	mov	r4, r0
    121c:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    121e:	f7ff fdd7 	bl	dd0 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1222:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1224:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1226:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    122a:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    122c:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1230:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1232:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1236:	22f3      	movs	r2, #243	; 0xf3
    1238:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    123a:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    123e:	b003      	add	sp, #12
    1240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1244:	f7ff bf12 	b.w	106c <PA12::txRxPacket(int, int, int)>

00001248 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    1248:	b510      	push	{r4, lr}
    124a:	b082      	sub	sp, #8
    124c:	4604      	mov	r4, r0
    124e:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1250:	f7ff fdbe 	bl	dd0 <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    1254:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    1256:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1258:	22f2      	movs	r2, #242	; 0xf2
    125a:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    125c:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1260:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    1262:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1266:	f7ff ff01 	bl	106c <PA12::txRxPacket(int, int, int)>
    126a:	b138      	cbz	r0, 127c <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    126c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    126e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1272:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1276:	b280      	uxth	r0, r0
}
    1278:	b002      	add	sp, #8
    127a:	bd10      	pop	{r4, pc}
		return 0xffff;
    127c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1280:	b002      	add	sp, #8
    1282:	bd10      	pop	{r4, pc}

00001284 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1284:	2810      	cmp	r0, #16
    1286:	dc11      	bgt.n	12ac <irp_get_baudrate+0x28>
    1288:	2801      	cmp	r0, #1
    128a:	dd0c      	ble.n	12a6 <irp_get_baudrate+0x22>
    128c:	3802      	subs	r0, #2
    128e:	280e      	cmp	r0, #14
    1290:	d809      	bhi.n	12a6 <irp_get_baudrate+0x22>
    1292:	e8df f000 	tbb	[pc, r0]
    1296:	0819      	.short	0x0819
    1298:	0808081b 	.word	0x0808081b
    129c:	08080817 	.word	0x08080817
    12a0:	08080808 	.word	0x08080808
    12a4:	1d          	.byte	0x1d
    12a5:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    12a6:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    12aa:	4770      	bx	lr
    switch(baudnum)
    12ac:	2840      	cmp	r0, #64	; 0x40
    12ae:	d006      	beq.n	12be <irp_get_baudrate+0x3a>
        temp= 9600; break;
    12b0:	2880      	cmp	r0, #128	; 0x80
    12b2:	bf14      	ite	ne
    12b4:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    12b8:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    12bc:	4770      	bx	lr
    switch(baudnum)
    12be:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    12c2:	4770      	bx	lr
        temp= 2000000; break;
    12c4:	4804      	ldr	r0, [pc, #16]	; (12d8 <irp_get_baudrate+0x54>)
    12c6:	4770      	bx	lr
        temp= 4000000; break;
    12c8:	4804      	ldr	r0, [pc, #16]	; (12dc <irp_get_baudrate+0x58>)
    12ca:	4770      	bx	lr
        temp= 2500000; break;
    12cc:	4804      	ldr	r0, [pc, #16]	; (12e0 <irp_get_baudrate+0x5c>)
    12ce:	4770      	bx	lr
        temp= 115200; break;
    12d0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    12d4:	4770      	bx	lr
    12d6:	bf00      	nop
    12d8:	001e8480 	.word	0x001e8480
    12dc:	003d0900 	.word	0x003d0900
    12e0:	002625a0 	.word	0x002625a0

000012e4 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    12e4:	b410      	push	{r4}
	if (port) {
    12e6:	6904      	ldr	r4, [r0, #16]
    12e8:	b12c      	cbz	r4, 12f6 <SoftwareSerial::begin(unsigned long)+0x12>
		port->begin(speed);
    12ea:	4620      	mov	r0, r4
    12ec:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    12ee:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    12f2:	f000 bfe7 	b.w	22c4 <HardwareSerial::begin(unsigned long, unsigned short)>
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    12f6:	460b      	mov	r3, r1
    12f8:	4a0a      	ldr	r2, [pc, #40]	; (1324 <SoftwareSerial::begin(unsigned long)+0x40>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    12fa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    12fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1302:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    1306:	fbb2 f3f3 	udiv	r3, r2, r3
    130a:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    130c:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1310:	4a05      	ldr	r2, [pc, #20]	; (1328 <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1316:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    131a:	6813      	ldr	r3, [r2, #0]
    131c:	f043 0301 	orr.w	r3, r3, #1
    1320:	6013      	str	r3, [r2, #0]
}
    1322:	4770      	bx	lr
    1324:	23c34600 	.word	0x23c34600
    1328:	e0001000 	.word	0xe0001000

0000132c <Adafruit_INA260::Adafruit_INA260()>:
Adafruit_INA260::Adafruit_INA260(void) {}
    132c:	4770      	bx	lr
    132e:	bf00      	nop

00001330 <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1334:	b086      	sub	sp, #24
    1336:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1338:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    133a:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    133e:	f002 f9af 	bl	36a0 <operator new(unsigned int)>
    1342:	4604      	mov	r4, r0
    1344:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1348:	f000 f9d2 	bl	16f0 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin()) {
    134c:	2101      	movs	r1, #1
    134e:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1350:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    1352:	f000 f9d7 	bl	1704 <Adafruit_I2CDevice::begin(bool)>
    1356:	b920      	cbnz	r0, 1362 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    1358:	2400      	movs	r4, #0
}
    135a:	4620      	mov	r0, r4
    135c:	b006      	add	sp, #24
    135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    1362:	2601      	movs	r6, #1
    1364:	4604      	mov	r4, r0
    1366:	2018      	movs	r0, #24
    1368:	f002 f99a 	bl	36a0 <operator new(unsigned int)>
    136c:	2302      	movs	r3, #2
    136e:	22ff      	movs	r2, #255	; 0xff
    1370:	4680      	mov	r8, r0
    1372:	e9cd 6600 	strd	r6, r6, [sp]
    1376:	68e9      	ldr	r1, [r5, #12]
    1378:	f000 f898 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    137c:	2018      	movs	r0, #24
    137e:	f002 f98f 	bl	36a0 <operator new(unsigned int)>
    1382:	2302      	movs	r3, #2
    1384:	22fe      	movs	r2, #254	; 0xfe
    1386:	4607      	mov	r7, r0
    1388:	e9cd 6600 	strd	r6, r6, [sp]
    138c:	68e9      	ldr	r1, [r5, #12]
    138e:	f000 f88d 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    1392:	2008      	movs	r0, #8
    1394:	f002 f984 	bl	36a0 <operator new(unsigned int)>
    1398:	4641      	mov	r1, r8
    139a:	2304      	movs	r3, #4
    139c:	220c      	movs	r2, #12
    139e:	4680      	mov	r8, r0
    13a0:	f000 f97c 	bl	169c <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    13a4:	4638      	mov	r0, r7
    13a6:	f000 f957 	bl	1658 <Adafruit_BusIO_Register::read()>
    13aa:	f245 4349 	movw	r3, #21577	; 0x5449
    13ae:	4298      	cmp	r0, r3
    13b0:	d1d2      	bne.n	1358 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    13b2:	4640      	mov	r0, r8
    13b4:	f000 f976 	bl	16a4 <Adafruit_BusIO_RegisterBits::read()>
    13b8:	f240 2327 	movw	r3, #551	; 0x227
    13bc:	4298      	cmp	r0, r3
    13be:	d1cb      	bne.n	1358 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    13c0:	2018      	movs	r0, #24
    13c2:	f002 f96d 	bl	36a0 <operator new(unsigned int)>
    13c6:	4607      	mov	r7, r0
    13c8:	2302      	movs	r3, #2
    13ca:	2200      	movs	r2, #0
    13cc:	e9cd 6600 	strd	r6, r6, [sp]
    13d0:	68e9      	ldr	r1, [r5, #12]
    13d2:	f000 f86b 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    13d6:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    13d8:	2018      	movs	r0, #24
    13da:	f002 f961 	bl	36a0 <operator new(unsigned int)>
    13de:	4607      	mov	r7, r0
    13e0:	2302      	movs	r3, #2
    13e2:	2206      	movs	r2, #6
    13e4:	e9cd 6600 	strd	r6, r6, [sp]
    13e8:	68e9      	ldr	r1, [r5, #12]
    13ea:	f000 f85f 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    13ee:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    13f0:	2018      	movs	r0, #24
    13f2:	f002 f955 	bl	36a0 <operator new(unsigned int)>
    13f6:	4607      	mov	r7, r0
    13f8:	2302      	movs	r3, #2
    13fa:	2207      	movs	r2, #7
    13fc:	e9cd 6600 	strd	r6, r6, [sp]
    1400:	68e9      	ldr	r1, [r5, #12]
    1402:	f000 f853 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1406:	230f      	movs	r3, #15
    1408:	6829      	ldr	r1, [r5, #0]
    140a:	4632      	mov	r2, r6
    140c:	a804      	add	r0, sp, #16
  AlertLimit =
    140e:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1410:	f000 f944 	bl	169c <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    1414:	4631      	mov	r1, r6
    1416:	a804      	add	r0, sp, #16
    1418:	f000 f952 	bl	16c0 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    141c:	2002      	movs	r0, #2
    141e:	f001 ffd5 	bl	33cc <delay>
  return true;
    1422:	e79a      	b.n	135a <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

00001424 <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    1424:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1426:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1428:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    142a:	2401      	movs	r4, #1
    142c:	68c1      	ldr	r1, [r0, #12]
    142e:	461a      	mov	r2, r3
    1430:	a802      	add	r0, sp, #8
    1432:	e9cd 4400 	strd	r4, r4, [sp]
    1436:	f000 f839 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    143a:	a802      	add	r0, sp, #8
    143c:	f000 f90c 	bl	1658 <Adafruit_BusIO_Register::read()>
    1440:	ee06 0a90 	vmov	s13, r0
    1444:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1448:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    144c:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1450:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1454:	b008      	add	sp, #32
    1456:	bd10      	pop	{r4, pc}

00001458 <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    1458:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    145a:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    145c:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    145e:	68c1      	ldr	r1, [r0, #12]
    1460:	2302      	movs	r3, #2
    1462:	2203      	movs	r2, #3
    1464:	a802      	add	r0, sp, #8
    1466:	e9cd 4400 	strd	r4, r4, [sp]
    146a:	f000 f81f 	bl	14ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    146e:	a802      	add	r0, sp, #8
    1470:	f000 f8f2 	bl	1658 <Adafruit_BusIO_Register::read()>
    1474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1478:	fa00 f304 	lsl.w	r3, r0, r4
    147c:	ee00 3a10 	vmov	s0, r3
}
    1480:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    1484:	b008      	add	sp, #32
    1486:	bd10      	pop	{r4, pc}

00001488 <Adafruit_INA260::conversionReady()>:
/*!
    @brief Checks if the most recent one shot measurement has completed
    @return true if the conversion has completed
*/
/**************************************************************************/
bool Adafruit_INA260::conversionReady(void) {
    1488:	b500      	push	{lr}
    148a:	b083      	sub	sp, #12
  Adafruit_I2CRegisterBits conversion_ready =
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    148c:	6841      	ldr	r1, [r0, #4]
    148e:	2303      	movs	r3, #3
    1490:	2201      	movs	r2, #1
    1492:	4668      	mov	r0, sp
    1494:	f000 f902 	bl	169c <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1498:	4668      	mov	r0, sp
    149a:	f000 f903 	bl	16a4 <Adafruit_BusIO_RegisterBits::read()>
}
    149e:	3800      	subs	r0, #0
    14a0:	bf18      	it	ne
    14a2:	2001      	movne	r0, #1
    14a4:	b003      	add	sp, #12
    14a6:	f85d fb04 	ldr.w	pc, [sp], #4
    14aa:	bf00      	nop

000014ac <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    14ac:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    14ae:	2300      	movs	r3, #0
  _address = reg_addr;
    14b0:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    14b2:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    14b4:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    14b8:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    14ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    14be:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    14c0:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    14c2:	7343      	strb	r3, [r0, #13]
}
    14c4:	4770      	bx	lr
    14c6:	bf00      	nop

000014c8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    14c8:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    14cc:	4603      	mov	r3, r0
  if (_i2cdevice) {
    14ce:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    14d0:	b570      	push	{r4, r5, r6, lr}
    14d2:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    14d4:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    14d8:	b140      	cbz	r0, 14ec <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    14da:	7b5c      	ldrb	r4, [r3, #13]
    14dc:	ab03      	add	r3, sp, #12
    14de:	e9cd 3400 	strd	r3, r4, [sp]
    14e2:	2301      	movs	r3, #1
    14e4:	f000 f92a 	bl	173c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    14e8:	b004      	add	sp, #16
    14ea:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    14ec:	6858      	ldr	r0, [r3, #4]
    14ee:	2800      	cmp	r0, #0
    14f0:	d0fa      	beq.n	14e8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    14f2:	7a1e      	ldrb	r6, [r3, #8]
    14f4:	fa5f f58c 	uxtb.w	r5, ip
    14f8:	2e03      	cmp	r6, #3
    14fa:	d021      	beq.n	1540 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    14fc:	460c      	mov	r4, r1
    14fe:	4696      	mov	lr, r2
    1500:	b176      	cbz	r6, 1520 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1502:	2e02      	cmp	r6, #2
    1504:	d111      	bne.n	152a <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    1506:	f065 057f 	orn	r5, r5, #127	; 0x7f
    150a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    150e:	7b5d      	ldrb	r5, [r3, #13]
    1510:	4672      	mov	r2, lr
    1512:	ab03      	add	r3, sp, #12
    1514:	4621      	mov	r1, r4
    1516:	9500      	str	r5, [sp, #0]
    1518:	f000 fb3c 	bl	1b94 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    151c:	b004      	add	sp, #16
    151e:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    1520:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    1524:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1528:	e7f1      	b.n	150e <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    152a:	2e01      	cmp	r6, #1
    152c:	d1ef      	bne.n	150e <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    152e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    1536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    153a:	f88d 200c 	strb.w	r2, [sp, #12]
    153e:	e7e6      	b.n	150e <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1540:	7b5c      	ldrb	r4, [r3, #13]
    1542:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1546:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1548:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    154c:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    154e:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1552:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    1554:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1558:	f000 fb1c 	bl	1b94 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    155c:	e7c4      	b.n	14e8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    155e:	bf00      	nop

00001560 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    1560:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    1562:	b962      	cbnz	r2, 157e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    1564:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    1566:	2c04      	cmp	r4, #4
    1568:	d824      	bhi.n	15b4 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    156a:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    156c:	b95c      	cbnz	r4, 1586 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    156e:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    1572:	4622      	mov	r2, r4
    1574:	4671      	mov	r1, lr
}
    1576:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    157a:	f7ff bfa5 	b.w	14c8 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    157e:	2a04      	cmp	r2, #4
    1580:	4614      	mov	r4, r2
    1582:	d817      	bhi.n	15b4 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1584:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    1586:	f100 0e0f 	add.w	lr, r0, #15
    158a:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    158e:	7b85      	ldrb	r5, [r0, #14]
    1590:	f100 020e 	add.w	r2, r0, #14
    1594:	fa50 f383 	uxtab	r3, r0, r3
    1598:	46f4      	mov	ip, lr
    159a:	b94d      	cbnz	r5, 15b0 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    159c:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    15a0:	3b01      	subs	r3, #1
    value >>= 8;
    15a2:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    15a4:	f10c 0c01 	add.w	ip, ip, #1
    15a8:	4293      	cmp	r3, r2
    15aa:	d0e2      	beq.n	1572 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    15ac:	2d00      	cmp	r5, #0
    15ae:	d0f5      	beq.n	159c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    15b0:	7019      	strb	r1, [r3, #0]
    15b2:	e7f5      	b.n	15a0 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    15b4:	2000      	movs	r0, #0
}
    15b6:	bd30      	pop	{r4, r5, pc}

000015b8 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    15b8:	b510      	push	{r4, lr}
    15ba:	4684      	mov	ip, r0
    15bc:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    15be:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    15c0:	4614      	mov	r4, r2
    15c2:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    15c4:	b2c2      	uxtb	r2, r0
    15c6:	f8ad 000c 	strh.w	r0, [sp, #12]
    15ca:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    15ce:	f8dc 0000 	ldr.w	r0, [ip]
    15d2:	b148      	cbz	r0, 15e8 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    15d4:	2100      	movs	r1, #0
    15d6:	f89c 200d 	ldrb.w	r2, [ip, #13]
    15da:	9400      	str	r4, [sp, #0]
    15dc:	9101      	str	r1, [sp, #4]
    15de:	a903      	add	r1, sp, #12
    15e0:	f000 f918 	bl	1814 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    15e4:	b004      	add	sp, #16
    15e6:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    15e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
    15ec:	2800      	cmp	r0, #0
    15ee:	d0f9      	beq.n	15e4 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    15f0:	f89c 1008 	ldrb.w	r1, [ip, #8]
    15f4:	2903      	cmp	r1, #3
    15f6:	d01e      	beq.n	1636 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    15f8:	b179      	cbz	r1, 161a <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    15fa:	2902      	cmp	r1, #2
    15fc:	d112      	bne.n	1624 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    15fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1602:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1606:	21ff      	movs	r1, #255	; 0xff
    1608:	f89c 200d 	ldrb.w	r2, [ip, #13]
    160c:	9400      	str	r4, [sp, #0]
    160e:	9101      	str	r1, [sp, #4]
    1610:	a903      	add	r1, sp, #12
    1612:	f000 fb1b 	bl	1c4c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1616:	b004      	add	sp, #16
    1618:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    161e:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1622:	e7f0      	b.n	1606 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1624:	2901      	cmp	r1, #1
    1626:	d1ee      	bne.n	1606 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1628:	f89d 200c 	ldrb.w	r2, [sp, #12]
    162c:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1630:	f88d 200c 	strb.w	r2, [sp, #12]
    1634:	e7e7      	b.n	1606 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1636:	21ff      	movs	r1, #255	; 0xff
    1638:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    163a:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    163e:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1642:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1646:	9101      	str	r1, [sp, #4]
    1648:	a903      	add	r1, sp, #12
    164a:	3201      	adds	r2, #1
      addrbuffer[0] =
    164c:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1650:	f000 fafc 	bl	1c4c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    1654:	e7c6      	b.n	15e4 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    1656:	bf00      	nop

00001658 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1658:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    165a:	f100 050f 	add.w	r5, r0, #15
    165e:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    1660:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    1662:	4629      	mov	r1, r5
    1664:	f7ff ffa8 	bl	15b8 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1668:	b1a0      	cbz	r0, 1694 <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    166a:	7b20      	ldrb	r0, [r4, #12]
    166c:	b170      	cbz	r0, 168c <Adafruit_BusIO_Register::read()+0x34>
    166e:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1670:	7ba6      	ldrb	r6, [r4, #14]
    1672:	4629      	mov	r1, r5
    1674:	f104 020e 	add.w	r2, r4, #14
    1678:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    167a:	2000      	movs	r0, #0
    value <<= 8;
    167c:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    167e:	b936      	cbnz	r6, 168e <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1680:	781c      	ldrb	r4, [r3, #0]
    1682:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    1684:	3b01      	subs	r3, #1
    1686:	3101      	adds	r1, #1
    1688:	4293      	cmp	r3, r2
    168a:	d1f7      	bne.n	167c <Adafruit_BusIO_Register::read()+0x24>
}
    168c:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    168e:	780c      	ldrb	r4, [r1, #0]
    1690:	4320      	orrs	r0, r4
    1692:	e7f7      	b.n	1684 <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    1694:	f04f 30ff 	mov.w	r0, #4294967295
}
    1698:	bd70      	pop	{r4, r5, r6, pc}
    169a:	bf00      	nop

0000169c <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    169c:	6001      	str	r1, [r0, #0]
  _bits = bits;
    169e:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    16a0:	7143      	strb	r3, [r0, #5]
}
    16a2:	4770      	bx	lr

000016a4 <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    16a4:	b510      	push	{r4, lr}
    16a6:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    16a8:	6800      	ldr	r0, [r0, #0]
    16aa:	f7ff ffd5 	bl	1658 <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    16ae:	2301      	movs	r3, #1
    16b0:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    16b2:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    16b4:	408b      	lsls	r3, r1
  val >>= _shift;
    16b6:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    16b8:	3b01      	subs	r3, #1
}
    16ba:	4018      	ands	r0, r3
    16bc:	bd10      	pop	{r4, pc}
    16be:	bf00      	nop

000016c0 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    16c0:	b538      	push	{r3, r4, r5, lr}
    16c2:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    16c4:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    16c6:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    16c8:	f7ff ffc6 	bl	1658 <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    16cc:	792a      	ldrb	r2, [r5, #4]
    16ce:	2301      	movs	r3, #1
    16d0:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    16d2:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    16d4:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    16d6:	3b01      	subs	r3, #1
  data &= mask;
    16d8:	401c      	ands	r4, r3
  mask <<= _shift;
    16da:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    16dc:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    16de:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    16e2:	7b2a      	ldrb	r2, [r5, #12]
    16e4:	4628      	mov	r0, r5
    16e6:	4321      	orrs	r1, r4
}
    16e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    16ec:	f7ff bf38 	b.w	1560 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

000016f0 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    16f0:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    16f4:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    16f6:	2220      	movs	r2, #32
  _addr = addr;
    16f8:	7001      	strb	r1, [r0, #0]
  _begun = false;
    16fa:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    16fe:	60c2      	str	r2, [r0, #12]
}
    1700:	4770      	bx	lr
    1702:	bf00      	nop

00001704 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1704:	b538      	push	{r3, r4, r5, lr}
    1706:	4604      	mov	r4, r0
  _wire->begin();
    1708:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    170a:	460d      	mov	r5, r1
  _wire->begin();
    170c:	f008 fdd4 	bl	a2b8 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    1710:	2101      	movs	r1, #1
    1712:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    1714:	b90d      	cbnz	r5, 171a <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    1716:	4608      	mov	r0, r1
}
    1718:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    171a:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    171c:	6862      	ldr	r2, [r4, #4]
    171e:	4088      	lsls	r0, r1
		transmitting = 1;
    1720:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    1724:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1728:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    172c:	6860      	ldr	r0, [r4, #4]
    172e:	f7ff f925 	bl	97c <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    1732:	fab0 f080 	clz	r0, r0
    1736:	0940      	lsrs	r0, r0, #5
}
    1738:	bd38      	pop	{r3, r4, r5, pc}
    173a:	bf00      	nop

0000173c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1740:	9f07      	ldr	r7, [sp, #28]
    1742:	4615      	mov	r5, r2
    1744:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    1746:	68c3      	ldr	r3, [r0, #12]
    1748:	443a      	add	r2, r7
    174a:	429a      	cmp	r2, r3
    174c:	d816      	bhi.n	177c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    174e:	7802      	ldrb	r2, [r0, #0]
    1750:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1752:	6843      	ldr	r3, [r0, #4]
    1754:	460e      	mov	r6, r1
    1756:	0052      	lsls	r2, r2, #1
    1758:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    175c:	2201      	movs	r2, #1
    175e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1762:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    1766:	b167      	cbz	r7, 1782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1768:	9b06      	ldr	r3, [sp, #24]
    176a:	b153      	cbz	r3, 1782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    176c:	6840      	ldr	r0, [r0, #4]
    176e:	463a      	mov	r2, r7
    1770:	9906      	ldr	r1, [sp, #24]
    1772:	6803      	ldr	r3, [r0, #0]
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	4798      	blx	r3
    1778:	4287      	cmp	r7, r0
    177a:	d002      	beq.n	1782 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    177c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    177e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    1782:	6860      	ldr	r0, [r4, #4]
    1784:	4631      	mov	r1, r6
    1786:	462a      	mov	r2, r5
    1788:	6803      	ldr	r3, [r0, #0]
    178a:	685b      	ldr	r3, [r3, #4]
    178c:	4798      	blx	r3
    178e:	4285      	cmp	r5, r0
    1790:	d1f4      	bne.n	177c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    1792:	4641      	mov	r1, r8
    1794:	6860      	ldr	r0, [r4, #4]
    1796:	f7ff f8f1 	bl	97c <TwoWire::endTransmission(unsigned char)>
    179a:	fab0 f080 	clz	r0, r0
    179e:	0940      	lsrs	r0, r0, #5
}
    17a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000017a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    17a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    17a8:	4615      	mov	r5, r2
    17aa:	4606      	mov	r6, r0
    17ac:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    17ae:	b2d2      	uxtb	r2, r2
    17b0:	7801      	ldrb	r1, [r0, #0]
    17b2:	6840      	ldr	r0, [r0, #4]
    17b4:	f7ff f960 	bl	a78 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    17b8:	4285      	cmp	r5, r0
    17ba:	d124      	bne.n	1806 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    17bc:	b305      	cbz	r5, 1800 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    17be:	2400      	movs	r4, #0
    17c0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1810 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    17c4:	46a0      	mov	r8, r4
    17c6:	e013      	b.n	17f0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    17c8:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    17cc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    17d0:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    17d2:	f10c 0201 	add.w	r2, ip, #1
    17d6:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    17d8:	d918      	bls.n	180c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    17da:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    17de:	f89c 301a 	ldrb.w	r3, [ip, #26]
    17e2:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    17e4:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    17e8:	b2a4      	uxth	r4, r4
    17ea:	42a5      	cmp	r5, r4
    17ec:	46a0      	mov	r8, r4
    17ee:	d907      	bls.n	1800 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    17f0:	6870      	ldr	r0, [r6, #4]
    17f2:	6802      	ldr	r2, [r0, #0]
    17f4:	6952      	ldr	r2, [r2, #20]
    17f6:	454a      	cmp	r2, r9
    17f8:	d0e6      	beq.n	17c8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    17fa:	4790      	blx	r2
    17fc:	b2c3      	uxtb	r3, r0
    17fe:	e7f0      	b.n	17e2 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    1800:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    1806:	2000      	movs	r0, #0
}
    1808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    180c:	23ff      	movs	r3, #255	; 0xff
    180e:	e7e8      	b.n	17e2 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    1810:	00000725 	.word	0x00000725

00001814 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    1814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    1818:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    181a:	b082      	sub	sp, #8
    181c:	461f      	mov	r7, r3
    181e:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    1820:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    1824:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    1826:	e9cd 4400 	strd	r4, r4, [sp]
    182a:	f7ff ff87 	bl	173c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    182e:	b928      	cbnz	r0, 183c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    1830:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    1834:	4640      	mov	r0, r8
    1836:	b002      	add	sp, #8
    1838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    183c:	4680      	mov	r8, r0
    183e:	b915      	cbnz	r5, 1846 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    1840:	e7f8      	b.n	1834 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    1842:	42a5      	cmp	r5, r4
    1844:	d9f6      	bls.n	1834 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    1846:	1b2a      	subs	r2, r5, r4
    1848:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    184a:	1939      	adds	r1, r7, r4
    184c:	4630      	mov	r0, r6
    184e:	429a      	cmp	r2, r3
    1850:	bf28      	it	cs
    1852:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1854:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    1856:	42a3      	cmp	r3, r4
    pos += read_len;
    1858:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    185a:	bf8c      	ite	hi
    185c:	2300      	movhi	r3, #0
    185e:	2301      	movls	r3, #1
    1860:	f7ff ffa0 	bl	17a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    1864:	2800      	cmp	r0, #0
    1866:	d1ec      	bne.n	1842 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    1868:	e7e2      	b.n	1830 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    186a:	bf00      	nop

0000186c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    186c:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    186e:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    1874:	bf0c      	ite	eq
    1876:	2301      	moveq	r3, #1
    1878:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    187a:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    187c:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1880:	4e63      	ldr	r6, [pc, #396]	; (1a10 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1882:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    1886:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1888:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    188a:	bf0c      	ite	eq
    188c:	f04f 0a01 	moveq.w	sl, #1
    1890:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1894:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    1898:	2a00      	cmp	r2, #0
    189a:	f000 80b6 	beq.w	1a0a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    189e:	3a01      	subs	r2, #1
    18a0:	4604      	mov	r4, r0
    18a2:	b2f6      	uxtb	r6, r6
    18a4:	4688      	mov	r8, r1
    18a6:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    18a8:	f8df b170 	ldr.w	fp, [pc, #368]	; 1a1c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    18ac:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    18ae:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    18b0:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    18b2:	2e00      	cmp	r6, #0
    18b4:	d141      	bne.n	193a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    18b6:	7b63      	ldrb	r3, [r4, #13]
    18b8:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    18bc:	d175      	bne.n	19aa <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    18be:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    18c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    18c6:	bf14      	ite	ne
    18c8:	2301      	movne	r3, #1
    18ca:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    18cc:	1c42      	adds	r2, r0, #1
    18ce:	d02f      	beq.n	1930 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    18d0:	4553      	cmp	r3, sl
    18d2:	d02d      	beq.n	1930 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    18d4:	4619      	mov	r1, r3
    18d6:	b2c0      	uxtb	r0, r0
    18d8:	9301      	str	r3, [sp, #4]
    18da:	f001 fdcb 	bl	3474 <digitalWrite>
        towrite = send & b;
    18de:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    18e0:	2101      	movs	r1, #1
    18e2:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    18e4:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    18e6:	f001 fdc5 	bl	3474 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    18ea:	f994 0011 	ldrsb.w	r0, [r4, #17]
    18ee:	1c42      	adds	r2, r0, #1
    18f0:	d004      	beq.n	18fc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    18f2:	b2c0      	uxtb	r0, r0
    18f4:	f001 fde8 	bl	34c8 <digitalRead>
    18f8:	b100      	cbz	r0, 18fc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    18fa:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    18fc:	2100      	movs	r1, #0
    18fe:	7be0      	ldrb	r0, [r4, #15]
    1900:	f001 fdb8 	bl	3474 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    1904:	f994 3011 	ldrsb.w	r3, [r4, #17]
    1908:	3301      	adds	r3, #1
        buffer[i] = reply;
    190a:	bf18      	it	ne
    190c:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    1910:	7b23      	ldrb	r3, [r4, #12]
    1912:	b94b      	cbnz	r3, 1928 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    1914:	006d      	lsls	r5, r5, #1
    1916:	b2ed      	uxtb	r5, r5
    1918:	2d00      	cmp	r5, #0
    191a:	d1ca      	bne.n	18b2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    191c:	9b03      	ldr	r3, [sp, #12]
    191e:	4598      	cmp	r8, r3
    1920:	d073      	beq.n	1a0a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    1922:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    1926:	e7c2      	b.n	18ae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    1928:	086d      	lsrs	r5, r5, #1
    192a:	2d00      	cmp	r5, #0
    192c:	d1c1      	bne.n	18b2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    192e:	e7f5      	b.n	191c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    1930:	2101      	movs	r1, #1
    1932:	7be0      	ldrb	r0, [r4, #15]
    1934:	f001 fd9e 	bl	3474 <digitalWrite>
        if (bitdelay_us) {
    1938:	e7d7      	b.n	18ea <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    193a:	4b36      	ldr	r3, [pc, #216]	; (1a14 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    193c:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1940:	681a      	ldr	r2, [r3, #0]
    1942:	4b35      	ldr	r3, [pc, #212]	; (1a18 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1944:	fba3 3202 	umull	r3, r2, r3, r2
    1948:	0c92      	lsrs	r2, r2, #18
    194a:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    194e:	f8db 3004 	ldr.w	r3, [fp, #4]
    1952:	1a5b      	subs	r3, r3, r1
    1954:	429a      	cmp	r2, r3
    1956:	d8fa      	bhi.n	194e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1958:	7b63      	ldrb	r3, [r4, #13]
    195a:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    195e:	d140      	bne.n	19e2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    1960:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1964:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    1968:	bf14      	ite	ne
    196a:	2101      	movne	r1, #1
    196c:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    196e:	1c43      	adds	r3, r0, #1
    1970:	d007      	beq.n	1982 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    1972:	4551      	cmp	r1, sl
    1974:	d005      	beq.n	1982 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    1976:	b2c0      	uxtb	r0, r0
    1978:	9101      	str	r1, [sp, #4]
    197a:	f001 fd7b 	bl	3474 <digitalWrite>
        towrite = send & b;
    197e:	9901      	ldr	r1, [sp, #4]
    1980:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    1982:	2101      	movs	r1, #1
    1984:	7be0      	ldrb	r0, [r4, #15]
    1986:	f001 fd75 	bl	3474 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    198a:	4b22      	ldr	r3, [pc, #136]	; (1a14 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    198c:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1990:	681a      	ldr	r2, [r3, #0]
    1992:	4b21      	ldr	r3, [pc, #132]	; (1a18 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1994:	fba3 3202 	umull	r3, r2, r3, r2
    1998:	0c92      	lsrs	r2, r2, #18
    199a:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    199e:	f8db 3004 	ldr.w	r3, [fp, #4]
    19a2:	1a5b      	subs	r3, r3, r1
    19a4:	429a      	cmp	r2, r3
    19a6:	d8fa      	bhi.n	199e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    19a8:	e79f      	b.n	18ea <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    19aa:	2101      	movs	r1, #1
    19ac:	7be0      	ldrb	r0, [r4, #15]
    19ae:	f001 fd61 	bl	3474 <digitalWrite>
        if (_mosi != -1) {
    19b2:	f994 0010 	ldrsb.w	r0, [r4, #16]
    19b6:	1c43      	adds	r3, r0, #1
    19b8:	d004      	beq.n	19c4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    19ba:	b2c0      	uxtb	r0, r0
    19bc:	ea09 0105 	and.w	r1, r9, r5
    19c0:	f001 fd58 	bl	3474 <digitalWrite>
        digitalWrite(_sck, LOW);
    19c4:	2100      	movs	r1, #0
    19c6:	7be0      	ldrb	r0, [r4, #15]
    19c8:	f001 fd54 	bl	3474 <digitalWrite>
        if (_miso != -1) {
    19cc:	f994 0011 	ldrsb.w	r0, [r4, #17]
    19d0:	1c41      	adds	r1, r0, #1
    19d2:	d09d      	beq.n	1910 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    19d4:	b2c0      	uxtb	r0, r0
    19d6:	f001 fd77 	bl	34c8 <digitalRead>
    19da:	2800      	cmp	r0, #0
    19dc:	d092      	beq.n	1904 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    19de:	432f      	orrs	r7, r5
    19e0:	e790      	b.n	1904 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    19e2:	2101      	movs	r1, #1
    19e4:	7be0      	ldrb	r0, [r4, #15]
    19e6:	f001 fd45 	bl	3474 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    19ea:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    19ec:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    19f0:	681a      	ldr	r2, [r3, #0]
    19f2:	4b09      	ldr	r3, [pc, #36]	; (1a18 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    19f4:	fba3 3202 	umull	r3, r2, r3, r2
    19f8:	0c92      	lsrs	r2, r2, #18
    19fa:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    19fe:	f8db 3004 	ldr.w	r3, [fp, #4]
    1a02:	1a5b      	subs	r3, r3, r1
    1a04:	429a      	cmp	r2, r3
    1a06:	d8fa      	bhi.n	19fe <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    1a08:	e7d3      	b.n	19b2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    1a0a:	b005      	add	sp, #20
    1a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a10:	0007a120 	.word	0x0007a120
    1a14:	20000ee4 	.word	0x20000ee4
    1a18:	431bde83 	.word	0x431bde83
    1a1c:	e0001000 	.word	0xe0001000

00001a20 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1a20:	b430      	push	{r4, r5}
    1a22:	b082      	sub	sp, #8
    1a24:	460c      	mov	r4, r1
    1a26:	ab02      	add	r3, sp, #8
    1a28:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1a2c:	7cc3      	ldrb	r3, [r0, #19]
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d030      	beq.n	1a94 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1a32:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1a34:	7cc3      	ldrb	r3, [r0, #19]
    1a36:	07da      	lsls	r2, r3, #31
    1a38:	d508      	bpl.n	1a4c <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1a3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a3e:	6945      	ldr	r5, [r0, #20]
    1a40:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1a44:	402a      	ands	r2, r5
    1a46:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1a48:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1a4c:	079d      	lsls	r5, r3, #30
    1a4e:	d508      	bpl.n	1a62 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1a50:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a54:	6985      	ldr	r5, [r0, #24]
    1a56:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    1a5a:	402a      	ands	r2, r5
    1a5c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1a5e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1a62:	0759      	lsls	r1, r3, #29
    1a64:	d508      	bpl.n	1a78 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1a66:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a6a:	69c5      	ldr	r5, [r0, #28]
    1a6c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1a70:	402a      	ands	r2, r5
    1a72:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1a74:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1a78:	071a      	lsls	r2, r3, #28
    1a7a:	d508      	bpl.n	1a8e <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1a7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1a80:	6a05      	ldr	r5, [r0, #32]
    1a82:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1a86:	402a      	ands	r2, r5
    1a88:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1a8a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1a8e:	06db      	lsls	r3, r3, #27
    1a90:	d42f      	bmi.n	1af2 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1a92:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1a94:	6883      	ldr	r3, [r0, #8]
    1a96:	429c      	cmp	r4, r3
    1a98:	d035      	beq.n	1b06 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1a9a:	4b22      	ldr	r3, [pc, #136]	; (1b24 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1a9c:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1a9e:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1aa0:	4a21      	ldr	r2, [pc, #132]	; (1b28 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1aa2:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1aa6:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1aaa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1aae:	3301      	adds	r3, #1
    1ab0:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1ab4:	b1cc      	cbz	r4, 1aea <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1ab6:	4294      	cmp	r4, r2
    1ab8:	d827      	bhi.n	1b0a <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1aba:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1abe:	fbb2 f2f3 	udiv	r2, r2, r3
    1ac2:	4294      	cmp	r4, r2
    1ac4:	d32c      	bcc.n	1b20 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1ac6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1aca:	d320      	bcc.n	1b0e <SPIClass::beginTransaction(SPISettings)+0xee>
    1acc:	4c17      	ldr	r4, [pc, #92]	; (1b2c <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1ace:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1ad0:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1ad2:	2203      	movs	r2, #3
		port().CR = 0;
    1ad4:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1ad6:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1ad8:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1ada:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1adc:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1ade:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1ae0:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1ae2:	611a      	str	r2, [r3, #16]
	}
    1ae4:	b002      	add	sp, #8
    1ae6:	bc30      	pop	{r4, r5}
    1ae8:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1aea:	4299      	cmp	r1, r3
    1aec:	d3ef      	bcc.n	1ace <SPIClass::beginTransaction(SPISettings)+0xae>
    1aee:	1c53      	adds	r3, r2, #1
    1af0:	e7e9      	b.n	1ac6 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1af2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1af6:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1af8:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1afc:	400b      	ands	r3, r1
    1afe:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1b00:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1b04:	e7c5      	b.n	1a92 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1b06:	68c4      	ldr	r4, [r0, #12]
    1b08:	e7e2      	b.n	1ad0 <SPIClass::beginTransaction(SPISettings)+0xb0>
    1b0a:	2400      	movs	r4, #0
    1b0c:	e7df      	b.n	1ace <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1b0e:	2b02      	cmp	r3, #2
    1b10:	d9fb      	bls.n	1b0a <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1b12:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1b14:	085a      	lsrs	r2, r3, #1
    1b16:	0214      	lsls	r4, r2, #8
    1b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1b1c:	431c      	orrs	r4, r3
    1b1e:	e7d6      	b.n	1ace <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1b20:	461a      	mov	r2, r3
    1b22:	e7e4      	b.n	1aee <SPIClass::beginTransaction(SPISettings)+0xce>
    1b24:	400fc000 	.word	0x400fc000
    1b28:	2000063c 	.word	0x2000063c
    1b2c:	007f7fff 	.word	0x007f7fff

00001b30 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    1b30:	b510      	push	{r4, lr}
    1b32:	4604      	mov	r4, r0
  if (_cs != -1) {
    1b34:	f990 000e 	ldrsb.w	r0, [r0, #14]
    1b38:	1c43      	adds	r3, r0, #1
    1b3a:	d003      	beq.n	1b44 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    1b3c:	2101      	movs	r1, #1
    1b3e:	b2c0      	uxtb	r0, r0
    1b40:	f001 fc98 	bl	3474 <digitalWrite>
  if (_spi) {
    1b44:	6823      	ldr	r3, [r4, #0]
    1b46:	b323      	cbz	r3, 1b92 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    1b48:	7cda      	ldrb	r2, [r3, #19]
    1b4a:	b312      	cbz	r2, 1b92 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1b4c:	07d1      	lsls	r1, r2, #31
    1b4e:	d504      	bpl.n	1b5a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    1b50:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1b52:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b56:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1b5a:	0794      	lsls	r4, r2, #30
    1b5c:	d504      	bpl.n	1b68 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    1b5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1b60:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b64:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1b68:	0750      	lsls	r0, r2, #29
    1b6a:	d504      	bpl.n	1b76 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    1b6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1b6e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b72:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1b76:	0711      	lsls	r1, r2, #28
    1b78:	d504      	bpl.n	1b84 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    1b7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1b7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b80:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1b84:	06d2      	lsls	r2, r2, #27
    1b86:	d504      	bpl.n	1b92 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    1b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1b8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1b8e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    1b92:	bd10      	pop	{r4, pc}

00001b94 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b98:	4604      	mov	r4, r0
    1b9a:	b082      	sub	sp, #8
  if (_spi) {
    1b9c:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    1b9e:	468a      	mov	sl, r1
    1ba0:	4690      	mov	r8, r2
    1ba2:	461e      	mov	r6, r3
    1ba4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    1ba6:	b120      	cbz	r0, 1bb2 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    1ba8:	6863      	ldr	r3, [r4, #4]
    1baa:	e893 0006 	ldmia.w	r3, {r1, r2}
    1bae:	f7ff ff37 	bl	1a20 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1bb2:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1bb6:	1c43      	adds	r3, r0, #1
    1bb8:	d142      	bne.n	1c40 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    1bba:	b1d5      	cbz	r5, 1bf2 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    1bbc:	3e01      	subs	r6, #1
    1bbe:	eb06 0905 	add.w	r9, r6, r5
    1bc2:	f10d 0507 	add.w	r5, sp, #7
    1bc6:	e003      	b.n	1bd0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    1bc8:	f7ff fe50 	bl	186c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1bcc:	454e      	cmp	r6, r9
    1bce:	d010      	beq.n	1bf2 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    1bd0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1bd4:	2201      	movs	r2, #1
  if (_spi) {
    1bd6:	6827      	ldr	r7, [r4, #0]
    1bd8:	4629      	mov	r1, r5
    1bda:	4620      	mov	r0, r4
  uint8_t data = send;
    1bdc:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1be0:	2f00      	cmp	r7, #0
    1be2:	d0f1      	beq.n	1bc8 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    1be4:	4613      	mov	r3, r2
    1be6:	4638      	mov	r0, r7
    1be8:	462a      	mov	r2, r5
    1bea:	f000 f9c1 	bl	1f70 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    1bee:	454e      	cmp	r6, r9
    1bf0:	d1ee      	bne.n	1bd0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    1bf2:	f1b8 0f00 	cmp.w	r8, #0
    1bf6:	d01c      	beq.n	1c32 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    1bf8:	44d0      	add	r8, sl
    1bfa:	f10a 36ff 	add.w	r6, sl, #4294967295
    1bfe:	f10d 0507 	add.w	r5, sp, #7
    1c02:	f108 38ff 	add.w	r8, r8, #4294967295
    1c06:	e003      	b.n	1c10 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    1c08:	f7ff fe30 	bl	186c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1c0c:	45b0      	cmp	r8, r6
    1c0e:	d010      	beq.n	1c32 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    1c10:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    1c14:	2201      	movs	r2, #1
  if (_spi) {
    1c16:	6827      	ldr	r7, [r4, #0]
    1c18:	4629      	mov	r1, r5
    1c1a:	4620      	mov	r0, r4
  uint8_t data = send;
    1c1c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1c20:	2f00      	cmp	r7, #0
    1c22:	d0f1      	beq.n	1c08 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    1c24:	4613      	mov	r3, r2
    1c26:	4638      	mov	r0, r7
    1c28:	462a      	mov	r2, r5
    1c2a:	f000 f9a1 	bl	1f70 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    1c2e:	45b0      	cmp	r8, r6
    1c30:	d1ee      	bne.n	1c10 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    1c32:	4620      	mov	r0, r4
    1c34:	f7ff ff7c 	bl	1b30 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1c38:	2001      	movs	r0, #1
    1c3a:	b002      	add	sp, #8
    1c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    1c40:	b2c0      	uxtb	r0, r0
    1c42:	2100      	movs	r1, #0
    1c44:	f001 fc16 	bl	3474 <digitalWrite>
    1c48:	e7b7      	b.n	1bba <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    1c4a:	bf00      	nop

00001c4c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    1c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c50:	4604      	mov	r4, r0
    1c52:	b083      	sub	sp, #12
  if (_spi) {
    1c54:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    1c56:	460f      	mov	r7, r1
    1c58:	4615      	mov	r5, r2
    1c5a:	469b      	mov	fp, r3
    1c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    1c60:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    1c64:	b120      	cbz	r0, 1c70 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    1c66:	6863      	ldr	r3, [r4, #4]
    1c68:	e893 0006 	ldmia.w	r3, {r1, r2}
    1c6c:	f7ff fed8 	bl	1a20 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1c70:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1c74:	1c43      	adds	r3, r0, #1
    1c76:	d148      	bne.n	1d0a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    1c78:	b1d5      	cbz	r5, 1cb0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    1c7a:	3f01      	subs	r7, #1
    1c7c:	eb07 0905 	add.w	r9, r7, r5
    1c80:	f10d 0507 	add.w	r5, sp, #7
    1c84:	e003      	b.n	1c8e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    1c86:	f7ff fdf1 	bl	186c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1c8a:	454f      	cmp	r7, r9
    1c8c:	d010      	beq.n	1cb0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    1c8e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    1c92:	2201      	movs	r2, #1
  if (_spi) {
    1c94:	6826      	ldr	r6, [r4, #0]
    1c96:	4629      	mov	r1, r5
    1c98:	4620      	mov	r0, r4
  uint8_t data = send;
    1c9a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1c9e:	2e00      	cmp	r6, #0
    1ca0:	d0f1      	beq.n	1c86 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    1ca2:	4613      	mov	r3, r2
    1ca4:	4630      	mov	r0, r6
    1ca6:	462a      	mov	r2, r5
    1ca8:	f000 f962 	bl	1f70 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    1cac:	454f      	cmp	r7, r9
    1cae:	d1ee      	bne.n	1c8e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    1cb0:	f1ba 0f00 	cmp.w	sl, #0
    1cb4:	d022      	beq.n	1cfc <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    1cb6:	44da      	add	sl, fp
    1cb8:	f10b 36ff 	add.w	r6, fp, #4294967295
    1cbc:	f10d 0507 	add.w	r5, sp, #7
    1cc0:	f10a 3aff 	add.w	sl, sl, #4294967295
    1cc4:	e007      	b.n	1cd6 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    1cc6:	f7ff fdd1 	bl	186c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    1cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1cce:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1cd2:	45b2      	cmp	sl, r6
    1cd4:	d012      	beq.n	1cfc <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    1cd6:	6827      	ldr	r7, [r4, #0]
    1cd8:	2201      	movs	r2, #1
    1cda:	4629      	mov	r1, r5
    1cdc:	4620      	mov	r0, r4
  uint8_t data = send;
    1cde:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    1ce2:	2f00      	cmp	r7, #0
    1ce4:	d0ef      	beq.n	1cc6 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    1ce6:	4613      	mov	r3, r2
    1ce8:	4638      	mov	r0, r7
    1cea:	462a      	mov	r2, r5
    1cec:	f000 f940 	bl	1f70 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    1cf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1cf4:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1cf8:	45b2      	cmp	sl, r6
    1cfa:	d1ec      	bne.n	1cd6 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    1cfc:	4620      	mov	r0, r4
    1cfe:	f7ff ff17 	bl	1b30 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    1d02:	2001      	movs	r0, #1
    1d04:	b003      	add	sp, #12
    1d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    1d0a:	b2c0      	uxtb	r0, r0
    1d0c:	2100      	movs	r1, #0
    1d0e:	f001 fbb1 	bl	3474 <digitalWrite>
    1d12:	e7b1      	b.n	1c78 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00001d14 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1d14:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    1d18:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    1d1a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    1d1e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1d20:	d101      	bne.n	1d26 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    1d22:	6883      	ldr	r3, [r0, #8]
    1d24:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    1d26:	f000 b981 	b.w	202c <EventResponder::triggerEventNotImmediate()>
    1d2a:	bf00      	nop

00001d2c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1d2c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1d2e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d30:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    1d34:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d36:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    1d38:	b1a3      	cbz	r3, 1d64 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d3a:	b321      	cbz	r1, 1d86 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    1d3c:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    1d40:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d42:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d44:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1d46:	07af      	lsls	r7, r5, #30
    1d48:	d407      	bmi.n	1d5a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    1d4a:	4615      	mov	r5, r2
				count_read--;
    1d4c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d4e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    1d50:	b11a      	cbz	r2, 1d5a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d52:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    1d56:	462a      	mov	r2, r5
    1d58:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1d5a:	6965      	ldr	r5, [r4, #20]
    1d5c:	07ed      	lsls	r5, r5, #31
    1d5e:	d5f1      	bpl.n	1d44 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    1d60:	2b00      	cmp	r3, #0
    1d62:	d1ea      	bne.n	1d3a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1d64:	b16e      	cbz	r6, 1d82 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    1d66:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d68:	6f19      	ldr	r1, [r3, #112]	; 0x70
    1d6a:	0789      	lsls	r1, r1, #30
    1d6c:	d4fa      	bmi.n	1d64 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    1d6e:	4611      	mov	r1, r2
			count_read--;
    1d70:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    1d74:	2a00      	cmp	r2, #0
    1d76:	d0f5      	beq.n	1d64 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d78:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    1d7c:	460a      	mov	r2, r1
	while (count_read) {
    1d7e:	2e00      	cmp	r6, #0
    1d80:	d1f1      	bne.n	1d66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    1d82:	bcf0      	pop	{r4, r5, r6, r7}
    1d84:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d86:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1d8a:	e7d9      	b.n	1d40 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00001d8c <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    1d8c:	4b32      	ldr	r3, [pc, #200]	; (1e58 <_spi_dma_rxISR1()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1d8e:	4933      	ldr	r1, [pc, #204]	; (1e5c <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1d90:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1d92:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    1d96:	7920      	ldrb	r0, [r4, #4]
    1d98:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    1d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1d9c:	f895 c004 	ldrb.w	ip, [r5, #4]
    1da0:	f881 c01c 	strb.w	ip, [r1, #28]
    1da4:	7708      	strb	r0, [r1, #28]
    1da6:	b152      	cbz	r2, 1dbe <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1da8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1dac:	d323      	bcc.n	1df6 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1dae:	492c      	ldr	r1, [pc, #176]	; (1e60 <_spi_dma_rxISR1()+0xd4>)
    1db0:	4411      	add	r1, r2
		DMA_SERQ = channel;
    1db2:	4a2a      	ldr	r2, [pc, #168]	; (1e5c <_spi_dma_rxISR1()+0xd0>)
    1db4:	6419      	str	r1, [r3, #64]	; 0x40
    1db6:	76d0      	strb	r0, [r2, #27]
    1db8:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1dbc:	bd30      	pop	{r4, r5, pc}
    1dbe:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1dc0:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    1dc2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1dc4:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1dc6:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1dca:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1dcc:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1dce:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    1dd2:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1dd4:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1dd6:	6804      	ldr	r4, [r0, #0]
    1dd8:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1dda:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1dde:	4b21      	ldr	r3, [pc, #132]	; (1e64 <_spi_dma_rxISR1()+0xd8>)
    1de0:	429c      	cmp	r4, r3
    1de2:	d126      	bne.n	1e32 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    1de4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    1de6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1de8:	2b02      	cmp	r3, #2
		_data = data;
    1dea:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1dec:	d126      	bne.n	1e3c <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    1dee:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1df4:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    1df6:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1df8:	8be9      	ldrh	r1, [r5, #30]
    1dfa:	0409      	lsls	r1, r1, #16
    1dfc:	d422      	bmi.n	1e44 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    1dfe:	b292      	uxth	r2, r2
    1e00:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    1e02:	6821      	ldr	r1, [r4, #0]
    1e04:	8bec      	ldrh	r4, [r5, #30]
    1e06:	b2a4      	uxth	r4, r4
    1e08:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1e0a:	8bcc      	ldrh	r4, [r1, #30]
    1e0c:	0424      	lsls	r4, r4, #16
    1e0e:	d505      	bpl.n	1e1c <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e10:	8bcc      	ldrh	r4, [r1, #30]
    1e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1e16:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1e1a:	4322      	orrs	r2, r4
    1e1c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1e1e:	8bca      	ldrh	r2, [r1, #30]
    1e20:	b292      	uxth	r2, r2
    1e22:	82ca      	strh	r2, [r1, #22]
    1e24:	2100      	movs	r1, #0
    1e26:	4a0d      	ldr	r2, [pc, #52]	; (1e5c <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1e28:	6419      	str	r1, [r3, #64]	; 0x40
    1e2a:	76d0      	strb	r0, [r2, #27]
    1e2c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e30:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    1e32:	4623      	mov	r3, r4
    1e34:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1e3a:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    1e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1e40:	f000 b8f4 	b.w	202c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1e44:	8be9      	ldrh	r1, [r5, #30]
    1e46:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    1e4a:	b292      	uxth	r2, r2
    1e4c:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1e50:	ea41 010e 	orr.w	r1, r1, lr
    1e54:	83e9      	strh	r1, [r5, #30]
    1e56:	e7d4      	b.n	1e02 <_spi_dma_rxISR1()+0x76>
    1e58:	20001cd8 	.word	0x20001cd8
    1e5c:	400e8000 	.word	0x400e8000
    1e60:	ffff8001 	.word	0xffff8001
    1e64:	00001d15 	.word	0x00001d15

00001e68 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    1e68:	4b32      	ldr	r3, [pc, #200]	; (1f34 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    1e6a:	4933      	ldr	r1, [pc, #204]	; (1f38 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e6c:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    1e6e:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    1e72:	7920      	ldrb	r0, [r4, #4]
    1e74:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    1e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    1e78:	f895 c004 	ldrb.w	ip, [r5, #4]
    1e7c:	f881 c01c 	strb.w	ip, [r1, #28]
    1e80:	7708      	strb	r0, [r1, #28]
    1e82:	b152      	cbz	r2, 1e9a <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    1e84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    1e88:	d323      	bcc.n	1ed2 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    1e8a:	492c      	ldr	r1, [pc, #176]	; (1f3c <_spi_dma_rxISR0()+0xd4>)
    1e8c:	4411      	add	r1, r2
		DMA_SERQ = channel;
    1e8e:	4a2a      	ldr	r2, [pc, #168]	; (1f38 <_spi_dma_rxISR0()+0xd0>)
    1e90:	6419      	str	r1, [r3, #64]	; 0x40
    1e92:	76d0      	strb	r0, [r2, #27]
    1e94:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1e98:	bd30      	pop	{r4, r5, pc}
    1e9a:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1e9c:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    1e9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    1ea0:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1ea2:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    1ea6:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    1ea8:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    1eaa:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    1eae:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1eb0:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    1eb2:	6804      	ldr	r4, [r0, #0]
    1eb4:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    1eb6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    1eba:	4b21      	ldr	r3, [pc, #132]	; (1f40 <_spi_dma_rxISR0()+0xd8>)
    1ebc:	429c      	cmp	r4, r3
    1ebe:	d126      	bne.n	1f0e <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    1ec0:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    1ec2:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    1ec4:	2b02      	cmp	r3, #2
		_data = data;
    1ec6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    1ec8:	d126      	bne.n	1f18 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    1eca:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1ed0:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    1ed2:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1ed4:	8be9      	ldrh	r1, [r5, #30]
    1ed6:	0409      	lsls	r1, r1, #16
    1ed8:	d422      	bmi.n	1f20 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    1eda:	b292      	uxth	r2, r2
    1edc:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    1ede:	6821      	ldr	r1, [r4, #0]
    1ee0:	8bec      	ldrh	r4, [r5, #30]
    1ee2:	b2a4      	uxth	r4, r4
    1ee4:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    1ee6:	8bcc      	ldrh	r4, [r1, #30]
    1ee8:	0424      	lsls	r4, r4, #16
    1eea:	d505      	bpl.n	1ef8 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1eec:	8bcc      	ldrh	r4, [r1, #30]
    1eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1ef2:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    1ef6:	4322      	orrs	r2, r4
    1ef8:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    1efa:	8bca      	ldrh	r2, [r1, #30]
    1efc:	b292      	uxth	r2, r2
    1efe:	82ca      	strh	r2, [r1, #22]
    1f00:	2100      	movs	r1, #0
    1f02:	4a0d      	ldr	r2, [pc, #52]	; (1f38 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    1f04:	6419      	str	r1, [r3, #64]	; 0x40
    1f06:	76d0      	strb	r0, [r2, #27]
    1f08:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1f0c:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    1f0e:	4623      	mov	r3, r4
    1f10:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    1f16:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    1f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    1f1c:	f000 b886 	b.w	202c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    1f20:	8be9      	ldrh	r1, [r5, #30]
    1f22:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    1f26:	b292      	uxth	r2, r2
    1f28:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    1f2c:	ea41 010e 	orr.w	r1, r1, lr
    1f30:	83e9      	strh	r1, [r5, #30]
    1f32:	e7d4      	b.n	1ede <_spi_dma_rxISR0()+0x76>
    1f34:	20001c88 	.word	0x20001c88
    1f38:	400e8000 	.word	0x400e8000
    1f3c:	ffff8001 	.word	0xffff8001
    1f40:	00001d15 	.word	0x00001d15

00001f44 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    1f44:	2300      	movs	r3, #0
    1f46:	e9c0 1200 	strd	r1, r2, [r0]
    1f4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
    1f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    1f52:	e9c0 3306 	strd	r3, r3, [r0, #24]
    1f56:	e9c0 3308 	strd	r3, r3, [r0, #32]
    1f5a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    1f5e:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    1f62:	6383      	str	r3, [r0, #56]	; 0x38
    1f64:	8783      	strh	r3, [r0, #60]	; 0x3c
    1f66:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    1f6a:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    1f6e:	4770      	bx	lr

00001f70 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    1f70:	b10b      	cbz	r3, 1f76 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1f72:	f7ff bedb 	b.w	1d2c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    1f76:	4770      	bx	lr

00001f78 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    1f78:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    1f7a:	4a08      	ldr	r2, [pc, #32]	; (1f9c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    1f7c:	4908      	ldr	r1, [pc, #32]	; (1fa0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    1f7e:	4809      	ldr	r0, [pc, #36]	; (1fa4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    1f80:	f7ff ffe0 	bl	1f44 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    1f84:	4a08      	ldr	r2, [pc, #32]	; (1fa8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    1f86:	4909      	ldr	r1, [pc, #36]	; (1fac <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    1f88:	4809      	ldr	r0, [pc, #36]	; (1fb0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    1f8a:	f7ff ffdb 	bl	1f44 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    1f8e:	4a09      	ldr	r2, [pc, #36]	; (1fb4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    1f90:	4909      	ldr	r1, [pc, #36]	; (1fb8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    1f92:	480a      	ldr	r0, [pc, #40]	; (1fbc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    1f94:	f7ff ffd6 	bl	1f44 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    1f98:	bd08      	pop	{r3, pc}
    1f9a:	bf00      	nop
    1f9c:	2000054c 	.word	0x2000054c
    1fa0:	403a0000 	.word	0x403a0000
    1fa4:	20001c88 	.word	0x20001c88
    1fa8:	200004dc 	.word	0x200004dc
    1fac:	4039c000 	.word	0x4039c000
    1fb0:	20001cd8 	.word	0x20001cd8
    1fb4:	2000046c 	.word	0x2000046c
    1fb8:	40394000 	.word	0x40394000
    1fbc:	20001d28 	.word	0x20001d28

00001fc0 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/*! 
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {
}
    1fc0:	4770      	bx	lr
    1fc2:	bf00      	nop

00001fc4 <Adafruit_MCP4725::begin(unsigned char)>:
/**************************************************************************/
/*! 
    @brief  Setups the HW
*/
/**************************************************************************/
void Adafruit_MCP4725::begin(uint8_t addr) {
    1fc4:	4603      	mov	r3, r0
  _i2caddr = addr;
  Wire.begin();
    1fc6:	4802      	ldr	r0, [pc, #8]	; (1fd0 <Adafruit_MCP4725::begin(unsigned char)+0xc>)
  _i2caddr = addr;
    1fc8:	7019      	strb	r1, [r3, #0]
  Wire.begin();
    1fca:	f008 b975 	b.w	a2b8 <___ZN7TwoWire5beginEv_veneer>
    1fce:	bf00      	nop
    1fd0:	20002078 	.word	0x20002078

00001fd4 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>:
                that the DAC will retain the current voltage output
                after power-down or reset.
*/
/**************************************************************************/
void Adafruit_MCP4725::setVoltage( uint16_t output, bool writeEEPROM )
{
    1fd4:	b510      	push	{r4, lr}
		transmitting = 1;
    1fd6:	f04f 0c01 	mov.w	ip, #1
		txBuffer[0] = (address << 1);
    1fda:	7800      	ldrb	r0, [r0, #0]
    1fdc:	4b12      	ldr	r3, [pc, #72]	; (2028 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    1fde:	460c      	mov	r4, r1
    1fe0:	fa00 f00c 	lsl.w	r0, r0, ip
		transmitting = 1;
    1fe4:	f883 c130 	strb.w	ip, [r3, #304]	; 0x130
		txBufferLength = 1;
    1fe8:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1fec:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
#ifdef TWBR
  uint8_t twbrback = TWBR;
  TWBR = ((F_CPU / 400000L) - 16) / 2; // Set I2C frequency to 400kHz
#endif
  Wire.beginTransmission(_i2caddr);
  if (writeEEPROM)
    1ff0:	b1a2      	cbz	r2, 201c <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x48>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    1ff2:	2160      	movs	r1, #96	; 0x60
    1ff4:	4618      	mov	r0, r3
    1ff6:	f7fe fbb3 	bl	760 <TwoWire::write(unsigned char)>
    1ffa:	f3c4 1107 	ubfx	r1, r4, #4, #8
    1ffe:	480a      	ldr	r0, [pc, #40]	; (2028 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    2000:	f7fe fbae 	bl	760 <TwoWire::write(unsigned char)>
    2004:	4808      	ldr	r0, [pc, #32]	; (2028 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  else
  {
    Wire.write(MCP4726_CMD_WRITEDAC);
  }
  Wire.write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4)
  Wire.write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x)
    2006:	0121      	lsls	r1, r4, #4
    2008:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    200c:	f7fe fba8 	bl	760 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    2010:	2101      	movs	r1, #1
    2012:	4805      	ldr	r0, [pc, #20]	; (2028 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  Wire.endTransmission();
#ifdef TWBR
  TWBR = twbrback;
#endif
}
    2014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2018:	f7fe bcb0 	b.w	97c <TwoWire::endTransmission(unsigned char)>
		return write((uint8_t)n);
    201c:	2140      	movs	r1, #64	; 0x40
    201e:	4618      	mov	r0, r3
    2020:	f7fe fb9e 	bl	760 <TwoWire::write(unsigned char)>
    2024:	e7e9      	b.n	1ffa <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x26>
    2026:	bf00      	nop
    2028:	20002078 	.word	0x20002078

0000202c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    202c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2030:	b672      	cpsid	i
	if (_triggered == false) {
    2032:	7f43      	ldrb	r3, [r0, #29]
    2034:	b95b      	cbnz	r3, 204e <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    2036:	7f01      	ldrb	r1, [r0, #28]
    2038:	2901      	cmp	r1, #1
{
    203a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    203c:	d00b      	beq.n	2056 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    203e:	2903      	cmp	r1, #3
    2040:	d013      	beq.n	206a <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    2042:	2301      	movs	r3, #1
    2044:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2046:	b902      	cbnz	r2, 204a <EventResponder::triggerEventNotImmediate()+0x1e>
    2048:	b662      	cpsie	i
}
    204a:	bc30      	pop	{r4, r5}
    204c:	4770      	bx	lr
    204e:	b90a      	cbnz	r2, 2054 <EventResponder::triggerEventNotImmediate()+0x28>
    2050:	b662      	cpsie	i
    2052:	4770      	bx	lr
    2054:	4770      	bx	lr
			if (firstYield == nullptr) {
    2056:	4c12      	ldr	r4, [pc, #72]	; (20a0 <EventResponder::triggerEventNotImmediate()+0x74>)
    2058:	6821      	ldr	r1, [r4, #0]
    205a:	b1b1      	cbz	r1, 208a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    205c:	4911      	ldr	r1, [pc, #68]	; (20a4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    205e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    2060:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    2062:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    2064:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2066:	6158      	str	r0, [r3, #20]
				lastYield = this;
    2068:	e7eb      	b.n	2042 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    206a:	4d0f      	ldr	r5, [pc, #60]	; (20a8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    206c:	490f      	ldr	r1, [pc, #60]	; (20ac <EventResponder::triggerEventNotImmediate()+0x80>)
    206e:	682c      	ldr	r4, [r5, #0]
    2070:	b18c      	cbz	r4, 2096 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    2072:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2074:	680b      	ldr	r3, [r1, #0]
    2076:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2078:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    207a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    207e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    2082:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2084:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    2088:	e7db      	b.n	2042 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    208a:	4b06      	ldr	r3, [pc, #24]	; (20a4 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    208c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    208e:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    2090:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    2094:	e7d5      	b.n	2042 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    2096:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    209a:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    209c:	e7ed      	b.n	207a <EventResponder::triggerEventNotImmediate()+0x4e>
    209e:	bf00      	nop
    20a0:	20002790 	.word	0x20002790
    20a4:	2000279c 	.word	0x2000279c
    20a8:	20002798 	.word	0x20002798
    20ac:	20002794 	.word	0x20002794

000020b0 <EventResponder::runFromInterrupt()>:
{
    20b0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20b2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    20b6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    20b8:	4c0c      	ldr	r4, [pc, #48]	; (20ec <EventResponder::runFromInterrupt()+0x3c>)
    20ba:	6820      	ldr	r0, [r4, #0]
		if (first) {
    20bc:	b180      	cbz	r0, 20e0 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    20be:	4e0c      	ldr	r6, [pc, #48]	; (20f0 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    20c0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    20c2:	6943      	ldr	r3, [r0, #20]
    20c4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    20c6:	b173      	cbz	r3, 20e6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    20c8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    20ca:	b902      	cbnz	r2, 20ce <EventResponder::runFromInterrupt()+0x1e>
    20cc:	b662      	cpsie	i
			(*(first->_function))(*first);
    20ce:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    20d0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    20d2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    20d4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    20d8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    20da:	6820      	ldr	r0, [r4, #0]
		if (first) {
    20dc:	2800      	cmp	r0, #0
    20de:	d1f0      	bne.n	20c2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    20e0:	b902      	cbnz	r2, 20e4 <EventResponder::runFromInterrupt()+0x34>
    20e2:	b662      	cpsie	i
}
    20e4:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    20e6:	6033      	str	r3, [r6, #0]
    20e8:	e7ef      	b.n	20ca <EventResponder::runFromInterrupt()+0x1a>
    20ea:	bf00      	nop
    20ec:	20002798 	.word	0x20002798
    20f0:	20002794 	.word	0x20002794

000020f4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    20f4:	f7ff bfdc 	b.w	20b0 <EventResponder::runFromInterrupt()>

000020f8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    20f8:	4904      	ldr	r1, [pc, #16]	; (210c <systick_isr+0x14>)
	systick_millis_count++;
    20fa:	4a05      	ldr	r2, [pc, #20]	; (2110 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    20fc:	6849      	ldr	r1, [r1, #4]
    20fe:	4b05      	ldr	r3, [pc, #20]	; (2114 <systick_isr+0x1c>)
    2100:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2102:	6813      	ldr	r3, [r2, #0]
    2104:	3301      	adds	r3, #1
    2106:	6013      	str	r3, [r2, #0]
}
    2108:	4770      	bx	lr
    210a:	bf00      	nop
    210c:	e0001000 	.word	0xe0001000
    2110:	200035bc 	.word	0x200035bc
    2114:	200035b8 	.word	0x200035b8

00002118 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    2118:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    211c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    2120:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    2122:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2124:	4293      	cmp	r3, r2
    2126:	d202      	bcs.n	212e <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    2128:	3a01      	subs	r2, #1
    212a:	1ad0      	subs	r0, r2, r3
}
    212c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    212e:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2130:	3901      	subs	r1, #1
    2132:	440a      	add	r2, r1
    2134:	1ad0      	subs	r0, r2, r3
    2136:	4770      	bx	lr

00002138 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    2138:	b672      	cpsid	i
	head = rx_buffer_head_;
    213a:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    213e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2142:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    2144:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    2146:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    2148:	bf3c      	itt	cc
    214a:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    214c:	1852      	addcc	r2, r2, r1
    214e:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    2150:	6902      	ldr	r2, [r0, #16]
    2152:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    2154:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    2156:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    215a:	4418      	add	r0, r3
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2160:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2164:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2166:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    216a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    216c:	b29b      	uxth	r3, r3
	if (head == tail) {
    216e:	4299      	cmp	r1, r3
    2170:	d010      	beq.n	2194 <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2172:	3301      	adds	r3, #1
    2174:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    2176:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2178:	4298      	cmp	r0, r3
    217a:	bf98      	it	ls
    217c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    217e:	4299      	cmp	r1, r3
    2180:	d903      	bls.n	218a <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    2182:	6a12      	ldr	r2, [r2, #32]
    2184:	5cd0      	ldrb	r0, [r2, r3]
    2186:	b2c0      	uxtb	r0, r0
    2188:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    218a:	1a5b      	subs	r3, r3, r1
    218c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    218e:	5cd0      	ldrb	r0, [r2, r3]
    2190:	b2c0      	uxtb	r0, r0
	}
}
    2192:	4770      	bx	lr
		__disable_irq();
    2194:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2196:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    219a:	b280      	uxth	r0, r0
		if (head == tail) {
    219c:	4281      	cmp	r1, r0
    219e:	d001      	beq.n	21a4 <HardwareSerial::peek()+0x44>
		__enable_irq();
    21a0:	b662      	cpsie	i
    21a2:	e7e6      	b.n	2172 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    21a4:	6913      	ldr	r3, [r2, #16]
    21a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    21a8:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    21ac:	d103      	bne.n	21b6 <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    21ae:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    21b2:	b662      	cpsie	i
			return c;
    21b4:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    21b6:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    21b8:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    21ba:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    21be:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    21c0:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    21c4:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    21c8:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    21ca:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    21ce:	704b      	strb	r3, [r1, #1]
    21d0:	e7ef      	b.n	21b2 <HardwareSerial::peek()+0x52>
    21d2:	bf00      	nop

000021d4 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    21d4:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    21d8:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    21da:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    21de:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    21e0:	b29b      	uxth	r3, r3
	if (head == tail) {
    21e2:	4299      	cmp	r1, r3
    21e4:	d026      	beq.n	2234 <HardwareSerial::read()+0x60>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21e6:	3301      	adds	r3, #1
{
    21e8:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    21ea:	6b94      	ldr	r4, [r2, #56]	; 0x38
    21ec:	429c      	cmp	r4, r3
    21ee:	d916      	bls.n	221e <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    21f0:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    21f2:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    21f6:	4298      	cmp	r0, r3
    21f8:	d917      	bls.n	222a <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    21fa:	6a10      	ldr	r0, [r2, #32]
    21fc:	5cc0      	ldrb	r0, [r0, r3]
    21fe:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    2200:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    2202:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    2206:	b145      	cbz	r5, 221a <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    2208:	4299      	cmp	r1, r3
    220a:	d31c      	bcc.n	2246 <HardwareSerial::read()+0x72>
    220c:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    220e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    2210:	4299      	cmp	r1, r3
    2212:	d302      	bcc.n	221a <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    2214:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2216:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    221a:	bc30      	pop	{r4, r5}
    221c:	4770      	bx	lr
    221e:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    2222:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2224:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    2226:	4298      	cmp	r0, r3
    2228:	d8e7      	bhi.n	21fa <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    222a:	1a18      	subs	r0, r3, r0
    222c:	6a55      	ldr	r5, [r2, #36]	; 0x24
    222e:	5c28      	ldrb	r0, [r5, r0]
    2230:	b2c0      	uxtb	r0, r0
    2232:	e7e5      	b.n	2200 <HardwareSerial::read()+0x2c>
    2234:	4608      	mov	r0, r1
		__disable_irq();
    2236:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2238:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    223c:	b289      	uxth	r1, r1
		if (head == tail) {
    223e:	4288      	cmp	r0, r1
    2240:	d004      	beq.n	224c <HardwareSerial::read()+0x78>
		__enable_irq();
    2242:	b662      	cpsie	i
    2244:	e7cf      	b.n	21e6 <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    2246:	440c      	add	r4, r1
    2248:	1ae3      	subs	r3, r4, r3
    224a:	e7e0      	b.n	220e <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    224c:	6913      	ldr	r3, [r2, #16]
    224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2250:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    2254:	d103      	bne.n	225e <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    2256:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    225a:	b662      	cpsie	i
}	
    225c:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    225e:	69d8      	ldr	r0, [r3, #28]
    2260:	f3c0 0009 	ubfx	r0, r0, #0, #10
    2264:	e7f9      	b.n	225a <HardwareSerial::read()+0x86>
    2266:	bf00      	nop

00002268 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    2268:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    226c:	b143      	cbz	r3, 2280 <HardwareSerial::flush()+0x18>
{
    226e:	b510      	push	{r4, lr}
    2270:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    2272:	f002 fe39 	bl	4ee8 <yield>
    2276:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    227a:	2b00      	cmp	r3, #0
    227c:	d1f9      	bne.n	2272 <HardwareSerial::flush()+0xa>
}
    227e:	bd10      	pop	{r4, pc}
    2280:	4770      	bx	lr
    2282:	bf00      	nop

00002284 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2284:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2288:	b9b8      	cbnz	r0, 22ba <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    228a:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    228e:	b94b      	cbnz	r3, 22a4 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2290:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    2294:	b93a      	cbnz	r2, 22a6 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    2296:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    229a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    229e:	b150      	cbz	r0, 22b6 <nvic_execution_priority()+0x32>
    22a0:	4298      	cmp	r0, r3
    22a2:	d208      	bcs.n	22b6 <nvic_execution_priority()+0x32>
}
    22a4:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    22a6:	2a0f      	cmp	r2, #15
    22a8:	d9f7      	bls.n	229a <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    22aa:	4b05      	ldr	r3, [pc, #20]	; (22c0 <nvic_execution_priority()+0x3c>)
    22ac:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    22ae:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    22b2:	2800      	cmp	r0, #0
    22b4:	d1f4      	bne.n	22a0 <nvic_execution_priority()+0x1c>
    22b6:	4618      	mov	r0, r3
	return priority;
    22b8:	4770      	bx	lr
	if (faultmask) return -1;
    22ba:	f04f 30ff 	mov.w	r0, #4294967295
    22be:	e7f1      	b.n	22a4 <nvic_execution_priority()+0x20>
    22c0:	e000e3f0 	.word	0xe000e3f0

000022c4 <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    22c4:	ee07 1a90 	vmov	s15, r1
    22c8:	ed9f 7a91 	vldr	s14, [pc, #580]	; 2510 <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>
	for (int osr=4; osr <= 32; osr++) {
    22cc:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    22ce:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    22d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    22d6:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 2514 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
    22da:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    22de:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    22e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    22e6:	468e      	mov	lr, r1
	int bestdiv = 1;
    22e8:	2401      	movs	r4, #1
		float div = base / (float)osr;
    22ea:	ee07 1a90 	vmov	s15, r1
    22ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    22f2:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    22f6:	ee77 7a05 	vadd.f32	s15, s14, s10
    22fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    22fe:	ee17 3a90 	vmov	r3, s15
    2302:	4563      	cmp	r3, ip
    2304:	bfa8      	it	ge
    2306:	4663      	movge	r3, ip
    2308:	2b01      	cmp	r3, #1
    230a:	bfb8      	it	lt
    230c:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    230e:	ee07 3a90 	vmov	s15, r3
    2312:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2316:	ee76 6ac7 	vsub.f32	s13, s13, s14
    231a:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    231e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2326:	bf48      	it	mi
    2328:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    232c:	eef4 7ac6 	vcmpe.f32	s15, s12
    2330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2334:	d803      	bhi.n	233e <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    2336:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    233a:	468e      	mov	lr, r1
			bestdiv = divint;
    233c:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    233e:	3101      	adds	r1, #1
    2340:	2921      	cmp	r1, #33	; 0x21
    2342:	d1d2      	bne.n	22ea <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    2344:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2346:	6943      	ldr	r3, [r0, #20]
    2348:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    234c:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2350:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2354:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    2356:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    235a:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    235e:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    2362:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    2366:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    236a:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    236c:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    236e:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2372:	eba1 010c 	sub.w	r1, r1, ip
    2376:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    237a:	6831      	ldr	r1, [r6, #0]
    237c:	695d      	ldr	r5, [r3, #20]
    237e:	ea41 0105 	orr.w	r1, r1, r5
    2382:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2384:	bf14      	ite	ne
    2386:	2101      	movne	r1, #1
    2388:	2100      	moveq	r1, #0
    238a:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    238c:	f040 8091 	bne.w	24b2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ee>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2390:	7e05      	ldrb	r5, [r0, #24]
    2392:	f8df 8198 	ldr.w	r8, [pc, #408]	; 252c <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    2396:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    239a:	4e5f      	ldr	r6, [pc, #380]	; (2518 <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
    239c:	f89c 5018 	ldrb.w	r5, [ip, #24]
    23a0:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    23a4:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    23a6:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    23a8:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    23aa:	f8dc 601c 	ldr.w	r6, [ip, #28]
    23ae:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    23b0:	f8dc 5020 	ldr.w	r5, [ip, #32]
    23b4:	b115      	cbz	r5, 23bc <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    23b6:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    23ba:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    23bc:	7e45      	ldrb	r5, [r0, #25]
    23be:	27d9      	movs	r7, #217	; 0xd9
    23c0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    23c4:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    23c8:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    23cc:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    23ce:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    23d0:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    23d2:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    23d4:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    23d6:	7e41      	ldrb	r1, [r0, #25]
    23d8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    23dc:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    23de:	b10d      	cbz	r5, 23e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    23e0:	6c49      	ldr	r1, [r1, #68]	; 0x44
    23e2:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23e4:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23e8:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    23ec:	685d      	ldr	r5, [r3, #4]
	port->PINCFG = 0;
    23ee:	f04f 0600 	mov.w	r6, #0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23f2:	bfcc      	ite	gt
    23f4:	f04f 0e00 	movgt.w	lr, #0
    23f8:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    23fc:	0609      	lsls	r1, r1, #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    23fe:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2402:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2406:	4321      	orrs	r1, r4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    2408:	785c      	ldrb	r4, [r3, #1]
    240a:	f104 0310 	add.w	r3, r4, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    240e:	6904      	ldr	r4, [r0, #16]
    2410:	6121      	str	r1, [r4, #16]
    2412:	4942      	ldr	r1, [pc, #264]	; (251c <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	port->PINCFG = 0;
    2414:	60e6      	str	r6, [r4, #12]
    2416:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    241a:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    241c:	f04f 0c01 	mov.w	ip, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2420:	493f      	ldr	r1, [pc, #252]	; (2520 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2422:	f002 0503 	and.w	r5, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2426:	785c      	ldrb	r4, [r3, #1]
    2428:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    242c:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    242e:	6944      	ldr	r4, [r0, #20]
    2430:	4b3c      	ldr	r3, [pc, #240]	; (2524 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>)
    2432:	7861      	ldrb	r1, [r4, #1]
    2434:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    2438:	f001 011f 	and.w	r1, r1, #31
    243c:	009b      	lsls	r3, r3, #2
    243e:	fa0c f101 	lsl.w	r1, ip, r1
    2442:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    2444:	f04f 1102 	mov.w	r1, #131074	; 0x20002
    2448:	6903      	ldr	r3, [r0, #16]
    244a:	62d9      	str	r1, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    244c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    244e:	f041 0188 	orr.w	r1, r1, #136	; 0x88
    2452:	6299      	str	r1, [r3, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2454:	0751      	lsls	r1, r2, #29
    2456:	d429      	bmi.n	24ac <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2458:	f445 1170 	orr.w	r1, r5, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    245c:	f002 050f 	and.w	r5, r2, #15
    2460:	2d04      	cmp	r5, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2462:	7e85      	ldrb	r5, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2464:	bf08      	it	eq
    2466:	f041 4180 	orreq.w	r1, r1, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    246a:	0697      	lsls	r7, r2, #26
    246c:	bf48      	it	mi
    246e:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2472:	b10d      	cbz	r5, 2478 <HardwareSerial::begin(unsigned long, unsigned short)+0x1b4>
    2474:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2478:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    247a:	6199      	str	r1, [r3, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    247c:	d503      	bpl.n	2486 <HardwareSerial::begin(unsigned long, unsigned short)+0x1c2>
    247e:	6919      	ldr	r1, [r3, #16]
    2480:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    2484:	6119      	str	r1, [r3, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2486:	6959      	ldr	r1, [r3, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2488:	06d5      	lsls	r5, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    248a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    248e:	bf48      	it	mi
    2490:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2494:	05d2      	lsls	r2, r2, #23
	port->STAT = c;
    2496:	6159      	str	r1, [r3, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2498:	d503      	bpl.n	24a2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1de>
    249a:	691a      	ldr	r2, [r3, #16]
    249c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    24a0:	611a      	str	r2, [r3, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    24a2:	68e3      	ldr	r3, [r4, #12]
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	b1a3      	cbz	r3, 24d2 <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
};
    24a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    24ac:	491e      	ldr	r1, [pc, #120]	; (2528 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    24ae:	4329      	orrs	r1, r5
    24b0:	e7d4      	b.n	245c <HardwareSerial::begin(unsigned long, unsigned short)+0x198>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    24b2:	7e41      	ldrb	r1, [r0, #25]
    24b4:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    24b8:	4d1c      	ldr	r5, [pc, #112]	; (252c <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    24ba:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    24be:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    24c2:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    24c6:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    24c8:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    24ca:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    24cc:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    24ce:	6029      	str	r1, [r5, #0]
    24d0:	e781      	b.n	23d6 <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    24d2:	4e17      	ldr	r6, [pc, #92]	; (2530 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    24d4:	7834      	ldrb	r4, [r6, #0]
    24d6:	b1bc      	cbz	r4, 2508 <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
    24d8:	1e61      	subs	r1, r4, #1
    24da:	4d16      	ldr	r5, [pc, #88]	; (2534 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    24dc:	b2c9      	uxtb	r1, r1
    24de:	1f2b      	subs	r3, r5, #4
    24e0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    24e4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    24e8:	4290      	cmp	r0, r2
    24ea:	d0dd      	beq.n	24a8 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e4>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    24ec:	4299      	cmp	r1, r3
    24ee:	d1f9      	bne.n	24e4 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24f0:	1c63      	adds	r3, r4, #1
    24f2:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24f4:	4a10      	ldr	r2, [pc, #64]	; (2538 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24f6:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24f8:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    24fa:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    24fe:	f043 0302 	orr.w	r3, r3, #2
    2502:	7013      	strb	r3, [r2, #0]
};
    2504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2508:	2301      	movs	r3, #1
    250a:	4d0a      	ldr	r5, [pc, #40]	; (2534 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    250c:	e7f2      	b.n	24f4 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
    250e:	bf00      	nop
    2510:	4bb71b00 	.word	0x4bb71b00
    2514:	60ad78ec 	.word	0x60ad78ec
    2518:	0001f038 	.word	0x0001f038
    251c:	20001800 	.word	0x20001800
    2520:	e000e400 	.word	0xe000e400
    2524:	38003840 	.word	0x38003840
    2528:	003c0010 	.word	0x003c0010
    252c:	200008d4 	.word	0x200008d4
    2530:	200035df 	.word	0x200035df
    2534:	200027a0 	.word	0x200027a0
    2538:	200017b8 	.word	0x200017b8

0000253c <HardwareSerial::write9bit(unsigned long)>:
{
    253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    253e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2540:	4604      	mov	r4, r0
    2542:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2544:	b113      	cbz	r3, 254c <HardwareSerial::write9bit(unsigned long)+0x10>
    2546:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    254c:	7ea3      	ldrb	r3, [r4, #26]
    254e:	b133      	cbz	r3, 255e <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    2550:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    2552:	6922      	ldr	r2, [r4, #16]
    2554:	6993      	ldr	r3, [r2, #24]
    2556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    255a:	6193      	str	r3, [r2, #24]
		__enable_irq();
    255c:	b662      	cpsie	i
	head = tx_buffer_head_;
    255e:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    2562:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    2564:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    2566:	3501      	adds	r5, #1
    2568:	42ab      	cmp	r3, r5
    256a:	d84c      	bhi.n	2606 <HardwareSerial::write9bit(unsigned long)+0xca>
    256c:	2700      	movs	r7, #0
    256e:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    2570:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2574:	b29b      	uxth	r3, r3
    2576:	429d      	cmp	r5, r3
    2578:	d01a      	beq.n	25b0 <HardwareSerial::write9bit(unsigned long)+0x74>
    257a:	e029      	b.n	25d0 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    257c:	6921      	ldr	r1, [r4, #16]
    257e:	694b      	ldr	r3, [r1, #20]
    2580:	021b      	lsls	r3, r3, #8
    2582:	d510      	bpl.n	25a6 <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    2584:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2588:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    258a:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    258c:	3301      	adds	r3, #1
    258e:	429a      	cmp	r2, r3
    2590:	d936      	bls.n	2600 <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    2592:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    2594:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2596:	4298      	cmp	r0, r3
    2598:	d92d      	bls.n	25f6 <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    259a:	69e0      	ldr	r0, [r4, #28]
    259c:	5cc3      	ldrb	r3, [r0, r3]
    259e:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    25a0:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    25a2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    25a6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    25aa:	b29b      	uxth	r3, r3
    25ac:	42ab      	cmp	r3, r5
    25ae:	d10f      	bne.n	25d0 <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    25b0:	f7ff fe68 	bl	2284 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    25b4:	6963      	ldr	r3, [r4, #20]
    25b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    25ba:	4283      	cmp	r3, r0
    25bc:	dade      	bge.n	257c <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    25be:	28ff      	cmp	r0, #255	; 0xff
    25c0:	ddf1      	ble.n	25a6 <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    25c2:	f002 fc91 	bl	4ee8 <yield>
	while (tx_buffer_tail_ == head) {
    25c6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    25ca:	b29b      	uxth	r3, r3
    25cc:	42ab      	cmp	r3, r5
    25ce:	d0ef      	beq.n	25b0 <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    25d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    25d2:	42ab      	cmp	r3, r5
    25d4:	d919      	bls.n	260a <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    25d6:	69e3      	ldr	r3, [r4, #28]
    25d8:	b2f6      	uxtb	r6, r6
    25da:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    25dc:	b672      	cpsid	i
	transmitting_ = 1;
    25de:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    25e0:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    25e2:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    25e6:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    25ea:	6993      	ldr	r3, [r2, #24]
    25ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    25f0:	6193      	str	r3, [r2, #24]
	__enable_irq();
    25f2:	b662      	cpsie	i
}
    25f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    25f6:	1a1b      	subs	r3, r3, r0
    25f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    25fa:	5cc3      	ldrb	r3, [r0, r3]
    25fc:	b2db      	uxtb	r3, r3
    25fe:	e7cf      	b.n	25a0 <HardwareSerial::write9bit(unsigned long)+0x64>
    2600:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2602:	4613      	mov	r3, r2
    2604:	e7c6      	b.n	2594 <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    2606:	b2af      	uxth	r7, r5
    2608:	e7b2      	b.n	2570 <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    260a:	1aed      	subs	r5, r5, r3
    260c:	b2f6      	uxtb	r6, r6
    260e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2610:	555e      	strb	r6, [r3, r5]
    2612:	e7e3      	b.n	25dc <HardwareSerial::write9bit(unsigned long)+0xa0>

00002614 <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    2614:	f7ff bf92 	b.w	253c <HardwareSerial::write9bit(unsigned long)>

00002618 <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2618:	6902      	ldr	r2, [r0, #16]
    261a:	6953      	ldr	r3, [r2, #20]
    261c:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    2620:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2622:	4615      	mov	r5, r2
    2624:	d047      	beq.n	26b6 <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2626:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    2628:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    262c:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    2630:	d03e      	beq.n	26b0 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    2632:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    2636:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    263a:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    263c:	b2ad      	uxth	r5, r5
    263e:	e008      	b.n	2652 <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    2640:	6a02      	ldr	r2, [r0, #32]
    2642:	f802 c003 	strb.w	ip, [r2, r3]
    2646:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    2648:	f10e 33ff 	add.w	r3, lr, #4294967295
    264c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2650:	d01e      	beq.n	2690 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2652:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    2654:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    2656:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    265a:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    265c:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    2660:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2664:	429e      	cmp	r6, r3
    2666:	bf98      	it	ls
    2668:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    266a:	459c      	cmp	ip, r3
    266c:	d0ec      	beq.n	2648 <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    266e:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2670:	fa5f fc81 	uxtb.w	ip, r1
    2674:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    2676:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2678:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    267c:	d8e0      	bhi.n	2640 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    267e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2680:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    2684:	f10e 33ff 	add.w	r3, lr, #4294967295
    2688:	6902      	ldr	r2, [r0, #16]
    268a:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    268e:	d1e0      	bne.n	2652 <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    2690:	b2a3      	uxth	r3, r4
    2692:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    2696:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2698:	2b00      	cmp	r3, #0
    269a:	d05a      	beq.n	2752 <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    269c:	42ac      	cmp	r4, r5
    269e:	d35d      	bcc.n	275c <HardwareSerial::IRQHandler()+0x144>
    26a0:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    26a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    26a4:	42a1      	cmp	r1, r4
    26a6:	d854      	bhi.n	2752 <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    26a8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    26aa:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    26ac:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    26b0:	6953      	ldr	r3, [r2, #20]
    26b2:	02dc      	lsls	r4, r3, #11
    26b4:	d448      	bmi.n	2748 <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    26b6:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    26b8:	0231      	lsls	r1, r6, #8
    26ba:	d529      	bpl.n	2710 <HardwareSerial::IRQHandler()+0xf8>
    26bc:	6953      	ldr	r3, [r2, #20]
    26be:	021b      	lsls	r3, r3, #8
    26c0:	d526      	bpl.n	2710 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    26c2:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    26c6:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    26ca:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    26ce:	b29b      	uxth	r3, r3
    26d0:	e006      	b.n	26e0 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    26d2:	69c1      	ldr	r1, [r0, #28]
    26d4:	5cc9      	ldrb	r1, [r1, r3]
    26d6:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    26d8:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    26da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    26dc:	054c      	lsls	r4, r1, #21
    26de:	d412      	bmi.n	2706 <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    26e0:	4563      	cmp	r3, ip
    26e2:	d03f      	beq.n	2764 <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    26e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    26e6:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    26e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    26ea:	429c      	cmp	r4, r3
    26ec:	bf98      	it	ls
    26ee:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    26f0:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    26f2:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    26f6:	d8ec      	bhi.n	26d2 <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    26f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
    26fa:	5d09      	ldrb	r1, [r1, r4]
    26fc:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    26fe:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2700:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2702:	054c      	lsls	r4, r1, #21
    2704:	d5ec      	bpl.n	26e0 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    2706:	b299      	uxth	r1, r3
		if (head == tail) {
    2708:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    270a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    270e:	d02c      	beq.n	276a <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    2710:	0271      	lsls	r1, r6, #9
    2712:	d518      	bpl.n	2746 <HardwareSerial::IRQHandler()+0x12e>
    2714:	6953      	ldr	r3, [r2, #20]
    2716:	025b      	lsls	r3, r3, #9
    2718:	d515      	bpl.n	2746 <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    271a:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    271c:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    271e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2722:	b113      	cbz	r3, 272a <HardwareSerial::IRQHandler()+0x112>
    2724:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    272a:	7e83      	ldrb	r3, [r0, #26]
    272c:	b13b      	cbz	r3, 273e <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    272e:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    2730:	6902      	ldr	r2, [r0, #16]
    2732:	6993      	ldr	r3, [r2, #24]
    2734:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2738:	6193      	str	r3, [r2, #24]
			__enable_irq();
    273a:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    273c:	6905      	ldr	r5, [r0, #16]
    273e:	69ab      	ldr	r3, [r5, #24]
    2740:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    2744:	61ab      	str	r3, [r5, #24]
}
    2746:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    2748:	6953      	ldr	r3, [r2, #20]
    274a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    274e:	6153      	str	r3, [r2, #20]
    2750:	e7b1      	b.n	26b6 <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    2752:	6953      	ldr	r3, [r2, #20]
    2754:	4615      	mov	r5, r2
    2756:	02dc      	lsls	r4, r3, #11
    2758:	d5ad      	bpl.n	26b6 <HardwareSerial::IRQHandler()+0x9e>
    275a:	e7f5      	b.n	2748 <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    275c:	6b81      	ldr	r1, [r0, #56]	; 0x38
    275e:	1b49      	subs	r1, r1, r5
    2760:	440c      	add	r4, r1
    2762:	e79e      	b.n	26a2 <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    2764:	b29b      	uxth	r3, r3
    2766:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    276a:	6993      	ldr	r3, [r2, #24]
    276c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2770:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    2772:	6993      	ldr	r3, [r2, #24]
    2774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2778:	6193      	str	r3, [r2, #24]
    277a:	e7c9      	b.n	2710 <HardwareSerial::IRQHandler()+0xf8>

0000277c <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    277c:	4801      	ldr	r0, [pc, #4]	; (2784 <IRQHandler_Serial1+0x8>)
    277e:	f7ff bf4b 	b.w	2618 <HardwareSerial::IRQHandler()>
    2782:	bf00      	nop
    2784:	20001d78 	.word	0x20001d78

00002788 <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    2788:	b410      	push	{r4}
    278a:	4b16      	ldr	r3, [pc, #88]	; (27e4 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    278c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2790:	4815      	ldr	r0, [pc, #84]	; (27e8 <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    2792:	2200      	movs	r2, #0
    2794:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2796:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    2798:	4c14      	ldr	r4, [pc, #80]	; (27ec <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    279a:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    279c:	4814      	ldr	r0, [pc, #80]	; (27f0 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    279e:	611c      	str	r4, [r3, #16]
    27a0:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27a2:	4c14      	ldr	r4, [pc, #80]	; (27f4 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    27a4:	4814      	ldr	r0, [pc, #80]	; (27f8 <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    27aa:	731a      	strb	r2, [r3, #12]
    27ac:	831a      	strh	r2, [r3, #24]
    27ae:	769a      	strb	r2, [r3, #26]
    27b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27b4:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    27ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    27be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    27c2:	605a      	str	r2, [r3, #4]
    27c4:	625a      	str	r2, [r3, #36]	; 0x24
    27c6:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27c8:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    27ce:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    27d2:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    27d6:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    27da:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    27de:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    27e2:	4770      	bx	lr
    27e4:	20001d78 	.word	0x20001d78
    27e8:	200005c4 	.word	0x200005c4
    27ec:	40198000 	.word	0x40198000
    27f0:	20000408 	.word	0x20000408
    27f4:	20002638 	.word	0x20002638
    27f8:	20002438 	.word	0x20002438

000027fc <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    27fc:	4801      	ldr	r0, [pc, #4]	; (2804 <IRQHandler_Serial2+0x8>)
    27fe:	f7ff bf0b 	b.w	2618 <HardwareSerial::IRQHandler()>
    2802:	bf00      	nop
    2804:	20001dd8 	.word	0x20001dd8

00002808 <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    2808:	b410      	push	{r4}
    280a:	4b17      	ldr	r3, [pc, #92]	; (2868 <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    280c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2810:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2812:	2028      	movs	r0, #40	; 0x28
    2814:	609c      	str	r4, [r3, #8]
    2816:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2818:	4c14      	ldr	r4, [pc, #80]	; (286c <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    281a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    281e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2820:	4c13      	ldr	r4, [pc, #76]	; (2870 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    2822:	731a      	strb	r2, [r3, #12]
    2824:	611c      	str	r4, [r3, #16]
    2826:	4c13      	ldr	r4, [pc, #76]	; (2874 <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2828:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    282a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    282c:	4c12      	ldr	r4, [pc, #72]	; (2878 <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    282e:	769a      	strb	r2, [r3, #26]
    2830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2834:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2836:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    283a:	f85d 4b04 	ldr.w	r4, [sp], #4
    283e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2842:	605a      	str	r2, [r3, #4]
    2844:	625a      	str	r2, [r3, #36]	; 0x24
    2846:	641a      	str	r2, [r3, #64]	; 0x40
    2848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    284c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2850:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2854:	4809      	ldr	r0, [pc, #36]	; (287c <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2856:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    285a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    285c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2860:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2864:	4770      	bx	lr
    2866:	bf00      	nop
    2868:	20001dd8 	.word	0x20001dd8
    286c:	200005c4 	.word	0x200005c4
    2870:	40190000 	.word	0x40190000
    2874:	20001024 	.word	0x20001024
    2878:	20002678 	.word	0x20002678
    287c:	20002478 	.word	0x20002478

00002880 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    2880:	4801      	ldr	r0, [pc, #4]	; (2888 <IRQHandler_Serial3+0x8>)
    2882:	f7ff bec9 	b.w	2618 <HardwareSerial::IRQHandler()>
    2886:	bf00      	nop
    2888:	20001e38 	.word	0x20001e38

0000288c <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    288c:	b410      	push	{r4}
    288e:	4b17      	ldr	r3, [pc, #92]	; (28ec <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    2890:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2894:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2896:	2028      	movs	r0, #40	; 0x28
    2898:	609c      	str	r4, [r3, #8]
    289a:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    289c:	4c14      	ldr	r4, [pc, #80]	; (28f0 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    28a2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    28a4:	4c13      	ldr	r4, [pc, #76]	; (28f4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    28a6:	731a      	strb	r2, [r3, #12]
    28a8:	611c      	str	r4, [r3, #16]
    28aa:	4c13      	ldr	r4, [pc, #76]	; (28f8 <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28ac:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    28ae:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28b0:	4c12      	ldr	r4, [pc, #72]	; (28fc <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28b2:	769a      	strb	r2, [r3, #26]
    28b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28b8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    28be:	f85d 4b04 	ldr.w	r4, [sp], #4
    28c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    28c6:	605a      	str	r2, [r3, #4]
    28c8:	625a      	str	r2, [r3, #36]	; 0x24
    28ca:	641a      	str	r2, [r3, #64]	; 0x40
    28cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28d0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28d4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28d8:	4809      	ldr	r0, [pc, #36]	; (2900 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28da:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    28de:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    28e0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    28e4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    28e8:	4770      	bx	lr
    28ea:	bf00      	nop
    28ec:	20001e38 	.word	0x20001e38
    28f0:	200005c4 	.word	0x200005c4
    28f4:	40188000 	.word	0x40188000
    28f8:	20000f5c 	.word	0x20000f5c
    28fc:	200026a0 	.word	0x200026a0
    2900:	200024b8 	.word	0x200024b8

00002904 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    2904:	4801      	ldr	r0, [pc, #4]	; (290c <IRQHandler_Serial4+0x8>)
    2906:	f7ff be87 	b.w	2618 <HardwareSerial::IRQHandler()>
    290a:	bf00      	nop
    290c:	20001e98 	.word	0x20001e98

00002910 <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    2910:	b410      	push	{r4}
    2912:	4b17      	ldr	r3, [pc, #92]	; (2970 <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    2914:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2918:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    291a:	2028      	movs	r0, #40	; 0x28
    291c:	609c      	str	r4, [r3, #8]
    291e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2920:	4c14      	ldr	r4, [pc, #80]	; (2974 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    2922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2926:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2928:	4c13      	ldr	r4, [pc, #76]	; (2978 <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    292a:	731a      	strb	r2, [r3, #12]
    292c:	611c      	str	r4, [r3, #16]
    292e:	4c13      	ldr	r4, [pc, #76]	; (297c <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2930:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2932:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2934:	4c12      	ldr	r4, [pc, #72]	; (2980 <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2936:	769a      	strb	r2, [r3, #26]
    2938:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    293c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    293e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2942:	f85d 4b04 	ldr.w	r4, [sp], #4
    2946:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    294a:	605a      	str	r2, [r3, #4]
    294c:	625a      	str	r2, [r3, #36]	; 0x24
    294e:	641a      	str	r2, [r3, #64]	; 0x40
    2950:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2954:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2958:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    295c:	4809      	ldr	r0, [pc, #36]	; (2984 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    295e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2962:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2964:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2968:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    296c:	4770      	bx	lr
    296e:	bf00      	nop
    2970:	20001e98 	.word	0x20001e98
    2974:	200005c4 	.word	0x200005c4
    2978:	4018c000 	.word	0x4018c000
    297c:	20000fc0 	.word	0x20000fc0
    2980:	200026c8 	.word	0x200026c8
    2984:	200024f8 	.word	0x200024f8

00002988 <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    2988:	4801      	ldr	r0, [pc, #4]	; (2990 <IRQHandler_Serial5+0x8>)
    298a:	f7ff be45 	b.w	2618 <HardwareSerial::IRQHandler()>
    298e:	bf00      	nop
    2990:	20001ef8 	.word	0x20001ef8

00002994 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    2994:	b410      	push	{r4}
    2996:	4b17      	ldr	r3, [pc, #92]	; (29f4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    2998:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    299c:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    299e:	2028      	movs	r0, #40	; 0x28
    29a0:	609c      	str	r4, [r3, #8]
    29a2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29a4:	4c14      	ldr	r4, [pc, #80]	; (29f8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    29a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    29aa:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    29ac:	4c13      	ldr	r4, [pc, #76]	; (29fc <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    29ae:	731a      	strb	r2, [r3, #12]
    29b0:	611c      	str	r4, [r3, #16]
    29b2:	4c13      	ldr	r4, [pc, #76]	; (2a00 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29b4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    29b6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29b8:	4c12      	ldr	r4, [pc, #72]	; (2a04 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29ba:	769a      	strb	r2, [r3, #26]
    29bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29c0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    29c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    29ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    29ce:	605a      	str	r2, [r3, #4]
    29d0:	625a      	str	r2, [r3, #36]	; 0x24
    29d2:	641a      	str	r2, [r3, #64]	; 0x40
    29d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29d8:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29dc:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29e0:	4809      	ldr	r0, [pc, #36]	; (2a08 <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29e2:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    29e6:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    29e8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    29ec:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    29f0:	4770      	bx	lr
    29f2:	bf00      	nop
    29f4:	20001ef8 	.word	0x20001ef8
    29f8:	200005c4 	.word	0x200005c4
    29fc:	401a0000 	.word	0x401a0000
    2a00:	20001150 	.word	0x20001150
    2a04:	200026f0 	.word	0x200026f0
    2a08:	20002538 	.word	0x20002538

00002a0c <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    2a0c:	4801      	ldr	r0, [pc, #4]	; (2a14 <IRQHandler_Serial6+0x8>)
    2a0e:	f7ff be03 	b.w	2618 <HardwareSerial::IRQHandler()>
    2a12:	bf00      	nop
    2a14:	20001f58 	.word	0x20001f58

00002a18 <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    2a18:	b410      	push	{r4}
    2a1a:	4b17      	ldr	r3, [pc, #92]	; (2a78 <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    2a1c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2a20:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a22:	2028      	movs	r0, #40	; 0x28
    2a24:	609c      	str	r4, [r3, #8]
    2a26:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a28:	4c14      	ldr	r4, [pc, #80]	; (2a7c <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    2a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2a2e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2a30:	4c13      	ldr	r4, [pc, #76]	; (2a80 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    2a32:	731a      	strb	r2, [r3, #12]
    2a34:	611c      	str	r4, [r3, #16]
    2a36:	4c13      	ldr	r4, [pc, #76]	; (2a84 <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a38:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2a3a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a3c:	4c12      	ldr	r4, [pc, #72]	; (2a88 <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a3e:	769a      	strb	r2, [r3, #26]
    2a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a44:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2a52:	605a      	str	r2, [r3, #4]
    2a54:	625a      	str	r2, [r3, #36]	; 0x24
    2a56:	641a      	str	r2, [r3, #64]	; 0x40
    2a58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a5c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a60:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a64:	4809      	ldr	r0, [pc, #36]	; (2a8c <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a66:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2a6a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2a6c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2a70:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2a74:	4770      	bx	lr
    2a76:	bf00      	nop
    2a78:	20001f58 	.word	0x20001f58
    2a7c:	200005c4 	.word	0x200005c4
    2a80:	40184000 	.word	0x40184000
    2a84:	20000ef8 	.word	0x20000ef8
    2a88:	20002718 	.word	0x20002718
    2a8c:	20002578 	.word	0x20002578

00002a90 <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    2a90:	4801      	ldr	r0, [pc, #4]	; (2a98 <IRQHandler_Serial7+0x8>)
    2a92:	f7ff bdc1 	b.w	2618 <HardwareSerial::IRQHandler()>
    2a96:	bf00      	nop
    2a98:	20001fb8 	.word	0x20001fb8

00002a9c <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    2a9c:	b410      	push	{r4}
    2a9e:	4b17      	ldr	r3, [pc, #92]	; (2afc <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    2aa0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2aa4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2aa6:	2028      	movs	r0, #40	; 0x28
    2aa8:	609c      	str	r4, [r3, #8]
    2aaa:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2aac:	4c14      	ldr	r4, [pc, #80]	; (2b00 <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    2aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2ab2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2ab4:	4c13      	ldr	r4, [pc, #76]	; (2b04 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    2ab6:	731a      	strb	r2, [r3, #12]
    2ab8:	611c      	str	r4, [r3, #16]
    2aba:	4c13      	ldr	r4, [pc, #76]	; (2b08 <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2abc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2abe:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ac0:	4c12      	ldr	r4, [pc, #72]	; (2b0c <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ac2:	769a      	strb	r2, [r3, #26]
    2ac4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ac8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2aca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2ace:	f85d 4b04 	ldr.w	r4, [sp], #4
    2ad2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2ad6:	605a      	str	r2, [r3, #4]
    2ad8:	625a      	str	r2, [r3, #36]	; 0x24
    2ada:	641a      	str	r2, [r3, #64]	; 0x40
    2adc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ae0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ae4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ae8:	4809      	ldr	r0, [pc, #36]	; (2b10 <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2aea:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2aee:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2af0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2af4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2af8:	4770      	bx	lr
    2afa:	bf00      	nop
    2afc:	20001fb8 	.word	0x20001fb8
    2b00:	200005c4 	.word	0x200005c4
    2b04:	4019c000 	.word	0x4019c000
    2b08:	200010ec 	.word	0x200010ec
    2b0c:	20002740 	.word	0x20002740
    2b10:	200025b8 	.word	0x200025b8

00002b14 <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    2b14:	4801      	ldr	r0, [pc, #4]	; (2b1c <IRQHandler_Serial8+0x8>)
    2b16:	f7ff bd7f 	b.w	2618 <HardwareSerial::IRQHandler()>
    2b1a:	bf00      	nop
    2b1c:	20002018 	.word	0x20002018

00002b20 <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    2b20:	b410      	push	{r4}
    2b22:	4b17      	ldr	r3, [pc, #92]	; (2b80 <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
    2b24:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2b28:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b2a:	2028      	movs	r0, #40	; 0x28
    2b2c:	609c      	str	r4, [r3, #8]
    2b2e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b30:	4c14      	ldr	r4, [pc, #80]	; (2b84 <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    2b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2b36:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2b38:	4c13      	ldr	r4, [pc, #76]	; (2b88 <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    2b3a:	731a      	strb	r2, [r3, #12]
    2b3c:	611c      	str	r4, [r3, #16]
    2b3e:	4c13      	ldr	r4, [pc, #76]	; (2b8c <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b40:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2b42:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b44:	4c12      	ldr	r4, [pc, #72]	; (2b90 <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b46:	769a      	strb	r2, [r3, #26]
    2b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b4c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2b52:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2b5a:	605a      	str	r2, [r3, #4]
    2b5c:	625a      	str	r2, [r3, #36]	; 0x24
    2b5e:	641a      	str	r2, [r3, #64]	; 0x40
    2b60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b64:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b68:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b6c:	4809      	ldr	r0, [pc, #36]	; (2b94 <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b6e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2b72:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2b74:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2b78:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2b7c:	4770      	bx	lr
    2b7e:	bf00      	nop
    2b80:	20002018 	.word	0x20002018
    2b84:	200005c4 	.word	0x200005c4
    2b88:	40194000 	.word	0x40194000
    2b8c:	20001088 	.word	0x20001088
    2b90:	20002768 	.word	0x20002768
    2b94:	200025f8 	.word	0x200025f8

00002b98 <Print::write(unsigned char const*, unsigned int)>:
{
    2b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    2b9c:	460c      	mov	r4, r1
    2b9e:	b1d1      	cbz	r1, 2bd6 <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
    2ba0:	b1ea      	cbz	r2, 2bde <Print::write(unsigned char const*, unsigned int)+0x46>
    2ba2:	4680      	mov	r8, r0
    2ba4:	188e      	adds	r6, r1, r2
	size_t count = 0;
    2ba6:	2500      	movs	r5, #0
    2ba8:	4f0e      	ldr	r7, [pc, #56]	; (2be4 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    2baa:	e004      	b.n	2bb6 <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2bac:	f002 f908 	bl	4dc0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    2bb0:	42b4      	cmp	r4, r6
    2bb2:	4405      	add	r5, r0
    2bb4:	d00c      	beq.n	2bd0 <Print::write(unsigned char const*, unsigned int)+0x38>
    2bb6:	f8d8 3000 	ldr.w	r3, [r8]
    2bba:	f814 0b01 	ldrb.w	r0, [r4], #1
    2bbe:	681b      	ldr	r3, [r3, #0]
    2bc0:	42bb      	cmp	r3, r7
    2bc2:	d0f3      	beq.n	2bac <Print::write(unsigned char const*, unsigned int)+0x14>
    2bc4:	4601      	mov	r1, r0
    2bc6:	4640      	mov	r0, r8
    2bc8:	4798      	blx	r3
    2bca:	42b4      	cmp	r4, r6
    2bcc:	4405      	add	r5, r0
    2bce:	d1f2      	bne.n	2bb6 <Print::write(unsigned char const*, unsigned int)+0x1e>
}
    2bd0:	4628      	mov	r0, r5
    2bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    2bd6:	460d      	mov	r5, r1
}
    2bd8:	4628      	mov	r0, r5
    2bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    2bde:	4615      	mov	r5, r2
    2be0:	e7f6      	b.n	2bd0 <Print::write(unsigned char const*, unsigned int)+0x38>
    2be2:	bf00      	nop
    2be4:	00000ce9 	.word	0x00000ce9

00002be8 <Print::print(String const&)>:
{
    2be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    2bec:	688c      	ldr	r4, [r1, #8]
    2bee:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    2bf0:	b1dc      	cbz	r4, 2c2a <Print::print(String const&)+0x42>
	unsigned int index = 0;
    2bf2:	2500      	movs	r5, #0
    2bf4:	4688      	mov	r8, r1
    2bf6:	4606      	mov	r6, r0
	size_t count = 0;
    2bf8:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    2bfa:	462b      	mov	r3, r5
    2bfc:	2221      	movs	r2, #33	; 0x21
    2bfe:	a901      	add	r1, sp, #4
    2c00:	4640      	mov	r0, r8
    2c02:	f000 f9cf 	bl	2fa4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    2c06:	2c20      	cmp	r4, #32
    2c08:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    2c0a:	6833      	ldr	r3, [r6, #0]
    2c0c:	bf28      	it	cs
    2c0e:	2220      	movcs	r2, #32
    2c10:	a901      	add	r1, sp, #4
    2c12:	4630      	mov	r0, r6
    2c14:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    2c16:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    2c18:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    2c1a:	4798      	blx	r3
    2c1c:	4407      	add	r7, r0
	while (len > 0) {
    2c1e:	2c00      	cmp	r4, #0
    2c20:	d1eb      	bne.n	2bfa <Print::print(String const&)+0x12>
}
    2c22:	4638      	mov	r0, r7
    2c24:	b00a      	add	sp, #40	; 0x28
    2c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    2c2a:	4627      	mov	r7, r4
}
    2c2c:	4638      	mov	r0, r7
    2c2e:	b00a      	add	sp, #40	; 0x28
    2c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002c34 <Print::println()>:
{
    2c34:	b500      	push	{lr}
	return write(buf, 2);
    2c36:	6803      	ldr	r3, [r0, #0]
{
    2c38:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    2c3a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    2c3e:	2202      	movs	r2, #2
    2c40:	a901      	add	r1, sp, #4
    2c42:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    2c44:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    2c48:	4798      	blx	r3
}
    2c4a:	b003      	add	sp, #12
    2c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c50 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <_write+0x18>)
    2c52:	2802      	cmp	r0, #2
    2c54:	bf88      	it	hi
    2c56:	4603      	movhi	r3, r0
{
    2c58:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c5a:	681c      	ldr	r4, [r3, #0]
    2c5c:	4618      	mov	r0, r3
    2c5e:	6863      	ldr	r3, [r4, #4]
}
    2c60:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2c64:	4718      	bx	r3
    2c66:	bf00      	nop
    2c68:	20000ee8 	.word	0x20000ee8

00002c6c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2c6c:	f002 b832 	b.w	4cd4 <usb_serial_peekchar>

00002c70 <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    2c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    2c74:	2700      	movs	r7, #0
{
    2c76:	468b      	mov	fp, r1
    2c78:	4681      	mov	r9, r0
    2c7a:	4692      	mov	sl, r2
	String str;
    2c7c:	4639      	mov	r1, r7
    2c7e:	f103 38ff 	add.w	r8, r3, #4294967295
    2c82:	4c17      	ldr	r4, [pc, #92]	; (2ce0 <Stream::readStringUntil(char, unsigned int)+0x70>)
    2c84:	4e17      	ldr	r6, [pc, #92]	; (2ce4 <Stream::readStringUntil(char, unsigned int)+0x74>)
    2c86:	f000 f89f 	bl	2dc8 <String::String(char const*)>
	return systick_millis_count;
    2c8a:	6825      	ldr	r5, [r4, #0]
    2c8c:	e00b      	b.n	2ca6 <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    2c8e:	f002 f887 	bl	4da0 <usb_serial_getchar>
    if (c >= 0) return c;
    2c92:	2800      	cmp	r0, #0
    2c94:	da10      	bge.n	2cb8 <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    2c96:	f002 f927 	bl	4ee8 <yield>
    2c9a:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    2c9c:	f8db 2008 	ldr.w	r2, [fp, #8]
    2ca0:	1b5b      	subs	r3, r3, r5
    2ca2:	4293      	cmp	r3, r2
    2ca4:	d215      	bcs.n	2cd2 <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    2ca6:	f8db 3000 	ldr.w	r3, [fp]
    2caa:	695b      	ldr	r3, [r3, #20]
    2cac:	42b3      	cmp	r3, r6
    2cae:	d0ee      	beq.n	2c8e <Stream::readStringUntil(char, unsigned int)+0x1e>
    2cb0:	4658      	mov	r0, fp
    2cb2:	4798      	blx	r3
    if (c >= 0) return c;
    2cb4:	2800      	cmp	r0, #0
    2cb6:	dbee      	blt.n	2c96 <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    2cb8:	d008      	beq.n	2ccc <Stream::readStringUntil(char, unsigned int)+0x5c>
    2cba:	4582      	cmp	sl, r0
    2cbc:	d006      	beq.n	2ccc <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    2cbe:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    2cc0:	b2c1      	uxtb	r1, r0
    2cc2:	4648      	mov	r0, r9
    2cc4:	f000 f940 	bl	2f48 <String::append(char)>
	while (length < max || !max) {
    2cc8:	4547      	cmp	r7, r8
    2cca:	d9de      	bls.n	2c8a <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    2ccc:	4648      	mov	r0, r9
    2cce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    2cd2:	2301      	movs	r3, #1
    2cd4:	4648      	mov	r0, r9
    2cd6:	f88b 300c 	strb.w	r3, [fp, #12]
    2cda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cde:	bf00      	nop
    2ce0:	200035bc 	.word	0x200035bc
    2ce4:	00000ce5 	.word	0x00000ce5

00002ce8 <String::String(String const&)>:
String::String(const String &value)
    2ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    2cea:	4288      	cmp	r0, r1
	buffer = NULL;
    2cec:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    2cf0:	4604      	mov	r4, r0
	len = 0;
    2cf2:	6085      	str	r5, [r0, #8]
	flags = 0;
    2cf4:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    2cf6:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    2cfa:	d002      	beq.n	2d02 <String::String(String const&)+0x1a>
    2cfc:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    2cfe:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    2d00:	b90e      	cbnz	r6, 2d06 <String::String(String const&)+0x1e>
}
    2d02:	4620      	mov	r0, r4
    2d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2d06:	1c70      	adds	r0, r6, #1
    2d08:	f002 fa02 	bl	5110 <malloc>
	if (newbuffer) {
    2d0c:	2800      	cmp	r0, #0
    2d0e:	d0f8      	beq.n	2d02 <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    2d10:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    2d12:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    2d14:	6020      	str	r0, [r4, #0]
	len = length;
    2d16:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    2d1a:	f003 fe8f 	bl	6a3c <strcpy>
}
    2d1e:	4620      	mov	r0, r4
    2d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d22:	bf00      	nop

00002d24 <String::String(String&&)>:
	buffer = NULL;
    2d24:	2300      	movs	r3, #0
	if (&rhs == this) return;
    2d26:	4288      	cmp	r0, r1
	capacity = 0;
    2d28:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    2d2c:	6083      	str	r3, [r0, #8]
	flags = 0;
    2d2e:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    2d30:	d00c      	beq.n	2d4c <String::String(String&&)+0x28>
String::String(String &&rval)
    2d32:	b410      	push	{r4}
	capacity = rhs.capacity;
    2d34:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    2d38:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    2d3c:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    2d40:	688a      	ldr	r2, [r1, #8]
}
    2d42:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    2d46:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    2d48:	6082      	str	r2, [r0, #8]
}
    2d4a:	4770      	bx	lr
    2d4c:	4770      	bx	lr
    2d4e:	bf00      	nop

00002d50 <String::~String()>:
String::~String()
    2d50:	b510      	push	{r4, lr}
    2d52:	4604      	mov	r4, r0
	free(buffer);
    2d54:	6800      	ldr	r0, [r0, #0]
    2d56:	f002 f9e3 	bl	5120 <free>
}
    2d5a:	4620      	mov	r0, r4
    2d5c:	bd10      	pop	{r4, pc}
    2d5e:	bf00      	nop

00002d60 <String::copy(char const*, unsigned int)>:
{
    2d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d62:	4604      	mov	r4, r0
	if (length == 0) {
    2d64:	4615      	mov	r5, r2
    2d66:	b932      	cbnz	r2, 2d76 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2d68:	6803      	ldr	r3, [r0, #0]
    2d6a:	b103      	cbz	r3, 2d6e <String::copy(char const*, unsigned int)+0xe>
    2d6c:	701a      	strb	r2, [r3, #0]
		len = 0;
    2d6e:	2300      	movs	r3, #0
}
    2d70:	4620      	mov	r0, r4
		len = 0;
    2d72:	60a3      	str	r3, [r4, #8]
}
    2d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    2d76:	6843      	ldr	r3, [r0, #4]
    2d78:	460e      	mov	r6, r1
    2d7a:	429a      	cmp	r2, r3
    2d7c:	d91c      	bls.n	2db8 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2d7e:	1c51      	adds	r1, r2, #1
    2d80:	6800      	ldr	r0, [r0, #0]
    2d82:	f002 fc91 	bl	56a8 <realloc>
	if (newbuffer) {
    2d86:	4607      	mov	r7, r0
    2d88:	b160      	cbz	r0, 2da4 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    2d8a:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2d8c:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    2d90:	b90b      	cbnz	r3, 2d96 <String::copy(char const*, unsigned int)+0x36>
    2d92:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    2d94:	6827      	ldr	r7, [r4, #0]
    2d96:	4631      	mov	r1, r6
    2d98:	4638      	mov	r0, r7
	len = length;
    2d9a:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2d9c:	f003 fe4e 	bl	6a3c <strcpy>
}
    2da0:	4620      	mov	r0, r4
    2da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    2da4:	6820      	ldr	r0, [r4, #0]
    2da6:	b110      	cbz	r0, 2dae <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    2da8:	f002 f9ba 	bl	5120 <free>
			buffer = NULL;
    2dac:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    2dae:	2300      	movs	r3, #0
}
    2db0:	4620      	mov	r0, r4
		len = capacity = 0;
    2db2:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    2db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    2db8:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    2dba:	4631      	mov	r1, r6
	len = length;
    2dbc:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2dbe:	4638      	mov	r0, r7
    2dc0:	f003 fe3c 	bl	6a3c <strcpy>
	return *this;
    2dc4:	e7ec      	b.n	2da0 <String::copy(char const*, unsigned int)+0x40>
    2dc6:	bf00      	nop

00002dc8 <String::String(char const*)>:
String::String(const char *cstr)
    2dc8:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    2dca:	2300      	movs	r3, #0
String::String(const char *cstr)
    2dcc:	4604      	mov	r4, r0
	capacity = 0;
    2dce:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    2dd2:	6083      	str	r3, [r0, #8]
	flags = 0;
    2dd4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    2dd6:	b141      	cbz	r1, 2dea <String::String(char const*)+0x22>
    2dd8:	460d      	mov	r5, r1
    2dda:	4608      	mov	r0, r1
    2ddc:	f003 fe90 	bl	6b00 <strlen>
    2de0:	4602      	mov	r2, r0
    2de2:	4629      	mov	r1, r5
    2de4:	4620      	mov	r0, r4
    2de6:	f7ff ffbb 	bl	2d60 <String::copy(char const*, unsigned int)>
}
    2dea:	4620      	mov	r0, r4
    2dec:	bd38      	pop	{r3, r4, r5, pc}
    2dee:	bf00      	nop

00002df0 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    2df0:	b510      	push	{r4, lr}
	buffer = NULL;
    2df2:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    2df4:	b08a      	sub	sp, #40	; 0x28
    2df6:	4604      	mov	r4, r0
	itoa(value, buf, base);
    2df8:	4608      	mov	r0, r1
    2dfa:	a901      	add	r1, sp, #4
	len = 0;
    2dfc:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2dfe:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e00:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    2e04:	f002 f96e 	bl	50e4 <itoa>
		copy(cstr, strlen(cstr));
    2e08:	a801      	add	r0, sp, #4
    2e0a:	f003 fe79 	bl	6b00 <strlen>
    2e0e:	a901      	add	r1, sp, #4
    2e10:	4602      	mov	r2, r0
    2e12:	4620      	mov	r0, r4
    2e14:	f7ff ffa4 	bl	2d60 <String::copy(char const*, unsigned int)>
}
    2e18:	4620      	mov	r0, r4
    2e1a:	b00a      	add	sp, #40	; 0x28
    2e1c:	bd10      	pop	{r4, pc}
    2e1e:	bf00      	nop

00002e20 <String::String(long, unsigned char)>:
String::String(long value, unsigned char base)
    2e20:	b510      	push	{r4, lr}
	buffer = NULL;
    2e22:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
    2e24:	b08a      	sub	sp, #40	; 0x28
    2e26:	4604      	mov	r4, r0
	ltoa(value, buf, base);
    2e28:	4608      	mov	r0, r1
    2e2a:	a901      	add	r1, sp, #4
	len = 0;
    2e2c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2e2e:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e30:	e9c4 3300 	strd	r3, r3, [r4]
	ltoa(value, buf, base);
    2e34:	f000 fc6a 	bl	370c <ltoa>
		copy(cstr, strlen(cstr));
    2e38:	a801      	add	r0, sp, #4
    2e3a:	f003 fe61 	bl	6b00 <strlen>
    2e3e:	a901      	add	r1, sp, #4
    2e40:	4602      	mov	r2, r0
    2e42:	4620      	mov	r0, r4
    2e44:	f7ff ff8c 	bl	2d60 <String::copy(char const*, unsigned int)>
}
    2e48:	4620      	mov	r0, r4
    2e4a:	b00a      	add	sp, #40	; 0x28
    2e4c:	bd10      	pop	{r4, pc}
    2e4e:	bf00      	nop

00002e50 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    2e50:	b510      	push	{r4, lr}
	buffer = NULL;
    2e52:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    2e54:	b08a      	sub	sp, #40	; 0x28
    2e56:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    2e58:	4608      	mov	r0, r1
    2e5a:	a901      	add	r1, sp, #4
	len = 0;
    2e5c:	60a3      	str	r3, [r4, #8]
	flags = 0;
    2e5e:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e60:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    2e64:	f000 fc20 	bl	36a8 <ultoa>
		copy(cstr, strlen(cstr));
    2e68:	a801      	add	r0, sp, #4
    2e6a:	f003 fe49 	bl	6b00 <strlen>
    2e6e:	a901      	add	r1, sp, #4
    2e70:	4602      	mov	r2, r0
    2e72:	4620      	mov	r0, r4
    2e74:	f7ff ff74 	bl	2d60 <String::copy(char const*, unsigned int)>
}
    2e78:	4620      	mov	r0, r4
    2e7a:	b00a      	add	sp, #40	; 0x28
    2e7c:	bd10      	pop	{r4, pc}
    2e7e:	bf00      	nop

00002e80 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    2e80:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    2e82:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    2e84:	4604      	mov	r4, r0
    2e86:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    2e88:	1c88      	adds	r0, r1, #2
	len = 0;
    2e8a:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    2e8c:	466a      	mov	r2, sp
	flags = 0;
    2e8e:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    2e90:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    2e94:	f000 fc4a 	bl	372c <dtostrf>
	if (cstr) {
    2e98:	4605      	mov	r5, r0
    2e9a:	b148      	cbz	r0, 2eb0 <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
    2e9c:	f003 fe30 	bl	6b00 <strlen>
    2ea0:	4629      	mov	r1, r5
    2ea2:	4602      	mov	r2, r0
    2ea4:	4620      	mov	r0, r4
    2ea6:	f7ff ff5b 	bl	2d60 <String::copy(char const*, unsigned int)>
}
    2eaa:	4620      	mov	r0, r4
    2eac:	b00b      	add	sp, #44	; 0x2c
    2eae:	bd30      	pop	{r4, r5, pc}
		len = 0;
    2eb0:	60a0      	str	r0, [r4, #8]
}
    2eb2:	4620      	mov	r0, r4
    2eb4:	b00b      	add	sp, #44	; 0x2c
    2eb6:	bd30      	pop	{r4, r5, pc}

00002eb8 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    2eb8:	4281      	cmp	r1, r0
    2eba:	d003      	beq.n	2ec4 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    2ebc:	688a      	ldr	r2, [r1, #8]
    2ebe:	6809      	ldr	r1, [r1, #0]
    2ec0:	f7ff bf4e 	b.w	2d60 <String::copy(char const*, unsigned int)>
}
    2ec4:	4770      	bx	lr
    2ec6:	bf00      	nop

00002ec8 <String::append(char const*, unsigned int)>:
{
    2ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ecc:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2ece:	6800      	ldr	r0, [r0, #0]
{
    2ed0:	460d      	mov	r5, r1
    2ed2:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2ed4:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    2ed6:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2ed8:	d809      	bhi.n	2eee <String::append(char const*, unsigned int)+0x26>
    2eda:	18c2      	adds	r2, r0, r3
    2edc:	4291      	cmp	r1, r2
    2ede:	d206      	bcs.n	2eee <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    2ee0:	1a0f      	subs	r7, r1, r0
		self = true;
    2ee2:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    2ee6:	b936      	cbnz	r6, 2ef6 <String::append(char const*, unsigned int)+0x2e>
}
    2ee8:	4620      	mov	r0, r4
    2eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    2eee:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    2ef2:	2e00      	cmp	r6, #0
    2ef4:	d0f8      	beq.n	2ee8 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    2ef6:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    2efa:	6862      	ldr	r2, [r4, #4]
    2efc:	4590      	cmp	r8, r2
    2efe:	d90c      	bls.n	2f1a <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2f00:	f108 0101 	add.w	r1, r8, #1
    2f04:	f002 fbd0 	bl	56a8 <realloc>
	if (newbuffer) {
    2f08:	2800      	cmp	r0, #0
    2f0a:	d0ed      	beq.n	2ee8 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    2f0c:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2f0e:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    2f12:	b913      	cbnz	r3, 2f1a <String::append(char const*, unsigned int)+0x52>
    2f14:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    2f16:	6820      	ldr	r0, [r4, #0]
    2f18:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    2f1a:	f1b9 0f00 	cmp.w	r9, #0
    2f1e:	d108      	bne.n	2f32 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    2f20:	4629      	mov	r1, r5
    2f22:	4418      	add	r0, r3
    2f24:	f003 fd8a 	bl	6a3c <strcpy>
}
    2f28:	4620      	mov	r0, r4
	len = newlen;
    2f2a:	f8c4 8008 	str.w	r8, [r4, #8]
}
    2f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    2f32:	4632      	mov	r2, r6
    2f34:	19c1      	adds	r1, r0, r7
    2f36:	4418      	add	r0, r3
    2f38:	f000 fb18 	bl	356c <memcpy>
		buffer[newlen] = 0;
    2f3c:	6823      	ldr	r3, [r4, #0]
    2f3e:	2200      	movs	r2, #0
    2f40:	f803 2008 	strb.w	r2, [r3, r8]
    2f44:	e7f0      	b.n	2f28 <String::append(char const*, unsigned int)+0x60>
    2f46:	bf00      	nop

00002f48 <String::append(char)>:
{
    2f48:	b510      	push	{r4, lr}
    2f4a:	b082      	sub	sp, #8
	buf[1] = 0;
    2f4c:	2300      	movs	r3, #0
{
    2f4e:	4604      	mov	r4, r0
	append(buf, 1);
    2f50:	2201      	movs	r2, #1
	buf[0] = c;
    2f52:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    2f56:	a901      	add	r1, sp, #4
	buf[1] = 0;
    2f58:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    2f5c:	f7ff ffb4 	bl	2ec8 <String::append(char const*, unsigned int)>
}
    2f60:	4620      	mov	r0, r4
    2f62:	b002      	add	sp, #8
    2f64:	bd10      	pop	{r4, pc}
    2f66:	bf00      	nop

00002f68 <operator+(StringSumHelper const&, String const&)>:
{
    2f68:	b510      	push	{r4, lr}
    2f6a:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    2f6c:	688a      	ldr	r2, [r1, #8]
    2f6e:	6809      	ldr	r1, [r1, #0]
    2f70:	f7ff ffaa 	bl	2ec8 <String::append(char const*, unsigned int)>
}
    2f74:	4620      	mov	r0, r4
    2f76:	bd10      	pop	{r4, pc}

00002f78 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f78:	6882      	ldr	r2, [r0, #8]
{
    2f7a:	b508      	push	{r3, lr}
    2f7c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f7e:	b13a      	cbz	r2, 2f90 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    2f80:	b161      	cbz	r1, 2f9c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    2f82:	6800      	ldr	r0, [r0, #0]
    2f84:	f003 fbf0 	bl	6768 <strcmp>
    2f88:	fab0 f080 	clz	r0, r0
    2f8c:	0940      	lsrs	r0, r0, #5
}
    2f8e:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2f90:	b131      	cbz	r1, 2fa0 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    2f92:	7818      	ldrb	r0, [r3, #0]
    2f94:	fab0 f080 	clz	r0, r0
    2f98:	0940      	lsrs	r0, r0, #5
}
    2f9a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    2f9c:	6803      	ldr	r3, [r0, #0]
    2f9e:	e7f8      	b.n	2f92 <String::equals(char const*) const+0x1a>
    2fa0:	2001      	movs	r0, #1
}
    2fa2:	bd08      	pop	{r3, pc}

00002fa4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    2fa4:	b1c2      	cbz	r2, 2fd8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    2fa6:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    2fa8:	fab1 f681 	clz	r6, r1
    2fac:	460c      	mov	r4, r1
    2fae:	0976      	lsrs	r6, r6, #5
    2fb0:	b119      	cbz	r1, 2fba <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    2fb2:	6885      	ldr	r5, [r0, #8]
    2fb4:	429d      	cmp	r5, r3
    2fb6:	d801      	bhi.n	2fbc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    2fb8:	700e      	strb	r6, [r1, #0]
}
    2fba:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    2fbc:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    2fbe:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    2fc2:	6801      	ldr	r1, [r0, #0]
    2fc4:	4620      	mov	r0, r4
    2fc6:	4565      	cmp	r5, ip
    2fc8:	4419      	add	r1, r3
    2fca:	bf28      	it	cs
    2fcc:	4665      	movcs	r5, ip
    2fce:	462a      	mov	r2, r5
    2fd0:	f003 f8d4 	bl	617c <strncpy>
	buf[n] = 0;
    2fd4:	5566      	strb	r6, [r4, r5]
}
    2fd6:	bd70      	pop	{r4, r5, r6, pc}
    2fd8:	4770      	bx	lr
    2fda:	bf00      	nop

00002fdc <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    2fdc:	6883      	ldr	r3, [r0, #8]
    2fde:	b143      	cbz	r3, 2ff2 <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2fe0:	6809      	ldr	r1, [r1, #0]
{
    2fe2:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2fe4:	6804      	ldr	r4, [r0, #0]
    2fe6:	4620      	mov	r0, r4
    2fe8:	f003 fa5a 	bl	64a0 <strstr>
	if (found == NULL) return -1;
    2fec:	b120      	cbz	r0, 2ff8 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    2fee:	1b00      	subs	r0, r0, r4
}
    2ff0:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    2ff2:	f04f 30ff 	mov.w	r0, #4294967295
}
    2ff6:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    2ff8:	f04f 30ff 	mov.w	r0, #4294967295
}
    2ffc:	bd10      	pop	{r4, pc}
    2ffe:	bf00      	nop

00003000 <String::substring(unsigned int) const>:
{
    3000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    3004:	688f      	ldr	r7, [r1, #8]
{
    3006:	460e      	mov	r6, r1
    3008:	4604      	mov	r4, r0
	if (left > right) {
    300a:	4297      	cmp	r7, r2
    300c:	d202      	bcs.n	3014 <String::substring(unsigned int) const+0x14>
    300e:	4613      	mov	r3, r2
    3010:	463a      	mov	r2, r7
    3012:	461f      	mov	r7, r3
	buffer = NULL;
    3014:	2300      	movs	r3, #0
	len = 0;
    3016:	60a3      	str	r3, [r4, #8]
	flags = 0;
    3018:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    301a:	68b0      	ldr	r0, [r6, #8]
    301c:	4290      	cmp	r0, r2
	capacity = 0;
    301e:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    3022:	d314      	bcc.n	304e <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    3024:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    3026:	6831      	ldr	r1, [r6, #0]
    3028:	bf28      	it	cs
    302a:	4607      	movcs	r7, r0
    302c:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    3030:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    3032:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    3034:	189d      	adds	r5, r3, r2
    3036:	d00d      	beq.n	3054 <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    3038:	4628      	mov	r0, r5
    303a:	f003 fd61 	bl	6b00 <strlen>
    303e:	4629      	mov	r1, r5
    3040:	4602      	mov	r2, r0
    3042:	4620      	mov	r0, r4
    3044:	f7ff fe8c 	bl	2d60 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3048:	6833      	ldr	r3, [r6, #0]
    304a:	f803 8007 	strb.w	r8, [r3, r7]
}
    304e:	4620      	mov	r0, r4
    3050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    3054:	60a5      	str	r5, [r4, #8]
    3056:	e7f8      	b.n	304a <String::substring(unsigned int) const+0x4a>

00003058 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    3058:	429a      	cmp	r2, r3
{
    305a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    305e:	4604      	mov	r4, r0
    3060:	460e      	mov	r6, r1
	if (left > right) {
    3062:	d902      	bls.n	306a <String::substring(unsigned int, unsigned int) const+0x12>
    3064:	4611      	mov	r1, r2
    3066:	461a      	mov	r2, r3
    3068:	460b      	mov	r3, r1
	buffer = NULL;
    306a:	2000      	movs	r0, #0
	len = 0;
    306c:	60a0      	str	r0, [r4, #8]
	flags = 0;
    306e:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    3070:	68b7      	ldr	r7, [r6, #8]
    3072:	4297      	cmp	r7, r2
	capacity = 0;
    3074:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    3078:	d314      	bcc.n	30a4 <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    307a:	429f      	cmp	r7, r3
    307c:	bf28      	it	cs
    307e:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    3080:	6833      	ldr	r3, [r6, #0]
    3082:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    3086:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    3088:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    308a:	189d      	adds	r5, r3, r2
    308c:	d00d      	beq.n	30aa <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    308e:	4628      	mov	r0, r5
    3090:	f003 fd36 	bl	6b00 <strlen>
    3094:	4629      	mov	r1, r5
    3096:	4602      	mov	r2, r0
    3098:	4620      	mov	r0, r4
    309a:	f7ff fe61 	bl	2d60 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    309e:	6833      	ldr	r3, [r6, #0]
    30a0:	f803 8007 	strb.w	r8, [r3, r7]
}
    30a4:	4620      	mov	r0, r4
    30a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    30aa:	60a5      	str	r5, [r4, #8]
    30ac:	e7f8      	b.n	30a0 <String::substring(unsigned int, unsigned int) const+0x48>
    30ae:	bf00      	nop

000030b0 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    30b0:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    30b2:	6804      	ldr	r4, [r0, #0]
{
    30b4:	4605      	mov	r5, r0
	if (!buffer) return *this;
    30b6:	b144      	cbz	r4, 30ca <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    30b8:	7820      	ldrb	r0, [r4, #0]
    30ba:	b130      	cbz	r0, 30ca <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    30bc:	f002 fdf6 	bl	5cac <tolower>
    30c0:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    30c2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    30c6:	2800      	cmp	r0, #0
    30c8:	d1f8      	bne.n	30bc <String::toLowerCase()+0xc>
	}
	return *this;
}
    30ca:	4628      	mov	r0, r5
    30cc:	bd38      	pop	{r3, r4, r5, pc}
    30ce:	bf00      	nop

000030d0 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    30d0:	6800      	ldr	r0, [r0, #0]
    30d2:	b108      	cbz	r0, 30d8 <String::toInt() const+0x8>
    30d4:	f002 b802 	b.w	50dc <atol>
	return 0;
}
    30d8:	4770      	bx	lr
    30da:	bf00      	nop

000030dc <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    30dc:	49a2      	ldr	r1, [pc, #648]	; (3368 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    30de:	4ba3      	ldr	r3, [pc, #652]	; (336c <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    30e0:	4288      	cmp	r0, r1
{
    30e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    30e6:	4ca2      	ldr	r4, [pc, #648]	; (3370 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    30e8:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    30ea:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    30ec:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    30f0:	d91b      	bls.n	312a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    30f2:	4ba0      	ldr	r3, [pc, #640]	; (3374 <set_arm_clock+0x298>)
    30f4:	4298      	cmp	r0, r3
    30f6:	f240 8102 	bls.w	32fe <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    30fa:	1ac3      	subs	r3, r0, r3
    30fc:	499e      	ldr	r1, [pc, #632]	; (3378 <set_arm_clock+0x29c>)
    30fe:	0a1b      	lsrs	r3, r3, #8
    3100:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3104:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3108:	09db      	lsrs	r3, r3, #7
    310a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    310e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3112:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3116:	428b      	cmp	r3, r1
    3118:	bf28      	it	cs
    311a:	460b      	movcs	r3, r1
    311c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    3120:	4b96      	ldr	r3, [pc, #600]	; (337c <set_arm_clock+0x2a0>)
    3122:	fba3 3707 	umull	r3, r7, r3, r7
    3126:	08ff      	lsrs	r7, r7, #3
    3128:	e004      	b.n	3134 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    312a:	4f95      	ldr	r7, [pc, #596]	; (3380 <set_arm_clock+0x2a4>)
    312c:	42b8      	cmp	r0, r7
    312e:	bf8c      	ite	hi
    3130:	270e      	movhi	r7, #14
    3132:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3134:	498d      	ldr	r1, [pc, #564]	; (336c <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3136:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    313a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    313e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3140:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3144:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3148:	d20c      	bcs.n	3164 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    314a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    314e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3152:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3156:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    315a:	680b      	ldr	r3, [r1, #0]
    315c:	2b00      	cmp	r3, #0
    315e:	dafc      	bge.n	315a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3160:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3164:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3168:	d124      	bne.n	31b4 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    316a:	4986      	ldr	r1, [pc, #536]	; (3384 <set_arm_clock+0x2a8>)
    316c:	690c      	ldr	r4, [r1, #16]
    316e:	4986      	ldr	r1, [pc, #536]	; (3388 <set_arm_clock+0x2ac>)
    3170:	43a1      	bics	r1, r4
    3172:	f000 80ea 	beq.w	334a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3176:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    317a:	4634      	mov	r4, r6
    317c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3180:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3184:	d004      	beq.n	3190 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3186:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    318a:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    318c:	4b77      	ldr	r3, [pc, #476]	; (336c <set_arm_clock+0x290>)
    318e:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3190:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3194:	d007      	beq.n	31a6 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3196:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    319a:	4974      	ldr	r1, [pc, #464]	; (336c <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    319c:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    319e:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    31a0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    31a2:	071a      	lsls	r2, r3, #28
    31a4:	d4fc      	bmi.n	31a0 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    31a6:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    31aa:	4a70      	ldr	r2, [pc, #448]	; (336c <set_arm_clock+0x290>)
    31ac:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    31ae:	6c93      	ldr	r3, [r2, #72]	; 0x48
    31b0:	069b      	lsls	r3, r3, #26
    31b2:	d4fc      	bmi.n	31ae <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    31b4:	4c75      	ldr	r4, [pc, #468]	; (338c <set_arm_clock+0x2b0>)
    31b6:	42a0      	cmp	r0, r4
    31b8:	f200 80ce 	bhi.w	3358 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    31bc:	f04f 0c01 	mov.w	ip, #1
    31c0:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    31c2:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    31c4:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    31c8:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    31cc:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31d0:	42a2      	cmp	r2, r4
    31d2:	d818      	bhi.n	3206 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    31d4:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    31d8:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    31dc:	f040 808d 	bne.w	32fa <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    31e0:	f1bc 0f04 	cmp.w	ip, #4
    31e4:	f200 8091 	bhi.w	330a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    31e8:	180a      	adds	r2, r1, r0
    31ea:	42a2      	cmp	r2, r4
    31ec:	f200 80a4 	bhi.w	3338 <set_arm_clock+0x25c>
    31f0:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    31f4:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    31f6:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    31fa:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    31fe:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3202:	42a2      	cmp	r2, r4
    3204:	d9e6      	bls.n	31d4 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3206:	f10c 31ff 	add.w	r1, ip, #4294967295
    320a:	028c      	lsls	r4, r1, #10
    320c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3210:	485f      	ldr	r0, [pc, #380]	; (3390 <set_arm_clock+0x2b4>)
    3212:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3214:	4a5f      	ldr	r2, [pc, #380]	; (3394 <set_arm_clock+0x2b8>)
    3216:	4290      	cmp	r0, r2
    3218:	d97f      	bls.n	331a <set_arm_clock+0x23e>
    321a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 33c0 <set_arm_clock+0x2e4>
    321e:	226c      	movs	r2, #108	; 0x6c
    3220:	485d      	ldr	r0, [pc, #372]	; (3398 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3222:	4d58      	ldr	r5, [pc, #352]	; (3384 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3224:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3228:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    322c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3230:	f8df c190 	ldr.w	ip, [pc, #400]	; 33c4 <set_arm_clock+0x2e8>
    3234:	ea0e 0c0c 	and.w	ip, lr, ip
    3238:	45d4      	cmp	ip, sl
    323a:	d009      	beq.n	3250 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    323c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3240:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3244:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3248:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    324a:	682a      	ldr	r2, [r5, #0]
    324c:	2a00      	cmp	r2, #0
    324e:	dafc      	bge.n	324a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3250:	4a46      	ldr	r2, [pc, #280]	; (336c <set_arm_clock+0x290>)
    3252:	6915      	ldr	r5, [r2, #16]
    3254:	f005 0507 	and.w	r5, r5, #7
    3258:	429d      	cmp	r5, r3
    325a:	d003      	beq.n	3264 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    325c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    325e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3260:	03dd      	lsls	r5, r3, #15
    3262:	d4fc      	bmi.n	325e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3264:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3268:	d009      	beq.n	327e <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    326a:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    326e:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    3272:	4a3e      	ldr	r2, [pc, #248]	; (336c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3274:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3276:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3278:	6c93      	ldr	r3, [r2, #72]	; 0x48
    327a:	0799      	lsls	r1, r3, #30
    327c:	d4fc      	bmi.n	3278 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    327e:	4947      	ldr	r1, [pc, #284]	; (339c <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3280:	4a47      	ldr	r2, [pc, #284]	; (33a0 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3282:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3284:	4291      	cmp	r1, r2
    3286:	d83c      	bhi.n	3302 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3288:	4b46      	ldr	r3, [pc, #280]	; (33a4 <set_arm_clock+0x2c8>)
    328a:	09c9      	lsrs	r1, r1, #7
    328c:	fba3 3101 	umull	r3, r1, r3, r1
    3290:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3292:	1e4b      	subs	r3, r1, #1
    3294:	021b      	lsls	r3, r3, #8
    3296:	ea86 0203 	eor.w	r2, r6, r3
    329a:	f412 7f40 	tst.w	r2, #768	; 0x300
    329e:	d006      	beq.n	32ae <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    32a0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    32a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    32a8:	4a30      	ldr	r2, [pc, #192]	; (336c <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    32aa:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    32ac:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    32ae:	4a2f      	ldr	r2, [pc, #188]	; (336c <set_arm_clock+0x290>)
    32b0:	6953      	ldr	r3, [r2, #20]
    32b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    32b6:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    32b8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    32ba:	069b      	lsls	r3, r3, #26
    32bc:	d4fc      	bmi.n	32b8 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32be:	4b3a      	ldr	r3, [pc, #232]	; (33a8 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    32c0:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32c2:	fba3 2300 	umull	r2, r3, r3, r0
    32c6:	f04f 32ff 	mov.w	r2, #4294967295
    32ca:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    32ce:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32d2:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    32d6:	4a35      	ldr	r2, [pc, #212]	; (33ac <set_arm_clock+0x2d0>)
    32d8:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    32da:	4a35      	ldr	r2, [pc, #212]	; (33b0 <set_arm_clock+0x2d4>)
    32dc:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    32de:	4a35      	ldr	r2, [pc, #212]	; (33b4 <set_arm_clock+0x2d8>)
    32e0:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    32e2:	d208      	bcs.n	32f6 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    32e4:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    32e8:	4a21      	ldr	r2, [pc, #132]	; (3370 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    32ea:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    32ee:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    32f0:	6813      	ldr	r3, [r2, #0]
    32f2:	2b00      	cmp	r3, #0
    32f4:	dafc      	bge.n	32f0 <set_arm_clock+0x214>
	}

	return frequency;
}
    32f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32fa:	4673      	mov	r3, lr
    32fc:	e762      	b.n	31c4 <set_arm_clock+0xe8>
    32fe:	2712      	movs	r7, #18
    3300:	e718      	b.n	3134 <set_arm_clock+0x58>
    3302:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3306:	2104      	movs	r1, #4
    3308:	e7c5      	b.n	3296 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    330a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    330e:	4820      	ldr	r0, [pc, #128]	; (3390 <set_arm_clock+0x2b4>)
    3310:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3312:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3314:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3316:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    331a:	4a27      	ldr	r2, [pc, #156]	; (33b8 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    331c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 33c8 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3320:	fba2 2000 	umull	r2, r0, r2, r0
    3324:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3326:	4825      	ldr	r0, [pc, #148]	; (33bc <set_arm_clock+0x2e0>)
    3328:	2a36      	cmp	r2, #54	; 0x36
    332a:	bf38      	it	cc
    332c:	2236      	movcc	r2, #54	; 0x36
    332e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3332:	ea42 0a0a 	orr.w	sl, r2, sl
    3336:	e774      	b.n	3222 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3338:	ea4f 248c 	mov.w	r4, ip, lsl #10
    333c:	2300      	movs	r3, #0
    333e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    3342:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3346:	46ac      	mov	ip, r5
    3348:	e762      	b.n	3210 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    334a:	461d      	mov	r5, r3
    334c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3350:	4611      	mov	r1, r2
    3352:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3356:	e713      	b.n	3180 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3358:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    335a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    335e:	4602      	mov	r2, r0
    3360:	4631      	mov	r1, r6
    3362:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3364:	46e6      	mov	lr, ip
    3366:	e753      	b.n	3210 <set_arm_clock+0x134>
    3368:	1f78a400 	.word	0x1f78a400
    336c:	400fc000 	.word	0x400fc000
    3370:	40080000 	.word	0x40080000
    3374:	23c34600 	.word	0x23c34600
    3378:	004cb223 	.word	0x004cb223
    337c:	51eb851f 	.word	0x51eb851f
    3380:	016e3600 	.word	0x016e3600
    3384:	400d8000 	.word	0x400d8000
    3388:	80003040 	.word	0x80003040
    338c:	269fb1ff 	.word	0x269fb1ff
    3390:	005b8d80 	.word	0x005b8d80
    3394:	4df67eff 	.word	0x4df67eff
    3398:	4d3f6400 	.word	0x4d3f6400
    339c:	08f0d17f 	.word	0x08f0d17f
    33a0:	2cb4177f 	.word	0x2cb4177f
    33a4:	00e5109f 	.word	0x00e5109f
    33a8:	431bde83 	.word	0x431bde83
    33ac:	20000ee4 	.word	0x20000ee4
    33b0:	20000ee0 	.word	0x20000ee0
    33b4:	200035b4 	.word	0x200035b4
    33b8:	165e9f81 	.word	0x165e9f81
    33bc:	00b71b00 	.word	0x00b71b00
    33c0:	8000206c 	.word	0x8000206c
    33c4:	8001307f 	.word	0x8001307f
    33c8:	80002000 	.word	0x80002000

000033cc <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    33cc:	b900      	cbnz	r0, 33d0 <delay+0x4>
    33ce:	4770      	bx	lr
{
    33d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    33d4:	2101      	movs	r1, #1
    33d6:	4681      	mov	r9, r0
    33d8:	4c21      	ldr	r4, [pc, #132]	; (3460 <delay+0x94>)
    33da:	4d22      	ldr	r5, [pc, #136]	; (3464 <delay+0x98>)
    33dc:	4e22      	ldr	r6, [pc, #136]	; (3468 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    33de:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    33e2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    33e4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    33e6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    33ea:	2b00      	cmp	r3, #0
    33ec:	d1f7      	bne.n	33de <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    33ee:	491f      	ldr	r1, [pc, #124]	; (346c <delay+0xa0>)
    33f0:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    33f2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    33f6:	f8df a078 	ldr.w	sl, [pc, #120]	; 3470 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    33fa:	1a1b      	subs	r3, r3, r0
    33fc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    33fe:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3402:	f8da 2000 	ldr.w	r2, [sl]
    3406:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    340a:	455a      	cmp	r2, fp
    340c:	bf94      	ite	ls
    340e:	4490      	addls	r8, r2
    3410:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3412:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3416:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3418:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    341a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    341e:	2b00      	cmp	r3, #0
    3420:	d1f7      	bne.n	3412 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3422:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3424:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3428:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    342a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    342e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    3432:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    3436:	bf94      	ite	ls
    3438:	4462      	addls	r2, ip
    343a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    343e:	eba2 0208 	sub.w	r2, r2, r8
    3442:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    3446:	d306      	bcc.n	3456 <delay+0x8a>
			if (--msec == 0) return;
    3448:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    344c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3450:	d1df      	bne.n	3412 <delay+0x46>
}
    3452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    3456:	f001 fd47 	bl	4ee8 <yield>
		while ((micros() - start) >= 1000) {
    345a:	4904      	ldr	r1, [pc, #16]	; (346c <delay+0xa0>)
    345c:	e7d9      	b.n	3412 <delay+0x46>
    345e:	bf00      	nop
    3460:	200035c0 	.word	0x200035c0
    3464:	200035bc 	.word	0x200035bc
    3468:	200035b8 	.word	0x200035b8
    346c:	e0001000 	.word	0xe0001000
    3470:	200035b4 	.word	0x200035b4

00003474 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    3474:	2836      	cmp	r0, #54	; 0x36
    3476:	d816      	bhi.n	34a6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3478:	0102      	lsls	r2, r0, #4
    347a:	4b10      	ldr	r3, [pc, #64]	; (34bc <digitalWrite+0x48>)
    347c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3480:	589b      	ldr	r3, [r3, r2]
{
    3482:	b410      	push	{r4}
	mask = p->mask;
    3484:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    3486:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3488:	4214      	tst	r4, r2
    348a:	d005      	beq.n	3498 <digitalWrite+0x24>
		if (val) {
    348c:	b961      	cbnz	r1, 34a8 <digitalWrite+0x34>
		}
	}
}
    348e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    3492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    3496:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3498:	6883      	ldr	r3, [r0, #8]
		if (val) {
    349a:	b151      	cbz	r1, 34b2 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    349c:	4a08      	ldr	r2, [pc, #32]	; (34c0 <digitalWrite+0x4c>)
}
    349e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    34a2:	601a      	str	r2, [r3, #0]
}
    34a4:	4770      	bx	lr
    34a6:	4770      	bx	lr
    34a8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    34ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    34b0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    34b2:	4a04      	ldr	r2, [pc, #16]	; (34c4 <digitalWrite+0x50>)
}
    34b4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    34b8:	601a      	str	r2, [r3, #0]
}
    34ba:	4770      	bx	lr
    34bc:	200008d4 	.word	0x200008d4
    34c0:	0001f038 	.word	0x0001f038
    34c4:	00013038 	.word	0x00013038

000034c8 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    34c8:	2836      	cmp	r0, #54	; 0x36
    34ca:	d80b      	bhi.n	34e4 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    34cc:	4b06      	ldr	r3, [pc, #24]	; (34e8 <digitalRead+0x20>)
    34ce:	0102      	lsls	r2, r0, #4
    34d0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    34d4:	589a      	ldr	r2, [r3, r2]
    34d6:	68c3      	ldr	r3, [r0, #12]
    34d8:	6892      	ldr	r2, [r2, #8]
    34da:	421a      	tst	r2, r3
    34dc:	bf14      	ite	ne
    34de:	2001      	movne	r0, #1
    34e0:	2000      	moveq	r0, #0
    34e2:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    34e4:	2000      	movs	r0, #0
}
    34e6:	4770      	bx	lr
    34e8:	200008d4 	.word	0x200008d4

000034ec <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    34ec:	2836      	cmp	r0, #54	; 0x36
    34ee:	d829      	bhi.n	3544 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    34f0:	4b16      	ldr	r3, [pc, #88]	; (354c <pinMode+0x60>)
    34f2:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    34f4:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    34f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    34fa:	589a      	ldr	r2, [r3, r2]
{
    34fc:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    34fe:	6853      	ldr	r3, [r2, #4]
    3500:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3502:	d00e      	beq.n	3522 <pinMode+0x36>
    3504:	2904      	cmp	r1, #4
    3506:	d00c      	beq.n	3522 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3508:	ea23 0304 	bic.w	r3, r3, r4
    350c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    350e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    3510:	b1a9      	cbz	r1, 353e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    3512:	2902      	cmp	r1, #2
    3514:	d017      	beq.n	3546 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3516:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3518:	bf0c      	ite	eq
    351a:	4a0d      	ldreq	r2, [pc, #52]	; (3550 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    351c:	4a0d      	ldrne	r2, [pc, #52]	; (3554 <pinMode+0x68>)
    351e:	601a      	str	r2, [r3, #0]
    3520:	e007      	b.n	3532 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3522:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    3524:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3526:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3528:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    352a:	d008      	beq.n	353e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    352c:	f640 0238 	movw	r2, #2104	; 0x838
    3530:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3532:	6843      	ldr	r3, [r0, #4]
    3534:	2215      	movs	r2, #21
}
    3536:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    353a:	601a      	str	r2, [r3, #0]
}
    353c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    353e:	2238      	movs	r2, #56	; 0x38
    3540:	601a      	str	r2, [r3, #0]
    3542:	e7f6      	b.n	3532 <pinMode+0x46>
    3544:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3546:	4a04      	ldr	r2, [pc, #16]	; (3558 <pinMode+0x6c>)
    3548:	601a      	str	r2, [r3, #0]
    354a:	e7f2      	b.n	3532 <pinMode+0x46>
    354c:	200008d4 	.word	0x200008d4
    3550:	00013038 	.word	0x00013038
    3554:	00010038 	.word	0x00010038
    3558:	0001f038 	.word	0x0001f038

0000355c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    355c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    355e:	f7fc fd83 	bl	68 <setup>
	while (1) {
		loop();
    3562:	f7fd f87f 	bl	664 <loop>
		yield();
    3566:	f001 fcbf 	bl	4ee8 <yield>
	while (1) {
    356a:	e7fa      	b.n	3562 <main+0x6>

0000356c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    356c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    356e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3572:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3576:	d16d      	bne.n	3654 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3578:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    357a:	d341      	bcc.n	3600 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    357c:	f851 3b04 	ldr.w	r3, [r1], #4
    3580:	f840 3b04 	str.w	r3, [r0], #4
    3584:	f851 3b04 	ldr.w	r3, [r1], #4
    3588:	f840 3b04 	str.w	r3, [r0], #4
    358c:	f851 3b04 	ldr.w	r3, [r1], #4
    3590:	f840 3b04 	str.w	r3, [r0], #4
    3594:	f851 3b04 	ldr.w	r3, [r1], #4
    3598:	f840 3b04 	str.w	r3, [r0], #4
    359c:	f851 3b04 	ldr.w	r3, [r1], #4
    35a0:	f840 3b04 	str.w	r3, [r0], #4
    35a4:	f851 3b04 	ldr.w	r3, [r1], #4
    35a8:	f840 3b04 	str.w	r3, [r0], #4
    35ac:	f851 3b04 	ldr.w	r3, [r1], #4
    35b0:	f840 3b04 	str.w	r3, [r0], #4
    35b4:	f851 3b04 	ldr.w	r3, [r1], #4
    35b8:	f840 3b04 	str.w	r3, [r0], #4
    35bc:	f851 3b04 	ldr.w	r3, [r1], #4
    35c0:	f840 3b04 	str.w	r3, [r0], #4
    35c4:	f851 3b04 	ldr.w	r3, [r1], #4
    35c8:	f840 3b04 	str.w	r3, [r0], #4
    35cc:	f851 3b04 	ldr.w	r3, [r1], #4
    35d0:	f840 3b04 	str.w	r3, [r0], #4
    35d4:	f851 3b04 	ldr.w	r3, [r1], #4
    35d8:	f840 3b04 	str.w	r3, [r0], #4
    35dc:	f851 3b04 	ldr.w	r3, [r1], #4
    35e0:	f840 3b04 	str.w	r3, [r0], #4
    35e4:	f851 3b04 	ldr.w	r3, [r1], #4
    35e8:	f840 3b04 	str.w	r3, [r0], #4
    35ec:	f851 3b04 	ldr.w	r3, [r1], #4
    35f0:	f840 3b04 	str.w	r3, [r0], #4
    35f4:	f851 3b04 	ldr.w	r3, [r1], #4
    35f8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    35fc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    35fe:	d2bd      	bcs.n	357c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3600:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3602:	d311      	bcc.n	3628 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3604:	f851 3b04 	ldr.w	r3, [r1], #4
    3608:	f840 3b04 	str.w	r3, [r0], #4
    360c:	f851 3b04 	ldr.w	r3, [r1], #4
    3610:	f840 3b04 	str.w	r3, [r0], #4
    3614:	f851 3b04 	ldr.w	r3, [r1], #4
    3618:	f840 3b04 	str.w	r3, [r0], #4
    361c:	f851 3b04 	ldr.w	r3, [r1], #4
    3620:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3624:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3626:	d2ed      	bcs.n	3604 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3628:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    362a:	d305      	bcc.n	3638 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    362c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3630:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3634:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3636:	d2f9      	bcs.n	362c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3638:	3204      	adds	r2, #4
	beq	.Ldone
    363a:	d008      	beq.n	364e <memcpy+0xe2>

	lsls	r2, r2, #31
    363c:	07d2      	lsls	r2, r2, #31
	itt ne
    363e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3640:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3644:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3648:	d301      	bcc.n	364e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    364a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    364c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    364e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3650:	4770      	bx	lr
    3652:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3654:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3656:	d313      	bcc.n	3680 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3658:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    365a:	d08d      	beq.n	3578 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    365c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3660:	d08a      	beq.n	3578 <memcpy+0xc>

	rsb	r3, #4
    3662:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3666:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3668:	07db      	lsls	r3, r3, #31
	itt ne
    366a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    366c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3670:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3674:	d380      	bcc.n	3578 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3676:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    367a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    367e:	e77b      	b.n	3578 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3680:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3682:	d3d9      	bcc.n	3638 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3684:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3686:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    368a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    368e:	d2f9      	bcs.n	3684 <memcpy+0x118>

	ldrb	r3, [r1]
    3690:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3692:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3694:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3696:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3698:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    369a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    369c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    369e:	4770      	bx	lr

000036a0 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    36a0:	f001 bd36 	b.w	5110 <malloc>

000036a4 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    36a4:	f001 bd3c 	b.w	5120 <free>

000036a8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    36a8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    36ac:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    36ae:	4666      	mov	r6, ip
	int i=0, j;
    36b0:	2400      	movs	r4, #0
    36b2:	e000      	b.n	36b6 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    36b4:	3401      	adds	r4, #1
		digit = val % radix;
    36b6:	fbb0 f5f2 	udiv	r5, r0, r2
    36ba:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    36be:	2b09      	cmp	r3, #9
    36c0:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    36c4:	f103 0330 	add.w	r3, r3, #48	; 0x30
    36c8:	fa5f fe8e 	uxtb.w	lr, lr
    36cc:	bf98      	it	ls
    36ce:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    36d2:	4290      	cmp	r0, r2
		val /= radix;
    36d4:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    36d6:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    36da:	d2eb      	bcs.n	36b4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    36dc:	1c63      	adds	r3, r4, #1
    36de:	2200      	movs	r2, #0
    36e0:	18c8      	adds	r0, r1, r3
    36e2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    36e4:	b17c      	cbz	r4, 3706 <ultoa+0x5e>
		t = buf[j];
    36e6:	4662      	mov	r2, ip
    36e8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    36ec:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    36f0:	eba1 030c 	sub.w	r3, r1, ip
    36f4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    36f6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    36fa:	3b01      	subs	r3, #1
    36fc:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    36fe:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    3700:	4423      	add	r3, r4
    3702:	429a      	cmp	r2, r3
    3704:	dbef      	blt.n	36e6 <ultoa+0x3e>
	}
	return buf;
}
    3706:	4608      	mov	r0, r1
    3708:	bd70      	pop	{r4, r5, r6, pc}
    370a:	bf00      	nop

0000370c <ltoa>:

char * ltoa(long val, char *buf, int radix)
{
	if (val >= 0) {
    370c:	1e03      	subs	r3, r0, #0
    370e:	db01      	blt.n	3714 <ltoa+0x8>
		return ultoa(val, buf, radix);
    3710:	f7ff bfca 	b.w	36a8 <ultoa>
	} else {
		buf[0] = '-';
    3714:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
		ultoa(-val, buf + 1, radix);
    3718:	4258      	negs	r0, r3
{
    371a:	b510      	push	{r4, lr}
    371c:	460c      	mov	r4, r1
		buf[0] = '-';
    371e:	f801 cb01 	strb.w	ip, [r1], #1
		ultoa(-val, buf + 1, radix);
    3722:	f7ff ffc1 	bl	36a8 <ultoa>
		return buf;
	}
}
    3726:	4620      	mov	r0, r4
    3728:	bd10      	pop	{r4, pc}
    372a:	bf00      	nop

0000372c <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    372c:	eeb4 0a40 	vcmp.f32	s0, s0
{
    3730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    3734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    3738:	4616      	mov	r6, r2
	int awidth = abs(width);
    373a:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    373e:	4607      	mov	r7, r0
    3740:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    3744:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    3748:	eeb0 8a40 	vmov.f32	s16, s0
    374c:	b085      	sub	sp, #20
	if (isnanf(val)) {
    374e:	f180 8148 	bvs.w	39e2 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    3752:	eef0 7ac0 	vabs.f32	s15, s0
    3756:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 3a6c <dtostrf+0x340>
    375a:	eef4 7a47 	vcmp.f32	s15, s14
    375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3762:	dd29      	ble.n	37b8 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    3764:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    376c:	f100 80ed 	bmi.w	394a <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3770:	2a03      	cmp	r2, #3
    3772:	f340 8091 	ble.w	3898 <dtostrf+0x16c>
    3776:	2303      	movs	r3, #3
		if (width<0) {
    3778:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    377a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    377e:	f2c0 8085 	blt.w	388c <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    3782:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    3786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    378a:	f100 816a 	bmi.w	3a62 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    378e:	2149      	movs	r1, #73	; 0x49
    3790:	234e      	movs	r3, #78	; 0x4e
    3792:	2046      	movs	r0, #70	; 0x46
    3794:	1cf4      	adds	r4, r6, #3
    3796:	7031      	strb	r1, [r6, #0]
    3798:	70b0      	strb	r0, [r6, #2]
    379a:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    379c:	b122      	cbz	r2, 37a8 <dtostrf+0x7c>
			*buf++ = ' ';
    379e:	4620      	mov	r0, r4
    37a0:	2120      	movs	r1, #32
    37a2:	4414      	add	r4, r2
    37a4:	f002 fc32 	bl	600c <memset>
			awidth--;
		}
		*buf = 0;
    37a8:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    37aa:	4620      	mov	r0, r4
		*buf = 0;
    37ac:	7023      	strb	r3, [r4, #0]
}
    37ae:	b005      	add	sp, #20
    37b0:	ecbd 8b02 	vpop	{d8}
    37b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    37b8:	4689      	mov	r9, r1
    37ba:	460d      	mov	r5, r1
    37bc:	aa02      	add	r2, sp, #8
    37be:	a901      	add	r1, sp, #4
    37c0:	4648      	mov	r0, r9
    37c2:	f002 fa6d 	bl	5ca0 <fcvtf>
	if (precision == 0 && decpt == 0) {
    37c6:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    37ca:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    37cc:	ea59 030a 	orrs.w	r3, r9, sl
    37d0:	d172      	bne.n	38b8 <dtostrf+0x18c>
		decpt++;
    37d2:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    37d4:	7802      	ldrb	r2, [r0, #0]
    37d6:	4ca6      	ldr	r4, [pc, #664]	; (3a70 <dtostrf+0x344>)
		decpt++;
    37d8:	469a      	mov	sl, r3
    37da:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    37dc:	4ba5      	ldr	r3, [pc, #660]	; (3a74 <dtostrf+0x348>)
		decpt++;
    37de:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    37e0:	2a34      	cmp	r2, #52	; 0x34
    37e2:	bf88      	it	hi
    37e4:	461c      	movhi	r4, r3
	if (sign) reqd++;
    37e6:	9b02      	ldr	r3, [sp, #8]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d07d      	beq.n	38e8 <dtostrf+0x1bc>
    37ec:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    37f0:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    37f4:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    37f8:	f1bb 0f00 	cmp.w	fp, #0
    37fc:	f340 80a1 	ble.w	3942 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    3800:	465a      	mov	r2, fp
    3802:	2120      	movs	r1, #32
    3804:	4630      	mov	r0, r6
		e += pad;
    3806:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    3808:	f002 fc00 	bl	600c <memset>
    380c:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    3810:	222d      	movs	r2, #45	; 0x2d
    3812:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    3816:	f1ba 0f00 	cmp.w	sl, #0
    381a:	d177      	bne.n	390c <dtostrf+0x1e0>
    381c:	f1b9 0f00 	cmp.w	r9, #0
    3820:	d006      	beq.n	3830 <dtostrf+0x104>
		*p++ = '0';
    3822:	461a      	mov	r2, r3
    3824:	2130      	movs	r1, #48	; 0x30
    3826:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    382a:	212e      	movs	r1, #46	; 0x2e
    382c:	7059      	strb	r1, [r3, #1]
    382e:	4613      	mov	r3, r2
	while (p < e) {
    3830:	42ab      	cmp	r3, r5
    3832:	d21f      	bcs.n	3874 <dtostrf+0x148>
		*p++ = *s++;
    3834:	46a4      	mov	ip, r4
    3836:	4619      	mov	r1, r3
    3838:	f81c 2b01 	ldrb.w	r2, [ip], #1
    383c:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3840:	42a9      	cmp	r1, r5
    3842:	d018      	beq.n	3876 <dtostrf+0x14a>
    3844:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    3846:	202e      	movs	r0, #46	; 0x2e
    3848:	3c01      	subs	r4, #1
    384a:	e00b      	b.n	3864 <dtostrf+0x138>
    384c:	7058      	strb	r0, [r3, #1]
    384e:	3302      	adds	r3, #2
		if (p == e) break;
    3850:	3c01      	subs	r4, #1
	while (p < e) {
    3852:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3854:	4619      	mov	r1, r3
	while (p < e) {
    3856:	d20d      	bcs.n	3874 <dtostrf+0x148>
		*p++ = *s++;
    3858:	f81c 2b01 	ldrb.w	r2, [ip], #1
    385c:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3860:	42a9      	cmp	r1, r5
    3862:	d008      	beq.n	3876 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    3864:	9401      	str	r4, [sp, #4]
    3866:	2c00      	cmp	r4, #0
    3868:	d0f0      	beq.n	384c <dtostrf+0x120>
    386a:	460b      	mov	r3, r1
		if (p == e) break;
    386c:	3c01      	subs	r4, #1
	while (p < e) {
    386e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3870:	4619      	mov	r1, r3
	while (p < e) {
    3872:	d3f1      	bcc.n	3858 <dtostrf+0x12c>
    3874:	461d      	mov	r5, r3
	if (width < 0) {
    3876:	2f00      	cmp	r7, #0
    3878:	db6b      	blt.n	3952 <dtostrf+0x226>
	return buf;
    387a:	4634      	mov	r4, r6
	*p = 0;
    387c:	2300      	movs	r3, #0
}
    387e:	4620      	mov	r0, r4
	*p = 0;
    3880:	702b      	strb	r3, [r5, #0]
}
    3882:	b005      	add	sp, #20
    3884:	ecbd 8b02 	vpop	{d8}
    3888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    388c:	b122      	cbz	r2, 3898 <dtostrf+0x16c>
				*buf++ = ' ';
    388e:	4630      	mov	r0, r6
    3890:	2120      	movs	r1, #32
    3892:	4416      	add	r6, r2
    3894:	f002 fbba 	bl	600c <memset>
		if (val<0) *buf++ = '-';
    3898:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    38a0:	f140 80bd 	bpl.w	3a1e <dtostrf+0x2f2>
    38a4:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    38a6:	2249      	movs	r2, #73	; 0x49
    38a8:	234e      	movs	r3, #78	; 0x4e
    38aa:	2046      	movs	r0, #70	; 0x46
    38ac:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    38ae:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    38b0:	70f0      	strb	r0, [r6, #3]
    38b2:	7072      	strb	r2, [r6, #1]
    38b4:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    38b6:	e777      	b.n	37a8 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    38b8:	f1ca 0300 	rsb	r3, sl, #0
    38bc:	4599      	cmp	r9, r3
    38be:	da57      	bge.n	3970 <dtostrf+0x244>
		decpt = -precision;
    38c0:	f04f 0801 	mov.w	r8, #1
    38c4:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    38c8:	4c69      	ldr	r4, [pc, #420]	; (3a70 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    38ca:	45c2      	cmp	sl, r8
		decpt = -precision;
    38cc:	4640      	mov	r0, r8
    38ce:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    38d2:	bfb8      	it	lt
    38d4:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    38d8:	f1ba 0f00 	cmp.w	sl, #0
    38dc:	d152      	bne.n	3984 <dtostrf+0x258>
	if (sign) reqd++;
    38de:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    38e0:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    38e4:	2b00      	cmp	r3, #0
    38e6:	d181      	bne.n	37ec <dtostrf+0xc0>
	pad = width - reqd;
    38e8:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    38ec:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    38f0:	f1bb 0f00 	cmp.w	fp, #0
    38f4:	dd27      	ble.n	3946 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    38f6:	465a      	mov	r2, fp
    38f8:	2120      	movs	r1, #32
    38fa:	4630      	mov	r0, r6
		e += pad;
    38fc:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    38fe:	f002 fb85 	bl	600c <memset>
    3902:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    3906:	f1ba 0f00 	cmp.w	sl, #0
    390a:	d087      	beq.n	381c <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    390c:	f1ba 0f00 	cmp.w	sl, #0
    3910:	da8e      	bge.n	3830 <dtostrf+0x104>
    3912:	f1b9 0f00 	cmp.w	r9, #0
    3916:	d08b      	beq.n	3830 <dtostrf+0x104>
		*p++ = '0';
    3918:	4618      	mov	r0, r3
		*p++ = '.';
    391a:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    391c:	2130      	movs	r1, #48	; 0x30
    391e:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    3922:	705a      	strb	r2, [r3, #1]
    3924:	4602      	mov	r2, r0
    3926:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    3928:	3301      	adds	r3, #1
			*p++ = '0';
    392a:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    392e:	d1fb      	bne.n	3928 <dtostrf+0x1fc>
			*p++ = '0';
    3930:	f1ba 0f00 	cmp.w	sl, #0
    3934:	9301      	str	r3, [sp, #4]
    3936:	f1ca 0300 	rsb	r3, sl, #0
    393a:	bfa8      	it	ge
    393c:	2301      	movge	r3, #1
    393e:	4403      	add	r3, r0
    3940:	e776      	b.n	3830 <dtostrf+0x104>
	if (pad > 0) {
    3942:	4633      	mov	r3, r6
    3944:	e764      	b.n	3810 <dtostrf+0xe4>
    3946:	4633      	mov	r3, r6
    3948:	e765      	b.n	3816 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    394a:	2a04      	cmp	r2, #4
    394c:	ddaa      	ble.n	38a4 <dtostrf+0x178>
    394e:	2304      	movs	r3, #4
    3950:	e712      	b.n	3778 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    3952:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    3954:	f1b8 0f00 	cmp.w	r8, #0
    3958:	ea6f 0208 	mvn.w	r2, r8
    395c:	da8d      	bge.n	387a <dtostrf+0x14e>
    395e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    3962:	2120      	movs	r1, #32
    3964:	4628      	mov	r0, r5
    3966:	3201      	adds	r2, #1
    3968:	4415      	add	r5, r2
    396a:	f002 fb4f 	bl	600c <memset>
    396e:	e784      	b.n	387a <dtostrf+0x14e>
	reqd = strlen(s);
    3970:	f003 f8c6 	bl	6b00 <strlen>
    3974:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    3976:	45c2      	cmp	sl, r8
    3978:	bfb8      	it	lt
    397a:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    397e:	f1ba 0f00 	cmp.w	sl, #0
    3982:	d0ac      	beq.n	38de <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    3984:	f1ba 0f00 	cmp.w	sl, #0
    3988:	f6bf af2d 	bge.w	37e6 <dtostrf+0xba>
    398c:	f1b9 0f00 	cmp.w	r9, #0
    3990:	f43f af29 	beq.w	37e6 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    3994:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    3998:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    399c:	4283      	cmp	r3, r0
    399e:	f4bf af22 	bcs.w	37e6 <dtostrf+0xba>
			while (newPrecision > 0) {
    39a2:	f1b9 0f00 	cmp.w	r9, #0
    39a6:	dd05      	ble.n	39b4 <dtostrf+0x288>
				val *= 10.0f;
    39a8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    39ac:	3d01      	subs	r5, #1
				val *= 10.0f;
    39ae:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    39b2:	d1fb      	bne.n	39ac <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    39b4:	aa02      	add	r2, sp, #8
    39b6:	eeb0 0a48 	vmov.f32	s0, s16
    39ba:	4628      	mov	r0, r5
    39bc:	a903      	add	r1, sp, #12
    39be:	f002 f96f 	bl	5ca0 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    39c2:	f8dd a004 	ldr.w	sl, [sp, #4]
    39c6:	9b03      	ldr	r3, [sp, #12]
    39c8:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    39cc:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    39ce:	eba3 030a 	sub.w	r3, r3, sl
    39d2:	4293      	cmp	r3, r2
    39d4:	f47f af07 	bne.w	37e6 <dtostrf+0xba>
    39d8:	f10a 0a01 	add.w	sl, sl, #1
    39dc:	f8cd a004 	str.w	sl, [sp, #4]
    39e0:	e701      	b.n	37e6 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    39e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    39e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39ea:	bf4c      	ite	mi
    39ec:	2304      	movmi	r3, #4
    39ee:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    39f0:	4293      	cmp	r3, r2
    39f2:	da22      	bge.n	3a3a <dtostrf+0x30e>
		if (width<0) {
    39f4:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    39f6:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    39fa:	db18      	blt.n	3a2e <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    39fc:	ee10 3a10 	vmov	r3, s0
    3a00:	2b00      	cmp	r3, #0
    3a02:	da02      	bge.n	3a0a <dtostrf+0x2de>
    3a04:	232d      	movs	r3, #45	; 0x2d
    3a06:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a0a:	234e      	movs	r3, #78	; 0x4e
    3a0c:	2141      	movs	r1, #65	; 0x41
    3a0e:	1cf4      	adds	r4, r6, #3
    3a10:	7033      	strb	r3, [r6, #0]
    3a12:	7071      	strb	r1, [r6, #1]
    3a14:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3a16:	2a00      	cmp	r2, #0
    3a18:	f47f aec1 	bne.w	379e <dtostrf+0x72>
    3a1c:	e6c4      	b.n	37a8 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3a1e:	2149      	movs	r1, #73	; 0x49
    3a20:	224e      	movs	r2, #78	; 0x4e
    3a22:	2346      	movs	r3, #70	; 0x46
    3a24:	1cf4      	adds	r4, r6, #3
    3a26:	7031      	strb	r1, [r6, #0]
    3a28:	7072      	strb	r2, [r6, #1]
    3a2a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3a2c:	e6bc      	b.n	37a8 <dtostrf+0x7c>
			while (awidth) {
    3a2e:	b122      	cbz	r2, 3a3a <dtostrf+0x30e>
				*buf++ = ' ';
    3a30:	4630      	mov	r0, r6
    3a32:	2120      	movs	r1, #32
    3a34:	4416      	add	r6, r2
    3a36:	f002 fae9 	bl	600c <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a3a:	ee18 3a10 	vmov	r3, s16
    3a3e:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a40:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a44:	db05      	blt.n	3a52 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a46:	2241      	movs	r2, #65	; 0x41
    3a48:	1cf4      	adds	r4, r6, #3
    3a4a:	7033      	strb	r3, [r6, #0]
    3a4c:	7072      	strb	r2, [r6, #1]
    3a4e:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3a50:	e6aa      	b.n	37a8 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a52:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a54:	2241      	movs	r2, #65	; 0x41
    3a56:	1d34      	adds	r4, r6, #4
    3a58:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3a5a:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3a5c:	70b2      	strb	r2, [r6, #2]
    3a5e:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    3a60:	e6a2      	b.n	37a8 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    3a62:	232d      	movs	r3, #45	; 0x2d
    3a64:	f806 3b01 	strb.w	r3, [r6], #1
    3a68:	e691      	b.n	378e <dtostrf+0x62>
    3a6a:	bf00      	nop
    3a6c:	7f7fffff 	.word	0x7f7fffff
    3a70:	20000c44 	.word	0x20000c44
    3a74:	20000c48 	.word	0x20000c48

00003a78 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3a78:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    3a7a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3a7c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    3a80:	4619      	mov	r1, r3
{
    3a82:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a84:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a88:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a8c:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a90:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    3a94:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    3a98:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    3a9a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3a9e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3aa2:	b29b      	uxth	r3, r3
    3aa4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    3aa8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3aac:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    3ab0:	3101      	adds	r1, #1
    3ab2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    3ab6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3ab8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3aba:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3abe:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3ac0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3ac2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3ac4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3ac6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    3aca:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3acc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3ace:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3ad0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    3ad2:	d1eb      	bne.n	3aac <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ad4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3ad8:	b29b      	uxth	r3, r3
    3ada:	f043 030f 	orr.w	r3, r3, #15
    3ade:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3ae2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    3ae6:	b29b      	uxth	r3, r3
    3ae8:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    3aec:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    3af0:	bd10      	pop	{r4, pc}
    3af2:	bf00      	nop

00003af4 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3af4:	4b37      	ldr	r3, [pc, #220]	; (3bd4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3af6:	4a38      	ldr	r2, [pc, #224]	; (3bd8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3af8:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    3afa:	4838      	ldr	r0, [pc, #224]	; (3bdc <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3afc:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    3b00:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3b02:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b04:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b08:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b0c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b10:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3b14:	430a      	orrs	r2, r1
    3b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    3b1a:	f7ff ffad 	bl	3a78 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    3b1e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3b22:	f7ff ffa9 	bl	3a78 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    3b26:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3b2a:	f7ff ffa5 	bl	3a78 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    3b2e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    3b32:	f7ff ffa1 	bl	3a78 <flexpwm_init>
	for (i=0; i < 4; i++) {
    3b36:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b38:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b3c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    3b40:	4611      	mov	r1, r2
    3b42:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3b46:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3b4a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b4c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3b4e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3b50:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b52:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b56:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b58:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b5a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3b5e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b60:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    3b62:	d1ee      	bne.n	3b42 <pwm_init+0x4e>
    3b64:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b66:	481e      	ldr	r0, [pc, #120]	; (3be0 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b68:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b6c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    3b70:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b72:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b76:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    3b7a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3b7e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3b82:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b84:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3b86:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3b88:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b8a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b8e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b90:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b92:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3b96:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b98:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    3b9a:	d1ee      	bne.n	3b7a <pwm_init+0x86>
    3b9c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    3b9e:	4811      	ldr	r0, [pc, #68]	; (3be4 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3ba0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3ba2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    3ba6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3ba8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3bac:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    3bb0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    3bb4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    3bb8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3bba:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    3bbc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    3bbe:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3bc0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3bc2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3bc4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3bc6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    3bca:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3bcc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    3bd0:	d1ee      	bne.n	3bb0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3bd2:	bd70      	pop	{r4, r5, r6, pc}
    3bd4:	400fc000 	.word	0x400fc000
    3bd8:	fc030000 	.word	0xfc030000
    3bdc:	403dc000 	.word	0x403dc000
    3be0:	401e0000 	.word	0x401e0000
    3be4:	401e4000 	.word	0x401e4000

00003be8 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop

00003bec <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    3bec:	4770      	bx	lr
    3bee:	bf00      	nop

00003bf0 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    3bf0:	4770      	bx	lr
    3bf2:	bf00      	nop

00003bf4 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    3bf4:	4770      	bx	lr
    3bf6:	bf00      	nop

00003bf8 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    3bf8:	4770      	bx	lr
    3bfa:	bf00      	nop

00003bfc <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    3bfc:	4770      	bx	lr
    3bfe:	bf00      	nop

00003c00 <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    3c00:	4770      	bx	lr
    3c02:	bf00      	nop

00003c04 <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    3c04:	4770      	bx	lr
    3c06:	bf00      	nop

00003c08 <unused_interrupt_vector>:
	__disable_irq();
    3c08:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    3c0a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    3c0e:	4c4f      	ldr	r4, [pc, #316]	; (3d4c <unused_interrupt_vector+0x144>)
    3c10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    3c14:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    3c18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    3c1c:	4e4c      	ldr	r6, [pc, #304]	; (3d50 <unused_interrupt_vector+0x148>)
	while (p < end) {
    3c1e:	4d4d      	ldr	r5, [pc, #308]	; (3d54 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    3c20:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    3c24:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    3c28:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    3c2c:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    3c30:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    3c34:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    3c38:	6993      	ldr	r3, [r2, #24]
    3c3a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    3c3e:	69d3      	ldr	r3, [r2, #28]
    3c40:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    3c44:	f000 f8d0 	bl	3de8 <tempmonGetTemp>
    3c48:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    3c4c:	f001 f9c4 	bl	4fd8 <rtc_get>
	info->len = sizeof(*info) / 4;
    3c50:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    3c52:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    3c56:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    3c5a:	460b      	mov	r3, r1
    3c5c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3c60:	493d      	ldr	r1, [pc, #244]	; (3d58 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    3c62:	1d30      	adds	r0, r6, #4
    3c64:	405a      	eors	r2, r3
    3c66:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3c68:	f002 0301 	and.w	r3, r2, #1
    3c6c:	3c01      	subs	r4, #1
    3c6e:	fb01 f303 	mul.w	r3, r1, r3
    3c72:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    3c76:	d1f7      	bne.n	3c68 <unused_interrupt_vector+0x60>
	while (p < end) {
    3c78:	42a8      	cmp	r0, r5
    3c7a:	d002      	beq.n	3c82 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    3c7c:	6873      	ldr	r3, [r6, #4]
    3c7e:	4606      	mov	r6, r0
    3c80:	e7ef      	b.n	3c62 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    3c82:	4b32      	ldr	r3, [pc, #200]	; (3d4c <unused_interrupt_vector+0x144>)
    3c84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3c88:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3c8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3c90:	492f      	ldr	r1, [pc, #188]	; (3d50 <unused_interrupt_vector+0x148>)
    3c92:	4a32      	ldr	r2, [pc, #200]	; (3d5c <unused_interrupt_vector+0x154>)
    3c94:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    3c98:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    3c9c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3ca0:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3ca4:	4a2e      	ldr	r2, [pc, #184]	; (3d60 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    3ca6:	2502      	movs	r5, #2
    3ca8:	482e      	ldr	r0, [pc, #184]	; (3d64 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3caa:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3cac:	492e      	ldr	r1, [pc, #184]	; (3d68 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3cae:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    3cb2:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    3cb4:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3cb6:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3cb8:	482c      	ldr	r0, [pc, #176]	; (3d6c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3cc2:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3cc4:	680b      	ldr	r3, [r1, #0]
    3cc6:	4283      	cmp	r3, r0
    3cc8:	d83d      	bhi.n	3d46 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    3cca:	4d26      	ldr	r5, [pc, #152]	; (3d64 <unused_interrupt_vector+0x15c>)
    3ccc:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    3cce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3cd2:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    3cd6:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3cd8:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    3cda:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    3cde:	4924      	ldr	r1, [pc, #144]	; (3d70 <unused_interrupt_vector+0x168>)
    3ce0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3ce4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    3ce8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    3cec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    3cf0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    3cf4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    3cf8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    3cfc:	e001      	b.n	3d02 <unused_interrupt_vector+0xfa>
		usb_isr();
    3cfe:	f000 f965 	bl	3fcc <usb_isr>
		if (PIT_TFLG0) {
    3d02:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3d06:	2b00      	cmp	r3, #0
    3d08:	d0f9      	beq.n	3cfe <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    3d0a:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    3d0c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    3d10:	2c4f      	cmp	r4, #79	; 0x4f
    3d12:	d9f4      	bls.n	3cfe <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3d14:	4b17      	ldr	r3, [pc, #92]	; (3d74 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    3d16:	2002      	movs	r0, #2
    3d18:	4917      	ldr	r1, [pc, #92]	; (3d78 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3d1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    3d1e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3d22:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3d24:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3d28:	b93b      	cbnz	r3, 3d3a <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    3d2a:	4814      	ldr	r0, [pc, #80]	; (3d7c <unused_interrupt_vector+0x174>)
    3d2c:	4914      	ldr	r1, [pc, #80]	; (3d80 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3d2e:	4a0d      	ldr	r2, [pc, #52]	; (3d64 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    3d30:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3d32:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    3d36:	2b00      	cmp	r3, #0
    3d38:	d0fa      	beq.n	3d30 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    3d3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d3e:	4a11      	ldr	r2, [pc, #68]	; (3d84 <unused_interrupt_vector+0x17c>)
    3d40:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    3d44:	e7fe      	b.n	3d44 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3d46:	f7ff f9c9 	bl	30dc <set_arm_clock>
    3d4a:	e7be      	b.n	3cca <unused_interrupt_vector+0xc2>
    3d4c:	2027ff00 	.word	0x2027ff00
    3d50:	2027ff80 	.word	0x2027ff80
    3d54:	2027ffa8 	.word	0x2027ffa8
    3d58:	edb88320 	.word	0xedb88320
    3d5c:	2027ffa0 	.word	0x2027ffa0
    3d60:	400fc000 	.word	0x400fc000
    3d64:	40084000 	.word	0x40084000
    3d68:	20000ee4 	.word	0x20000ee4
    3d6c:	0bcd3d80 	.word	0x0bcd3d80
    3d70:	00249f00 	.word	0x00249f00
    3d74:	400d9000 	.word	0x400d9000
    3d78:	402e0000 	.word	0x402e0000
    3d7c:	400f8000 	.word	0x400f8000
    3d80:	0bad00f1 	.word	0x0bad00f1
    3d84:	05fa0004 	.word	0x05fa0004

00003d88 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    3d88:	490a      	ldr	r1, [pc, #40]	; (3db4 <_sbrk+0x2c>)
    3d8a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    3d8c:	b138      	cbz	r0, 3d9e <_sbrk+0x16>
{
    3d8e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    3d90:	1813      	adds	r3, r2, r0
    3d92:	4809      	ldr	r0, [pc, #36]	; (3db8 <_sbrk+0x30>)
    3d94:	4283      	cmp	r3, r0
    3d96:	d804      	bhi.n	3da2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3d98:	4610      	mov	r0, r2
                __brkval = prev + incr;
    3d9a:	600b      	str	r3, [r1, #0]
}
    3d9c:	bd08      	pop	{r3, pc}
    3d9e:	4610      	mov	r0, r2
    3da0:	4770      	bx	lr
                        errno = ENOMEM;
    3da2:	f002 fc9d 	bl	66e0 <__errno>
    3da6:	230c      	movs	r3, #12
                        return (void *)-1;
    3da8:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    3dac:	6003      	str	r3, [r0, #0]
}
    3dae:	4610      	mov	r0, r2
    3db0:	bd08      	pop	{r3, pc}
    3db2:	bf00      	nop
    3db4:	200011b8 	.word	0x200011b8
    3db8:	20280000 	.word	0x20280000

00003dbc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    3dbc:	2000      	movs	r0, #0
    3dbe:	4770      	bx	lr

00003dc0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    3dc0:	f04f 30ff 	mov.w	r0, #4294967295
    3dc4:	4770      	bx	lr
    3dc6:	bf00      	nop

00003dc8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    3dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    3dcc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    3dce:	604b      	str	r3, [r1, #4]
}
    3dd0:	4770      	bx	lr
    3dd2:	bf00      	nop

00003dd4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    3dd4:	2001      	movs	r0, #1
    3dd6:	4770      	bx	lr

00003dd8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    3dd8:	f04f 30ff 	mov.w	r0, #4294967295
    3ddc:	4770      	bx	lr
    3dde:	bf00      	nop

00003de0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    3de0:	bf30      	wfi
    3de2:	e7fd      	b.n	3de0 <abort>

00003de4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    3de4:	f7ff bf10 	b.w	3c08 <unused_interrupt_vector>

00003de8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    3de8:	4a12      	ldr	r2, [pc, #72]	; (3e34 <tempmonGetTemp+0x4c>)
    3dea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    3dee:	075b      	lsls	r3, r3, #29
    3df0:	d5fb      	bpl.n	3dea <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3df2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3df6:	4810      	ldr	r0, [pc, #64]	; (3e38 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3df8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3dfc:	490f      	ldr	r1, [pc, #60]	; (3e3c <tempmonGetTemp+0x54>)
    3dfe:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    3e02:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3e06:	ed91 6a00 	vldr	s12, [r1]
    3e0a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3e0e:	4a0c      	ldr	r2, [pc, #48]	; (3e40 <tempmonGetTemp+0x58>)
    3e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3e14:	4b0b      	ldr	r3, [pc, #44]	; (3e44 <tempmonGetTemp+0x5c>)
    3e16:	edd2 6a00 	vldr	s13, [r2]
    3e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3e1e:	ed93 7a00 	vldr	s14, [r3]
    3e22:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    3e26:	ee67 7a86 	vmul.f32	s15, s15, s12
    3e2a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    3e2e:	ee37 0a40 	vsub.f32	s0, s14, s0
    3e32:	4770      	bx	lr
    3e34:	400d8100 	.word	0x400d8100
    3e38:	200035a4 	.word	0x200035a4
    3e3c:	200035ac 	.word	0x200035ac
    3e40:	200035b0 	.word	0x200035b0
    3e44:	200035a8 	.word	0x200035a8

00003e48 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3e48:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    3e4a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    3e4c:	b11b      	cbz	r3, 3e56 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    3e4e:	6853      	ldr	r3, [r2, #4]
    3e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3e54:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3e56:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3e58:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    3e5a:	b33c      	cbz	r4, 3eac <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3e5c:	4b1a      	ldr	r3, [pc, #104]	; (3ec8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    3e5e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3e60:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3e64:	420c      	tst	r4, r1
    3e66:	d11d      	bne.n	3ea4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3e68:	4e18      	ldr	r6, [pc, #96]	; (3ecc <schedule_transfer+0x84>)
    3e6a:	6877      	ldr	r7, [r6, #4]
    3e6c:	e004      	b.n	3e78 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3e6e:	6874      	ldr	r4, [r6, #4]
    3e70:	1be4      	subs	r4, r4, r7
    3e72:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3e76:	d20b      	bcs.n	3e90 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3e78:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3e7c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3e80:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3e84:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3e88:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3e8c:	0464      	lsls	r4, r4, #17
    3e8e:	d5ee      	bpl.n	3e6e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3e90:	400d      	ands	r5, r1
    3e92:	d107      	bne.n	3ea4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    3e94:	4c0c      	ldr	r4, [pc, #48]	; (3ec8 <schedule_transfer+0x80>)
		endpoint->status = 0;
    3e96:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    3e9a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e9e:	430b      	orrs	r3, r1
    3ea0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    3ea4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3ea6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3ea8:	bcf0      	pop	{r4, r5, r6, r7}
    3eaa:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    3eac:	4d06      	ldr	r5, [pc, #24]	; (3ec8 <schedule_transfer+0x80>)
	endpoint->status = 0;
    3eae:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    3eb2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    3eb6:	430b      	orrs	r3, r1
    3eb8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3ebc:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    3ebe:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3ec0:	b662      	cpsie	i
}
    3ec2:	bcf0      	pop	{r4, r5, r6, r7}
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop
    3ec8:	402e0000 	.word	0x402e0000
    3ecc:	e0001000 	.word	0xe0001000

00003ed0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3ed0:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3ed2:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    3ed4:	b19d      	cbz	r5, 3efe <run_callbacks+0x2e>
    3ed6:	4606      	mov	r6, r0
    3ed8:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    3eda:	2400      	movs	r4, #0
    3edc:	e003      	b.n	3ee6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3ede:	6812      	ldr	r2, [r2, #0]
		count++;
    3ee0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    3ee2:	2a01      	cmp	r2, #1
    3ee4:	d00c      	beq.n	3f00 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    3ee6:	6853      	ldr	r3, [r2, #4]
    3ee8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3eec:	d0f7      	beq.n	3ede <run_callbacks+0xe>
			ep->first_transfer = t;
    3eee:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3ef0:	b12c      	cbz	r4, 3efe <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    3ef2:	4628      	mov	r0, r5
		ep->callback_function(first);
    3ef4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    3ef6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    3ef8:	4798      	blx	r3
	while (count) {
    3efa:	3c01      	subs	r4, #1
    3efc:	d1f9      	bne.n	3ef2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    3efe:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    3f00:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    3f04:	e7f4      	b.n	3ef0 <run_callbacks+0x20>
    3f06:	bf00      	nop

00003f08 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3f08:	b430      	push	{r4, r5}
	if (len > 0) {
    3f0a:	b9d9      	cbnz	r1, 3f44 <endpoint0_transmit.constprop.0+0x3c>
    3f0c:	4c1f      	ldr	r4, [pc, #124]	; (3f8c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    3f0e:	4b20      	ldr	r3, [pc, #128]	; (3f90 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    3f10:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f12:	4a20      	ldr	r2, [pc, #128]	; (3f94 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    3f14:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f16:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    3f1a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3f1c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    3f1e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f22:	2480      	movs	r4, #128	; 0x80
    3f24:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f26:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3f2a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f2e:	481a      	ldr	r0, [pc, #104]	; (3f98 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    3f30:	432b      	orrs	r3, r5
    3f32:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3f36:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    3f38:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d1fb      	bne.n	3f38 <endpoint0_transmit.constprop.0+0x30>
}
    3f40:	bc30      	pop	{r4, r5}
    3f42:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f44:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    3f46:	4b15      	ldr	r3, [pc, #84]	; (3f9c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3f48:	4c10      	ldr	r4, [pc, #64]	; (3f8c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    3f4a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f4c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3f50:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    3f52:	4a10      	ldr	r2, [pc, #64]	; (3f94 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3f54:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f56:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    3f5a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3f5c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f5e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3f62:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3f64:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f66:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f6a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3f6e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    3f70:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3f72:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3f74:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3f76:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f7e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3f82:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3f86:	2b00      	cmp	r3, #0
    3f88:	d1fb      	bne.n	3f82 <endpoint0_transmit.constprop.0+0x7a>
    3f8a:	e7c0      	b.n	3f0e <endpoint0_transmit.constprop.0+0x6>
    3f8c:	20000000 	.word	0x20000000
    3f90:	20001ac0 	.word	0x20001ac0
    3f94:	402e0000 	.word	0x402e0000
    3f98:	20002adc 	.word	0x20002adc
    3f9c:	20001ae0 	.word	0x20001ae0

00003fa0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    3fa0:	4908      	ldr	r1, [pc, #32]	; (3fc4 <usb_stop_sof_interrupts+0x24>)
    3fa2:	2201      	movs	r2, #1
    3fa4:	780b      	ldrb	r3, [r1, #0]
    3fa6:	fa02 f000 	lsl.w	r0, r2, r0
    3faa:	ea23 0000 	bic.w	r0, r3, r0
    3fae:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    3fb0:	b930      	cbnz	r0, 3fc0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3fb2:	4a05      	ldr	r2, [pc, #20]	; (3fc8 <usb_stop_sof_interrupts+0x28>)
    3fb4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    3fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3fbc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    3fc0:	4770      	bx	lr
    3fc2:	bf00      	nop
    3fc4:	200035e5 	.word	0x200035e5
    3fc8:	402e0000 	.word	0x402e0000

00003fcc <usb_isr>:
{
    3fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    3fd0:	4c97      	ldr	r4, [pc, #604]	; (4230 <usb_isr+0x264>)
{
    3fd2:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    3fd4:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3fd8:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    3fda:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3fde:	d553      	bpl.n	4088 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3fe0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3fe4:	2a00      	cmp	r2, #0
    3fe6:	d04a      	beq.n	407e <usb_isr+0xb2>
    3fe8:	4e92      	ldr	r6, [pc, #584]	; (4234 <usb_isr+0x268>)
    3fea:	f8df a260 	ldr.w	sl, [pc, #608]	; 424c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    3fee:	f8df 9274 	ldr.w	r9, [pc, #628]	; 4264 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3ff2:	f8df b274 	ldr.w	fp, [pc, #628]	; 4268 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3ff6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 426c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    3ffa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    3ffe:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4002:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4006:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    400a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    400e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4012:	049d      	lsls	r5, r3, #18
    4014:	d5f5      	bpl.n	4002 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4016:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    401a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    401e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4022:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4026:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    402a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    402e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    4032:	d1fa      	bne.n	402a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    4034:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    4036:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    4038:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    403c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4040:	f000 81cf 	beq.w	43e2 <usb_isr+0x416>
    4044:	f200 80db 	bhi.w	41fe <usb_isr+0x232>
    4048:	f240 3102 	movw	r1, #770	; 0x302
    404c:	428b      	cmp	r3, r1
    404e:	f000 81e7 	beq.w	4420 <usb_isr+0x454>
    4052:	f200 809a 	bhi.w	418a <usb_isr+0x1be>
    4056:	2b82      	cmp	r3, #130	; 0x82
    4058:	f000 81cb 	beq.w	43f2 <usb_isr+0x426>
    405c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4060:	f040 808a 	bne.w	4178 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    4064:	f010 0f78 	tst.w	r0, #120	; 0x78
    4068:	b283      	uxth	r3, r0
    406a:	f000 8203 	beq.w	4474 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    406e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4072:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4076:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    407a:	2a00      	cmp	r2, #0
    407c:	d1bd      	bne.n	3ffa <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    407e:	4a6c      	ldr	r2, [pc, #432]	; (4230 <usb_isr+0x264>)
    4080:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    4084:	2b00      	cmp	r3, #0
    4086:	d142      	bne.n	410e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    4088:	067e      	lsls	r6, r7, #25
    408a:	d516      	bpl.n	40ba <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    408c:	4b68      	ldr	r3, [pc, #416]	; (4230 <usb_isr+0x264>)
    408e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    4092:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4096:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    409a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    409e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    40a2:	2c00      	cmp	r4, #0
    40a4:	d1fb      	bne.n	409e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    40a6:	f04f 32ff 	mov.w	r2, #4294967295
    40aa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    40ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    40b2:	f000 fd27 	bl	4b04 <usb_serial_reset>
		endpointN_notify_mask = 0;
    40b6:	4b60      	ldr	r3, [pc, #384]	; (4238 <usb_isr+0x26c>)
    40b8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    40ba:	01fc      	lsls	r4, r7, #7
    40bc:	d503      	bpl.n	40c6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    40be:	4b5f      	ldr	r3, [pc, #380]	; (423c <usb_isr+0x270>)
    40c0:	681b      	ldr	r3, [r3, #0]
    40c2:	b103      	cbz	r3, 40c6 <usb_isr+0xfa>
    40c4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    40c6:	01b8      	lsls	r0, r7, #6
    40c8:	d503      	bpl.n	40d2 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    40ca:	4b5d      	ldr	r3, [pc, #372]	; (4240 <usb_isr+0x274>)
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	b103      	cbz	r3, 40d2 <usb_isr+0x106>
    40d0:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    40d2:	0779      	lsls	r1, r7, #29
    40d4:	d508      	bpl.n	40e8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    40d6:	4b56      	ldr	r3, [pc, #344]	; (4230 <usb_isr+0x264>)
    40d8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    40dc:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    40e0:	d047      	beq.n	4172 <usb_isr+0x1a6>
			usb_high_speed = 1;
    40e2:	4b58      	ldr	r3, [pc, #352]	; (4244 <usb_isr+0x278>)
    40e4:	2201      	movs	r2, #1
    40e6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    40e8:	4b51      	ldr	r3, [pc, #324]	; (4230 <usb_isr+0x264>)
    40ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    40ee:	061a      	lsls	r2, r3, #24
    40f0:	d50a      	bpl.n	4108 <usb_isr+0x13c>
    40f2:	063b      	lsls	r3, r7, #24
    40f4:	d508      	bpl.n	4108 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    40f6:	4a54      	ldr	r2, [pc, #336]	; (4248 <usb_isr+0x27c>)
    40f8:	7813      	ldrb	r3, [r2, #0]
    40fa:	b12b      	cbz	r3, 4108 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    40fc:	3b01      	subs	r3, #1
    40fe:	b2db      	uxtb	r3, r3
    4100:	7013      	strb	r3, [r2, #0]
    4102:	2b00      	cmp	r3, #0
    4104:	f000 8272 	beq.w	45ec <usb_isr+0x620>
}
    4108:	b003      	add	sp, #12
    410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    410e:	494f      	ldr	r1, [pc, #316]	; (424c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    4110:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    4114:	6808      	ldr	r0, [r1, #0]
    4116:	4203      	tst	r3, r0
    4118:	f040 81d1 	bne.w	44be <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    411c:	4a46      	ldr	r2, [pc, #280]	; (4238 <usb_isr+0x26c>)
    411e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    4120:	401c      	ands	r4, r3
    4122:	d0b1      	beq.n	4088 <usb_isr+0xbc>
				while (tx) {
    4124:	ea5f 4814 	movs.w	r8, r4, lsr #16
    4128:	d010      	beq.n	414c <usb_isr+0x180>
    412a:	4e42      	ldr	r6, [pc, #264]	; (4234 <usb_isr+0x268>)
					tx &= ~(1<<p);
    412c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    4130:	fa98 f5a8 	rbit	r5, r8
    4134:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4138:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    413c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4140:	3040      	adds	r0, #64	; 0x40
    4142:	f7ff fec5 	bl	3ed0 <run_callbacks>
				while (tx) {
    4146:	ea38 0805 	bics.w	r8, r8, r5
    414a:	d1f1      	bne.n	4130 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    414c:	b2a4      	uxth	r4, r4
				while(rx) {
    414e:	2c00      	cmp	r4, #0
    4150:	d09a      	beq.n	4088 <usb_isr+0xbc>
    4152:	4e38      	ldr	r6, [pc, #224]	; (4234 <usb_isr+0x268>)
					rx &= ~(1<<p);
    4154:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    4158:	fa94 f5a4 	rbit	r5, r4
    415c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4160:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    4164:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4168:	f7ff feb2 	bl	3ed0 <run_callbacks>
				while(rx) {
    416c:	43ac      	bics	r4, r5
    416e:	d1f3      	bne.n	4158 <usb_isr+0x18c>
    4170:	e78a      	b.n	4088 <usb_isr+0xbc>
			usb_high_speed = 0;
    4172:	4a34      	ldr	r2, [pc, #208]	; (4244 <usb_isr+0x278>)
    4174:	7013      	strb	r3, [r2, #0]
    4176:	e7b7      	b.n	40e8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    4178:	2b80      	cmp	r3, #128	; 0x80
    417a:	f47f af78 	bne.w	406e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    417e:	4834      	ldr	r0, [pc, #208]	; (4250 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    4180:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    4182:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4184:	f7ff fec0 	bl	3f08 <endpoint0_transmit.constprop.0>
		return;
    4188:	e775      	b.n	4076 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    418a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    418e:	f000 810b 	beq.w	43a8 <usb_isr+0x3dc>
    4192:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    4196:	2b01      	cmp	r3, #1
    4198:	f63f af69 	bhi.w	406e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    419c:	4b2d      	ldr	r3, [pc, #180]	; (4254 <usb_isr+0x288>)
    419e:	685d      	ldr	r5, [r3, #4]
    41a0:	2d00      	cmp	r5, #0
    41a2:	f43f af64 	beq.w	406e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    41a6:	fa1f fc8c 	uxth.w	ip, ip
    41aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    41ae:	e004      	b.n	41ba <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    41b0:	691d      	ldr	r5, [r3, #16]
    41b2:	330c      	adds	r3, #12
    41b4:	2d00      	cmp	r5, #0
    41b6:	f43f af5a 	beq.w	406e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    41ba:	881a      	ldrh	r2, [r3, #0]
    41bc:	4572      	cmp	r2, lr
    41be:	d1f7      	bne.n	41b0 <usb_isr+0x1e4>
    41c0:	885a      	ldrh	r2, [r3, #2]
    41c2:	4562      	cmp	r2, ip
    41c4:	d1f4      	bne.n	41b0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    41c6:	ea4f 221e 	mov.w	r2, lr, lsr #8
    41ca:	2a03      	cmp	r2, #3
    41cc:	f000 81a5 	beq.w	451a <usb_isr+0x54e>
					datalen = list->length;
    41d0:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    41d2:	0c00      	lsrs	r0, r0, #16
    41d4:	4282      	cmp	r2, r0
    41d6:	bf28      	it	cs
    41d8:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    41da:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    41de:	f040 81a1 	bne.w	4524 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    41e2:	4b18      	ldr	r3, [pc, #96]	; (4244 <usb_isr+0x278>)
    41e4:	491c      	ldr	r1, [pc, #112]	; (4258 <usb_isr+0x28c>)
    41e6:	7818      	ldrb	r0, [r3, #0]
    41e8:	4b1c      	ldr	r3, [pc, #112]	; (425c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    41ea:	9201      	str	r2, [sp, #4]
    41ec:	2800      	cmp	r0, #0
    41ee:	bf18      	it	ne
    41f0:	4619      	movne	r1, r3
    41f2:	481b      	ldr	r0, [pc, #108]	; (4260 <usb_isr+0x294>)
    41f4:	f7ff f9ba 	bl	356c <memcpy>
    41f8:	4d19      	ldr	r5, [pc, #100]	; (4260 <usb_isr+0x294>)
    41fa:	9a01      	ldr	r2, [sp, #4]
    41fc:	e1e1      	b.n	45c2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    41fe:	f242 2121 	movw	r1, #8737	; 0x2221
    4202:	428b      	cmp	r3, r1
    4204:	d07c      	beq.n	4300 <usb_isr+0x334>
    4206:	d933      	bls.n	4270 <usb_isr+0x2a4>
    4208:	f242 3121 	movw	r1, #8993	; 0x2321
    420c:	428b      	cmp	r3, r1
    420e:	f000 8081 	beq.w	4314 <usb_isr+0x348>
    4212:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    4216:	428b      	cmp	r3, r1
    4218:	f47f af29 	bne.w	406e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    421c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    4220:	b283      	uxth	r3, r0
    4222:	f47f af24 	bne.w	406e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    4226:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    422a:	f363 0c0f 	bfi	ip, r3, #0, #16
    422e:	e7b5      	b.n	419c <usb_isr+0x1d0>
    4230:	402e0000 	.word	0x402e0000
    4234:	20000000 	.word	0x20000000
    4238:	20002ae0 	.word	0x20002ae0
    423c:	200035d0 	.word	0x200035d0
    4240:	200035d4 	.word	0x200035d4
    4244:	200035eb 	.word	0x200035eb
    4248:	200035ec 	.word	0x200035ec
    424c:	20002adc 	.word	0x20002adc
    4250:	2000356c 	.word	0x2000356c
    4254:	20000d2c 	.word	0x20000d2c
    4258:	60002128 	.word	0x60002128
    425c:	6000218c 	.word	0x6000218c
    4260:	20200000 	.word	0x20200000
    4264:	20002ad4 	.word	0x20002ad4
    4268:	b8c6cf5d 	.word	0xb8c6cf5d
    426c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    4270:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4274:	d066      	beq.n	4344 <usb_isr+0x378>
    4276:	f242 0121 	movw	r1, #8225	; 0x2021
    427a:	428b      	cmp	r3, r1
    427c:	f47f aef7 	bne.w	406e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    4280:	0c03      	lsrs	r3, r0, #16
    4282:	2b07      	cmp	r3, #7
    4284:	f47f aef3 	bne.w	406e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    4288:	4bb2      	ldr	r3, [pc, #712]	; (4554 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    428a:	49b3      	ldr	r1, [pc, #716]	; (4558 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    428c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    428e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    4290:	49b2      	ldr	r1, [pc, #712]	; (455c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    4292:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4294:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    4298:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    429c:	2201      	movs	r2, #1
    429e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    42a0:	4aaf      	ldr	r2, [pc, #700]	; (4560 <usb_isr+0x594>)
    42a2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    42a4:	4aaf      	ldr	r2, [pc, #700]	; (4564 <usb_isr+0x598>)
    42a6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    42a8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    42ac:	f041 0101 	orr.w	r1, r1, #1
    42b0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    42b4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    42b8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    42bc:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    42be:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    42c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42c4:	2b00      	cmp	r3, #0
    42c6:	d1fb      	bne.n	42c0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    42c8:	4aa7      	ldr	r2, [pc, #668]	; (4568 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    42ca:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    42cc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    42ce:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    42d0:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    42d2:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    42d4:	f248 0380 	movw	r3, #32896	; 0x8080
    42d8:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    42da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    42de:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    42e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    42ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    42ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42f2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    42f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    42fa:	2b00      	cmp	r3, #0
    42fc:	d1fb      	bne.n	42f6 <usb_isr+0x32a>
    42fe:	e6ba      	b.n	4076 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4300:	b280      	uxth	r0, r0
    4302:	b938      	cbnz	r0, 4314 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4304:	4b99      	ldr	r3, [pc, #612]	; (456c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    4306:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    430a:	6819      	ldr	r1, [r3, #0]
    430c:	4b98      	ldr	r3, [pc, #608]	; (4570 <usb_isr+0x5a4>)
    430e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4310:	4b98      	ldr	r3, [pc, #608]	; (4574 <usb_isr+0x5a8>)
    4312:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    4314:	4b94      	ldr	r3, [pc, #592]	; (4568 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    4316:	2200      	movs	r2, #0
    4318:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    431a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    431c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    431e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4320:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4322:	2280      	movs	r2, #128	; 0x80
    4324:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4326:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    432a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    432e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4336:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    433a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    433e:	2b00      	cmp	r3, #0
    4340:	d1fb      	bne.n	433a <usb_isr+0x36e>
    4342:	e698      	b.n	4076 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    4344:	f3c2 4207 	ubfx	r2, r2, #16, #8
    4348:	4b8b      	ldr	r3, [pc, #556]	; (4578 <usb_isr+0x5ac>)
    434a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    434c:	4b8b      	ldr	r3, [pc, #556]	; (457c <usb_isr+0x5b0>)
    434e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4352:	4b8b      	ldr	r3, [pc, #556]	; (4580 <usb_isr+0x5b4>)
    4354:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4358:	4b8a      	ldr	r3, [pc, #552]	; (4584 <usb_isr+0x5b8>)
    435a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    435e:	f000 fbd3 	bl	4b08 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    4362:	2280      	movs	r2, #128	; 0x80
    4364:	4629      	mov	r1, r5
    4366:	4888      	ldr	r0, [pc, #544]	; (4588 <usb_isr+0x5bc>)
    4368:	f001 fe50 	bl	600c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    436c:	4b87      	ldr	r3, [pc, #540]	; (458c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    436e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4370:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4374:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    4378:	4b7b      	ldr	r3, [pc, #492]	; (4568 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    437a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    437c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    437e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4380:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    4382:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4384:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4386:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    438a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    438e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4396:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    439a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    439e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    43a2:	2b00      	cmp	r3, #0
    43a4:	d1fb      	bne.n	439e <usb_isr+0x3d2>
    43a6:	e666      	b.n	4076 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    43a8:	4b6f      	ldr	r3, [pc, #444]	; (4568 <usb_isr+0x59c>)
    43aa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    43ac:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    43ae:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    43b0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    43b2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    43b4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    43b6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    43b8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    43bc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    43c0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    43c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    43c8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    43cc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    43d0:	2b00      	cmp	r3, #0
    43d2:	d1fb      	bne.n	43cc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    43d4:	0c13      	lsrs	r3, r2, #16
    43d6:	065b      	lsls	r3, r3, #25
    43d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    43dc:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    43e0:	e649      	b.n	4076 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    43e2:	4b65      	ldr	r3, [pc, #404]	; (4578 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    43e4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    43e6:	486a      	ldr	r0, [pc, #424]	; (4590 <usb_isr+0x5c4>)
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    43ec:	f7ff fd8c 	bl	3f08 <endpoint0_transmit.constprop.0>
		return;
    43f0:	e641      	b.n	4076 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    43f2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    43f4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    43f8:	f47f ae39 	bne.w	406e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    43fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4400:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    4404:	4a62      	ldr	r2, [pc, #392]	; (4590 <usb_isr+0x5c4>)
    4406:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4408:	0618      	lsls	r0, r3, #24
    440a:	f100 809e 	bmi.w	454a <usb_isr+0x57e>
    440e:	07cb      	lsls	r3, r1, #31
    4410:	d501      	bpl.n	4416 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    4412:	2301      	movs	r3, #1
    4414:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4416:	2102      	movs	r1, #2
    4418:	485d      	ldr	r0, [pc, #372]	; (4590 <usb_isr+0x5c4>)
    441a:	f7ff fd75 	bl	3f08 <endpoint0_transmit.constprop.0>
		return;
    441e:	e62a      	b.n	4076 <usb_isr+0xaa>
		if (endpoint > 7) break;
    4420:	f010 0f78 	tst.w	r0, #120	; 0x78
    4424:	b283      	uxth	r3, r0
    4426:	f47f ae22 	bne.w	406e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    442a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    442e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    4432:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4436:	bf14      	ite	ne
    4438:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    443c:	f043 0301 	orreq.w	r3, r3, #1
    4440:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4444:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4446:	4b48      	ldr	r3, [pc, #288]	; (4568 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4448:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    444a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    444c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    444e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4450:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4452:	2280      	movs	r2, #128	; 0x80
    4454:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4456:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    445a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    445e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4466:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    446a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    446e:	2b00      	cmp	r3, #0
    4470:	d1fb      	bne.n	446a <usb_isr+0x49e>
    4472:	e600      	b.n	4076 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4478:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    447c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4480:	bf14      	ite	ne
    4482:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    4486:	f023 0301 	biceq.w	r3, r3, #1
    448a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    448e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4490:	4b35      	ldr	r3, [pc, #212]	; (4568 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4492:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4494:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4496:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4498:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    449a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    449c:	2280      	movs	r2, #128	; 0x80
    449e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    44a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    44a4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    44a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    44ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    44b0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    44b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    44b8:	2b00      	cmp	r3, #0
    44ba:	d1fb      	bne.n	44b4 <usb_isr+0x4e8>
    44bc:	e5db      	b.n	4076 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    44be:	2000      	movs	r0, #0
    44c0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    44c2:	4926      	ldr	r1, [pc, #152]	; (455c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    44c4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    44c6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    44c8:	f242 0121 	movw	r1, #8225	; 0x2021
    44cc:	428c      	cmp	r4, r1
    44ce:	f47f ae25 	bne.w	411c <usb_isr+0x150>
    44d2:	b280      	uxth	r0, r0
    44d4:	2800      	cmp	r0, #0
    44d6:	f47f ae21 	bne.w	411c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    44da:	492e      	ldr	r1, [pc, #184]	; (4594 <usb_isr+0x5c8>)
    44dc:	4c2e      	ldr	r4, [pc, #184]	; (4598 <usb_isr+0x5cc>)
    44de:	c903      	ldmia	r1, {r0, r1}
    44e0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    44e2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    44e4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    44e8:	6020      	str	r0, [r4, #0]
    44ea:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    44ec:	f47f ae16 	bne.w	411c <usb_isr+0x150>
	__disable_irq();
    44f0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    44f2:	482a      	ldr	r0, [pc, #168]	; (459c <usb_isr+0x5d0>)
    44f4:	7801      	ldrb	r1, [r0, #0]
    44f6:	f041 0108 	orr.w	r1, r1, #8
    44fa:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    44fc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    4500:	060d      	lsls	r5, r1, #24
    4502:	d405      	bmi.n	4510 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4504:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4506:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4508:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    450c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    4510:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4512:	4a23      	ldr	r2, [pc, #140]	; (45a0 <usb_isr+0x5d4>)
    4514:	2150      	movs	r1, #80	; 0x50
    4516:	7011      	strb	r1, [r2, #0]
    4518:	e600      	b.n	411c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    451a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    451c:	782a      	ldrb	r2, [r5, #0]
    451e:	4282      	cmp	r2, r0
    4520:	bf28      	it	cs
    4522:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    4524:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    4528:	d144      	bne.n	45b4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    452a:	4b1e      	ldr	r3, [pc, #120]	; (45a4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    452c:	4d1e      	ldr	r5, [pc, #120]	; (45a8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    452e:	7818      	ldrb	r0, [r3, #0]
    4530:	491e      	ldr	r1, [pc, #120]	; (45ac <usb_isr+0x5e0>)
    4532:	4b1f      	ldr	r3, [pc, #124]	; (45b0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4534:	9201      	str	r2, [sp, #4]
    4536:	2800      	cmp	r0, #0
    4538:	bf18      	it	ne
    453a:	4619      	movne	r1, r3
    453c:	4628      	mov	r0, r5
    453e:	f7ff f815 	bl	356c <memcpy>
					usb_descriptor_buffer[1] = 7;
    4542:	2307      	movs	r3, #7
    4544:	706b      	strb	r3, [r5, #1]
    4546:	9a01      	ldr	r2, [sp, #4]
    4548:	e03b      	b.n	45c2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    454a:	03c9      	lsls	r1, r1, #15
    454c:	f53f af61 	bmi.w	4412 <usb_isr+0x446>
    4550:	e761      	b.n	4416 <usb_isr+0x44a>
    4552:	bf00      	nop
    4554:	20001ae0 	.word	0x20001ae0
    4558:	20003ad4 	.word	0x20003ad4
    455c:	20001c80 	.word	0x20001c80
    4560:	00070080 	.word	0x00070080
    4564:	20004ad4 	.word	0x20004ad4
    4568:	20001ac0 	.word	0x20001ac0
    456c:	200035bc 	.word	0x200035bc
    4570:	200035cc 	.word	0x200035cc
    4574:	200035e9 	.word	0x200035e9
    4578:	200035ea 	.word	0x200035ea
    457c:	00cc0002 	.word	0x00cc0002
    4580:	000200c8 	.word	0x000200c8
    4584:	00c80002 	.word	0x00c80002
    4588:	20000080 	.word	0x20000080
    458c:	74d59319 	.word	0x74d59319
    4590:	2000356c 	.word	0x2000356c
    4594:	20002ad4 	.word	0x20002ad4
    4598:	200035c4 	.word	0x200035c4
    459c:	200035e5 	.word	0x200035e5
    45a0:	200035ec 	.word	0x200035ec
    45a4:	200035eb 	.word	0x200035eb
    45a8:	20200000 	.word	0x20200000
    45ac:	6000218c 	.word	0x6000218c
    45b0:	60002128 	.word	0x60002128
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    45b4:	4629      	mov	r1, r5
    45b6:	4d10      	ldr	r5, [pc, #64]	; (45f8 <usb_isr+0x62c>)
    45b8:	9201      	str	r2, [sp, #4]
    45ba:	4628      	mov	r0, r5
    45bc:	f7fe ffd6 	bl	356c <memcpy>
    45c0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    45c2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    45c6:	4415      	add	r5, r2
	asm("dsb");
    45c8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    45cc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    45d0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    45d4:	3320      	adds	r3, #32
	} while (location < end_addr);
    45d6:	429d      	cmp	r5, r3
    45d8:	d8fa      	bhi.n	45d0 <usb_isr+0x604>
	asm("dsb");
    45da:	f3bf 8f4f 	dsb	sy
	asm("isb");
    45de:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    45e2:	4805      	ldr	r0, [pc, #20]	; (45f8 <usb_isr+0x62c>)
    45e4:	4611      	mov	r1, r2
    45e6:	f7ff fc8f 	bl	3f08 <endpoint0_transmit.constprop.0>
				return;
    45ea:	e544      	b.n	4076 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    45ec:	2003      	movs	r0, #3
    45ee:	f7ff fcd7 	bl	3fa0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    45f2:	f005 fe59 	bl	a2a8 <___reboot_Teensyduino__veneer>
    45f6:	bf00      	nop
    45f8:	20200000 	.word	0x20200000

000045fc <usb_config_rx>:
{
    45fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4600:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4602:	1e83      	subs	r3, r0, #2
    4604:	2b02      	cmp	r3, #2
    4606:	d901      	bls.n	460c <usb_config_rx+0x10>
}
    4608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    460c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 465c <usb_config_rx+0x60>
    4610:	4615      	mov	r5, r2
    4612:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    4614:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4616:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    461a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    461c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    4620:	2100      	movs	r1, #0
    4622:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4626:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    4628:	f001 fcf0 	bl	600c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    462c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    4630:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4632:	0952      	lsrs	r2, r2, #5
    4634:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    4638:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    463c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4640:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    4644:	2f00      	cmp	r7, #0
    4646:	d0df      	beq.n	4608 <usb_config_rx+0xc>
    4648:	4a03      	ldr	r2, [pc, #12]	; (4658 <usb_config_rx+0x5c>)
    464a:	40b3      	lsls	r3, r6
    464c:	6811      	ldr	r1, [r2, #0]
    464e:	430b      	orrs	r3, r1
    4650:	6013      	str	r3, [r2, #0]
}
    4652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4656:	bf00      	nop
    4658:	20002ae0 	.word	0x20002ae0
    465c:	20000000 	.word	0x20000000

00004660 <usb_config_tx>:
{
    4660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4664:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4666:	1e81      	subs	r1, r0, #2
    4668:	2902      	cmp	r1, #2
    466a:	d901      	bls.n	4670 <usb_config_tx+0x10>
}
    466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4670:	01c7      	lsls	r7, r0, #7
    4672:	f8df 904c 	ldr.w	r9, [pc, #76]	; 46c0 <usb_config_tx+0x60>
    4676:	4692      	mov	sl, r2
    4678:	4604      	mov	r4, r0
    467a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    467c:	223c      	movs	r2, #60	; 0x3c
    467e:	2100      	movs	r1, #0
    4680:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4682:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4686:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    4688:	f108 0004 	add.w	r0, r8, #4
    468c:	f001 fcbe 	bl	600c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4690:	faba f28a 	clz	r2, sl
    4694:	0952      	lsrs	r2, r2, #5
    4696:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    469a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    469e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    46a0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    46a4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    46a8:	2e00      	cmp	r6, #0
    46aa:	d0df      	beq.n	466c <usb_config_tx+0xc>
    46ac:	4b03      	ldr	r3, [pc, #12]	; (46bc <usb_config_tx+0x5c>)
    46ae:	3410      	adds	r4, #16
    46b0:	6819      	ldr	r1, [r3, #0]
    46b2:	40a2      	lsls	r2, r4
    46b4:	430a      	orrs	r2, r1
    46b6:	601a      	str	r2, [r3, #0]
}
    46b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46bc:	20002ae0 	.word	0x20002ae0
    46c0:	20000000 	.word	0x20000000

000046c4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    46c4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    46c6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    46c8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    46ca:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    46ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    46d2:	b410      	push	{r4}
	transfer->next = 1;
    46d4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    46d6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    46d8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    46dc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    46de:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    46e2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    46e6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    46e8:	6181      	str	r1, [r0, #24]
}
    46ea:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    46ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    46f2:	4770      	bx	lr

000046f4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46f4:	1e83      	subs	r3, r0, #2
{
    46f6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    46f8:	2b02      	cmp	r3, #2
    46fa:	d900      	bls.n	46fe <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    46fc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    46fe:	4b06      	ldr	r3, [pc, #24]	; (4718 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    4700:	f100 0110 	add.w	r1, r0, #16
    4704:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4708:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    470c:	fa0c f101 	lsl.w	r1, ip, r1
    4710:	3040      	adds	r0, #64	; 0x40
    4712:	f7ff bb99 	b.w	3e48 <schedule_transfer>
    4716:	bf00      	nop
    4718:	20000000 	.word	0x20000000

0000471c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    471c:	1e83      	subs	r3, r0, #2
{
    471e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4720:	2b02      	cmp	r3, #2
    4722:	d900      	bls.n	4726 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    4724:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    4726:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    4728:	4b02      	ldr	r3, [pc, #8]	; (4734 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    472a:	4081      	lsls	r1, r0
    472c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    4730:	f7ff bb8a 	b.w	3e48 <schedule_transfer>
    4734:	20000000 	.word	0x20000000

00004738 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    4738:	6840      	ldr	r0, [r0, #4]
#endif
}
    473a:	4770      	bx	lr

0000473c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    473c:	4a12      	ldr	r2, [pc, #72]	; (4788 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    473e:	4b13      	ldr	r3, [pc, #76]	; (478c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4740:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    4744:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    4748:	4298      	cmp	r0, r3
{
    474a:	b510      	push	{r4, lr}
    474c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    474e:	d202      	bcs.n	4756 <usb_init_serialnumber+0x1a>
    4750:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4754:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    4756:	4c0e      	ldr	r4, [pc, #56]	; (4790 <usb_init_serialnumber+0x54>)
    4758:	a901      	add	r1, sp, #4
    475a:	220a      	movs	r2, #10
    475c:	f7fe ffa4 	bl	36a8 <ultoa>
	for (i=0; i<10; i++) {
    4760:	a901      	add	r1, sp, #4
    4762:	2300      	movs	r3, #0
    4764:	4620      	mov	r0, r4
		char c = buf[i];
    4766:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    476a:	3301      	adds	r3, #1
		if (!c) break;
    476c:	b13a      	cbz	r2, 477e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    476e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    4770:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    4774:	d1f7      	bne.n	4766 <usb_init_serialnumber+0x2a>
    4776:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4778:	7023      	strb	r3, [r4, #0]
}
    477a:	b004      	add	sp, #16
    477c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    477e:	005b      	lsls	r3, r3, #1
    4780:	b2db      	uxtb	r3, r3
    4782:	7023      	strb	r3, [r4, #0]
}
    4784:	b004      	add	sp, #16
    4786:	bd10      	pop	{r4, pc}
    4788:	401f4400 	.word	0x401f4400
    478c:	00989680 	.word	0x00989680
    4790:	200017a0 	.word	0x200017a0

00004794 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    4794:	f000 bacc 	b.w	4d30 <usb_serial_flush_input>

00004798 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4798:	f000 bb5c 	b.w	4e54 <usb_serial_flush_output>

0000479c <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    479c:	f000 bb32 	b.w	4e04 <usb_serial_write_buffer_free>

000047a0 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47a0:	4608      	mov	r0, r1
    47a2:	4611      	mov	r1, r2
    47a4:	f000 bb22 	b.w	4dec <usb_serial_write>

000047a8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    47a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    47aa:	4c14      	ldr	r4, [pc, #80]	; (47fc <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47ac:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    47b0:	4e13      	ldr	r6, [pc, #76]	; (4800 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    47b6:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    47ba:	4f12      	ldr	r7, [pc, #72]	; (4804 <rx_queue_transfer+0x5c>)
    47bc:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    47c0:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47c2:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    47c6:	4621      	mov	r1, r4
    47c8:	883a      	ldrh	r2, [r7, #0]
    47ca:	4630      	mov	r0, r6
    47cc:	f7ff ff7a 	bl	46c4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    47d0:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    47d2:	4423      	add	r3, r4
	asm("dsb");
    47d4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    47d8:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    47dc:	3420      	adds	r4, #32
	} while (location < end_addr);
    47de:	42a3      	cmp	r3, r4
    47e0:	d8fa      	bhi.n	47d8 <rx_queue_transfer+0x30>
	asm("dsb");
    47e2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    47e6:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    47ea:	2003      	movs	r0, #3
    47ec:	4631      	mov	r1, r6
    47ee:	f7ff ff95 	bl	471c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    47f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    47f6:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    47fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47fc:	20200080 	.word	0x20200080
    4800:	20001b00 	.word	0x20001b00
    4804:	200035d8 	.word	0x200035d8

00004808 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4808:	4b24      	ldr	r3, [pc, #144]	; (489c <rx_event+0x94>)
{
    480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    480e:	881c      	ldrh	r4, [r3, #0]
    4810:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    4812:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4814:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4818:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    481a:	2c00      	cmp	r4, #0
    481c:	dd24      	ble.n	4868 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    481e:	4920      	ldr	r1, [pc, #128]	; (48a0 <rx_event+0x98>)
		if (head != rx_tail) {
    4820:	4820      	ldr	r0, [pc, #128]	; (48a4 <rx_event+0x9c>)
		uint32_t head = rx_head;
    4822:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    4824:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    4826:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    4828:	4e1f      	ldr	r6, [pc, #124]	; (48a8 <rx_event+0xa0>)
		if (head != rx_tail) {
    482a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    482c:	481f      	ldr	r0, [pc, #124]	; (48ac <rx_event+0xa4>)
		if (head != rx_tail) {
    482e:	d007      	beq.n	4840 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    4830:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    4834:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    4838:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    483c:	4294      	cmp	r4, r2
    483e:	d918      	bls.n	4872 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4840:	3301      	adds	r3, #1
		rx_index[i] = 0;
    4842:	2200      	movs	r2, #0
		rx_count[i] = len;
    4844:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    4848:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    484a:	4e19      	ldr	r6, [pc, #100]	; (48b0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    484c:	bf88      	it	hi
    484e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    4850:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    4854:	bf98      	it	ls
    4856:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    4858:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    485a:	4b16      	ldr	r3, [pc, #88]	; (48b4 <rx_event+0xac>)
		rx_head = head;
    485c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    485e:	681a      	ldr	r2, [r3, #0]
    4860:	4414      	add	r4, r2
    4862:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    4864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    4868:	4628      	mov	r0, r5
}
    486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    486e:	f7ff bf9b 	b.w	47a8 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4872:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    4876:	4910      	ldr	r1, [pc, #64]	; (48b8 <rx_event+0xb0>)
    4878:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    487a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    487c:	4408      	add	r0, r1
    487e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    4882:	f7fe fe73 	bl	356c <memcpy>
				rx_available += len;
    4886:	4a0b      	ldr	r2, [pc, #44]	; (48b4 <rx_event+0xac>)
				rx_queue_transfer(i);
    4888:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    488a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    488e:	6813      	ldr	r3, [r2, #0]
    4890:	4423      	add	r3, r4
}
    4892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    4896:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    4898:	f7ff bf86 	b.w	47a8 <rx_queue_transfer>
    489c:	200035d8 	.word	0x200035d8
    48a0:	200035e3 	.word	0x200035e3
    48a4:	200035e4 	.word	0x200035e4
    48a8:	20003578 	.word	0x20003578
    48ac:	20003598 	.word	0x20003598
    48b0:	20003588 	.word	0x20003588
    48b4:	20003574 	.word	0x20003574
    48b8:	20200080 	.word	0x20200080

000048bc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    48bc:	4b1d      	ldr	r3, [pc, #116]	; (4934 <usb_serial_flush_callback+0x78>)
    48be:	781a      	ldrb	r2, [r3, #0]
    48c0:	2a00      	cmp	r2, #0
    48c2:	d136      	bne.n	4932 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    48c4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    48c8:	4a1b      	ldr	r2, [pc, #108]	; (4938 <usb_serial_flush_callback+0x7c>)
    48ca:	7812      	ldrb	r2, [r2, #0]
    48cc:	b38a      	cbz	r2, 4932 <usb_serial_flush_callback+0x76>
{
    48ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    48d2:	4d1a      	ldr	r5, [pc, #104]	; (493c <usb_serial_flush_callback+0x80>)
    48d4:	882a      	ldrh	r2, [r5, #0]
    48d6:	b352      	cbz	r2, 492e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    48d8:	4e19      	ldr	r6, [pc, #100]	; (4940 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    48da:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    48de:	4f19      	ldr	r7, [pc, #100]	; (4944 <usb_serial_flush_callback+0x88>)
    48e0:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    48e2:	4c19      	ldr	r4, [pc, #100]	; (4948 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    48e4:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    48e8:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    48ec:	4642      	mov	r2, r8
    48ee:	4638      	mov	r0, r7
    48f0:	4621      	mov	r1, r4
    48f2:	f7ff fee7 	bl	46c4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    48f6:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    48fa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    48fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4902:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4906:	3420      	adds	r4, #32
	} while (location < end_addr);
    4908:	42a2      	cmp	r2, r4
    490a:	d8fa      	bhi.n	4902 <usb_serial_flush_callback+0x46>
	asm("dsb");
    490c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4910:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4914:	2004      	movs	r0, #4
    4916:	4639      	mov	r1, r7
    4918:	f7ff feec 	bl	46f4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    491c:	7833      	ldrb	r3, [r6, #0]
    491e:	3301      	adds	r3, #1
    4920:	b2db      	uxtb	r3, r3
    4922:	2b03      	cmp	r3, #3
    4924:	bf88      	it	hi
    4926:	2300      	movhi	r3, #0
    4928:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    492a:	2300      	movs	r3, #0
    492c:	802b      	strh	r3, [r5, #0]
}
    492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4932:	4770      	bx	lr
    4934:	200035e8 	.word	0x200035e8
    4938:	200035ea 	.word	0x200035ea
    493c:	200035da 	.word	0x200035da
    4940:	200035e7 	.word	0x200035e7
    4944:	20001c00 	.word	0x20001c00
    4948:	20201080 	.word	0x20201080

0000494c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4950:	b085      	sub	sp, #20
	while (size > 0) {
    4952:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4956:	2900      	cmp	r1, #0
    4958:	f000 80bf 	beq.w	4ada <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    495c:	2300      	movs	r3, #0
    495e:	4c60      	ldr	r4, [pc, #384]	; (4ae0 <usb_serial_write.part.0+0x194>)
    4960:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4afc <usb_serial_write.part.0+0x1b0>
    4964:	f8df a198 	ldr.w	sl, [pc, #408]	; 4b00 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    4968:	4f5e      	ldr	r7, [pc, #376]	; (4ae4 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    496a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    496c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    496e:	4a5e      	ldr	r2, [pc, #376]	; (4ae8 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    4970:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    4972:	4b5e      	ldr	r3, [pc, #376]	; (4aec <usb_serial_write.part.0+0x1a0>)
    4974:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    4976:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    497a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    497e:	2b00      	cmp	r3, #0
    4980:	f040 80a7 	bne.w	4ad2 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    4984:	461e      	mov	r6, r3
		int waiting=0;
    4986:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    4988:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    498a:	4648      	mov	r0, r9
    498c:	f7ff fed4 	bl	4738 <usb_transfer_status>
			if (!(status & 0x80)) {
    4990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    4994:	f000 808c 	beq.w	4ab0 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    4998:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    499c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    49a0:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    49a4:	b905      	cbnz	r5, 49a8 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    49a6:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    49a8:	2b00      	cmp	r3, #0
    49aa:	d17d      	bne.n	4aa8 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    49ac:	683b      	ldr	r3, [r7, #0]
    49ae:	1b9b      	subs	r3, r3, r6
    49b0:	2b78      	cmp	r3, #120	; 0x78
    49b2:	f200 8087 	bhi.w	4ac4 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    49b6:	4b4e      	ldr	r3, [pc, #312]	; (4af0 <usb_serial_write.part.0+0x1a4>)
    49b8:	781b      	ldrb	r3, [r3, #0]
    49ba:	2b00      	cmp	r3, #0
    49bc:	d074      	beq.n	4aa8 <usb_serial_write.part.0+0x15c>
			yield();
    49be:	f000 fa93 	bl	4ee8 <yield>
			tx_noautoflush = 1;
    49c2:	2201      	movs	r2, #1
		while (!tx_available) {
    49c4:	f8b8 3000 	ldrh.w	r3, [r8]
    49c8:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    49ca:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    49cc:	2b00      	cmp	r3, #0
    49ce:	d0dc      	beq.n	498a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    49d0:	4a46      	ldr	r2, [pc, #280]	; (4aec <usb_serial_write.part.0+0x1a0>)
    49d2:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    49d6:	7811      	ldrb	r1, [r2, #0]
    49d8:	461a      	mov	r2, r3
    49da:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    49de:	4d45      	ldr	r5, [pc, #276]	; (4af4 <usb_serial_write.part.0+0x1a8>)
    49e0:	02c9      	lsls	r1, r1, #11
    49e2:	4428      	add	r0, r5
		if (size >= tx_available) {
    49e4:	9d01      	ldr	r5, [sp, #4]
    49e6:	4295      	cmp	r5, r2
    49e8:	d217      	bcs.n	4a1a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    49ea:	9303      	str	r3, [sp, #12]
    49ec:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    49f0:	462a      	mov	r2, r5
    49f2:	f7fe fdbb 	bl	356c <memcpy>
			tx_available -= size;
    49f6:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    49f8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    49fc:	1b5b      	subs	r3, r3, r5
    49fe:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4a02:	4b3d      	ldr	r3, [pc, #244]	; (4af8 <usb_serial_write.part.0+0x1ac>)
    4a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    4a08:	f3bf 8f4f 	dsb	sy
			sent += size;
    4a0c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    4a0e:	2300      	movs	r3, #0
			sent += size;
    4a10:	4428      	add	r0, r5
		tx_noautoflush = 0;
    4a12:	7023      	strb	r3, [r4, #0]
}
    4a14:	b005      	add	sp, #20
    4a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4a1a:	4b36      	ldr	r3, [pc, #216]	; (4af4 <usb_serial_write.part.0+0x1a8>)
    4a1c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    4a1e:	9902      	ldr	r1, [sp, #8]
    4a20:	f7fe fda4 	bl	356c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4a24:	2300      	movs	r3, #0
    4a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4a2a:	4629      	mov	r1, r5
    4a2c:	4648      	mov	r0, r9
    4a2e:	f7ff fe49 	bl	46c4 <usb_prepare_transfer>
	asm("dsb");
    4a32:	f3bf 8f4f 	dsb	sy
    4a36:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    4a3a:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    4a3e:	4293      	cmp	r3, r2
    4a40:	bf34      	ite	cc
    4a42:	2301      	movcc	r3, #1
    4a44:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    4a46:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4a4a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    4a4e:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    4a52:	3520      	adds	r5, #32
	} while (location < end_addr);
    4a54:	42ab      	cmp	r3, r5
    4a56:	d1fa      	bne.n	4a4e <usb_serial_write.part.0+0x102>
	asm("dsb");
    4a58:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a5c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4a60:	2004      	movs	r0, #4
    4a62:	4649      	mov	r1, r9
    4a64:	f7ff fe46 	bl	46f4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4a68:	4a20      	ldr	r2, [pc, #128]	; (4aec <usb_serial_write.part.0+0x1a0>)
    4a6a:	7813      	ldrb	r3, [r2, #0]
    4a6c:	3301      	adds	r3, #1
    4a6e:	b2db      	uxtb	r3, r3
    4a70:	2b03      	cmp	r3, #3
    4a72:	bf84      	itt	hi
    4a74:	2300      	movhi	r3, #0
    4a76:	4a1d      	ldrhi	r2, [pc, #116]	; (4aec <usb_serial_write.part.0+0x1a0>)
    4a78:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4a7a:	f8b8 3000 	ldrh.w	r3, [r8]
    4a7e:	9a01      	ldr	r2, [sp, #4]
    4a80:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    4a82:	9a00      	ldr	r2, [sp, #0]
    4a84:	441a      	add	r2, r3
			size -= tx_available;
    4a86:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    4a88:	9200      	str	r2, [sp, #0]
			data += tx_available;
    4a8a:	9a02      	ldr	r2, [sp, #8]
    4a8c:	441a      	add	r2, r3
			tx_available = 0;
    4a8e:	2300      	movs	r3, #0
			data += tx_available;
    4a90:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    4a92:	4a19      	ldr	r2, [pc, #100]	; (4af8 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    4a94:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    4a98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    4a9c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    4aa0:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    4aa2:	2900      	cmp	r1, #0
    4aa4:	f47f af62 	bne.w	496c <usb_serial_write.part.0+0x20>
	return sent;
    4aa8:	9800      	ldr	r0, [sp, #0]
}
    4aaa:	b005      	add	sp, #20
    4aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    4ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4ab4:	4b0d      	ldr	r3, [pc, #52]	; (4aec <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    4ab6:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4aba:	7819      	ldrb	r1, [r3, #0]
				break;
    4abc:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    4abe:	f8a8 2000 	strh.w	r2, [r8]
				break;
    4ac2:	e78a      	b.n	49da <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    4ac4:	2301      	movs	r3, #1
				return sent;
    4ac6:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    4ac8:	f88a 3000 	strb.w	r3, [sl]
}
    4acc:	b005      	add	sp, #20
    4ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4ad2:	461a      	mov	r2, r3
    4ad4:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4ad8:	e77f      	b.n	49da <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    4ada:	9801      	ldr	r0, [sp, #4]
	return sent;
    4adc:	e7e5      	b.n	4aaa <usb_serial_write.part.0+0x15e>
    4ade:	bf00      	nop
    4ae0:	200035e8 	.word	0x200035e8
    4ae4:	200035bc 	.word	0x200035bc
    4ae8:	20001c00 	.word	0x20001c00
    4aec:	200035e7 	.word	0x200035e7
    4af0:	200035ea 	.word	0x200035ea
    4af4:	20201080 	.word	0x20201080
    4af8:	402e0000 	.word	0x402e0000
    4afc:	200035da 	.word	0x200035da
    4b00:	200035e6 	.word	0x200035e6

00004b04 <usb_serial_reset>:
}
    4b04:	4770      	bx	lr
    4b06:	bf00      	nop

00004b08 <usb_serial_configure>:
	if (usb_high_speed) {
    4b08:	4b2a      	ldr	r3, [pc, #168]	; (4bb4 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4b0a:	2100      	movs	r1, #0
    4b0c:	2280      	movs	r2, #128	; 0x80
    4b0e:	482a      	ldr	r0, [pc, #168]	; (4bb8 <usb_serial_configure+0xb0>)
{
    4b10:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    4b12:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    4b14:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    4b16:	4d29      	ldr	r5, [pc, #164]	; (4bbc <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    4b18:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    4b1a:	4e29      	ldr	r6, [pc, #164]	; (4bc0 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    4b1c:	bf0c      	ite	eq
    4b1e:	2340      	moveq	r3, #64	; 0x40
    4b20:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    4b24:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4b26:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4b28:	f001 fa70 	bl	600c <memset>
	tx_head = 0;
    4b2c:	4a25      	ldr	r2, [pc, #148]	; (4bc4 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b2e:	4621      	mov	r1, r4
	tx_available = 0;
    4b30:	4b25      	ldr	r3, [pc, #148]	; (4bc8 <usb_serial_configure+0xc0>)
	tx_head = 0;
    4b32:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b34:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b38:	4824      	ldr	r0, [pc, #144]	; (4bcc <usb_serial_configure+0xc4>)
	tx_available = 0;
    4b3a:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4b3c:	f001 fa66 	bl	600c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4b40:	4a23      	ldr	r2, [pc, #140]	; (4bd0 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b42:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    4b44:	4b23      	ldr	r3, [pc, #140]	; (4bd4 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b46:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    4b48:	e9c2 4400 	strd	r4, r4, [r2]
    4b4c:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    4b50:	4a21      	ldr	r2, [pc, #132]	; (4bd8 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    4b52:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    4b56:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    4b58:	4a20      	ldr	r2, [pc, #128]	; (4bdc <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    4b5a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    4b5e:	4b20      	ldr	r3, [pc, #128]	; (4be0 <usb_serial_configure+0xd8>)
    4b60:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b62:	4623      	mov	r3, r4
	rx_available = 0;
    4b64:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4b66:	4622      	mov	r2, r4
    4b68:	f7ff fd7a 	bl	4660 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4b6c:	4622      	mov	r2, r4
    4b6e:	8831      	ldrh	r1, [r6, #0]
    4b70:	2003      	movs	r0, #3
    4b72:	4b1c      	ldr	r3, [pc, #112]	; (4be4 <usb_serial_configure+0xdc>)
    4b74:	f7ff fd42 	bl	45fc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4b78:	4623      	mov	r3, r4
    4b7a:	2201      	movs	r2, #1
    4b7c:	8829      	ldrh	r1, [r5, #0]
    4b7e:	2004      	movs	r0, #4
    4b80:	f7ff fd6e 	bl	4660 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4b84:	4620      	mov	r0, r4
    4b86:	3401      	adds	r4, #1
    4b88:	f7ff fe0e 	bl	47a8 <rx_queue_transfer>
    4b8c:	2c08      	cmp	r4, #8
    4b8e:	d1f9      	bne.n	4b84 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    4b90:	4b15      	ldr	r3, [pc, #84]	; (4be8 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    4b92:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    4b94:	4815      	ldr	r0, [pc, #84]	; (4bec <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    4b96:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    4b98:	4c15      	ldr	r4, [pc, #84]	; (4bf0 <usb_serial_configure+0xe8>)
    4b9a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    4b9c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4ba4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4ba8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4bac:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    4bb0:	bd70      	pop	{r4, r5, r6, pc}
    4bb2:	bf00      	nop
    4bb4:	200035eb 	.word	0x200035eb
    4bb8:	20001c00 	.word	0x20001c00
    4bbc:	200035dc 	.word	0x200035dc
    4bc0:	200035d8 	.word	0x200035d8
    4bc4:	200035e7 	.word	0x200035e7
    4bc8:	200035da 	.word	0x200035da
    4bcc:	20001b00 	.word	0x20001b00
    4bd0:	20003578 	.word	0x20003578
    4bd4:	20003588 	.word	0x20003588
    4bd8:	200035e3 	.word	0x200035e3
    4bdc:	20003574 	.word	0x20003574
    4be0:	200035e4 	.word	0x200035e4
    4be4:	00004809 	.word	0x00004809
    4be8:	402e0000 	.word	0x402e0000
    4bec:	200035d0 	.word	0x200035d0
    4bf0:	000048bd 	.word	0x000048bd

00004bf4 <usb_serial_read>:
{
    4bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4bf8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4bfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    4c00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4ccc <usb_serial_read+0xd8>
{
    4c04:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4c06:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    4c0a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    4c0c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    4c10:	2900      	cmp	r1, #0
    4c12:	d04f      	beq.n	4cb4 <usb_serial_read+0xc0>
    4c14:	4680      	mov	r8, r0
    4c16:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    4c18:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    4c1a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4cd0 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    4c1e:	4b26      	ldr	r3, [pc, #152]	; (4cb8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    4c20:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c24:	4925      	ldr	r1, [pc, #148]	; (4cbc <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    4c2a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    4c2e:	d03f      	beq.n	4cb0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    4c30:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    4c32:	4b23      	ldr	r3, [pc, #140]	; (4cc0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c34:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    4c36:	bf28      	it	cs
    4c38:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    4c3a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    4c3c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c40:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    4c44:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    4c46:	4b1f      	ldr	r3, [pc, #124]	; (4cc4 <usb_serial_read+0xd0>)
    4c48:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    4c4c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    4c50:	42aa      	cmp	r2, r5
    4c52:	d21c      	bcs.n	4c8e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4c54:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    4c58:	4918      	ldr	r1, [pc, #96]	; (4cbc <usb_serial_read+0xc8>)
			rx_available -= len;
    4c5a:	4c1b      	ldr	r4, [pc, #108]	; (4cc8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4c5c:	4461      	add	r1, ip
    4c5e:	9201      	str	r2, [sp, #4]
    4c60:	f7fe fc84 	bl	356c <memcpy>
			rx_available -= len;
    4c64:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    4c66:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    4c6a:	4658      	mov	r0, fp
			rx_index[i] += len;
    4c6c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    4c6e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    4c72:	442a      	add	r2, r5
			rx_available -= len;
    4c74:	4439      	add	r1, r7
			rx_index[i] += len;
    4c76:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    4c7a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4c7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4c80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4c84:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    4c88:	b003      	add	sp, #12
    4c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c8e:	462a      	mov	r2, r5
			count += avail;
    4c90:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4c92:	f7fe fc6b 	bl	356c <memcpy>
			rx_available -= avail;
    4c96:	490c      	ldr	r1, [pc, #48]	; (4cc8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    4c98:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    4c9a:	4630      	mov	r0, r6
			rx_available -= avail;
    4c9c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    4c9e:	44a8      	add	r8, r5
			rx_available -= avail;
    4ca0:	1b52      	subs	r2, r2, r5
    4ca2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    4ca4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    4ca8:	f7ff fd7e 	bl	47a8 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    4cac:	45bb      	cmp	fp, r7
    4cae:	d8b6      	bhi.n	4c1e <usb_serial_read+0x2a>
	return count;
    4cb0:	4638      	mov	r0, r7
    4cb2:	e7e3      	b.n	4c7c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    4cb4:	4608      	mov	r0, r1
    4cb6:	e7e1      	b.n	4c7c <usb_serial_read+0x88>
    4cb8:	200035e3 	.word	0x200035e3
    4cbc:	20200080 	.word	0x20200080
    4cc0:	20003598 	.word	0x20003598
    4cc4:	20003578 	.word	0x20003578
    4cc8:	20003574 	.word	0x20003574
    4ccc:	200035e4 	.word	0x200035e4
    4cd0:	20003588 	.word	0x20003588

00004cd4 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    4cd4:	4b0b      	ldr	r3, [pc, #44]	; (4d04 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    4cd6:	4a0c      	ldr	r2, [pc, #48]	; (4d08 <usb_serial_peekchar+0x34>)
    4cd8:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    4cda:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    4cdc:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    4cde:	428a      	cmp	r2, r1
    4ce0:	d00d      	beq.n	4cfe <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4ce2:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4ce4:	4809      	ldr	r0, [pc, #36]	; (4d0c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4ce6:	4a0a      	ldr	r2, [pc, #40]	; (4d10 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    4ce8:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4cea:	490a      	ldr	r1, [pc, #40]	; (4d14 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    4cec:	bf28      	it	cs
    4cee:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4cf0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4cf2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4cf6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    4cfa:	5c58      	ldrb	r0, [r3, r1]
    4cfc:	4770      	bx	lr
	if (tail == rx_head) return -1;
    4cfe:	f04f 30ff 	mov.w	r0, #4294967295
}
    4d02:	4770      	bx	lr
    4d04:	200035e3 	.word	0x200035e3
    4d08:	200035e4 	.word	0x200035e4
    4d0c:	20003598 	.word	0x20003598
    4d10:	20200080 	.word	0x20200080
    4d14:	20003588 	.word	0x20003588

00004d18 <usb_serial_available>:
	uint32_t n = rx_available;
    4d18:	4b04      	ldr	r3, [pc, #16]	; (4d2c <usb_serial_available+0x14>)
{
    4d1a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    4d1c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    4d1e:	b10c      	cbz	r4, 4d24 <usb_serial_available+0xc>
}
    4d20:	4620      	mov	r0, r4
    4d22:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    4d24:	f000 f8e0 	bl	4ee8 <yield>
}
    4d28:	4620      	mov	r0, r4
    4d2a:	bd10      	pop	{r4, pc}
    4d2c:	20003574 	.word	0x20003574

00004d30 <usb_serial_flush_input>:
{
    4d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4d34:	4e14      	ldr	r6, [pc, #80]	; (4d88 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    4d36:	4d15      	ldr	r5, [pc, #84]	; (4d8c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    4d38:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    4d3a:	782a      	ldrb	r2, [r5, #0]
    4d3c:	4293      	cmp	r3, r2
    4d3e:	d021      	beq.n	4d84 <usb_serial_flush_input+0x54>
    4d40:	b2dc      	uxtb	r4, r3
    4d42:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4d94 <usb_serial_flush_input+0x64>
    4d46:	f8df b050 	ldr.w	fp, [pc, #80]	; 4d98 <usb_serial_flush_input+0x68>
    4d4a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4d9c <usb_serial_flush_input+0x6c>
    4d4e:	4f10      	ldr	r7, [pc, #64]	; (4d90 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    4d50:	3401      	adds	r4, #1
    4d52:	2c08      	cmp	r4, #8
		rx_tail = tail;
    4d54:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    4d58:	d901      	bls.n	4d5e <usb_serial_flush_input+0x2e>
    4d5a:	2400      	movs	r4, #0
    4d5c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4d5e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4d62:	f8db 3000 	ldr.w	r3, [fp]
    4d66:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    4d6a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    4d6e:	1a52      	subs	r2, r2, r1
    4d70:	1a9b      	subs	r3, r3, r2
    4d72:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4d76:	f7ff fd17 	bl	47a8 <rx_queue_transfer>
		rx_tail = tail;
    4d7a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    4d7e:	782b      	ldrb	r3, [r5, #0]
    4d80:	42a3      	cmp	r3, r4
    4d82:	d1e5      	bne.n	4d50 <usb_serial_flush_input+0x20>
}
    4d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d88:	200035e4 	.word	0x200035e4
    4d8c:	200035e3 	.word	0x200035e3
    4d90:	20003588 	.word	0x20003588
    4d94:	20003598 	.word	0x20003598
    4d98:	20003574 	.word	0x20003574
    4d9c:	20003578 	.word	0x20003578

00004da0 <usb_serial_getchar>:
{
    4da0:	b500      	push	{lr}
    4da2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    4da4:	2101      	movs	r1, #1
    4da6:	f10d 0007 	add.w	r0, sp, #7
    4daa:	f7ff ff23 	bl	4bf4 <usb_serial_read>
    4dae:	b120      	cbz	r0, 4dba <usb_serial_getchar+0x1a>
    4db0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    4db4:	b003      	add	sp, #12
    4db6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    4dba:	f04f 30ff 	mov.w	r0, #4294967295
    4dbe:	e7f9      	b.n	4db4 <usb_serial_getchar+0x14>

00004dc0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    4dc0:	4b09      	ldr	r3, [pc, #36]	; (4de8 <usb_serial_putchar+0x28>)
{
    4dc2:	b500      	push	{lr}
    4dc4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    4dc6:	781b      	ldrb	r3, [r3, #0]
{
    4dc8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    4dcc:	b13b      	cbz	r3, 4dde <usb_serial_putchar+0x1e>
    4dce:	2101      	movs	r1, #1
    4dd0:	f10d 0007 	add.w	r0, sp, #7
    4dd4:	f7ff fdba 	bl	494c <usb_serial_write.part.0>
}
    4dd8:	b003      	add	sp, #12
    4dda:	f85d fb04 	ldr.w	pc, [sp], #4
    4dde:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4de2:	b003      	add	sp, #12
    4de4:	f85d fb04 	ldr.w	pc, [sp], #4
    4de8:	200035ea 	.word	0x200035ea

00004dec <usb_serial_write>:
	if (!usb_configuration) return 0;
    4dec:	4b04      	ldr	r3, [pc, #16]	; (4e00 <usb_serial_write+0x14>)
    4dee:	781b      	ldrb	r3, [r3, #0]
    4df0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4df4:	b10b      	cbz	r3, 4dfa <usb_serial_write+0xe>
    4df6:	f7ff bda9 	b.w	494c <usb_serial_write.part.0>
}
    4dfa:	4610      	mov	r0, r2
    4dfc:	4770      	bx	lr
    4dfe:	bf00      	nop
    4e00:	200035ea 	.word	0x200035ea

00004e04 <usb_serial_write_buffer_free>:
{
    4e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e08:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    4e0a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4e50 <usb_serial_write_buffer_free+0x4c>
    4e0e:	2301      	movs	r3, #1
    4e10:	4d0d      	ldr	r5, [pc, #52]	; (4e48 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    4e12:	4627      	mov	r7, r4
    4e14:	4e0d      	ldr	r6, [pc, #52]	; (4e4c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    4e16:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    4e1a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4e1c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e1e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    4e20:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e22:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    4e26:	d005      	beq.n	4e34 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    4e28:	f7ff fc86 	bl	4738 <usb_transfer_status>
    4e2c:	0603      	lsls	r3, r0, #24
    4e2e:	bf58      	it	pl
    4e30:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    4e34:	2c04      	cmp	r4, #4
    4e36:	d1f0      	bne.n	4e1a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    4e38:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4e3c:	2300      	movs	r3, #0
}
    4e3e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    4e40:	f888 3000 	strb.w	r3, [r8]
}
    4e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e48:	20001c00 	.word	0x20001c00
    4e4c:	200035e7 	.word	0x200035e7
    4e50:	200035e8 	.word	0x200035e8

00004e54 <usb_serial_flush_output>:
{
    4e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    4e58:	4b1d      	ldr	r3, [pc, #116]	; (4ed0 <usb_serial_flush_output+0x7c>)
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	b113      	cbz	r3, 4e64 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4e5e:	4d1d      	ldr	r5, [pc, #116]	; (4ed4 <usb_serial_flush_output+0x80>)
    4e60:	882a      	ldrh	r2, [r5, #0]
    4e62:	b90a      	cbnz	r2, 4e68 <usb_serial_flush_output+0x14>
}
    4e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    4e68:	4e1b      	ldr	r6, [pc, #108]	; (4ed8 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    4e6a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    4e6e:	491b      	ldr	r1, [pc, #108]	; (4edc <usb_serial_flush_output+0x88>)
    4e70:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e72:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e74:	4c1a      	ldr	r4, [pc, #104]	; (4ee0 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4e76:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    4e7a:	4f1a      	ldr	r7, [pc, #104]	; (4ee4 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e7c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    4e80:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e82:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    4e84:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e86:	4621      	mov	r1, r4
    4e88:	2300      	movs	r3, #0
    4e8a:	f7ff fc1b 	bl	46c4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    4e8e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    4e92:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4e96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e9a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4e9e:	3420      	adds	r4, #32
	} while (location < end_addr);
    4ea0:	42a2      	cmp	r2, r4
    4ea2:	d8fa      	bhi.n	4e9a <usb_serial_flush_output+0x46>
	asm("dsb");
    4ea4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4ea8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4eac:	2004      	movs	r0, #4
    4eae:	4641      	mov	r1, r8
    4eb0:	f7ff fc20 	bl	46f4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4eb4:	7833      	ldrb	r3, [r6, #0]
    4eb6:	3301      	adds	r3, #1
    4eb8:	b2db      	uxtb	r3, r3
    4eba:	2b03      	cmp	r3, #3
    4ebc:	bf88      	it	hi
    4ebe:	2300      	movhi	r3, #0
    4ec0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4ec2:	2300      	movs	r3, #0
    4ec4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    4ec6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4eca:	703b      	strb	r3, [r7, #0]
}
    4ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ed0:	200035ea 	.word	0x200035ea
    4ed4:	200035da 	.word	0x200035da
    4ed8:	200035e7 	.word	0x200035e7
    4edc:	20001c00 	.word	0x20001c00
    4ee0:	20201080 	.word	0x20201080
    4ee4:	200035e8 	.word	0x200035e8

00004ee8 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    4ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    4eec:	4e32      	ldr	r6, [pc, #200]	; (4fb8 <yield+0xd0>)
    4eee:	7833      	ldrb	r3, [r6, #0]
    4ef0:	b163      	cbz	r3, 4f0c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    4ef2:	4f32      	ldr	r7, [pc, #200]	; (4fbc <yield+0xd4>)
    4ef4:	783a      	ldrb	r2, [r7, #0]
    4ef6:	b94a      	cbnz	r2, 4f0c <yield+0x24>
	running = 1;
    4ef8:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4efa:	07d9      	lsls	r1, r3, #31
	running = 1;
    4efc:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    4efe:	d444      	bmi.n	4f8a <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    4f00:	079a      	lsls	r2, r3, #30
    4f02:	d426      	bmi.n	4f52 <yield+0x6a>

	running = 0;
    4f04:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f06:	075b      	lsls	r3, r3, #29
	running = 0;
    4f08:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f0a:	d401      	bmi.n	4f10 <yield+0x28>
	
};
    4f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    4f10:	4b2b      	ldr	r3, [pc, #172]	; (4fc0 <yield+0xd8>)
    4f12:	681a      	ldr	r2, [r3, #0]
    4f14:	2a00      	cmp	r2, #0
    4f16:	d0f9      	beq.n	4f0c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4f18:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4f1c:	2a00      	cmp	r2, #0
    4f1e:	d1f5      	bne.n	4f0c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4f20:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    4f24:	b672      	cpsid	i
		EventResponder *first = firstYield;
    4f26:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4f28:	2800      	cmp	r0, #0
    4f2a:	d03b      	beq.n	4fa4 <yield+0xbc>
		if (runningFromYield) {
    4f2c:	4c25      	ldr	r4, [pc, #148]	; (4fc4 <yield+0xdc>)
    4f2e:	7821      	ldrb	r1, [r4, #0]
    4f30:	2900      	cmp	r1, #0
    4f32:	d137      	bne.n	4fa4 <yield+0xbc>
		runningFromYield = true;
    4f34:	2201      	movs	r2, #1
    4f36:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    4f38:	6942      	ldr	r2, [r0, #20]
    4f3a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    4f3c:	2a00      	cmp	r2, #0
    4f3e:	d038      	beq.n	4fb2 <yield+0xca>
			firstYield->_prev = nullptr;
    4f40:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    4f42:	b905      	cbnz	r5, 4f46 <yield+0x5e>
    4f44:	b662      	cpsie	i
		first->_triggered = false;
    4f46:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4f48:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    4f4a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4f4c:	4798      	blx	r3
		runningFromYield = false;
    4f4e:	7025      	strb	r5, [r4, #0]
    4f50:	e7dc      	b.n	4f0c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f52:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4fd0 <yield+0xe8>
    4f56:	f898 2000 	ldrb.w	r2, [r8]
    4f5a:	2a00      	cmp	r2, #0
    4f5c:	d0d2      	beq.n	4f04 <yield+0x1c>
    4f5e:	2500      	movs	r5, #0
    4f60:	f8df 9070 	ldr.w	r9, [pc, #112]	; 4fd4 <yield+0xec>
    4f64:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    4f66:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f6a:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4f6c:	6823      	ldr	r3, [r4, #0]
    4f6e:	4620      	mov	r0, r4
    4f70:	691b      	ldr	r3, [r3, #16]
    4f72:	4798      	blx	r3
    4f74:	b110      	cbz	r0, 4f7c <yield+0x94>
    4f76:	6963      	ldr	r3, [r4, #20]
    4f78:	689b      	ldr	r3, [r3, #8]
    4f7a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f7c:	f898 2000 	ldrb.w	r2, [r8]
    4f80:	b2eb      	uxtb	r3, r5
    4f82:	429a      	cmp	r2, r3
    4f84:	d8ef      	bhi.n	4f66 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    4f86:	7833      	ldrb	r3, [r6, #0]
    4f88:	e7bc      	b.n	4f04 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    4f8a:	f7ff fec5 	bl	4d18 <usb_serial_available>
		if (Serial.available()) serialEvent();
    4f8e:	b968      	cbnz	r0, 4fac <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    4f90:	4b0d      	ldr	r3, [pc, #52]	; (4fc8 <yield+0xe0>)
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	b90b      	cbnz	r3, 4f9a <yield+0xb2>
    4f96:	7833      	ldrb	r3, [r6, #0]
    4f98:	e7b2      	b.n	4f00 <yield+0x18>
    4f9a:	7833      	ldrb	r3, [r6, #0]
    4f9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4fa0:	7033      	strb	r3, [r6, #0]
    4fa2:	e7ad      	b.n	4f00 <yield+0x18>
		if (doit) __enable_irq();
    4fa4:	2d00      	cmp	r5, #0
    4fa6:	d1b1      	bne.n	4f0c <yield+0x24>
    4fa8:	b662      	cpsie	i
    4faa:	e7af      	b.n	4f0c <yield+0x24>
		if (Serial.available()) serialEvent();
    4fac:	f000 f826 	bl	4ffc <serialEvent()>
    4fb0:	e7ee      	b.n	4f90 <yield+0xa8>
			lastYield = nullptr;
    4fb2:	4b06      	ldr	r3, [pc, #24]	; (4fcc <yield+0xe4>)
    4fb4:	601a      	str	r2, [r3, #0]
    4fb6:	e7c4      	b.n	4f42 <yield+0x5a>
    4fb8:	200017b8 	.word	0x200017b8
    4fbc:	200035e0 	.word	0x200035e0
    4fc0:	20002790 	.word	0x20002790
    4fc4:	200035de 	.word	0x200035de
    4fc8:	600020ea 	.word	0x600020ea
    4fcc:	2000279c 	.word	0x2000279c
    4fd0:	200035df 	.word	0x200035df
    4fd4:	200027a0 	.word	0x200027a0

00004fd8 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    4fd8:	4a07      	ldr	r2, [pc, #28]	; (4ff8 <rtc_get+0x20>)
    4fda:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    4fdc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    4fde:	4619      	mov	r1, r3
    4fe0:	4684      	mov	ip, r0
    4fe2:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    4fe4:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    4fe6:	4299      	cmp	r1, r3
    4fe8:	d1f9      	bne.n	4fde <rtc_get+0x6>
    4fea:	4584      	cmp	ip, r0
    4fec:	d1f7      	bne.n	4fde <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    4fee:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    4ff0:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    4ff4:	4770      	bx	lr
    4ff6:	bf00      	nop
    4ff8:	400d4000 	.word	0x400d4000

00004ffc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    4ffc:	4770      	bx	lr
    4ffe:	bf00      	nop

00005000 <sm_align_pool>:
{
    5000:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    5002:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    5006:	b15b      	cbz	r3, 5020 <sm_align_pool+0x20>
    5008:	b1ba      	cbz	r2, 503a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    500a:	4b0f      	ldr	r3, [pc, #60]	; (5048 <sm_align_pool+0x48>)
    500c:	fba3 1302 	umull	r1, r3, r3, r2
    5010:	08db      	lsrs	r3, r3, #3
    5012:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5016:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    501a:	d10a      	bne.n	5032 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    501c:	2001      	movs	r0, #1
}
    501e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    5020:	4b09      	ldr	r3, [pc, #36]	; (5048 <sm_align_pool+0x48>)
    5022:	fba3 1302 	umull	r1, r3, r3, r2
    5026:	08db      	lsrs	r3, r3, #3
    5028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    502c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5030:	d001      	beq.n	5036 <sm_align_pool+0x36>
    5032:	1ad2      	subs	r2, r2, r3
    5034:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    5036:	2af0      	cmp	r2, #240	; 0xf0
    5038:	d8f0      	bhi.n	501c <sm_align_pool+0x1c>
		errno = ENOSPC;
    503a:	f001 fb51 	bl	66e0 <__errno>
    503e:	221c      	movs	r2, #28
    5040:	4603      	mov	r3, r0
    5042:	2000      	movs	r0, #0
    5044:	601a      	str	r2, [r3, #0]
}
    5046:	bd08      	pop	{r3, pc}
    5048:	aaaaaaab 	.word	0xaaaaaaab

0000504c <sm_set_pool>:
{
    504c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    504e:	4604      	mov	r4, r0
    5050:	b338      	cbz	r0, 50a2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    5052:	b119      	cbz	r1, 505c <sm_set_pool+0x10>
    5054:	fab2 f682 	clz	r6, r2
    5058:	0976      	lsrs	r6, r6, #5
    505a:	b9a2      	cbnz	r2, 5086 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    505c:	6820      	ldr	r0, [r4, #0]
    505e:	b300      	cbz	r0, 50a2 <sm_set_pool+0x56>
    5060:	6862      	ldr	r2, [r4, #4]
    5062:	b1f2      	cbz	r2, 50a2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    5064:	4b18      	ldr	r3, [pc, #96]	; (50c8 <sm_set_pool+0x7c>)
    5066:	4919      	ldr	r1, [pc, #100]	; (50cc <sm_set_pool+0x80>)
    5068:	fb02 f303 	mul.w	r3, r2, r3
    506c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    5070:	d317      	bcc.n	50a2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5072:	68a3      	ldr	r3, [r4, #8]
    5074:	b9e3      	cbnz	r3, 50b0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    5076:	2200      	movs	r2, #0
			return 1;
    5078:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    507a:	6022      	str	r2, [r4, #0]
    507c:	6062      	str	r2, [r4, #4]
    507e:	60a2      	str	r2, [r4, #8]
    5080:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    5082:	4618      	mov	r0, r3
    5084:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    5086:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    5088:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    508a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    508e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    5090:	f7ff ffb6 	bl	5000 <sm_align_pool>
    5094:	4603      	mov	r3, r0
    5096:	2800      	cmp	r0, #0
    5098:	d0f3      	beq.n	5082 <sm_set_pool+0x36>
	if (do_zero) {
    509a:	b96d      	cbnz	r5, 50b8 <sm_set_pool+0x6c>
	return 1;
    509c:	2301      	movs	r3, #1
}
    509e:	4618      	mov	r0, r3
    50a0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    50a2:	f001 fb1d 	bl	66e0 <__errno>
    50a6:	2216      	movs	r2, #22
		return 0;
    50a8:	2300      	movs	r3, #0
		errno = EINVAL;
    50aa:	6002      	str	r2, [r0, #0]
}
    50ac:	4618      	mov	r0, r3
    50ae:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    50b0:	2100      	movs	r1, #0
    50b2:	f000 ffab 	bl	600c <memset>
    50b6:	e7de      	b.n	5076 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    50b8:	6862      	ldr	r2, [r4, #4]
    50ba:	4631      	mov	r1, r6
    50bc:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    50be:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    50c0:	f000 ffa4 	bl	600c <memset>
	return 1;
    50c4:	2301      	movs	r3, #1
    50c6:	e7dc      	b.n	5082 <sm_set_pool+0x36>
    50c8:	aaaaaaab 	.word	0xaaaaaaab
    50cc:	15555555 	.word	0x15555555

000050d0 <__aeabi_atexit>:
    50d0:	4603      	mov	r3, r0
    50d2:	4608      	mov	r0, r1
    50d4:	4619      	mov	r1, r3
    50d6:	f000 bddd 	b.w	5c94 <__cxa_atexit>
    50da:	bf00      	nop

000050dc <atol>:
    50dc:	220a      	movs	r2, #10
    50de:	2100      	movs	r1, #0
    50e0:	f000 bd7c 	b.w	5bdc <strtol>

000050e4 <itoa>:
    50e4:	1e93      	subs	r3, r2, #2
    50e6:	2b22      	cmp	r3, #34	; 0x22
    50e8:	b510      	push	{r4, lr}
    50ea:	460c      	mov	r4, r1
    50ec:	d80c      	bhi.n	5108 <itoa+0x24>
    50ee:	2a0a      	cmp	r2, #10
    50f0:	d003      	beq.n	50fa <itoa+0x16>
    50f2:	f000 fd81 	bl	5bf8 <__utoa>
    50f6:	4620      	mov	r0, r4
    50f8:	bd10      	pop	{r4, pc}
    50fa:	2800      	cmp	r0, #0
    50fc:	daf9      	bge.n	50f2 <itoa+0xe>
    50fe:	232d      	movs	r3, #45	; 0x2d
    5100:	f801 3b01 	strb.w	r3, [r1], #1
    5104:	4240      	negs	r0, r0
    5106:	e7f4      	b.n	50f2 <itoa+0xe>
    5108:	2300      	movs	r3, #0
    510a:	700b      	strb	r3, [r1, #0]
    510c:	4618      	mov	r0, r3
    510e:	bd10      	pop	{r4, pc}

00005110 <malloc>:
    5110:	4b02      	ldr	r3, [pc, #8]	; (511c <malloc+0xc>)
    5112:	4601      	mov	r1, r0
    5114:	6818      	ldr	r0, [r3, #0]
    5116:	f000 b80b 	b.w	5130 <_malloc_r>
    511a:	bf00      	nop
    511c:	20001748 	.word	0x20001748

00005120 <free>:
    5120:	4b02      	ldr	r3, [pc, #8]	; (512c <free+0xc>)
    5122:	4601      	mov	r1, r0
    5124:	6818      	ldr	r0, [r3, #0]
    5126:	f001 bded 	b.w	6d04 <_free_r>
    512a:	bf00      	nop
    512c:	20001748 	.word	0x20001748

00005130 <_malloc_r>:
    5130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5134:	f101 060b 	add.w	r6, r1, #11
    5138:	2e16      	cmp	r6, #22
    513a:	b083      	sub	sp, #12
    513c:	4604      	mov	r4, r0
    513e:	d824      	bhi.n	518a <_malloc_r+0x5a>
    5140:	2910      	cmp	r1, #16
    5142:	f200 80ba 	bhi.w	52ba <_malloc_r+0x18a>
    5146:	f000 faa3 	bl	5690 <__malloc_lock>
    514a:	2610      	movs	r6, #16
    514c:	2218      	movs	r2, #24
    514e:	2002      	movs	r0, #2
    5150:	4fb5      	ldr	r7, [pc, #724]	; (5428 <_malloc_r+0x2f8>)
    5152:	443a      	add	r2, r7
    5154:	f1a2 0108 	sub.w	r1, r2, #8
    5158:	6853      	ldr	r3, [r2, #4]
    515a:	428b      	cmp	r3, r1
    515c:	f000 80ba 	beq.w	52d4 <_malloc_r+0x1a4>
    5160:	685a      	ldr	r2, [r3, #4]
    5162:	68d9      	ldr	r1, [r3, #12]
    5164:	f022 0203 	bic.w	r2, r2, #3
    5168:	441a      	add	r2, r3
    516a:	689d      	ldr	r5, [r3, #8]
    516c:	60e9      	str	r1, [r5, #12]
    516e:	608d      	str	r5, [r1, #8]
    5170:	6851      	ldr	r1, [r2, #4]
    5172:	f041 0101 	orr.w	r1, r1, #1
    5176:	4620      	mov	r0, r4
    5178:	6051      	str	r1, [r2, #4]
    517a:	f103 0508 	add.w	r5, r3, #8
    517e:	f000 fa8d 	bl	569c <__malloc_unlock>
    5182:	4628      	mov	r0, r5
    5184:	b003      	add	sp, #12
    5186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    518a:	f036 0607 	bics.w	r6, r6, #7
    518e:	f100 8094 	bmi.w	52ba <_malloc_r+0x18a>
    5192:	42b1      	cmp	r1, r6
    5194:	f200 8091 	bhi.w	52ba <_malloc_r+0x18a>
    5198:	f000 fa7a 	bl	5690 <__malloc_lock>
    519c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    51a0:	f0c0 819a 	bcc.w	54d8 <_malloc_r+0x3a8>
    51a4:	0a73      	lsrs	r3, r6, #9
    51a6:	f000 808f 	beq.w	52c8 <_malloc_r+0x198>
    51aa:	2b04      	cmp	r3, #4
    51ac:	f200 816f 	bhi.w	548e <_malloc_r+0x35e>
    51b0:	09b3      	lsrs	r3, r6, #6
    51b2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    51b6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    51ba:	00c3      	lsls	r3, r0, #3
    51bc:	4f9a      	ldr	r7, [pc, #616]	; (5428 <_malloc_r+0x2f8>)
    51be:	443b      	add	r3, r7
    51c0:	f1a3 0508 	sub.w	r5, r3, #8
    51c4:	685b      	ldr	r3, [r3, #4]
    51c6:	429d      	cmp	r5, r3
    51c8:	d106      	bne.n	51d8 <_malloc_r+0xa8>
    51ca:	e00c      	b.n	51e6 <_malloc_r+0xb6>
    51cc:	2900      	cmp	r1, #0
    51ce:	f280 8127 	bge.w	5420 <_malloc_r+0x2f0>
    51d2:	68db      	ldr	r3, [r3, #12]
    51d4:	429d      	cmp	r5, r3
    51d6:	d006      	beq.n	51e6 <_malloc_r+0xb6>
    51d8:	685a      	ldr	r2, [r3, #4]
    51da:	f022 0203 	bic.w	r2, r2, #3
    51de:	1b91      	subs	r1, r2, r6
    51e0:	290f      	cmp	r1, #15
    51e2:	ddf3      	ble.n	51cc <_malloc_r+0x9c>
    51e4:	4660      	mov	r0, ip
    51e6:	693d      	ldr	r5, [r7, #16]
    51e8:	f8df c250 	ldr.w	ip, [pc, #592]	; 543c <_malloc_r+0x30c>
    51ec:	4565      	cmp	r5, ip
    51ee:	d07c      	beq.n	52ea <_malloc_r+0x1ba>
    51f0:	686a      	ldr	r2, [r5, #4]
    51f2:	f022 0203 	bic.w	r2, r2, #3
    51f6:	1b93      	subs	r3, r2, r6
    51f8:	2b0f      	cmp	r3, #15
    51fa:	f300 817b 	bgt.w	54f4 <_malloc_r+0x3c4>
    51fe:	2b00      	cmp	r3, #0
    5200:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    5204:	f280 816c 	bge.w	54e0 <_malloc_r+0x3b0>
    5208:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    520c:	f080 811a 	bcs.w	5444 <_malloc_r+0x314>
    5210:	08d3      	lsrs	r3, r2, #3
    5212:	6879      	ldr	r1, [r7, #4]
    5214:	3301      	adds	r3, #1
    5216:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    521a:	2201      	movs	r2, #1
    521c:	fa02 f20e 	lsl.w	r2, r2, lr
    5220:	430a      	orrs	r2, r1
    5222:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    5226:	f8c5 e008 	str.w	lr, [r5, #8]
    522a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    522e:	3908      	subs	r1, #8
    5230:	60e9      	str	r1, [r5, #12]
    5232:	607a      	str	r2, [r7, #4]
    5234:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5238:	f8ce 500c 	str.w	r5, [lr, #12]
    523c:	1083      	asrs	r3, r0, #2
    523e:	2101      	movs	r1, #1
    5240:	4099      	lsls	r1, r3
    5242:	4291      	cmp	r1, r2
    5244:	d857      	bhi.n	52f6 <_malloc_r+0x1c6>
    5246:	4211      	tst	r1, r2
    5248:	d106      	bne.n	5258 <_malloc_r+0x128>
    524a:	f020 0003 	bic.w	r0, r0, #3
    524e:	0049      	lsls	r1, r1, #1
    5250:	4211      	tst	r1, r2
    5252:	f100 0004 	add.w	r0, r0, #4
    5256:	d0fa      	beq.n	524e <_malloc_r+0x11e>
    5258:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    525c:	464d      	mov	r5, r9
    525e:	4686      	mov	lr, r0
    5260:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5264:	4545      	cmp	r5, r8
    5266:	d108      	bne.n	527a <_malloc_r+0x14a>
    5268:	e11d      	b.n	54a6 <_malloc_r+0x376>
    526a:	2b00      	cmp	r3, #0
    526c:	f280 8124 	bge.w	54b8 <_malloc_r+0x388>
    5270:	f8d8 800c 	ldr.w	r8, [r8, #12]
    5274:	4545      	cmp	r5, r8
    5276:	f000 8116 	beq.w	54a6 <_malloc_r+0x376>
    527a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    527e:	f022 0203 	bic.w	r2, r2, #3
    5282:	1b93      	subs	r3, r2, r6
    5284:	2b0f      	cmp	r3, #15
    5286:	ddf0      	ble.n	526a <_malloc_r+0x13a>
    5288:	4620      	mov	r0, r4
    528a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    528e:	eb08 0106 	add.w	r1, r8, r6
    5292:	f046 0601 	orr.w	r6, r6, #1
    5296:	f8c8 6004 	str.w	r6, [r8, #4]
    529a:	60ec      	str	r4, [r5, #12]
    529c:	60a5      	str	r5, [r4, #8]
    529e:	f043 0401 	orr.w	r4, r3, #1
    52a2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    52a6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    52aa:	604c      	str	r4, [r1, #4]
    52ac:	f848 3002 	str.w	r3, [r8, r2]
    52b0:	f000 f9f4 	bl	569c <__malloc_unlock>
    52b4:	f108 0508 	add.w	r5, r8, #8
    52b8:	e002      	b.n	52c0 <_malloc_r+0x190>
    52ba:	230c      	movs	r3, #12
    52bc:	6023      	str	r3, [r4, #0]
    52be:	2500      	movs	r5, #0
    52c0:	4628      	mov	r0, r5
    52c2:	b003      	add	sp, #12
    52c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52c8:	f44f 7300 	mov.w	r3, #512	; 0x200
    52cc:	2040      	movs	r0, #64	; 0x40
    52ce:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    52d2:	e773      	b.n	51bc <_malloc_r+0x8c>
    52d4:	68d3      	ldr	r3, [r2, #12]
    52d6:	429a      	cmp	r2, r3
    52d8:	bf08      	it	eq
    52da:	3002      	addeq	r0, #2
    52dc:	f47f af40 	bne.w	5160 <_malloc_r+0x30>
    52e0:	693d      	ldr	r5, [r7, #16]
    52e2:	f8df c158 	ldr.w	ip, [pc, #344]	; 543c <_malloc_r+0x30c>
    52e6:	4565      	cmp	r5, ip
    52e8:	d182      	bne.n	51f0 <_malloc_r+0xc0>
    52ea:	687a      	ldr	r2, [r7, #4]
    52ec:	1083      	asrs	r3, r0, #2
    52ee:	2101      	movs	r1, #1
    52f0:	4099      	lsls	r1, r3
    52f2:	4291      	cmp	r1, r2
    52f4:	d9a7      	bls.n	5246 <_malloc_r+0x116>
    52f6:	68bd      	ldr	r5, [r7, #8]
    52f8:	686b      	ldr	r3, [r5, #4]
    52fa:	f023 0903 	bic.w	r9, r3, #3
    52fe:	454e      	cmp	r6, r9
    5300:	d803      	bhi.n	530a <_malloc_r+0x1da>
    5302:	eba9 0306 	sub.w	r3, r9, r6
    5306:	2b0f      	cmp	r3, #15
    5308:	dc7a      	bgt.n	5400 <_malloc_r+0x2d0>
    530a:	f8df b134 	ldr.w	fp, [pc, #308]	; 5440 <_malloc_r+0x310>
    530e:	4b47      	ldr	r3, [pc, #284]	; (542c <_malloc_r+0x2fc>)
    5310:	f8db 2000 	ldr.w	r2, [fp]
    5314:	681b      	ldr	r3, [r3, #0]
    5316:	3201      	adds	r2, #1
    5318:	4433      	add	r3, r6
    531a:	eb05 0a09 	add.w	sl, r5, r9
    531e:	f000 8133 	beq.w	5588 <_malloc_r+0x458>
    5322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5326:	330f      	adds	r3, #15
    5328:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    532c:	f028 080f 	bic.w	r8, r8, #15
    5330:	4641      	mov	r1, r8
    5332:	4620      	mov	r0, r4
    5334:	f001 f9ac 	bl	6690 <_sbrk_r>
    5338:	1c41      	adds	r1, r0, #1
    533a:	4602      	mov	r2, r0
    533c:	f000 80f3 	beq.w	5526 <_malloc_r+0x3f6>
    5340:	4582      	cmp	sl, r0
    5342:	f200 80ee 	bhi.w	5522 <_malloc_r+0x3f2>
    5346:	4b3a      	ldr	r3, [pc, #232]	; (5430 <_malloc_r+0x300>)
    5348:	6819      	ldr	r1, [r3, #0]
    534a:	4441      	add	r1, r8
    534c:	6019      	str	r1, [r3, #0]
    534e:	4608      	mov	r0, r1
    5350:	f000 814e 	beq.w	55f0 <_malloc_r+0x4c0>
    5354:	f8db 1000 	ldr.w	r1, [fp]
    5358:	9301      	str	r3, [sp, #4]
    535a:	3101      	adds	r1, #1
    535c:	bf1b      	ittet	ne
    535e:	eba2 010a 	subne.w	r1, r2, sl
    5362:	1809      	addne	r1, r1, r0
    5364:	f8cb 2000 	streq.w	r2, [fp]
    5368:	6019      	strne	r1, [r3, #0]
    536a:	f012 0b07 	ands.w	fp, r2, #7
    536e:	f000 8117 	beq.w	55a0 <_malloc_r+0x470>
    5372:	f1cb 0108 	rsb	r1, fp, #8
    5376:	440a      	add	r2, r1
    5378:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    537c:	4490      	add	r8, r2
    537e:	3108      	adds	r1, #8
    5380:	eba1 0108 	sub.w	r1, r1, r8
    5384:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5388:	4651      	mov	r1, sl
    538a:	4620      	mov	r0, r4
    538c:	9200      	str	r2, [sp, #0]
    538e:	f001 f97f 	bl	6690 <_sbrk_r>
    5392:	1c42      	adds	r2, r0, #1
    5394:	e9dd 2300 	ldrd	r2, r3, [sp]
    5398:	f000 814f 	beq.w	563a <_malloc_r+0x50a>
    539c:	1a80      	subs	r0, r0, r2
    539e:	eb00 080a 	add.w	r8, r0, sl
    53a2:	6819      	ldr	r1, [r3, #0]
    53a4:	60ba      	str	r2, [r7, #8]
    53a6:	f048 0001 	orr.w	r0, r8, #1
    53aa:	4451      	add	r1, sl
    53ac:	42bd      	cmp	r5, r7
    53ae:	6050      	str	r0, [r2, #4]
    53b0:	6019      	str	r1, [r3, #0]
    53b2:	f000 8129 	beq.w	5608 <_malloc_r+0x4d8>
    53b6:	f1b9 0f0f 	cmp.w	r9, #15
    53ba:	f240 8127 	bls.w	560c <_malloc_r+0x4dc>
    53be:	6868      	ldr	r0, [r5, #4]
    53c0:	f1a9 0c0c 	sub.w	ip, r9, #12
    53c4:	f02c 0c07 	bic.w	ip, ip, #7
    53c8:	f000 0001 	and.w	r0, r0, #1
    53cc:	ea40 000c 	orr.w	r0, r0, ip
    53d0:	6068      	str	r0, [r5, #4]
    53d2:	f04f 0e05 	mov.w	lr, #5
    53d6:	eb05 000c 	add.w	r0, r5, ip
    53da:	f1bc 0f0f 	cmp.w	ip, #15
    53de:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    53e2:	f200 8132 	bhi.w	564a <_malloc_r+0x51a>
    53e6:	6850      	ldr	r0, [r2, #4]
    53e8:	4615      	mov	r5, r2
    53ea:	4b12      	ldr	r3, [pc, #72]	; (5434 <_malloc_r+0x304>)
    53ec:	681a      	ldr	r2, [r3, #0]
    53ee:	428a      	cmp	r2, r1
    53f0:	bf38      	it	cc
    53f2:	6019      	strcc	r1, [r3, #0]
    53f4:	4b10      	ldr	r3, [pc, #64]	; (5438 <_malloc_r+0x308>)
    53f6:	681a      	ldr	r2, [r3, #0]
    53f8:	428a      	cmp	r2, r1
    53fa:	bf38      	it	cc
    53fc:	6019      	strcc	r1, [r3, #0]
    53fe:	e094      	b.n	552a <_malloc_r+0x3fa>
    5400:	19aa      	adds	r2, r5, r6
    5402:	f043 0301 	orr.w	r3, r3, #1
    5406:	f046 0601 	orr.w	r6, r6, #1
    540a:	606e      	str	r6, [r5, #4]
    540c:	4620      	mov	r0, r4
    540e:	60ba      	str	r2, [r7, #8]
    5410:	6053      	str	r3, [r2, #4]
    5412:	f000 f943 	bl	569c <__malloc_unlock>
    5416:	3508      	adds	r5, #8
    5418:	4628      	mov	r0, r5
    541a:	b003      	add	sp, #12
    541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5420:	68d9      	ldr	r1, [r3, #12]
    5422:	441a      	add	r2, r3
    5424:	e6a1      	b.n	516a <_malloc_r+0x3a>
    5426:	bf00      	nop
    5428:	2000132c 	.word	0x2000132c
    542c:	20002990 	.word	0x20002990
    5430:	20002960 	.word	0x20002960
    5434:	20002988 	.word	0x20002988
    5438:	2000298c 	.word	0x2000298c
    543c:	20001334 	.word	0x20001334
    5440:	20001734 	.word	0x20001734
    5444:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5448:	ea4f 2352 	mov.w	r3, r2, lsr #9
    544c:	d363      	bcc.n	5516 <_malloc_r+0x3e6>
    544e:	2b14      	cmp	r3, #20
    5450:	f200 80b7 	bhi.w	55c2 <_malloc_r+0x492>
    5454:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5458:	00c9      	lsls	r1, r1, #3
    545a:	335b      	adds	r3, #91	; 0x5b
    545c:	eb07 0e01 	add.w	lr, r7, r1
    5460:	5879      	ldr	r1, [r7, r1]
    5462:	f1ae 0e08 	sub.w	lr, lr, #8
    5466:	458e      	cmp	lr, r1
    5468:	f000 8091 	beq.w	558e <_malloc_r+0x45e>
    546c:	684b      	ldr	r3, [r1, #4]
    546e:	f023 0303 	bic.w	r3, r3, #3
    5472:	4293      	cmp	r3, r2
    5474:	d902      	bls.n	547c <_malloc_r+0x34c>
    5476:	6889      	ldr	r1, [r1, #8]
    5478:	458e      	cmp	lr, r1
    547a:	d1f7      	bne.n	546c <_malloc_r+0x33c>
    547c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5480:	687a      	ldr	r2, [r7, #4]
    5482:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    5486:	f8ce 5008 	str.w	r5, [lr, #8]
    548a:	60cd      	str	r5, [r1, #12]
    548c:	e6d6      	b.n	523c <_malloc_r+0x10c>
    548e:	2b14      	cmp	r3, #20
    5490:	d959      	bls.n	5546 <_malloc_r+0x416>
    5492:	2b54      	cmp	r3, #84	; 0x54
    5494:	f200 809d 	bhi.w	55d2 <_malloc_r+0x4a2>
    5498:	0b33      	lsrs	r3, r6, #12
    549a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    549e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    54a2:	00c3      	lsls	r3, r0, #3
    54a4:	e68a      	b.n	51bc <_malloc_r+0x8c>
    54a6:	f10e 0e01 	add.w	lr, lr, #1
    54aa:	f01e 0f03 	tst.w	lr, #3
    54ae:	f105 0508 	add.w	r5, r5, #8
    54b2:	f47f aed5 	bne.w	5260 <_malloc_r+0x130>
    54b6:	e051      	b.n	555c <_malloc_r+0x42c>
    54b8:	4442      	add	r2, r8
    54ba:	4645      	mov	r5, r8
    54bc:	6853      	ldr	r3, [r2, #4]
    54be:	f8d8 100c 	ldr.w	r1, [r8, #12]
    54c2:	f043 0301 	orr.w	r3, r3, #1
    54c6:	6053      	str	r3, [r2, #4]
    54c8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    54cc:	4620      	mov	r0, r4
    54ce:	60d9      	str	r1, [r3, #12]
    54d0:	608b      	str	r3, [r1, #8]
    54d2:	f000 f8e3 	bl	569c <__malloc_unlock>
    54d6:	e6f3      	b.n	52c0 <_malloc_r+0x190>
    54d8:	08f0      	lsrs	r0, r6, #3
    54da:	f106 0208 	add.w	r2, r6, #8
    54de:	e637      	b.n	5150 <_malloc_r+0x20>
    54e0:	442a      	add	r2, r5
    54e2:	4620      	mov	r0, r4
    54e4:	6853      	ldr	r3, [r2, #4]
    54e6:	f043 0301 	orr.w	r3, r3, #1
    54ea:	6053      	str	r3, [r2, #4]
    54ec:	3508      	adds	r5, #8
    54ee:	f000 f8d5 	bl	569c <__malloc_unlock>
    54f2:	e6e5      	b.n	52c0 <_malloc_r+0x190>
    54f4:	19a9      	adds	r1, r5, r6
    54f6:	4620      	mov	r0, r4
    54f8:	f046 0601 	orr.w	r6, r6, #1
    54fc:	f043 0401 	orr.w	r4, r3, #1
    5500:	606e      	str	r6, [r5, #4]
    5502:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5506:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    550a:	604c      	str	r4, [r1, #4]
    550c:	50ab      	str	r3, [r5, r2]
    550e:	f000 f8c5 	bl	569c <__malloc_unlock>
    5512:	3508      	adds	r5, #8
    5514:	e6d4      	b.n	52c0 <_malloc_r+0x190>
    5516:	0993      	lsrs	r3, r2, #6
    5518:	f103 0139 	add.w	r1, r3, #57	; 0x39
    551c:	00c9      	lsls	r1, r1, #3
    551e:	3338      	adds	r3, #56	; 0x38
    5520:	e79c      	b.n	545c <_malloc_r+0x32c>
    5522:	42bd      	cmp	r5, r7
    5524:	d05f      	beq.n	55e6 <_malloc_r+0x4b6>
    5526:	68bd      	ldr	r5, [r7, #8]
    5528:	6868      	ldr	r0, [r5, #4]
    552a:	f020 0803 	bic.w	r8, r0, #3
    552e:	4546      	cmp	r6, r8
    5530:	eba8 0306 	sub.w	r3, r8, r6
    5534:	d802      	bhi.n	553c <_malloc_r+0x40c>
    5536:	2b0f      	cmp	r3, #15
    5538:	f73f af62 	bgt.w	5400 <_malloc_r+0x2d0>
    553c:	4620      	mov	r0, r4
    553e:	f000 f8ad 	bl	569c <__malloc_unlock>
    5542:	2500      	movs	r5, #0
    5544:	e6bc      	b.n	52c0 <_malloc_r+0x190>
    5546:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    554a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    554e:	00c3      	lsls	r3, r0, #3
    5550:	e634      	b.n	51bc <_malloc_r+0x8c>
    5552:	f859 3908 	ldr.w	r3, [r9], #-8
    5556:	454b      	cmp	r3, r9
    5558:	f040 8096 	bne.w	5688 <_malloc_r+0x558>
    555c:	f010 0f03 	tst.w	r0, #3
    5560:	f100 30ff 	add.w	r0, r0, #4294967295
    5564:	d1f5      	bne.n	5552 <_malloc_r+0x422>
    5566:	687b      	ldr	r3, [r7, #4]
    5568:	ea23 0301 	bic.w	r3, r3, r1
    556c:	607b      	str	r3, [r7, #4]
    556e:	0049      	lsls	r1, r1, #1
    5570:	4299      	cmp	r1, r3
    5572:	f63f aec0 	bhi.w	52f6 <_malloc_r+0x1c6>
    5576:	b919      	cbnz	r1, 5580 <_malloc_r+0x450>
    5578:	e6bd      	b.n	52f6 <_malloc_r+0x1c6>
    557a:	0049      	lsls	r1, r1, #1
    557c:	f10e 0e04 	add.w	lr, lr, #4
    5580:	4219      	tst	r1, r3
    5582:	d0fa      	beq.n	557a <_malloc_r+0x44a>
    5584:	4670      	mov	r0, lr
    5586:	e667      	b.n	5258 <_malloc_r+0x128>
    5588:	f103 0810 	add.w	r8, r3, #16
    558c:	e6d0      	b.n	5330 <_malloc_r+0x200>
    558e:	109a      	asrs	r2, r3, #2
    5590:	f04f 0801 	mov.w	r8, #1
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	fa08 f202 	lsl.w	r2, r8, r2
    559a:	431a      	orrs	r2, r3
    559c:	607a      	str	r2, [r7, #4]
    559e:	e770      	b.n	5482 <_malloc_r+0x352>
    55a0:	eb02 0108 	add.w	r1, r2, r8
    55a4:	4249      	negs	r1, r1
    55a6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    55aa:	4651      	mov	r1, sl
    55ac:	4620      	mov	r0, r4
    55ae:	9200      	str	r2, [sp, #0]
    55b0:	f001 f86e 	bl	6690 <_sbrk_r>
    55b4:	1c43      	adds	r3, r0, #1
    55b6:	e9dd 2300 	ldrd	r2, r3, [sp]
    55ba:	f47f aeef 	bne.w	539c <_malloc_r+0x26c>
    55be:	46da      	mov	sl, fp
    55c0:	e6ef      	b.n	53a2 <_malloc_r+0x272>
    55c2:	2b54      	cmp	r3, #84	; 0x54
    55c4:	d825      	bhi.n	5612 <_malloc_r+0x4e2>
    55c6:	0b13      	lsrs	r3, r2, #12
    55c8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    55cc:	00c9      	lsls	r1, r1, #3
    55ce:	336e      	adds	r3, #110	; 0x6e
    55d0:	e744      	b.n	545c <_malloc_r+0x32c>
    55d2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    55d6:	d825      	bhi.n	5624 <_malloc_r+0x4f4>
    55d8:	0bf3      	lsrs	r3, r6, #15
    55da:	f103 0078 	add.w	r0, r3, #120	; 0x78
    55de:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    55e2:	00c3      	lsls	r3, r0, #3
    55e4:	e5ea      	b.n	51bc <_malloc_r+0x8c>
    55e6:	4b29      	ldr	r3, [pc, #164]	; (568c <_malloc_r+0x55c>)
    55e8:	6818      	ldr	r0, [r3, #0]
    55ea:	4440      	add	r0, r8
    55ec:	6018      	str	r0, [r3, #0]
    55ee:	e6b1      	b.n	5354 <_malloc_r+0x224>
    55f0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    55f4:	f1bc 0f00 	cmp.w	ip, #0
    55f8:	f47f aeac 	bne.w	5354 <_malloc_r+0x224>
    55fc:	68bd      	ldr	r5, [r7, #8]
    55fe:	44c8      	add	r8, r9
    5600:	f048 0001 	orr.w	r0, r8, #1
    5604:	6068      	str	r0, [r5, #4]
    5606:	e6f0      	b.n	53ea <_malloc_r+0x2ba>
    5608:	4615      	mov	r5, r2
    560a:	e6ee      	b.n	53ea <_malloc_r+0x2ba>
    560c:	2301      	movs	r3, #1
    560e:	6053      	str	r3, [r2, #4]
    5610:	e794      	b.n	553c <_malloc_r+0x40c>
    5612:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5616:	d823      	bhi.n	5660 <_malloc_r+0x530>
    5618:	0bd3      	lsrs	r3, r2, #15
    561a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    561e:	00c9      	lsls	r1, r1, #3
    5620:	3377      	adds	r3, #119	; 0x77
    5622:	e71b      	b.n	545c <_malloc_r+0x32c>
    5624:	f240 5254 	movw	r2, #1364	; 0x554
    5628:	4293      	cmp	r3, r2
    562a:	d823      	bhi.n	5674 <_malloc_r+0x544>
    562c:	0cb3      	lsrs	r3, r6, #18
    562e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5632:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    5636:	00c3      	lsls	r3, r0, #3
    5638:	e5c0      	b.n	51bc <_malloc_r+0x8c>
    563a:	f1ab 0b08 	sub.w	fp, fp, #8
    563e:	44d8      	add	r8, fp
    5640:	eba8 0802 	sub.w	r8, r8, r2
    5644:	f04f 0a00 	mov.w	sl, #0
    5648:	e6ab      	b.n	53a2 <_malloc_r+0x272>
    564a:	f105 0108 	add.w	r1, r5, #8
    564e:	4620      	mov	r0, r4
    5650:	9300      	str	r3, [sp, #0]
    5652:	f001 fb57 	bl	6d04 <_free_r>
    5656:	68bd      	ldr	r5, [r7, #8]
    5658:	9b00      	ldr	r3, [sp, #0]
    565a:	6868      	ldr	r0, [r5, #4]
    565c:	6819      	ldr	r1, [r3, #0]
    565e:	e6c4      	b.n	53ea <_malloc_r+0x2ba>
    5660:	f240 5154 	movw	r1, #1364	; 0x554
    5664:	428b      	cmp	r3, r1
    5666:	d80b      	bhi.n	5680 <_malloc_r+0x550>
    5668:	0c93      	lsrs	r3, r2, #18
    566a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    566e:	00c9      	lsls	r1, r1, #3
    5670:	337c      	adds	r3, #124	; 0x7c
    5672:	e6f3      	b.n	545c <_malloc_r+0x32c>
    5674:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5678:	207f      	movs	r0, #127	; 0x7f
    567a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    567e:	e59d      	b.n	51bc <_malloc_r+0x8c>
    5680:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    5684:	237e      	movs	r3, #126	; 0x7e
    5686:	e6e9      	b.n	545c <_malloc_r+0x32c>
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	e770      	b.n	556e <_malloc_r+0x43e>
    568c:	20002960 	.word	0x20002960

00005690 <__malloc_lock>:
    5690:	4801      	ldr	r0, [pc, #4]	; (5698 <__malloc_lock+0x8>)
    5692:	f001 b853 	b.w	673c <__retarget_lock_acquire_recursive>
    5696:	bf00      	nop
    5698:	20002958 	.word	0x20002958

0000569c <__malloc_unlock>:
    569c:	4801      	ldr	r0, [pc, #4]	; (56a4 <__malloc_unlock+0x8>)
    569e:	f001 b84f 	b.w	6740 <__retarget_lock_release_recursive>
    56a2:	bf00      	nop
    56a4:	20002958 	.word	0x20002958

000056a8 <realloc>:
    56a8:	b410      	push	{r4}
    56aa:	4c04      	ldr	r4, [pc, #16]	; (56bc <realloc+0x14>)
    56ac:	4603      	mov	r3, r0
    56ae:	460a      	mov	r2, r1
    56b0:	6820      	ldr	r0, [r4, #0]
    56b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    56b6:	4619      	mov	r1, r3
    56b8:	f000 b802 	b.w	56c0 <_realloc_r>
    56bc:	20001748 	.word	0x20001748

000056c0 <_realloc_r>:
    56c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56c4:	4617      	mov	r7, r2
    56c6:	2900      	cmp	r1, #0
    56c8:	f000 8098 	beq.w	57fc <_realloc_r+0x13c>
    56cc:	460c      	mov	r4, r1
    56ce:	f107 050b 	add.w	r5, r7, #11
    56d2:	4680      	mov	r8, r0
    56d4:	f7ff ffdc 	bl	5690 <__malloc_lock>
    56d8:	2d16      	cmp	r5, #22
    56da:	f854 1c04 	ldr.w	r1, [r4, #-4]
    56de:	d85b      	bhi.n	5798 <_realloc_r+0xd8>
    56e0:	2510      	movs	r5, #16
    56e2:	462a      	mov	r2, r5
    56e4:	42af      	cmp	r7, r5
    56e6:	d85c      	bhi.n	57a2 <_realloc_r+0xe2>
    56e8:	f021 0603 	bic.w	r6, r1, #3
    56ec:	4296      	cmp	r6, r2
    56ee:	f1a4 0908 	sub.w	r9, r4, #8
    56f2:	da62      	bge.n	57ba <_realloc_r+0xfa>
    56f4:	4bbc      	ldr	r3, [pc, #752]	; (59e8 <_realloc_r+0x328>)
    56f6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    56fa:	eb09 0006 	add.w	r0, r9, r6
    56fe:	4584      	cmp	ip, r0
    5700:	f000 8097 	beq.w	5832 <_realloc_r+0x172>
    5704:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5708:	f02c 0301 	bic.w	r3, ip, #1
    570c:	4403      	add	r3, r0
    570e:	685b      	ldr	r3, [r3, #4]
    5710:	07db      	lsls	r3, r3, #31
    5712:	d468      	bmi.n	57e6 <_realloc_r+0x126>
    5714:	f02c 0c03 	bic.w	ip, ip, #3
    5718:	eb06 030c 	add.w	r3, r6, ip
    571c:	4293      	cmp	r3, r2
    571e:	da47      	bge.n	57b0 <_realloc_r+0xf0>
    5720:	07cb      	lsls	r3, r1, #31
    5722:	d410      	bmi.n	5746 <_realloc_r+0x86>
    5724:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5728:	eba9 0a03 	sub.w	sl, r9, r3
    572c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5730:	f023 0103 	bic.w	r1, r3, #3
    5734:	448c      	add	ip, r1
    5736:	44b4      	add	ip, r6
    5738:	4594      	cmp	ip, r2
    573a:	f280 8111 	bge.w	5960 <_realloc_r+0x2a0>
    573e:	1873      	adds	r3, r6, r1
    5740:	4293      	cmp	r3, r2
    5742:	f280 80e8 	bge.w	5916 <_realloc_r+0x256>
    5746:	4639      	mov	r1, r7
    5748:	4640      	mov	r0, r8
    574a:	f7ff fcf1 	bl	5130 <_malloc_r>
    574e:	4607      	mov	r7, r0
    5750:	b1e0      	cbz	r0, 578c <_realloc_r+0xcc>
    5752:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5756:	f023 0301 	bic.w	r3, r3, #1
    575a:	444b      	add	r3, r9
    575c:	f1a0 0208 	sub.w	r2, r0, #8
    5760:	4293      	cmp	r3, r2
    5762:	f000 80d2 	beq.w	590a <_realloc_r+0x24a>
    5766:	1f32      	subs	r2, r6, #4
    5768:	2a24      	cmp	r2, #36	; 0x24
    576a:	f200 80f5 	bhi.w	5958 <_realloc_r+0x298>
    576e:	2a13      	cmp	r2, #19
    5770:	f200 80ac 	bhi.w	58cc <_realloc_r+0x20c>
    5774:	4603      	mov	r3, r0
    5776:	4622      	mov	r2, r4
    5778:	6811      	ldr	r1, [r2, #0]
    577a:	6019      	str	r1, [r3, #0]
    577c:	6851      	ldr	r1, [r2, #4]
    577e:	6059      	str	r1, [r3, #4]
    5780:	6892      	ldr	r2, [r2, #8]
    5782:	609a      	str	r2, [r3, #8]
    5784:	4621      	mov	r1, r4
    5786:	4640      	mov	r0, r8
    5788:	f001 fabc 	bl	6d04 <_free_r>
    578c:	4640      	mov	r0, r8
    578e:	f7ff ff85 	bl	569c <__malloc_unlock>
    5792:	4638      	mov	r0, r7
    5794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5798:	f025 0507 	bic.w	r5, r5, #7
    579c:	2d00      	cmp	r5, #0
    579e:	462a      	mov	r2, r5
    57a0:	daa0      	bge.n	56e4 <_realloc_r+0x24>
    57a2:	230c      	movs	r3, #12
    57a4:	f8c8 3000 	str.w	r3, [r8]
    57a8:	2700      	movs	r7, #0
    57aa:	4638      	mov	r0, r7
    57ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57b0:	461e      	mov	r6, r3
    57b2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    57b6:	60d3      	str	r3, [r2, #12]
    57b8:	609a      	str	r2, [r3, #8]
    57ba:	1b73      	subs	r3, r6, r5
    57bc:	2b0f      	cmp	r3, #15
    57be:	d822      	bhi.n	5806 <_realloc_r+0x146>
    57c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    57c4:	f003 0301 	and.w	r3, r3, #1
    57c8:	4333      	orrs	r3, r6
    57ca:	444e      	add	r6, r9
    57cc:	f8c9 3004 	str.w	r3, [r9, #4]
    57d0:	6873      	ldr	r3, [r6, #4]
    57d2:	f043 0301 	orr.w	r3, r3, #1
    57d6:	6073      	str	r3, [r6, #4]
    57d8:	4640      	mov	r0, r8
    57da:	4627      	mov	r7, r4
    57dc:	f7ff ff5e 	bl	569c <__malloc_unlock>
    57e0:	4638      	mov	r0, r7
    57e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57e6:	07c9      	lsls	r1, r1, #31
    57e8:	d4ad      	bmi.n	5746 <_realloc_r+0x86>
    57ea:	f854 3c08 	ldr.w	r3, [r4, #-8]
    57ee:	eba9 0a03 	sub.w	sl, r9, r3
    57f2:	f8da 1004 	ldr.w	r1, [sl, #4]
    57f6:	f021 0103 	bic.w	r1, r1, #3
    57fa:	e7a0      	b.n	573e <_realloc_r+0x7e>
    57fc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5800:	4611      	mov	r1, r2
    5802:	f7ff bc95 	b.w	5130 <_malloc_r>
    5806:	f8d9 2004 	ldr.w	r2, [r9, #4]
    580a:	eb09 0105 	add.w	r1, r9, r5
    580e:	f002 0201 	and.w	r2, r2, #1
    5812:	444e      	add	r6, r9
    5814:	f043 0301 	orr.w	r3, r3, #1
    5818:	432a      	orrs	r2, r5
    581a:	f8c9 2004 	str.w	r2, [r9, #4]
    581e:	604b      	str	r3, [r1, #4]
    5820:	6873      	ldr	r3, [r6, #4]
    5822:	f043 0301 	orr.w	r3, r3, #1
    5826:	3108      	adds	r1, #8
    5828:	6073      	str	r3, [r6, #4]
    582a:	4640      	mov	r0, r8
    582c:	f001 fa6a 	bl	6d04 <_free_r>
    5830:	e7d2      	b.n	57d8 <_realloc_r+0x118>
    5832:	f8dc 0004 	ldr.w	r0, [ip, #4]
    5836:	f020 0b03 	bic.w	fp, r0, #3
    583a:	eb06 0c0b 	add.w	ip, r6, fp
    583e:	f105 0010 	add.w	r0, r5, #16
    5842:	4584      	cmp	ip, r0
    5844:	da4d      	bge.n	58e2 <_realloc_r+0x222>
    5846:	07c9      	lsls	r1, r1, #31
    5848:	f53f af7d 	bmi.w	5746 <_realloc_r+0x86>
    584c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5850:	eba9 0a01 	sub.w	sl, r9, r1
    5854:	f8da 1004 	ldr.w	r1, [sl, #4]
    5858:	f021 0103 	bic.w	r1, r1, #3
    585c:	448b      	add	fp, r1
    585e:	44b3      	add	fp, r6
    5860:	4558      	cmp	r0, fp
    5862:	f73f af6c 	bgt.w	573e <_realloc_r+0x7e>
    5866:	4657      	mov	r7, sl
    5868:	f8da 100c 	ldr.w	r1, [sl, #12]
    586c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5870:	1f32      	subs	r2, r6, #4
    5872:	2a24      	cmp	r2, #36	; 0x24
    5874:	60c1      	str	r1, [r0, #12]
    5876:	6088      	str	r0, [r1, #8]
    5878:	f200 80db 	bhi.w	5a32 <_realloc_r+0x372>
    587c:	2a13      	cmp	r2, #19
    587e:	f240 80d6 	bls.w	5a2e <_realloc_r+0x36e>
    5882:	6821      	ldr	r1, [r4, #0]
    5884:	f8ca 1008 	str.w	r1, [sl, #8]
    5888:	6861      	ldr	r1, [r4, #4]
    588a:	f8ca 100c 	str.w	r1, [sl, #12]
    588e:	2a1b      	cmp	r2, #27
    5890:	f200 80df 	bhi.w	5a52 <_realloc_r+0x392>
    5894:	3408      	adds	r4, #8
    5896:	f10a 0210 	add.w	r2, sl, #16
    589a:	6821      	ldr	r1, [r4, #0]
    589c:	6011      	str	r1, [r2, #0]
    589e:	6861      	ldr	r1, [r4, #4]
    58a0:	6051      	str	r1, [r2, #4]
    58a2:	68a1      	ldr	r1, [r4, #8]
    58a4:	6091      	str	r1, [r2, #8]
    58a6:	eb0a 0105 	add.w	r1, sl, r5
    58aa:	ebab 0205 	sub.w	r2, fp, r5
    58ae:	f042 0201 	orr.w	r2, r2, #1
    58b2:	6099      	str	r1, [r3, #8]
    58b4:	604a      	str	r2, [r1, #4]
    58b6:	f8da 3004 	ldr.w	r3, [sl, #4]
    58ba:	f003 0301 	and.w	r3, r3, #1
    58be:	432b      	orrs	r3, r5
    58c0:	4640      	mov	r0, r8
    58c2:	f8ca 3004 	str.w	r3, [sl, #4]
    58c6:	f7ff fee9 	bl	569c <__malloc_unlock>
    58ca:	e76e      	b.n	57aa <_realloc_r+0xea>
    58cc:	6823      	ldr	r3, [r4, #0]
    58ce:	6003      	str	r3, [r0, #0]
    58d0:	6863      	ldr	r3, [r4, #4]
    58d2:	6043      	str	r3, [r0, #4]
    58d4:	2a1b      	cmp	r2, #27
    58d6:	d868      	bhi.n	59aa <_realloc_r+0x2ea>
    58d8:	f104 0208 	add.w	r2, r4, #8
    58dc:	f100 0308 	add.w	r3, r0, #8
    58e0:	e74a      	b.n	5778 <_realloc_r+0xb8>
    58e2:	eb09 0205 	add.w	r2, r9, r5
    58e6:	609a      	str	r2, [r3, #8]
    58e8:	ebac 0305 	sub.w	r3, ip, r5
    58ec:	f043 0301 	orr.w	r3, r3, #1
    58f0:	6053      	str	r3, [r2, #4]
    58f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    58f6:	f003 0301 	and.w	r3, r3, #1
    58fa:	432b      	orrs	r3, r5
    58fc:	4640      	mov	r0, r8
    58fe:	f844 3c04 	str.w	r3, [r4, #-4]
    5902:	f7ff fecb 	bl	569c <__malloc_unlock>
    5906:	4627      	mov	r7, r4
    5908:	e74f      	b.n	57aa <_realloc_r+0xea>
    590a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    590e:	f023 0303 	bic.w	r3, r3, #3
    5912:	441e      	add	r6, r3
    5914:	e751      	b.n	57ba <_realloc_r+0xfa>
    5916:	4657      	mov	r7, sl
    5918:	f8da 100c 	ldr.w	r1, [sl, #12]
    591c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5920:	1f32      	subs	r2, r6, #4
    5922:	2a24      	cmp	r2, #36	; 0x24
    5924:	60c1      	str	r1, [r0, #12]
    5926:	6088      	str	r0, [r1, #8]
    5928:	d84c      	bhi.n	59c4 <_realloc_r+0x304>
    592a:	2a13      	cmp	r2, #19
    592c:	d948      	bls.n	59c0 <_realloc_r+0x300>
    592e:	6821      	ldr	r1, [r4, #0]
    5930:	f8ca 1008 	str.w	r1, [sl, #8]
    5934:	6861      	ldr	r1, [r4, #4]
    5936:	f8ca 100c 	str.w	r1, [sl, #12]
    593a:	2a1b      	cmp	r2, #27
    593c:	d856      	bhi.n	59ec <_realloc_r+0x32c>
    593e:	3408      	adds	r4, #8
    5940:	f10a 0210 	add.w	r2, sl, #16
    5944:	461e      	mov	r6, r3
    5946:	6823      	ldr	r3, [r4, #0]
    5948:	6013      	str	r3, [r2, #0]
    594a:	6863      	ldr	r3, [r4, #4]
    594c:	6053      	str	r3, [r2, #4]
    594e:	68a3      	ldr	r3, [r4, #8]
    5950:	6093      	str	r3, [r2, #8]
    5952:	46d1      	mov	r9, sl
    5954:	463c      	mov	r4, r7
    5956:	e730      	b.n	57ba <_realloc_r+0xfa>
    5958:	4621      	mov	r1, r4
    595a:	f000 fadb 	bl	5f14 <memmove>
    595e:	e711      	b.n	5784 <_realloc_r+0xc4>
    5960:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    5964:	4657      	mov	r7, sl
    5966:	60cb      	str	r3, [r1, #12]
    5968:	6099      	str	r1, [r3, #8]
    596a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    596e:	f8da 300c 	ldr.w	r3, [sl, #12]
    5972:	60cb      	str	r3, [r1, #12]
    5974:	1f32      	subs	r2, r6, #4
    5976:	2a24      	cmp	r2, #36	; 0x24
    5978:	6099      	str	r1, [r3, #8]
    597a:	d82d      	bhi.n	59d8 <_realloc_r+0x318>
    597c:	2a13      	cmp	r2, #19
    597e:	d929      	bls.n	59d4 <_realloc_r+0x314>
    5980:	6823      	ldr	r3, [r4, #0]
    5982:	f8ca 3008 	str.w	r3, [sl, #8]
    5986:	6863      	ldr	r3, [r4, #4]
    5988:	f8ca 300c 	str.w	r3, [sl, #12]
    598c:	2a1b      	cmp	r2, #27
    598e:	d842      	bhi.n	5a16 <_realloc_r+0x356>
    5990:	3408      	adds	r4, #8
    5992:	f10a 0310 	add.w	r3, sl, #16
    5996:	6822      	ldr	r2, [r4, #0]
    5998:	601a      	str	r2, [r3, #0]
    599a:	6862      	ldr	r2, [r4, #4]
    599c:	605a      	str	r2, [r3, #4]
    599e:	68a2      	ldr	r2, [r4, #8]
    59a0:	609a      	str	r2, [r3, #8]
    59a2:	4666      	mov	r6, ip
    59a4:	46d1      	mov	r9, sl
    59a6:	463c      	mov	r4, r7
    59a8:	e707      	b.n	57ba <_realloc_r+0xfa>
    59aa:	68a3      	ldr	r3, [r4, #8]
    59ac:	6083      	str	r3, [r0, #8]
    59ae:	68e3      	ldr	r3, [r4, #12]
    59b0:	60c3      	str	r3, [r0, #12]
    59b2:	2a24      	cmp	r2, #36	; 0x24
    59b4:	d026      	beq.n	5a04 <_realloc_r+0x344>
    59b6:	f104 0210 	add.w	r2, r4, #16
    59ba:	f100 0310 	add.w	r3, r0, #16
    59be:	e6db      	b.n	5778 <_realloc_r+0xb8>
    59c0:	463a      	mov	r2, r7
    59c2:	e7bf      	b.n	5944 <_realloc_r+0x284>
    59c4:	4621      	mov	r1, r4
    59c6:	4638      	mov	r0, r7
    59c8:	461e      	mov	r6, r3
    59ca:	46d1      	mov	r9, sl
    59cc:	f000 faa2 	bl	5f14 <memmove>
    59d0:	463c      	mov	r4, r7
    59d2:	e6f2      	b.n	57ba <_realloc_r+0xfa>
    59d4:	463b      	mov	r3, r7
    59d6:	e7de      	b.n	5996 <_realloc_r+0x2d6>
    59d8:	4621      	mov	r1, r4
    59da:	4638      	mov	r0, r7
    59dc:	4666      	mov	r6, ip
    59de:	46d1      	mov	r9, sl
    59e0:	f000 fa98 	bl	5f14 <memmove>
    59e4:	463c      	mov	r4, r7
    59e6:	e6e8      	b.n	57ba <_realloc_r+0xfa>
    59e8:	2000132c 	.word	0x2000132c
    59ec:	68a1      	ldr	r1, [r4, #8]
    59ee:	f8ca 1010 	str.w	r1, [sl, #16]
    59f2:	68e1      	ldr	r1, [r4, #12]
    59f4:	f8ca 1014 	str.w	r1, [sl, #20]
    59f8:	2a24      	cmp	r2, #36	; 0x24
    59fa:	d020      	beq.n	5a3e <_realloc_r+0x37e>
    59fc:	3410      	adds	r4, #16
    59fe:	f10a 0218 	add.w	r2, sl, #24
    5a02:	e79f      	b.n	5944 <_realloc_r+0x284>
    5a04:	6923      	ldr	r3, [r4, #16]
    5a06:	6103      	str	r3, [r0, #16]
    5a08:	6961      	ldr	r1, [r4, #20]
    5a0a:	6141      	str	r1, [r0, #20]
    5a0c:	f104 0218 	add.w	r2, r4, #24
    5a10:	f100 0318 	add.w	r3, r0, #24
    5a14:	e6b0      	b.n	5778 <_realloc_r+0xb8>
    5a16:	68a3      	ldr	r3, [r4, #8]
    5a18:	f8ca 3010 	str.w	r3, [sl, #16]
    5a1c:	68e3      	ldr	r3, [r4, #12]
    5a1e:	f8ca 3014 	str.w	r3, [sl, #20]
    5a22:	2a24      	cmp	r2, #36	; 0x24
    5a24:	d021      	beq.n	5a6a <_realloc_r+0x3aa>
    5a26:	3410      	adds	r4, #16
    5a28:	f10a 0318 	add.w	r3, sl, #24
    5a2c:	e7b3      	b.n	5996 <_realloc_r+0x2d6>
    5a2e:	463a      	mov	r2, r7
    5a30:	e733      	b.n	589a <_realloc_r+0x1da>
    5a32:	4621      	mov	r1, r4
    5a34:	4638      	mov	r0, r7
    5a36:	f000 fa6d 	bl	5f14 <memmove>
    5a3a:	4b16      	ldr	r3, [pc, #88]	; (5a94 <_realloc_r+0x3d4>)
    5a3c:	e733      	b.n	58a6 <_realloc_r+0x1e6>
    5a3e:	6922      	ldr	r2, [r4, #16]
    5a40:	f8ca 2018 	str.w	r2, [sl, #24]
    5a44:	6962      	ldr	r2, [r4, #20]
    5a46:	f8ca 201c 	str.w	r2, [sl, #28]
    5a4a:	3418      	adds	r4, #24
    5a4c:	f10a 0220 	add.w	r2, sl, #32
    5a50:	e778      	b.n	5944 <_realloc_r+0x284>
    5a52:	68a1      	ldr	r1, [r4, #8]
    5a54:	f8ca 1010 	str.w	r1, [sl, #16]
    5a58:	68e1      	ldr	r1, [r4, #12]
    5a5a:	f8ca 1014 	str.w	r1, [sl, #20]
    5a5e:	2a24      	cmp	r2, #36	; 0x24
    5a60:	d00d      	beq.n	5a7e <_realloc_r+0x3be>
    5a62:	3410      	adds	r4, #16
    5a64:	f10a 0218 	add.w	r2, sl, #24
    5a68:	e717      	b.n	589a <_realloc_r+0x1da>
    5a6a:	6923      	ldr	r3, [r4, #16]
    5a6c:	f8ca 3018 	str.w	r3, [sl, #24]
    5a70:	6963      	ldr	r3, [r4, #20]
    5a72:	f8ca 301c 	str.w	r3, [sl, #28]
    5a76:	3418      	adds	r4, #24
    5a78:	f10a 0320 	add.w	r3, sl, #32
    5a7c:	e78b      	b.n	5996 <_realloc_r+0x2d6>
    5a7e:	6922      	ldr	r2, [r4, #16]
    5a80:	f8ca 2018 	str.w	r2, [sl, #24]
    5a84:	6962      	ldr	r2, [r4, #20]
    5a86:	f8ca 201c 	str.w	r2, [sl, #28]
    5a8a:	3418      	adds	r4, #24
    5a8c:	f10a 0220 	add.w	r2, sl, #32
    5a90:	e703      	b.n	589a <_realloc_r+0x1da>
    5a92:	bf00      	nop
    5a94:	2000132c 	.word	0x2000132c

00005a98 <_strtol_l.constprop.0>:
    5a98:	2b01      	cmp	r3, #1
    5a9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a9e:	d040      	beq.n	5b22 <_strtol_l.constprop.0+0x8a>
    5aa0:	2b24      	cmp	r3, #36	; 0x24
    5aa2:	4698      	mov	r8, r3
    5aa4:	d83d      	bhi.n	5b22 <_strtol_l.constprop.0+0x8a>
    5aa6:	4d4c      	ldr	r5, [pc, #304]	; (5bd8 <_strtol_l.constprop.0+0x140>)
    5aa8:	468e      	mov	lr, r1
    5aaa:	4676      	mov	r6, lr
    5aac:	f81e bb01 	ldrb.w	fp, [lr], #1
    5ab0:	f815 400b 	ldrb.w	r4, [r5, fp]
    5ab4:	f014 0408 	ands.w	r4, r4, #8
    5ab8:	d1f7      	bne.n	5aaa <_strtol_l.constprop.0+0x12>
    5aba:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    5abe:	d072      	beq.n	5ba6 <_strtol_l.constprop.0+0x10e>
    5ac0:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    5ac4:	bf08      	it	eq
    5ac6:	f89e b000 	ldrbeq.w	fp, [lr]
    5aca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    5ace:	bf08      	it	eq
    5ad0:	f106 0e02 	addeq.w	lr, r6, #2
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d042      	beq.n	5b5e <_strtol_l.constprop.0+0xc6>
    5ad8:	2b10      	cmp	r3, #16
    5ada:	d057      	beq.n	5b8c <_strtol_l.constprop.0+0xf4>
    5adc:	fbb9 f7f8 	udiv	r7, r9, r8
    5ae0:	2500      	movs	r5, #0
    5ae2:	462e      	mov	r6, r5
    5ae4:	fb08 9a17 	mls	sl, r8, r7, r9
    5ae8:	e005      	b.n	5af6 <_strtol_l.constprop.0+0x5e>
    5aea:	d033      	beq.n	5b54 <_strtol_l.constprop.0+0xbc>
    5aec:	fb08 c606 	mla	r6, r8, r6, ip
    5af0:	2501      	movs	r5, #1
    5af2:	f81e bb01 	ldrb.w	fp, [lr], #1
    5af6:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    5afa:	f1bc 0f09 	cmp.w	ip, #9
    5afe:	d906      	bls.n	5b0e <_strtol_l.constprop.0+0x76>
    5b00:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    5b04:	f1bc 0f19 	cmp.w	ip, #25
    5b08:	d812      	bhi.n	5b30 <_strtol_l.constprop.0+0x98>
    5b0a:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    5b0e:	4563      	cmp	r3, ip
    5b10:	dd17      	ble.n	5b42 <_strtol_l.constprop.0+0xaa>
    5b12:	f1b5 3fff 	cmp.w	r5, #4294967295
    5b16:	d0ec      	beq.n	5af2 <_strtol_l.constprop.0+0x5a>
    5b18:	42b7      	cmp	r7, r6
    5b1a:	d2e6      	bcs.n	5aea <_strtol_l.constprop.0+0x52>
    5b1c:	f04f 35ff 	mov.w	r5, #4294967295
    5b20:	e7e7      	b.n	5af2 <_strtol_l.constprop.0+0x5a>
    5b22:	f000 fddd 	bl	66e0 <__errno>
    5b26:	2316      	movs	r3, #22
    5b28:	6003      	str	r3, [r0, #0]
    5b2a:	2000      	movs	r0, #0
    5b2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b30:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    5b34:	f1bc 0f19 	cmp.w	ip, #25
    5b38:	d803      	bhi.n	5b42 <_strtol_l.constprop.0+0xaa>
    5b3a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    5b3e:	4563      	cmp	r3, ip
    5b40:	dce7      	bgt.n	5b12 <_strtol_l.constprop.0+0x7a>
    5b42:	1c6b      	adds	r3, r5, #1
    5b44:	d027      	beq.n	5b96 <_strtol_l.constprop.0+0xfe>
    5b46:	b98c      	cbnz	r4, 5b6c <_strtol_l.constprop.0+0xd4>
    5b48:	b10a      	cbz	r2, 5b4e <_strtol_l.constprop.0+0xb6>
    5b4a:	bba5      	cbnz	r5, 5bb6 <_strtol_l.constprop.0+0x11e>
    5b4c:	6011      	str	r1, [r2, #0]
    5b4e:	4630      	mov	r0, r6
    5b50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b54:	45e2      	cmp	sl, ip
    5b56:	dac9      	bge.n	5aec <_strtol_l.constprop.0+0x54>
    5b58:	f04f 35ff 	mov.w	r5, #4294967295
    5b5c:	e7c9      	b.n	5af2 <_strtol_l.constprop.0+0x5a>
    5b5e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5b62:	d005      	beq.n	5b70 <_strtol_l.constprop.0+0xd8>
    5b64:	f04f 080a 	mov.w	r8, #10
    5b68:	4643      	mov	r3, r8
    5b6a:	e7b7      	b.n	5adc <_strtol_l.constprop.0+0x44>
    5b6c:	4276      	negs	r6, r6
    5b6e:	e7eb      	b.n	5b48 <_strtol_l.constprop.0+0xb0>
    5b70:	f89e 3000 	ldrb.w	r3, [lr]
    5b74:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    5b78:	2b58      	cmp	r3, #88	; 0x58
    5b7a:	d121      	bne.n	5bc0 <_strtol_l.constprop.0+0x128>
    5b7c:	f04f 0810 	mov.w	r8, #16
    5b80:	f89e b001 	ldrb.w	fp, [lr, #1]
    5b84:	4643      	mov	r3, r8
    5b86:	f10e 0e02 	add.w	lr, lr, #2
    5b8a:	e7a7      	b.n	5adc <_strtol_l.constprop.0+0x44>
    5b8c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    5b90:	d01a      	beq.n	5bc8 <_strtol_l.constprop.0+0x130>
    5b92:	4698      	mov	r8, r3
    5b94:	e7a2      	b.n	5adc <_strtol_l.constprop.0+0x44>
    5b96:	2322      	movs	r3, #34	; 0x22
    5b98:	6003      	str	r3, [r0, #0]
    5b9a:	b172      	cbz	r2, 5bba <_strtol_l.constprop.0+0x122>
    5b9c:	f10e 31ff 	add.w	r1, lr, #4294967295
    5ba0:	464e      	mov	r6, r9
    5ba2:	6011      	str	r1, [r2, #0]
    5ba4:	e7d3      	b.n	5b4e <_strtol_l.constprop.0+0xb6>
    5ba6:	f89e b000 	ldrb.w	fp, [lr]
    5baa:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    5bae:	f106 0e02 	add.w	lr, r6, #2
    5bb2:	2401      	movs	r4, #1
    5bb4:	e78e      	b.n	5ad4 <_strtol_l.constprop.0+0x3c>
    5bb6:	46b1      	mov	r9, r6
    5bb8:	e7f0      	b.n	5b9c <_strtol_l.constprop.0+0x104>
    5bba:	464e      	mov	r6, r9
    5bbc:	4630      	mov	r0, r6
    5bbe:	e7c7      	b.n	5b50 <_strtol_l.constprop.0+0xb8>
    5bc0:	f04f 0808 	mov.w	r8, #8
    5bc4:	4643      	mov	r3, r8
    5bc6:	e789      	b.n	5adc <_strtol_l.constprop.0+0x44>
    5bc8:	f89e 5000 	ldrb.w	r5, [lr]
    5bcc:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    5bd0:	2d58      	cmp	r5, #88	; 0x58
    5bd2:	d0d3      	beq.n	5b7c <_strtol_l.constprop.0+0xe4>
    5bd4:	4698      	mov	r8, r3
    5bd6:	e781      	b.n	5adc <_strtol_l.constprop.0+0x44>
    5bd8:	20000725 	.word	0x20000725

00005bdc <strtol>:
    5bdc:	b410      	push	{r4}
    5bde:	4c05      	ldr	r4, [pc, #20]	; (5bf4 <strtol+0x18>)
    5be0:	4684      	mov	ip, r0
    5be2:	4613      	mov	r3, r2
    5be4:	6820      	ldr	r0, [r4, #0]
    5be6:	f85d 4b04 	ldr.w	r4, [sp], #4
    5bea:	460a      	mov	r2, r1
    5bec:	4661      	mov	r1, ip
    5bee:	f7ff bf53 	b.w	5a98 <_strtol_l.constprop.0>
    5bf2:	bf00      	nop
    5bf4:	20001748 	.word	0x20001748

00005bf8 <__utoa>:
    5bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bfa:	4f25      	ldr	r7, [pc, #148]	; (5c90 <__utoa+0x98>)
    5bfc:	f1a2 0e02 	sub.w	lr, r2, #2
    5c00:	4616      	mov	r6, r2
    5c02:	4605      	mov	r5, r0
    5c04:	460c      	mov	r4, r1
    5c06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5c08:	b08b      	sub	sp, #44	; 0x2c
    5c0a:	46ec      	mov	ip, sp
    5c0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5c10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    5c12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    5c16:	e897 0003 	ldmia.w	r7, {r0, r1}
    5c1a:	f84c 0b04 	str.w	r0, [ip], #4
    5c1e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    5c22:	f88c 1000 	strb.w	r1, [ip]
    5c26:	d82e      	bhi.n	5c86 <__utoa+0x8e>
    5c28:	f104 3eff 	add.w	lr, r4, #4294967295
    5c2c:	4670      	mov	r0, lr
    5c2e:	f04f 0c00 	mov.w	ip, #0
    5c32:	fbb5 f2f6 	udiv	r2, r5, r6
    5c36:	fb06 5312 	mls	r3, r6, r2, r5
    5c3a:	3328      	adds	r3, #40	; 0x28
    5c3c:	446b      	add	r3, sp
    5c3e:	4661      	mov	r1, ip
    5c40:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    5c44:	f800 cf01 	strb.w	ip, [r0, #1]!
    5c48:	462b      	mov	r3, r5
    5c4a:	429e      	cmp	r6, r3
    5c4c:	f101 0c01 	add.w	ip, r1, #1
    5c50:	4615      	mov	r5, r2
    5c52:	d9ee      	bls.n	5c32 <__utoa+0x3a>
    5c54:	2300      	movs	r3, #0
    5c56:	f804 300c 	strb.w	r3, [r4, ip]
    5c5a:	b189      	cbz	r1, 5c80 <__utoa+0x88>
    5c5c:	44a4      	add	ip, r4
    5c5e:	4672      	mov	r2, lr
    5c60:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    5c64:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    5c68:	f88e 5000 	strb.w	r5, [lr]
    5c6c:	eba4 030e 	sub.w	r3, r4, lr
    5c70:	3202      	adds	r2, #2
    5c72:	3b01      	subs	r3, #1
    5c74:	1b12      	subs	r2, r2, r4
    5c76:	440b      	add	r3, r1
    5c78:	429a      	cmp	r2, r3
    5c7a:	f88c 0000 	strb.w	r0, [ip]
    5c7e:	dbee      	blt.n	5c5e <__utoa+0x66>
    5c80:	4620      	mov	r0, r4
    5c82:	b00b      	add	sp, #44	; 0x2c
    5c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c86:	2300      	movs	r3, #0
    5c88:	4618      	mov	r0, r3
    5c8a:	7023      	strb	r3, [r4, #0]
    5c8c:	b00b      	add	sp, #44	; 0x2c
    5c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c90:	200006fc 	.word	0x200006fc

00005c94 <__cxa_atexit>:
    5c94:	4613      	mov	r3, r2
    5c96:	460a      	mov	r2, r1
    5c98:	4601      	mov	r1, r0
    5c9a:	2002      	movs	r0, #2
    5c9c:	f000 bf9e 	b.w	6bdc <__register_exitproc>

00005ca0 <fcvtf>:
    5ca0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    5ca4:	2300      	movs	r3, #0
    5ca6:	f001 bd13 	b.w	76d0 <fcvtbuf>
    5caa:	bf00      	nop

00005cac <tolower>:
    5cac:	4b03      	ldr	r3, [pc, #12]	; (5cbc <tolower+0x10>)
    5cae:	5c1b      	ldrb	r3, [r3, r0]
    5cb0:	f003 0303 	and.w	r3, r3, #3
    5cb4:	2b01      	cmp	r3, #1
    5cb6:	bf08      	it	eq
    5cb8:	3020      	addeq	r0, #32
    5cba:	4770      	bx	lr
    5cbc:	20000725 	.word	0x20000725

00005cc0 <stdio_exit_handler>:
    5cc0:	4a02      	ldr	r2, [pc, #8]	; (5ccc <stdio_exit_handler+0xc>)
    5cc2:	4903      	ldr	r1, [pc, #12]	; (5cd0 <stdio_exit_handler+0x10>)
    5cc4:	4803      	ldr	r0, [pc, #12]	; (5cd4 <stdio_exit_handler+0x14>)
    5cc6:	f000 b8bb 	b.w	5e40 <_fwalk_sglue>
    5cca:	bf00      	nop
    5ccc:	2000173c 	.word	0x2000173c
    5cd0:	00007775 	.word	0x00007775
    5cd4:	20000dc0 	.word	0x20000dc0

00005cd8 <cleanup_stdio>:
    5cd8:	4b0c      	ldr	r3, [pc, #48]	; (5d0c <cleanup_stdio+0x34>)
    5cda:	6841      	ldr	r1, [r0, #4]
    5cdc:	4299      	cmp	r1, r3
    5cde:	b510      	push	{r4, lr}
    5ce0:	4604      	mov	r4, r0
    5ce2:	d001      	beq.n	5ce8 <cleanup_stdio+0x10>
    5ce4:	f001 fd46 	bl	7774 <_fclose_r>
    5ce8:	68a1      	ldr	r1, [r4, #8]
    5cea:	4b09      	ldr	r3, [pc, #36]	; (5d10 <cleanup_stdio+0x38>)
    5cec:	4299      	cmp	r1, r3
    5cee:	d002      	beq.n	5cf6 <cleanup_stdio+0x1e>
    5cf0:	4620      	mov	r0, r4
    5cf2:	f001 fd3f 	bl	7774 <_fclose_r>
    5cf6:	68e1      	ldr	r1, [r4, #12]
    5cf8:	4b06      	ldr	r3, [pc, #24]	; (5d14 <cleanup_stdio+0x3c>)
    5cfa:	4299      	cmp	r1, r3
    5cfc:	d004      	beq.n	5d08 <cleanup_stdio+0x30>
    5cfe:	4620      	mov	r0, r4
    5d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d04:	f001 bd36 	b.w	7774 <_fclose_r>
    5d08:	bd10      	pop	{r4, pc}
    5d0a:	bf00      	nop
    5d0c:	20002994 	.word	0x20002994
    5d10:	200029fc 	.word	0x200029fc
    5d14:	20002a64 	.word	0x20002a64

00005d18 <global_stdio_init.part.0>:
    5d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d1c:	4c2a      	ldr	r4, [pc, #168]	; (5dc8 <global_stdio_init.part.0+0xb0>)
    5d1e:	4b2b      	ldr	r3, [pc, #172]	; (5dcc <global_stdio_init.part.0+0xb4>)
    5d20:	482b      	ldr	r0, [pc, #172]	; (5dd0 <global_stdio_init.part.0+0xb8>)
    5d22:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 5de4 <global_stdio_init.part.0+0xcc>
    5d26:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 5de8 <global_stdio_init.part.0+0xd0>
    5d2a:	4f2a      	ldr	r7, [pc, #168]	; (5dd4 <global_stdio_init.part.0+0xbc>)
    5d2c:	6018      	str	r0, [r3, #0]
    5d2e:	2500      	movs	r5, #0
    5d30:	2304      	movs	r3, #4
    5d32:	2208      	movs	r2, #8
    5d34:	4629      	mov	r1, r5
    5d36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    5d3a:	4e27      	ldr	r6, [pc, #156]	; (5dd8 <global_stdio_init.part.0+0xc0>)
    5d3c:	6665      	str	r5, [r4, #100]	; 0x64
    5d3e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    5d42:	e9c4 5500 	strd	r5, r5, [r4]
    5d46:	e9c4 5504 	strd	r5, r5, [r4, #16]
    5d4a:	61a5      	str	r5, [r4, #24]
    5d4c:	f000 f95e 	bl	600c <memset>
    5d50:	4b22      	ldr	r3, [pc, #136]	; (5ddc <global_stdio_init.part.0+0xc4>)
    5d52:	6763      	str	r3, [r4, #116]	; 0x74
    5d54:	2208      	movs	r2, #8
    5d56:	4629      	mov	r1, r5
    5d58:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    5d5c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    5d60:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    5d64:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    5d68:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    5d6c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    5d70:	6725      	str	r5, [r4, #112]	; 0x70
    5d72:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    5d76:	62e6      	str	r6, [r4, #44]	; 0x2c
    5d78:	f000 f948 	bl	600c <memset>
    5d7c:	4b18      	ldr	r3, [pc, #96]	; (5de0 <global_stdio_init.part.0+0xc8>)
    5d7e:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    5d82:	4629      	mov	r1, r5
    5d84:	f104 0368 	add.w	r3, r4, #104	; 0x68
    5d88:	2208      	movs	r2, #8
    5d8a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    5d8e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    5d92:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    5d96:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    5d9a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    5d9e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    5da2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    5da6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    5daa:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    5dae:	f000 f92d 	bl	600c <memset>
    5db2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    5db6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    5dba:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    5dbe:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    5dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5dc6:	bf00      	nop
    5dc8:	20002994 	.word	0x20002994
    5dcc:	20002acc 	.word	0x20002acc
    5dd0:	00005cc1 	.word	0x00005cc1
    5dd4:	00005eed 	.word	0x00005eed
    5dd8:	00005f0d 	.word	0x00005f0d
    5ddc:	00010009 	.word	0x00010009
    5de0:	00020012 	.word	0x00020012
    5de4:	00005e89 	.word	0x00005e89
    5de8:	00005ead 	.word	0x00005ead

00005dec <__sinit>:
    5dec:	b510      	push	{r4, lr}
    5dee:	4604      	mov	r4, r0
    5df0:	480a      	ldr	r0, [pc, #40]	; (5e1c <__sinit+0x30>)
    5df2:	f000 fca3 	bl	673c <__retarget_lock_acquire_recursive>
    5df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5df8:	b923      	cbnz	r3, 5e04 <__sinit+0x18>
    5dfa:	4b09      	ldr	r3, [pc, #36]	; (5e20 <__sinit+0x34>)
    5dfc:	4a09      	ldr	r2, [pc, #36]	; (5e24 <__sinit+0x38>)
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	6362      	str	r2, [r4, #52]	; 0x34
    5e02:	b123      	cbz	r3, 5e0e <__sinit+0x22>
    5e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e08:	4804      	ldr	r0, [pc, #16]	; (5e1c <__sinit+0x30>)
    5e0a:	f000 bc99 	b.w	6740 <__retarget_lock_release_recursive>
    5e0e:	f7ff ff83 	bl	5d18 <global_stdio_init.part.0>
    5e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e16:	4801      	ldr	r0, [pc, #4]	; (5e1c <__sinit+0x30>)
    5e18:	f000 bc92 	b.w	6740 <__retarget_lock_release_recursive>
    5e1c:	2000295c 	.word	0x2000295c
    5e20:	20002acc 	.word	0x20002acc
    5e24:	00005cd9 	.word	0x00005cd9

00005e28 <__sfp_lock_acquire>:
    5e28:	4801      	ldr	r0, [pc, #4]	; (5e30 <__sfp_lock_acquire+0x8>)
    5e2a:	f000 bc87 	b.w	673c <__retarget_lock_acquire_recursive>
    5e2e:	bf00      	nop
    5e30:	2000295c 	.word	0x2000295c

00005e34 <__sfp_lock_release>:
    5e34:	4801      	ldr	r0, [pc, #4]	; (5e3c <__sfp_lock_release+0x8>)
    5e36:	f000 bc83 	b.w	6740 <__retarget_lock_release_recursive>
    5e3a:	bf00      	nop
    5e3c:	2000295c 	.word	0x2000295c

00005e40 <_fwalk_sglue>:
    5e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e44:	4680      	mov	r8, r0
    5e46:	460f      	mov	r7, r1
    5e48:	4616      	mov	r6, r2
    5e4a:	f04f 0900 	mov.w	r9, #0
    5e4e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    5e52:	3d01      	subs	r5, #1
    5e54:	d411      	bmi.n	5e7a <_fwalk_sglue+0x3a>
    5e56:	89a3      	ldrh	r3, [r4, #12]
    5e58:	2b01      	cmp	r3, #1
    5e5a:	f105 35ff 	add.w	r5, r5, #4294967295
    5e5e:	d908      	bls.n	5e72 <_fwalk_sglue+0x32>
    5e60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    5e64:	3301      	adds	r3, #1
    5e66:	4621      	mov	r1, r4
    5e68:	d003      	beq.n	5e72 <_fwalk_sglue+0x32>
    5e6a:	4640      	mov	r0, r8
    5e6c:	47b8      	blx	r7
    5e6e:	ea49 0900 	orr.w	r9, r9, r0
    5e72:	1c6b      	adds	r3, r5, #1
    5e74:	f104 0468 	add.w	r4, r4, #104	; 0x68
    5e78:	d1ed      	bne.n	5e56 <_fwalk_sglue+0x16>
    5e7a:	6836      	ldr	r6, [r6, #0]
    5e7c:	2e00      	cmp	r6, #0
    5e7e:	d1e6      	bne.n	5e4e <_fwalk_sglue+0xe>
    5e80:	4648      	mov	r0, r9
    5e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5e86:	bf00      	nop

00005e88 <__sread>:
    5e88:	b510      	push	{r4, lr}
    5e8a:	460c      	mov	r4, r1
    5e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5e90:	f000 fbe8 	bl	6664 <_read_r>
    5e94:	2800      	cmp	r0, #0
    5e96:	db03      	blt.n	5ea0 <__sread+0x18>
    5e98:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5e9a:	4403      	add	r3, r0
    5e9c:	6523      	str	r3, [r4, #80]	; 0x50
    5e9e:	bd10      	pop	{r4, pc}
    5ea0:	89a3      	ldrh	r3, [r4, #12]
    5ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    5ea6:	81a3      	strh	r3, [r4, #12]
    5ea8:	bd10      	pop	{r4, pc}
    5eaa:	bf00      	nop

00005eac <__swrite>:
    5eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5eb0:	460c      	mov	r4, r1
    5eb2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    5eb6:	461f      	mov	r7, r3
    5eb8:	05cb      	lsls	r3, r1, #23
    5eba:	4605      	mov	r5, r0
    5ebc:	4616      	mov	r6, r2
    5ebe:	d40b      	bmi.n	5ed8 <__swrite+0x2c>
    5ec0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    5ec4:	81a1      	strh	r1, [r4, #12]
    5ec6:	463b      	mov	r3, r7
    5ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5ecc:	4632      	mov	r2, r6
    5ece:	4628      	mov	r0, r5
    5ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ed4:	f000 bbee 	b.w	66b4 <_write_r>
    5ed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    5edc:	2302      	movs	r3, #2
    5ede:	2200      	movs	r2, #0
    5ee0:	f000 fbaa 	bl	6638 <_lseek_r>
    5ee4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    5ee8:	e7ea      	b.n	5ec0 <__swrite+0x14>
    5eea:	bf00      	nop

00005eec <__sseek>:
    5eec:	b510      	push	{r4, lr}
    5eee:	460c      	mov	r4, r1
    5ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5ef4:	f000 fba0 	bl	6638 <_lseek_r>
    5ef8:	89a3      	ldrh	r3, [r4, #12]
    5efa:	1c42      	adds	r2, r0, #1
    5efc:	bf0e      	itee	eq
    5efe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    5f02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    5f06:	6520      	strne	r0, [r4, #80]	; 0x50
    5f08:	81a3      	strh	r3, [r4, #12]
    5f0a:	bd10      	pop	{r4, pc}

00005f0c <__sclose>:
    5f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    5f10:	f000 bb80 	b.w	6614 <_close_r>

00005f14 <memmove>:
    5f14:	4288      	cmp	r0, r1
    5f16:	d90d      	bls.n	5f34 <memmove+0x20>
    5f18:	188b      	adds	r3, r1, r2
    5f1a:	4283      	cmp	r3, r0
    5f1c:	d90a      	bls.n	5f34 <memmove+0x20>
    5f1e:	eb00 0c02 	add.w	ip, r0, r2
    5f22:	b1ba      	cbz	r2, 5f54 <memmove+0x40>
    5f24:	4662      	mov	r2, ip
    5f26:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    5f2a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5f2e:	4299      	cmp	r1, r3
    5f30:	d1f9      	bne.n	5f26 <memmove+0x12>
    5f32:	4770      	bx	lr
    5f34:	2a0f      	cmp	r2, #15
    5f36:	d80e      	bhi.n	5f56 <memmove+0x42>
    5f38:	4603      	mov	r3, r0
    5f3a:	f102 3cff 	add.w	ip, r2, #4294967295
    5f3e:	b14a      	cbz	r2, 5f54 <memmove+0x40>
    5f40:	f10c 0c01 	add.w	ip, ip, #1
    5f44:	3b01      	subs	r3, #1
    5f46:	448c      	add	ip, r1
    5f48:	f811 2b01 	ldrb.w	r2, [r1], #1
    5f4c:	f803 2f01 	strb.w	r2, [r3, #1]!
    5f50:	4561      	cmp	r1, ip
    5f52:	d1f9      	bne.n	5f48 <memmove+0x34>
    5f54:	4770      	bx	lr
    5f56:	ea40 0301 	orr.w	r3, r0, r1
    5f5a:	079b      	lsls	r3, r3, #30
    5f5c:	d150      	bne.n	6000 <memmove+0xec>
    5f5e:	f1a2 0310 	sub.w	r3, r2, #16
    5f62:	b570      	push	{r4, r5, r6, lr}
    5f64:	f101 0c20 	add.w	ip, r1, #32
    5f68:	f023 050f 	bic.w	r5, r3, #15
    5f6c:	f101 0e10 	add.w	lr, r1, #16
    5f70:	f100 0410 	add.w	r4, r0, #16
    5f74:	44ac      	add	ip, r5
    5f76:	091b      	lsrs	r3, r3, #4
    5f78:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5f7c:	f844 5c10 	str.w	r5, [r4, #-16]
    5f80:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5f84:	f844 5c0c 	str.w	r5, [r4, #-12]
    5f88:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5f8c:	f844 5c08 	str.w	r5, [r4, #-8]
    5f90:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5f94:	f844 5c04 	str.w	r5, [r4, #-4]
    5f98:	f10e 0e10 	add.w	lr, lr, #16
    5f9c:	45e6      	cmp	lr, ip
    5f9e:	f104 0410 	add.w	r4, r4, #16
    5fa2:	d1e9      	bne.n	5f78 <memmove+0x64>
    5fa4:	3301      	adds	r3, #1
    5fa6:	f012 0f0c 	tst.w	r2, #12
    5faa:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    5fae:	f002 040f 	and.w	r4, r2, #15
    5fb2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    5fb6:	d027      	beq.n	6008 <memmove+0xf4>
    5fb8:	3c04      	subs	r4, #4
    5fba:	f024 0603 	bic.w	r6, r4, #3
    5fbe:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    5fc2:	441e      	add	r6, r3
    5fc4:	1f1c      	subs	r4, r3, #4
    5fc6:	468e      	mov	lr, r1
    5fc8:	f85e 5b04 	ldr.w	r5, [lr], #4
    5fcc:	f844 5f04 	str.w	r5, [r4, #4]!
    5fd0:	42b4      	cmp	r4, r6
    5fd2:	d1f9      	bne.n	5fc8 <memmove+0xb4>
    5fd4:	f10c 0401 	add.w	r4, ip, #1
    5fd8:	f002 0203 	and.w	r2, r2, #3
    5fdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5fe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5fe4:	f102 3cff 	add.w	ip, r2, #4294967295
    5fe8:	b14a      	cbz	r2, 5ffe <memmove+0xea>
    5fea:	f10c 0c01 	add.w	ip, ip, #1
    5fee:	3b01      	subs	r3, #1
    5ff0:	448c      	add	ip, r1
    5ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
    5ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
    5ffa:	4561      	cmp	r1, ip
    5ffc:	d1f9      	bne.n	5ff2 <memmove+0xde>
    5ffe:	bd70      	pop	{r4, r5, r6, pc}
    6000:	f102 3cff 	add.w	ip, r2, #4294967295
    6004:	4603      	mov	r3, r0
    6006:	e79b      	b.n	5f40 <memmove+0x2c>
    6008:	4622      	mov	r2, r4
    600a:	e7eb      	b.n	5fe4 <memmove+0xd0>

0000600c <memset>:
    600c:	0783      	lsls	r3, r0, #30
    600e:	b530      	push	{r4, r5, lr}
    6010:	d048      	beq.n	60a4 <memset+0x98>
    6012:	1e54      	subs	r4, r2, #1
    6014:	2a00      	cmp	r2, #0
    6016:	d03f      	beq.n	6098 <memset+0x8c>
    6018:	b2ca      	uxtb	r2, r1
    601a:	4603      	mov	r3, r0
    601c:	e001      	b.n	6022 <memset+0x16>
    601e:	3c01      	subs	r4, #1
    6020:	d33a      	bcc.n	6098 <memset+0x8c>
    6022:	f803 2b01 	strb.w	r2, [r3], #1
    6026:	079d      	lsls	r5, r3, #30
    6028:	d1f9      	bne.n	601e <memset+0x12>
    602a:	2c03      	cmp	r4, #3
    602c:	d92d      	bls.n	608a <memset+0x7e>
    602e:	b2cd      	uxtb	r5, r1
    6030:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    6034:	2c0f      	cmp	r4, #15
    6036:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    603a:	d936      	bls.n	60aa <memset+0x9e>
    603c:	f1a4 0210 	sub.w	r2, r4, #16
    6040:	f022 0c0f 	bic.w	ip, r2, #15
    6044:	f103 0e20 	add.w	lr, r3, #32
    6048:	44e6      	add	lr, ip
    604a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    604e:	f103 0210 	add.w	r2, r3, #16
    6052:	e942 5504 	strd	r5, r5, [r2, #-16]
    6056:	e942 5502 	strd	r5, r5, [r2, #-8]
    605a:	3210      	adds	r2, #16
    605c:	4572      	cmp	r2, lr
    605e:	d1f8      	bne.n	6052 <memset+0x46>
    6060:	f10c 0201 	add.w	r2, ip, #1
    6064:	f014 0f0c 	tst.w	r4, #12
    6068:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    606c:	f004 0c0f 	and.w	ip, r4, #15
    6070:	d013      	beq.n	609a <memset+0x8e>
    6072:	f1ac 0304 	sub.w	r3, ip, #4
    6076:	f023 0303 	bic.w	r3, r3, #3
    607a:	3304      	adds	r3, #4
    607c:	4413      	add	r3, r2
    607e:	f842 5b04 	str.w	r5, [r2], #4
    6082:	4293      	cmp	r3, r2
    6084:	d1fb      	bne.n	607e <memset+0x72>
    6086:	f00c 0403 	and.w	r4, ip, #3
    608a:	b12c      	cbz	r4, 6098 <memset+0x8c>
    608c:	b2c9      	uxtb	r1, r1
    608e:	441c      	add	r4, r3
    6090:	f803 1b01 	strb.w	r1, [r3], #1
    6094:	429c      	cmp	r4, r3
    6096:	d1fb      	bne.n	6090 <memset+0x84>
    6098:	bd30      	pop	{r4, r5, pc}
    609a:	4664      	mov	r4, ip
    609c:	4613      	mov	r3, r2
    609e:	2c00      	cmp	r4, #0
    60a0:	d1f4      	bne.n	608c <memset+0x80>
    60a2:	e7f9      	b.n	6098 <memset+0x8c>
    60a4:	4603      	mov	r3, r0
    60a6:	4614      	mov	r4, r2
    60a8:	e7bf      	b.n	602a <memset+0x1e>
    60aa:	461a      	mov	r2, r3
    60ac:	46a4      	mov	ip, r4
    60ae:	e7e0      	b.n	6072 <memset+0x66>

000060b0 <strchr>:
    60b0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    60b4:	4603      	mov	r3, r0
    60b6:	d044      	beq.n	6142 <strchr+0x92>
    60b8:	0782      	lsls	r2, r0, #30
    60ba:	d132      	bne.n	6122 <strchr+0x72>
    60bc:	b510      	push	{r4, lr}
    60be:	6804      	ldr	r4, [r0, #0]
    60c0:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    60c4:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    60c8:	ea8e 0204 	eor.w	r2, lr, r4
    60cc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    60d0:	ea23 0302 	bic.w	r3, r3, r2
    60d4:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    60d8:	ea22 0204 	bic.w	r2, r2, r4
    60dc:	4313      	orrs	r3, r2
    60de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    60e2:	d10f      	bne.n	6104 <strchr+0x54>
    60e4:	f850 4f04 	ldr.w	r4, [r0, #4]!
    60e8:	ea84 0c0e 	eor.w	ip, r4, lr
    60ec:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    60f0:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    60f4:	ea23 0304 	bic.w	r3, r3, r4
    60f8:	ea22 020c 	bic.w	r2, r2, ip
    60fc:	4313      	orrs	r3, r2
    60fe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6102:	d0ef      	beq.n	60e4 <strchr+0x34>
    6104:	7803      	ldrb	r3, [r0, #0]
    6106:	b923      	cbnz	r3, 6112 <strchr+0x62>
    6108:	e036      	b.n	6178 <strchr+0xc8>
    610a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    610e:	2b00      	cmp	r3, #0
    6110:	d032      	beq.n	6178 <strchr+0xc8>
    6112:	4299      	cmp	r1, r3
    6114:	d1f9      	bne.n	610a <strchr+0x5a>
    6116:	bd10      	pop	{r4, pc}
    6118:	428a      	cmp	r2, r1
    611a:	d011      	beq.n	6140 <strchr+0x90>
    611c:	079a      	lsls	r2, r3, #30
    611e:	4618      	mov	r0, r3
    6120:	d0cc      	beq.n	60bc <strchr+0xc>
    6122:	4618      	mov	r0, r3
    6124:	f813 2b01 	ldrb.w	r2, [r3], #1
    6128:	2a00      	cmp	r2, #0
    612a:	d1f5      	bne.n	6118 <strchr+0x68>
    612c:	4610      	mov	r0, r2
    612e:	4770      	bx	lr
    6130:	0799      	lsls	r1, r3, #30
    6132:	4618      	mov	r0, r3
    6134:	d007      	beq.n	6146 <strchr+0x96>
    6136:	4618      	mov	r0, r3
    6138:	3301      	adds	r3, #1
    613a:	7802      	ldrb	r2, [r0, #0]
    613c:	2a00      	cmp	r2, #0
    613e:	d1f7      	bne.n	6130 <strchr+0x80>
    6140:	4770      	bx	lr
    6142:	0782      	lsls	r2, r0, #30
    6144:	d1f7      	bne.n	6136 <strchr+0x86>
    6146:	6802      	ldr	r2, [r0, #0]
    6148:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    614c:	ea23 0302 	bic.w	r3, r3, r2
    6150:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6154:	d108      	bne.n	6168 <strchr+0xb8>
    6156:	f850 2f04 	ldr.w	r2, [r0, #4]!
    615a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    615e:	ea23 0302 	bic.w	r3, r3, r2
    6162:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6166:	d0f6      	beq.n	6156 <strchr+0xa6>
    6168:	7803      	ldrb	r3, [r0, #0]
    616a:	2b00      	cmp	r3, #0
    616c:	d0e8      	beq.n	6140 <strchr+0x90>
    616e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6172:	2b00      	cmp	r3, #0
    6174:	d1fb      	bne.n	616e <strchr+0xbe>
    6176:	4770      	bx	lr
    6178:	4618      	mov	r0, r3
    617a:	bd10      	pop	{r4, pc}

0000617c <strncpy>:
    617c:	ea40 0301 	orr.w	r3, r0, r1
    6180:	079b      	lsls	r3, r3, #30
    6182:	b530      	push	{r4, r5, lr}
    6184:	d101      	bne.n	618a <strncpy+0xe>
    6186:	2a03      	cmp	r2, #3
    6188:	d80f      	bhi.n	61aa <strncpy+0x2e>
    618a:	4684      	mov	ip, r0
    618c:	f101 3eff 	add.w	lr, r1, #4294967295
    6190:	e007      	b.n	61a2 <strncpy+0x26>
    6192:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    6196:	f803 1b01 	strb.w	r1, [r3], #1
    619a:	1e54      	subs	r4, r2, #1
    619c:	b1c1      	cbz	r1, 61d0 <strncpy+0x54>
    619e:	469c      	mov	ip, r3
    61a0:	4622      	mov	r2, r4
    61a2:	4663      	mov	r3, ip
    61a4:	2a00      	cmp	r2, #0
    61a6:	d1f4      	bne.n	6192 <strncpy+0x16>
    61a8:	bd30      	pop	{r4, r5, pc}
    61aa:	460b      	mov	r3, r1
    61ac:	4684      	mov	ip, r0
    61ae:	4619      	mov	r1, r3
    61b0:	f853 5b04 	ldr.w	r5, [r3], #4
    61b4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    61b8:	ea24 0405 	bic.w	r4, r4, r5
    61bc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    61c0:	d1e4      	bne.n	618c <strncpy+0x10>
    61c2:	3a04      	subs	r2, #4
    61c4:	2a03      	cmp	r2, #3
    61c6:	f84c 5b04 	str.w	r5, [ip], #4
    61ca:	4619      	mov	r1, r3
    61cc:	d8ef      	bhi.n	61ae <strncpy+0x32>
    61ce:	e7dd      	b.n	618c <strncpy+0x10>
    61d0:	4494      	add	ip, r2
    61d2:	2c00      	cmp	r4, #0
    61d4:	d0e8      	beq.n	61a8 <strncpy+0x2c>
    61d6:	f803 1b01 	strb.w	r1, [r3], #1
    61da:	4563      	cmp	r3, ip
    61dc:	d1fb      	bne.n	61d6 <strncpy+0x5a>
    61de:	bd30      	pop	{r4, r5, pc}

000061e0 <critical_factorization>:
    61e0:	2901      	cmp	r1, #1
    61e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    61e6:	d95b      	bls.n	62a0 <critical_factorization+0xc0>
    61e8:	f04f 0801 	mov.w	r8, #1
    61ec:	46c6      	mov	lr, r8
    61ee:	2400      	movs	r4, #0
    61f0:	f04f 35ff 	mov.w	r5, #4294967295
    61f4:	4643      	mov	r3, r8
    61f6:	e008      	b.n	620a <critical_factorization+0x2a>
    61f8:	eba3 0805 	sub.w	r8, r3, r5
    61fc:	461c      	mov	r4, r3
    61fe:	f04f 0e01 	mov.w	lr, #1
    6202:	eb04 030e 	add.w	r3, r4, lr
    6206:	428b      	cmp	r3, r1
    6208:	d210      	bcs.n	622c <critical_factorization+0x4c>
    620a:	eb00 0c0e 	add.w	ip, r0, lr
    620e:	5cc7      	ldrb	r7, [r0, r3]
    6210:	f81c 6005 	ldrb.w	r6, [ip, r5]
    6214:	42b7      	cmp	r7, r6
    6216:	d3ef      	bcc.n	61f8 <critical_factorization+0x18>
    6218:	d032      	beq.n	6280 <critical_factorization+0xa0>
    621a:	f04f 0801 	mov.w	r8, #1
    621e:	4625      	mov	r5, r4
    6220:	46c6      	mov	lr, r8
    6222:	4444      	add	r4, r8
    6224:	eb04 030e 	add.w	r3, r4, lr
    6228:	428b      	cmp	r3, r1
    622a:	d3ee      	bcc.n	620a <critical_factorization+0x2a>
    622c:	2701      	movs	r7, #1
    622e:	f8c2 8000 	str.w	r8, [r2]
    6232:	46be      	mov	lr, r7
    6234:	2400      	movs	r4, #0
    6236:	f04f 36ff 	mov.w	r6, #4294967295
    623a:	463b      	mov	r3, r7
    623c:	e007      	b.n	624e <critical_factorization+0x6e>
    623e:	1b9f      	subs	r7, r3, r6
    6240:	461c      	mov	r4, r3
    6242:	f04f 0e01 	mov.w	lr, #1
    6246:	eb04 030e 	add.w	r3, r4, lr
    624a:	428b      	cmp	r3, r1
    624c:	d210      	bcs.n	6270 <critical_factorization+0x90>
    624e:	eb00 0c06 	add.w	ip, r0, r6
    6252:	f810 8003 	ldrb.w	r8, [r0, r3]
    6256:	f81c c00e 	ldrb.w	ip, [ip, lr]
    625a:	45e0      	cmp	r8, ip
    625c:	d8ef      	bhi.n	623e <critical_factorization+0x5e>
    625e:	d017      	beq.n	6290 <critical_factorization+0xb0>
    6260:	2701      	movs	r7, #1
    6262:	4626      	mov	r6, r4
    6264:	46be      	mov	lr, r7
    6266:	443c      	add	r4, r7
    6268:	eb04 030e 	add.w	r3, r4, lr
    626c:	428b      	cmp	r3, r1
    626e:	d3ee      	bcc.n	624e <critical_factorization+0x6e>
    6270:	3601      	adds	r6, #1
    6272:	1c68      	adds	r0, r5, #1
    6274:	4286      	cmp	r6, r0
    6276:	d301      	bcc.n	627c <critical_factorization+0x9c>
    6278:	6017      	str	r7, [r2, #0]
    627a:	4630      	mov	r0, r6
    627c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6280:	45c6      	cmp	lr, r8
    6282:	bf0a      	itet	eq
    6284:	4474      	addeq	r4, lr
    6286:	f10e 0e01 	addne.w	lr, lr, #1
    628a:	f04f 0e01 	moveq.w	lr, #1
    628e:	e7b8      	b.n	6202 <critical_factorization+0x22>
    6290:	45be      	cmp	lr, r7
    6292:	bf0a      	itet	eq
    6294:	4474      	addeq	r4, lr
    6296:	f10e 0e01 	addne.w	lr, lr, #1
    629a:	f04f 0e01 	moveq.w	lr, #1
    629e:	e7d2      	b.n	6246 <critical_factorization+0x66>
    62a0:	2701      	movs	r7, #1
    62a2:	2600      	movs	r6, #0
    62a4:	e7e8      	b.n	6278 <critical_factorization+0x98>
    62a6:	bf00      	nop

000062a8 <two_way_long_needle>:
    62a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62ac:	4692      	mov	sl, r2
    62ae:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    62b2:	aa05      	add	r2, sp, #20
    62b4:	4681      	mov	r9, r0
    62b6:	460f      	mov	r7, r1
    62b8:	4650      	mov	r0, sl
    62ba:	4619      	mov	r1, r3
    62bc:	461d      	mov	r5, r3
    62be:	f7ff ff8f 	bl	61e0 <critical_factorization>
    62c2:	4613      	mov	r3, r2
    62c4:	4683      	mov	fp, r0
    62c6:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    62ca:	f843 5f04 	str.w	r5, [r3, #4]!
    62ce:	4293      	cmp	r3, r2
    62d0:	d1fb      	bne.n	62ca <two_way_long_needle+0x22>
    62d2:	2d00      	cmp	r5, #0
    62d4:	f000 80df 	beq.w	6496 <two_way_long_needle+0x1ee>
    62d8:	1e6c      	subs	r4, r5, #1
    62da:	ae06      	add	r6, sp, #24
    62dc:	f10a 32ff 	add.w	r2, sl, #4294967295
    62e0:	eb0a 0004 	add.w	r0, sl, r4
    62e4:	9600      	str	r6, [sp, #0]
    62e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    62ea:	1aab      	subs	r3, r5, r2
    62ec:	3b01      	subs	r3, #1
    62ee:	4453      	add	r3, sl
    62f0:	4282      	cmp	r2, r0
    62f2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    62f6:	d1f6      	bne.n	62e6 <two_way_long_needle+0x3e>
    62f8:	9905      	ldr	r1, [sp, #20]
    62fa:	465a      	mov	r2, fp
    62fc:	4451      	add	r1, sl
    62fe:	4650      	mov	r0, sl
    6300:	f001 fb5e 	bl	79c0 <memcmp>
    6304:	2800      	cmp	r0, #0
    6306:	d16f      	bne.n	63e8 <two_way_long_needle+0x140>
    6308:	f10b 33ff 	add.w	r3, fp, #4294967295
    630c:	9303      	str	r3, [sp, #12]
    630e:	f1cb 0301 	rsb	r3, fp, #1
    6312:	4680      	mov	r8, r0
    6314:	4606      	mov	r6, r0
    6316:	9301      	str	r3, [sp, #4]
    6318:	eb09 0e06 	add.w	lr, r9, r6
    631c:	9a00      	ldr	r2, [sp, #0]
    631e:	f81e 3004 	ldrb.w	r3, [lr, r4]
    6322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6326:	b1db      	cbz	r3, 6360 <two_way_long_needle+0xb8>
    6328:	f1b8 0f00 	cmp.w	r8, #0
    632c:	d003      	beq.n	6336 <two_way_long_needle+0x8e>
    632e:	9a05      	ldr	r2, [sp, #20]
    6330:	429a      	cmp	r2, r3
    6332:	d900      	bls.n	6336 <two_way_long_needle+0x8e>
    6334:	1aab      	subs	r3, r5, r2
    6336:	441e      	add	r6, r3
    6338:	f04f 0800 	mov.w	r8, #0
    633c:	1b7b      	subs	r3, r7, r5
    633e:	429e      	cmp	r6, r3
    6340:	d9ea      	bls.n	6318 <two_way_long_needle+0x70>
    6342:	eb09 0007 	add.w	r0, r9, r7
    6346:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    634a:	f001 fb69 	bl	7a20 <strnlen>
    634e:	4407      	add	r7, r0
    6350:	1b7b      	subs	r3, r7, r5
    6352:	429e      	cmp	r6, r3
    6354:	d9e0      	bls.n	6318 <two_way_long_needle+0x70>
    6356:	2000      	movs	r0, #0
    6358:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6360:	45c3      	cmp	fp, r8
    6362:	465b      	mov	r3, fp
    6364:	bf38      	it	cc
    6366:	4643      	movcc	r3, r8
    6368:	42a3      	cmp	r3, r4
    636a:	d210      	bcs.n	638e <two_way_long_needle+0xe6>
    636c:	1e59      	subs	r1, r3, #1
    636e:	18f2      	adds	r2, r6, r3
    6370:	4451      	add	r1, sl
    6372:	444a      	add	r2, r9
    6374:	e002      	b.n	637c <two_way_long_needle+0xd4>
    6376:	3301      	adds	r3, #1
    6378:	42a3      	cmp	r3, r4
    637a:	d208      	bcs.n	638e <two_way_long_needle+0xe6>
    637c:	f812 0b01 	ldrb.w	r0, [r2], #1
    6380:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    6384:	4584      	cmp	ip, r0
    6386:	d0f6      	beq.n	6376 <two_way_long_needle+0xce>
    6388:	9a01      	ldr	r2, [sp, #4]
    638a:	4416      	add	r6, r2
    638c:	e7d3      	b.n	6336 <two_way_long_needle+0x8e>
    638e:	45c3      	cmp	fp, r8
    6390:	9b03      	ldr	r3, [sp, #12]
    6392:	d97e      	bls.n	6492 <two_way_long_needle+0x1ea>
    6394:	eb06 020b 	add.w	r2, r6, fp
    6398:	444a      	add	r2, r9
    639a:	eb0a 010b 	add.w	r1, sl, fp
    639e:	9602      	str	r6, [sp, #8]
    63a0:	e002      	b.n	63a8 <two_way_long_needle+0x100>
    63a2:	4543      	cmp	r3, r8
    63a4:	d015      	beq.n	63d2 <two_way_long_needle+0x12a>
    63a6:	4603      	mov	r3, r0
    63a8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    63ac:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    63b0:	4286      	cmp	r6, r0
    63b2:	f103 0c01 	add.w	ip, r3, #1
    63b6:	f103 30ff 	add.w	r0, r3, #4294967295
    63ba:	d0f2      	beq.n	63a2 <two_way_long_needle+0xfa>
    63bc:	9e02      	ldr	r6, [sp, #8]
    63be:	4663      	mov	r3, ip
    63c0:	f108 0801 	add.w	r8, r8, #1
    63c4:	4598      	cmp	r8, r3
    63c6:	d80a      	bhi.n	63de <two_way_long_needle+0x136>
    63c8:	9b05      	ldr	r3, [sp, #20]
    63ca:	441e      	add	r6, r3
    63cc:	eba5 0803 	sub.w	r8, r5, r3
    63d0:	e7b4      	b.n	633c <two_way_long_needle+0x94>
    63d2:	4643      	mov	r3, r8
    63d4:	f108 0801 	add.w	r8, r8, #1
    63d8:	4598      	cmp	r8, r3
    63da:	9e02      	ldr	r6, [sp, #8]
    63dc:	d9f4      	bls.n	63c8 <two_way_long_needle+0x120>
    63de:	4670      	mov	r0, lr
    63e0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    63e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63e8:	eba5 030b 	sub.w	r3, r5, fp
    63ec:	455b      	cmp	r3, fp
    63ee:	bf38      	it	cc
    63f0:	465b      	movcc	r3, fp
    63f2:	3301      	adds	r3, #1
    63f4:	9305      	str	r3, [sp, #20]
    63f6:	f10b 33ff 	add.w	r3, fp, #4294967295
    63fa:	9301      	str	r3, [sp, #4]
    63fc:	f1cb 0301 	rsb	r3, fp, #1
    6400:	2600      	movs	r6, #0
    6402:	9302      	str	r3, [sp, #8]
    6404:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    6408:	eb09 0106 	add.w	r1, r9, r6
    640c:	9a00      	ldr	r2, [sp, #0]
    640e:	5d0b      	ldrb	r3, [r1, r4]
    6410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6414:	b16b      	cbz	r3, 6432 <two_way_long_needle+0x18a>
    6416:	441e      	add	r6, r3
    6418:	1b7b      	subs	r3, r7, r5
    641a:	42b3      	cmp	r3, r6
    641c:	d2f4      	bcs.n	6408 <two_way_long_needle+0x160>
    641e:	eb09 0007 	add.w	r0, r9, r7
    6422:	4641      	mov	r1, r8
    6424:	f001 fafc 	bl	7a20 <strnlen>
    6428:	4407      	add	r7, r0
    642a:	1b7b      	subs	r3, r7, r5
    642c:	42b3      	cmp	r3, r6
    642e:	d2eb      	bcs.n	6408 <two_way_long_needle+0x160>
    6430:	e791      	b.n	6356 <two_way_long_needle+0xae>
    6432:	45a3      	cmp	fp, r4
    6434:	d214      	bcs.n	6460 <two_way_long_needle+0x1b8>
    6436:	9b01      	ldr	r3, [sp, #4]
    6438:	eb0b 0206 	add.w	r2, fp, r6
    643c:	eb0a 0c03 	add.w	ip, sl, r3
    6440:	444a      	add	r2, r9
    6442:	465b      	mov	r3, fp
    6444:	e002      	b.n	644c <two_way_long_needle+0x1a4>
    6446:	3301      	adds	r3, #1
    6448:	42a3      	cmp	r3, r4
    644a:	d209      	bcs.n	6460 <two_way_long_needle+0x1b8>
    644c:	f812 0b01 	ldrb.w	r0, [r2], #1
    6450:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    6454:	4586      	cmp	lr, r0
    6456:	d0f6      	beq.n	6446 <two_way_long_needle+0x19e>
    6458:	9a02      	ldr	r2, [sp, #8]
    645a:	4416      	add	r6, r2
    645c:	441e      	add	r6, r3
    645e:	e7db      	b.n	6418 <two_way_long_needle+0x170>
    6460:	f1bb 0f00 	cmp.w	fp, #0
    6464:	d010      	beq.n	6488 <two_way_long_needle+0x1e0>
    6466:	eb0b 0006 	add.w	r0, fp, r6
    646a:	4448      	add	r0, r9
    646c:	eb0a 020b 	add.w	r2, sl, fp
    6470:	e001      	b.n	6476 <two_way_long_needle+0x1ce>
    6472:	4553      	cmp	r3, sl
    6474:	d008      	beq.n	6488 <two_way_long_needle+0x1e0>
    6476:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    647a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    647e:	45e6      	cmp	lr, ip
    6480:	4613      	mov	r3, r2
    6482:	d0f6      	beq.n	6472 <two_way_long_needle+0x1ca>
    6484:	9b05      	ldr	r3, [sp, #20]
    6486:	e7c6      	b.n	6416 <two_way_long_needle+0x16e>
    6488:	4608      	mov	r0, r1
    648a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6492:	465b      	mov	r3, fp
    6494:	e794      	b.n	63c0 <two_way_long_needle+0x118>
    6496:	ab06      	add	r3, sp, #24
    6498:	f04f 34ff 	mov.w	r4, #4294967295
    649c:	9300      	str	r3, [sp, #0]
    649e:	e72b      	b.n	62f8 <two_way_long_needle+0x50>

000064a0 <strstr>:
    64a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64a4:	460d      	mov	r5, r1
    64a6:	7809      	ldrb	r1, [r1, #0]
    64a8:	b090      	sub	sp, #64	; 0x40
    64aa:	4604      	mov	r4, r0
    64ac:	2900      	cmp	r1, #0
    64ae:	d054      	beq.n	655a <strstr+0xba>
    64b0:	786a      	ldrb	r2, [r5, #1]
    64b2:	2a00      	cmp	r2, #0
    64b4:	f000 8083 	beq.w	65be <strstr+0x11e>
    64b8:	78ab      	ldrb	r3, [r5, #2]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d051      	beq.n	6562 <strstr+0xc2>
    64be:	78e8      	ldrb	r0, [r5, #3]
    64c0:	682e      	ldr	r6, [r5, #0]
    64c2:	2800      	cmp	r0, #0
    64c4:	f000 8082 	beq.w	65cc <strstr+0x12c>
    64c8:	792b      	ldrb	r3, [r5, #4]
    64ca:	2b00      	cmp	r3, #0
    64cc:	d057      	beq.n	657e <strstr+0xde>
    64ce:	4628      	mov	r0, r5
    64d0:	f000 fb16 	bl	6b00 <strlen>
    64d4:	4606      	mov	r6, r0
    64d6:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    64da:	4620      	mov	r0, r4
    64dc:	f001 faa0 	bl	7a20 <strnlen>
    64e0:	4286      	cmp	r6, r0
    64e2:	d85b      	bhi.n	659c <strstr+0xfc>
    64e4:	2efe      	cmp	r6, #254	; 0xfe
    64e6:	f200 8086 	bhi.w	65f6 <strstr+0x156>
    64ea:	1b80      	subs	r0, r0, r6
    64ec:	1827      	adds	r7, r4, r0
    64ee:	2240      	movs	r2, #64	; 0x40
    64f0:	1c71      	adds	r1, r6, #1
    64f2:	4668      	mov	r0, sp
    64f4:	f7ff fd8a 	bl	600c <memset>
    64f8:	b17e      	cbz	r6, 651a <strstr+0x7a>
    64fa:	1e6a      	subs	r2, r5, #1
    64fc:	fa5f fc86 	uxtb.w	ip, r6
    6500:	1990      	adds	r0, r2, r6
    6502:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    6506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    650a:	3340      	adds	r3, #64	; 0x40
    650c:	446b      	add	r3, sp
    650e:	1aa9      	subs	r1, r5, r2
    6510:	4461      	add	r1, ip
    6512:	4282      	cmp	r2, r0
    6514:	f803 1c40 	strb.w	r1, [r3, #-64]
    6518:	d1f3      	bne.n	6502 <strstr+0x62>
    651a:	3c01      	subs	r4, #1
    651c:	5da3      	ldrb	r3, [r4, r6]
    651e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6522:	3340      	adds	r3, #64	; 0x40
    6524:	446b      	add	r3, sp
    6526:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    652a:	441c      	add	r4, r3
    652c:	42a7      	cmp	r7, r4
    652e:	d203      	bcs.n	6538 <strstr+0x98>
    6530:	e039      	b.n	65a6 <strstr+0x106>
    6532:	4444      	add	r4, r8
    6534:	42a7      	cmp	r7, r4
    6536:	d336      	bcc.n	65a6 <strstr+0x106>
    6538:	f814 c006 	ldrb.w	ip, [r4, r6]
    653c:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    6540:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    6544:	eb0d 0c03 	add.w	ip, sp, r3
    6548:	4620      	mov	r0, r4
    654a:	4632      	mov	r2, r6
    654c:	4629      	mov	r1, r5
    654e:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    6552:	f001 fa35 	bl	79c0 <memcmp>
    6556:	2800      	cmp	r0, #0
    6558:	d1eb      	bne.n	6532 <strstr+0x92>
    655a:	4620      	mov	r0, r4
    655c:	b010      	add	sp, #64	; 0x40
    655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6562:	7800      	ldrb	r0, [r0, #0]
    6564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    6568:	e000      	b.n	656c <strstr+0xcc>
    656a:	460c      	mov	r4, r1
    656c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    6570:	1c61      	adds	r1, r4, #1
    6572:	b198      	cbz	r0, 659c <strstr+0xfc>
    6574:	429a      	cmp	r2, r3
    6576:	7860      	ldrb	r0, [r4, #1]
    6578:	d1f7      	bne.n	656a <strstr+0xca>
    657a:	3c01      	subs	r4, #1
    657c:	e7ed      	b.n	655a <strstr+0xba>
    657e:	7822      	ldrb	r2, [r4, #0]
    6580:	b162      	cbz	r2, 659c <strstr+0xfc>
    6582:	ba31      	rev	r1, r6
    6584:	e001      	b.n	658a <strstr+0xea>
    6586:	4299      	cmp	r1, r3
    6588:	d01e      	beq.n	65c8 <strstr+0x128>
    658a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    658e:	4620      	mov	r0, r4
    6590:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    6594:	2a00      	cmp	r2, #0
    6596:	d1f6      	bne.n	6586 <strstr+0xe6>
    6598:	4299      	cmp	r1, r3
    659a:	d015      	beq.n	65c8 <strstr+0x128>
    659c:	2400      	movs	r4, #0
    659e:	4620      	mov	r0, r4
    65a0:	b010      	add	sp, #64	; 0x40
    65a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65a6:	5dbb      	ldrb	r3, [r7, r6]
    65a8:	19b8      	adds	r0, r7, r6
    65aa:	2b00      	cmp	r3, #0
    65ac:	d0f6      	beq.n	659c <strstr+0xfc>
    65ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    65b2:	f001 fa35 	bl	7a20 <strnlen>
    65b6:	4407      	add	r7, r0
    65b8:	42bc      	cmp	r4, r7
    65ba:	d9ae      	bls.n	651a <strstr+0x7a>
    65bc:	e7ee      	b.n	659c <strstr+0xfc>
    65be:	b010      	add	sp, #64	; 0x40
    65c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    65c4:	f7ff bd74 	b.w	60b0 <strchr>
    65c8:	1ec4      	subs	r4, r0, #3
    65ca:	e7c6      	b.n	655a <strstr+0xba>
    65cc:	0412      	lsls	r2, r2, #16
    65ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    65d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    65d6:	7821      	ldrb	r1, [r4, #0]
    65d8:	4602      	mov	r2, r0
    65da:	e000      	b.n	65de <strstr+0x13e>
    65dc:	462c      	mov	r4, r5
    65de:	ea41 0002 	orr.w	r0, r1, r2
    65e2:	1c65      	adds	r5, r4, #1
    65e4:	0202      	lsls	r2, r0, #8
    65e6:	2900      	cmp	r1, #0
    65e8:	d0d8      	beq.n	659c <strstr+0xfc>
    65ea:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    65ee:	7861      	ldrb	r1, [r4, #1]
    65f0:	d1f4      	bne.n	65dc <strstr+0x13c>
    65f2:	3c02      	subs	r4, #2
    65f4:	e7b1      	b.n	655a <strstr+0xba>
    65f6:	4601      	mov	r1, r0
    65f8:	4633      	mov	r3, r6
    65fa:	462a      	mov	r2, r5
    65fc:	4620      	mov	r0, r4
    65fe:	b010      	add	sp, #64	; 0x40
    6600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6604:	f7ff be50 	b.w	62a8 <two_way_long_needle>

00006608 <__locale_mb_cur_max>:
    6608:	4b01      	ldr	r3, [pc, #4]	; (6610 <__locale_mb_cur_max+0x8>)
    660a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    660e:	4770      	bx	lr
    6610:	200011c0 	.word	0x200011c0

00006614 <_close_r>:
    6614:	b538      	push	{r3, r4, r5, lr}
    6616:	4d07      	ldr	r5, [pc, #28]	; (6634 <_close_r+0x20>)
    6618:	2200      	movs	r2, #0
    661a:	4604      	mov	r4, r0
    661c:	4608      	mov	r0, r1
    661e:	602a      	str	r2, [r5, #0]
    6620:	f7fd fbce 	bl	3dc0 <_close>
    6624:	1c43      	adds	r3, r0, #1
    6626:	d000      	beq.n	662a <_close_r+0x16>
    6628:	bd38      	pop	{r3, r4, r5, pc}
    662a:	682b      	ldr	r3, [r5, #0]
    662c:	2b00      	cmp	r3, #0
    662e:	d0fb      	beq.n	6628 <_close_r+0x14>
    6630:	6023      	str	r3, [r4, #0]
    6632:	bd38      	pop	{r3, r4, r5, pc}
    6634:	20002ae4 	.word	0x20002ae4

00006638 <_lseek_r>:
    6638:	b538      	push	{r3, r4, r5, lr}
    663a:	460c      	mov	r4, r1
    663c:	4d08      	ldr	r5, [pc, #32]	; (6660 <_lseek_r+0x28>)
    663e:	4684      	mov	ip, r0
    6640:	4611      	mov	r1, r2
    6642:	4620      	mov	r0, r4
    6644:	461a      	mov	r2, r3
    6646:	2300      	movs	r3, #0
    6648:	602b      	str	r3, [r5, #0]
    664a:	4664      	mov	r4, ip
    664c:	f7fd fbc4 	bl	3dd8 <_lseek>
    6650:	1c43      	adds	r3, r0, #1
    6652:	d000      	beq.n	6656 <_lseek_r+0x1e>
    6654:	bd38      	pop	{r3, r4, r5, pc}
    6656:	682b      	ldr	r3, [r5, #0]
    6658:	2b00      	cmp	r3, #0
    665a:	d0fb      	beq.n	6654 <_lseek_r+0x1c>
    665c:	6023      	str	r3, [r4, #0]
    665e:	bd38      	pop	{r3, r4, r5, pc}
    6660:	20002ae4 	.word	0x20002ae4

00006664 <_read_r>:
    6664:	b538      	push	{r3, r4, r5, lr}
    6666:	460c      	mov	r4, r1
    6668:	4d08      	ldr	r5, [pc, #32]	; (668c <_read_r+0x28>)
    666a:	4684      	mov	ip, r0
    666c:	4611      	mov	r1, r2
    666e:	4620      	mov	r0, r4
    6670:	461a      	mov	r2, r3
    6672:	2300      	movs	r3, #0
    6674:	602b      	str	r3, [r5, #0]
    6676:	4664      	mov	r4, ip
    6678:	f7fd fba0 	bl	3dbc <_read>
    667c:	1c43      	adds	r3, r0, #1
    667e:	d000      	beq.n	6682 <_read_r+0x1e>
    6680:	bd38      	pop	{r3, r4, r5, pc}
    6682:	682b      	ldr	r3, [r5, #0]
    6684:	2b00      	cmp	r3, #0
    6686:	d0fb      	beq.n	6680 <_read_r+0x1c>
    6688:	6023      	str	r3, [r4, #0]
    668a:	bd38      	pop	{r3, r4, r5, pc}
    668c:	20002ae4 	.word	0x20002ae4

00006690 <_sbrk_r>:
    6690:	b538      	push	{r3, r4, r5, lr}
    6692:	4d07      	ldr	r5, [pc, #28]	; (66b0 <_sbrk_r+0x20>)
    6694:	2200      	movs	r2, #0
    6696:	4604      	mov	r4, r0
    6698:	4608      	mov	r0, r1
    669a:	602a      	str	r2, [r5, #0]
    669c:	f7fd fb74 	bl	3d88 <_sbrk>
    66a0:	1c43      	adds	r3, r0, #1
    66a2:	d000      	beq.n	66a6 <_sbrk_r+0x16>
    66a4:	bd38      	pop	{r3, r4, r5, pc}
    66a6:	682b      	ldr	r3, [r5, #0]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d0fb      	beq.n	66a4 <_sbrk_r+0x14>
    66ac:	6023      	str	r3, [r4, #0]
    66ae:	bd38      	pop	{r3, r4, r5, pc}
    66b0:	20002ae4 	.word	0x20002ae4

000066b4 <_write_r>:
    66b4:	b538      	push	{r3, r4, r5, lr}
    66b6:	460c      	mov	r4, r1
    66b8:	4d08      	ldr	r5, [pc, #32]	; (66dc <_write_r+0x28>)
    66ba:	4684      	mov	ip, r0
    66bc:	4611      	mov	r1, r2
    66be:	4620      	mov	r0, r4
    66c0:	461a      	mov	r2, r3
    66c2:	2300      	movs	r3, #0
    66c4:	602b      	str	r3, [r5, #0]
    66c6:	4664      	mov	r4, ip
    66c8:	f7fc fac2 	bl	2c50 <_write>
    66cc:	1c43      	adds	r3, r0, #1
    66ce:	d000      	beq.n	66d2 <_write_r+0x1e>
    66d0:	bd38      	pop	{r3, r4, r5, pc}
    66d2:	682b      	ldr	r3, [r5, #0]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d0fb      	beq.n	66d0 <_write_r+0x1c>
    66d8:	6023      	str	r3, [r4, #0]
    66da:	bd38      	pop	{r3, r4, r5, pc}
    66dc:	20002ae4 	.word	0x20002ae4

000066e0 <__errno>:
    66e0:	4b01      	ldr	r3, [pc, #4]	; (66e8 <__errno+0x8>)
    66e2:	6818      	ldr	r0, [r3, #0]
    66e4:	4770      	bx	lr
    66e6:	bf00      	nop
    66e8:	20001748 	.word	0x20001748

000066ec <__libc_init_array>:
    66ec:	b570      	push	{r4, r5, r6, lr}
    66ee:	4e0d      	ldr	r6, [pc, #52]	; (6724 <__libc_init_array+0x38>)
    66f0:	4d0d      	ldr	r5, [pc, #52]	; (6728 <__libc_init_array+0x3c>)
    66f2:	1b76      	subs	r6, r6, r5
    66f4:	10b6      	asrs	r6, r6, #2
    66f6:	d006      	beq.n	6706 <__libc_init_array+0x1a>
    66f8:	2400      	movs	r4, #0
    66fa:	f855 3b04 	ldr.w	r3, [r5], #4
    66fe:	3401      	adds	r4, #1
    6700:	4798      	blx	r3
    6702:	42a6      	cmp	r6, r4
    6704:	d1f9      	bne.n	66fa <__libc_init_array+0xe>
    6706:	4e09      	ldr	r6, [pc, #36]	; (672c <__libc_init_array+0x40>)
    6708:	4d09      	ldr	r5, [pc, #36]	; (6730 <__libc_init_array+0x44>)
    670a:	1b76      	subs	r6, r6, r5
    670c:	f003 fdd0 	bl	a2b0 <___init_veneer>
    6710:	10b6      	asrs	r6, r6, #2
    6712:	d006      	beq.n	6722 <__libc_init_array+0x36>
    6714:	2400      	movs	r4, #0
    6716:	f855 3b04 	ldr.w	r3, [r5], #4
    671a:	3401      	adds	r4, #1
    671c:	4798      	blx	r3
    671e:	42a6      	cmp	r6, r4
    6720:	d1f9      	bne.n	6716 <__libc_init_array+0x2a>
    6722:	bd70      	pop	{r4, r5, r6, pc}
    6724:	60001fc8 	.word	0x60001fc8
    6728:	60001fc8 	.word	0x60001fc8
    672c:	60001ff8 	.word	0x60001ff8
    6730:	60001fc8 	.word	0x60001fc8

00006734 <__retarget_lock_init_recursive>:
    6734:	4770      	bx	lr
    6736:	bf00      	nop

00006738 <__retarget_lock_close_recursive>:
    6738:	4770      	bx	lr
    673a:	bf00      	nop

0000673c <__retarget_lock_acquire_recursive>:
    673c:	4770      	bx	lr
    673e:	bf00      	nop

00006740 <__retarget_lock_release_recursive>:
    6740:	4770      	bx	lr
    6742:	bf00      	nop
	...
    6760:	eba2 0003 	sub.w	r0, r2, r3
    6764:	4770      	bx	lr
    6766:	bf00      	nop

00006768 <strcmp>:
    6768:	7802      	ldrb	r2, [r0, #0]
    676a:	780b      	ldrb	r3, [r1, #0]
    676c:	2a01      	cmp	r2, #1
    676e:	bf28      	it	cs
    6770:	429a      	cmpcs	r2, r3
    6772:	d1f5      	bne.n	6760 <__retarget_lock_release_recursive+0x20>
    6774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    6778:	ea40 0401 	orr.w	r4, r0, r1
    677c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6780:	f06f 0c00 	mvn.w	ip, #0
    6784:	ea4f 7244 	mov.w	r2, r4, lsl #29
    6788:	b312      	cbz	r2, 67d0 <strcmp+0x68>
    678a:	ea80 0401 	eor.w	r4, r0, r1
    678e:	f014 0f07 	tst.w	r4, #7
    6792:	d16a      	bne.n	686a <strcmp+0x102>
    6794:	f000 0407 	and.w	r4, r0, #7
    6798:	f020 0007 	bic.w	r0, r0, #7
    679c:	f004 0503 	and.w	r5, r4, #3
    67a0:	f021 0107 	bic.w	r1, r1, #7
    67a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    67a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    67ac:	f014 0f04 	tst.w	r4, #4
    67b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    67b4:	fa0c f405 	lsl.w	r4, ip, r5
    67b8:	ea62 0204 	orn	r2, r2, r4
    67bc:	ea66 0604 	orn	r6, r6, r4
    67c0:	d00a      	beq.n	67d8 <strcmp+0x70>
    67c2:	ea63 0304 	orn	r3, r3, r4
    67c6:	4662      	mov	r2, ip
    67c8:	ea67 0704 	orn	r7, r7, r4
    67cc:	4666      	mov	r6, ip
    67ce:	e003      	b.n	67d8 <strcmp+0x70>
    67d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    67d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    67d8:	fa82 f54c 	uadd8	r5, r2, ip
    67dc:	ea82 0406 	eor.w	r4, r2, r6
    67e0:	faa4 f48c 	sel	r4, r4, ip
    67e4:	bb6c      	cbnz	r4, 6842 <strcmp+0xda>
    67e6:	fa83 f54c 	uadd8	r5, r3, ip
    67ea:	ea83 0507 	eor.w	r5, r3, r7
    67ee:	faa5 f58c 	sel	r5, r5, ip
    67f2:	b995      	cbnz	r5, 681a <strcmp+0xb2>
    67f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    67f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    67fc:	fa82 f54c 	uadd8	r5, r2, ip
    6800:	ea82 0406 	eor.w	r4, r2, r6
    6804:	faa4 f48c 	sel	r4, r4, ip
    6808:	fa83 f54c 	uadd8	r5, r3, ip
    680c:	ea83 0507 	eor.w	r5, r3, r7
    6810:	faa5 f58c 	sel	r5, r5, ip
    6814:	4325      	orrs	r5, r4
    6816:	d0db      	beq.n	67d0 <strcmp+0x68>
    6818:	b99c      	cbnz	r4, 6842 <strcmp+0xda>
    681a:	ba2d      	rev	r5, r5
    681c:	fab5 f485 	clz	r4, r5
    6820:	f024 0407 	bic.w	r4, r4, #7
    6824:	fa27 f104 	lsr.w	r1, r7, r4
    6828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    682c:	fa23 f304 	lsr.w	r3, r3, r4
    6830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    6834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    683c:	eba0 0001 	sub.w	r0, r0, r1
    6840:	4770      	bx	lr
    6842:	ba24      	rev	r4, r4
    6844:	fab4 f484 	clz	r4, r4
    6848:	f024 0407 	bic.w	r4, r4, #7
    684c:	fa26 f104 	lsr.w	r1, r6, r4
    6850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    6854:	fa22 f204 	lsr.w	r2, r2, r4
    6858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    685c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6864:	eba0 0001 	sub.w	r0, r0, r1
    6868:	4770      	bx	lr
    686a:	f014 0f03 	tst.w	r4, #3
    686e:	d13c      	bne.n	68ea <strcmp+0x182>
    6870:	f010 0403 	ands.w	r4, r0, #3
    6874:	d128      	bne.n	68c8 <strcmp+0x160>
    6876:	f850 2b08 	ldr.w	r2, [r0], #8
    687a:	f851 3b08 	ldr.w	r3, [r1], #8
    687e:	fa82 f54c 	uadd8	r5, r2, ip
    6882:	ea82 0503 	eor.w	r5, r2, r3
    6886:	faa5 f58c 	sel	r5, r5, ip
    688a:	b95d      	cbnz	r5, 68a4 <strcmp+0x13c>
    688c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    6890:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6894:	fa82 f54c 	uadd8	r5, r2, ip
    6898:	ea82 0503 	eor.w	r5, r2, r3
    689c:	faa5 f58c 	sel	r5, r5, ip
    68a0:	2d00      	cmp	r5, #0
    68a2:	d0e8      	beq.n	6876 <strcmp+0x10e>
    68a4:	ba2d      	rev	r5, r5
    68a6:	fab5 f485 	clz	r4, r5
    68aa:	f024 0407 	bic.w	r4, r4, #7
    68ae:	fa23 f104 	lsr.w	r1, r3, r4
    68b2:	fa22 f204 	lsr.w	r2, r2, r4
    68b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    68ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    68be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    68c2:	eba0 0001 	sub.w	r0, r0, r1
    68c6:	4770      	bx	lr
    68c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    68cc:	f020 0003 	bic.w	r0, r0, #3
    68d0:	f850 2b08 	ldr.w	r2, [r0], #8
    68d4:	f021 0103 	bic.w	r1, r1, #3
    68d8:	f851 3b08 	ldr.w	r3, [r1], #8
    68dc:	fa0c f404 	lsl.w	r4, ip, r4
    68e0:	ea62 0204 	orn	r2, r2, r4
    68e4:	ea63 0304 	orn	r3, r3, r4
    68e8:	e7c9      	b.n	687e <strcmp+0x116>
    68ea:	f010 0403 	ands.w	r4, r0, #3
    68ee:	d01a      	beq.n	6926 <strcmp+0x1be>
    68f0:	eba1 0104 	sub.w	r1, r1, r4
    68f4:	f020 0003 	bic.w	r0, r0, #3
    68f8:	07e4      	lsls	r4, r4, #31
    68fa:	f850 2b04 	ldr.w	r2, [r0], #4
    68fe:	d006      	beq.n	690e <strcmp+0x1a6>
    6900:	d20f      	bcs.n	6922 <strcmp+0x1ba>
    6902:	788b      	ldrb	r3, [r1, #2]
    6904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    6908:	1ae4      	subs	r4, r4, r3
    690a:	d106      	bne.n	691a <strcmp+0x1b2>
    690c:	b12b      	cbz	r3, 691a <strcmp+0x1b2>
    690e:	78cb      	ldrb	r3, [r1, #3]
    6910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    6914:	1ae4      	subs	r4, r4, r3
    6916:	d100      	bne.n	691a <strcmp+0x1b2>
    6918:	b91b      	cbnz	r3, 6922 <strcmp+0x1ba>
    691a:	4620      	mov	r0, r4
    691c:	f85d 4b10 	ldr.w	r4, [sp], #16
    6920:	4770      	bx	lr
    6922:	f101 0104 	add.w	r1, r1, #4
    6926:	f850 2b04 	ldr.w	r2, [r0], #4
    692a:	07cc      	lsls	r4, r1, #31
    692c:	f021 0103 	bic.w	r1, r1, #3
    6930:	f851 3b04 	ldr.w	r3, [r1], #4
    6934:	d848      	bhi.n	69c8 <strcmp+0x260>
    6936:	d224      	bcs.n	6982 <strcmp+0x21a>
    6938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    693c:	fa82 f54c 	uadd8	r5, r2, ip
    6940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    6944:	faa5 f58c 	sel	r5, r5, ip
    6948:	d10a      	bne.n	6960 <strcmp+0x1f8>
    694a:	b965      	cbnz	r5, 6966 <strcmp+0x1fe>
    694c:	f851 3b04 	ldr.w	r3, [r1], #4
    6950:	ea84 0402 	eor.w	r4, r4, r2
    6954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    6958:	d10e      	bne.n	6978 <strcmp+0x210>
    695a:	f850 2b04 	ldr.w	r2, [r0], #4
    695e:	e7eb      	b.n	6938 <strcmp+0x1d0>
    6960:	ea4f 2313 	mov.w	r3, r3, lsr #8
    6964:	e055      	b.n	6a12 <strcmp+0x2aa>
    6966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    696a:	d14d      	bne.n	6a08 <strcmp+0x2a0>
    696c:	7808      	ldrb	r0, [r1, #0]
    696e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6972:	f1c0 0000 	rsb	r0, r0, #0
    6976:	4770      	bx	lr
    6978:	ea4f 6212 	mov.w	r2, r2, lsr #24
    697c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6980:	e047      	b.n	6a12 <strcmp+0x2aa>
    6982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    6986:	fa82 f54c 	uadd8	r5, r2, ip
    698a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    698e:	faa5 f58c 	sel	r5, r5, ip
    6992:	d10a      	bne.n	69aa <strcmp+0x242>
    6994:	b965      	cbnz	r5, 69b0 <strcmp+0x248>
    6996:	f851 3b04 	ldr.w	r3, [r1], #4
    699a:	ea84 0402 	eor.w	r4, r4, r2
    699e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    69a2:	d10c      	bne.n	69be <strcmp+0x256>
    69a4:	f850 2b04 	ldr.w	r2, [r0], #4
    69a8:	e7eb      	b.n	6982 <strcmp+0x21a>
    69aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    69ae:	e030      	b.n	6a12 <strcmp+0x2aa>
    69b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    69b4:	d128      	bne.n	6a08 <strcmp+0x2a0>
    69b6:	880b      	ldrh	r3, [r1, #0]
    69b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    69bc:	e029      	b.n	6a12 <strcmp+0x2aa>
    69be:	ea4f 4212 	mov.w	r2, r2, lsr #16
    69c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    69c6:	e024      	b.n	6a12 <strcmp+0x2aa>
    69c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    69cc:	fa82 f54c 	uadd8	r5, r2, ip
    69d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    69d4:	faa5 f58c 	sel	r5, r5, ip
    69d8:	d10a      	bne.n	69f0 <strcmp+0x288>
    69da:	b965      	cbnz	r5, 69f6 <strcmp+0x28e>
    69dc:	f851 3b04 	ldr.w	r3, [r1], #4
    69e0:	ea84 0402 	eor.w	r4, r4, r2
    69e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    69e8:	d109      	bne.n	69fe <strcmp+0x296>
    69ea:	f850 2b04 	ldr.w	r2, [r0], #4
    69ee:	e7eb      	b.n	69c8 <strcmp+0x260>
    69f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    69f4:	e00d      	b.n	6a12 <strcmp+0x2aa>
    69f6:	f015 0fff 	tst.w	r5, #255	; 0xff
    69fa:	d105      	bne.n	6a08 <strcmp+0x2a0>
    69fc:	680b      	ldr	r3, [r1, #0]
    69fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    6a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6a06:	e004      	b.n	6a12 <strcmp+0x2aa>
    6a08:	f04f 0000 	mov.w	r0, #0
    6a0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6a10:	4770      	bx	lr
    6a12:	ba12      	rev	r2, r2
    6a14:	ba1b      	rev	r3, r3
    6a16:	fa82 f44c 	uadd8	r4, r2, ip
    6a1a:	ea82 0403 	eor.w	r4, r2, r3
    6a1e:	faa4 f58c 	sel	r5, r4, ip
    6a22:	fab5 f485 	clz	r4, r5
    6a26:	fa02 f204 	lsl.w	r2, r2, r4
    6a2a:	fa03 f304 	lsl.w	r3, r3, r4
    6a2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    6a32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    6a36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    6a3a:	4770      	bx	lr

00006a3c <strcpy>:
    6a3c:	ea80 0201 	eor.w	r2, r0, r1
    6a40:	4684      	mov	ip, r0
    6a42:	f012 0f03 	tst.w	r2, #3
    6a46:	d14f      	bne.n	6ae8 <strcpy+0xac>
    6a48:	f011 0f03 	tst.w	r1, #3
    6a4c:	d132      	bne.n	6ab4 <strcpy+0x78>
    6a4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    6a52:	f011 0f04 	tst.w	r1, #4
    6a56:	f851 3b04 	ldr.w	r3, [r1], #4
    6a5a:	d00b      	beq.n	6a74 <strcpy+0x38>
    6a5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6a60:	439a      	bics	r2, r3
    6a62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a66:	bf04      	itt	eq
    6a68:	f84c 3b04 	streq.w	r3, [ip], #4
    6a6c:	f851 3b04 	ldreq.w	r3, [r1], #4
    6a70:	d116      	bne.n	6aa0 <strcpy+0x64>
    6a72:	bf00      	nop
    6a74:	f851 4b04 	ldr.w	r4, [r1], #4
    6a78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    6a7c:	439a      	bics	r2, r3
    6a7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    6a86:	d10b      	bne.n	6aa0 <strcpy+0x64>
    6a88:	f84c 3b04 	str.w	r3, [ip], #4
    6a8c:	43a2      	bics	r2, r4
    6a8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    6a92:	bf04      	itt	eq
    6a94:	f851 3b04 	ldreq.w	r3, [r1], #4
    6a98:	f84c 4b04 	streq.w	r4, [ip], #4
    6a9c:	d0ea      	beq.n	6a74 <strcpy+0x38>
    6a9e:	4623      	mov	r3, r4
    6aa0:	f80c 3b01 	strb.w	r3, [ip], #1
    6aa4:	f013 0fff 	tst.w	r3, #255	; 0xff
    6aa8:	ea4f 2333 	mov.w	r3, r3, ror #8
    6aac:	d1f8      	bne.n	6aa0 <strcpy+0x64>
    6aae:	f85d 4b04 	ldr.w	r4, [sp], #4
    6ab2:	4770      	bx	lr
    6ab4:	f011 0f01 	tst.w	r1, #1
    6ab8:	d006      	beq.n	6ac8 <strcpy+0x8c>
    6aba:	f811 2b01 	ldrb.w	r2, [r1], #1
    6abe:	f80c 2b01 	strb.w	r2, [ip], #1
    6ac2:	2a00      	cmp	r2, #0
    6ac4:	bf08      	it	eq
    6ac6:	4770      	bxeq	lr
    6ac8:	f011 0f02 	tst.w	r1, #2
    6acc:	d0bf      	beq.n	6a4e <strcpy+0x12>
    6ace:	f831 2b02 	ldrh.w	r2, [r1], #2
    6ad2:	f012 0fff 	tst.w	r2, #255	; 0xff
    6ad6:	bf16      	itet	ne
    6ad8:	f82c 2b02 	strhne.w	r2, [ip], #2
    6adc:	f88c 2000 	strbeq.w	r2, [ip]
    6ae0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    6ae4:	d1b3      	bne.n	6a4e <strcpy+0x12>
    6ae6:	4770      	bx	lr
    6ae8:	f811 2b01 	ldrb.w	r2, [r1], #1
    6aec:	f80c 2b01 	strb.w	r2, [ip], #1
    6af0:	2a00      	cmp	r2, #0
    6af2:	d1f9      	bne.n	6ae8 <strcpy+0xac>
    6af4:	4770      	bx	lr
    6af6:	bf00      	nop
	...

00006b00 <strlen>:
    6b00:	f890 f000 	pld	[r0]
    6b04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    6b08:	f020 0107 	bic.w	r1, r0, #7
    6b0c:	f06f 0c00 	mvn.w	ip, #0
    6b10:	f010 0407 	ands.w	r4, r0, #7
    6b14:	f891 f020 	pld	[r1, #32]
    6b18:	f040 8049 	bne.w	6bae <strlen+0xae>
    6b1c:	f04f 0400 	mov.w	r4, #0
    6b20:	f06f 0007 	mvn.w	r0, #7
    6b24:	e9d1 2300 	ldrd	r2, r3, [r1]
    6b28:	f891 f040 	pld	[r1, #64]	; 0x40
    6b2c:	f100 0008 	add.w	r0, r0, #8
    6b30:	fa82 f24c 	uadd8	r2, r2, ip
    6b34:	faa4 f28c 	sel	r2, r4, ip
    6b38:	fa83 f34c 	uadd8	r3, r3, ip
    6b3c:	faa2 f38c 	sel	r3, r2, ip
    6b40:	bb4b      	cbnz	r3, 6b96 <strlen+0x96>
    6b42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    6b46:	fa82 f24c 	uadd8	r2, r2, ip
    6b4a:	f100 0008 	add.w	r0, r0, #8
    6b4e:	faa4 f28c 	sel	r2, r4, ip
    6b52:	fa83 f34c 	uadd8	r3, r3, ip
    6b56:	faa2 f38c 	sel	r3, r2, ip
    6b5a:	b9e3      	cbnz	r3, 6b96 <strlen+0x96>
    6b5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    6b60:	fa82 f24c 	uadd8	r2, r2, ip
    6b64:	f100 0008 	add.w	r0, r0, #8
    6b68:	faa4 f28c 	sel	r2, r4, ip
    6b6c:	fa83 f34c 	uadd8	r3, r3, ip
    6b70:	faa2 f38c 	sel	r3, r2, ip
    6b74:	b97b      	cbnz	r3, 6b96 <strlen+0x96>
    6b76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    6b7a:	f101 0120 	add.w	r1, r1, #32
    6b7e:	fa82 f24c 	uadd8	r2, r2, ip
    6b82:	f100 0008 	add.w	r0, r0, #8
    6b86:	faa4 f28c 	sel	r2, r4, ip
    6b8a:	fa83 f34c 	uadd8	r3, r3, ip
    6b8e:	faa2 f38c 	sel	r3, r2, ip
    6b92:	2b00      	cmp	r3, #0
    6b94:	d0c6      	beq.n	6b24 <strlen+0x24>
    6b96:	2a00      	cmp	r2, #0
    6b98:	bf04      	itt	eq
    6b9a:	3004      	addeq	r0, #4
    6b9c:	461a      	moveq	r2, r3
    6b9e:	ba12      	rev	r2, r2
    6ba0:	fab2 f282 	clz	r2, r2
    6ba4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    6ba8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    6bac:	4770      	bx	lr
    6bae:	e9d1 2300 	ldrd	r2, r3, [r1]
    6bb2:	f004 0503 	and.w	r5, r4, #3
    6bb6:	f1c4 0000 	rsb	r0, r4, #0
    6bba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    6bbe:	f014 0f04 	tst.w	r4, #4
    6bc2:	f891 f040 	pld	[r1, #64]	; 0x40
    6bc6:	fa0c f505 	lsl.w	r5, ip, r5
    6bca:	ea62 0205 	orn	r2, r2, r5
    6bce:	bf1c      	itt	ne
    6bd0:	ea63 0305 	ornne	r3, r3, r5
    6bd4:	4662      	movne	r2, ip
    6bd6:	f04f 0400 	mov.w	r4, #0
    6bda:	e7a9      	b.n	6b30 <strlen+0x30>

00006bdc <__register_exitproc>:
    6bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6be0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6c60 <__register_exitproc+0x84>
    6be4:	4606      	mov	r6, r0
    6be6:	f8da 0000 	ldr.w	r0, [sl]
    6bea:	4698      	mov	r8, r3
    6bec:	460f      	mov	r7, r1
    6bee:	4691      	mov	r9, r2
    6bf0:	f7ff fda4 	bl	673c <__retarget_lock_acquire_recursive>
    6bf4:	4b18      	ldr	r3, [pc, #96]	; (6c58 <__register_exitproc+0x7c>)
    6bf6:	681c      	ldr	r4, [r3, #0]
    6bf8:	b324      	cbz	r4, 6c44 <__register_exitproc+0x68>
    6bfa:	6865      	ldr	r5, [r4, #4]
    6bfc:	2d1f      	cmp	r5, #31
    6bfe:	dc24      	bgt.n	6c4a <__register_exitproc+0x6e>
    6c00:	b95e      	cbnz	r6, 6c1a <__register_exitproc+0x3e>
    6c02:	1c6b      	adds	r3, r5, #1
    6c04:	3502      	adds	r5, #2
    6c06:	f8da 0000 	ldr.w	r0, [sl]
    6c0a:	6063      	str	r3, [r4, #4]
    6c0c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    6c10:	f7ff fd96 	bl	6740 <__retarget_lock_release_recursive>
    6c14:	2000      	movs	r0, #0
    6c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    6c1e:	2301      	movs	r3, #1
    6c20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    6c24:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    6c28:	40ab      	lsls	r3, r5
    6c2a:	431a      	orrs	r2, r3
    6c2c:	2e02      	cmp	r6, #2
    6c2e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    6c32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    6c36:	d1e4      	bne.n	6c02 <__register_exitproc+0x26>
    6c38:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    6c3c:	431a      	orrs	r2, r3
    6c3e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    6c42:	e7de      	b.n	6c02 <__register_exitproc+0x26>
    6c44:	4c05      	ldr	r4, [pc, #20]	; (6c5c <__register_exitproc+0x80>)
    6c46:	601c      	str	r4, [r3, #0]
    6c48:	e7d7      	b.n	6bfa <__register_exitproc+0x1e>
    6c4a:	f8da 0000 	ldr.w	r0, [sl]
    6c4e:	f7ff fd77 	bl	6740 <__retarget_lock_release_recursive>
    6c52:	f04f 30ff 	mov.w	r0, #4294967295
    6c56:	e7de      	b.n	6c16 <__register_exitproc+0x3a>
    6c58:	200027c0 	.word	0x200027c0
    6c5c:	200027c4 	.word	0x200027c4
    6c60:	200011b4 	.word	0x200011b4

00006c64 <_malloc_trim_r>:
    6c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c66:	4f24      	ldr	r7, [pc, #144]	; (6cf8 <_malloc_trim_r+0x94>)
    6c68:	460c      	mov	r4, r1
    6c6a:	4606      	mov	r6, r0
    6c6c:	f7fe fd10 	bl	5690 <__malloc_lock>
    6c70:	68bb      	ldr	r3, [r7, #8]
    6c72:	685d      	ldr	r5, [r3, #4]
    6c74:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    6c78:	310f      	adds	r1, #15
    6c7a:	f025 0503 	bic.w	r5, r5, #3
    6c7e:	194b      	adds	r3, r1, r5
    6c80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    6c84:	f023 030f 	bic.w	r3, r3, #15
    6c88:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    6c8c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    6c90:	db07      	blt.n	6ca2 <_malloc_trim_r+0x3e>
    6c92:	2100      	movs	r1, #0
    6c94:	4630      	mov	r0, r6
    6c96:	f7ff fcfb 	bl	6690 <_sbrk_r>
    6c9a:	68bb      	ldr	r3, [r7, #8]
    6c9c:	442b      	add	r3, r5
    6c9e:	4298      	cmp	r0, r3
    6ca0:	d004      	beq.n	6cac <_malloc_trim_r+0x48>
    6ca2:	4630      	mov	r0, r6
    6ca4:	f7fe fcfa 	bl	569c <__malloc_unlock>
    6ca8:	2000      	movs	r0, #0
    6caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cac:	4261      	negs	r1, r4
    6cae:	4630      	mov	r0, r6
    6cb0:	f7ff fcee 	bl	6690 <_sbrk_r>
    6cb4:	3001      	adds	r0, #1
    6cb6:	d00d      	beq.n	6cd4 <_malloc_trim_r+0x70>
    6cb8:	4a10      	ldr	r2, [pc, #64]	; (6cfc <_malloc_trim_r+0x98>)
    6cba:	68bb      	ldr	r3, [r7, #8]
    6cbc:	1b2d      	subs	r5, r5, r4
    6cbe:	f045 0501 	orr.w	r5, r5, #1
    6cc2:	605d      	str	r5, [r3, #4]
    6cc4:	6813      	ldr	r3, [r2, #0]
    6cc6:	4630      	mov	r0, r6
    6cc8:	1b1b      	subs	r3, r3, r4
    6cca:	6013      	str	r3, [r2, #0]
    6ccc:	f7fe fce6 	bl	569c <__malloc_unlock>
    6cd0:	2001      	movs	r0, #1
    6cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cd4:	2100      	movs	r1, #0
    6cd6:	4630      	mov	r0, r6
    6cd8:	f7ff fcda 	bl	6690 <_sbrk_r>
    6cdc:	68ba      	ldr	r2, [r7, #8]
    6cde:	1a83      	subs	r3, r0, r2
    6ce0:	2b0f      	cmp	r3, #15
    6ce2:	ddde      	ble.n	6ca2 <_malloc_trim_r+0x3e>
    6ce4:	f043 0301 	orr.w	r3, r3, #1
    6ce8:	6053      	str	r3, [r2, #4]
    6cea:	4b05      	ldr	r3, [pc, #20]	; (6d00 <_malloc_trim_r+0x9c>)
    6cec:	4903      	ldr	r1, [pc, #12]	; (6cfc <_malloc_trim_r+0x98>)
    6cee:	681b      	ldr	r3, [r3, #0]
    6cf0:	1ac0      	subs	r0, r0, r3
    6cf2:	6008      	str	r0, [r1, #0]
    6cf4:	e7d5      	b.n	6ca2 <_malloc_trim_r+0x3e>
    6cf6:	bf00      	nop
    6cf8:	2000132c 	.word	0x2000132c
    6cfc:	20002960 	.word	0x20002960
    6d00:	20001734 	.word	0x20001734

00006d04 <_free_r>:
    6d04:	2900      	cmp	r1, #0
    6d06:	d061      	beq.n	6dcc <_free_r+0xc8>
    6d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d0a:	460c      	mov	r4, r1
    6d0c:	4606      	mov	r6, r0
    6d0e:	f7fe fcbf 	bl	5690 <__malloc_lock>
    6d12:	f854 2c04 	ldr.w	r2, [r4, #-4]
    6d16:	4f7b      	ldr	r7, [pc, #492]	; (6f04 <_free_r+0x200>)
    6d18:	f1a4 0508 	sub.w	r5, r4, #8
    6d1c:	f022 0101 	bic.w	r1, r2, #1
    6d20:	eb05 0c01 	add.w	ip, r5, r1
    6d24:	68b8      	ldr	r0, [r7, #8]
    6d26:	f8dc 3004 	ldr.w	r3, [ip, #4]
    6d2a:	4560      	cmp	r0, ip
    6d2c:	f023 0303 	bic.w	r3, r3, #3
    6d30:	f000 808b 	beq.w	6e4a <_free_r+0x146>
    6d34:	07d2      	lsls	r2, r2, #31
    6d36:	f8cc 3004 	str.w	r3, [ip, #4]
    6d3a:	d432      	bmi.n	6da2 <_free_r+0x9e>
    6d3c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6d40:	1aad      	subs	r5, r5, r2
    6d42:	4411      	add	r1, r2
    6d44:	68aa      	ldr	r2, [r5, #8]
    6d46:	f107 0008 	add.w	r0, r7, #8
    6d4a:	4282      	cmp	r2, r0
    6d4c:	d06a      	beq.n	6e24 <_free_r+0x120>
    6d4e:	eb0c 0403 	add.w	r4, ip, r3
    6d52:	f8d4 e004 	ldr.w	lr, [r4, #4]
    6d56:	68ec      	ldr	r4, [r5, #12]
    6d58:	60d4      	str	r4, [r2, #12]
    6d5a:	f01e 0f01 	tst.w	lr, #1
    6d5e:	60a2      	str	r2, [r4, #8]
    6d60:	f000 8097 	beq.w	6e92 <_free_r+0x18e>
    6d64:	f041 0301 	orr.w	r3, r1, #1
    6d68:	606b      	str	r3, [r5, #4]
    6d6a:	f8cc 1000 	str.w	r1, [ip]
    6d6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6d72:	d235      	bcs.n	6de0 <_free_r+0xdc>
    6d74:	6878      	ldr	r0, [r7, #4]
    6d76:	08cb      	lsrs	r3, r1, #3
    6d78:	2201      	movs	r2, #1
    6d7a:	0949      	lsrs	r1, r1, #5
    6d7c:	3301      	adds	r3, #1
    6d7e:	408a      	lsls	r2, r1
    6d80:	4302      	orrs	r2, r0
    6d82:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    6d86:	607a      	str	r2, [r7, #4]
    6d88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    6d8c:	3a08      	subs	r2, #8
    6d8e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    6d92:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    6d96:	60cd      	str	r5, [r1, #12]
    6d98:	4630      	mov	r0, r6
    6d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6d9e:	f7fe bc7d 	b.w	569c <__malloc_unlock>
    6da2:	eb0c 0203 	add.w	r2, ip, r3
    6da6:	6852      	ldr	r2, [r2, #4]
    6da8:	07d0      	lsls	r0, r2, #31
    6daa:	d410      	bmi.n	6dce <_free_r+0xca>
    6dac:	4419      	add	r1, r3
    6dae:	f107 0008 	add.w	r0, r7, #8
    6db2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    6db6:	4283      	cmp	r3, r0
    6db8:	d073      	beq.n	6ea2 <_free_r+0x19e>
    6dba:	f8dc 200c 	ldr.w	r2, [ip, #12]
    6dbe:	60da      	str	r2, [r3, #12]
    6dc0:	6093      	str	r3, [r2, #8]
    6dc2:	f041 0301 	orr.w	r3, r1, #1
    6dc6:	606b      	str	r3, [r5, #4]
    6dc8:	5069      	str	r1, [r5, r1]
    6dca:	e7d0      	b.n	6d6e <_free_r+0x6a>
    6dcc:	4770      	bx	lr
    6dce:	f041 0301 	orr.w	r3, r1, #1
    6dd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    6dd6:	f844 3c04 	str.w	r3, [r4, #-4]
    6dda:	f8cc 1000 	str.w	r1, [ip]
    6dde:	d3c9      	bcc.n	6d74 <_free_r+0x70>
    6de0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    6de4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    6de8:	d248      	bcs.n	6e7c <_free_r+0x178>
    6dea:	098b      	lsrs	r3, r1, #6
    6dec:	f103 0039 	add.w	r0, r3, #57	; 0x39
    6df0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    6df4:	00c3      	lsls	r3, r0, #3
    6df6:	18f8      	adds	r0, r7, r3
    6df8:	58fb      	ldr	r3, [r7, r3]
    6dfa:	3808      	subs	r0, #8
    6dfc:	4298      	cmp	r0, r3
    6dfe:	d059      	beq.n	6eb4 <_free_r+0x1b0>
    6e00:	685a      	ldr	r2, [r3, #4]
    6e02:	f022 0203 	bic.w	r2, r2, #3
    6e06:	428a      	cmp	r2, r1
    6e08:	d902      	bls.n	6e10 <_free_r+0x10c>
    6e0a:	689b      	ldr	r3, [r3, #8]
    6e0c:	4298      	cmp	r0, r3
    6e0e:	d1f7      	bne.n	6e00 <_free_r+0xfc>
    6e10:	68d8      	ldr	r0, [r3, #12]
    6e12:	e9c5 3002 	strd	r3, r0, [r5, #8]
    6e16:	6085      	str	r5, [r0, #8]
    6e18:	60dd      	str	r5, [r3, #12]
    6e1a:	4630      	mov	r0, r6
    6e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6e20:	f7fe bc3c 	b.w	569c <__malloc_unlock>
    6e24:	eb0c 0203 	add.w	r2, ip, r3
    6e28:	6852      	ldr	r2, [r2, #4]
    6e2a:	07d2      	lsls	r2, r2, #31
    6e2c:	d463      	bmi.n	6ef6 <_free_r+0x1f2>
    6e2e:	440b      	add	r3, r1
    6e30:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    6e34:	60ca      	str	r2, [r1, #12]
    6e36:	6091      	str	r1, [r2, #8]
    6e38:	f043 0201 	orr.w	r2, r3, #1
    6e3c:	606a      	str	r2, [r5, #4]
    6e3e:	4630      	mov	r0, r6
    6e40:	50eb      	str	r3, [r5, r3]
    6e42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6e46:	f7fe bc29 	b.w	569c <__malloc_unlock>
    6e4a:	440b      	add	r3, r1
    6e4c:	07d1      	lsls	r1, r2, #31
    6e4e:	d407      	bmi.n	6e60 <_free_r+0x15c>
    6e50:	f854 2c08 	ldr.w	r2, [r4, #-8]
    6e54:	1aad      	subs	r5, r5, r2
    6e56:	4413      	add	r3, r2
    6e58:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    6e5c:	60ca      	str	r2, [r1, #12]
    6e5e:	6091      	str	r1, [r2, #8]
    6e60:	f043 0201 	orr.w	r2, r3, #1
    6e64:	606a      	str	r2, [r5, #4]
    6e66:	4a28      	ldr	r2, [pc, #160]	; (6f08 <_free_r+0x204>)
    6e68:	60bd      	str	r5, [r7, #8]
    6e6a:	6812      	ldr	r2, [r2, #0]
    6e6c:	429a      	cmp	r2, r3
    6e6e:	d893      	bhi.n	6d98 <_free_r+0x94>
    6e70:	4b26      	ldr	r3, [pc, #152]	; (6f0c <_free_r+0x208>)
    6e72:	4630      	mov	r0, r6
    6e74:	6819      	ldr	r1, [r3, #0]
    6e76:	f7ff fef5 	bl	6c64 <_malloc_trim_r>
    6e7a:	e78d      	b.n	6d98 <_free_r+0x94>
    6e7c:	2b14      	cmp	r3, #20
    6e7e:	d90a      	bls.n	6e96 <_free_r+0x192>
    6e80:	2b54      	cmp	r3, #84	; 0x54
    6e82:	d81f      	bhi.n	6ec4 <_free_r+0x1c0>
    6e84:	0b0b      	lsrs	r3, r1, #12
    6e86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    6e8a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    6e8e:	00c3      	lsls	r3, r0, #3
    6e90:	e7b1      	b.n	6df6 <_free_r+0xf2>
    6e92:	4419      	add	r1, r3
    6e94:	e78d      	b.n	6db2 <_free_r+0xae>
    6e96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6e9a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    6e9e:	00c3      	lsls	r3, r0, #3
    6ea0:	e7a9      	b.n	6df6 <_free_r+0xf2>
    6ea2:	f041 0301 	orr.w	r3, r1, #1
    6ea6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    6eaa:	e9c5 0002 	strd	r0, r0, [r5, #8]
    6eae:	606b      	str	r3, [r5, #4]
    6eb0:	5069      	str	r1, [r5, r1]
    6eb2:	e771      	b.n	6d98 <_free_r+0x94>
    6eb4:	6879      	ldr	r1, [r7, #4]
    6eb6:	1092      	asrs	r2, r2, #2
    6eb8:	2401      	movs	r4, #1
    6eba:	fa04 f202 	lsl.w	r2, r4, r2
    6ebe:	430a      	orrs	r2, r1
    6ec0:	607a      	str	r2, [r7, #4]
    6ec2:	e7a6      	b.n	6e12 <_free_r+0x10e>
    6ec4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6ec8:	d806      	bhi.n	6ed8 <_free_r+0x1d4>
    6eca:	0bcb      	lsrs	r3, r1, #15
    6ecc:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6ed0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    6ed4:	00c3      	lsls	r3, r0, #3
    6ed6:	e78e      	b.n	6df6 <_free_r+0xf2>
    6ed8:	f240 5254 	movw	r2, #1364	; 0x554
    6edc:	4293      	cmp	r3, r2
    6ede:	d806      	bhi.n	6eee <_free_r+0x1ea>
    6ee0:	0c8b      	lsrs	r3, r1, #18
    6ee2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    6ee6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    6eea:	00c3      	lsls	r3, r0, #3
    6eec:	e783      	b.n	6df6 <_free_r+0xf2>
    6eee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    6ef2:	227e      	movs	r2, #126	; 0x7e
    6ef4:	e77f      	b.n	6df6 <_free_r+0xf2>
    6ef6:	f041 0301 	orr.w	r3, r1, #1
    6efa:	606b      	str	r3, [r5, #4]
    6efc:	f8cc 1000 	str.w	r1, [ip]
    6f00:	e74a      	b.n	6d98 <_free_r+0x94>
    6f02:	bf00      	nop
    6f04:	2000132c 	.word	0x2000132c
    6f08:	20001738 	.word	0x20001738
    6f0c:	20002990 	.word	0x20002990

00006f10 <__ascii_mbtowc>:
    6f10:	b082      	sub	sp, #8
    6f12:	b149      	cbz	r1, 6f28 <__ascii_mbtowc+0x18>
    6f14:	b15a      	cbz	r2, 6f2e <__ascii_mbtowc+0x1e>
    6f16:	b16b      	cbz	r3, 6f34 <__ascii_mbtowc+0x24>
    6f18:	7813      	ldrb	r3, [r2, #0]
    6f1a:	600b      	str	r3, [r1, #0]
    6f1c:	7812      	ldrb	r2, [r2, #0]
    6f1e:	1e10      	subs	r0, r2, #0
    6f20:	bf18      	it	ne
    6f22:	2001      	movne	r0, #1
    6f24:	b002      	add	sp, #8
    6f26:	4770      	bx	lr
    6f28:	a901      	add	r1, sp, #4
    6f2a:	2a00      	cmp	r2, #0
    6f2c:	d1f3      	bne.n	6f16 <__ascii_mbtowc+0x6>
    6f2e:	4610      	mov	r0, r2
    6f30:	b002      	add	sp, #8
    6f32:	4770      	bx	lr
    6f34:	f06f 0001 	mvn.w	r0, #1
    6f38:	e7f4      	b.n	6f24 <__ascii_mbtowc+0x14>
    6f3a:	bf00      	nop

00006f3c <_Balloc>:
    6f3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6f3e:	b570      	push	{r4, r5, r6, lr}
    6f40:	4605      	mov	r5, r0
    6f42:	460c      	mov	r4, r1
    6f44:	b14b      	cbz	r3, 6f5a <_Balloc+0x1e>
    6f46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6f4a:	b180      	cbz	r0, 6f6e <_Balloc+0x32>
    6f4c:	6802      	ldr	r2, [r0, #0]
    6f4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    6f52:	2300      	movs	r3, #0
    6f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
    6f58:	bd70      	pop	{r4, r5, r6, pc}
    6f5a:	2221      	movs	r2, #33	; 0x21
    6f5c:	2104      	movs	r1, #4
    6f5e:	f000 fde7 	bl	7b30 <_calloc_r>
    6f62:	4603      	mov	r3, r0
    6f64:	6468      	str	r0, [r5, #68]	; 0x44
    6f66:	2800      	cmp	r0, #0
    6f68:	d1ed      	bne.n	6f46 <_Balloc+0xa>
    6f6a:	2000      	movs	r0, #0
    6f6c:	bd70      	pop	{r4, r5, r6, pc}
    6f6e:	2101      	movs	r1, #1
    6f70:	fa01 f604 	lsl.w	r6, r1, r4
    6f74:	1d72      	adds	r2, r6, #5
    6f76:	0092      	lsls	r2, r2, #2
    6f78:	4628      	mov	r0, r5
    6f7a:	f000 fdd9 	bl	7b30 <_calloc_r>
    6f7e:	2800      	cmp	r0, #0
    6f80:	d0f3      	beq.n	6f6a <_Balloc+0x2e>
    6f82:	e9c0 4601 	strd	r4, r6, [r0, #4]
    6f86:	e7e4      	b.n	6f52 <_Balloc+0x16>

00006f88 <_Bfree>:
    6f88:	b131      	cbz	r1, 6f98 <_Bfree+0x10>
    6f8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6f8c:	684a      	ldr	r2, [r1, #4]
    6f8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    6f92:	6008      	str	r0, [r1, #0]
    6f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    6f98:	4770      	bx	lr
    6f9a:	bf00      	nop

00006f9c <__multadd>:
    6f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fa0:	690e      	ldr	r6, [r1, #16]
    6fa2:	4680      	mov	r8, r0
    6fa4:	460f      	mov	r7, r1
    6fa6:	461d      	mov	r5, r3
    6fa8:	f101 0e14 	add.w	lr, r1, #20
    6fac:	2000      	movs	r0, #0
    6fae:	f8de 1000 	ldr.w	r1, [lr]
    6fb2:	b28c      	uxth	r4, r1
    6fb4:	fb02 5304 	mla	r3, r2, r4, r5
    6fb8:	0c09      	lsrs	r1, r1, #16
    6fba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    6fbe:	fb02 cc01 	mla	ip, r2, r1, ip
    6fc2:	3001      	adds	r0, #1
    6fc4:	b29c      	uxth	r4, r3
    6fc6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    6fca:	4286      	cmp	r6, r0
    6fcc:	f84e 4b04 	str.w	r4, [lr], #4
    6fd0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    6fd4:	dceb      	bgt.n	6fae <__multadd+0x12>
    6fd6:	b13d      	cbz	r5, 6fe8 <__multadd+0x4c>
    6fd8:	68bb      	ldr	r3, [r7, #8]
    6fda:	42b3      	cmp	r3, r6
    6fdc:	dd07      	ble.n	6fee <__multadd+0x52>
    6fde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    6fe2:	3601      	adds	r6, #1
    6fe4:	615d      	str	r5, [r3, #20]
    6fe6:	613e      	str	r6, [r7, #16]
    6fe8:	4638      	mov	r0, r7
    6fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fee:	6879      	ldr	r1, [r7, #4]
    6ff0:	4640      	mov	r0, r8
    6ff2:	3101      	adds	r1, #1
    6ff4:	f7ff ffa2 	bl	6f3c <_Balloc>
    6ff8:	4604      	mov	r4, r0
    6ffa:	b1b0      	cbz	r0, 702a <__multadd+0x8e>
    6ffc:	693a      	ldr	r2, [r7, #16]
    6ffe:	3202      	adds	r2, #2
    7000:	f107 010c 	add.w	r1, r7, #12
    7004:	0092      	lsls	r2, r2, #2
    7006:	300c      	adds	r0, #12
    7008:	f7fc fab0 	bl	356c <memcpy>
    700c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    7010:	687a      	ldr	r2, [r7, #4]
    7012:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7016:	6039      	str	r1, [r7, #0]
    7018:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    701c:	4627      	mov	r7, r4
    701e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    7022:	3601      	adds	r6, #1
    7024:	615d      	str	r5, [r3, #20]
    7026:	613e      	str	r6, [r7, #16]
    7028:	e7de      	b.n	6fe8 <__multadd+0x4c>
    702a:	4b03      	ldr	r3, [pc, #12]	; (7038 <__multadd+0x9c>)
    702c:	4803      	ldr	r0, [pc, #12]	; (703c <__multadd+0xa0>)
    702e:	4622      	mov	r2, r4
    7030:	21ba      	movs	r1, #186	; 0xba
    7032:	f000 fd5d 	bl	7af0 <__assert_func>
    7036:	bf00      	nop
    7038:	2000068c 	.word	0x2000068c
    703c:	200006a0 	.word	0x200006a0

00007040 <__hi0bits>:
    7040:	0c03      	lsrs	r3, r0, #16
    7042:	041b      	lsls	r3, r3, #16
    7044:	b9d3      	cbnz	r3, 707c <__hi0bits+0x3c>
    7046:	0400      	lsls	r0, r0, #16
    7048:	2310      	movs	r3, #16
    704a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    704e:	bf04      	itt	eq
    7050:	0200      	lsleq	r0, r0, #8
    7052:	3308      	addeq	r3, #8
    7054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    7058:	bf04      	itt	eq
    705a:	0100      	lsleq	r0, r0, #4
    705c:	3304      	addeq	r3, #4
    705e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    7062:	bf04      	itt	eq
    7064:	0080      	lsleq	r0, r0, #2
    7066:	3302      	addeq	r3, #2
    7068:	2800      	cmp	r0, #0
    706a:	db05      	blt.n	7078 <__hi0bits+0x38>
    706c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    7070:	f103 0301 	add.w	r3, r3, #1
    7074:	bf08      	it	eq
    7076:	2320      	moveq	r3, #32
    7078:	4618      	mov	r0, r3
    707a:	4770      	bx	lr
    707c:	2300      	movs	r3, #0
    707e:	e7e4      	b.n	704a <__hi0bits+0xa>

00007080 <__lo0bits>:
    7080:	6803      	ldr	r3, [r0, #0]
    7082:	f013 0207 	ands.w	r2, r3, #7
    7086:	d008      	beq.n	709a <__lo0bits+0x1a>
    7088:	07d9      	lsls	r1, r3, #31
    708a:	d41f      	bmi.n	70cc <__lo0bits+0x4c>
    708c:	079a      	lsls	r2, r3, #30
    708e:	d522      	bpl.n	70d6 <__lo0bits+0x56>
    7090:	085b      	lsrs	r3, r3, #1
    7092:	6003      	str	r3, [r0, #0]
    7094:	2201      	movs	r2, #1
    7096:	4610      	mov	r0, r2
    7098:	4770      	bx	lr
    709a:	b299      	uxth	r1, r3
    709c:	b909      	cbnz	r1, 70a2 <__lo0bits+0x22>
    709e:	0c1b      	lsrs	r3, r3, #16
    70a0:	2210      	movs	r2, #16
    70a2:	b2d9      	uxtb	r1, r3
    70a4:	b909      	cbnz	r1, 70aa <__lo0bits+0x2a>
    70a6:	3208      	adds	r2, #8
    70a8:	0a1b      	lsrs	r3, r3, #8
    70aa:	0719      	lsls	r1, r3, #28
    70ac:	bf04      	itt	eq
    70ae:	091b      	lsreq	r3, r3, #4
    70b0:	3204      	addeq	r2, #4
    70b2:	0799      	lsls	r1, r3, #30
    70b4:	bf04      	itt	eq
    70b6:	089b      	lsreq	r3, r3, #2
    70b8:	3202      	addeq	r2, #2
    70ba:	07d9      	lsls	r1, r3, #31
    70bc:	d403      	bmi.n	70c6 <__lo0bits+0x46>
    70be:	085b      	lsrs	r3, r3, #1
    70c0:	f102 0201 	add.w	r2, r2, #1
    70c4:	d005      	beq.n	70d2 <__lo0bits+0x52>
    70c6:	6003      	str	r3, [r0, #0]
    70c8:	4610      	mov	r0, r2
    70ca:	4770      	bx	lr
    70cc:	2200      	movs	r2, #0
    70ce:	4610      	mov	r0, r2
    70d0:	4770      	bx	lr
    70d2:	2220      	movs	r2, #32
    70d4:	e7df      	b.n	7096 <__lo0bits+0x16>
    70d6:	089b      	lsrs	r3, r3, #2
    70d8:	2202      	movs	r2, #2
    70da:	6003      	str	r3, [r0, #0]
    70dc:	4610      	mov	r0, r2
    70de:	4770      	bx	lr

000070e0 <__i2b>:
    70e0:	b538      	push	{r3, r4, r5, lr}
    70e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    70e4:	4604      	mov	r4, r0
    70e6:	460d      	mov	r5, r1
    70e8:	b14b      	cbz	r3, 70fe <__i2b+0x1e>
    70ea:	6858      	ldr	r0, [r3, #4]
    70ec:	b1b0      	cbz	r0, 711c <__i2b+0x3c>
    70ee:	6802      	ldr	r2, [r0, #0]
    70f0:	605a      	str	r2, [r3, #4]
    70f2:	2200      	movs	r2, #0
    70f4:	2301      	movs	r3, #1
    70f6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    70fa:	60c2      	str	r2, [r0, #12]
    70fc:	bd38      	pop	{r3, r4, r5, pc}
    70fe:	2221      	movs	r2, #33	; 0x21
    7100:	2104      	movs	r1, #4
    7102:	f000 fd15 	bl	7b30 <_calloc_r>
    7106:	4603      	mov	r3, r0
    7108:	6460      	str	r0, [r4, #68]	; 0x44
    710a:	2800      	cmp	r0, #0
    710c:	d1ed      	bne.n	70ea <__i2b+0xa>
    710e:	4b09      	ldr	r3, [pc, #36]	; (7134 <__i2b+0x54>)
    7110:	4809      	ldr	r0, [pc, #36]	; (7138 <__i2b+0x58>)
    7112:	2200      	movs	r2, #0
    7114:	f240 1145 	movw	r1, #325	; 0x145
    7118:	f000 fcea 	bl	7af0 <__assert_func>
    711c:	221c      	movs	r2, #28
    711e:	2101      	movs	r1, #1
    7120:	4620      	mov	r0, r4
    7122:	f000 fd05 	bl	7b30 <_calloc_r>
    7126:	2800      	cmp	r0, #0
    7128:	d0f1      	beq.n	710e <__i2b+0x2e>
    712a:	2201      	movs	r2, #1
    712c:	2302      	movs	r3, #2
    712e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    7132:	e7de      	b.n	70f2 <__i2b+0x12>
    7134:	2000068c 	.word	0x2000068c
    7138:	200006a0 	.word	0x200006a0

0000713c <__multiply>:
    713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7140:	690e      	ldr	r6, [r1, #16]
    7142:	6915      	ldr	r5, [r2, #16]
    7144:	42ae      	cmp	r6, r5
    7146:	b085      	sub	sp, #20
    7148:	4688      	mov	r8, r1
    714a:	4614      	mov	r4, r2
    714c:	db05      	blt.n	715a <__multiply+0x1e>
    714e:	462a      	mov	r2, r5
    7150:	4623      	mov	r3, r4
    7152:	4635      	mov	r5, r6
    7154:	460c      	mov	r4, r1
    7156:	4616      	mov	r6, r2
    7158:	4698      	mov	r8, r3
    715a:	68a3      	ldr	r3, [r4, #8]
    715c:	6861      	ldr	r1, [r4, #4]
    715e:	19af      	adds	r7, r5, r6
    7160:	42bb      	cmp	r3, r7
    7162:	bfb8      	it	lt
    7164:	3101      	addlt	r1, #1
    7166:	f7ff fee9 	bl	6f3c <_Balloc>
    716a:	9001      	str	r0, [sp, #4]
    716c:	2800      	cmp	r0, #0
    716e:	f000 8087 	beq.w	7280 <__multiply+0x144>
    7172:	9b01      	ldr	r3, [sp, #4]
    7174:	f103 0914 	add.w	r9, r3, #20
    7178:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    717c:	45d1      	cmp	r9, sl
    717e:	d205      	bcs.n	718c <__multiply+0x50>
    7180:	464b      	mov	r3, r9
    7182:	2200      	movs	r2, #0
    7184:	f843 2b04 	str.w	r2, [r3], #4
    7188:	459a      	cmp	sl, r3
    718a:	d8fb      	bhi.n	7184 <__multiply+0x48>
    718c:	f108 0814 	add.w	r8, r8, #20
    7190:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    7194:	f104 0314 	add.w	r3, r4, #20
    7198:	45d8      	cmp	r8, fp
    719a:	461a      	mov	r2, r3
    719c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    71a0:	d25f      	bcs.n	7262 <__multiply+0x126>
    71a2:	1b2b      	subs	r3, r5, r4
    71a4:	3b15      	subs	r3, #21
    71a6:	f023 0303 	bic.w	r3, r3, #3
    71aa:	3304      	adds	r3, #4
    71ac:	3415      	adds	r4, #21
    71ae:	42a5      	cmp	r5, r4
    71b0:	bf38      	it	cc
    71b2:	2304      	movcc	r3, #4
    71b4:	e9cd a702 	strd	sl, r7, [sp, #8]
    71b8:	46ac      	mov	ip, r5
    71ba:	461f      	mov	r7, r3
    71bc:	4692      	mov	sl, r2
    71be:	e005      	b.n	71cc <__multiply+0x90>
    71c0:	0c09      	lsrs	r1, r1, #16
    71c2:	d129      	bne.n	7218 <__multiply+0xdc>
    71c4:	45c3      	cmp	fp, r8
    71c6:	f109 0904 	add.w	r9, r9, #4
    71ca:	d948      	bls.n	725e <__multiply+0x122>
    71cc:	f858 1b04 	ldr.w	r1, [r8], #4
    71d0:	b28d      	uxth	r5, r1
    71d2:	2d00      	cmp	r5, #0
    71d4:	d0f4      	beq.n	71c0 <__multiply+0x84>
    71d6:	4656      	mov	r6, sl
    71d8:	464c      	mov	r4, r9
    71da:	2300      	movs	r3, #0
    71dc:	f856 1b04 	ldr.w	r1, [r6], #4
    71e0:	6822      	ldr	r2, [r4, #0]
    71e2:	fa1f fe81 	uxth.w	lr, r1
    71e6:	b290      	uxth	r0, r2
    71e8:	0c09      	lsrs	r1, r1, #16
    71ea:	fb05 000e 	mla	r0, r5, lr, r0
    71ee:	0c12      	lsrs	r2, r2, #16
    71f0:	4403      	add	r3, r0
    71f2:	fb05 2201 	mla	r2, r5, r1, r2
    71f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    71fa:	b29b      	uxth	r3, r3
    71fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    7200:	45b4      	cmp	ip, r6
    7202:	f844 3b04 	str.w	r3, [r4], #4
    7206:	ea4f 4312 	mov.w	r3, r2, lsr #16
    720a:	d8e7      	bhi.n	71dc <__multiply+0xa0>
    720c:	f849 3007 	str.w	r3, [r9, r7]
    7210:	f858 1c04 	ldr.w	r1, [r8, #-4]
    7214:	0c09      	lsrs	r1, r1, #16
    7216:	d0d5      	beq.n	71c4 <__multiply+0x88>
    7218:	f8d9 3000 	ldr.w	r3, [r9]
    721c:	4650      	mov	r0, sl
    721e:	461a      	mov	r2, r3
    7220:	464c      	mov	r4, r9
    7222:	2600      	movs	r6, #0
    7224:	8805      	ldrh	r5, [r0, #0]
    7226:	0c12      	lsrs	r2, r2, #16
    7228:	fb01 2205 	mla	r2, r1, r5, r2
    722c:	4416      	add	r6, r2
    722e:	b29b      	uxth	r3, r3
    7230:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    7234:	f844 3b04 	str.w	r3, [r4], #4
    7238:	f850 5b04 	ldr.w	r5, [r0], #4
    723c:	6822      	ldr	r2, [r4, #0]
    723e:	0c2d      	lsrs	r5, r5, #16
    7240:	b293      	uxth	r3, r2
    7242:	fb01 3305 	mla	r3, r1, r5, r3
    7246:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    724a:	4584      	cmp	ip, r0
    724c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    7250:	d8e8      	bhi.n	7224 <__multiply+0xe8>
    7252:	45c3      	cmp	fp, r8
    7254:	f849 3007 	str.w	r3, [r9, r7]
    7258:	f109 0904 	add.w	r9, r9, #4
    725c:	d8b6      	bhi.n	71cc <__multiply+0x90>
    725e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    7262:	2f00      	cmp	r7, #0
    7264:	dc02      	bgt.n	726c <__multiply+0x130>
    7266:	e005      	b.n	7274 <__multiply+0x138>
    7268:	3f01      	subs	r7, #1
    726a:	d003      	beq.n	7274 <__multiply+0x138>
    726c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    7270:	2b00      	cmp	r3, #0
    7272:	d0f9      	beq.n	7268 <__multiply+0x12c>
    7274:	9b01      	ldr	r3, [sp, #4]
    7276:	4618      	mov	r0, r3
    7278:	611f      	str	r7, [r3, #16]
    727a:	b005      	add	sp, #20
    727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7280:	4b03      	ldr	r3, [pc, #12]	; (7290 <__multiply+0x154>)
    7282:	4804      	ldr	r0, [pc, #16]	; (7294 <__multiply+0x158>)
    7284:	9a01      	ldr	r2, [sp, #4]
    7286:	f44f 71b1 	mov.w	r1, #354	; 0x162
    728a:	f000 fc31 	bl	7af0 <__assert_func>
    728e:	bf00      	nop
    7290:	2000068c 	.word	0x2000068c
    7294:	200006a0 	.word	0x200006a0

00007298 <__pow5mult>:
    7298:	f012 0303 	ands.w	r3, r2, #3
    729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72a0:	4614      	mov	r4, r2
    72a2:	4606      	mov	r6, r0
    72a4:	d132      	bne.n	730c <__pow5mult+0x74>
    72a6:	460d      	mov	r5, r1
    72a8:	10a4      	asrs	r4, r4, #2
    72aa:	d020      	beq.n	72ee <__pow5mult+0x56>
    72ac:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    72b0:	f1b8 0f00 	cmp.w	r8, #0
    72b4:	d033      	beq.n	731e <__pow5mult+0x86>
    72b6:	07e3      	lsls	r3, r4, #31
    72b8:	f04f 0700 	mov.w	r7, #0
    72bc:	d407      	bmi.n	72ce <__pow5mult+0x36>
    72be:	1064      	asrs	r4, r4, #1
    72c0:	d015      	beq.n	72ee <__pow5mult+0x56>
    72c2:	f8d8 0000 	ldr.w	r0, [r8]
    72c6:	b1a8      	cbz	r0, 72f4 <__pow5mult+0x5c>
    72c8:	4680      	mov	r8, r0
    72ca:	07e3      	lsls	r3, r4, #31
    72cc:	d5f7      	bpl.n	72be <__pow5mult+0x26>
    72ce:	4642      	mov	r2, r8
    72d0:	4629      	mov	r1, r5
    72d2:	4630      	mov	r0, r6
    72d4:	f7ff ff32 	bl	713c <__multiply>
    72d8:	b1b5      	cbz	r5, 7308 <__pow5mult+0x70>
    72da:	6869      	ldr	r1, [r5, #4]
    72dc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    72de:	1064      	asrs	r4, r4, #1
    72e0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    72e4:	602a      	str	r2, [r5, #0]
    72e6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    72ea:	4605      	mov	r5, r0
    72ec:	d1e9      	bne.n	72c2 <__pow5mult+0x2a>
    72ee:	4628      	mov	r0, r5
    72f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72f4:	4642      	mov	r2, r8
    72f6:	4641      	mov	r1, r8
    72f8:	4630      	mov	r0, r6
    72fa:	f7ff ff1f 	bl	713c <__multiply>
    72fe:	f8c8 0000 	str.w	r0, [r8]
    7302:	6007      	str	r7, [r0, #0]
    7304:	4680      	mov	r8, r0
    7306:	e7e0      	b.n	72ca <__pow5mult+0x32>
    7308:	4605      	mov	r5, r0
    730a:	e7d8      	b.n	72be <__pow5mult+0x26>
    730c:	3b01      	subs	r3, #1
    730e:	4a0f      	ldr	r2, [pc, #60]	; (734c <__pow5mult+0xb4>)
    7310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7314:	2300      	movs	r3, #0
    7316:	f7ff fe41 	bl	6f9c <__multadd>
    731a:	4605      	mov	r5, r0
    731c:	e7c4      	b.n	72a8 <__pow5mult+0x10>
    731e:	2101      	movs	r1, #1
    7320:	4630      	mov	r0, r6
    7322:	f7ff fe0b 	bl	6f3c <_Balloc>
    7326:	4680      	mov	r8, r0
    7328:	b140      	cbz	r0, 733c <__pow5mult+0xa4>
    732a:	2301      	movs	r3, #1
    732c:	f240 2271 	movw	r2, #625	; 0x271
    7330:	e9c0 3204 	strd	r3, r2, [r0, #16]
    7334:	2300      	movs	r3, #0
    7336:	6430      	str	r0, [r6, #64]	; 0x40
    7338:	6003      	str	r3, [r0, #0]
    733a:	e7bc      	b.n	72b6 <__pow5mult+0x1e>
    733c:	4b04      	ldr	r3, [pc, #16]	; (7350 <__pow5mult+0xb8>)
    733e:	4805      	ldr	r0, [pc, #20]	; (7354 <__pow5mult+0xbc>)
    7340:	4642      	mov	r2, r8
    7342:	f240 1145 	movw	r1, #325	; 0x145
    7346:	f000 fbd3 	bl	7af0 <__assert_func>
    734a:	bf00      	nop
    734c:	20000c4c 	.word	0x20000c4c
    7350:	2000068c 	.word	0x2000068c
    7354:	200006a0 	.word	0x200006a0

00007358 <__lshift>:
    7358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    735c:	460d      	mov	r5, r1
    735e:	4614      	mov	r4, r2
    7360:	692f      	ldr	r7, [r5, #16]
    7362:	68ab      	ldr	r3, [r5, #8]
    7364:	6849      	ldr	r1, [r1, #4]
    7366:	eb07 1762 	add.w	r7, r7, r2, asr #5
    736a:	1c7e      	adds	r6, r7, #1
    736c:	429e      	cmp	r6, r3
    736e:	4680      	mov	r8, r0
    7370:	ea4f 1962 	mov.w	r9, r2, asr #5
    7374:	dd04      	ble.n	7380 <__lshift+0x28>
    7376:	005b      	lsls	r3, r3, #1
    7378:	429e      	cmp	r6, r3
    737a:	f101 0101 	add.w	r1, r1, #1
    737e:	dcfa      	bgt.n	7376 <__lshift+0x1e>
    7380:	4640      	mov	r0, r8
    7382:	f7ff fddb 	bl	6f3c <_Balloc>
    7386:	4684      	mov	ip, r0
    7388:	2800      	cmp	r0, #0
    738a:	d052      	beq.n	7432 <__lshift+0xda>
    738c:	f1b9 0f00 	cmp.w	r9, #0
    7390:	f100 0214 	add.w	r2, r0, #20
    7394:	dd0e      	ble.n	73b4 <__lshift+0x5c>
    7396:	f109 0105 	add.w	r1, r9, #5
    739a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    739e:	4613      	mov	r3, r2
    73a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    73a4:	2000      	movs	r0, #0
    73a6:	f843 0b04 	str.w	r0, [r3], #4
    73aa:	428b      	cmp	r3, r1
    73ac:	d1fb      	bne.n	73a6 <__lshift+0x4e>
    73ae:	f1ae 0314 	sub.w	r3, lr, #20
    73b2:	441a      	add	r2, r3
    73b4:	6929      	ldr	r1, [r5, #16]
    73b6:	f105 0314 	add.w	r3, r5, #20
    73ba:	f014 0e1f 	ands.w	lr, r4, #31
    73be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    73c2:	d02e      	beq.n	7422 <__lshift+0xca>
    73c4:	f1ce 0920 	rsb	r9, lr, #32
    73c8:	4610      	mov	r0, r2
    73ca:	f04f 0a00 	mov.w	sl, #0
    73ce:	681c      	ldr	r4, [r3, #0]
    73d0:	fa04 f40e 	lsl.w	r4, r4, lr
    73d4:	ea44 040a 	orr.w	r4, r4, sl
    73d8:	f840 4b04 	str.w	r4, [r0], #4
    73dc:	f853 4b04 	ldr.w	r4, [r3], #4
    73e0:	4299      	cmp	r1, r3
    73e2:	fa24 fa09 	lsr.w	sl, r4, r9
    73e6:	d8f2      	bhi.n	73ce <__lshift+0x76>
    73e8:	1b4b      	subs	r3, r1, r5
    73ea:	3b15      	subs	r3, #21
    73ec:	f023 0303 	bic.w	r3, r3, #3
    73f0:	3304      	adds	r3, #4
    73f2:	f105 0015 	add.w	r0, r5, #21
    73f6:	4281      	cmp	r1, r0
    73f8:	bf38      	it	cc
    73fa:	2304      	movcc	r3, #4
    73fc:	f1ba 0f00 	cmp.w	sl, #0
    7400:	bf18      	it	ne
    7402:	4637      	movne	r7, r6
    7404:	f842 a003 	str.w	sl, [r2, r3]
    7408:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    740c:	686a      	ldr	r2, [r5, #4]
    740e:	f8cc 7010 	str.w	r7, [ip, #16]
    7412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7416:	6029      	str	r1, [r5, #0]
    7418:	4660      	mov	r0, ip
    741a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7422:	3a04      	subs	r2, #4
    7424:	f853 0b04 	ldr.w	r0, [r3], #4
    7428:	f842 0f04 	str.w	r0, [r2, #4]!
    742c:	4299      	cmp	r1, r3
    742e:	d8f9      	bhi.n	7424 <__lshift+0xcc>
    7430:	e7ea      	b.n	7408 <__lshift+0xb0>
    7432:	4b03      	ldr	r3, [pc, #12]	; (7440 <__lshift+0xe8>)
    7434:	4803      	ldr	r0, [pc, #12]	; (7444 <__lshift+0xec>)
    7436:	4662      	mov	r2, ip
    7438:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    743c:	f000 fb58 	bl	7af0 <__assert_func>
    7440:	2000068c 	.word	0x2000068c
    7444:	200006a0 	.word	0x200006a0

00007448 <__mcmp>:
    7448:	690b      	ldr	r3, [r1, #16]
    744a:	4684      	mov	ip, r0
    744c:	6900      	ldr	r0, [r0, #16]
    744e:	1ac0      	subs	r0, r0, r3
    7450:	d116      	bne.n	7480 <__mcmp+0x38>
    7452:	f10c 0c14 	add.w	ip, ip, #20
    7456:	3114      	adds	r1, #20
    7458:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    745c:	b410      	push	{r4}
    745e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7462:	e001      	b.n	7468 <__mcmp+0x20>
    7464:	4594      	cmp	ip, r2
    7466:	d208      	bcs.n	747a <__mcmp+0x32>
    7468:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    746c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    7470:	428c      	cmp	r4, r1
    7472:	d0f7      	beq.n	7464 <__mcmp+0x1c>
    7474:	d205      	bcs.n	7482 <__mcmp+0x3a>
    7476:	f04f 30ff 	mov.w	r0, #4294967295
    747a:	f85d 4b04 	ldr.w	r4, [sp], #4
    747e:	4770      	bx	lr
    7480:	4770      	bx	lr
    7482:	2001      	movs	r0, #1
    7484:	f85d 4b04 	ldr.w	r4, [sp], #4
    7488:	4770      	bx	lr
    748a:	bf00      	nop

0000748c <__mdiff>:
    748c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7490:	690f      	ldr	r7, [r1, #16]
    7492:	6913      	ldr	r3, [r2, #16]
    7494:	1aff      	subs	r7, r7, r3
    7496:	2f00      	cmp	r7, #0
    7498:	460e      	mov	r6, r1
    749a:	4690      	mov	r8, r2
    749c:	d17f      	bne.n	759e <__mdiff+0x112>
    749e:	f101 0514 	add.w	r5, r1, #20
    74a2:	3214      	adds	r2, #20
    74a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    74a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    74ac:	e001      	b.n	74b2 <__mdiff+0x26>
    74ae:	429d      	cmp	r5, r3
    74b0:	d278      	bcs.n	75a4 <__mdiff+0x118>
    74b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    74b6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    74ba:	42a1      	cmp	r1, r4
    74bc:	d0f7      	beq.n	74ae <__mdiff+0x22>
    74be:	d369      	bcc.n	7594 <__mdiff+0x108>
    74c0:	6871      	ldr	r1, [r6, #4]
    74c2:	f7ff fd3b 	bl	6f3c <_Balloc>
    74c6:	4681      	mov	r9, r0
    74c8:	2800      	cmp	r0, #0
    74ca:	d077      	beq.n	75bc <__mdiff+0x130>
    74cc:	6935      	ldr	r5, [r6, #16]
    74ce:	f8d8 2010 	ldr.w	r2, [r8, #16]
    74d2:	60c7      	str	r7, [r0, #12]
    74d4:	f108 0e14 	add.w	lr, r8, #20
    74d8:	f106 0014 	add.w	r0, r6, #20
    74dc:	f109 0a14 	add.w	sl, r9, #20
    74e0:	f106 0110 	add.w	r1, r6, #16
    74e4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    74e8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    74ec:	4656      	mov	r6, sl
    74ee:	f04f 0c00 	mov.w	ip, #0
    74f2:	f85e 4b04 	ldr.w	r4, [lr], #4
    74f6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    74fa:	b2a3      	uxth	r3, r4
    74fc:	fa1c fc8b 	uxtah	ip, ip, fp
    7500:	ebac 0303 	sub.w	r3, ip, r3
    7504:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    7508:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    750c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    7510:	b29b      	uxth	r3, r3
    7512:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    7516:	4572      	cmp	r2, lr
    7518:	f846 3b04 	str.w	r3, [r6], #4
    751c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    7520:	d8e7      	bhi.n	74f2 <__mdiff+0x66>
    7522:	eba2 0108 	sub.w	r1, r2, r8
    7526:	3915      	subs	r1, #21
    7528:	f108 0815 	add.w	r8, r8, #21
    752c:	4542      	cmp	r2, r8
    752e:	f021 0403 	bic.w	r4, r1, #3
    7532:	f104 0404 	add.w	r4, r4, #4
    7536:	bf38      	it	cc
    7538:	2404      	movcc	r4, #4
    753a:	4420      	add	r0, r4
    753c:	f021 0203 	bic.w	r2, r1, #3
    7540:	bf38      	it	cc
    7542:	2200      	movcc	r2, #0
    7544:	4287      	cmp	r7, r0
    7546:	4452      	add	r2, sl
    7548:	4454      	add	r4, sl
    754a:	d918      	bls.n	757e <__mdiff+0xf2>
    754c:	4626      	mov	r6, r4
    754e:	4601      	mov	r1, r0
    7550:	f851 3b04 	ldr.w	r3, [r1], #4
    7554:	fa1c fc83 	uxtah	ip, ip, r3
    7558:	ea4f 422c 	mov.w	r2, ip, asr #16
    755c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    7560:	fa1f fc8c 	uxth.w	ip, ip
    7564:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    7568:	428f      	cmp	r7, r1
    756a:	f846 3b04 	str.w	r3, [r6], #4
    756e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    7572:	d8ed      	bhi.n	7550 <__mdiff+0xc4>
    7574:	3f01      	subs	r7, #1
    7576:	1a3f      	subs	r7, r7, r0
    7578:	f027 0703 	bic.w	r7, r7, #3
    757c:	19e2      	adds	r2, r4, r7
    757e:	b923      	cbnz	r3, 758a <__mdiff+0xfe>
    7580:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    7584:	3d01      	subs	r5, #1
    7586:	2b00      	cmp	r3, #0
    7588:	d0fa      	beq.n	7580 <__mdiff+0xf4>
    758a:	f8c9 5010 	str.w	r5, [r9, #16]
    758e:	4648      	mov	r0, r9
    7590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7594:	4633      	mov	r3, r6
    7596:	2701      	movs	r7, #1
    7598:	4646      	mov	r6, r8
    759a:	4698      	mov	r8, r3
    759c:	e790      	b.n	74c0 <__mdiff+0x34>
    759e:	dbf9      	blt.n	7594 <__mdiff+0x108>
    75a0:	2700      	movs	r7, #0
    75a2:	e78d      	b.n	74c0 <__mdiff+0x34>
    75a4:	2100      	movs	r1, #0
    75a6:	f7ff fcc9 	bl	6f3c <_Balloc>
    75aa:	4681      	mov	r9, r0
    75ac:	b168      	cbz	r0, 75ca <__mdiff+0x13e>
    75ae:	2201      	movs	r2, #1
    75b0:	2300      	movs	r3, #0
    75b2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    75b6:	4648      	mov	r0, r9
    75b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75bc:	4b06      	ldr	r3, [pc, #24]	; (75d8 <__mdiff+0x14c>)
    75be:	4807      	ldr	r0, [pc, #28]	; (75dc <__mdiff+0x150>)
    75c0:	464a      	mov	r2, r9
    75c2:	f240 2145 	movw	r1, #581	; 0x245
    75c6:	f000 fa93 	bl	7af0 <__assert_func>
    75ca:	4b03      	ldr	r3, [pc, #12]	; (75d8 <__mdiff+0x14c>)
    75cc:	4803      	ldr	r0, [pc, #12]	; (75dc <__mdiff+0x150>)
    75ce:	464a      	mov	r2, r9
    75d0:	f240 2137 	movw	r1, #567	; 0x237
    75d4:	f000 fa8c 	bl	7af0 <__assert_func>
    75d8:	2000068c 	.word	0x2000068c
    75dc:	200006a0 	.word	0x200006a0

000075e0 <__d2b>:
    75e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75e4:	4688      	mov	r8, r1
    75e6:	b083      	sub	sp, #12
    75e8:	2101      	movs	r1, #1
    75ea:	ec57 6b10 	vmov	r6, r7, d0
    75ee:	4615      	mov	r5, r2
    75f0:	f7ff fca4 	bl	6f3c <_Balloc>
    75f4:	4604      	mov	r4, r0
    75f6:	2800      	cmp	r0, #0
    75f8:	d051      	beq.n	769e <__d2b+0xbe>
    75fa:	f3c7 590a 	ubfx	r9, r7, #20, #11
    75fe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    7602:	f1b9 0f00 	cmp.w	r9, #0
    7606:	d001      	beq.n	760c <__d2b+0x2c>
    7608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    760c:	2e00      	cmp	r6, #0
    760e:	9301      	str	r3, [sp, #4]
    7610:	d118      	bne.n	7644 <__d2b+0x64>
    7612:	a801      	add	r0, sp, #4
    7614:	f7ff fd34 	bl	7080 <__lo0bits>
    7618:	9a01      	ldr	r2, [sp, #4]
    761a:	6162      	str	r2, [r4, #20]
    761c:	2201      	movs	r2, #1
    761e:	f100 0320 	add.w	r3, r0, #32
    7622:	6122      	str	r2, [r4, #16]
    7624:	f1b9 0f00 	cmp.w	r9, #0
    7628:	d025      	beq.n	7676 <__d2b+0x96>
    762a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    762e:	eb09 0203 	add.w	r2, r9, r3
    7632:	4620      	mov	r0, r4
    7634:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    7638:	f8c8 2000 	str.w	r2, [r8]
    763c:	602b      	str	r3, [r5, #0]
    763e:	b003      	add	sp, #12
    7640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7644:	4668      	mov	r0, sp
    7646:	9600      	str	r6, [sp, #0]
    7648:	f7ff fd1a 	bl	7080 <__lo0bits>
    764c:	4603      	mov	r3, r0
    764e:	b310      	cbz	r0, 7696 <__d2b+0xb6>
    7650:	e9dd 0200 	ldrd	r0, r2, [sp]
    7654:	f1c3 0120 	rsb	r1, r3, #32
    7658:	fa02 f101 	lsl.w	r1, r2, r1
    765c:	4301      	orrs	r1, r0
    765e:	40da      	lsrs	r2, r3
    7660:	6161      	str	r1, [r4, #20]
    7662:	9201      	str	r2, [sp, #4]
    7664:	2a00      	cmp	r2, #0
    7666:	61a2      	str	r2, [r4, #24]
    7668:	bf14      	ite	ne
    766a:	2202      	movne	r2, #2
    766c:	2201      	moveq	r2, #1
    766e:	6122      	str	r2, [r4, #16]
    7670:	f1b9 0f00 	cmp.w	r9, #0
    7674:	d1d9      	bne.n	762a <__d2b+0x4a>
    7676:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    767a:	f8c8 3000 	str.w	r3, [r8]
    767e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    7682:	6918      	ldr	r0, [r3, #16]
    7684:	f7ff fcdc 	bl	7040 <__hi0bits>
    7688:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    768c:	4620      	mov	r0, r4
    768e:	602b      	str	r3, [r5, #0]
    7690:	b003      	add	sp, #12
    7692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7696:	9a00      	ldr	r2, [sp, #0]
    7698:	6162      	str	r2, [r4, #20]
    769a:	9a01      	ldr	r2, [sp, #4]
    769c:	e7e2      	b.n	7664 <__d2b+0x84>
    769e:	4b03      	ldr	r3, [pc, #12]	; (76ac <__d2b+0xcc>)
    76a0:	4803      	ldr	r0, [pc, #12]	; (76b0 <__d2b+0xd0>)
    76a2:	4622      	mov	r2, r4
    76a4:	f240 310f 	movw	r1, #783	; 0x30f
    76a8:	f000 fa22 	bl	7af0 <__assert_func>
    76ac:	2000068c 	.word	0x2000068c
    76b0:	200006a0 	.word	0x200006a0

000076b4 <__ascii_wctomb>:
    76b4:	b149      	cbz	r1, 76ca <__ascii_wctomb+0x16>
    76b6:	2aff      	cmp	r2, #255	; 0xff
    76b8:	d802      	bhi.n	76c0 <__ascii_wctomb+0xc>
    76ba:	700a      	strb	r2, [r1, #0]
    76bc:	2001      	movs	r0, #1
    76be:	4770      	bx	lr
    76c0:	238a      	movs	r3, #138	; 0x8a
    76c2:	6003      	str	r3, [r0, #0]
    76c4:	f04f 30ff 	mov.w	r0, #4294967295
    76c8:	4770      	bx	lr
    76ca:	4608      	mov	r0, r1
    76cc:	4770      	bx	lr
    76ce:	bf00      	nop

000076d0 <fcvtbuf>:
    76d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76d4:	460e      	mov	r6, r1
    76d6:	4926      	ldr	r1, [pc, #152]	; (7770 <fcvtbuf+0xa0>)
    76d8:	b087      	sub	sp, #28
    76da:	680f      	ldr	r7, [r1, #0]
    76dc:	4604      	mov	r4, r0
    76de:	4690      	mov	r8, r2
    76e0:	461d      	mov	r5, r3
    76e2:	b353      	cbz	r3, 773a <fcvtbuf+0x6a>
    76e4:	aa05      	add	r2, sp, #20
    76e6:	4633      	mov	r3, r6
    76e8:	9201      	str	r2, [sp, #4]
    76ea:	2103      	movs	r1, #3
    76ec:	4622      	mov	r2, r4
    76ee:	f8cd 8000 	str.w	r8, [sp]
    76f2:	4638      	mov	r0, r7
    76f4:	f000 faec 	bl	7cd0 <_dtoa_r>
    76f8:	9b05      	ldr	r3, [sp, #20]
    76fa:	6832      	ldr	r2, [r6, #0]
    76fc:	4298      	cmp	r0, r3
    76fe:	4684      	mov	ip, r0
    7700:	f1c2 0200 	rsb	r2, r2, #0
    7704:	4629      	mov	r1, r5
    7706:	d209      	bcs.n	771c <fcvtbuf+0x4c>
    7708:	1a10      	subs	r0, r2, r0
    770a:	f81c 3b01 	ldrb.w	r3, [ip], #1
    770e:	f801 3b01 	strb.w	r3, [r1], #1
    7712:	9b05      	ldr	r3, [sp, #20]
    7714:	4563      	cmp	r3, ip
    7716:	eb00 020c 	add.w	r2, r0, ip
    771a:	d8f6      	bhi.n	770a <fcvtbuf+0x3a>
    771c:	4294      	cmp	r4, r2
    771e:	dd24      	ble.n	776a <fcvtbuf+0x9a>
    7720:	1aa2      	subs	r2, r4, r2
    7722:	440a      	add	r2, r1
    7724:	2330      	movs	r3, #48	; 0x30
    7726:	f801 3b01 	strb.w	r3, [r1], #1
    772a:	4291      	cmp	r1, r2
    772c:	d1fb      	bne.n	7726 <fcvtbuf+0x56>
    772e:	2300      	movs	r3, #0
    7730:	7013      	strb	r3, [r2, #0]
    7732:	4628      	mov	r0, r5
    7734:	b007      	add	sp, #28
    7736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    773a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    773c:	f100 0323 	add.w	r3, r0, #35	; 0x23
    7740:	429a      	cmp	r2, r3
    7742:	dd01      	ble.n	7748 <fcvtbuf+0x78>
    7744:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    7746:	e7cd      	b.n	76e4 <fcvtbuf+0x14>
    7748:	f100 0924 	add.w	r9, r0, #36	; 0x24
    774c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    774e:	464a      	mov	r2, r9
    7750:	4638      	mov	r0, r7
    7752:	ed8d 0b02 	vstr	d0, [sp, #8]
    7756:	f7fd ffb3 	bl	56c0 <_realloc_r>
    775a:	4605      	mov	r5, r0
    775c:	2800      	cmp	r0, #0
    775e:	d0e8      	beq.n	7732 <fcvtbuf+0x62>
    7760:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    7764:	ed9d 0b02 	vldr	d0, [sp, #8]
    7768:	e7bc      	b.n	76e4 <fcvtbuf+0x14>
    776a:	460a      	mov	r2, r1
    776c:	e7df      	b.n	772e <fcvtbuf+0x5e>
    776e:	bf00      	nop
    7770:	20001748 	.word	0x20001748

00007774 <_fclose_r>:
    7774:	b570      	push	{r4, r5, r6, lr}
    7776:	2900      	cmp	r1, #0
    7778:	d04b      	beq.n	7812 <_fclose_r+0x9e>
    777a:	4606      	mov	r6, r0
    777c:	460c      	mov	r4, r1
    777e:	b110      	cbz	r0, 7786 <_fclose_r+0x12>
    7780:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7782:	2b00      	cmp	r3, #0
    7784:	d048      	beq.n	7818 <_fclose_r+0xa4>
    7786:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7788:	07d8      	lsls	r0, r3, #31
    778a:	d534      	bpl.n	77f6 <_fclose_r+0x82>
    778c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7790:	2b00      	cmp	r3, #0
    7792:	d03e      	beq.n	7812 <_fclose_r+0x9e>
    7794:	4621      	mov	r1, r4
    7796:	4630      	mov	r0, r6
    7798:	f000 f850 	bl	783c <__sflush_r>
    779c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    779e:	4605      	mov	r5, r0
    77a0:	b133      	cbz	r3, 77b0 <_fclose_r+0x3c>
    77a2:	69e1      	ldr	r1, [r4, #28]
    77a4:	4630      	mov	r0, r6
    77a6:	4798      	blx	r3
    77a8:	2800      	cmp	r0, #0
    77aa:	bfb8      	it	lt
    77ac:	f04f 35ff 	movlt.w	r5, #4294967295
    77b0:	89a3      	ldrh	r3, [r4, #12]
    77b2:	061a      	lsls	r2, r3, #24
    77b4:	d43c      	bmi.n	7830 <_fclose_r+0xbc>
    77b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    77b8:	b141      	cbz	r1, 77cc <_fclose_r+0x58>
    77ba:	f104 0340 	add.w	r3, r4, #64	; 0x40
    77be:	4299      	cmp	r1, r3
    77c0:	d002      	beq.n	77c8 <_fclose_r+0x54>
    77c2:	4630      	mov	r0, r6
    77c4:	f7ff fa9e 	bl	6d04 <_free_r>
    77c8:	2300      	movs	r3, #0
    77ca:	6323      	str	r3, [r4, #48]	; 0x30
    77cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    77ce:	b121      	cbz	r1, 77da <_fclose_r+0x66>
    77d0:	4630      	mov	r0, r6
    77d2:	f7ff fa97 	bl	6d04 <_free_r>
    77d6:	2300      	movs	r3, #0
    77d8:	6463      	str	r3, [r4, #68]	; 0x44
    77da:	f7fe fb25 	bl	5e28 <__sfp_lock_acquire>
    77de:	6e63      	ldr	r3, [r4, #100]	; 0x64
    77e0:	2200      	movs	r2, #0
    77e2:	07db      	lsls	r3, r3, #31
    77e4:	81a2      	strh	r2, [r4, #12]
    77e6:	d51f      	bpl.n	7828 <_fclose_r+0xb4>
    77e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77ea:	f7fe ffa5 	bl	6738 <__retarget_lock_close_recursive>
    77ee:	f7fe fb21 	bl	5e34 <__sfp_lock_release>
    77f2:	4628      	mov	r0, r5
    77f4:	bd70      	pop	{r4, r5, r6, pc}
    77f6:	89a3      	ldrh	r3, [r4, #12]
    77f8:	0599      	lsls	r1, r3, #22
    77fa:	d4cb      	bmi.n	7794 <_fclose_r+0x20>
    77fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    77fe:	f7fe ff9d 	bl	673c <__retarget_lock_acquire_recursive>
    7802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7806:	2b00      	cmp	r3, #0
    7808:	d1c4      	bne.n	7794 <_fclose_r+0x20>
    780a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    780c:	f015 0501 	ands.w	r5, r5, #1
    7810:	d005      	beq.n	781e <_fclose_r+0xaa>
    7812:	2500      	movs	r5, #0
    7814:	4628      	mov	r0, r5
    7816:	bd70      	pop	{r4, r5, r6, pc}
    7818:	f7fe fae8 	bl	5dec <__sinit>
    781c:	e7b3      	b.n	7786 <_fclose_r+0x12>
    781e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    7820:	f7fe ff8e 	bl	6740 <__retarget_lock_release_recursive>
    7824:	4628      	mov	r0, r5
    7826:	bd70      	pop	{r4, r5, r6, pc}
    7828:	6da0      	ldr	r0, [r4, #88]	; 0x58
    782a:	f7fe ff89 	bl	6740 <__retarget_lock_release_recursive>
    782e:	e7db      	b.n	77e8 <_fclose_r+0x74>
    7830:	6921      	ldr	r1, [r4, #16]
    7832:	4630      	mov	r0, r6
    7834:	f7ff fa66 	bl	6d04 <_free_r>
    7838:	e7bd      	b.n	77b6 <_fclose_r+0x42>
    783a:	bf00      	nop

0000783c <__sflush_r>:
    783c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    7840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7844:	460c      	mov	r4, r1
    7846:	0711      	lsls	r1, r2, #28
    7848:	4680      	mov	r8, r0
    784a:	d447      	bmi.n	78dc <__sflush_r+0xa0>
    784c:	6863      	ldr	r3, [r4, #4]
    784e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7852:	2b00      	cmp	r3, #0
    7854:	81a2      	strh	r2, [r4, #12]
    7856:	dd5e      	ble.n	7916 <__sflush_r+0xda>
    7858:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    785a:	2d00      	cmp	r5, #0
    785c:	d058      	beq.n	7910 <__sflush_r+0xd4>
    785e:	2300      	movs	r3, #0
    7860:	f8d8 6000 	ldr.w	r6, [r8]
    7864:	f8c8 3000 	str.w	r3, [r8]
    7868:	b293      	uxth	r3, r2
    786a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    786e:	d156      	bne.n	791e <__sflush_r+0xe2>
    7870:	2301      	movs	r3, #1
    7872:	69e1      	ldr	r1, [r4, #28]
    7874:	4640      	mov	r0, r8
    7876:	47a8      	blx	r5
    7878:	1c43      	adds	r3, r0, #1
    787a:	d067      	beq.n	794c <__sflush_r+0x110>
    787c:	89a3      	ldrh	r3, [r4, #12]
    787e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    7880:	075f      	lsls	r7, r3, #29
    7882:	d505      	bpl.n	7890 <__sflush_r+0x54>
    7884:	6863      	ldr	r3, [r4, #4]
    7886:	1ac0      	subs	r0, r0, r3
    7888:	6b23      	ldr	r3, [r4, #48]	; 0x30
    788a:	b10b      	cbz	r3, 7890 <__sflush_r+0x54>
    788c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    788e:	1ac0      	subs	r0, r0, r3
    7890:	69e1      	ldr	r1, [r4, #28]
    7892:	4602      	mov	r2, r0
    7894:	2300      	movs	r3, #0
    7896:	4640      	mov	r0, r8
    7898:	47a8      	blx	r5
    789a:	1c41      	adds	r1, r0, #1
    789c:	d141      	bne.n	7922 <__sflush_r+0xe6>
    789e:	f8d8 3000 	ldr.w	r3, [r8]
    78a2:	2b00      	cmp	r3, #0
    78a4:	d03d      	beq.n	7922 <__sflush_r+0xe6>
    78a6:	2b1d      	cmp	r3, #29
    78a8:	d001      	beq.n	78ae <__sflush_r+0x72>
    78aa:	2b16      	cmp	r3, #22
    78ac:	d156      	bne.n	795c <__sflush_r+0x120>
    78ae:	89a3      	ldrh	r3, [r4, #12]
    78b0:	6922      	ldr	r2, [r4, #16]
    78b2:	6022      	str	r2, [r4, #0]
    78b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    78b8:	2100      	movs	r1, #0
    78ba:	6061      	str	r1, [r4, #4]
    78bc:	81a3      	strh	r3, [r4, #12]
    78be:	6b21      	ldr	r1, [r4, #48]	; 0x30
    78c0:	f8c8 6000 	str.w	r6, [r8]
    78c4:	b321      	cbz	r1, 7910 <__sflush_r+0xd4>
    78c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    78ca:	4299      	cmp	r1, r3
    78cc:	d002      	beq.n	78d4 <__sflush_r+0x98>
    78ce:	4640      	mov	r0, r8
    78d0:	f7ff fa18 	bl	6d04 <_free_r>
    78d4:	2000      	movs	r0, #0
    78d6:	6320      	str	r0, [r4, #48]	; 0x30
    78d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78dc:	6926      	ldr	r6, [r4, #16]
    78de:	b1be      	cbz	r6, 7910 <__sflush_r+0xd4>
    78e0:	b293      	uxth	r3, r2
    78e2:	6825      	ldr	r5, [r4, #0]
    78e4:	6026      	str	r6, [r4, #0]
    78e6:	079a      	lsls	r2, r3, #30
    78e8:	bf0c      	ite	eq
    78ea:	6963      	ldreq	r3, [r4, #20]
    78ec:	2300      	movne	r3, #0
    78ee:	1bad      	subs	r5, r5, r6
    78f0:	60a3      	str	r3, [r4, #8]
    78f2:	e00b      	b.n	790c <__sflush_r+0xd0>
    78f4:	462b      	mov	r3, r5
    78f6:	4632      	mov	r2, r6
    78f8:	69e1      	ldr	r1, [r4, #28]
    78fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
    78fc:	4640      	mov	r0, r8
    78fe:	47b8      	blx	r7
    7900:	f1b0 0c00 	subs.w	ip, r0, #0
    7904:	eba5 050c 	sub.w	r5, r5, ip
    7908:	4466      	add	r6, ip
    790a:	dd17      	ble.n	793c <__sflush_r+0x100>
    790c:	2d00      	cmp	r5, #0
    790e:	dcf1      	bgt.n	78f4 <__sflush_r+0xb8>
    7910:	2000      	movs	r0, #0
    7912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7916:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7918:	2b00      	cmp	r3, #0
    791a:	dc9d      	bgt.n	7858 <__sflush_r+0x1c>
    791c:	e7f8      	b.n	7910 <__sflush_r+0xd4>
    791e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7920:	e7ae      	b.n	7880 <__sflush_r+0x44>
    7922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    7926:	6922      	ldr	r2, [r4, #16]
    7928:	6022      	str	r2, [r4, #0]
    792a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    792e:	81a3      	strh	r3, [r4, #12]
    7930:	2200      	movs	r2, #0
    7932:	04db      	lsls	r3, r3, #19
    7934:	6062      	str	r2, [r4, #4]
    7936:	d5c2      	bpl.n	78be <__sflush_r+0x82>
    7938:	6520      	str	r0, [r4, #80]	; 0x50
    793a:	e7c0      	b.n	78be <__sflush_r+0x82>
    793c:	89a3      	ldrh	r3, [r4, #12]
    793e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7942:	f04f 30ff 	mov.w	r0, #4294967295
    7946:	81a3      	strh	r3, [r4, #12]
    7948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    794c:	f8d8 3000 	ldr.w	r3, [r8]
    7950:	2b00      	cmp	r3, #0
    7952:	d093      	beq.n	787c <__sflush_r+0x40>
    7954:	2b1d      	cmp	r3, #29
    7956:	d006      	beq.n	7966 <__sflush_r+0x12a>
    7958:	2b16      	cmp	r3, #22
    795a:	d004      	beq.n	7966 <__sflush_r+0x12a>
    795c:	89a3      	ldrh	r3, [r4, #12]
    795e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7962:	81a3      	strh	r3, [r4, #12]
    7964:	e7d5      	b.n	7912 <__sflush_r+0xd6>
    7966:	f8c8 6000 	str.w	r6, [r8]
    796a:	e7d1      	b.n	7910 <__sflush_r+0xd4>

0000796c <_fflush_r>:
    796c:	b538      	push	{r3, r4, r5, lr}
    796e:	460c      	mov	r4, r1
    7970:	4605      	mov	r5, r0
    7972:	b108      	cbz	r0, 7978 <_fflush_r+0xc>
    7974:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7976:	b303      	cbz	r3, 79ba <_fflush_r+0x4e>
    7978:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    797c:	b188      	cbz	r0, 79a2 <_fflush_r+0x36>
    797e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7980:	07db      	lsls	r3, r3, #31
    7982:	d401      	bmi.n	7988 <_fflush_r+0x1c>
    7984:	0581      	lsls	r1, r0, #22
    7986:	d50f      	bpl.n	79a8 <_fflush_r+0x3c>
    7988:	4628      	mov	r0, r5
    798a:	4621      	mov	r1, r4
    798c:	f7ff ff56 	bl	783c <__sflush_r>
    7990:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7992:	07da      	lsls	r2, r3, #31
    7994:	4605      	mov	r5, r0
    7996:	d402      	bmi.n	799e <_fflush_r+0x32>
    7998:	89a3      	ldrh	r3, [r4, #12]
    799a:	059b      	lsls	r3, r3, #22
    799c:	d508      	bpl.n	79b0 <_fflush_r+0x44>
    799e:	4628      	mov	r0, r5
    79a0:	bd38      	pop	{r3, r4, r5, pc}
    79a2:	4605      	mov	r5, r0
    79a4:	4628      	mov	r0, r5
    79a6:	bd38      	pop	{r3, r4, r5, pc}
    79a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79aa:	f7fe fec7 	bl	673c <__retarget_lock_acquire_recursive>
    79ae:	e7eb      	b.n	7988 <_fflush_r+0x1c>
    79b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    79b2:	f7fe fec5 	bl	6740 <__retarget_lock_release_recursive>
    79b6:	4628      	mov	r0, r5
    79b8:	bd38      	pop	{r3, r4, r5, pc}
    79ba:	f7fe fa17 	bl	5dec <__sinit>
    79be:	e7db      	b.n	7978 <_fflush_r+0xc>

000079c0 <memcmp>:
    79c0:	2a03      	cmp	r2, #3
    79c2:	b570      	push	{r4, r5, r6, lr}
    79c4:	d914      	bls.n	79f0 <memcmp+0x30>
    79c6:	ea40 0301 	orr.w	r3, r0, r1
    79ca:	079b      	lsls	r3, r3, #30
    79cc:	d122      	bne.n	7a14 <memcmp+0x54>
    79ce:	4604      	mov	r4, r0
    79d0:	460b      	mov	r3, r1
    79d2:	4619      	mov	r1, r3
    79d4:	4620      	mov	r0, r4
    79d6:	680e      	ldr	r6, [r1, #0]
    79d8:	6805      	ldr	r5, [r0, #0]
    79da:	42b5      	cmp	r5, r6
    79dc:	f104 0404 	add.w	r4, r4, #4
    79e0:	f103 0304 	add.w	r3, r3, #4
    79e4:	d116      	bne.n	7a14 <memcmp+0x54>
    79e6:	3a04      	subs	r2, #4
    79e8:	2a03      	cmp	r2, #3
    79ea:	4620      	mov	r0, r4
    79ec:	4619      	mov	r1, r3
    79ee:	d8f0      	bhi.n	79d2 <memcmp+0x12>
    79f0:	1e54      	subs	r4, r2, #1
    79f2:	b19a      	cbz	r2, 7a1c <memcmp+0x5c>
    79f4:	1e42      	subs	r2, r0, #1
    79f6:	3901      	subs	r1, #1
    79f8:	e001      	b.n	79fe <memcmp+0x3e>
    79fa:	18c3      	adds	r3, r0, r3
    79fc:	d00c      	beq.n	7a18 <memcmp+0x58>
    79fe:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    7a02:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7a06:	45e6      	cmp	lr, ip
    7a08:	eba4 0302 	sub.w	r3, r4, r2
    7a0c:	d0f5      	beq.n	79fa <memcmp+0x3a>
    7a0e:	ebae 000c 	sub.w	r0, lr, ip
    7a12:	bd70      	pop	{r4, r5, r6, pc}
    7a14:	1e54      	subs	r4, r2, #1
    7a16:	e7ed      	b.n	79f4 <memcmp+0x34>
    7a18:	4618      	mov	r0, r3
    7a1a:	bd70      	pop	{r4, r5, r6, pc}
    7a1c:	4610      	mov	r0, r2
    7a1e:	bd70      	pop	{r4, r5, r6, pc}

00007a20 <strnlen>:
    7a20:	b171      	cbz	r1, 7a40 <strnlen+0x20>
    7a22:	4603      	mov	r3, r0
    7a24:	eb00 0c01 	add.w	ip, r0, r1
    7a28:	e001      	b.n	7a2e <strnlen+0xe>
    7a2a:	4563      	cmp	r3, ip
    7a2c:	d006      	beq.n	7a3c <strnlen+0x1c>
    7a2e:	461a      	mov	r2, r3
    7a30:	3301      	adds	r3, #1
    7a32:	7811      	ldrb	r1, [r2, #0]
    7a34:	2900      	cmp	r1, #0
    7a36:	d1f8      	bne.n	7a2a <strnlen+0xa>
    7a38:	1a10      	subs	r0, r2, r0
    7a3a:	4770      	bx	lr
    7a3c:	1a18      	subs	r0, r3, r0
    7a3e:	4770      	bx	lr
    7a40:	4608      	mov	r0, r1
    7a42:	4770      	bx	lr

00007a44 <_localeconv_r>:
    7a44:	4800      	ldr	r0, [pc, #0]	; (7a48 <_localeconv_r+0x4>)
    7a46:	4770      	bx	lr
    7a48:	200012b0 	.word	0x200012b0
    7a4c:	00000000 	.word	0x00000000

00007a50 <memchr>:
    7a50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7a54:	2a10      	cmp	r2, #16
    7a56:	db2b      	blt.n	7ab0 <memchr+0x60>
    7a58:	f010 0f07 	tst.w	r0, #7
    7a5c:	d008      	beq.n	7a70 <memchr+0x20>
    7a5e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7a62:	3a01      	subs	r2, #1
    7a64:	428b      	cmp	r3, r1
    7a66:	d02d      	beq.n	7ac4 <memchr+0x74>
    7a68:	f010 0f07 	tst.w	r0, #7
    7a6c:	b342      	cbz	r2, 7ac0 <memchr+0x70>
    7a6e:	d1f6      	bne.n	7a5e <memchr+0xe>
    7a70:	b4f0      	push	{r4, r5, r6, r7}
    7a72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7a76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    7a7a:	f022 0407 	bic.w	r4, r2, #7
    7a7e:	f07f 0700 	mvns.w	r7, #0
    7a82:	2300      	movs	r3, #0
    7a84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7a88:	3c08      	subs	r4, #8
    7a8a:	ea85 0501 	eor.w	r5, r5, r1
    7a8e:	ea86 0601 	eor.w	r6, r6, r1
    7a92:	fa85 f547 	uadd8	r5, r5, r7
    7a96:	faa3 f587 	sel	r5, r3, r7
    7a9a:	fa86 f647 	uadd8	r6, r6, r7
    7a9e:	faa5 f687 	sel	r6, r5, r7
    7aa2:	b98e      	cbnz	r6, 7ac8 <memchr+0x78>
    7aa4:	d1ee      	bne.n	7a84 <memchr+0x34>
    7aa6:	bcf0      	pop	{r4, r5, r6, r7}
    7aa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7aac:	f002 0207 	and.w	r2, r2, #7
    7ab0:	b132      	cbz	r2, 7ac0 <memchr+0x70>
    7ab2:	f810 3b01 	ldrb.w	r3, [r0], #1
    7ab6:	3a01      	subs	r2, #1
    7ab8:	ea83 0301 	eor.w	r3, r3, r1
    7abc:	b113      	cbz	r3, 7ac4 <memchr+0x74>
    7abe:	d1f8      	bne.n	7ab2 <memchr+0x62>
    7ac0:	2000      	movs	r0, #0
    7ac2:	4770      	bx	lr
    7ac4:	3801      	subs	r0, #1
    7ac6:	4770      	bx	lr
    7ac8:	2d00      	cmp	r5, #0
    7aca:	bf06      	itte	eq
    7acc:	4635      	moveq	r5, r6
    7ace:	3803      	subeq	r0, #3
    7ad0:	3807      	subne	r0, #7
    7ad2:	f015 0f01 	tst.w	r5, #1
    7ad6:	d107      	bne.n	7ae8 <memchr+0x98>
    7ad8:	3001      	adds	r0, #1
    7ada:	f415 7f80 	tst.w	r5, #256	; 0x100
    7ade:	bf02      	ittt	eq
    7ae0:	3001      	addeq	r0, #1
    7ae2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7ae6:	3001      	addeq	r0, #1
    7ae8:	bcf0      	pop	{r4, r5, r6, r7}
    7aea:	3801      	subs	r0, #1
    7aec:	4770      	bx	lr
    7aee:	bf00      	nop

00007af0 <__assert_func>:
    7af0:	b500      	push	{lr}
    7af2:	4c0b      	ldr	r4, [pc, #44]	; (7b20 <__assert_func+0x30>)
    7af4:	6825      	ldr	r5, [r4, #0]
    7af6:	4614      	mov	r4, r2
    7af8:	68ee      	ldr	r6, [r5, #12]
    7afa:	461a      	mov	r2, r3
    7afc:	b085      	sub	sp, #20
    7afe:	4603      	mov	r3, r0
    7b00:	460d      	mov	r5, r1
    7b02:	b14c      	cbz	r4, 7b18 <__assert_func+0x28>
    7b04:	4907      	ldr	r1, [pc, #28]	; (7b24 <__assert_func+0x34>)
    7b06:	9500      	str	r5, [sp, #0]
    7b08:	e9cd 1401 	strd	r1, r4, [sp, #4]
    7b0c:	4630      	mov	r0, r6
    7b0e:	4906      	ldr	r1, [pc, #24]	; (7b28 <__assert_func+0x38>)
    7b10:	f000 ff86 	bl	8a20 <fiprintf>
    7b14:	f7fc f964 	bl	3de0 <abort>
    7b18:	4904      	ldr	r1, [pc, #16]	; (7b2c <__assert_func+0x3c>)
    7b1a:	460c      	mov	r4, r1
    7b1c:	e7f3      	b.n	7b06 <__assert_func+0x16>
    7b1e:	bf00      	nop
    7b20:	20001748 	.word	0x20001748
    7b24:	2000064c 	.word	0x2000064c
    7b28:	2000065c 	.word	0x2000065c
    7b2c:	2000039c 	.word	0x2000039c

00007b30 <_calloc_r>:
    7b30:	b538      	push	{r3, r4, r5, lr}
    7b32:	fba1 1402 	umull	r1, r4, r1, r2
    7b36:	bb8c      	cbnz	r4, 7b9c <_calloc_r+0x6c>
    7b38:	f7fd fafa 	bl	5130 <_malloc_r>
    7b3c:	4605      	mov	r5, r0
    7b3e:	b1e0      	cbz	r0, 7b7a <_calloc_r+0x4a>
    7b40:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7b44:	f022 0203 	bic.w	r2, r2, #3
    7b48:	3a04      	subs	r2, #4
    7b4a:	2a24      	cmp	r2, #36	; 0x24
    7b4c:	d817      	bhi.n	7b7e <_calloc_r+0x4e>
    7b4e:	2a13      	cmp	r2, #19
    7b50:	d91a      	bls.n	7b88 <_calloc_r+0x58>
    7b52:	2a1b      	cmp	r2, #27
    7b54:	e9c0 4400 	strd	r4, r4, [r0]
    7b58:	d91d      	bls.n	7b96 <_calloc_r+0x66>
    7b5a:	2a24      	cmp	r2, #36	; 0x24
    7b5c:	bf14      	ite	ne
    7b5e:	f100 0210 	addne.w	r2, r0, #16
    7b62:	f100 0218 	addeq.w	r2, r0, #24
    7b66:	f04f 0300 	mov.w	r3, #0
    7b6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    7b6e:	bf04      	itt	eq
    7b70:	6104      	streq	r4, [r0, #16]
    7b72:	6144      	streq	r4, [r0, #20]
    7b74:	e9c2 3300 	strd	r3, r3, [r2]
    7b78:	6093      	str	r3, [r2, #8]
    7b7a:	4628      	mov	r0, r5
    7b7c:	bd38      	pop	{r3, r4, r5, pc}
    7b7e:	4621      	mov	r1, r4
    7b80:	f7fe fa44 	bl	600c <memset>
    7b84:	4628      	mov	r0, r5
    7b86:	bd38      	pop	{r3, r4, r5, pc}
    7b88:	4602      	mov	r2, r0
    7b8a:	2300      	movs	r3, #0
    7b8c:	e9c2 3300 	strd	r3, r3, [r2]
    7b90:	6093      	str	r3, [r2, #8]
    7b92:	4628      	mov	r0, r5
    7b94:	bd38      	pop	{r3, r4, r5, pc}
    7b96:	f100 0208 	add.w	r2, r0, #8
    7b9a:	e7f6      	b.n	7b8a <_calloc_r+0x5a>
    7b9c:	f7fe fda0 	bl	66e0 <__errno>
    7ba0:	230c      	movs	r3, #12
    7ba2:	2500      	movs	r5, #0
    7ba4:	6003      	str	r3, [r0, #0]
    7ba6:	e7e8      	b.n	7b7a <_calloc_r+0x4a>

00007ba8 <quorem>:
    7ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bac:	6903      	ldr	r3, [r0, #16]
    7bae:	690c      	ldr	r4, [r1, #16]
    7bb0:	42a3      	cmp	r3, r4
    7bb2:	b083      	sub	sp, #12
    7bb4:	f2c0 8087 	blt.w	7cc6 <quorem+0x11e>
    7bb8:	3c01      	subs	r4, #1
    7bba:	f101 0514 	add.w	r5, r1, #20
    7bbe:	00a3      	lsls	r3, r4, #2
    7bc0:	f100 0814 	add.w	r8, r0, #20
    7bc4:	9300      	str	r3, [sp, #0]
    7bc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7bca:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7bce:	3301      	adds	r3, #1
    7bd0:	4681      	mov	r9, r0
    7bd2:	429a      	cmp	r2, r3
    7bd4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    7bd8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    7bdc:	9001      	str	r0, [sp, #4]
    7bde:	fbb2 f6f3 	udiv	r6, r2, r3
    7be2:	d33b      	bcc.n	7c5c <quorem+0xb4>
    7be4:	f04f 0c00 	mov.w	ip, #0
    7be8:	46ae      	mov	lr, r5
    7bea:	4640      	mov	r0, r8
    7bec:	46e2      	mov	sl, ip
    7bee:	4663      	mov	r3, ip
    7bf0:	f85e bb04 	ldr.w	fp, [lr], #4
    7bf4:	6802      	ldr	r2, [r0, #0]
    7bf6:	fa1f fc8b 	uxth.w	ip, fp
    7bfa:	fb06 330c 	mla	r3, r6, ip, r3
    7bfe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    7c02:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    7c06:	fb06 cc0b 	mla	ip, r6, fp, ip
    7c0a:	b29b      	uxth	r3, r3
    7c0c:	ebaa 0303 	sub.w	r3, sl, r3
    7c10:	fa1f fa8c 	uxth.w	sl, ip
    7c14:	fa13 f382 	uxtah	r3, r3, r2
    7c18:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    7c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    7c20:	b29b      	uxth	r3, r3
    7c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    7c26:	4577      	cmp	r7, lr
    7c28:	f840 3b04 	str.w	r3, [r0], #4
    7c2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    7c30:	ea4f 431c 	mov.w	r3, ip, lsr #16
    7c34:	d2dc      	bcs.n	7bf0 <quorem+0x48>
    7c36:	9b00      	ldr	r3, [sp, #0]
    7c38:	f858 3003 	ldr.w	r3, [r8, r3]
    7c3c:	b973      	cbnz	r3, 7c5c <quorem+0xb4>
    7c3e:	9b01      	ldr	r3, [sp, #4]
    7c40:	3b04      	subs	r3, #4
    7c42:	4598      	cmp	r8, r3
    7c44:	d304      	bcc.n	7c50 <quorem+0xa8>
    7c46:	e007      	b.n	7c58 <quorem+0xb0>
    7c48:	4598      	cmp	r8, r3
    7c4a:	f104 34ff 	add.w	r4, r4, #4294967295
    7c4e:	d203      	bcs.n	7c58 <quorem+0xb0>
    7c50:	f853 2904 	ldr.w	r2, [r3], #-4
    7c54:	2a00      	cmp	r2, #0
    7c56:	d0f7      	beq.n	7c48 <quorem+0xa0>
    7c58:	f8c9 4010 	str.w	r4, [r9, #16]
    7c5c:	4648      	mov	r0, r9
    7c5e:	f7ff fbf3 	bl	7448 <__mcmp>
    7c62:	2800      	cmp	r0, #0
    7c64:	db2b      	blt.n	7cbe <quorem+0x116>
    7c66:	3601      	adds	r6, #1
    7c68:	4641      	mov	r1, r8
    7c6a:	2300      	movs	r3, #0
    7c6c:	f855 0b04 	ldr.w	r0, [r5], #4
    7c70:	f8d1 c000 	ldr.w	ip, [r1]
    7c74:	b282      	uxth	r2, r0
    7c76:	1a9a      	subs	r2, r3, r2
    7c78:	0c03      	lsrs	r3, r0, #16
    7c7a:	fa12 f28c 	uxtah	r2, r2, ip
    7c7e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    7c82:	eb03 4322 	add.w	r3, r3, r2, asr #16
    7c86:	b292      	uxth	r2, r2
    7c88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    7c8c:	42af      	cmp	r7, r5
    7c8e:	f841 2b04 	str.w	r2, [r1], #4
    7c92:	ea4f 4323 	mov.w	r3, r3, asr #16
    7c96:	d2e9      	bcs.n	7c6c <quorem+0xc4>
    7c98:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    7c9c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    7ca0:	b96a      	cbnz	r2, 7cbe <quorem+0x116>
    7ca2:	3b04      	subs	r3, #4
    7ca4:	4598      	cmp	r8, r3
    7ca6:	d304      	bcc.n	7cb2 <quorem+0x10a>
    7ca8:	e007      	b.n	7cba <quorem+0x112>
    7caa:	4598      	cmp	r8, r3
    7cac:	f104 34ff 	add.w	r4, r4, #4294967295
    7cb0:	d203      	bcs.n	7cba <quorem+0x112>
    7cb2:	f853 2904 	ldr.w	r2, [r3], #-4
    7cb6:	2a00      	cmp	r2, #0
    7cb8:	d0f7      	beq.n	7caa <quorem+0x102>
    7cba:	f8c9 4010 	str.w	r4, [r9, #16]
    7cbe:	4630      	mov	r0, r6
    7cc0:	b003      	add	sp, #12
    7cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cc6:	2000      	movs	r0, #0
    7cc8:	b003      	add	sp, #12
    7cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cce:	bf00      	nop

00007cd0 <_dtoa_r>:
    7cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cd4:	ed2d 8b02 	vpush	{d8}
    7cd8:	b08f      	sub	sp, #60	; 0x3c
    7cda:	ed8d 0b02 	vstr	d0, [sp, #8]
    7cde:	9101      	str	r1, [sp, #4]
    7ce0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    7ce2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    7ce4:	9305      	str	r3, [sp, #20]
    7ce6:	ec57 6b10 	vmov	r6, r7, d0
    7cea:	4604      	mov	r4, r0
    7cec:	4693      	mov	fp, r2
    7cee:	b141      	cbz	r1, 7d02 <_dtoa_r+0x32>
    7cf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7cf2:	604a      	str	r2, [r1, #4]
    7cf4:	2301      	movs	r3, #1
    7cf6:	4093      	lsls	r3, r2
    7cf8:	608b      	str	r3, [r1, #8]
    7cfa:	f7ff f945 	bl	6f88 <_Bfree>
    7cfe:	2300      	movs	r3, #0
    7d00:	63a3      	str	r3, [r4, #56]	; 0x38
    7d02:	f1b7 0800 	subs.w	r8, r7, #0
    7d06:	bfb4      	ite	lt
    7d08:	2301      	movlt	r3, #1
    7d0a:	2300      	movge	r3, #0
    7d0c:	602b      	str	r3, [r5, #0]
    7d0e:	4bbe      	ldr	r3, [pc, #760]	; (8008 <_dtoa_r+0x338>)
    7d10:	bfbc      	itt	lt
    7d12:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    7d16:	f8cd 800c 	strlt.w	r8, [sp, #12]
    7d1a:	ea33 0308 	bics.w	r3, r3, r8
    7d1e:	f000 809f 	beq.w	7e60 <_dtoa_r+0x190>
    7d22:	ed9d 8b02 	vldr	d8, [sp, #8]
    7d26:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d2e:	d111      	bne.n	7d54 <_dtoa_r+0x84>
    7d30:	9a05      	ldr	r2, [sp, #20]
    7d32:	2301      	movs	r3, #1
    7d34:	6013      	str	r3, [r2, #0]
    7d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7d38:	2b00      	cmp	r3, #0
    7d3a:	f000 823f 	beq.w	81bc <_dtoa_r+0x4ec>
    7d3e:	4bb3      	ldr	r3, [pc, #716]	; (800c <_dtoa_r+0x33c>)
    7d40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7d42:	6013      	str	r3, [r2, #0]
    7d44:	3b01      	subs	r3, #1
    7d46:	9300      	str	r3, [sp, #0]
    7d48:	9800      	ldr	r0, [sp, #0]
    7d4a:	b00f      	add	sp, #60	; 0x3c
    7d4c:	ecbd 8b02 	vpop	{d8}
    7d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d54:	aa0c      	add	r2, sp, #48	; 0x30
    7d56:	a90d      	add	r1, sp, #52	; 0x34
    7d58:	4620      	mov	r0, r4
    7d5a:	eeb0 0b48 	vmov.f64	d0, d8
    7d5e:	f7ff fc3f 	bl	75e0 <__d2b>
    7d62:	ea5f 5318 	movs.w	r3, r8, lsr #20
    7d66:	4605      	mov	r5, r0
    7d68:	f040 8092 	bne.w	7e90 <_dtoa_r+0x1c0>
    7d6c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    7d70:	440b      	add	r3, r1
    7d72:	f203 4232 	addw	r2, r3, #1074	; 0x432
    7d76:	2a20      	cmp	r2, #32
    7d78:	f340 82fa 	ble.w	8370 <_dtoa_r+0x6a0>
    7d7c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7d80:	fa08 f802 	lsl.w	r8, r8, r2
    7d84:	f203 4212 	addw	r2, r3, #1042	; 0x412
    7d88:	40d6      	lsrs	r6, r2
    7d8a:	ea48 0206 	orr.w	r2, r8, r6
    7d8e:	ee07 2a10 	vmov	s14, r2
    7d92:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    7d96:	1e58      	subs	r0, r3, #1
    7d98:	ee17 6a90 	vmov	r6, s15
    7d9c:	ec53 2b17 	vmov	r2, r3, d7
    7da0:	f04f 0a01 	mov.w	sl, #1
    7da4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    7da8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 7ff0 <_dtoa_r+0x320>
    7dac:	ed9f 7b92 	vldr	d7, [pc, #584]	; 7ff8 <_dtoa_r+0x328>
    7db0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8000 <_dtoa_r+0x330>
    7db4:	ee06 0a90 	vmov	s13, r0
    7db8:	ec43 2b12 	vmov	d2, r2, r3
    7dbc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    7dc0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    7dc4:	ee32 6b46 	vsub.f64	d6, d2, d6
    7dc8:	eea6 7b03 	vfma.f64	d7, d6, d3
    7dcc:	eea4 7b05 	vfma.f64	d7, d4, d5
    7dd0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    7dd4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    7dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ddc:	ee16 7a90 	vmov	r7, s13
    7de0:	d508      	bpl.n	7df4 <_dtoa_r+0x124>
    7de2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    7de6:	eeb4 6b47 	vcmp.f64	d6, d7
    7dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7dee:	bf18      	it	ne
    7df0:	f107 37ff 	addne.w	r7, r7, #4294967295
    7df4:	2f16      	cmp	r7, #22
    7df6:	f200 8145 	bhi.w	8084 <_dtoa_r+0x3b4>
    7dfa:	4b85      	ldr	r3, [pc, #532]	; (8010 <_dtoa_r+0x340>)
    7dfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    7e00:	ed93 7b00 	vldr	d7, [r3]
    7e04:	eeb4 8bc7 	vcmpe.f64	d8, d7
    7e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7e0c:	d557      	bpl.n	7ebe <_dtoa_r+0x1ee>
    7e0e:	1a09      	subs	r1, r1, r0
    7e10:	2300      	movs	r3, #0
    7e12:	f1b1 0801 	subs.w	r8, r1, #1
    7e16:	f107 37ff 	add.w	r7, r7, #4294967295
    7e1a:	930a      	str	r3, [sp, #40]	; 0x28
    7e1c:	f100 8139 	bmi.w	8092 <_dtoa_r+0x3c2>
    7e20:	2300      	movs	r3, #0
    7e22:	9306      	str	r3, [sp, #24]
    7e24:	2f00      	cmp	r7, #0
    7e26:	da52      	bge.n	7ece <_dtoa_r+0x1fe>
    7e28:	9b06      	ldr	r3, [sp, #24]
    7e2a:	9704      	str	r7, [sp, #16]
    7e2c:	1bdb      	subs	r3, r3, r7
    7e2e:	9306      	str	r3, [sp, #24]
    7e30:	427b      	negs	r3, r7
    7e32:	9308      	str	r3, [sp, #32]
    7e34:	9b01      	ldr	r3, [sp, #4]
    7e36:	2b09      	cmp	r3, #9
    7e38:	f04f 0700 	mov.w	r7, #0
    7e3c:	d84e      	bhi.n	7edc <_dtoa_r+0x20c>
    7e3e:	2b05      	cmp	r3, #5
    7e40:	f340 829d 	ble.w	837e <_dtoa_r+0x6ae>
    7e44:	3b04      	subs	r3, #4
    7e46:	9301      	str	r3, [sp, #4]
    7e48:	2600      	movs	r6, #0
    7e4a:	9b01      	ldr	r3, [sp, #4]
    7e4c:	1e9a      	subs	r2, r3, #2
    7e4e:	2a03      	cmp	r2, #3
    7e50:	f200 8125 	bhi.w	809e <_dtoa_r+0x3ce>
    7e54:	e8df f012 	tbh	[pc, r2, lsl #1]
    7e58:	03a703aa 	.word	0x03a703aa
    7e5c:	037e039d 	.word	0x037e039d
    7e60:	9a05      	ldr	r2, [sp, #20]
    7e62:	f3c8 0813 	ubfx	r8, r8, #0, #20
    7e66:	f242 730f 	movw	r3, #9999	; 0x270f
    7e6a:	ea58 0806 	orrs.w	r8, r8, r6
    7e6e:	6013      	str	r3, [r2, #0]
    7e70:	d11e      	bne.n	7eb0 <_dtoa_r+0x1e0>
    7e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7e74:	2b00      	cmp	r3, #0
    7e76:	f000 8591 	beq.w	899c <_dtoa_r+0xccc>
    7e7a:	4b66      	ldr	r3, [pc, #408]	; (8014 <_dtoa_r+0x344>)
    7e7c:	9300      	str	r3, [sp, #0]
    7e7e:	3308      	adds	r3, #8
    7e80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7e82:	9800      	ldr	r0, [sp, #0]
    7e84:	6013      	str	r3, [r2, #0]
    7e86:	b00f      	add	sp, #60	; 0x3c
    7e88:	ecbd 8b02 	vpop	{d8}
    7e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e90:	ee18 6a90 	vmov	r6, s17
    7e94:	f3c6 0613 	ubfx	r6, r6, #0, #20
    7e98:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    7e9c:	ec53 2b18 	vmov	r2, r3, d8
    7ea0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    7ea4:	990c      	ldr	r1, [sp, #48]	; 0x30
    7ea6:	f04f 0a00 	mov.w	sl, #0
    7eaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    7eae:	e77b      	b.n	7da8 <_dtoa_r+0xd8>
    7eb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	f040 833b 	bne.w	852e <_dtoa_r+0x85e>
    7eb8:	4b57      	ldr	r3, [pc, #348]	; (8018 <_dtoa_r+0x348>)
    7eba:	9300      	str	r3, [sp, #0]
    7ebc:	e744      	b.n	7d48 <_dtoa_r+0x78>
    7ebe:	1a09      	subs	r1, r1, r0
    7ec0:	2300      	movs	r3, #0
    7ec2:	f1b1 0801 	subs.w	r8, r1, #1
    7ec6:	930a      	str	r3, [sp, #40]	; 0x28
    7ec8:	f100 80e3 	bmi.w	8092 <_dtoa_r+0x3c2>
    7ecc:	9306      	str	r3, [sp, #24]
    7ece:	2300      	movs	r3, #0
    7ed0:	9308      	str	r3, [sp, #32]
    7ed2:	9b01      	ldr	r3, [sp, #4]
    7ed4:	9704      	str	r7, [sp, #16]
    7ed6:	2b09      	cmp	r3, #9
    7ed8:	44b8      	add	r8, r7
    7eda:	d9b0      	bls.n	7e3e <_dtoa_r+0x16e>
    7edc:	2300      	movs	r3, #0
    7ede:	2601      	movs	r6, #1
    7ee0:	9301      	str	r3, [sp, #4]
    7ee2:	9607      	str	r6, [sp, #28]
    7ee4:	f04f 39ff 	mov.w	r9, #4294967295
    7ee8:	469b      	mov	fp, r3
    7eea:	2100      	movs	r1, #0
    7eec:	63e1      	str	r1, [r4, #60]	; 0x3c
    7eee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    7ef2:	4620      	mov	r0, r4
    7ef4:	f7ff f822 	bl	6f3c <_Balloc>
    7ef8:	9000      	str	r0, [sp, #0]
    7efa:	2800      	cmp	r0, #0
    7efc:	f000 8540 	beq.w	8980 <_dtoa_r+0xcb0>
    7f00:	9b00      	ldr	r3, [sp, #0]
    7f02:	63a3      	str	r3, [r4, #56]	; 0x38
    7f04:	f1b9 0f0e 	cmp.w	r9, #14
    7f08:	f200 80dc 	bhi.w	80c4 <_dtoa_r+0x3f4>
    7f0c:	2e00      	cmp	r6, #0
    7f0e:	f000 80d9 	beq.w	80c4 <_dtoa_r+0x3f4>
    7f12:	9b04      	ldr	r3, [sp, #16]
    7f14:	2b00      	cmp	r3, #0
    7f16:	f340 83de 	ble.w	86d6 <_dtoa_r+0xa06>
    7f1a:	4a3d      	ldr	r2, [pc, #244]	; (8010 <_dtoa_r+0x340>)
    7f1c:	f003 010f 	and.w	r1, r3, #15
    7f20:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    7f24:	ed92 7b00 	vldr	d7, [r2]
    7f28:	111a      	asrs	r2, r3, #4
    7f2a:	05db      	lsls	r3, r3, #23
    7f2c:	f140 8382 	bpl.w	8634 <_dtoa_r+0x964>
    7f30:	493a      	ldr	r1, [pc, #232]	; (801c <_dtoa_r+0x34c>)
    7f32:	ed91 6b08 	vldr	d6, [r1, #32]
    7f36:	f002 020f 	and.w	r2, r2, #15
    7f3a:	2003      	movs	r0, #3
    7f3c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    7f40:	b15a      	cbz	r2, 7f5a <_dtoa_r+0x28a>
    7f42:	4936      	ldr	r1, [pc, #216]	; (801c <_dtoa_r+0x34c>)
    7f44:	07d6      	lsls	r6, r2, #31
    7f46:	d504      	bpl.n	7f52 <_dtoa_r+0x282>
    7f48:	ed91 6b00 	vldr	d6, [r1]
    7f4c:	3001      	adds	r0, #1
    7f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
    7f52:	1052      	asrs	r2, r2, #1
    7f54:	f101 0108 	add.w	r1, r1, #8
    7f58:	d1f4      	bne.n	7f44 <_dtoa_r+0x274>
    7f5a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    7f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f60:	b13b      	cbz	r3, 7f72 <_dtoa_r+0x2a2>
    7f62:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    7f66:	eeb4 6bc7 	vcmpe.f64	d6, d7
    7f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7f6e:	f100 84ae 	bmi.w	88ce <_dtoa_r+0xbfe>
    7f72:	ee07 0a90 	vmov	s15, r0
    7f76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    7f7a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    7f7e:	eea5 7b06 	vfma.f64	d7, d5, d6
    7f82:	ee17 2a90 	vmov	r2, s15
    7f86:	ec51 0b17 	vmov	r0, r1, d7
    7f8a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    7f8e:	f1b9 0f00 	cmp.w	r9, #0
    7f92:	f000 8388 	beq.w	86a6 <_dtoa_r+0x9d6>
    7f96:	9e04      	ldr	r6, [sp, #16]
    7f98:	464a      	mov	r2, r9
    7f9a:	9b07      	ldr	r3, [sp, #28]
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	f000 8447 	beq.w	8830 <_dtoa_r+0xb60>
    7fa2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    7fa6:	4b1a      	ldr	r3, [pc, #104]	; (8010 <_dtoa_r+0x340>)
    7fa8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    7fac:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    7fb0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    7fb4:	ee36 7b47 	vsub.f64	d7, d6, d7
    7fb8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    7fbc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    7fc0:	ec41 0b16 	vmov	d6, r0, r1
    7fc4:	ee14 0a90 	vmov	r0, s9
    7fc8:	ee35 5b46 	vsub.f64	d5, d5, d6
    7fcc:	9900      	ldr	r1, [sp, #0]
    7fce:	eeb4 5bc7 	vcmpe.f64	d5, d7
    7fd2:	3030      	adds	r0, #48	; 0x30
    7fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7fd8:	f801 0b01 	strb.w	r0, [r1], #1
    7fdc:	f300 84ac 	bgt.w	8938 <_dtoa_r+0xc68>
    7fe0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    7fe4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    7fe8:	f04f 0c00 	mov.w	ip, #0
    7fec:	e031      	b.n	8052 <_dtoa_r+0x382>
    7fee:	bf00      	nop
    7ff0:	636f4361 	.word	0x636f4361
    7ff4:	3fd287a7 	.word	0x3fd287a7
    7ff8:	8b60c8b3 	.word	0x8b60c8b3
    7ffc:	3fc68a28 	.word	0x3fc68a28
    8000:	509f79fb 	.word	0x509f79fb
    8004:	3fd34413 	.word	0x3fd34413
    8008:	7ff00000 	.word	0x7ff00000
    800c:	20000c45 	.word	0x20000c45
    8010:	200002a8 	.word	0x200002a8
    8014:	20000828 	.word	0x20000828
    8018:	20000834 	.word	0x20000834
    801c:	20000280 	.word	0x20000280
    8020:	f10c 0c01 	add.w	ip, ip, #1
    8024:	4594      	cmp	ip, r2
    8026:	da4d      	bge.n	80c4 <_dtoa_r+0x3f4>
    8028:	ee27 7b04 	vmul.f64	d7, d7, d4
    802c:	ee25 5b04 	vmul.f64	d5, d5, d4
    8030:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8034:	ee16 3a90 	vmov	r3, s13
    8038:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    803c:	3330      	adds	r3, #48	; 0x30
    803e:	ee37 7b43 	vsub.f64	d7, d7, d3
    8042:	eeb4 7bc5 	vcmpe.f64	d7, d5
    8046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    804a:	f801 3b01 	strb.w	r3, [r1], #1
    804e:	f100 8473 	bmi.w	8938 <_dtoa_r+0xc68>
    8052:	ee32 6b47 	vsub.f64	d6, d2, d7
    8056:	eeb4 6bc5 	vcmpe.f64	d6, d5
    805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    805e:	d5df      	bpl.n	8020 <_dtoa_r+0x350>
    8060:	9a00      	ldr	r2, [sp, #0]
    8062:	9604      	str	r6, [sp, #16]
    8064:	e002      	b.n	806c <_dtoa_r+0x39c>
    8066:	428a      	cmp	r2, r1
    8068:	f000 8450 	beq.w	890c <_dtoa_r+0xc3c>
    806c:	4689      	mov	r9, r1
    806e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    8072:	2b39      	cmp	r3, #57	; 0x39
    8074:	d0f7      	beq.n	8066 <_dtoa_r+0x396>
    8076:	3301      	adds	r3, #1
    8078:	b2db      	uxtb	r3, r3
    807a:	700b      	strb	r3, [r1, #0]
    807c:	9b04      	ldr	r3, [sp, #16]
    807e:	3301      	adds	r3, #1
    8080:	9304      	str	r3, [sp, #16]
    8082:	e155      	b.n	8330 <_dtoa_r+0x660>
    8084:	1a09      	subs	r1, r1, r0
    8086:	2301      	movs	r3, #1
    8088:	f1b1 0801 	subs.w	r8, r1, #1
    808c:	930a      	str	r3, [sp, #40]	; 0x28
    808e:	f57f aec7 	bpl.w	7e20 <_dtoa_r+0x150>
    8092:	f1c1 0301 	rsb	r3, r1, #1
    8096:	9306      	str	r3, [sp, #24]
    8098:	f04f 0800 	mov.w	r8, #0
    809c:	e6c2      	b.n	7e24 <_dtoa_r+0x154>
    809e:	2600      	movs	r6, #0
    80a0:	63e6      	str	r6, [r4, #60]	; 0x3c
    80a2:	4631      	mov	r1, r6
    80a4:	4620      	mov	r0, r4
    80a6:	f7fe ff49 	bl	6f3c <_Balloc>
    80aa:	9000      	str	r0, [sp, #0]
    80ac:	2800      	cmp	r0, #0
    80ae:	f000 8467 	beq.w	8980 <_dtoa_r+0xcb0>
    80b2:	9b00      	ldr	r3, [sp, #0]
    80b4:	63a3      	str	r3, [r4, #56]	; 0x38
    80b6:	f04f 33ff 	mov.w	r3, #4294967295
    80ba:	930b      	str	r3, [sp, #44]	; 0x2c
    80bc:	4699      	mov	r9, r3
    80be:	2301      	movs	r3, #1
    80c0:	46b3      	mov	fp, r6
    80c2:	9307      	str	r3, [sp, #28]
    80c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    80c6:	2a00      	cmp	r2, #0
    80c8:	db55      	blt.n	8176 <_dtoa_r+0x4a6>
    80ca:	9904      	ldr	r1, [sp, #16]
    80cc:	290e      	cmp	r1, #14
    80ce:	dc52      	bgt.n	8176 <_dtoa_r+0x4a6>
    80d0:	4bb7      	ldr	r3, [pc, #732]	; (83b0 <_dtoa_r+0x6e0>)
    80d2:	f1bb 0f00 	cmp.w	fp, #0
    80d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    80da:	ed93 6b00 	vldr	d6, [r3]
    80de:	da15      	bge.n	810c <_dtoa_r+0x43c>
    80e0:	f1b9 0f00 	cmp.w	r9, #0
    80e4:	dc12      	bgt.n	810c <_dtoa_r+0x43c>
    80e6:	f040 82f2 	bne.w	86ce <_dtoa_r+0x9fe>
    80ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    80ee:	ee26 7b07 	vmul.f64	d7, d6, d7
    80f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    80f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    80fa:	46ca      	mov	sl, r9
    80fc:	464e      	mov	r6, r9
    80fe:	f200 826d 	bhi.w	85dc <_dtoa_r+0x90c>
    8102:	f8dd 8000 	ldr.w	r8, [sp]
    8106:	ea6f 0b0b 	mvn.w	fp, fp
    810a:	e270      	b.n	85ee <_dtoa_r+0x91e>
    810c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    8110:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    8114:	9900      	ldr	r1, [sp, #0]
    8116:	ee17 3a10 	vmov	r3, s14
    811a:	f1b9 0f01 	cmp.w	r9, #1
    811e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    8122:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    8126:	f801 3b01 	strb.w	r3, [r1], #1
    812a:	eea5 8b46 	vfms.f64	d8, d5, d6
    812e:	f000 8334 	beq.w	879a <_dtoa_r+0xaca>
    8132:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    8136:	2301      	movs	r3, #1
    8138:	e011      	b.n	815e <_dtoa_r+0x48e>
    813a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    813e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    8142:	3301      	adds	r3, #1
    8144:	ee17 2a10 	vmov	r2, s14
    8148:	454b      	cmp	r3, r9
    814a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    814e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    8152:	f801 2b01 	strb.w	r2, [r1], #1
    8156:	eea5 8b46 	vfms.f64	d8, d5, d6
    815a:	f000 831e 	beq.w	879a <_dtoa_r+0xaca>
    815e:	ee28 8b04 	vmul.f64	d8, d8, d4
    8162:	eeb5 8b40 	vcmp.f64	d8, #0.0
    8166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    816a:	d1e6      	bne.n	813a <_dtoa_r+0x46a>
    816c:	9b04      	ldr	r3, [sp, #16]
    816e:	3301      	adds	r3, #1
    8170:	9304      	str	r3, [sp, #16]
    8172:	4689      	mov	r9, r1
    8174:	e0dc      	b.n	8330 <_dtoa_r+0x660>
    8176:	9b07      	ldr	r3, [sp, #28]
    8178:	b343      	cbz	r3, 81cc <_dtoa_r+0x4fc>
    817a:	9b01      	ldr	r3, [sp, #4]
    817c:	2b01      	cmp	r3, #1
    817e:	f340 8276 	ble.w	866e <_dtoa_r+0x99e>
    8182:	9b08      	ldr	r3, [sp, #32]
    8184:	f109 3aff 	add.w	sl, r9, #4294967295
    8188:	4553      	cmp	r3, sl
    818a:	f280 823f 	bge.w	860c <_dtoa_r+0x93c>
    818e:	9b08      	ldr	r3, [sp, #32]
    8190:	f8cd a020 	str.w	sl, [sp, #32]
    8194:	ebaa 0203 	sub.w	r2, sl, r3
    8198:	4417      	add	r7, r2
    819a:	f04f 0a00 	mov.w	sl, #0
    819e:	f1b9 0f00 	cmp.w	r9, #0
    81a2:	f2c0 8325 	blt.w	87f0 <_dtoa_r+0xb20>
    81a6:	9b06      	ldr	r3, [sp, #24]
    81a8:	9309      	str	r3, [sp, #36]	; 0x24
    81aa:	444b      	add	r3, r9
    81ac:	44c8      	add	r8, r9
    81ae:	9306      	str	r3, [sp, #24]
    81b0:	2101      	movs	r1, #1
    81b2:	4620      	mov	r0, r4
    81b4:	f7fe ff94 	bl	70e0 <__i2b>
    81b8:	4606      	mov	r6, r0
    81ba:	e00c      	b.n	81d6 <_dtoa_r+0x506>
    81bc:	4b7d      	ldr	r3, [pc, #500]	; (83b4 <_dtoa_r+0x6e4>)
    81be:	9300      	str	r3, [sp, #0]
    81c0:	9800      	ldr	r0, [sp, #0]
    81c2:	b00f      	add	sp, #60	; 0x3c
    81c4:	ecbd 8b02 	vpop	{d8}
    81c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81cc:	9b06      	ldr	r3, [sp, #24]
    81ce:	f8dd a020 	ldr.w	sl, [sp, #32]
    81d2:	9e07      	ldr	r6, [sp, #28]
    81d4:	9309      	str	r3, [sp, #36]	; 0x24
    81d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    81d8:	b16b      	cbz	r3, 81f6 <_dtoa_r+0x526>
    81da:	f1b8 0f00 	cmp.w	r8, #0
    81de:	dd0a      	ble.n	81f6 <_dtoa_r+0x526>
    81e0:	4543      	cmp	r3, r8
    81e2:	9906      	ldr	r1, [sp, #24]
    81e4:	461a      	mov	r2, r3
    81e6:	bfa8      	it	ge
    81e8:	4642      	movge	r2, r8
    81ea:	1a89      	subs	r1, r1, r2
    81ec:	1a9b      	subs	r3, r3, r2
    81ee:	9106      	str	r1, [sp, #24]
    81f0:	9309      	str	r3, [sp, #36]	; 0x24
    81f2:	eba8 0802 	sub.w	r8, r8, r2
    81f6:	9b08      	ldr	r3, [sp, #32]
    81f8:	b163      	cbz	r3, 8214 <_dtoa_r+0x544>
    81fa:	9b07      	ldr	r3, [sp, #28]
    81fc:	2b00      	cmp	r3, #0
    81fe:	f000 82a7 	beq.w	8750 <_dtoa_r+0xa80>
    8202:	f1ba 0f00 	cmp.w	sl, #0
    8206:	f300 8204 	bgt.w	8612 <_dtoa_r+0x942>
    820a:	9b08      	ldr	r3, [sp, #32]
    820c:	ebb3 020a 	subs.w	r2, r3, sl
    8210:	f040 82ff 	bne.w	8812 <_dtoa_r+0xb42>
    8214:	2101      	movs	r1, #1
    8216:	4620      	mov	r0, r4
    8218:	f7fe ff62 	bl	70e0 <__i2b>
    821c:	2f00      	cmp	r7, #0
    821e:	4682      	mov	sl, r0
    8220:	f300 80af 	bgt.w	8382 <_dtoa_r+0x6b2>
    8224:	9b01      	ldr	r3, [sp, #4]
    8226:	2b01      	cmp	r3, #1
    8228:	f340 8187 	ble.w	853a <_dtoa_r+0x86a>
    822c:	2300      	movs	r3, #0
    822e:	9308      	str	r3, [sp, #32]
    8230:	2001      	movs	r0, #1
    8232:	2f00      	cmp	r7, #0
    8234:	f040 80b1 	bne.w	839a <_dtoa_r+0x6ca>
    8238:	4440      	add	r0, r8
    823a:	f010 001f 	ands.w	r0, r0, #31
    823e:	f000 817a 	beq.w	8536 <_dtoa_r+0x866>
    8242:	f1c0 0220 	rsb	r2, r0, #32
    8246:	2a04      	cmp	r2, #4
    8248:	f300 8088 	bgt.w	835c <_dtoa_r+0x68c>
    824c:	f040 81f6 	bne.w	863c <_dtoa_r+0x96c>
    8250:	9b06      	ldr	r3, [sp, #24]
    8252:	2b00      	cmp	r3, #0
    8254:	dd05      	ble.n	8262 <_dtoa_r+0x592>
    8256:	4629      	mov	r1, r5
    8258:	461a      	mov	r2, r3
    825a:	4620      	mov	r0, r4
    825c:	f7ff f87c 	bl	7358 <__lshift>
    8260:	4605      	mov	r5, r0
    8262:	f1b8 0f00 	cmp.w	r8, #0
    8266:	dd05      	ble.n	8274 <_dtoa_r+0x5a4>
    8268:	4651      	mov	r1, sl
    826a:	4642      	mov	r2, r8
    826c:	4620      	mov	r0, r4
    826e:	f7ff f873 	bl	7358 <__lshift>
    8272:	4682      	mov	sl, r0
    8274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8276:	2b00      	cmp	r3, #0
    8278:	f040 813f 	bne.w	84fa <_dtoa_r+0x82a>
    827c:	f1b9 0f00 	cmp.w	r9, #0
    8280:	f340 8125 	ble.w	84ce <_dtoa_r+0x7fe>
    8284:	9b07      	ldr	r3, [sp, #28]
    8286:	2b00      	cmp	r3, #0
    8288:	f040 80a3 	bne.w	83d2 <_dtoa_r+0x702>
    828c:	9b04      	ldr	r3, [sp, #16]
    828e:	3301      	adds	r3, #1
    8290:	9304      	str	r3, [sp, #16]
    8292:	f8dd 8000 	ldr.w	r8, [sp]
    8296:	2701      	movs	r7, #1
    8298:	e007      	b.n	82aa <_dtoa_r+0x5da>
    829a:	4629      	mov	r1, r5
    829c:	2300      	movs	r3, #0
    829e:	220a      	movs	r2, #10
    82a0:	4620      	mov	r0, r4
    82a2:	f7fe fe7b 	bl	6f9c <__multadd>
    82a6:	3701      	adds	r7, #1
    82a8:	4605      	mov	r5, r0
    82aa:	4651      	mov	r1, sl
    82ac:	4628      	mov	r0, r5
    82ae:	f7ff fc7b 	bl	7ba8 <quorem>
    82b2:	45b9      	cmp	r9, r7
    82b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    82b8:	f808 0b01 	strb.w	r0, [r8], #1
    82bc:	dced      	bgt.n	829a <_dtoa_r+0x5ca>
    82be:	f1b9 0f00 	cmp.w	r9, #0
    82c2:	9a00      	ldr	r2, [sp, #0]
    82c4:	bfcc      	ite	gt
    82c6:	46cb      	movgt	fp, r9
    82c8:	f04f 0b01 	movle.w	fp, #1
    82cc:	4603      	mov	r3, r0
    82ce:	4493      	add	fp, r2
    82d0:	2700      	movs	r7, #0
    82d2:	4629      	mov	r1, r5
    82d4:	2201      	movs	r2, #1
    82d6:	4620      	mov	r0, r4
    82d8:	9301      	str	r3, [sp, #4]
    82da:	f7ff f83d 	bl	7358 <__lshift>
    82de:	4651      	mov	r1, sl
    82e0:	4605      	mov	r5, r0
    82e2:	f7ff f8b1 	bl	7448 <__mcmp>
    82e6:	2800      	cmp	r0, #0
    82e8:	f340 81af 	ble.w	864a <_dtoa_r+0x97a>
    82ec:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    82f0:	9a00      	ldr	r2, [sp, #0]
    82f2:	f10b 3bff 	add.w	fp, fp, #4294967295
    82f6:	e004      	b.n	8302 <_dtoa_r+0x632>
    82f8:	455a      	cmp	r2, fp
    82fa:	f000 81b1 	beq.w	8660 <_dtoa_r+0x990>
    82fe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    8302:	2b39      	cmp	r3, #57	; 0x39
    8304:	f10b 0901 	add.w	r9, fp, #1
    8308:	d0f6      	beq.n	82f8 <_dtoa_r+0x628>
    830a:	3301      	adds	r3, #1
    830c:	f88b 3000 	strb.w	r3, [fp]
    8310:	4651      	mov	r1, sl
    8312:	4620      	mov	r0, r4
    8314:	f7fe fe38 	bl	6f88 <_Bfree>
    8318:	b156      	cbz	r6, 8330 <_dtoa_r+0x660>
    831a:	b12f      	cbz	r7, 8328 <_dtoa_r+0x658>
    831c:	42b7      	cmp	r7, r6
    831e:	d003      	beq.n	8328 <_dtoa_r+0x658>
    8320:	4639      	mov	r1, r7
    8322:	4620      	mov	r0, r4
    8324:	f7fe fe30 	bl	6f88 <_Bfree>
    8328:	4631      	mov	r1, r6
    832a:	4620      	mov	r0, r4
    832c:	f7fe fe2c 	bl	6f88 <_Bfree>
    8330:	4629      	mov	r1, r5
    8332:	4620      	mov	r0, r4
    8334:	f7fe fe28 	bl	6f88 <_Bfree>
    8338:	2300      	movs	r3, #0
    833a:	f889 3000 	strb.w	r3, [r9]
    833e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8342:	601a      	str	r2, [r3, #0]
    8344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8346:	2b00      	cmp	r3, #0
    8348:	f43f acfe 	beq.w	7d48 <_dtoa_r+0x78>
    834c:	9800      	ldr	r0, [sp, #0]
    834e:	f8c3 9000 	str.w	r9, [r3]
    8352:	b00f      	add	sp, #60	; 0x3c
    8354:	ecbd 8b02 	vpop	{d8}
    8358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    835c:	f1c0 001c 	rsb	r0, r0, #28
    8360:	9b06      	ldr	r3, [sp, #24]
    8362:	4403      	add	r3, r0
    8364:	9306      	str	r3, [sp, #24]
    8366:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8368:	4403      	add	r3, r0
    836a:	9309      	str	r3, [sp, #36]	; 0x24
    836c:	4480      	add	r8, r0
    836e:	e76f      	b.n	8250 <_dtoa_r+0x580>
    8370:	f1c2 0220 	rsb	r2, r2, #32
    8374:	fa06 f202 	lsl.w	r2, r6, r2
    8378:	ee07 2a10 	vmov	s14, r2
    837c:	e509      	b.n	7d92 <_dtoa_r+0xc2>
    837e:	2601      	movs	r6, #1
    8380:	e563      	b.n	7e4a <_dtoa_r+0x17a>
    8382:	4601      	mov	r1, r0
    8384:	463a      	mov	r2, r7
    8386:	4620      	mov	r0, r4
    8388:	f7fe ff86 	bl	7298 <__pow5mult>
    838c:	9b01      	ldr	r3, [sp, #4]
    838e:	2b01      	cmp	r3, #1
    8390:	4682      	mov	sl, r0
    8392:	f340 81c5 	ble.w	8720 <_dtoa_r+0xa50>
    8396:	2300      	movs	r3, #0
    8398:	9308      	str	r3, [sp, #32]
    839a:	f8da 2010 	ldr.w	r2, [sl, #16]
    839e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    83a2:	6910      	ldr	r0, [r2, #16]
    83a4:	f7fe fe4c 	bl	7040 <__hi0bits>
    83a8:	f1c0 0020 	rsb	r0, r0, #32
    83ac:	e744      	b.n	8238 <_dtoa_r+0x568>
    83ae:	bf00      	nop
    83b0:	200002a8 	.word	0x200002a8
    83b4:	20000c44 	.word	0x20000c44
    83b8:	4631      	mov	r1, r6
    83ba:	2300      	movs	r3, #0
    83bc:	220a      	movs	r2, #10
    83be:	4620      	mov	r0, r4
    83c0:	f7fe fdec 	bl	6f9c <__multadd>
    83c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    83c6:	2b00      	cmp	r3, #0
    83c8:	4606      	mov	r6, r0
    83ca:	f340 82ce 	ble.w	896a <_dtoa_r+0xc9a>
    83ce:	9704      	str	r7, [sp, #16]
    83d0:	4699      	mov	r9, r3
    83d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    83d4:	2b00      	cmp	r3, #0
    83d6:	dd05      	ble.n	83e4 <_dtoa_r+0x714>
    83d8:	4631      	mov	r1, r6
    83da:	461a      	mov	r2, r3
    83dc:	4620      	mov	r0, r4
    83de:	f7fe ffbb 	bl	7358 <__lshift>
    83e2:	4606      	mov	r6, r0
    83e4:	9b08      	ldr	r3, [sp, #32]
    83e6:	2b00      	cmp	r3, #0
    83e8:	f040 81eb 	bne.w	87c2 <_dtoa_r+0xaf2>
    83ec:	46b0      	mov	r8, r6
    83ee:	9b02      	ldr	r3, [sp, #8]
    83f0:	9f00      	ldr	r7, [sp, #0]
    83f2:	f003 0201 	and.w	r2, r3, #1
    83f6:	1e7b      	subs	r3, r7, #1
    83f8:	444b      	add	r3, r9
    83fa:	9308      	str	r3, [sp, #32]
    83fc:	9b01      	ldr	r3, [sp, #4]
    83fe:	920a      	str	r2, [sp, #40]	; 0x28
    8400:	4313      	orrs	r3, r2
    8402:	9309      	str	r3, [sp, #36]	; 0x24
    8404:	4651      	mov	r1, sl
    8406:	4628      	mov	r0, r5
    8408:	f7ff fbce 	bl	7ba8 <quorem>
    840c:	4631      	mov	r1, r6
    840e:	4683      	mov	fp, r0
    8410:	4628      	mov	r0, r5
    8412:	f7ff f819 	bl	7448 <__mcmp>
    8416:	4642      	mov	r2, r8
    8418:	4651      	mov	r1, sl
    841a:	4681      	mov	r9, r0
    841c:	4620      	mov	r0, r4
    841e:	f7ff f835 	bl	748c <__mdiff>
    8422:	68c2      	ldr	r2, [r0, #12]
    8424:	4601      	mov	r1, r0
    8426:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    842a:	2a00      	cmp	r2, #0
    842c:	d142      	bne.n	84b4 <_dtoa_r+0x7e4>
    842e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    8432:	4628      	mov	r0, r5
    8434:	f7ff f808 	bl	7448 <__mcmp>
    8438:	9906      	ldr	r1, [sp, #24]
    843a:	9002      	str	r0, [sp, #8]
    843c:	4620      	mov	r0, r4
    843e:	f7fe fda3 	bl	6f88 <_Bfree>
    8442:	9a02      	ldr	r2, [sp, #8]
    8444:	9b07      	ldr	r3, [sp, #28]
    8446:	b91a      	cbnz	r2, 8450 <_dtoa_r+0x780>
    8448:	9909      	ldr	r1, [sp, #36]	; 0x24
    844a:	2900      	cmp	r1, #0
    844c:	f000 827e 	beq.w	894c <_dtoa_r+0xc7c>
    8450:	f1b9 0f00 	cmp.w	r9, #0
    8454:	f2c0 8183 	blt.w	875e <_dtoa_r+0xa8e>
    8458:	9901      	ldr	r1, [sp, #4]
    845a:	ea49 0901 	orr.w	r9, r9, r1
    845e:	990a      	ldr	r1, [sp, #40]	; 0x28
    8460:	ea51 0909 	orrs.w	r9, r1, r9
    8464:	f000 817b 	beq.w	875e <_dtoa_r+0xa8e>
    8468:	2a00      	cmp	r2, #0
    846a:	f300 81c6 	bgt.w	87fa <_dtoa_r+0xb2a>
    846e:	9a08      	ldr	r2, [sp, #32]
    8470:	703b      	strb	r3, [r7, #0]
    8472:	f107 0901 	add.w	r9, r7, #1
    8476:	4297      	cmp	r7, r2
    8478:	46cb      	mov	fp, r9
    847a:	f000 81c4 	beq.w	8806 <_dtoa_r+0xb36>
    847e:	4629      	mov	r1, r5
    8480:	2300      	movs	r3, #0
    8482:	220a      	movs	r2, #10
    8484:	4620      	mov	r0, r4
    8486:	f7fe fd89 	bl	6f9c <__multadd>
    848a:	4546      	cmp	r6, r8
    848c:	4605      	mov	r5, r0
    848e:	4631      	mov	r1, r6
    8490:	f04f 0300 	mov.w	r3, #0
    8494:	f04f 020a 	mov.w	r2, #10
    8498:	4620      	mov	r0, r4
    849a:	d012      	beq.n	84c2 <_dtoa_r+0x7f2>
    849c:	f7fe fd7e 	bl	6f9c <__multadd>
    84a0:	4641      	mov	r1, r8
    84a2:	4606      	mov	r6, r0
    84a4:	2300      	movs	r3, #0
    84a6:	220a      	movs	r2, #10
    84a8:	4620      	mov	r0, r4
    84aa:	f7fe fd77 	bl	6f9c <__multadd>
    84ae:	464f      	mov	r7, r9
    84b0:	4680      	mov	r8, r0
    84b2:	e7a7      	b.n	8404 <_dtoa_r+0x734>
    84b4:	4620      	mov	r0, r4
    84b6:	9302      	str	r3, [sp, #8]
    84b8:	f7fe fd66 	bl	6f88 <_Bfree>
    84bc:	9b02      	ldr	r3, [sp, #8]
    84be:	2201      	movs	r2, #1
    84c0:	e7c6      	b.n	8450 <_dtoa_r+0x780>
    84c2:	f7fe fd6b 	bl	6f9c <__multadd>
    84c6:	464f      	mov	r7, r9
    84c8:	4606      	mov	r6, r0
    84ca:	4680      	mov	r8, r0
    84cc:	e79a      	b.n	8404 <_dtoa_r+0x734>
    84ce:	9b01      	ldr	r3, [sp, #4]
    84d0:	2b02      	cmp	r3, #2
    84d2:	dc71      	bgt.n	85b8 <_dtoa_r+0x8e8>
    84d4:	9b07      	ldr	r3, [sp, #28]
    84d6:	2b00      	cmp	r3, #0
    84d8:	f47f af7b 	bne.w	83d2 <_dtoa_r+0x702>
    84dc:	9b04      	ldr	r3, [sp, #16]
    84de:	4651      	mov	r1, sl
    84e0:	3301      	adds	r3, #1
    84e2:	4628      	mov	r0, r5
    84e4:	9304      	str	r3, [sp, #16]
    84e6:	f7ff fb5f 	bl	7ba8 <quorem>
    84ea:	f8dd b000 	ldr.w	fp, [sp]
    84ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
    84f2:	f80b 3b01 	strb.w	r3, [fp], #1
    84f6:	2700      	movs	r7, #0
    84f8:	e6eb      	b.n	82d2 <_dtoa_r+0x602>
    84fa:	4651      	mov	r1, sl
    84fc:	4628      	mov	r0, r5
    84fe:	f7fe ffa3 	bl	7448 <__mcmp>
    8502:	2800      	cmp	r0, #0
    8504:	f6bf aeba 	bge.w	827c <_dtoa_r+0x5ac>
    8508:	4629      	mov	r1, r5
    850a:	2300      	movs	r3, #0
    850c:	220a      	movs	r2, #10
    850e:	4620      	mov	r0, r4
    8510:	f7fe fd44 	bl	6f9c <__multadd>
    8514:	9b04      	ldr	r3, [sp, #16]
    8516:	1e5f      	subs	r7, r3, #1
    8518:	9b07      	ldr	r3, [sp, #28]
    851a:	4605      	mov	r5, r0
    851c:	2b00      	cmp	r3, #0
    851e:	f47f af4b 	bne.w	83b8 <_dtoa_r+0x6e8>
    8522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8524:	2b00      	cmp	r3, #0
    8526:	f340 8218 	ble.w	895a <_dtoa_r+0xc8a>
    852a:	4699      	mov	r9, r3
    852c:	e6b1      	b.n	8292 <_dtoa_r+0x5c2>
    852e:	4bbc      	ldr	r3, [pc, #752]	; (8820 <_dtoa_r+0xb50>)
    8530:	9300      	str	r3, [sp, #0]
    8532:	3303      	adds	r3, #3
    8534:	e4a4      	b.n	7e80 <_dtoa_r+0x1b0>
    8536:	201c      	movs	r0, #28
    8538:	e712      	b.n	8360 <_dtoa_r+0x690>
    853a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    853e:	2800      	cmp	r0, #0
    8540:	f47f ae74 	bne.w	822c <_dtoa_r+0x55c>
    8544:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8548:	2a00      	cmp	r2, #0
    854a:	f000 80f4 	beq.w	8736 <_dtoa_r+0xa66>
    854e:	9b02      	ldr	r3, [sp, #8]
    8550:	9308      	str	r3, [sp, #32]
    8552:	e66d      	b.n	8230 <_dtoa_r+0x560>
    8554:	2301      	movs	r3, #1
    8556:	9307      	str	r3, [sp, #28]
    8558:	9b04      	ldr	r3, [sp, #16]
    855a:	445b      	add	r3, fp
    855c:	f103 0901 	add.w	r9, r3, #1
    8560:	f1b9 0f01 	cmp.w	r9, #1
    8564:	46cc      	mov	ip, r9
    8566:	930b      	str	r3, [sp, #44]	; 0x2c
    8568:	bfb8      	it	lt
    856a:	f04f 0c01 	movlt.w	ip, #1
    856e:	2100      	movs	r1, #0
    8570:	f1bc 0f17 	cmp.w	ip, #23
    8574:	63e1      	str	r1, [r4, #60]	; 0x3c
    8576:	f77f acbc 	ble.w	7ef2 <_dtoa_r+0x222>
    857a:	2001      	movs	r0, #1
    857c:	2204      	movs	r2, #4
    857e:	0052      	lsls	r2, r2, #1
    8580:	f102 0314 	add.w	r3, r2, #20
    8584:	4563      	cmp	r3, ip
    8586:	4601      	mov	r1, r0
    8588:	f100 0001 	add.w	r0, r0, #1
    858c:	d9f7      	bls.n	857e <_dtoa_r+0x8ae>
    858e:	63e1      	str	r1, [r4, #60]	; 0x3c
    8590:	e4af      	b.n	7ef2 <_dtoa_r+0x222>
    8592:	2301      	movs	r3, #1
    8594:	9307      	str	r3, [sp, #28]
    8596:	f1bb 0f00 	cmp.w	fp, #0
    859a:	dd52      	ble.n	8642 <_dtoa_r+0x972>
    859c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    85a0:	46d9      	mov	r9, fp
    85a2:	46dc      	mov	ip, fp
    85a4:	e7e3      	b.n	856e <_dtoa_r+0x89e>
    85a6:	2300      	movs	r3, #0
    85a8:	9307      	str	r3, [sp, #28]
    85aa:	e7d5      	b.n	8558 <_dtoa_r+0x888>
    85ac:	2300      	movs	r3, #0
    85ae:	9307      	str	r3, [sp, #28]
    85b0:	e7f1      	b.n	8596 <_dtoa_r+0x8c6>
    85b2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    85b6:	9704      	str	r7, [sp, #16]
    85b8:	f1b9 0f00 	cmp.w	r9, #0
    85bc:	f47f ada1 	bne.w	8102 <_dtoa_r+0x432>
    85c0:	4651      	mov	r1, sl
    85c2:	464b      	mov	r3, r9
    85c4:	2205      	movs	r2, #5
    85c6:	4620      	mov	r0, r4
    85c8:	f7fe fce8 	bl	6f9c <__multadd>
    85cc:	4601      	mov	r1, r0
    85ce:	4682      	mov	sl, r0
    85d0:	4628      	mov	r0, r5
    85d2:	f7fe ff39 	bl	7448 <__mcmp>
    85d6:	2800      	cmp	r0, #0
    85d8:	f77f ad93 	ble.w	8102 <_dtoa_r+0x432>
    85dc:	9b04      	ldr	r3, [sp, #16]
    85de:	f103 0b01 	add.w	fp, r3, #1
    85e2:	9b00      	ldr	r3, [sp, #0]
    85e4:	2231      	movs	r2, #49	; 0x31
    85e6:	4698      	mov	r8, r3
    85e8:	f803 2b01 	strb.w	r2, [r3], #1
    85ec:	9300      	str	r3, [sp, #0]
    85ee:	4651      	mov	r1, sl
    85f0:	4620      	mov	r0, r4
    85f2:	f7fe fcc9 	bl	6f88 <_Bfree>
    85f6:	f10b 0301 	add.w	r3, fp, #1
    85fa:	f8dd 9000 	ldr.w	r9, [sp]
    85fe:	9304      	str	r3, [sp, #16]
    8600:	f8cd 8000 	str.w	r8, [sp]
    8604:	2e00      	cmp	r6, #0
    8606:	f47f ae8f 	bne.w	8328 <_dtoa_r+0x658>
    860a:	e691      	b.n	8330 <_dtoa_r+0x660>
    860c:	eba3 0a0a 	sub.w	sl, r3, sl
    8610:	e5c5      	b.n	819e <_dtoa_r+0x4ce>
    8612:	4631      	mov	r1, r6
    8614:	4652      	mov	r2, sl
    8616:	4620      	mov	r0, r4
    8618:	f7fe fe3e 	bl	7298 <__pow5mult>
    861c:	462a      	mov	r2, r5
    861e:	4601      	mov	r1, r0
    8620:	4606      	mov	r6, r0
    8622:	4620      	mov	r0, r4
    8624:	f7fe fd8a 	bl	713c <__multiply>
    8628:	4629      	mov	r1, r5
    862a:	4605      	mov	r5, r0
    862c:	4620      	mov	r0, r4
    862e:	f7fe fcab 	bl	6f88 <_Bfree>
    8632:	e5ea      	b.n	820a <_dtoa_r+0x53a>
    8634:	2002      	movs	r0, #2
    8636:	eeb0 5b48 	vmov.f64	d5, d8
    863a:	e481      	b.n	7f40 <_dtoa_r+0x270>
    863c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    8640:	e68e      	b.n	8360 <_dtoa_r+0x690>
    8642:	f04f 0b01 	mov.w	fp, #1
    8646:	46d9      	mov	r9, fp
    8648:	e44f      	b.n	7eea <_dtoa_r+0x21a>
    864a:	d103      	bne.n	8654 <_dtoa_r+0x984>
    864c:	9b01      	ldr	r3, [sp, #4]
    864e:	07db      	lsls	r3, r3, #31
    8650:	f53f ae4c 	bmi.w	82ec <_dtoa_r+0x61c>
    8654:	46d9      	mov	r9, fp
    8656:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    865a:	2b30      	cmp	r3, #48	; 0x30
    865c:	d0fa      	beq.n	8654 <_dtoa_r+0x984>
    865e:	e657      	b.n	8310 <_dtoa_r+0x640>
    8660:	9b04      	ldr	r3, [sp, #16]
    8662:	9a00      	ldr	r2, [sp, #0]
    8664:	3301      	adds	r3, #1
    8666:	9304      	str	r3, [sp, #16]
    8668:	2331      	movs	r3, #49	; 0x31
    866a:	7013      	strb	r3, [r2, #0]
    866c:	e650      	b.n	8310 <_dtoa_r+0x640>
    866e:	f1ba 0f00 	cmp.w	sl, #0
    8672:	f000 8123 	beq.w	88bc <_dtoa_r+0xbec>
    8676:	f202 4233 	addw	r2, r2, #1075	; 0x433
    867a:	9b06      	ldr	r3, [sp, #24]
    867c:	9309      	str	r3, [sp, #36]	; 0x24
    867e:	4413      	add	r3, r2
    8680:	f8dd a020 	ldr.w	sl, [sp, #32]
    8684:	9306      	str	r3, [sp, #24]
    8686:	4490      	add	r8, r2
    8688:	e592      	b.n	81b0 <_dtoa_r+0x4e0>
    868a:	ee07 0a90 	vmov	s15, r0
    868e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    8692:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    8696:	eea6 5b07 	vfma.f64	d5, d6, d7
    869a:	ee15 2a90 	vmov	r2, s11
    869e:	ec51 0b15 	vmov	r0, r1, d5
    86a2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    86a6:	ec41 0b15 	vmov	d5, r0, r1
    86aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    86ae:	ee36 7b47 	vsub.f64	d7, d6, d7
    86b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    86b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86ba:	f300 8137 	bgt.w	892c <_dtoa_r+0xc5c>
    86be:	eeb1 5b45 	vneg.f64	d5, d5
    86c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    86c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86ca:	f57f acfb 	bpl.w	80c4 <_dtoa_r+0x3f4>
    86ce:	f04f 0a00 	mov.w	sl, #0
    86d2:	4656      	mov	r6, sl
    86d4:	e515      	b.n	8102 <_dtoa_r+0x432>
    86d6:	f000 80f5 	beq.w	88c4 <_dtoa_r+0xbf4>
    86da:	9b04      	ldr	r3, [sp, #16]
    86dc:	4951      	ldr	r1, [pc, #324]	; (8824 <_dtoa_r+0xb54>)
    86de:	425a      	negs	r2, r3
    86e0:	f002 000f 	and.w	r0, r2, #15
    86e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    86e8:	ed91 6b00 	vldr	d6, [r1]
    86ec:	1112      	asrs	r2, r2, #4
    86ee:	ee28 6b06 	vmul.f64	d6, d8, d6
    86f2:	f000 8142 	beq.w	897a <_dtoa_r+0xcaa>
    86f6:	eeb0 7b46 	vmov.f64	d7, d6
    86fa:	494b      	ldr	r1, [pc, #300]	; (8828 <_dtoa_r+0xb58>)
    86fc:	2600      	movs	r6, #0
    86fe:	2002      	movs	r0, #2
    8700:	07d3      	lsls	r3, r2, #31
    8702:	d505      	bpl.n	8710 <_dtoa_r+0xa40>
    8704:	ed91 5b00 	vldr	d5, [r1]
    8708:	3001      	adds	r0, #1
    870a:	2601      	movs	r6, #1
    870c:	ee27 7b05 	vmul.f64	d7, d7, d5
    8710:	1052      	asrs	r2, r2, #1
    8712:	f101 0108 	add.w	r1, r1, #8
    8716:	d1f3      	bne.n	8700 <_dtoa_r+0xa30>
    8718:	2e00      	cmp	r6, #0
    871a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    871e:	e41e      	b.n	7f5e <_dtoa_r+0x28e>
    8720:	9b02      	ldr	r3, [sp, #8]
    8722:	2b00      	cmp	r3, #0
    8724:	f47f ae37 	bne.w	8396 <_dtoa_r+0x6c6>
    8728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    872c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    8730:	2a00      	cmp	r2, #0
    8732:	f040 8137 	bne.w	89a4 <_dtoa_r+0xcd4>
    8736:	4a3d      	ldr	r2, [pc, #244]	; (882c <_dtoa_r+0xb5c>)
    8738:	400a      	ands	r2, r1
    873a:	2a00      	cmp	r2, #0
    873c:	f000 80fa 	beq.w	8934 <_dtoa_r+0xc64>
    8740:	9b06      	ldr	r3, [sp, #24]
    8742:	3301      	adds	r3, #1
    8744:	9306      	str	r3, [sp, #24]
    8746:	2301      	movs	r3, #1
    8748:	f108 0801 	add.w	r8, r8, #1
    874c:	9308      	str	r3, [sp, #32]
    874e:	e56f      	b.n	8230 <_dtoa_r+0x560>
    8750:	4629      	mov	r1, r5
    8752:	9a08      	ldr	r2, [sp, #32]
    8754:	4620      	mov	r0, r4
    8756:	f7fe fd9f 	bl	7298 <__pow5mult>
    875a:	4605      	mov	r5, r0
    875c:	e55a      	b.n	8214 <_dtoa_r+0x544>
    875e:	2a00      	cmp	r2, #0
    8760:	dd12      	ble.n	8788 <_dtoa_r+0xab8>
    8762:	4629      	mov	r1, r5
    8764:	2201      	movs	r2, #1
    8766:	4620      	mov	r0, r4
    8768:	9301      	str	r3, [sp, #4]
    876a:	f7fe fdf5 	bl	7358 <__lshift>
    876e:	4651      	mov	r1, sl
    8770:	4605      	mov	r5, r0
    8772:	f7fe fe69 	bl	7448 <__mcmp>
    8776:	2800      	cmp	r0, #0
    8778:	9b01      	ldr	r3, [sp, #4]
    877a:	f340 80e1 	ble.w	8940 <_dtoa_r+0xc70>
    877e:	2b39      	cmp	r3, #57	; 0x39
    8780:	f000 80ca 	beq.w	8918 <_dtoa_r+0xc48>
    8784:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    8788:	46b9      	mov	r9, r7
    878a:	f809 3b01 	strb.w	r3, [r9], #1
    878e:	9b04      	ldr	r3, [sp, #16]
    8790:	3301      	adds	r3, #1
    8792:	4637      	mov	r7, r6
    8794:	9304      	str	r3, [sp, #16]
    8796:	4646      	mov	r6, r8
    8798:	e5ba      	b.n	8310 <_dtoa_r+0x640>
    879a:	ee38 8b08 	vadd.f64	d8, d8, d8
    879e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    87a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87a6:	dc0a      	bgt.n	87be <_dtoa_r+0xaee>
    87a8:	eeb4 8b46 	vcmp.f64	d8, d6
    87ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87b0:	f47f acdc 	bne.w	816c <_dtoa_r+0x49c>
    87b4:	ee17 3a10 	vmov	r3, s14
    87b8:	07d8      	lsls	r0, r3, #31
    87ba:	f57f acd7 	bpl.w	816c <_dtoa_r+0x49c>
    87be:	9a00      	ldr	r2, [sp, #0]
    87c0:	e454      	b.n	806c <_dtoa_r+0x39c>
    87c2:	6871      	ldr	r1, [r6, #4]
    87c4:	4620      	mov	r0, r4
    87c6:	f7fe fbb9 	bl	6f3c <_Balloc>
    87ca:	4607      	mov	r7, r0
    87cc:	2800      	cmp	r0, #0
    87ce:	f000 80de 	beq.w	898e <_dtoa_r+0xcbe>
    87d2:	6933      	ldr	r3, [r6, #16]
    87d4:	3302      	adds	r3, #2
    87d6:	009a      	lsls	r2, r3, #2
    87d8:	f106 010c 	add.w	r1, r6, #12
    87dc:	300c      	adds	r0, #12
    87de:	f7fa fec5 	bl	356c <memcpy>
    87e2:	4639      	mov	r1, r7
    87e4:	2201      	movs	r2, #1
    87e6:	4620      	mov	r0, r4
    87e8:	f7fe fdb6 	bl	7358 <__lshift>
    87ec:	4680      	mov	r8, r0
    87ee:	e5fe      	b.n	83ee <_dtoa_r+0x71e>
    87f0:	9b06      	ldr	r3, [sp, #24]
    87f2:	eba3 0309 	sub.w	r3, r3, r9
    87f6:	9309      	str	r3, [sp, #36]	; 0x24
    87f8:	e4da      	b.n	81b0 <_dtoa_r+0x4e0>
    87fa:	2b39      	cmp	r3, #57	; 0x39
    87fc:	f000 808c 	beq.w	8918 <_dtoa_r+0xc48>
    8800:	46b9      	mov	r9, r7
    8802:	3301      	adds	r3, #1
    8804:	e7c1      	b.n	878a <_dtoa_r+0xaba>
    8806:	9a04      	ldr	r2, [sp, #16]
    8808:	3201      	adds	r2, #1
    880a:	4637      	mov	r7, r6
    880c:	9204      	str	r2, [sp, #16]
    880e:	4646      	mov	r6, r8
    8810:	e55f      	b.n	82d2 <_dtoa_r+0x602>
    8812:	4629      	mov	r1, r5
    8814:	4620      	mov	r0, r4
    8816:	f7fe fd3f 	bl	7298 <__pow5mult>
    881a:	4605      	mov	r5, r0
    881c:	e4fa      	b.n	8214 <_dtoa_r+0x544>
    881e:	bf00      	nop
    8820:	20000834 	.word	0x20000834
    8824:	200002a8 	.word	0x200002a8
    8828:	20000280 	.word	0x20000280
    882c:	7ff00000 	.word	0x7ff00000
    8830:	4b5e      	ldr	r3, [pc, #376]	; (89ac <_dtoa_r+0xcdc>)
    8832:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    8836:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    883a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    883e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    8842:	ee36 7b47 	vsub.f64	d7, d6, d7
    8846:	ec41 0b16 	vmov	d6, r0, r1
    884a:	ee15 1a90 	vmov	r1, s11
    884e:	ee23 3b06 	vmul.f64	d3, d3, d6
    8852:	9800      	ldr	r0, [sp, #0]
    8854:	3130      	adds	r1, #48	; 0x30
    8856:	2a01      	cmp	r2, #1
    8858:	f800 1b01 	strb.w	r1, [r0], #1
    885c:	f000 8083 	beq.w	8966 <_dtoa_r+0xc96>
    8860:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    8864:	9b00      	ldr	r3, [sp, #0]
    8866:	1899      	adds	r1, r3, r2
    8868:	ee27 7b04 	vmul.f64	d7, d7, d4
    886c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    8870:	ee16 3a90 	vmov	r3, s13
    8874:	3330      	adds	r3, #48	; 0x30
    8876:	f800 3b01 	strb.w	r3, [r0], #1
    887a:	4281      	cmp	r1, r0
    887c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    8880:	ee37 7b45 	vsub.f64	d7, d7, d5
    8884:	d1f0      	bne.n	8868 <_dtoa_r+0xb98>
    8886:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    888a:	ee33 5b06 	vadd.f64	d5, d3, d6
    888e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    8892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8896:	f53f abe3 	bmi.w	8060 <_dtoa_r+0x390>
    889a:	ee36 6b43 	vsub.f64	d6, d6, d3
    889e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    88a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88a6:	f77f ac0d 	ble.w	80c4 <_dtoa_r+0x3f4>
    88aa:	4689      	mov	r9, r1
    88ac:	3901      	subs	r1, #1
    88ae:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    88b2:	2b30      	cmp	r3, #48	; 0x30
    88b4:	d0f9      	beq.n	88aa <_dtoa_r+0xbda>
    88b6:	1c73      	adds	r3, r6, #1
    88b8:	9304      	str	r3, [sp, #16]
    88ba:	e539      	b.n	8330 <_dtoa_r+0x660>
    88bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    88c2:	e6da      	b.n	867a <_dtoa_r+0x9aa>
    88c4:	2002      	movs	r0, #2
    88c6:	eeb0 6b48 	vmov.f64	d6, d8
    88ca:	f7ff bb48 	b.w	7f5e <_dtoa_r+0x28e>
    88ce:	f1b9 0f00 	cmp.w	r9, #0
    88d2:	f43f aeda 	beq.w	868a <_dtoa_r+0x9ba>
    88d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    88d8:	2a00      	cmp	r2, #0
    88da:	f77f abf3 	ble.w	80c4 <_dtoa_r+0x3f4>
    88de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    88e2:	ee26 6b04 	vmul.f64	d6, d6, d4
    88e6:	3001      	adds	r0, #1
    88e8:	ee07 0a90 	vmov	s15, r0
    88ec:	9b04      	ldr	r3, [sp, #16]
    88ee:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    88f2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    88f6:	eea6 7b05 	vfma.f64	d7, d6, d5
    88fa:	ee17 ca90 	vmov	ip, s15
    88fe:	ec51 0b17 	vmov	r0, r1, d7
    8902:	1e5e      	subs	r6, r3, #1
    8904:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    8908:	f7ff bb47 	b.w	7f9a <_dtoa_r+0x2ca>
    890c:	9b04      	ldr	r3, [sp, #16]
    890e:	3301      	adds	r3, #1
    8910:	9304      	str	r3, [sp, #16]
    8912:	2331      	movs	r3, #49	; 0x31
    8914:	f7ff bbb1 	b.w	807a <_dtoa_r+0x3aa>
    8918:	9b04      	ldr	r3, [sp, #16]
    891a:	46bb      	mov	fp, r7
    891c:	3301      	adds	r3, #1
    891e:	9304      	str	r3, [sp, #16]
    8920:	2339      	movs	r3, #57	; 0x39
    8922:	4637      	mov	r7, r6
    8924:	f80b 3b01 	strb.w	r3, [fp], #1
    8928:	4646      	mov	r6, r8
    892a:	e4e1      	b.n	82f0 <_dtoa_r+0x620>
    892c:	f04f 0a00 	mov.w	sl, #0
    8930:	4656      	mov	r6, sl
    8932:	e653      	b.n	85dc <_dtoa_r+0x90c>
    8934:	9208      	str	r2, [sp, #32]
    8936:	e47b      	b.n	8230 <_dtoa_r+0x560>
    8938:	1c73      	adds	r3, r6, #1
    893a:	9304      	str	r3, [sp, #16]
    893c:	4689      	mov	r9, r1
    893e:	e4f7      	b.n	8330 <_dtoa_r+0x660>
    8940:	f47f af22 	bne.w	8788 <_dtoa_r+0xab8>
    8944:	07da      	lsls	r2, r3, #31
    8946:	f57f af1f 	bpl.w	8788 <_dtoa_r+0xab8>
    894a:	e718      	b.n	877e <_dtoa_r+0xaae>
    894c:	2b39      	cmp	r3, #57	; 0x39
    894e:	d0e3      	beq.n	8918 <_dtoa_r+0xc48>
    8950:	f1b9 0f00 	cmp.w	r9, #0
    8954:	f73f af16 	bgt.w	8784 <_dtoa_r+0xab4>
    8958:	e716      	b.n	8788 <_dtoa_r+0xab8>
    895a:	9b01      	ldr	r3, [sp, #4]
    895c:	2b02      	cmp	r3, #2
    895e:	f73f ae28 	bgt.w	85b2 <_dtoa_r+0x8e2>
    8962:	9704      	str	r7, [sp, #16]
    8964:	e5ba      	b.n	84dc <_dtoa_r+0x80c>
    8966:	4601      	mov	r1, r0
    8968:	e78d      	b.n	8886 <_dtoa_r+0xbb6>
    896a:	9b01      	ldr	r3, [sp, #4]
    896c:	2b02      	cmp	r3, #2
    896e:	f73f ae20 	bgt.w	85b2 <_dtoa_r+0x8e2>
    8972:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    8976:	9704      	str	r7, [sp, #16]
    8978:	e52b      	b.n	83d2 <_dtoa_r+0x702>
    897a:	2002      	movs	r0, #2
    897c:	f7ff baef 	b.w	7f5e <_dtoa_r+0x28e>
    8980:	4b0b      	ldr	r3, [pc, #44]	; (89b0 <_dtoa_r+0xce0>)
    8982:	480c      	ldr	r0, [pc, #48]	; (89b4 <_dtoa_r+0xce4>)
    8984:	2200      	movs	r2, #0
    8986:	f240 11af 	movw	r1, #431	; 0x1af
    898a:	f7ff f8b1 	bl	7af0 <__assert_func>
    898e:	4b08      	ldr	r3, [pc, #32]	; (89b0 <_dtoa_r+0xce0>)
    8990:	4808      	ldr	r0, [pc, #32]	; (89b4 <_dtoa_r+0xce4>)
    8992:	463a      	mov	r2, r7
    8994:	f240 21ef 	movw	r1, #751	; 0x2ef
    8998:	f7ff f8aa 	bl	7af0 <__assert_func>
    899c:	4b06      	ldr	r3, [pc, #24]	; (89b8 <_dtoa_r+0xce8>)
    899e:	9300      	str	r3, [sp, #0]
    89a0:	f7ff b9d2 	b.w	7d48 <_dtoa_r+0x78>
    89a4:	9b02      	ldr	r3, [sp, #8]
    89a6:	9308      	str	r3, [sp, #32]
    89a8:	e4f7      	b.n	839a <_dtoa_r+0x6ca>
    89aa:	bf00      	nop
    89ac:	200002a8 	.word	0x200002a8
    89b0:	2000068c 	.word	0x2000068c
    89b4:	20000838 	.word	0x20000838
    89b8:	20000828 	.word	0x20000828

000089bc <_wcrtomb_r>:
    89bc:	b570      	push	{r4, r5, r6, lr}
    89be:	4605      	mov	r5, r0
    89c0:	b084      	sub	sp, #16
    89c2:	b15b      	cbz	r3, 89dc <_wcrtomb_r+0x20>
    89c4:	461c      	mov	r4, r3
    89c6:	b169      	cbz	r1, 89e4 <_wcrtomb_r+0x28>
    89c8:	4b0e      	ldr	r3, [pc, #56]	; (8a04 <_wcrtomb_r+0x48>)
    89ca:	4628      	mov	r0, r5
    89cc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    89d0:	4623      	mov	r3, r4
    89d2:	47b0      	blx	r6
    89d4:	1c43      	adds	r3, r0, #1
    89d6:	d00f      	beq.n	89f8 <_wcrtomb_r+0x3c>
    89d8:	b004      	add	sp, #16
    89da:	bd70      	pop	{r4, r5, r6, pc}
    89dc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    89e0:	2900      	cmp	r1, #0
    89e2:	d1f1      	bne.n	89c8 <_wcrtomb_r+0xc>
    89e4:	4a07      	ldr	r2, [pc, #28]	; (8a04 <_wcrtomb_r+0x48>)
    89e6:	4623      	mov	r3, r4
    89e8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    89ec:	4628      	mov	r0, r5
    89ee:	460a      	mov	r2, r1
    89f0:	a901      	add	r1, sp, #4
    89f2:	47b0      	blx	r6
    89f4:	1c43      	adds	r3, r0, #1
    89f6:	d1ef      	bne.n	89d8 <_wcrtomb_r+0x1c>
    89f8:	2200      	movs	r2, #0
    89fa:	238a      	movs	r3, #138	; 0x8a
    89fc:	6022      	str	r2, [r4, #0]
    89fe:	602b      	str	r3, [r5, #0]
    8a00:	b004      	add	sp, #16
    8a02:	bd70      	pop	{r4, r5, r6, pc}
    8a04:	200011c0 	.word	0x200011c0

00008a08 <_wcsrtombs_r>:
    8a08:	b510      	push	{r4, lr}
    8a0a:	b082      	sub	sp, #8
    8a0c:	9c04      	ldr	r4, [sp, #16]
    8a0e:	e9cd 3400 	strd	r3, r4, [sp]
    8a12:	f04f 33ff 	mov.w	r3, #4294967295
    8a16:	f001 fb47 	bl	a0a8 <_wcsnrtombs_r>
    8a1a:	b002      	add	sp, #8
    8a1c:	bd10      	pop	{r4, pc}
    8a1e:	bf00      	nop

00008a20 <fiprintf>:
    8a20:	b40e      	push	{r1, r2, r3}
    8a22:	b510      	push	{r4, lr}
    8a24:	b083      	sub	sp, #12
    8a26:	ab05      	add	r3, sp, #20
    8a28:	4c06      	ldr	r4, [pc, #24]	; (8a44 <fiprintf+0x24>)
    8a2a:	f853 2b04 	ldr.w	r2, [r3], #4
    8a2e:	9301      	str	r3, [sp, #4]
    8a30:	4601      	mov	r1, r0
    8a32:	6820      	ldr	r0, [r4, #0]
    8a34:	f000 f844 	bl	8ac0 <_vfiprintf_r>
    8a38:	b003      	add	sp, #12
    8a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a3e:	b003      	add	sp, #12
    8a40:	4770      	bx	lr
    8a42:	bf00      	nop
    8a44:	20001748 	.word	0x20001748

00008a48 <__sprint_r.part.0>:
    8a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8a4e:	049c      	lsls	r4, r3, #18
    8a50:	4690      	mov	r8, r2
    8a52:	d52d      	bpl.n	8ab0 <__sprint_r.part.0+0x68>
    8a54:	6893      	ldr	r3, [r2, #8]
    8a56:	6812      	ldr	r2, [r2, #0]
    8a58:	b343      	cbz	r3, 8aac <__sprint_r.part.0+0x64>
    8a5a:	468b      	mov	fp, r1
    8a5c:	4606      	mov	r6, r0
    8a5e:	f102 0908 	add.w	r9, r2, #8
    8a62:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    8a66:	ea5f 079a 	movs.w	r7, sl, lsr #2
    8a6a:	d015      	beq.n	8a98 <__sprint_r.part.0+0x50>
    8a6c:	3d04      	subs	r5, #4
    8a6e:	2400      	movs	r4, #0
    8a70:	e001      	b.n	8a76 <__sprint_r.part.0+0x2e>
    8a72:	42a7      	cmp	r7, r4
    8a74:	d00e      	beq.n	8a94 <__sprint_r.part.0+0x4c>
    8a76:	f855 1f04 	ldr.w	r1, [r5, #4]!
    8a7a:	465a      	mov	r2, fp
    8a7c:	4630      	mov	r0, r6
    8a7e:	f001 fa5b 	bl	9f38 <_fputwc_r>
    8a82:	1c43      	adds	r3, r0, #1
    8a84:	f104 0401 	add.w	r4, r4, #1
    8a88:	d1f3      	bne.n	8a72 <__sprint_r.part.0+0x2a>
    8a8a:	2300      	movs	r3, #0
    8a8c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a94:	f8d8 3008 	ldr.w	r3, [r8, #8]
    8a98:	f02a 0a03 	bic.w	sl, sl, #3
    8a9c:	eba3 030a 	sub.w	r3, r3, sl
    8aa0:	f8c8 3008 	str.w	r3, [r8, #8]
    8aa4:	f109 0908 	add.w	r9, r9, #8
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d1da      	bne.n	8a62 <__sprint_r.part.0+0x1a>
    8aac:	2000      	movs	r0, #0
    8aae:	e7ec      	b.n	8a8a <__sprint_r.part.0+0x42>
    8ab0:	f001 f80c 	bl	9acc <__sfvwrite_r>
    8ab4:	2300      	movs	r3, #0
    8ab6:	e9c8 3301 	strd	r3, r3, [r8, #4]
    8aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8abe:	bf00      	nop

00008ac0 <_vfiprintf_r>:
    8ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ac4:	ed2d 8b02 	vpush	{d8}
    8ac8:	b0c5      	sub	sp, #276	; 0x114
    8aca:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    8ace:	4683      	mov	fp, r0
    8ad0:	ee08 1a10 	vmov	s16, r1
    8ad4:	4616      	mov	r6, r2
    8ad6:	2100      	movs	r1, #0
    8ad8:	2208      	movs	r2, #8
    8ada:	4650      	mov	r0, sl
    8adc:	461c      	mov	r4, r3
    8ade:	9307      	str	r3, [sp, #28]
    8ae0:	f7fd fa94 	bl	600c <memset>
    8ae4:	f1bb 0f00 	cmp.w	fp, #0
    8ae8:	d004      	beq.n	8af4 <_vfiprintf_r+0x34>
    8aea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    8aee:	2b00      	cmp	r3, #0
    8af0:	f000 86a0 	beq.w	9834 <_vfiprintf_r+0xd74>
    8af4:	ee18 2a10 	vmov	r2, s16
    8af8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    8afa:	07db      	lsls	r3, r3, #31
    8afc:	f140 8513 	bpl.w	9526 <_vfiprintf_r+0xa66>
    8b00:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    8b04:	b28a      	uxth	r2, r1
    8b06:	0495      	lsls	r5, r2, #18
    8b08:	d40b      	bmi.n	8b22 <_vfiprintf_r+0x62>
    8b0a:	ee18 3a10 	vmov	r3, s16
    8b0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    8b12:	8199      	strh	r1, [r3, #12]
    8b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    8b16:	b28a      	uxth	r2, r1
    8b18:	ee18 1a10 	vmov	r1, s16
    8b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    8b20:	664b      	str	r3, [r1, #100]	; 0x64
    8b22:	0710      	lsls	r0, r2, #28
    8b24:	f140 8105 	bpl.w	8d32 <_vfiprintf_r+0x272>
    8b28:	ee18 3a10 	vmov	r3, s16
    8b2c:	691b      	ldr	r3, [r3, #16]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	f000 80ff 	beq.w	8d32 <_vfiprintf_r+0x272>
    8b34:	f002 031a 	and.w	r3, r2, #26
    8b38:	2b0a      	cmp	r3, #10
    8b3a:	f000 810a 	beq.w	8d52 <_vfiprintf_r+0x292>
    8b3e:	2300      	movs	r3, #0
    8b40:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    8b44:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    8b48:	aa1b      	add	r2, sp, #108	; 0x6c
    8b4a:	930c      	str	r3, [sp, #48]	; 0x30
    8b4c:	9218      	str	r2, [sp, #96]	; 0x60
    8b4e:	4691      	mov	r9, r2
    8b50:	930b      	str	r3, [sp, #44]	; 0x2c
    8b52:	9305      	str	r3, [sp, #20]
    8b54:	46b0      	mov	r8, r6
    8b56:	4644      	mov	r4, r8
    8b58:	4ba8      	ldr	r3, [pc, #672]	; (8dfc <_vfiprintf_r+0x33c>)
    8b5a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    8b5e:	f7fd fd53 	bl	6608 <__locale_mb_cur_max>
    8b62:	4622      	mov	r2, r4
    8b64:	4603      	mov	r3, r0
    8b66:	a912      	add	r1, sp, #72	; 0x48
    8b68:	f8cd a000 	str.w	sl, [sp]
    8b6c:	4658      	mov	r0, fp
    8b6e:	47a8      	blx	r5
    8b70:	2800      	cmp	r0, #0
    8b72:	f000 8145 	beq.w	8e00 <_vfiprintf_r+0x340>
    8b76:	f2c0 8139 	blt.w	8dec <_vfiprintf_r+0x32c>
    8b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8b7c:	2a25      	cmp	r2, #37	; 0x25
    8b7e:	4603      	mov	r3, r0
    8b80:	d001      	beq.n	8b86 <_vfiprintf_r+0xc6>
    8b82:	441c      	add	r4, r3
    8b84:	e7e8      	b.n	8b58 <_vfiprintf_r+0x98>
    8b86:	ebb4 0608 	subs.w	r6, r4, r8
    8b8a:	4605      	mov	r5, r0
    8b8c:	f040 813c 	bne.w	8e08 <_vfiprintf_r+0x348>
    8b90:	2300      	movs	r3, #0
    8b92:	7861      	ldrb	r1, [r4, #1]
    8b94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8b98:	f104 0801 	add.w	r8, r4, #1
    8b9c:	9306      	str	r3, [sp, #24]
    8b9e:	f04f 37ff 	mov.w	r7, #4294967295
    8ba2:	461e      	mov	r6, r3
    8ba4:	242b      	movs	r4, #43	; 0x2b
    8ba6:	f108 0801 	add.w	r8, r8, #1
    8baa:	f1a1 0320 	sub.w	r3, r1, #32
    8bae:	2b5a      	cmp	r3, #90	; 0x5a
    8bb0:	f200 8178 	bhi.w	8ea4 <_vfiprintf_r+0x3e4>
    8bb4:	e8df f013 	tbh	[pc, r3, lsl #1]
    8bb8:	017602b5 	.word	0x017602b5
    8bbc:	02b00176 	.word	0x02b00176
    8bc0:	01760176 	.word	0x01760176
    8bc4:	006a0176 	.word	0x006a0176
    8bc8:	01760176 	.word	0x01760176
    8bcc:	028d027d 	.word	0x028d027d
    8bd0:	02880176 	.word	0x02880176
    8bd4:	01760297 	.word	0x01760297
    8bd8:	005b0292 	.word	0x005b0292
    8bdc:	005b005b 	.word	0x005b005b
    8be0:	005b005b 	.word	0x005b005b
    8be4:	005b005b 	.word	0x005b005b
    8be8:	005b005b 	.word	0x005b005b
    8bec:	01760176 	.word	0x01760176
    8bf0:	01760176 	.word	0x01760176
    8bf4:	01760176 	.word	0x01760176
    8bf8:	01760176 	.word	0x01760176
    8bfc:	025c0176 	.word	0x025c0176
    8c00:	01760084 	.word	0x01760084
    8c04:	01760176 	.word	0x01760176
    8c08:	01760176 	.word	0x01760176
    8c0c:	01760176 	.word	0x01760176
    8c10:	01760176 	.word	0x01760176
    8c14:	00e80176 	.word	0x00e80176
    8c18:	01760176 	.word	0x01760176
    8c1c:	02330176 	.word	0x02330176
    8c20:	02da0176 	.word	0x02da0176
    8c24:	01760176 	.word	0x01760176
    8c28:	0176058b 	.word	0x0176058b
    8c2c:	01760176 	.word	0x01760176
    8c30:	01760176 	.word	0x01760176
    8c34:	01760176 	.word	0x01760176
    8c38:	01760176 	.word	0x01760176
    8c3c:	025c0176 	.word	0x025c0176
    8c40:	01760086 	.word	0x01760086
    8c44:	01760176 	.word	0x01760176
    8c48:	008602cd 	.word	0x008602cd
    8c4c:	0176007f 	.word	0x0176007f
    8c50:	017602c0 	.word	0x017602c0
    8c54:	00ea02fd 	.word	0x00ea02fd
    8c58:	007f02ed 	.word	0x007f02ed
    8c5c:	02330176 	.word	0x02330176
    8c60:	0569007c 	.word	0x0569007c
    8c64:	01760176 	.word	0x01760176
    8c68:	0176056b 	.word	0x0176056b
    8c6c:	007c      	.short	0x007c
    8c6e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8c72:	2200      	movs	r2, #0
    8c74:	f818 1b01 	ldrb.w	r1, [r8], #1
    8c78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    8c7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    8c80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    8c84:	2b09      	cmp	r3, #9
    8c86:	d9f5      	bls.n	8c74 <_vfiprintf_r+0x1b4>
    8c88:	9206      	str	r2, [sp, #24]
    8c8a:	e78e      	b.n	8baa <_vfiprintf_r+0xea>
    8c8c:	4658      	mov	r0, fp
    8c8e:	f7fe fed9 	bl	7a44 <_localeconv_r>
    8c92:	6843      	ldr	r3, [r0, #4]
    8c94:	930d      	str	r3, [sp, #52]	; 0x34
    8c96:	4618      	mov	r0, r3
    8c98:	f7fd ff32 	bl	6b00 <strlen>
    8c9c:	900e      	str	r0, [sp, #56]	; 0x38
    8c9e:	4605      	mov	r5, r0
    8ca0:	4658      	mov	r0, fp
    8ca2:	f7fe fecf 	bl	7a44 <_localeconv_r>
    8ca6:	6883      	ldr	r3, [r0, #8]
    8ca8:	930b      	str	r3, [sp, #44]	; 0x2c
    8caa:	2d00      	cmp	r5, #0
    8cac:	f040 84d6 	bne.w	965c <_vfiprintf_r+0xb9c>
    8cb0:	f898 1000 	ldrb.w	r1, [r8]
    8cb4:	e777      	b.n	8ba6 <_vfiprintf_r+0xe6>
    8cb6:	f898 1000 	ldrb.w	r1, [r8]
    8cba:	f046 0620 	orr.w	r6, r6, #32
    8cbe:	e772      	b.n	8ba6 <_vfiprintf_r+0xe6>
    8cc0:	f046 0610 	orr.w	r6, r6, #16
    8cc4:	06b4      	lsls	r4, r6, #26
    8cc6:	f140 818e 	bpl.w	8fe6 <_vfiprintf_r+0x526>
    8cca:	9b07      	ldr	r3, [sp, #28]
    8ccc:	3307      	adds	r3, #7
    8cce:	f023 0307 	bic.w	r3, r3, #7
    8cd2:	461a      	mov	r2, r3
    8cd4:	6859      	ldr	r1, [r3, #4]
    8cd6:	f852 3b08 	ldr.w	r3, [r2], #8
    8cda:	9207      	str	r2, [sp, #28]
    8cdc:	460a      	mov	r2, r1
    8cde:	2900      	cmp	r1, #0
    8ce0:	f2c0 8470 	blt.w	95c4 <_vfiprintf_r+0xb04>
    8ce4:	1c79      	adds	r1, r7, #1
    8ce6:	f000 85a2 	beq.w	982e <_vfiprintf_r+0xd6e>
    8cea:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    8cee:	9103      	str	r1, [sp, #12]
    8cf0:	ea53 0102 	orrs.w	r1, r3, r2
    8cf4:	f000 843f 	beq.w	9576 <_vfiprintf_r+0xab6>
    8cf8:	2b0a      	cmp	r3, #10
    8cfa:	f172 0100 	sbcs.w	r1, r2, #0
    8cfe:	f080 8541 	bcs.w	9784 <_vfiprintf_r+0xcc4>
    8d02:	3330      	adds	r3, #48	; 0x30
    8d04:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8d08:	9e03      	ldr	r6, [sp, #12]
    8d0a:	2301      	movs	r3, #1
    8d0c:	9304      	str	r3, [sp, #16]
    8d0e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8d12:	9b04      	ldr	r3, [sp, #16]
    8d14:	42bb      	cmp	r3, r7
    8d16:	bfb8      	it	lt
    8d18:	463b      	movlt	r3, r7
    8d1a:	9303      	str	r3, [sp, #12]
    8d1c:	2300      	movs	r3, #0
    8d1e:	9308      	str	r3, [sp, #32]
    8d20:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    8d24:	2b00      	cmp	r3, #0
    8d26:	f000 80cb 	beq.w	8ec0 <_vfiprintf_r+0x400>
    8d2a:	9b03      	ldr	r3, [sp, #12]
    8d2c:	3301      	adds	r3, #1
    8d2e:	9303      	str	r3, [sp, #12]
    8d30:	e0c6      	b.n	8ec0 <_vfiprintf_r+0x400>
    8d32:	ee18 1a10 	vmov	r1, s16
    8d36:	4658      	mov	r0, fp
    8d38:	ee18 5a10 	vmov	r5, s16
    8d3c:	f001 f840 	bl	9dc0 <__swsetup_r>
    8d40:	2800      	cmp	r0, #0
    8d42:	f040 8652 	bne.w	99ea <_vfiprintf_r+0xf2a>
    8d46:	89aa      	ldrh	r2, [r5, #12]
    8d48:	f002 031a 	and.w	r3, r2, #26
    8d4c:	2b0a      	cmp	r3, #10
    8d4e:	f47f aef6 	bne.w	8b3e <_vfiprintf_r+0x7e>
    8d52:	ee18 1a10 	vmov	r1, s16
    8d56:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    8d5a:	2b00      	cmp	r3, #0
    8d5c:	f6ff aeef 	blt.w	8b3e <_vfiprintf_r+0x7e>
    8d60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    8d62:	07db      	lsls	r3, r3, #31
    8d64:	d402      	bmi.n	8d6c <_vfiprintf_r+0x2ac>
    8d66:	0597      	lsls	r7, r2, #22
    8d68:	f140 8612 	bpl.w	9990 <_vfiprintf_r+0xed0>
    8d6c:	ee18 1a10 	vmov	r1, s16
    8d70:	4623      	mov	r3, r4
    8d72:	4632      	mov	r2, r6
    8d74:	4658      	mov	r0, fp
    8d76:	f000 fe69 	bl	9a4c <__sbprintf>
    8d7a:	9005      	str	r0, [sp, #20]
    8d7c:	9805      	ldr	r0, [sp, #20]
    8d7e:	b045      	add	sp, #276	; 0x114
    8d80:	ecbd 8b02 	vpop	{d8}
    8d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d88:	f046 0610 	orr.w	r6, r6, #16
    8d8c:	f016 0220 	ands.w	r2, r6, #32
    8d90:	f000 8136 	beq.w	9000 <_vfiprintf_r+0x540>
    8d94:	9b07      	ldr	r3, [sp, #28]
    8d96:	3307      	adds	r3, #7
    8d98:	f023 0307 	bic.w	r3, r3, #7
    8d9c:	4619      	mov	r1, r3
    8d9e:	685a      	ldr	r2, [r3, #4]
    8da0:	f851 3b08 	ldr.w	r3, [r1], #8
    8da4:	9107      	str	r1, [sp, #28]
    8da6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    8daa:	9103      	str	r1, [sp, #12]
    8dac:	2100      	movs	r1, #0
    8dae:	2000      	movs	r0, #0
    8db0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    8db4:	1c78      	adds	r0, r7, #1
    8db6:	f000 8210 	beq.w	91da <_vfiprintf_r+0x71a>
    8dba:	9803      	ldr	r0, [sp, #12]
    8dbc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    8dc0:	ea53 0002 	orrs.w	r0, r3, r2
    8dc4:	f040 8208 	bne.w	91d8 <_vfiprintf_r+0x718>
    8dc8:	2f00      	cmp	r7, #0
    8dca:	f040 8538 	bne.w	983e <_vfiprintf_r+0xd7e>
    8dce:	2900      	cmp	r1, #0
    8dd0:	f040 83d5 	bne.w	957e <_vfiprintf_r+0xabe>
    8dd4:	9b03      	ldr	r3, [sp, #12]
    8dd6:	f013 0301 	ands.w	r3, r3, #1
    8dda:	9304      	str	r3, [sp, #16]
    8ddc:	f000 8411 	beq.w	9602 <_vfiprintf_r+0xb42>
    8de0:	2330      	movs	r3, #48	; 0x30
    8de2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    8de6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    8dea:	e792      	b.n	8d12 <_vfiprintf_r+0x252>
    8dec:	2208      	movs	r2, #8
    8dee:	2100      	movs	r1, #0
    8df0:	4650      	mov	r0, sl
    8df2:	f7fd f90b 	bl	600c <memset>
    8df6:	2301      	movs	r3, #1
    8df8:	441c      	add	r4, r3
    8dfa:	e6ad      	b.n	8b58 <_vfiprintf_r+0x98>
    8dfc:	200011c0 	.word	0x200011c0
    8e00:	ebb4 0608 	subs.w	r6, r4, r8
    8e04:	4605      	mov	r5, r0
    8e06:	d01b      	beq.n	8e40 <_vfiprintf_r+0x380>
    8e08:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8e0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    8e0c:	3301      	adds	r3, #1
    8e0e:	4432      	add	r2, r6
    8e10:	2b07      	cmp	r3, #7
    8e12:	e9c9 8600 	strd	r8, r6, [r9]
    8e16:	921a      	str	r2, [sp, #104]	; 0x68
    8e18:	9319      	str	r3, [sp, #100]	; 0x64
    8e1a:	dd1c      	ble.n	8e56 <_vfiprintf_r+0x396>
    8e1c:	2a00      	cmp	r2, #0
    8e1e:	f000 83a6 	beq.w	956e <_vfiprintf_r+0xaae>
    8e22:	ee18 1a10 	vmov	r1, s16
    8e26:	aa18      	add	r2, sp, #96	; 0x60
    8e28:	4658      	mov	r0, fp
    8e2a:	f7ff fe0d 	bl	8a48 <__sprint_r.part.0>
    8e2e:	bb20      	cbnz	r0, 8e7a <_vfiprintf_r+0x3ba>
    8e30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8e34:	9b05      	ldr	r3, [sp, #20]
    8e36:	4433      	add	r3, r6
    8e38:	9305      	str	r3, [sp, #20]
    8e3a:	2d00      	cmp	r5, #0
    8e3c:	f47f aea8 	bne.w	8b90 <_vfiprintf_r+0xd0>
    8e40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8e42:	2b00      	cmp	r3, #0
    8e44:	f040 85c1 	bne.w	99ca <_vfiprintf_r+0xf0a>
    8e48:	ee18 3a10 	vmov	r3, s16
    8e4c:	2200      	movs	r2, #0
    8e4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8e52:	9219      	str	r2, [sp, #100]	; 0x64
    8e54:	e015      	b.n	8e82 <_vfiprintf_r+0x3c2>
    8e56:	f109 0908 	add.w	r9, r9, #8
    8e5a:	e7eb      	b.n	8e34 <_vfiprintf_r+0x374>
    8e5c:	ee18 1a10 	vmov	r1, s16
    8e60:	aa18      	add	r2, sp, #96	; 0x60
    8e62:	4658      	mov	r0, fp
    8e64:	f7ff fdf0 	bl	8a48 <__sprint_r.part.0>
    8e68:	2800      	cmp	r0, #0
    8e6a:	f000 80a6 	beq.w	8fba <_vfiprintf_r+0x4fa>
    8e6e:	9b08      	ldr	r3, [sp, #32]
    8e70:	b11b      	cbz	r3, 8e7a <_vfiprintf_r+0x3ba>
    8e72:	9908      	ldr	r1, [sp, #32]
    8e74:	4658      	mov	r0, fp
    8e76:	f7fd ff45 	bl	6d04 <_free_r>
    8e7a:	ee18 3a10 	vmov	r3, s16
    8e7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    8e82:	ee18 2a10 	vmov	r2, s16
    8e86:	6e52      	ldr	r2, [r2, #100]	; 0x64
    8e88:	f012 0f01 	tst.w	r2, #1
    8e8c:	b29a      	uxth	r2, r3
    8e8e:	f000 80a0 	beq.w	8fd2 <_vfiprintf_r+0x512>
    8e92:	0650      	lsls	r0, r2, #25
    8e94:	f100 85b2 	bmi.w	99fc <_vfiprintf_r+0xf3c>
    8e98:	9805      	ldr	r0, [sp, #20]
    8e9a:	b045      	add	sp, #276	; 0x114
    8e9c:	ecbd 8b02 	vpop	{d8}
    8ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ea4:	2900      	cmp	r1, #0
    8ea6:	d0cb      	beq.n	8e40 <_vfiprintf_r+0x380>
    8ea8:	2300      	movs	r3, #0
    8eaa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    8eae:	2301      	movs	r3, #1
    8eb0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    8eb4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    8eb8:	ac2b      	add	r4, sp, #172	; 0xac
    8eba:	2300      	movs	r3, #0
    8ebc:	9308      	str	r3, [sp, #32]
    8ebe:	461f      	mov	r7, r3
    8ec0:	f016 0302 	ands.w	r3, r6, #2
    8ec4:	9309      	str	r3, [sp, #36]	; 0x24
    8ec6:	d002      	beq.n	8ece <_vfiprintf_r+0x40e>
    8ec8:	9b03      	ldr	r3, [sp, #12]
    8eca:	3302      	adds	r3, #2
    8ecc:	9303      	str	r3, [sp, #12]
    8ece:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    8ed2:	930a      	str	r3, [sp, #40]	; 0x28
    8ed4:	d105      	bne.n	8ee2 <_vfiprintf_r+0x422>
    8ed6:	9b06      	ldr	r3, [sp, #24]
    8ed8:	9a03      	ldr	r2, [sp, #12]
    8eda:	1a9d      	subs	r5, r3, r2
    8edc:	2d00      	cmp	r5, #0
    8ede:	f300 827b 	bgt.w	93d8 <_vfiprintf_r+0x918>
    8ee2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8ee6:	1c41      	adds	r1, r0, #1
    8ee8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    8eec:	b182      	cbz	r2, 8f10 <_vfiprintf_r+0x450>
    8eee:	2201      	movs	r2, #1
    8ef0:	3301      	adds	r3, #1
    8ef2:	f8c9 2004 	str.w	r2, [r9, #4]
    8ef6:	2907      	cmp	r1, #7
    8ef8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    8efc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8f00:	f8c9 2000 	str.w	r2, [r9]
    8f04:	f300 824a 	bgt.w	939c <_vfiprintf_r+0x8dc>
    8f08:	4608      	mov	r0, r1
    8f0a:	f109 0908 	add.w	r9, r9, #8
    8f0e:	3101      	adds	r1, #1
    8f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8f12:	b1e2      	cbz	r2, 8f4e <_vfiprintf_r+0x48e>
    8f14:	aa11      	add	r2, sp, #68	; 0x44
    8f16:	3302      	adds	r3, #2
    8f18:	f8c9 2000 	str.w	r2, [r9]
    8f1c:	2907      	cmp	r1, #7
    8f1e:	f04f 0202 	mov.w	r2, #2
    8f22:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8f26:	f8c9 2004 	str.w	r2, [r9, #4]
    8f2a:	f340 8250 	ble.w	93ce <_vfiprintf_r+0x90e>
    8f2e:	2b00      	cmp	r3, #0
    8f30:	f000 8343 	beq.w	95ba <_vfiprintf_r+0xafa>
    8f34:	ee18 1a10 	vmov	r1, s16
    8f38:	aa18      	add	r2, sp, #96	; 0x60
    8f3a:	4658      	mov	r0, fp
    8f3c:	f7ff fd84 	bl	8a48 <__sprint_r.part.0>
    8f40:	2800      	cmp	r0, #0
    8f42:	d194      	bne.n	8e6e <_vfiprintf_r+0x3ae>
    8f44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    8f48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f4c:	1c41      	adds	r1, r0, #1
    8f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8f50:	2a80      	cmp	r2, #128	; 0x80
    8f52:	f000 8184 	beq.w	925e <_vfiprintf_r+0x79e>
    8f56:	9a04      	ldr	r2, [sp, #16]
    8f58:	1abd      	subs	r5, r7, r2
    8f5a:	2d00      	cmp	r5, #0
    8f5c:	f300 81d7 	bgt.w	930e <_vfiprintf_r+0x84e>
    8f60:	9a04      	ldr	r2, [sp, #16]
    8f62:	f8c9 4000 	str.w	r4, [r9]
    8f66:	4413      	add	r3, r2
    8f68:	2907      	cmp	r1, #7
    8f6a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    8f6e:	f8c9 2004 	str.w	r2, [r9, #4]
    8f72:	f340 816e 	ble.w	9252 <_vfiprintf_r+0x792>
    8f76:	2b00      	cmp	r3, #0
    8f78:	f000 8275 	beq.w	9466 <_vfiprintf_r+0x9a6>
    8f7c:	ee18 1a10 	vmov	r1, s16
    8f80:	aa18      	add	r2, sp, #96	; 0x60
    8f82:	4658      	mov	r0, fp
    8f84:	f7ff fd60 	bl	8a48 <__sprint_r.part.0>
    8f88:	2800      	cmp	r0, #0
    8f8a:	f47f af70 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    8f8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8f94:	0775      	lsls	r5, r6, #29
    8f96:	d505      	bpl.n	8fa4 <_vfiprintf_r+0x4e4>
    8f98:	9a06      	ldr	r2, [sp, #24]
    8f9a:	9903      	ldr	r1, [sp, #12]
    8f9c:	1a54      	subs	r4, r2, r1
    8f9e:	2c00      	cmp	r4, #0
    8fa0:	f300 826b 	bgt.w	947a <_vfiprintf_r+0x9ba>
    8fa4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    8fa8:	9803      	ldr	r0, [sp, #12]
    8faa:	4281      	cmp	r1, r0
    8fac:	bfac      	ite	ge
    8fae:	1852      	addge	r2, r2, r1
    8fb0:	1812      	addlt	r2, r2, r0
    8fb2:	9205      	str	r2, [sp, #20]
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	f47f af51 	bne.w	8e5c <_vfiprintf_r+0x39c>
    8fba:	9908      	ldr	r1, [sp, #32]
    8fbc:	2300      	movs	r3, #0
    8fbe:	9319      	str	r3, [sp, #100]	; 0x64
    8fc0:	2900      	cmp	r1, #0
    8fc2:	f000 8149 	beq.w	9258 <_vfiprintf_r+0x798>
    8fc6:	4658      	mov	r0, fp
    8fc8:	f7fd fe9c 	bl	6d04 <_free_r>
    8fcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    8fd0:	e5c1      	b.n	8b56 <_vfiprintf_r+0x96>
    8fd2:	059c      	lsls	r4, r3, #22
    8fd4:	f53f af5d 	bmi.w	8e92 <_vfiprintf_r+0x3d2>
    8fd8:	ee18 4a10 	vmov	r4, s16
    8fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8fde:	f7fd fbaf 	bl	6740 <__retarget_lock_release_recursive>
    8fe2:	89a2      	ldrh	r2, [r4, #12]
    8fe4:	e755      	b.n	8e92 <_vfiprintf_r+0x3d2>
    8fe6:	06f0      	lsls	r0, r6, #27
    8fe8:	9a07      	ldr	r2, [sp, #28]
    8fea:	f100 831f 	bmi.w	962c <_vfiprintf_r+0xb6c>
    8fee:	0671      	lsls	r1, r6, #25
    8ff0:	f140 8319 	bpl.w	9626 <_vfiprintf_r+0xb66>
    8ff4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    8ff8:	9207      	str	r2, [sp, #28]
    8ffa:	17da      	asrs	r2, r3, #31
    8ffc:	4611      	mov	r1, r2
    8ffe:	e66e      	b.n	8cde <_vfiprintf_r+0x21e>
    9000:	f016 0310 	ands.w	r3, r6, #16
    9004:	9907      	ldr	r1, [sp, #28]
    9006:	f040 8309 	bne.w	961c <_vfiprintf_r+0xb5c>
    900a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    900e:	f000 8301 	beq.w	9614 <_vfiprintf_r+0xb54>
    9012:	461a      	mov	r2, r3
    9014:	f851 3b04 	ldr.w	r3, [r1], #4
    9018:	9107      	str	r1, [sp, #28]
    901a:	b29b      	uxth	r3, r3
    901c:	e6c3      	b.n	8da6 <_vfiprintf_r+0x2e6>
    901e:	9b07      	ldr	r3, [sp, #28]
    9020:	461a      	mov	r2, r3
    9022:	2300      	movs	r3, #0
    9024:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9028:	4613      	mov	r3, r2
    902a:	f853 4b04 	ldr.w	r4, [r3], #4
    902e:	9303      	str	r3, [sp, #12]
    9030:	2c00      	cmp	r4, #0
    9032:	f000 8412 	beq.w	985a <_vfiprintf_r+0xd9a>
    9036:	2953      	cmp	r1, #83	; 0x53
    9038:	f000 8365 	beq.w	9706 <_vfiprintf_r+0xc46>
    903c:	f016 0510 	ands.w	r5, r6, #16
    9040:	f040 8361 	bne.w	9706 <_vfiprintf_r+0xc46>
    9044:	1c7b      	adds	r3, r7, #1
    9046:	f000 84b3 	beq.w	99b0 <_vfiprintf_r+0xef0>
    904a:	463a      	mov	r2, r7
    904c:	4629      	mov	r1, r5
    904e:	4620      	mov	r0, r4
    9050:	f7fe fcfe 	bl	7a50 <memchr>
    9054:	9008      	str	r0, [sp, #32]
    9056:	2800      	cmp	r0, #0
    9058:	f000 849f 	beq.w	999a <_vfiprintf_r+0xeda>
    905c:	1b03      	subs	r3, r0, r4
    905e:	9a03      	ldr	r2, [sp, #12]
    9060:	9304      	str	r3, [sp, #16]
    9062:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9066:	462f      	mov	r7, r5
    9068:	9207      	str	r2, [sp, #28]
    906a:	9303      	str	r3, [sp, #12]
    906c:	9508      	str	r5, [sp, #32]
    906e:	e657      	b.n	8d20 <_vfiprintf_r+0x260>
    9070:	2943      	cmp	r1, #67	; 0x43
    9072:	d002      	beq.n	907a <_vfiprintf_r+0x5ba>
    9074:	06f5      	lsls	r5, r6, #27
    9076:	f140 832d 	bpl.w	96d4 <_vfiprintf_r+0xc14>
    907a:	9d07      	ldr	r5, [sp, #28]
    907c:	2208      	movs	r2, #8
    907e:	2100      	movs	r1, #0
    9080:	a816      	add	r0, sp, #88	; 0x58
    9082:	ac2b      	add	r4, sp, #172	; 0xac
    9084:	f7fc ffc2 	bl	600c <memset>
    9088:	ab16      	add	r3, sp, #88	; 0x58
    908a:	f855 2b04 	ldr.w	r2, [r5], #4
    908e:	4621      	mov	r1, r4
    9090:	4658      	mov	r0, fp
    9092:	f7ff fc93 	bl	89bc <_wcrtomb_r>
    9096:	4603      	mov	r3, r0
    9098:	3301      	adds	r3, #1
    909a:	9004      	str	r0, [sp, #16]
    909c:	f000 84b3 	beq.w	9a06 <_vfiprintf_r+0xf46>
    90a0:	9b04      	ldr	r3, [sp, #16]
    90a2:	9507      	str	r5, [sp, #28]
    90a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    90a8:	9303      	str	r3, [sp, #12]
    90aa:	2300      	movs	r3, #0
    90ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    90b0:	e703      	b.n	8eba <_vfiprintf_r+0x3fa>
    90b2:	9b07      	ldr	r3, [sp, #28]
    90b4:	f853 2b04 	ldr.w	r2, [r3], #4
    90b8:	9206      	str	r2, [sp, #24]
    90ba:	2a00      	cmp	r2, #0
    90bc:	f280 829c 	bge.w	95f8 <_vfiprintf_r+0xb38>
    90c0:	9a06      	ldr	r2, [sp, #24]
    90c2:	4252      	negs	r2, r2
    90c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    90c8:	f898 1000 	ldrb.w	r1, [r8]
    90cc:	f046 0604 	orr.w	r6, r6, #4
    90d0:	e569      	b.n	8ba6 <_vfiprintf_r+0xe6>
    90d2:	f898 1000 	ldrb.w	r1, [r8]
    90d6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    90da:	e564      	b.n	8ba6 <_vfiprintf_r+0xe6>
    90dc:	f898 1000 	ldrb.w	r1, [r8]
    90e0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    90e4:	e55f      	b.n	8ba6 <_vfiprintf_r+0xe6>
    90e6:	4642      	mov	r2, r8
    90e8:	f812 1b01 	ldrb.w	r1, [r2], #1
    90ec:	292a      	cmp	r1, #42	; 0x2a
    90ee:	f000 8496 	beq.w	9a1e <_vfiprintf_r+0xf5e>
    90f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    90f6:	2b09      	cmp	r3, #9
    90f8:	4690      	mov	r8, r2
    90fa:	f04f 0700 	mov.w	r7, #0
    90fe:	f63f ad54 	bhi.w	8baa <_vfiprintf_r+0xea>
    9102:	f818 1b01 	ldrb.w	r1, [r8], #1
    9106:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    910a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    910e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    9112:	2b09      	cmp	r3, #9
    9114:	d9f5      	bls.n	9102 <_vfiprintf_r+0x642>
    9116:	e548      	b.n	8baa <_vfiprintf_r+0xea>
    9118:	f898 1000 	ldrb.w	r1, [r8]
    911c:	f046 0601 	orr.w	r6, r6, #1
    9120:	e541      	b.n	8ba6 <_vfiprintf_r+0xe6>
    9122:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    9126:	2b00      	cmp	r3, #0
    9128:	f47f adc2 	bne.w	8cb0 <_vfiprintf_r+0x1f0>
    912c:	2320      	movs	r3, #32
    912e:	f898 1000 	ldrb.w	r1, [r8]
    9132:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9136:	e536      	b.n	8ba6 <_vfiprintf_r+0xe6>
    9138:	f898 1000 	ldrb.w	r1, [r8]
    913c:	296c      	cmp	r1, #108	; 0x6c
    913e:	bf03      	ittte	eq
    9140:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    9144:	f046 0620 	orreq.w	r6, r6, #32
    9148:	f108 0801 	addeq.w	r8, r8, #1
    914c:	f046 0610 	orrne.w	r6, r6, #16
    9150:	e529      	b.n	8ba6 <_vfiprintf_r+0xe6>
    9152:	f898 1000 	ldrb.w	r1, [r8]
    9156:	2968      	cmp	r1, #104	; 0x68
    9158:	bf03      	ittte	eq
    915a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    915e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    9162:	f108 0801 	addeq.w	r8, r8, #1
    9166:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    916a:	e51c      	b.n	8ba6 <_vfiprintf_r+0xe6>
    916c:	f046 0310 	orr.w	r3, r6, #16
    9170:	9303      	str	r3, [sp, #12]
    9172:	9b03      	ldr	r3, [sp, #12]
    9174:	f013 0220 	ands.w	r2, r3, #32
    9178:	f000 8206 	beq.w	9588 <_vfiprintf_r+0xac8>
    917c:	9b07      	ldr	r3, [sp, #28]
    917e:	3307      	adds	r3, #7
    9180:	f023 0307 	bic.w	r3, r3, #7
    9184:	4619      	mov	r1, r3
    9186:	685a      	ldr	r2, [r3, #4]
    9188:	f851 3b08 	ldr.w	r3, [r1], #8
    918c:	9107      	str	r1, [sp, #28]
    918e:	2101      	movs	r1, #1
    9190:	e60d      	b.n	8dae <_vfiprintf_r+0x2ee>
    9192:	9a07      	ldr	r2, [sp, #28]
    9194:	f046 0302 	orr.w	r3, r6, #2
    9198:	9303      	str	r3, [sp, #12]
    919a:	f852 3b04 	ldr.w	r3, [r2], #4
    919e:	9207      	str	r2, [sp, #28]
    91a0:	f647 0230 	movw	r2, #30768	; 0x7830
    91a4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    91a8:	4ab8      	ldr	r2, [pc, #736]	; (948c <_vfiprintf_r+0x9cc>)
    91aa:	920c      	str	r2, [sp, #48]	; 0x30
    91ac:	2102      	movs	r1, #2
    91ae:	2200      	movs	r2, #0
    91b0:	e5fd      	b.n	8dae <_vfiprintf_r+0x2ee>
    91b2:	06b7      	lsls	r7, r6, #26
    91b4:	f100 8248 	bmi.w	9648 <_vfiprintf_r+0xb88>
    91b8:	06f5      	lsls	r5, r6, #27
    91ba:	f100 8346 	bmi.w	984a <_vfiprintf_r+0xd8a>
    91be:	0674      	lsls	r4, r6, #25
    91c0:	f100 83d5 	bmi.w	996e <_vfiprintf_r+0xeae>
    91c4:	05b0      	lsls	r0, r6, #22
    91c6:	f140 8340 	bpl.w	984a <_vfiprintf_r+0xd8a>
    91ca:	9b07      	ldr	r3, [sp, #28]
    91cc:	9905      	ldr	r1, [sp, #20]
    91ce:	f853 2b04 	ldr.w	r2, [r3], #4
    91d2:	9307      	str	r3, [sp, #28]
    91d4:	7011      	strb	r1, [r2, #0]
    91d6:	e4be      	b.n	8b56 <_vfiprintf_r+0x96>
    91d8:	9603      	str	r6, [sp, #12]
    91da:	2901      	cmp	r1, #1
    91dc:	f43f ad8c 	beq.w	8cf8 <_vfiprintf_r+0x238>
    91e0:	2902      	cmp	r1, #2
    91e2:	ac44      	add	r4, sp, #272	; 0x110
    91e4:	d111      	bne.n	920a <_vfiprintf_r+0x74a>
    91e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    91e8:	f003 010f 	and.w	r1, r3, #15
    91ec:	091b      	lsrs	r3, r3, #4
    91ee:	5c41      	ldrb	r1, [r0, r1]
    91f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    91f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    91f8:	0912      	lsrs	r2, r2, #4
    91fa:	ea53 0102 	orrs.w	r1, r3, r2
    91fe:	d1f3      	bne.n	91e8 <_vfiprintf_r+0x728>
    9200:	9e03      	ldr	r6, [sp, #12]
    9202:	ab44      	add	r3, sp, #272	; 0x110
    9204:	1b1b      	subs	r3, r3, r4
    9206:	9304      	str	r3, [sp, #16]
    9208:	e583      	b.n	8d12 <_vfiprintf_r+0x252>
    920a:	f003 0107 	and.w	r1, r3, #7
    920e:	08db      	lsrs	r3, r3, #3
    9210:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    9214:	08d2      	lsrs	r2, r2, #3
    9216:	3130      	adds	r1, #48	; 0x30
    9218:	ea53 0502 	orrs.w	r5, r3, r2
    921c:	4620      	mov	r0, r4
    921e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    9222:	d1f2      	bne.n	920a <_vfiprintf_r+0x74a>
    9224:	9e03      	ldr	r6, [sp, #12]
    9226:	07f3      	lsls	r3, r6, #31
    9228:	d5eb      	bpl.n	9202 <_vfiprintf_r+0x742>
    922a:	2930      	cmp	r1, #48	; 0x30
    922c:	d0e8      	beq.n	9200 <_vfiprintf_r+0x740>
    922e:	2330      	movs	r3, #48	; 0x30
    9230:	3802      	subs	r0, #2
    9232:	f804 3c01 	strb.w	r3, [r4, #-1]
    9236:	ab44      	add	r3, sp, #272	; 0x110
    9238:	1a1b      	subs	r3, r3, r0
    923a:	9e03      	ldr	r6, [sp, #12]
    923c:	9304      	str	r3, [sp, #16]
    923e:	4604      	mov	r4, r0
    9240:	e567      	b.n	8d12 <_vfiprintf_r+0x252>
    9242:	9b04      	ldr	r3, [sp, #16]
    9244:	941b      	str	r4, [sp, #108]	; 0x6c
    9246:	2201      	movs	r2, #1
    9248:	931c      	str	r3, [sp, #112]	; 0x70
    924a:	931a      	str	r3, [sp, #104]	; 0x68
    924c:	9219      	str	r2, [sp, #100]	; 0x64
    924e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9252:	f109 0908 	add.w	r9, r9, #8
    9256:	e69d      	b.n	8f94 <_vfiprintf_r+0x4d4>
    9258:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    925c:	e47b      	b.n	8b56 <_vfiprintf_r+0x96>
    925e:	9a06      	ldr	r2, [sp, #24]
    9260:	9d03      	ldr	r5, [sp, #12]
    9262:	1b55      	subs	r5, r2, r5
    9264:	2d00      	cmp	r5, #0
    9266:	f77f ae76 	ble.w	8f56 <_vfiprintf_r+0x496>
    926a:	2d10      	cmp	r5, #16
    926c:	f340 83bb 	ble.w	99e6 <_vfiprintf_r+0xf26>
    9270:	9409      	str	r4, [sp, #36]	; 0x24
    9272:	ee18 4a10 	vmov	r4, s16
    9276:	e007      	b.n	9288 <_vfiprintf_r+0x7c8>
    9278:	f100 0c02 	add.w	ip, r0, #2
    927c:	f109 0908 	add.w	r9, r9, #8
    9280:	4610      	mov	r0, r2
    9282:	3d10      	subs	r5, #16
    9284:	2d10      	cmp	r5, #16
    9286:	dd1e      	ble.n	92c6 <_vfiprintf_r+0x806>
    9288:	4981      	ldr	r1, [pc, #516]	; (9490 <_vfiprintf_r+0x9d0>)
    928a:	f8c9 1000 	str.w	r1, [r9]
    928e:	1c42      	adds	r2, r0, #1
    9290:	3310      	adds	r3, #16
    9292:	2110      	movs	r1, #16
    9294:	2a07      	cmp	r2, #7
    9296:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    929a:	f8c9 1004 	str.w	r1, [r9, #4]
    929e:	ddeb      	ble.n	9278 <_vfiprintf_r+0x7b8>
    92a0:	aa18      	add	r2, sp, #96	; 0x60
    92a2:	2b00      	cmp	r3, #0
    92a4:	d074      	beq.n	9390 <_vfiprintf_r+0x8d0>
    92a6:	4621      	mov	r1, r4
    92a8:	4658      	mov	r0, fp
    92aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    92ae:	f7ff fbcb 	bl	8a48 <__sprint_r.part.0>
    92b2:	2800      	cmp	r0, #0
    92b4:	f47f addb 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    92b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    92bc:	3d10      	subs	r5, #16
    92be:	2d10      	cmp	r5, #16
    92c0:	f100 0c01 	add.w	ip, r0, #1
    92c4:	dce0      	bgt.n	9288 <_vfiprintf_r+0x7c8>
    92c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    92c8:	4a71      	ldr	r2, [pc, #452]	; (9490 <_vfiprintf_r+0x9d0>)
    92ca:	f8c9 5004 	str.w	r5, [r9, #4]
    92ce:	442b      	add	r3, r5
    92d0:	f1bc 0f07 	cmp.w	ip, #7
    92d4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    92d8:	f8c9 2000 	str.w	r2, [r9]
    92dc:	f340 8194 	ble.w	9608 <_vfiprintf_r+0xb48>
    92e0:	2b00      	cmp	r3, #0
    92e2:	f000 831f 	beq.w	9924 <_vfiprintf_r+0xe64>
    92e6:	ee18 1a10 	vmov	r1, s16
    92ea:	aa18      	add	r2, sp, #96	; 0x60
    92ec:	4658      	mov	r0, fp
    92ee:	f7ff fbab 	bl	8a48 <__sprint_r.part.0>
    92f2:	2800      	cmp	r0, #0
    92f4:	f47f adbb 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    92f8:	9a04      	ldr	r2, [sp, #16]
    92fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    92fe:	1abd      	subs	r5, r7, r2
    9300:	2d00      	cmp	r5, #0
    9302:	f100 0101 	add.w	r1, r0, #1
    9306:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    930a:	f77f ae29 	ble.w	8f60 <_vfiprintf_r+0x4a0>
    930e:	2d10      	cmp	r5, #16
    9310:	dd29      	ble.n	9366 <_vfiprintf_r+0x8a6>
    9312:	9409      	str	r4, [sp, #36]	; 0x24
    9314:	2710      	movs	r7, #16
    9316:	ee18 4a10 	vmov	r4, s16
    931a:	e007      	b.n	932c <_vfiprintf_r+0x86c>
    931c:	f100 0c02 	add.w	ip, r0, #2
    9320:	f109 0908 	add.w	r9, r9, #8
    9324:	4610      	mov	r0, r2
    9326:	3d10      	subs	r5, #16
    9328:	2d10      	cmp	r5, #16
    932a:	dd1a      	ble.n	9362 <_vfiprintf_r+0x8a2>
    932c:	1c42      	adds	r2, r0, #1
    932e:	4958      	ldr	r1, [pc, #352]	; (9490 <_vfiprintf_r+0x9d0>)
    9330:	3310      	adds	r3, #16
    9332:	2a07      	cmp	r2, #7
    9334:	e9c9 1700 	strd	r1, r7, [r9]
    9338:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    933c:	ddee      	ble.n	931c <_vfiprintf_r+0x85c>
    933e:	aa18      	add	r2, sp, #96	; 0x60
    9340:	b303      	cbz	r3, 9384 <_vfiprintf_r+0x8c4>
    9342:	4621      	mov	r1, r4
    9344:	4658      	mov	r0, fp
    9346:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    934a:	f7ff fb7d 	bl	8a48 <__sprint_r.part.0>
    934e:	2800      	cmp	r0, #0
    9350:	f47f ad8d 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    9354:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    9358:	3d10      	subs	r5, #16
    935a:	2d10      	cmp	r5, #16
    935c:	f100 0c01 	add.w	ip, r0, #1
    9360:	dce4      	bgt.n	932c <_vfiprintf_r+0x86c>
    9362:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9364:	4661      	mov	r1, ip
    9366:	4a4a      	ldr	r2, [pc, #296]	; (9490 <_vfiprintf_r+0x9d0>)
    9368:	f8c9 5004 	str.w	r5, [r9, #4]
    936c:	442b      	add	r3, r5
    936e:	2907      	cmp	r1, #7
    9370:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    9374:	f8c9 2000 	str.w	r2, [r9]
    9378:	f300 80e7 	bgt.w	954a <_vfiprintf_r+0xa8a>
    937c:	f109 0908 	add.w	r9, r9, #8
    9380:	3101      	adds	r1, #1
    9382:	e5ed      	b.n	8f60 <_vfiprintf_r+0x4a0>
    9384:	f04f 0c01 	mov.w	ip, #1
    9388:	4618      	mov	r0, r3
    938a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    938e:	e7ca      	b.n	9326 <_vfiprintf_r+0x866>
    9390:	f04f 0c01 	mov.w	ip, #1
    9394:	4618      	mov	r0, r3
    9396:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    939a:	e772      	b.n	9282 <_vfiprintf_r+0x7c2>
    939c:	2b00      	cmp	r3, #0
    939e:	f000 8104 	beq.w	95aa <_vfiprintf_r+0xaea>
    93a2:	ee18 1a10 	vmov	r1, s16
    93a6:	aa18      	add	r2, sp, #96	; 0x60
    93a8:	4658      	mov	r0, fp
    93aa:	f7ff fb4d 	bl	8a48 <__sprint_r.part.0>
    93ae:	2800      	cmp	r0, #0
    93b0:	f47f ad5d 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    93b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    93b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    93bc:	1c41      	adds	r1, r0, #1
    93be:	e5a7      	b.n	8f10 <_vfiprintf_r+0x450>
    93c0:	2302      	movs	r3, #2
    93c2:	aa11      	add	r2, sp, #68	; 0x44
    93c4:	931c      	str	r3, [sp, #112]	; 0x70
    93c6:	921b      	str	r2, [sp, #108]	; 0x6c
    93c8:	2101      	movs	r1, #1
    93ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    93ce:	4608      	mov	r0, r1
    93d0:	f109 0908 	add.w	r9, r9, #8
    93d4:	1c41      	adds	r1, r0, #1
    93d6:	e5ba      	b.n	8f4e <_vfiprintf_r+0x48e>
    93d8:	2d10      	cmp	r5, #16
    93da:	f340 82e5 	ble.w	99a8 <_vfiprintf_r+0xee8>
    93de:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    93e2:	940f      	str	r4, [sp, #60]	; 0x3c
    93e4:	4608      	mov	r0, r1
    93e6:	ee18 4a10 	vmov	r4, s16
    93ea:	e007      	b.n	93fc <_vfiprintf_r+0x93c>
    93ec:	f100 0c02 	add.w	ip, r0, #2
    93f0:	f109 0908 	add.w	r9, r9, #8
    93f4:	4610      	mov	r0, r2
    93f6:	3d10      	subs	r5, #16
    93f8:	2d10      	cmp	r5, #16
    93fa:	dd1d      	ble.n	9438 <_vfiprintf_r+0x978>
    93fc:	4925      	ldr	r1, [pc, #148]	; (9494 <_vfiprintf_r+0x9d4>)
    93fe:	f8c9 1000 	str.w	r1, [r9]
    9402:	1c42      	adds	r2, r0, #1
    9404:	3310      	adds	r3, #16
    9406:	2110      	movs	r1, #16
    9408:	2a07      	cmp	r2, #7
    940a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    940e:	f8c9 1004 	str.w	r1, [r9, #4]
    9412:	ddeb      	ble.n	93ec <_vfiprintf_r+0x92c>
    9414:	aa18      	add	r2, sp, #96	; 0x60
    9416:	b303      	cbz	r3, 945a <_vfiprintf_r+0x99a>
    9418:	4621      	mov	r1, r4
    941a:	4658      	mov	r0, fp
    941c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9420:	f7ff fb12 	bl	8a48 <__sprint_r.part.0>
    9424:	2800      	cmp	r0, #0
    9426:	f47f ad22 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    942a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    942e:	3d10      	subs	r5, #16
    9430:	2d10      	cmp	r5, #16
    9432:	f100 0c01 	add.w	ip, r0, #1
    9436:	dce1      	bgt.n	93fc <_vfiprintf_r+0x93c>
    9438:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    943a:	4660      	mov	r0, ip
    943c:	4a15      	ldr	r2, [pc, #84]	; (9494 <_vfiprintf_r+0x9d4>)
    943e:	f8c9 5004 	str.w	r5, [r9, #4]
    9442:	442b      	add	r3, r5
    9444:	2807      	cmp	r0, #7
    9446:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    944a:	f8c9 2000 	str.w	r2, [r9]
    944e:	f300 80c1 	bgt.w	95d4 <_vfiprintf_r+0xb14>
    9452:	f109 0908 	add.w	r9, r9, #8
    9456:	1c41      	adds	r1, r0, #1
    9458:	e546      	b.n	8ee8 <_vfiprintf_r+0x428>
    945a:	4618      	mov	r0, r3
    945c:	f04f 0c01 	mov.w	ip, #1
    9460:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9464:	e7c7      	b.n	93f6 <_vfiprintf_r+0x936>
    9466:	0776      	lsls	r6, r6, #29
    9468:	9319      	str	r3, [sp, #100]	; 0x64
    946a:	d553      	bpl.n	9514 <_vfiprintf_r+0xa54>
    946c:	9a06      	ldr	r2, [sp, #24]
    946e:	9903      	ldr	r1, [sp, #12]
    9470:	1a54      	subs	r4, r2, r1
    9472:	2c00      	cmp	r4, #0
    9474:	dd4e      	ble.n	9514 <_vfiprintf_r+0xa54>
    9476:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    947a:	2c10      	cmp	r4, #16
    947c:	f340 82b0 	ble.w	99e0 <_vfiprintf_r+0xf20>
    9480:	9919      	ldr	r1, [sp, #100]	; 0x64
    9482:	ee18 6a10 	vmov	r6, s16
    9486:	2510      	movs	r5, #16
    9488:	e00d      	b.n	94a6 <_vfiprintf_r+0x9e6>
    948a:	bf00      	nop
    948c:	200008a8 	.word	0x200008a8
    9490:	20000db0 	.word	0x20000db0
    9494:	200008c4 	.word	0x200008c4
    9498:	1c88      	adds	r0, r1, #2
    949a:	f109 0908 	add.w	r9, r9, #8
    949e:	4611      	mov	r1, r2
    94a0:	3c10      	subs	r4, #16
    94a2:	2c10      	cmp	r4, #16
    94a4:	dd1a      	ble.n	94dc <_vfiprintf_r+0xa1c>
    94a6:	1c4a      	adds	r2, r1, #1
    94a8:	48b3      	ldr	r0, [pc, #716]	; (9778 <_vfiprintf_r+0xcb8>)
    94aa:	3310      	adds	r3, #16
    94ac:	2a07      	cmp	r2, #7
    94ae:	e9c9 0500 	strd	r0, r5, [r9]
    94b2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    94b6:	ddef      	ble.n	9498 <_vfiprintf_r+0x9d8>
    94b8:	aa18      	add	r2, sp, #96	; 0x60
    94ba:	b333      	cbz	r3, 950a <_vfiprintf_r+0xa4a>
    94bc:	4631      	mov	r1, r6
    94be:	4658      	mov	r0, fp
    94c0:	f7ff fac2 	bl	8a48 <__sprint_r.part.0>
    94c4:	2800      	cmp	r0, #0
    94c6:	f47f acd2 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    94ca:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    94ce:	3c10      	subs	r4, #16
    94d0:	2c10      	cmp	r4, #16
    94d2:	f101 0001 	add.w	r0, r1, #1
    94d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    94da:	dce4      	bgt.n	94a6 <_vfiprintf_r+0x9e6>
    94dc:	4aa6      	ldr	r2, [pc, #664]	; (9778 <_vfiprintf_r+0xcb8>)
    94de:	f8c9 4004 	str.w	r4, [r9, #4]
    94e2:	4423      	add	r3, r4
    94e4:	2807      	cmp	r0, #7
    94e6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    94ea:	f8c9 2000 	str.w	r2, [r9]
    94ee:	f77f ad59 	ble.w	8fa4 <_vfiprintf_r+0x4e4>
    94f2:	b17b      	cbz	r3, 9514 <_vfiprintf_r+0xa54>
    94f4:	ee18 1a10 	vmov	r1, s16
    94f8:	aa18      	add	r2, sp, #96	; 0x60
    94fa:	4658      	mov	r0, fp
    94fc:	f7ff faa4 	bl	8a48 <__sprint_r.part.0>
    9500:	2800      	cmp	r0, #0
    9502:	f47f acb4 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    9506:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9508:	e54c      	b.n	8fa4 <_vfiprintf_r+0x4e4>
    950a:	2001      	movs	r0, #1
    950c:	4619      	mov	r1, r3
    950e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9512:	e7c5      	b.n	94a0 <_vfiprintf_r+0x9e0>
    9514:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    9518:	9903      	ldr	r1, [sp, #12]
    951a:	428a      	cmp	r2, r1
    951c:	bfac      	ite	ge
    951e:	189b      	addge	r3, r3, r2
    9520:	185b      	addlt	r3, r3, r1
    9522:	9305      	str	r3, [sp, #20]
    9524:	e549      	b.n	8fba <_vfiprintf_r+0x4fa>
    9526:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    952a:	058f      	lsls	r7, r1, #22
    952c:	ee18 3a10 	vmov	r3, s16
    9530:	b28a      	uxth	r2, r1
    9532:	f53f aae8 	bmi.w	8b06 <_vfiprintf_r+0x46>
    9536:	ee18 5a10 	vmov	r5, s16
    953a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    953c:	f7fd f8fe 	bl	673c <__retarget_lock_acquire_recursive>
    9540:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    9544:	b28a      	uxth	r2, r1
    9546:	f7ff bade 	b.w	8b06 <_vfiprintf_r+0x46>
    954a:	2b00      	cmp	r3, #0
    954c:	f43f ae79 	beq.w	9242 <_vfiprintf_r+0x782>
    9550:	ee18 1a10 	vmov	r1, s16
    9554:	aa18      	add	r2, sp, #96	; 0x60
    9556:	4658      	mov	r0, fp
    9558:	f7ff fa76 	bl	8a48 <__sprint_r.part.0>
    955c:	2800      	cmp	r0, #0
    955e:	f47f ac86 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    9562:	9919      	ldr	r1, [sp, #100]	; 0x64
    9564:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9566:	3101      	adds	r1, #1
    9568:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    956c:	e4f8      	b.n	8f60 <_vfiprintf_r+0x4a0>
    956e:	9219      	str	r2, [sp, #100]	; 0x64
    9570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9574:	e45e      	b.n	8e34 <_vfiprintf_r+0x374>
    9576:	2f00      	cmp	r7, #0
    9578:	f47f abc3 	bne.w	8d02 <_vfiprintf_r+0x242>
    957c:	9e03      	ldr	r6, [sp, #12]
    957e:	2700      	movs	r7, #0
    9580:	9704      	str	r7, [sp, #16]
    9582:	ac44      	add	r4, sp, #272	; 0x110
    9584:	f7ff bbc5 	b.w	8d12 <_vfiprintf_r+0x252>
    9588:	9b03      	ldr	r3, [sp, #12]
    958a:	f013 0310 	ands.w	r3, r3, #16
    958e:	d154      	bne.n	963a <_vfiprintf_r+0xb7a>
    9590:	9a03      	ldr	r2, [sp, #12]
    9592:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    9596:	f000 816b 	beq.w	9870 <_vfiprintf_r+0xdb0>
    959a:	9907      	ldr	r1, [sp, #28]
    959c:	461a      	mov	r2, r3
    959e:	f851 3b04 	ldr.w	r3, [r1], #4
    95a2:	9107      	str	r1, [sp, #28]
    95a4:	b29b      	uxth	r3, r3
    95a6:	2101      	movs	r1, #1
    95a8:	e401      	b.n	8dae <_vfiprintf_r+0x2ee>
    95aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    95ac:	2a00      	cmp	r2, #0
    95ae:	d164      	bne.n	967a <_vfiprintf_r+0xbba>
    95b0:	4618      	mov	r0, r3
    95b2:	2101      	movs	r1, #1
    95b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    95b8:	e4c9      	b.n	8f4e <_vfiprintf_r+0x48e>
    95ba:	2101      	movs	r1, #1
    95bc:	4618      	mov	r0, r3
    95be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    95c2:	e4c4      	b.n	8f4e <_vfiprintf_r+0x48e>
    95c4:	425b      	negs	r3, r3
    95c6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    95ca:	9603      	str	r6, [sp, #12]
    95cc:	202d      	movs	r0, #45	; 0x2d
    95ce:	2101      	movs	r1, #1
    95d0:	f7ff bbee 	b.w	8db0 <_vfiprintf_r+0x2f0>
    95d4:	2b00      	cmp	r3, #0
    95d6:	f000 8088 	beq.w	96ea <_vfiprintf_r+0xc2a>
    95da:	ee18 1a10 	vmov	r1, s16
    95de:	aa18      	add	r2, sp, #96	; 0x60
    95e0:	4658      	mov	r0, fp
    95e2:	f7ff fa31 	bl	8a48 <__sprint_r.part.0>
    95e6:	2800      	cmp	r0, #0
    95e8:	f47f ac41 	bne.w	8e6e <_vfiprintf_r+0x3ae>
    95ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    95f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    95f4:	1c41      	adds	r1, r0, #1
    95f6:	e477      	b.n	8ee8 <_vfiprintf_r+0x428>
    95f8:	f898 1000 	ldrb.w	r1, [r8]
    95fc:	9307      	str	r3, [sp, #28]
    95fe:	f7ff bad2 	b.w	8ba6 <_vfiprintf_r+0xe6>
    9602:	ac44      	add	r4, sp, #272	; 0x110
    9604:	f7ff bb85 	b.w	8d12 <_vfiprintf_r+0x252>
    9608:	f109 0908 	add.w	r9, r9, #8
    960c:	f10c 0101 	add.w	r1, ip, #1
    9610:	4660      	mov	r0, ip
    9612:	e4a0      	b.n	8f56 <_vfiprintf_r+0x496>
    9614:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    9618:	f040 8197 	bne.w	994a <_vfiprintf_r+0xe8a>
    961c:	f851 3b04 	ldr.w	r3, [r1], #4
    9620:	9107      	str	r1, [sp, #28]
    9622:	f7ff bbc0 	b.w	8da6 <_vfiprintf_r+0x2e6>
    9626:	05b3      	lsls	r3, r6, #22
    9628:	f100 8188 	bmi.w	993c <_vfiprintf_r+0xe7c>
    962c:	f852 3b04 	ldr.w	r3, [r2], #4
    9630:	9207      	str	r2, [sp, #28]
    9632:	17da      	asrs	r2, r3, #31
    9634:	4611      	mov	r1, r2
    9636:	f7ff bb52 	b.w	8cde <_vfiprintf_r+0x21e>
    963a:	9907      	ldr	r1, [sp, #28]
    963c:	f851 3b04 	ldr.w	r3, [r1], #4
    9640:	9107      	str	r1, [sp, #28]
    9642:	2101      	movs	r1, #1
    9644:	f7ff bbb3 	b.w	8dae <_vfiprintf_r+0x2ee>
    9648:	9b07      	ldr	r3, [sp, #28]
    964a:	9805      	ldr	r0, [sp, #20]
    964c:	f853 1b04 	ldr.w	r1, [r3], #4
    9650:	9307      	str	r3, [sp, #28]
    9652:	17c2      	asrs	r2, r0, #31
    9654:	e9c1 0200 	strd	r0, r2, [r1]
    9658:	f7ff ba7d 	b.w	8b56 <_vfiprintf_r+0x96>
    965c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    965e:	2b00      	cmp	r3, #0
    9660:	f43f ab26 	beq.w	8cb0 <_vfiprintf_r+0x1f0>
    9664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	2b00      	cmp	r3, #0
    966a:	f43f ab21 	beq.w	8cb0 <_vfiprintf_r+0x1f0>
    966e:	f898 1000 	ldrb.w	r1, [r8]
    9672:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    9676:	f7ff ba96 	b.w	8ba6 <_vfiprintf_r+0xe6>
    967a:	2302      	movs	r3, #2
    967c:	aa11      	add	r2, sp, #68	; 0x44
    967e:	931c      	str	r3, [sp, #112]	; 0x70
    9680:	921b      	str	r2, [sp, #108]	; 0x6c
    9682:	2001      	movs	r0, #1
    9684:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9688:	e6a2      	b.n	93d0 <_vfiprintf_r+0x910>
    968a:	9603      	str	r6, [sp, #12]
    968c:	e571      	b.n	9172 <_vfiprintf_r+0x6b2>
    968e:	4b3b      	ldr	r3, [pc, #236]	; (977c <_vfiprintf_r+0xcbc>)
    9690:	930c      	str	r3, [sp, #48]	; 0x30
    9692:	f016 0220 	ands.w	r2, r6, #32
    9696:	d059      	beq.n	974c <_vfiprintf_r+0xc8c>
    9698:	9b07      	ldr	r3, [sp, #28]
    969a:	3307      	adds	r3, #7
    969c:	f023 0307 	bic.w	r3, r3, #7
    96a0:	4618      	mov	r0, r3
    96a2:	685a      	ldr	r2, [r3, #4]
    96a4:	f850 3b08 	ldr.w	r3, [r0], #8
    96a8:	9007      	str	r0, [sp, #28]
    96aa:	07f4      	lsls	r4, r6, #31
    96ac:	d509      	bpl.n	96c2 <_vfiprintf_r+0xc02>
    96ae:	ea53 0002 	orrs.w	r0, r3, r2
    96b2:	d006      	beq.n	96c2 <_vfiprintf_r+0xc02>
    96b4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    96b8:	2130      	movs	r1, #48	; 0x30
    96ba:	f046 0602 	orr.w	r6, r6, #2
    96be:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    96c2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    96c6:	9103      	str	r1, [sp, #12]
    96c8:	2102      	movs	r1, #2
    96ca:	f7ff bb70 	b.w	8dae <_vfiprintf_r+0x2ee>
    96ce:	4b2c      	ldr	r3, [pc, #176]	; (9780 <_vfiprintf_r+0xcc0>)
    96d0:	930c      	str	r3, [sp, #48]	; 0x30
    96d2:	e7de      	b.n	9692 <_vfiprintf_r+0xbd2>
    96d4:	9b07      	ldr	r3, [sp, #28]
    96d6:	2101      	movs	r1, #1
    96d8:	f853 2b04 	ldr.w	r2, [r3], #4
    96dc:	9103      	str	r1, [sp, #12]
    96de:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    96e2:	9307      	str	r3, [sp, #28]
    96e4:	9104      	str	r1, [sp, #16]
    96e6:	ac2b      	add	r4, sp, #172	; 0xac
    96e8:	e4df      	b.n	90aa <_vfiprintf_r+0x5ea>
    96ea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    96ee:	2a00      	cmp	r2, #0
    96f0:	f040 8132 	bne.w	9958 <_vfiprintf_r+0xe98>
    96f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96f6:	2a00      	cmp	r2, #0
    96f8:	f47f ae62 	bne.w	93c0 <_vfiprintf_r+0x900>
    96fc:	4618      	mov	r0, r3
    96fe:	2101      	movs	r1, #1
    9700:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9704:	e427      	b.n	8f56 <_vfiprintf_r+0x496>
    9706:	2100      	movs	r1, #0
    9708:	2208      	movs	r2, #8
    970a:	a816      	add	r0, sp, #88	; 0x58
    970c:	9413      	str	r4, [sp, #76]	; 0x4c
    970e:	f7fc fc7d 	bl	600c <memset>
    9712:	1c79      	adds	r1, r7, #1
    9714:	f000 80bc 	beq.w	9890 <_vfiprintf_r+0xdd0>
    9718:	2500      	movs	r5, #0
    971a:	9407      	str	r4, [sp, #28]
    971c:	462c      	mov	r4, r5
    971e:	e00c      	b.n	973a <_vfiprintf_r+0xc7a>
    9720:	a92b      	add	r1, sp, #172	; 0xac
    9722:	4658      	mov	r0, fp
    9724:	f7ff f94a 	bl	89bc <_wcrtomb_r>
    9728:	1c42      	adds	r2, r0, #1
    972a:	4420      	add	r0, r4
    972c:	f000 816b 	beq.w	9a06 <_vfiprintf_r+0xf46>
    9730:	42b8      	cmp	r0, r7
    9732:	dc08      	bgt.n	9746 <_vfiprintf_r+0xc86>
    9734:	f000 8170 	beq.w	9a18 <_vfiprintf_r+0xf58>
    9738:	4604      	mov	r4, r0
    973a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    973c:	5952      	ldr	r2, [r2, r5]
    973e:	ab16      	add	r3, sp, #88	; 0x58
    9740:	3504      	adds	r5, #4
    9742:	2a00      	cmp	r2, #0
    9744:	d1ec      	bne.n	9720 <_vfiprintf_r+0xc60>
    9746:	9404      	str	r4, [sp, #16]
    9748:	9c07      	ldr	r4, [sp, #28]
    974a:	e0af      	b.n	98ac <_vfiprintf_r+0xdec>
    974c:	f016 0310 	ands.w	r3, r6, #16
    9750:	9807      	ldr	r0, [sp, #28]
    9752:	d10c      	bne.n	976e <_vfiprintf_r+0xcae>
    9754:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    9758:	d005      	beq.n	9766 <_vfiprintf_r+0xca6>
    975a:	461a      	mov	r2, r3
    975c:	f850 3b04 	ldr.w	r3, [r0], #4
    9760:	9007      	str	r0, [sp, #28]
    9762:	b29b      	uxth	r3, r3
    9764:	e7a1      	b.n	96aa <_vfiprintf_r+0xbea>
    9766:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    976a:	f040 80e1 	bne.w	9930 <_vfiprintf_r+0xe70>
    976e:	f850 3b04 	ldr.w	r3, [r0], #4
    9772:	9007      	str	r0, [sp, #28]
    9774:	e799      	b.n	96aa <_vfiprintf_r+0xbea>
    9776:	bf00      	nop
    9778:	200008c4 	.word	0x200008c4
    977c:	200008a8 	.word	0x200008a8
    9780:	20000894 	.word	0x20000894
    9784:	9903      	ldr	r1, [sp, #12]
    9786:	9704      	str	r7, [sp, #16]
    9788:	ac44      	add	r4, sp, #272	; 0x110
    978a:	469e      	mov	lr, r3
    978c:	ee08 ba90 	vmov	s17, fp
    9790:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    9794:	f04f 0c00 	mov.w	ip, #0
    9798:	4623      	mov	r3, r4
    979a:	e006      	b.n	97aa <_vfiprintf_r+0xcea>
    979c:	f1be 0f0a 	cmp.w	lr, #10
    97a0:	f172 0200 	sbcs.w	r2, r2, #0
    97a4:	d339      	bcc.n	981a <_vfiprintf_r+0xd5a>
    97a6:	46a6      	mov	lr, r4
    97a8:	462a      	mov	r2, r5
    97aa:	49a6      	ldr	r1, [pc, #664]	; (9a44 <_vfiprintf_r+0xf84>)
    97ac:	eb1e 0002 	adds.w	r0, lr, r2
    97b0:	f140 0000 	adc.w	r0, r0, #0
    97b4:	460f      	mov	r7, r1
    97b6:	fba1 1400 	umull	r1, r4, r1, r0
    97ba:	f024 0103 	bic.w	r1, r4, #3
    97be:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    97c2:	1a40      	subs	r0, r0, r1
    97c4:	ebbe 0100 	subs.w	r1, lr, r0
    97c8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    97cc:	f162 0400 	sbc.w	r4, r2, #0
    97d0:	fb05 f501 	mul.w	r5, r5, r1
    97d4:	fb07 5504 	mla	r5, r7, r4, r5
    97d8:	fba1 4107 	umull	r4, r1, r1, r7
    97dc:	440d      	add	r5, r1
    97de:	2705      	movs	r7, #5
    97e0:	f004 0101 	and.w	r1, r4, #1
    97e4:	fba1 1b07 	umull	r1, fp, r1, r7
    97e8:	1809      	adds	r1, r1, r0
    97ea:	0864      	lsrs	r4, r4, #1
    97ec:	3130      	adds	r1, #48	; 0x30
    97ee:	f803 1c01 	strb.w	r1, [r3, #-1]
    97f2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    97f6:	f10c 0c01 	add.w	ip, ip, #1
    97fa:	3b01      	subs	r3, #1
    97fc:	086d      	lsrs	r5, r5, #1
    97fe:	2e00      	cmp	r6, #0
    9800:	d0cc      	beq.n	979c <_vfiprintf_r+0xcdc>
    9802:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9804:	7809      	ldrb	r1, [r1, #0]
    9806:	4561      	cmp	r1, ip
    9808:	d1c8      	bne.n	979c <_vfiprintf_r+0xcdc>
    980a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    980e:	d0c5      	beq.n	979c <_vfiprintf_r+0xcdc>
    9810:	f1be 0f0a 	cmp.w	lr, #10
    9814:	f172 0200 	sbcs.w	r2, r2, #0
    9818:	d26c      	bcs.n	98f4 <_vfiprintf_r+0xe34>
    981a:	461c      	mov	r4, r3
    981c:	ab44      	add	r3, sp, #272	; 0x110
    981e:	1b1b      	subs	r3, r3, r4
    9820:	9f04      	ldr	r7, [sp, #16]
    9822:	9e03      	ldr	r6, [sp, #12]
    9824:	9304      	str	r3, [sp, #16]
    9826:	ee18 ba90 	vmov	fp, s17
    982a:	f7ff ba72 	b.w	8d12 <_vfiprintf_r+0x252>
    982e:	9603      	str	r6, [sp, #12]
    9830:	f7ff ba62 	b.w	8cf8 <_vfiprintf_r+0x238>
    9834:	4658      	mov	r0, fp
    9836:	f7fc fad9 	bl	5dec <__sinit>
    983a:	f7ff b95b 	b.w	8af4 <_vfiprintf_r+0x34>
    983e:	2901      	cmp	r1, #1
    9840:	9603      	str	r6, [sp, #12]
    9842:	f47f accd 	bne.w	91e0 <_vfiprintf_r+0x720>
    9846:	f7ff ba5c 	b.w	8d02 <_vfiprintf_r+0x242>
    984a:	9b07      	ldr	r3, [sp, #28]
    984c:	9905      	ldr	r1, [sp, #20]
    984e:	f853 2b04 	ldr.w	r2, [r3], #4
    9852:	6011      	str	r1, [r2, #0]
    9854:	9307      	str	r3, [sp, #28]
    9856:	f7ff b97e 	b.w	8b56 <_vfiprintf_r+0x96>
    985a:	2f06      	cmp	r7, #6
    985c:	463b      	mov	r3, r7
    985e:	9a03      	ldr	r2, [sp, #12]
    9860:	4c79      	ldr	r4, [pc, #484]	; (9a48 <_vfiprintf_r+0xf88>)
    9862:	9207      	str	r2, [sp, #28]
    9864:	bf28      	it	cs
    9866:	2306      	movcs	r3, #6
    9868:	9304      	str	r3, [sp, #16]
    986a:	9303      	str	r3, [sp, #12]
    986c:	f7ff bb25 	b.w	8eba <_vfiprintf_r+0x3fa>
    9870:	9b03      	ldr	r3, [sp, #12]
    9872:	9907      	ldr	r1, [sp, #28]
    9874:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    9878:	bf14      	ite	ne
    987a:	f851 3b04 	ldrne.w	r3, [r1], #4
    987e:	f851 3b04 	ldreq.w	r3, [r1], #4
    9882:	9107      	str	r1, [sp, #28]
    9884:	bf1c      	itt	ne
    9886:	4602      	movne	r2, r0
    9888:	b2db      	uxtbne	r3, r3
    988a:	2101      	movs	r1, #1
    988c:	f7ff ba8f 	b.w	8dae <_vfiprintf_r+0x2ee>
    9890:	ab16      	add	r3, sp, #88	; 0x58
    9892:	9300      	str	r3, [sp, #0]
    9894:	2300      	movs	r3, #0
    9896:	4619      	mov	r1, r3
    9898:	aa13      	add	r2, sp, #76	; 0x4c
    989a:	4658      	mov	r0, fp
    989c:	f7ff f8b4 	bl	8a08 <_wcsrtombs_r>
    98a0:	4603      	mov	r3, r0
    98a2:	3301      	adds	r3, #1
    98a4:	9004      	str	r0, [sp, #16]
    98a6:	f000 80ae 	beq.w	9a06 <_vfiprintf_r+0xf46>
    98aa:	9413      	str	r4, [sp, #76]	; 0x4c
    98ac:	9b04      	ldr	r3, [sp, #16]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d030      	beq.n	9914 <_vfiprintf_r+0xe54>
    98b2:	2b63      	cmp	r3, #99	; 0x63
    98b4:	dc63      	bgt.n	997e <_vfiprintf_r+0xebe>
    98b6:	2300      	movs	r3, #0
    98b8:	9308      	str	r3, [sp, #32]
    98ba:	ac2b      	add	r4, sp, #172	; 0xac
    98bc:	2208      	movs	r2, #8
    98be:	2100      	movs	r1, #0
    98c0:	a816      	add	r0, sp, #88	; 0x58
    98c2:	f7fc fba3 	bl	600c <memset>
    98c6:	9d04      	ldr	r5, [sp, #16]
    98c8:	ab16      	add	r3, sp, #88	; 0x58
    98ca:	9300      	str	r3, [sp, #0]
    98cc:	aa13      	add	r2, sp, #76	; 0x4c
    98ce:	462b      	mov	r3, r5
    98d0:	4621      	mov	r1, r4
    98d2:	4658      	mov	r0, fp
    98d4:	f7ff f898 	bl	8a08 <_wcsrtombs_r>
    98d8:	4285      	cmp	r5, r0
    98da:	f040 80ab 	bne.w	9a34 <_vfiprintf_r+0xf74>
    98de:	9b03      	ldr	r3, [sp, #12]
    98e0:	9a04      	ldr	r2, [sp, #16]
    98e2:	9307      	str	r3, [sp, #28]
    98e4:	2300      	movs	r3, #0
    98e6:	54a3      	strb	r3, [r4, r2]
    98e8:	461f      	mov	r7, r3
    98ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    98ee:	9303      	str	r3, [sp, #12]
    98f0:	f7ff ba16 	b.w	8d20 <_vfiprintf_r+0x260>
    98f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    98f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    98f8:	1a9b      	subs	r3, r3, r2
    98fa:	4618      	mov	r0, r3
    98fc:	9308      	str	r3, [sp, #32]
    98fe:	f7fc fc3d 	bl	617c <strncpy>
    9902:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9904:	9b08      	ldr	r3, [sp, #32]
    9906:	784a      	ldrb	r2, [r1, #1]
    9908:	b10a      	cbz	r2, 990e <_vfiprintf_r+0xe4e>
    990a:	3101      	adds	r1, #1
    990c:	910b      	str	r1, [sp, #44]	; 0x2c
    990e:	f04f 0c00 	mov.w	ip, #0
    9912:	e748      	b.n	97a6 <_vfiprintf_r+0xce6>
    9914:	9b03      	ldr	r3, [sp, #12]
    9916:	9307      	str	r3, [sp, #28]
    9918:	9b04      	ldr	r3, [sp, #16]
    991a:	9303      	str	r3, [sp, #12]
    991c:	461f      	mov	r7, r3
    991e:	9308      	str	r3, [sp, #32]
    9920:	f7ff b9fe 	b.w	8d20 <_vfiprintf_r+0x260>
    9924:	2101      	movs	r1, #1
    9926:	4618      	mov	r0, r3
    9928:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    992c:	f7ff bb13 	b.w	8f56 <_vfiprintf_r+0x496>
    9930:	f850 3b04 	ldr.w	r3, [r0], #4
    9934:	9007      	str	r0, [sp, #28]
    9936:	4622      	mov	r2, r4
    9938:	b2db      	uxtb	r3, r3
    993a:	e6b6      	b.n	96aa <_vfiprintf_r+0xbea>
    993c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    9940:	9207      	str	r2, [sp, #28]
    9942:	17da      	asrs	r2, r3, #31
    9944:	4611      	mov	r1, r2
    9946:	f7ff b9ca 	b.w	8cde <_vfiprintf_r+0x21e>
    994a:	f851 3b04 	ldr.w	r3, [r1], #4
    994e:	9107      	str	r1, [sp, #28]
    9950:	4602      	mov	r2, r0
    9952:	b2db      	uxtb	r3, r3
    9954:	f7ff ba27 	b.w	8da6 <_vfiprintf_r+0x2e6>
    9958:	2301      	movs	r3, #1
    995a:	931c      	str	r3, [sp, #112]	; 0x70
    995c:	2101      	movs	r1, #1
    995e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    9962:	931b      	str	r3, [sp, #108]	; 0x6c
    9964:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    9968:	460b      	mov	r3, r1
    996a:	f7ff bacd 	b.w	8f08 <_vfiprintf_r+0x448>
    996e:	9b07      	ldr	r3, [sp, #28]
    9970:	9905      	ldr	r1, [sp, #20]
    9972:	f853 2b04 	ldr.w	r2, [r3], #4
    9976:	9307      	str	r3, [sp, #28]
    9978:	8011      	strh	r1, [r2, #0]
    997a:	f7ff b8ec 	b.w	8b56 <_vfiprintf_r+0x96>
    997e:	1c59      	adds	r1, r3, #1
    9980:	4658      	mov	r0, fp
    9982:	f7fb fbd5 	bl	5130 <_malloc_r>
    9986:	4604      	mov	r4, r0
    9988:	2800      	cmp	r0, #0
    998a:	d03c      	beq.n	9a06 <_vfiprintf_r+0xf46>
    998c:	9008      	str	r0, [sp, #32]
    998e:	e795      	b.n	98bc <_vfiprintf_r+0xdfc>
    9990:	6d88      	ldr	r0, [r1, #88]	; 0x58
    9992:	f7fc fed5 	bl	6740 <__retarget_lock_release_recursive>
    9996:	f7ff b9e9 	b.w	8d6c <_vfiprintf_r+0x2ac>
    999a:	9b03      	ldr	r3, [sp, #12]
    999c:	9307      	str	r3, [sp, #28]
    999e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    99a2:	9f08      	ldr	r7, [sp, #32]
    99a4:	f7ff b9bc 	b.w	8d20 <_vfiprintf_r+0x260>
    99a8:	9819      	ldr	r0, [sp, #100]	; 0x64
    99aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    99ac:	3001      	adds	r0, #1
    99ae:	e545      	b.n	943c <_vfiprintf_r+0x97c>
    99b0:	9b03      	ldr	r3, [sp, #12]
    99b2:	9307      	str	r3, [sp, #28]
    99b4:	4620      	mov	r0, r4
    99b6:	f7fd f8a3 	bl	6b00 <strlen>
    99ba:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    99be:	462f      	mov	r7, r5
    99c0:	9004      	str	r0, [sp, #16]
    99c2:	9303      	str	r3, [sp, #12]
    99c4:	9508      	str	r5, [sp, #32]
    99c6:	f7ff b9ab 	b.w	8d20 <_vfiprintf_r+0x260>
    99ca:	ee18 1a10 	vmov	r1, s16
    99ce:	aa18      	add	r2, sp, #96	; 0x60
    99d0:	4658      	mov	r0, fp
    99d2:	f7ff f839 	bl	8a48 <__sprint_r.part.0>
    99d6:	2800      	cmp	r0, #0
    99d8:	f43f aa36 	beq.w	8e48 <_vfiprintf_r+0x388>
    99dc:	f7ff ba4d 	b.w	8e7a <_vfiprintf_r+0x3ba>
    99e0:	9819      	ldr	r0, [sp, #100]	; 0x64
    99e2:	3001      	adds	r0, #1
    99e4:	e57a      	b.n	94dc <_vfiprintf_r+0xa1c>
    99e6:	468c      	mov	ip, r1
    99e8:	e46e      	b.n	92c8 <_vfiprintf_r+0x808>
    99ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    99ec:	07d9      	lsls	r1, r3, #31
    99ee:	d405      	bmi.n	99fc <_vfiprintf_r+0xf3c>
    99f0:	89ab      	ldrh	r3, [r5, #12]
    99f2:	059a      	lsls	r2, r3, #22
    99f4:	d402      	bmi.n	99fc <_vfiprintf_r+0xf3c>
    99f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    99f8:	f7fc fea2 	bl	6740 <__retarget_lock_release_recursive>
    99fc:	f04f 33ff 	mov.w	r3, #4294967295
    9a00:	9305      	str	r3, [sp, #20]
    9a02:	f7ff ba49 	b.w	8e98 <_vfiprintf_r+0x3d8>
    9a06:	ee18 2a10 	vmov	r2, s16
    9a0a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a12:	8193      	strh	r3, [r2, #12]
    9a14:	f7ff ba35 	b.w	8e82 <_vfiprintf_r+0x3c2>
    9a18:	9c07      	ldr	r4, [sp, #28]
    9a1a:	9704      	str	r7, [sp, #16]
    9a1c:	e746      	b.n	98ac <_vfiprintf_r+0xdec>
    9a1e:	9b07      	ldr	r3, [sp, #28]
    9a20:	f898 1001 	ldrb.w	r1, [r8, #1]
    9a24:	f853 7b04 	ldr.w	r7, [r3], #4
    9a28:	9307      	str	r3, [sp, #28]
    9a2a:	4690      	mov	r8, r2
    9a2c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    9a30:	f7ff b8b9 	b.w	8ba6 <_vfiprintf_r+0xe6>
    9a34:	ee18 2a10 	vmov	r2, s16
    9a38:	8993      	ldrh	r3, [r2, #12]
    9a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9a3e:	8193      	strh	r3, [r2, #12]
    9a40:	f7ff ba15 	b.w	8e6e <_vfiprintf_r+0x3ae>
    9a44:	cccccccd 	.word	0xcccccccd
    9a48:	200008bc 	.word	0x200008bc

00009a4c <__sbprintf>:
    9a4c:	b570      	push	{r4, r5, r6, lr}
    9a4e:	460c      	mov	r4, r1
    9a50:	8989      	ldrh	r1, [r1, #12]
    9a52:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    9a56:	f021 0102 	bic.w	r1, r1, #2
    9a5a:	f8ad 1014 	strh.w	r1, [sp, #20]
    9a5e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    9a60:	911b      	str	r1, [sp, #108]	; 0x6c
    9a62:	89e1      	ldrh	r1, [r4, #14]
    9a64:	f8ad 1016 	strh.w	r1, [sp, #22]
    9a68:	69e1      	ldr	r1, [r4, #28]
    9a6a:	9109      	str	r1, [sp, #36]	; 0x24
    9a6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9a6e:	910b      	str	r1, [sp, #44]	; 0x2c
    9a70:	a91c      	add	r1, sp, #112	; 0x70
    9a72:	9102      	str	r1, [sp, #8]
    9a74:	9106      	str	r1, [sp, #24]
    9a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9a7a:	4606      	mov	r6, r0
    9a7c:	9104      	str	r1, [sp, #16]
    9a7e:	9107      	str	r1, [sp, #28]
    9a80:	a818      	add	r0, sp, #96	; 0x60
    9a82:	2100      	movs	r1, #0
    9a84:	e9cd 3200 	strd	r3, r2, [sp]
    9a88:	9108      	str	r1, [sp, #32]
    9a8a:	f7fc fe53 	bl	6734 <__retarget_lock_init_recursive>
    9a8e:	e9dd 3200 	ldrd	r3, r2, [sp]
    9a92:	a902      	add	r1, sp, #8
    9a94:	4630      	mov	r0, r6
    9a96:	f7ff f813 	bl	8ac0 <_vfiprintf_r>
    9a9a:	1e05      	subs	r5, r0, #0
    9a9c:	db07      	blt.n	9aae <__sbprintf+0x62>
    9a9e:	a902      	add	r1, sp, #8
    9aa0:	4630      	mov	r0, r6
    9aa2:	f7fd ff63 	bl	796c <_fflush_r>
    9aa6:	2800      	cmp	r0, #0
    9aa8:	bf18      	it	ne
    9aaa:	f04f 35ff 	movne.w	r5, #4294967295
    9aae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9ab2:	065b      	lsls	r3, r3, #25
    9ab4:	d503      	bpl.n	9abe <__sbprintf+0x72>
    9ab6:	89a3      	ldrh	r3, [r4, #12]
    9ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9abc:	81a3      	strh	r3, [r4, #12]
    9abe:	9818      	ldr	r0, [sp, #96]	; 0x60
    9ac0:	f7fc fe3a 	bl	6738 <__retarget_lock_close_recursive>
    9ac4:	4628      	mov	r0, r5
    9ac6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    9aca:	bd70      	pop	{r4, r5, r6, pc}

00009acc <__sfvwrite_r>:
    9acc:	6893      	ldr	r3, [r2, #8]
    9ace:	2b00      	cmp	r3, #0
    9ad0:	f000 8085 	beq.w	9bde <__sfvwrite_r+0x112>
    9ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    9adc:	460c      	mov	r4, r1
    9ade:	0719      	lsls	r1, r3, #28
    9ae0:	4680      	mov	r8, r0
    9ae2:	b083      	sub	sp, #12
    9ae4:	4617      	mov	r7, r2
    9ae6:	b298      	uxth	r0, r3
    9ae8:	d525      	bpl.n	9b36 <__sfvwrite_r+0x6a>
    9aea:	6923      	ldr	r3, [r4, #16]
    9aec:	b31b      	cbz	r3, 9b36 <__sfvwrite_r+0x6a>
    9aee:	f010 0302 	ands.w	r3, r0, #2
    9af2:	683d      	ldr	r5, [r7, #0]
    9af4:	d02d      	beq.n	9b52 <__sfvwrite_r+0x86>
    9af6:	f04f 0a00 	mov.w	sl, #0
    9afa:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 9dbc <__sfvwrite_r+0x2f0>
    9afe:	4656      	mov	r6, sl
    9b00:	46b9      	mov	r9, r7
    9b02:	455e      	cmp	r6, fp
    9b04:	4633      	mov	r3, r6
    9b06:	4652      	mov	r2, sl
    9b08:	bf28      	it	cs
    9b0a:	465b      	movcs	r3, fp
    9b0c:	4640      	mov	r0, r8
    9b0e:	2e00      	cmp	r6, #0
    9b10:	d052      	beq.n	9bb8 <__sfvwrite_r+0xec>
    9b12:	69e1      	ldr	r1, [r4, #28]
    9b14:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9b16:	47b8      	blx	r7
    9b18:	2800      	cmp	r0, #0
    9b1a:	dd56      	ble.n	9bca <__sfvwrite_r+0xfe>
    9b1c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9b20:	1a1b      	subs	r3, r3, r0
    9b22:	4482      	add	sl, r0
    9b24:	1a36      	subs	r6, r6, r0
    9b26:	f8c9 3008 	str.w	r3, [r9, #8]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d1e9      	bne.n	9b02 <__sfvwrite_r+0x36>
    9b2e:	2000      	movs	r0, #0
    9b30:	b003      	add	sp, #12
    9b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b36:	4621      	mov	r1, r4
    9b38:	4640      	mov	r0, r8
    9b3a:	f000 f941 	bl	9dc0 <__swsetup_r>
    9b3e:	2800      	cmp	r0, #0
    9b40:	f040 8138 	bne.w	9db4 <__sfvwrite_r+0x2e8>
    9b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9b48:	683d      	ldr	r5, [r7, #0]
    9b4a:	b298      	uxth	r0, r3
    9b4c:	f010 0302 	ands.w	r3, r0, #2
    9b50:	d1d1      	bne.n	9af6 <__sfvwrite_r+0x2a>
    9b52:	f010 0901 	ands.w	r9, r0, #1
    9b56:	d144      	bne.n	9be2 <__sfvwrite_r+0x116>
    9b58:	464e      	mov	r6, r9
    9b5a:	9700      	str	r7, [sp, #0]
    9b5c:	b346      	cbz	r6, 9bb0 <__sfvwrite_r+0xe4>
    9b5e:	0582      	lsls	r2, r0, #22
    9b60:	f8d4 b008 	ldr.w	fp, [r4, #8]
    9b64:	f140 8085 	bpl.w	9c72 <__sfvwrite_r+0x1a6>
    9b68:	45b3      	cmp	fp, r6
    9b6a:	465a      	mov	r2, fp
    9b6c:	f200 80b4 	bhi.w	9cd8 <__sfvwrite_r+0x20c>
    9b70:	f410 6f90 	tst.w	r0, #1152	; 0x480
    9b74:	f040 80c1 	bne.w	9cfa <__sfvwrite_r+0x22e>
    9b78:	6820      	ldr	r0, [r4, #0]
    9b7a:	9201      	str	r2, [sp, #4]
    9b7c:	4649      	mov	r1, r9
    9b7e:	f7fc f9c9 	bl	5f14 <memmove>
    9b82:	68a3      	ldr	r3, [r4, #8]
    9b84:	9a01      	ldr	r2, [sp, #4]
    9b86:	eba3 010b 	sub.w	r1, r3, fp
    9b8a:	6823      	ldr	r3, [r4, #0]
    9b8c:	60a1      	str	r1, [r4, #8]
    9b8e:	4413      	add	r3, r2
    9b90:	46b2      	mov	sl, r6
    9b92:	6023      	str	r3, [r4, #0]
    9b94:	2600      	movs	r6, #0
    9b96:	9a00      	ldr	r2, [sp, #0]
    9b98:	6893      	ldr	r3, [r2, #8]
    9b9a:	eba3 030a 	sub.w	r3, r3, sl
    9b9e:	44d1      	add	r9, sl
    9ba0:	6093      	str	r3, [r2, #8]
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d0c3      	beq.n	9b2e <__sfvwrite_r+0x62>
    9ba6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9baa:	b280      	uxth	r0, r0
    9bac:	2e00      	cmp	r6, #0
    9bae:	d1d6      	bne.n	9b5e <__sfvwrite_r+0x92>
    9bb0:	e9d5 9600 	ldrd	r9, r6, [r5]
    9bb4:	3508      	adds	r5, #8
    9bb6:	e7d1      	b.n	9b5c <__sfvwrite_r+0x90>
    9bb8:	e9d5 a600 	ldrd	sl, r6, [r5]
    9bbc:	3508      	adds	r5, #8
    9bbe:	e7a0      	b.n	9b02 <__sfvwrite_r+0x36>
    9bc0:	4621      	mov	r1, r4
    9bc2:	4640      	mov	r0, r8
    9bc4:	f7fd fed2 	bl	796c <_fflush_r>
    9bc8:	b388      	cbz	r0, 9c2e <__sfvwrite_r+0x162>
    9bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9bd2:	f04f 30ff 	mov.w	r0, #4294967295
    9bd6:	81a3      	strh	r3, [r4, #12]
    9bd8:	b003      	add	sp, #12
    9bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bde:	2000      	movs	r0, #0
    9be0:	4770      	bx	lr
    9be2:	461e      	mov	r6, r3
    9be4:	46ba      	mov	sl, r7
    9be6:	4699      	mov	r9, r3
    9be8:	4618      	mov	r0, r3
    9bea:	9500      	str	r5, [sp, #0]
    9bec:	461f      	mov	r7, r3
    9bee:	b366      	cbz	r6, 9c4a <__sfvwrite_r+0x17e>
    9bf0:	2800      	cmp	r0, #0
    9bf2:	d032      	beq.n	9c5a <__sfvwrite_r+0x18e>
    9bf4:	464a      	mov	r2, r9
    9bf6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    9bfa:	6820      	ldr	r0, [r4, #0]
    9bfc:	68a5      	ldr	r5, [r4, #8]
    9bfe:	42b2      	cmp	r2, r6
    9c00:	bf28      	it	cs
    9c02:	4632      	movcs	r2, r6
    9c04:	4288      	cmp	r0, r1
    9c06:	d904      	bls.n	9c12 <__sfvwrite_r+0x146>
    9c08:	eb05 0b03 	add.w	fp, r5, r3
    9c0c:	455a      	cmp	r2, fp
    9c0e:	f300 80a7 	bgt.w	9d60 <__sfvwrite_r+0x294>
    9c12:	4293      	cmp	r3, r2
    9c14:	dc64      	bgt.n	9ce0 <__sfvwrite_r+0x214>
    9c16:	69e1      	ldr	r1, [r4, #28]
    9c18:	6a65      	ldr	r5, [r4, #36]	; 0x24
    9c1a:	463a      	mov	r2, r7
    9c1c:	4640      	mov	r0, r8
    9c1e:	47a8      	blx	r5
    9c20:	f1b0 0b00 	subs.w	fp, r0, #0
    9c24:	ddd1      	ble.n	9bca <__sfvwrite_r+0xfe>
    9c26:	ebb9 090b 	subs.w	r9, r9, fp
    9c2a:	d0c9      	beq.n	9bc0 <__sfvwrite_r+0xf4>
    9c2c:	2001      	movs	r0, #1
    9c2e:	f8da 3008 	ldr.w	r3, [sl, #8]
    9c32:	eba3 030b 	sub.w	r3, r3, fp
    9c36:	445f      	add	r7, fp
    9c38:	eba6 060b 	sub.w	r6, r6, fp
    9c3c:	f8ca 3008 	str.w	r3, [sl, #8]
    9c40:	2b00      	cmp	r3, #0
    9c42:	f43f af74 	beq.w	9b2e <__sfvwrite_r+0x62>
    9c46:	2e00      	cmp	r6, #0
    9c48:	d1d2      	bne.n	9bf0 <__sfvwrite_r+0x124>
    9c4a:	9a00      	ldr	r2, [sp, #0]
    9c4c:	6856      	ldr	r6, [r2, #4]
    9c4e:	4613      	mov	r3, r2
    9c50:	3208      	adds	r2, #8
    9c52:	9200      	str	r2, [sp, #0]
    9c54:	2e00      	cmp	r6, #0
    9c56:	d0f8      	beq.n	9c4a <__sfvwrite_r+0x17e>
    9c58:	681f      	ldr	r7, [r3, #0]
    9c5a:	4632      	mov	r2, r6
    9c5c:	210a      	movs	r1, #10
    9c5e:	4638      	mov	r0, r7
    9c60:	f7fd fef6 	bl	7a50 <memchr>
    9c64:	2800      	cmp	r0, #0
    9c66:	f000 809c 	beq.w	9da2 <__sfvwrite_r+0x2d6>
    9c6a:	3001      	adds	r0, #1
    9c6c:	eba0 0907 	sub.w	r9, r0, r7
    9c70:	e7c0      	b.n	9bf4 <__sfvwrite_r+0x128>
    9c72:	6820      	ldr	r0, [r4, #0]
    9c74:	6923      	ldr	r3, [r4, #16]
    9c76:	4298      	cmp	r0, r3
    9c78:	d816      	bhi.n	9ca8 <__sfvwrite_r+0x1dc>
    9c7a:	6962      	ldr	r2, [r4, #20]
    9c7c:	42b2      	cmp	r2, r6
    9c7e:	d813      	bhi.n	9ca8 <__sfvwrite_r+0x1dc>
    9c80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    9c84:	42b3      	cmp	r3, r6
    9c86:	bf28      	it	cs
    9c88:	4633      	movcs	r3, r6
    9c8a:	69e1      	ldr	r1, [r4, #28]
    9c8c:	fb93 f3f2 	sdiv	r3, r3, r2
    9c90:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9c92:	fb02 f303 	mul.w	r3, r2, r3
    9c96:	4640      	mov	r0, r8
    9c98:	464a      	mov	r2, r9
    9c9a:	47b8      	blx	r7
    9c9c:	f1b0 0a00 	subs.w	sl, r0, #0
    9ca0:	dd93      	ble.n	9bca <__sfvwrite_r+0xfe>
    9ca2:	eba6 060a 	sub.w	r6, r6, sl
    9ca6:	e776      	b.n	9b96 <__sfvwrite_r+0xca>
    9ca8:	45b3      	cmp	fp, r6
    9caa:	46da      	mov	sl, fp
    9cac:	bf28      	it	cs
    9cae:	46b2      	movcs	sl, r6
    9cb0:	4652      	mov	r2, sl
    9cb2:	4649      	mov	r1, r9
    9cb4:	f7fc f92e 	bl	5f14 <memmove>
    9cb8:	68a3      	ldr	r3, [r4, #8]
    9cba:	6822      	ldr	r2, [r4, #0]
    9cbc:	eba3 030a 	sub.w	r3, r3, sl
    9cc0:	4452      	add	r2, sl
    9cc2:	60a3      	str	r3, [r4, #8]
    9cc4:	6022      	str	r2, [r4, #0]
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	d1eb      	bne.n	9ca2 <__sfvwrite_r+0x1d6>
    9cca:	4621      	mov	r1, r4
    9ccc:	4640      	mov	r0, r8
    9cce:	f7fd fe4d 	bl	796c <_fflush_r>
    9cd2:	2800      	cmp	r0, #0
    9cd4:	d0e5      	beq.n	9ca2 <__sfvwrite_r+0x1d6>
    9cd6:	e778      	b.n	9bca <__sfvwrite_r+0xfe>
    9cd8:	6820      	ldr	r0, [r4, #0]
    9cda:	46b3      	mov	fp, r6
    9cdc:	4632      	mov	r2, r6
    9cde:	e74c      	b.n	9b7a <__sfvwrite_r+0xae>
    9ce0:	4639      	mov	r1, r7
    9ce2:	9201      	str	r2, [sp, #4]
    9ce4:	f7fc f916 	bl	5f14 <memmove>
    9ce8:	9a01      	ldr	r2, [sp, #4]
    9cea:	68a3      	ldr	r3, [r4, #8]
    9cec:	1a9b      	subs	r3, r3, r2
    9cee:	60a3      	str	r3, [r4, #8]
    9cf0:	6823      	ldr	r3, [r4, #0]
    9cf2:	4413      	add	r3, r2
    9cf4:	6023      	str	r3, [r4, #0]
    9cf6:	4693      	mov	fp, r2
    9cf8:	e795      	b.n	9c26 <__sfvwrite_r+0x15a>
    9cfa:	6823      	ldr	r3, [r4, #0]
    9cfc:	6921      	ldr	r1, [r4, #16]
    9cfe:	eba3 0b01 	sub.w	fp, r3, r1
    9d02:	6963      	ldr	r3, [r4, #20]
    9d04:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    9d08:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    9d0c:	f10b 0301 	add.w	r3, fp, #1
    9d10:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    9d14:	4433      	add	r3, r6
    9d16:	4553      	cmp	r3, sl
    9d18:	4652      	mov	r2, sl
    9d1a:	bf84      	itt	hi
    9d1c:	469a      	movhi	sl, r3
    9d1e:	4652      	movhi	r2, sl
    9d20:	0543      	lsls	r3, r0, #21
    9d22:	d52c      	bpl.n	9d7e <__sfvwrite_r+0x2b2>
    9d24:	4611      	mov	r1, r2
    9d26:	4640      	mov	r0, r8
    9d28:	f7fb fa02 	bl	5130 <_malloc_r>
    9d2c:	2800      	cmp	r0, #0
    9d2e:	d03b      	beq.n	9da8 <__sfvwrite_r+0x2dc>
    9d30:	465a      	mov	r2, fp
    9d32:	6921      	ldr	r1, [r4, #16]
    9d34:	9001      	str	r0, [sp, #4]
    9d36:	f7f9 fc19 	bl	356c <memcpy>
    9d3a:	89a2      	ldrh	r2, [r4, #12]
    9d3c:	9b01      	ldr	r3, [sp, #4]
    9d3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    9d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9d46:	81a2      	strh	r2, [r4, #12]
    9d48:	eb03 000b 	add.w	r0, r3, fp
    9d4c:	6123      	str	r3, [r4, #16]
    9d4e:	ebaa 030b 	sub.w	r3, sl, fp
    9d52:	f8c4 a014 	str.w	sl, [r4, #20]
    9d56:	60a3      	str	r3, [r4, #8]
    9d58:	6020      	str	r0, [r4, #0]
    9d5a:	46b3      	mov	fp, r6
    9d5c:	4632      	mov	r2, r6
    9d5e:	e70c      	b.n	9b7a <__sfvwrite_r+0xae>
    9d60:	4639      	mov	r1, r7
    9d62:	465a      	mov	r2, fp
    9d64:	f7fc f8d6 	bl	5f14 <memmove>
    9d68:	6823      	ldr	r3, [r4, #0]
    9d6a:	445b      	add	r3, fp
    9d6c:	6023      	str	r3, [r4, #0]
    9d6e:	4621      	mov	r1, r4
    9d70:	4640      	mov	r0, r8
    9d72:	f7fd fdfb 	bl	796c <_fflush_r>
    9d76:	2800      	cmp	r0, #0
    9d78:	f43f af55 	beq.w	9c26 <__sfvwrite_r+0x15a>
    9d7c:	e725      	b.n	9bca <__sfvwrite_r+0xfe>
    9d7e:	4640      	mov	r0, r8
    9d80:	f7fb fc9e 	bl	56c0 <_realloc_r>
    9d84:	4603      	mov	r3, r0
    9d86:	2800      	cmp	r0, #0
    9d88:	d1de      	bne.n	9d48 <__sfvwrite_r+0x27c>
    9d8a:	6921      	ldr	r1, [r4, #16]
    9d8c:	4640      	mov	r0, r8
    9d8e:	f7fc ffb9 	bl	6d04 <_free_r>
    9d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d96:	220c      	movs	r2, #12
    9d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9d9c:	f8c8 2000 	str.w	r2, [r8]
    9da0:	e715      	b.n	9bce <__sfvwrite_r+0x102>
    9da2:	1c72      	adds	r2, r6, #1
    9da4:	4691      	mov	r9, r2
    9da6:	e726      	b.n	9bf6 <__sfvwrite_r+0x12a>
    9da8:	220c      	movs	r2, #12
    9daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9dae:	f8c8 2000 	str.w	r2, [r8]
    9db2:	e70c      	b.n	9bce <__sfvwrite_r+0x102>
    9db4:	f04f 30ff 	mov.w	r0, #4294967295
    9db8:	e6ba      	b.n	9b30 <__sfvwrite_r+0x64>
    9dba:	bf00      	nop
    9dbc:	7ffffc00 	.word	0x7ffffc00

00009dc0 <__swsetup_r>:
    9dc0:	b538      	push	{r3, r4, r5, lr}
    9dc2:	4b31      	ldr	r3, [pc, #196]	; (9e88 <__swsetup_r+0xc8>)
    9dc4:	681b      	ldr	r3, [r3, #0]
    9dc6:	4605      	mov	r5, r0
    9dc8:	460c      	mov	r4, r1
    9dca:	b113      	cbz	r3, 9dd2 <__swsetup_r+0x12>
    9dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9dce:	2a00      	cmp	r2, #0
    9dd0:	d04e      	beq.n	9e70 <__swsetup_r+0xb0>
    9dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9dd6:	0718      	lsls	r0, r3, #28
    9dd8:	b29a      	uxth	r2, r3
    9dda:	d51c      	bpl.n	9e16 <__swsetup_r+0x56>
    9ddc:	6921      	ldr	r1, [r4, #16]
    9dde:	b329      	cbz	r1, 9e2c <__swsetup_r+0x6c>
    9de0:	f012 0001 	ands.w	r0, r2, #1
    9de4:	d007      	beq.n	9df6 <__swsetup_r+0x36>
    9de6:	2000      	movs	r0, #0
    9de8:	60a0      	str	r0, [r4, #8]
    9dea:	6960      	ldr	r0, [r4, #20]
    9dec:	4240      	negs	r0, r0
    9dee:	61a0      	str	r0, [r4, #24]
    9df0:	b139      	cbz	r1, 9e02 <__swsetup_r+0x42>
    9df2:	2000      	movs	r0, #0
    9df4:	bd38      	pop	{r3, r4, r5, pc}
    9df6:	0795      	lsls	r5, r2, #30
    9df8:	bf58      	it	pl
    9dfa:	6960      	ldrpl	r0, [r4, #20]
    9dfc:	60a0      	str	r0, [r4, #8]
    9dfe:	2900      	cmp	r1, #0
    9e00:	d1f7      	bne.n	9df2 <__swsetup_r+0x32>
    9e02:	0612      	lsls	r2, r2, #24
    9e04:	bf58      	it	pl
    9e06:	4608      	movpl	r0, r1
    9e08:	d5f4      	bpl.n	9df4 <__swsetup_r+0x34>
    9e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e0e:	81a3      	strh	r3, [r4, #12]
    9e10:	f04f 30ff 	mov.w	r0, #4294967295
    9e14:	bd38      	pop	{r3, r4, r5, pc}
    9e16:	06d1      	lsls	r1, r2, #27
    9e18:	d52e      	bpl.n	9e78 <__swsetup_r+0xb8>
    9e1a:	0752      	lsls	r2, r2, #29
    9e1c:	d414      	bmi.n	9e48 <__swsetup_r+0x88>
    9e1e:	6921      	ldr	r1, [r4, #16]
    9e20:	f043 0308 	orr.w	r3, r3, #8
    9e24:	81a3      	strh	r3, [r4, #12]
    9e26:	b29a      	uxth	r2, r3
    9e28:	2900      	cmp	r1, #0
    9e2a:	d1d9      	bne.n	9de0 <__swsetup_r+0x20>
    9e2c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    9e30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    9e34:	d0d4      	beq.n	9de0 <__swsetup_r+0x20>
    9e36:	4621      	mov	r1, r4
    9e38:	4628      	mov	r0, r5
    9e3a:	f000 f947 	bl	a0cc <__smakebuf_r>
    9e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e42:	6921      	ldr	r1, [r4, #16]
    9e44:	b29a      	uxth	r2, r3
    9e46:	e7cb      	b.n	9de0 <__swsetup_r+0x20>
    9e48:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9e4a:	b151      	cbz	r1, 9e62 <__swsetup_r+0xa2>
    9e4c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9e50:	4291      	cmp	r1, r2
    9e52:	d004      	beq.n	9e5e <__swsetup_r+0x9e>
    9e54:	4628      	mov	r0, r5
    9e56:	f7fc ff55 	bl	6d04 <_free_r>
    9e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e5e:	2200      	movs	r2, #0
    9e60:	6322      	str	r2, [r4, #48]	; 0x30
    9e62:	6921      	ldr	r1, [r4, #16]
    9e64:	2200      	movs	r2, #0
    9e66:	e9c4 1200 	strd	r1, r2, [r4]
    9e6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    9e6e:	e7d7      	b.n	9e20 <__swsetup_r+0x60>
    9e70:	4618      	mov	r0, r3
    9e72:	f7fb ffbb 	bl	5dec <__sinit>
    9e76:	e7ac      	b.n	9dd2 <__swsetup_r+0x12>
    9e78:	2209      	movs	r2, #9
    9e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e7e:	602a      	str	r2, [r5, #0]
    9e80:	f04f 30ff 	mov.w	r0, #4294967295
    9e84:	81a3      	strh	r3, [r4, #12]
    9e86:	bd38      	pop	{r3, r4, r5, pc}
    9e88:	20001748 	.word	0x20001748

00009e8c <__fputwc>:
    9e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e90:	b082      	sub	sp, #8
    9e92:	4682      	mov	sl, r0
    9e94:	4688      	mov	r8, r1
    9e96:	4614      	mov	r4, r2
    9e98:	f7fc fbb6 	bl	6608 <__locale_mb_cur_max>
    9e9c:	2801      	cmp	r0, #1
    9e9e:	d103      	bne.n	9ea8 <__fputwc+0x1c>
    9ea0:	f108 33ff 	add.w	r3, r8, #4294967295
    9ea4:	2bfe      	cmp	r3, #254	; 0xfe
    9ea6:	d936      	bls.n	9f16 <__fputwc+0x8a>
    9ea8:	f10d 0904 	add.w	r9, sp, #4
    9eac:	4642      	mov	r2, r8
    9eae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    9eb2:	4649      	mov	r1, r9
    9eb4:	4650      	mov	r0, sl
    9eb6:	f7fe fd81 	bl	89bc <_wcrtomb_r>
    9eba:	1c42      	adds	r2, r0, #1
    9ebc:	4606      	mov	r6, r0
    9ebe:	d032      	beq.n	9f26 <__fputwc+0x9a>
    9ec0:	b320      	cbz	r0, 9f0c <__fputwc+0x80>
    9ec2:	f89d c004 	ldrb.w	ip, [sp, #4]
    9ec6:	2500      	movs	r5, #0
    9ec8:	e009      	b.n	9ede <__fputwc+0x52>
    9eca:	6823      	ldr	r3, [r4, #0]
    9ecc:	1c5a      	adds	r2, r3, #1
    9ece:	6022      	str	r2, [r4, #0]
    9ed0:	f883 c000 	strb.w	ip, [r3]
    9ed4:	3501      	adds	r5, #1
    9ed6:	42b5      	cmp	r5, r6
    9ed8:	d218      	bcs.n	9f0c <__fputwc+0x80>
    9eda:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    9ede:	68a3      	ldr	r3, [r4, #8]
    9ee0:	3b01      	subs	r3, #1
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	60a3      	str	r3, [r4, #8]
    9ee6:	daf0      	bge.n	9eca <__fputwc+0x3e>
    9ee8:	69a7      	ldr	r7, [r4, #24]
    9eea:	42bb      	cmp	r3, r7
    9eec:	4661      	mov	r1, ip
    9eee:	4622      	mov	r2, r4
    9ef0:	4650      	mov	r0, sl
    9ef2:	db02      	blt.n	9efa <__fputwc+0x6e>
    9ef4:	f1bc 0f0a 	cmp.w	ip, #10
    9ef8:	d1e7      	bne.n	9eca <__fputwc+0x3e>
    9efa:	f000 f953 	bl	a1a4 <__swbuf_r>
    9efe:	1c43      	adds	r3, r0, #1
    9f00:	d1e8      	bne.n	9ed4 <__fputwc+0x48>
    9f02:	4606      	mov	r6, r0
    9f04:	4630      	mov	r0, r6
    9f06:	b002      	add	sp, #8
    9f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f0c:	4646      	mov	r6, r8
    9f0e:	4630      	mov	r0, r6
    9f10:	b002      	add	sp, #8
    9f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f16:	fa5f fc88 	uxtb.w	ip, r8
    9f1a:	f88d c004 	strb.w	ip, [sp, #4]
    9f1e:	4606      	mov	r6, r0
    9f20:	f10d 0904 	add.w	r9, sp, #4
    9f24:	e7cf      	b.n	9ec6 <__fputwc+0x3a>
    9f26:	89a3      	ldrh	r3, [r4, #12]
    9f28:	4630      	mov	r0, r6
    9f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f2e:	81a3      	strh	r3, [r4, #12]
    9f30:	b002      	add	sp, #8
    9f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9f36:	bf00      	nop

00009f38 <_fputwc_r>:
    9f38:	b530      	push	{r4, r5, lr}
    9f3a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9f3c:	f013 0f01 	tst.w	r3, #1
    9f40:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    9f44:	4614      	mov	r4, r2
    9f46:	b083      	sub	sp, #12
    9f48:	4605      	mov	r5, r0
    9f4a:	b29a      	uxth	r2, r3
    9f4c:	d101      	bne.n	9f52 <_fputwc_r+0x1a>
    9f4e:	0598      	lsls	r0, r3, #22
    9f50:	d51c      	bpl.n	9f8c <_fputwc_r+0x54>
    9f52:	0490      	lsls	r0, r2, #18
    9f54:	d406      	bmi.n	9f64 <_fputwc_r+0x2c>
    9f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9f60:	81a3      	strh	r3, [r4, #12]
    9f62:	6662      	str	r2, [r4, #100]	; 0x64
    9f64:	4622      	mov	r2, r4
    9f66:	4628      	mov	r0, r5
    9f68:	f7ff ff90 	bl	9e8c <__fputwc>
    9f6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f6e:	07da      	lsls	r2, r3, #31
    9f70:	4605      	mov	r5, r0
    9f72:	d402      	bmi.n	9f7a <_fputwc_r+0x42>
    9f74:	89a3      	ldrh	r3, [r4, #12]
    9f76:	059b      	lsls	r3, r3, #22
    9f78:	d502      	bpl.n	9f80 <_fputwc_r+0x48>
    9f7a:	4628      	mov	r0, r5
    9f7c:	b003      	add	sp, #12
    9f7e:	bd30      	pop	{r4, r5, pc}
    9f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f82:	f7fc fbdd 	bl	6740 <__retarget_lock_release_recursive>
    9f86:	4628      	mov	r0, r5
    9f88:	b003      	add	sp, #12
    9f8a:	bd30      	pop	{r4, r5, pc}
    9f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f8e:	9101      	str	r1, [sp, #4]
    9f90:	f7fc fbd4 	bl	673c <__retarget_lock_acquire_recursive>
    9f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9f98:	9901      	ldr	r1, [sp, #4]
    9f9a:	b29a      	uxth	r2, r3
    9f9c:	e7d9      	b.n	9f52 <_fputwc_r+0x1a>
    9f9e:	bf00      	nop

00009fa0 <_wcsnrtombs_l>:
    9fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fa4:	b08b      	sub	sp, #44	; 0x2c
    9fa6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    9faa:	9f14      	ldr	r7, [sp, #80]	; 0x50
    9fac:	9103      	str	r1, [sp, #12]
    9fae:	4681      	mov	r9, r0
    9fb0:	9205      	str	r2, [sp, #20]
    9fb2:	461e      	mov	r6, r3
    9fb4:	f1b8 0f00 	cmp.w	r8, #0
    9fb8:	d05c      	beq.n	a074 <_wcsnrtombs_l+0xd4>
    9fba:	9b03      	ldr	r3, [sp, #12]
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d05e      	beq.n	a07e <_wcsnrtombs_l+0xde>
    9fc0:	9b05      	ldr	r3, [sp, #20]
    9fc2:	681d      	ldr	r5, [r3, #0]
    9fc4:	2f00      	cmp	r7, #0
    9fc6:	d06a      	beq.n	a09e <_wcsnrtombs_l+0xfe>
    9fc8:	1e74      	subs	r4, r6, #1
    9fca:	b34e      	cbz	r6, a020 <_wcsnrtombs_l+0x80>
    9fcc:	9b03      	ldr	r3, [sp, #12]
    9fce:	9304      	str	r3, [sp, #16]
    9fd0:	3d04      	subs	r5, #4
    9fd2:	2600      	movs	r6, #0
    9fd4:	9501      	str	r5, [sp, #4]
    9fd6:	e00b      	b.n	9ff0 <_wcsnrtombs_l+0x50>
    9fd8:	9b03      	ldr	r3, [sp, #12]
    9fda:	bb2b      	cbnz	r3, a028 <_wcsnrtombs_l+0x88>
    9fdc:	9b01      	ldr	r3, [sp, #4]
    9fde:	681a      	ldr	r2, [r3, #0]
    9fe0:	2a00      	cmp	r2, #0
    9fe2:	d03a      	beq.n	a05a <_wcsnrtombs_l+0xba>
    9fe4:	45bc      	cmp	ip, r7
    9fe6:	d25c      	bcs.n	a0a2 <_wcsnrtombs_l+0x102>
    9fe8:	3c01      	subs	r4, #1
    9fea:	1c63      	adds	r3, r4, #1
    9fec:	4666      	mov	r6, ip
    9fee:	d017      	beq.n	a020 <_wcsnrtombs_l+0x80>
    9ff0:	f8d8 3000 	ldr.w	r3, [r8]
    9ff4:	9302      	str	r3, [sp, #8]
    9ff6:	9b01      	ldr	r3, [sp, #4]
    9ff8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    9ffc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    a000:	9301      	str	r3, [sp, #4]
    a002:	a907      	add	r1, sp, #28
    a004:	4643      	mov	r3, r8
    a006:	4648      	mov	r0, r9
    a008:	f8d8 b004 	ldr.w	fp, [r8, #4]
    a00c:	47a8      	blx	r5
    a00e:	1c42      	adds	r2, r0, #1
    a010:	d03a      	beq.n	a088 <_wcsnrtombs_l+0xe8>
    a012:	eb00 0c06 	add.w	ip, r0, r6
    a016:	45bc      	cmp	ip, r7
    a018:	d9de      	bls.n	9fd8 <_wcsnrtombs_l+0x38>
    a01a:	9b02      	ldr	r3, [sp, #8]
    a01c:	e9c8 3b00 	strd	r3, fp, [r8]
    a020:	4630      	mov	r0, r6
    a022:	b00b      	add	sp, #44	; 0x2c
    a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a028:	2800      	cmp	r0, #0
    a02a:	dd0e      	ble.n	a04a <_wcsnrtombs_l+0xaa>
    a02c:	9b04      	ldr	r3, [sp, #16]
    a02e:	9d01      	ldr	r5, [sp, #4]
    a030:	4418      	add	r0, r3
    a032:	1e5a      	subs	r2, r3, #1
    a034:	a907      	add	r1, sp, #28
    a036:	f100 3eff 	add.w	lr, r0, #4294967295
    a03a:	f811 3b01 	ldrb.w	r3, [r1], #1
    a03e:	f802 3f01 	strb.w	r3, [r2, #1]!
    a042:	4572      	cmp	r2, lr
    a044:	d1f9      	bne.n	a03a <_wcsnrtombs_l+0x9a>
    a046:	9501      	str	r5, [sp, #4]
    a048:	9004      	str	r0, [sp, #16]
    a04a:	9b05      	ldr	r3, [sp, #20]
    a04c:	681a      	ldr	r2, [r3, #0]
    a04e:	3204      	adds	r2, #4
    a050:	601a      	str	r2, [r3, #0]
    a052:	9b01      	ldr	r3, [sp, #4]
    a054:	681a      	ldr	r2, [r3, #0]
    a056:	2a00      	cmp	r2, #0
    a058:	d1c4      	bne.n	9fe4 <_wcsnrtombs_l+0x44>
    a05a:	9b03      	ldr	r3, [sp, #12]
    a05c:	b10b      	cbz	r3, a062 <_wcsnrtombs_l+0xc2>
    a05e:	9b05      	ldr	r3, [sp, #20]
    a060:	601a      	str	r2, [r3, #0]
    a062:	f10c 36ff 	add.w	r6, ip, #4294967295
    a066:	2200      	movs	r2, #0
    a068:	4630      	mov	r0, r6
    a06a:	f8c8 2000 	str.w	r2, [r8]
    a06e:	b00b      	add	sp, #44	; 0x2c
    a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a074:	9b03      	ldr	r3, [sp, #12]
    a076:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    a07a:	2b00      	cmp	r3, #0
    a07c:	d1a0      	bne.n	9fc0 <_wcsnrtombs_l+0x20>
    a07e:	9b05      	ldr	r3, [sp, #20]
    a080:	f04f 37ff 	mov.w	r7, #4294967295
    a084:	681d      	ldr	r5, [r3, #0]
    a086:	e79f      	b.n	9fc8 <_wcsnrtombs_l+0x28>
    a088:	4606      	mov	r6, r0
    a08a:	218a      	movs	r1, #138	; 0x8a
    a08c:	2200      	movs	r2, #0
    a08e:	4630      	mov	r0, r6
    a090:	f8c9 1000 	str.w	r1, [r9]
    a094:	f8c8 2000 	str.w	r2, [r8]
    a098:	b00b      	add	sp, #44	; 0x2c
    a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a09e:	463e      	mov	r6, r7
    a0a0:	e7be      	b.n	a020 <_wcsnrtombs_l+0x80>
    a0a2:	4666      	mov	r6, ip
    a0a4:	e7bc      	b.n	a020 <_wcsnrtombs_l+0x80>
    a0a6:	bf00      	nop

0000a0a8 <_wcsnrtombs_r>:
    a0a8:	b510      	push	{r4, lr}
    a0aa:	b084      	sub	sp, #16
    a0ac:	4c05      	ldr	r4, [pc, #20]	; (a0c4 <_wcsnrtombs_r+0x1c>)
    a0ae:	9806      	ldr	r0, [sp, #24]
    a0b0:	9000      	str	r0, [sp, #0]
    a0b2:	9807      	ldr	r0, [sp, #28]
    a0b4:	9001      	str	r0, [sp, #4]
    a0b6:	4804      	ldr	r0, [pc, #16]	; (a0c8 <_wcsnrtombs_r+0x20>)
    a0b8:	6800      	ldr	r0, [r0, #0]
    a0ba:	9402      	str	r4, [sp, #8]
    a0bc:	f7ff ff70 	bl	9fa0 <_wcsnrtombs_l>
    a0c0:	b004      	add	sp, #16
    a0c2:	bd10      	pop	{r4, pc}
    a0c4:	200011c0 	.word	0x200011c0
    a0c8:	20001748 	.word	0x20001748

0000a0cc <__smakebuf_r>:
    a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0d0:	898b      	ldrh	r3, [r1, #12]
    a0d2:	460c      	mov	r4, r1
    a0d4:	0799      	lsls	r1, r3, #30
    a0d6:	b096      	sub	sp, #88	; 0x58
    a0d8:	d508      	bpl.n	a0ec <__smakebuf_r+0x20>
    a0da:	f104 0343 	add.w	r3, r4, #67	; 0x43
    a0de:	2201      	movs	r2, #1
    a0e0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    a0e4:	6023      	str	r3, [r4, #0]
    a0e6:	b016      	add	sp, #88	; 0x58
    a0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a0f0:	2900      	cmp	r1, #0
    a0f2:	4606      	mov	r6, r0
    a0f4:	db25      	blt.n	a142 <__smakebuf_r+0x76>
    a0f6:	466a      	mov	r2, sp
    a0f8:	f000 f8ac 	bl	a254 <_fstat_r>
    a0fc:	2800      	cmp	r0, #0
    a0fe:	db1f      	blt.n	a140 <__smakebuf_r+0x74>
    a100:	9d01      	ldr	r5, [sp, #4]
    a102:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    a106:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    a10a:	fab5 f585 	clz	r5, r5
    a10e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    a112:	096d      	lsrs	r5, r5, #5
    a114:	f44f 6700 	mov.w	r7, #2048	; 0x800
    a118:	4641      	mov	r1, r8
    a11a:	4630      	mov	r0, r6
    a11c:	f7fb f808 	bl	5130 <_malloc_r>
    a120:	b1e0      	cbz	r0, a15c <__smakebuf_r+0x90>
    a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a126:	f8c4 8014 	str.w	r8, [r4, #20]
    a12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a12e:	6020      	str	r0, [r4, #0]
    a130:	6120      	str	r0, [r4, #16]
    a132:	81a3      	strh	r3, [r4, #12]
    a134:	bb35      	cbnz	r5, a184 <__smakebuf_r+0xb8>
    a136:	433b      	orrs	r3, r7
    a138:	81a3      	strh	r3, [r4, #12]
    a13a:	b016      	add	sp, #88	; 0x58
    a13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a140:	89a3      	ldrh	r3, [r4, #12]
    a142:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    a146:	d019      	beq.n	a17c <__smakebuf_r+0xb0>
    a148:	f04f 0840 	mov.w	r8, #64	; 0x40
    a14c:	2500      	movs	r5, #0
    a14e:	4641      	mov	r1, r8
    a150:	4630      	mov	r0, r6
    a152:	462f      	mov	r7, r5
    a154:	f7fa ffec 	bl	5130 <_malloc_r>
    a158:	2800      	cmp	r0, #0
    a15a:	d1e2      	bne.n	a122 <__smakebuf_r+0x56>
    a15c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a160:	059a      	lsls	r2, r3, #22
    a162:	d4c0      	bmi.n	a0e6 <__smakebuf_r+0x1a>
    a164:	f023 0303 	bic.w	r3, r3, #3
    a168:	f104 0243 	add.w	r2, r4, #67	; 0x43
    a16c:	f043 0302 	orr.w	r3, r3, #2
    a170:	2101      	movs	r1, #1
    a172:	e9c4 2104 	strd	r2, r1, [r4, #16]
    a176:	81a3      	strh	r3, [r4, #12]
    a178:	6022      	str	r2, [r4, #0]
    a17a:	e7b4      	b.n	a0e6 <__smakebuf_r+0x1a>
    a17c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    a180:	462f      	mov	r7, r5
    a182:	e7c9      	b.n	a118 <__smakebuf_r+0x4c>
    a184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    a188:	4630      	mov	r0, r6
    a18a:	f000 f879 	bl	a280 <_isatty_r>
    a18e:	b910      	cbnz	r0, a196 <__smakebuf_r+0xca>
    a190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    a194:	e7cf      	b.n	a136 <__smakebuf_r+0x6a>
    a196:	89a3      	ldrh	r3, [r4, #12]
    a198:	f023 0303 	bic.w	r3, r3, #3
    a19c:	f043 0301 	orr.w	r3, r3, #1
    a1a0:	b21b      	sxth	r3, r3
    a1a2:	e7c8      	b.n	a136 <__smakebuf_r+0x6a>

0000a1a4 <__swbuf_r>:
    a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1a6:	460d      	mov	r5, r1
    a1a8:	4614      	mov	r4, r2
    a1aa:	4606      	mov	r6, r0
    a1ac:	b110      	cbz	r0, a1b4 <__swbuf_r+0x10>
    a1ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d04c      	beq.n	a24e <__swbuf_r+0xaa>
    a1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a1b8:	69a3      	ldr	r3, [r4, #24]
    a1ba:	60a3      	str	r3, [r4, #8]
    a1bc:	0717      	lsls	r7, r2, #28
    a1be:	b290      	uxth	r0, r2
    a1c0:	d51b      	bpl.n	a1fa <__swbuf_r+0x56>
    a1c2:	6923      	ldr	r3, [r4, #16]
    a1c4:	b1cb      	cbz	r3, a1fa <__swbuf_r+0x56>
    a1c6:	b2ed      	uxtb	r5, r5
    a1c8:	0481      	lsls	r1, r0, #18
    a1ca:	462f      	mov	r7, r5
    a1cc:	d522      	bpl.n	a214 <__swbuf_r+0x70>
    a1ce:	6822      	ldr	r2, [r4, #0]
    a1d0:	6961      	ldr	r1, [r4, #20]
    a1d2:	1ad3      	subs	r3, r2, r3
    a1d4:	4299      	cmp	r1, r3
    a1d6:	dd29      	ble.n	a22c <__swbuf_r+0x88>
    a1d8:	3301      	adds	r3, #1
    a1da:	68a1      	ldr	r1, [r4, #8]
    a1dc:	3901      	subs	r1, #1
    a1de:	60a1      	str	r1, [r4, #8]
    a1e0:	1c51      	adds	r1, r2, #1
    a1e2:	6021      	str	r1, [r4, #0]
    a1e4:	7015      	strb	r5, [r2, #0]
    a1e6:	6962      	ldr	r2, [r4, #20]
    a1e8:	429a      	cmp	r2, r3
    a1ea:	d027      	beq.n	a23c <__swbuf_r+0x98>
    a1ec:	89a3      	ldrh	r3, [r4, #12]
    a1ee:	07db      	lsls	r3, r3, #31
    a1f0:	d501      	bpl.n	a1f6 <__swbuf_r+0x52>
    a1f2:	2d0a      	cmp	r5, #10
    a1f4:	d022      	beq.n	a23c <__swbuf_r+0x98>
    a1f6:	4638      	mov	r0, r7
    a1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1fa:	4621      	mov	r1, r4
    a1fc:	4630      	mov	r0, r6
    a1fe:	f7ff fddf 	bl	9dc0 <__swsetup_r>
    a202:	bb08      	cbnz	r0, a248 <__swbuf_r+0xa4>
    a204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    a208:	6923      	ldr	r3, [r4, #16]
    a20a:	b290      	uxth	r0, r2
    a20c:	b2ed      	uxtb	r5, r5
    a20e:	0481      	lsls	r1, r0, #18
    a210:	462f      	mov	r7, r5
    a212:	d4dc      	bmi.n	a1ce <__swbuf_r+0x2a>
    a214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a218:	81a2      	strh	r2, [r4, #12]
    a21a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a21c:	6961      	ldr	r1, [r4, #20]
    a21e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    a222:	6662      	str	r2, [r4, #100]	; 0x64
    a224:	6822      	ldr	r2, [r4, #0]
    a226:	1ad3      	subs	r3, r2, r3
    a228:	4299      	cmp	r1, r3
    a22a:	dcd5      	bgt.n	a1d8 <__swbuf_r+0x34>
    a22c:	4621      	mov	r1, r4
    a22e:	4630      	mov	r0, r6
    a230:	f7fd fb9c 	bl	796c <_fflush_r>
    a234:	b940      	cbnz	r0, a248 <__swbuf_r+0xa4>
    a236:	6822      	ldr	r2, [r4, #0]
    a238:	2301      	movs	r3, #1
    a23a:	e7ce      	b.n	a1da <__swbuf_r+0x36>
    a23c:	4621      	mov	r1, r4
    a23e:	4630      	mov	r0, r6
    a240:	f7fd fb94 	bl	796c <_fflush_r>
    a244:	2800      	cmp	r0, #0
    a246:	d0d6      	beq.n	a1f6 <__swbuf_r+0x52>
    a248:	f04f 37ff 	mov.w	r7, #4294967295
    a24c:	e7d3      	b.n	a1f6 <__swbuf_r+0x52>
    a24e:	f7fb fdcd 	bl	5dec <__sinit>
    a252:	e7af      	b.n	a1b4 <__swbuf_r+0x10>

0000a254 <_fstat_r>:
    a254:	b570      	push	{r4, r5, r6, lr}
    a256:	460c      	mov	r4, r1
    a258:	4d08      	ldr	r5, [pc, #32]	; (a27c <_fstat_r+0x28>)
    a25a:	4603      	mov	r3, r0
    a25c:	2600      	movs	r6, #0
    a25e:	4620      	mov	r0, r4
    a260:	4611      	mov	r1, r2
    a262:	461c      	mov	r4, r3
    a264:	602e      	str	r6, [r5, #0]
    a266:	f7f9 fdaf 	bl	3dc8 <_fstat>
    a26a:	1c43      	adds	r3, r0, #1
    a26c:	d000      	beq.n	a270 <_fstat_r+0x1c>
    a26e:	bd70      	pop	{r4, r5, r6, pc}
    a270:	682b      	ldr	r3, [r5, #0]
    a272:	2b00      	cmp	r3, #0
    a274:	d0fb      	beq.n	a26e <_fstat_r+0x1a>
    a276:	6023      	str	r3, [r4, #0]
    a278:	bd70      	pop	{r4, r5, r6, pc}
    a27a:	bf00      	nop
    a27c:	20002ae4 	.word	0x20002ae4

0000a280 <_isatty_r>:
    a280:	b538      	push	{r3, r4, r5, lr}
    a282:	4d07      	ldr	r5, [pc, #28]	; (a2a0 <_isatty_r+0x20>)
    a284:	2200      	movs	r2, #0
    a286:	4604      	mov	r4, r0
    a288:	4608      	mov	r0, r1
    a28a:	602a      	str	r2, [r5, #0]
    a28c:	f7f9 fda2 	bl	3dd4 <_isatty>
    a290:	1c43      	adds	r3, r0, #1
    a292:	d000      	beq.n	a296 <_isatty_r+0x16>
    a294:	bd38      	pop	{r3, r4, r5, pc}
    a296:	682b      	ldr	r3, [r5, #0]
    a298:	2b00      	cmp	r3, #0
    a29a:	d0fb      	beq.n	a294 <_isatty_r+0x14>
    a29c:	6023      	str	r3, [r4, #0]
    a29e:	bd38      	pop	{r3, r4, r5, pc}
    a2a0:	20002ae4 	.word	0x20002ae4
    a2a4:	00000000 	.word	0x00000000

0000a2a8 <___reboot_Teensyduino__veneer>:
    a2a8:	f85f f000 	ldr.w	pc, [pc]	; a2ac <___reboot_Teensyduino__veneer+0x4>
    a2ac:	60001ed1 	.word	0x60001ed1

0000a2b0 <___init_veneer>:
    a2b0:	f85f f000 	ldr.w	pc, [pc]	; a2b4 <___init_veneer+0x4>
    a2b4:	60001f79 	.word	0x60001f79

0000a2b8 <___ZN7TwoWire5beginEv_veneer>:
    a2b8:	f85f f000 	ldr.w	pc, [pc]	; a2bc <___ZN7TwoWire5beginEv_veneer+0x4>
    a2bc:	60001769 	.word	0x60001769

Disassembly of section .fini:

0000a2c0 <_fini>:
    a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2c2:	bf00      	nop
