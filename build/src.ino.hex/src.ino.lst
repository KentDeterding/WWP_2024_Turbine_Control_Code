
C:\Users\Kent4\Projects\Wildcat_Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200022c0 	.word	0x200022c0
6000142c:	200033a0 	.word	0x200033a0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f9d6 	bl	600017f0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f974 	bl	60001800 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fba2 	bl	60001c94 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fd39 	bl	60001fd8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f9b0 	bl	60001910 <configure_external_ram>
	analog_init();
600015b0:	f000 fcd4 	bl	60001f5c <analog_init>
	pwm_init();
600015b4:	f000 fd20 	bl	60001ff8 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fb9a 	bl	60001cf0 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f91a 	bl	600017f4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fc2b 	bl	60001e20 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f913 	bl	600017fc <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f90f 	bl	600017f8 <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fd09 	bl	60001ff0 <____libc_init_array_veneer>
	main();
600015de:	f000 fcf3 	bl	60001fc8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000c5b8 	.word	0x0000c5b8
600015f0:	60002200 	.word	0x60002200
600015f4:	00000000 	.word	0x00000000
600015f8:	200022c0 	.word	0x200022c0
600015fc:	6000e7bc 	.word	0x6000e7bc
60001600:	20000000 	.word	0x20000000
60001604:	20002000 	.word	0x20002000
60001608:	000037bd 	.word	0x000037bd
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000264d 	.word	0x0000264d
6000161c:	20003338 	.word	0x20003338
60001620:	00002651 	.word	0x00002651
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2000333c 	.word	0x2000333c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20000af4 	.word	0x20000af4
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20000af4 	.word	0x20000af4

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20000af4 	.word	0x20000af4
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20000af4 	.word	0x20000af4

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017f0:	4770      	bx	lr
600017f2:	bf00      	nop

600017f4 <startup_default_middle_hook>:
600017f4:	4770      	bx	lr
600017f6:	bf00      	nop

600017f8 <startup_default_late_hook>:
600017f8:	4770      	bx	lr
600017fa:	bf00      	nop

600017fc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017fc:	bf00      	nop
600017fe:	4770      	bx	lr

60001800 <configure_cache>:
{
60001800:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001802:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001806:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001808:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000180a:	4831      	ldr	r0, [pc, #196]	; (600018d0 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000180c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001810:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001814:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001816:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000181a:	482e      	ldr	r0, [pc, #184]	; (600018d4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000181c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001820:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001822:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001826:	482c      	ldr	r0, [pc, #176]	; (600018d8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001828:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000182c:	4a2b      	ldr	r2, [pc, #172]	; (600018dc <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000182e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001832:	4c2b      	ldr	r4, [pc, #172]	; (600018e0 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001838:	482a      	ldr	r0, [pc, #168]	; (600018e4 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000183a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000183e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001842:	4c29      	ldr	r4, [pc, #164]	; (600018e8 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001844:	4829      	ldr	r0, [pc, #164]	; (600018ec <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001846:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000184a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000184e:	4c28      	ldr	r4, [pc, #160]	; (600018f0 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001850:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001854:	4827      	ldr	r0, [pc, #156]	; (600018f4 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001856:	4a28      	ldr	r2, [pc, #160]	; (600018f8 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001858:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000185c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001860:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001864:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001868:	4c24      	ldr	r4, [pc, #144]	; (600018fc <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000186a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000186c:	4824      	ldr	r0, [pc, #144]	; (60001900 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000186e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001872:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001876:	4a23      	ldr	r2, [pc, #140]	; (60001904 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001878:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000187c:	4c22      	ldr	r4, [pc, #136]	; (60001908 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000187e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001882:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001886:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000188a:	4820      	ldr	r0, [pc, #128]	; (6000190c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000188c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001890:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001892:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001896:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000189a:	bf00      	nop
	asm("nop");
6000189c:	bf00      	nop
	asm("nop");
6000189e:	bf00      	nop
	asm("nop");
600018a0:	bf00      	nop
	asm("nop");
600018a2:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600018a4:	2201      	movs	r2, #1
600018a6:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600018aa:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ae:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600018b2:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018b6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600018ba:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018be:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600018c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600018ca:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600018ce:	4770      	bx	lr
600018d0:	1000003f 	.word	0x1000003f
600018d4:	07080025 	.word	0x07080025
600018d8:	00100009 	.word	0x00100009
600018dc:	200033a0 	.word	0x200033a0
600018e0:	00200013 	.word	0x00200013
600018e4:	07020021 	.word	0x07020021
600018e8:	20000014 	.word	0x20000014
600018ec:	13080025 	.word	0x13080025
600018f0:	10000009 	.word	0x10000009
600018f4:	20200016 	.word	0x20200016
600018f8:	130b0027 	.word	0x130b0027
600018fc:	40000017 	.word	0x40000017
60001900:	60000018 	.word	0x60000018
60001904:	070b002f 	.word	0x070b002f
60001908:	70000019 	.word	0x70000019
6000190c:	8000001a 	.word	0x8000001a

60001910 <configure_external_ram>:
{
60001910:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001912:	4bb8      	ldr	r3, [pc, #736]	; (60001bf4 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001916:	4eb8      	ldr	r6, [pc, #736]	; (60001bf8 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001918:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000191a:	4fb8      	ldr	r7, [pc, #736]	; (60001bfc <configure_external_ram+0x2ec>)
{
6000191c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000191e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001922:	49b7      	ldr	r1, [pc, #732]	; (60001c00 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001924:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001928:	4db6      	ldr	r5, [pc, #728]	; (60001c04 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000192a:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000192e:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001932:	4cb5      	ldr	r4, [pc, #724]	; (60001c08 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001934:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001938:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000193c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001940:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001944:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001948:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
6000194c:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000194e:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001950:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001952:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001954:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
6000195a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000195e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001962:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001966:	4aa9      	ldr	r2, [pc, #676]	; (60001c0c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001968:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
6000196c:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001970:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001974:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001978:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000197c:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000197e:	4ba4      	ldr	r3, [pc, #656]	; (60001c10 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001980:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001982:	48a4      	ldr	r0, [pc, #656]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001984:	49a4      	ldr	r1, [pc, #656]	; (60001c18 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001986:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001988:	4aa4      	ldr	r2, [pc, #656]	; (60001c1c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000198a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000198c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001990:	f043 030c 	orr.w	r3, r3, #12
60001994:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001998:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000199c:	6803      	ldr	r3, [r0, #0]
6000199e:	f043 0302 	orr.w	r3, r3, #2
600019a2:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019a6:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019a8:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600019ac:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ae:	4b9c      	ldr	r3, [pc, #624]	; (60001c20 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019b0:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019b2:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b4:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b6:	4c9b      	ldr	r4, [pc, #620]	; (60001c24 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019b8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ba:	4a9b      	ldr	r2, [pc, #620]	; (60001c28 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019c0:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c2:	68c3      	ldr	r3, [r0, #12]
600019c4:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600019c8:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ca:	6a03      	ldr	r3, [r0, #32]
600019cc:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019ce:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d2:	6a03      	ldr	r3, [r0, #32]
600019d4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019d6:	4a95      	ldr	r2, [pc, #596]	; (60001c2c <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	4c95      	ldr	r4, [pc, #596]	; (60001c30 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e0:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019e2:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019ec:	f043 0301 	orr.w	r3, r3, #1
600019f0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019f8:	498e      	ldr	r1, [pc, #568]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019fe:	f043 0301 	orr.w	r3, r3, #1
60001a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a18:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a1a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1e:	6803      	ldr	r3, [r0, #0]
60001a20:	f023 0302 	bic.w	r3, r3, #2
60001a24:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a28:	4b83      	ldr	r3, [pc, #524]	; (60001c38 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2a:	4984      	ldr	r1, [pc, #528]	; (60001c3c <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2c:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a2e:	f843 2b04 	str.w	r2, [r3], #4
60001a32:	428b      	cmp	r3, r1
60001a34:	d1fb      	bne.n	60001a2e <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a36:	4a77      	ldr	r2, [pc, #476]	; (60001c14 <configure_external_ram+0x304>)
60001a38:	6813      	ldr	r3, [r2, #0]
60001a3a:	f043 0301 	orr.w	r3, r3, #1
60001a3e:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	6813      	ldr	r3, [r2, #0]
60001a42:	f013 0301 	ands.w	r3, r3, #1
60001a46:	d1fb      	bne.n	60001a40 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a48:	487a      	ldr	r0, [pc, #488]	; (60001c34 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4a:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a4c:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a50:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a52:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a56:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a58:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5c:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a60:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a64:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a68:	4975      	ldr	r1, [pc, #468]	; (60001c40 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a6a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a72:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a76:	4873      	ldr	r0, [pc, #460]	; (60001c44 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a78:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a80:	4c71      	ldr	r4, [pc, #452]	; (60001c48 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a82:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a86:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	4970      	ldr	r1, [pc, #448]	; (60001c4c <configure_external_ram+0x33c>)
60001a8c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a90:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a92:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9a:	485e      	ldr	r0, [pc, #376]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aa8:	6943      	ldr	r3, [r0, #20]
60001aaa:	07da      	lsls	r2, r3, #31
60001aac:	d5fc      	bpl.n	60001aa8 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aae:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab6:	4957      	ldr	r1, [pc, #348]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab8:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001aba:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001abe:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac6:	694b      	ldr	r3, [r1, #20]
60001ac8:	07db      	lsls	r3, r3, #31
60001aca:	d5fc      	bpl.n	60001ac6 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001acc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ace:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ad0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ad4:	4a4f      	ldr	r2, [pc, #316]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ad6:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001ad8:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001adc:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae0:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae4:	6953      	ldr	r3, [r2, #20]
60001ae6:	07df      	lsls	r7, r3, #31
60001ae8:	d5fc      	bpl.n	60001ae4 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aea:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001aec:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001aee:	4858      	ldr	r0, [pc, #352]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af0:	4948      	ldr	r1, [pc, #288]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001af2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001af8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	694b      	ldr	r3, [r1, #20]
60001b02:	07de      	lsls	r6, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001b06:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b0a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b0e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b10:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b12:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001b14:	4293      	cmp	r3, r2
60001b16:	d165      	bne.n	60001be4 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001b18:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b1e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b20:	483c      	ldr	r0, [pc, #240]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b22:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b26:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b2a:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b2e:	6943      	ldr	r3, [r0, #20]
60001b30:	07dd      	lsls	r5, r3, #31
60001b32:	d5fc      	bpl.n	60001b2e <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b34:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b36:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b3a:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b3c:	4a35      	ldr	r2, [pc, #212]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b40:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b48:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b4c:	6953      	ldr	r3, [r2, #20]
60001b4e:	07dc      	lsls	r4, r3, #31
60001b50:	d5fc      	bpl.n	60001b4c <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b52:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b54:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b5c:	492d      	ldr	r1, [pc, #180]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b60:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b68:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b6c:	694b      	ldr	r3, [r1, #20]
60001b6e:	07d8      	lsls	r0, r3, #31
60001b70:	d5fc      	bpl.n	60001b6c <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b72:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b74:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7c:	4a25      	ldr	r2, [pc, #148]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b7e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6953      	ldr	r3, [r2, #20]
60001b8e:	07d9      	lsls	r1, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b98:	482d      	ldr	r0, [pc, #180]	; (60001c50 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	491e      	ldr	r1, [pc, #120]	; (60001c14 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba2:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07da      	lsls	r2, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001bb0:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bb4:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bb8:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bba:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bbc:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bbe:	4293      	cmp	r3, r2
60001bc0:	d050      	beq.n	60001c64 <configure_external_ram+0x354>
60001bc2:	2508      	movs	r5, #8
60001bc4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001bc8:	4922      	ldr	r1, [pc, #136]	; (60001c54 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bca:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001bcc:	4b22      	ldr	r3, [pc, #136]	; (60001c58 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001bce:	4a23      	ldr	r2, [pc, #140]	; (60001c5c <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd0:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001bd2:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001bd4:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bd6:	2301      	movs	r3, #1
60001bd8:	4821      	ldr	r0, [pc, #132]	; (60001c60 <configure_external_ram+0x350>)
60001bda:	4422      	add	r2, r4
60001bdc:	f000 fa04 	bl	60001fe8 <__sm_set_pool_veneer>
}
60001be0:	b003      	add	sp, #12
60001be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001be4:	4b1e      	ldr	r3, [pc, #120]	; (60001c60 <configure_external_ram+0x350>)
60001be6:	2200      	movs	r2, #0
60001be8:	e9c3 2200 	strd	r2, r2, [r3]
60001bec:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bf0:	b003      	add	sp, #12
60001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bf4:	401f8000 	.word	0x401f8000
60001bf8:	0001b0f9 	.word	0x0001b0f9
60001bfc:	000110f9 	.word	0x000110f9
60001c00:	401f8400 	.word	0x401f8400
60001c04:	000170f9 	.word	0x000170f9
60001c08:	400fc000 	.word	0x400fc000
60001c0c:	1ffffcff 	.word	0x1ffffcff
60001c10:	a0000300 	.word	0xa0000300
60001c14:	402a4000 	.word	0x402a4000
60001c18:	402a8000 	.word	0x402a8000
60001c1c:	ffff0012 	.word	0xffff0012
60001c20:	00f737ff 	.word	0x00f737ff
60001c24:	80000040 	.word	0x80000040
60001c28:	7cf0ff00 	.word	0x7cf0ff00
60001c2c:	830f00ff 	.word	0x830f00ff
60001c30:	00020063 	.word	0x00020063
60001c34:	5af05af0 	.word	0x5af05af0
60001c38:	402a4200 	.word	0x402a4200
60001c3c:	402a4300 	.word	0x402a4300
60001c40:	3018049f 	.word	0x3018049f
60001c44:	0a1806eb 	.word	0x0a1806eb
60001c48:	0a180638 	.word	0x0a180638
60001c4c:	26013206 	.word	0x26013206
60001c50:	00030004 	.word	0x00030004
60001c54:	70000000 	.word	0x70000000
60001c58:	70000000 	.word	0x70000000
60001c5c:	20003362 	.word	0x20003362
60001c60:	20002860 	.word	0x20002860
	FLEXSPI2_IPCR0 = addr;
60001c64:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c6e:	4808      	ldr	r0, [pc, #32]	; (60001c90 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c70:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c74:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c78:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7c:	6943      	ldr	r3, [r0, #20]
60001c7e:	07db      	lsls	r3, r3, #31
60001c80:	d5fc      	bpl.n	60001c7c <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c82:	2301      	movs	r3, #1
60001c84:	2510      	movs	r5, #16
60001c86:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c8a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c8c:	e79c      	b.n	60001bc8 <configure_external_ram+0x2b8>
60001c8e:	bf00      	nop
60001c90:	402a4000 	.word	0x402a4000

60001c94 <usb_pll_start>:
{
60001c94:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c96:	4a15      	ldr	r2, [pc, #84]	; (60001cec <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c98:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c9e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001ca6:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001caa:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cae:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001cb0:	f013 0f02 	tst.w	r3, #2
60001cb4:	d10e      	bne.n	60001cd4 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cb6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001cba:	d00f      	beq.n	60001cdc <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001cbc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001cc0:	d00e      	beq.n	60001ce0 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001cc2:	2b00      	cmp	r3, #0
60001cc4:	daf3      	bge.n	60001cae <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001cc6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001cca:	d10b      	bne.n	60001ce4 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001ccc:	065b      	lsls	r3, r3, #25
60001cce:	d50b      	bpl.n	60001ce8 <usb_pll_start+0x54>
}
60001cd0:	bcf0      	pop	{r4, r5, r6, r7}
60001cd2:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cd4:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cd6:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cd8:	6190      	str	r0, [r2, #24]
			continue;
60001cda:	e7e8      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cdc:	6155      	str	r5, [r2, #20]
			continue;
60001cde:	e7e6      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ce0:	6156      	str	r6, [r2, #20]
			continue;
60001ce2:	e7e4      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ce4:	6191      	str	r1, [r2, #24]
			continue;
60001ce6:	e7e2      	b.n	60001cae <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ce8:	6157      	str	r7, [r2, #20]
			continue;
60001cea:	e7e0      	b.n	60001cae <usb_pll_start+0x1a>
60001cec:	400d8000 	.word	0x400d8000

60001cf0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cf0:	4a3f      	ldr	r2, [pc, #252]	; (60001df0 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cf2:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cf4:	493f      	ldr	r1, [pc, #252]	; (60001df4 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cfa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfe:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d02:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001df8 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d06:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d0a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dfc <tempmon_init+0x10c>
{
60001d0e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d14:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d18:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d1c:	4d38      	ldr	r5, [pc, #224]	; (60001e00 <tempmon_init+0x110>)
60001d1e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d20:	4c38      	ldr	r4, [pc, #224]	; (60001e04 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d22:	4839      	ldr	r0, [pc, #228]	; (60001e08 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d24:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d26:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d2a:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d2c:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d34:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d38:	ee07 1a10 	vmov	s14, r1
60001d3c:	4b33      	ldr	r3, [pc, #204]	; (60001e0c <tempmon_init+0x11c>)
60001d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d42:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d48:	4931      	ldr	r1, [pc, #196]	; (60001e10 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4a:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d4e:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d52:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d56:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d5a:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d5e:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d62:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d6a:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d6e:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d76:	4827      	ldr	r0, [pc, #156]	; (60001e14 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d78:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d80:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d84:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d8c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d94:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001da0:	ee16 3a10 	vmov	r3, s12
60001da4:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dac:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001db0:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db2:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db6:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001dbe:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001dc2:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001dc4:	4914      	ldr	r1, [pc, #80]	; (60001e18 <tempmon_init+0x128>)
60001dc6:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001dce:	f043 0302 	orr.w	r3, r3, #2
60001dd2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001dd6:	4b11      	ldr	r3, [pc, #68]	; (60001e1c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001dd8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ddc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001de4:	2201      	movs	r2, #1
}
60001de6:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001de8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001dec:	4770      	bx	lr
60001dee:	bf00      	nop
60001df0:	400d8100 	.word	0x400d8100
60001df4:	401f4400 	.word	0x401f4400
60001df8:	42aa0000 	.word	0x42aa0000
60001dfc:	42b40000 	.word	0x42b40000
60001e00:	20003328 	.word	0x20003328
60001e04:	20003324 	.word	0x20003324
60001e08:	2000332c 	.word	0x2000332c
60001e0c:	20003330 	.word	0x20003330
60001e10:	0fff0000 	.word	0x0fff0000
60001e14:	e000e400 	.word	0xe000e400
60001e18:	20002000 	.word	0x20002000
60001e1c:	000039a5 	.word	0x000039a5

60001e20 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e20:	4b31      	ldr	r3, [pc, #196]	; (60001ee8 <usb_init+0xc8>)
60001e22:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001e26:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001e28:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001e2c:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001e30:	f000 f8d6 	bl	60001fe0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e34:	4a2d      	ldr	r2, [pc, #180]	; (60001eec <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001e36:	492e      	ldr	r1, [pc, #184]	; (60001ef0 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e38:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e3c:	482d      	ldr	r0, [pc, #180]	; (60001ef4 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e3e:	f043 0303 	orr.w	r3, r3, #3
60001e42:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e46:	4b2c      	ldr	r3, [pc, #176]	; (60001ef8 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e48:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e4c:	6802      	ldr	r2, [r0, #0]
60001e4e:	421a      	tst	r2, r3
60001e50:	d103      	bne.n	60001e5a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e52:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e56:	079a      	lsls	r2, r3, #30
60001e58:	d01b      	beq.n	60001e92 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e5a:	4a25      	ldr	r2, [pc, #148]	; (60001ef0 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e60:	4b24      	ldr	r3, [pc, #144]	; (60001ef4 <usb_init+0xd4>)
60001e62:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e64:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e68:	f043 0302 	orr.w	r3, r3, #2
60001e6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e70:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e74:	079b      	lsls	r3, r3, #30
60001e76:	d4fb      	bmi.n	60001e70 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e80:	4b1c      	ldr	r3, [pc, #112]	; (60001ef4 <usb_init+0xd4>)
60001e82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e86:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e8a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e8c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e8e:	f000 f89f 	bl	60001fd0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e92:	4a18      	ldr	r2, [pc, #96]	; (60001ef4 <usb_init+0xd4>)
60001e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e98:	4c15      	ldr	r4, [pc, #84]	; (60001ef0 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e9a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e9c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e9e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea0:	4b16      	ldr	r3, [pc, #88]	; (60001efc <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001ea2:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001ea4:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ea8:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eac:	4618      	mov	r0, r3
60001eae:	f000 f887 	bl	60001fc0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001eb2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001eb6:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001eb8:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ebc:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001ec0:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001ec2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001ec6:	641a      	str	r2, [r3, #64]	; 0x40
60001ec8:	4b0d      	ldr	r3, [pc, #52]	; (60001f00 <usb_init+0xe0>)
60001eca:	4a0e      	ldr	r2, [pc, #56]	; (60001f04 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001ecc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ed4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ed8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001edc:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ede:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001ee2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001ee6:	bd10      	pop	{r4, pc}
60001ee8:	400d8000 	.word	0x400d8000
60001eec:	400fc000 	.word	0x400fc000
60001ef0:	402e0000 	.word	0x402e0000
60001ef4:	400d9000 	.word	0x400d9000
60001ef8:	001e1c00 	.word	0x001e1c00
60001efc:	20000000 	.word	0x20000000
60001f00:	20002000 	.word	0x20002000
60001f04:	00003b8d 	.word	0x00003b8d

60001f08 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001f08:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001f0a:	4b0e      	ldr	r3, [pc, #56]	; (60001f44 <_reboot_Teensyduino_+0x3c>)
60001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001f0e:	079b      	lsls	r3, r3, #30
60001f10:	d400      	bmi.n	60001f14 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001f12:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001f14:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001f16:	4b0c      	ldr	r3, [pc, #48]	; (60001f48 <_reboot_Teensyduino_+0x40>)
60001f18:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f1a:	4a0c      	ldr	r2, [pc, #48]	; (60001f4c <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001f1c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f24:	490a      	ldr	r1, [pc, #40]	; (60001f50 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f26:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001f2a:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001f2c:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001f2e:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001f36:	4807      	ldr	r0, [pc, #28]	; (60001f54 <_reboot_Teensyduino_+0x4c>)
60001f38:	4a07      	ldr	r2, [pc, #28]	; (60001f58 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3a:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f3c:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f3e:	689b      	ldr	r3, [r3, #8]
60001f40:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f42:	bf00      	nop
60001f44:	401f4400 	.word	0x401f4400
60001f48:	402e0000 	.word	0x402e0000
60001f4c:	400ac000 	.word	0x400ac000
60001f50:	00200003 	.word	0x00200003
60001f54:	20208000 	.word	0x20208000
60001f58:	eb120000 	.word	0xeb120000

60001f5c <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f5c:	4b10      	ldr	r3, [pc, #64]	; (60001fa0 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f5e:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f60:	4a10      	ldr	r2, [pc, #64]	; (60001fa4 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f64:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f68:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f6a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f6c:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f72:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f76:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f78:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f7a:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f7c:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f7e:	061b      	lsls	r3, r3, #24
60001f80:	d4fc      	bmi.n	60001f7c <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f82:	4a09      	ldr	r2, [pc, #36]	; (60001fa8 <analog_init+0x4c>)
60001f84:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f88:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f8a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f8c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f90:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f94:	d1fb      	bne.n	60001f8e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f96:	4a05      	ldr	r2, [pc, #20]	; (60001fac <analog_init+0x50>)
60001f98:	7013      	strb	r3, [r2, #0]
}
60001f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f9e:	4770      	bx	lr
60001fa0:	400fc000 	.word	0x400fc000
60001fa4:	400c4000 	.word	0x400c4000
60001fa8:	400c8000 	.word	0x400c8000
60001fac:	20003361 	.word	0x20003361

60001fb0 <_init>:
60001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001fb2:	bf00      	nop
60001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001fb6:	bc08      	pop	{r3}
60001fb8:	469e      	mov	lr, r3
60001fba:	4770      	bx	lr
60001fbc:	0000      	movs	r0, r0
	...

60001fc0 <__memset_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__memset_veneer+0x4>
60001fc4:	00007341 	.word	0x00007341

60001fc8 <__main_veneer>:
60001fc8:	f85f f000 	ldr.w	pc, [pc]	; 60001fcc <__main_veneer+0x4>
60001fcc:	000032c1 	.word	0x000032c1

60001fd0 <__delay_veneer>:
60001fd0:	f85f f000 	ldr.w	pc, [pc]	; 60001fd4 <__delay_veneer+0x4>
60001fd4:	00002fd5 	.word	0x00002fd5

60001fd8 <__set_arm_clock_veneer>:
60001fd8:	f85f f000 	ldr.w	pc, [pc]	; 60001fdc <__set_arm_clock_veneer+0x4>
60001fdc:	00002ce5 	.word	0x00002ce5

60001fe0 <__usb_init_serialnumber_veneer>:
60001fe0:	f85f f000 	ldr.w	pc, [pc]	; 60001fe4 <__usb_init_serialnumber_veneer+0x4>
60001fe4:	000042fd 	.word	0x000042fd

60001fe8 <__sm_set_pool_veneer>:
60001fe8:	f85f f000 	ldr.w	pc, [pc]	; 60001fec <__sm_set_pool_veneer+0x4>
60001fec:	0000545d 	.word	0x0000545d

60001ff0 <____libc_init_array_veneer>:
60001ff0:	f85f f000 	ldr.w	pc, [pc]	; 60001ff4 <____libc_init_array_veneer+0x4>
60001ff4:	00007aad 	.word	0x00007aad

60001ff8 <__pwm_init_veneer>:
60001ff8:	f85f f000 	ldr.w	pc, [pc]	; 60001ffc <__pwm_init_veneer+0x4>
60001ffc:	000052f9 	.word	0x000052f9

60002000 <__frame_dummy_init_array_entry>:
60002000:	00000105 00000e85                       ........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    *value <<= 8;
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
    *value |= _buffer[1];
      2a:	4015      	ands	r5, r2
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f25      	ldr	r7, [pc, #148]	; (c4 <_teensy_model_identifier+0x9f>)
}
      30:	2601      	movs	r6, #1
*/
/**************************************************************************/
void Adafruit_INA260::setAlertLimit(float limit) {
  Adafruit_I2CRegisterBits alert_limit =
      Adafruit_I2CRegisterBits(AlertLimit, 16, 0);
  alert_limit.write((int16_t)(limit / 1.25));
      32:	619d      	str	r5, [r3, #24]
}
      34:	fa95 f4a5 	rbit	r4, r5
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1f      	ldr	r3, [pc, #124]	; (c8 <_teensy_model_identifier+0xa3>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
            array_index -= (int)filter->size;
        }
        sum += (double) *(filter->array + array_index);
    }
    return sum / (double)(filter->size - 2);
}
      54:	4f1d      	ldr	r7, [pc, #116]	; (cc <_teensy_model_identifier+0xa7>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
    }
    if (_miso != -1) {
      70:	4b17      	ldr	r3, [pc, #92]	; (d0 <_teensy_model_identifier+0xab>)
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
      7a:	4f16      	ldr	r7, [pc, #88]	; (d4 <_teensy_model_identifier+0xaf>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
			timer->_ms--;
      80:	fa95 f4a5 	rbit	r4, r5
			break;
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b10      	ldr	r3, [pc, #64]	; (d8 <_teensy_model_identifier+0xb3>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
		} while (n > 0);
      9c:	4015      	ands	r5, r2
			write(iaddress.b[n]);
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0e      	ldr	r7, [pc, #56]	; (dc <_teensy_model_identifier+0xb7>)
      a2:	2601      	movs	r6, #1
		} while (n > 0);
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
}
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      bc:	f3bf 8f4f 	dsb	sy
}
      c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      c2:	bf00      	nop
      c4:	20001b70 	.word	0x20001b70
      c8:	42004000 	.word	0x42004000
      cc:	20001bf0 	.word	0x20001bf0
      d0:	42008000 	.word	0x42008000
      d4:	20001c70 	.word	0x20001c70
      d8:	4200c000 	.word	0x4200c000
      dc:	20001cf0 	.word	0x20001cf0

000000e0 <register_tm_clones>:
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      e0:	4805      	ldr	r0, [pc, #20]	; (f8 <register_tm_clones+0x18>)
      e2:	4b06      	ldr	r3, [pc, #24]	; (fc <register_tm_clones+0x1c>)
      e4:	1a1b      	subs	r3, r3, r0
      e6:	0fd9      	lsrs	r1, r3, #31
      e8:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      ec:	1049      	asrs	r1, r1, #1
      ee:	d002      	beq.n	f6 <register_tm_clones+0x16>
      f0:	4b03      	ldr	r3, [pc, #12]	; (100 <register_tm_clones+0x20>)
      f2:	b103      	cbz	r3, f6 <register_tm_clones+0x16>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      f4:	4718      	bx	r3
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
      f6:	4770      	bx	lr
      f8:	200022c0 	.word	0x200022c0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
      fc:	200022c0 	.word	0x200022c0
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     100:	00000000 	.word	0x00000000

00000104 <frame_dummy>:
     104:	b508      	push	{r3, lr}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <frame_dummy+0x18>)
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4905      	ldr	r1, [pc, #20]	; (120 <frame_dummy+0x1c>)
     10c:	4805      	ldr	r0, [pc, #20]	; (124 <frame_dummy+0x20>)
     10e:	f3af 8000 	nop.w
	if (newbuffer) {
     112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		capacity = maxStrLen;
     116:	f7ff bfe3 	b.w	e0 <register_tm_clones>
		return 1;
     11a:	bf00      	nop
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
     11c:	00000000 	.word	0x00000000
     120:	200032c8 	.word	0x200032c8
     124:	60011800 	.word	0x60011800

00000128 <NextArg(String*)>:
#include <Arduino.h>
#include "types.h"

// Get the next argument from a string and remove it
String NextArg(String* command) {
     128:	b570      	push	{r4, r5, r6, lr}
    String arg = (*command).substring(0, (*command).indexOf(" "));
     12a:	4e17      	ldr	r6, [pc, #92]	; (188 <NextArg(String*)+0x60>)
String NextArg(String* command) {
     12c:	b086      	sub	sp, #24
     12e:	460c      	mov	r4, r1
     130:	4605      	mov	r5, r0
    String arg = (*command).substring(0, (*command).indexOf(" "));
     132:	4631      	mov	r1, r6
     134:	a803      	add	r0, sp, #12
     136:	f002 fb83 	bl	2840 <String::String(char const*)>
     13a:	a903      	add	r1, sp, #12
     13c:	4620      	mov	r0, r4
     13e:	f002 fd1d 	bl	2b7c <String::indexOf(String const&) const>
     142:	2200      	movs	r2, #0
     144:	4603      	mov	r3, r0
     146:	4621      	mov	r1, r4
     148:	4628      	mov	r0, r5
     14a:	f002 fd55 	bl	2bf8 <String::substring(unsigned int, unsigned int) const>
     14e:	a803      	add	r0, sp, #12
     150:	f002 fbc4 	bl	28dc <String::~String()>
    *command = (*command).substring((*command).indexOf(" ") + 1);
     154:	4631      	mov	r1, r6
     156:	4668      	mov	r0, sp
     158:	f002 fb72 	bl	2840 <String::String(char const*)>
     15c:	4669      	mov	r1, sp
     15e:	4620      	mov	r0, r4
     160:	f002 fd0c 	bl	2b7c <String::indexOf(String const&) const>
     164:	4621      	mov	r1, r4
     166:	1c42      	adds	r2, r0, #1
     168:	a803      	add	r0, sp, #12
     16a:	f002 fd19 	bl	2ba0 <String::substring(unsigned int) const>
     16e:	a903      	add	r1, sp, #12
     170:	4620      	mov	r0, r4
     172:	f002 fc3f 	bl	29f4 <String::operator=(String&&)>
     176:	a803      	add	r0, sp, #12
     178:	f002 fbb0 	bl	28dc <String::~String()>
     17c:	4668      	mov	r0, sp
     17e:	f002 fbad 	bl	28dc <String::~String()>
    return arg;
}
     182:	4628      	mov	r0, r5
     184:	b006      	add	sp, #24
     186:	bd70      	pop	{r4, r5, r6, pc}
     188:	200005f4 	.word	0x200005f4

0000018c <MatchCommand(String)>:

Command MatchCommand(String command) {
     18c:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     18e:	490d      	ldr	r1, [pc, #52]	; (1c4 <MatchCommand(String)+0x38>)
     190:	4604      	mov	r4, r0
     192:	f002 fcc1 	bl	2b18 <String::equals(char const*) const>
    if (command == "set") {
     196:	b990      	cbnz	r0, 1be <MatchCommand(String)+0x32>
        return Command::SET;
    } else if (command.toLowerCase() == "toggle") {
     198:	4620      	mov	r0, r4
     19a:	f002 fd57 	bl	2c4c <String::toLowerCase()>
     19e:	490a      	ldr	r1, [pc, #40]	; (1c8 <MatchCommand(String)+0x3c>)
     1a0:	f002 fcba 	bl	2b18 <String::equals(char const*) const>
     1a4:	b948      	cbnz	r0, 1ba <MatchCommand(String)+0x2e>
        return Command::TOGGLE;
    } else if (command.toLowerCase() == "help") {
     1a6:	4620      	mov	r0, r4
     1a8:	f002 fd50 	bl	2c4c <String::toLowerCase()>
     1ac:	4907      	ldr	r1, [pc, #28]	; (1cc <MatchCommand(String)+0x40>)
     1ae:	f002 fcb3 	bl	2b18 <String::equals(char const*) const>
        return Command::SET;
     1b2:	3800      	subs	r0, #0
     1b4:	bf18      	it	ne
     1b6:	2001      	movne	r0, #1
        return Command::HELP;
    } else {
        return Command::INVALID;
    }
}
     1b8:	bd10      	pop	{r4, pc}
        return Command::TOGGLE;
     1ba:	2003      	movs	r0, #3
}
     1bc:	bd10      	pop	{r4, pc}
        return Command::SET;
     1be:	2002      	movs	r0, #2
}
     1c0:	bd10      	pop	{r4, pc}
     1c2:	bf00      	nop
     1c4:	20000440 	.word	0x20000440
     1c8:	20000444 	.word	0x20000444
     1cc:	2000044c 	.word	0x2000044c

000001d0 <Help()>:

// Help menu
String Help() {
     1d0:	b530      	push	{r4, r5, lr}
     1d2:	4604      	mov	r4, r0
     1d4:	b097      	sub	sp, #92	; 0x5c
    // TODO: Fill in commands
    String string =   "List of valid commands:\n";
     1d6:	493b      	ldr	r1, [pc, #236]	; (2c4 <Help()+0xf4>)
     1d8:	f002 fb32 	bl	2840 <String::String(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
     1dc:	493a      	ldr	r1, [pc, #232]	; (2c8 <Help()+0xf8>)
     1de:	4620      	mov	r0, r4
     1e0:	f002 fc74 	bl	2acc <String::append(char const*)>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     1e4:	4939      	ldr	r1, [pc, #228]	; (2cc <Help()+0xfc>)
     1e6:	a813      	add	r0, sp, #76	; 0x4c
     1e8:	f002 fb2a 	bl	2840 <String::String(char const*)>
            string += "    | la <int>\n" +
            string += "    | pitch <float> (not implemented)\n" +
            string += "toggle <traget>\n" +
            string += "    | pcc\n" +
            string += "    | res (resistance tracking)\n" +
            string += "    | print\n";
     1ec:	4621      	mov	r1, r4
     1ee:	a813      	add	r0, sp, #76	; 0x4c
     1f0:	f002 fc8a 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const char *cstr)		{return append(cstr);}
     1f4:	4936      	ldr	r1, [pc, #216]	; (2d0 <Help()+0x100>)
     1f6:	f002 fc69 	bl	2acc <String::append(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     1fa:	4936      	ldr	r1, [pc, #216]	; (2d4 <Help()+0x104>)
	String & operator += (const char *cstr)		{return append(cstr);}
     1fc:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     1fe:	a810      	add	r0, sp, #64	; 0x40
     200:	f002 fb1e 	bl	2840 <String::String(char const*)>
            string += "    | res (resistance tracking)\n" +
     204:	4621      	mov	r1, r4
     206:	a810      	add	r0, sp, #64	; 0x40
     208:	f002 fc7e 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     20c:	4629      	mov	r1, r5
     20e:	f002 fc59 	bl	2ac4 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     212:	4931      	ldr	r1, [pc, #196]	; (2d8 <Help()+0x108>)
	String & operator += (const String &rhs)	{return append(rhs);}
     214:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     216:	a80d      	add	r0, sp, #52	; 0x34
     218:	f002 fb12 	bl	2840 <String::String(char const*)>
            string += "    | pcc\n" +
     21c:	4621      	mov	r1, r4
     21e:	a80d      	add	r0, sp, #52	; 0x34
     220:	f002 fc72 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     224:	4629      	mov	r1, r5
     226:	f002 fc4d 	bl	2ac4 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     22a:	492c      	ldr	r1, [pc, #176]	; (2dc <Help()+0x10c>)
	String & operator += (const String &rhs)	{return append(rhs);}
     22c:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     22e:	a80a      	add	r0, sp, #40	; 0x28
     230:	f002 fb06 	bl	2840 <String::String(char const*)>
            string += "toggle <traget>\n" +
     234:	4621      	mov	r1, r4
     236:	a80a      	add	r0, sp, #40	; 0x28
     238:	f002 fc66 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     23c:	4629      	mov	r1, r5
     23e:	f002 fc41 	bl	2ac4 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     242:	4927      	ldr	r1, [pc, #156]	; (2e0 <Help()+0x110>)
	String & operator += (const String &rhs)	{return append(rhs);}
     244:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     246:	a807      	add	r0, sp, #28
     248:	f002 fafa 	bl	2840 <String::String(char const*)>
            string += "    | pitch <float> (not implemented)\n" +
     24c:	4621      	mov	r1, r4
     24e:	a807      	add	r0, sp, #28
     250:	f002 fc5a 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     254:	4629      	mov	r1, r5
     256:	f002 fc35 	bl	2ac4 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     25a:	4922      	ldr	r1, [pc, #136]	; (2e4 <Help()+0x114>)
	String & operator += (const String &rhs)	{return append(rhs);}
     25c:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     25e:	a804      	add	r0, sp, #16
     260:	f002 faee 	bl	2840 <String::String(char const*)>
            string += "    | la <int>\n" +
     264:	4621      	mov	r1, r4
     266:	a804      	add	r0, sp, #16
     268:	f002 fc4e 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     26c:	4629      	mov	r1, r5
     26e:	f002 fc29 	bl	2ac4 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     272:	491d      	ldr	r1, [pc, #116]	; (2e8 <Help()+0x118>)
	String & operator += (const String &rhs)	{return append(rhs);}
     274:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     276:	a801      	add	r0, sp, #4
     278:	f002 fae2 	bl	2840 <String::String(char const*)>
            string += "    | res <float>\n" +
     27c:	4621      	mov	r1, r4
     27e:	a801      	add	r0, sp, #4
     280:	f002 fc42 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     284:	4629      	mov	r1, r5
     286:	f002 fc1d 	bl	2ac4 <String::append(String const&)>
     28a:	4601      	mov	r1, r0
     28c:	4620      	mov	r0, r4
     28e:	f002 fc19 	bl	2ac4 <String::append(String const&)>
class StringSumHelper : public String
     292:	a801      	add	r0, sp, #4
     294:	f002 fb22 	bl	28dc <String::~String()>
     298:	a804      	add	r0, sp, #16
     29a:	f002 fb1f 	bl	28dc <String::~String()>
     29e:	a807      	add	r0, sp, #28
     2a0:	f002 fb1c 	bl	28dc <String::~String()>
     2a4:	a80a      	add	r0, sp, #40	; 0x28
     2a6:	f002 fb19 	bl	28dc <String::~String()>
     2aa:	a80d      	add	r0, sp, #52	; 0x34
     2ac:	f002 fb16 	bl	28dc <String::~String()>
     2b0:	a810      	add	r0, sp, #64	; 0x40
     2b2:	f002 fb13 	bl	28dc <String::~String()>
     2b6:	a813      	add	r0, sp, #76	; 0x4c
     2b8:	f002 fb10 	bl	28dc <String::~String()>
    return string;
     2bc:	4620      	mov	r0, r4
     2be:	b017      	add	sp, #92	; 0x5c
     2c0:	bd30      	pop	{r4, r5, pc}
     2c2:	bf00      	nop
     2c4:	200004e0 	.word	0x200004e0
     2c8:	200004fc 	.word	0x200004fc
     2cc:	20000514 	.word	0x20000514
     2d0:	20000538 	.word	0x20000538
     2d4:	20000548 	.word	0x20000548
     2d8:	20000554 	.word	0x20000554
     2dc:	20000568 	.word	0x20000568
     2e0:	20000590 	.word	0x20000590
     2e4:	200005a0 	.word	0x200005a0
     2e8:	200005b4 	.word	0x200005b4

000002ec <CreateFilter(unsigned int, int)>:
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2ec:	b570      	push	{r4, r5, r6, lr}
     2ee:	4605      	mov	r5, r0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     2f0:	2018      	movs	r0, #24
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2f2:	460e      	mov	r6, r1
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     2f4:	f005 f914 	bl	5520 <malloc>
    filter->oldestMoment = 0;
     2f8:	2300      	movs	r3, #0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     2fa:	4604      	mov	r4, r0
    filter->size = size;
     2fc:	6005      	str	r5, [r0, #0]
    filter->errorThreshold = 0.25;
     2fe:	2200      	movs	r2, #0
    filter->oldestMoment = 0;
     300:	6063      	str	r3, [r4, #4]
    filter->array = (int*)malloc(sizeof(int) * size);
     302:	00a8      	lsls	r0, r5, #2
    filter->errorThreshold = 0.25;
     304:	4b04      	ldr	r3, [pc, #16]	; (318 <CreateFilter(unsigned int, int)+0x2c>)
    filter->peaks_per_rotation = peaks_per_rotation;
     306:	6126      	str	r6, [r4, #16]
    filter->errorThreshold = 0.25;
     308:	e9c4 2302 	strd	r2, r3, [r4, #8]
    filter->array = (int*)malloc(sizeof(int) * size);
     30c:	f005 f908 	bl	5520 <malloc>
     310:	4603      	mov	r3, r0
}
     312:	4620      	mov	r0, r4
    filter->array = (int*)malloc(sizeof(int) * size);
     314:	6163      	str	r3, [r4, #20]
}
     316:	bd70      	pop	{r4, r5, r6, pc}
     318:	3fd00000 	.word	0x3fd00000

0000031c <Insert(Filter*, int)>:
    int index = filter->oldestMoment;
     31c:	6842      	ldr	r2, [r0, #4]
    *(filter->array + index) = value;
     31e:	6943      	ldr	r3, [r0, #20]
     320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    filter->oldestMoment++;
     324:	6843      	ldr	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     326:	6802      	ldr	r2, [r0, #0]
    filter->oldestMoment++;
     328:	3301      	adds	r3, #1
     32a:	6043      	str	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     32c:	6843      	ldr	r3, [r0, #4]
     32e:	4293      	cmp	r3, r2
     330:	db01      	blt.n	336 <Insert(Filter*, int)+0x1a>
        filter->oldestMoment = 0;
     332:	2300      	movs	r3, #0
     334:	6043      	str	r3, [r0, #4]
}
     336:	4770      	bx	lr

00000338 <GetRpmBuffered(Filter*)>:

double GetRpmBuffered(struct Filter* filter) {
    int highIndex = filter->oldestMoment - 1;
     338:	6841      	ldr	r1, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
    int lowIndex = filter->oldestMoment + 1;
     33a:	6843      	ldr	r3, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     33c:	6802      	ldr	r2, [r0, #0]
     33e:	3901      	subs	r1, #1
double GetRpmBuffered(struct Filter* filter) {
     340:	b410      	push	{r4}
    int lowIndex = filter->oldestMoment + 1;
     342:	f103 0401 	add.w	r4, r3, #1
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     346:	bf48      	it	mi
     348:	f102 31ff 	addmi.w	r1, r2, #4294967295
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     34c:	4294      	cmp	r4, r2
    lowIndex++;
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
    
    double high = (double) *(filter->array + highIndex);
     34e:	6944      	ldr	r4, [r0, #20]
    lowIndex++;
     350:	bfb4      	ite	lt
     352:	3302      	addlt	r3, #2
     354:	2301      	movge	r3, #1
    double high = (double) *(filter->array + highIndex);
     356:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     35a:	429a      	cmp	r2, r3
    double low = (double) *(filter->array + lowIndex);
     35c:	bfcc      	ite	gt
     35e:	009b      	lslgt	r3, r3, #2
     360:	2300      	movle	r3, #0
     362:	58e3      	ldr	r3, [r4, r3]
    
    if (high < low) {
     364:	4299      	cmp	r1, r3
     366:	db21      	blt.n	3ac <GetRpmBuffered(Filter*)+0x74>
    double high = (double) *(filter->array + highIndex);
     368:	ee07 1a90 	vmov	s15, r1
        return -1;
    }
    
    double period = (high - low) / (filter->size - 3);
     36c:	3a03      	subs	r2, #3
    period = period / 1000000; // convert us -> s
    double rpm = 60/ period;
    return rpm / (double)filter->peaks_per_rotation;
     36e:	ed90 5a04 	vldr	s10, [r0, #16]
    double high = (double) *(filter->array + highIndex);
     372:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    double low = (double) *(filter->array + lowIndex);
     376:	ee07 3a90 	vmov	s15, r3
    return rpm / (double)filter->peaks_per_rotation;
     37a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
}
     37e:	f85d 4b04 	ldr.w	r4, [sp], #4
    double low = (double) *(filter->array + lowIndex);
     382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    period = period / 1000000; // convert us -> s
     386:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 3b8 <GetRpmBuffered(Filter*)+0x80>
    double period = (high - low) / (filter->size - 3);
     38a:	ee36 6b47 	vsub.f64	d6, d6, d7
     38e:	ee07 2a90 	vmov	s15, r2
     392:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    double rpm = 60/ period;
     396:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 3c0 <GetRpmBuffered(Filter*)+0x88>
    double period = (high - low) / (filter->size - 3);
     39a:	ee86 2b07 	vdiv.f64	d2, d6, d7
    period = period / 1000000; // convert us -> s
     39e:	ee82 6b03 	vdiv.f64	d6, d2, d3
    double rpm = 60/ period;
     3a2:	ee84 7b06 	vdiv.f64	d7, d4, d6
    return rpm / (double)filter->peaks_per_rotation;
     3a6:	ee87 0b05 	vdiv.f64	d0, d7, d5
}
     3aa:	4770      	bx	lr
        return -1;
     3ac:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
}
     3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
     3b4:	4770      	bx	lr
     3b6:	bf00      	nop
     3b8:	00000000 	.word	0x00000000
     3bc:	412e8480 	.word	0x412e8480
     3c0:	00000000 	.word	0x00000000
     3c4:	404e0000 	.word	0x404e0000

000003c8 <RPM_Interrupt()>:
        Serial.println("Try \"help\"");
    }
}

// Interrupt for measuring the RPM
void RPM_Interrupt () {
     3c8:	b508      	push	{r3, lr}
    int time = (int)micros();
     3ca:	f002 fe57 	bl	307c <micros>
    Insert(rpm_filter, time);
     3ce:	4b03      	ldr	r3, [pc, #12]	; (3dc <RPM_Interrupt()+0x14>)
    int time = (int)micros();
     3d0:	4601      	mov	r1, r0
    Insert(rpm_filter, time);
     3d2:	6818      	ldr	r0, [r3, #0]
     3d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Insert(rpm_filter, time);
     3d8:	f7ff bfa0 	b.w	31c <Insert(Filter*, int)>
     3dc:	200032f0 	.word	0x200032f0

000003e0 <setup>:
void setup () {
     3e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     3e4:	4d81      	ldr	r5, [pc, #516]	; (5ec <setup+0x20c>)
     3e6:	b087      	sub	sp, #28
     3e8:	4c81      	ldr	r4, [pc, #516]	; (5f0 <setup+0x210>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     3ea:	f240 28ee 	movw	r8, #750	; 0x2ee
     3ee:	4f81      	ldr	r7, [pc, #516]	; (5f4 <setup+0x214>)
     3f0:	f8df 9254 	ldr.w	r9, [pc, #596]	; 648 <setup+0x268>
		uint32_t millis_begin = systick_millis_count;
     3f4:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     3f6:	f004 fb61 	bl	4abc <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     3fa:	7823      	ldrb	r3, [r4, #0]
     3fc:	2b00      	cmp	r3, #0
     3fe:	f000 80ae 	beq.w	55e <setup+0x17e>
     402:	783b      	ldrb	r3, [r7, #0]
     404:	07da      	lsls	r2, r3, #31
     406:	f140 80aa 	bpl.w	55e <setup+0x17e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     40a:	682b      	ldr	r3, [r5, #0]
     40c:	f8d9 2000 	ldr.w	r2, [r9]
     410:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     412:	2b0e      	cmp	r3, #14
     414:	f240 80a3 	bls.w	55e <setup+0x17e>
		yield();
     418:	f004 fb50 	bl	4abc <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     41c:	7823      	ldrb	r3, [r4, #0]
        delay(10);
     41e:	200a      	movs	r0, #10
     420:	2b00      	cmp	r3, #0
     422:	f000 80a7 	beq.w	574 <setup+0x194>
     426:	783b      	ldrb	r3, [r7, #0]
     428:	07db      	lsls	r3, r3, #31
     42a:	f140 80a3 	bpl.w	574 <setup+0x194>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     42e:	682b      	ldr	r3, [r5, #0]
     430:	f8d9 2000 	ldr.w	r2, [r9]
     434:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     436:	2b0e      	cmp	r3, #14
     438:	f240 809c 	bls.w	574 <setup+0x194>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     43c:	210e      	movs	r1, #14
     43e:	486e      	ldr	r0, [pc, #440]	; (5f8 <setup+0x218>)
     440:	f004 fabe 	bl	49c0 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     444:	486d      	ldr	r0, [pc, #436]	; (5fc <setup+0x21c>)
     446:	f002 f967 	bl	2718 <Print::println()>
    pinMode(Safety_Switch_Pin, INPUT);
     44a:	2100      	movs	r1, #0
     44c:	200b      	movs	r0, #11
     44e:	f002 fe7b 	bl	3148 <pinMode>
    myServo.begin(32);
     452:	2120      	movs	r1, #32
     454:	486a      	ldr	r0, [pc, #424]	; (600 <setup+0x220>)
     456:	f001 f82f 	bl	14b8 <PA12::begin(int)>
    delay(100);
     45a:	2064      	movs	r0, #100	; 0x64
     45c:	f002 fdba 	bl	2fd4 <delay>
    if (myServo.available()) {
     460:	4867      	ldr	r0, [pc, #412]	; (600 <setup+0x220>)
     462:	f001 f87f 	bl	1564 <PA12::available()>
     466:	2115      	movs	r1, #21
     468:	4603      	mov	r3, r0
     46a:	2800      	cmp	r0, #0
     46c:	f000 80b5 	beq.w	5da <setup+0x1fa>
     470:	4864      	ldr	r0, [pc, #400]	; (604 <setup+0x224>)
    bool success = true;
     472:	2401      	movs	r4, #1
     474:	f004 faa4 	bl	49c0 <usb_serial_write>
     478:	4860      	ldr	r0, [pc, #384]	; (5fc <setup+0x21c>)
     47a:	f002 f94d 	bl	2718 <Print::println()>
    myServo.movingSpeed(LA_ID_NUM, 750);
     47e:	f240 22ee 	movw	r2, #750	; 0x2ee
     482:	2100      	movs	r1, #0
     484:	485e      	ldr	r0, [pc, #376]	; (600 <setup+0x220>)
     486:	f001 fa9b 	bl	19c0 <PA12::movingSpeed(int, int)>
    ina260.begin(0x40);
     48a:	2140      	movs	r1, #64	; 0x40
     48c:	4a5e      	ldr	r2, [pc, #376]	; (608 <setup+0x228>)
     48e:	485f      	ldr	r0, [pc, #380]	; (60c <setup+0x22c>)
     490:	f001 fb26 	bl	1ae0 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     494:	200a      	movs	r0, #10
     496:	f002 fd9d 	bl	2fd4 <delay>
    if (ina260.conversionReady()) {
     49a:	485c      	ldr	r0, [pc, #368]	; (60c <setup+0x22c>)
     49c:	f001 fbe8 	bl	1c70 <Adafruit_INA260::conversionReady()>
     4a0:	210c      	movs	r1, #12
     4a2:	4606      	mov	r6, r0
     4a4:	2800      	cmp	r0, #0
     4a6:	d06b      	beq.n	580 <setup+0x1a0>
     4a8:	4859      	ldr	r0, [pc, #356]	; (610 <setup+0x230>)
     4aa:	f004 fa89 	bl	49c0 <usb_serial_write>
     4ae:	4853      	ldr	r0, [pc, #332]	; (5fc <setup+0x21c>)
     4b0:	f002 f932 	bl	2718 <Print::println()>
    dac.begin(0x64);
     4b4:	4a54      	ldr	r2, [pc, #336]	; (608 <setup+0x228>)
     4b6:	2164      	movs	r1, #100	; 0x64
     4b8:	4856      	ldr	r0, [pc, #344]	; (614 <setup+0x234>)
     4ba:	f002 f85d 	bl	2578 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>
    delay(10);
     4be:	200a      	movs	r0, #10
     4c0:	f002 fd88 	bl	2fd4 <delay>
    dac.setVoltage(dacValue, false);
     4c4:	4954      	ldr	r1, [pc, #336]	; (618 <setup+0x238>)
     4c6:	2200      	movs	r2, #0
     4c8:	4b54      	ldr	r3, [pc, #336]	; (61c <setup+0x23c>)
     4ca:	8809      	ldrh	r1, [r1, #0]
     4cc:	4851      	ldr	r0, [pc, #324]	; (614 <setup+0x234>)
     4ce:	f002 f86f 	bl	25b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
     4d2:	2109      	movs	r1, #9
     4d4:	4852      	ldr	r0, [pc, #328]	; (620 <setup+0x240>)
     4d6:	f004 fa73 	bl	49c0 <usb_serial_write>
     4da:	4848      	ldr	r0, [pc, #288]	; (5fc <setup+0x21c>)
     4dc:	f002 f91c 	bl	2718 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     4e0:	2101      	movs	r1, #1
     4e2:	2021      	movs	r0, #33	; 0x21
     4e4:	f002 fe30 	bl	3148 <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     4e8:	2203      	movs	r2, #3
     4ea:	494e      	ldr	r1, [pc, #312]	; (624 <setup+0x244>)
     4ec:	201d      	movs	r0, #29
     4ee:	f002 fe65 	bl	31bc <attachInterrupt>
    if (success) {
     4f2:	2c00      	cmp	r4, #0
     4f4:	d069      	beq.n	5ca <setup+0x1ea>
     4f6:	210e      	movs	r1, #14
     4f8:	484b      	ldr	r0, [pc, #300]	; (628 <setup+0x248>)
     4fa:	f004 fa61 	bl	49c0 <usb_serial_write>
     4fe:	483f      	ldr	r0, [pc, #252]	; (5fc <setup+0x21c>)
     500:	f002 f90a 	bl	2718 <Print::println()>
     504:	213e      	movs	r1, #62	; 0x3e
     506:	4849      	ldr	r0, [pc, #292]	; (62c <setup+0x24c>)
     508:	f004 fa5a 	bl	49c0 <usb_serial_write>
     50c:	483b      	ldr	r0, [pc, #236]	; (5fc <setup+0x21c>)
     50e:	f002 f903 	bl	2718 <Print::println()>
        virtual int available() { return usb_serial_available(); }
     512:	f004 f9eb 	bl	48ec <usb_serial_available>
    while(!Serial.available()) {}
     516:	2800      	cmp	r0, #0
     518:	d0fb      	beq.n	512 <setup+0x132>
    String fileName = Serial.readString().trim();
     51a:	2200      	movs	r2, #0
     51c:	4937      	ldr	r1, [pc, #220]	; (5fc <setup+0x21c>)
     51e:	a803      	add	r0, sp, #12
     520:	f002 f918 	bl	2754 <Stream::readString(unsigned int)>
     524:	a803      	add	r0, sp, #12
     526:	f002 fba1 	bl	2c6c <String::trim()>
     52a:	4601      	mov	r1, r0
     52c:	4668      	mov	r0, sp
     52e:	f002 f9a5 	bl	287c <String::String(String const&)>
     532:	a803      	add	r0, sp, #12
     534:	f002 f9d2 	bl	28dc <String::~String()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     538:	2122      	movs	r1, #34	; 0x22
     53a:	483d      	ldr	r0, [pc, #244]	; (630 <setup+0x250>)
     53c:	f004 fa40 	bl	49c0 <usb_serial_write>
     540:	482e      	ldr	r0, [pc, #184]	; (5fc <setup+0x21c>)
     542:	f002 f8e9 	bl	2718 <Print::println()>
     546:	682c      	ldr	r4, [r5, #0]
    printTimer = millis();
     548:	493a      	ldr	r1, [pc, #232]	; (634 <setup+0x254>)
}
     54a:	4668      	mov	r0, sp
     54c:	682a      	ldr	r2, [r5, #0]
    resistanceTracingTimer = millis();
     54e:	4b3a      	ldr	r3, [pc, #232]	; (638 <setup+0x258>)
    printTimer = millis();
     550:	600c      	str	r4, [r1, #0]
    resistanceTracingTimer = millis();
     552:	601a      	str	r2, [r3, #0]
}
     554:	f002 f9c2 	bl	28dc <String::~String()>
     558:	b007      	add	sp, #28
     55a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     55e:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     560:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     562:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     564:	b14a      	cbz	r2, 57a <setup+0x19a>
				if (elapsed > 2000) break;
     566:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     56a:	f63f af55 	bhi.w	418 <setup+0x38>
			yield();
     56e:	f004 faa5 	bl	4abc <yield>
     572:	e740      	b.n	3f6 <setup+0x16>
        delay(10);
     574:	f002 fd2e 	bl	2fd4 <delay>
     578:	e74e      	b.n	418 <setup+0x38>
				if (elapsed > 750) break;
     57a:	4543      	cmp	r3, r8
     57c:	d9f7      	bls.n	56e <setup+0x18e>
     57e:	e74b      	b.n	418 <setup+0x38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     580:	482e      	ldr	r0, [pc, #184]	; (63c <setup+0x25c>)
     582:	f004 fa1d 	bl	49c0 <usb_serial_write>
     586:	481d      	ldr	r0, [pc, #116]	; (5fc <setup+0x21c>)
     588:	f002 f8c6 	bl	2718 <Print::println()>
    dac.begin(0x64);
     58c:	4a1e      	ldr	r2, [pc, #120]	; (608 <setup+0x228>)
     58e:	2164      	movs	r1, #100	; 0x64
     590:	4820      	ldr	r0, [pc, #128]	; (614 <setup+0x234>)
     592:	f001 fff1 	bl	2578 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>
    delay(10);
     596:	200a      	movs	r0, #10
     598:	f002 fd1c 	bl	2fd4 <delay>
    dac.setVoltage(dacValue, false);
     59c:	491e      	ldr	r1, [pc, #120]	; (618 <setup+0x238>)
     59e:	4632      	mov	r2, r6
     5a0:	4b1e      	ldr	r3, [pc, #120]	; (61c <setup+0x23c>)
     5a2:	8809      	ldrh	r1, [r1, #0]
     5a4:	481b      	ldr	r0, [pc, #108]	; (614 <setup+0x234>)
     5a6:	f002 f803 	bl	25b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
     5aa:	2109      	movs	r1, #9
     5ac:	481c      	ldr	r0, [pc, #112]	; (620 <setup+0x240>)
     5ae:	f004 fa07 	bl	49c0 <usb_serial_write>
     5b2:	4812      	ldr	r0, [pc, #72]	; (5fc <setup+0x21c>)
     5b4:	f002 f8b0 	bl	2718 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     5b8:	2101      	movs	r1, #1
     5ba:	2021      	movs	r0, #33	; 0x21
     5bc:	f002 fdc4 	bl	3148 <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     5c0:	2203      	movs	r2, #3
     5c2:	4918      	ldr	r1, [pc, #96]	; (624 <setup+0x244>)
     5c4:	201d      	movs	r0, #29
     5c6:	f002 fdf9 	bl	31bc <attachInterrupt>
     5ca:	210c      	movs	r1, #12
     5cc:	481c      	ldr	r0, [pc, #112]	; (640 <setup+0x260>)
     5ce:	f004 f9f7 	bl	49c0 <usb_serial_write>
     5d2:	480a      	ldr	r0, [pc, #40]	; (5fc <setup+0x21c>)
     5d4:	f002 f8a0 	bl	2718 <Print::println()>
     5d8:	e794      	b.n	504 <setup+0x124>
     5da:	481a      	ldr	r0, [pc, #104]	; (644 <setup+0x264>)
        success = false;
     5dc:	461c      	mov	r4, r3
     5de:	f004 f9ef 	bl	49c0 <usb_serial_write>
     5e2:	4806      	ldr	r0, [pc, #24]	; (5fc <setup+0x21c>)
     5e4:	f002 f898 	bl	2718 <Print::println()>
     5e8:	e749      	b.n	47e <setup+0x9e>
     5ea:	bf00      	nop
     5ec:	2000333c 	.word	0x2000333c
     5f0:	2000336b 	.word	0x2000336b
     5f4:	2000336a 	.word	0x2000336a
     5f8:	20000ea0 	.word	0x20000ea0
     5fc:	20001190 	.word	0x20001190
     600:	20002880 	.word	0x20002880
     604:	20000eb0 	.word	0x20000eb0
     608:	20001200 	.word	0x20001200
     60c:	20002870 	.word	0x20002870
     610:	20000ee0 	.word	0x20000ee0
     614:	20002848 	.word	0x20002848
     618:	20001dce 	.word	0x20001dce
     61c:	00061a80 	.word	0x00061a80
     620:	20000ef0 	.word	0x20000ef0
     624:	000003c9 	.word	0x000003c9
     628:	20000f0c 	.word	0x20000f0c
     62c:	20000f2c 	.word	0x20000f2c
     630:	20000f6c 	.word	0x20000f6c
     634:	200032e0 	.word	0x200032e0
     638:	200032ec 	.word	0x200032ec
     63c:	20000efc 	.word	0x20000efc
     640:	20000f1c 	.word	0x20000f1c
     644:	20000ec8 	.word	0x20000ec8
     648:	2000334c 	.word	0x2000334c

0000064c <PrintOutput()>:
void PrintOutput () {
     64c:	b530      	push	{r4, r5, lr}
     64e:	b08d      	sub	sp, #52	; 0x34
     650:	2103      	movs	r1, #3
     652:	48b9      	ldr	r0, [pc, #740]	; (938 <PrintOutput()+0x2ec>)
     654:	f004 f9b4 	bl	49c0 <usb_serial_write>
	StringSumHelper(const char *p) : String(p) {}
     658:	49b8      	ldr	r1, [pc, #736]	; (93c <PrintOutput()+0x2f0>)
     65a:	a806      	add	r0, sp, #24
     65c:	ac09      	add	r4, sp, #36	; 0x24
     65e:	f002 f8ef 	bl	2840 <String::String(char const*)>
     662:	4bb7      	ldr	r3, [pc, #732]	; (940 <PrintOutput()+0x2f4>)
    Serial.println("Time:          \t" + PadString(String(millis())));
     664:	220a      	movs	r2, #10
     666:	a803      	add	r0, sp, #12
     668:	6819      	ldr	r1, [r3, #0]
     66a:	f002 f989 	bl	2980 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     66e:	9b05      	ldr	r3, [sp, #20]
     670:	2b07      	cmp	r3, #7
     672:	d812      	bhi.n	69a <PrintOutput()+0x4e>
     674:	4db3      	ldr	r5, [pc, #716]	; (944 <PrintOutput()+0x2f8>)
     676:	4629      	mov	r1, r5
     678:	4620      	mov	r0, r4
     67a:	f002 f8e1 	bl	2840 <String::String(char const*)>
        str = " " + str;
     67e:	a903      	add	r1, sp, #12
     680:	4620      	mov	r0, r4
     682:	f002 fa41 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     686:	4601      	mov	r1, r0
     688:	a803      	add	r0, sp, #12
     68a:	f002 f9ab 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     68e:	4620      	mov	r0, r4
     690:	f002 f924 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     694:	9b05      	ldr	r3, [sp, #20]
     696:	2b07      	cmp	r3, #7
     698:	d9ed      	bls.n	676 <PrintOutput()+0x2a>
    return str;
     69a:	a903      	add	r1, sp, #12
     69c:	4620      	mov	r0, r4
     69e:	f002 f909 	bl	28b4 <String::String(String&&)>
    Serial.println("Time:          \t" + PadString(String(millis())));
     6a2:	4621      	mov	r1, r4
     6a4:	a806      	add	r0, sp, #24
     6a6:	f002 fa2f 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     6aa:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     6ac:	48a6      	ldr	r0, [pc, #664]	; (948 <PrintOutput()+0x2fc>)
     6ae:	f002 f80d 	bl	26cc <Print::print(String const&)>
     6b2:	48a5      	ldr	r0, [pc, #660]	; (948 <PrintOutput()+0x2fc>)
     6b4:	f002 f830 	bl	2718 <Print::println()>
     6b8:	4620      	mov	r0, r4
     6ba:	f002 f90f 	bl	28dc <String::~String()>
     6be:	a803      	add	r0, sp, #12
     6c0:	f002 f90c 	bl	28dc <String::~String()>
     6c4:	a806      	add	r0, sp, #24
     6c6:	f002 f909 	bl	28dc <String::~String()>
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     6ca:	2021      	movs	r0, #33	; 0x21
     6cc:	f002 fd2a 	bl	3124 <digitalRead>
     6d0:	4a9e      	ldr	r2, [pc, #632]	; (94c <PrintOutput()+0x300>)
     6d2:	499f      	ldr	r1, [pc, #636]	; (950 <PrintOutput()+0x304>)
     6d4:	2800      	cmp	r0, #0
     6d6:	bf18      	it	ne
     6d8:	4611      	movne	r1, r2
     6da:	4668      	mov	r0, sp
     6dc:	f002 f8b0 	bl	2840 <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     6e0:	499c      	ldr	r1, [pc, #624]	; (954 <PrintOutput()+0x308>)
     6e2:	a806      	add	r0, sp, #24
     6e4:	f002 f8ac 	bl	2840 <String::String(char const*)>
    Serial.println("\tRelay State: " + PadString(relayState));
     6e8:	4669      	mov	r1, sp
     6ea:	a803      	add	r0, sp, #12
     6ec:	f002 f8c6 	bl	287c <String::String(String const&)>
    while (str.length() < 8) {
     6f0:	9b05      	ldr	r3, [sp, #20]
     6f2:	2b07      	cmp	r3, #7
     6f4:	d812      	bhi.n	71c <PrintOutput()+0xd0>
     6f6:	4d93      	ldr	r5, [pc, #588]	; (944 <PrintOutput()+0x2f8>)
     6f8:	4629      	mov	r1, r5
     6fa:	4620      	mov	r0, r4
     6fc:	f002 f8a0 	bl	2840 <String::String(char const*)>
        str = " " + str;
     700:	a903      	add	r1, sp, #12
     702:	4620      	mov	r0, r4
     704:	f002 fa00 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     708:	4601      	mov	r1, r0
     70a:	a803      	add	r0, sp, #12
     70c:	f002 f96a 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     710:	4620      	mov	r0, r4
     712:	f002 f8e3 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     716:	9b05      	ldr	r3, [sp, #20]
     718:	2b07      	cmp	r3, #7
     71a:	d9ed      	bls.n	6f8 <PrintOutput()+0xac>
    return str;
     71c:	a903      	add	r1, sp, #12
     71e:	4620      	mov	r0, r4
     720:	f002 f8c8 	bl	28b4 <String::String(String&&)>
    Serial.println("\tRelay State: " + PadString(relayState));
     724:	4621      	mov	r1, r4
     726:	a806      	add	r0, sp, #24
     728:	f002 f9ee 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     72c:	4601      	mov	r1, r0
     72e:	4886      	ldr	r0, [pc, #536]	; (948 <PrintOutput()+0x2fc>)
     730:	f001 ffcc 	bl	26cc <Print::print(String const&)>
     734:	4884      	ldr	r0, [pc, #528]	; (948 <PrintOutput()+0x2fc>)
     736:	f001 ffef 	bl	2718 <Print::println()>
     73a:	4620      	mov	r0, r4
     73c:	f002 f8ce 	bl	28dc <String::~String()>
     740:	a803      	add	r0, sp, #12
     742:	f002 f8cb 	bl	28dc <String::~String()>
     746:	a806      	add	r0, sp, #24
     748:	f002 f8c8 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     74c:	4982      	ldr	r1, [pc, #520]	; (958 <PrintOutput()+0x30c>)
     74e:	a806      	add	r0, sp, #24
     750:	f002 f876 	bl	2840 <String::String(char const*)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     754:	2100      	movs	r1, #0
     756:	4881      	ldr	r0, [pc, #516]	; (95c <PrintOutput()+0x310>)
     758:	f001 f94c 	bl	19f4 <PA12::presentPosition(int)>
     75c:	220a      	movs	r2, #10
     75e:	4601      	mov	r1, r0
     760:	a803      	add	r0, sp, #12
     762:	f002 f8f7 	bl	2954 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     766:	9b05      	ldr	r3, [sp, #20]
     768:	2b07      	cmp	r3, #7
     76a:	d812      	bhi.n	792 <PrintOutput()+0x146>
     76c:	4d75      	ldr	r5, [pc, #468]	; (944 <PrintOutput()+0x2f8>)
     76e:	4629      	mov	r1, r5
     770:	4620      	mov	r0, r4
     772:	f002 f865 	bl	2840 <String::String(char const*)>
        str = " " + str;
     776:	a903      	add	r1, sp, #12
     778:	4620      	mov	r0, r4
     77a:	f002 f9c5 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     77e:	4601      	mov	r1, r0
     780:	a803      	add	r0, sp, #12
     782:	f002 f92f 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     786:	4620      	mov	r0, r4
     788:	f002 f8a8 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     78c:	9b05      	ldr	r3, [sp, #20]
     78e:	2b07      	cmp	r3, #7
     790:	d9ed      	bls.n	76e <PrintOutput()+0x122>
    return str;
     792:	a903      	add	r1, sp, #12
     794:	4620      	mov	r0, r4
     796:	f002 f88d 	bl	28b4 <String::String(String&&)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     79a:	4621      	mov	r1, r4
     79c:	a806      	add	r0, sp, #24
     79e:	f002 f9b3 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     7a2:	4601      	mov	r1, r0
     7a4:	4868      	ldr	r0, [pc, #416]	; (948 <PrintOutput()+0x2fc>)
     7a6:	f001 ff91 	bl	26cc <Print::print(String const&)>
     7aa:	4867      	ldr	r0, [pc, #412]	; (948 <PrintOutput()+0x2fc>)
     7ac:	f001 ffb4 	bl	2718 <Print::println()>
     7b0:	4620      	mov	r0, r4
     7b2:	f002 f893 	bl	28dc <String::~String()>
     7b6:	a803      	add	r0, sp, #12
     7b8:	f002 f890 	bl	28dc <String::~String()>
     7bc:	a806      	add	r0, sp, #24
     7be:	f002 f88d 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     7c2:	4967      	ldr	r1, [pc, #412]	; (960 <PrintOutput()+0x314>)
     7c4:	a806      	add	r0, sp, #24
     7c6:	f002 f83b 	bl	2840 <String::String(char const*)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     7ca:	4b66      	ldr	r3, [pc, #408]	; (964 <PrintOutput()+0x318>)
     7cc:	220a      	movs	r2, #10
     7ce:	a803      	add	r0, sp, #12
     7d0:	8819      	ldrh	r1, [r3, #0]
     7d2:	f002 f8bf 	bl	2954 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     7d6:	9b05      	ldr	r3, [sp, #20]
     7d8:	2b07      	cmp	r3, #7
     7da:	d812      	bhi.n	802 <PrintOutput()+0x1b6>
     7dc:	4d59      	ldr	r5, [pc, #356]	; (944 <PrintOutput()+0x2f8>)
     7de:	4629      	mov	r1, r5
     7e0:	4620      	mov	r0, r4
     7e2:	f002 f82d 	bl	2840 <String::String(char const*)>
        str = " " + str;
     7e6:	a903      	add	r1, sp, #12
     7e8:	4620      	mov	r0, r4
     7ea:	f002 f98d 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     7ee:	4601      	mov	r1, r0
     7f0:	a803      	add	r0, sp, #12
     7f2:	f002 f8f7 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     7f6:	4620      	mov	r0, r4
     7f8:	f002 f870 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     7fc:	9b05      	ldr	r3, [sp, #20]
     7fe:	2b07      	cmp	r3, #7
     800:	d9ed      	bls.n	7de <PrintOutput()+0x192>
    return str;
     802:	a903      	add	r1, sp, #12
     804:	4620      	mov	r0, r4
     806:	f002 f855 	bl	28b4 <String::String(String&&)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     80a:	4621      	mov	r1, r4
     80c:	a806      	add	r0, sp, #24
     80e:	f002 f97b 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     812:	4601      	mov	r1, r0
     814:	484c      	ldr	r0, [pc, #304]	; (948 <PrintOutput()+0x2fc>)
     816:	f001 ff59 	bl	26cc <Print::print(String const&)>
     81a:	484b      	ldr	r0, [pc, #300]	; (948 <PrintOutput()+0x2fc>)
     81c:	f001 ff7c 	bl	2718 <Print::println()>
     820:	4620      	mov	r0, r4
     822:	f002 f85b 	bl	28dc <String::~String()>
     826:	a803      	add	r0, sp, #12
     828:	f002 f858 	bl	28dc <String::~String()>
     82c:	a806      	add	r0, sp, #24
     82e:	f002 f855 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     832:	494d      	ldr	r1, [pc, #308]	; (968 <PrintOutput()+0x31c>)
     834:	a806      	add	r0, sp, #24
     836:	f002 f803 	bl	2840 <String::String(char const*)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     83a:	484c      	ldr	r0, [pc, #304]	; (96c <PrintOutput()+0x320>)
     83c:	f001 f9ca 	bl	1bd4 <Adafruit_INA260::readCurrent()>
     840:	2102      	movs	r1, #2
     842:	a803      	add	r0, sp, #12
     844:	f002 f8b2 	bl	29ac <String::String(float, unsigned char)>
    while (str.length() < 8) {
     848:	9b05      	ldr	r3, [sp, #20]
     84a:	2b07      	cmp	r3, #7
     84c:	d812      	bhi.n	874 <PrintOutput()+0x228>
     84e:	4d3d      	ldr	r5, [pc, #244]	; (944 <PrintOutput()+0x2f8>)
     850:	4629      	mov	r1, r5
     852:	4620      	mov	r0, r4
     854:	f001 fff4 	bl	2840 <String::String(char const*)>
        str = " " + str;
     858:	a903      	add	r1, sp, #12
     85a:	4620      	mov	r0, r4
     85c:	f002 f954 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     860:	4601      	mov	r1, r0
     862:	a803      	add	r0, sp, #12
     864:	f002 f8be 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     868:	4620      	mov	r0, r4
     86a:	f002 f837 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     86e:	9b05      	ldr	r3, [sp, #20]
     870:	2b07      	cmp	r3, #7
     872:	d9ed      	bls.n	850 <PrintOutput()+0x204>
    return str;
     874:	a903      	add	r1, sp, #12
     876:	4620      	mov	r0, r4
     878:	f002 f81c 	bl	28b4 <String::String(String&&)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     87c:	4621      	mov	r1, r4
     87e:	a806      	add	r0, sp, #24
     880:	f002 f942 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     884:	4601      	mov	r1, r0
     886:	4830      	ldr	r0, [pc, #192]	; (948 <PrintOutput()+0x2fc>)
     888:	f001 ff20 	bl	26cc <Print::print(String const&)>
     88c:	482e      	ldr	r0, [pc, #184]	; (948 <PrintOutput()+0x2fc>)
     88e:	f001 ff43 	bl	2718 <Print::println()>
     892:	4620      	mov	r0, r4
     894:	f002 f822 	bl	28dc <String::~String()>
     898:	a803      	add	r0, sp, #12
     89a:	f002 f81f 	bl	28dc <String::~String()>
     89e:	a806      	add	r0, sp, #24
     8a0:	f002 f81c 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     8a4:	4932      	ldr	r1, [pc, #200]	; (970 <PrintOutput()+0x324>)
     8a6:	a806      	add	r0, sp, #24
     8a8:	f001 ffca 	bl	2840 <String::String(char const*)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     8ac:	482f      	ldr	r0, [pc, #188]	; (96c <PrintOutput()+0x320>)
     8ae:	f001 f9ad 	bl	1c0c <Adafruit_INA260::readBusVoltage()>
     8b2:	2102      	movs	r1, #2
     8b4:	a803      	add	r0, sp, #12
     8b6:	f002 f879 	bl	29ac <String::String(float, unsigned char)>
    while (str.length() < 8) {
     8ba:	9b05      	ldr	r3, [sp, #20]
     8bc:	2b07      	cmp	r3, #7
     8be:	d812      	bhi.n	8e6 <PrintOutput()+0x29a>
     8c0:	4d20      	ldr	r5, [pc, #128]	; (944 <PrintOutput()+0x2f8>)
     8c2:	4629      	mov	r1, r5
     8c4:	4620      	mov	r0, r4
     8c6:	f001 ffbb 	bl	2840 <String::String(char const*)>
        str = " " + str;
     8ca:	a903      	add	r1, sp, #12
     8cc:	4620      	mov	r0, r4
     8ce:	f002 f91b 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     8d2:	4601      	mov	r1, r0
     8d4:	a803      	add	r0, sp, #12
     8d6:	f002 f885 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     8da:	4620      	mov	r0, r4
     8dc:	f001 fffe 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     8e0:	9b05      	ldr	r3, [sp, #20]
     8e2:	2b07      	cmp	r3, #7
     8e4:	d9ed      	bls.n	8c2 <PrintOutput()+0x276>
    return str;
     8e6:	a903      	add	r1, sp, #12
     8e8:	4620      	mov	r0, r4
     8ea:	f001 ffe3 	bl	28b4 <String::String(String&&)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     8ee:	4621      	mov	r1, r4
     8f0:	a806      	add	r0, sp, #24
     8f2:	f002 f909 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     8f6:	4601      	mov	r1, r0
     8f8:	4813      	ldr	r0, [pc, #76]	; (948 <PrintOutput()+0x2fc>)
     8fa:	f001 fee7 	bl	26cc <Print::print(String const&)>
     8fe:	4812      	ldr	r0, [pc, #72]	; (948 <PrintOutput()+0x2fc>)
     900:	f001 ff0a 	bl	2718 <Print::println()>
     904:	4620      	mov	r0, r4
     906:	f001 ffe9 	bl	28dc <String::~String()>
     90a:	a803      	add	r0, sp, #12
     90c:	f001 ffe6 	bl	28dc <String::~String()>
     910:	a806      	add	r0, sp, #24
     912:	f001 ffe3 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     916:	4917      	ldr	r1, [pc, #92]	; (974 <PrintOutput()+0x328>)
     918:	a806      	add	r0, sp, #24
     91a:	f001 ff91 	bl	2840 <String::String(char const*)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     91e:	4813      	ldr	r0, [pc, #76]	; (96c <PrintOutput()+0x320>)
     920:	f001 f98e 	bl	1c40 <Adafruit_INA260::readPower()>
     924:	2102      	movs	r1, #2
     926:	a803      	add	r0, sp, #12
     928:	f002 f840 	bl	29ac <String::String(float, unsigned char)>
    while (str.length() < 8) {
     92c:	9b05      	ldr	r3, [sp, #20]
     92e:	2b07      	cmp	r3, #7
     930:	d834      	bhi.n	99c <PrintOutput()+0x350>
     932:	4d04      	ldr	r5, [pc, #16]	; (944 <PrintOutput()+0x2f8>)
     934:	e020      	b.n	978 <PrintOutput()+0x32c>
     936:	bf00      	nop
     938:	200003b8 	.word	0x200003b8
     93c:	200003bc 	.word	0x200003bc
     940:	2000333c 	.word	0x2000333c
     944:	200005f4 	.word	0x200005f4
     948:	20001190 	.word	0x20001190
     94c:	200003ac 	.word	0x200003ac
     950:	200003b4 	.word	0x200003b4
     954:	200003d0 	.word	0x200003d0
     958:	200003e0 	.word	0x200003e0
     95c:	20002880 	.word	0x20002880
     960:	200003f0 	.word	0x200003f0
     964:	20001dce 	.word	0x20001dce
     968:	20000400 	.word	0x20000400
     96c:	20002870 	.word	0x20002870
     970:	20000410 	.word	0x20000410
     974:	20000420 	.word	0x20000420
     978:	4629      	mov	r1, r5
     97a:	4620      	mov	r0, r4
     97c:	f001 ff60 	bl	2840 <String::String(char const*)>
        str = " " + str;
     980:	a903      	add	r1, sp, #12
     982:	4620      	mov	r0, r4
     984:	f002 f8c0 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     988:	4601      	mov	r1, r0
     98a:	a803      	add	r0, sp, #12
     98c:	f002 f82a 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     990:	4620      	mov	r0, r4
     992:	f001 ffa3 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     996:	9b05      	ldr	r3, [sp, #20]
     998:	2b07      	cmp	r3, #7
     99a:	d9ed      	bls.n	978 <PrintOutput()+0x32c>
    return str;
     99c:	a903      	add	r1, sp, #12
     99e:	4620      	mov	r0, r4
     9a0:	f001 ff88 	bl	28b4 <String::String(String&&)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     9a4:	4621      	mov	r1, r4
     9a6:	a806      	add	r0, sp, #24
     9a8:	f002 f8ae 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     9ac:	4601      	mov	r1, r0
     9ae:	4828      	ldr	r0, [pc, #160]	; (a50 <PrintOutput()+0x404>)
     9b0:	f001 fe8c 	bl	26cc <Print::print(String const&)>
     9b4:	4826      	ldr	r0, [pc, #152]	; (a50 <PrintOutput()+0x404>)
     9b6:	f001 feaf 	bl	2718 <Print::println()>
     9ba:	4620      	mov	r0, r4
     9bc:	f001 ff8e 	bl	28dc <String::~String()>
     9c0:	a803      	add	r0, sp, #12
     9c2:	f001 ff8b 	bl	28dc <String::~String()>
     9c6:	a806      	add	r0, sp, #24
     9c8:	f001 ff88 	bl	28dc <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     9cc:	4921      	ldr	r1, [pc, #132]	; (a54 <PrintOutput()+0x408>)
     9ce:	a806      	add	r0, sp, #24
     9d0:	f001 ff36 	bl	2840 <String::String(char const*)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     9d4:	4b20      	ldr	r3, [pc, #128]	; (a58 <PrintOutput()+0x40c>)
     9d6:	6818      	ldr	r0, [r3, #0]
     9d8:	f7ff fcae 	bl	338 <GetRpmBuffered(Filter*)>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     9dc:	a803      	add	r0, sp, #12
     9de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     9e2:	2102      	movs	r1, #2
     9e4:	f001 ffe2 	bl	29ac <String::String(float, unsigned char)>
    while (str.length() < 8) {
     9e8:	9b05      	ldr	r3, [sp, #20]
     9ea:	2b07      	cmp	r3, #7
     9ec:	d812      	bhi.n	a14 <PrintOutput()+0x3c8>
	StringSumHelper(const char *p) : String(p) {}
     9ee:	4d1b      	ldr	r5, [pc, #108]	; (a5c <PrintOutput()+0x410>)
     9f0:	4629      	mov	r1, r5
     9f2:	4620      	mov	r0, r4
     9f4:	f001 ff24 	bl	2840 <String::String(char const*)>
        str = " " + str;
     9f8:	a903      	add	r1, sp, #12
     9fa:	4620      	mov	r0, r4
     9fc:	f002 f884 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     a00:	4601      	mov	r1, r0
     a02:	a803      	add	r0, sp, #12
     a04:	f001 ffee 	bl	29e4 <String::operator=(String const&)>
class StringSumHelper : public String
     a08:	4620      	mov	r0, r4
     a0a:	f001 ff67 	bl	28dc <String::~String()>
    while (str.length() < 8) {
     a0e:	9b05      	ldr	r3, [sp, #20]
     a10:	2b07      	cmp	r3, #7
     a12:	d9ed      	bls.n	9f0 <PrintOutput()+0x3a4>
    return str;
     a14:	a903      	add	r1, sp, #12
     a16:	4620      	mov	r0, r4
     a18:	f001 ff4c 	bl	28b4 <String::String(String&&)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     a1c:	4621      	mov	r1, r4
     a1e:	a806      	add	r0, sp, #24
     a20:	f002 f872 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     a24:	4601      	mov	r1, r0
     a26:	480a      	ldr	r0, [pc, #40]	; (a50 <PrintOutput()+0x404>)
     a28:	f001 fe50 	bl	26cc <Print::print(String const&)>
     a2c:	4808      	ldr	r0, [pc, #32]	; (a50 <PrintOutput()+0x404>)
     a2e:	f001 fe73 	bl	2718 <Print::println()>
     a32:	4620      	mov	r0, r4
     a34:	f001 ff52 	bl	28dc <String::~String()>
     a38:	a803      	add	r0, sp, #12
     a3a:	f001 ff4f 	bl	28dc <String::~String()>
     a3e:	a806      	add	r0, sp, #24
     a40:	f001 ff4c 	bl	28dc <String::~String()>
}
     a44:	4668      	mov	r0, sp
     a46:	f001 ff49 	bl	28dc <String::~String()>
     a4a:	b00d      	add	sp, #52	; 0x34
     a4c:	bd30      	pop	{r4, r5, pc}
     a4e:	bf00      	nop
     a50:	20001190 	.word	0x20001190
     a54:	20000430 	.word	0x20000430
     a58:	200032f0 	.word	0x200032f0
     a5c:	200005f4 	.word	0x200005f4

00000a60 <Set(String)>:
void Set(String command) {
     a60:	b530      	push	{r4, r5, lr}
     a62:	4604      	mov	r4, r0
     a64:	b08b      	sub	sp, #44	; 0x2c
    String arg = NextArg(&command).toLowerCase();
     a66:	4621      	mov	r1, r4
     a68:	a807      	add	r0, sp, #28
     a6a:	f7ff fb5d 	bl	128 <NextArg(String*)>
     a6e:	a807      	add	r0, sp, #28
     a70:	f002 f8ec 	bl	2c4c <String::toLowerCase()>
     a74:	4601      	mov	r1, r0
     a76:	a801      	add	r0, sp, #4
     a78:	f001 ff00 	bl	287c <String::String(String const&)>
     a7c:	a807      	add	r0, sp, #28
     a7e:	f001 ff2d 	bl	28dc <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     a82:	493f      	ldr	r1, [pc, #252]	; (b80 <Set(String)+0x120>)
     a84:	a801      	add	r0, sp, #4
     a86:	f002 f847 	bl	2b18 <String::equals(char const*) const>
    if (arg == "dac") {
     a8a:	2800      	cmp	r0, #0
     a8c:	d031      	beq.n	af2 <Set(String)+0x92>
        dacValue = NextArg(&command).toInt();
     a8e:	4621      	mov	r1, r4
     a90:	a807      	add	r0, sp, #28
     a92:	f7ff fb49 	bl	128 <NextArg(String*)>
     a96:	a807      	add	r0, sp, #28
     a98:	f002 f914 	bl	2cc4 <String::toInt() const>
     a9c:	4c39      	ldr	r4, [pc, #228]	; (b84 <Set(String)+0x124>)
     a9e:	4603      	mov	r3, r0
     aa0:	a807      	add	r0, sp, #28
     aa2:	8023      	strh	r3, [r4, #0]
     aa4:	f001 ff1a 	bl	28dc <String::~String()>
        dac.setVoltage(dacValue, false);
     aa8:	2200      	movs	r2, #0
     aaa:	4b37      	ldr	r3, [pc, #220]	; (b88 <Set(String)+0x128>)
     aac:	8821      	ldrh	r1, [r4, #0]
     aae:	4837      	ldr	r0, [pc, #220]	; (b8c <Set(String)+0x12c>)
     ab0:	f001 fd7e 	bl	25b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
	StringSumHelper(const char *p) : String(p) {}
     ab4:	4936      	ldr	r1, [pc, #216]	; (b90 <Set(String)+0x130>)
     ab6:	a807      	add	r0, sp, #28
     ab8:	f001 fec2 	bl	2840 <String::String(char const*)>
        Serial.println("DAC set to " + String(dacValue));
     abc:	220a      	movs	r2, #10
     abe:	8821      	ldrh	r1, [r4, #0]
        Serial.println("Linear Actuator set to " + String(pos));
     ac0:	a804      	add	r0, sp, #16
     ac2:	f001 ff47 	bl	2954 <String::String(int, unsigned char)>
     ac6:	a904      	add	r1, sp, #16
     ac8:	a807      	add	r0, sp, #28
     aca:	f002 f81d 	bl	2b08 <operator+(StringSumHelper const&, String const&)>
     ace:	4601      	mov	r1, r0
     ad0:	4830      	ldr	r0, [pc, #192]	; (b94 <Set(String)+0x134>)
     ad2:	f001 fdfb 	bl	26cc <Print::print(String const&)>
     ad6:	482f      	ldr	r0, [pc, #188]	; (b94 <Set(String)+0x134>)
     ad8:	f001 fe1e 	bl	2718 <Print::println()>
     adc:	a804      	add	r0, sp, #16
     ade:	f001 fefd 	bl	28dc <String::~String()>
class StringSumHelper : public String
     ae2:	a807      	add	r0, sp, #28
     ae4:	f001 fefa 	bl	28dc <String::~String()>
}
     ae8:	a801      	add	r0, sp, #4
     aea:	f001 fef7 	bl	28dc <String::~String()>
     aee:	b00b      	add	sp, #44	; 0x2c
     af0:	bd30      	pop	{r4, r5, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     af2:	4605      	mov	r5, r0
     af4:	4928      	ldr	r1, [pc, #160]	; (b98 <Set(String)+0x138>)
     af6:	a801      	add	r0, sp, #4
     af8:	f002 f80e 	bl	2b18 <String::equals(char const*) const>
    } else if (arg == "la") {
     afc:	b1b0      	cbz	r0, b2c <Set(String)+0xcc>
        int pos = NextArg(&command).toInt();
     afe:	4621      	mov	r1, r4
     b00:	a807      	add	r0, sp, #28
     b02:	f7ff fb11 	bl	128 <NextArg(String*)>
     b06:	a807      	add	r0, sp, #28
     b08:	f002 f8dc 	bl	2cc4 <String::toInt() const>
     b0c:	4604      	mov	r4, r0
     b0e:	a807      	add	r0, sp, #28
     b10:	f001 fee4 	bl	28dc <String::~String()>
        myServo.goalPosition(LA_ID_NUM, pos);
     b14:	4622      	mov	r2, r4
     b16:	4629      	mov	r1, r5
     b18:	4820      	ldr	r0, [pc, #128]	; (b9c <Set(String)+0x13c>)
     b1a:	f000 ff37 	bl	198c <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     b1e:	4920      	ldr	r1, [pc, #128]	; (ba0 <Set(String)+0x140>)
     b20:	a807      	add	r0, sp, #28
     b22:	f001 fe8d 	bl	2840 <String::String(char const*)>
        Serial.println("Linear Actuator set to " + String(pos));
     b26:	220a      	movs	r2, #10
     b28:	4621      	mov	r1, r4
     b2a:	e7c9      	b.n	ac0 <Set(String)+0x60>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b2c:	491d      	ldr	r1, [pc, #116]	; (ba4 <Set(String)+0x144>)
     b2e:	a801      	add	r0, sp, #4
     b30:	f001 fff2 	bl	2b18 <String::equals(char const*) const>
    } else if (arg == "res") {
     b34:	b188      	cbz	r0, b5a <Set(String)+0xfa>
        targetResistance = NextArg(&command).toFloat();
     b36:	4621      	mov	r1, r4
     b38:	a807      	add	r0, sp, #28
     b3a:	f7ff faf5 	bl	128 <NextArg(String*)>
     b3e:	a807      	add	r0, sp, #28
     b40:	f002 f8c6 	bl	2cd0 <String::toFloat() const>
     b44:	4b18      	ldr	r3, [pc, #96]	; (ba8 <Set(String)+0x148>)
     b46:	a807      	add	r0, sp, #28
     b48:	ed83 0a00 	vstr	s0, [r3]
     b4c:	f001 fec6 	bl	28dc <String::~String()>
}
     b50:	a801      	add	r0, sp, #4
     b52:	f001 fec3 	bl	28dc <String::~String()>
     b56:	b00b      	add	sp, #44	; 0x2c
     b58:	bd30      	pop	{r4, r5, pc}
     b5a:	211a      	movs	r1, #26
     b5c:	4813      	ldr	r0, [pc, #76]	; (bac <Set(String)+0x14c>)
     b5e:	f003 ff2f 	bl	49c0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b62:	480c      	ldr	r0, [pc, #48]	; (b94 <Set(String)+0x134>)
     b64:	f001 fdd8 	bl	2718 <Print::println()>
     b68:	210a      	movs	r1, #10
     b6a:	4811      	ldr	r0, [pc, #68]	; (bb0 <Set(String)+0x150>)
     b6c:	f003 ff28 	bl	49c0 <usb_serial_write>
     b70:	4808      	ldr	r0, [pc, #32]	; (b94 <Set(String)+0x134>)
     b72:	f001 fdd1 	bl	2718 <Print::println()>
     b76:	a801      	add	r0, sp, #4
     b78:	f001 feb0 	bl	28dc <String::~String()>
     b7c:	b00b      	add	sp, #44	; 0x2c
     b7e:	bd30      	pop	{r4, r5, pc}
     b80:	20000488 	.word	0x20000488
     b84:	20001dce 	.word	0x20001dce
     b88:	00061a80 	.word	0x00061a80
     b8c:	20002848 	.word	0x20002848
     b90:	2000048c 	.word	0x2000048c
     b94:	20001190 	.word	0x20001190
     b98:	20000498 	.word	0x20000498
     b9c:	20002880 	.word	0x20002880
     ba0:	2000049c 	.word	0x2000049c
     ba4:	200004b4 	.word	0x200004b4
     ba8:	20001db4 	.word	0x20001db4
     bac:	200004b8 	.word	0x200004b8
     bb0:	200004d4 	.word	0x200004d4

00000bb4 <Toggle(String)>:
void Toggle(String command) {
     bb4:	b500      	push	{lr}
     bb6:	b087      	sub	sp, #28
     bb8:	4601      	mov	r1, r0
    String arg = NextArg(&command).toLowerCase();
     bba:	a803      	add	r0, sp, #12
     bbc:	f7ff fab4 	bl	128 <NextArg(String*)>
     bc0:	a803      	add	r0, sp, #12
     bc2:	f002 f843 	bl	2c4c <String::toLowerCase()>
     bc6:	4601      	mov	r1, r0
     bc8:	4668      	mov	r0, sp
     bca:	f001 fe57 	bl	287c <String::String(String const&)>
     bce:	a803      	add	r0, sp, #12
     bd0:	f001 fe84 	bl	28dc <String::~String()>
     bd4:	4923      	ldr	r1, [pc, #140]	; (c64 <Toggle(String)+0xb0>)
     bd6:	4668      	mov	r0, sp
     bd8:	f001 ff9e 	bl	2b18 <String::equals(char const*) const>
    if (arg == "pcc") {
     bdc:	b1b0      	cbz	r0, c0c <Toggle(String)+0x58>
        digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     bde:	2021      	movs	r0, #33	; 0x21
     be0:	f002 faa0 	bl	3124 <digitalRead>
     be4:	4601      	mov	r1, r0
     be6:	2021      	movs	r0, #33	; 0x21
     be8:	fab1 f181 	clz	r1, r1
     bec:	0949      	lsrs	r1, r1, #5
     bee:	f002 fa6f 	bl	30d0 <digitalWrite>
     bf2:	2104      	movs	r1, #4
     bf4:	481c      	ldr	r0, [pc, #112]	; (c68 <Toggle(String)+0xb4>)
     bf6:	f003 fee3 	bl	49c0 <usb_serial_write>
     bfa:	481c      	ldr	r0, [pc, #112]	; (c6c <Toggle(String)+0xb8>)
     bfc:	f001 fd8c 	bl	2718 <Print::println()>
}
     c00:	4668      	mov	r0, sp
     c02:	f001 fe6b 	bl	28dc <String::~String()>
     c06:	b007      	add	sp, #28
     c08:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if (arg = "res") {
     c0c:	4918      	ldr	r1, [pc, #96]	; (c70 <Toggle(String)+0xbc>)
     c0e:	4668      	mov	r0, sp
     c10:	f001 ff06 	bl	2a20 <String::operator=(char const*)>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     c14:	6803      	ldr	r3, [r0, #0]
     c16:	b153      	cbz	r3, c2e <Toggle(String)+0x7a>
        trackResistance = !trackResistance;
     c18:	4a16      	ldr	r2, [pc, #88]	; (c74 <Toggle(String)+0xc0>)
}
     c1a:	4668      	mov	r0, sp
        trackResistance = !trackResistance;
     c1c:	7813      	ldrb	r3, [r2, #0]
     c1e:	f083 0301 	eor.w	r3, r3, #1
     c22:	7013      	strb	r3, [r2, #0]
}
     c24:	f001 fe5a 	bl	28dc <String::~String()>
     c28:	b007      	add	sp, #28
     c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if (arg = "print") {
     c2e:	4912      	ldr	r1, [pc, #72]	; (c78 <Toggle(String)+0xc4>)
     c30:	4668      	mov	r0, sp
     c32:	f001 fef5 	bl	2a20 <String::operator=(char const*)>
     c36:	6803      	ldr	r3, [r0, #0]
     c38:	b12b      	cbz	r3, c46 <Toggle(String)+0x92>
        printOutput = !printOutput;
     c3a:	4a10      	ldr	r2, [pc, #64]	; (c7c <Toggle(String)+0xc8>)
     c3c:	7813      	ldrb	r3, [r2, #0]
     c3e:	f083 0301 	eor.w	r3, r3, #1
     c42:	7013      	strb	r3, [r2, #0]
     c44:	e7dc      	b.n	c00 <Toggle(String)+0x4c>
     c46:	211d      	movs	r1, #29
     c48:	480d      	ldr	r0, [pc, #52]	; (c80 <Toggle(String)+0xcc>)
     c4a:	f003 feb9 	bl	49c0 <usb_serial_write>
     c4e:	4807      	ldr	r0, [pc, #28]	; (c6c <Toggle(String)+0xb8>)
     c50:	f001 fd62 	bl	2718 <Print::println()>
     c54:	210a      	movs	r1, #10
     c56:	480b      	ldr	r0, [pc, #44]	; (c84 <Toggle(String)+0xd0>)
     c58:	f003 feb2 	bl	49c0 <usb_serial_write>
     c5c:	4803      	ldr	r0, [pc, #12]	; (c6c <Toggle(String)+0xb8>)
     c5e:	f001 fd5b 	bl	2718 <Print::println()>
     c62:	e7cd      	b.n	c00 <Toggle(String)+0x4c>
     c64:	200005c8 	.word	0x200005c8
     c68:	200003ac 	.word	0x200003ac
     c6c:	20001190 	.word	0x20001190
     c70:	200004b4 	.word	0x200004b4
     c74:	20003366 	.word	0x20003366
     c78:	200005ec 	.word	0x200005ec
     c7c:	20001dd0 	.word	0x20001dd0
     c80:	200005cc 	.word	0x200005cc
     c84:	200004d4 	.word	0x200004d4

00000c88 <ProcessCommand(String)>:
void ProcessCommand (String serialInput) {
     c88:	b510      	push	{r4, lr}
     c8a:	b086      	sub	sp, #24
     c8c:	4601      	mov	r1, r0
    String command = NextArg(&serialInput);
     c8e:	4668      	mov	r0, sp
     c90:	f7ff fa4a 	bl	128 <NextArg(String*)>
    switch (MatchCommand(command)) {
     c94:	4669      	mov	r1, sp
     c96:	a803      	add	r0, sp, #12
     c98:	f001 fdf0 	bl	287c <String::String(String const&)>
     c9c:	a803      	add	r0, sp, #12
     c9e:	f7ff fa75 	bl	18c <MatchCommand(String)>
     ca2:	4604      	mov	r4, r0
     ca4:	a803      	add	r0, sp, #12
     ca6:	f001 fe19 	bl	28dc <String::~String()>
     caa:	2c03      	cmp	r4, #3
     cac:	d83f      	bhi.n	d2e <ProcessCommand(String)+0xa6>
     cae:	e8df f004 	tbb	[pc, r4]
     cb2:	2032      	.short	0x2032
     cb4:	0211      	.short	0x0211
            Toggle(command);
     cb6:	4669      	mov	r1, sp
     cb8:	a803      	add	r0, sp, #12
     cba:	f001 fddf 	bl	287c <String::String(String const&)>
     cbe:	a803      	add	r0, sp, #12
     cc0:	f7ff ff78 	bl	bb4 <Toggle(String)>
     cc4:	a803      	add	r0, sp, #12
     cc6:	f001 fe09 	bl	28dc <String::~String()>
}
     cca:	4668      	mov	r0, sp
     ccc:	f001 fe06 	bl	28dc <String::~String()>
     cd0:	b006      	add	sp, #24
     cd2:	bd10      	pop	{r4, pc}
            Set(command);
     cd4:	4669      	mov	r1, sp
     cd6:	a803      	add	r0, sp, #12
     cd8:	f001 fdd0 	bl	287c <String::String(String const&)>
     cdc:	a803      	add	r0, sp, #12
     cde:	f7ff febf 	bl	a60 <Set(String)>
     ce2:	a803      	add	r0, sp, #12
     ce4:	f001 fdfa 	bl	28dc <String::~String()>
}
     ce8:	4668      	mov	r0, sp
     cea:	f001 fdf7 	bl	28dc <String::~String()>
     cee:	b006      	add	sp, #24
     cf0:	bd10      	pop	{r4, pc}
            Serial.println(Help());
     cf2:	a803      	add	r0, sp, #12
     cf4:	f7ff fa6c 	bl	1d0 <Help()>
	size_t println(const String &s)			{ return print(s) + println(); }
     cf8:	a903      	add	r1, sp, #12
     cfa:	4811      	ldr	r0, [pc, #68]	; (d40 <ProcessCommand(String)+0xb8>)
     cfc:	f001 fce6 	bl	26cc <Print::print(String const&)>
     d00:	480f      	ldr	r0, [pc, #60]	; (d40 <ProcessCommand(String)+0xb8>)
     d02:	f001 fd09 	bl	2718 <Print::println()>
     d06:	a803      	add	r0, sp, #12
     d08:	f001 fde8 	bl	28dc <String::~String()>
}
     d0c:	4668      	mov	r0, sp
     d0e:	f001 fde5 	bl	28dc <String::~String()>
     d12:	b006      	add	sp, #24
     d14:	bd10      	pop	{r4, pc}
     d16:	211b      	movs	r1, #27
     d18:	480a      	ldr	r0, [pc, #40]	; (d44 <ProcessCommand(String)+0xbc>)
     d1a:	f003 fe51 	bl	49c0 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     d1e:	4808      	ldr	r0, [pc, #32]	; (d40 <ProcessCommand(String)+0xb8>)
     d20:	f001 fcfa 	bl	2718 <Print::println()>
     d24:	4668      	mov	r0, sp
     d26:	f001 fdd9 	bl	28dc <String::~String()>
     d2a:	b006      	add	sp, #24
     d2c:	bd10      	pop	{r4, pc}
     d2e:	2117      	movs	r1, #23
     d30:	4805      	ldr	r0, [pc, #20]	; (d48 <ProcessCommand(String)+0xc0>)
     d32:	f003 fe45 	bl	49c0 <usb_serial_write>
     d36:	4802      	ldr	r0, [pc, #8]	; (d40 <ProcessCommand(String)+0xb8>)
     d38:	f001 fcee 	bl	2718 <Print::println()>
     d3c:	e7c5      	b.n	cca <ProcessCommand(String)+0x42>
     d3e:	bf00      	nop
     d40:	20001190 	.word	0x20001190
     d44:	20000454 	.word	0x20000454
     d48:	20000470 	.word	0x20000470

00000d4c <loop>:
void loop () {
     d4c:	b510      	push	{r4, lr}
     d4e:	ed2d 8b02 	vpush	{d8}
     d52:	b086      	sub	sp, #24
        virtual int available() { return usb_serial_available(); }
     d54:	f003 fdca 	bl	48ec <usb_serial_available>
    if (Serial.available() > 0) {
     d58:	2800      	cmp	r0, #0
     d5a:	dd14      	ble.n	d86 <loop+0x3a>
        String serialInput = Serial.readStringUntil('\n');
     d5c:	2300      	movs	r3, #0
     d5e:	220a      	movs	r2, #10
     d60:	4939      	ldr	r1, [pc, #228]	; (e48 <loop+0xfc>)
     d62:	4668      	mov	r0, sp
     d64:	f001 fd30 	bl	27c8 <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     d68:	4669      	mov	r1, sp
     d6a:	a803      	add	r0, sp, #12
     d6c:	f001 fd86 	bl	287c <String::String(String const&)>
     d70:	a803      	add	r0, sp, #12
     d72:	f7ff ff89 	bl	c88 <ProcessCommand(String)>
     d76:	a803      	add	r0, sp, #12
     d78:	f001 fdb0 	bl	28dc <String::~String()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     d7c:	f003 fe54 	bl	4a28 <usb_serial_flush_output>
    }
     d80:	4668      	mov	r0, sp
     d82:	f001 fdab 	bl	28dc <String::~String()>
     d86:	4c31      	ldr	r4, [pc, #196]	; (e4c <loop+0x100>)
    if (printTimer < millis() && printOutput) {
     d88:	4b31      	ldr	r3, [pc, #196]	; (e50 <loop+0x104>)
     d8a:	6821      	ldr	r1, [r4, #0]
     d8c:	681a      	ldr	r2, [r3, #0]
     d8e:	428a      	cmp	r2, r1
     d90:	d203      	bcs.n	d9a <loop+0x4e>
     d92:	4930      	ldr	r1, [pc, #192]	; (e54 <loop+0x108>)
     d94:	7809      	ldrb	r1, [r1, #0]
     d96:	2900      	cmp	r1, #0
     d98:	d148      	bne.n	e2c <loop+0xe0>
    if (digitalRead(Safety_Switch_Pin) == HIGH) {
     d9a:	200b      	movs	r0, #11
     d9c:	f002 f9c2 	bl	3124 <digitalRead>
     da0:	2801      	cmp	r0, #1
     da2:	d00b      	beq.n	dbc <loop+0x70>
    if (resistanceTracingTimer < millis() && trackResistance) {
     da4:	4b2c      	ldr	r3, [pc, #176]	; (e58 <loop+0x10c>)
     da6:	6821      	ldr	r1, [r4, #0]
     da8:	681a      	ldr	r2, [r3, #0]
     daa:	428a      	cmp	r2, r1
     dac:	d202      	bcs.n	db4 <loop+0x68>
     dae:	492b      	ldr	r1, [pc, #172]	; (e5c <loop+0x110>)
     db0:	7809      	ldrb	r1, [r1, #0]
     db2:	b991      	cbnz	r1, dda <loop+0x8e>
}
     db4:	b006      	add	sp, #24
     db6:	ecbd 8b02 	vpop	{d8}
     dba:	bd10      	pop	{r4, pc}
        myServo.goalPosition(LA_ID_NUM, 0);
     dbc:	2200      	movs	r2, #0
     dbe:	4828      	ldr	r0, [pc, #160]	; (e60 <loop+0x114>)
     dc0:	4611      	mov	r1, r2
     dc2:	f000 fde3 	bl	198c <PA12::goalPosition(int, int)>
        dacValue = 4095;
     dc6:	f640 71ff 	movw	r1, #4095	; 0xfff
     dca:	4826      	ldr	r0, [pc, #152]	; (e64 <loop+0x118>)
        dac.setVoltage(dacValue, false);
     dcc:	2200      	movs	r2, #0
     dce:	4b26      	ldr	r3, [pc, #152]	; (e68 <loop+0x11c>)
        dacValue = 4095;
     dd0:	8001      	strh	r1, [r0, #0]
        dac.setVoltage(dacValue, false);
     dd2:	4826      	ldr	r0, [pc, #152]	; (e6c <loop+0x120>)
     dd4:	f001 fbec 	bl	25b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
     dd8:	e7e4      	b.n	da4 <loop+0x58>
        resistanceTracingTimer += resistanceTrackingInterval;
     dda:	4925      	ldr	r1, [pc, #148]	; (e70 <loop+0x124>)
        float voltage = ina260.readBusVoltage();
     ddc:	4825      	ldr	r0, [pc, #148]	; (e74 <loop+0x128>)
        resistanceTracingTimer += resistanceTrackingInterval;
     dde:	6809      	ldr	r1, [r1, #0]
     de0:	440a      	add	r2, r1
     de2:	601a      	str	r2, [r3, #0]
        float voltage = ina260.readBusVoltage();
     de4:	f000 ff12 	bl	1c0c <Adafruit_INA260::readBusVoltage()>
     de8:	eeb0 8a40 	vmov.f32	s16, s0
        float current = ina260.readCurrent();
     dec:	4821      	ldr	r0, [pc, #132]	; (e74 <loop+0x128>)
     dee:	f000 fef1 	bl	1bd4 <Adafruit_INA260::readCurrent()>
        float difference = resistance - targetResistance;
     df2:	4b21      	ldr	r3, [pc, #132]	; (e78 <loop+0x12c>)
        float resistance = voltage / current;
     df4:	eec8 7a00 	vdiv.f32	s15, s16, s0
        float difference = resistance - targetResistance;
     df8:	ed93 7a00 	vldr	s14, [r3]
     dfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (difference > 0) {
     e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e08:	dd17      	ble.n	e3a <loop+0xee>
            dacValue += dacStepSize;
     e0a:	4b1c      	ldr	r3, [pc, #112]	; (e7c <loop+0x130>)
     e0c:	4815      	ldr	r0, [pc, #84]	; (e64 <loop+0x118>)
     e0e:	6819      	ldr	r1, [r3, #0]
     e10:	8803      	ldrh	r3, [r0, #0]
     e12:	4419      	add	r1, r3
     e14:	b289      	uxth	r1, r1
     e16:	8001      	strh	r1, [r0, #0]
        dac.setVoltage(dacValue, false);
     e18:	2200      	movs	r2, #0
     e1a:	4b13      	ldr	r3, [pc, #76]	; (e68 <loop+0x11c>)
     e1c:	4813      	ldr	r0, [pc, #76]	; (e6c <loop+0x120>)
}
     e1e:	b006      	add	sp, #24
     e20:	ecbd 8b02 	vpop	{d8}
     e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dac.setVoltage(dacValue, false);
     e28:	f001 bbc2 	b.w	25b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
        printTimer += printTimerInterval;
     e2c:	4914      	ldr	r1, [pc, #80]	; (e80 <loop+0x134>)
     e2e:	6809      	ldr	r1, [r1, #0]
     e30:	440a      	add	r2, r1
     e32:	601a      	str	r2, [r3, #0]
        PrintOutput();
     e34:	f7ff fc0a 	bl	64c <PrintOutput()>
     e38:	e7af      	b.n	d9a <loop+0x4e>
            dacValue -= dacStepSize;
     e3a:	480a      	ldr	r0, [pc, #40]	; (e64 <loop+0x118>)
     e3c:	4b0f      	ldr	r3, [pc, #60]	; (e7c <loop+0x130>)
     e3e:	8801      	ldrh	r1, [r0, #0]
     e40:	681b      	ldr	r3, [r3, #0]
     e42:	1ac9      	subs	r1, r1, r3
     e44:	b289      	uxth	r1, r1
     e46:	e7e6      	b.n	e16 <loop+0xca>
     e48:	20001190 	.word	0x20001190
     e4c:	2000333c 	.word	0x2000333c
     e50:	200032e0 	.word	0x200032e0
     e54:	20001dd0 	.word	0x20001dd0
     e58:	200032ec 	.word	0x200032ec
     e5c:	20003366 	.word	0x20003366
     e60:	20002880 	.word	0x20002880
     e64:	20001dce 	.word	0x20001dce
     e68:	00061a80 	.word	0x00061a80
     e6c:	20002848 	.word	0x20002848
     e70:	20001db0 	.word	0x20001db0
     e74:	20002870 	.word	0x20002870
     e78:	20001db4 	.word	0x20001db4
     e7c:	20001b58 	.word	0x20001b58
     e80:	20001dac 	.word	0x20001dac

00000e84 <_GLOBAL__sub_I_myServo>:
     e84:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     e86:	4c0c      	ldr	r4, [pc, #48]	; (eb8 <_GLOBAL__sub_I_myServo+0x34>)
     e88:	2301      	movs	r3, #1
     e8a:	2210      	movs	r2, #16
     e8c:	490b      	ldr	r1, [pc, #44]	; (ebc <_GLOBAL__sub_I_myServo+0x38>)
     e8e:	4620      	mov	r0, r4
     e90:	f000 fb04 	bl	149c <PA12::PA12(HardwareSerial*, int, bool)>
     e94:	4a0a      	ldr	r2, [pc, #40]	; (ec0 <_GLOBAL__sub_I_myServo+0x3c>)
     e96:	490b      	ldr	r1, [pc, #44]	; (ec4 <_GLOBAL__sub_I_myServo+0x40>)
     e98:	4620      	mov	r0, r4
     e9a:	f004 fb21 	bl	54e0 <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     e9e:	480a      	ldr	r0, [pc, #40]	; (ec8 <_GLOBAL__sub_I_myServo+0x44>)
     ea0:	f000 fe1c 	bl	1adc <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     ea4:	4809      	ldr	r0, [pc, #36]	; (ecc <_GLOBAL__sub_I_myServo+0x48>)
     ea6:	f001 fb63 	bl	2570 <Adafruit_MCP4725::Adafruit_MCP4725()>
struct Filter* rpm_filter = CreateFilter(10, 14);
     eaa:	210e      	movs	r1, #14
     eac:	200a      	movs	r0, #10
     eae:	f7ff fa1d 	bl	2ec <CreateFilter(unsigned int, int)>
     eb2:	4b07      	ldr	r3, [pc, #28]	; (ed0 <_GLOBAL__sub_I_myServo+0x4c>)
     eb4:	6018      	str	r0, [r3, #0]
     eb6:	bd10      	pop	{r4, pc}
     eb8:	20002880 	.word	0x20002880
     ebc:	200011a0 	.word	0x200011a0
     ec0:	200015c8 	.word	0x200015c8
     ec4:	00001479 	.word	0x00001479
     ec8:	20002870 	.word	0x20002870
     ecc:	20002848 	.word	0x20002848
     ed0:	200032f0 	.word	0x200032f0

00000ed4 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     ed4:	2000      	movs	r0, #0
     ed6:	4770      	bx	lr

00000ed8 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     ed8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     edc:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     ee0:	1a10      	subs	r0, r2, r0
     ee2:	4770      	bx	lr

00000ee4 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     ee4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     ee8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     eec:	429a      	cmp	r2, r3
     eee:	d905      	bls.n	efc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     ef0:	1c5a      	adds	r2, r3, #1
     ef2:	4403      	add	r3, r0
     ef4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     ef8:	7e98      	ldrb	r0, [r3, #26]
     efa:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     efc:	f04f 30ff 	mov.w	r0, #4294967295
	}
     f00:	4770      	bx	lr
     f02:	bf00      	nop

00000f04 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     f04:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     f08:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     f0c:	429a      	cmp	r2, r3
     f0e:	d902      	bls.n	f16 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     f10:	4418      	add	r0, r3
     f12:	7e80      	ldrb	r0, [r0, #26]
     f14:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     f16:	f04f 30ff 	mov.w	r0, #4294967295
	}
     f1a:	4770      	bx	lr

00000f1c <TwoWire::flush()>:
	virtual void flush(void) {
	}
     f1c:	4770      	bx	lr
     f1e:	bf00      	nop

00000f20 <TwoWire::write(unsigned char)>:
{
     f20:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     f22:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     f26:	b178      	cbz	r0, f48 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     f28:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     f2c:	2a88      	cmp	r2, #136	; 0x88
     f2e:	d903      	bls.n	f38 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     f30:	2201      	movs	r2, #1
			return 0;
     f32:	2000      	movs	r0, #0
     f34:	605a      	str	r2, [r3, #4]
     f36:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     f38:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     f3c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     f3e:	441a      	add	r2, r3
     f40:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     f44:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     f48:	4770      	bx	lr
     f4a:	bf00      	nop

00000f4c <TwoWire::write(unsigned char const*, unsigned int)>:
{
     f4c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     f4e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     f52:	b90c      	cbnz	r4, f58 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     f54:	4620      	mov	r0, r4
     f56:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     f58:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     f5c:	4605      	mov	r5, r0
     f5e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     f62:	42a2      	cmp	r2, r4
     f64:	d80d      	bhi.n	f82 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     f66:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     f68:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     f6c:	4622      	mov	r2, r4
     f6e:	4418      	add	r0, r3
     f70:	f002 f9ae 	bl	32d0 <memcpy>
		txBufferLength += quantity;
     f74:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     f78:	4620      	mov	r0, r4
		txBufferLength += quantity;
     f7a:	4423      	add	r3, r4
     f7c:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     f80:	bd38      	pop	{r3, r4, r5, pc}
     f82:	2201      	movs	r2, #1
     f84:	6042      	str	r2, [r0, #4]
     f86:	e7ef      	b.n	f68 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00000f88 <TwoWire::force_clock()>:
{
     f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     f8c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     f90:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     f92:	7e01      	ldrb	r1, [r0, #24]
{
     f94:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     f96:	7e43      	ldrb	r3, [r0, #25]
{
     f98:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     f9a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     f9e:	4a38      	ldr	r2, [pc, #224]	; (1080 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     fa0:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     fa4:	4f37      	ldr	r7, [pc, #220]	; (1084 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     fa6:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     fac:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     fb0:	0109      	lsls	r1, r1, #4
     fb2:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     fb4:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     fb8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     fbc:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     fc0:	011b      	lsls	r3, r3, #4
     fc2:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     fc4:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     fc6:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     fca:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     fd2:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     fd4:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     fd6:	492c      	ldr	r1, [pc, #176]	; (1088 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     fd8:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     fda:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     fde:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     fe0:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     fe4:	686b      	ldr	r3, [r5, #4]
     fe6:	4333      	orrs	r3, r6
     fe8:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     fea:	4b28      	ldr	r3, [pc, #160]	; (108c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     fec:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     fee:	683a      	ldr	r2, [r7, #0]
     ff0:	fba3 3202 	umull	r3, r2, r3, r2
     ff4:	0c92      	lsrs	r2, r2, #18
     ff6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     ffa:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     ffc:	684b      	ldr	r3, [r1, #4]
     ffe:	1b1b      	subs	r3, r3, r4
    1000:	429a      	cmp	r2, r3
    1002:	d8fb      	bhi.n	ffc <TwoWire::force_clock()+0x74>
    1004:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    1008:	4a1f      	ldr	r2, [pc, #124]	; (1088 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    100a:	f8df e080 	ldr.w	lr, [pc, #128]	; 108c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    100e:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    1012:	4203      	tst	r3, r0
    1014:	d002      	beq.n	101c <TwoWire::force_clock()+0x94>
    1016:	68ab      	ldr	r3, [r5, #8]
    1018:	4233      	tst	r3, r6
    101a:	d12f      	bne.n	107c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    101c:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    1020:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1022:	6839      	ldr	r1, [r7, #0]
    1024:	fbae 3101 	umull	r3, r1, lr, r1
    1028:	0c89      	lsrs	r1, r1, #18
    102a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    102e:	6853      	ldr	r3, [r2, #4]
    1030:	1b1b      	subs	r3, r3, r4
    1032:	4299      	cmp	r1, r3
    1034:	d8fb      	bhi.n	102e <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    1036:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    103a:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    103c:	6839      	ldr	r1, [r7, #0]
    103e:	fbae 3101 	umull	r3, r1, lr, r1
    1042:	0c89      	lsrs	r1, r1, #18
    1044:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1048:	6853      	ldr	r3, [r2, #4]
    104a:	1b1b      	subs	r3, r3, r4
    104c:	4299      	cmp	r1, r3
    104e:	d8fb      	bhi.n	1048 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    1050:	f1bc 0c01 	subs.w	ip, ip, #1
    1054:	d1db      	bne.n	100e <TwoWire::force_clock()+0x86>
	bool ret = false;
    1056:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1058:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    105c:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    105e:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    1062:	68db      	ldr	r3, [r3, #12]
    1064:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1068:	f899 3019 	ldrb.w	r3, [r9, #25]
    106c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    1070:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    1074:	6013      	str	r3, [r2, #0]
}
    1076:	b003      	add	sp, #12
    1078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    107c:	2001      	movs	r0, #1
    107e:	e7eb      	b.n	1058 <TwoWire::force_clock()+0xd0>
    1080:	20000af4 	.word	0x20000af4
    1084:	2000118c 	.word	0x2000118c
    1088:	e0001000 	.word	0xe0001000
    108c:	431bde83 	.word	0x431bde83

00001090 <TwoWire::wait_idle()>:
	return systick_millis_count;
    1090:	4a0e      	ldr	r2, [pc, #56]	; (10cc <TwoWire::wait_idle()+0x3c>)
{
    1092:	b510      	push	{r4, lr}
    1094:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1096:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1098:	e005      	b.n	10a6 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    109a:	01db      	lsls	r3, r3, #7
    109c:	d407      	bmi.n	10ae <TwoWire::wait_idle()+0x1e>
    109e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    10a0:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    10a2:	2b10      	cmp	r3, #16
    10a4:	d808      	bhi.n	10b8 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    10a6:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    10a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    10ac:	d1f5      	bne.n	109a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    10ae:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    10b2:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    10b4:	6163      	str	r3, [r4, #20]
}
    10b6:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    10b8:	f7ff ff66 	bl	f88 <TwoWire::force_clock()>
    10bc:	2800      	cmp	r0, #0
    10be:	d0fa      	beq.n	10b6 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    10c0:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    10c4:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    10c6:	6163      	str	r3, [r4, #20]
	return true;
    10c8:	e7f5      	b.n	10b6 <TwoWire::wait_idle()+0x26>
    10ca:	bf00      	nop
    10cc:	2000333c 	.word	0x2000333c

000010d0 <TwoWire::endTransmission(unsigned char)>:
{
    10d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    10d4:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    10d8:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    10da:	f1ba 0f00 	cmp.w	sl, #0
    10de:	d04f      	beq.n	1180 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    10e0:	4681      	mov	r9, r0
    10e2:	4688      	mov	r8, r1
    10e4:	f7ff ffd4 	bl	1090 <TwoWire::wait_idle()>
    10e8:	2800      	cmp	r0, #0
    10ea:	d049      	beq.n	1180 <TwoWire::endTransmission(unsigned char)+0xb0>
    10ec:	4e37      	ldr	r6, [pc, #220]	; (11cc <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    10ee:	2400      	movs	r4, #0
    10f0:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    10f2:	e018      	b.n	1126 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    10f4:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    10f6:	0519      	lsls	r1, r3, #20
    10f8:	d451      	bmi.n	119e <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    10fa:	04da      	lsls	r2, r3, #19
    10fc:	d455      	bmi.n	11aa <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    10fe:	0558      	lsls	r0, r3, #21
    1100:	d459      	bmi.n	11b6 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    1102:	0499      	lsls	r1, r3, #18
    1104:	d441      	bmi.n	118a <TwoWire::endTransmission(unsigned char)+0xba>
    1106:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    1108:	1bd2      	subs	r2, r2, r7
    110a:	2a32      	cmp	r2, #50	; 0x32
    110c:	d83d      	bhi.n	118a <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    110e:	4554      	cmp	r4, sl
    1110:	d907      	bls.n	1122 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1112:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1114:	0752      	lsls	r2, r2, #29
    1116:	d104      	bne.n	1122 <TwoWire::endTransmission(unsigned char)+0x52>
    1118:	059b      	lsls	r3, r3, #22
    111a:	d455      	bmi.n	11c8 <TwoWire::endTransmission(unsigned char)+0xf8>
    111c:	f1b8 0f00 	cmp.w	r8, #0
    1120:	d052      	beq.n	11c8 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    1122:	f003 fccb 	bl	4abc <yield>
		if (tx_index <= tx_len) {
    1126:	4554      	cmp	r4, sl
    1128:	d8e4      	bhi.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    112a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    112c:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    112e:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    1132:	d4df      	bmi.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
    1134:	e013      	b.n	115e <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1136:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    113a:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    113c:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    113e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    1142:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1144:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    1146:	d01e      	beq.n	1186 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    1148:	458a      	cmp	sl, r1
				fifo_used++;
    114a:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    114e:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1152:	d90e      	bls.n	1172 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1154:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    1158:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    115a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    115c:	d0ca      	beq.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    115e:	2101      	movs	r1, #1
				if (tx_index == 0) {
    1160:	2c00      	cmp	r4, #0
    1162:	d0e8      	beq.n	1136 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1164:	4621      	mov	r1, r4
				fifo_used++;
    1166:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1168:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    116a:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    116c:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1170:	d8f0      	bhi.n	1154 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1172:	f1b8 0f00 	cmp.w	r8, #0
    1176:	d0bd      	beq.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
    1178:	f44f 7300 	mov.w	r3, #512	; 0x200
    117c:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    117e:	e7b9      	b.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    1180:	2004      	movs	r0, #4
}
    1182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    1186:	2401      	movs	r4, #1
    1188:	e7b4      	b.n	10f4 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    118a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    118c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    1190:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1192:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1196:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1198:	662a      	str	r2, [r5, #96]	; 0x60
}
    119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    119e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    11a0:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    11a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    11a6:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    11a8:	e7eb      	b.n	1182 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    11aa:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    11ac:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    11ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    11b2:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    11b4:	e7e5      	b.n	1182 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    11b6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    11b8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    11bc:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    11be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    11c2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    11c4:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    11c6:	e7dc      	b.n	1182 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    11c8:	2000      	movs	r0, #0
    11ca:	e7da      	b.n	1182 <TwoWire::endTransmission(unsigned char)+0xb2>
    11cc:	2000333c 	.word	0x2000333c

000011d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    11d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11d4:	4683      	mov	fp, r0
    11d6:	460c      	mov	r4, r1
    11d8:	4615      	mov	r5, r2
    11da:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    11dc:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    11e0:	f7ff ff56 	bl	1090 <TwoWire::wait_idle()>
    11e4:	2800      	cmp	r0, #0
    11e6:	f000 809e 	beq.w	1326 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    11ea:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    11ec:	2d01      	cmp	r5, #1
    11ee:	f8df 813c 	ldr.w	r8, [pc, #316]	; 132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    11f2:	f240 4601 	movw	r6, #1025	; 0x401
    11f6:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    11f8:	f04f 0100 	mov.w	r1, #0
    11fc:	bf38      	it	cc
    11fe:	2501      	movcc	r5, #1
    1200:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    1204:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1206:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    1208:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    120c:	e020      	b.n	1250 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    120e:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    1212:	2b87      	cmp	r3, #135	; 0x87
    1214:	d93f      	bls.n	1296 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1216:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    121a:	0510      	lsls	r0, r2, #20
    121c:	d45a      	bmi.n	12d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    121e:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    1222:	d170      	bne.n	1306 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    1224:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    1228:	eba3 0309 	sub.w	r3, r3, r9
    122c:	2b32      	cmp	r3, #50	; 0x32
    122e:	d86a      	bhi.n	1306 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    1230:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    1234:	42ab      	cmp	r3, r5
    1236:	d309      	bcc.n	124c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    1238:	2c02      	cmp	r4, #2
    123a:	d907      	bls.n	124c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    123c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1240:	0759      	lsls	r1, r3, #29
    1242:	d103      	bne.n	124c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    1244:	0593      	lsls	r3, r2, #22
    1246:	d44b      	bmi.n	12e0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    1248:	2f00      	cmp	r7, #0
    124a:	d049      	beq.n	12e0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    124c:	f003 fc36 	bl	4abc <yield>
		if (tx_state < 3) {
    1250:	2c02      	cmp	r4, #2
    1252:	d8dc      	bhi.n	120e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1254:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    1258:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    125c:	075b      	lsls	r3, r3, #29
    125e:	d4d6      	bmi.n	120e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    1260:	1e68      	subs	r0, r5, #1
    1262:	4422      	add	r2, r4
    1264:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    1268:	b94c      	cbnz	r4, 127e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    126a:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    126e:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    1270:	1b13      	subs	r3, r2, r4
    1272:	2b03      	cmp	r3, #3
    1274:	d8cb      	bhi.n	120e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    1276:	2c02      	cmp	r4, #2
    1278:	d8c9      	bhi.n	120e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    127a:	2c00      	cmp	r4, #0
    127c:	d0f5      	beq.n	126a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    127e:	2c01      	cmp	r4, #1
    1280:	d037      	beq.n	12f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1282:	b11f      	cbz	r7, 128c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    1284:	f44f 7300 	mov.w	r3, #512	; 0x200
    1288:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    128c:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    1290:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    1292:	2b87      	cmp	r3, #135	; 0x87
    1294:	d8bf      	bhi.n	1216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1296:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    129a:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    129e:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    12a2:	d0b8      	beq.n	1216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    12a4:	1c59      	adds	r1, r3, #1
    12a6:	449c      	add	ip, r3
    12a8:	3319      	adds	r3, #25
    12aa:	b2c9      	uxtb	r1, r1
    12ac:	fa5f fc8c 	uxtb.w	ip, ip
    12b0:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    12b4:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    12b8:	1c4a      	adds	r2, r1, #1
    12ba:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    12bc:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    12c0:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    12c2:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    12c6:	d0a6      	beq.n	1216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    12c8:	2989      	cmp	r1, #137	; 0x89
    12ca:	d1f3      	bne.n	12b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    12cc:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    12d0:	0510      	lsls	r0, r2, #20
    12d2:	d5a4      	bpl.n	121e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12d4:	f8da 3010 	ldr.w	r3, [sl, #16]
    12d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12dc:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    12e0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    12e4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    12e8:	d106      	bne.n	12f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    12ea:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    12ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    12f2:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    12f6:	e7ba      	b.n	126e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    12f8:	f8da 3010 	ldr.w	r3, [sl, #16]
    12fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1300:	f8ca 3010 	str.w	r3, [sl, #16]
    1304:	e7f1      	b.n	12ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1306:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    130a:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    130e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    1312:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1316:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    131a:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    131e:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    1322:	d0e2      	beq.n	12ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    1324:	e7e8      	b.n	12f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    1326:	2004      	movs	r0, #4
}
    1328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    132c:	2000333c 	.word	0x2000333c

00001330 <TwoWire::isr()>:
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1332:	6906      	ldr	r6, [r0, #16]
{
    1334:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    1336:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    133a:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    133e:	d001      	beq.n	1344 <TwoWire::isr()+0x14>
    1340:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1344:	07a8      	lsls	r0, r5, #30
    1346:	d50b      	bpl.n	1360 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    1348:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    134c:	0411      	lsls	r1, r2, #16
    134e:	d53d      	bpl.n	13cc <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    1350:	2300      	movs	r3, #0
    1352:	2101      	movs	r1, #1
    1354:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    1358:	4423      	add	r3, r4
    135a:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    135e:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1360:	07ea      	lsls	r2, r5, #31
    1362:	d510      	bpl.n	1386 <TwoWire::isr()+0x56>
		if (!transmitting) {
    1364:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    1368:	b1f7      	cbz	r7, 13a8 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    136a:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    136e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    1372:	42bb      	cmp	r3, r7
    1374:	d926      	bls.n	13c4 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    1376:	1c7b      	adds	r3, r7, #1
    1378:	4427      	add	r7, r4
    137a:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    137e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    1382:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    1386:	05ab      	lsls	r3, r5, #22
    1388:	d50d      	bpl.n	13a6 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    138a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    138e:	b118      	cbz	r0, 1398 <TwoWire::isr()+0x68>
    1390:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    1394:	b103      	cbz	r3, 1398 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    1396:	4798      	blx	r3
		rxBufferIndex = 0;
    1398:	2300      	movs	r3, #0
    139a:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    139e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    13a2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    13a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    13a8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    13ac:	b103      	cbz	r3, 13b0 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    13ae:	4798      	blx	r3
			txBufferIndex = 0;
    13b0:	2300      	movs	r3, #0
    13b2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    13b6:	2301      	movs	r3, #1
    13b8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    13bc:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    13c0:	42bb      	cmp	r3, r7
    13c2:	d8d8      	bhi.n	1376 <TwoWire::isr()+0x46>
			port->STDR = 0;
    13c4:	2300      	movs	r3, #0
    13c6:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    13ca:	e7dc      	b.n	1386 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    13cc:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    13d0:	2b87      	cmp	r3, #135	; 0x87
    13d2:	d8c5      	bhi.n	1360 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    13d4:	1c59      	adds	r1, r3, #1
    13d6:	b2c9      	uxtb	r1, r1
    13d8:	e7be      	b.n	1358 <TwoWire::isr()+0x28>
    13da:	bf00      	nop

000013dc <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    13dc:	4801      	ldr	r0, [pc, #4]	; (13e4 <lpi2c1_isr()+0x8>)
    13de:	f7ff bfa7 	b.w	1330 <TwoWire::isr()>
    13e2:	bf00      	nop
    13e4:	20001200 	.word	0x20001200

000013e8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    13e8:	4801      	ldr	r0, [pc, #4]	; (13f0 <lpi2c3_isr()+0x8>)
    13ea:	f7ff bfa1 	b.w	1330 <TwoWire::isr()>
    13ee:	bf00      	nop
    13f0:	20001340 	.word	0x20001340

000013f4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    13f4:	4801      	ldr	r0, [pc, #4]	; (13fc <lpi2c4_isr()+0x8>)
    13f6:	f7ff bf9b 	b.w	1330 <TwoWire::isr()>
    13fa:	bf00      	nop
    13fc:	20001480 	.word	0x20001480

00001400 <TwoWire::setClock(unsigned long)>:
{
    1400:	b410      	push	{r4}
	if (frequency < 400000) {
    1402:	4c14      	ldr	r4, [pc, #80]	; (1454 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    1404:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    1406:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    1408:	42a1      	cmp	r1, r4
	port->MCR = 0;
    140a:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    140c:	d814      	bhi.n	1438 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    140e:	4c12      	ldr	r4, [pc, #72]	; (1458 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1410:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    1412:	4912      	ldr	r1, [pc, #72]	; (145c <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1414:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    1418:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    141a:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    141c:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    141e:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    1420:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    1422:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1424:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    1428:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    142a:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    142c:	6218      	str	r0, [r3, #32]
}
    142e:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1432:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1434:	611a      	str	r2, [r3, #16]
}
    1436:	4770      	bx	lr
	} else if (frequency < 1000000) {
    1438:	4809      	ldr	r0, [pc, #36]	; (1460 <TwoWire::setClock(unsigned long)+0x60>)
    143a:	4281      	cmp	r1, r0
    143c:	d907      	bls.n	144e <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    143e:	4c09      	ldr	r4, [pc, #36]	; (1464 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    1440:	4809      	ldr	r0, [pc, #36]	; (1468 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    1442:	490a      	ldr	r1, [pc, #40]	; (146c <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    1444:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    1446:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    1448:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    144a:	62d9      	str	r1, [r3, #44]	; 0x2c
    144c:	e7e8      	b.n	1420 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    144e:	4c08      	ldr	r4, [pc, #32]	; (1470 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    1450:	4808      	ldr	r0, [pc, #32]	; (1474 <TwoWire::setClock(unsigned long)+0x74>)
    1452:	e7f6      	b.n	1442 <TwoWire::setClock(unsigned long)+0x42>
    1454:	00061a7f 	.word	0x00061a7f
    1458:	1928373b 	.word	0x1928373b
    145c:	05050bb8 	.word	0x05050bb8
    1460:	000f423f 	.word	0x000f423f
    1464:	0407090a 	.word	0x0407090a
    1468:	01010960 	.word	0x01010960
    146c:	00057f00 	.word	0x00057f00
    1470:	0c121a1c 	.word	0x0c121a1c
    1474:	02020e10 	.word	0x02020e10

00001478 <PA12::~PA12()>:
}
    1478:	4770      	bx	lr
    147a:	bf00      	nop

0000147c <PA12::~PA12()>:
PA12::~PA12() {
    147c:	b510      	push	{r4, lr}
    147e:	4604      	mov	r4, r0
}
    1480:	f640 2148 	movw	r1, #2632	; 0xa48
    1484:	f001 ffc0 	bl	3408 <operator delete(void*, unsigned int)>
    1488:	4620      	mov	r0, r4
    148a:	bd10      	pop	{r4, pc}

0000148c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    148c:	f003 ba2e 	b.w	48ec <usb_serial_available>

00001490 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1490:	f003 ba70 	b.w	4974 <usb_serial_getchar>

00001494 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1494:	4608      	mov	r0, r1
    1496:	f003 ba7d 	b.w	4994 <usb_serial_putchar>
    149a:	bf00      	nop

0000149c <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
    149c:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
    149e:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
    14a2:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
    14a4:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
    14a6:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
    14a8:	4a02      	ldr	r2, [pc, #8]	; (14b4 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
    14aa:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
    14ac:	e9c0 2300 	strd	r2, r3, [r0]
}
    14b0:	4770      	bx	lr
    14b2:	bf00      	nop
    14b4:	200006b8 	.word	0x200006b8

000014b8 <PA12::begin(int)>:
void PA12::begin(int baud){
    14b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ba:	4604      	mov	r4, r0
    14bc:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
    14be:	7b00      	ldrb	r0, [r0, #12]
    14c0:	2101      	movs	r1, #1
    14c2:	f001 fe41 	bl	3148 <pinMode>
	if(PA12_Serial_Type)
    14c6:	6866      	ldr	r6, [r4, #4]
    14c8:	b30e      	cbz	r6, 150e <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    14ca:	68a6      	ldr	r6, [r4, #8]
    14cc:	4628      	mov	r0, r5
    14ce:	f000 faaf 	bl	1a30 <irp_get_baudrate>
    14d2:	4601      	mov	r1, r0
    14d4:	4630      	mov	r0, r6
    14d6:	f000 fadb 	bl	1a90 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
    14da:	7c21      	ldrb	r1, [r4, #16]
    14dc:	7b20      	ldrb	r0, [r4, #12]
    14de:	f001 fdf7 	bl	30d0 <digitalWrite>
	mIRPtxrxStatus = 0;
    14e2:	2100      	movs	r1, #0
	SmartDelayFlag=1;
    14e4:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
    14e6:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
    14e8:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
    14ea:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
    14ee:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
    14f2:	2104      	movs	r1, #4
	SmartDelayFlag=1;
    14f4:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
    14f8:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
    14fc:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
    1500:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
    1504:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
    1508:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
    150c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    150e:	68a7      	ldr	r7, [r4, #8]
    1510:	4628      	mov	r0, r5
    1512:	683b      	ldr	r3, [r7, #0]
    1514:	69dd      	ldr	r5, [r3, #28]
    1516:	f000 fa8b 	bl	1a30 <irp_get_baudrate>
    151a:	4632      	mov	r2, r6
    151c:	4601      	mov	r1, r0
    151e:	4638      	mov	r0, r7
    1520:	47a8      	blx	r5
    1522:	e7da      	b.n	14da <PA12::begin(int)+0x22>

00001524 <PA12::readRaw()>:
int PA12::readRaw(void){
    1524:	b510      	push	{r4, lr}
    1526:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
    1528:	6880      	ldr	r0, [r0, #8]
    152a:	4a0c      	ldr	r2, [pc, #48]	; (155c <PA12::readRaw()+0x38>)
    152c:	6803      	ldr	r3, [r0, #0]
    152e:	691b      	ldr	r3, [r3, #16]
    1530:	4293      	cmp	r3, r2
    1532:	d10d      	bne.n	1550 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
    1534:	f003 f9da 	bl	48ec <usb_serial_available>
    1538:	b148      	cbz	r0, 154e <PA12::readRaw()+0x2a>
    153a:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
    153c:	4a08      	ldr	r2, [pc, #32]	; (1560 <PA12::readRaw()+0x3c>)
    153e:	6803      	ldr	r3, [r0, #0]
    1540:	695b      	ldr	r3, [r3, #20]
    1542:	4293      	cmp	r3, r2
    1544:	d106      	bne.n	1554 <PA12::readRaw()+0x30>
}
    1546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
    154a:	f003 ba13 	b.w	4974 <usb_serial_getchar>
    154e:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
    1550:	4798      	blx	r3
    1552:	e7f1      	b.n	1538 <PA12::readRaw()+0x14>
}
    1554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
    1558:	4718      	bx	r3
    155a:	bf00      	nop
    155c:	0000148d 	.word	0x0000148d
    1560:	00001491 	.word	0x00001491

00001564 <PA12::available()>:
		return PA12_Serial->available();
    1564:	6880      	ldr	r0, [r0, #8]
    1566:	4a04      	ldr	r2, [pc, #16]	; (1578 <PA12::available()+0x14>)
    1568:	6803      	ldr	r3, [r0, #0]
    156a:	691b      	ldr	r3, [r3, #16]
    156c:	4293      	cmp	r3, r2
    156e:	d101      	bne.n	1574 <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
    1570:	f003 b9bc 	b.w	48ec <usb_serial_available>
    1574:	4718      	bx	r3
    1576:	bf00      	nop
    1578:	0000148d 	.word	0x0000148d

0000157c <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
    157c:	b570      	push	{r4, r5, r6, lr}
    157e:	4d0e      	ldr	r5, [pc, #56]	; (15b8 <PA12::clearBuffer()+0x3c>)
    1580:	4604      	mov	r4, r0
    1582:	4e0e      	ldr	r6, [pc, #56]	; (15bc <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
    1584:	68a0      	ldr	r0, [r4, #8]
    1586:	6803      	ldr	r3, [r0, #0]
    1588:	691b      	ldr	r3, [r3, #16]
    158a:	42ab      	cmp	r3, r5
    158c:	d10e      	bne.n	15ac <PA12::clearBuffer()+0x30>
    158e:	f003 f9ad 	bl	48ec <usb_serial_available>
	while((this->available()))
    1592:	b170      	cbz	r0, 15b2 <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
    1594:	68a0      	ldr	r0, [r4, #8]
    1596:	6803      	ldr	r3, [r0, #0]
    1598:	695b      	ldr	r3, [r3, #20]
    159a:	42b3      	cmp	r3, r6
    159c:	d10a      	bne.n	15b4 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
    159e:	f003 f9e9 	bl	4974 <usb_serial_getchar>
		return PA12_Serial->available();
    15a2:	68a0      	ldr	r0, [r4, #8]
    15a4:	6803      	ldr	r3, [r0, #0]
    15a6:	691b      	ldr	r3, [r3, #16]
    15a8:	42ab      	cmp	r3, r5
    15aa:	d0f0      	beq.n	158e <PA12::clearBuffer()+0x12>
    15ac:	4798      	blx	r3
	while((this->available()))
    15ae:	2800      	cmp	r0, #0
    15b0:	d1f0      	bne.n	1594 <PA12::clearBuffer()+0x18>
}
    15b2:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
    15b4:	4798      	blx	r3
    15b6:	e7e5      	b.n	1584 <PA12::clearBuffer()+0x8>
    15b8:	0000148d 	.word	0x0000148d
    15bc:	00001491 	.word	0x00001491

000015c0 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    15c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15c4:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
    15c6:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    15c8:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    15ca:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
    15cc:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
    15ce:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
    15d2:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    15d6:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
    15d8:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
    15dc:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
    15e0:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
    15e4:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    15e8:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
    15ec:	dd40      	ble.n	1670 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
    15ee:	f600 010c 	addw	r1, r0, #2060	; 0x80c
    15f2:	00aa      	lsls	r2, r5, #2
    15f4:	f500 6085 	add.w	r0, r0, #1064	; 0x428
    15f8:	f005 fe26 	bl	7248 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    15fc:	1dab      	adds	r3, r5, #6
    15fe:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1602:	2000      	movs	r0, #0
    1604:	2203      	movs	r2, #3
    1606:	e001      	b.n	160c <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
    1608:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    160c:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
    160e:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1610:	4293      	cmp	r3, r2
    1612:	dcf9      	bgt.n	1608 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    1614:	43c0      	mvns	r0, r0
    1616:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    161a:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    161c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    1620:	7b20      	ldrb	r0, [r4, #12]
    1622:	f001 fd55 	bl	30d0 <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1626:	2e00      	cmp	r6, #0
    1628:	dd17      	ble.n	165a <PA12::txPacket(int, int, int)+0x9a>
    162a:	f204 480c 	addw	r8, r4, #1036	; 0x40c
    162e:	2500      	movs	r5, #0
    1630:	4f13      	ldr	r7, [pc, #76]	; (1680 <PA12::txPacket(int, int, int)+0xc0>)
    1632:	e004      	b.n	163e <PA12::txPacket(int, int, int)+0x7e>
    1634:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1636:	f003 f9ad 	bl	4994 <usb_serial_putchar>
    163a:	42ae      	cmp	r6, r5
    163c:	d00d      	beq.n	165a <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
    163e:	68a2      	ldr	r2, [r4, #8]
    1640:	f858 0f04 	ldr.w	r0, [r8, #4]!
    1644:	6813      	ldr	r3, [r2, #0]
    1646:	b2c0      	uxtb	r0, r0
    1648:	681b      	ldr	r3, [r3, #0]
    164a:	42bb      	cmp	r3, r7
    164c:	d0f2      	beq.n	1634 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    164e:	3501      	adds	r5, #1
PA12_Serial->write(value);
    1650:	4601      	mov	r1, r0
    1652:	4610      	mov	r0, r2
    1654:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1656:	42ae      	cmp	r6, r5
    1658:	d1f1      	bne.n	163e <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
    165a:	68a0      	ldr	r0, [r4, #8]
    165c:	6803      	ldr	r3, [r0, #0]
    165e:	68db      	ldr	r3, [r3, #12]
    1660:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
    1662:	7b20      	ldrb	r0, [r4, #12]
    1664:	7c61      	ldrb	r1, [r4, #17]
    1666:	f001 fd33 	bl	30d0 <digitalWrite>
}
    166a:	4630      	mov	r0, r6
    166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1670:	1dab      	adds	r3, r5, #6
    1672:	2b03      	cmp	r3, #3
    1674:	dcc3      	bgt.n	15fe <PA12::txPacket(int, int, int)+0x3e>
    1676:	f04f 30ff 	mov.w	r0, #4294967295
    167a:	2303      	movs	r3, #3
    167c:	e7cb      	b.n	1616 <PA12::txPacket(int, int, int)+0x56>
    167e:	bf00      	nop
    1680:	00001495 	.word	0x00001495

00001684 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
    1684:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
    1686:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    168a:	4689      	mov	r9, r1
    168c:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
    168e:	d046      	beq.n	171e <PA12::rxPacket(int)+0x9a>
    1690:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1694:	4299      	cmp	r1, r3
    1696:	d042      	beq.n	171e <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
    1698:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
    169c:	f1b9 0f00 	cmp.w	r9, #0
    16a0:	dd66      	ble.n	1770 <PA12::rxPacket(int)+0xec>
    16a2:	f104 0a10 	add.w	sl, r4, #16
    16a6:	3602      	adds	r6, #2
    16a8:	2700      	movs	r7, #0
    16aa:	4d5a      	ldr	r5, [pc, #360]	; (1814 <PA12::rxPacket(int)+0x190>)
    16ac:	46d0      	mov	r8, sl
		ulCounter = 0;
    16ae:	f04f 0b00 	mov.w	fp, #0
    16b2:	e007      	b.n	16c4 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
    16b4:	f003 f91a 	bl	48ec <usb_serial_available>
    16b8:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    16ba:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    16be:	b963      	cbnz	r3, 16da <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
    16c0:	45b3      	cmp	fp, r6
    16c2:	d02f      	beq.n	1724 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
    16c4:	68a0      	ldr	r0, [r4, #8]
    16c6:	6803      	ldr	r3, [r0, #0]
    16c8:	691b      	ldr	r3, [r3, #16]
    16ca:	42ab      	cmp	r3, r5
    16cc:	d0f2      	beq.n	16b4 <PA12::rxPacket(int)+0x30>
    16ce:	4798      	blx	r3
    16d0:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    16d2:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    16d6:	2b00      	cmp	r3, #0
    16d8:	d0f2      	beq.n	16c0 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
    16da:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
    16dc:	4620      	mov	r0, r4
    16de:	f7ff ff21 	bl	1524 <PA12::readRaw()>
    16e2:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
    16e6:	45b9      	cmp	r9, r7
    16e8:	d1e1      	bne.n	16ae <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    16ea:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    16ee:	f502 7382 	add.w	r3, r2, #260	; 0x104
    16f2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    16f6:	29fe      	cmp	r1, #254	; 0xfe
    16f8:	d00e      	beq.n	1718 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
    16fa:	2f03      	cmp	r7, #3
    16fc:	dd0c      	ble.n	1718 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    16fe:	6963      	ldr	r3, [r4, #20]
    1700:	2bff      	cmp	r3, #255	; 0xff
    1702:	d027      	beq.n	1754 <PA12::rxPacket(int)+0xd0>
    1704:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
    170c:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
    170e:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
    1712:	2700      	movs	r7, #0
				clearBuffer();
    1714:	f7ff ff32 	bl	157c <PA12::clearBuffer()>
}
    1718:	4638      	mov	r0, r7
    171a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
    171e:	f44f 3648 	mov.w	r6, #204800	; 0x32000
    1722:	e7bb      	b.n	169c <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    1724:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    1728:	f502 7182 	add.w	r1, r2, #260	; 0x104
    172c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    1730:	29fe      	cmp	r1, #254	; 0xfe
    1732:	d0f1      	beq.n	1718 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
    1734:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    1738:	d0df      	beq.n	16fa <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    173a:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
    173e:	461f      	mov	r7, r3
			clearBuffer();			
    1740:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    1742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1746:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
    174a:	f7ff ff17 	bl	157c <PA12::clearBuffer()>
}
    174e:	4638      	mov	r0, r7
    1750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    1754:	69a3      	ldr	r3, [r4, #24]
    1756:	2bff      	cmp	r3, #255	; 0xff
    1758:	d1d4      	bne.n	1704 <PA12::rxPacket(int)+0x80>
    175a:	69e3      	ldr	r3, [r4, #28]
    175c:	2bff      	cmp	r3, #255	; 0xff
    175e:	d009      	beq.n	1774 <PA12::rxPacket(int)+0xf0>
    1760:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
    1764:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1768:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    176a:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
    176e:	e7cd      	b.n	170c <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
    1770:	2700      	movs	r7, #0
    1772:	e7d1      	b.n	1718 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1774:	3204      	adds	r2, #4
    1776:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    177a:	685b      	ldr	r3, [r3, #4]
    177c:	428b      	cmp	r3, r1
    177e:	d02c      	beq.n	17da <PA12::rxPacket(int)+0x156>
    1780:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1788:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
    178c:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
    178e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1792:	6852      	ldr	r2, [r2, #4]
    1794:	428a      	cmp	r2, r1
    1796:	d115      	bne.n	17c4 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
    1798:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
    179c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    17a0:	6951      	ldr	r1, [r2, #20]
    17a2:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
    17a6:	1aba      	subs	r2, r7, r2
    17a8:	4291      	cmp	r1, r2
    17aa:	d10b      	bne.n	17c4 <PA12::rxPacket(int)+0x140>
    17ac:	f104 021c 	add.w	r2, r4, #28
    17b0:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    17b4:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    17b8:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    17ba:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    17bc:	d1fa      	bne.n	17b4 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    17be:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    17c0:	2bff      	cmp	r3, #255	; 0xff
    17c2:	d0a9      	beq.n	1718 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    17c4:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    17c8:	4620      	mov	r0, r4
				return 0;
    17ca:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    17cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    17d0:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    17d4:	f7ff fed2 	bl	157c <PA12::clearBuffer()>
				return 0;
    17d8:	e79e      	b.n	1718 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    17da:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    17de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    17e2:	6958      	ldr	r0, [r3, #20]
    17e4:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    17e8:	1afb      	subs	r3, r7, r3
    17ea:	4298      	cmp	r0, r3
    17ec:	d1c8      	bne.n	1780 <PA12::rxPacket(int)+0xfc>
    17ee:	f104 001c 	add.w	r0, r4, #28
    17f2:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    17f6:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    17f8:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    17fc:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    17fe:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1800:	d1fa      	bne.n	17f8 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    1802:	2bff      	cmp	r3, #255	; 0xff
    1804:	d0c3      	beq.n	178e <PA12::rxPacket(int)+0x10a>
    1806:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    180a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    180e:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    1812:	e7bc      	b.n	178e <PA12::rxPacket(int)+0x10a>
    1814:	0000148d 	.word	0x0000148d

00001818 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    181c:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    181e:	4698      	mov	r8, r3
    1820:	4605      	mov	r5, r0
	mBusUsed = 1;
    1822:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1824:	468a      	mov	sl, r1
    1826:	4691      	mov	r9, r2
    1828:	4e56      	ldr	r6, [pc, #344]	; (1984 <PA12::txRxPacket(int, int, int)+0x16c>)
    182a:	4f57      	ldr	r7, [pc, #348]	; (1988 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    182c:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    1830:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    1834:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    1838:	68a8      	ldr	r0, [r5, #8]
    183a:	6803      	ldr	r3, [r0, #0]
    183c:	691c      	ldr	r4, [r3, #16]
    183e:	42b4      	cmp	r4, r6
    1840:	d10f      	bne.n	1862 <PA12::txRxPacket(int, int, int)+0x4a>
    1842:	f003 f853 	bl	48ec <usb_serial_available>
    1846:	4604      	mov	r4, r0
		while((this->available())){
    1848:	b17c      	cbz	r4, 186a <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    184a:	68a8      	ldr	r0, [r5, #8]
    184c:	6803      	ldr	r3, [r0, #0]
    184e:	695b      	ldr	r3, [r3, #20]
    1850:	42bb      	cmp	r3, r7
    1852:	d14a      	bne.n	18ea <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    1854:	f003 f88e 	bl	4974 <usb_serial_getchar>
		return PA12_Serial->available();
    1858:	68a8      	ldr	r0, [r5, #8]
    185a:	6803      	ldr	r3, [r0, #0]
    185c:	691c      	ldr	r4, [r3, #16]
    185e:	42b4      	cmp	r4, r6
    1860:	d0ef      	beq.n	1842 <PA12::txRxPacket(int, int, int)+0x2a>
    1862:	47a0      	blx	r4
    1864:	4604      	mov	r4, r0
		while((this->available())){
    1866:	2c00      	cmp	r4, #0
    1868:	d1ef      	bne.n	184a <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    186a:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    186c:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1870:	464a      	mov	r2, r9
    1872:	4651      	mov	r1, sl
    1874:	4628      	mov	r0, r5
    1876:	f7ff fea3 	bl	15c0 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    187a:	4580      	cmp	r8, r0
    187c:	d102      	bne.n	1884 <PA12::txRxPacket(int, int, int)+0x6c>
    187e:	2301      	movs	r3, #1
    1880:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    1884:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    1888:	d043      	beq.n	1912 <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    188a:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    188e:	d02e      	beq.n	18ee <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    1890:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1894:	d065      	beq.n	1962 <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    1896:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    189a:	2b01      	cmp	r3, #1
    189c:	dd53      	ble.n	1946 <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    189e:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    18a2:	2b01      	cmp	r3, #1
    18a4:	d038      	beq.n	1918 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    18a6:	230b      	movs	r3, #11
    18a8:	461e      	mov	r6, r3
    18aa:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    18ae:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    18b2:	2b01      	cmp	r3, #1
    18b4:	d038      	beq.n	1928 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    18b6:	4631      	mov	r1, r6
    18b8:	4628      	mov	r0, r5
    18ba:	f7ff fee3 	bl	1684 <PA12::rxPacket(int)>
	mBusUsed = 0;
    18be:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    18c0:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    18c2:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    18c6:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    18ca:	d007      	beq.n	18dc <PA12::txRxPacket(int, int, int)+0xc4>
    18cc:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    18d0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    18d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    18d8:	2bfe      	cmp	r3, #254	; 0xfe
    18da:	d029      	beq.n	1930 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    18dc:	2302      	movs	r3, #2
	return 1;
    18de:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    18e0:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    18e4:	4620      	mov	r0, r4
    18e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    18ea:	4798      	blx	r3
    18ec:	e7a4      	b.n	1838 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    18ee:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    18f2:	3607      	adds	r6, #7
    18f4:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    18f8:	2e00      	cmp	r6, #0
    18fa:	d1d8      	bne.n	18ae <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    18fc:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    1900:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1904:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1908:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    190c:	2bf1      	cmp	r3, #241	; 0xf1
    190e:	d1e5      	bne.n	18dc <PA12::txRxPacket(int, int, int)+0xc4>
    1910:	e7e8      	b.n	18e4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1912:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1916:	d02f      	beq.n	1978 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1918:	2307      	movs	r3, #7
    191a:	461e      	mov	r6, r3
    191c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1920:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1924:	2b01      	cmp	r3, #1
    1926:	d1c6      	bne.n	18b6 <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1928:	2096      	movs	r0, #150	; 0x96
    192a:	f001 fb53 	bl	2fd4 <delay>
    192e:	e7c2      	b.n	18b6 <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1930:	2800      	cmp	r0, #0
    1932:	d1d3      	bne.n	18dc <PA12::txRxPacket(int, int, int)+0xc4>
    1934:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1938:	f503 7382 	add.w	r3, r3, #260	; 0x104
    193c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1940:	2bf1      	cmp	r3, #241	; 0xf1
    1942:	d1cb      	bne.n	18dc <PA12::txRxPacket(int, int, int)+0xc4>
    1944:	e7ce      	b.n	18e4 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    1946:	2300      	movs	r3, #0
    1948:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    194c:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1950:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1954:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1958:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    195c:	2bf1      	cmp	r3, #241	; 0xf1
    195e:	d1bd      	bne.n	18dc <PA12::txRxPacket(int, int, int)+0xc4>
    1960:	e7c0      	b.n	18e4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    1962:	f029 0910 	bic.w	r9, r9, #16
    1966:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    196a:	d1ec      	bne.n	1946 <PA12::txRxPacket(int, int, int)+0x12e>
    196c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1970:	461e      	mov	r6, r3
    1972:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1976:	e79a      	b.n	18ae <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1978:	23ff      	movs	r3, #255	; 0xff
    197a:	461e      	mov	r6, r3
    197c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1980:	e795      	b.n	18ae <PA12::txRxPacket(int, int, int)+0x96>
    1982:	bf00      	nop
    1984:	0000148d 	.word	0x0000148d
    1988:	00001491 	.word	0x00001491

0000198c <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    198c:	b530      	push	{r4, r5, lr}
    198e:	4615      	mov	r5, r2
    1990:	b083      	sub	sp, #12
    1992:	4604      	mov	r4, r0
    1994:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1996:	f7ff fdf1 	bl	157c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    199a:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    199c:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    199e:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19a2:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    19a4:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19a8:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    19aa:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19ae:	22f3      	movs	r2, #243	; 0xf3
    19b0:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    19b2:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    19b6:	b003      	add	sp, #12
    19b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19bc:	f7ff bf2c 	b.w	1818 <PA12::txRxPacket(int, int, int)>

000019c0 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    19c0:	b530      	push	{r4, r5, lr}
    19c2:	4615      	mov	r5, r2
    19c4:	b083      	sub	sp, #12
    19c6:	4604      	mov	r4, r0
    19c8:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    19ca:	f7ff fdd7 	bl	157c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    19ce:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    19d0:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    19d2:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19d6:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    19d8:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19dc:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    19de:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19e2:	22f3      	movs	r2, #243	; 0xf3
    19e4:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    19e6:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    19ea:	b003      	add	sp, #12
    19ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    19f0:	f7ff bf12 	b.w	1818 <PA12::txRxPacket(int, int, int)>

000019f4 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    19f4:	b510      	push	{r4, lr}
    19f6:	b082      	sub	sp, #8
    19f8:	4604      	mov	r4, r0
    19fa:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    19fc:	f7ff fdbe 	bl	157c <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    1a00:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    1a02:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1a04:	22f2      	movs	r2, #242	; 0xf2
    1a06:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1a08:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1a0c:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    1a0e:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1a12:	f7ff ff01 	bl	1818 <PA12::txRxPacket(int, int, int)>
    1a16:	b138      	cbz	r0, 1a28 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a1a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1a1e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1a22:	b280      	uxth	r0, r0
}
    1a24:	b002      	add	sp, #8
    1a26:	bd10      	pop	{r4, pc}
		return 0xffff;
    1a28:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1a2c:	b002      	add	sp, #8
    1a2e:	bd10      	pop	{r4, pc}

00001a30 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1a30:	2810      	cmp	r0, #16
    1a32:	dc11      	bgt.n	1a58 <irp_get_baudrate+0x28>
    1a34:	2801      	cmp	r0, #1
    1a36:	dd0c      	ble.n	1a52 <irp_get_baudrate+0x22>
    1a38:	3802      	subs	r0, #2
    1a3a:	280e      	cmp	r0, #14
    1a3c:	d809      	bhi.n	1a52 <irp_get_baudrate+0x22>
    1a3e:	e8df f000 	tbb	[pc, r0]
    1a42:	0819      	.short	0x0819
    1a44:	0808081b 	.word	0x0808081b
    1a48:	08080817 	.word	0x08080817
    1a4c:	08080808 	.word	0x08080808
    1a50:	1d          	.byte	0x1d
    1a51:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    1a52:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1a56:	4770      	bx	lr
    switch(baudnum)
    1a58:	2840      	cmp	r0, #64	; 0x40
    1a5a:	d006      	beq.n	1a6a <irp_get_baudrate+0x3a>
        temp= 9600; break;
    1a5c:	2880      	cmp	r0, #128	; 0x80
    1a5e:	bf14      	ite	ne
    1a60:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    1a64:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    1a68:	4770      	bx	lr
    switch(baudnum)
    1a6a:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    1a6e:	4770      	bx	lr
        temp= 2000000; break;
    1a70:	4804      	ldr	r0, [pc, #16]	; (1a84 <irp_get_baudrate+0x54>)
    1a72:	4770      	bx	lr
        temp= 4000000; break;
    1a74:	4804      	ldr	r0, [pc, #16]	; (1a88 <irp_get_baudrate+0x58>)
    1a76:	4770      	bx	lr
        temp= 2500000; break;
    1a78:	4804      	ldr	r0, [pc, #16]	; (1a8c <irp_get_baudrate+0x5c>)
    1a7a:	4770      	bx	lr
        temp= 115200; break;
    1a7c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1a80:	4770      	bx	lr
    1a82:	bf00      	nop
    1a84:	001e8480 	.word	0x001e8480
    1a88:	003d0900 	.word	0x003d0900
    1a8c:	002625a0 	.word	0x002625a0

00001a90 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    1a90:	b410      	push	{r4}
	if (port) {
    1a92:	6904      	ldr	r4, [r0, #16]
    1a94:	b134      	cbz	r4, 1aa4 <SoftwareSerial::begin(unsigned long)+0x14>
		port->begin(speed);
    1a96:	6823      	ldr	r3, [r4, #0]
    1a98:	4620      	mov	r0, r4
    1a9a:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    1a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    1aa0:	69db      	ldr	r3, [r3, #28]
    1aa2:	4718      	bx	r3
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1aa4:	460b      	mov	r3, r1
    1aa6:	4a0b      	ldr	r2, [pc, #44]	; (1ad4 <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1aa8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    1aac:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1ab0:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    1ab4:	fbb2 f3f3 	udiv	r3, r2, r3
    1ab8:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1aba:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1abe:	4a06      	ldr	r2, [pc, #24]	; (1ad8 <SoftwareSerial::begin(unsigned long)+0x48>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1ac4:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1ac8:	6813      	ldr	r3, [r2, #0]
    1aca:	f043 0301 	orr.w	r3, r3, #1
    1ace:	6013      	str	r3, [r2, #0]
}
    1ad0:	4770      	bx	lr
    1ad2:	bf00      	nop
    1ad4:	23c34600 	.word	0x23c34600
    1ad8:	e0001000 	.word	0xe0001000

00001adc <Adafruit_INA260::Adafruit_INA260()>:
Adafruit_INA260::Adafruit_INA260(void) {}
    1adc:	4770      	bx	lr
    1ade:	bf00      	nop

00001ae0 <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ae4:	b086      	sub	sp, #24
    1ae6:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1ae8:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1aea:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1aee:	f001 fc89 	bl	3404 <operator new(unsigned int)>
    1af2:	4604      	mov	r4, r0
    1af4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1af8:	f000 f9ee 	bl	1ed8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>
  if (!i2c_dev->begin()) {
    1afc:	2101      	movs	r1, #1
    1afe:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1b00:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    1b02:	f000 f9f3 	bl	1eec <Adafruit_I2CDevice::begin(bool)>
    1b06:	b920      	cbnz	r0, 1b12 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    1b08:	2400      	movs	r4, #0
}
    1b0a:	4620      	mov	r0, r4
    1b0c:	b006      	add	sp, #24
    1b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    1b12:	2601      	movs	r6, #1
    1b14:	4604      	mov	r4, r0
    1b16:	2018      	movs	r0, #24
    1b18:	f001 fc74 	bl	3404 <operator new(unsigned int)>
    1b1c:	2302      	movs	r3, #2
    1b1e:	22ff      	movs	r2, #255	; 0xff
    1b20:	4680      	mov	r8, r0
    1b22:	e9cd 6600 	strd	r6, r6, [sp]
    1b26:	68e9      	ldr	r1, [r5, #12]
    1b28:	f000 f8b4 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1b2c:	2018      	movs	r0, #24
    1b2e:	f001 fc69 	bl	3404 <operator new(unsigned int)>
    1b32:	2302      	movs	r3, #2
    1b34:	22fe      	movs	r2, #254	; 0xfe
    1b36:	4607      	mov	r7, r0
    1b38:	e9cd 6600 	strd	r6, r6, [sp]
    1b3c:	68e9      	ldr	r1, [r5, #12]
    1b3e:	f000 f8a9 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    1b42:	2008      	movs	r0, #8
    1b44:	f001 fc5e 	bl	3404 <operator new(unsigned int)>
    1b48:	4641      	mov	r1, r8
    1b4a:	2304      	movs	r3, #4
    1b4c:	220c      	movs	r2, #12
    1b4e:	4680      	mov	r8, r0
    1b50:	f000 f998 	bl	1e84 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    1b54:	4638      	mov	r0, r7
    1b56:	f000 f973 	bl	1e40 <Adafruit_BusIO_Register::read()>
    1b5a:	f245 4349 	movw	r3, #21577	; 0x5449
    1b5e:	4298      	cmp	r0, r3
    1b60:	d1d2      	bne.n	1b08 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    1b62:	4640      	mov	r0, r8
    1b64:	f000 f992 	bl	1e8c <Adafruit_BusIO_RegisterBits::read()>
    1b68:	f240 2327 	movw	r3, #551	; 0x227
    1b6c:	4298      	cmp	r0, r3
    1b6e:	d1cb      	bne.n	1b08 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    1b70:	2018      	movs	r0, #24
    1b72:	f001 fc47 	bl	3404 <operator new(unsigned int)>
    1b76:	4607      	mov	r7, r0
    1b78:	2302      	movs	r3, #2
    1b7a:	2200      	movs	r2, #0
    1b7c:	e9cd 6600 	strd	r6, r6, [sp]
    1b80:	68e9      	ldr	r1, [r5, #12]
    1b82:	f000 f887 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    1b86:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    1b88:	2018      	movs	r0, #24
    1b8a:	f001 fc3b 	bl	3404 <operator new(unsigned int)>
    1b8e:	4607      	mov	r7, r0
    1b90:	2302      	movs	r3, #2
    1b92:	2206      	movs	r2, #6
    1b94:	e9cd 6600 	strd	r6, r6, [sp]
    1b98:	68e9      	ldr	r1, [r5, #12]
    1b9a:	f000 f87b 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    1b9e:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    1ba0:	2018      	movs	r0, #24
    1ba2:	f001 fc2f 	bl	3404 <operator new(unsigned int)>
    1ba6:	4607      	mov	r7, r0
    1ba8:	2302      	movs	r3, #2
    1baa:	2207      	movs	r2, #7
    1bac:	e9cd 6600 	strd	r6, r6, [sp]
    1bb0:	68e9      	ldr	r1, [r5, #12]
    1bb2:	f000 f86f 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1bb6:	230f      	movs	r3, #15
    1bb8:	6829      	ldr	r1, [r5, #0]
    1bba:	4632      	mov	r2, r6
    1bbc:	a804      	add	r0, sp, #16
  AlertLimit =
    1bbe:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1bc0:	f000 f960 	bl	1e84 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    1bc4:	4631      	mov	r1, r6
    1bc6:	a804      	add	r0, sp, #16
    1bc8:	f000 f96e 	bl	1ea8 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    1bcc:	2002      	movs	r0, #2
    1bce:	f001 fa01 	bl	2fd4 <delay>
  return true;
    1bd2:	e79a      	b.n	1b0a <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

00001bd4 <Adafruit_INA260::readCurrent()>:
float Adafruit_INA260::readCurrent(void) {
    1bd4:	b500      	push	{lr}
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1bd6:	2201      	movs	r2, #1
float Adafruit_INA260::readCurrent(void) {
    1bd8:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1bda:	68c1      	ldr	r1, [r0, #12]
    1bdc:	2302      	movs	r3, #2
    1bde:	a802      	add	r0, sp, #8
    1be0:	e9cd 2200 	strd	r2, r2, [sp]
    1be4:	f000 f856 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (int16_t)current.read() * 1.25;
    1be8:	a802      	add	r0, sp, #8
    1bea:	f000 f929 	bl	1e40 <Adafruit_BusIO_Register::read()>
    1bee:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1bf2:	b203      	sxth	r3, r0
    1bf4:	ee00 3a10 	vmov	s0, r3
    1bf8:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    1bfc:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1c00:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1c04:	b009      	add	sp, #36	; 0x24
    1c06:	f85d fb04 	ldr.w	pc, [sp], #4
    1c0a:	bf00      	nop

00001c0c <Adafruit_INA260::readBusVoltage()>:
float Adafruit_INA260::readBusVoltage(void) {
    1c0c:	b510      	push	{r4, lr}
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1c0e:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1c10:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1c12:	2401      	movs	r4, #1
    1c14:	68c1      	ldr	r1, [r0, #12]
    1c16:	461a      	mov	r2, r3
    1c18:	a802      	add	r0, sp, #8
    1c1a:	e9cd 4400 	strd	r4, r4, [sp]
    1c1e:	f000 f839 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    1c22:	a802      	add	r0, sp, #8
    1c24:	f000 f90c 	bl	1e40 <Adafruit_BusIO_Register::read()>
    1c28:	ee06 0a90 	vmov	s13, r0
    1c2c:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1c30:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    1c34:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1c38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1c3c:	b008      	add	sp, #32
    1c3e:	bd10      	pop	{r4, pc}

00001c40 <Adafruit_INA260::readPower()>:
float Adafruit_INA260::readPower(void) {
    1c40:	b510      	push	{r4, lr}
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1c42:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    1c44:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1c46:	68c1      	ldr	r1, [r0, #12]
    1c48:	2302      	movs	r3, #2
    1c4a:	2203      	movs	r2, #3
    1c4c:	a802      	add	r0, sp, #8
    1c4e:	e9cd 4400 	strd	r4, r4, [sp]
    1c52:	f000 f81f 	bl	1c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    1c56:	a802      	add	r0, sp, #8
    1c58:	f000 f8f2 	bl	1e40 <Adafruit_BusIO_Register::read()>
    1c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1c60:	fa00 f304 	lsl.w	r3, r0, r4
    1c64:	ee00 3a10 	vmov	s0, r3
}
    1c68:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    1c6c:	b008      	add	sp, #32
    1c6e:	bd10      	pop	{r4, pc}

00001c70 <Adafruit_INA260::conversionReady()>:
bool Adafruit_INA260::conversionReady(void) {
    1c70:	b500      	push	{lr}
    1c72:	b083      	sub	sp, #12
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    1c74:	6841      	ldr	r1, [r0, #4]
    1c76:	2303      	movs	r3, #3
    1c78:	2201      	movs	r2, #1
    1c7a:	4668      	mov	r0, sp
    1c7c:	f000 f902 	bl	1e84 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1c80:	4668      	mov	r0, sp
    1c82:	f000 f903 	bl	1e8c <Adafruit_BusIO_RegisterBits::read()>
}
    1c86:	3800      	subs	r0, #0
    1c88:	bf18      	it	ne
    1c8a:	2001      	movne	r0, #1
    1c8c:	b003      	add	sp, #12
    1c8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c92:	bf00      	nop

00001c94 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    1c94:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    1c96:	2300      	movs	r3, #0
  _address = reg_addr;
    1c98:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    1c9a:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1c9c:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1ca0:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1ca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    1ca6:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1ca8:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    1caa:	7343      	strb	r3, [r0, #13]
}
    1cac:	4770      	bx	lr
    1cae:	bf00      	nop

00001cb0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1cb0:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1cb4:	4603      	mov	r3, r0
  if (_i2cdevice) {
    1cb6:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1cb8:	b570      	push	{r4, r5, r6, lr}
    1cba:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    1cbc:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    1cc0:	b140      	cbz	r0, 1cd4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    1cc2:	7b5c      	ldrb	r4, [r3, #13]
    1cc4:	ab03      	add	r3, sp, #12
    1cc6:	e9cd 3400 	strd	r3, r4, [sp]
    1cca:	2301      	movs	r3, #1
    1ccc:	f000 f92a 	bl	1f24 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    1cd0:	b004      	add	sp, #16
    1cd2:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    1cd4:	6858      	ldr	r0, [r3, #4]
    1cd6:	2800      	cmp	r0, #0
    1cd8:	d0fa      	beq.n	1cd0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1cda:	7a1e      	ldrb	r6, [r3, #8]
    1cdc:	fa5f f58c 	uxtb.w	r5, ip
    1ce0:	2e03      	cmp	r6, #3
    1ce2:	d021      	beq.n	1d28 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1ce4:	460c      	mov	r4, r1
    1ce6:	4696      	mov	lr, r2
    1ce8:	b176      	cbz	r6, 1d08 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1cea:	2e02      	cmp	r6, #2
    1cec:	d111      	bne.n	1d12 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    1cee:	f065 057f 	orn	r5, r5, #127	; 0x7f
    1cf2:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    1cf6:	7b5d      	ldrb	r5, [r3, #13]
    1cf8:	4672      	mov	r2, lr
    1cfa:	ab03      	add	r3, sp, #12
    1cfc:	4621      	mov	r1, r4
    1cfe:	9500      	str	r5, [sp, #0]
    1d00:	f000 fb42 	bl	2388 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    1d04:	b004      	add	sp, #16
    1d06:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    1d08:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    1d0c:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1d10:	e7f1      	b.n	1cf6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    1d12:	2e01      	cmp	r6, #1
    1d14:	d1ef      	bne.n	1cf6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    1d16:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    1d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1d22:	f88d 200c 	strb.w	r2, [sp, #12]
    1d26:	e7e6      	b.n	1cf6 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1d28:	7b5c      	ldrb	r4, [r3, #13]
    1d2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1d2e:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1d30:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1d34:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    1d36:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1d3a:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    1d3c:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1d40:	f000 fb22 	bl	2388 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    1d44:	e7c4      	b.n	1cd0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    1d46:	bf00      	nop

00001d48 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    1d48:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    1d4a:	b962      	cbnz	r2, 1d66 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    1d4c:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    1d4e:	2c04      	cmp	r4, #4
    1d50:	d824      	bhi.n	1d9c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1d52:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1d54:	b95c      	cbnz	r4, 1d6e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    1d56:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    1d5a:	4622      	mov	r2, r4
    1d5c:	4671      	mov	r1, lr
}
    1d5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    1d62:	f7ff bfa5 	b.w	1cb0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    1d66:	2a04      	cmp	r2, #4
    1d68:	4614      	mov	r4, r2
    1d6a:	d817      	bhi.n	1d9c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1d6c:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    1d6e:	f100 0e0f 	add.w	lr, r0, #15
    1d72:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    1d76:	7b85      	ldrb	r5, [r0, #14]
    1d78:	f100 020e 	add.w	r2, r0, #14
    1d7c:	fa50 f383 	uxtab	r3, r0, r3
    1d80:	46f4      	mov	ip, lr
    1d82:	b94d      	cbnz	r5, 1d98 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    1d84:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    1d88:	3b01      	subs	r3, #1
    value >>= 8;
    1d8a:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    1d8c:	f10c 0c01 	add.w	ip, ip, #1
    1d90:	4293      	cmp	r3, r2
    1d92:	d0e2      	beq.n	1d5a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    1d94:	2d00      	cmp	r5, #0
    1d96:	d0f5      	beq.n	1d84 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    1d98:	7019      	strb	r1, [r3, #0]
    1d9a:	e7f5      	b.n	1d88 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    1d9c:	2000      	movs	r0, #0
}
    1d9e:	bd30      	pop	{r4, r5, pc}

00001da0 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1da0:	b510      	push	{r4, lr}
    1da2:	4684      	mov	ip, r0
    1da4:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1da6:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1da8:	4614      	mov	r4, r2
    1daa:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    1dac:	b2c2      	uxtb	r2, r0
    1dae:	f8ad 000c 	strh.w	r0, [sp, #12]
    1db2:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    1db6:	f8dc 0000 	ldr.w	r0, [ip]
    1dba:	b148      	cbz	r0, 1dd0 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1dbc:	2100      	movs	r1, #0
    1dbe:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1dc2:	9400      	str	r4, [sp, #0]
    1dc4:	9101      	str	r1, [sp, #4]
    1dc6:	a903      	add	r1, sp, #12
    1dc8:	f000 f918 	bl	1ffc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    1dcc:	b004      	add	sp, #16
    1dce:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1dd0:	f8dc 0004 	ldr.w	r0, [ip, #4]
    1dd4:	2800      	cmp	r0, #0
    1dd6:	d0f9      	beq.n	1dcc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1dd8:	f89c 1008 	ldrb.w	r1, [ip, #8]
    1ddc:	2903      	cmp	r1, #3
    1dde:	d01e      	beq.n	1e1e <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1de0:	b179      	cbz	r1, 1e02 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1de2:	2902      	cmp	r1, #2
    1de4:	d112      	bne.n	1e0c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    1de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1dea:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1dee:	21ff      	movs	r1, #255	; 0xff
    1df0:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1df4:	9400      	str	r4, [sp, #0]
    1df6:	9101      	str	r1, [sp, #4]
    1df8:	a903      	add	r1, sp, #12
    1dfa:	f000 fb21 	bl	2440 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1dfe:	b004      	add	sp, #16
    1e00:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    1e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1e06:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1e0a:	e7f0      	b.n	1dee <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1e0c:	2901      	cmp	r1, #1
    1e0e:	d1ee      	bne.n	1dee <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1e10:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1e14:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1e18:	f88d 200c 	strb.w	r2, [sp, #12]
    1e1c:	e7e7      	b.n	1dee <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1e1e:	21ff      	movs	r1, #255	; 0xff
    1e20:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1e22:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    1e26:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1e2a:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1e2e:	9101      	str	r1, [sp, #4]
    1e30:	a903      	add	r1, sp, #12
    1e32:	3201      	adds	r2, #1
      addrbuffer[0] =
    1e34:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1e38:	f000 fb02 	bl	2440 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    1e3c:	e7c6      	b.n	1dcc <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    1e3e:	bf00      	nop

00001e40 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1e40:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    1e42:	f100 050f 	add.w	r5, r0, #15
    1e46:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    1e48:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    1e4a:	4629      	mov	r1, r5
    1e4c:	f7ff ffa8 	bl	1da0 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1e50:	b1a0      	cbz	r0, 1e7c <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    1e52:	7b20      	ldrb	r0, [r4, #12]
    1e54:	b170      	cbz	r0, 1e74 <Adafruit_BusIO_Register::read()+0x34>
    1e56:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1e58:	7ba6      	ldrb	r6, [r4, #14]
    1e5a:	4629      	mov	r1, r5
    1e5c:	f104 020e 	add.w	r2, r4, #14
    1e60:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    1e62:	2000      	movs	r0, #0
    value <<= 8;
    1e64:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    1e66:	b936      	cbnz	r6, 1e76 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1e68:	781c      	ldrb	r4, [r3, #0]
    1e6a:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    1e6c:	3b01      	subs	r3, #1
    1e6e:	3101      	adds	r1, #1
    1e70:	4293      	cmp	r3, r2
    1e72:	d1f7      	bne.n	1e64 <Adafruit_BusIO_Register::read()+0x24>
}
    1e74:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    1e76:	780c      	ldrb	r4, [r1, #0]
    1e78:	4320      	orrs	r0, r4
    1e7a:	e7f7      	b.n	1e6c <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    1e7c:	f04f 30ff 	mov.w	r0, #4294967295
}
    1e80:	bd70      	pop	{r4, r5, r6, pc}
    1e82:	bf00      	nop

00001e84 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    1e84:	6001      	str	r1, [r0, #0]
  _bits = bits;
    1e86:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    1e88:	7143      	strb	r3, [r0, #5]
}
    1e8a:	4770      	bx	lr

00001e8c <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    1e8c:	b510      	push	{r4, lr}
    1e8e:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    1e90:	6800      	ldr	r0, [r0, #0]
    1e92:	f7ff ffd5 	bl	1e40 <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    1e96:	2301      	movs	r3, #1
    1e98:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    1e9a:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    1e9c:	408b      	lsls	r3, r1
  val >>= _shift;
    1e9e:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    1ea0:	3b01      	subs	r3, #1
}
    1ea2:	4018      	ands	r0, r3
    1ea4:	bd10      	pop	{r4, pc}
    1ea6:	bf00      	nop

00001ea8 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1ea8:	b538      	push	{r3, r4, r5, lr}
    1eaa:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    1eac:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1eae:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    1eb0:	f7ff ffc6 	bl	1e40 <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    1eb4:	792a      	ldrb	r2, [r5, #4]
    1eb6:	2301      	movs	r3, #1
    1eb8:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    1eba:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    1ebc:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    1ebe:	3b01      	subs	r3, #1
  data &= mask;
    1ec0:	401c      	ands	r4, r3
  mask <<= _shift;
    1ec2:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    1ec4:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    1ec6:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    1eca:	7b2a      	ldrb	r2, [r5, #12]
    1ecc:	4628      	mov	r0, r5
    1ece:	4321      	orrs	r1, r4
}
    1ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    1ed4:	f7ff bf38 	b.w	1d48 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

00001ed8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    1ed8:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    1edc:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    1ede:	2220      	movs	r2, #32
  _addr = addr;
    1ee0:	7001      	strb	r1, [r0, #0]
  _begun = false;
    1ee2:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    1ee6:	60c2      	str	r2, [r0, #12]
}
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop

00001eec <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1eec:	b538      	push	{r3, r4, r5, lr}
    1eee:	4604      	mov	r4, r0
  _wire->begin();
    1ef0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1ef2:	460d      	mov	r5, r1
  _wire->begin();
    1ef4:	f00a fb54 	bl	c5a0 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    1ef8:	2101      	movs	r1, #1
    1efa:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    1efc:	b90d      	cbnz	r5, 1f02 <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    1efe:	4608      	mov	r0, r1
}
    1f00:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    1f02:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    1f04:	6862      	ldr	r2, [r4, #4]
    1f06:	4088      	lsls	r0, r1
		transmitting = 1;
    1f08:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    1f0c:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1f10:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    1f14:	6860      	ldr	r0, [r4, #4]
    1f16:	f7ff f8db 	bl	10d0 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    1f1a:	fab0 f080 	clz	r0, r0
    1f1e:	0940      	lsrs	r0, r0, #5
}
    1f20:	bd38      	pop	{r3, r4, r5, pc}
    1f22:	bf00      	nop

00001f24 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f28:	9f07      	ldr	r7, [sp, #28]
    1f2a:	4615      	mov	r5, r2
    1f2c:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    1f2e:	68c3      	ldr	r3, [r0, #12]
    1f30:	443a      	add	r2, r7
    1f32:	429a      	cmp	r2, r3
    1f34:	d816      	bhi.n	1f64 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    1f36:	7802      	ldrb	r2, [r0, #0]
    1f38:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1f3a:	6843      	ldr	r3, [r0, #4]
    1f3c:	460e      	mov	r6, r1
    1f3e:	0052      	lsls	r2, r2, #1
    1f40:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    1f44:	2201      	movs	r2, #1
    1f46:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1f4a:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    1f4e:	b167      	cbz	r7, 1f6a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1f50:	9b06      	ldr	r3, [sp, #24]
    1f52:	b153      	cbz	r3, 1f6a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    1f54:	6840      	ldr	r0, [r0, #4]
    1f56:	463a      	mov	r2, r7
    1f58:	9906      	ldr	r1, [sp, #24]
    1f5a:	6803      	ldr	r3, [r0, #0]
    1f5c:	685b      	ldr	r3, [r3, #4]
    1f5e:	4798      	blx	r3
    1f60:	4287      	cmp	r7, r0
    1f62:	d002      	beq.n	1f6a <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    1f64:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    1f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    1f6a:	6860      	ldr	r0, [r4, #4]
    1f6c:	4631      	mov	r1, r6
    1f6e:	462a      	mov	r2, r5
    1f70:	6803      	ldr	r3, [r0, #0]
    1f72:	685b      	ldr	r3, [r3, #4]
    1f74:	4798      	blx	r3
    1f76:	4285      	cmp	r5, r0
    1f78:	d1f4      	bne.n	1f64 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    1f7a:	4641      	mov	r1, r8
    1f7c:	6860      	ldr	r0, [r4, #4]
    1f7e:	f7ff f8a7 	bl	10d0 <TwoWire::endTransmission(unsigned char)>
    1f82:	fab0 f080 	clz	r0, r0
    1f86:	0940      	lsrs	r0, r0, #5
}
    1f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001f8c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    1f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f90:	4615      	mov	r5, r2
    1f92:	4606      	mov	r6, r0
    1f94:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1f96:	b2d2      	uxtb	r2, r2
    1f98:	7801      	ldrb	r1, [r0, #0]
    1f9a:	6840      	ldr	r0, [r0, #4]
    1f9c:	f7ff f918 	bl	11d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    1fa0:	4285      	cmp	r5, r0
    1fa2:	d124      	bne.n	1fee <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1fa4:	b305      	cbz	r5, 1fe8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    1fa6:	2400      	movs	r4, #0
    1fa8:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1ff8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    1fac:	46a0      	mov	r8, r4
    1fae:	e013      	b.n	1fd8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1fb0:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    1fb4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1fb8:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    1fba:	f10c 0201 	add.w	r2, ip, #1
    1fbe:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    1fc0:	d918      	bls.n	1ff4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    1fc2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1fc6:	f89c 301a 	ldrb.w	r3, [ip, #26]
    1fca:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    1fcc:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    1fd0:	b2a4      	uxth	r4, r4
    1fd2:	42a5      	cmp	r5, r4
    1fd4:	46a0      	mov	r8, r4
    1fd6:	d907      	bls.n	1fe8 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    1fd8:	6870      	ldr	r0, [r6, #4]
    1fda:	6802      	ldr	r2, [r0, #0]
    1fdc:	6952      	ldr	r2, [r2, #20]
    1fde:	454a      	cmp	r2, r9
    1fe0:	d0e6      	beq.n	1fb0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    1fe2:	4790      	blx	r2
    1fe4:	b2c3      	uxtb	r3, r0
    1fe6:	e7f0      	b.n	1fca <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    1fe8:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    1fee:	2000      	movs	r0, #0
}
    1ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1ff4:	23ff      	movs	r3, #255	; 0xff
    1ff6:	e7e8      	b.n	1fca <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    1ff8:	00000ee5 	.word	0x00000ee5

00001ffc <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    1ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    2000:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    2002:	b082      	sub	sp, #8
    2004:	461f      	mov	r7, r3
    2006:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    2008:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    200c:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    200e:	e9cd 4400 	strd	r4, r4, [sp]
    2012:	f7ff ff87 	bl	1f24 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    2016:	b928      	cbnz	r0, 2024 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    2018:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    201c:	4640      	mov	r0, r8
    201e:	b002      	add	sp, #8
    2020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    2024:	4680      	mov	r8, r0
    2026:	b915      	cbnz	r5, 202e <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    2028:	e7f8      	b.n	201c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    202a:	42a5      	cmp	r5, r4
    202c:	d9f6      	bls.n	201c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    202e:	1b2a      	subs	r2, r5, r4
    2030:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    2032:	1939      	adds	r1, r7, r4
    2034:	4630      	mov	r0, r6
    2036:	429a      	cmp	r2, r3
    2038:	bf28      	it	cs
    203a:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    203c:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    203e:	42a3      	cmp	r3, r4
    pos += read_len;
    2040:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    2042:	bf8c      	ite	hi
    2044:	2300      	movhi	r3, #0
    2046:	2301      	movls	r3, #1
    2048:	f7ff ffa0 	bl	1f8c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    204c:	2800      	cmp	r0, #0
    204e:	d1ec      	bne.n	202a <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    2050:	e7e2      	b.n	2018 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    2052:	bf00      	nop

00002054 <Adafruit_I2CDevice::setSpeed(unsigned long)>:
  Serial.println(atwbr);
#endif
  return true;
#elif (ARDUINO >= 157) && !defined(ARDUINO_STM32_FEATHER) &&                   \
    !defined(TinyWireM_h)
  _wire->setClock(desiredclk);
    2054:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
    2056:	b508      	push	{r3, lr}
  _wire->setClock(desiredclk);
    2058:	f7ff f9d2 	bl	1400 <TwoWire::setClock(unsigned long)>

#else
  (void)desiredclk;
  return false;
#endif
}
    205c:	2001      	movs	r0, #1
    205e:	bd08      	pop	{r3, pc}

00002060 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    2060:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    2062:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    2064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    2068:	bf0c      	ite	eq
    206a:	2301      	moveq	r3, #1
    206c:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    206e:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    2070:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2074:	4e63      	ldr	r6, [pc, #396]	; (2204 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    2076:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    207a:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    207c:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    207e:	bf0c      	ite	eq
    2080:	f04f 0a01 	moveq.w	sl, #1
    2084:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2088:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    208c:	2a00      	cmp	r2, #0
    208e:	f000 80b6 	beq.w	21fe <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    2092:	3a01      	subs	r2, #1
    2094:	4604      	mov	r4, r0
    2096:	b2f6      	uxtb	r6, r6
    2098:	4688      	mov	r8, r1
    209a:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    209c:	f8df b170 	ldr.w	fp, [pc, #368]	; 2210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    20a0:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    20a2:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    20a4:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    20a6:	2e00      	cmp	r6, #0
    20a8:	d141      	bne.n	212e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    20aa:	7b63      	ldrb	r3, [r4, #13]
    20ac:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    20b0:	d175      	bne.n	219e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    20b2:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    20b6:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    20ba:	bf14      	ite	ne
    20bc:	2301      	movne	r3, #1
    20be:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    20c0:	1c42      	adds	r2, r0, #1
    20c2:	d02f      	beq.n	2124 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    20c4:	4553      	cmp	r3, sl
    20c6:	d02d      	beq.n	2124 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    20c8:	4619      	mov	r1, r3
    20ca:	b2c0      	uxtb	r0, r0
    20cc:	9301      	str	r3, [sp, #4]
    20ce:	f000 ffff 	bl	30d0 <digitalWrite>
        towrite = send & b;
    20d2:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    20d4:	2101      	movs	r1, #1
    20d6:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    20d8:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    20da:	f000 fff9 	bl	30d0 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    20de:	f994 0011 	ldrsb.w	r0, [r4, #17]
    20e2:	1c42      	adds	r2, r0, #1
    20e4:	d004      	beq.n	20f0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    20e6:	b2c0      	uxtb	r0, r0
    20e8:	f001 f81c 	bl	3124 <digitalRead>
    20ec:	b100      	cbz	r0, 20f0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    20ee:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    20f0:	2100      	movs	r1, #0
    20f2:	7be0      	ldrb	r0, [r4, #15]
    20f4:	f000 ffec 	bl	30d0 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    20f8:	f994 3011 	ldrsb.w	r3, [r4, #17]
    20fc:	3301      	adds	r3, #1
        buffer[i] = reply;
    20fe:	bf18      	it	ne
    2100:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    2104:	7b23      	ldrb	r3, [r4, #12]
    2106:	b94b      	cbnz	r3, 211c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    2108:	006d      	lsls	r5, r5, #1
    210a:	b2ed      	uxtb	r5, r5
    210c:	2d00      	cmp	r5, #0
    210e:	d1ca      	bne.n	20a6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    2110:	9b03      	ldr	r3, [sp, #12]
    2112:	4598      	cmp	r8, r3
    2114:	d073      	beq.n	21fe <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    2116:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    211a:	e7c2      	b.n	20a2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    211c:	086d      	lsrs	r5, r5, #1
    211e:	2d00      	cmp	r5, #0
    2120:	d1c1      	bne.n	20a6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    2122:	e7f5      	b.n	2110 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    2124:	2101      	movs	r1, #1
    2126:	7be0      	ldrb	r0, [r4, #15]
    2128:	f000 ffd2 	bl	30d0 <digitalWrite>
        if (bitdelay_us) {
    212c:	e7d7      	b.n	20de <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    212e:	4b36      	ldr	r3, [pc, #216]	; (2208 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2130:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2134:	681a      	ldr	r2, [r3, #0]
    2136:	4b35      	ldr	r3, [pc, #212]	; (220c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    2138:	fba3 3202 	umull	r3, r2, r3, r2
    213c:	0c92      	lsrs	r2, r2, #18
    213e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2142:	f8db 3004 	ldr.w	r3, [fp, #4]
    2146:	1a5b      	subs	r3, r3, r1
    2148:	429a      	cmp	r2, r3
    214a:	d8fa      	bhi.n	2142 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    214c:	7b63      	ldrb	r3, [r4, #13]
    214e:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    2152:	d140      	bne.n	21d6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    2154:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2158:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    215c:	bf14      	ite	ne
    215e:	2101      	movne	r1, #1
    2160:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2162:	1c43      	adds	r3, r0, #1
    2164:	d007      	beq.n	2176 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    2166:	4551      	cmp	r1, sl
    2168:	d005      	beq.n	2176 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    216a:	b2c0      	uxtb	r0, r0
    216c:	9101      	str	r1, [sp, #4]
    216e:	f000 ffaf 	bl	30d0 <digitalWrite>
        towrite = send & b;
    2172:	9901      	ldr	r1, [sp, #4]
    2174:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    2176:	2101      	movs	r1, #1
    2178:	7be0      	ldrb	r0, [r4, #15]
    217a:	f000 ffa9 	bl	30d0 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    217e:	4b22      	ldr	r3, [pc, #136]	; (2208 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2180:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	4b21      	ldr	r3, [pc, #132]	; (220c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    2188:	fba3 3202 	umull	r3, r2, r3, r2
    218c:	0c92      	lsrs	r2, r2, #18
    218e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2192:	f8db 3004 	ldr.w	r3, [fp, #4]
    2196:	1a5b      	subs	r3, r3, r1
    2198:	429a      	cmp	r2, r3
    219a:	d8fa      	bhi.n	2192 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    219c:	e79f      	b.n	20de <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    219e:	2101      	movs	r1, #1
    21a0:	7be0      	ldrb	r0, [r4, #15]
    21a2:	f000 ff95 	bl	30d0 <digitalWrite>
        if (_mosi != -1) {
    21a6:	f994 0010 	ldrsb.w	r0, [r4, #16]
    21aa:	1c43      	adds	r3, r0, #1
    21ac:	d004      	beq.n	21b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    21ae:	b2c0      	uxtb	r0, r0
    21b0:	ea09 0105 	and.w	r1, r9, r5
    21b4:	f000 ff8c 	bl	30d0 <digitalWrite>
        digitalWrite(_sck, LOW);
    21b8:	2100      	movs	r1, #0
    21ba:	7be0      	ldrb	r0, [r4, #15]
    21bc:	f000 ff88 	bl	30d0 <digitalWrite>
        if (_miso != -1) {
    21c0:	f994 0011 	ldrsb.w	r0, [r4, #17]
    21c4:	1c41      	adds	r1, r0, #1
    21c6:	d09d      	beq.n	2104 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    21c8:	b2c0      	uxtb	r0, r0
    21ca:	f000 ffab 	bl	3124 <digitalRead>
    21ce:	2800      	cmp	r0, #0
    21d0:	d092      	beq.n	20f8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    21d2:	432f      	orrs	r7, r5
    21d4:	e790      	b.n	20f8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    21d6:	2101      	movs	r1, #1
    21d8:	7be0      	ldrb	r0, [r4, #15]
    21da:	f000 ff79 	bl	30d0 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    21de:	4b0a      	ldr	r3, [pc, #40]	; (2208 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    21e0:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    21e4:	681a      	ldr	r2, [r3, #0]
    21e6:	4b09      	ldr	r3, [pc, #36]	; (220c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    21e8:	fba3 3202 	umull	r3, r2, r3, r2
    21ec:	0c92      	lsrs	r2, r2, #18
    21ee:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    21f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    21f6:	1a5b      	subs	r3, r3, r1
    21f8:	429a      	cmp	r2, r3
    21fa:	d8fa      	bhi.n	21f2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    21fc:	e7d3      	b.n	21a6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    21fe:	b005      	add	sp, #20
    2200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2204:	0007a120 	.word	0x0007a120
    2208:	2000118c 	.word	0x2000118c
    220c:	431bde83 	.word	0x431bde83
    2210:	e0001000 	.word	0xe0001000

00002214 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    2214:	b430      	push	{r4, r5}
    2216:	b082      	sub	sp, #8
    2218:	460c      	mov	r4, r1
    221a:	ab02      	add	r3, sp, #8
    221c:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    2220:	7cc3      	ldrb	r3, [r0, #19]
    2222:	2b00      	cmp	r3, #0
    2224:	d030      	beq.n	2288 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    2226:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2228:	7cc3      	ldrb	r3, [r0, #19]
    222a:	07da      	lsls	r2, r3, #31
    222c:	d508      	bpl.n	2240 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    222e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2232:	6945      	ldr	r5, [r0, #20]
    2234:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    2238:	402a      	ands	r2, r5
    223a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    223c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    2240:	079d      	lsls	r5, r3, #30
    2242:	d508      	bpl.n	2256 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2244:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2248:	6985      	ldr	r5, [r0, #24]
    224a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    224e:	402a      	ands	r2, r5
    2250:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2252:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    2256:	0759      	lsls	r1, r3, #29
    2258:	d508      	bpl.n	226c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    225a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    225e:	69c5      	ldr	r5, [r0, #28]
    2260:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    2264:	402a      	ands	r2, r5
    2266:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2268:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    226c:	071a      	lsls	r2, r3, #28
    226e:	d508      	bpl.n	2282 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2270:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2274:	6a05      	ldr	r5, [r0, #32]
    2276:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    227a:	402a      	ands	r2, r5
    227c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    227e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    2282:	06db      	lsls	r3, r3, #27
    2284:	d42f      	bmi.n	22e6 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2286:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2288:	6883      	ldr	r3, [r0, #8]
    228a:	429c      	cmp	r4, r3
    228c:	d035      	beq.n	22fa <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    228e:	4b22      	ldr	r3, [pc, #136]	; (2318 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    2290:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2292:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2294:	4a21      	ldr	r2, [pc, #132]	; (231c <SPIClass::beginTransaction(SPISettings)+0x108>)
    2296:	f3c3 1101 	ubfx	r1, r3, #4, #2
    229a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    229e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    22a2:	3301      	adds	r3, #1
    22a4:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    22a8:	b1cc      	cbz	r4, 22de <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    22aa:	4294      	cmp	r4, r2
    22ac:	d827      	bhi.n	22fe <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    22ae:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    22b2:	fbb2 f2f3 	udiv	r2, r2, r3
    22b6:	4294      	cmp	r4, r2
    22b8:	d32c      	bcc.n	2314 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    22ba:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    22be:	d320      	bcc.n	2302 <SPIClass::beginTransaction(SPISettings)+0xee>
    22c0:	4c17      	ldr	r4, [pc, #92]	; (2320 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    22c2:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    22c4:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    22c6:	2203      	movs	r2, #3
		port().CR = 0;
    22c8:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    22ca:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    22cc:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    22ce:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    22d0:	2201      	movs	r2, #1
		port().CCR = _ccr;
    22d2:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    22d4:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    22d6:	611a      	str	r2, [r3, #16]
	}
    22d8:	b002      	add	sp, #8
    22da:	bc30      	pop	{r4, r5}
    22dc:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    22de:	4299      	cmp	r1, r3
    22e0:	d3ef      	bcc.n	22c2 <SPIClass::beginTransaction(SPISettings)+0xae>
    22e2:	1c53      	adds	r3, r2, #1
    22e4:	e7e9      	b.n	22ba <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    22e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    22ea:	6a41      	ldr	r1, [r0, #36]	; 0x24
    22ec:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    22f0:	400b      	ands	r3, r1
    22f2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    22f4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    22f8:	e7c5      	b.n	2286 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    22fa:	68c4      	ldr	r4, [r0, #12]
    22fc:	e7e2      	b.n	22c4 <SPIClass::beginTransaction(SPISettings)+0xb0>
    22fe:	2400      	movs	r4, #0
    2300:	e7df      	b.n	22c2 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    2302:	2b02      	cmp	r3, #2
    2304:	d9fb      	bls.n	22fe <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    2306:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2308:	085a      	lsrs	r2, r3, #1
    230a:	0214      	lsls	r4, r2, #8
    230c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    2310:	431c      	orrs	r4, r3
    2312:	e7d6      	b.n	22c2 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    2314:	461a      	mov	r2, r3
    2316:	e7e4      	b.n	22e2 <SPIClass::beginTransaction(SPISettings)+0xce>
    2318:	400fc000 	.word	0x400fc000
    231c:	200006e4 	.word	0x200006e4
    2320:	007f7fff 	.word	0x007f7fff

00002324 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    2324:	b510      	push	{r4, lr}
    2326:	4604      	mov	r4, r0
  if (_cs != -1) {
    2328:	f990 000e 	ldrsb.w	r0, [r0, #14]
    232c:	1c43      	adds	r3, r0, #1
    232e:	d003      	beq.n	2338 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    2330:	2101      	movs	r1, #1
    2332:	b2c0      	uxtb	r0, r0
    2334:	f000 fecc 	bl	30d0 <digitalWrite>
  if (_spi) {
    2338:	6823      	ldr	r3, [r4, #0]
    233a:	b323      	cbz	r3, 2386 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    233c:	7cda      	ldrb	r2, [r3, #19]
    233e:	b312      	cbz	r2, 2386 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2340:	07d1      	lsls	r1, r2, #31
    2342:	d504      	bpl.n	234e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    2344:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2346:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    234a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    234e:	0794      	lsls	r4, r2, #30
    2350:	d504      	bpl.n	235c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    2352:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2354:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2358:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    235c:	0750      	lsls	r0, r2, #29
    235e:	d504      	bpl.n	236a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    2360:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2362:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2366:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    236a:	0711      	lsls	r1, r2, #28
    236c:	d504      	bpl.n	2378 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    236e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    2370:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2374:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2378:	06d2      	lsls	r2, r2, #27
    237a:	d504      	bpl.n	2386 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    237c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    237e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2382:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    2386:	bd10      	pop	{r4, pc}

00002388 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    2388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    238c:	4604      	mov	r4, r0
    238e:	b082      	sub	sp, #8
  if (_spi) {
    2390:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    2392:	468a      	mov	sl, r1
    2394:	4690      	mov	r8, r2
    2396:	461e      	mov	r6, r3
    2398:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    239a:	b120      	cbz	r0, 23a6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    239c:	6863      	ldr	r3, [r4, #4]
    239e:	e893 0006 	ldmia.w	r3, {r1, r2}
    23a2:	f7ff ff37 	bl	2214 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    23a6:	f994 000e 	ldrsb.w	r0, [r4, #14]
    23aa:	1c43      	adds	r3, r0, #1
    23ac:	d142      	bne.n	2434 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    23ae:	b1d5      	cbz	r5, 23e6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    23b0:	3e01      	subs	r6, #1
    23b2:	eb06 0905 	add.w	r9, r6, r5
    23b6:	f10d 0507 	add.w	r5, sp, #7
    23ba:	e003      	b.n	23c4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    23bc:	f7ff fe50 	bl	2060 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    23c0:	454e      	cmp	r6, r9
    23c2:	d010      	beq.n	23e6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    23c4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    23c8:	2201      	movs	r2, #1
  if (_spi) {
    23ca:	6827      	ldr	r7, [r4, #0]
    23cc:	4629      	mov	r1, r5
    23ce:	4620      	mov	r0, r4
  uint8_t data = send;
    23d0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    23d4:	2f00      	cmp	r7, #0
    23d6:	d0f1      	beq.n	23bc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    23d8:	4613      	mov	r3, r2
    23da:	4638      	mov	r0, r7
    23dc:	462a      	mov	r2, r5
    23de:	f000 f8c3 	bl	2568 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    23e2:	454e      	cmp	r6, r9
    23e4:	d1ee      	bne.n	23c4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    23e6:	f1b8 0f00 	cmp.w	r8, #0
    23ea:	d01c      	beq.n	2426 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    23ec:	44d0      	add	r8, sl
    23ee:	f10a 36ff 	add.w	r6, sl, #4294967295
    23f2:	f10d 0507 	add.w	r5, sp, #7
    23f6:	f108 38ff 	add.w	r8, r8, #4294967295
    23fa:	e003      	b.n	2404 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    23fc:	f7ff fe30 	bl	2060 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    2400:	45b0      	cmp	r8, r6
    2402:	d010      	beq.n	2426 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    2404:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    2408:	2201      	movs	r2, #1
  if (_spi) {
    240a:	6827      	ldr	r7, [r4, #0]
    240c:	4629      	mov	r1, r5
    240e:	4620      	mov	r0, r4
  uint8_t data = send;
    2410:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2414:	2f00      	cmp	r7, #0
    2416:	d0f1      	beq.n	23fc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    2418:	4613      	mov	r3, r2
    241a:	4638      	mov	r0, r7
    241c:	462a      	mov	r2, r5
    241e:	f000 f8a3 	bl	2568 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    2422:	45b0      	cmp	r8, r6
    2424:	d1ee      	bne.n	2404 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    2426:	4620      	mov	r0, r4
    2428:	f7ff ff7c 	bl	2324 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    242c:	2001      	movs	r0, #1
    242e:	b002      	add	sp, #8
    2430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    2434:	b2c0      	uxtb	r0, r0
    2436:	2100      	movs	r1, #0
    2438:	f000 fe4a 	bl	30d0 <digitalWrite>
    243c:	e7b7      	b.n	23ae <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    243e:	bf00      	nop

00002440 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    2440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2444:	4604      	mov	r4, r0
    2446:	b083      	sub	sp, #12
  if (_spi) {
    2448:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    244a:	460f      	mov	r7, r1
    244c:	4615      	mov	r5, r2
    244e:	469b      	mov	fp, r3
    2450:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2454:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    2458:	b120      	cbz	r0, 2464 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    245a:	6863      	ldr	r3, [r4, #4]
    245c:	e893 0006 	ldmia.w	r3, {r1, r2}
    2460:	f7ff fed8 	bl	2214 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    2464:	f994 000e 	ldrsb.w	r0, [r4, #14]
    2468:	1c43      	adds	r3, r0, #1
    246a:	d148      	bne.n	24fe <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    246c:	b1d5      	cbz	r5, 24a4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    246e:	3f01      	subs	r7, #1
    2470:	eb07 0905 	add.w	r9, r7, r5
    2474:	f10d 0507 	add.w	r5, sp, #7
    2478:	e003      	b.n	2482 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    247a:	f7ff fdf1 	bl	2060 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    247e:	454f      	cmp	r7, r9
    2480:	d010      	beq.n	24a4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    2482:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2486:	2201      	movs	r2, #1
  if (_spi) {
    2488:	6826      	ldr	r6, [r4, #0]
    248a:	4629      	mov	r1, r5
    248c:	4620      	mov	r0, r4
  uint8_t data = send;
    248e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2492:	2e00      	cmp	r6, #0
    2494:	d0f1      	beq.n	247a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    2496:	4613      	mov	r3, r2
    2498:	4630      	mov	r0, r6
    249a:	462a      	mov	r2, r5
    249c:	f000 f864 	bl	2568 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    24a0:	454f      	cmp	r7, r9
    24a2:	d1ee      	bne.n	2482 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    24a4:	f1ba 0f00 	cmp.w	sl, #0
    24a8:	d022      	beq.n	24f0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    24aa:	44da      	add	sl, fp
    24ac:	f10b 36ff 	add.w	r6, fp, #4294967295
    24b0:	f10d 0507 	add.w	r5, sp, #7
    24b4:	f10a 3aff 	add.w	sl, sl, #4294967295
    24b8:	e007      	b.n	24ca <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    24ba:	f7ff fdd1 	bl	2060 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    24be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    24c2:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    24c6:	45b2      	cmp	sl, r6
    24c8:	d012      	beq.n	24f0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    24ca:	6827      	ldr	r7, [r4, #0]
    24cc:	2201      	movs	r2, #1
    24ce:	4629      	mov	r1, r5
    24d0:	4620      	mov	r0, r4
  uint8_t data = send;
    24d2:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    24d6:	2f00      	cmp	r7, #0
    24d8:	d0ef      	beq.n	24ba <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    24da:	4613      	mov	r3, r2
    24dc:	4638      	mov	r0, r7
    24de:	462a      	mov	r2, r5
    24e0:	f000 f842 	bl	2568 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    24e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    24e8:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    24ec:	45b2      	cmp	sl, r6
    24ee:	d1ec      	bne.n	24ca <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    24f0:	4620      	mov	r0, r4
    24f2:	f7ff ff17 	bl	2324 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    24f6:	2001      	movs	r0, #1
    24f8:	b003      	add	sp, #12
    24fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    24fe:	b2c0      	uxtb	r0, r0
    2500:	2100      	movs	r1, #0
    2502:	f000 fde5 	bl	30d0 <digitalWrite>
    2506:	e7b1      	b.n	246c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00002508 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2508:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    250a:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    250c:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    2510:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2512:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    2514:	b1a3      	cbz	r3, 2540 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2516:	b321      	cbz	r1, 2562 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    2518:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    251c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    251e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2520:	6f25      	ldr	r5, [r4, #112]	; 0x70
    2522:	07af      	lsls	r7, r5, #30
    2524:	d407      	bmi.n	2536 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    2526:	4615      	mov	r5, r2
				count_read--;
    2528:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    252a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    252c:	b11a      	cbz	r2, 2536 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    252e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2532:	462a      	mov	r2, r5
    2534:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    2536:	6965      	ldr	r5, [r4, #20]
    2538:	07ed      	lsls	r5, r5, #31
    253a:	d5f1      	bpl.n	2520 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    253c:	2b00      	cmp	r3, #0
    253e:	d1ea      	bne.n	2516 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2540:	b16e      	cbz	r6, 255e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2542:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2544:	6f19      	ldr	r1, [r3, #112]	; 0x70
    2546:	0789      	lsls	r1, r1, #30
    2548:	d4fa      	bmi.n	2540 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    254a:	4611      	mov	r1, r2
			count_read--;
    254c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2550:	2a00      	cmp	r2, #0
    2552:	d0f5      	beq.n	2540 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2554:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2558:	460a      	mov	r2, r1
	while (count_read) {
    255a:	2e00      	cmp	r6, #0
    255c:	d1f1      	bne.n	2542 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    255e:	bcf0      	pop	{r4, r5, r6, r7}
    2560:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2562:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    2566:	e7d9      	b.n	251c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002568 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2568:	b10b      	cbz	r3, 256e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    256a:	f7ff bfcd 	b.w	2508 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    256e:	4770      	bx	lr

00002570 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/**************************************************************************/
/*!
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {}
    2570:	2200      	movs	r2, #0
    2572:	6002      	str	r2, [r0, #0]
    2574:	4770      	bx	lr
    2576:	bf00      	nop

00002578 <Adafruit_MCP4725::begin(unsigned char, TwoWire*)>:
    @param i2c_address The I2C address of the DAC, defaults to 0x62
    @param wire The I2C TwoWire object to use, defaults to &Wire
    @returns True if DAC was found on the I2C address.
*/
/**************************************************************************/
bool Adafruit_MCP4725::begin(uint8_t i2c_address, TwoWire *wire) {
    2578:	b530      	push	{r4, r5, lr}
    257a:	4604      	mov	r4, r0
  if (i2c_dev) {
    257c:	6800      	ldr	r0, [r0, #0]
bool Adafruit_MCP4725::begin(uint8_t i2c_address, TwoWire *wire) {
    257e:	b083      	sub	sp, #12
    2580:	460d      	mov	r5, r1
  if (i2c_dev) {
    2582:	b120      	cbz	r0, 258e <Adafruit_MCP4725::begin(unsigned char, TwoWire*)+0x16>
    delete i2c_dev;
    2584:	2110      	movs	r1, #16
    2586:	9201      	str	r2, [sp, #4]
    2588:	f000 ff3e 	bl	3408 <operator delete(void*, unsigned int)>
    258c:	9a01      	ldr	r2, [sp, #4]
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
    258e:	2010      	movs	r0, #16
    2590:	9201      	str	r2, [sp, #4]
    2592:	f000 ff37 	bl	3404 <operator new(unsigned int)>
    2596:	4629      	mov	r1, r5
    2598:	4605      	mov	r5, r0
    259a:	9a01      	ldr	r2, [sp, #4]
    259c:	f7ff fc9c 	bl	1ed8 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>

  if (!i2c_dev->begin()) {
    25a0:	2101      	movs	r1, #1
    25a2:	4628      	mov	r0, r5
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
    25a4:	6025      	str	r5, [r4, #0]
    return false;
  }

  return true;
}
    25a6:	b003      	add	sp, #12
    25a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
    25ac:	f7ff bc9e 	b.w	1eec <Adafruit_I2CDevice::begin(bool)>

000025b0 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>:
    to the DAC, defaults to 400 KHz
    @returns True if able to write the value over I2C
*/
/**************************************************************************/
bool Adafruit_MCP4725::setVoltage(uint16_t output, bool writeEEPROM,
                                  uint32_t i2c_frequency) {
    25b0:	b570      	push	{r4, r5, r6, lr}
    25b2:	4616      	mov	r6, r2
    25b4:	b084      	sub	sp, #16
    25b6:	460c      	mov	r4, r1
    25b8:	4605      	mov	r5, r0
  i2c_dev->setSpeed(i2c_frequency); // Set I2C frequency to desired speed
    25ba:	4619      	mov	r1, r3
    25bc:	6800      	ldr	r0, [r0, #0]
    25be:	f7ff fd49 	bl	2054 <Adafruit_I2CDevice::setSpeed(unsigned long)>
  uint8_t packet[3];

  if (writeEEPROM) {
    packet[0] = MCP4725_CMD_WRITEDACEEPROM;
  } else {
    packet[0] = MCP4725_CMD_WRITEDAC;
    25c2:	2e00      	cmp	r6, #0
  }
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    25c4:	ea4f 1214 	mov.w	r2, r4, lsr #4
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)

  if (!i2c_dev->write(packet, 3)) {
    25c8:	f04f 0300 	mov.w	r3, #0
    packet[0] = MCP4725_CMD_WRITEDAC;
    25cc:	bf14      	ite	ne
    25ce:	2160      	movne	r1, #96	; 0x60
    25d0:	2140      	moveq	r1, #64	; 0x40
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    25d2:	0124      	lsls	r4, r4, #4
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    25d4:	f88d 200d 	strb.w	r2, [sp, #13]
    25d8:	f88d 100c 	strb.w	r1, [sp, #12]
  if (!i2c_dev->write(packet, 3)) {
    25dc:	2203      	movs	r2, #3
    25de:	a903      	add	r1, sp, #12
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    25e0:	f88d 400e 	strb.w	r4, [sp, #14]
  if (!i2c_dev->write(packet, 3)) {
    25e4:	e9cd 3300 	strd	r3, r3, [sp]
    25e8:	2301      	movs	r3, #1
    25ea:	6828      	ldr	r0, [r5, #0]
    25ec:	f7ff fc9a 	bl	1f24 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    25f0:	4604      	mov	r4, r0
    25f2:	b118      	cbz	r0, 25fc <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x4c>
    return false;
  }

  i2c_dev->setSpeed(100000); // reset to arduino default
    25f4:	4903      	ldr	r1, [pc, #12]	; (2604 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x54>)
    25f6:	6828      	ldr	r0, [r5, #0]
    25f8:	f7ff fd2c 	bl	2054 <Adafruit_I2CDevice::setSpeed(unsigned long)>
  return true;
}
    25fc:	4620      	mov	r0, r4
    25fe:	b004      	add	sp, #16
    2600:	bd70      	pop	{r4, r5, r6, pc}
    2602:	bf00      	nop
    2604:	000186a0 	.word	0x000186a0

00002608 <EventResponder::runFromInterrupt()>:
{
    2608:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    260a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    260e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2610:	4c0c      	ldr	r4, [pc, #48]	; (2644 <EventResponder::runFromInterrupt()+0x3c>)
    2612:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2614:	b180      	cbz	r0, 2638 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    2616:	4e0c      	ldr	r6, [pc, #48]	; (2648 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2618:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    261a:	6943      	ldr	r3, [r0, #20]
    261c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    261e:	b173      	cbz	r3, 263e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2620:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2622:	b902      	cbnz	r2, 2626 <EventResponder::runFromInterrupt()+0x1e>
    2624:	b662      	cpsie	i
			(*(first->_function))(*first);
    2626:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2628:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    262a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    262c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2630:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2632:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2634:	2800      	cmp	r0, #0
    2636:	d1f0      	bne.n	261a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2638:	b902      	cbnz	r2, 263c <EventResponder::runFromInterrupt()+0x34>
    263a:	b662      	cpsie	i
}
    263c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    263e:	6033      	str	r3, [r6, #0]
    2640:	e7ef      	b.n	2622 <EventResponder::runFromInterrupt()+0x1a>
    2642:	bf00      	nop
    2644:	20002510 	.word	0x20002510
    2648:	2000250c 	.word	0x2000250c

0000264c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    264c:	f7ff bfdc 	b.w	2608 <EventResponder::runFromInterrupt()>

00002650 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2650:	4904      	ldr	r1, [pc, #16]	; (2664 <systick_isr+0x14>)
	systick_millis_count++;
    2652:	4a05      	ldr	r2, [pc, #20]	; (2668 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2654:	6849      	ldr	r1, [r1, #4]
    2656:	4b05      	ldr	r3, [pc, #20]	; (266c <systick_isr+0x1c>)
    2658:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    265a:	6813      	ldr	r3, [r2, #0]
    265c:	3301      	adds	r3, #1
    265e:	6013      	str	r3, [r2, #0]
}
    2660:	4770      	bx	lr
    2662:	bf00      	nop
    2664:	e0001000 	.word	0xe0001000
    2668:	2000333c 	.word	0x2000333c
    266c:	20003338 	.word	0x20003338

00002670 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    2670:	4801      	ldr	r0, [pc, #4]	; (2678 <IRQHandler_Serial1+0x8>)
    2672:	f002 bd5d 	b.w	5130 <HardwareSerialIMXRT::IRQHandler()>
    2676:	bf00      	nop
    2678:	200011a0 	.word	0x200011a0

0000267c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    2680:	460c      	mov	r4, r1
    2682:	b1d1      	cbz	r1, 26ba <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    2684:	b1ea      	cbz	r2, 26c2 <Print::write(unsigned char const*, unsigned int)+0x46>
    2686:	4680      	mov	r8, r0
    2688:	188e      	adds	r6, r1, r2
	size_t count = 0;
    268a:	2500      	movs	r5, #0
    268c:	4f0e      	ldr	r7, [pc, #56]	; (26c8 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    268e:	e004      	b.n	269a <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2690:	f002 f980 	bl	4994 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    2694:	42b4      	cmp	r4, r6
    2696:	4405      	add	r5, r0
    2698:	d00c      	beq.n	26b4 <Print::write(unsigned char const*, unsigned int)+0x38>
    269a:	f8d8 3000 	ldr.w	r3, [r8]
    269e:	f814 0b01 	ldrb.w	r0, [r4], #1
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	42bb      	cmp	r3, r7
    26a6:	d0f3      	beq.n	2690 <Print::write(unsigned char const*, unsigned int)+0x14>
    26a8:	4601      	mov	r1, r0
    26aa:	4640      	mov	r0, r8
    26ac:	4798      	blx	r3
    26ae:	42b4      	cmp	r4, r6
    26b0:	4405      	add	r5, r0
    26b2:	d1f2      	bne.n	269a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    26b4:	4628      	mov	r0, r5
    26b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    26ba:	460d      	mov	r5, r1
}
    26bc:	4628      	mov	r0, r5
    26be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    26c2:	4615      	mov	r5, r2
    26c4:	e7f6      	b.n	26b4 <Print::write(unsigned char const*, unsigned int)+0x38>
    26c6:	bf00      	nop
    26c8:	00001495 	.word	0x00001495

000026cc <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    26cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    26d0:	688c      	ldr	r4, [r1, #8]
    26d2:	b08a      	sub	sp, #40	; 0x28
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    26d4:	b1dc      	cbz	r4, 270e <Print::print(String const&)+0x42>
	unsigned int index = 0;
    26d6:	2500      	movs	r5, #0
    26d8:	4688      	mov	r8, r1
    26da:	4606      	mov	r6, r0
	size_t count = 0;
    26dc:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    26de:	462b      	mov	r3, r5
    26e0:	2221      	movs	r2, #33	; 0x21
    26e2:	a901      	add	r1, sp, #4
    26e4:	4640      	mov	r0, r8
    26e6:	f000 fa2d 	bl	2b44 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    26ea:	2c20      	cmp	r4, #32
    26ec:	4622      	mov	r2, r4
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    26ee:	6833      	ldr	r3, [r6, #0]
    26f0:	bf28      	it	cs
    26f2:	2220      	movcs	r2, #32
    26f4:	a901      	add	r1, sp, #4
    26f6:	4630      	mov	r0, r6
    26f8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    26fa:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    26fc:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    26fe:	4798      	blx	r3
    2700:	4407      	add	r7, r0
	while (len > 0) {
    2702:	2c00      	cmp	r4, #0
    2704:	d1eb      	bne.n	26de <Print::print(String const&)+0x12>
	}
	return count;
}
    2706:	4638      	mov	r0, r7
    2708:	b00a      	add	sp, #40	; 0x28
    270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    270e:	4627      	mov	r7, r4
}
    2710:	4638      	mov	r0, r7
    2712:	b00a      	add	sp, #40	; 0x28
    2714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002718 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    2718:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    271a:	6803      	ldr	r3, [r0, #0]
{
    271c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    271e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    2722:	2202      	movs	r2, #2
    2724:	a901      	add	r1, sp, #4
    2726:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    2728:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    272c:	4798      	blx	r3
}
    272e:	b003      	add	sp, #12
    2730:	f85d fb04 	ldr.w	pc, [sp], #4

00002734 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2734:	4b05      	ldr	r3, [pc, #20]	; (274c <_write+0x18>)
    2736:	2802      	cmp	r0, #2
    2738:	bf88      	it	hi
    273a:	4603      	movhi	r3, r0
{
    273c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    273e:	681c      	ldr	r4, [r3, #0]
    2740:	4618      	mov	r0, r3
    2742:	6863      	ldr	r3, [r4, #4]
}
    2744:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    2748:	4718      	bx	r3
    274a:	bf00      	nop
    274c:	20001190 	.word	0x20001190

00002750 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    2750:	f002 b8aa 	b.w	48a8 <usb_serial_peekchar>

00002754 <Stream::readString(unsigned int)>:
	*buffer = 0;
	return index; // return number of characters, not including null terminator
}

String Stream::readString(size_t max)
{
    2754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2758:	4690      	mov	r8, r2
	String str;
	size_t length = 0;
    275a:	2700      	movs	r7, #0
    275c:	4c18      	ldr	r4, [pc, #96]	; (27c0 <Stream::readString(unsigned int)+0x6c>)
{
    275e:	468a      	mov	sl, r1
    2760:	f108 38ff 	add.w	r8, r8, #4294967295
    2764:	4e17      	ldr	r6, [pc, #92]	; (27c4 <Stream::readString(unsigned int)+0x70>)
	String str;
    2766:	2100      	movs	r1, #0
{
    2768:	4681      	mov	r9, r0
	String str;
    276a:	f000 f869 	bl	2840 <String::String(char const*)>
	return systick_millis_count;
    276e:	6825      	ldr	r5, [r4, #0]
    2770:	e00b      	b.n	278a <Stream::readString(unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    2772:	f002 f8ff 	bl	4974 <usb_serial_getchar>
    if (c >= 0) return c;
    2776:	2800      	cmp	r0, #0
    2778:	da10      	bge.n	279c <Stream::readString(unsigned int)+0x48>
    yield();
    277a:	f002 f99f 	bl	4abc <yield>
    277e:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    2780:	f8da 2008 	ldr.w	r2, [sl, #8]
    2784:	1b5b      	subs	r3, r3, r5
    2786:	4293      	cmp	r3, r2
    2788:	d213      	bcs.n	27b2 <Stream::readString(unsigned int)+0x5e>
    c = read();
    278a:	f8da 3000 	ldr.w	r3, [sl]
    278e:	695b      	ldr	r3, [r3, #20]
    2790:	42b3      	cmp	r3, r6
    2792:	d0ee      	beq.n	2772 <Stream::readString(unsigned int)+0x1e>
    2794:	4650      	mov	r0, sl
    2796:	4798      	blx	r3
    if (c >= 0) return c;
    2798:	2800      	cmp	r0, #0
    279a:	dbee      	blt.n	277a <Stream::readString(unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0) break;
    279c:	d006      	beq.n	27ac <Stream::readString(unsigned int)+0x58>
		str += (char)c;
		length++;
    279e:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    27a0:	b2c1      	uxtb	r1, r0
    27a2:	4648      	mov	r0, r9
    27a4:	f000 f9a0 	bl	2ae8 <String::append(char)>
	while (length < max || !max) {
    27a8:	4547      	cmp	r7, r8
    27aa:	d9e0      	bls.n	276e <Stream::readString(unsigned int)+0x1a>
	}
	return str;
}
    27ac:	4648      	mov	r0, r9
    27ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    27b2:	2301      	movs	r3, #1
    27b4:	4648      	mov	r0, r9
    27b6:	f88a 300c 	strb.w	r3, [sl, #12]
    27ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    27be:	bf00      	nop
    27c0:	2000333c 	.word	0x2000333c
    27c4:	00001491 	.word	0x00001491

000027c8 <Stream::readStringUntil(char, unsigned int)>:

String Stream::readStringUntil(char terminator, size_t max)
{
    27c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    27cc:	2700      	movs	r7, #0
{
    27ce:	468b      	mov	fp, r1
    27d0:	4681      	mov	r9, r0
    27d2:	4692      	mov	sl, r2
	String str;
    27d4:	4639      	mov	r1, r7
    27d6:	f103 38ff 	add.w	r8, r3, #4294967295
    27da:	4c17      	ldr	r4, [pc, #92]	; (2838 <Stream::readStringUntil(char, unsigned int)+0x70>)
    27dc:	4e17      	ldr	r6, [pc, #92]	; (283c <Stream::readStringUntil(char, unsigned int)+0x74>)
    27de:	f000 f82f 	bl	2840 <String::String(char const*)>
    27e2:	6825      	ldr	r5, [r4, #0]
    27e4:	e00b      	b.n	27fe <Stream::readStringUntil(char, unsigned int)+0x36>
    27e6:	f002 f8c5 	bl	4974 <usb_serial_getchar>
    if (c >= 0) return c;
    27ea:	2800      	cmp	r0, #0
    27ec:	da10      	bge.n	2810 <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    27ee:	f002 f965 	bl	4abc <yield>
    27f2:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    27f4:	f8db 2008 	ldr.w	r2, [fp, #8]
    27f8:	1b5b      	subs	r3, r3, r5
    27fa:	4293      	cmp	r3, r2
    27fc:	d215      	bcs.n	282a <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    27fe:	f8db 3000 	ldr.w	r3, [fp]
    2802:	695b      	ldr	r3, [r3, #20]
    2804:	42b3      	cmp	r3, r6
    2806:	d0ee      	beq.n	27e6 <Stream::readStringUntil(char, unsigned int)+0x1e>
    2808:	4658      	mov	r0, fp
    280a:	4798      	blx	r3
    if (c >= 0) return c;
    280c:	2800      	cmp	r0, #0
    280e:	dbee      	blt.n	27ee <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    2810:	d008      	beq.n	2824 <Stream::readStringUntil(char, unsigned int)+0x5c>
    2812:	4582      	cmp	sl, r0
    2814:	d006      	beq.n	2824 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    2816:	3701      	adds	r7, #1
    2818:	b2c1      	uxtb	r1, r0
    281a:	4648      	mov	r0, r9
    281c:	f000 f964 	bl	2ae8 <String::append(char)>
	while (length < max || !max) {
    2820:	4547      	cmp	r7, r8
    2822:	d9de      	bls.n	27e2 <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    2824:	4648      	mov	r0, r9
    2826:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    282a:	2301      	movs	r3, #1
    282c:	4648      	mov	r0, r9
    282e:	f88b 300c 	strb.w	r3, [fp, #12]
    2832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2836:	bf00      	nop
    2838:	2000333c 	.word	0x2000333c
    283c:	00001491 	.word	0x00001491

00002840 <String::String(char const*)>:
String::String(const char *cstr)
    2840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer = NULL;
    2842:	2600      	movs	r6, #0
String::String(const char *cstr)
    2844:	4604      	mov	r4, r0
	capacity = 0;
    2846:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    284a:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    284c:	b129      	cbz	r1, 285a <String::String(char const*)+0x1a>
    284e:	4608      	mov	r0, r1
    2850:	460d      	mov	r5, r1
    2852:	f005 fb35 	bl	7ec0 <strlen>
	if (length == 0) {
    2856:	4607      	mov	r7, r0
    2858:	b908      	cbnz	r0, 285e <String::String(char const*)+0x1e>
}
    285a:	4620      	mov	r0, r4
    285c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    285e:	3001      	adds	r0, #1
    2860:	f002 fe5e 	bl	5520 <malloc>
	if (newbuffer) {
    2864:	2800      	cmp	r0, #0
    2866:	d0f8      	beq.n	285a <String::String(char const*)+0x1a>
	strcpy(buffer, cstr);
    2868:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    286a:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    286c:	6020      	str	r0, [r4, #0]
	len = length;
    286e:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    2872:	f005 fac3 	bl	7dfc <strcpy>
}
    2876:	4620      	mov	r0, r4
    2878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    287a:	bf00      	nop

0000287c <String::String(String const&)>:
String::String(const String &value)
    287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    287e:	4288      	cmp	r0, r1
	buffer = NULL;
    2880:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    2884:	4604      	mov	r4, r0
	len = 0;
    2886:	6085      	str	r5, [r0, #8]
	capacity = 0;
    2888:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    288c:	d002      	beq.n	2894 <String::String(String const&)+0x18>
    288e:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    2890:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    2892:	b90e      	cbnz	r6, 2898 <String::String(String const&)+0x1c>
}
    2894:	4620      	mov	r0, r4
    2896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2898:	1c70      	adds	r0, r6, #1
    289a:	f002 fe41 	bl	5520 <malloc>
	if (newbuffer) {
    289e:	2800      	cmp	r0, #0
    28a0:	d0f8      	beq.n	2894 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    28a2:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    28a4:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    28a6:	6020      	str	r0, [r4, #0]
	len = length;
    28a8:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    28ac:	f005 faa6 	bl	7dfc <strcpy>
}
    28b0:	4620      	mov	r0, r4
    28b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000028b4 <String::String(String&&)>:
	buffer = NULL;
    28b4:	2300      	movs	r3, #0
	if (&rhs == this) return;
    28b6:	4288      	cmp	r0, r1
	capacity = 0;
    28b8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    28bc:	6083      	str	r3, [r0, #8]
	if (&rhs == this) return;
    28be:	d00c      	beq.n	28da <String::String(String&&)+0x26>
String::String(String &&rval)
    28c0:	b410      	push	{r4}
	capacity = rhs.capacity;
    28c2:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    28c6:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    28ca:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    28ce:	688a      	ldr	r2, [r1, #8]
}
    28d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    28d4:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    28d6:	6082      	str	r2, [r0, #8]
}
    28d8:	4770      	bx	lr
    28da:	4770      	bx	lr

000028dc <String::~String()>:
String::~String()
    28dc:	b510      	push	{r4, lr}
    28de:	4604      	mov	r4, r0
	free(buffer);
    28e0:	6800      	ldr	r0, [r0, #0]
    28e2:	f002 fe25 	bl	5530 <free>
}
    28e6:	4620      	mov	r0, r4
    28e8:	bd10      	pop	{r4, pc}
    28ea:	bf00      	nop

000028ec <String::copy(char const*, unsigned int)>:
{
    28ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ee:	4604      	mov	r4, r0
	if (length == 0) {
    28f0:	4615      	mov	r5, r2
    28f2:	b932      	cbnz	r2, 2902 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    28f4:	6803      	ldr	r3, [r0, #0]
    28f6:	b103      	cbz	r3, 28fa <String::copy(char const*, unsigned int)+0xe>
    28f8:	701a      	strb	r2, [r3, #0]
		len = 0;
    28fa:	2300      	movs	r3, #0
}
    28fc:	4620      	mov	r0, r4
		len = 0;
    28fe:	60a3      	str	r3, [r4, #8]
}
    2900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    2902:	6843      	ldr	r3, [r0, #4]
    2904:	460e      	mov	r6, r1
    2906:	429a      	cmp	r2, r3
    2908:	d91c      	bls.n	2944 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    290a:	1c51      	adds	r1, r2, #1
    290c:	6800      	ldr	r0, [r0, #0]
    290e:	f003 f8d3 	bl	5ab8 <realloc>
	if (newbuffer) {
    2912:	4607      	mov	r7, r0
    2914:	b160      	cbz	r0, 2930 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    2916:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2918:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    291c:	b90b      	cbnz	r3, 2922 <String::copy(char const*, unsigned int)+0x36>
    291e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    2920:	6827      	ldr	r7, [r4, #0]
    2922:	4631      	mov	r1, r6
    2924:	4638      	mov	r0, r7
	len = length;
    2926:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    2928:	f005 fa68 	bl	7dfc <strcpy>
}
    292c:	4620      	mov	r0, r4
    292e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    2930:	6820      	ldr	r0, [r4, #0]
    2932:	b110      	cbz	r0, 293a <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    2934:	f002 fdfc 	bl	5530 <free>
			buffer = NULL;
    2938:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    293a:	2300      	movs	r3, #0
}
    293c:	4620      	mov	r0, r4
		len = capacity = 0;
    293e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    2942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    2944:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    2946:	4631      	mov	r1, r6
	len = length;
    2948:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    294a:	4638      	mov	r0, r7
    294c:	f005 fa56 	bl	7dfc <strcpy>
	return *this;
    2950:	e7ec      	b.n	292c <String::copy(char const*, unsigned int)+0x40>
    2952:	bf00      	nop

00002954 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    2954:	b510      	push	{r4, lr}
	buffer = NULL;
    2956:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    2958:	b08a      	sub	sp, #40	; 0x28
    295a:	4604      	mov	r4, r0
	itoa(value, buf, base);
    295c:	4608      	mov	r0, r1
    295e:	a901      	add	r1, sp, #4
	len = 0;
    2960:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    2962:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    2966:	f002 fdc5 	bl	54f4 <itoa>
		copy(cstr, strlen(cstr));
    296a:	a801      	add	r0, sp, #4
    296c:	f005 faa8 	bl	7ec0 <strlen>
    2970:	a901      	add	r1, sp, #4
    2972:	4602      	mov	r2, r0
    2974:	4620      	mov	r0, r4
    2976:	f7ff ffb9 	bl	28ec <String::copy(char const*, unsigned int)>
}
    297a:	4620      	mov	r0, r4
    297c:	b00a      	add	sp, #40	; 0x28
    297e:	bd10      	pop	{r4, pc}

00002980 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    2980:	b510      	push	{r4, lr}
	buffer = NULL;
    2982:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    2984:	b08a      	sub	sp, #40	; 0x28
    2986:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    2988:	4608      	mov	r0, r1
    298a:	a901      	add	r1, sp, #4
	len = 0;
    298c:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    298e:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    2992:	f000 fd3b 	bl	340c <ultoa>
		copy(cstr, strlen(cstr));
    2996:	a801      	add	r0, sp, #4
    2998:	f005 fa92 	bl	7ec0 <strlen>
    299c:	a901      	add	r1, sp, #4
    299e:	4602      	mov	r2, r0
    29a0:	4620      	mov	r0, r4
    29a2:	f7ff ffa3 	bl	28ec <String::copy(char const*, unsigned int)>
}
    29a6:	4620      	mov	r0, r4
    29a8:	b00a      	add	sp, #40	; 0x28
    29aa:	bd10      	pop	{r4, pc}

000029ac <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    29ac:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    29ae:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    29b0:	4604      	mov	r4, r0
    29b2:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    29b4:	1c88      	adds	r0, r1, #2
	len = 0;
    29b6:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    29b8:	466a      	mov	r2, sp
	capacity = 0;
    29ba:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    29be:	f000 fd57 	bl	3470 <dtostrf>
	if (cstr) {
    29c2:	4605      	mov	r5, r0
    29c4:	b148      	cbz	r0, 29da <String::String(float, unsigned char)+0x2e>
		copy(cstr, strlen(cstr));
    29c6:	f005 fa7b 	bl	7ec0 <strlen>
    29ca:	4629      	mov	r1, r5
    29cc:	4602      	mov	r2, r0
    29ce:	4620      	mov	r0, r4
    29d0:	f7ff ff8c 	bl	28ec <String::copy(char const*, unsigned int)>
}
    29d4:	4620      	mov	r0, r4
    29d6:	b00b      	add	sp, #44	; 0x2c
    29d8:	bd30      	pop	{r4, r5, pc}
		len = 0;
    29da:	60a0      	str	r0, [r4, #8]
}
    29dc:	4620      	mov	r0, r4
    29de:	b00b      	add	sp, #44	; 0x2c
    29e0:	bd30      	pop	{r4, r5, pc}
    29e2:	bf00      	nop

000029e4 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    29e4:	4281      	cmp	r1, r0
    29e6:	d003      	beq.n	29f0 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    29e8:	688a      	ldr	r2, [r1, #8]
    29ea:	6809      	ldr	r1, [r1, #0]
    29ec:	f7ff bf7e 	b.w	28ec <String::copy(char const*, unsigned int)>
}
    29f0:	4770      	bx	lr
    29f2:	bf00      	nop

000029f4 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    29f4:	4288      	cmp	r0, r1
{
    29f6:	b538      	push	{r3, r4, r5, lr}
    29f8:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    29fa:	d00e      	beq.n	2a1a <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    29fc:	6800      	ldr	r0, [r0, #0]
    29fe:	460c      	mov	r4, r1
    2a00:	b108      	cbz	r0, 2a06 <String::operator=(String&&)+0x12>
    2a02:	f002 fd95 	bl	5530 <free>
	len = rhs.len;
    2a06:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    2a08:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    2a0a:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    2a0e:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    2a10:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    2a14:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    2a18:	60a3      	str	r3, [r4, #8]
}
    2a1a:	4628      	mov	r0, r5
    2a1c:	bd38      	pop	{r3, r4, r5, pc}
    2a1e:	bf00      	nop

00002a20 <String::operator=(char const*)>:
{
    2a20:	b538      	push	{r3, r4, r5, lr}
    2a22:	4605      	mov	r5, r0
	if (cstr) {
    2a24:	460c      	mov	r4, r1
    2a26:	b149      	cbz	r1, 2a3c <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    2a28:	4608      	mov	r0, r1
    2a2a:	f005 fa49 	bl	7ec0 <strlen>
    2a2e:	4621      	mov	r1, r4
    2a30:	4602      	mov	r2, r0
    2a32:	4628      	mov	r0, r5
    2a34:	f7ff ff5a 	bl	28ec <String::copy(char const*, unsigned int)>
}
    2a38:	4628      	mov	r0, r5
    2a3a:	bd38      	pop	{r3, r4, r5, pc}
    2a3c:	4628      	mov	r0, r5
		len = 0;
    2a3e:	60a9      	str	r1, [r5, #8]
}
    2a40:	bd38      	pop	{r3, r4, r5, pc}
    2a42:	bf00      	nop

00002a44 <String::append(char const*, unsigned int)>:
{
    2a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2a48:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2a4a:	6800      	ldr	r0, [r0, #0]
{
    2a4c:	460d      	mov	r5, r1
    2a4e:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2a50:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    2a52:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    2a54:	d809      	bhi.n	2a6a <String::append(char const*, unsigned int)+0x26>
    2a56:	18c2      	adds	r2, r0, r3
    2a58:	4291      	cmp	r1, r2
    2a5a:	d206      	bcs.n	2a6a <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    2a5c:	1a0f      	subs	r7, r1, r0
		self = true;
    2a5e:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    2a62:	b936      	cbnz	r6, 2a72 <String::append(char const*, unsigned int)+0x2e>
}
    2a64:	4620      	mov	r0, r4
    2a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    2a6a:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    2a6e:	2e00      	cmp	r6, #0
    2a70:	d0f8      	beq.n	2a64 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    2a72:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    2a76:	6862      	ldr	r2, [r4, #4]
    2a78:	4590      	cmp	r8, r2
    2a7a:	d90c      	bls.n	2a96 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2a7c:	f108 0101 	add.w	r1, r8, #1
    2a80:	f003 f81a 	bl	5ab8 <realloc>
	if (newbuffer) {
    2a84:	2800      	cmp	r0, #0
    2a86:	d0ed      	beq.n	2a64 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    2a88:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    2a8a:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    2a8e:	b913      	cbnz	r3, 2a96 <String::append(char const*, unsigned int)+0x52>
    2a90:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    2a92:	6820      	ldr	r0, [r4, #0]
    2a94:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    2a96:	f1b9 0f00 	cmp.w	r9, #0
    2a9a:	d108      	bne.n	2aae <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    2a9c:	4629      	mov	r1, r5
    2a9e:	4418      	add	r0, r3
    2aa0:	f005 f9ac 	bl	7dfc <strcpy>
}
    2aa4:	4620      	mov	r0, r4
	len = newlen;
    2aa6:	f8c4 8008 	str.w	r8, [r4, #8]
}
    2aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    2aae:	4632      	mov	r2, r6
    2ab0:	19c1      	adds	r1, r0, r7
    2ab2:	4418      	add	r0, r3
    2ab4:	f000 fc0c 	bl	32d0 <memcpy>
		buffer[newlen] = 0;
    2ab8:	6823      	ldr	r3, [r4, #0]
    2aba:	2200      	movs	r2, #0
    2abc:	f803 2008 	strb.w	r2, [r3, r8]
    2ac0:	e7f0      	b.n	2aa4 <String::append(char const*, unsigned int)+0x60>
    2ac2:	bf00      	nop

00002ac4 <String::append(String const&)>:
	return append(s.buffer, s.len);
    2ac4:	688a      	ldr	r2, [r1, #8]
    2ac6:	6809      	ldr	r1, [r1, #0]
    2ac8:	f7ff bfbc 	b.w	2a44 <String::append(char const*, unsigned int)>

00002acc <String::append(char const*)>:
{
    2acc:	b538      	push	{r3, r4, r5, lr}
    2ace:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    2ad0:	b141      	cbz	r1, 2ae4 <String::append(char const*)+0x18>
    2ad2:	460c      	mov	r4, r1
    2ad4:	4608      	mov	r0, r1
    2ad6:	f005 f9f3 	bl	7ec0 <strlen>
    2ada:	4602      	mov	r2, r0
    2adc:	4621      	mov	r1, r4
    2ade:	4628      	mov	r0, r5
    2ae0:	f7ff ffb0 	bl	2a44 <String::append(char const*, unsigned int)>
}
    2ae4:	4628      	mov	r0, r5
    2ae6:	bd38      	pop	{r3, r4, r5, pc}

00002ae8 <String::append(char)>:
{
    2ae8:	b510      	push	{r4, lr}
    2aea:	b082      	sub	sp, #8
	buf[1] = 0;
    2aec:	2300      	movs	r3, #0
{
    2aee:	4604      	mov	r4, r0
	append(buf, 1);
    2af0:	2201      	movs	r2, #1
	buf[0] = c;
    2af2:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    2af6:	a901      	add	r1, sp, #4
	buf[1] = 0;
    2af8:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    2afc:	f7ff ffa2 	bl	2a44 <String::append(char const*, unsigned int)>
}
    2b00:	4620      	mov	r0, r4
    2b02:	b002      	add	sp, #8
    2b04:	bd10      	pop	{r4, pc}
    2b06:	bf00      	nop

00002b08 <operator+(StringSumHelper const&, String const&)>:
{
    2b08:	b510      	push	{r4, lr}
    2b0a:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    2b0c:	688a      	ldr	r2, [r1, #8]
    2b0e:	6809      	ldr	r1, [r1, #0]
    2b10:	f7ff ff98 	bl	2a44 <String::append(char const*, unsigned int)>
}
    2b14:	4620      	mov	r0, r4
    2b16:	bd10      	pop	{r4, pc}

00002b18 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2b18:	6882      	ldr	r2, [r0, #8]
{
    2b1a:	b508      	push	{r3, lr}
    2b1c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2b1e:	b13a      	cbz	r2, 2b30 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    2b20:	b161      	cbz	r1, 2b3c <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    2b22:	6800      	ldr	r0, [r0, #0]
    2b24:	f005 f800 	bl	7b28 <strcmp>
    2b28:	fab0 f080 	clz	r0, r0
    2b2c:	0940      	lsrs	r0, r0, #5
}
    2b2e:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2b30:	b131      	cbz	r1, 2b40 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    2b32:	7818      	ldrb	r0, [r3, #0]
    2b34:	fab0 f080 	clz	r0, r0
    2b38:	0940      	lsrs	r0, r0, #5
}
    2b3a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    2b3c:	6803      	ldr	r3, [r0, #0]
    2b3e:	e7f8      	b.n	2b32 <String::equals(char const*) const+0x1a>
    2b40:	2001      	movs	r0, #1
}
    2b42:	bd08      	pop	{r3, pc}

00002b44 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    2b44:	b1c2      	cbz	r2, 2b78 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    2b46:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    2b48:	fab1 f681 	clz	r6, r1
    2b4c:	460c      	mov	r4, r1
    2b4e:	0976      	lsrs	r6, r6, #5
    2b50:	b119      	cbz	r1, 2b5a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    2b52:	6885      	ldr	r5, [r0, #8]
    2b54:	429d      	cmp	r5, r3
    2b56:	d801      	bhi.n	2b5c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    2b58:	700e      	strb	r6, [r1, #0]
}
    2b5a:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    2b5c:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    2b5e:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    2b62:	6801      	ldr	r1, [r0, #0]
    2b64:	4620      	mov	r0, r4
    2b66:	4565      	cmp	r5, ip
    2b68:	4419      	add	r1, r3
    2b6a:	bf28      	it	cs
    2b6c:	4665      	movcs	r5, ip
    2b6e:	462a      	mov	r2, r5
    2b70:	f004 fce4 	bl	753c <strncpy>
	buf[n] = 0;
    2b74:	5566      	strb	r6, [r4, r5]
}
    2b76:	bd70      	pop	{r4, r5, r6, pc}
    2b78:	4770      	bx	lr
    2b7a:	bf00      	nop

00002b7c <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    2b7c:	6883      	ldr	r3, [r0, #8]
    2b7e:	b143      	cbz	r3, 2b92 <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2b80:	6809      	ldr	r1, [r1, #0]
{
    2b82:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2b84:	6804      	ldr	r4, [r0, #0]
    2b86:	4620      	mov	r0, r4
    2b88:	f004 fe6a 	bl	7860 <strstr>
	if (found == NULL) return -1;
    2b8c:	b120      	cbz	r0, 2b98 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    2b8e:	1b00      	subs	r0, r0, r4
}
    2b90:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    2b92:	f04f 30ff 	mov.w	r0, #4294967295
}
    2b96:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    2b98:	f04f 30ff 	mov.w	r0, #4294967295
}
    2b9c:	bd10      	pop	{r4, pc}
    2b9e:	bf00      	nop

00002ba0 <String::substring(unsigned int) const>:
{
    2ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    2ba4:	688f      	ldr	r7, [r1, #8]
{
    2ba6:	460e      	mov	r6, r1
    2ba8:	4605      	mov	r5, r0
	if (left > right) {
    2baa:	4297      	cmp	r7, r2
    2bac:	d202      	bcs.n	2bb4 <String::substring(unsigned int) const+0x14>
    2bae:	4613      	mov	r3, r2
    2bb0:	463a      	mov	r2, r7
    2bb2:	461f      	mov	r7, r3
	buffer = NULL;
    2bb4:	2300      	movs	r3, #0
	len = 0;
    2bb6:	60ab      	str	r3, [r5, #8]
	if (left > len) return out;
    2bb8:	68b0      	ldr	r0, [r6, #8]
    2bba:	4290      	cmp	r0, r2
	capacity = 0;
    2bbc:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    2bc0:	d314      	bcc.n	2bec <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    2bc2:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    2bc4:	6831      	ldr	r1, [r6, #0]
    2bc6:	bf28      	it	cs
    2bc8:	4607      	movcs	r7, r0
    2bca:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    2bce:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    2bd0:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    2bd2:	189c      	adds	r4, r3, r2
    2bd4:	d00d      	beq.n	2bf2 <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    2bd6:	4620      	mov	r0, r4
    2bd8:	f005 f972 	bl	7ec0 <strlen>
    2bdc:	4621      	mov	r1, r4
    2bde:	4602      	mov	r2, r0
    2be0:	4628      	mov	r0, r5
    2be2:	f7ff fe83 	bl	28ec <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    2be6:	6833      	ldr	r3, [r6, #0]
    2be8:	f803 8007 	strb.w	r8, [r3, r7]
}
    2bec:	4628      	mov	r0, r5
    2bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2bf2:	60ac      	str	r4, [r5, #8]
    2bf4:	e7f8      	b.n	2be8 <String::substring(unsigned int) const+0x48>
    2bf6:	bf00      	nop

00002bf8 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    2bf8:	429a      	cmp	r2, r3
{
    2bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bfe:	4605      	mov	r5, r0
    2c00:	460e      	mov	r6, r1
	if (left > right) {
    2c02:	d902      	bls.n	2c0a <String::substring(unsigned int, unsigned int) const+0x12>
    2c04:	4611      	mov	r1, r2
    2c06:	461a      	mov	r2, r3
    2c08:	460b      	mov	r3, r1
	buffer = NULL;
    2c0a:	2100      	movs	r1, #0
	len = 0;
    2c0c:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    2c0e:	68b7      	ldr	r7, [r6, #8]
    2c10:	4297      	cmp	r7, r2
	capacity = 0;
    2c12:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    2c16:	d314      	bcc.n	2c42 <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    2c18:	429f      	cmp	r7, r3
    2c1a:	bf28      	it	cs
    2c1c:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    2c1e:	6833      	ldr	r3, [r6, #0]
    2c20:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    2c24:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    2c26:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    2c28:	189c      	adds	r4, r3, r2
    2c2a:	d00d      	beq.n	2c48 <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    2c2c:	4620      	mov	r0, r4
    2c2e:	f005 f947 	bl	7ec0 <strlen>
    2c32:	4621      	mov	r1, r4
    2c34:	4602      	mov	r2, r0
    2c36:	4628      	mov	r0, r5
    2c38:	f7ff fe58 	bl	28ec <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    2c3c:	6833      	ldr	r3, [r6, #0]
    2c3e:	f803 8007 	strb.w	r8, [r3, r7]
}
    2c42:	4628      	mov	r0, r5
    2c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2c48:	60ac      	str	r4, [r5, #8]
    2c4a:	e7f8      	b.n	2c3e <String::substring(unsigned int, unsigned int) const+0x46>

00002c4c <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    2c4c:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    2c4e:	6804      	ldr	r4, [r0, #0]
{
    2c50:	4605      	mov	r5, r0
	if (!buffer) return *this;
    2c52:	b144      	cbz	r4, 2c66 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    2c54:	7820      	ldrb	r0, [r4, #0]
    2c56:	b130      	cbz	r0, 2c66 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    2c58:	f004 f9c2 	bl	6fe0 <tolower>
    2c5c:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    2c5e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    2c62:	2800      	cmp	r0, #0
    2c64:	d1f8      	bne.n	2c58 <String::toLowerCase()+0xc>
	}
	return *this;
}
    2c66:	4628      	mov	r0, r5
    2c68:	bd38      	pop	{r3, r4, r5, pc}
    2c6a:	bf00      	nop

00002c6c <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    2c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    2c70:	6807      	ldr	r7, [r0, #0]
{
    2c72:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    2c74:	b1e7      	cbz	r7, 2cb0 <String::trim()+0x44>
    2c76:	6884      	ldr	r4, [r0, #8]
    2c78:	b1d4      	cbz	r4, 2cb0 <String::trim()+0x44>
    2c7a:	46b8      	mov	r8, r7
    2c7c:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    2c7e:	f818 0b01 	ldrb.w	r0, [r8], #1
    2c82:	f004 f9a5 	bl	6fd0 <isspace>
    2c86:	2800      	cmp	r0, #0
    2c88:	d1f8      	bne.n	2c7c <String::trim()+0x10>
	char *end = buffer + len - 1;
    2c8a:	3c01      	subs	r4, #1
    2c8c:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    2c8e:	e002      	b.n	2c96 <String::trim()+0x2a>
    2c90:	42a5      	cmp	r5, r4
    2c92:	d805      	bhi.n	2ca0 <String::trim()+0x34>
    2c94:	3c01      	subs	r4, #1
    2c96:	7820      	ldrb	r0, [r4, #0]
    2c98:	f004 f99a 	bl	6fd0 <isspace>
    2c9c:	2800      	cmp	r0, #0
    2c9e:	d1f7      	bne.n	2c90 <String::trim()+0x24>
	len = end + 1 - begin;
    2ca0:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    2ca2:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    2ca4:	eba2 0205 	sub.w	r2, r2, r5
    2ca8:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    2caa:	d304      	bcc.n	2cb6 <String::trim()+0x4a>
	buffer[len] = 0;
    2cac:	2300      	movs	r3, #0
    2cae:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    2cb0:	4630      	mov	r0, r6
    2cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    2cb6:	4638      	mov	r0, r7
    2cb8:	4629      	mov	r1, r5
    2cba:	f000 fb09 	bl	32d0 <memcpy>
	buffer[len] = 0;
    2cbe:	6837      	ldr	r7, [r6, #0]
    2cc0:	68b2      	ldr	r2, [r6, #8]
    2cc2:	e7f3      	b.n	2cac <String::trim()+0x40>

00002cc4 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    2cc4:	6800      	ldr	r0, [r0, #0]
    2cc6:	b108      	cbz	r0, 2ccc <String::toInt() const+0x8>
    2cc8:	f002 bc10 	b.w	54ec <atol>
	return 0;
}
    2ccc:	4770      	bx	lr
    2cce:	bf00      	nop

00002cd0 <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    2cd0:	6800      	ldr	r0, [r0, #0]
    2cd2:	b110      	cbz	r0, 2cda <String::toFloat() const+0xa>
    2cd4:	2100      	movs	r1, #0
    2cd6:	f004 b81f 	b.w	6d18 <strtof>
	return 0.0;
}
    2cda:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2ce0 <String::toFloat() const+0x10>
    2cde:	4770      	bx	lr
    2ce0:	00000000 	.word	0x00000000

00002ce4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2ce4:	49a2      	ldr	r1, [pc, #648]	; (2f70 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2ce6:	4ba3      	ldr	r3, [pc, #652]	; (2f74 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2ce8:	4288      	cmp	r0, r1
{
    2cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    2cee:	4ca2      	ldr	r4, [pc, #648]	; (2f78 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2cf0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    2cf2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2cf4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2cf8:	d91b      	bls.n	2d32 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2cfa:	4ba0      	ldr	r3, [pc, #640]	; (2f7c <set_arm_clock+0x298>)
    2cfc:	4298      	cmp	r0, r3
    2cfe:	f240 8102 	bls.w	2f06 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2d02:	1ac3      	subs	r3, r0, r3
    2d04:	499e      	ldr	r1, [pc, #632]	; (2f80 <set_arm_clock+0x29c>)
    2d06:	0a1b      	lsrs	r3, r3, #8
    2d08:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d0c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    2d10:	09db      	lsrs	r3, r3, #7
    2d12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2d16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2d1a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d1e:	428b      	cmp	r3, r1
    2d20:	bf28      	it	cs
    2d22:	460b      	movcs	r3, r1
    2d24:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2d28:	4b96      	ldr	r3, [pc, #600]	; (2f84 <set_arm_clock+0x2a0>)
    2d2a:	fba3 3707 	umull	r3, r7, r3, r7
    2d2e:	08ff      	lsrs	r7, r7, #3
    2d30:	e004      	b.n	2d3c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    2d32:	4f95      	ldr	r7, [pc, #596]	; (2f88 <set_arm_clock+0x2a4>)
    2d34:	42b8      	cmp	r0, r7
    2d36:	bf8c      	ite	hi
    2d38:	270e      	movhi	r7, #14
    2d3a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d3c:	498d      	ldr	r1, [pc, #564]	; (2f74 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d3e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d42:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d46:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2d48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2d4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d50:	d20c      	bcs.n	2d6c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2d52:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2d56:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2d5a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    2d5e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2d62:	680b      	ldr	r3, [r1, #0]
    2d64:	2b00      	cmp	r3, #0
    2d66:	dafc      	bge.n	2d62 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2d68:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2d6c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    2d70:	d124      	bne.n	2dbc <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    2d72:	4986      	ldr	r1, [pc, #536]	; (2f8c <set_arm_clock+0x2a8>)
    2d74:	690c      	ldr	r4, [r1, #16]
    2d76:	4986      	ldr	r1, [pc, #536]	; (2f90 <set_arm_clock+0x2ac>)
    2d78:	43a1      	bics	r1, r4
    2d7a:	f000 80ea 	beq.w	2f52 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2d7e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    2d82:	4634      	mov	r4, r6
    2d84:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2d88:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    2d8c:	d004      	beq.n	2d98 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    2d8e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    2d92:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    2d94:	4b77      	ldr	r3, [pc, #476]	; (2f74 <set_arm_clock+0x290>)
    2d96:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    2d98:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    2d9c:	d007      	beq.n	2dae <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    2d9e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    2da2:	4974      	ldr	r1, [pc, #464]	; (2f74 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    2da4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    2da6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    2da8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    2daa:	071a      	lsls	r2, r3, #28
    2dac:	d4fc      	bmi.n	2da8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    2dae:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    2db2:	4a70      	ldr	r2, [pc, #448]	; (2f74 <set_arm_clock+0x290>)
    2db4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2db6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2db8:	069b      	lsls	r3, r3, #26
    2dba:	d4fc      	bmi.n	2db6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    2dbc:	4c75      	ldr	r4, [pc, #468]	; (2f94 <set_arm_clock+0x2b0>)
    2dbe:	42a0      	cmp	r0, r4
    2dc0:	f200 80ce 	bhi.w	2f60 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    2dc4:	f04f 0c01 	mov.w	ip, #1
    2dc8:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    2dca:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    2dcc:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    2dd0:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2dd4:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2dd8:	42a2      	cmp	r2, r4
    2dda:	d818      	bhi.n	2e0e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2ddc:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    2de0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2de4:	f040 808d 	bne.w	2f02 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2de8:	f1bc 0f04 	cmp.w	ip, #4
    2dec:	f200 8091 	bhi.w	2f12 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    2df0:	180a      	adds	r2, r1, r0
    2df2:	42a2      	cmp	r2, r4
    2df4:	f200 80a4 	bhi.w	2f40 <set_arm_clock+0x25c>
    2df8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2dfc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    2dfe:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2e02:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2e06:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2e0a:	42a2      	cmp	r2, r4
    2e0c:	d9e6      	bls.n	2ddc <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2e0e:	f10c 31ff 	add.w	r1, ip, #4294967295
    2e12:	028c      	lsls	r4, r1, #10
    2e14:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2e18:	485f      	ldr	r0, [pc, #380]	; (2f98 <set_arm_clock+0x2b4>)
    2e1a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2e1c:	4a5f      	ldr	r2, [pc, #380]	; (2f9c <set_arm_clock+0x2b8>)
    2e1e:	4290      	cmp	r0, r2
    2e20:	d97f      	bls.n	2f22 <set_arm_clock+0x23e>
    2e22:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 2fc8 <set_arm_clock+0x2e4>
    2e26:	226c      	movs	r2, #108	; 0x6c
    2e28:	485d      	ldr	r0, [pc, #372]	; (2fa0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e2a:	4d58      	ldr	r5, [pc, #352]	; (2f8c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2e2c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e30:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2e34:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2e38:	f8df c190 	ldr.w	ip, [pc, #400]	; 2fcc <set_arm_clock+0x2e8>
    2e3c:	ea0e 0c0c 	and.w	ip, lr, ip
    2e40:	45d4      	cmp	ip, sl
    2e42:	d009      	beq.n	2e58 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2e48:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2e4c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    2e50:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    2e52:	682a      	ldr	r2, [r5, #0]
    2e54:	2a00      	cmp	r2, #0
    2e56:	dafc      	bge.n	2e52 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2e58:	4a46      	ldr	r2, [pc, #280]	; (2f74 <set_arm_clock+0x290>)
    2e5a:	6915      	ldr	r5, [r2, #16]
    2e5c:	f005 0507 	and.w	r5, r5, #7
    2e60:	429d      	cmp	r5, r3
    2e62:	d003      	beq.n	2e6c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2e64:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2e66:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2e68:	03dd      	lsls	r5, r3, #15
    2e6a:	d4fc      	bmi.n	2e66 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2e6c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    2e70:	d009      	beq.n	2e86 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    2e72:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2e76:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    2e7a:	4a3e      	ldr	r2, [pc, #248]	; (2f74 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    2e7c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    2e7e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    2e80:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2e82:	0799      	lsls	r1, r3, #30
    2e84:	d4fc      	bmi.n	2e80 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2e86:	4947      	ldr	r1, [pc, #284]	; (2fa4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    2e88:	4a47      	ldr	r2, [pc, #284]	; (2fa8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2e8a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    2e8c:	4291      	cmp	r1, r2
    2e8e:	d83c      	bhi.n	2f0a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    2e90:	4b46      	ldr	r3, [pc, #280]	; (2fac <set_arm_clock+0x2c8>)
    2e92:	09c9      	lsrs	r1, r1, #7
    2e94:	fba3 3101 	umull	r3, r1, r3, r1
    2e98:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    2e9a:	1e4b      	subs	r3, r1, #1
    2e9c:	021b      	lsls	r3, r3, #8
    2e9e:	ea86 0203 	eor.w	r2, r6, r3
    2ea2:	f412 7f40 	tst.w	r2, #768	; 0x300
    2ea6:	d006      	beq.n	2eb6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    2ea8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    2eb0:	4a30      	ldr	r2, [pc, #192]	; (2f74 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    2eb2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    2eb4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    2eb6:	4a2f      	ldr	r2, [pc, #188]	; (2f74 <set_arm_clock+0x290>)
    2eb8:	6953      	ldr	r3, [r2, #20]
    2eba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    2ebe:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    2ec0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2ec2:	069b      	lsls	r3, r3, #26
    2ec4:	d4fc      	bmi.n	2ec0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2ec6:	4b3a      	ldr	r3, [pc, #232]	; (2fb0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2ec8:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2eca:	fba3 2300 	umull	r2, r3, r3, r0
    2ece:	f04f 32ff 	mov.w	r2, #4294967295
    2ed2:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2ed6:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2eda:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    2ede:	4a35      	ldr	r2, [pc, #212]	; (2fb4 <set_arm_clock+0x2d0>)
    2ee0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    2ee2:	4a35      	ldr	r2, [pc, #212]	; (2fb8 <set_arm_clock+0x2d4>)
    2ee4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2ee6:	4a35      	ldr	r2, [pc, #212]	; (2fbc <set_arm_clock+0x2d8>)
    2ee8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2eea:	d208      	bcs.n	2efe <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2eec:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2ef0:	4a21      	ldr	r2, [pc, #132]	; (2f78 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2ef2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2ef6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2ef8:	6813      	ldr	r3, [r2, #0]
    2efa:	2b00      	cmp	r3, #0
    2efc:	dafc      	bge.n	2ef8 <set_arm_clock+0x214>
	}

	return frequency;
}
    2efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f02:	4673      	mov	r3, lr
    2f04:	e762      	b.n	2dcc <set_arm_clock+0xe8>
    2f06:	2712      	movs	r7, #18
    2f08:	e718      	b.n	2d3c <set_arm_clock+0x58>
    2f0a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    2f0e:	2104      	movs	r1, #4
    2f10:	e7c5      	b.n	2e9e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2f12:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2f16:	4820      	ldr	r0, [pc, #128]	; (2f98 <set_arm_clock+0x2b4>)
    2f18:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2f1a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2f1c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2f1e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2f22:	4a27      	ldr	r2, [pc, #156]	; (2fc0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2f24:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 2fd0 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2f28:	fba2 2000 	umull	r2, r0, r2, r0
    2f2c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    2f2e:	4825      	ldr	r0, [pc, #148]	; (2fc4 <set_arm_clock+0x2e0>)
    2f30:	2a36      	cmp	r2, #54	; 0x36
    2f32:	bf38      	it	cc
    2f34:	2236      	movcc	r2, #54	; 0x36
    2f36:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2f3a:	ea42 0a0a 	orr.w	sl, r2, sl
    2f3e:	e774      	b.n	2e2a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2f40:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2f44:	2300      	movs	r3, #0
    2f46:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    2f4a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    2f4e:	46ac      	mov	ip, r5
    2f50:	e762      	b.n	2e18 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    2f52:	461d      	mov	r5, r3
    2f54:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2f58:	4611      	mov	r1, r2
    2f5a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    2f5e:	e713      	b.n	2d88 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    2f60:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    2f62:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2f66:	4602      	mov	r2, r0
    2f68:	4631      	mov	r1, r6
    2f6a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    2f6c:	46e6      	mov	lr, ip
    2f6e:	e753      	b.n	2e18 <set_arm_clock+0x134>
    2f70:	1f78a400 	.word	0x1f78a400
    2f74:	400fc000 	.word	0x400fc000
    2f78:	40080000 	.word	0x40080000
    2f7c:	23c34600 	.word	0x23c34600
    2f80:	004cb223 	.word	0x004cb223
    2f84:	51eb851f 	.word	0x51eb851f
    2f88:	016e3600 	.word	0x016e3600
    2f8c:	400d8000 	.word	0x400d8000
    2f90:	80003040 	.word	0x80003040
    2f94:	269fb1ff 	.word	0x269fb1ff
    2f98:	005b8d80 	.word	0x005b8d80
    2f9c:	4df67eff 	.word	0x4df67eff
    2fa0:	4d3f6400 	.word	0x4d3f6400
    2fa4:	08f0d17f 	.word	0x08f0d17f
    2fa8:	2cb4177f 	.word	0x2cb4177f
    2fac:	00e5109f 	.word	0x00e5109f
    2fb0:	431bde83 	.word	0x431bde83
    2fb4:	2000118c 	.word	0x2000118c
    2fb8:	20001188 	.word	0x20001188
    2fbc:	20003334 	.word	0x20003334
    2fc0:	165e9f81 	.word	0x165e9f81
    2fc4:	00b71b00 	.word	0x00b71b00
    2fc8:	8000206c 	.word	0x8000206c
    2fcc:	8001307f 	.word	0x8001307f
    2fd0:	80002000 	.word	0x80002000

00002fd4 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2fd4:	b900      	cbnz	r0, 2fd8 <delay+0x4>
    2fd6:	4770      	bx	lr
{
    2fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2fdc:	2101      	movs	r1, #1
    2fde:	4681      	mov	r9, r0
    2fe0:	4c21      	ldr	r4, [pc, #132]	; (3068 <delay+0x94>)
    2fe2:	4d22      	ldr	r5, [pc, #136]	; (306c <delay+0x98>)
    2fe4:	4e22      	ldr	r6, [pc, #136]	; (3070 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2fe6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2fea:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2fec:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2fee:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d1f7      	bne.n	2fe6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2ff6:	491f      	ldr	r1, [pc, #124]	; (3074 <delay+0xa0>)
    2ff8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2ffa:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2ffe:	f8df a078 	ldr.w	sl, [pc, #120]	; 3078 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    3002:	1a1b      	subs	r3, r3, r0
    3004:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    3006:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    300a:	f8da 2000 	ldr.w	r2, [sl]
    300e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    3012:	455a      	cmp	r2, fp
    3014:	bf94      	ite	ls
    3016:	4490      	addls	r8, r2
    3018:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    301a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    301e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3020:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3022:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3026:	2b00      	cmp	r3, #0
    3028:	d1f7      	bne.n	301a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    302a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    302c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3030:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3032:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3036:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    303a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    303e:	bf94      	ite	ls
    3040:	4462      	addls	r2, ip
    3042:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    3046:	eba2 0208 	sub.w	r2, r2, r8
    304a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    304e:	d306      	bcc.n	305e <delay+0x8a>
			if (--msec == 0) return;
    3050:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3054:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3058:	d1df      	bne.n	301a <delay+0x46>
}
    305a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    305e:	f001 fd2d 	bl	4abc <yield>
		while ((micros() - start) >= 1000) {
    3062:	4904      	ldr	r1, [pc, #16]	; (3074 <delay+0xa0>)
    3064:	e7d9      	b.n	301a <delay+0x46>
    3066:	bf00      	nop
    3068:	20003340 	.word	0x20003340
    306c:	2000333c 	.word	0x2000333c
    3070:	20003338 	.word	0x20003338
    3074:	e0001000 	.word	0xe0001000
    3078:	20003334 	.word	0x20003334

0000307c <micros>:
{
    307c:	b430      	push	{r4, r5}
    307e:	4b0f      	ldr	r3, [pc, #60]	; (30bc <micros+0x40>)
    3080:	f04f 0c01 	mov.w	ip, #1
    3084:	4d0e      	ldr	r5, [pc, #56]	; (30c0 <micros+0x44>)
    3086:	4c0f      	ldr	r4, [pc, #60]	; (30c4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3088:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    308c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    308e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3090:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    3094:	2a00      	cmp	r2, #0
    3096:	d1f7      	bne.n	3088 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3098:	4b0b      	ldr	r3, [pc, #44]	; (30c8 <micros+0x4c>)
    309a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    309c:	4a0b      	ldr	r2, [pc, #44]	; (30cc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    309e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    30a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    30a4:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    30a6:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    30aa:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    30ae:	bc30      	pop	{r4, r5}
    30b0:	428a      	cmp	r2, r1
    30b2:	bf94      	ite	ls
    30b4:	1880      	addls	r0, r0, r2
    30b6:	1840      	addhi	r0, r0, r1
    30b8:	4770      	bx	lr
    30ba:	bf00      	nop
    30bc:	20003340 	.word	0x20003340
    30c0:	2000333c 	.word	0x2000333c
    30c4:	20003338 	.word	0x20003338
    30c8:	e0001000 	.word	0xe0001000
    30cc:	20003334 	.word	0x20003334

000030d0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    30d0:	2836      	cmp	r0, #54	; 0x36
    30d2:	d816      	bhi.n	3102 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    30d4:	0102      	lsls	r2, r0, #4
    30d6:	4b10      	ldr	r3, [pc, #64]	; (3118 <digitalWrite+0x48>)
    30d8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    30dc:	589b      	ldr	r3, [r3, r2]
{
    30de:	b410      	push	{r4}
	mask = p->mask;
    30e0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    30e2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    30e4:	4214      	tst	r4, r2
    30e6:	d005      	beq.n	30f4 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    30e8:	b961      	cbnz	r1, 3104 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    30ea:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    30ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    30f2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    30f4:	6883      	ldr	r3, [r0, #8]
		if (val) {
    30f6:	b151      	cbz	r1, 310e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    30f8:	4a08      	ldr	r2, [pc, #32]	; (311c <digitalWrite+0x4c>)
}
    30fa:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    30fe:	601a      	str	r2, [r3, #0]
}
    3100:	4770      	bx	lr
    3102:	4770      	bx	lr
    3104:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    3108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    310c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    310e:	4a04      	ldr	r2, [pc, #16]	; (3120 <digitalWrite+0x50>)
}
    3110:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3114:	601a      	str	r2, [r3, #0]
}
    3116:	4770      	bx	lr
    3118:	20000af4 	.word	0x20000af4
    311c:	0001f038 	.word	0x0001f038
    3120:	00013038 	.word	0x00013038

00003124 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    3124:	2836      	cmp	r0, #54	; 0x36
    3126:	d80b      	bhi.n	3140 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    3128:	4b06      	ldr	r3, [pc, #24]	; (3144 <digitalRead+0x20>)
    312a:	0102      	lsls	r2, r0, #4
    312c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    3130:	589a      	ldr	r2, [r3, r2]
    3132:	68c3      	ldr	r3, [r0, #12]
    3134:	6892      	ldr	r2, [r2, #8]
    3136:	421a      	tst	r2, r3
    3138:	bf14      	ite	ne
    313a:	2001      	movne	r0, #1
    313c:	2000      	moveq	r0, #0
    313e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3140:	2000      	movs	r0, #0
}
    3142:	4770      	bx	lr
    3144:	20000af4 	.word	0x20000af4

00003148 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3148:	2836      	cmp	r0, #54	; 0x36
    314a:	d829      	bhi.n	31a0 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    314c:	4b16      	ldr	r3, [pc, #88]	; (31a8 <pinMode+0x60>)
    314e:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3150:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    3152:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3156:	589a      	ldr	r2, [r3, r2]
{
    3158:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    315a:	6853      	ldr	r3, [r2, #4]
    315c:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    315e:	d00e      	beq.n	317e <pinMode+0x36>
    3160:	2904      	cmp	r1, #4
    3162:	d00c      	beq.n	317e <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3164:	ea23 0304 	bic.w	r3, r3, r4
    3168:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    316a:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    316c:	b1a9      	cbz	r1, 319a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    316e:	2902      	cmp	r1, #2
    3170:	d017      	beq.n	31a2 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3172:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3174:	bf0c      	ite	eq
    3176:	4a0d      	ldreq	r2, [pc, #52]	; (31ac <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3178:	4a0d      	ldrne	r2, [pc, #52]	; (31b0 <pinMode+0x68>)
    317a:	601a      	str	r2, [r3, #0]
    317c:	e007      	b.n	318e <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    317e:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    3180:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3182:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3184:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    3186:	d008      	beq.n	319a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3188:	f640 0238 	movw	r2, #2104	; 0x838
    318c:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    318e:	6843      	ldr	r3, [r0, #4]
    3190:	2215      	movs	r2, #21
}
    3192:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    3196:	601a      	str	r2, [r3, #0]
}
    3198:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    319a:	2238      	movs	r2, #56	; 0x38
    319c:	601a      	str	r2, [r3, #0]
    319e:	e7f6      	b.n	318e <pinMode+0x46>
    31a0:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    31a2:	4a04      	ldr	r2, [pc, #16]	; (31b4 <pinMode+0x6c>)
    31a4:	601a      	str	r2, [r3, #0]
    31a6:	e7f2      	b.n	318e <pinMode+0x46>
    31a8:	20000af4 	.word	0x20000af4
    31ac:	00013038 	.word	0x00013038
    31b0:	00010038 	.word	0x00010038
    31b4:	0001f038 	.word	0x0001f038

000031b8 <dummy_isr>:
static void dummy_isr() {};
    31b8:	4770      	bx	lr
    31ba:	bf00      	nop

000031bc <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    31bc:	2836      	cmp	r0, #54	; 0x36
    31be:	d858      	bhi.n	3272 <attachInterrupt+0xb6>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    31c0:	0100      	lsls	r0, r0, #4
{
    31c2:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    31c4:	4c34      	ldr	r4, [pc, #208]	; (3298 <attachInterrupt+0xdc>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    31c6:	4d35      	ldr	r5, [pc, #212]	; (329c <attachInterrupt+0xe0>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    31c8:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    31ca:	42ab      	cmp	r3, r5
    31cc:	d056      	beq.n	327c <attachInterrupt+0xc0>
    31ce:	d849      	bhi.n	3264 <attachInterrupt+0xa8>
    31d0:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    31d4:	d04b      	beq.n	326e <attachInterrupt+0xb2>
    31d6:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    31da:	42ab      	cmp	r3, r5
    31dc:	d140      	bne.n	3260 <attachInterrupt+0xa4>
    31de:	4d30      	ldr	r5, [pc, #192]	; (32a0 <attachInterrupt+0xe4>)
	volatile uint32_t *mux = portConfigRegister(pin);
    31e0:	4420      	add	r0, r4
    31e2:	4e30      	ldr	r6, [pc, #192]	; (32a4 <attachInterrupt+0xe8>)
    31e4:	4c30      	ldr	r4, [pc, #192]	; (32a8 <attachInterrupt+0xec>)
    31e6:	f8c4 62b4 	str.w	r6, [r4, #692]	; 0x2b4
	volatile uint32_t *pad = portControlRegister(pin);
    31ea:	e9d0 c401 	ldrd	ip, r4, [r0, #4]
	uint32_t mask = digitalPinToBitMask(pin);
    31ee:	68c0      	ldr	r0, [r0, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    31f0:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    31f4:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
    31f8:	2a04      	cmp	r2, #4
    31fa:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    31fe:	d82f      	bhi.n	3260 <attachInterrupt+0xa4>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3200:	695e      	ldr	r6, [r3, #20]
    3202:	ea26 0600 	bic.w	r6, r6, r0
    3206:	615e      	str	r6, [r3, #20]
	*mux = 5;			// pin is GPIO
    3208:	f04f 0605 	mov.w	r6, #5
    320c:	f8cc 6000 	str.w	r6, [ip]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
    3210:	6826      	ldr	r6, [r4, #0]
    3212:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
    3216:	6026      	str	r6, [r4, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    3218:	685c      	ldr	r4, [r3, #4]
    321a:	ea24 0400 	bic.w	r4, r4, r0
    321e:	605c      	str	r4, [r3, #4]
    3220:	4c22      	ldr	r4, [pc, #136]	; (32ac <attachInterrupt+0xf0>)
    3222:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    3226:	fa90 f2a0 	rbit	r2, r0
    322a:	fab2 f282 	clz	r2, r2
	table[index] = function;
    322e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3232:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    3236:	d01d      	beq.n	3274 <attachInterrupt+0xb8>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    3238:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    323a:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    323c:	ea01 0105 	and.w	r1, r1, r5
    3240:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    3242:	dc1d      	bgt.n	3280 <attachInterrupt+0xc4>
			uint32_t shift = index * 2;
    3244:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    3246:	2503      	movs	r5, #3
    3248:	68d9      	ldr	r1, [r3, #12]
    324a:	4094      	lsls	r4, r2
    324c:	fa05 f202 	lsl.w	r2, r5, r2
    3250:	ea21 0202 	bic.w	r2, r1, r2
    3254:	4322      	orrs	r2, r4
    3256:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    3258:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    325a:	695a      	ldr	r2, [r3, #20]
    325c:	4302      	orrs	r2, r0
    325e:	615a      	str	r2, [r3, #20]
}
    3260:	bcf0      	pop	{r4, r5, r6, r7}
    3262:	4770      	bx	lr
	switch((uint32_t)gpio) {
    3264:	4d12      	ldr	r5, [pc, #72]	; (32b0 <attachInterrupt+0xf4>)
    3266:	42ab      	cmp	r3, r5
    3268:	d1fa      	bne.n	3260 <attachInterrupt+0xa4>
			table = isr_table_gpio4;
    326a:	4d12      	ldr	r5, [pc, #72]	; (32b4 <attachInterrupt+0xf8>)
    326c:	e7b8      	b.n	31e0 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    326e:	4d12      	ldr	r5, [pc, #72]	; (32b8 <attachInterrupt+0xfc>)
    3270:	e7b6      	b.n	31e0 <attachInterrupt+0x24>
    3272:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    3274:	69da      	ldr	r2, [r3, #28]
    3276:	4302      	orrs	r2, r0
    3278:	61da      	str	r2, [r3, #28]
    327a:	e7ed      	b.n	3258 <attachInterrupt+0x9c>
			table = isr_table_gpio3;
    327c:	4d0f      	ldr	r5, [pc, #60]	; (32bc <attachInterrupt+0x100>)
    327e:	e7af      	b.n	31e0 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    3280:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3282:	2503      	movs	r5, #3
    3284:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    3286:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3288:	4094      	lsls	r4, r2
    328a:	fa05 f202 	lsl.w	r2, r5, r2
    328e:	ea21 0202 	bic.w	r2, r1, r2
    3292:	4322      	orrs	r2, r4
    3294:	611a      	str	r2, [r3, #16]
    3296:	e7df      	b.n	3258 <attachInterrupt+0x9c>
    3298:	20000af4 	.word	0x20000af4
    329c:	42008000 	.word	0x42008000
    32a0:	20001bf0 	.word	0x20001bf0
    32a4:	00000021 	.word	0x00000021
    32a8:	20002000 	.word	0x20002000
    32ac:	20000398 	.word	0x20000398
    32b0:	4200c000 	.word	0x4200c000
    32b4:	20001cf0 	.word	0x20001cf0
    32b8:	20001b70 	.word	0x20001b70
    32bc:	20001c70 	.word	0x20001c70

000032c0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    32c0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    32c2:	f7fd f88d 	bl	3e0 <setup>
	while (1) {
		loop();
    32c6:	f7fd fd41 	bl	d4c <loop>
		yield();
    32ca:	f001 fbf7 	bl	4abc <yield>
	while (1) {
    32ce:	e7fa      	b.n	32c6 <main+0x6>

000032d0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    32d0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    32d2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    32d6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    32da:	d16d      	bne.n	33b8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    32dc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    32de:	d341      	bcc.n	3364 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    32e0:	f851 3b04 	ldr.w	r3, [r1], #4
    32e4:	f840 3b04 	str.w	r3, [r0], #4
    32e8:	f851 3b04 	ldr.w	r3, [r1], #4
    32ec:	f840 3b04 	str.w	r3, [r0], #4
    32f0:	f851 3b04 	ldr.w	r3, [r1], #4
    32f4:	f840 3b04 	str.w	r3, [r0], #4
    32f8:	f851 3b04 	ldr.w	r3, [r1], #4
    32fc:	f840 3b04 	str.w	r3, [r0], #4
    3300:	f851 3b04 	ldr.w	r3, [r1], #4
    3304:	f840 3b04 	str.w	r3, [r0], #4
    3308:	f851 3b04 	ldr.w	r3, [r1], #4
    330c:	f840 3b04 	str.w	r3, [r0], #4
    3310:	f851 3b04 	ldr.w	r3, [r1], #4
    3314:	f840 3b04 	str.w	r3, [r0], #4
    3318:	f851 3b04 	ldr.w	r3, [r1], #4
    331c:	f840 3b04 	str.w	r3, [r0], #4
    3320:	f851 3b04 	ldr.w	r3, [r1], #4
    3324:	f840 3b04 	str.w	r3, [r0], #4
    3328:	f851 3b04 	ldr.w	r3, [r1], #4
    332c:	f840 3b04 	str.w	r3, [r0], #4
    3330:	f851 3b04 	ldr.w	r3, [r1], #4
    3334:	f840 3b04 	str.w	r3, [r0], #4
    3338:	f851 3b04 	ldr.w	r3, [r1], #4
    333c:	f840 3b04 	str.w	r3, [r0], #4
    3340:	f851 3b04 	ldr.w	r3, [r1], #4
    3344:	f840 3b04 	str.w	r3, [r0], #4
    3348:	f851 3b04 	ldr.w	r3, [r1], #4
    334c:	f840 3b04 	str.w	r3, [r0], #4
    3350:	f851 3b04 	ldr.w	r3, [r1], #4
    3354:	f840 3b04 	str.w	r3, [r0], #4
    3358:	f851 3b04 	ldr.w	r3, [r1], #4
    335c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3360:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3362:	d2bd      	bcs.n	32e0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3364:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3366:	d311      	bcc.n	338c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3368:	f851 3b04 	ldr.w	r3, [r1], #4
    336c:	f840 3b04 	str.w	r3, [r0], #4
    3370:	f851 3b04 	ldr.w	r3, [r1], #4
    3374:	f840 3b04 	str.w	r3, [r0], #4
    3378:	f851 3b04 	ldr.w	r3, [r1], #4
    337c:	f840 3b04 	str.w	r3, [r0], #4
    3380:	f851 3b04 	ldr.w	r3, [r1], #4
    3384:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3388:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    338a:	d2ed      	bcs.n	3368 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    338c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    338e:	d305      	bcc.n	339c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3390:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3394:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3398:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    339a:	d2f9      	bcs.n	3390 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    339c:	3204      	adds	r2, #4
	beq	.Ldone
    339e:	d008      	beq.n	33b2 <memcpy+0xe2>

	lsls	r2, r2, #31
    33a0:	07d2      	lsls	r2, r2, #31
	itt ne
    33a2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    33a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    33a8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    33ac:	d301      	bcc.n	33b2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    33ae:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    33b0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    33b2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    33b4:	4770      	bx	lr
    33b6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    33b8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    33ba:	d313      	bcc.n	33e4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    33bc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    33be:	d08d      	beq.n	32dc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    33c0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    33c4:	d08a      	beq.n	32dc <memcpy+0xc>

	rsb	r3, #4
    33c6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    33ca:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    33cc:	07db      	lsls	r3, r3, #31
	itt ne
    33ce:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    33d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    33d4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    33d8:	d380      	bcc.n	32dc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    33da:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    33de:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    33e2:	e77b      	b.n	32dc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    33e4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    33e6:	d3d9      	bcc.n	339c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    33e8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    33ea:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    33ee:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    33f2:	d2f9      	bcs.n	33e8 <memcpy+0x118>

	ldrb	r3, [r1]
    33f4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    33f6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    33f8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    33fa:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    33fc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    33fe:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3400:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3402:	4770      	bx	lr

00003404 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    3404:	f002 b88c 	b.w	5520 <malloc>

00003408 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    3408:	f002 b892 	b.w	5530 <free>

0000340c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    340c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    3410:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    3412:	4666      	mov	r6, ip
	int i=0, j;
    3414:	2400      	movs	r4, #0
    3416:	e000      	b.n	341a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3418:	3401      	adds	r4, #1
		digit = val % radix;
    341a:	fbb0 f5f2 	udiv	r5, r0, r2
    341e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3422:	2b09      	cmp	r3, #9
    3424:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    3428:	f103 0330 	add.w	r3, r3, #48	; 0x30
    342c:	fa5f fe8e 	uxtb.w	lr, lr
    3430:	bf98      	it	ls
    3432:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    3436:	4290      	cmp	r0, r2
		val /= radix;
    3438:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    343a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    343e:	d2eb      	bcs.n	3418 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    3440:	1c63      	adds	r3, r4, #1
    3442:	2200      	movs	r2, #0
    3444:	18c8      	adds	r0, r1, r3
    3446:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    3448:	b17c      	cbz	r4, 346a <ultoa+0x5e>
		t = buf[j];
    344a:	4662      	mov	r2, ip
    344c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    3450:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    3454:	eba1 030c 	sub.w	r3, r1, ip
    3458:	3202      	adds	r2, #2
		buf[j] = buf[i];
    345a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    345e:	3b01      	subs	r3, #1
    3460:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    3462:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    3464:	4423      	add	r3, r4
    3466:	429a      	cmp	r2, r3
    3468:	dbef      	blt.n	344a <ultoa+0x3e>
	}
	return buf;
}
    346a:	4608      	mov	r0, r1
    346c:	bd70      	pop	{r4, r5, r6, pc}
    346e:	bf00      	nop

00003470 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    3470:	eeb4 0a40 	vcmp.f32	s0, s0
{
    3474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    3478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    347c:	4616      	mov	r6, r2
	int awidth = abs(width);
    347e:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    3482:	4607      	mov	r7, r0
    3484:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    3488:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    348c:	eeb0 8a40 	vmov.f32	s16, s0
    3490:	b085      	sub	sp, #20
	if (isnanf(val)) {
    3492:	f180 8148 	bvs.w	3726 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    3496:	eef0 7ac0 	vabs.f32	s15, s0
    349a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 37b0 <dtostrf+0x340>
    349e:	eef4 7a47 	vcmp.f32	s15, s14
    34a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34a6:	dd29      	ble.n	34fc <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    34a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    34ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34b0:	f100 80ed 	bmi.w	368e <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    34b4:	2a03      	cmp	r2, #3
    34b6:	f340 8091 	ble.w	35dc <dtostrf+0x16c>
    34ba:	2303      	movs	r3, #3
		if (width<0) {
    34bc:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    34be:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    34c2:	f2c0 8085 	blt.w	35d0 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    34c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    34ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34ce:	f100 816a 	bmi.w	37a6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    34d2:	2149      	movs	r1, #73	; 0x49
    34d4:	234e      	movs	r3, #78	; 0x4e
    34d6:	2046      	movs	r0, #70	; 0x46
    34d8:	1cf4      	adds	r4, r6, #3
    34da:	7031      	strb	r1, [r6, #0]
    34dc:	70b0      	strb	r0, [r6, #2]
    34de:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    34e0:	b122      	cbz	r2, 34ec <dtostrf+0x7c>
			*buf++ = ' ';
    34e2:	4620      	mov	r0, r4
    34e4:	2120      	movs	r1, #32
    34e6:	4414      	add	r4, r2
    34e8:	f003 ff2a 	bl	7340 <memset>
			awidth--;
		}
		*buf = 0;
    34ec:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    34ee:	4620      	mov	r0, r4
		*buf = 0;
    34f0:	7023      	strb	r3, [r4, #0]
}
    34f2:	b005      	add	sp, #20
    34f4:	ecbd 8b02 	vpop	{d8}
    34f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    34fc:	4689      	mov	r9, r1
    34fe:	460d      	mov	r5, r1
    3500:	aa02      	add	r2, sp, #8
    3502:	a901      	add	r1, sp, #4
    3504:	4648      	mov	r0, r9
    3506:	f003 fd5d 	bl	6fc4 <fcvtf>
	if (precision == 0 && decpt == 0) {
    350a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    350e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    3510:	ea59 030a 	orrs.w	r3, r9, sl
    3514:	d172      	bne.n	35fc <dtostrf+0x18c>
		decpt++;
    3516:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    3518:	7802      	ldrb	r2, [r0, #0]
    351a:	4ca6      	ldr	r4, [pc, #664]	; (37b4 <dtostrf+0x344>)
		decpt++;
    351c:	469a      	mov	sl, r3
    351e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    3520:	4ba5      	ldr	r3, [pc, #660]	; (37b8 <dtostrf+0x348>)
		decpt++;
    3522:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    3524:	2a34      	cmp	r2, #52	; 0x34
    3526:	bf88      	it	hi
    3528:	461c      	movhi	r4, r3
	if (sign) reqd++;
    352a:	9b02      	ldr	r3, [sp, #8]
    352c:	2b00      	cmp	r3, #0
    352e:	d07d      	beq.n	362c <dtostrf+0x1bc>
    3530:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    3534:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    3538:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    353c:	f1bb 0f00 	cmp.w	fp, #0
    3540:	f340 80a1 	ble.w	3686 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    3544:	465a      	mov	r2, fp
    3546:	2120      	movs	r1, #32
    3548:	4630      	mov	r0, r6
		e += pad;
    354a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    354c:	f003 fef8 	bl	7340 <memset>
    3550:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    3554:	222d      	movs	r2, #45	; 0x2d
    3556:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    355a:	f1ba 0f00 	cmp.w	sl, #0
    355e:	d177      	bne.n	3650 <dtostrf+0x1e0>
    3560:	f1b9 0f00 	cmp.w	r9, #0
    3564:	d006      	beq.n	3574 <dtostrf+0x104>
		*p++ = '0';
    3566:	461a      	mov	r2, r3
    3568:	2130      	movs	r1, #48	; 0x30
    356a:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    356e:	212e      	movs	r1, #46	; 0x2e
    3570:	7059      	strb	r1, [r3, #1]
    3572:	4613      	mov	r3, r2
	while (p < e) {
    3574:	42ab      	cmp	r3, r5
    3576:	d21f      	bcs.n	35b8 <dtostrf+0x148>
		*p++ = *s++;
    3578:	46a4      	mov	ip, r4
    357a:	4619      	mov	r1, r3
    357c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    3580:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3584:	42a9      	cmp	r1, r5
    3586:	d018      	beq.n	35ba <dtostrf+0x14a>
    3588:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    358a:	202e      	movs	r0, #46	; 0x2e
    358c:	3c01      	subs	r4, #1
    358e:	e00b      	b.n	35a8 <dtostrf+0x138>
    3590:	7058      	strb	r0, [r3, #1]
    3592:	3302      	adds	r3, #2
		if (p == e) break;
    3594:	3c01      	subs	r4, #1
	while (p < e) {
    3596:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3598:	4619      	mov	r1, r3
	while (p < e) {
    359a:	d20d      	bcs.n	35b8 <dtostrf+0x148>
		*p++ = *s++;
    359c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    35a0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    35a4:	42a9      	cmp	r1, r5
    35a6:	d008      	beq.n	35ba <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    35a8:	9401      	str	r4, [sp, #4]
    35aa:	2c00      	cmp	r4, #0
    35ac:	d0f0      	beq.n	3590 <dtostrf+0x120>
    35ae:	460b      	mov	r3, r1
		if (p == e) break;
    35b0:	3c01      	subs	r4, #1
	while (p < e) {
    35b2:	42ab      	cmp	r3, r5
		*p++ = *s++;
    35b4:	4619      	mov	r1, r3
	while (p < e) {
    35b6:	d3f1      	bcc.n	359c <dtostrf+0x12c>
    35b8:	461d      	mov	r5, r3
	if (width < 0) {
    35ba:	2f00      	cmp	r7, #0
    35bc:	db6b      	blt.n	3696 <dtostrf+0x226>
	return buf;
    35be:	4634      	mov	r4, r6
	*p = 0;
    35c0:	2300      	movs	r3, #0
}
    35c2:	4620      	mov	r0, r4
	*p = 0;
    35c4:	702b      	strb	r3, [r5, #0]
}
    35c6:	b005      	add	sp, #20
    35c8:	ecbd 8b02 	vpop	{d8}
    35cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    35d0:	b122      	cbz	r2, 35dc <dtostrf+0x16c>
				*buf++ = ' ';
    35d2:	4630      	mov	r0, r6
    35d4:	2120      	movs	r1, #32
    35d6:	4416      	add	r6, r2
    35d8:	f003 feb2 	bl	7340 <memset>
		if (val<0) *buf++ = '-';
    35dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    35e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    35e4:	f140 80bd 	bpl.w	3762 <dtostrf+0x2f2>
    35e8:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    35ea:	2249      	movs	r2, #73	; 0x49
    35ec:	234e      	movs	r3, #78	; 0x4e
    35ee:	2046      	movs	r0, #70	; 0x46
    35f0:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    35f2:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    35f4:	70f0      	strb	r0, [r6, #3]
    35f6:	7072      	strb	r2, [r6, #1]
    35f8:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    35fa:	e777      	b.n	34ec <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    35fc:	f1ca 0300 	rsb	r3, sl, #0
    3600:	4599      	cmp	r9, r3
    3602:	da57      	bge.n	36b4 <dtostrf+0x244>
		decpt = -precision;
    3604:	f04f 0801 	mov.w	r8, #1
    3608:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    360c:	4c69      	ldr	r4, [pc, #420]	; (37b4 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    360e:	45c2      	cmp	sl, r8
		decpt = -precision;
    3610:	4640      	mov	r0, r8
    3612:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    3616:	bfb8      	it	lt
    3618:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    361c:	f1ba 0f00 	cmp.w	sl, #0
    3620:	d152      	bne.n	36c8 <dtostrf+0x258>
	if (sign) reqd++;
    3622:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    3624:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    3628:	2b00      	cmp	r3, #0
    362a:	d181      	bne.n	3530 <dtostrf+0xc0>
	pad = width - reqd;
    362c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    3630:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    3634:	f1bb 0f00 	cmp.w	fp, #0
    3638:	dd27      	ble.n	368a <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    363a:	465a      	mov	r2, fp
    363c:	2120      	movs	r1, #32
    363e:	4630      	mov	r0, r6
		e += pad;
    3640:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    3642:	f003 fe7d 	bl	7340 <memset>
    3646:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    364a:	f1ba 0f00 	cmp.w	sl, #0
    364e:	d087      	beq.n	3560 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    3650:	f1ba 0f00 	cmp.w	sl, #0
    3654:	da8e      	bge.n	3574 <dtostrf+0x104>
    3656:	f1b9 0f00 	cmp.w	r9, #0
    365a:	d08b      	beq.n	3574 <dtostrf+0x104>
		*p++ = '0';
    365c:	4618      	mov	r0, r3
		*p++ = '.';
    365e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    3660:	2130      	movs	r1, #48	; 0x30
    3662:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    3666:	705a      	strb	r2, [r3, #1]
    3668:	4602      	mov	r2, r0
    366a:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    366c:	3301      	adds	r3, #1
			*p++ = '0';
    366e:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    3672:	d1fb      	bne.n	366c <dtostrf+0x1fc>
			*p++ = '0';
    3674:	f1ba 0f00 	cmp.w	sl, #0
    3678:	9301      	str	r3, [sp, #4]
    367a:	f1ca 0300 	rsb	r3, sl, #0
    367e:	bfa8      	it	ge
    3680:	2301      	movge	r3, #1
    3682:	4403      	add	r3, r0
    3684:	e776      	b.n	3574 <dtostrf+0x104>
	if (pad > 0) {
    3686:	4633      	mov	r3, r6
    3688:	e764      	b.n	3554 <dtostrf+0xe4>
    368a:	4633      	mov	r3, r6
    368c:	e765      	b.n	355a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    368e:	2a04      	cmp	r2, #4
    3690:	ddaa      	ble.n	35e8 <dtostrf+0x178>
    3692:	2304      	movs	r3, #4
    3694:	e712      	b.n	34bc <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    3696:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    3698:	f1b8 0f00 	cmp.w	r8, #0
    369c:	ea6f 0208 	mvn.w	r2, r8
    36a0:	da8d      	bge.n	35be <dtostrf+0x14e>
    36a2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    36a6:	2120      	movs	r1, #32
    36a8:	4628      	mov	r0, r5
    36aa:	3201      	adds	r2, #1
    36ac:	4415      	add	r5, r2
    36ae:	f003 fe47 	bl	7340 <memset>
    36b2:	e784      	b.n	35be <dtostrf+0x14e>
	reqd = strlen(s);
    36b4:	f004 fc04 	bl	7ec0 <strlen>
    36b8:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    36ba:	45c2      	cmp	sl, r8
    36bc:	bfb8      	it	lt
    36be:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    36c2:	f1ba 0f00 	cmp.w	sl, #0
    36c6:	d0ac      	beq.n	3622 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    36c8:	f1ba 0f00 	cmp.w	sl, #0
    36cc:	f6bf af2d 	bge.w	352a <dtostrf+0xba>
    36d0:	f1b9 0f00 	cmp.w	r9, #0
    36d4:	f43f af29 	beq.w	352a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    36d8:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    36dc:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    36e0:	4283      	cmp	r3, r0
    36e2:	f4bf af22 	bcs.w	352a <dtostrf+0xba>
			while (newPrecision > 0) {
    36e6:	f1b9 0f00 	cmp.w	r9, #0
    36ea:	dd05      	ble.n	36f8 <dtostrf+0x288>
				val *= 10.0f;
    36ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    36f0:	3d01      	subs	r5, #1
				val *= 10.0f;
    36f2:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    36f6:	d1fb      	bne.n	36f0 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    36f8:	aa02      	add	r2, sp, #8
    36fa:	eeb0 0a48 	vmov.f32	s0, s16
    36fe:	4628      	mov	r0, r5
    3700:	a903      	add	r1, sp, #12
    3702:	f003 fc5f 	bl	6fc4 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    3706:	f8dd a004 	ldr.w	sl, [sp, #4]
    370a:	9b03      	ldr	r3, [sp, #12]
    370c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    3710:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    3712:	eba3 030a 	sub.w	r3, r3, sl
    3716:	4293      	cmp	r3, r2
    3718:	f47f af07 	bne.w	352a <dtostrf+0xba>
    371c:	f10a 0a01 	add.w	sl, sl, #1
    3720:	f8cd a004 	str.w	sl, [sp, #4]
    3724:	e701      	b.n	352a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    3726:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    372e:	bf4c      	ite	mi
    3730:	2304      	movmi	r3, #4
    3732:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3734:	4293      	cmp	r3, r2
    3736:	da22      	bge.n	377e <dtostrf+0x30e>
		if (width<0) {
    3738:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    373a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    373e:	db18      	blt.n	3772 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3740:	ee10 3a10 	vmov	r3, s0
    3744:	2b00      	cmp	r3, #0
    3746:	da02      	bge.n	374e <dtostrf+0x2de>
    3748:	232d      	movs	r3, #45	; 0x2d
    374a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    374e:	234e      	movs	r3, #78	; 0x4e
    3750:	2141      	movs	r1, #65	; 0x41
    3752:	1cf4      	adds	r4, r6, #3
    3754:	7033      	strb	r3, [r6, #0]
    3756:	7071      	strb	r1, [r6, #1]
    3758:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    375a:	2a00      	cmp	r2, #0
    375c:	f47f aec1 	bne.w	34e2 <dtostrf+0x72>
    3760:	e6c4      	b.n	34ec <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3762:	2149      	movs	r1, #73	; 0x49
    3764:	224e      	movs	r2, #78	; 0x4e
    3766:	2346      	movs	r3, #70	; 0x46
    3768:	1cf4      	adds	r4, r6, #3
    376a:	7031      	strb	r1, [r6, #0]
    376c:	7072      	strb	r2, [r6, #1]
    376e:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3770:	e6bc      	b.n	34ec <dtostrf+0x7c>
			while (awidth) {
    3772:	b122      	cbz	r2, 377e <dtostrf+0x30e>
				*buf++ = ' ';
    3774:	4630      	mov	r0, r6
    3776:	2120      	movs	r1, #32
    3778:	4416      	add	r6, r2
    377a:	f003 fde1 	bl	7340 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    377e:	ee18 3a10 	vmov	r3, s16
    3782:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3784:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3788:	db05      	blt.n	3796 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    378a:	2241      	movs	r2, #65	; 0x41
    378c:	1cf4      	adds	r4, r6, #3
    378e:	7033      	strb	r3, [r6, #0]
    3790:	7072      	strb	r2, [r6, #1]
    3792:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3794:	e6aa      	b.n	34ec <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3796:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3798:	2241      	movs	r2, #65	; 0x41
    379a:	1d34      	adds	r4, r6, #4
    379c:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    379e:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    37a0:	70b2      	strb	r2, [r6, #2]
    37a2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    37a4:	e6a2      	b.n	34ec <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    37a6:	232d      	movs	r3, #45	; 0x2d
    37a8:	f806 3b01 	strb.w	r3, [r6], #1
    37ac:	e691      	b.n	34d2 <dtostrf+0x62>
    37ae:	bf00      	nop
    37b0:	7f7fffff 	.word	0x7f7fffff
    37b4:	20000e64 	.word	0x20000e64
    37b8:	20000e68 	.word	0x20000e68

000037bc <unused_interrupt_vector>:
	__disable_irq();
    37bc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    37be:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    37c2:	4c52      	ldr	r4, [pc, #328]	; (390c <unused_interrupt_vector+0x150>)
    37c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    37c8:	f01e 0f04 	tst.w	lr, #4
    37cc:	bf0c      	ite	eq
    37ce:	f3ef 8208 	mrseq	r2, MSP
    37d2:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    37d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    37da:	4e4d      	ldr	r6, [pc, #308]	; (3910 <unused_interrupt_vector+0x154>)
	while (p < end) {
    37dc:	4d4d      	ldr	r5, [pc, #308]	; (3914 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    37de:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    37e2:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    37e6:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    37ea:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    37ee:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    37f2:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    37f6:	6993      	ldr	r3, [r2, #24]
    37f8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    37fc:	69d3      	ldr	r3, [r2, #28]
    37fe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    3802:	f000 f8d1 	bl	39a8 <tempmonGetTemp>
    3806:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    380a:	f001 fdef 	bl	53ec <rtc_get>
	info->len = sizeof(*info) / 4;
    380e:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    3810:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    3814:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    3818:	460b      	mov	r3, r1
    381a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    381e:	493e      	ldr	r1, [pc, #248]	; (3918 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    3820:	1d30      	adds	r0, r6, #4
    3822:	405a      	eors	r2, r3
    3824:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3826:	f002 0301 	and.w	r3, r2, #1
    382a:	3c01      	subs	r4, #1
    382c:	fb01 f303 	mul.w	r3, r1, r3
    3830:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    3834:	d1f7      	bne.n	3826 <unused_interrupt_vector+0x6a>
	while (p < end) {
    3836:	42a8      	cmp	r0, r5
    3838:	d002      	beq.n	3840 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    383a:	6873      	ldr	r3, [r6, #4]
    383c:	4606      	mov	r6, r0
    383e:	e7ef      	b.n	3820 <unused_interrupt_vector+0x64>
	info->crc = crc;
    3840:	4b32      	ldr	r3, [pc, #200]	; (390c <unused_interrupt_vector+0x150>)
    3842:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3846:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    384a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    384e:	4930      	ldr	r1, [pc, #192]	; (3910 <unused_interrupt_vector+0x154>)
    3850:	4a32      	ldr	r2, [pc, #200]	; (391c <unused_interrupt_vector+0x160>)
    3852:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    3856:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    385a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    385e:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3862:	4a2f      	ldr	r2, [pc, #188]	; (3920 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    3864:	2502      	movs	r5, #2
    3866:	482f      	ldr	r0, [pc, #188]	; (3924 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3868:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    386a:	492f      	ldr	r1, [pc, #188]	; (3928 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    386c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    3870:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    3872:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3874:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3876:	482d      	ldr	r0, [pc, #180]	; (392c <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    387c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3880:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3882:	680b      	ldr	r3, [r1, #0]
    3884:	4283      	cmp	r3, r0
    3886:	d83d      	bhi.n	3904 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    3888:	4d26      	ldr	r5, [pc, #152]	; (3924 <unused_interrupt_vector+0x168>)
    388a:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    388c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3890:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    3894:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3896:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    3898:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    389c:	4924      	ldr	r1, [pc, #144]	; (3930 <unused_interrupt_vector+0x174>)
    389e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    38a2:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    38a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    38aa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    38ae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    38b2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    38b6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    38ba:	e001      	b.n	38c0 <unused_interrupt_vector+0x104>
		usb_isr();
    38bc:	f000 f966 	bl	3b8c <usb_isr>
		if (PIT_TFLG0) {
    38c0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    38c4:	2b00      	cmp	r3, #0
    38c6:	d0f9      	beq.n	38bc <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    38c8:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    38ca:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    38ce:	2c4f      	cmp	r4, #79	; 0x4f
    38d0:	d9f4      	bls.n	38bc <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    38d2:	4b18      	ldr	r3, [pc, #96]	; (3934 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    38d4:	2002      	movs	r0, #2
    38d6:	4918      	ldr	r1, [pc, #96]	; (3938 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    38d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    38dc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    38e0:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    38e2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    38e6:	b93b      	cbnz	r3, 38f8 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    38e8:	4814      	ldr	r0, [pc, #80]	; (393c <unused_interrupt_vector+0x180>)
    38ea:	4915      	ldr	r1, [pc, #84]	; (3940 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    38ec:	4a0d      	ldr	r2, [pc, #52]	; (3924 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    38ee:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    38f0:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    38f4:	2b00      	cmp	r3, #0
    38f6:	d0fa      	beq.n	38ee <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    38f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38fc:	4a11      	ldr	r2, [pc, #68]	; (3944 <unused_interrupt_vector+0x188>)
    38fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    3902:	e7fe      	b.n	3902 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3904:	f7ff f9ee 	bl	2ce4 <set_arm_clock>
    3908:	e7be      	b.n	3888 <unused_interrupt_vector+0xcc>
    390a:	bf00      	nop
    390c:	2027ff00 	.word	0x2027ff00
    3910:	2027ff80 	.word	0x2027ff80
    3914:	2027ffa8 	.word	0x2027ffa8
    3918:	edb88320 	.word	0xedb88320
    391c:	2027ffa0 	.word	0x2027ffa0
    3920:	400fc000 	.word	0x400fc000
    3924:	40084000 	.word	0x40084000
    3928:	2000118c 	.word	0x2000118c
    392c:	0bcd3d80 	.word	0x0bcd3d80
    3930:	00249f00 	.word	0x00249f00
    3934:	400d9000 	.word	0x400d9000
    3938:	402e0000 	.word	0x402e0000
    393c:	400f8000 	.word	0x400f8000
    3940:	0bad00f1 	.word	0x0bad00f1
    3944:	05fa0004 	.word	0x05fa0004

00003948 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    3948:	490a      	ldr	r1, [pc, #40]	; (3974 <_sbrk+0x2c>)
    394a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    394c:	b138      	cbz	r0, 395e <_sbrk+0x16>
{
    394e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    3950:	1813      	adds	r3, r2, r0
    3952:	4809      	ldr	r0, [pc, #36]	; (3978 <_sbrk+0x30>)
    3954:	4283      	cmp	r3, r0
    3956:	d804      	bhi.n	3962 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    3958:	4610      	mov	r0, r2
                __brkval = prev + incr;
    395a:	600b      	str	r3, [r1, #0]
}
    395c:	bd08      	pop	{r3, pc}
    395e:	4610      	mov	r0, r2
    3960:	4770      	bx	lr
                        errno = ENOMEM;
    3962:	f004 f89d 	bl	7aa0 <__errno>
    3966:	230c      	movs	r3, #12
                        return (void *)-1;
    3968:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    396c:	6003      	str	r3, [r0, #0]
}
    396e:	4610      	mov	r0, r2
    3970:	bd08      	pop	{r3, pc}
    3972:	bf00      	nop
    3974:	200015c4 	.word	0x200015c4
    3978:	20280000 	.word	0x20280000

0000397c <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    397c:	2000      	movs	r0, #0
    397e:	4770      	bx	lr

00003980 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    3980:	f04f 30ff 	mov.w	r0, #4294967295
    3984:	4770      	bx	lr
    3986:	bf00      	nop

00003988 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    3988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    398c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    398e:	604b      	str	r3, [r1, #4]
}
    3990:	4770      	bx	lr
    3992:	bf00      	nop

00003994 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    3994:	2001      	movs	r0, #1
    3996:	4770      	bx	lr

00003998 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    3998:	f04f 30ff 	mov.w	r0, #4294967295
    399c:	4770      	bx	lr
    399e:	bf00      	nop

000039a0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    39a0:	bf30      	wfi
    39a2:	e7fd      	b.n	39a0 <abort>

000039a4 <Panic_Temp_isr>:
  unused_interrupt_vector();
    39a4:	f7ff bf0a 	b.w	37bc <unused_interrupt_vector>

000039a8 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    39a8:	4a12      	ldr	r2, [pc, #72]	; (39f4 <tempmonGetTemp+0x4c>)
    39aa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    39ae:	075b      	lsls	r3, r3, #29
    39b0:	d5fb      	bpl.n	39aa <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    39b2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    39b6:	4810      	ldr	r0, [pc, #64]	; (39f8 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    39b8:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    39bc:	490f      	ldr	r1, [pc, #60]	; (39fc <tempmonGetTemp+0x54>)
    39be:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    39c2:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    39c6:	ed91 6a00 	vldr	s12, [r1]
    39ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    39ce:	4a0c      	ldr	r2, [pc, #48]	; (3a00 <tempmonGetTemp+0x58>)
    39d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    39d4:	4b0b      	ldr	r3, [pc, #44]	; (3a04 <tempmonGetTemp+0x5c>)
    39d6:	edd2 6a00 	vldr	s13, [r2]
    39da:	ee77 7ac7 	vsub.f32	s15, s15, s14
    39de:	ed93 7a00 	vldr	s14, [r3]
    39e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    39e6:	ee67 7a86 	vmul.f32	s15, s15, s12
    39ea:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    39ee:	ee37 0a40 	vsub.f32	s0, s14, s0
    39f2:	4770      	bx	lr
    39f4:	400d8100 	.word	0x400d8100
    39f8:	20003324 	.word	0x20003324
    39fc:	2000332c 	.word	0x2000332c
    3a00:	20003330 	.word	0x20003330
    3a04:	20003328 	.word	0x20003328

00003a08 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    3a08:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    3a0a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    3a0c:	b11b      	cbz	r3, 3a16 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    3a0e:	6853      	ldr	r3, [r2, #4]
    3a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    3a14:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    3a16:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    3a18:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    3a1a:	b33c      	cbz	r4, 3a6c <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    3a1c:	4b1a      	ldr	r3, [pc, #104]	; (3a88 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    3a1e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    3a20:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3a24:	420c      	tst	r4, r1
    3a26:	d11d      	bne.n	3a64 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    3a28:	4e18      	ldr	r6, [pc, #96]	; (3a8c <schedule_transfer+0x84>)
    3a2a:	6877      	ldr	r7, [r6, #4]
    3a2c:	e004      	b.n	3a38 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3a2e:	6874      	ldr	r4, [r6, #4]
    3a30:	1be4      	subs	r4, r4, r7
    3a32:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    3a36:	d20b      	bcs.n	3a50 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    3a38:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3a3c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    3a40:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    3a44:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    3a48:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    3a4c:	0464      	lsls	r4, r4, #17
    3a4e:	d5ee      	bpl.n	3a2e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    3a50:	400d      	ands	r5, r1
    3a52:	d107      	bne.n	3a64 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    3a54:	4c0c      	ldr	r4, [pc, #48]	; (3a88 <schedule_transfer+0x80>)
		endpoint->status = 0;
    3a56:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    3a5a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3a5e:	430b      	orrs	r3, r1
    3a60:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    3a64:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3a66:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    3a68:	bcf0      	pop	{r4, r5, r6, r7}
    3a6a:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    3a6c:	4d06      	ldr	r5, [pc, #24]	; (3a88 <schedule_transfer+0x80>)
	endpoint->status = 0;
    3a6e:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    3a72:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    3a76:	430b      	orrs	r3, r1
    3a78:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    3a7c:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    3a7e:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    3a80:	b662      	cpsie	i
}
    3a82:	bcf0      	pop	{r4, r5, r6, r7}
    3a84:	4770      	bx	lr
    3a86:	bf00      	nop
    3a88:	402e0000 	.word	0x402e0000
    3a8c:	e0001000 	.word	0xe0001000

00003a90 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    3a92:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    3a94:	b19d      	cbz	r5, 3abe <run_callbacks+0x2e>
    3a96:	4606      	mov	r6, r0
    3a98:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    3a9a:	2400      	movs	r4, #0
    3a9c:	e003      	b.n	3aa6 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    3a9e:	6812      	ldr	r2, [r2, #0]
		count++;
    3aa0:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    3aa2:	2a01      	cmp	r2, #1
    3aa4:	d00c      	beq.n	3ac0 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    3aa6:	6853      	ldr	r3, [r2, #4]
    3aa8:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3aac:	d0f7      	beq.n	3a9e <run_callbacks+0xe>
			ep->first_transfer = t;
    3aae:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    3ab0:	b12c      	cbz	r4, 3abe <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    3ab2:	4628      	mov	r0, r5
		ep->callback_function(first);
    3ab4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    3ab6:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    3ab8:	4798      	blx	r3
	while (count) {
    3aba:	3c01      	subs	r4, #1
    3abc:	d1f9      	bne.n	3ab2 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    3abe:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    3ac0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    3ac4:	e7f4      	b.n	3ab0 <run_callbacks+0x20>
    3ac6:	bf00      	nop

00003ac8 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3ac8:	b430      	push	{r4, r5}
	if (len > 0) {
    3aca:	b9d9      	cbnz	r1, 3b04 <endpoint0_transmit.constprop.0+0x3c>
    3acc:	4c1f      	ldr	r4, [pc, #124]	; (3b4c <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    3ace:	4b20      	ldr	r3, [pc, #128]	; (3b50 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    3ad0:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ad2:	4a20      	ldr	r2, [pc, #128]	; (3b54 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    3ad4:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ad6:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    3ada:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3adc:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    3ade:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ae2:	2480      	movs	r4, #128	; 0x80
    3ae4:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ae6:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3aea:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3aee:	481a      	ldr	r0, [pc, #104]	; (3b58 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    3af0:	432b      	orrs	r3, r5
    3af2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3af6:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    3af8:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3afc:	2b00      	cmp	r3, #0
    3afe:	d1fb      	bne.n	3af8 <endpoint0_transmit.constprop.0+0x30>
}
    3b00:	bc30      	pop	{r4, r5}
    3b02:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3b04:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    3b06:	4b15      	ldr	r3, [pc, #84]	; (3b5c <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3b08:	4c10      	ldr	r4, [pc, #64]	; (3b4c <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    3b0a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3b0c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3b10:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    3b12:	4a10      	ldr	r2, [pc, #64]	; (3b54 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3b14:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3b16:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    3b1a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3b1c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3b1e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3b22:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3b24:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3b26:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3b2a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3b2e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    3b30:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3b32:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3b34:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3b36:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3b3e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    3b42:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3b46:	2b00      	cmp	r3, #0
    3b48:	d1fb      	bne.n	3b42 <endpoint0_transmit.constprop.0+0x7a>
    3b4a:	e7c0      	b.n	3ace <endpoint0_transmit.constprop.0+0x6>
    3b4c:	20000000 	.word	0x20000000
    3b50:	200022c0 	.word	0x200022c0
    3b54:	402e0000 	.word	0x402e0000
    3b58:	20002854 	.word	0x20002854
    3b5c:	200022e0 	.word	0x200022e0

00003b60 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    3b60:	4908      	ldr	r1, [pc, #32]	; (3b84 <usb_stop_sof_interrupts+0x24>)
    3b62:	2201      	movs	r2, #1
    3b64:	780b      	ldrb	r3, [r1, #0]
    3b66:	fa02 f000 	lsl.w	r0, r2, r0
    3b6a:	ea23 0000 	bic.w	r0, r3, r0
    3b6e:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    3b70:	b930      	cbnz	r0, 3b80 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    3b72:	4a05      	ldr	r2, [pc, #20]	; (3b88 <usb_stop_sof_interrupts+0x28>)
    3b74:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    3b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3b7c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop
    3b84:	20003365 	.word	0x20003365
    3b88:	402e0000 	.word	0x402e0000

00003b8c <usb_isr>:
{
    3b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    3b90:	4c97      	ldr	r4, [pc, #604]	; (3df0 <usb_isr+0x264>)
{
    3b92:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    3b94:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3b98:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    3b9a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    3b9e:	d553      	bpl.n	3c48 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    3ba0:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3ba4:	2a00      	cmp	r2, #0
    3ba6:	d04a      	beq.n	3c3e <usb_isr+0xb2>
    3ba8:	4e92      	ldr	r6, [pc, #584]	; (3df4 <usb_isr+0x268>)
    3baa:	f8df a260 	ldr.w	sl, [pc, #608]	; 3e0c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    3bae:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3e24 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3bb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 3e28 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3bb6:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3e2c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    3bba:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    3bbe:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    3bc2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3bc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3bca:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    3bce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3bd2:	049d      	lsls	r5, r3, #18
    3bd4:	d5f5      	bpl.n	3bc2 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3bd6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3bda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3bde:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    3be2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3be6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3bea:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    3bee:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    3bf2:	d1fa      	bne.n	3bea <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    3bf4:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    3bf6:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    3bf8:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    3bfc:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    3c00:	f000 81cf 	beq.w	3fa2 <usb_isr+0x416>
    3c04:	f200 80db 	bhi.w	3dbe <usb_isr+0x232>
    3c08:	f240 3102 	movw	r1, #770	; 0x302
    3c0c:	428b      	cmp	r3, r1
    3c0e:	f000 81e7 	beq.w	3fe0 <usb_isr+0x454>
    3c12:	f200 809a 	bhi.w	3d4a <usb_isr+0x1be>
    3c16:	2b82      	cmp	r3, #130	; 0x82
    3c18:	f000 81cb 	beq.w	3fb2 <usb_isr+0x426>
    3c1c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    3c20:	f040 808a 	bne.w	3d38 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    3c24:	f010 0f78 	tst.w	r0, #120	; 0x78
    3c28:	b283      	uxth	r3, r0
    3c2a:	f000 8203 	beq.w	4034 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    3c2e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3c32:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3c36:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3c3a:	2a00      	cmp	r2, #0
    3c3c:	d1bd      	bne.n	3bba <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    3c3e:	4a6c      	ldr	r2, [pc, #432]	; (3df0 <usb_isr+0x264>)
    3c40:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    3c44:	2b00      	cmp	r3, #0
    3c46:	d142      	bne.n	3cce <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    3c48:	067e      	lsls	r6, r7, #25
    3c4a:	d516      	bpl.n	3c7a <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    3c4c:	4b68      	ldr	r3, [pc, #416]	; (3df0 <usb_isr+0x264>)
    3c4e:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    3c52:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    3c56:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    3c5a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    3c5e:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    3c62:	2c00      	cmp	r4, #0
    3c64:	d1fb      	bne.n	3c5e <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    3c66:	f04f 32ff 	mov.w	r2, #4294967295
    3c6a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    3c6e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    3c72:	f000 fd27 	bl	46c4 <usb_serial_reset>
		endpointN_notify_mask = 0;
    3c76:	4b60      	ldr	r3, [pc, #384]	; (3df8 <usb_isr+0x26c>)
    3c78:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    3c7a:	01fc      	lsls	r4, r7, #7
    3c7c:	d503      	bpl.n	3c86 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    3c7e:	4b5f      	ldr	r3, [pc, #380]	; (3dfc <usb_isr+0x270>)
    3c80:	681b      	ldr	r3, [r3, #0]
    3c82:	b103      	cbz	r3, 3c86 <usb_isr+0xfa>
    3c84:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    3c86:	01b8      	lsls	r0, r7, #6
    3c88:	d503      	bpl.n	3c92 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    3c8a:	4b5d      	ldr	r3, [pc, #372]	; (3e00 <usb_isr+0x274>)
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	b103      	cbz	r3, 3c92 <usb_isr+0x106>
    3c90:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    3c92:	0779      	lsls	r1, r7, #29
    3c94:	d508      	bpl.n	3ca8 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    3c96:	4b56      	ldr	r3, [pc, #344]	; (3df0 <usb_isr+0x264>)
    3c98:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    3c9c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    3ca0:	d047      	beq.n	3d32 <usb_isr+0x1a6>
			usb_high_speed = 1;
    3ca2:	4b58      	ldr	r3, [pc, #352]	; (3e04 <usb_isr+0x278>)
    3ca4:	2201      	movs	r2, #1
    3ca6:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3ca8:	4b51      	ldr	r3, [pc, #324]	; (3df0 <usb_isr+0x264>)
    3caa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    3cae:	061a      	lsls	r2, r3, #24
    3cb0:	d50a      	bpl.n	3cc8 <usb_isr+0x13c>
    3cb2:	063b      	lsls	r3, r7, #24
    3cb4:	d508      	bpl.n	3cc8 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    3cb6:	4a54      	ldr	r2, [pc, #336]	; (3e08 <usb_isr+0x27c>)
    3cb8:	7813      	ldrb	r3, [r2, #0]
    3cba:	b12b      	cbz	r3, 3cc8 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    3cbc:	3b01      	subs	r3, #1
    3cbe:	b2db      	uxtb	r3, r3
    3cc0:	7013      	strb	r3, [r2, #0]
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	f000 8272 	beq.w	41ac <usb_isr+0x620>
}
    3cc8:	b003      	add	sp, #12
    3cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    3cce:	494f      	ldr	r1, [pc, #316]	; (3e0c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    3cd0:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    3cd4:	6808      	ldr	r0, [r1, #0]
    3cd6:	4203      	tst	r3, r0
    3cd8:	f040 81d1 	bne.w	407e <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    3cdc:	4a46      	ldr	r2, [pc, #280]	; (3df8 <usb_isr+0x26c>)
    3cde:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    3ce0:	401c      	ands	r4, r3
    3ce2:	d0b1      	beq.n	3c48 <usb_isr+0xbc>
				while (tx) {
    3ce4:	ea5f 4814 	movs.w	r8, r4, lsr #16
    3ce8:	d010      	beq.n	3d0c <usb_isr+0x180>
    3cea:	4e42      	ldr	r6, [pc, #264]	; (3df4 <usb_isr+0x268>)
					tx &= ~(1<<p);
    3cec:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    3cf0:	fa98 f5a8 	rbit	r5, r8
    3cf4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3cf8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    3cfc:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3d00:	3040      	adds	r0, #64	; 0x40
    3d02:	f7ff fec5 	bl	3a90 <run_callbacks>
				while (tx) {
    3d06:	ea38 0805 	bics.w	r8, r8, r5
    3d0a:	d1f1      	bne.n	3cf0 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    3d0c:	b2a4      	uxth	r4, r4
				while(rx) {
    3d0e:	2c00      	cmp	r4, #0
    3d10:	d09a      	beq.n	3c48 <usb_isr+0xbc>
    3d12:	4e38      	ldr	r6, [pc, #224]	; (3df4 <usb_isr+0x268>)
					rx &= ~(1<<p);
    3d14:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    3d18:	fa94 f5a4 	rbit	r5, r4
    3d1c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3d20:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    3d24:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3d28:	f7ff feb2 	bl	3a90 <run_callbacks>
				while(rx) {
    3d2c:	43ac      	bics	r4, r5
    3d2e:	d1f3      	bne.n	3d18 <usb_isr+0x18c>
    3d30:	e78a      	b.n	3c48 <usb_isr+0xbc>
			usb_high_speed = 0;
    3d32:	4a34      	ldr	r2, [pc, #208]	; (3e04 <usb_isr+0x278>)
    3d34:	7013      	strb	r3, [r2, #0]
    3d36:	e7b7      	b.n	3ca8 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    3d38:	2b80      	cmp	r3, #128	; 0x80
    3d3a:	f47f af78 	bne.w	3c2e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    3d3e:	4834      	ldr	r0, [pc, #208]	; (3e10 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    3d40:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    3d42:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3d44:	f7ff fec0 	bl	3ac8 <endpoint0_transmit.constprop.0>
		return;
    3d48:	e775      	b.n	3c36 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    3d4a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    3d4e:	f000 810b 	beq.w	3f68 <usb_isr+0x3dc>
    3d52:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    3d56:	2b01      	cmp	r3, #1
    3d58:	f63f af69 	bhi.w	3c2e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3d5c:	4b2d      	ldr	r3, [pc, #180]	; (3e14 <usb_isr+0x288>)
    3d5e:	685d      	ldr	r5, [r3, #4]
    3d60:	2d00      	cmp	r5, #0
    3d62:	f43f af64 	beq.w	3c2e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d66:	fa1f fc8c 	uxth.w	ip, ip
    3d6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    3d6e:	e004      	b.n	3d7a <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    3d70:	691d      	ldr	r5, [r3, #16]
    3d72:	330c      	adds	r3, #12
    3d74:	2d00      	cmp	r5, #0
    3d76:	f43f af5a 	beq.w	3c2e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    3d7a:	881a      	ldrh	r2, [r3, #0]
    3d7c:	4572      	cmp	r2, lr
    3d7e:	d1f7      	bne.n	3d70 <usb_isr+0x1e4>
    3d80:	885a      	ldrh	r2, [r3, #2]
    3d82:	4562      	cmp	r2, ip
    3d84:	d1f4      	bne.n	3d70 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    3d86:	ea4f 221e 	mov.w	r2, lr, lsr #8
    3d8a:	2a03      	cmp	r2, #3
    3d8c:	f000 81a5 	beq.w	40da <usb_isr+0x54e>
					datalen = list->length;
    3d90:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    3d92:	0c00      	lsrs	r0, r0, #16
    3d94:	4282      	cmp	r2, r0
    3d96:	bf28      	it	cs
    3d98:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    3d9a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    3d9e:	f040 81a1 	bne.w	40e4 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    3da2:	4b18      	ldr	r3, [pc, #96]	; (3e04 <usb_isr+0x278>)
    3da4:	491c      	ldr	r1, [pc, #112]	; (3e18 <usb_isr+0x28c>)
    3da6:	7818      	ldrb	r0, [r3, #0]
    3da8:	4b1c      	ldr	r3, [pc, #112]	; (3e1c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3daa:	9201      	str	r2, [sp, #4]
    3dac:	2800      	cmp	r0, #0
    3dae:	bf18      	it	ne
    3db0:	4619      	movne	r1, r3
    3db2:	481b      	ldr	r0, [pc, #108]	; (3e20 <usb_isr+0x294>)
    3db4:	f7ff fa8c 	bl	32d0 <memcpy>
    3db8:	4d19      	ldr	r5, [pc, #100]	; (3e20 <usb_isr+0x294>)
    3dba:	9a01      	ldr	r2, [sp, #4]
    3dbc:	e1e1      	b.n	4182 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    3dbe:	f242 2121 	movw	r1, #8737	; 0x2221
    3dc2:	428b      	cmp	r3, r1
    3dc4:	d07c      	beq.n	3ec0 <usb_isr+0x334>
    3dc6:	d933      	bls.n	3e30 <usb_isr+0x2a4>
    3dc8:	f242 3121 	movw	r1, #8993	; 0x2321
    3dcc:	428b      	cmp	r3, r1
    3dce:	f000 8081 	beq.w	3ed4 <usb_isr+0x348>
    3dd2:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    3dd6:	428b      	cmp	r3, r1
    3dd8:	f47f af29 	bne.w	3c2e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    3ddc:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    3de0:	b283      	uxth	r3, r0
    3de2:	f47f af24 	bne.w	3c2e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    3de6:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    3dea:	f363 0c0f 	bfi	ip, r3, #0, #16
    3dee:	e7b5      	b.n	3d5c <usb_isr+0x1d0>
    3df0:	402e0000 	.word	0x402e0000
    3df4:	20000000 	.word	0x20000000
    3df8:	20002858 	.word	0x20002858
    3dfc:	20003350 	.word	0x20003350
    3e00:	20003354 	.word	0x20003354
    3e04:	2000336c 	.word	0x2000336c
    3e08:	2000336d 	.word	0x2000336d
    3e0c:	20002854 	.word	0x20002854
    3e10:	200032e4 	.word	0x200032e4
    3e14:	20000fd4 	.word	0x20000fd4
    3e18:	6000212c 	.word	0x6000212c
    3e1c:	60002190 	.word	0x60002190
    3e20:	20200000 	.word	0x20200000
    3e24:	2000284c 	.word	0x2000284c
    3e28:	b8c6cf5d 	.word	0xb8c6cf5d
    3e2c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    3e30:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3e34:	d066      	beq.n	3f04 <usb_isr+0x378>
    3e36:	f242 0121 	movw	r1, #8225	; 0x2021
    3e3a:	428b      	cmp	r3, r1
    3e3c:	f47f aef7 	bne.w	3c2e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    3e40:	0c03      	lsrs	r3, r0, #16
    3e42:	2b07      	cmp	r3, #7
    3e44:	f47f aef3 	bne.w	3c2e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    3e48:	4bb2      	ldr	r3, [pc, #712]	; (4114 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3e4a:	49b3      	ldr	r1, [pc, #716]	; (4118 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    3e4c:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3e4e:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    3e50:	49b2      	ldr	r1, [pc, #712]	; (411c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    3e52:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    3e54:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    3e58:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    3e5c:	2201      	movs	r2, #1
    3e5e:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3e60:	4aaf      	ldr	r2, [pc, #700]	; (4120 <usb_isr+0x594>)
    3e62:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3e64:	4aaf      	ldr	r2, [pc, #700]	; (4124 <usb_isr+0x598>)
    3e66:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    3e68:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    3e6c:	f041 0101 	orr.w	r1, r1, #1
    3e70:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e74:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e78:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3e7c:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3e7e:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    3e80:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3e84:	2b00      	cmp	r3, #0
    3e86:	d1fb      	bne.n	3e80 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    3e88:	4aa7      	ldr	r2, [pc, #668]	; (4128 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3e8a:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    3e8c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    3e8e:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3e90:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    3e92:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3e94:	f248 0380 	movw	r3, #32896	; 0x8080
    3e98:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3e9a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3e9e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3ea2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3eaa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3eb2:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    3eb6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d1fb      	bne.n	3eb6 <usb_isr+0x32a>
    3ebe:	e6ba      	b.n	3c36 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    3ec0:	b280      	uxth	r0, r0
    3ec2:	b938      	cbnz	r0, 3ed4 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3ec4:	4b99      	ldr	r3, [pc, #612]	; (412c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3ec6:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3eca:	6819      	ldr	r1, [r3, #0]
    3ecc:	4b98      	ldr	r3, [pc, #608]	; (4130 <usb_isr+0x5a4>)
    3ece:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3ed0:	4b98      	ldr	r3, [pc, #608]	; (4134 <usb_isr+0x5a8>)
    3ed2:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    3ed4:	4b94      	ldr	r3, [pc, #592]	; (4128 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    3ed6:	2200      	movs	r2, #0
    3ed8:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    3eda:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    3edc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3ede:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    3ee0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3ee2:	2280      	movs	r2, #128	; 0x80
    3ee4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3ee6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3eea:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3eee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3ef6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    3efa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3efe:	2b00      	cmp	r3, #0
    3f00:	d1fb      	bne.n	3efa <usb_isr+0x36e>
    3f02:	e698      	b.n	3c36 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    3f04:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3f08:	4b8b      	ldr	r3, [pc, #556]	; (4138 <usb_isr+0x5ac>)
    3f0a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3f0c:	4b8b      	ldr	r3, [pc, #556]	; (413c <usb_isr+0x5b0>)
    3f0e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    3f12:	4b8b      	ldr	r3, [pc, #556]	; (4140 <usb_isr+0x5b4>)
    3f14:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3f18:	4b8a      	ldr	r3, [pc, #552]	; (4144 <usb_isr+0x5b8>)
    3f1a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    3f1e:	f000 fbd3 	bl	46c8 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    3f22:	2280      	movs	r2, #128	; 0x80
    3f24:	4629      	mov	r1, r5
    3f26:	4888      	ldr	r0, [pc, #544]	; (4148 <usb_isr+0x5bc>)
    3f28:	f003 fa0a 	bl	7340 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3f2c:	4b87      	ldr	r3, [pc, #540]	; (414c <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f2e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    3f30:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3f34:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    3f38:	4b7b      	ldr	r3, [pc, #492]	; (4128 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3f3a:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f3c:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    3f3e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3f40:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    3f42:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3f44:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f46:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3f4a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3f4e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f56:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3f5a:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    3f5e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f62:	2b00      	cmp	r3, #0
    3f64:	d1fb      	bne.n	3f5e <usb_isr+0x3d2>
    3f66:	e666      	b.n	3c36 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    3f68:	4b6f      	ldr	r3, [pc, #444]	; (4128 <usb_isr+0x59c>)
    3f6a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    3f6c:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    3f6e:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f70:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    3f72:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3f74:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3f76:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3f78:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3f7c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3f80:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3f88:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    3f8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3f90:	2b00      	cmp	r3, #0
    3f92:	d1fb      	bne.n	3f8c <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    3f94:	0c13      	lsrs	r3, r2, #16
    3f96:	065b      	lsls	r3, r3, #25
    3f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    3f9c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    3fa0:	e649      	b.n	3c36 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    3fa2:	4b65      	ldr	r3, [pc, #404]	; (4138 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    3fa4:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    3fa6:	486a      	ldr	r0, [pc, #424]	; (4150 <usb_isr+0x5c4>)
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3fac:	f7ff fd8c 	bl	3ac8 <endpoint0_transmit.constprop.0>
		return;
    3fb0:	e641      	b.n	3c36 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    3fb2:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    3fb4:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    3fb8:	f47f ae39 	bne.w	3c2e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    3fbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    3fc0:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    3fc4:	4a62      	ldr	r2, [pc, #392]	; (4150 <usb_isr+0x5c4>)
    3fc6:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3fc8:	0618      	lsls	r0, r3, #24
    3fca:	f100 809e 	bmi.w	410a <usb_isr+0x57e>
    3fce:	07cb      	lsls	r3, r1, #31
    3fd0:	d501      	bpl.n	3fd6 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    3fd2:	2301      	movs	r3, #1
    3fd4:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3fd6:	2102      	movs	r1, #2
    3fd8:	485d      	ldr	r0, [pc, #372]	; (4150 <usb_isr+0x5c4>)
    3fda:	f7ff fd75 	bl	3ac8 <endpoint0_transmit.constprop.0>
		return;
    3fde:	e62a      	b.n	3c36 <usb_isr+0xaa>
		if (endpoint > 7) break;
    3fe0:	f010 0f78 	tst.w	r0, #120	; 0x78
    3fe4:	b283      	uxth	r3, r0
    3fe6:	f47f ae22 	bne.w	3c2e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    3fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    3fee:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3ff2:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    3ff6:	bf14      	ite	ne
    3ff8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3ffc:	f043 0301 	orreq.w	r3, r3, #1
    4000:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4004:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4006:	4b48      	ldr	r3, [pc, #288]	; (4128 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4008:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    400a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    400c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    400e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4010:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4012:	2280      	movs	r2, #128	; 0x80
    4014:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4016:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    401a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    401e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4026:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    402a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    402e:	2b00      	cmp	r3, #0
    4030:	d1fb      	bne.n	402a <usb_isr+0x49e>
    4032:	e600      	b.n	3c36 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4038:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    403c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4040:	bf14      	ite	ne
    4042:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    4046:	f023 0301 	biceq.w	r3, r3, #1
    404a:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    404e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4050:	4b35      	ldr	r3, [pc, #212]	; (4128 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4052:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4054:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4056:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4058:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    405a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    405c:	2280      	movs	r2, #128	; 0x80
    405e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4060:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4064:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4068:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4070:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4074:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4078:	2b00      	cmp	r3, #0
    407a:	d1fb      	bne.n	4074 <usb_isr+0x4e8>
    407c:	e5db      	b.n	3c36 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    407e:	2000      	movs	r0, #0
    4080:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4082:	4926      	ldr	r1, [pc, #152]	; (411c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4084:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4086:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4088:	f242 0121 	movw	r1, #8225	; 0x2021
    408c:	428c      	cmp	r4, r1
    408e:	f47f ae25 	bne.w	3cdc <usb_isr+0x150>
    4092:	b280      	uxth	r0, r0
    4094:	2800      	cmp	r0, #0
    4096:	f47f ae21 	bne.w	3cdc <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    409a:	492e      	ldr	r1, [pc, #184]	; (4154 <usb_isr+0x5c8>)
    409c:	4c2e      	ldr	r4, [pc, #184]	; (4158 <usb_isr+0x5cc>)
    409e:	c903      	ldmia	r1, {r0, r1}
    40a0:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    40a2:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    40a4:	ea4f 4111 	mov.w	r1, r1, lsr #16
    40a8:	6020      	str	r0, [r4, #0]
    40aa:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    40ac:	f47f ae16 	bne.w	3cdc <usb_isr+0x150>
	__disable_irq();
    40b0:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    40b2:	482a      	ldr	r0, [pc, #168]	; (415c <usb_isr+0x5d0>)
    40b4:	7801      	ldrb	r1, [r0, #0]
    40b6:	f041 0108 	orr.w	r1, r1, #8
    40ba:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    40bc:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    40c0:	060d      	lsls	r5, r1, #24
    40c2:	d405      	bmi.n	40d0 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    40c4:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    40c6:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    40c8:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    40cc:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    40d0:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    40d2:	4a23      	ldr	r2, [pc, #140]	; (4160 <usb_isr+0x5d4>)
    40d4:	2150      	movs	r1, #80	; 0x50
    40d6:	7011      	strb	r1, [r2, #0]
    40d8:	e600      	b.n	3cdc <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    40da:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    40dc:	782a      	ldrb	r2, [r5, #0]
    40de:	4282      	cmp	r2, r0
    40e0:	bf28      	it	cs
    40e2:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    40e4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    40e8:	d144      	bne.n	4174 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    40ea:	4b1e      	ldr	r3, [pc, #120]	; (4164 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    40ec:	4d1e      	ldr	r5, [pc, #120]	; (4168 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    40ee:	7818      	ldrb	r0, [r3, #0]
    40f0:	491e      	ldr	r1, [pc, #120]	; (416c <usb_isr+0x5e0>)
    40f2:	4b1f      	ldr	r3, [pc, #124]	; (4170 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    40f4:	9201      	str	r2, [sp, #4]
    40f6:	2800      	cmp	r0, #0
    40f8:	bf18      	it	ne
    40fa:	4619      	movne	r1, r3
    40fc:	4628      	mov	r0, r5
    40fe:	f7ff f8e7 	bl	32d0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    4102:	2307      	movs	r3, #7
    4104:	706b      	strb	r3, [r5, #1]
    4106:	9a01      	ldr	r2, [sp, #4]
    4108:	e03b      	b.n	4182 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    410a:	03c9      	lsls	r1, r1, #15
    410c:	f53f af61 	bmi.w	3fd2 <usb_isr+0x446>
    4110:	e761      	b.n	3fd6 <usb_isr+0x44a>
    4112:	bf00      	nop
    4114:	200022e0 	.word	0x200022e0
    4118:	2000384c 	.word	0x2000384c
    411c:	20002480 	.word	0x20002480
    4120:	00070080 	.word	0x00070080
    4124:	2000484c 	.word	0x2000484c
    4128:	200022c0 	.word	0x200022c0
    412c:	2000333c 	.word	0x2000333c
    4130:	2000334c 	.word	0x2000334c
    4134:	2000336a 	.word	0x2000336a
    4138:	2000336b 	.word	0x2000336b
    413c:	00cc0002 	.word	0x00cc0002
    4140:	000200c8 	.word	0x000200c8
    4144:	00c80002 	.word	0x00c80002
    4148:	20000080 	.word	0x20000080
    414c:	74d59319 	.word	0x74d59319
    4150:	200032e4 	.word	0x200032e4
    4154:	2000284c 	.word	0x2000284c
    4158:	20003344 	.word	0x20003344
    415c:	20003365 	.word	0x20003365
    4160:	2000336d 	.word	0x2000336d
    4164:	2000336c 	.word	0x2000336c
    4168:	20200000 	.word	0x20200000
    416c:	60002190 	.word	0x60002190
    4170:	6000212c 	.word	0x6000212c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    4174:	4629      	mov	r1, r5
    4176:	4d10      	ldr	r5, [pc, #64]	; (41b8 <usb_isr+0x62c>)
    4178:	9201      	str	r2, [sp, #4]
    417a:	4628      	mov	r0, r5
    417c:	f7ff f8a8 	bl	32d0 <memcpy>
    4180:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4182:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4186:	4415      	add	r5, r2
	asm("dsb");
    4188:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    418c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4190:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    4194:	3320      	adds	r3, #32
	} while (location < end_addr);
    4196:	429d      	cmp	r5, r3
    4198:	d8fa      	bhi.n	4190 <usb_isr+0x604>
	asm("dsb");
    419a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    419e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    41a2:	4805      	ldr	r0, [pc, #20]	; (41b8 <usb_isr+0x62c>)
    41a4:	4611      	mov	r1, r2
    41a6:	f7ff fc8f 	bl	3ac8 <endpoint0_transmit.constprop.0>
				return;
    41aa:	e544      	b.n	3c36 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    41ac:	2003      	movs	r0, #3
    41ae:	f7ff fcd7 	bl	3b60 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    41b2:	f008 f9f1 	bl	c598 <___reboot_Teensyduino__veneer>
    41b6:	bf00      	nop
    41b8:	20200000 	.word	0x20200000

000041bc <usb_config_rx>:
{
    41bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41c0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    41c2:	1e83      	subs	r3, r0, #2
    41c4:	2b02      	cmp	r3, #2
    41c6:	d901      	bls.n	41cc <usb_config_rx+0x10>
}
    41c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    41cc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 421c <usb_config_rx+0x60>
    41d0:	4615      	mov	r5, r2
    41d2:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    41d4:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    41d6:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    41da:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    41dc:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    41e0:	2100      	movs	r1, #0
    41e2:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    41e6:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    41e8:	f003 f8aa 	bl	7340 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    41ec:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    41f0:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    41f2:	0952      	lsrs	r2, r2, #5
    41f4:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    41f8:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    41fc:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4200:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    4204:	2f00      	cmp	r7, #0
    4206:	d0df      	beq.n	41c8 <usb_config_rx+0xc>
    4208:	4a03      	ldr	r2, [pc, #12]	; (4218 <usb_config_rx+0x5c>)
    420a:	40b3      	lsls	r3, r6
    420c:	6811      	ldr	r1, [r2, #0]
    420e:	430b      	orrs	r3, r1
    4210:	6013      	str	r3, [r2, #0]
}
    4212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4216:	bf00      	nop
    4218:	20002858 	.word	0x20002858
    421c:	20000000 	.word	0x20000000

00004220 <usb_config_tx>:
{
    4220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4224:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4226:	1e81      	subs	r1, r0, #2
    4228:	2902      	cmp	r1, #2
    422a:	d901      	bls.n	4230 <usb_config_tx+0x10>
}
    422c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4230:	01c7      	lsls	r7, r0, #7
    4232:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4280 <usb_config_tx+0x60>
    4236:	4692      	mov	sl, r2
    4238:	4604      	mov	r4, r0
    423a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    423c:	223c      	movs	r2, #60	; 0x3c
    423e:	2100      	movs	r1, #0
    4240:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4242:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4246:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    4248:	f108 0004 	add.w	r0, r8, #4
    424c:	f003 f878 	bl	7340 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4250:	faba f28a 	clz	r2, sl
    4254:	0952      	lsrs	r2, r2, #5
    4256:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    425a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    425e:	2201      	movs	r2, #1
	qh->callback_function = callback;
    4260:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4264:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    4268:	2e00      	cmp	r6, #0
    426a:	d0df      	beq.n	422c <usb_config_tx+0xc>
    426c:	4b03      	ldr	r3, [pc, #12]	; (427c <usb_config_tx+0x5c>)
    426e:	3410      	adds	r4, #16
    4270:	6819      	ldr	r1, [r3, #0]
    4272:	40a2      	lsls	r2, r4
    4274:	430a      	orrs	r2, r1
    4276:	601a      	str	r2, [r3, #0]
}
    4278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    427c:	20002858 	.word	0x20002858
    4280:	20000000 	.word	0x20000000

00004284 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    4284:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    4286:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    4288:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    428a:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    428e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    4292:	b410      	push	{r4}
	transfer->next = 1;
    4294:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    4296:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    4298:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    429c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    429e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    42a2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    42a6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    42a8:	6181      	str	r1, [r0, #24]
}
    42aa:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    42ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    42b2:	4770      	bx	lr

000042b4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    42b4:	1e83      	subs	r3, r0, #2
{
    42b6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    42b8:	2b02      	cmp	r3, #2
    42ba:	d900      	bls.n	42be <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    42bc:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    42be:	4b06      	ldr	r3, [pc, #24]	; (42d8 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    42c0:	f100 0110 	add.w	r1, r0, #16
    42c4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    42c8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    42cc:	fa0c f101 	lsl.w	r1, ip, r1
    42d0:	3040      	adds	r0, #64	; 0x40
    42d2:	f7ff bb99 	b.w	3a08 <schedule_transfer>
    42d6:	bf00      	nop
    42d8:	20000000 	.word	0x20000000

000042dc <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    42dc:	1e83      	subs	r3, r0, #2
{
    42de:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    42e0:	2b02      	cmp	r3, #2
    42e2:	d900      	bls.n	42e6 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    42e4:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    42e6:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    42e8:	4b02      	ldr	r3, [pc, #8]	; (42f4 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    42ea:	4081      	lsls	r1, r0
    42ec:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    42f0:	f7ff bb8a 	b.w	3a08 <schedule_transfer>
    42f4:	20000000 	.word	0x20000000

000042f8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    42f8:	6840      	ldr	r0, [r0, #4]
#endif
}
    42fa:	4770      	bx	lr

000042fc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    42fc:	4a12      	ldr	r2, [pc, #72]	; (4348 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    42fe:	4b13      	ldr	r3, [pc, #76]	; (434c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4300:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    4304:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    4308:	4298      	cmp	r0, r3
{
    430a:	b510      	push	{r4, lr}
    430c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    430e:	d202      	bcs.n	4316 <usb_init_serialnumber+0x1a>
    4310:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4314:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    4316:	4c0e      	ldr	r4, [pc, #56]	; (4350 <usb_init_serialnumber+0x54>)
    4318:	a901      	add	r1, sp, #4
    431a:	220a      	movs	r2, #10
    431c:	f7ff f876 	bl	340c <ultoa>
	for (i=0; i<10; i++) {
    4320:	a901      	add	r1, sp, #4
    4322:	2300      	movs	r3, #0
    4324:	4620      	mov	r0, r4
		char c = buf[i];
    4326:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    432a:	3301      	adds	r3, #1
		if (!c) break;
    432c:	b13a      	cbz	r2, 433e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    432e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    4330:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    4334:	d1f7      	bne.n	4326 <usb_init_serialnumber+0x2a>
    4336:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4338:	7023      	strb	r3, [r4, #0]
}
    433a:	b004      	add	sp, #16
    433c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    433e:	005b      	lsls	r3, r3, #1
    4340:	b2db      	uxtb	r3, r3
    4342:	7023      	strb	r3, [r4, #0]
}
    4344:	b004      	add	sp, #16
    4346:	bd10      	pop	{r4, pc}
    4348:	401f4400 	.word	0x401f4400
    434c:	00989680 	.word	0x00989680
    4350:	20001db8 	.word	0x20001db8

00004354 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    4354:	f000 bad6 	b.w	4904 <usb_serial_flush_input>

00004358 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4358:	f000 bb66 	b.w	4a28 <usb_serial_flush_output>

0000435c <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    435c:	f000 bb3c 	b.w	49d8 <usb_serial_write_buffer_free>

00004360 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4360:	4608      	mov	r0, r1
    4362:	4611      	mov	r1, r2
    4364:	f000 bb2c 	b.w	49c0 <usb_serial_write>

00004368 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    436a:	4c14      	ldr	r4, [pc, #80]	; (43bc <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    436c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4370:	4e13      	ldr	r6, [pc, #76]	; (43c0 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4376:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    437a:	4f12      	ldr	r7, [pc, #72]	; (43c4 <rx_queue_transfer+0x5c>)
    437c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    4380:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4382:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4386:	4621      	mov	r1, r4
    4388:	883a      	ldrh	r2, [r7, #0]
    438a:	4630      	mov	r0, r6
    438c:	f7ff ff7a 	bl	4284 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    4390:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    4392:	4423      	add	r3, r4
	asm("dsb");
    4394:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    4398:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    439c:	3420      	adds	r4, #32
	} while (location < end_addr);
    439e:	42a3      	cmp	r3, r4
    43a0:	d8fa      	bhi.n	4398 <rx_queue_transfer+0x30>
	asm("dsb");
    43a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
    43a6:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    43aa:	2003      	movs	r0, #3
    43ac:	4631      	mov	r1, r6
    43ae:	f7ff ff95 	bl	42dc <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    43b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    43b6:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    43ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43bc:	20200080 	.word	0x20200080
    43c0:	20002300 	.word	0x20002300
    43c4:	20003358 	.word	0x20003358

000043c8 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    43c8:	4b24      	ldr	r3, [pc, #144]	; (445c <rx_event+0x94>)
{
    43ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    43ce:	881c      	ldrh	r4, [r3, #0]
    43d0:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    43d2:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    43d4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    43d8:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    43da:	2c00      	cmp	r4, #0
    43dc:	dd24      	ble.n	4428 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    43de:	4920      	ldr	r1, [pc, #128]	; (4460 <rx_event+0x98>)
		if (head != rx_tail) {
    43e0:	4820      	ldr	r0, [pc, #128]	; (4464 <rx_event+0x9c>)
		uint32_t head = rx_head;
    43e2:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    43e4:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    43e6:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    43e8:	4e1f      	ldr	r6, [pc, #124]	; (4468 <rx_event+0xa0>)
		if (head != rx_tail) {
    43ea:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    43ec:	481f      	ldr	r0, [pc, #124]	; (446c <rx_event+0xa4>)
		if (head != rx_tail) {
    43ee:	d007      	beq.n	4400 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    43f0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    43f4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    43f8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    43fc:	4294      	cmp	r4, r2
    43fe:	d918      	bls.n	4432 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4400:	3301      	adds	r3, #1
		rx_index[i] = 0;
    4402:	2200      	movs	r2, #0
		rx_count[i] = len;
    4404:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    4408:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    440a:	4e19      	ldr	r6, [pc, #100]	; (4470 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    440c:	bf88      	it	hi
    440e:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    4410:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    4414:	bf98      	it	ls
    4416:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    4418:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    441a:	4b16      	ldr	r3, [pc, #88]	; (4474 <rx_event+0xac>)
		rx_head = head;
    441c:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    441e:	681a      	ldr	r2, [r3, #0]
    4420:	4414      	add	r4, r2
    4422:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    4424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    4428:	4628      	mov	r0, r5
}
    442a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    442e:	f7ff bf9b 	b.w	4368 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4432:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    4436:	4910      	ldr	r1, [pc, #64]	; (4478 <rx_event+0xb0>)
    4438:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    443a:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    443c:	4408      	add	r0, r1
    443e:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    4442:	f7fe ff45 	bl	32d0 <memcpy>
				rx_available += len;
    4446:	4a0b      	ldr	r2, [pc, #44]	; (4474 <rx_event+0xac>)
				rx_queue_transfer(i);
    4448:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    444a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    444e:	6813      	ldr	r3, [r2, #0]
    4450:	4423      	add	r3, r4
}
    4452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    4456:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    4458:	f7ff bf86 	b.w	4368 <rx_queue_transfer>
    445c:	20003358 	.word	0x20003358
    4460:	20003363 	.word	0x20003363
    4464:	20003364 	.word	0x20003364
    4468:	200032f8 	.word	0x200032f8
    446c:	20003318 	.word	0x20003318
    4470:	20003308 	.word	0x20003308
    4474:	200032f4 	.word	0x200032f4
    4478:	20200080 	.word	0x20200080

0000447c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    447c:	4b1d      	ldr	r3, [pc, #116]	; (44f4 <usb_serial_flush_callback+0x78>)
    447e:	781a      	ldrb	r2, [r3, #0]
    4480:	2a00      	cmp	r2, #0
    4482:	d136      	bne.n	44f2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    4484:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4488:	4a1b      	ldr	r2, [pc, #108]	; (44f8 <usb_serial_flush_callback+0x7c>)
    448a:	7812      	ldrb	r2, [r2, #0]
    448c:	b38a      	cbz	r2, 44f2 <usb_serial_flush_callback+0x76>
{
    448e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    4492:	4d1a      	ldr	r5, [pc, #104]	; (44fc <usb_serial_flush_callback+0x80>)
    4494:	882a      	ldrh	r2, [r5, #0]
    4496:	b352      	cbz	r2, 44ee <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4498:	4e19      	ldr	r6, [pc, #100]	; (4500 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    449a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    449e:	4f19      	ldr	r7, [pc, #100]	; (4504 <usb_serial_flush_callback+0x88>)
    44a0:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    44a2:	4c19      	ldr	r4, [pc, #100]	; (4508 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    44a4:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    44a8:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    44ac:	4642      	mov	r2, r8
    44ae:	4638      	mov	r0, r7
    44b0:	4621      	mov	r1, r4
    44b2:	f7ff fee7 	bl	4284 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    44b6:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    44ba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    44be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    44c2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    44c6:	3420      	adds	r4, #32
	} while (location < end_addr);
    44c8:	42a2      	cmp	r2, r4
    44ca:	d8fa      	bhi.n	44c2 <usb_serial_flush_callback+0x46>
	asm("dsb");
    44cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    44d0:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    44d4:	2004      	movs	r0, #4
    44d6:	4639      	mov	r1, r7
    44d8:	f7ff feec 	bl	42b4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    44dc:	7833      	ldrb	r3, [r6, #0]
    44de:	3301      	adds	r3, #1
    44e0:	b2db      	uxtb	r3, r3
    44e2:	2b03      	cmp	r3, #3
    44e4:	bf88      	it	hi
    44e6:	2300      	movhi	r3, #0
    44e8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    44ea:	2300      	movs	r3, #0
    44ec:	802b      	strh	r3, [r5, #0]
}
    44ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44f2:	4770      	bx	lr
    44f4:	20003369 	.word	0x20003369
    44f8:	2000336b 	.word	0x2000336b
    44fc:	2000335a 	.word	0x2000335a
    4500:	20003368 	.word	0x20003368
    4504:	20002400 	.word	0x20002400
    4508:	20201080 	.word	0x20201080

0000450c <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    450c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4510:	b085      	sub	sp, #20
	while (size > 0) {
    4512:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4516:	2900      	cmp	r1, #0
    4518:	f000 80bf 	beq.w	469a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    451c:	2300      	movs	r3, #0
    451e:	4c60      	ldr	r4, [pc, #384]	; (46a0 <usb_serial_write.part.0+0x194>)
    4520:	f8df 8198 	ldr.w	r8, [pc, #408]	; 46bc <usb_serial_write.part.0+0x1b0>
    4524:	f8df a198 	ldr.w	sl, [pc, #408]	; 46c0 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    4528:	4f5e      	ldr	r7, [pc, #376]	; (46a4 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    452a:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    452c:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    452e:	4a5e      	ldr	r2, [pc, #376]	; (46a8 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    4530:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    4532:	4b5e      	ldr	r3, [pc, #376]	; (46ac <usb_serial_write.part.0+0x1a0>)
    4534:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    4536:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    453a:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    453e:	2b00      	cmp	r3, #0
    4540:	f040 80a7 	bne.w	4692 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    4544:	461e      	mov	r6, r3
		int waiting=0;
    4546:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    4548:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    454a:	4648      	mov	r0, r9
    454c:	f7ff fed4 	bl	42f8 <usb_transfer_status>
			if (!(status & 0x80)) {
    4550:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    4554:	f000 808c 	beq.w	4670 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    4558:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    455c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    4560:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    4564:	b905      	cbnz	r5, 4568 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    4566:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    4568:	2b00      	cmp	r3, #0
    456a:	d17d      	bne.n	4668 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    456c:	683b      	ldr	r3, [r7, #0]
    456e:	1b9b      	subs	r3, r3, r6
    4570:	2b78      	cmp	r3, #120	; 0x78
    4572:	f200 8087 	bhi.w	4684 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    4576:	4b4e      	ldr	r3, [pc, #312]	; (46b0 <usb_serial_write.part.0+0x1a4>)
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d074      	beq.n	4668 <usb_serial_write.part.0+0x15c>
			yield();
    457e:	f000 fa9d 	bl	4abc <yield>
			tx_noautoflush = 1;
    4582:	2201      	movs	r2, #1
		while (!tx_available) {
    4584:	f8b8 3000 	ldrh.w	r3, [r8]
    4588:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    458a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    458c:	2b00      	cmp	r3, #0
    458e:	d0dc      	beq.n	454a <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4590:	4a46      	ldr	r2, [pc, #280]	; (46ac <usb_serial_write.part.0+0x1a0>)
    4592:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4596:	7811      	ldrb	r1, [r2, #0]
    4598:	461a      	mov	r2, r3
    459a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    459e:	4d45      	ldr	r5, [pc, #276]	; (46b4 <usb_serial_write.part.0+0x1a8>)
    45a0:	02c9      	lsls	r1, r1, #11
    45a2:	4428      	add	r0, r5
		if (size >= tx_available) {
    45a4:	9d01      	ldr	r5, [sp, #4]
    45a6:	4295      	cmp	r5, r2
    45a8:	d217      	bcs.n	45da <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    45aa:	9303      	str	r3, [sp, #12]
    45ac:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    45b0:	462a      	mov	r2, r5
    45b2:	f7fe fe8d 	bl	32d0 <memcpy>
			tx_available -= size;
    45b6:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    45b8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    45bc:	1b5b      	subs	r3, r3, r5
    45be:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    45c2:	4b3d      	ldr	r3, [pc, #244]	; (46b8 <usb_serial_write.part.0+0x1ac>)
    45c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    45c8:	f3bf 8f4f 	dsb	sy
			sent += size;
    45cc:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    45ce:	2300      	movs	r3, #0
			sent += size;
    45d0:	4428      	add	r0, r5
		tx_noautoflush = 0;
    45d2:	7023      	strb	r3, [r4, #0]
}
    45d4:	b005      	add	sp, #20
    45d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    45da:	4b36      	ldr	r3, [pc, #216]	; (46b4 <usb_serial_write.part.0+0x1a8>)
    45dc:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    45de:	9902      	ldr	r1, [sp, #8]
    45e0:	f7fe fe76 	bl	32d0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    45e4:	2300      	movs	r3, #0
    45e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    45ea:	4629      	mov	r1, r5
    45ec:	4648      	mov	r0, r9
    45ee:	f7ff fe49 	bl	4284 <usb_prepare_transfer>
	asm("dsb");
    45f2:	f3bf 8f4f 	dsb	sy
    45f6:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    45fa:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    45fe:	4293      	cmp	r3, r2
    4600:	bf34      	ite	cc
    4602:	2301      	movcc	r3, #1
    4604:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    4606:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    460a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    460e:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    4612:	3520      	adds	r5, #32
	} while (location < end_addr);
    4614:	42ab      	cmp	r3, r5
    4616:	d1fa      	bne.n	460e <usb_serial_write.part.0+0x102>
	asm("dsb");
    4618:	f3bf 8f4f 	dsb	sy
	asm("isb");
    461c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4620:	2004      	movs	r0, #4
    4622:	4649      	mov	r1, r9
    4624:	f7ff fe46 	bl	42b4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4628:	4a20      	ldr	r2, [pc, #128]	; (46ac <usb_serial_write.part.0+0x1a0>)
    462a:	7813      	ldrb	r3, [r2, #0]
    462c:	3301      	adds	r3, #1
    462e:	b2db      	uxtb	r3, r3
    4630:	2b03      	cmp	r3, #3
    4632:	bf84      	itt	hi
    4634:	2300      	movhi	r3, #0
    4636:	4a1d      	ldrhi	r2, [pc, #116]	; (46ac <usb_serial_write.part.0+0x1a0>)
    4638:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    463a:	f8b8 3000 	ldrh.w	r3, [r8]
    463e:	9a01      	ldr	r2, [sp, #4]
    4640:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    4642:	9a00      	ldr	r2, [sp, #0]
    4644:	441a      	add	r2, r3
			size -= tx_available;
    4646:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    4648:	9200      	str	r2, [sp, #0]
			data += tx_available;
    464a:	9a02      	ldr	r2, [sp, #8]
    464c:	441a      	add	r2, r3
			tx_available = 0;
    464e:	2300      	movs	r3, #0
			data += tx_available;
    4650:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    4652:	4a19      	ldr	r2, [pc, #100]	; (46b8 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    4654:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    4658:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    465c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    4660:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    4662:	2900      	cmp	r1, #0
    4664:	f47f af62 	bne.w	452c <usb_serial_write.part.0+0x20>
	return sent;
    4668:	9800      	ldr	r0, [sp, #0]
}
    466a:	b005      	add	sp, #20
    466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    4670:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4674:	4b0d      	ldr	r3, [pc, #52]	; (46ac <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    4676:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    467a:	7819      	ldrb	r1, [r3, #0]
				break;
    467c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    467e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    4682:	e78a      	b.n	459a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    4684:	2301      	movs	r3, #1
				return sent;
    4686:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    4688:	f88a 3000 	strb.w	r3, [sl]
}
    468c:	b005      	add	sp, #20
    468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4692:	461a      	mov	r2, r3
    4694:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4698:	e77f      	b.n	459a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    469a:	9801      	ldr	r0, [sp, #4]
	return sent;
    469c:	e7e5      	b.n	466a <usb_serial_write.part.0+0x15e>
    469e:	bf00      	nop
    46a0:	20003369 	.word	0x20003369
    46a4:	2000333c 	.word	0x2000333c
    46a8:	20002400 	.word	0x20002400
    46ac:	20003368 	.word	0x20003368
    46b0:	2000336b 	.word	0x2000336b
    46b4:	20201080 	.word	0x20201080
    46b8:	402e0000 	.word	0x402e0000
    46bc:	2000335a 	.word	0x2000335a
    46c0:	20003367 	.word	0x20003367

000046c4 <usb_serial_reset>:
}
    46c4:	4770      	bx	lr
    46c6:	bf00      	nop

000046c8 <usb_serial_configure>:
	if (usb_high_speed) {
    46c8:	4b2d      	ldr	r3, [pc, #180]	; (4780 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    46ca:	2100      	movs	r1, #0
    46cc:	2280      	movs	r2, #128	; 0x80
    46ce:	482d      	ldr	r0, [pc, #180]	; (4784 <usb_serial_configure+0xbc>)
{
    46d0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    46d2:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    46d4:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    46d6:	4d2c      	ldr	r5, [pc, #176]	; (4788 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    46d8:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    46da:	4e2c      	ldr	r6, [pc, #176]	; (478c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    46dc:	bf0c      	ite	eq
    46de:	2340      	moveq	r3, #64	; 0x40
    46e0:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    46e4:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    46e6:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    46e8:	f002 fe2a 	bl	7340 <memset>
	tx_head = 0;
    46ec:	4a28      	ldr	r2, [pc, #160]	; (4790 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    46ee:	4621      	mov	r1, r4
	tx_available = 0;
    46f0:	4b28      	ldr	r3, [pc, #160]	; (4794 <usb_serial_configure+0xcc>)
	tx_head = 0;
    46f2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    46f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    46f8:	4827      	ldr	r0, [pc, #156]	; (4798 <usb_serial_configure+0xd0>)
	tx_available = 0;
    46fa:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    46fc:	f002 fe20 	bl	7340 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4700:	4a26      	ldr	r2, [pc, #152]	; (479c <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4702:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    4704:	4b26      	ldr	r3, [pc, #152]	; (47a0 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4706:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    4708:	e9c2 4400 	strd	r4, r4, [r2]
    470c:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    4710:	4a24      	ldr	r2, [pc, #144]	; (47a4 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    4712:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    4716:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    4718:	4a23      	ldr	r2, [pc, #140]	; (47a8 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    471a:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    471e:	4b23      	ldr	r3, [pc, #140]	; (47ac <usb_serial_configure+0xe4>)
    4720:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4722:	4623      	mov	r3, r4
	rx_available = 0;
    4724:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4726:	4622      	mov	r2, r4
    4728:	f7ff fd7a 	bl	4220 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    472c:	4622      	mov	r2, r4
    472e:	8831      	ldrh	r1, [r6, #0]
    4730:	2003      	movs	r0, #3
    4732:	4b1f      	ldr	r3, [pc, #124]	; (47b0 <usb_serial_configure+0xe8>)
    4734:	f7ff fd42 	bl	41bc <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4738:	4623      	mov	r3, r4
    473a:	2201      	movs	r2, #1
    473c:	8829      	ldrh	r1, [r5, #0]
    473e:	2004      	movs	r0, #4
    4740:	f7ff fd6e 	bl	4220 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4744:	4620      	mov	r0, r4
    4746:	3401      	adds	r4, #1
    4748:	f7ff fe0e 	bl	4368 <rx_queue_transfer>
    474c:	2c08      	cmp	r4, #8
    474e:	d1f9      	bne.n	4744 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    4750:	4b18      	ldr	r3, [pc, #96]	; (47b4 <usb_serial_configure+0xec>)
    4752:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    4754:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    4756:	4818      	ldr	r0, [pc, #96]	; (47b8 <usb_serial_configure+0xf0>)
    4758:	4c18      	ldr	r4, [pc, #96]	; (47bc <usb_serial_configure+0xf4>)
    475a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    475c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4764:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    4768:	4915      	ldr	r1, [pc, #84]	; (47c0 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    476a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    476e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    4772:	b121      	cbz	r1, 477e <usb_serial_configure+0xb6>
    4774:	4a13      	ldr	r2, [pc, #76]	; (47c4 <usb_serial_configure+0xfc>)
    4776:	7813      	ldrb	r3, [r2, #0]
    4778:	f043 0301 	orr.w	r3, r3, #1
    477c:	7013      	strb	r3, [r2, #0]
}
    477e:	bd70      	pop	{r4, r5, r6, pc}
    4780:	2000336c 	.word	0x2000336c
    4784:	20002400 	.word	0x20002400
    4788:	2000335c 	.word	0x2000335c
    478c:	20003358 	.word	0x20003358
    4790:	20003368 	.word	0x20003368
    4794:	2000335a 	.word	0x2000335a
    4798:	20002300 	.word	0x20002300
    479c:	200032f8 	.word	0x200032f8
    47a0:	20003308 	.word	0x20003308
    47a4:	20003363 	.word	0x20003363
    47a8:	200032f4 	.word	0x200032f4
    47ac:	20003364 	.word	0x20003364
    47b0:	000043c9 	.word	0x000043c9
    47b4:	402e0000 	.word	0x402e0000
    47b8:	20003350 	.word	0x20003350
    47bc:	0000447d 	.word	0x0000447d
    47c0:	00000000 	.word	0x00000000
    47c4:	2000336e 	.word	0x2000336e

000047c8 <usb_serial_read>:
{
    47c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    47d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    47d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 48a0 <usb_serial_read+0xd8>
{
    47d8:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    47da:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    47de:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    47e0:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    47e4:	2900      	cmp	r1, #0
    47e6:	d04f      	beq.n	4888 <usb_serial_read+0xc0>
    47e8:	4680      	mov	r8, r0
    47ea:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    47ec:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    47ee:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 48a4 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    47f2:	4b26      	ldr	r3, [pc, #152]	; (488c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    47f4:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    47f8:	4925      	ldr	r1, [pc, #148]	; (4890 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    47fe:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    4802:	d03f      	beq.n	4884 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    4804:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    4806:	4b23      	ldr	r3, [pc, #140]	; (4894 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4808:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    480a:	bf28      	it	cs
    480c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    480e:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    4810:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4814:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    4818:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    481a:	4b1f      	ldr	r3, [pc, #124]	; (4898 <usb_serial_read+0xd0>)
    481c:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    4820:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    4824:	42aa      	cmp	r2, r5
    4826:	d21c      	bcs.n	4862 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4828:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    482c:	4918      	ldr	r1, [pc, #96]	; (4890 <usb_serial_read+0xc8>)
			rx_available -= len;
    482e:	4c1b      	ldr	r4, [pc, #108]	; (489c <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4830:	4461      	add	r1, ip
    4832:	9201      	str	r2, [sp, #4]
    4834:	f7fe fd4c 	bl	32d0 <memcpy>
			rx_available -= len;
    4838:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    483a:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    483e:	4658      	mov	r0, fp
			rx_index[i] += len;
    4840:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    4842:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    4846:	442a      	add	r2, r5
			rx_available -= len;
    4848:	4439      	add	r1, r7
			rx_index[i] += len;
    484a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    484e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4854:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4858:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    485c:	b003      	add	sp, #12
    485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4862:	462a      	mov	r2, r5
			count += avail;
    4864:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4866:	f7fe fd33 	bl	32d0 <memcpy>
			rx_available -= avail;
    486a:	490c      	ldr	r1, [pc, #48]	; (489c <usb_serial_read+0xd4>)
			rx_tail = tail;
    486c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    486e:	4630      	mov	r0, r6
			rx_available -= avail;
    4870:	680a      	ldr	r2, [r1, #0]
			p += avail;
    4872:	44a8      	add	r8, r5
			rx_available -= avail;
    4874:	1b52      	subs	r2, r2, r5
    4876:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    4878:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    487c:	f7ff fd74 	bl	4368 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    4880:	45bb      	cmp	fp, r7
    4882:	d8b6      	bhi.n	47f2 <usb_serial_read+0x2a>
	return count;
    4884:	4638      	mov	r0, r7
    4886:	e7e3      	b.n	4850 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    4888:	4608      	mov	r0, r1
    488a:	e7e1      	b.n	4850 <usb_serial_read+0x88>
    488c:	20003363 	.word	0x20003363
    4890:	20200080 	.word	0x20200080
    4894:	20003318 	.word	0x20003318
    4898:	200032f8 	.word	0x200032f8
    489c:	200032f4 	.word	0x200032f4
    48a0:	20003364 	.word	0x20003364
    48a4:	20003308 	.word	0x20003308

000048a8 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    48a8:	4b0b      	ldr	r3, [pc, #44]	; (48d8 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    48aa:	4a0c      	ldr	r2, [pc, #48]	; (48dc <usb_serial_peekchar+0x34>)
    48ac:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    48ae:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    48b0:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    48b2:	428a      	cmp	r2, r1
    48b4:	d00d      	beq.n	48d2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    48b6:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    48b8:	4809      	ldr	r0, [pc, #36]	; (48e0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    48ba:	4a0a      	ldr	r2, [pc, #40]	; (48e4 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    48bc:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    48be:	490a      	ldr	r1, [pc, #40]	; (48e8 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    48c0:	bf28      	it	cs
    48c2:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    48c4:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    48c6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    48ca:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    48ce:	5c58      	ldrb	r0, [r3, r1]
    48d0:	4770      	bx	lr
	if (tail == rx_head) return -1;
    48d2:	f04f 30ff 	mov.w	r0, #4294967295
}
    48d6:	4770      	bx	lr
    48d8:	20003363 	.word	0x20003363
    48dc:	20003364 	.word	0x20003364
    48e0:	20003318 	.word	0x20003318
    48e4:	20200080 	.word	0x20200080
    48e8:	20003308 	.word	0x20003308

000048ec <usb_serial_available>:
	uint32_t n = rx_available;
    48ec:	4b04      	ldr	r3, [pc, #16]	; (4900 <usb_serial_available+0x14>)
{
    48ee:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    48f0:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    48f2:	b10c      	cbz	r4, 48f8 <usb_serial_available+0xc>
}
    48f4:	4620      	mov	r0, r4
    48f6:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    48f8:	f000 f8e0 	bl	4abc <yield>
}
    48fc:	4620      	mov	r0, r4
    48fe:	bd10      	pop	{r4, pc}
    4900:	200032f4 	.word	0x200032f4

00004904 <usb_serial_flush_input>:
{
    4904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4908:	4e14      	ldr	r6, [pc, #80]	; (495c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    490a:	4d15      	ldr	r5, [pc, #84]	; (4960 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    490c:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    490e:	782a      	ldrb	r2, [r5, #0]
    4910:	4293      	cmp	r3, r2
    4912:	d021      	beq.n	4958 <usb_serial_flush_input+0x54>
    4914:	b2dc      	uxtb	r4, r3
    4916:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4968 <usb_serial_flush_input+0x64>
    491a:	f8df b050 	ldr.w	fp, [pc, #80]	; 496c <usb_serial_flush_input+0x68>
    491e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4970 <usb_serial_flush_input+0x6c>
    4922:	4f10      	ldr	r7, [pc, #64]	; (4964 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    4924:	3401      	adds	r4, #1
    4926:	2c08      	cmp	r4, #8
		rx_tail = tail;
    4928:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    492c:	d901      	bls.n	4932 <usb_serial_flush_input+0x2e>
    492e:	2400      	movs	r4, #0
    4930:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4932:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4936:	f8db 3000 	ldr.w	r3, [fp]
    493a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    493e:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    4942:	1a52      	subs	r2, r2, r1
    4944:	1a9b      	subs	r3, r3, r2
    4946:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    494a:	f7ff fd0d 	bl	4368 <rx_queue_transfer>
		rx_tail = tail;
    494e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    4952:	782b      	ldrb	r3, [r5, #0]
    4954:	42a3      	cmp	r3, r4
    4956:	d1e5      	bne.n	4924 <usb_serial_flush_input+0x20>
}
    4958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    495c:	20003364 	.word	0x20003364
    4960:	20003363 	.word	0x20003363
    4964:	20003308 	.word	0x20003308
    4968:	20003318 	.word	0x20003318
    496c:	200032f4 	.word	0x200032f4
    4970:	200032f8 	.word	0x200032f8

00004974 <usb_serial_getchar>:
{
    4974:	b500      	push	{lr}
    4976:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    4978:	2101      	movs	r1, #1
    497a:	f10d 0007 	add.w	r0, sp, #7
    497e:	f7ff ff23 	bl	47c8 <usb_serial_read>
    4982:	b120      	cbz	r0, 498e <usb_serial_getchar+0x1a>
    4984:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    4988:	b003      	add	sp, #12
    498a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    498e:	f04f 30ff 	mov.w	r0, #4294967295
    4992:	e7f9      	b.n	4988 <usb_serial_getchar+0x14>

00004994 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    4994:	4b09      	ldr	r3, [pc, #36]	; (49bc <usb_serial_putchar+0x28>)
{
    4996:	b500      	push	{lr}
    4998:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    499a:	781b      	ldrb	r3, [r3, #0]
{
    499c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    49a0:	b13b      	cbz	r3, 49b2 <usb_serial_putchar+0x1e>
    49a2:	2101      	movs	r1, #1
    49a4:	f10d 0007 	add.w	r0, sp, #7
    49a8:	f7ff fdb0 	bl	450c <usb_serial_write.part.0>
}
    49ac:	b003      	add	sp, #12
    49ae:	f85d fb04 	ldr.w	pc, [sp], #4
    49b2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    49b6:	b003      	add	sp, #12
    49b8:	f85d fb04 	ldr.w	pc, [sp], #4
    49bc:	2000336b 	.word	0x2000336b

000049c0 <usb_serial_write>:
	if (!usb_configuration) return 0;
    49c0:	4b04      	ldr	r3, [pc, #16]	; (49d4 <usb_serial_write+0x14>)
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    49c8:	b10b      	cbz	r3, 49ce <usb_serial_write+0xe>
    49ca:	f7ff bd9f 	b.w	450c <usb_serial_write.part.0>
}
    49ce:	4610      	mov	r0, r2
    49d0:	4770      	bx	lr
    49d2:	bf00      	nop
    49d4:	2000336b 	.word	0x2000336b

000049d8 <usb_serial_write_buffer_free>:
{
    49d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    49dc:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    49de:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4a24 <usb_serial_write_buffer_free+0x4c>
    49e2:	2301      	movs	r3, #1
    49e4:	4d0d      	ldr	r5, [pc, #52]	; (4a1c <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    49e6:	4627      	mov	r7, r4
    49e8:	4e0d      	ldr	r6, [pc, #52]	; (4a20 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    49ea:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    49ee:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    49f0:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    49f2:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    49f4:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    49f6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    49fa:	d005      	beq.n	4a08 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    49fc:	f7ff fc7c 	bl	42f8 <usb_transfer_status>
    4a00:	0603      	lsls	r3, r0, #24
    4a02:	bf58      	it	pl
    4a04:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    4a08:	2c04      	cmp	r4, #4
    4a0a:	d1f0      	bne.n	49ee <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    4a0c:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4a10:	2300      	movs	r3, #0
}
    4a12:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    4a14:	f888 3000 	strb.w	r3, [r8]
}
    4a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a1c:	20002400 	.word	0x20002400
    4a20:	20003368 	.word	0x20003368
    4a24:	20003369 	.word	0x20003369

00004a28 <usb_serial_flush_output>:
{
    4a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    4a2c:	4b1d      	ldr	r3, [pc, #116]	; (4aa4 <usb_serial_flush_output+0x7c>)
    4a2e:	781b      	ldrb	r3, [r3, #0]
    4a30:	b113      	cbz	r3, 4a38 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    4a32:	4d1d      	ldr	r5, [pc, #116]	; (4aa8 <usb_serial_flush_output+0x80>)
    4a34:	882a      	ldrh	r2, [r5, #0]
    4a36:	b90a      	cbnz	r2, 4a3c <usb_serial_flush_output+0x14>
}
    4a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    4a3c:	4e1b      	ldr	r6, [pc, #108]	; (4aac <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    4a3e:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    4a42:	491b      	ldr	r1, [pc, #108]	; (4ab0 <usb_serial_flush_output+0x88>)
    4a44:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4a46:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4a48:	4c1a      	ldr	r4, [pc, #104]	; (4ab4 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4a4a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    4a4e:	4f1a      	ldr	r7, [pc, #104]	; (4ab8 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4a50:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    4a54:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4a56:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    4a58:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4a5a:	4621      	mov	r1, r4
    4a5c:	2300      	movs	r3, #0
    4a5e:	f7ff fc11 	bl	4284 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    4a62:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    4a66:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4a6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4a6e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4a72:	3420      	adds	r4, #32
	} while (location < end_addr);
    4a74:	42a2      	cmp	r2, r4
    4a76:	d8fa      	bhi.n	4a6e <usb_serial_flush_output+0x46>
	asm("dsb");
    4a78:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a7c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4a80:	2004      	movs	r0, #4
    4a82:	4641      	mov	r1, r8
    4a84:	f7ff fc16 	bl	42b4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4a88:	7833      	ldrb	r3, [r6, #0]
    4a8a:	3301      	adds	r3, #1
    4a8c:	b2db      	uxtb	r3, r3
    4a8e:	2b03      	cmp	r3, #3
    4a90:	bf88      	it	hi
    4a92:	2300      	movhi	r3, #0
    4a94:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4a96:	2300      	movs	r3, #0
    4a98:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    4a9a:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    4a9e:	703b      	strb	r3, [r7, #0]
}
    4aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4aa4:	2000336b 	.word	0x2000336b
    4aa8:	2000335a 	.word	0x2000335a
    4aac:	20003368 	.word	0x20003368
    4ab0:	20002400 	.word	0x20002400
    4ab4:	20201080 	.word	0x20201080
    4ab8:	20003369 	.word	0x20003369

00004abc <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    4abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    4ac0:	4b2d      	ldr	r3, [pc, #180]	; (4b78 <yield+0xbc>)
    4ac2:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    4ac4:	b166      	cbz	r6, 4ae0 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    4ac6:	4f2d      	ldr	r7, [pc, #180]	; (4b7c <yield+0xc0>)
    4ac8:	783b      	ldrb	r3, [r7, #0]
    4aca:	b94b      	cbnz	r3, 4ae0 <yield+0x24>
	running = 1;
    4acc:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    4ace:	07f1      	lsls	r1, r6, #31
	running = 1;
    4ad0:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    4ad2:	d443      	bmi.n	4b5c <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    4ad4:	07b2      	lsls	r2, r6, #30
    4ad6:	d426      	bmi.n	4b26 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    4ad8:	2300      	movs	r3, #0
    4ada:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    4adc:	0773      	lsls	r3, r6, #29
    4ade:	d401      	bmi.n	4ae4 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    4ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    4ae4:	4b26      	ldr	r3, [pc, #152]	; (4b80 <yield+0xc4>)
    4ae6:	681a      	ldr	r2, [r3, #0]
    4ae8:	2a00      	cmp	r2, #0
    4aea:	d0f9      	beq.n	4ae0 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4aec:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    4af0:	2a00      	cmp	r2, #0
    4af2:	d1f5      	bne.n	4ae0 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4af4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    4af8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    4afa:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4afc:	2800      	cmp	r0, #0
    4afe:	d034      	beq.n	4b6a <yield+0xae>
		if (runningFromYield) {
    4b00:	4c20      	ldr	r4, [pc, #128]	; (4b84 <yield+0xc8>)
    4b02:	7821      	ldrb	r1, [r4, #0]
    4b04:	2900      	cmp	r1, #0
    4b06:	d130      	bne.n	4b6a <yield+0xae>
		runningFromYield = true;
    4b08:	2201      	movs	r2, #1
    4b0a:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    4b0c:	6942      	ldr	r2, [r0, #20]
    4b0e:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    4b10:	2a00      	cmp	r2, #0
    4b12:	d02e      	beq.n	4b72 <yield+0xb6>
			firstYield->_prev = nullptr;
    4b14:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    4b16:	b905      	cbnz	r5, 4b1a <yield+0x5e>
    4b18:	b662      	cpsie	i
		first->_triggered = false;
    4b1a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4b1c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    4b1e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    4b20:	4798      	blx	r3
		runningFromYield = false;
    4b22:	7025      	strb	r5, [r4, #0]
    4b24:	e7dc      	b.n	4ae0 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4b26:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4b8c <yield+0xd0>
    4b2a:	f898 3000 	ldrb.w	r3, [r8]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d0d2      	beq.n	4ad8 <yield+0x1c>
    4b32:	2500      	movs	r5, #0
    4b34:	f8df 9058 	ldr.w	r9, [pc, #88]	; 4b90 <yield+0xd4>
    4b38:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    4b3a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4b3e:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    4b40:	6823      	ldr	r3, [r4, #0]
    4b42:	4620      	mov	r0, r4
    4b44:	691b      	ldr	r3, [r3, #16]
    4b46:	4798      	blx	r3
    4b48:	b110      	cbz	r0, 4b50 <yield+0x94>
    4b4a:	6963      	ldr	r3, [r4, #20]
    4b4c:	689b      	ldr	r3, [r3, #8]
    4b4e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4b50:	f898 2000 	ldrb.w	r2, [r8]
    4b54:	b2eb      	uxtb	r3, r5
    4b56:	429a      	cmp	r2, r3
    4b58:	d8ef      	bhi.n	4b3a <yield+0x7e>
    4b5a:	e7bd      	b.n	4ad8 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    4b5c:	f7ff fec6 	bl	48ec <usb_serial_available>
		if (Serial.available()) serialEvent();
    4b60:	2800      	cmp	r0, #0
    4b62:	d0b7      	beq.n	4ad4 <yield+0x18>
    4b64:	f3af 8000 	nop.w
    4b68:	e7b4      	b.n	4ad4 <yield+0x18>
		if (doit) __enable_irq();
    4b6a:	2d00      	cmp	r5, #0
    4b6c:	d1b8      	bne.n	4ae0 <yield+0x24>
    4b6e:	b662      	cpsie	i
    4b70:	e7b6      	b.n	4ae0 <yield+0x24>
			lastYield = nullptr;
    4b72:	4b05      	ldr	r3, [pc, #20]	; (4b88 <yield+0xcc>)
    4b74:	601a      	str	r2, [r3, #0]
    4b76:	e7ce      	b.n	4b16 <yield+0x5a>
    4b78:	2000336e 	.word	0x2000336e
    4b7c:	20003360 	.word	0x20003360
    4b80:	20002508 	.word	0x20002508
    4b84:	2000335e 	.word	0x2000335e
    4b88:	20002514 	.word	0x20002514
    4b8c:	2000335f 	.word	0x2000335f
    4b90:	20002518 	.word	0x20002518

00004b94 <HardwareSerialIMXRT::operator bool()>:
	operator bool()			{ return true; }
    4b94:	2001      	movs	r0, #1
    4b96:	4770      	bx	lr

00004b98 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    4b98:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    4b9c:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    4ba0:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    4ba2:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4ba4:	4293      	cmp	r3, r2
    4ba6:	d202      	bcs.n	4bae <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    4ba8:	3a01      	subs	r2, #1
    4baa:	1ad0      	subs	r0, r2, r3
}
    4bac:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4bae:	6b41      	ldr	r1, [r0, #52]	; 0x34
    4bb0:	3901      	subs	r1, #1
    4bb2:	440a      	add	r2, r1
    4bb4:	1ad0      	subs	r0, r2, r3
    4bb6:	4770      	bx	lr

00004bb8 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4bb8:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    4bba:	b672      	cpsid	i
	head = rx_buffer_head_;
    4bbc:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    4bc0:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4bc4:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    4bc6:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    4bc8:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    4bca:	bf3c      	itt	cc
    4bcc:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    4bce:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    4bd0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    4bd2:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    4bd4:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    4bd6:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    4bda:	4418      	add	r0, r3
    4bdc:	4770      	bx	lr
    4bde:	bf00      	nop

00004be0 <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    4be0:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4be4:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4be6:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4bea:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4bec:	b29b      	uxth	r3, r3
	if (head == tail) {
    4bee:	4299      	cmp	r1, r3
{
    4bf0:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4bf2:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4bf4:	d014      	beq.n	4c20 <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4bf6:	3301      	adds	r3, #1
    4bf8:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    4bfa:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4bfc:	4298      	cmp	r0, r3
    4bfe:	bf98      	it	ls
    4c00:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    4c02:	4299      	cmp	r1, r3
    4c04:	d806      	bhi.n	4c14 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    4c06:	1a5b      	subs	r3, r3, r1
    4c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4c0a:	5cd0      	ldrb	r0, [r2, r3]
    4c0c:	b2c0      	uxtb	r0, r0
	}
}
    4c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    4c12:	4770      	bx	lr
		return rx_buffer_[tail];
    4c14:	6a12      	ldr	r2, [r2, #32]
}
    4c16:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    4c1a:	5cd0      	ldrb	r0, [r2, r3]
    4c1c:	b2c0      	uxtb	r0, r0
}
    4c1e:	4770      	bx	lr
		__disable_irq();
    4c20:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    4c22:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    4c26:	b280      	uxth	r0, r0
		if (head == tail) {
    4c28:	4281      	cmp	r1, r0
    4c2a:	d001      	beq.n	4c30 <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    4c2c:	b662      	cpsie	i
    4c2e:	e7e2      	b.n	4bf6 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    4c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4c32:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4c36:	d103      	bne.n	4c40 <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    4c38:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    4c3c:	b662      	cpsie	i
			return c;
    4c3e:	e7e6      	b.n	4c0e <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4c40:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    4c42:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    4c44:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    4c46:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    4c48:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4c4c:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    4c50:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    4c52:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    4c56:	704b      	strb	r3, [r1, #1]
    4c58:	e7f0      	b.n	4c3c <HardwareSerialIMXRT::peek()+0x5c>
    4c5a:	bf00      	nop

00004c5c <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    4c5c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4c60:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4c62:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4c66:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4c68:	b29b      	uxth	r3, r3
	if (head == tail) {
    4c6a:	4299      	cmp	r1, r3
{
    4c6c:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4c6e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4c70:	d025      	beq.n	4cbe <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4c72:	3301      	adds	r3, #1
    4c74:	6b94      	ldr	r4, [r2, #56]	; 0x38
    4c76:	429c      	cmp	r4, r3
    4c78:	d916      	bls.n	4ca8 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    4c7a:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    4c7c:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    4c80:	4298      	cmp	r0, r3
    4c82:	d917      	bls.n	4cb4 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    4c84:	6a10      	ldr	r0, [r2, #32]
    4c86:	5cc0      	ldrb	r0, [r0, r3]
    4c88:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    4c8a:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    4c8c:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    4c90:	b145      	cbz	r5, 4ca4 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    4c92:	4299      	cmp	r1, r3
    4c94:	d31c      	bcc.n	4cd0 <HardwareSerialIMXRT::read()+0x74>
    4c96:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    4c98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    4c9a:	4299      	cmp	r1, r3
    4c9c:	d302      	bcc.n	4ca4 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    4c9e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    4ca0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    4ca4:	bc30      	pop	{r4, r5}
    4ca6:	4770      	bx	lr
    4ca8:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    4cac:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4cae:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    4cb0:	4298      	cmp	r0, r3
    4cb2:	d8e7      	bhi.n	4c84 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    4cb4:	1a18      	subs	r0, r3, r0
    4cb6:	6a55      	ldr	r5, [r2, #36]	; 0x24
    4cb8:	5c28      	ldrb	r0, [r5, r0]
    4cba:	b2c0      	uxtb	r0, r0
    4cbc:	e7e5      	b.n	4c8a <HardwareSerialIMXRT::read()+0x2e>
    4cbe:	4608      	mov	r0, r1
		__disable_irq();
    4cc0:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    4cc2:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    4cc6:	b289      	uxth	r1, r1
		if (head == tail) {
    4cc8:	4288      	cmp	r0, r1
    4cca:	d004      	beq.n	4cd6 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    4ccc:	b662      	cpsie	i
    4cce:	e7d0      	b.n	4c72 <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    4cd0:	440c      	add	r4, r1
    4cd2:	1ae3      	subs	r3, r4, r3
    4cd4:	e7e0      	b.n	4c98 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    4cd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4cd8:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4cdc:	d103      	bne.n	4ce6 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    4cde:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    4ce2:	b662      	cpsie	i
			return c;
    4ce4:	e7de      	b.n	4ca4 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4ce6:	69e0      	ldr	r0, [r4, #28]
    4ce8:	f3c0 0009 	ubfx	r0, r0, #0, #10
    4cec:	e7f9      	b.n	4ce2 <HardwareSerialIMXRT::read()+0x86>
    4cee:	bf00      	nop

00004cf0 <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    4cf0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    4cf4:	b143      	cbz	r3, 4d08 <HardwareSerialIMXRT::flush()+0x18>
{
    4cf6:	b510      	push	{r4, lr}
    4cf8:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    4cfa:	f7ff fedf 	bl	4abc <yield>
    4cfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4d02:	2b00      	cmp	r3, #0
    4d04:	d1f9      	bne.n	4cfa <HardwareSerialIMXRT::flush()+0xa>
}
    4d06:	bd10      	pop	{r4, pc}
    4d08:	4770      	bx	lr
    4d0a:	bf00      	nop

00004d0c <HardwareSerialIMXRT::end()>:
{
    4d0c:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4d0e:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    4d12:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    4d16:	6809      	ldr	r1, [r1, #0]
    4d18:	4211      	tst	r1, r2
    4d1a:	d028      	beq.n	4d6e <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    4d1c:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    4d20:	4604      	mov	r4, r0
    4d22:	b132      	cbz	r2, 4d32 <HardwareSerialIMXRT::end()+0x26>
    4d24:	f7ff feca 	bl	4abc <yield>
    4d28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	d1f9      	bne.n	4d24 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4d30:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    4d32:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4d34:	4a0e      	ldr	r2, [pc, #56]	; (4d70 <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    4d36:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4d38:	7e20      	ldrb	r0, [r4, #24]
    4d3a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    4d3e:	7d00      	ldrb	r0, [r0, #20]
    4d40:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    4d44:	6845      	ldr	r5, [r0, #4]
    4d46:	2005      	movs	r0, #5
    4d48:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    4d4a:	7e65      	ldrb	r5, [r4, #25]
    4d4c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    4d54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    4d58:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    4d5a:	6852      	ldr	r2, [r2, #4]
    4d5c:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    4d5e:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    4d62:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    4d66:	b113      	cbz	r3, 4d6e <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    4d68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    4d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    4d6e:	bd38      	pop	{r3, r4, r5, pc}
    4d70:	20000af4 	.word	0x20000af4

00004d74 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    4d74:	ee07 1a90 	vmov	s15, r1
    4d78:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 4fe4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    4d7c:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    4d7e:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    4d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    4d86:	ed9f 6a98 	vldr	s12, [pc, #608]	; 4fe8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    4d8a:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    4d8e:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    4d92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    4d96:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4d98:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    4d9a:	2401      	movs	r4, #1
		float div = base / (float)osr;
    4d9c:	ee07 1a90 	vmov	s15, r1
    4da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4da4:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    4da8:	ee77 7a05 	vadd.f32	s15, s14, s10
    4dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4db0:	ee17 3a90 	vmov	r3, s15
    4db4:	4563      	cmp	r3, ip
    4db6:	bfa8      	it	ge
    4db8:	4663      	movge	r3, ip
    4dba:	2b01      	cmp	r3, #1
    4dbc:	bfb8      	it	lt
    4dbe:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    4dc0:	ee07 3a90 	vmov	s15, r3
    4dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    4dc8:	ee76 6ac7 	vsub.f32	s13, s13, s14
    4dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    4dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dd8:	bf48      	it	mi
    4dda:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    4dde:	eef4 7ac6 	vcmpe.f32	s15, s12
    4de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4de6:	d803      	bhi.n	4df0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    4de8:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    4dec:	468e      	mov	lr, r1
			bestdiv = divint;
    4dee:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    4df0:	3101      	adds	r1, #1
    4df2:	2921      	cmp	r1, #33	; 0x21
    4df4:	d1d2      	bne.n	4d9c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    4df6:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4df8:	6943      	ldr	r3, [r0, #20]
    4dfa:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    4dfe:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    4e02:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    4e06:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    4e08:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4e0c:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    4e10:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    4e14:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    4e18:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4e1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    4e1e:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4e20:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    4e24:	eba1 010c 	sub.w	r1, r1, ip
    4e28:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    4e2c:	6839      	ldr	r1, [r7, #0]
    4e2e:	691e      	ldr	r6, [r3, #16]
    4e30:	ea41 0106 	orr.w	r1, r1, r6
    4e34:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    4e36:	bf14      	ite	ne
    4e38:	2101      	movne	r1, #1
    4e3a:	2100      	moveq	r1, #0
    4e3c:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    4e3e:	f040 80ac 	bne.w	4f9a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4e42:	7e01      	ldrb	r1, [r0, #24]
    4e44:	4e69      	ldr	r6, [pc, #420]	; (4fec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    4e46:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    4e4a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 500c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    4e4e:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    4e52:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    4e56:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    4e5a:	68b9      	ldr	r1, [r7, #8]
    4e5c:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    4e60:	6879      	ldr	r1, [r7, #4]
    4e62:	f8d8 7018 	ldr.w	r7, [r8, #24]
    4e66:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    4e68:	f1ba 0f00 	cmp.w	sl, #0
    4e6c:	d003      	beq.n	4e76 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    4e6e:	f8d8 1020 	ldr.w	r1, [r8, #32]
    4e72:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    4e76:	7e47      	ldrb	r7, [r0, #25]
    4e78:	21d9      	movs	r1, #217	; 0xd9
    4e7a:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    4e7e:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    4e82:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    4e86:	f8dc 7008 	ldr.w	r7, [ip, #8]
    4e8a:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    4e8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    4e90:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    4e94:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    4e96:	7e41      	ldrb	r1, [r0, #25]
    4e98:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4e9c:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    4e9e:	b10f      	cbz	r7, 4ea4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    4ea0:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4ea2:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4ea4:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4ea8:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4eac:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4eb0:	bfcc      	ite	gt
    4eb2:	f04f 0e00 	movgt.w	lr, #0
    4eb6:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4eba:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4ebe:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    4ec2:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    4ec4:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4ec6:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    4ec8:	7859      	ldrb	r1, [r3, #1]
    4eca:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    4ece:	2100      	movs	r1, #0
    4ed0:	60e9      	str	r1, [r5, #12]
    4ed2:	4947      	ldr	r1, [pc, #284]	; (4ff0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    4ed4:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4ed8:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    4eda:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4ede:	4c45      	ldr	r4, [pc, #276]	; (4ff4 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    4ee0:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4ee4:	784f      	ldrb	r7, [r1, #1]
    4ee6:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    4eea:	4b43      	ldr	r3, [pc, #268]	; (4ff8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4eec:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    4eee:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    4ef2:	6944      	ldr	r4, [r0, #20]
    4ef4:	7861      	ldrb	r1, [r4, #1]
    4ef6:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    4efa:	f001 011f 	and.w	r1, r1, #31
    4efe:	009b      	lsls	r3, r3, #2
    4f00:	fa0e f101 	lsl.w	r1, lr, r1
    4f04:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    4f06:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    4f08:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4f0a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    4f0e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    4f10:	0753      	lsls	r3, r2, #29
    4f12:	d43e      	bmi.n	4f92 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    4f14:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    4f18:	f002 010f 	and.w	r1, r2, #15
    4f1c:	2904      	cmp	r1, #4
    4f1e:	bf08      	it	eq
    4f20:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    4f24:	0697      	lsls	r7, r2, #26
    4f26:	d52e      	bpl.n	4f86 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4f28:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    4f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4f2e:	2900      	cmp	r1, #0
    4f30:	d13a      	bne.n	4fa8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    4f32:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    4f34:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    4f36:	d503      	bpl.n	4f40 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    4f38:	692b      	ldr	r3, [r5, #16]
    4f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    4f3e:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    4f40:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    4f42:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    4f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    4f48:	bf48      	it	mi
    4f4a:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    4f4e:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    4f50:	05d3      	lsls	r3, r2, #23
    4f52:	d503      	bpl.n	4f5c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    4f54:	692b      	ldr	r3, [r5, #16]
    4f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4f5a:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    4f5c:	68a3      	ldr	r3, [r4, #8]
    4f5e:	b183      	cbz	r3, 4f82 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4f60:	4e26      	ldr	r6, [pc, #152]	; (4ffc <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    4f62:	7834      	ldrb	r4, [r6, #0]
    4f64:	2c00      	cmp	r4, #0
    4f66:	d03a      	beq.n	4fde <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    4f68:	1e61      	subs	r1, r4, #1
    4f6a:	4d25      	ldr	r5, [pc, #148]	; (5000 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    4f6c:	b2c9      	uxtb	r1, r1
    4f6e:	1f2b      	subs	r3, r5, #4
    4f70:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    4f74:	e001      	b.n	4f7a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    4f76:	4299      	cmp	r1, r3
    4f78:	d025      	beq.n	4fc6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    4f7a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4f7e:	4290      	cmp	r0, r2
    4f80:	d1f9      	bne.n	4f76 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    4f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4f86:	7e81      	ldrb	r1, [r0, #26]
    4f88:	2900      	cmp	r1, #0
    4f8a:	d0d2      	beq.n	4f32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    4f8c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    4f90:	e7cf      	b.n	4f32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    4f92:	4b1c      	ldr	r3, [pc, #112]	; (5004 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    4f94:	ea4c 0303 	orr.w	r3, ip, r3
    4f98:	e7be      	b.n	4f18 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    4f9a:	7e47      	ldrb	r7, [r0, #25]
    4f9c:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    4fa0:	4e12      	ldr	r6, [pc, #72]	; (4fec <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    4fa2:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    4fa6:	e76a      	b.n	4e7e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4fa8:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4faa:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4fae:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    4fb2:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    4fb6:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    4fba:	68b6      	ldr	r6, [r6, #8]
    4fbc:	6831      	ldr	r1, [r6, #0]
    4fbe:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    4fc2:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4fc4:	e7b5      	b.n	4f32 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    4fc6:	1c63      	adds	r3, r4, #1
    4fc8:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    4fca:	4a0f      	ldr	r2, [pc, #60]	; (5008 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    4fcc:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    4fce:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    4fd0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    4fd4:	f043 0302 	orr.w	r3, r3, #2
    4fd8:	7013      	strb	r3, [r2, #0]
};
    4fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4fde:	2301      	movs	r3, #1
    4fe0:	4d07      	ldr	r5, [pc, #28]	; (5000 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    4fe2:	e7f2      	b.n	4fca <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    4fe4:	4bb71b00 	.word	0x4bb71b00
    4fe8:	60ad78ec 	.word	0x60ad78ec
    4fec:	20000af4 	.word	0x20000af4
    4ff0:	20002000 	.word	0x20002000
    4ff4:	e000e400 	.word	0xe000e400
    4ff8:	38003840 	.word	0x38003840
    4ffc:	2000335f 	.word	0x2000335f
    5000:	20002518 	.word	0x20002518
    5004:	003c0010 	.word	0x003c0010
    5008:	2000336e 	.word	0x2000336e
    500c:	0001f038 	.word	0x0001f038

00005010 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    5010:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    5014:	b9b8      	cbnz	r0, 5046 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5016:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    501a:	b94b      	cbnz	r3, 5030 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    501c:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    5020:	b93a      	cbnz	r2, 5032 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    5022:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    5026:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    502a:	b150      	cbz	r0, 5042 <nvic_execution_priority()+0x32>
    502c:	4298      	cmp	r0, r3
    502e:	d208      	bcs.n	5042 <nvic_execution_priority()+0x32>
}
    5030:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    5032:	2a0f      	cmp	r2, #15
    5034:	d9f7      	bls.n	5026 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    5036:	4b05      	ldr	r3, [pc, #20]	; (504c <nvic_execution_priority()+0x3c>)
    5038:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    503a:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    503e:	2800      	cmp	r0, #0
    5040:	d1f4      	bne.n	502c <nvic_execution_priority()+0x1c>
    5042:	4618      	mov	r0, r3
	return priority;
    5044:	4770      	bx	lr
	if (faultmask) return -1;
    5046:	f04f 30ff 	mov.w	r0, #4294967295
    504a:	e7f1      	b.n	5030 <nvic_execution_priority()+0x20>
    504c:	e000e3f0 	.word	0xe000e3f0

00005050 <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5050:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    5052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5056:	4604      	mov	r4, r0
    5058:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    505a:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    505c:	b113      	cbz	r3, 5064 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    505e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    5060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    5064:	7ea3      	ldrb	r3, [r4, #26]
    5066:	b12b      	cbz	r3, 5074 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    5068:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    506a:	69b3      	ldr	r3, [r6, #24]
    506c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5070:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    5072:	b662      	cpsie	i
	head = tx_buffer_head_;
    5074:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    5078:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    507a:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    507c:	3501      	adds	r5, #1
    507e:	42ab      	cmp	r3, r5
    5080:	d84c      	bhi.n	511c <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    5082:	f04f 0800 	mov.w	r8, #0
    5086:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    5088:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    508c:	b29b      	uxth	r3, r3
    508e:	429d      	cmp	r5, r3
    5090:	d019      	beq.n	50c6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    5092:	e028      	b.n	50e6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    5094:	6973      	ldr	r3, [r6, #20]
    5096:	021b      	lsls	r3, r3, #8
    5098:	d510      	bpl.n	50bc <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    509a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    509e:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    50a0:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    50a2:	3301      	adds	r3, #1
    50a4:	429a      	cmp	r2, r3
    50a6:	d936      	bls.n	5116 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    50a8:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    50aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    50ac:	4299      	cmp	r1, r3
    50ae:	d92d      	bls.n	510c <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    50b0:	69e1      	ldr	r1, [r4, #28]
    50b2:	5ccb      	ldrb	r3, [r1, r3]
    50b4:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    50b6:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    50b8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    50bc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    50c0:	b29b      	uxth	r3, r3
    50c2:	42ab      	cmp	r3, r5
    50c4:	d10f      	bne.n	50e6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    50c6:	f7ff ffa3 	bl	5010 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    50ca:	6963      	ldr	r3, [r4, #20]
    50cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    50d0:	4283      	cmp	r3, r0
    50d2:	dadf      	bge.n	5094 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    50d4:	28ff      	cmp	r0, #255	; 0xff
    50d6:	ddf1      	ble.n	50bc <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    50d8:	f7ff fcf0 	bl	4abc <yield>
	while (tx_buffer_tail_ == head) {
    50dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    50e0:	b29b      	uxth	r3, r3
    50e2:	42ab      	cmp	r3, r5
    50e4:	d0ef      	beq.n	50c6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    50e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    50e8:	42ab      	cmp	r3, r5
    50ea:	d91a      	bls.n	5122 <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    50ec:	b2ff      	uxtb	r7, r7
    50ee:	69e3      	ldr	r3, [r4, #28]
    50f0:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    50f2:	b672      	cpsid	i
	transmitting_ = 1;
    50f4:	2001      	movs	r0, #1
    50f6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    50fa:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    50fe:	69b3      	ldr	r3, [r6, #24]
    5100:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    5104:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    5106:	b662      	cpsie	i
}
    5108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    510c:	1a5b      	subs	r3, r3, r1
    510e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5110:	5ccb      	ldrb	r3, [r1, r3]
    5112:	b2db      	uxtb	r3, r3
    5114:	e7cf      	b.n	50b6 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    5116:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    5118:	4613      	mov	r3, r2
    511a:	e7c6      	b.n	50aa <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    511c:	fa1f f885 	uxth.w	r8, r5
    5120:	e7b2      	b.n	5088 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    5122:	1aed      	subs	r5, r5, r3
    5124:	b2ff      	uxtb	r7, r7
    5126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5128:	555f      	strb	r7, [r3, r5]
    512a:	e7e2      	b.n	50f2 <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

0000512c <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    512c:	f7ff bf90 	b.w	5050 <HardwareSerialIMXRT::write9bit(unsigned long)>

00005130 <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    5130:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    5132:	6953      	ldr	r3, [r2, #20]
    5134:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    5138:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    513a:	d043      	beq.n	51c4 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    513c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    513e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    5142:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    5146:	d03a      	beq.n	51be <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    5148:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    514c:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    5150:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    5152:	b2b6      	uxth	r6, r6
    5154:	e007      	b.n	5166 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    5156:	6a01      	ldr	r1, [r0, #32]
    5158:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    515c:	f10e 33ff 	add.w	r3, lr, #4294967295
    5160:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    5164:	d01d      	beq.n	51a2 <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    5166:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    5168:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    516a:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    516c:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    5170:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    5174:	429c      	cmp	r4, r3
    5176:	bf98      	it	ls
    5178:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    517a:	fa1f fc8c 	uxth.w	ip, ip
    517e:	459c      	cmp	ip, r3
    5180:	d0ec      	beq.n	515c <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    5182:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    5184:	fa5f fc81 	uxtb.w	ip, r1
    5188:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    518a:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    518c:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    5190:	d8e1      	bhi.n	5156 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    5192:	6a43      	ldr	r3, [r0, #36]	; 0x24
    5194:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    5198:	f10e 33ff 	add.w	r3, lr, #4294967295
    519c:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    51a0:	d1e1      	bne.n	5166 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    51a2:	b2ab      	uxth	r3, r5
    51a4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    51a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
    51aa:	b143      	cbz	r3, 51be <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    51ac:	42b5      	cmp	r5, r6
    51ae:	d354      	bcc.n	525a <HardwareSerialIMXRT::IRQHandler()+0x12a>
    51b0:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    51b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
    51b4:	42a9      	cmp	r1, r5
    51b6:	d802      	bhi.n	51be <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    51b8:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    51ba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    51be:	6953      	ldr	r3, [r2, #20]
    51c0:	02d9      	lsls	r1, r3, #11
    51c2:	d445      	bmi.n	5250 <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    51c4:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    51c6:	0233      	lsls	r3, r6, #8
    51c8:	d528      	bpl.n	521c <HardwareSerialIMXRT::IRQHandler()+0xec>
    51ca:	6953      	ldr	r3, [r2, #20]
    51cc:	021d      	lsls	r5, r3, #8
    51ce:	d525      	bpl.n	521c <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    51d0:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    51d4:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    51d8:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    51da:	b29b      	uxth	r3, r3
    51dc:	e006      	b.n	51ec <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    51de:	69c1      	ldr	r1, [r0, #28]
    51e0:	5cc9      	ldrb	r1, [r1, r3]
    51e2:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    51e4:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    51e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    51e8:	054c      	lsls	r4, r1, #21
    51ea:	d412      	bmi.n	5212 <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    51ec:	42ab      	cmp	r3, r5
    51ee:	d038      	beq.n	5262 <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    51f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
    51f2:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    51f4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    51f6:	429c      	cmp	r4, r3
    51f8:	bf98      	it	ls
    51fa:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    51fc:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    51fe:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    5202:	d8ec      	bhi.n	51de <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    5204:	6a81      	ldr	r1, [r0, #40]	; 0x28
    5206:	5d09      	ldrb	r1, [r1, r4]
    5208:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    520a:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    520c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    520e:	054c      	lsls	r4, r1, #21
    5210:	d5ec      	bpl.n	51ec <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    5212:	b299      	uxth	r1, r3
		if (head == tail) {
    5214:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    5216:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    521a:	d025      	beq.n	5268 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    521c:	0271      	lsls	r1, r6, #9
    521e:	d516      	bpl.n	524e <HardwareSerialIMXRT::IRQHandler()+0x11e>
    5220:	6953      	ldr	r3, [r2, #20]
    5222:	025b      	lsls	r3, r3, #9
    5224:	d513      	bpl.n	524e <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    5226:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    5228:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    522a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    522e:	b113      	cbz	r3, 5236 <HardwareSerialIMXRT::IRQHandler()+0x106>
    5230:	6d41      	ldr	r1, [r0, #84]	; 0x54
    5232:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    5236:	7e83      	ldrb	r3, [r0, #26]
    5238:	b12b      	cbz	r3, 5246 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    523a:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    523c:	6993      	ldr	r3, [r2, #24]
    523e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    5242:	6193      	str	r3, [r2, #24]
			__enable_irq();
    5244:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    5246:	6993      	ldr	r3, [r2, #24]
    5248:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    524c:	6193      	str	r3, [r2, #24]
}
    524e:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    5250:	6953      	ldr	r3, [r2, #20]
    5252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    5256:	6153      	str	r3, [r2, #20]
    5258:	e7b4      	b.n	51c4 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    525a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    525c:	1b89      	subs	r1, r1, r6
    525e:	440d      	add	r5, r1
    5260:	e7a7      	b.n	51b2 <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    5262:	b29b      	uxth	r3, r3
    5264:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    5268:	6993      	ldr	r3, [r2, #24]
    526a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    526e:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    5270:	6993      	ldr	r3, [r2, #24]
    5272:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    5276:	6193      	str	r3, [r2, #24]
    5278:	e7d0      	b.n	521c <HardwareSerialIMXRT::IRQHandler()+0xec>
    527a:	bf00      	nop

0000527c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    527c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    527e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    5280:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    5284:	4619      	mov	r1, r3
{
    5286:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5288:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    528c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    5290:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    5294:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    5298:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    529c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    529e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    52a2:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    52a6:	b29b      	uxth	r3, r3
    52a8:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    52ac:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    52b0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    52b4:	3101      	adds	r1, #1
    52b6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    52ba:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    52bc:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    52be:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    52c2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    52c4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    52c6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    52c8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    52ca:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    52ce:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    52d0:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    52d2:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    52d4:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    52d6:	d1eb      	bne.n	52b0 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    52d8:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    52dc:	b29b      	uxth	r3, r3
    52de:	f043 030f 	orr.w	r3, r3, #15
    52e2:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    52e6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    52ea:	b29b      	uxth	r3, r3
    52ec:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    52f0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    52f4:	bd10      	pop	{r4, pc}
    52f6:	bf00      	nop

000052f8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    52f8:	4b37      	ldr	r3, [pc, #220]	; (53d8 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    52fa:	4a38      	ldr	r2, [pc, #224]	; (53dc <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    52fc:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    52fe:	4838      	ldr	r0, [pc, #224]	; (53e0 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5300:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    5304:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5306:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5308:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    530c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5310:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5314:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    5318:	430a      	orrs	r2, r1
    531a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    531e:	f7ff ffad 	bl	527c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    5322:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    5326:	f7ff ffa9 	bl	527c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    532a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    532e:	f7ff ffa5 	bl	527c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    5332:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    5336:	f7ff ffa1 	bl	527c <flexpwm_init>
	for (i=0; i < 4; i++) {
    533a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    533c:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5340:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    5344:	4611      	mov	r1, r2
    5346:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    534a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    534e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5350:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    5352:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5354:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5356:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    535a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    535c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    535e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    5362:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5364:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    5366:	d1ee      	bne.n	5346 <pwm_init+0x4e>
    5368:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    536a:	481e      	ldr	r0, [pc, #120]	; (53e4 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    536c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5370:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    5374:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5376:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    537a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    537e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    5382:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    5386:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5388:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    538a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    538c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    538e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5392:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5394:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5396:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    539a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    539c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    539e:	d1ee      	bne.n	537e <pwm_init+0x86>
    53a0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    53a2:	4811      	ldr	r0, [pc, #68]	; (53e8 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    53a4:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    53a6:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    53aa:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    53ac:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    53b0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    53b4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    53b8:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    53bc:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    53be:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    53c0:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    53c2:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    53c4:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    53c6:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    53c8:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    53ca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    53ce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    53d0:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    53d4:	d1ee      	bne.n	53b4 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    53d6:	bd70      	pop	{r4, r5, r6, pc}
    53d8:	400fc000 	.word	0x400fc000
    53dc:	fc030000 	.word	0xfc030000
    53e0:	403dc000 	.word	0x403dc000
    53e4:	401e0000 	.word	0x401e0000
    53e8:	401e4000 	.word	0x401e4000

000053ec <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    53ec:	4a07      	ldr	r2, [pc, #28]	; (540c <rtc_get+0x20>)
    53ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    53f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    53f2:	4619      	mov	r1, r3
    53f4:	4684      	mov	ip, r0
    53f6:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    53f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    53fa:	4299      	cmp	r1, r3
    53fc:	d1f9      	bne.n	53f2 <rtc_get+0x6>
    53fe:	4584      	cmp	ip, r0
    5400:	d1f7      	bne.n	53f2 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    5402:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    5404:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    5408:	4770      	bx	lr
    540a:	bf00      	nop
    540c:	400d4000 	.word	0x400d4000

00005410 <sm_align_pool>:
{
    5410:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    5412:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    5416:	b15b      	cbz	r3, 5430 <sm_align_pool+0x20>
    5418:	b1ba      	cbz	r2, 544a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    541a:	4b0f      	ldr	r3, [pc, #60]	; (5458 <sm_align_pool+0x48>)
    541c:	fba3 1302 	umull	r1, r3, r3, r2
    5420:	08db      	lsrs	r3, r3, #3
    5422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5426:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    542a:	d10a      	bne.n	5442 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    542c:	2001      	movs	r0, #1
}
    542e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    5430:	4b09      	ldr	r3, [pc, #36]	; (5458 <sm_align_pool+0x48>)
    5432:	fba3 1302 	umull	r1, r3, r3, r2
    5436:	08db      	lsrs	r3, r3, #3
    5438:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    543c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5440:	d001      	beq.n	5446 <sm_align_pool+0x36>
    5442:	1ad2      	subs	r2, r2, r3
    5444:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    5446:	2af0      	cmp	r2, #240	; 0xf0
    5448:	d8f0      	bhi.n	542c <sm_align_pool+0x1c>
		errno = ENOSPC;
    544a:	f002 fb29 	bl	7aa0 <__errno>
    544e:	221c      	movs	r2, #28
    5450:	4603      	mov	r3, r0
    5452:	2000      	movs	r0, #0
    5454:	601a      	str	r2, [r3, #0]
}
    5456:	bd08      	pop	{r3, pc}
    5458:	aaaaaaab 	.word	0xaaaaaaab

0000545c <sm_set_pool>:
{
    545c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    545e:	4604      	mov	r4, r0
    5460:	b338      	cbz	r0, 54b2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    5462:	b119      	cbz	r1, 546c <sm_set_pool+0x10>
    5464:	fab2 f682 	clz	r6, r2
    5468:	0976      	lsrs	r6, r6, #5
    546a:	b9a2      	cbnz	r2, 5496 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    546c:	6820      	ldr	r0, [r4, #0]
    546e:	b300      	cbz	r0, 54b2 <sm_set_pool+0x56>
    5470:	6862      	ldr	r2, [r4, #4]
    5472:	b1f2      	cbz	r2, 54b2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    5474:	4b18      	ldr	r3, [pc, #96]	; (54d8 <sm_set_pool+0x7c>)
    5476:	4919      	ldr	r1, [pc, #100]	; (54dc <sm_set_pool+0x80>)
    5478:	fb02 f303 	mul.w	r3, r2, r3
    547c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    5480:	d317      	bcc.n	54b2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5482:	68a3      	ldr	r3, [r4, #8]
    5484:	b9e3      	cbnz	r3, 54c0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    5486:	2200      	movs	r2, #0
			return 1;
    5488:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    548a:	6022      	str	r2, [r4, #0]
    548c:	6062      	str	r2, [r4, #4]
    548e:	60a2      	str	r2, [r4, #8]
    5490:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    5492:	4618      	mov	r0, r3
    5494:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    5496:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    5498:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    549a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    549e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    54a0:	f7ff ffb6 	bl	5410 <sm_align_pool>
    54a4:	4603      	mov	r3, r0
    54a6:	2800      	cmp	r0, #0
    54a8:	d0f3      	beq.n	5492 <sm_set_pool+0x36>
	if (do_zero) {
    54aa:	b96d      	cbnz	r5, 54c8 <sm_set_pool+0x6c>
	return 1;
    54ac:	2301      	movs	r3, #1
}
    54ae:	4618      	mov	r0, r3
    54b0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    54b2:	f002 faf5 	bl	7aa0 <__errno>
    54b6:	2216      	movs	r2, #22
		return 0;
    54b8:	2300      	movs	r3, #0
		errno = EINVAL;
    54ba:	6002      	str	r2, [r0, #0]
}
    54bc:	4618      	mov	r0, r3
    54be:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    54c0:	2100      	movs	r1, #0
    54c2:	f001 ff3d 	bl	7340 <memset>
    54c6:	e7de      	b.n	5486 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    54c8:	6862      	ldr	r2, [r4, #4]
    54ca:	4631      	mov	r1, r6
    54cc:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    54ce:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    54d0:	f001 ff36 	bl	7340 <memset>
	return 1;
    54d4:	2301      	movs	r3, #1
    54d6:	e7dc      	b.n	5492 <sm_set_pool+0x36>
    54d8:	aaaaaaab 	.word	0xaaaaaaab
    54dc:	15555555 	.word	0x15555555

000054e0 <__aeabi_atexit>:
    54e0:	4603      	mov	r3, r0
    54e2:	4608      	mov	r0, r1
    54e4:	4619      	mov	r1, r3
    54e6:	f001 bd67 	b.w	6fb8 <__cxa_atexit>
    54ea:	bf00      	nop

000054ec <atol>:
    54ec:	220a      	movs	r2, #10
    54ee:	2100      	movs	r1, #0
    54f0:	f001 bd06 	b.w	6f00 <strtol>

000054f4 <itoa>:
    54f4:	1e93      	subs	r3, r2, #2
    54f6:	2b22      	cmp	r3, #34	; 0x22
    54f8:	b510      	push	{r4, lr}
    54fa:	460c      	mov	r4, r1
    54fc:	d80c      	bhi.n	5518 <itoa+0x24>
    54fe:	2a0a      	cmp	r2, #10
    5500:	d003      	beq.n	550a <itoa+0x16>
    5502:	f001 fd0b 	bl	6f1c <__utoa>
    5506:	4620      	mov	r0, r4
    5508:	bd10      	pop	{r4, pc}
    550a:	2800      	cmp	r0, #0
    550c:	daf9      	bge.n	5502 <itoa+0xe>
    550e:	232d      	movs	r3, #45	; 0x2d
    5510:	f801 3b01 	strb.w	r3, [r1], #1
    5514:	4240      	negs	r0, r0
    5516:	e7f4      	b.n	5502 <itoa+0xe>
    5518:	2300      	movs	r3, #0
    551a:	700b      	strb	r3, [r1, #0]
    551c:	4618      	mov	r0, r3
    551e:	bd10      	pop	{r4, pc}

00005520 <malloc>:
    5520:	4b02      	ldr	r3, [pc, #8]	; (552c <malloc+0xc>)
    5522:	4601      	mov	r1, r0
    5524:	6818      	ldr	r0, [r3, #0]
    5526:	f000 b80b 	b.w	5540 <_malloc_r>
    552a:	bf00      	nop
    552c:	20001b54 	.word	0x20001b54

00005530 <free>:
    5530:	4b02      	ldr	r3, [pc, #8]	; (553c <free+0xc>)
    5532:	4601      	mov	r1, r0
    5534:	6818      	ldr	r0, [r3, #0]
    5536:	f002 bdd5 	b.w	80e4 <_free_r>
    553a:	bf00      	nop
    553c:	20001b54 	.word	0x20001b54

00005540 <_malloc_r>:
    5540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5544:	f101 060b 	add.w	r6, r1, #11
    5548:	2e16      	cmp	r6, #22
    554a:	b083      	sub	sp, #12
    554c:	4604      	mov	r4, r0
    554e:	d824      	bhi.n	559a <_malloc_r+0x5a>
    5550:	2910      	cmp	r1, #16
    5552:	f200 80ba 	bhi.w	56ca <_malloc_r+0x18a>
    5556:	f000 faa3 	bl	5aa0 <__malloc_lock>
    555a:	2610      	movs	r6, #16
    555c:	2218      	movs	r2, #24
    555e:	2002      	movs	r0, #2
    5560:	4fb5      	ldr	r7, [pc, #724]	; (5838 <_malloc_r+0x2f8>)
    5562:	443a      	add	r2, r7
    5564:	f1a2 0108 	sub.w	r1, r2, #8
    5568:	6853      	ldr	r3, [r2, #4]
    556a:	428b      	cmp	r3, r1
    556c:	f000 80ba 	beq.w	56e4 <_malloc_r+0x1a4>
    5570:	685a      	ldr	r2, [r3, #4]
    5572:	68d9      	ldr	r1, [r3, #12]
    5574:	f022 0203 	bic.w	r2, r2, #3
    5578:	441a      	add	r2, r3
    557a:	689d      	ldr	r5, [r3, #8]
    557c:	60e9      	str	r1, [r5, #12]
    557e:	608d      	str	r5, [r1, #8]
    5580:	6851      	ldr	r1, [r2, #4]
    5582:	f041 0101 	orr.w	r1, r1, #1
    5586:	4620      	mov	r0, r4
    5588:	6051      	str	r1, [r2, #4]
    558a:	f103 0508 	add.w	r5, r3, #8
    558e:	f000 fa8d 	bl	5aac <__malloc_unlock>
    5592:	4628      	mov	r0, r5
    5594:	b003      	add	sp, #12
    5596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    559a:	f036 0607 	bics.w	r6, r6, #7
    559e:	f100 8094 	bmi.w	56ca <_malloc_r+0x18a>
    55a2:	42b1      	cmp	r1, r6
    55a4:	f200 8091 	bhi.w	56ca <_malloc_r+0x18a>
    55a8:	f000 fa7a 	bl	5aa0 <__malloc_lock>
    55ac:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    55b0:	f0c0 819a 	bcc.w	58e8 <_malloc_r+0x3a8>
    55b4:	0a73      	lsrs	r3, r6, #9
    55b6:	f000 808f 	beq.w	56d8 <_malloc_r+0x198>
    55ba:	2b04      	cmp	r3, #4
    55bc:	f200 816f 	bhi.w	589e <_malloc_r+0x35e>
    55c0:	09b3      	lsrs	r3, r6, #6
    55c2:	f103 0039 	add.w	r0, r3, #57	; 0x39
    55c6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    55ca:	00c3      	lsls	r3, r0, #3
    55cc:	4f9a      	ldr	r7, [pc, #616]	; (5838 <_malloc_r+0x2f8>)
    55ce:	443b      	add	r3, r7
    55d0:	f1a3 0508 	sub.w	r5, r3, #8
    55d4:	685b      	ldr	r3, [r3, #4]
    55d6:	429d      	cmp	r5, r3
    55d8:	d106      	bne.n	55e8 <_malloc_r+0xa8>
    55da:	e00c      	b.n	55f6 <_malloc_r+0xb6>
    55dc:	2900      	cmp	r1, #0
    55de:	f280 8127 	bge.w	5830 <_malloc_r+0x2f0>
    55e2:	68db      	ldr	r3, [r3, #12]
    55e4:	429d      	cmp	r5, r3
    55e6:	d006      	beq.n	55f6 <_malloc_r+0xb6>
    55e8:	685a      	ldr	r2, [r3, #4]
    55ea:	f022 0203 	bic.w	r2, r2, #3
    55ee:	1b91      	subs	r1, r2, r6
    55f0:	290f      	cmp	r1, #15
    55f2:	ddf3      	ble.n	55dc <_malloc_r+0x9c>
    55f4:	4660      	mov	r0, ip
    55f6:	693d      	ldr	r5, [r7, #16]
    55f8:	f8df c250 	ldr.w	ip, [pc, #592]	; 584c <_malloc_r+0x30c>
    55fc:	4565      	cmp	r5, ip
    55fe:	d07c      	beq.n	56fa <_malloc_r+0x1ba>
    5600:	686a      	ldr	r2, [r5, #4]
    5602:	f022 0203 	bic.w	r2, r2, #3
    5606:	1b93      	subs	r3, r2, r6
    5608:	2b0f      	cmp	r3, #15
    560a:	f300 817b 	bgt.w	5904 <_malloc_r+0x3c4>
    560e:	2b00      	cmp	r3, #0
    5610:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    5614:	f280 816c 	bge.w	58f0 <_malloc_r+0x3b0>
    5618:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    561c:	f080 811a 	bcs.w	5854 <_malloc_r+0x314>
    5620:	08d3      	lsrs	r3, r2, #3
    5622:	6879      	ldr	r1, [r7, #4]
    5624:	3301      	adds	r3, #1
    5626:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    562a:	2201      	movs	r2, #1
    562c:	fa02 f20e 	lsl.w	r2, r2, lr
    5630:	430a      	orrs	r2, r1
    5632:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    5636:	f8c5 e008 	str.w	lr, [r5, #8]
    563a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    563e:	3908      	subs	r1, #8
    5640:	60e9      	str	r1, [r5, #12]
    5642:	607a      	str	r2, [r7, #4]
    5644:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5648:	f8ce 500c 	str.w	r5, [lr, #12]
    564c:	1083      	asrs	r3, r0, #2
    564e:	2101      	movs	r1, #1
    5650:	4099      	lsls	r1, r3
    5652:	4291      	cmp	r1, r2
    5654:	d857      	bhi.n	5706 <_malloc_r+0x1c6>
    5656:	4211      	tst	r1, r2
    5658:	d106      	bne.n	5668 <_malloc_r+0x128>
    565a:	f020 0003 	bic.w	r0, r0, #3
    565e:	0049      	lsls	r1, r1, #1
    5660:	4211      	tst	r1, r2
    5662:	f100 0004 	add.w	r0, r0, #4
    5666:	d0fa      	beq.n	565e <_malloc_r+0x11e>
    5668:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    566c:	464d      	mov	r5, r9
    566e:	4686      	mov	lr, r0
    5670:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5674:	4545      	cmp	r5, r8
    5676:	d108      	bne.n	568a <_malloc_r+0x14a>
    5678:	e11d      	b.n	58b6 <_malloc_r+0x376>
    567a:	2b00      	cmp	r3, #0
    567c:	f280 8124 	bge.w	58c8 <_malloc_r+0x388>
    5680:	f8d8 800c 	ldr.w	r8, [r8, #12]
    5684:	4545      	cmp	r5, r8
    5686:	f000 8116 	beq.w	58b6 <_malloc_r+0x376>
    568a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    568e:	f022 0203 	bic.w	r2, r2, #3
    5692:	1b93      	subs	r3, r2, r6
    5694:	2b0f      	cmp	r3, #15
    5696:	ddf0      	ble.n	567a <_malloc_r+0x13a>
    5698:	4620      	mov	r0, r4
    569a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    569e:	eb08 0106 	add.w	r1, r8, r6
    56a2:	f046 0601 	orr.w	r6, r6, #1
    56a6:	f8c8 6004 	str.w	r6, [r8, #4]
    56aa:	60ec      	str	r4, [r5, #12]
    56ac:	60a5      	str	r5, [r4, #8]
    56ae:	f043 0401 	orr.w	r4, r3, #1
    56b2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    56b6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    56ba:	604c      	str	r4, [r1, #4]
    56bc:	f848 3002 	str.w	r3, [r8, r2]
    56c0:	f000 f9f4 	bl	5aac <__malloc_unlock>
    56c4:	f108 0508 	add.w	r5, r8, #8
    56c8:	e002      	b.n	56d0 <_malloc_r+0x190>
    56ca:	230c      	movs	r3, #12
    56cc:	6023      	str	r3, [r4, #0]
    56ce:	2500      	movs	r5, #0
    56d0:	4628      	mov	r0, r5
    56d2:	b003      	add	sp, #12
    56d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56d8:	f44f 7300 	mov.w	r3, #512	; 0x200
    56dc:	2040      	movs	r0, #64	; 0x40
    56de:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    56e2:	e773      	b.n	55cc <_malloc_r+0x8c>
    56e4:	68d3      	ldr	r3, [r2, #12]
    56e6:	429a      	cmp	r2, r3
    56e8:	bf08      	it	eq
    56ea:	3002      	addeq	r0, #2
    56ec:	f47f af40 	bne.w	5570 <_malloc_r+0x30>
    56f0:	693d      	ldr	r5, [r7, #16]
    56f2:	f8df c158 	ldr.w	ip, [pc, #344]	; 584c <_malloc_r+0x30c>
    56f6:	4565      	cmp	r5, ip
    56f8:	d182      	bne.n	5600 <_malloc_r+0xc0>
    56fa:	687a      	ldr	r2, [r7, #4]
    56fc:	1083      	asrs	r3, r0, #2
    56fe:	2101      	movs	r1, #1
    5700:	4099      	lsls	r1, r3
    5702:	4291      	cmp	r1, r2
    5704:	d9a7      	bls.n	5656 <_malloc_r+0x116>
    5706:	68bd      	ldr	r5, [r7, #8]
    5708:	686b      	ldr	r3, [r5, #4]
    570a:	f023 0903 	bic.w	r9, r3, #3
    570e:	454e      	cmp	r6, r9
    5710:	d803      	bhi.n	571a <_malloc_r+0x1da>
    5712:	eba9 0306 	sub.w	r3, r9, r6
    5716:	2b0f      	cmp	r3, #15
    5718:	dc7a      	bgt.n	5810 <_malloc_r+0x2d0>
    571a:	f8df b134 	ldr.w	fp, [pc, #308]	; 5850 <_malloc_r+0x310>
    571e:	4b47      	ldr	r3, [pc, #284]	; (583c <_malloc_r+0x2fc>)
    5720:	f8db 2000 	ldr.w	r2, [fp]
    5724:	681b      	ldr	r3, [r3, #0]
    5726:	3201      	adds	r2, #1
    5728:	4433      	add	r3, r6
    572a:	eb05 0a09 	add.w	sl, r5, r9
    572e:	f000 8133 	beq.w	5998 <_malloc_r+0x458>
    5732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5736:	330f      	adds	r3, #15
    5738:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    573c:	f028 080f 	bic.w	r8, r8, #15
    5740:	4641      	mov	r1, r8
    5742:	4620      	mov	r0, r4
    5744:	f002 f984 	bl	7a50 <_sbrk_r>
    5748:	1c41      	adds	r1, r0, #1
    574a:	4602      	mov	r2, r0
    574c:	f000 80f3 	beq.w	5936 <_malloc_r+0x3f6>
    5750:	4582      	cmp	sl, r0
    5752:	f200 80ee 	bhi.w	5932 <_malloc_r+0x3f2>
    5756:	4b3a      	ldr	r3, [pc, #232]	; (5840 <_malloc_r+0x300>)
    5758:	6819      	ldr	r1, [r3, #0]
    575a:	4441      	add	r1, r8
    575c:	6019      	str	r1, [r3, #0]
    575e:	4608      	mov	r0, r1
    5760:	f000 814e 	beq.w	5a00 <_malloc_r+0x4c0>
    5764:	f8db 1000 	ldr.w	r1, [fp]
    5768:	9301      	str	r3, [sp, #4]
    576a:	3101      	adds	r1, #1
    576c:	bf1b      	ittet	ne
    576e:	eba2 010a 	subne.w	r1, r2, sl
    5772:	1809      	addne	r1, r1, r0
    5774:	f8cb 2000 	streq.w	r2, [fp]
    5778:	6019      	strne	r1, [r3, #0]
    577a:	f012 0b07 	ands.w	fp, r2, #7
    577e:	f000 8117 	beq.w	59b0 <_malloc_r+0x470>
    5782:	f1cb 0108 	rsb	r1, fp, #8
    5786:	440a      	add	r2, r1
    5788:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    578c:	4490      	add	r8, r2
    578e:	3108      	adds	r1, #8
    5790:	eba1 0108 	sub.w	r1, r1, r8
    5794:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5798:	4651      	mov	r1, sl
    579a:	4620      	mov	r0, r4
    579c:	9200      	str	r2, [sp, #0]
    579e:	f002 f957 	bl	7a50 <_sbrk_r>
    57a2:	1c42      	adds	r2, r0, #1
    57a4:	e9dd 2300 	ldrd	r2, r3, [sp]
    57a8:	f000 814f 	beq.w	5a4a <_malloc_r+0x50a>
    57ac:	1a80      	subs	r0, r0, r2
    57ae:	eb00 080a 	add.w	r8, r0, sl
    57b2:	6819      	ldr	r1, [r3, #0]
    57b4:	60ba      	str	r2, [r7, #8]
    57b6:	f048 0001 	orr.w	r0, r8, #1
    57ba:	4451      	add	r1, sl
    57bc:	42bd      	cmp	r5, r7
    57be:	6050      	str	r0, [r2, #4]
    57c0:	6019      	str	r1, [r3, #0]
    57c2:	f000 8129 	beq.w	5a18 <_malloc_r+0x4d8>
    57c6:	f1b9 0f0f 	cmp.w	r9, #15
    57ca:	f240 8127 	bls.w	5a1c <_malloc_r+0x4dc>
    57ce:	6868      	ldr	r0, [r5, #4]
    57d0:	f1a9 0c0c 	sub.w	ip, r9, #12
    57d4:	f02c 0c07 	bic.w	ip, ip, #7
    57d8:	f000 0001 	and.w	r0, r0, #1
    57dc:	ea40 000c 	orr.w	r0, r0, ip
    57e0:	6068      	str	r0, [r5, #4]
    57e2:	f04f 0e05 	mov.w	lr, #5
    57e6:	eb05 000c 	add.w	r0, r5, ip
    57ea:	f1bc 0f0f 	cmp.w	ip, #15
    57ee:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    57f2:	f200 8132 	bhi.w	5a5a <_malloc_r+0x51a>
    57f6:	6850      	ldr	r0, [r2, #4]
    57f8:	4615      	mov	r5, r2
    57fa:	4b12      	ldr	r3, [pc, #72]	; (5844 <_malloc_r+0x304>)
    57fc:	681a      	ldr	r2, [r3, #0]
    57fe:	428a      	cmp	r2, r1
    5800:	bf38      	it	cc
    5802:	6019      	strcc	r1, [r3, #0]
    5804:	4b10      	ldr	r3, [pc, #64]	; (5848 <_malloc_r+0x308>)
    5806:	681a      	ldr	r2, [r3, #0]
    5808:	428a      	cmp	r2, r1
    580a:	bf38      	it	cc
    580c:	6019      	strcc	r1, [r3, #0]
    580e:	e094      	b.n	593a <_malloc_r+0x3fa>
    5810:	19aa      	adds	r2, r5, r6
    5812:	f043 0301 	orr.w	r3, r3, #1
    5816:	f046 0601 	orr.w	r6, r6, #1
    581a:	606e      	str	r6, [r5, #4]
    581c:	4620      	mov	r0, r4
    581e:	60ba      	str	r2, [r7, #8]
    5820:	6053      	str	r3, [r2, #4]
    5822:	f000 f943 	bl	5aac <__malloc_unlock>
    5826:	3508      	adds	r5, #8
    5828:	4628      	mov	r0, r5
    582a:	b003      	add	sp, #12
    582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5830:	68d9      	ldr	r1, [r3, #12]
    5832:	441a      	add	r2, r3
    5834:	e6a1      	b.n	557a <_malloc_r+0x3a>
    5836:	bf00      	nop
    5838:	20001738 	.word	0x20001738
    583c:	20002708 	.word	0x20002708
    5840:	200026d8 	.word	0x200026d8
    5844:	20002700 	.word	0x20002700
    5848:	20002704 	.word	0x20002704
    584c:	20001740 	.word	0x20001740
    5850:	20001b40 	.word	0x20001b40
    5854:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5858:	ea4f 2352 	mov.w	r3, r2, lsr #9
    585c:	d363      	bcc.n	5926 <_malloc_r+0x3e6>
    585e:	2b14      	cmp	r3, #20
    5860:	f200 80b7 	bhi.w	59d2 <_malloc_r+0x492>
    5864:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5868:	00c9      	lsls	r1, r1, #3
    586a:	335b      	adds	r3, #91	; 0x5b
    586c:	eb07 0e01 	add.w	lr, r7, r1
    5870:	5879      	ldr	r1, [r7, r1]
    5872:	f1ae 0e08 	sub.w	lr, lr, #8
    5876:	458e      	cmp	lr, r1
    5878:	f000 8091 	beq.w	599e <_malloc_r+0x45e>
    587c:	684b      	ldr	r3, [r1, #4]
    587e:	f023 0303 	bic.w	r3, r3, #3
    5882:	4293      	cmp	r3, r2
    5884:	d902      	bls.n	588c <_malloc_r+0x34c>
    5886:	6889      	ldr	r1, [r1, #8]
    5888:	458e      	cmp	lr, r1
    588a:	d1f7      	bne.n	587c <_malloc_r+0x33c>
    588c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5890:	687a      	ldr	r2, [r7, #4]
    5892:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    5896:	f8ce 5008 	str.w	r5, [lr, #8]
    589a:	60cd      	str	r5, [r1, #12]
    589c:	e6d6      	b.n	564c <_malloc_r+0x10c>
    589e:	2b14      	cmp	r3, #20
    58a0:	d959      	bls.n	5956 <_malloc_r+0x416>
    58a2:	2b54      	cmp	r3, #84	; 0x54
    58a4:	f200 809d 	bhi.w	59e2 <_malloc_r+0x4a2>
    58a8:	0b33      	lsrs	r3, r6, #12
    58aa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    58ae:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    58b2:	00c3      	lsls	r3, r0, #3
    58b4:	e68a      	b.n	55cc <_malloc_r+0x8c>
    58b6:	f10e 0e01 	add.w	lr, lr, #1
    58ba:	f01e 0f03 	tst.w	lr, #3
    58be:	f105 0508 	add.w	r5, r5, #8
    58c2:	f47f aed5 	bne.w	5670 <_malloc_r+0x130>
    58c6:	e051      	b.n	596c <_malloc_r+0x42c>
    58c8:	4442      	add	r2, r8
    58ca:	4645      	mov	r5, r8
    58cc:	6853      	ldr	r3, [r2, #4]
    58ce:	f8d8 100c 	ldr.w	r1, [r8, #12]
    58d2:	f043 0301 	orr.w	r3, r3, #1
    58d6:	6053      	str	r3, [r2, #4]
    58d8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    58dc:	4620      	mov	r0, r4
    58de:	60d9      	str	r1, [r3, #12]
    58e0:	608b      	str	r3, [r1, #8]
    58e2:	f000 f8e3 	bl	5aac <__malloc_unlock>
    58e6:	e6f3      	b.n	56d0 <_malloc_r+0x190>
    58e8:	08f0      	lsrs	r0, r6, #3
    58ea:	f106 0208 	add.w	r2, r6, #8
    58ee:	e637      	b.n	5560 <_malloc_r+0x20>
    58f0:	442a      	add	r2, r5
    58f2:	4620      	mov	r0, r4
    58f4:	6853      	ldr	r3, [r2, #4]
    58f6:	f043 0301 	orr.w	r3, r3, #1
    58fa:	6053      	str	r3, [r2, #4]
    58fc:	3508      	adds	r5, #8
    58fe:	f000 f8d5 	bl	5aac <__malloc_unlock>
    5902:	e6e5      	b.n	56d0 <_malloc_r+0x190>
    5904:	19a9      	adds	r1, r5, r6
    5906:	4620      	mov	r0, r4
    5908:	f046 0601 	orr.w	r6, r6, #1
    590c:	f043 0401 	orr.w	r4, r3, #1
    5910:	606e      	str	r6, [r5, #4]
    5912:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5916:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    591a:	604c      	str	r4, [r1, #4]
    591c:	50ab      	str	r3, [r5, r2]
    591e:	f000 f8c5 	bl	5aac <__malloc_unlock>
    5922:	3508      	adds	r5, #8
    5924:	e6d4      	b.n	56d0 <_malloc_r+0x190>
    5926:	0993      	lsrs	r3, r2, #6
    5928:	f103 0139 	add.w	r1, r3, #57	; 0x39
    592c:	00c9      	lsls	r1, r1, #3
    592e:	3338      	adds	r3, #56	; 0x38
    5930:	e79c      	b.n	586c <_malloc_r+0x32c>
    5932:	42bd      	cmp	r5, r7
    5934:	d05f      	beq.n	59f6 <_malloc_r+0x4b6>
    5936:	68bd      	ldr	r5, [r7, #8]
    5938:	6868      	ldr	r0, [r5, #4]
    593a:	f020 0803 	bic.w	r8, r0, #3
    593e:	4546      	cmp	r6, r8
    5940:	eba8 0306 	sub.w	r3, r8, r6
    5944:	d802      	bhi.n	594c <_malloc_r+0x40c>
    5946:	2b0f      	cmp	r3, #15
    5948:	f73f af62 	bgt.w	5810 <_malloc_r+0x2d0>
    594c:	4620      	mov	r0, r4
    594e:	f000 f8ad 	bl	5aac <__malloc_unlock>
    5952:	2500      	movs	r5, #0
    5954:	e6bc      	b.n	56d0 <_malloc_r+0x190>
    5956:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    595a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    595e:	00c3      	lsls	r3, r0, #3
    5960:	e634      	b.n	55cc <_malloc_r+0x8c>
    5962:	f859 3908 	ldr.w	r3, [r9], #-8
    5966:	454b      	cmp	r3, r9
    5968:	f040 8096 	bne.w	5a98 <_malloc_r+0x558>
    596c:	f010 0f03 	tst.w	r0, #3
    5970:	f100 30ff 	add.w	r0, r0, #4294967295
    5974:	d1f5      	bne.n	5962 <_malloc_r+0x422>
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	ea23 0301 	bic.w	r3, r3, r1
    597c:	607b      	str	r3, [r7, #4]
    597e:	0049      	lsls	r1, r1, #1
    5980:	4299      	cmp	r1, r3
    5982:	f63f aec0 	bhi.w	5706 <_malloc_r+0x1c6>
    5986:	b919      	cbnz	r1, 5990 <_malloc_r+0x450>
    5988:	e6bd      	b.n	5706 <_malloc_r+0x1c6>
    598a:	0049      	lsls	r1, r1, #1
    598c:	f10e 0e04 	add.w	lr, lr, #4
    5990:	4219      	tst	r1, r3
    5992:	d0fa      	beq.n	598a <_malloc_r+0x44a>
    5994:	4670      	mov	r0, lr
    5996:	e667      	b.n	5668 <_malloc_r+0x128>
    5998:	f103 0810 	add.w	r8, r3, #16
    599c:	e6d0      	b.n	5740 <_malloc_r+0x200>
    599e:	109a      	asrs	r2, r3, #2
    59a0:	f04f 0801 	mov.w	r8, #1
    59a4:	687b      	ldr	r3, [r7, #4]
    59a6:	fa08 f202 	lsl.w	r2, r8, r2
    59aa:	431a      	orrs	r2, r3
    59ac:	607a      	str	r2, [r7, #4]
    59ae:	e770      	b.n	5892 <_malloc_r+0x352>
    59b0:	eb02 0108 	add.w	r1, r2, r8
    59b4:	4249      	negs	r1, r1
    59b6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    59ba:	4651      	mov	r1, sl
    59bc:	4620      	mov	r0, r4
    59be:	9200      	str	r2, [sp, #0]
    59c0:	f002 f846 	bl	7a50 <_sbrk_r>
    59c4:	1c43      	adds	r3, r0, #1
    59c6:	e9dd 2300 	ldrd	r2, r3, [sp]
    59ca:	f47f aeef 	bne.w	57ac <_malloc_r+0x26c>
    59ce:	46da      	mov	sl, fp
    59d0:	e6ef      	b.n	57b2 <_malloc_r+0x272>
    59d2:	2b54      	cmp	r3, #84	; 0x54
    59d4:	d825      	bhi.n	5a22 <_malloc_r+0x4e2>
    59d6:	0b13      	lsrs	r3, r2, #12
    59d8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    59dc:	00c9      	lsls	r1, r1, #3
    59de:	336e      	adds	r3, #110	; 0x6e
    59e0:	e744      	b.n	586c <_malloc_r+0x32c>
    59e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    59e6:	d825      	bhi.n	5a34 <_malloc_r+0x4f4>
    59e8:	0bf3      	lsrs	r3, r6, #15
    59ea:	f103 0078 	add.w	r0, r3, #120	; 0x78
    59ee:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    59f2:	00c3      	lsls	r3, r0, #3
    59f4:	e5ea      	b.n	55cc <_malloc_r+0x8c>
    59f6:	4b29      	ldr	r3, [pc, #164]	; (5a9c <_malloc_r+0x55c>)
    59f8:	6818      	ldr	r0, [r3, #0]
    59fa:	4440      	add	r0, r8
    59fc:	6018      	str	r0, [r3, #0]
    59fe:	e6b1      	b.n	5764 <_malloc_r+0x224>
    5a00:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    5a04:	f1bc 0f00 	cmp.w	ip, #0
    5a08:	f47f aeac 	bne.w	5764 <_malloc_r+0x224>
    5a0c:	68bd      	ldr	r5, [r7, #8]
    5a0e:	44c8      	add	r8, r9
    5a10:	f048 0001 	orr.w	r0, r8, #1
    5a14:	6068      	str	r0, [r5, #4]
    5a16:	e6f0      	b.n	57fa <_malloc_r+0x2ba>
    5a18:	4615      	mov	r5, r2
    5a1a:	e6ee      	b.n	57fa <_malloc_r+0x2ba>
    5a1c:	2301      	movs	r3, #1
    5a1e:	6053      	str	r3, [r2, #4]
    5a20:	e794      	b.n	594c <_malloc_r+0x40c>
    5a22:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5a26:	d823      	bhi.n	5a70 <_malloc_r+0x530>
    5a28:	0bd3      	lsrs	r3, r2, #15
    5a2a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    5a2e:	00c9      	lsls	r1, r1, #3
    5a30:	3377      	adds	r3, #119	; 0x77
    5a32:	e71b      	b.n	586c <_malloc_r+0x32c>
    5a34:	f240 5254 	movw	r2, #1364	; 0x554
    5a38:	4293      	cmp	r3, r2
    5a3a:	d823      	bhi.n	5a84 <_malloc_r+0x544>
    5a3c:	0cb3      	lsrs	r3, r6, #18
    5a3e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5a42:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    5a46:	00c3      	lsls	r3, r0, #3
    5a48:	e5c0      	b.n	55cc <_malloc_r+0x8c>
    5a4a:	f1ab 0b08 	sub.w	fp, fp, #8
    5a4e:	44d8      	add	r8, fp
    5a50:	eba8 0802 	sub.w	r8, r8, r2
    5a54:	f04f 0a00 	mov.w	sl, #0
    5a58:	e6ab      	b.n	57b2 <_malloc_r+0x272>
    5a5a:	f105 0108 	add.w	r1, r5, #8
    5a5e:	4620      	mov	r0, r4
    5a60:	9300      	str	r3, [sp, #0]
    5a62:	f002 fb3f 	bl	80e4 <_free_r>
    5a66:	68bd      	ldr	r5, [r7, #8]
    5a68:	9b00      	ldr	r3, [sp, #0]
    5a6a:	6868      	ldr	r0, [r5, #4]
    5a6c:	6819      	ldr	r1, [r3, #0]
    5a6e:	e6c4      	b.n	57fa <_malloc_r+0x2ba>
    5a70:	f240 5154 	movw	r1, #1364	; 0x554
    5a74:	428b      	cmp	r3, r1
    5a76:	d80b      	bhi.n	5a90 <_malloc_r+0x550>
    5a78:	0c93      	lsrs	r3, r2, #18
    5a7a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    5a7e:	00c9      	lsls	r1, r1, #3
    5a80:	337c      	adds	r3, #124	; 0x7c
    5a82:	e6f3      	b.n	586c <_malloc_r+0x32c>
    5a84:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5a88:	207f      	movs	r0, #127	; 0x7f
    5a8a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    5a8e:	e59d      	b.n	55cc <_malloc_r+0x8c>
    5a90:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    5a94:	237e      	movs	r3, #126	; 0x7e
    5a96:	e6e9      	b.n	586c <_malloc_r+0x32c>
    5a98:	687b      	ldr	r3, [r7, #4]
    5a9a:	e770      	b.n	597e <_malloc_r+0x43e>
    5a9c:	200026d8 	.word	0x200026d8

00005aa0 <__malloc_lock>:
    5aa0:	4801      	ldr	r0, [pc, #4]	; (5aa8 <__malloc_lock+0x8>)
    5aa2:	f002 b82b 	b.w	7afc <__retarget_lock_acquire_recursive>
    5aa6:	bf00      	nop
    5aa8:	200026d0 	.word	0x200026d0

00005aac <__malloc_unlock>:
    5aac:	4801      	ldr	r0, [pc, #4]	; (5ab4 <__malloc_unlock+0x8>)
    5aae:	f002 b827 	b.w	7b00 <__retarget_lock_release_recursive>
    5ab2:	bf00      	nop
    5ab4:	200026d0 	.word	0x200026d0

00005ab8 <realloc>:
    5ab8:	b410      	push	{r4}
    5aba:	4c04      	ldr	r4, [pc, #16]	; (5acc <realloc+0x14>)
    5abc:	4603      	mov	r3, r0
    5abe:	460a      	mov	r2, r1
    5ac0:	6820      	ldr	r0, [r4, #0]
    5ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ac6:	4619      	mov	r1, r3
    5ac8:	f000 b802 	b.w	5ad0 <_realloc_r>
    5acc:	20001b54 	.word	0x20001b54

00005ad0 <_realloc_r>:
    5ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ad4:	4617      	mov	r7, r2
    5ad6:	2900      	cmp	r1, #0
    5ad8:	f000 8098 	beq.w	5c0c <_realloc_r+0x13c>
    5adc:	460c      	mov	r4, r1
    5ade:	f107 050b 	add.w	r5, r7, #11
    5ae2:	4680      	mov	r8, r0
    5ae4:	f7ff ffdc 	bl	5aa0 <__malloc_lock>
    5ae8:	2d16      	cmp	r5, #22
    5aea:	f854 1c04 	ldr.w	r1, [r4, #-4]
    5aee:	d85b      	bhi.n	5ba8 <_realloc_r+0xd8>
    5af0:	2510      	movs	r5, #16
    5af2:	462a      	mov	r2, r5
    5af4:	42af      	cmp	r7, r5
    5af6:	d85c      	bhi.n	5bb2 <_realloc_r+0xe2>
    5af8:	f021 0603 	bic.w	r6, r1, #3
    5afc:	4296      	cmp	r6, r2
    5afe:	f1a4 0908 	sub.w	r9, r4, #8
    5b02:	da62      	bge.n	5bca <_realloc_r+0xfa>
    5b04:	4bbc      	ldr	r3, [pc, #752]	; (5df8 <_realloc_r+0x328>)
    5b06:	f8d3 c008 	ldr.w	ip, [r3, #8]
    5b0a:	eb09 0006 	add.w	r0, r9, r6
    5b0e:	4584      	cmp	ip, r0
    5b10:	f000 8097 	beq.w	5c42 <_realloc_r+0x172>
    5b14:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5b18:	f02c 0301 	bic.w	r3, ip, #1
    5b1c:	4403      	add	r3, r0
    5b1e:	685b      	ldr	r3, [r3, #4]
    5b20:	07db      	lsls	r3, r3, #31
    5b22:	d468      	bmi.n	5bf6 <_realloc_r+0x126>
    5b24:	f02c 0c03 	bic.w	ip, ip, #3
    5b28:	eb06 030c 	add.w	r3, r6, ip
    5b2c:	4293      	cmp	r3, r2
    5b2e:	da47      	bge.n	5bc0 <_realloc_r+0xf0>
    5b30:	07cb      	lsls	r3, r1, #31
    5b32:	d410      	bmi.n	5b56 <_realloc_r+0x86>
    5b34:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5b38:	eba9 0a03 	sub.w	sl, r9, r3
    5b3c:	f8da 3004 	ldr.w	r3, [sl, #4]
    5b40:	f023 0103 	bic.w	r1, r3, #3
    5b44:	448c      	add	ip, r1
    5b46:	44b4      	add	ip, r6
    5b48:	4594      	cmp	ip, r2
    5b4a:	f280 8111 	bge.w	5d70 <_realloc_r+0x2a0>
    5b4e:	1873      	adds	r3, r6, r1
    5b50:	4293      	cmp	r3, r2
    5b52:	f280 80e8 	bge.w	5d26 <_realloc_r+0x256>
    5b56:	4639      	mov	r1, r7
    5b58:	4640      	mov	r0, r8
    5b5a:	f7ff fcf1 	bl	5540 <_malloc_r>
    5b5e:	4607      	mov	r7, r0
    5b60:	b1e0      	cbz	r0, 5b9c <_realloc_r+0xcc>
    5b62:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5b66:	f023 0301 	bic.w	r3, r3, #1
    5b6a:	444b      	add	r3, r9
    5b6c:	f1a0 0208 	sub.w	r2, r0, #8
    5b70:	4293      	cmp	r3, r2
    5b72:	f000 80d2 	beq.w	5d1a <_realloc_r+0x24a>
    5b76:	1f32      	subs	r2, r6, #4
    5b78:	2a24      	cmp	r2, #36	; 0x24
    5b7a:	f200 80f5 	bhi.w	5d68 <_realloc_r+0x298>
    5b7e:	2a13      	cmp	r2, #19
    5b80:	f200 80ac 	bhi.w	5cdc <_realloc_r+0x20c>
    5b84:	4603      	mov	r3, r0
    5b86:	4622      	mov	r2, r4
    5b88:	6811      	ldr	r1, [r2, #0]
    5b8a:	6019      	str	r1, [r3, #0]
    5b8c:	6851      	ldr	r1, [r2, #4]
    5b8e:	6059      	str	r1, [r3, #4]
    5b90:	6892      	ldr	r2, [r2, #8]
    5b92:	609a      	str	r2, [r3, #8]
    5b94:	4621      	mov	r1, r4
    5b96:	4640      	mov	r0, r8
    5b98:	f002 faa4 	bl	80e4 <_free_r>
    5b9c:	4640      	mov	r0, r8
    5b9e:	f7ff ff85 	bl	5aac <__malloc_unlock>
    5ba2:	4638      	mov	r0, r7
    5ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ba8:	f025 0507 	bic.w	r5, r5, #7
    5bac:	2d00      	cmp	r5, #0
    5bae:	462a      	mov	r2, r5
    5bb0:	daa0      	bge.n	5af4 <_realloc_r+0x24>
    5bb2:	230c      	movs	r3, #12
    5bb4:	f8c8 3000 	str.w	r3, [r8]
    5bb8:	2700      	movs	r7, #0
    5bba:	4638      	mov	r0, r7
    5bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bc0:	461e      	mov	r6, r3
    5bc2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    5bc6:	60d3      	str	r3, [r2, #12]
    5bc8:	609a      	str	r2, [r3, #8]
    5bca:	1b73      	subs	r3, r6, r5
    5bcc:	2b0f      	cmp	r3, #15
    5bce:	d822      	bhi.n	5c16 <_realloc_r+0x146>
    5bd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5bd4:	f003 0301 	and.w	r3, r3, #1
    5bd8:	4333      	orrs	r3, r6
    5bda:	444e      	add	r6, r9
    5bdc:	f8c9 3004 	str.w	r3, [r9, #4]
    5be0:	6873      	ldr	r3, [r6, #4]
    5be2:	f043 0301 	orr.w	r3, r3, #1
    5be6:	6073      	str	r3, [r6, #4]
    5be8:	4640      	mov	r0, r8
    5bea:	4627      	mov	r7, r4
    5bec:	f7ff ff5e 	bl	5aac <__malloc_unlock>
    5bf0:	4638      	mov	r0, r7
    5bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bf6:	07c9      	lsls	r1, r1, #31
    5bf8:	d4ad      	bmi.n	5b56 <_realloc_r+0x86>
    5bfa:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5bfe:	eba9 0a03 	sub.w	sl, r9, r3
    5c02:	f8da 1004 	ldr.w	r1, [sl, #4]
    5c06:	f021 0103 	bic.w	r1, r1, #3
    5c0a:	e7a0      	b.n	5b4e <_realloc_r+0x7e>
    5c0c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c10:	4611      	mov	r1, r2
    5c12:	f7ff bc95 	b.w	5540 <_malloc_r>
    5c16:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5c1a:	eb09 0105 	add.w	r1, r9, r5
    5c1e:	f002 0201 	and.w	r2, r2, #1
    5c22:	444e      	add	r6, r9
    5c24:	f043 0301 	orr.w	r3, r3, #1
    5c28:	432a      	orrs	r2, r5
    5c2a:	f8c9 2004 	str.w	r2, [r9, #4]
    5c2e:	604b      	str	r3, [r1, #4]
    5c30:	6873      	ldr	r3, [r6, #4]
    5c32:	f043 0301 	orr.w	r3, r3, #1
    5c36:	3108      	adds	r1, #8
    5c38:	6073      	str	r3, [r6, #4]
    5c3a:	4640      	mov	r0, r8
    5c3c:	f002 fa52 	bl	80e4 <_free_r>
    5c40:	e7d2      	b.n	5be8 <_realloc_r+0x118>
    5c42:	f8dc 0004 	ldr.w	r0, [ip, #4]
    5c46:	f020 0b03 	bic.w	fp, r0, #3
    5c4a:	eb06 0c0b 	add.w	ip, r6, fp
    5c4e:	f105 0010 	add.w	r0, r5, #16
    5c52:	4584      	cmp	ip, r0
    5c54:	da4d      	bge.n	5cf2 <_realloc_r+0x222>
    5c56:	07c9      	lsls	r1, r1, #31
    5c58:	f53f af7d 	bmi.w	5b56 <_realloc_r+0x86>
    5c5c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5c60:	eba9 0a01 	sub.w	sl, r9, r1
    5c64:	f8da 1004 	ldr.w	r1, [sl, #4]
    5c68:	f021 0103 	bic.w	r1, r1, #3
    5c6c:	448b      	add	fp, r1
    5c6e:	44b3      	add	fp, r6
    5c70:	4558      	cmp	r0, fp
    5c72:	f73f af6c 	bgt.w	5b4e <_realloc_r+0x7e>
    5c76:	4657      	mov	r7, sl
    5c78:	f8da 100c 	ldr.w	r1, [sl, #12]
    5c7c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5c80:	1f32      	subs	r2, r6, #4
    5c82:	2a24      	cmp	r2, #36	; 0x24
    5c84:	60c1      	str	r1, [r0, #12]
    5c86:	6088      	str	r0, [r1, #8]
    5c88:	f200 80db 	bhi.w	5e42 <_realloc_r+0x372>
    5c8c:	2a13      	cmp	r2, #19
    5c8e:	f240 80d6 	bls.w	5e3e <_realloc_r+0x36e>
    5c92:	6821      	ldr	r1, [r4, #0]
    5c94:	f8ca 1008 	str.w	r1, [sl, #8]
    5c98:	6861      	ldr	r1, [r4, #4]
    5c9a:	f8ca 100c 	str.w	r1, [sl, #12]
    5c9e:	2a1b      	cmp	r2, #27
    5ca0:	f200 80df 	bhi.w	5e62 <_realloc_r+0x392>
    5ca4:	3408      	adds	r4, #8
    5ca6:	f10a 0210 	add.w	r2, sl, #16
    5caa:	6821      	ldr	r1, [r4, #0]
    5cac:	6011      	str	r1, [r2, #0]
    5cae:	6861      	ldr	r1, [r4, #4]
    5cb0:	6051      	str	r1, [r2, #4]
    5cb2:	68a1      	ldr	r1, [r4, #8]
    5cb4:	6091      	str	r1, [r2, #8]
    5cb6:	eb0a 0105 	add.w	r1, sl, r5
    5cba:	ebab 0205 	sub.w	r2, fp, r5
    5cbe:	f042 0201 	orr.w	r2, r2, #1
    5cc2:	6099      	str	r1, [r3, #8]
    5cc4:	604a      	str	r2, [r1, #4]
    5cc6:	f8da 3004 	ldr.w	r3, [sl, #4]
    5cca:	f003 0301 	and.w	r3, r3, #1
    5cce:	432b      	orrs	r3, r5
    5cd0:	4640      	mov	r0, r8
    5cd2:	f8ca 3004 	str.w	r3, [sl, #4]
    5cd6:	f7ff fee9 	bl	5aac <__malloc_unlock>
    5cda:	e76e      	b.n	5bba <_realloc_r+0xea>
    5cdc:	6823      	ldr	r3, [r4, #0]
    5cde:	6003      	str	r3, [r0, #0]
    5ce0:	6863      	ldr	r3, [r4, #4]
    5ce2:	6043      	str	r3, [r0, #4]
    5ce4:	2a1b      	cmp	r2, #27
    5ce6:	d868      	bhi.n	5dba <_realloc_r+0x2ea>
    5ce8:	f104 0208 	add.w	r2, r4, #8
    5cec:	f100 0308 	add.w	r3, r0, #8
    5cf0:	e74a      	b.n	5b88 <_realloc_r+0xb8>
    5cf2:	eb09 0205 	add.w	r2, r9, r5
    5cf6:	609a      	str	r2, [r3, #8]
    5cf8:	ebac 0305 	sub.w	r3, ip, r5
    5cfc:	f043 0301 	orr.w	r3, r3, #1
    5d00:	6053      	str	r3, [r2, #4]
    5d02:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5d06:	f003 0301 	and.w	r3, r3, #1
    5d0a:	432b      	orrs	r3, r5
    5d0c:	4640      	mov	r0, r8
    5d0e:	f844 3c04 	str.w	r3, [r4, #-4]
    5d12:	f7ff fecb 	bl	5aac <__malloc_unlock>
    5d16:	4627      	mov	r7, r4
    5d18:	e74f      	b.n	5bba <_realloc_r+0xea>
    5d1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5d1e:	f023 0303 	bic.w	r3, r3, #3
    5d22:	441e      	add	r6, r3
    5d24:	e751      	b.n	5bca <_realloc_r+0xfa>
    5d26:	4657      	mov	r7, sl
    5d28:	f8da 100c 	ldr.w	r1, [sl, #12]
    5d2c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5d30:	1f32      	subs	r2, r6, #4
    5d32:	2a24      	cmp	r2, #36	; 0x24
    5d34:	60c1      	str	r1, [r0, #12]
    5d36:	6088      	str	r0, [r1, #8]
    5d38:	d84c      	bhi.n	5dd4 <_realloc_r+0x304>
    5d3a:	2a13      	cmp	r2, #19
    5d3c:	d948      	bls.n	5dd0 <_realloc_r+0x300>
    5d3e:	6821      	ldr	r1, [r4, #0]
    5d40:	f8ca 1008 	str.w	r1, [sl, #8]
    5d44:	6861      	ldr	r1, [r4, #4]
    5d46:	f8ca 100c 	str.w	r1, [sl, #12]
    5d4a:	2a1b      	cmp	r2, #27
    5d4c:	d856      	bhi.n	5dfc <_realloc_r+0x32c>
    5d4e:	3408      	adds	r4, #8
    5d50:	f10a 0210 	add.w	r2, sl, #16
    5d54:	461e      	mov	r6, r3
    5d56:	6823      	ldr	r3, [r4, #0]
    5d58:	6013      	str	r3, [r2, #0]
    5d5a:	6863      	ldr	r3, [r4, #4]
    5d5c:	6053      	str	r3, [r2, #4]
    5d5e:	68a3      	ldr	r3, [r4, #8]
    5d60:	6093      	str	r3, [r2, #8]
    5d62:	46d1      	mov	r9, sl
    5d64:	463c      	mov	r4, r7
    5d66:	e730      	b.n	5bca <_realloc_r+0xfa>
    5d68:	4621      	mov	r1, r4
    5d6a:	f001 fa6d 	bl	7248 <memmove>
    5d6e:	e711      	b.n	5b94 <_realloc_r+0xc4>
    5d70:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    5d74:	4657      	mov	r7, sl
    5d76:	60cb      	str	r3, [r1, #12]
    5d78:	6099      	str	r1, [r3, #8]
    5d7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    5d7e:	f8da 300c 	ldr.w	r3, [sl, #12]
    5d82:	60cb      	str	r3, [r1, #12]
    5d84:	1f32      	subs	r2, r6, #4
    5d86:	2a24      	cmp	r2, #36	; 0x24
    5d88:	6099      	str	r1, [r3, #8]
    5d8a:	d82d      	bhi.n	5de8 <_realloc_r+0x318>
    5d8c:	2a13      	cmp	r2, #19
    5d8e:	d929      	bls.n	5de4 <_realloc_r+0x314>
    5d90:	6823      	ldr	r3, [r4, #0]
    5d92:	f8ca 3008 	str.w	r3, [sl, #8]
    5d96:	6863      	ldr	r3, [r4, #4]
    5d98:	f8ca 300c 	str.w	r3, [sl, #12]
    5d9c:	2a1b      	cmp	r2, #27
    5d9e:	d842      	bhi.n	5e26 <_realloc_r+0x356>
    5da0:	3408      	adds	r4, #8
    5da2:	f10a 0310 	add.w	r3, sl, #16
    5da6:	6822      	ldr	r2, [r4, #0]
    5da8:	601a      	str	r2, [r3, #0]
    5daa:	6862      	ldr	r2, [r4, #4]
    5dac:	605a      	str	r2, [r3, #4]
    5dae:	68a2      	ldr	r2, [r4, #8]
    5db0:	609a      	str	r2, [r3, #8]
    5db2:	4666      	mov	r6, ip
    5db4:	46d1      	mov	r9, sl
    5db6:	463c      	mov	r4, r7
    5db8:	e707      	b.n	5bca <_realloc_r+0xfa>
    5dba:	68a3      	ldr	r3, [r4, #8]
    5dbc:	6083      	str	r3, [r0, #8]
    5dbe:	68e3      	ldr	r3, [r4, #12]
    5dc0:	60c3      	str	r3, [r0, #12]
    5dc2:	2a24      	cmp	r2, #36	; 0x24
    5dc4:	d026      	beq.n	5e14 <_realloc_r+0x344>
    5dc6:	f104 0210 	add.w	r2, r4, #16
    5dca:	f100 0310 	add.w	r3, r0, #16
    5dce:	e6db      	b.n	5b88 <_realloc_r+0xb8>
    5dd0:	463a      	mov	r2, r7
    5dd2:	e7bf      	b.n	5d54 <_realloc_r+0x284>
    5dd4:	4621      	mov	r1, r4
    5dd6:	4638      	mov	r0, r7
    5dd8:	461e      	mov	r6, r3
    5dda:	46d1      	mov	r9, sl
    5ddc:	f001 fa34 	bl	7248 <memmove>
    5de0:	463c      	mov	r4, r7
    5de2:	e6f2      	b.n	5bca <_realloc_r+0xfa>
    5de4:	463b      	mov	r3, r7
    5de6:	e7de      	b.n	5da6 <_realloc_r+0x2d6>
    5de8:	4621      	mov	r1, r4
    5dea:	4638      	mov	r0, r7
    5dec:	4666      	mov	r6, ip
    5dee:	46d1      	mov	r9, sl
    5df0:	f001 fa2a 	bl	7248 <memmove>
    5df4:	463c      	mov	r4, r7
    5df6:	e6e8      	b.n	5bca <_realloc_r+0xfa>
    5df8:	20001738 	.word	0x20001738
    5dfc:	68a1      	ldr	r1, [r4, #8]
    5dfe:	f8ca 1010 	str.w	r1, [sl, #16]
    5e02:	68e1      	ldr	r1, [r4, #12]
    5e04:	f8ca 1014 	str.w	r1, [sl, #20]
    5e08:	2a24      	cmp	r2, #36	; 0x24
    5e0a:	d020      	beq.n	5e4e <_realloc_r+0x37e>
    5e0c:	3410      	adds	r4, #16
    5e0e:	f10a 0218 	add.w	r2, sl, #24
    5e12:	e79f      	b.n	5d54 <_realloc_r+0x284>
    5e14:	6923      	ldr	r3, [r4, #16]
    5e16:	6103      	str	r3, [r0, #16]
    5e18:	6961      	ldr	r1, [r4, #20]
    5e1a:	6141      	str	r1, [r0, #20]
    5e1c:	f104 0218 	add.w	r2, r4, #24
    5e20:	f100 0318 	add.w	r3, r0, #24
    5e24:	e6b0      	b.n	5b88 <_realloc_r+0xb8>
    5e26:	68a3      	ldr	r3, [r4, #8]
    5e28:	f8ca 3010 	str.w	r3, [sl, #16]
    5e2c:	68e3      	ldr	r3, [r4, #12]
    5e2e:	f8ca 3014 	str.w	r3, [sl, #20]
    5e32:	2a24      	cmp	r2, #36	; 0x24
    5e34:	d021      	beq.n	5e7a <_realloc_r+0x3aa>
    5e36:	3410      	adds	r4, #16
    5e38:	f10a 0318 	add.w	r3, sl, #24
    5e3c:	e7b3      	b.n	5da6 <_realloc_r+0x2d6>
    5e3e:	463a      	mov	r2, r7
    5e40:	e733      	b.n	5caa <_realloc_r+0x1da>
    5e42:	4621      	mov	r1, r4
    5e44:	4638      	mov	r0, r7
    5e46:	f001 f9ff 	bl	7248 <memmove>
    5e4a:	4b16      	ldr	r3, [pc, #88]	; (5ea4 <_realloc_r+0x3d4>)
    5e4c:	e733      	b.n	5cb6 <_realloc_r+0x1e6>
    5e4e:	6922      	ldr	r2, [r4, #16]
    5e50:	f8ca 2018 	str.w	r2, [sl, #24]
    5e54:	6962      	ldr	r2, [r4, #20]
    5e56:	f8ca 201c 	str.w	r2, [sl, #28]
    5e5a:	3418      	adds	r4, #24
    5e5c:	f10a 0220 	add.w	r2, sl, #32
    5e60:	e778      	b.n	5d54 <_realloc_r+0x284>
    5e62:	68a1      	ldr	r1, [r4, #8]
    5e64:	f8ca 1010 	str.w	r1, [sl, #16]
    5e68:	68e1      	ldr	r1, [r4, #12]
    5e6a:	f8ca 1014 	str.w	r1, [sl, #20]
    5e6e:	2a24      	cmp	r2, #36	; 0x24
    5e70:	d00d      	beq.n	5e8e <_realloc_r+0x3be>
    5e72:	3410      	adds	r4, #16
    5e74:	f10a 0218 	add.w	r2, sl, #24
    5e78:	e717      	b.n	5caa <_realloc_r+0x1da>
    5e7a:	6923      	ldr	r3, [r4, #16]
    5e7c:	f8ca 3018 	str.w	r3, [sl, #24]
    5e80:	6963      	ldr	r3, [r4, #20]
    5e82:	f8ca 301c 	str.w	r3, [sl, #28]
    5e86:	3418      	adds	r4, #24
    5e88:	f10a 0320 	add.w	r3, sl, #32
    5e8c:	e78b      	b.n	5da6 <_realloc_r+0x2d6>
    5e8e:	6922      	ldr	r2, [r4, #16]
    5e90:	f8ca 2018 	str.w	r2, [sl, #24]
    5e94:	6962      	ldr	r2, [r4, #20]
    5e96:	f8ca 201c 	str.w	r2, [sl, #28]
    5e9a:	3418      	adds	r4, #24
    5e9c:	f10a 0220 	add.w	r2, sl, #32
    5ea0:	e703      	b.n	5caa <_realloc_r+0x1da>
    5ea2:	bf00      	nop
    5ea4:	20001738 	.word	0x20001738

00005ea8 <_strtod_l>:
    5ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5eac:	ed2d 8b10 	vpush	{d8-d15}
    5eb0:	b097      	sub	sp, #92	; 0x5c
    5eb2:	468a      	mov	sl, r1
    5eb4:	2100      	movs	r1, #0
    5eb6:	9207      	str	r2, [sp, #28]
    5eb8:	9112      	str	r1, [sp, #72]	; 0x48
    5eba:	2200      	movs	r2, #0
    5ebc:	2100      	movs	r1, #0
    5ebe:	e9cd 1204 	strd	r1, r2, [sp, #16]
    5ec2:	4680      	mov	r8, r0
    5ec4:	4651      	mov	r1, sl
    5ec6:	9111      	str	r1, [sp, #68]	; 0x44
    5ec8:	460f      	mov	r7, r1
    5eca:	f811 2b01 	ldrb.w	r2, [r1], #1
    5ece:	2a2d      	cmp	r2, #45	; 0x2d
    5ed0:	d85e      	bhi.n	5f90 <_strtod_l+0xe8>
    5ed2:	a001      	add	r0, pc, #4	; (adr r0, 5ed8 <_strtod_l+0x30>)
    5ed4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    5ed8:	00006079 	.word	0x00006079
    5edc:	00005f91 	.word	0x00005f91
    5ee0:	00005f91 	.word	0x00005f91
    5ee4:	00005f91 	.word	0x00005f91
    5ee8:	00005f91 	.word	0x00005f91
    5eec:	00005f91 	.word	0x00005f91
    5ef0:	00005f91 	.word	0x00005f91
    5ef4:	00005f91 	.word	0x00005f91
    5ef8:	00005f91 	.word	0x00005f91
    5efc:	00005ec7 	.word	0x00005ec7
    5f00:	00005ec7 	.word	0x00005ec7
    5f04:	00005ec7 	.word	0x00005ec7
    5f08:	00005ec7 	.word	0x00005ec7
    5f0c:	00005ec7 	.word	0x00005ec7
    5f10:	00005f91 	.word	0x00005f91
    5f14:	00005f91 	.word	0x00005f91
    5f18:	00005f91 	.word	0x00005f91
    5f1c:	00005f91 	.word	0x00005f91
    5f20:	00005f91 	.word	0x00005f91
    5f24:	00005f91 	.word	0x00005f91
    5f28:	00005f91 	.word	0x00005f91
    5f2c:	00005f91 	.word	0x00005f91
    5f30:	00005f91 	.word	0x00005f91
    5f34:	00005f91 	.word	0x00005f91
    5f38:	00005f91 	.word	0x00005f91
    5f3c:	00005f91 	.word	0x00005f91
    5f40:	00005f91 	.word	0x00005f91
    5f44:	00005f91 	.word	0x00005f91
    5f48:	00005f91 	.word	0x00005f91
    5f4c:	00005f91 	.word	0x00005f91
    5f50:	00005f91 	.word	0x00005f91
    5f54:	00005f91 	.word	0x00005f91
    5f58:	00005ec7 	.word	0x00005ec7
    5f5c:	00005f91 	.word	0x00005f91
    5f60:	00005f91 	.word	0x00005f91
    5f64:	00005f91 	.word	0x00005f91
    5f68:	00005f91 	.word	0x00005f91
    5f6c:	00005f91 	.word	0x00005f91
    5f70:	00005f91 	.word	0x00005f91
    5f74:	00005f91 	.word	0x00005f91
    5f78:	00005f91 	.word	0x00005f91
    5f7c:	00005f91 	.word	0x00005f91
    5f80:	00005f91 	.word	0x00005f91
    5f84:	000066b3 	.word	0x000066b3
    5f88:	00005f91 	.word	0x00005f91
    5f8c:	0000669f 	.word	0x0000669f
    5f90:	2100      	movs	r1, #0
    5f92:	9109      	str	r1, [sp, #36]	; 0x24
    5f94:	2a30      	cmp	r2, #48	; 0x30
    5f96:	d07d      	beq.n	6094 <_strtod_l+0x1ec>
    5f98:	2300      	movs	r3, #0
    5f9a:	9308      	str	r3, [sp, #32]
    5f9c:	2a2f      	cmp	r2, #47	; 0x2f
    5f9e:	4614      	mov	r4, r2
    5fa0:	f240 84cd 	bls.w	693e <_strtod_l+0xa96>
    5fa4:	f04f 0900 	mov.w	r9, #0
    5fa8:	4638      	mov	r0, r7
    5faa:	464e      	mov	r6, r9
    5fac:	464d      	mov	r5, r9
    5fae:	e012      	b.n	5fd6 <_strtod_l+0x12e>
    5fb0:	3001      	adds	r0, #1
    5fb2:	2d08      	cmp	r5, #8
    5fb4:	9011      	str	r0, [sp, #68]	; 0x44
    5fb6:	bfc8      	it	gt
    5fb8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    5fbc:	7804      	ldrb	r4, [r0, #0]
    5fbe:	bfc6      	itte	gt
    5fc0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    5fc4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    5fc8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    5fcc:	2c2f      	cmp	r4, #47	; 0x2f
    5fce:	f105 0501 	add.w	r5, r5, #1
    5fd2:	4622      	mov	r2, r4
    5fd4:	dd6f      	ble.n	60b6 <_strtod_l+0x20e>
    5fd6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    5fda:	2c39      	cmp	r4, #57	; 0x39
    5fdc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5fe0:	dde6      	ble.n	5fb0 <_strtod_l+0x108>
    5fe2:	499f      	ldr	r1, [pc, #636]	; (6260 <_strtod_l+0x3b8>)
    5fe4:	2201      	movs	r2, #1
    5fe6:	f001 fa63 	bl	74b0 <strncmp>
    5fea:	2800      	cmp	r0, #0
    5fec:	d137      	bne.n	605e <_strtod_l+0x1b6>
    5fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ff0:	461a      	mov	r2, r3
    5ff2:	3301      	adds	r3, #1
    5ff4:	9311      	str	r3, [sp, #68]	; 0x44
    5ff6:	7854      	ldrb	r4, [r2, #1]
    5ff8:	2d00      	cmp	r5, #0
    5ffa:	f040 8543 	bne.w	6a84 <_strtod_l+0xbdc>
    5ffe:	2c30      	cmp	r4, #48	; 0x30
    6000:	f040 8524 	bne.w	6a4c <_strtod_l+0xba4>
    6004:	f1c3 0201 	rsb	r2, r3, #1
    6008:	1898      	adds	r0, r3, r2
    600a:	3301      	adds	r3, #1
    600c:	9311      	str	r3, [sp, #68]	; 0x44
    600e:	781c      	ldrb	r4, [r3, #0]
    6010:	2c30      	cmp	r4, #48	; 0x30
    6012:	d0f9      	beq.n	6008 <_strtod_l+0x160>
    6014:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    6018:	2b08      	cmp	r3, #8
    601a:	f200 8301 	bhi.w	6620 <_strtod_l+0x778>
    601e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    6020:	1c43      	adds	r3, r0, #1
    6022:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    6026:	930b      	str	r3, [sp, #44]	; 0x2c
    6028:	2501      	movs	r5, #1
    602a:	46bc      	mov	ip, r7
    602c:	f04f 0e00 	mov.w	lr, #0
    6030:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6034:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    6038:	2000      	movs	r0, #0
    603a:	f10c 0301 	add.w	r3, ip, #1
    603e:	9311      	str	r3, [sp, #68]	; 0x44
    6040:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6044:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    6048:	2909      	cmp	r1, #9
    604a:	f200 82bb 	bhi.w	65c4 <_strtod_l+0x71c>
    604e:	3001      	adds	r0, #1
    6050:	468b      	mov	fp, r1
    6052:	2900      	cmp	r1, #0
    6054:	f040 844f 	bne.w	68f6 <_strtod_l+0xa4e>
    6058:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    605c:	e7ed      	b.n	603a <_strtod_l+0x192>
    605e:	2000      	movs	r0, #0
    6060:	2c65      	cmp	r4, #101	; 0x65
    6062:	46ae      	mov	lr, r5
    6064:	900b      	str	r0, [sp, #44]	; 0x2c
    6066:	4684      	mov	ip, r0
    6068:	d001      	beq.n	606e <_strtod_l+0x1c6>
    606a:	2c45      	cmp	r4, #69	; 0x45
    606c:	d130      	bne.n	60d0 <_strtod_l+0x228>
    606e:	2d00      	cmp	r5, #0
    6070:	d16b      	bne.n	614a <_strtod_l+0x2a2>
    6072:	9b08      	ldr	r3, [sp, #32]
    6074:	4303      	orrs	r3, r0
    6076:	d167      	bne.n	6148 <_strtod_l+0x2a0>
    6078:	9b07      	ldr	r3, [sp, #28]
    607a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 6258 <_strtod_l+0x3b0>
    607e:	b113      	cbz	r3, 6086 <_strtod_l+0x1de>
    6080:	9b07      	ldr	r3, [sp, #28]
    6082:	f8c3 a000 	str.w	sl, [r3]
    6086:	eeb0 0b48 	vmov.f64	d0, d8
    608a:	b017      	add	sp, #92	; 0x5c
    608c:	ecbd 8b10 	vpop	{d8-d15}
    6090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6094:	787a      	ldrb	r2, [r7, #1]
    6096:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    609a:	2a58      	cmp	r2, #88	; 0x58
    609c:	f000 840c 	beq.w	68b8 <_strtod_l+0xa10>
    60a0:	3701      	adds	r7, #1
    60a2:	9711      	str	r7, [sp, #68]	; 0x44
    60a4:	783a      	ldrb	r2, [r7, #0]
    60a6:	2a30      	cmp	r2, #48	; 0x30
    60a8:	d0fa      	beq.n	60a0 <_strtod_l+0x1f8>
    60aa:	2a00      	cmp	r2, #0
    60ac:	f000 80b7 	beq.w	621e <_strtod_l+0x376>
    60b0:	2301      	movs	r3, #1
    60b2:	9308      	str	r3, [sp, #32]
    60b4:	e772      	b.n	5f9c <_strtod_l+0xf4>
    60b6:	496a      	ldr	r1, [pc, #424]	; (6260 <_strtod_l+0x3b8>)
    60b8:	2201      	movs	r2, #1
    60ba:	f001 f9f9 	bl	74b0 <strncmp>
    60be:	2800      	cmp	r0, #0
    60c0:	f000 80c0 	beq.w	6244 <_strtod_l+0x39c>
    60c4:	46ae      	mov	lr, r5
    60c6:	f04f 0c00 	mov.w	ip, #0
    60ca:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    60ce:	4660      	mov	r0, ip
    60d0:	f04f 0b00 	mov.w	fp, #0
    60d4:	2d00      	cmp	r5, #0
    60d6:	d07e      	beq.n	61d6 <_strtod_l+0x32e>
    60d8:	ee07 6a90 	vmov	s15, r6
    60dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    60de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    60e2:	ebab 0303 	sub.w	r3, fp, r3
    60e6:	f1be 0f00 	cmp.w	lr, #0
    60ea:	bf08      	it	eq
    60ec:	46ae      	moveq	lr, r5
    60ee:	2d10      	cmp	r5, #16
    60f0:	930a      	str	r3, [sp, #40]	; 0x28
    60f2:	462b      	mov	r3, r5
    60f4:	bfa8      	it	ge
    60f6:	2310      	movge	r3, #16
    60f8:	2d09      	cmp	r5, #9
    60fa:	ed8d 7b04 	vstr	d7, [sp, #16]
    60fe:	dd0c      	ble.n	611a <_strtod_l+0x272>
    6100:	4a58      	ldr	r2, [pc, #352]	; (6264 <_strtod_l+0x3bc>)
    6102:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6106:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    610a:	ee06 9a90 	vmov	s13, r9
    610e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    6112:	eea7 6b05 	vfma.f64	d6, d7, d5
    6116:	ed8d 6b04 	vstr	d6, [sp, #16]
    611a:	2d0f      	cmp	r5, #15
    611c:	f300 80a8 	bgt.w	6270 <_strtod_l+0x3c8>
    6120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6122:	2a00      	cmp	r2, #0
    6124:	f000 83e4 	beq.w	68f0 <_strtod_l+0xa48>
    6128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    612a:	f340 833c 	ble.w	67a6 <_strtod_l+0x8fe>
    612e:	2a16      	cmp	r2, #22
    6130:	f340 8498 	ble.w	6a64 <_strtod_l+0xbbc>
    6134:	990a      	ldr	r1, [sp, #40]	; 0x28
    6136:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    613a:	428a      	cmp	r2, r1
    613c:	f280 84a6 	bge.w	6a8c <_strtod_l+0xbe4>
    6140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6142:	1aeb      	subs	r3, r5, r3
    6144:	4413      	add	r3, r2
    6146:	e099      	b.n	627c <_strtod_l+0x3d4>
    6148:	2500      	movs	r5, #0
    614a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    614e:	f10a 0301 	add.w	r3, sl, #1
    6152:	9311      	str	r3, [sp, #68]	; 0x44
    6154:	f89a 4001 	ldrb.w	r4, [sl, #1]
    6158:	2c2b      	cmp	r4, #43	; 0x2b
    615a:	f000 825e 	beq.w	661a <_strtod_l+0x772>
    615e:	2c2d      	cmp	r4, #45	; 0x2d
    6160:	f000 81f7 	beq.w	6552 <_strtod_l+0x6aa>
    6164:	2300      	movs	r3, #0
    6166:	930a      	str	r3, [sp, #40]	; 0x28
    6168:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    616c:	2b09      	cmp	r3, #9
    616e:	f200 81eb 	bhi.w	6548 <_strtod_l+0x6a0>
    6172:	2c30      	cmp	r4, #48	; 0x30
    6174:	d105      	bne.n	6182 <_strtod_l+0x2da>
    6176:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6178:	3301      	adds	r3, #1
    617a:	9311      	str	r3, [sp, #68]	; 0x44
    617c:	781c      	ldrb	r4, [r3, #0]
    617e:	2c30      	cmp	r4, #48	; 0x30
    6180:	d0fa      	beq.n	6178 <_strtod_l+0x2d0>
    6182:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    6186:	2b08      	cmp	r3, #8
    6188:	d8a2      	bhi.n	60d0 <_strtod_l+0x228>
    618a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    618c:	920c      	str	r2, [sp, #48]	; 0x30
    618e:	1c53      	adds	r3, r2, #1
    6190:	9311      	str	r3, [sp, #68]	; 0x44
    6192:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    6196:	7854      	ldrb	r4, [r2, #1]
    6198:	2c2f      	cmp	r4, #47	; 0x2f
    619a:	dc07      	bgt.n	61ac <_strtod_l+0x304>
    619c:	e3de      	b.n	695c <_strtod_l+0xab4>
    619e:	3301      	adds	r3, #1
    61a0:	9311      	str	r3, [sp, #68]	; 0x44
    61a2:	784c      	ldrb	r4, [r1, #1]
    61a4:	2c2f      	cmp	r4, #47	; 0x2f
    61a6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    61aa:	dd06      	ble.n	61ba <_strtod_l+0x312>
    61ac:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    61b0:	2c39      	cmp	r4, #57	; 0x39
    61b2:	4619      	mov	r1, r3
    61b4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    61b8:	ddf1      	ble.n	619e <_strtod_l+0x2f6>
    61ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    61bc:	1a9b      	subs	r3, r3, r2
    61be:	2b08      	cmp	r3, #8
    61c0:	f340 83cc 	ble.w	695c <_strtod_l+0xab4>
    61c4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    61c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    61ca:	2b00      	cmp	r3, #0
    61cc:	d082      	beq.n	60d4 <_strtod_l+0x22c>
    61ce:	f1cb 0b00 	rsb	fp, fp, #0
    61d2:	2d00      	cmp	r5, #0
    61d4:	d180      	bne.n	60d8 <_strtod_l+0x230>
    61d6:	9b08      	ldr	r3, [sp, #32]
    61d8:	4303      	orrs	r3, r0
    61da:	d120      	bne.n	621e <_strtod_l+0x376>
    61dc:	f1bc 0f00 	cmp.w	ip, #0
    61e0:	f47f af4a 	bne.w	6078 <_strtod_l+0x1d0>
    61e4:	2c69      	cmp	r4, #105	; 0x69
    61e6:	f000 83cf 	beq.w	6988 <_strtod_l+0xae0>
    61ea:	f300 82f3 	bgt.w	67d4 <_strtod_l+0x92c>
    61ee:	2c49      	cmp	r4, #73	; 0x49
    61f0:	f000 83ca 	beq.w	6988 <_strtod_l+0xae0>
    61f4:	2c4e      	cmp	r4, #78	; 0x4e
    61f6:	f47f af3f 	bne.w	6078 <_strtod_l+0x1d0>
    61fa:	491b      	ldr	r1, [pc, #108]	; (6268 <_strtod_l+0x3c0>)
    61fc:	a811      	add	r0, sp, #68	; 0x44
    61fe:	f002 fb93 	bl	8928 <__match>
    6202:	2800      	cmp	r0, #0
    6204:	f43f af38 	beq.w	6078 <_strtod_l+0x1d0>
    6208:	9b11      	ldr	r3, [sp, #68]	; 0x44
    620a:	781b      	ldrb	r3, [r3, #0]
    620c:	2b28      	cmp	r3, #40	; 0x28
    620e:	f000 84f2 	beq.w	6bf6 <_strtod_l+0xd4e>
    6212:	4816      	ldr	r0, [pc, #88]	; (626c <_strtod_l+0x3c4>)
    6214:	f001 fec4 	bl	7fa0 <nan>
    6218:	eeb0 8b40 	vmov.f64	d8, d0
    621c:	e001      	b.n	6222 <_strtod_l+0x37a>
    621e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 6258 <_strtod_l+0x3b0>
    6222:	9a07      	ldr	r2, [sp, #28]
    6224:	b10a      	cbz	r2, 622a <_strtod_l+0x382>
    6226:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6228:	6013      	str	r3, [r2, #0]
    622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    622c:	2b00      	cmp	r3, #0
    622e:	f43f af2a 	beq.w	6086 <_strtod_l+0x1de>
    6232:	eeb1 8b48 	vneg.f64	d8, d8
    6236:	eeb0 0b48 	vmov.f64	d0, d8
    623a:	b017      	add	sp, #92	; 0x5c
    623c:	ecbd 8b10 	vpop	{d8-d15}
    6240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6244:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6246:	900b      	str	r0, [sp, #44]	; 0x2c
    6248:	1c5a      	adds	r2, r3, #1
    624a:	9211      	str	r2, [sp, #68]	; 0x44
    624c:	785c      	ldrb	r4, [r3, #1]
    624e:	46ae      	mov	lr, r5
    6250:	e6f8      	b.n	6044 <_strtod_l+0x19c>
    6252:	bf00      	nop
    6254:	f3af 8000 	nop.w
	...
    6260:	20000aa0 	.word	0x20000aa0
    6264:	200002a8 	.word	0x200002a8
    6268:	20000ab0 	.word	0x20000ab0
    626c:	200003cc 	.word	0x200003cc
    6270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6272:	1aeb      	subs	r3, r5, r3
    6274:	4413      	add	r3, r2
    6276:	2b00      	cmp	r3, #0
    6278:	f340 82b0 	ble.w	67dc <_strtod_l+0x934>
    627c:	f013 010f 	ands.w	r1, r3, #15
    6280:	d00a      	beq.n	6298 <_strtod_l+0x3f0>
    6282:	4ac3      	ldr	r2, [pc, #780]	; (6590 <_strtod_l+0x6e8>)
    6284:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6288:	ed9d 6b04 	vldr	d6, [sp, #16]
    628c:	ed92 7b00 	vldr	d7, [r2]
    6290:	ee27 7b06 	vmul.f64	d7, d7, d6
    6294:	ed8d 7b04 	vstr	d7, [sp, #16]
    6298:	f033 020f 	bics.w	r2, r3, #15
    629c:	f040 8238 	bne.w	6710 <_strtod_l+0x868>
    62a0:	2300      	movs	r3, #0
    62a2:	9308      	str	r3, [sp, #32]
    62a4:	9600      	str	r6, [sp, #0]
    62a6:	462b      	mov	r3, r5
    62a8:	4672      	mov	r2, lr
    62aa:	4639      	mov	r1, r7
    62ac:	4640      	mov	r0, r8
    62ae:	f002 fcc7 	bl	8c40 <__s2b>
    62b2:	4681      	mov	r9, r0
    62b4:	2800      	cmp	r0, #0
    62b6:	f000 82e1 	beq.w	687c <_strtod_l+0x9d4>
    62ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    62bc:	eba3 0b0b 	sub.w	fp, r3, fp
    62c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    62c2:	ed9f eba9 	vldr	d14, [pc, #676]	; 6568 <_strtod_l+0x6c0>
    62c6:	2b00      	cmp	r3, #0
    62c8:	ed9f cba9 	vldr	d12, [pc, #676]	; 6570 <_strtod_l+0x6c8>
    62cc:	ed9f dbaa 	vldr	d13, [pc, #680]	; 6578 <_strtod_l+0x6d0>
    62d0:	ed9f bbab 	vldr	d11, [pc, #684]	; 6580 <_strtod_l+0x6d8>
    62d4:	bfb4      	ite	lt
    62d6:	465a      	movlt	r2, fp
    62d8:	2200      	movge	r2, #0
    62da:	f04f 0a00 	mov.w	sl, #0
    62de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    62e2:	920b      	str	r2, [sp, #44]	; 0x2c
    62e4:	930c      	str	r3, [sp, #48]	; 0x30
    62e6:	4654      	mov	r4, sl
    62e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    62ec:	4640      	mov	r0, r8
    62ee:	f002 fc25 	bl	8b3c <_Balloc>
    62f2:	4606      	mov	r6, r0
    62f4:	2800      	cmp	r0, #0
    62f6:	f000 810e 	beq.w	6516 <_strtod_l+0x66e>
    62fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
    62fe:	ed9d 8b04 	vldr	d8, [sp, #16]
    6302:	3202      	adds	r2, #2
    6304:	0092      	lsls	r2, r2, #2
    6306:	f109 010c 	add.w	r1, r9, #12
    630a:	300c      	adds	r0, #12
    630c:	f7fc ffe0 	bl	32d0 <memcpy>
    6310:	eeb0 0b48 	vmov.f64	d0, d8
    6314:	aa14      	add	r2, sp, #80	; 0x50
    6316:	a913      	add	r1, sp, #76	; 0x4c
    6318:	4640      	mov	r0, r8
    631a:	f003 f84d 	bl	93b8 <__d2b>
    631e:	9012      	str	r0, [sp, #72]	; 0x48
    6320:	2800      	cmp	r0, #0
    6322:	f000 80e4 	beq.w	64ee <_strtod_l+0x646>
    6326:	2101      	movs	r1, #1
    6328:	4640      	mov	r0, r8
    632a:	f002 fd31 	bl	8d90 <__i2b>
    632e:	4604      	mov	r4, r0
    6330:	2800      	cmp	r0, #0
    6332:	f000 80f0 	beq.w	6516 <_strtod_l+0x66e>
    6336:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6338:	2a00      	cmp	r2, #0
    633a:	f2c0 80de 	blt.w	64fa <_strtod_l+0x652>
    633e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6340:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6342:	eb02 0b03 	add.w	fp, r2, r3
    6346:	9b08      	ldr	r3, [sp, #32]
    6348:	9d14      	ldr	r5, [sp, #80]	; 0x50
    634a:	1ad2      	subs	r2, r2, r3
    634c:	442a      	add	r2, r5
    634e:	4b91      	ldr	r3, [pc, #580]	; (6594 <_strtod_l+0x6ec>)
    6350:	3a01      	subs	r2, #1
    6352:	429a      	cmp	r2, r3
    6354:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    6358:	f280 8098 	bge.w	648c <_strtod_l+0x5e4>
    635c:	1a99      	subs	r1, r3, r2
    635e:	291f      	cmp	r1, #31
    6360:	eba5 0501 	sub.w	r5, r5, r1
    6364:	f300 80e3 	bgt.w	652e <_strtod_l+0x686>
    6368:	2201      	movs	r2, #1
    636a:	fa02 f301 	lsl.w	r3, r2, r1
    636e:	930d      	str	r3, [sp, #52]	; 0x34
    6370:	2300      	movs	r3, #0
    6372:	930e      	str	r3, [sp, #56]	; 0x38
    6374:	442f      	add	r7, r5
    6376:	9b08      	ldr	r3, [sp, #32]
    6378:	445d      	add	r5, fp
    637a:	45ab      	cmp	fp, r5
    637c:	465a      	mov	r2, fp
    637e:	441f      	add	r7, r3
    6380:	bfa8      	it	ge
    6382:	462a      	movge	r2, r5
    6384:	42ba      	cmp	r2, r7
    6386:	bfa8      	it	ge
    6388:	463a      	movge	r2, r7
    638a:	2a00      	cmp	r2, #0
    638c:	dd03      	ble.n	6396 <_strtod_l+0x4ee>
    638e:	1aad      	subs	r5, r5, r2
    6390:	1abf      	subs	r7, r7, r2
    6392:	ebab 0b02 	sub.w	fp, fp, r2
    6396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6398:	2b00      	cmp	r3, #0
    639a:	f300 8088 	bgt.w	64ae <_strtod_l+0x606>
    639e:	2d00      	cmp	r5, #0
    63a0:	f300 809c 	bgt.w	64dc <_strtod_l+0x634>
    63a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    63a6:	2b00      	cmp	r3, #0
    63a8:	f300 80b7 	bgt.w	651a <_strtod_l+0x672>
    63ac:	2f00      	cmp	r7, #0
    63ae:	f300 80a9 	bgt.w	6504 <_strtod_l+0x65c>
    63b2:	f1bb 0f00 	cmp.w	fp, #0
    63b6:	dd08      	ble.n	63ca <_strtod_l+0x522>
    63b8:	4621      	mov	r1, r4
    63ba:	465a      	mov	r2, fp
    63bc:	4640      	mov	r0, r8
    63be:	f002 fe23 	bl	9008 <__lshift>
    63c2:	4604      	mov	r4, r0
    63c4:	2800      	cmp	r0, #0
    63c6:	f000 80a6 	beq.w	6516 <_strtod_l+0x66e>
    63ca:	9912      	ldr	r1, [sp, #72]	; 0x48
    63cc:	4632      	mov	r2, r6
    63ce:	4640      	mov	r0, r8
    63d0:	f002 feb4 	bl	913c <__mdiff>
    63d4:	4682      	mov	sl, r0
    63d6:	2800      	cmp	r0, #0
    63d8:	f000 809d 	beq.w	6516 <_strtod_l+0x66e>
    63dc:	2300      	movs	r3, #0
    63de:	68c5      	ldr	r5, [r0, #12]
    63e0:	60c3      	str	r3, [r0, #12]
    63e2:	4621      	mov	r1, r4
    63e4:	f002 fe88 	bl	90f8 <__mcmp>
    63e8:	2800      	cmp	r0, #0
    63ea:	f2c0 83c7 	blt.w	6b7c <_strtod_l+0xcd4>
    63ee:	f000 8361 	beq.w	6ab4 <_strtod_l+0xc0c>
    63f2:	4621      	mov	r1, r4
    63f4:	4650      	mov	r0, sl
    63f6:	f003 f849 	bl	948c <__ratio>
    63fa:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    63fe:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6406:	d846      	bhi.n	6496 <_strtod_l+0x5ee>
    6408:	2d00      	cmp	r5, #0
    640a:	f000 80cb 	beq.w	65a4 <_strtod_l+0x6fc>
    640e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6412:	9805      	ldr	r0, [sp, #20]
    6414:	4b60      	ldr	r3, [pc, #384]	; (6598 <_strtod_l+0x6f0>)
    6416:	2200      	movs	r2, #0
    6418:	4960      	ldr	r1, [pc, #384]	; (659c <_strtod_l+0x6f4>)
    641a:	f8df c184 	ldr.w	ip, [pc, #388]	; 65a0 <_strtod_l+0x6f8>
    641e:	ea00 0701 	and.w	r7, r0, r1
    6422:	4567      	cmp	r7, ip
    6424:	f000 80d4 	beq.w	65d0 <_strtod_l+0x728>
    6428:	9908      	ldr	r1, [sp, #32]
    642a:	b159      	cbz	r1, 6444 <_strtod_l+0x59c>
    642c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    6430:	d808      	bhi.n	6444 <_strtod_l+0x59c>
    6432:	eeb4 9bcb 	vcmpe.f64	d9, d11
    6436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    643a:	f240 8156 	bls.w	66ea <_strtod_l+0x842>
    643e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    6442:	1bcb      	subs	r3, r1, r7
    6444:	eeb0 0b48 	vmov.f64	d0, d8
    6448:	ec43 2b1a 	vmov	d10, r2, r3
    644c:	f002 ff20 	bl	9290 <__ulp>
    6450:	eeaa 8b00 	vfma.f64	d8, d10, d0
    6454:	ed8d 8b04 	vstr	d8, [sp, #16]
    6458:	ee18 3a90 	vmov	r3, s17
    645c:	9a08      	ldr	r2, [sp, #32]
    645e:	b922      	cbnz	r2, 646a <_strtod_l+0x5c2>
    6460:	4a4e      	ldr	r2, [pc, #312]	; (659c <_strtod_l+0x6f4>)
    6462:	401a      	ands	r2, r3
    6464:	4297      	cmp	r7, r2
    6466:	f000 80e4 	beq.w	6632 <_strtod_l+0x78a>
    646a:	9912      	ldr	r1, [sp, #72]	; 0x48
    646c:	4640      	mov	r0, r8
    646e:	f002 fb8b 	bl	8b88 <_Bfree>
    6472:	4631      	mov	r1, r6
    6474:	4640      	mov	r0, r8
    6476:	f002 fb87 	bl	8b88 <_Bfree>
    647a:	4621      	mov	r1, r4
    647c:	4640      	mov	r0, r8
    647e:	f002 fb83 	bl	8b88 <_Bfree>
    6482:	4651      	mov	r1, sl
    6484:	4640      	mov	r0, r8
    6486:	f002 fb7f 	bl	8b88 <_Bfree>
    648a:	e72d      	b.n	62e8 <_strtod_l+0x440>
    648c:	2301      	movs	r3, #1
    648e:	2100      	movs	r1, #0
    6490:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    6494:	e76e      	b.n	6374 <_strtod_l+0x4cc>
    6496:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    649a:	ee20 9b09 	vmul.f64	d9, d0, d9
    649e:	2d00      	cmp	r5, #0
    64a0:	d15f      	bne.n	6562 <_strtod_l+0x6ba>
    64a2:	eeb1 7b49 	vneg.f64	d7, d9
    64a6:	9805      	ldr	r0, [sp, #20]
    64a8:	ec53 2b17 	vmov	r2, r3, d7
    64ac:	e7b4      	b.n	6418 <_strtod_l+0x570>
    64ae:	4621      	mov	r1, r4
    64b0:	461a      	mov	r2, r3
    64b2:	4640      	mov	r0, r8
    64b4:	f002 fd48 	bl	8f48 <__pow5mult>
    64b8:	4604      	mov	r4, r0
    64ba:	b360      	cbz	r0, 6516 <_strtod_l+0x66e>
    64bc:	4601      	mov	r1, r0
    64be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    64c0:	4640      	mov	r0, r8
    64c2:	f002 fc93 	bl	8dec <__multiply>
    64c6:	b330      	cbz	r0, 6516 <_strtod_l+0x66e>
    64c8:	900f      	str	r0, [sp, #60]	; 0x3c
    64ca:	9912      	ldr	r1, [sp, #72]	; 0x48
    64cc:	4640      	mov	r0, r8
    64ce:	f002 fb5b 	bl	8b88 <_Bfree>
    64d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    64d4:	9212      	str	r2, [sp, #72]	; 0x48
    64d6:	2d00      	cmp	r5, #0
    64d8:	f77f af64 	ble.w	63a4 <_strtod_l+0x4fc>
    64dc:	9912      	ldr	r1, [sp, #72]	; 0x48
    64de:	462a      	mov	r2, r5
    64e0:	4640      	mov	r0, r8
    64e2:	f002 fd91 	bl	9008 <__lshift>
    64e6:	9012      	str	r0, [sp, #72]	; 0x48
    64e8:	2800      	cmp	r0, #0
    64ea:	f47f af5b 	bne.w	63a4 <_strtod_l+0x4fc>
    64ee:	2322      	movs	r3, #34	; 0x22
    64f0:	ed9f 8b25 	vldr	d8, [pc, #148]	; 6588 <_strtod_l+0x6e0>
    64f4:	f8c8 3000 	str.w	r3, [r8]
    64f8:	e0bc      	b.n	6674 <_strtod_l+0x7cc>
    64fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    64fc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    6500:	1a9f      	subs	r7, r3, r2
    6502:	e720      	b.n	6346 <_strtod_l+0x49e>
    6504:	4631      	mov	r1, r6
    6506:	463a      	mov	r2, r7
    6508:	4640      	mov	r0, r8
    650a:	f002 fd7d 	bl	9008 <__lshift>
    650e:	4606      	mov	r6, r0
    6510:	2800      	cmp	r0, #0
    6512:	f47f af4e 	bne.w	63b2 <_strtod_l+0x50a>
    6516:	9812      	ldr	r0, [sp, #72]	; 0x48
    6518:	e7e9      	b.n	64ee <_strtod_l+0x646>
    651a:	4631      	mov	r1, r6
    651c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    651e:	4640      	mov	r0, r8
    6520:	f002 fd12 	bl	8f48 <__pow5mult>
    6524:	4606      	mov	r6, r0
    6526:	2800      	cmp	r0, #0
    6528:	f47f af40 	bne.w	63ac <_strtod_l+0x504>
    652c:	e7f3      	b.n	6516 <_strtod_l+0x66e>
    652e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    6532:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    6536:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    653a:	2101      	movs	r1, #1
    653c:	32e2      	adds	r2, #226	; 0xe2
    653e:	fa01 f302 	lsl.w	r3, r1, r2
    6542:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    6546:	e715      	b.n	6374 <_strtod_l+0x4cc>
    6548:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    654c:	f04f 0b00 	mov.w	fp, #0
    6550:	e5c0      	b.n	60d4 <_strtod_l+0x22c>
    6552:	2301      	movs	r3, #1
    6554:	930a      	str	r3, [sp, #40]	; 0x28
    6556:	f10a 0302 	add.w	r3, sl, #2
    655a:	9311      	str	r3, [sp, #68]	; 0x44
    655c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    6560:	e602      	b.n	6168 <_strtod_l+0x2c0>
    6562:	eeb0 7b49 	vmov.f64	d7, d9
    6566:	e79e      	b.n	64a6 <_strtod_l+0x5fe>
    6568:	94a03595 	.word	0x94a03595
    656c:	3fcfffff 	.word	0x3fcfffff
    6570:	94a03595 	.word	0x94a03595
    6574:	3fdfffff 	.word	0x3fdfffff
    6578:	35afe535 	.word	0x35afe535
    657c:	3fe00000 	.word	0x3fe00000
    6580:	ffc00000 	.word	0xffc00000
    6584:	41dfffff 	.word	0x41dfffff
    6588:	00000000 	.word	0x00000000
    658c:	7ff00000 	.word	0x7ff00000
    6590:	200002a8 	.word	0x200002a8
    6594:	fffffc02 	.word	0xfffffc02
    6598:	3ff00000 	.word	0x3ff00000
    659c:	7ff00000 	.word	0x7ff00000
    65a0:	7fe00000 	.word	0x7fe00000
    65a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    65a8:	2900      	cmp	r1, #0
    65aa:	f000 8085 	beq.w	66b8 <_strtod_l+0x810>
    65ae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    65b2:	2901      	cmp	r1, #1
    65b4:	f000 81d8 	beq.w	6968 <_strtod_l+0xac0>
    65b8:	4610      	mov	r0, r2
    65ba:	4bb7      	ldr	r3, [pc, #732]	; (6898 <_strtod_l+0x9f0>)
    65bc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    65c0:	2200      	movs	r2, #0
    65c2:	e729      	b.n	6418 <_strtod_l+0x570>
    65c4:	2c65      	cmp	r4, #101	; 0x65
    65c6:	f04f 0c01 	mov.w	ip, #1
    65ca:	f43f adbe 	beq.w	614a <_strtod_l+0x2a2>
    65ce:	e54c      	b.n	606a <_strtod_l+0x1c2>
    65d0:	ec43 2b1a 	vmov	d10, r2, r3
    65d4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    65d8:	9305      	str	r3, [sp, #20]
    65da:	ed9d fb04 	vldr	d15, [sp, #16]
    65de:	eeb0 0b4f 	vmov.f64	d0, d15
    65e2:	f002 fe55 	bl	9290 <__ulp>
    65e6:	49ad      	ldr	r1, [pc, #692]	; (689c <_strtod_l+0x9f4>)
    65e8:	eeaa fb00 	vfma.f64	d15, d10, d0
    65ec:	ee1f 3a90 	vmov	r3, s31
    65f0:	4aab      	ldr	r2, [pc, #684]	; (68a0 <_strtod_l+0x9f8>)
    65f2:	4019      	ands	r1, r3
    65f4:	4291      	cmp	r1, r2
    65f6:	ed8d fb04 	vstr	d15, [sp, #16]
    65fa:	d972      	bls.n	66e2 <_strtod_l+0x83a>
    65fc:	4ba9      	ldr	r3, [pc, #676]	; (68a4 <_strtod_l+0x9fc>)
    65fe:	ee18 2a90 	vmov	r2, s17
    6602:	429a      	cmp	r2, r3
    6604:	d103      	bne.n	660e <_strtod_l+0x766>
    6606:	ee18 3a10 	vmov	r3, s16
    660a:	3301      	adds	r3, #1
    660c:	d083      	beq.n	6516 <_strtod_l+0x66e>
    660e:	4aa5      	ldr	r2, [pc, #660]	; (68a4 <_strtod_l+0x9fc>)
    6610:	f04f 33ff 	mov.w	r3, #4294967295
    6614:	e9cd 3204 	strd	r3, r2, [sp, #16]
    6618:	e727      	b.n	646a <_strtod_l+0x5c2>
    661a:	2300      	movs	r3, #0
    661c:	930a      	str	r3, [sp, #40]	; 0x28
    661e:	e79a      	b.n	6556 <_strtod_l+0x6ae>
    6620:	2c65      	cmp	r4, #101	; 0x65
    6622:	f000 80d0 	beq.w	67c6 <_strtod_l+0x91e>
    6626:	2c45      	cmp	r4, #69	; 0x45
    6628:	f000 80cd 	beq.w	67c6 <_strtod_l+0x91e>
    662c:	f04f 0c01 	mov.w	ip, #1
    6630:	e5d1      	b.n	61d6 <_strtod_l+0x32e>
    6632:	ec51 0b19 	vmov	r0, r1, d9
    6636:	930d      	str	r3, [sp, #52]	; 0x34
    6638:	f005 ff70 	bl	c51c <__aeabi_d2lz>
    663c:	f005 ff40 	bl	c4c0 <__aeabi_l2d>
    6640:	9b04      	ldr	r3, [sp, #16]
    6642:	431d      	orrs	r5, r3
    6644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6646:	ec41 0b17 	vmov	d7, r0, r1
    664a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    664e:	431d      	orrs	r5, r3
    6650:	ee39 9b47 	vsub.f64	d9, d9, d7
    6654:	f000 80a0 	beq.w	6798 <_strtod_l+0x8f0>
    6658:	eeb4 9bcc 	vcmpe.f64	d9, d12
    665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6660:	d405      	bmi.n	666e <_strtod_l+0x7c6>
    6662:	eeb4 9bcd 	vcmpe.f64	d9, d13
    6666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    666a:	f77f aefe 	ble.w	646a <_strtod_l+0x5c2>
    666e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6672:	9812      	ldr	r0, [sp, #72]	; 0x48
    6674:	4601      	mov	r1, r0
    6676:	4640      	mov	r0, r8
    6678:	f002 fa86 	bl	8b88 <_Bfree>
    667c:	4631      	mov	r1, r6
    667e:	4640      	mov	r0, r8
    6680:	f002 fa82 	bl	8b88 <_Bfree>
    6684:	4621      	mov	r1, r4
    6686:	4640      	mov	r0, r8
    6688:	f002 fa7e 	bl	8b88 <_Bfree>
    668c:	4649      	mov	r1, r9
    668e:	4640      	mov	r0, r8
    6690:	f002 fa7a 	bl	8b88 <_Bfree>
    6694:	4651      	mov	r1, sl
    6696:	4640      	mov	r0, r8
    6698:	f002 fa76 	bl	8b88 <_Bfree>
    669c:	e5c1      	b.n	6222 <_strtod_l+0x37a>
    669e:	2201      	movs	r2, #1
    66a0:	9209      	str	r2, [sp, #36]	; 0x24
    66a2:	1c79      	adds	r1, r7, #1
    66a4:	9111      	str	r1, [sp, #68]	; 0x44
    66a6:	787a      	ldrb	r2, [r7, #1]
    66a8:	2a00      	cmp	r2, #0
    66aa:	f43f ace5 	beq.w	6078 <_strtod_l+0x1d0>
    66ae:	460f      	mov	r7, r1
    66b0:	e470      	b.n	5f94 <_strtod_l+0xec>
    66b2:	2200      	movs	r2, #0
    66b4:	9209      	str	r2, [sp, #36]	; 0x24
    66b6:	e7f4      	b.n	66a2 <_strtod_l+0x7fa>
    66b8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    66bc:	4610      	mov	r0, r2
    66be:	2b00      	cmp	r3, #0
    66c0:	f47f af7b 	bne.w	65ba <_strtod_l+0x712>
    66c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    66c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    66cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66d0:	f100 81d3 	bmi.w	6a7a <_strtod_l+0xbd2>
    66d4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    66d8:	ee20 9b09 	vmul.f64	d9, d0, d9
    66dc:	eeb1 7b49 	vneg.f64	d7, d9
    66e0:	e6e2      	b.n	64a8 <_strtod_l+0x600>
    66e2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    66e6:	9305      	str	r3, [sp, #20]
    66e8:	e6b8      	b.n	645c <_strtod_l+0x5b4>
    66ea:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    66ee:	ee19 3a10 	vmov	r3, s18
    66f2:	2b01      	cmp	r3, #1
    66f4:	bf38      	it	cc
    66f6:	2301      	movcc	r3, #1
    66f8:	ee09 3a10 	vmov	s18, r3
    66fc:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    6700:	2d00      	cmp	r5, #0
    6702:	f040 813e 	bne.w	6982 <_strtod_l+0xada>
    6706:	eeb1 7b49 	vneg.f64	d7, d9
    670a:	ec53 2b17 	vmov	r2, r3, d7
    670e:	e696      	b.n	643e <_strtod_l+0x596>
    6710:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    6714:	f300 80b2 	bgt.w	687c <_strtod_l+0x9d4>
    6718:	2a10      	cmp	r2, #16
    671a:	ea4f 1322 	mov.w	r3, r2, asr #4
    671e:	f340 8286 	ble.w	6c2e <_strtod_l+0xd86>
    6722:	4c61      	ldr	r4, [pc, #388]	; (68a8 <_strtod_l+0xa00>)
    6724:	ed9d 7b04 	vldr	d7, [sp, #16]
    6728:	2000      	movs	r0, #0
    672a:	4622      	mov	r2, r4
    672c:	4601      	mov	r1, r0
    672e:	f013 0f01 	tst.w	r3, #1
    6732:	f101 0101 	add.w	r1, r1, #1
    6736:	ea4f 0363 	mov.w	r3, r3, asr #1
    673a:	d004      	beq.n	6746 <_strtod_l+0x89e>
    673c:	ed92 6b00 	vldr	d6, [r2]
    6740:	2001      	movs	r0, #1
    6742:	ee27 7b06 	vmul.f64	d7, d7, d6
    6746:	2b01      	cmp	r3, #1
    6748:	f102 0208 	add.w	r2, r2, #8
    674c:	d1ef      	bne.n	672e <_strtod_l+0x886>
    674e:	b108      	cbz	r0, 6754 <_strtod_l+0x8ac>
    6750:	ed8d 7b04 	vstr	d7, [sp, #16]
    6754:	9b05      	ldr	r3, [sp, #20]
    6756:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    675a:	9305      	str	r3, [sp, #20]
    675c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    6760:	ed9d 6b04 	vldr	d6, [sp, #16]
    6764:	ed94 7b00 	vldr	d7, [r4]
    6768:	4b4c      	ldr	r3, [pc, #304]	; (689c <_strtod_l+0x9f4>)
    676a:	ee27 7b06 	vmul.f64	d7, d7, d6
    676e:	ee17 2a90 	vmov	r2, s15
    6772:	494e      	ldr	r1, [pc, #312]	; (68ac <_strtod_l+0xa04>)
    6774:	4013      	ands	r3, r2
    6776:	428b      	cmp	r3, r1
    6778:	ed8d 7b04 	vstr	d7, [sp, #16]
    677c:	d87e      	bhi.n	687c <_strtod_l+0x9d4>
    677e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    6782:	428b      	cmp	r3, r1
    6784:	f240 81d6 	bls.w	6b34 <_strtod_l+0xc8c>
    6788:	4c46      	ldr	r4, [pc, #280]	; (68a4 <_strtod_l+0x9fc>)
    678a:	f04f 33ff 	mov.w	r3, #4294967295
    678e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6792:	2300      	movs	r3, #0
    6794:	9308      	str	r3, [sp, #32]
    6796:	e585      	b.n	62a4 <_strtod_l+0x3fc>
    6798:	eeb4 9bce 	vcmpe.f64	d9, d14
    679c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    67a0:	f57f ae63 	bpl.w	646a <_strtod_l+0x5c2>
    67a4:	e763      	b.n	666e <_strtod_l+0x7c6>
    67a6:	3216      	adds	r2, #22
    67a8:	f6ff ad62 	blt.w	6270 <_strtod_l+0x3c8>
    67ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67ae:	eba3 0b0b 	sub.w	fp, r3, fp
    67b2:	4b3f      	ldr	r3, [pc, #252]	; (68b0 <_strtod_l+0xa08>)
    67b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    67b8:	ed93 7b00 	vldr	d7, [r3]
    67bc:	ed9d 6b04 	vldr	d6, [sp, #16]
    67c0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    67c4:	e52d      	b.n	6222 <_strtod_l+0x37a>
    67c6:	f04f 0e00 	mov.w	lr, #0
    67ca:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    67ce:	f04f 0c01 	mov.w	ip, #1
    67d2:	e44e      	b.n	6072 <_strtod_l+0x1ca>
    67d4:	2c6e      	cmp	r4, #110	; 0x6e
    67d6:	f43f ad10 	beq.w	61fa <_strtod_l+0x352>
    67da:	e44d      	b.n	6078 <_strtod_l+0x1d0>
    67dc:	f43f ad60 	beq.w	62a0 <_strtod_l+0x3f8>
    67e0:	425b      	negs	r3, r3
    67e2:	f013 010f 	ands.w	r1, r3, #15
    67e6:	d00a      	beq.n	67fe <_strtod_l+0x956>
    67e8:	4a31      	ldr	r2, [pc, #196]	; (68b0 <_strtod_l+0xa08>)
    67ea:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    67ee:	ed9d 6b04 	vldr	d6, [sp, #16]
    67f2:	ed92 7b00 	vldr	d7, [r2]
    67f6:	ee86 7b07 	vdiv.f64	d7, d6, d7
    67fa:	ed8d 7b04 	vstr	d7, [sp, #16]
    67fe:	111b      	asrs	r3, r3, #4
    6800:	f43f ad4e 	beq.w	62a0 <_strtod_l+0x3f8>
    6804:	2b1f      	cmp	r3, #31
    6806:	dc33      	bgt.n	6870 <_strtod_l+0x9c8>
    6808:	f013 0210 	ands.w	r2, r3, #16
    680c:	bf18      	it	ne
    680e:	226a      	movne	r2, #106	; 0x6a
    6810:	ed9d 7b04 	vldr	d7, [sp, #16]
    6814:	9208      	str	r2, [sp, #32]
    6816:	4a27      	ldr	r2, [pc, #156]	; (68b4 <_strtod_l+0xa0c>)
    6818:	2100      	movs	r1, #0
    681a:	07d8      	lsls	r0, r3, #31
    681c:	d504      	bpl.n	6828 <_strtod_l+0x980>
    681e:	ed92 6b00 	vldr	d6, [r2]
    6822:	2101      	movs	r1, #1
    6824:	ee27 7b06 	vmul.f64	d7, d7, d6
    6828:	105b      	asrs	r3, r3, #1
    682a:	f102 0208 	add.w	r2, r2, #8
    682e:	d1f4      	bne.n	681a <_strtod_l+0x972>
    6830:	b109      	cbz	r1, 6836 <_strtod_l+0x98e>
    6832:	ed8d 7b04 	vstr	d7, [sp, #16]
    6836:	9b08      	ldr	r3, [sp, #32]
    6838:	b193      	cbz	r3, 6860 <_strtod_l+0x9b8>
    683a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    683e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    6842:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    6846:	2b00      	cmp	r3, #0
    6848:	dd0a      	ble.n	6860 <_strtod_l+0x9b8>
    684a:	2b1f      	cmp	r3, #31
    684c:	f340 822f 	ble.w	6cae <_strtod_l+0xe06>
    6850:	2000      	movs	r0, #0
    6852:	2b34      	cmp	r3, #52	; 0x34
    6854:	9004      	str	r0, [sp, #16]
    6856:	f340 8240 	ble.w	6cda <_strtod_l+0xe32>
    685a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    685e:	9305      	str	r3, [sp, #20]
    6860:	ed9d 7b04 	vldr	d7, [sp, #16]
    6864:	eeb5 7b40 	vcmp.f64	d7, #0.0
    6868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    686c:	f47f ad1a 	bne.w	62a4 <_strtod_l+0x3fc>
    6870:	2322      	movs	r3, #34	; 0x22
    6872:	ed9f 8b05 	vldr	d8, [pc, #20]	; 6888 <_strtod_l+0x9e0>
    6876:	f8c8 3000 	str.w	r3, [r8]
    687a:	e4d2      	b.n	6222 <_strtod_l+0x37a>
    687c:	2322      	movs	r3, #34	; 0x22
    687e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 6890 <_strtod_l+0x9e8>
    6882:	f8c8 3000 	str.w	r3, [r8]
    6886:	e4cc      	b.n	6222 <_strtod_l+0x37a>
	...
    6894:	7ff00000 	.word	0x7ff00000
    6898:	bff00000 	.word	0xbff00000
    689c:	7ff00000 	.word	0x7ff00000
    68a0:	7c9fffff 	.word	0x7c9fffff
    68a4:	7fefffff 	.word	0x7fefffff
    68a8:	20000280 	.word	0x20000280
    68ac:	7ca00000 	.word	0x7ca00000
    68b0:	200002a8 	.word	0x200002a8
    68b4:	20000370 	.word	0x20000370
    68b8:	9302      	str	r3, [sp, #8]
    68ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68bc:	9301      	str	r3, [sp, #4]
    68be:	ab12      	add	r3, sp, #72	; 0x48
    68c0:	9300      	str	r3, [sp, #0]
    68c2:	4aa7      	ldr	r2, [pc, #668]	; (6b60 <_strtod_l+0xcb8>)
    68c4:	ab13      	add	r3, sp, #76	; 0x4c
    68c6:	a911      	add	r1, sp, #68	; 0x44
    68c8:	4640      	mov	r0, r8
    68ca:	f001 fd63 	bl	8394 <__gethex>
    68ce:	f010 050f 	ands.w	r5, r0, #15
    68d2:	4604      	mov	r4, r0
    68d4:	f43f aca3 	beq.w	621e <_strtod_l+0x376>
    68d8:	2d06      	cmp	r5, #6
    68da:	d174      	bne.n	69c6 <_strtod_l+0xb1e>
    68dc:	9b07      	ldr	r3, [sp, #28]
    68de:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 6b48 <_strtod_l+0xca0>
    68e2:	3701      	adds	r7, #1
    68e4:	2b00      	cmp	r3, #0
    68e6:	f43f abce 	beq.w	6086 <_strtod_l+0x1de>
    68ea:	601f      	str	r7, [r3, #0]
    68ec:	f7ff bbcb 	b.w	6086 <_strtod_l+0x1de>
    68f0:	ed9d 8b04 	vldr	d8, [sp, #16]
    68f4:	e495      	b.n	6222 <_strtod_l+0x37a>
    68f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    68f8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    68fc:	4403      	add	r3, r0
    68fe:	930b      	str	r3, [sp, #44]	; 0x2c
    6900:	2801      	cmp	r0, #1
    6902:	f105 0301 	add.w	r3, r5, #1
    6906:	461a      	mov	r2, r3
    6908:	d014      	beq.n	6934 <_strtod_l+0xa8c>
    690a:	4428      	add	r0, r5
    690c:	1e44      	subs	r4, r0, #1
    690e:	e003      	b.n	6918 <_strtod_l+0xa70>
    6910:	0046      	lsls	r6, r0, #1
    6912:	429c      	cmp	r4, r3
    6914:	d00d      	beq.n	6932 <_strtod_l+0xa8a>
    6916:	3301      	adds	r3, #1
    6918:	462a      	mov	r2, r5
    691a:	2a08      	cmp	r2, #8
    691c:	461d      	mov	r5, r3
    691e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    6922:	d9f5      	bls.n	6910 <_strtod_l+0xa68>
    6924:	2b10      	cmp	r3, #16
    6926:	bfdc      	itt	le
    6928:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    692c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    6930:	e7ef      	b.n	6912 <_strtod_l+0xa6a>
    6932:	3202      	adds	r2, #2
    6934:	2d08      	cmp	r5, #8
    6936:	dc3c      	bgt.n	69b2 <_strtod_l+0xb0a>
    6938:	4615      	mov	r5, r2
    693a:	f7ff bb79 	b.w	6030 <_strtod_l+0x188>
    693e:	4989      	ldr	r1, [pc, #548]	; (6b64 <_strtod_l+0xcbc>)
    6940:	2201      	movs	r2, #1
    6942:	4638      	mov	r0, r7
    6944:	f000 fdb4 	bl	74b0 <strncmp>
    6948:	2800      	cmp	r0, #0
    694a:	f000 8082 	beq.w	6a52 <_strtod_l+0xbaa>
    694e:	f04f 0e00 	mov.w	lr, #0
    6952:	46f1      	mov	r9, lr
    6954:	4676      	mov	r6, lr
    6956:	4675      	mov	r5, lr
    6958:	f7ff bbb5 	b.w	60c6 <_strtod_l+0x21e>
    695c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    6960:	459b      	cmp	fp, r3
    6962:	bfa8      	it	ge
    6964:	469b      	movge	fp, r3
    6966:	e42f      	b.n	61c8 <_strtod_l+0x320>
    6968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    696c:	4618      	mov	r0, r3
    696e:	2b00      	cmp	r3, #0
    6970:	f47f ae23 	bne.w	65ba <_strtod_l+0x712>
    6974:	2322      	movs	r3, #34	; 0x22
    6976:	ed9f 8b74 	vldr	d8, [pc, #464]	; 6b48 <_strtod_l+0xca0>
    697a:	9812      	ldr	r0, [sp, #72]	; 0x48
    697c:	f8c8 3000 	str.w	r3, [r8]
    6980:	e678      	b.n	6674 <_strtod_l+0x7cc>
    6982:	eeb0 7b49 	vmov.f64	d7, d9
    6986:	e6c0      	b.n	670a <_strtod_l+0x862>
    6988:	4977      	ldr	r1, [pc, #476]	; (6b68 <_strtod_l+0xcc0>)
    698a:	a811      	add	r0, sp, #68	; 0x44
    698c:	f001 ffcc 	bl	8928 <__match>
    6990:	2800      	cmp	r0, #0
    6992:	f43f ab71 	beq.w	6078 <_strtod_l+0x1d0>
    6996:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6998:	4974      	ldr	r1, [pc, #464]	; (6b6c <_strtod_l+0xcc4>)
    699a:	3b01      	subs	r3, #1
    699c:	a811      	add	r0, sp, #68	; 0x44
    699e:	9311      	str	r3, [sp, #68]	; 0x44
    69a0:	f001 ffc2 	bl	8928 <__match>
    69a4:	b910      	cbnz	r0, 69ac <_strtod_l+0xb04>
    69a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    69a8:	3301      	adds	r3, #1
    69aa:	9311      	str	r3, [sp, #68]	; 0x44
    69ac:	ed9f 8b68 	vldr	d8, [pc, #416]	; 6b50 <_strtod_l+0xca8>
    69b0:	e437      	b.n	6222 <_strtod_l+0x37a>
    69b2:	2a10      	cmp	r2, #16
    69b4:	bfdc      	itt	le
    69b6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    69ba:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    69be:	4615      	mov	r5, r2
    69c0:	2000      	movs	r0, #0
    69c2:	f7ff bb3a 	b.w	603a <_strtod_l+0x192>
    69c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    69c8:	b13a      	cbz	r2, 69da <_strtod_l+0xb32>
    69ca:	2135      	movs	r1, #53	; 0x35
    69cc:	a814      	add	r0, sp, #80	; 0x50
    69ce:	f002 fd8f 	bl	94f0 <__copybits>
    69d2:	9912      	ldr	r1, [sp, #72]	; 0x48
    69d4:	4640      	mov	r0, r8
    69d6:	f002 f8d7 	bl	8b88 <_Bfree>
    69da:	3d01      	subs	r5, #1
    69dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    69de:	2d04      	cmp	r5, #4
    69e0:	f200 818f 	bhi.w	6d02 <_strtod_l+0xe5a>
    69e4:	e8df f005 	tbb	[pc, r5]
    69e8:	1f2a2d03 	.word	0x1f2a2d03
    69ec:	03          	.byte	0x03
    69ed:	00          	.byte	0x00
    69ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    69f0:	9204      	str	r2, [sp, #16]
    69f2:	f203 4233 	addw	r2, r3, #1075	; 0x433
    69f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    69f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    69fc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    6a00:	9305      	str	r3, [sp, #20]
    6a02:	05e5      	lsls	r5, r4, #23
    6a04:	d502      	bpl.n	6a0c <_strtod_l+0xb64>
    6a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6a0a:	9305      	str	r3, [sp, #20]
    6a0c:	4a58      	ldr	r2, [pc, #352]	; (6b70 <_strtod_l+0xcc8>)
    6a0e:	401a      	ands	r2, r3
    6a10:	ed9d 8b04 	vldr	d8, [sp, #16]
    6a14:	2a00      	cmp	r2, #0
    6a16:	f47f ac04 	bne.w	6222 <_strtod_l+0x37a>
    6a1a:	f001 f841 	bl	7aa0 <__errno>
    6a1e:	2322      	movs	r3, #34	; 0x22
    6a20:	6003      	str	r3, [r0, #0]
    6a22:	f7ff bbfe 	b.w	6222 <_strtod_l+0x37a>
    6a26:	f04f 33ff 	mov.w	r3, #4294967295
    6a2a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    6a2e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    6a32:	05e3      	lsls	r3, r4, #23
    6a34:	f57f af5c 	bpl.w	68f0 <_strtod_l+0xa48>
    6a38:	9b05      	ldr	r3, [sp, #20]
    6a3a:	e7e4      	b.n	6a06 <_strtod_l+0xb5e>
    6a3c:	4b4c      	ldr	r3, [pc, #304]	; (6b70 <_strtod_l+0xcc8>)
    6a3e:	9305      	str	r3, [sp, #20]
    6a40:	e7f7      	b.n	6a32 <_strtod_l+0xb8a>
    6a42:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6a44:	9304      	str	r3, [sp, #16]
    6a46:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6a48:	9305      	str	r3, [sp, #20]
    6a4a:	e7da      	b.n	6a02 <_strtod_l+0xb5a>
    6a4c:	2000      	movs	r0, #0
    6a4e:	f7ff bae1 	b.w	6014 <_strtod_l+0x16c>
    6a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6a54:	461a      	mov	r2, r3
    6a56:	3301      	adds	r3, #1
    6a58:	9311      	str	r3, [sp, #68]	; 0x44
    6a5a:	7854      	ldrb	r4, [r2, #1]
    6a5c:	4606      	mov	r6, r0
    6a5e:	4681      	mov	r9, r0
    6a60:	f7ff bacd 	b.w	5ffe <_strtod_l+0x156>
    6a64:	4b43      	ldr	r3, [pc, #268]	; (6b74 <_strtod_l+0xccc>)
    6a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6a6a:	ed93 8b00 	vldr	d8, [r3]
    6a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
    6a72:	ee28 8b07 	vmul.f64	d8, d8, d7
    6a76:	f7ff bbd4 	b.w	6222 <_strtod_l+0x37a>
    6a7a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    6a7e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6a82:	e511      	b.n	64a8 <_strtod_l+0x600>
    6a84:	46ae      	mov	lr, r5
    6a86:	900b      	str	r0, [sp, #44]	; 0x2c
    6a88:	f7ff badc 	b.w	6044 <_strtod_l+0x19c>
    6a8c:	4b39      	ldr	r3, [pc, #228]	; (6b74 <_strtod_l+0xccc>)
    6a8e:	f1c5 050f 	rsb	r5, r5, #15
    6a92:	1b4a      	subs	r2, r1, r5
    6a94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    6a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6a9c:	ed95 8b00 	vldr	d8, [r5]
    6aa0:	ed93 7b00 	vldr	d7, [r3]
    6aa4:	ed9d 6b04 	vldr	d6, [sp, #16]
    6aa8:	ee28 8b06 	vmul.f64	d8, d8, d6
    6aac:	ee28 8b07 	vmul.f64	d8, d8, d7
    6ab0:	f7ff bbb7 	b.w	6222 <_strtod_l+0x37a>
    6ab4:	2d00      	cmp	r5, #0
    6ab6:	f000 8095 	beq.w	6be4 <_strtod_l+0xd3c>
    6aba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    6abe:	4b2e      	ldr	r3, [pc, #184]	; (6b78 <_strtod_l+0xcd0>)
    6ac0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    6ac4:	4299      	cmp	r1, r3
    6ac6:	4662      	mov	r2, ip
    6ac8:	f000 80d2 	beq.w	6c70 <_strtod_l+0xdc8>
    6acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6ace:	2b00      	cmp	r3, #0
    6ad0:	f000 80a5 	beq.w	6c1e <_strtod_l+0xd76>
    6ad4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6ad8:	4213      	tst	r3, r2
    6ada:	4617      	mov	r7, r2
    6adc:	d01a      	beq.n	6b14 <_strtod_l+0xc6c>
    6ade:	eeb0 0b48 	vmov.f64	d0, d8
    6ae2:	2d00      	cmp	r5, #0
    6ae4:	f000 80a6 	beq.w	6c34 <_strtod_l+0xd8c>
    6ae8:	f002 fbd2 	bl	9290 <__ulp>
    6aec:	9b08      	ldr	r3, [sp, #32]
    6aee:	b17b      	cbz	r3, 6b10 <_strtod_l+0xc68>
    6af0:	f3c7 530a 	ubfx	r3, r7, #20, #11
    6af4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6af8:	2b00      	cmp	r3, #0
    6afa:	dd09      	ble.n	6b10 <_strtod_l+0xc68>
    6afc:	051b      	lsls	r3, r3, #20
    6afe:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    6b02:	2000      	movs	r0, #0
    6b04:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    6b08:	ec41 0b17 	vmov	d7, r0, r1
    6b0c:	ee20 0b07 	vmul.f64	d0, d0, d7
    6b10:	ee38 8b00 	vadd.f64	d8, d8, d0
    6b14:	9b08      	ldr	r3, [sp, #32]
    6b16:	b15b      	cbz	r3, 6b30 <_strtod_l+0xc88>
    6b18:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 6b58 <_strtod_l+0xcb0>
    6b1c:	4b14      	ldr	r3, [pc, #80]	; (6b70 <_strtod_l+0xcc8>)
    6b1e:	ee28 8b07 	vmul.f64	d8, d8, d7
    6b22:	ee18 2a90 	vmov	r2, s17
    6b26:	4013      	ands	r3, r2
    6b28:	b913      	cbnz	r3, 6b30 <_strtod_l+0xc88>
    6b2a:	2322      	movs	r3, #34	; 0x22
    6b2c:	f8c8 3000 	str.w	r3, [r8]
    6b30:	9812      	ldr	r0, [sp, #72]	; 0x48
    6b32:	e59f      	b.n	6674 <_strtod_l+0x7cc>
    6b34:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    6b38:	9305      	str	r3, [sp, #20]
    6b3a:	2300      	movs	r3, #0
    6b3c:	9308      	str	r3, [sp, #32]
    6b3e:	f7ff bbb1 	b.w	62a4 <_strtod_l+0x3fc>
    6b42:	bf00      	nop
    6b44:	f3af 8000 	nop.w
	...
    6b54:	7ff00000 	.word	0x7ff00000
    6b58:	00000000 	.word	0x00000000
    6b5c:	39500000 	.word	0x39500000
    6b60:	20000e6c 	.word	0x20000e6c
    6b64:	20000aa0 	.word	0x20000aa0
    6b68:	20000aa4 	.word	0x20000aa4
    6b6c:	20000aa8 	.word	0x20000aa8
    6b70:	7ff00000 	.word	0x7ff00000
    6b74:	200002a8 	.word	0x200002a8
    6b78:	000fffff 	.word	0x000fffff
    6b7c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6b80:	430d      	orrs	r5, r1
    6b82:	d1c7      	bne.n	6b14 <_strtod_l+0xc6c>
    6b84:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6b88:	4617      	mov	r7, r2
    6b8a:	2b00      	cmp	r3, #0
    6b8c:	d1c2      	bne.n	6b14 <_strtod_l+0xc6c>
    6b8e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    6b92:	0d1b      	lsrs	r3, r3, #20
    6b94:	051b      	lsls	r3, r3, #20
    6b96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    6b9a:	d9bb      	bls.n	6b14 <_strtod_l+0xc6c>
    6b9c:	f8da 3014 	ldr.w	r3, [sl, #20]
    6ba0:	b91b      	cbnz	r3, 6baa <_strtod_l+0xd02>
    6ba2:	f8da 3010 	ldr.w	r3, [sl, #16]
    6ba6:	2b01      	cmp	r3, #1
    6ba8:	ddb4      	ble.n	6b14 <_strtod_l+0xc6c>
    6baa:	4651      	mov	r1, sl
    6bac:	2201      	movs	r2, #1
    6bae:	4640      	mov	r0, r8
    6bb0:	f002 fa2a 	bl	9008 <__lshift>
    6bb4:	4621      	mov	r1, r4
    6bb6:	4682      	mov	sl, r0
    6bb8:	f002 fa9e 	bl	90f8 <__mcmp>
    6bbc:	2800      	cmp	r0, #0
    6bbe:	dda9      	ble.n	6b14 <_strtod_l+0xc6c>
    6bc0:	9b08      	ldr	r3, [sp, #32]
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d17e      	bne.n	6cc4 <_strtod_l+0xe1c>
    6bc6:	4b50      	ldr	r3, [pc, #320]	; (6d08 <_strtod_l+0xe60>)
    6bc8:	403b      	ands	r3, r7
    6bca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    6bce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    6bd2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    6bd6:	9305      	str	r3, [sp, #20]
    6bd8:	f04f 33ff 	mov.w	r3, #4294967295
    6bdc:	9304      	str	r3, [sp, #16]
    6bde:	ed9d 8b04 	vldr	d8, [sp, #16]
    6be2:	e797      	b.n	6b14 <_strtod_l+0xc6c>
    6be4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6be8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6bec:	430b      	orrs	r3, r1
    6bee:	4617      	mov	r7, r2
    6bf0:	f47f af6c 	bne.w	6acc <_strtod_l+0xc24>
    6bf4:	e7e4      	b.n	6bc0 <_strtod_l+0xd18>
    6bf6:	4945      	ldr	r1, [pc, #276]	; (6d0c <_strtod_l+0xe64>)
    6bf8:	a811      	add	r0, sp, #68	; 0x44
    6bfa:	aa14      	add	r2, sp, #80	; 0x50
    6bfc:	f001 feb0 	bl	8960 <__hexnan>
    6c00:	2805      	cmp	r0, #5
    6c02:	f47f ab06 	bne.w	6212 <_strtod_l+0x36a>
    6c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6c08:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    6c0c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    6c10:	9305      	str	r3, [sp, #20]
    6c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6c14:	9304      	str	r3, [sp, #16]
    6c16:	ed9d 8b04 	vldr	d8, [sp, #16]
    6c1a:	f7ff bb02 	b.w	6222 <_strtod_l+0x37a>
    6c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c24:	4203      	tst	r3, r0
    6c26:	f43f af75 	beq.w	6b14 <_strtod_l+0xc6c>
    6c2a:	460f      	mov	r7, r1
    6c2c:	e757      	b.n	6ade <_strtod_l+0xc36>
    6c2e:	4c38      	ldr	r4, [pc, #224]	; (6d10 <_strtod_l+0xe68>)
    6c30:	2100      	movs	r1, #0
    6c32:	e58f      	b.n	6754 <_strtod_l+0x8ac>
    6c34:	f002 fb2c 	bl	9290 <__ulp>
    6c38:	9b08      	ldr	r3, [sp, #32]
    6c3a:	2b00      	cmp	r3, #0
    6c3c:	d055      	beq.n	6cea <_strtod_l+0xe42>
    6c3e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    6c42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6c46:	2b00      	cmp	r3, #0
    6c48:	dd09      	ble.n	6c5e <_strtod_l+0xdb6>
    6c4a:	051b      	lsls	r3, r3, #20
    6c4c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    6c50:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    6c54:	4628      	mov	r0, r5
    6c56:	ec41 0b17 	vmov	d7, r0, r1
    6c5a:	ee20 0b07 	vmul.f64	d0, d0, d7
    6c5e:	ee38 8b40 	vsub.f64	d8, d8, d0
    6c62:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6c6a:	f47f af55 	bne.w	6b18 <_strtod_l+0xc70>
    6c6e:	e681      	b.n	6974 <_strtod_l+0xacc>
    6c70:	9b08      	ldr	r3, [sp, #32]
    6c72:	9904      	ldr	r1, [sp, #16]
    6c74:	b31b      	cbz	r3, 6cbe <_strtod_l+0xe16>
    6c76:	4b24      	ldr	r3, [pc, #144]	; (6d08 <_strtod_l+0xe60>)
    6c78:	4013      	ands	r3, r2
    6c7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    6c7e:	d81e      	bhi.n	6cbe <_strtod_l+0xe16>
    6c80:	0d1b      	lsrs	r3, r3, #20
    6c82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6c86:	f04f 30ff 	mov.w	r0, #4294967295
    6c8a:	fa00 f303 	lsl.w	r3, r0, r3
    6c8e:	4299      	cmp	r1, r3
    6c90:	f47f af1c 	bne.w	6acc <_strtod_l+0xc24>
    6c94:	4b1f      	ldr	r3, [pc, #124]	; (6d14 <_strtod_l+0xe6c>)
    6c96:	429a      	cmp	r2, r3
    6c98:	d030      	beq.n	6cfc <_strtod_l+0xe54>
    6c9a:	4b1b      	ldr	r3, [pc, #108]	; (6d08 <_strtod_l+0xe60>)
    6c9c:	4013      	ands	r3, r2
    6c9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    6ca2:	9305      	str	r3, [sp, #20]
    6ca4:	2300      	movs	r3, #0
    6ca6:	9304      	str	r3, [sp, #16]
    6ca8:	ed9d 8b04 	vldr	d8, [sp, #16]
    6cac:	e732      	b.n	6b14 <_strtod_l+0xc6c>
    6cae:	f04f 32ff 	mov.w	r2, #4294967295
    6cb2:	fa02 f303 	lsl.w	r3, r2, r3
    6cb6:	9a04      	ldr	r2, [sp, #16]
    6cb8:	401a      	ands	r2, r3
    6cba:	9204      	str	r2, [sp, #16]
    6cbc:	e5d0      	b.n	6860 <_strtod_l+0x9b8>
    6cbe:	f04f 33ff 	mov.w	r3, #4294967295
    6cc2:	e7e4      	b.n	6c8e <_strtod_l+0xde6>
    6cc4:	4b10      	ldr	r3, [pc, #64]	; (6d08 <_strtod_l+0xe60>)
    6cc6:	403b      	ands	r3, r7
    6cc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    6ccc:	f73f af7d 	bgt.w	6bca <_strtod_l+0xd22>
    6cd0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    6cd4:	f73f af20 	bgt.w	6b18 <_strtod_l+0xc70>
    6cd8:	e64c      	b.n	6974 <_strtod_l+0xacc>
    6cda:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    6cde:	f04f 33ff 	mov.w	r3, #4294967295
    6ce2:	4093      	lsls	r3, r2
    6ce4:	400b      	ands	r3, r1
    6ce6:	9305      	str	r3, [sp, #20]
    6ce8:	e5ba      	b.n	6860 <_strtod_l+0x9b8>
    6cea:	ee38 8b40 	vsub.f64	d8, d8, d0
    6cee:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6cf6:	f47f af1b 	bne.w	6b30 <_strtod_l+0xc88>
    6cfa:	e63b      	b.n	6974 <_strtod_l+0xacc>
    6cfc:	3101      	adds	r1, #1
    6cfe:	d1cc      	bne.n	6c9a <_strtod_l+0xdf2>
    6d00:	e409      	b.n	6516 <_strtod_l+0x66e>
    6d02:	2300      	movs	r3, #0
    6d04:	e67d      	b.n	6a02 <_strtod_l+0xb5a>
    6d06:	bf00      	nop
    6d08:	7ff00000 	.word	0x7ff00000
    6d0c:	20000e80 	.word	0x20000e80
    6d10:	20000280 	.word	0x20000280
    6d14:	7fefffff 	.word	0x7fefffff

00006d18 <strtof>:
    6d18:	b510      	push	{r4, lr}
    6d1a:	4c23      	ldr	r4, [pc, #140]	; (6da8 <strtof+0x90>)
    6d1c:	4b23      	ldr	r3, [pc, #140]	; (6dac <strtof+0x94>)
    6d1e:	4684      	mov	ip, r0
    6d20:	460a      	mov	r2, r1
    6d22:	6820      	ldr	r0, [r4, #0]
    6d24:	4661      	mov	r1, ip
    6d26:	f7ff f8bf 	bl	5ea8 <_strtod_l>
    6d2a:	eeb4 0b40 	vcmp.f64	d0, d0
    6d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d32:	d627      	bvs.n	6d84 <strtof+0x6c>
    6d34:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    6d38:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 6db0 <strtof+0x98>
    6d3c:	eef0 6ae7 	vabs.f32	s13, s15
    6d40:	eef4 6a47 	vcmp.f32	s13, s14
    6d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d48:	dd0e      	ble.n	6d68 <strtof+0x50>
    6d4a:	eeb0 5bc0 	vabs.f64	d5, d0
    6d4e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 6da0 <strtof+0x88>
    6d52:	eeb4 5b46 	vcmp.f64	d5, d6
    6d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d5a:	dc05      	bgt.n	6d68 <strtof+0x50>
    6d5c:	6823      	ldr	r3, [r4, #0]
    6d5e:	2222      	movs	r2, #34	; 0x22
    6d60:	601a      	str	r2, [r3, #0]
    6d62:	eeb0 0a67 	vmov.f32	s0, s15
    6d66:	bd10      	pop	{r4, pc}
    6d68:	ee17 3a90 	vmov	r3, s15
    6d6c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    6d70:	d1f7      	bne.n	6d62 <strtof+0x4a>
    6d72:	4b10      	ldr	r3, [pc, #64]	; (6db4 <strtof+0x9c>)
    6d74:	ee10 2a90 	vmov	r2, s1
    6d78:	4013      	ands	r3, r2
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d1ee      	bne.n	6d5c <strtof+0x44>
    6d7e:	eeb0 0a67 	vmov.f32	s0, s15
    6d82:	bd10      	pop	{r4, pc}
    6d84:	ee10 3a90 	vmov	r3, s1
    6d88:	2b00      	cmp	r3, #0
    6d8a:	480b      	ldr	r0, [pc, #44]	; (6db8 <strtof+0xa0>)
    6d8c:	da04      	bge.n	6d98 <strtof+0x80>
    6d8e:	f001 f90f 	bl	7fb0 <nanf>
    6d92:	eef1 7a40 	vneg.f32	s15, s0
    6d96:	e7e4      	b.n	6d62 <strtof+0x4a>
    6d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d9c:	f001 b908 	b.w	7fb0 <nanf>
    6da0:	ffffffff 	.word	0xffffffff
    6da4:	7fefffff 	.word	0x7fefffff
    6da8:	20001b54 	.word	0x20001b54
    6dac:	200015cc 	.word	0x200015cc
    6db0:	7f7fffff 	.word	0x7f7fffff
    6db4:	7ff00000 	.word	0x7ff00000
    6db8:	200003cc 	.word	0x200003cc

00006dbc <_strtol_l.constprop.0>:
    6dbc:	2b01      	cmp	r3, #1
    6dbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dc2:	d040      	beq.n	6e46 <_strtol_l.constprop.0+0x8a>
    6dc4:	2b24      	cmp	r3, #36	; 0x24
    6dc6:	4698      	mov	r8, r3
    6dc8:	d83d      	bhi.n	6e46 <_strtol_l.constprop.0+0x8a>
    6dca:	4d4c      	ldr	r5, [pc, #304]	; (6efc <_strtol_l.constprop.0+0x140>)
    6dcc:	468e      	mov	lr, r1
    6dce:	4676      	mov	r6, lr
    6dd0:	f81e bb01 	ldrb.w	fp, [lr], #1
    6dd4:	f815 400b 	ldrb.w	r4, [r5, fp]
    6dd8:	f014 0408 	ands.w	r4, r4, #8
    6ddc:	d1f7      	bne.n	6dce <_strtol_l.constprop.0+0x12>
    6dde:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    6de2:	d072      	beq.n	6eca <_strtol_l.constprop.0+0x10e>
    6de4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    6de8:	bf08      	it	eq
    6dea:	f89e b000 	ldrbeq.w	fp, [lr]
    6dee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    6df2:	bf08      	it	eq
    6df4:	f106 0e02 	addeq.w	lr, r6, #2
    6df8:	2b00      	cmp	r3, #0
    6dfa:	d042      	beq.n	6e82 <_strtol_l.constprop.0+0xc6>
    6dfc:	2b10      	cmp	r3, #16
    6dfe:	d057      	beq.n	6eb0 <_strtol_l.constprop.0+0xf4>
    6e00:	fbb9 f7f8 	udiv	r7, r9, r8
    6e04:	2500      	movs	r5, #0
    6e06:	462e      	mov	r6, r5
    6e08:	fb08 9a17 	mls	sl, r8, r7, r9
    6e0c:	e005      	b.n	6e1a <_strtol_l.constprop.0+0x5e>
    6e0e:	d033      	beq.n	6e78 <_strtol_l.constprop.0+0xbc>
    6e10:	fb08 c606 	mla	r6, r8, r6, ip
    6e14:	2501      	movs	r5, #1
    6e16:	f81e bb01 	ldrb.w	fp, [lr], #1
    6e1a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    6e1e:	f1bc 0f09 	cmp.w	ip, #9
    6e22:	d906      	bls.n	6e32 <_strtol_l.constprop.0+0x76>
    6e24:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    6e28:	f1bc 0f19 	cmp.w	ip, #25
    6e2c:	d812      	bhi.n	6e54 <_strtol_l.constprop.0+0x98>
    6e2e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    6e32:	4563      	cmp	r3, ip
    6e34:	dd17      	ble.n	6e66 <_strtol_l.constprop.0+0xaa>
    6e36:	f1b5 3fff 	cmp.w	r5, #4294967295
    6e3a:	d0ec      	beq.n	6e16 <_strtol_l.constprop.0+0x5a>
    6e3c:	42b7      	cmp	r7, r6
    6e3e:	d2e6      	bcs.n	6e0e <_strtol_l.constprop.0+0x52>
    6e40:	f04f 35ff 	mov.w	r5, #4294967295
    6e44:	e7e7      	b.n	6e16 <_strtol_l.constprop.0+0x5a>
    6e46:	f000 fe2b 	bl	7aa0 <__errno>
    6e4a:	2316      	movs	r3, #22
    6e4c:	6003      	str	r3, [r0, #0]
    6e4e:	2000      	movs	r0, #0
    6e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e54:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    6e58:	f1bc 0f19 	cmp.w	ip, #25
    6e5c:	d803      	bhi.n	6e66 <_strtol_l.constprop.0+0xaa>
    6e5e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    6e62:	4563      	cmp	r3, ip
    6e64:	dce7      	bgt.n	6e36 <_strtol_l.constprop.0+0x7a>
    6e66:	1c6b      	adds	r3, r5, #1
    6e68:	d027      	beq.n	6eba <_strtol_l.constprop.0+0xfe>
    6e6a:	b98c      	cbnz	r4, 6e90 <_strtol_l.constprop.0+0xd4>
    6e6c:	b10a      	cbz	r2, 6e72 <_strtol_l.constprop.0+0xb6>
    6e6e:	bba5      	cbnz	r5, 6eda <_strtol_l.constprop.0+0x11e>
    6e70:	6011      	str	r1, [r2, #0]
    6e72:	4630      	mov	r0, r6
    6e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e78:	45e2      	cmp	sl, ip
    6e7a:	dac9      	bge.n	6e10 <_strtol_l.constprop.0+0x54>
    6e7c:	f04f 35ff 	mov.w	r5, #4294967295
    6e80:	e7c9      	b.n	6e16 <_strtol_l.constprop.0+0x5a>
    6e82:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    6e86:	d005      	beq.n	6e94 <_strtol_l.constprop.0+0xd8>
    6e88:	f04f 080a 	mov.w	r8, #10
    6e8c:	4643      	mov	r3, r8
    6e8e:	e7b7      	b.n	6e00 <_strtol_l.constprop.0+0x44>
    6e90:	4276      	negs	r6, r6
    6e92:	e7eb      	b.n	6e6c <_strtol_l.constprop.0+0xb0>
    6e94:	f89e 3000 	ldrb.w	r3, [lr]
    6e98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6e9c:	2b58      	cmp	r3, #88	; 0x58
    6e9e:	d121      	bne.n	6ee4 <_strtol_l.constprop.0+0x128>
    6ea0:	f04f 0810 	mov.w	r8, #16
    6ea4:	f89e b001 	ldrb.w	fp, [lr, #1]
    6ea8:	4643      	mov	r3, r8
    6eaa:	f10e 0e02 	add.w	lr, lr, #2
    6eae:	e7a7      	b.n	6e00 <_strtol_l.constprop.0+0x44>
    6eb0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    6eb4:	d01a      	beq.n	6eec <_strtol_l.constprop.0+0x130>
    6eb6:	4698      	mov	r8, r3
    6eb8:	e7a2      	b.n	6e00 <_strtol_l.constprop.0+0x44>
    6eba:	2322      	movs	r3, #34	; 0x22
    6ebc:	6003      	str	r3, [r0, #0]
    6ebe:	b172      	cbz	r2, 6ede <_strtol_l.constprop.0+0x122>
    6ec0:	f10e 31ff 	add.w	r1, lr, #4294967295
    6ec4:	464e      	mov	r6, r9
    6ec6:	6011      	str	r1, [r2, #0]
    6ec8:	e7d3      	b.n	6e72 <_strtol_l.constprop.0+0xb6>
    6eca:	f89e b000 	ldrb.w	fp, [lr]
    6ece:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    6ed2:	f106 0e02 	add.w	lr, r6, #2
    6ed6:	2401      	movs	r4, #1
    6ed8:	e78e      	b.n	6df8 <_strtol_l.constprop.0+0x3c>
    6eda:	46b1      	mov	r9, r6
    6edc:	e7f0      	b.n	6ec0 <_strtol_l.constprop.0+0x104>
    6ede:	464e      	mov	r6, r9
    6ee0:	4630      	mov	r0, r6
    6ee2:	e7c7      	b.n	6e74 <_strtol_l.constprop.0+0xb8>
    6ee4:	f04f 0808 	mov.w	r8, #8
    6ee8:	4643      	mov	r3, r8
    6eea:	e789      	b.n	6e00 <_strtol_l.constprop.0+0x44>
    6eec:	f89e 5000 	ldrb.w	r5, [lr]
    6ef0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    6ef4:	2d58      	cmp	r5, #88	; 0x58
    6ef6:	d0d3      	beq.n	6ea0 <_strtol_l.constprop.0+0xe4>
    6ef8:	4698      	mov	r8, r3
    6efa:	e781      	b.n	6e00 <_strtol_l.constprop.0+0x44>
    6efc:	20000931 	.word	0x20000931

00006f00 <strtol>:
    6f00:	b410      	push	{r4}
    6f02:	4c05      	ldr	r4, [pc, #20]	; (6f18 <strtol+0x18>)
    6f04:	4684      	mov	ip, r0
    6f06:	4613      	mov	r3, r2
    6f08:	6820      	ldr	r0, [r4, #0]
    6f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    6f0e:	460a      	mov	r2, r1
    6f10:	4661      	mov	r1, ip
    6f12:	f7ff bf53 	b.w	6dbc <_strtol_l.constprop.0>
    6f16:	bf00      	nop
    6f18:	20001b54 	.word	0x20001b54

00006f1c <__utoa>:
    6f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f1e:	4f25      	ldr	r7, [pc, #148]	; (6fb4 <__utoa+0x98>)
    6f20:	f1a2 0e02 	sub.w	lr, r2, #2
    6f24:	4616      	mov	r6, r2
    6f26:	4605      	mov	r5, r0
    6f28:	460c      	mov	r4, r1
    6f2a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    6f2c:	b08b      	sub	sp, #44	; 0x2c
    6f2e:	46ec      	mov	ip, sp
    6f30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6f34:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    6f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6f3a:	e897 0003 	ldmia.w	r7, {r0, r1}
    6f3e:	f84c 0b04 	str.w	r0, [ip], #4
    6f42:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    6f46:	f88c 1000 	strb.w	r1, [ip]
    6f4a:	d82e      	bhi.n	6faa <__utoa+0x8e>
    6f4c:	f104 3eff 	add.w	lr, r4, #4294967295
    6f50:	4670      	mov	r0, lr
    6f52:	f04f 0c00 	mov.w	ip, #0
    6f56:	fbb5 f2f6 	udiv	r2, r5, r6
    6f5a:	fb06 5312 	mls	r3, r6, r2, r5
    6f5e:	3328      	adds	r3, #40	; 0x28
    6f60:	446b      	add	r3, sp
    6f62:	4661      	mov	r1, ip
    6f64:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    6f68:	f800 cf01 	strb.w	ip, [r0, #1]!
    6f6c:	462b      	mov	r3, r5
    6f6e:	429e      	cmp	r6, r3
    6f70:	f101 0c01 	add.w	ip, r1, #1
    6f74:	4615      	mov	r5, r2
    6f76:	d9ee      	bls.n	6f56 <__utoa+0x3a>
    6f78:	2300      	movs	r3, #0
    6f7a:	f804 300c 	strb.w	r3, [r4, ip]
    6f7e:	b189      	cbz	r1, 6fa4 <__utoa+0x88>
    6f80:	44a4      	add	ip, r4
    6f82:	4672      	mov	r2, lr
    6f84:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    6f88:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    6f8c:	f88e 5000 	strb.w	r5, [lr]
    6f90:	eba4 030e 	sub.w	r3, r4, lr
    6f94:	3202      	adds	r2, #2
    6f96:	3b01      	subs	r3, #1
    6f98:	1b12      	subs	r2, r2, r4
    6f9a:	440b      	add	r3, r1
    6f9c:	429a      	cmp	r2, r3
    6f9e:	f88c 0000 	strb.w	r0, [ip]
    6fa2:	dbee      	blt.n	6f82 <__utoa+0x66>
    6fa4:	4620      	mov	r0, r4
    6fa6:	b00b      	add	sp, #44	; 0x2c
    6fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6faa:	2300      	movs	r3, #0
    6fac:	4618      	mov	r0, r3
    6fae:	7023      	strb	r3, [r4, #0]
    6fb0:	b00b      	add	sp, #44	; 0x2c
    6fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fb4:	20000908 	.word	0x20000908

00006fb8 <__cxa_atexit>:
    6fb8:	4613      	mov	r3, r2
    6fba:	460a      	mov	r2, r1
    6fbc:	4601      	mov	r1, r0
    6fbe:	2002      	movs	r0, #2
    6fc0:	f000 bffc 	b.w	7fbc <__register_exitproc>

00006fc4 <fcvtf>:
    6fc4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    6fc8:	2300      	movs	r3, #0
    6fca:	f002 baff 	b.w	95cc <fcvtbuf>
    6fce:	bf00      	nop

00006fd0 <isspace>:
    6fd0:	4b02      	ldr	r3, [pc, #8]	; (6fdc <isspace+0xc>)
    6fd2:	4418      	add	r0, r3
    6fd4:	7840      	ldrb	r0, [r0, #1]
    6fd6:	f000 0008 	and.w	r0, r0, #8
    6fda:	4770      	bx	lr
    6fdc:	20000930 	.word	0x20000930

00006fe0 <tolower>:
    6fe0:	4b03      	ldr	r3, [pc, #12]	; (6ff0 <tolower+0x10>)
    6fe2:	5c1b      	ldrb	r3, [r3, r0]
    6fe4:	f003 0303 	and.w	r3, r3, #3
    6fe8:	2b01      	cmp	r3, #1
    6fea:	bf08      	it	eq
    6fec:	3020      	addeq	r0, #32
    6fee:	4770      	bx	lr
    6ff0:	20000931 	.word	0x20000931

00006ff4 <stdio_exit_handler>:
    6ff4:	4a02      	ldr	r2, [pc, #8]	; (7000 <stdio_exit_handler+0xc>)
    6ff6:	4903      	ldr	r1, [pc, #12]	; (7004 <stdio_exit_handler+0x10>)
    6ff8:	4803      	ldr	r0, [pc, #12]	; (7008 <stdio_exit_handler+0x14>)
    6ffa:	f000 b8bb 	b.w	7174 <_fwalk_sglue>
    6ffe:	bf00      	nop
    7000:	20001b48 	.word	0x20001b48
    7004:	00009671 	.word	0x00009671
    7008:	20001068 	.word	0x20001068

0000700c <cleanup_stdio>:
    700c:	4b0c      	ldr	r3, [pc, #48]	; (7040 <cleanup_stdio+0x34>)
    700e:	6841      	ldr	r1, [r0, #4]
    7010:	4299      	cmp	r1, r3
    7012:	b510      	push	{r4, lr}
    7014:	4604      	mov	r4, r0
    7016:	d001      	beq.n	701c <cleanup_stdio+0x10>
    7018:	f002 fb2a 	bl	9670 <_fclose_r>
    701c:	68a1      	ldr	r1, [r4, #8]
    701e:	4b09      	ldr	r3, [pc, #36]	; (7044 <cleanup_stdio+0x38>)
    7020:	4299      	cmp	r1, r3
    7022:	d002      	beq.n	702a <cleanup_stdio+0x1e>
    7024:	4620      	mov	r0, r4
    7026:	f002 fb23 	bl	9670 <_fclose_r>
    702a:	68e1      	ldr	r1, [r4, #12]
    702c:	4b06      	ldr	r3, [pc, #24]	; (7048 <cleanup_stdio+0x3c>)
    702e:	4299      	cmp	r1, r3
    7030:	d004      	beq.n	703c <cleanup_stdio+0x30>
    7032:	4620      	mov	r0, r4
    7034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7038:	f002 bb1a 	b.w	9670 <_fclose_r>
    703c:	bd10      	pop	{r4, pc}
    703e:	bf00      	nop
    7040:	2000270c 	.word	0x2000270c
    7044:	20002774 	.word	0x20002774
    7048:	200027dc 	.word	0x200027dc

0000704c <global_stdio_init.part.0>:
    704c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7050:	4c2a      	ldr	r4, [pc, #168]	; (70fc <global_stdio_init.part.0+0xb0>)
    7052:	4b2b      	ldr	r3, [pc, #172]	; (7100 <global_stdio_init.part.0+0xb4>)
    7054:	482b      	ldr	r0, [pc, #172]	; (7104 <global_stdio_init.part.0+0xb8>)
    7056:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7118 <global_stdio_init.part.0+0xcc>
    705a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 711c <global_stdio_init.part.0+0xd0>
    705e:	4f2a      	ldr	r7, [pc, #168]	; (7108 <global_stdio_init.part.0+0xbc>)
    7060:	6018      	str	r0, [r3, #0]
    7062:	2500      	movs	r5, #0
    7064:	2304      	movs	r3, #4
    7066:	2208      	movs	r2, #8
    7068:	4629      	mov	r1, r5
    706a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    706e:	4e27      	ldr	r6, [pc, #156]	; (710c <global_stdio_init.part.0+0xc0>)
    7070:	6665      	str	r5, [r4, #100]	; 0x64
    7072:	e9c4 5302 	strd	r5, r3, [r4, #8]
    7076:	e9c4 5500 	strd	r5, r5, [r4]
    707a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    707e:	61a5      	str	r5, [r4, #24]
    7080:	f000 f95e 	bl	7340 <memset>
    7084:	4b22      	ldr	r3, [pc, #136]	; (7110 <global_stdio_init.part.0+0xc4>)
    7086:	6763      	str	r3, [r4, #116]	; 0x74
    7088:	2208      	movs	r2, #8
    708a:	4629      	mov	r1, r5
    708c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    7090:	e9c4 4907 	strd	r4, r9, [r4, #28]
    7094:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    7098:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    709c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    70a0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    70a4:	6725      	str	r5, [r4, #112]	; 0x70
    70a6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    70aa:	62e6      	str	r6, [r4, #44]	; 0x2c
    70ac:	f000 f948 	bl	7340 <memset>
    70b0:	4b18      	ldr	r3, [pc, #96]	; (7114 <global_stdio_init.part.0+0xc8>)
    70b2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    70b6:	4629      	mov	r1, r5
    70b8:	f104 0368 	add.w	r3, r4, #104	; 0x68
    70bc:	2208      	movs	r2, #8
    70be:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    70c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    70c6:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    70ca:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    70ce:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    70d2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    70d6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    70da:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    70de:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    70e2:	f000 f92d 	bl	7340 <memset>
    70e6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    70ea:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    70ee:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    70f2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    70f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    70fa:	bf00      	nop
    70fc:	2000270c 	.word	0x2000270c
    7100:	20002844 	.word	0x20002844
    7104:	00006ff5 	.word	0x00006ff5
    7108:	00007221 	.word	0x00007221
    710c:	00007241 	.word	0x00007241
    7110:	00010009 	.word	0x00010009
    7114:	00020012 	.word	0x00020012
    7118:	000071bd 	.word	0x000071bd
    711c:	000071e1 	.word	0x000071e1

00007120 <__sinit>:
    7120:	b510      	push	{r4, lr}
    7122:	4604      	mov	r4, r0
    7124:	480a      	ldr	r0, [pc, #40]	; (7150 <__sinit+0x30>)
    7126:	f000 fce9 	bl	7afc <__retarget_lock_acquire_recursive>
    712a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    712c:	b923      	cbnz	r3, 7138 <__sinit+0x18>
    712e:	4b09      	ldr	r3, [pc, #36]	; (7154 <__sinit+0x34>)
    7130:	4a09      	ldr	r2, [pc, #36]	; (7158 <__sinit+0x38>)
    7132:	681b      	ldr	r3, [r3, #0]
    7134:	6362      	str	r2, [r4, #52]	; 0x34
    7136:	b123      	cbz	r3, 7142 <__sinit+0x22>
    7138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    713c:	4804      	ldr	r0, [pc, #16]	; (7150 <__sinit+0x30>)
    713e:	f000 bcdf 	b.w	7b00 <__retarget_lock_release_recursive>
    7142:	f7ff ff83 	bl	704c <global_stdio_init.part.0>
    7146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    714a:	4801      	ldr	r0, [pc, #4]	; (7150 <__sinit+0x30>)
    714c:	f000 bcd8 	b.w	7b00 <__retarget_lock_release_recursive>
    7150:	200026d4 	.word	0x200026d4
    7154:	20002844 	.word	0x20002844
    7158:	0000700d 	.word	0x0000700d

0000715c <__sfp_lock_acquire>:
    715c:	4801      	ldr	r0, [pc, #4]	; (7164 <__sfp_lock_acquire+0x8>)
    715e:	f000 bccd 	b.w	7afc <__retarget_lock_acquire_recursive>
    7162:	bf00      	nop
    7164:	200026d4 	.word	0x200026d4

00007168 <__sfp_lock_release>:
    7168:	4801      	ldr	r0, [pc, #4]	; (7170 <__sfp_lock_release+0x8>)
    716a:	f000 bcc9 	b.w	7b00 <__retarget_lock_release_recursive>
    716e:	bf00      	nop
    7170:	200026d4 	.word	0x200026d4

00007174 <_fwalk_sglue>:
    7174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7178:	4680      	mov	r8, r0
    717a:	460f      	mov	r7, r1
    717c:	4616      	mov	r6, r2
    717e:	f04f 0900 	mov.w	r9, #0
    7182:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    7186:	3d01      	subs	r5, #1
    7188:	d411      	bmi.n	71ae <_fwalk_sglue+0x3a>
    718a:	89a3      	ldrh	r3, [r4, #12]
    718c:	2b01      	cmp	r3, #1
    718e:	f105 35ff 	add.w	r5, r5, #4294967295
    7192:	d908      	bls.n	71a6 <_fwalk_sglue+0x32>
    7194:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    7198:	3301      	adds	r3, #1
    719a:	4621      	mov	r1, r4
    719c:	d003      	beq.n	71a6 <_fwalk_sglue+0x32>
    719e:	4640      	mov	r0, r8
    71a0:	47b8      	blx	r7
    71a2:	ea49 0900 	orr.w	r9, r9, r0
    71a6:	1c6b      	adds	r3, r5, #1
    71a8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    71ac:	d1ed      	bne.n	718a <_fwalk_sglue+0x16>
    71ae:	6836      	ldr	r6, [r6, #0]
    71b0:	2e00      	cmp	r6, #0
    71b2:	d1e6      	bne.n	7182 <_fwalk_sglue+0xe>
    71b4:	4648      	mov	r0, r9
    71b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    71ba:	bf00      	nop

000071bc <__sread>:
    71bc:	b510      	push	{r4, lr}
    71be:	460c      	mov	r4, r1
    71c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    71c4:	f000 fc2e 	bl	7a24 <_read_r>
    71c8:	2800      	cmp	r0, #0
    71ca:	db03      	blt.n	71d4 <__sread+0x18>
    71cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    71ce:	4403      	add	r3, r0
    71d0:	6523      	str	r3, [r4, #80]	; 0x50
    71d2:	bd10      	pop	{r4, pc}
    71d4:	89a3      	ldrh	r3, [r4, #12]
    71d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    71da:	81a3      	strh	r3, [r4, #12]
    71dc:	bd10      	pop	{r4, pc}
    71de:	bf00      	nop

000071e0 <__swrite>:
    71e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e4:	460c      	mov	r4, r1
    71e6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    71ea:	461f      	mov	r7, r3
    71ec:	05cb      	lsls	r3, r1, #23
    71ee:	4605      	mov	r5, r0
    71f0:	4616      	mov	r6, r2
    71f2:	d40b      	bmi.n	720c <__swrite+0x2c>
    71f4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    71f8:	81a1      	strh	r1, [r4, #12]
    71fa:	463b      	mov	r3, r7
    71fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7200:	4632      	mov	r2, r6
    7202:	4628      	mov	r0, r5
    7204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7208:	f000 bc34 	b.w	7a74 <_write_r>
    720c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7210:	2302      	movs	r3, #2
    7212:	2200      	movs	r2, #0
    7214:	f000 fbf0 	bl	79f8 <_lseek_r>
    7218:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    721c:	e7ea      	b.n	71f4 <__swrite+0x14>
    721e:	bf00      	nop

00007220 <__sseek>:
    7220:	b510      	push	{r4, lr}
    7222:	460c      	mov	r4, r1
    7224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7228:	f000 fbe6 	bl	79f8 <_lseek_r>
    722c:	89a3      	ldrh	r3, [r4, #12]
    722e:	1c42      	adds	r2, r0, #1
    7230:	bf0e      	itee	eq
    7232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    723a:	6520      	strne	r0, [r4, #80]	; 0x50
    723c:	81a3      	strh	r3, [r4, #12]
    723e:	bd10      	pop	{r4, pc}

00007240 <__sclose>:
    7240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7244:	f000 bbc6 	b.w	79d4 <_close_r>

00007248 <memmove>:
    7248:	4288      	cmp	r0, r1
    724a:	d90d      	bls.n	7268 <memmove+0x20>
    724c:	188b      	adds	r3, r1, r2
    724e:	4283      	cmp	r3, r0
    7250:	d90a      	bls.n	7268 <memmove+0x20>
    7252:	eb00 0c02 	add.w	ip, r0, r2
    7256:	b1ba      	cbz	r2, 7288 <memmove+0x40>
    7258:	4662      	mov	r2, ip
    725a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    725e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    7262:	4299      	cmp	r1, r3
    7264:	d1f9      	bne.n	725a <memmove+0x12>
    7266:	4770      	bx	lr
    7268:	2a0f      	cmp	r2, #15
    726a:	d80e      	bhi.n	728a <memmove+0x42>
    726c:	4603      	mov	r3, r0
    726e:	f102 3cff 	add.w	ip, r2, #4294967295
    7272:	b14a      	cbz	r2, 7288 <memmove+0x40>
    7274:	f10c 0c01 	add.w	ip, ip, #1
    7278:	3b01      	subs	r3, #1
    727a:	448c      	add	ip, r1
    727c:	f811 2b01 	ldrb.w	r2, [r1], #1
    7280:	f803 2f01 	strb.w	r2, [r3, #1]!
    7284:	4561      	cmp	r1, ip
    7286:	d1f9      	bne.n	727c <memmove+0x34>
    7288:	4770      	bx	lr
    728a:	ea40 0301 	orr.w	r3, r0, r1
    728e:	079b      	lsls	r3, r3, #30
    7290:	d150      	bne.n	7334 <memmove+0xec>
    7292:	f1a2 0310 	sub.w	r3, r2, #16
    7296:	b570      	push	{r4, r5, r6, lr}
    7298:	f101 0c20 	add.w	ip, r1, #32
    729c:	f023 050f 	bic.w	r5, r3, #15
    72a0:	f101 0e10 	add.w	lr, r1, #16
    72a4:	f100 0410 	add.w	r4, r0, #16
    72a8:	44ac      	add	ip, r5
    72aa:	091b      	lsrs	r3, r3, #4
    72ac:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    72b0:	f844 5c10 	str.w	r5, [r4, #-16]
    72b4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    72b8:	f844 5c0c 	str.w	r5, [r4, #-12]
    72bc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    72c0:	f844 5c08 	str.w	r5, [r4, #-8]
    72c4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    72c8:	f844 5c04 	str.w	r5, [r4, #-4]
    72cc:	f10e 0e10 	add.w	lr, lr, #16
    72d0:	45e6      	cmp	lr, ip
    72d2:	f104 0410 	add.w	r4, r4, #16
    72d6:	d1e9      	bne.n	72ac <memmove+0x64>
    72d8:	3301      	adds	r3, #1
    72da:	f012 0f0c 	tst.w	r2, #12
    72de:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    72e2:	f002 040f 	and.w	r4, r2, #15
    72e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    72ea:	d027      	beq.n	733c <memmove+0xf4>
    72ec:	3c04      	subs	r4, #4
    72ee:	f024 0603 	bic.w	r6, r4, #3
    72f2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    72f6:	441e      	add	r6, r3
    72f8:	1f1c      	subs	r4, r3, #4
    72fa:	468e      	mov	lr, r1
    72fc:	f85e 5b04 	ldr.w	r5, [lr], #4
    7300:	f844 5f04 	str.w	r5, [r4, #4]!
    7304:	42b4      	cmp	r4, r6
    7306:	d1f9      	bne.n	72fc <memmove+0xb4>
    7308:	f10c 0401 	add.w	r4, ip, #1
    730c:	f002 0203 	and.w	r2, r2, #3
    7310:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7314:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7318:	f102 3cff 	add.w	ip, r2, #4294967295
    731c:	b14a      	cbz	r2, 7332 <memmove+0xea>
    731e:	f10c 0c01 	add.w	ip, ip, #1
    7322:	3b01      	subs	r3, #1
    7324:	448c      	add	ip, r1
    7326:	f811 2b01 	ldrb.w	r2, [r1], #1
    732a:	f803 2f01 	strb.w	r2, [r3, #1]!
    732e:	4561      	cmp	r1, ip
    7330:	d1f9      	bne.n	7326 <memmove+0xde>
    7332:	bd70      	pop	{r4, r5, r6, pc}
    7334:	f102 3cff 	add.w	ip, r2, #4294967295
    7338:	4603      	mov	r3, r0
    733a:	e79b      	b.n	7274 <memmove+0x2c>
    733c:	4622      	mov	r2, r4
    733e:	e7eb      	b.n	7318 <memmove+0xd0>

00007340 <memset>:
    7340:	0783      	lsls	r3, r0, #30
    7342:	b530      	push	{r4, r5, lr}
    7344:	d048      	beq.n	73d8 <memset+0x98>
    7346:	1e54      	subs	r4, r2, #1
    7348:	2a00      	cmp	r2, #0
    734a:	d03f      	beq.n	73cc <memset+0x8c>
    734c:	b2ca      	uxtb	r2, r1
    734e:	4603      	mov	r3, r0
    7350:	e001      	b.n	7356 <memset+0x16>
    7352:	3c01      	subs	r4, #1
    7354:	d33a      	bcc.n	73cc <memset+0x8c>
    7356:	f803 2b01 	strb.w	r2, [r3], #1
    735a:	079d      	lsls	r5, r3, #30
    735c:	d1f9      	bne.n	7352 <memset+0x12>
    735e:	2c03      	cmp	r4, #3
    7360:	d92d      	bls.n	73be <memset+0x7e>
    7362:	b2cd      	uxtb	r5, r1
    7364:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7368:	2c0f      	cmp	r4, #15
    736a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    736e:	d936      	bls.n	73de <memset+0x9e>
    7370:	f1a4 0210 	sub.w	r2, r4, #16
    7374:	f022 0c0f 	bic.w	ip, r2, #15
    7378:	f103 0e20 	add.w	lr, r3, #32
    737c:	44e6      	add	lr, ip
    737e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    7382:	f103 0210 	add.w	r2, r3, #16
    7386:	e942 5504 	strd	r5, r5, [r2, #-16]
    738a:	e942 5502 	strd	r5, r5, [r2, #-8]
    738e:	3210      	adds	r2, #16
    7390:	4572      	cmp	r2, lr
    7392:	d1f8      	bne.n	7386 <memset+0x46>
    7394:	f10c 0201 	add.w	r2, ip, #1
    7398:	f014 0f0c 	tst.w	r4, #12
    739c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    73a0:	f004 0c0f 	and.w	ip, r4, #15
    73a4:	d013      	beq.n	73ce <memset+0x8e>
    73a6:	f1ac 0304 	sub.w	r3, ip, #4
    73aa:	f023 0303 	bic.w	r3, r3, #3
    73ae:	3304      	adds	r3, #4
    73b0:	4413      	add	r3, r2
    73b2:	f842 5b04 	str.w	r5, [r2], #4
    73b6:	4293      	cmp	r3, r2
    73b8:	d1fb      	bne.n	73b2 <memset+0x72>
    73ba:	f00c 0403 	and.w	r4, ip, #3
    73be:	b12c      	cbz	r4, 73cc <memset+0x8c>
    73c0:	b2c9      	uxtb	r1, r1
    73c2:	441c      	add	r4, r3
    73c4:	f803 1b01 	strb.w	r1, [r3], #1
    73c8:	429c      	cmp	r4, r3
    73ca:	d1fb      	bne.n	73c4 <memset+0x84>
    73cc:	bd30      	pop	{r4, r5, pc}
    73ce:	4664      	mov	r4, ip
    73d0:	4613      	mov	r3, r2
    73d2:	2c00      	cmp	r4, #0
    73d4:	d1f4      	bne.n	73c0 <memset+0x80>
    73d6:	e7f9      	b.n	73cc <memset+0x8c>
    73d8:	4603      	mov	r3, r0
    73da:	4614      	mov	r4, r2
    73dc:	e7bf      	b.n	735e <memset+0x1e>
    73de:	461a      	mov	r2, r3
    73e0:	46a4      	mov	ip, r4
    73e2:	e7e0      	b.n	73a6 <memset+0x66>

000073e4 <strchr>:
    73e4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    73e8:	4603      	mov	r3, r0
    73ea:	d044      	beq.n	7476 <strchr+0x92>
    73ec:	0782      	lsls	r2, r0, #30
    73ee:	d132      	bne.n	7456 <strchr+0x72>
    73f0:	b510      	push	{r4, lr}
    73f2:	6804      	ldr	r4, [r0, #0]
    73f4:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    73f8:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    73fc:	ea8e 0204 	eor.w	r2, lr, r4
    7400:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7404:	ea23 0302 	bic.w	r3, r3, r2
    7408:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    740c:	ea22 0204 	bic.w	r2, r2, r4
    7410:	4313      	orrs	r3, r2
    7412:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7416:	d10f      	bne.n	7438 <strchr+0x54>
    7418:	f850 4f04 	ldr.w	r4, [r0, #4]!
    741c:	ea84 0c0e 	eor.w	ip, r4, lr
    7420:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    7424:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    7428:	ea23 0304 	bic.w	r3, r3, r4
    742c:	ea22 020c 	bic.w	r2, r2, ip
    7430:	4313      	orrs	r3, r2
    7432:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7436:	d0ef      	beq.n	7418 <strchr+0x34>
    7438:	7803      	ldrb	r3, [r0, #0]
    743a:	b923      	cbnz	r3, 7446 <strchr+0x62>
    743c:	e036      	b.n	74ac <strchr+0xc8>
    743e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7442:	2b00      	cmp	r3, #0
    7444:	d032      	beq.n	74ac <strchr+0xc8>
    7446:	4299      	cmp	r1, r3
    7448:	d1f9      	bne.n	743e <strchr+0x5a>
    744a:	bd10      	pop	{r4, pc}
    744c:	428a      	cmp	r2, r1
    744e:	d011      	beq.n	7474 <strchr+0x90>
    7450:	079a      	lsls	r2, r3, #30
    7452:	4618      	mov	r0, r3
    7454:	d0cc      	beq.n	73f0 <strchr+0xc>
    7456:	4618      	mov	r0, r3
    7458:	f813 2b01 	ldrb.w	r2, [r3], #1
    745c:	2a00      	cmp	r2, #0
    745e:	d1f5      	bne.n	744c <strchr+0x68>
    7460:	4610      	mov	r0, r2
    7462:	4770      	bx	lr
    7464:	0799      	lsls	r1, r3, #30
    7466:	4618      	mov	r0, r3
    7468:	d007      	beq.n	747a <strchr+0x96>
    746a:	4618      	mov	r0, r3
    746c:	3301      	adds	r3, #1
    746e:	7802      	ldrb	r2, [r0, #0]
    7470:	2a00      	cmp	r2, #0
    7472:	d1f7      	bne.n	7464 <strchr+0x80>
    7474:	4770      	bx	lr
    7476:	0782      	lsls	r2, r0, #30
    7478:	d1f7      	bne.n	746a <strchr+0x86>
    747a:	6802      	ldr	r2, [r0, #0]
    747c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7480:	ea23 0302 	bic.w	r3, r3, r2
    7484:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7488:	d108      	bne.n	749c <strchr+0xb8>
    748a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    748e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7492:	ea23 0302 	bic.w	r3, r3, r2
    7496:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    749a:	d0f6      	beq.n	748a <strchr+0xa6>
    749c:	7803      	ldrb	r3, [r0, #0]
    749e:	2b00      	cmp	r3, #0
    74a0:	d0e8      	beq.n	7474 <strchr+0x90>
    74a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    74a6:	2b00      	cmp	r3, #0
    74a8:	d1fb      	bne.n	74a2 <strchr+0xbe>
    74aa:	4770      	bx	lr
    74ac:	4618      	mov	r0, r3
    74ae:	bd10      	pop	{r4, pc}

000074b0 <strncmp>:
    74b0:	2a00      	cmp	r2, #0
    74b2:	d03e      	beq.n	7532 <strncmp+0x82>
    74b4:	ea40 0301 	orr.w	r3, r0, r1
    74b8:	079b      	lsls	r3, r3, #30
    74ba:	b530      	push	{r4, r5, lr}
    74bc:	4684      	mov	ip, r0
    74be:	d12f      	bne.n	7520 <strncmp+0x70>
    74c0:	2a03      	cmp	r2, #3
    74c2:	d92d      	bls.n	7520 <strncmp+0x70>
    74c4:	460b      	mov	r3, r1
    74c6:	e008      	b.n	74da <strncmp+0x2a>
    74c8:	3a04      	subs	r2, #4
    74ca:	4684      	mov	ip, r0
    74cc:	4619      	mov	r1, r3
    74ce:	d025      	beq.n	751c <strncmp+0x6c>
    74d0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    74d4:	d122      	bne.n	751c <strncmp+0x6c>
    74d6:	2a03      	cmp	r2, #3
    74d8:	d922      	bls.n	7520 <strncmp+0x70>
    74da:	6804      	ldr	r4, [r0, #0]
    74dc:	4619      	mov	r1, r3
    74de:	f853 5b04 	ldr.w	r5, [r3], #4
    74e2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    74e6:	42ac      	cmp	r4, r5
    74e8:	4684      	mov	ip, r0
    74ea:	ea2e 0e04 	bic.w	lr, lr, r4
    74ee:	f100 0004 	add.w	r0, r0, #4
    74f2:	d0e9      	beq.n	74c8 <strncmp+0x18>
    74f4:	f89c 0000 	ldrb.w	r0, [ip]
    74f8:	780c      	ldrb	r4, [r1, #0]
    74fa:	42a0      	cmp	r0, r4
    74fc:	d11b      	bne.n	7536 <strncmp+0x86>
    74fe:	46e6      	mov	lr, ip
    7500:	b168      	cbz	r0, 751e <strncmp+0x6e>
    7502:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    7506:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    750a:	eba2 030e 	sub.w	r3, r2, lr
    750e:	42a0      	cmp	r0, r4
    7510:	f103 33ff 	add.w	r3, r3, #4294967295
    7514:	d10f      	bne.n	7536 <strncmp+0x86>
    7516:	eb1c 0303 	adds.w	r3, ip, r3
    751a:	d1f1      	bne.n	7500 <strncmp+0x50>
    751c:	2000      	movs	r0, #0
    751e:	bd30      	pop	{r4, r5, pc}
    7520:	f89c 0000 	ldrb.w	r0, [ip]
    7524:	780c      	ldrb	r4, [r1, #0]
    7526:	4284      	cmp	r4, r0
    7528:	d105      	bne.n	7536 <strncmp+0x86>
    752a:	2a01      	cmp	r2, #1
    752c:	d0f6      	beq.n	751c <strncmp+0x6c>
    752e:	46e6      	mov	lr, ip
    7530:	e7e6      	b.n	7500 <strncmp+0x50>
    7532:	4610      	mov	r0, r2
    7534:	4770      	bx	lr
    7536:	1b00      	subs	r0, r0, r4
    7538:	bd30      	pop	{r4, r5, pc}
    753a:	bf00      	nop

0000753c <strncpy>:
    753c:	ea40 0301 	orr.w	r3, r0, r1
    7540:	079b      	lsls	r3, r3, #30
    7542:	b530      	push	{r4, r5, lr}
    7544:	d101      	bne.n	754a <strncpy+0xe>
    7546:	2a03      	cmp	r2, #3
    7548:	d80f      	bhi.n	756a <strncpy+0x2e>
    754a:	4684      	mov	ip, r0
    754c:	f101 3eff 	add.w	lr, r1, #4294967295
    7550:	e007      	b.n	7562 <strncpy+0x26>
    7552:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    7556:	f803 1b01 	strb.w	r1, [r3], #1
    755a:	1e54      	subs	r4, r2, #1
    755c:	b1c1      	cbz	r1, 7590 <strncpy+0x54>
    755e:	469c      	mov	ip, r3
    7560:	4622      	mov	r2, r4
    7562:	4663      	mov	r3, ip
    7564:	2a00      	cmp	r2, #0
    7566:	d1f4      	bne.n	7552 <strncpy+0x16>
    7568:	bd30      	pop	{r4, r5, pc}
    756a:	460b      	mov	r3, r1
    756c:	4684      	mov	ip, r0
    756e:	4619      	mov	r1, r3
    7570:	f853 5b04 	ldr.w	r5, [r3], #4
    7574:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    7578:	ea24 0405 	bic.w	r4, r4, r5
    757c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    7580:	d1e4      	bne.n	754c <strncpy+0x10>
    7582:	3a04      	subs	r2, #4
    7584:	2a03      	cmp	r2, #3
    7586:	f84c 5b04 	str.w	r5, [ip], #4
    758a:	4619      	mov	r1, r3
    758c:	d8ef      	bhi.n	756e <strncpy+0x32>
    758e:	e7dd      	b.n	754c <strncpy+0x10>
    7590:	4494      	add	ip, r2
    7592:	2c00      	cmp	r4, #0
    7594:	d0e8      	beq.n	7568 <strncpy+0x2c>
    7596:	f803 1b01 	strb.w	r1, [r3], #1
    759a:	4563      	cmp	r3, ip
    759c:	d1fb      	bne.n	7596 <strncpy+0x5a>
    759e:	bd30      	pop	{r4, r5, pc}

000075a0 <critical_factorization>:
    75a0:	2901      	cmp	r1, #1
    75a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75a6:	d95b      	bls.n	7660 <critical_factorization+0xc0>
    75a8:	f04f 0801 	mov.w	r8, #1
    75ac:	46c6      	mov	lr, r8
    75ae:	2400      	movs	r4, #0
    75b0:	f04f 35ff 	mov.w	r5, #4294967295
    75b4:	4643      	mov	r3, r8
    75b6:	e008      	b.n	75ca <critical_factorization+0x2a>
    75b8:	eba3 0805 	sub.w	r8, r3, r5
    75bc:	461c      	mov	r4, r3
    75be:	f04f 0e01 	mov.w	lr, #1
    75c2:	eb04 030e 	add.w	r3, r4, lr
    75c6:	428b      	cmp	r3, r1
    75c8:	d210      	bcs.n	75ec <critical_factorization+0x4c>
    75ca:	eb00 0c0e 	add.w	ip, r0, lr
    75ce:	5cc7      	ldrb	r7, [r0, r3]
    75d0:	f81c 6005 	ldrb.w	r6, [ip, r5]
    75d4:	42b7      	cmp	r7, r6
    75d6:	d3ef      	bcc.n	75b8 <critical_factorization+0x18>
    75d8:	d032      	beq.n	7640 <critical_factorization+0xa0>
    75da:	f04f 0801 	mov.w	r8, #1
    75de:	4625      	mov	r5, r4
    75e0:	46c6      	mov	lr, r8
    75e2:	4444      	add	r4, r8
    75e4:	eb04 030e 	add.w	r3, r4, lr
    75e8:	428b      	cmp	r3, r1
    75ea:	d3ee      	bcc.n	75ca <critical_factorization+0x2a>
    75ec:	2701      	movs	r7, #1
    75ee:	f8c2 8000 	str.w	r8, [r2]
    75f2:	46be      	mov	lr, r7
    75f4:	2400      	movs	r4, #0
    75f6:	f04f 36ff 	mov.w	r6, #4294967295
    75fa:	463b      	mov	r3, r7
    75fc:	e007      	b.n	760e <critical_factorization+0x6e>
    75fe:	1b9f      	subs	r7, r3, r6
    7600:	461c      	mov	r4, r3
    7602:	f04f 0e01 	mov.w	lr, #1
    7606:	eb04 030e 	add.w	r3, r4, lr
    760a:	428b      	cmp	r3, r1
    760c:	d210      	bcs.n	7630 <critical_factorization+0x90>
    760e:	eb00 0c06 	add.w	ip, r0, r6
    7612:	f810 8003 	ldrb.w	r8, [r0, r3]
    7616:	f81c c00e 	ldrb.w	ip, [ip, lr]
    761a:	45e0      	cmp	r8, ip
    761c:	d8ef      	bhi.n	75fe <critical_factorization+0x5e>
    761e:	d017      	beq.n	7650 <critical_factorization+0xb0>
    7620:	2701      	movs	r7, #1
    7622:	4626      	mov	r6, r4
    7624:	46be      	mov	lr, r7
    7626:	443c      	add	r4, r7
    7628:	eb04 030e 	add.w	r3, r4, lr
    762c:	428b      	cmp	r3, r1
    762e:	d3ee      	bcc.n	760e <critical_factorization+0x6e>
    7630:	3601      	adds	r6, #1
    7632:	1c68      	adds	r0, r5, #1
    7634:	4286      	cmp	r6, r0
    7636:	d301      	bcc.n	763c <critical_factorization+0x9c>
    7638:	6017      	str	r7, [r2, #0]
    763a:	4630      	mov	r0, r6
    763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7640:	45c6      	cmp	lr, r8
    7642:	bf0a      	itet	eq
    7644:	4474      	addeq	r4, lr
    7646:	f10e 0e01 	addne.w	lr, lr, #1
    764a:	f04f 0e01 	moveq.w	lr, #1
    764e:	e7b8      	b.n	75c2 <critical_factorization+0x22>
    7650:	45be      	cmp	lr, r7
    7652:	bf0a      	itet	eq
    7654:	4474      	addeq	r4, lr
    7656:	f10e 0e01 	addne.w	lr, lr, #1
    765a:	f04f 0e01 	moveq.w	lr, #1
    765e:	e7d2      	b.n	7606 <critical_factorization+0x66>
    7660:	2701      	movs	r7, #1
    7662:	2600      	movs	r6, #0
    7664:	e7e8      	b.n	7638 <critical_factorization+0x98>
    7666:	bf00      	nop

00007668 <two_way_long_needle>:
    7668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    766c:	4692      	mov	sl, r2
    766e:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    7672:	aa05      	add	r2, sp, #20
    7674:	4681      	mov	r9, r0
    7676:	460f      	mov	r7, r1
    7678:	4650      	mov	r0, sl
    767a:	4619      	mov	r1, r3
    767c:	461d      	mov	r5, r3
    767e:	f7ff ff8f 	bl	75a0 <critical_factorization>
    7682:	4613      	mov	r3, r2
    7684:	4683      	mov	fp, r0
    7686:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    768a:	f843 5f04 	str.w	r5, [r3, #4]!
    768e:	4293      	cmp	r3, r2
    7690:	d1fb      	bne.n	768a <two_way_long_needle+0x22>
    7692:	2d00      	cmp	r5, #0
    7694:	f000 80df 	beq.w	7856 <two_way_long_needle+0x1ee>
    7698:	1e6c      	subs	r4, r5, #1
    769a:	ae06      	add	r6, sp, #24
    769c:	f10a 32ff 	add.w	r2, sl, #4294967295
    76a0:	eb0a 0004 	add.w	r0, sl, r4
    76a4:	9600      	str	r6, [sp, #0]
    76a6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    76aa:	1aab      	subs	r3, r5, r2
    76ac:	3b01      	subs	r3, #1
    76ae:	4453      	add	r3, sl
    76b0:	4282      	cmp	r2, r0
    76b2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    76b6:	d1f6      	bne.n	76a6 <two_way_long_needle+0x3e>
    76b8:	9905      	ldr	r1, [sp, #20]
    76ba:	465a      	mov	r2, fp
    76bc:	4451      	add	r1, sl
    76be:	4650      	mov	r0, sl
    76c0:	f002 f8fc 	bl	98bc <memcmp>
    76c4:	2800      	cmp	r0, #0
    76c6:	d16f      	bne.n	77a8 <two_way_long_needle+0x140>
    76c8:	f10b 33ff 	add.w	r3, fp, #4294967295
    76cc:	9303      	str	r3, [sp, #12]
    76ce:	f1cb 0301 	rsb	r3, fp, #1
    76d2:	4680      	mov	r8, r0
    76d4:	4606      	mov	r6, r0
    76d6:	9301      	str	r3, [sp, #4]
    76d8:	eb09 0e06 	add.w	lr, r9, r6
    76dc:	9a00      	ldr	r2, [sp, #0]
    76de:	f81e 3004 	ldrb.w	r3, [lr, r4]
    76e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76e6:	b1db      	cbz	r3, 7720 <two_way_long_needle+0xb8>
    76e8:	f1b8 0f00 	cmp.w	r8, #0
    76ec:	d003      	beq.n	76f6 <two_way_long_needle+0x8e>
    76ee:	9a05      	ldr	r2, [sp, #20]
    76f0:	429a      	cmp	r2, r3
    76f2:	d900      	bls.n	76f6 <two_way_long_needle+0x8e>
    76f4:	1aab      	subs	r3, r5, r2
    76f6:	441e      	add	r6, r3
    76f8:	f04f 0800 	mov.w	r8, #0
    76fc:	1b7b      	subs	r3, r7, r5
    76fe:	429e      	cmp	r6, r3
    7700:	d9ea      	bls.n	76d8 <two_way_long_needle+0x70>
    7702:	eb09 0007 	add.w	r0, r9, r7
    7706:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    770a:	f002 f907 	bl	991c <strnlen>
    770e:	4407      	add	r7, r0
    7710:	1b7b      	subs	r3, r7, r5
    7712:	429e      	cmp	r6, r3
    7714:	d9e0      	bls.n	76d8 <two_way_long_needle+0x70>
    7716:	2000      	movs	r0, #0
    7718:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7720:	45c3      	cmp	fp, r8
    7722:	465b      	mov	r3, fp
    7724:	bf38      	it	cc
    7726:	4643      	movcc	r3, r8
    7728:	42a3      	cmp	r3, r4
    772a:	d210      	bcs.n	774e <two_way_long_needle+0xe6>
    772c:	1e59      	subs	r1, r3, #1
    772e:	18f2      	adds	r2, r6, r3
    7730:	4451      	add	r1, sl
    7732:	444a      	add	r2, r9
    7734:	e002      	b.n	773c <two_way_long_needle+0xd4>
    7736:	3301      	adds	r3, #1
    7738:	42a3      	cmp	r3, r4
    773a:	d208      	bcs.n	774e <two_way_long_needle+0xe6>
    773c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7740:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7744:	4584      	cmp	ip, r0
    7746:	d0f6      	beq.n	7736 <two_way_long_needle+0xce>
    7748:	9a01      	ldr	r2, [sp, #4]
    774a:	4416      	add	r6, r2
    774c:	e7d3      	b.n	76f6 <two_way_long_needle+0x8e>
    774e:	45c3      	cmp	fp, r8
    7750:	9b03      	ldr	r3, [sp, #12]
    7752:	d97e      	bls.n	7852 <two_way_long_needle+0x1ea>
    7754:	eb06 020b 	add.w	r2, r6, fp
    7758:	444a      	add	r2, r9
    775a:	eb0a 010b 	add.w	r1, sl, fp
    775e:	9602      	str	r6, [sp, #8]
    7760:	e002      	b.n	7768 <two_way_long_needle+0x100>
    7762:	4543      	cmp	r3, r8
    7764:	d015      	beq.n	7792 <two_way_long_needle+0x12a>
    7766:	4603      	mov	r3, r0
    7768:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    776c:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    7770:	4286      	cmp	r6, r0
    7772:	f103 0c01 	add.w	ip, r3, #1
    7776:	f103 30ff 	add.w	r0, r3, #4294967295
    777a:	d0f2      	beq.n	7762 <two_way_long_needle+0xfa>
    777c:	9e02      	ldr	r6, [sp, #8]
    777e:	4663      	mov	r3, ip
    7780:	f108 0801 	add.w	r8, r8, #1
    7784:	4598      	cmp	r8, r3
    7786:	d80a      	bhi.n	779e <two_way_long_needle+0x136>
    7788:	9b05      	ldr	r3, [sp, #20]
    778a:	441e      	add	r6, r3
    778c:	eba5 0803 	sub.w	r8, r5, r3
    7790:	e7b4      	b.n	76fc <two_way_long_needle+0x94>
    7792:	4643      	mov	r3, r8
    7794:	f108 0801 	add.w	r8, r8, #1
    7798:	4598      	cmp	r8, r3
    779a:	9e02      	ldr	r6, [sp, #8]
    779c:	d9f4      	bls.n	7788 <two_way_long_needle+0x120>
    779e:	4670      	mov	r0, lr
    77a0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    77a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77a8:	eba5 030b 	sub.w	r3, r5, fp
    77ac:	455b      	cmp	r3, fp
    77ae:	bf38      	it	cc
    77b0:	465b      	movcc	r3, fp
    77b2:	3301      	adds	r3, #1
    77b4:	9305      	str	r3, [sp, #20]
    77b6:	f10b 33ff 	add.w	r3, fp, #4294967295
    77ba:	9301      	str	r3, [sp, #4]
    77bc:	f1cb 0301 	rsb	r3, fp, #1
    77c0:	2600      	movs	r6, #0
    77c2:	9302      	str	r3, [sp, #8]
    77c4:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    77c8:	eb09 0106 	add.w	r1, r9, r6
    77cc:	9a00      	ldr	r2, [sp, #0]
    77ce:	5d0b      	ldrb	r3, [r1, r4]
    77d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d4:	b16b      	cbz	r3, 77f2 <two_way_long_needle+0x18a>
    77d6:	441e      	add	r6, r3
    77d8:	1b7b      	subs	r3, r7, r5
    77da:	42b3      	cmp	r3, r6
    77dc:	d2f4      	bcs.n	77c8 <two_way_long_needle+0x160>
    77de:	eb09 0007 	add.w	r0, r9, r7
    77e2:	4641      	mov	r1, r8
    77e4:	f002 f89a 	bl	991c <strnlen>
    77e8:	4407      	add	r7, r0
    77ea:	1b7b      	subs	r3, r7, r5
    77ec:	42b3      	cmp	r3, r6
    77ee:	d2eb      	bcs.n	77c8 <two_way_long_needle+0x160>
    77f0:	e791      	b.n	7716 <two_way_long_needle+0xae>
    77f2:	45a3      	cmp	fp, r4
    77f4:	d214      	bcs.n	7820 <two_way_long_needle+0x1b8>
    77f6:	9b01      	ldr	r3, [sp, #4]
    77f8:	eb0b 0206 	add.w	r2, fp, r6
    77fc:	eb0a 0c03 	add.w	ip, sl, r3
    7800:	444a      	add	r2, r9
    7802:	465b      	mov	r3, fp
    7804:	e002      	b.n	780c <two_way_long_needle+0x1a4>
    7806:	3301      	adds	r3, #1
    7808:	42a3      	cmp	r3, r4
    780a:	d209      	bcs.n	7820 <two_way_long_needle+0x1b8>
    780c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7810:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    7814:	4586      	cmp	lr, r0
    7816:	d0f6      	beq.n	7806 <two_way_long_needle+0x19e>
    7818:	9a02      	ldr	r2, [sp, #8]
    781a:	4416      	add	r6, r2
    781c:	441e      	add	r6, r3
    781e:	e7db      	b.n	77d8 <two_way_long_needle+0x170>
    7820:	f1bb 0f00 	cmp.w	fp, #0
    7824:	d010      	beq.n	7848 <two_way_long_needle+0x1e0>
    7826:	eb0b 0006 	add.w	r0, fp, r6
    782a:	4448      	add	r0, r9
    782c:	eb0a 020b 	add.w	r2, sl, fp
    7830:	e001      	b.n	7836 <two_way_long_needle+0x1ce>
    7832:	4553      	cmp	r3, sl
    7834:	d008      	beq.n	7848 <two_way_long_needle+0x1e0>
    7836:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    783a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    783e:	45e6      	cmp	lr, ip
    7840:	4613      	mov	r3, r2
    7842:	d0f6      	beq.n	7832 <two_way_long_needle+0x1ca>
    7844:	9b05      	ldr	r3, [sp, #20]
    7846:	e7c6      	b.n	77d6 <two_way_long_needle+0x16e>
    7848:	4608      	mov	r0, r1
    784a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7852:	465b      	mov	r3, fp
    7854:	e794      	b.n	7780 <two_way_long_needle+0x118>
    7856:	ab06      	add	r3, sp, #24
    7858:	f04f 34ff 	mov.w	r4, #4294967295
    785c:	9300      	str	r3, [sp, #0]
    785e:	e72b      	b.n	76b8 <two_way_long_needle+0x50>

00007860 <strstr>:
    7860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7864:	460d      	mov	r5, r1
    7866:	7809      	ldrb	r1, [r1, #0]
    7868:	b090      	sub	sp, #64	; 0x40
    786a:	4604      	mov	r4, r0
    786c:	2900      	cmp	r1, #0
    786e:	d054      	beq.n	791a <strstr+0xba>
    7870:	786a      	ldrb	r2, [r5, #1]
    7872:	2a00      	cmp	r2, #0
    7874:	f000 8083 	beq.w	797e <strstr+0x11e>
    7878:	78ab      	ldrb	r3, [r5, #2]
    787a:	2b00      	cmp	r3, #0
    787c:	d051      	beq.n	7922 <strstr+0xc2>
    787e:	78e8      	ldrb	r0, [r5, #3]
    7880:	682e      	ldr	r6, [r5, #0]
    7882:	2800      	cmp	r0, #0
    7884:	f000 8082 	beq.w	798c <strstr+0x12c>
    7888:	792b      	ldrb	r3, [r5, #4]
    788a:	2b00      	cmp	r3, #0
    788c:	d057      	beq.n	793e <strstr+0xde>
    788e:	4628      	mov	r0, r5
    7890:	f000 fb16 	bl	7ec0 <strlen>
    7894:	4606      	mov	r6, r0
    7896:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    789a:	4620      	mov	r0, r4
    789c:	f002 f83e 	bl	991c <strnlen>
    78a0:	4286      	cmp	r6, r0
    78a2:	d85b      	bhi.n	795c <strstr+0xfc>
    78a4:	2efe      	cmp	r6, #254	; 0xfe
    78a6:	f200 8086 	bhi.w	79b6 <strstr+0x156>
    78aa:	1b80      	subs	r0, r0, r6
    78ac:	1827      	adds	r7, r4, r0
    78ae:	2240      	movs	r2, #64	; 0x40
    78b0:	1c71      	adds	r1, r6, #1
    78b2:	4668      	mov	r0, sp
    78b4:	f7ff fd44 	bl	7340 <memset>
    78b8:	b17e      	cbz	r6, 78da <strstr+0x7a>
    78ba:	1e6a      	subs	r2, r5, #1
    78bc:	fa5f fc86 	uxtb.w	ip, r6
    78c0:	1990      	adds	r0, r2, r6
    78c2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    78c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    78ca:	3340      	adds	r3, #64	; 0x40
    78cc:	446b      	add	r3, sp
    78ce:	1aa9      	subs	r1, r5, r2
    78d0:	4461      	add	r1, ip
    78d2:	4282      	cmp	r2, r0
    78d4:	f803 1c40 	strb.w	r1, [r3, #-64]
    78d8:	d1f3      	bne.n	78c2 <strstr+0x62>
    78da:	3c01      	subs	r4, #1
    78dc:	5da3      	ldrb	r3, [r4, r6]
    78de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    78e2:	3340      	adds	r3, #64	; 0x40
    78e4:	446b      	add	r3, sp
    78e6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    78ea:	441c      	add	r4, r3
    78ec:	42a7      	cmp	r7, r4
    78ee:	d203      	bcs.n	78f8 <strstr+0x98>
    78f0:	e039      	b.n	7966 <strstr+0x106>
    78f2:	4444      	add	r4, r8
    78f4:	42a7      	cmp	r7, r4
    78f6:	d336      	bcc.n	7966 <strstr+0x106>
    78f8:	f814 c006 	ldrb.w	ip, [r4, r6]
    78fc:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    7900:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    7904:	eb0d 0c03 	add.w	ip, sp, r3
    7908:	4620      	mov	r0, r4
    790a:	4632      	mov	r2, r6
    790c:	4629      	mov	r1, r5
    790e:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    7912:	f001 ffd3 	bl	98bc <memcmp>
    7916:	2800      	cmp	r0, #0
    7918:	d1eb      	bne.n	78f2 <strstr+0x92>
    791a:	4620      	mov	r0, r4
    791c:	b010      	add	sp, #64	; 0x40
    791e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7922:	7800      	ldrb	r0, [r0, #0]
    7924:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    7928:	e000      	b.n	792c <strstr+0xcc>
    792a:	460c      	mov	r4, r1
    792c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    7930:	1c61      	adds	r1, r4, #1
    7932:	b198      	cbz	r0, 795c <strstr+0xfc>
    7934:	429a      	cmp	r2, r3
    7936:	7860      	ldrb	r0, [r4, #1]
    7938:	d1f7      	bne.n	792a <strstr+0xca>
    793a:	3c01      	subs	r4, #1
    793c:	e7ed      	b.n	791a <strstr+0xba>
    793e:	7822      	ldrb	r2, [r4, #0]
    7940:	b162      	cbz	r2, 795c <strstr+0xfc>
    7942:	ba31      	rev	r1, r6
    7944:	e001      	b.n	794a <strstr+0xea>
    7946:	4299      	cmp	r1, r3
    7948:	d01e      	beq.n	7988 <strstr+0x128>
    794a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    794e:	4620      	mov	r0, r4
    7950:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    7954:	2a00      	cmp	r2, #0
    7956:	d1f6      	bne.n	7946 <strstr+0xe6>
    7958:	4299      	cmp	r1, r3
    795a:	d015      	beq.n	7988 <strstr+0x128>
    795c:	2400      	movs	r4, #0
    795e:	4620      	mov	r0, r4
    7960:	b010      	add	sp, #64	; 0x40
    7962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7966:	5dbb      	ldrb	r3, [r7, r6]
    7968:	19b8      	adds	r0, r7, r6
    796a:	2b00      	cmp	r3, #0
    796c:	d0f6      	beq.n	795c <strstr+0xfc>
    796e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7972:	f001 ffd3 	bl	991c <strnlen>
    7976:	4407      	add	r7, r0
    7978:	42bc      	cmp	r4, r7
    797a:	d9ae      	bls.n	78da <strstr+0x7a>
    797c:	e7ee      	b.n	795c <strstr+0xfc>
    797e:	b010      	add	sp, #64	; 0x40
    7980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7984:	f7ff bd2e 	b.w	73e4 <strchr>
    7988:	1ec4      	subs	r4, r0, #3
    798a:	e7c6      	b.n	791a <strstr+0xba>
    798c:	0412      	lsls	r2, r2, #16
    798e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    7992:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7996:	7821      	ldrb	r1, [r4, #0]
    7998:	4602      	mov	r2, r0
    799a:	e000      	b.n	799e <strstr+0x13e>
    799c:	462c      	mov	r4, r5
    799e:	ea41 0002 	orr.w	r0, r1, r2
    79a2:	1c65      	adds	r5, r4, #1
    79a4:	0202      	lsls	r2, r0, #8
    79a6:	2900      	cmp	r1, #0
    79a8:	d0d8      	beq.n	795c <strstr+0xfc>
    79aa:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    79ae:	7861      	ldrb	r1, [r4, #1]
    79b0:	d1f4      	bne.n	799c <strstr+0x13c>
    79b2:	3c02      	subs	r4, #2
    79b4:	e7b1      	b.n	791a <strstr+0xba>
    79b6:	4601      	mov	r1, r0
    79b8:	4633      	mov	r3, r6
    79ba:	462a      	mov	r2, r5
    79bc:	4620      	mov	r0, r4
    79be:	b010      	add	sp, #64	; 0x40
    79c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79c4:	f7ff be50 	b.w	7668 <two_way_long_needle>

000079c8 <__locale_mb_cur_max>:
    79c8:	4b01      	ldr	r3, [pc, #4]	; (79d0 <__locale_mb_cur_max+0x8>)
    79ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    79ce:	4770      	bx	lr
    79d0:	200015cc 	.word	0x200015cc

000079d4 <_close_r>:
    79d4:	b538      	push	{r3, r4, r5, lr}
    79d6:	4d07      	ldr	r5, [pc, #28]	; (79f4 <_close_r+0x20>)
    79d8:	2200      	movs	r2, #0
    79da:	4604      	mov	r4, r0
    79dc:	4608      	mov	r0, r1
    79de:	602a      	str	r2, [r5, #0]
    79e0:	f7fb ffce 	bl	3980 <_close>
    79e4:	1c43      	adds	r3, r0, #1
    79e6:	d000      	beq.n	79ea <_close_r+0x16>
    79e8:	bd38      	pop	{r3, r4, r5, pc}
    79ea:	682b      	ldr	r3, [r5, #0]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d0fb      	beq.n	79e8 <_close_r+0x14>
    79f0:	6023      	str	r3, [r4, #0]
    79f2:	bd38      	pop	{r3, r4, r5, pc}
    79f4:	2000285c 	.word	0x2000285c

000079f8 <_lseek_r>:
    79f8:	b538      	push	{r3, r4, r5, lr}
    79fa:	460c      	mov	r4, r1
    79fc:	4d08      	ldr	r5, [pc, #32]	; (7a20 <_lseek_r+0x28>)
    79fe:	4684      	mov	ip, r0
    7a00:	4611      	mov	r1, r2
    7a02:	4620      	mov	r0, r4
    7a04:	461a      	mov	r2, r3
    7a06:	2300      	movs	r3, #0
    7a08:	602b      	str	r3, [r5, #0]
    7a0a:	4664      	mov	r4, ip
    7a0c:	f7fb ffc4 	bl	3998 <_lseek>
    7a10:	1c43      	adds	r3, r0, #1
    7a12:	d000      	beq.n	7a16 <_lseek_r+0x1e>
    7a14:	bd38      	pop	{r3, r4, r5, pc}
    7a16:	682b      	ldr	r3, [r5, #0]
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d0fb      	beq.n	7a14 <_lseek_r+0x1c>
    7a1c:	6023      	str	r3, [r4, #0]
    7a1e:	bd38      	pop	{r3, r4, r5, pc}
    7a20:	2000285c 	.word	0x2000285c

00007a24 <_read_r>:
    7a24:	b538      	push	{r3, r4, r5, lr}
    7a26:	460c      	mov	r4, r1
    7a28:	4d08      	ldr	r5, [pc, #32]	; (7a4c <_read_r+0x28>)
    7a2a:	4684      	mov	ip, r0
    7a2c:	4611      	mov	r1, r2
    7a2e:	4620      	mov	r0, r4
    7a30:	461a      	mov	r2, r3
    7a32:	2300      	movs	r3, #0
    7a34:	602b      	str	r3, [r5, #0]
    7a36:	4664      	mov	r4, ip
    7a38:	f7fb ffa0 	bl	397c <_read>
    7a3c:	1c43      	adds	r3, r0, #1
    7a3e:	d000      	beq.n	7a42 <_read_r+0x1e>
    7a40:	bd38      	pop	{r3, r4, r5, pc}
    7a42:	682b      	ldr	r3, [r5, #0]
    7a44:	2b00      	cmp	r3, #0
    7a46:	d0fb      	beq.n	7a40 <_read_r+0x1c>
    7a48:	6023      	str	r3, [r4, #0]
    7a4a:	bd38      	pop	{r3, r4, r5, pc}
    7a4c:	2000285c 	.word	0x2000285c

00007a50 <_sbrk_r>:
    7a50:	b538      	push	{r3, r4, r5, lr}
    7a52:	4d07      	ldr	r5, [pc, #28]	; (7a70 <_sbrk_r+0x20>)
    7a54:	2200      	movs	r2, #0
    7a56:	4604      	mov	r4, r0
    7a58:	4608      	mov	r0, r1
    7a5a:	602a      	str	r2, [r5, #0]
    7a5c:	f7fb ff74 	bl	3948 <_sbrk>
    7a60:	1c43      	adds	r3, r0, #1
    7a62:	d000      	beq.n	7a66 <_sbrk_r+0x16>
    7a64:	bd38      	pop	{r3, r4, r5, pc}
    7a66:	682b      	ldr	r3, [r5, #0]
    7a68:	2b00      	cmp	r3, #0
    7a6a:	d0fb      	beq.n	7a64 <_sbrk_r+0x14>
    7a6c:	6023      	str	r3, [r4, #0]
    7a6e:	bd38      	pop	{r3, r4, r5, pc}
    7a70:	2000285c 	.word	0x2000285c

00007a74 <_write_r>:
    7a74:	b538      	push	{r3, r4, r5, lr}
    7a76:	460c      	mov	r4, r1
    7a78:	4d08      	ldr	r5, [pc, #32]	; (7a9c <_write_r+0x28>)
    7a7a:	4684      	mov	ip, r0
    7a7c:	4611      	mov	r1, r2
    7a7e:	4620      	mov	r0, r4
    7a80:	461a      	mov	r2, r3
    7a82:	2300      	movs	r3, #0
    7a84:	602b      	str	r3, [r5, #0]
    7a86:	4664      	mov	r4, ip
    7a88:	f7fa fe54 	bl	2734 <_write>
    7a8c:	1c43      	adds	r3, r0, #1
    7a8e:	d000      	beq.n	7a92 <_write_r+0x1e>
    7a90:	bd38      	pop	{r3, r4, r5, pc}
    7a92:	682b      	ldr	r3, [r5, #0]
    7a94:	2b00      	cmp	r3, #0
    7a96:	d0fb      	beq.n	7a90 <_write_r+0x1c>
    7a98:	6023      	str	r3, [r4, #0]
    7a9a:	bd38      	pop	{r3, r4, r5, pc}
    7a9c:	2000285c 	.word	0x2000285c

00007aa0 <__errno>:
    7aa0:	4b01      	ldr	r3, [pc, #4]	; (7aa8 <__errno+0x8>)
    7aa2:	6818      	ldr	r0, [r3, #0]
    7aa4:	4770      	bx	lr
    7aa6:	bf00      	nop
    7aa8:	20001b54 	.word	0x20001b54

00007aac <__libc_init_array>:
    7aac:	b570      	push	{r4, r5, r6, lr}
    7aae:	4e0d      	ldr	r6, [pc, #52]	; (7ae4 <__libc_init_array+0x38>)
    7ab0:	4d0d      	ldr	r5, [pc, #52]	; (7ae8 <__libc_init_array+0x3c>)
    7ab2:	1b76      	subs	r6, r6, r5
    7ab4:	10b6      	asrs	r6, r6, #2
    7ab6:	d006      	beq.n	7ac6 <__libc_init_array+0x1a>
    7ab8:	2400      	movs	r4, #0
    7aba:	f855 3b04 	ldr.w	r3, [r5], #4
    7abe:	3401      	adds	r4, #1
    7ac0:	4798      	blx	r3
    7ac2:	42a6      	cmp	r6, r4
    7ac4:	d1f9      	bne.n	7aba <__libc_init_array+0xe>
    7ac6:	4e09      	ldr	r6, [pc, #36]	; (7aec <__libc_init_array+0x40>)
    7ac8:	4d09      	ldr	r5, [pc, #36]	; (7af0 <__libc_init_array+0x44>)
    7aca:	1b76      	subs	r6, r6, r5
    7acc:	f004 fd60 	bl	c590 <___init_veneer>
    7ad0:	10b6      	asrs	r6, r6, #2
    7ad2:	d006      	beq.n	7ae2 <__libc_init_array+0x36>
    7ad4:	2400      	movs	r4, #0
    7ad6:	f855 3b04 	ldr.w	r3, [r5], #4
    7ada:	3401      	adds	r4, #1
    7adc:	4798      	blx	r3
    7ade:	42a6      	cmp	r6, r4
    7ae0:	d1f9      	bne.n	7ad6 <__libc_init_array+0x2a>
    7ae2:	bd70      	pop	{r4, r5, r6, pc}
    7ae4:	60002000 	.word	0x60002000
    7ae8:	60002000 	.word	0x60002000
    7aec:	60002008 	.word	0x60002008
    7af0:	60002000 	.word	0x60002000

00007af4 <__retarget_lock_init_recursive>:
    7af4:	4770      	bx	lr
    7af6:	bf00      	nop

00007af8 <__retarget_lock_close_recursive>:
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop

00007afc <__retarget_lock_acquire_recursive>:
    7afc:	4770      	bx	lr
    7afe:	bf00      	nop

00007b00 <__retarget_lock_release_recursive>:
    7b00:	4770      	bx	lr
    7b02:	bf00      	nop
	...
    7b20:	eba2 0003 	sub.w	r0, r2, r3
    7b24:	4770      	bx	lr
    7b26:	bf00      	nop

00007b28 <strcmp>:
    7b28:	7802      	ldrb	r2, [r0, #0]
    7b2a:	780b      	ldrb	r3, [r1, #0]
    7b2c:	2a01      	cmp	r2, #1
    7b2e:	bf28      	it	cs
    7b30:	429a      	cmpcs	r2, r3
    7b32:	d1f5      	bne.n	7b20 <__retarget_lock_release_recursive+0x20>
    7b34:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    7b38:	ea40 0401 	orr.w	r4, r0, r1
    7b3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7b40:	f06f 0c00 	mvn.w	ip, #0
    7b44:	ea4f 7244 	mov.w	r2, r4, lsl #29
    7b48:	b312      	cbz	r2, 7b90 <strcmp+0x68>
    7b4a:	ea80 0401 	eor.w	r4, r0, r1
    7b4e:	f014 0f07 	tst.w	r4, #7
    7b52:	d16a      	bne.n	7c2a <strcmp+0x102>
    7b54:	f000 0407 	and.w	r4, r0, #7
    7b58:	f020 0007 	bic.w	r0, r0, #7
    7b5c:	f004 0503 	and.w	r5, r4, #3
    7b60:	f021 0107 	bic.w	r1, r1, #7
    7b64:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7b68:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    7b6c:	f014 0f04 	tst.w	r4, #4
    7b70:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7b74:	fa0c f405 	lsl.w	r4, ip, r5
    7b78:	ea62 0204 	orn	r2, r2, r4
    7b7c:	ea66 0604 	orn	r6, r6, r4
    7b80:	d00a      	beq.n	7b98 <strcmp+0x70>
    7b82:	ea63 0304 	orn	r3, r3, r4
    7b86:	4662      	mov	r2, ip
    7b88:	ea67 0704 	orn	r7, r7, r4
    7b8c:	4666      	mov	r6, ip
    7b8e:	e003      	b.n	7b98 <strcmp+0x70>
    7b90:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    7b94:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7b98:	fa82 f54c 	uadd8	r5, r2, ip
    7b9c:	ea82 0406 	eor.w	r4, r2, r6
    7ba0:	faa4 f48c 	sel	r4, r4, ip
    7ba4:	bb6c      	cbnz	r4, 7c02 <strcmp+0xda>
    7ba6:	fa83 f54c 	uadd8	r5, r3, ip
    7baa:	ea83 0507 	eor.w	r5, r3, r7
    7bae:	faa5 f58c 	sel	r5, r5, ip
    7bb2:	b995      	cbnz	r5, 7bda <strcmp+0xb2>
    7bb4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    7bb8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    7bbc:	fa82 f54c 	uadd8	r5, r2, ip
    7bc0:	ea82 0406 	eor.w	r4, r2, r6
    7bc4:	faa4 f48c 	sel	r4, r4, ip
    7bc8:	fa83 f54c 	uadd8	r5, r3, ip
    7bcc:	ea83 0507 	eor.w	r5, r3, r7
    7bd0:	faa5 f58c 	sel	r5, r5, ip
    7bd4:	4325      	orrs	r5, r4
    7bd6:	d0db      	beq.n	7b90 <strcmp+0x68>
    7bd8:	b99c      	cbnz	r4, 7c02 <strcmp+0xda>
    7bda:	ba2d      	rev	r5, r5
    7bdc:	fab5 f485 	clz	r4, r5
    7be0:	f024 0407 	bic.w	r4, r4, #7
    7be4:	fa27 f104 	lsr.w	r1, r7, r4
    7be8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7bec:	fa23 f304 	lsr.w	r3, r3, r4
    7bf0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7bf4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7bf8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7bfc:	eba0 0001 	sub.w	r0, r0, r1
    7c00:	4770      	bx	lr
    7c02:	ba24      	rev	r4, r4
    7c04:	fab4 f484 	clz	r4, r4
    7c08:	f024 0407 	bic.w	r4, r4, #7
    7c0c:	fa26 f104 	lsr.w	r1, r6, r4
    7c10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7c14:	fa22 f204 	lsr.w	r2, r2, r4
    7c18:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7c1c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7c20:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7c24:	eba0 0001 	sub.w	r0, r0, r1
    7c28:	4770      	bx	lr
    7c2a:	f014 0f03 	tst.w	r4, #3
    7c2e:	d13c      	bne.n	7caa <strcmp+0x182>
    7c30:	f010 0403 	ands.w	r4, r0, #3
    7c34:	d128      	bne.n	7c88 <strcmp+0x160>
    7c36:	f850 2b08 	ldr.w	r2, [r0], #8
    7c3a:	f851 3b08 	ldr.w	r3, [r1], #8
    7c3e:	fa82 f54c 	uadd8	r5, r2, ip
    7c42:	ea82 0503 	eor.w	r5, r2, r3
    7c46:	faa5 f58c 	sel	r5, r5, ip
    7c4a:	b95d      	cbnz	r5, 7c64 <strcmp+0x13c>
    7c4c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7c54:	fa82 f54c 	uadd8	r5, r2, ip
    7c58:	ea82 0503 	eor.w	r5, r2, r3
    7c5c:	faa5 f58c 	sel	r5, r5, ip
    7c60:	2d00      	cmp	r5, #0
    7c62:	d0e8      	beq.n	7c36 <strcmp+0x10e>
    7c64:	ba2d      	rev	r5, r5
    7c66:	fab5 f485 	clz	r4, r5
    7c6a:	f024 0407 	bic.w	r4, r4, #7
    7c6e:	fa23 f104 	lsr.w	r1, r3, r4
    7c72:	fa22 f204 	lsr.w	r2, r2, r4
    7c76:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7c7a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7c7e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7c82:	eba0 0001 	sub.w	r0, r0, r1
    7c86:	4770      	bx	lr
    7c88:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    7c8c:	f020 0003 	bic.w	r0, r0, #3
    7c90:	f850 2b08 	ldr.w	r2, [r0], #8
    7c94:	f021 0103 	bic.w	r1, r1, #3
    7c98:	f851 3b08 	ldr.w	r3, [r1], #8
    7c9c:	fa0c f404 	lsl.w	r4, ip, r4
    7ca0:	ea62 0204 	orn	r2, r2, r4
    7ca4:	ea63 0304 	orn	r3, r3, r4
    7ca8:	e7c9      	b.n	7c3e <strcmp+0x116>
    7caa:	f010 0403 	ands.w	r4, r0, #3
    7cae:	d01a      	beq.n	7ce6 <strcmp+0x1be>
    7cb0:	eba1 0104 	sub.w	r1, r1, r4
    7cb4:	f020 0003 	bic.w	r0, r0, #3
    7cb8:	07e4      	lsls	r4, r4, #31
    7cba:	f850 2b04 	ldr.w	r2, [r0], #4
    7cbe:	d006      	beq.n	7cce <strcmp+0x1a6>
    7cc0:	d20f      	bcs.n	7ce2 <strcmp+0x1ba>
    7cc2:	788b      	ldrb	r3, [r1, #2]
    7cc4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    7cc8:	1ae4      	subs	r4, r4, r3
    7cca:	d106      	bne.n	7cda <strcmp+0x1b2>
    7ccc:	b12b      	cbz	r3, 7cda <strcmp+0x1b2>
    7cce:	78cb      	ldrb	r3, [r1, #3]
    7cd0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    7cd4:	1ae4      	subs	r4, r4, r3
    7cd6:	d100      	bne.n	7cda <strcmp+0x1b2>
    7cd8:	b91b      	cbnz	r3, 7ce2 <strcmp+0x1ba>
    7cda:	4620      	mov	r0, r4
    7cdc:	f85d 4b10 	ldr.w	r4, [sp], #16
    7ce0:	4770      	bx	lr
    7ce2:	f101 0104 	add.w	r1, r1, #4
    7ce6:	f850 2b04 	ldr.w	r2, [r0], #4
    7cea:	07cc      	lsls	r4, r1, #31
    7cec:	f021 0103 	bic.w	r1, r1, #3
    7cf0:	f851 3b04 	ldr.w	r3, [r1], #4
    7cf4:	d848      	bhi.n	7d88 <strcmp+0x260>
    7cf6:	d224      	bcs.n	7d42 <strcmp+0x21a>
    7cf8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    7cfc:	fa82 f54c 	uadd8	r5, r2, ip
    7d00:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    7d04:	faa5 f58c 	sel	r5, r5, ip
    7d08:	d10a      	bne.n	7d20 <strcmp+0x1f8>
    7d0a:	b965      	cbnz	r5, 7d26 <strcmp+0x1fe>
    7d0c:	f851 3b04 	ldr.w	r3, [r1], #4
    7d10:	ea84 0402 	eor.w	r4, r4, r2
    7d14:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    7d18:	d10e      	bne.n	7d38 <strcmp+0x210>
    7d1a:	f850 2b04 	ldr.w	r2, [r0], #4
    7d1e:	e7eb      	b.n	7cf8 <strcmp+0x1d0>
    7d20:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7d24:	e055      	b.n	7dd2 <strcmp+0x2aa>
    7d26:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    7d2a:	d14d      	bne.n	7dc8 <strcmp+0x2a0>
    7d2c:	7808      	ldrb	r0, [r1, #0]
    7d2e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7d32:	f1c0 0000 	rsb	r0, r0, #0
    7d36:	4770      	bx	lr
    7d38:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7d3c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7d40:	e047      	b.n	7dd2 <strcmp+0x2aa>
    7d42:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    7d46:	fa82 f54c 	uadd8	r5, r2, ip
    7d4a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    7d4e:	faa5 f58c 	sel	r5, r5, ip
    7d52:	d10a      	bne.n	7d6a <strcmp+0x242>
    7d54:	b965      	cbnz	r5, 7d70 <strcmp+0x248>
    7d56:	f851 3b04 	ldr.w	r3, [r1], #4
    7d5a:	ea84 0402 	eor.w	r4, r4, r2
    7d5e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    7d62:	d10c      	bne.n	7d7e <strcmp+0x256>
    7d64:	f850 2b04 	ldr.w	r2, [r0], #4
    7d68:	e7eb      	b.n	7d42 <strcmp+0x21a>
    7d6a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    7d6e:	e030      	b.n	7dd2 <strcmp+0x2aa>
    7d70:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    7d74:	d128      	bne.n	7dc8 <strcmp+0x2a0>
    7d76:	880b      	ldrh	r3, [r1, #0]
    7d78:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7d7c:	e029      	b.n	7dd2 <strcmp+0x2aa>
    7d7e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7d82:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    7d86:	e024      	b.n	7dd2 <strcmp+0x2aa>
    7d88:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    7d8c:	fa82 f54c 	uadd8	r5, r2, ip
    7d90:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    7d94:	faa5 f58c 	sel	r5, r5, ip
    7d98:	d10a      	bne.n	7db0 <strcmp+0x288>
    7d9a:	b965      	cbnz	r5, 7db6 <strcmp+0x28e>
    7d9c:	f851 3b04 	ldr.w	r3, [r1], #4
    7da0:	ea84 0402 	eor.w	r4, r4, r2
    7da4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    7da8:	d109      	bne.n	7dbe <strcmp+0x296>
    7daa:	f850 2b04 	ldr.w	r2, [r0], #4
    7dae:	e7eb      	b.n	7d88 <strcmp+0x260>
    7db0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    7db4:	e00d      	b.n	7dd2 <strcmp+0x2aa>
    7db6:	f015 0fff 	tst.w	r5, #255	; 0xff
    7dba:	d105      	bne.n	7dc8 <strcmp+0x2a0>
    7dbc:	680b      	ldr	r3, [r1, #0]
    7dbe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    7dc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7dc6:	e004      	b.n	7dd2 <strcmp+0x2aa>
    7dc8:	f04f 0000 	mov.w	r0, #0
    7dcc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7dd0:	4770      	bx	lr
    7dd2:	ba12      	rev	r2, r2
    7dd4:	ba1b      	rev	r3, r3
    7dd6:	fa82 f44c 	uadd8	r4, r2, ip
    7dda:	ea82 0403 	eor.w	r4, r2, r3
    7dde:	faa4 f58c 	sel	r5, r4, ip
    7de2:	fab5 f485 	clz	r4, r5
    7de6:	fa02 f204 	lsl.w	r2, r2, r4
    7dea:	fa03 f304 	lsl.w	r3, r3, r4
    7dee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    7df2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7df6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    7dfa:	4770      	bx	lr

00007dfc <strcpy>:
    7dfc:	ea80 0201 	eor.w	r2, r0, r1
    7e00:	4684      	mov	ip, r0
    7e02:	f012 0f03 	tst.w	r2, #3
    7e06:	d14f      	bne.n	7ea8 <strcpy+0xac>
    7e08:	f011 0f03 	tst.w	r1, #3
    7e0c:	d132      	bne.n	7e74 <strcpy+0x78>
    7e0e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    7e12:	f011 0f04 	tst.w	r1, #4
    7e16:	f851 3b04 	ldr.w	r3, [r1], #4
    7e1a:	d00b      	beq.n	7e34 <strcpy+0x38>
    7e1c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7e20:	439a      	bics	r2, r3
    7e22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7e26:	bf04      	itt	eq
    7e28:	f84c 3b04 	streq.w	r3, [ip], #4
    7e2c:	f851 3b04 	ldreq.w	r3, [r1], #4
    7e30:	d116      	bne.n	7e60 <strcpy+0x64>
    7e32:	bf00      	nop
    7e34:	f851 4b04 	ldr.w	r4, [r1], #4
    7e38:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7e3c:	439a      	bics	r2, r3
    7e3e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7e42:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7e46:	d10b      	bne.n	7e60 <strcpy+0x64>
    7e48:	f84c 3b04 	str.w	r3, [ip], #4
    7e4c:	43a2      	bics	r2, r4
    7e4e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7e52:	bf04      	itt	eq
    7e54:	f851 3b04 	ldreq.w	r3, [r1], #4
    7e58:	f84c 4b04 	streq.w	r4, [ip], #4
    7e5c:	d0ea      	beq.n	7e34 <strcpy+0x38>
    7e5e:	4623      	mov	r3, r4
    7e60:	f80c 3b01 	strb.w	r3, [ip], #1
    7e64:	f013 0fff 	tst.w	r3, #255	; 0xff
    7e68:	ea4f 2333 	mov.w	r3, r3, ror #8
    7e6c:	d1f8      	bne.n	7e60 <strcpy+0x64>
    7e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    7e72:	4770      	bx	lr
    7e74:	f011 0f01 	tst.w	r1, #1
    7e78:	d006      	beq.n	7e88 <strcpy+0x8c>
    7e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
    7e7e:	f80c 2b01 	strb.w	r2, [ip], #1
    7e82:	2a00      	cmp	r2, #0
    7e84:	bf08      	it	eq
    7e86:	4770      	bxeq	lr
    7e88:	f011 0f02 	tst.w	r1, #2
    7e8c:	d0bf      	beq.n	7e0e <strcpy+0x12>
    7e8e:	f831 2b02 	ldrh.w	r2, [r1], #2
    7e92:	f012 0fff 	tst.w	r2, #255	; 0xff
    7e96:	bf16      	itet	ne
    7e98:	f82c 2b02 	strhne.w	r2, [ip], #2
    7e9c:	f88c 2000 	strbeq.w	r2, [ip]
    7ea0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    7ea4:	d1b3      	bne.n	7e0e <strcpy+0x12>
    7ea6:	4770      	bx	lr
    7ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
    7eac:	f80c 2b01 	strb.w	r2, [ip], #1
    7eb0:	2a00      	cmp	r2, #0
    7eb2:	d1f9      	bne.n	7ea8 <strcpy+0xac>
    7eb4:	4770      	bx	lr
    7eb6:	bf00      	nop
	...

00007ec0 <strlen>:
    7ec0:	f890 f000 	pld	[r0]
    7ec4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7ec8:	f020 0107 	bic.w	r1, r0, #7
    7ecc:	f06f 0c00 	mvn.w	ip, #0
    7ed0:	f010 0407 	ands.w	r4, r0, #7
    7ed4:	f891 f020 	pld	[r1, #32]
    7ed8:	f040 8049 	bne.w	7f6e <strlen+0xae>
    7edc:	f04f 0400 	mov.w	r4, #0
    7ee0:	f06f 0007 	mvn.w	r0, #7
    7ee4:	e9d1 2300 	ldrd	r2, r3, [r1]
    7ee8:	f891 f040 	pld	[r1, #64]	; 0x40
    7eec:	f100 0008 	add.w	r0, r0, #8
    7ef0:	fa82 f24c 	uadd8	r2, r2, ip
    7ef4:	faa4 f28c 	sel	r2, r4, ip
    7ef8:	fa83 f34c 	uadd8	r3, r3, ip
    7efc:	faa2 f38c 	sel	r3, r2, ip
    7f00:	bb4b      	cbnz	r3, 7f56 <strlen+0x96>
    7f02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7f06:	fa82 f24c 	uadd8	r2, r2, ip
    7f0a:	f100 0008 	add.w	r0, r0, #8
    7f0e:	faa4 f28c 	sel	r2, r4, ip
    7f12:	fa83 f34c 	uadd8	r3, r3, ip
    7f16:	faa2 f38c 	sel	r3, r2, ip
    7f1a:	b9e3      	cbnz	r3, 7f56 <strlen+0x96>
    7f1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7f20:	fa82 f24c 	uadd8	r2, r2, ip
    7f24:	f100 0008 	add.w	r0, r0, #8
    7f28:	faa4 f28c 	sel	r2, r4, ip
    7f2c:	fa83 f34c 	uadd8	r3, r3, ip
    7f30:	faa2 f38c 	sel	r3, r2, ip
    7f34:	b97b      	cbnz	r3, 7f56 <strlen+0x96>
    7f36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    7f3a:	f101 0120 	add.w	r1, r1, #32
    7f3e:	fa82 f24c 	uadd8	r2, r2, ip
    7f42:	f100 0008 	add.w	r0, r0, #8
    7f46:	faa4 f28c 	sel	r2, r4, ip
    7f4a:	fa83 f34c 	uadd8	r3, r3, ip
    7f4e:	faa2 f38c 	sel	r3, r2, ip
    7f52:	2b00      	cmp	r3, #0
    7f54:	d0c6      	beq.n	7ee4 <strlen+0x24>
    7f56:	2a00      	cmp	r2, #0
    7f58:	bf04      	itt	eq
    7f5a:	3004      	addeq	r0, #4
    7f5c:	461a      	moveq	r2, r3
    7f5e:	ba12      	rev	r2, r2
    7f60:	fab2 f282 	clz	r2, r2
    7f64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    7f68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    7f6c:	4770      	bx	lr
    7f6e:	e9d1 2300 	ldrd	r2, r3, [r1]
    7f72:	f004 0503 	and.w	r5, r4, #3
    7f76:	f1c4 0000 	rsb	r0, r4, #0
    7f7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7f7e:	f014 0f04 	tst.w	r4, #4
    7f82:	f891 f040 	pld	[r1, #64]	; 0x40
    7f86:	fa0c f505 	lsl.w	r5, ip, r5
    7f8a:	ea62 0205 	orn	r2, r2, r5
    7f8e:	bf1c      	itt	ne
    7f90:	ea63 0305 	ornne	r3, r3, r5
    7f94:	4662      	movne	r2, ip
    7f96:	f04f 0400 	mov.w	r4, #0
    7f9a:	e7a9      	b.n	7ef0 <strlen+0x30>
    7f9c:	0000      	movs	r0, r0
	...

00007fa0 <nan>:
    7fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 7fa8 <nan+0x8>
    7fa4:	4770      	bx	lr
    7fa6:	bf00      	nop
    7fa8:	00000000 	.word	0x00000000
    7fac:	7ff80000 	.word	0x7ff80000

00007fb0 <nanf>:
    7fb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 7fb8 <nanf+0x8>
    7fb4:	4770      	bx	lr
    7fb6:	bf00      	nop
    7fb8:	7fc00000 	.word	0x7fc00000

00007fbc <__register_exitproc>:
    7fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fc0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8040 <__register_exitproc+0x84>
    7fc4:	4606      	mov	r6, r0
    7fc6:	f8da 0000 	ldr.w	r0, [sl]
    7fca:	4698      	mov	r8, r3
    7fcc:	460f      	mov	r7, r1
    7fce:	4691      	mov	r9, r2
    7fd0:	f7ff fd94 	bl	7afc <__retarget_lock_acquire_recursive>
    7fd4:	4b18      	ldr	r3, [pc, #96]	; (8038 <__register_exitproc+0x7c>)
    7fd6:	681c      	ldr	r4, [r3, #0]
    7fd8:	b324      	cbz	r4, 8024 <__register_exitproc+0x68>
    7fda:	6865      	ldr	r5, [r4, #4]
    7fdc:	2d1f      	cmp	r5, #31
    7fde:	dc24      	bgt.n	802a <__register_exitproc+0x6e>
    7fe0:	b95e      	cbnz	r6, 7ffa <__register_exitproc+0x3e>
    7fe2:	1c6b      	adds	r3, r5, #1
    7fe4:	3502      	adds	r5, #2
    7fe6:	f8da 0000 	ldr.w	r0, [sl]
    7fea:	6063      	str	r3, [r4, #4]
    7fec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    7ff0:	f7ff fd86 	bl	7b00 <__retarget_lock_release_recursive>
    7ff4:	2000      	movs	r0, #0
    7ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ffa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    7ffe:	2301      	movs	r3, #1
    8000:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8004:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8008:	40ab      	lsls	r3, r5
    800a:	431a      	orrs	r2, r3
    800c:	2e02      	cmp	r6, #2
    800e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8012:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8016:	d1e4      	bne.n	7fe2 <__register_exitproc+0x26>
    8018:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    801c:	431a      	orrs	r2, r3
    801e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8022:	e7de      	b.n	7fe2 <__register_exitproc+0x26>
    8024:	4c05      	ldr	r4, [pc, #20]	; (803c <__register_exitproc+0x80>)
    8026:	601c      	str	r4, [r3, #0]
    8028:	e7d7      	b.n	7fda <__register_exitproc+0x1e>
    802a:	f8da 0000 	ldr.w	r0, [sl]
    802e:	f7ff fd67 	bl	7b00 <__retarget_lock_release_recursive>
    8032:	f04f 30ff 	mov.w	r0, #4294967295
    8036:	e7de      	b.n	7ff6 <__register_exitproc+0x3a>
    8038:	20002538 	.word	0x20002538
    803c:	2000253c 	.word	0x2000253c
    8040:	200015c0 	.word	0x200015c0

00008044 <_malloc_trim_r>:
    8044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8046:	4f24      	ldr	r7, [pc, #144]	; (80d8 <_malloc_trim_r+0x94>)
    8048:	460c      	mov	r4, r1
    804a:	4606      	mov	r6, r0
    804c:	f7fd fd28 	bl	5aa0 <__malloc_lock>
    8050:	68bb      	ldr	r3, [r7, #8]
    8052:	685d      	ldr	r5, [r3, #4]
    8054:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    8058:	310f      	adds	r1, #15
    805a:	f025 0503 	bic.w	r5, r5, #3
    805e:	194b      	adds	r3, r1, r5
    8060:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    8064:	f023 030f 	bic.w	r3, r3, #15
    8068:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    806c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    8070:	db07      	blt.n	8082 <_malloc_trim_r+0x3e>
    8072:	2100      	movs	r1, #0
    8074:	4630      	mov	r0, r6
    8076:	f7ff fceb 	bl	7a50 <_sbrk_r>
    807a:	68bb      	ldr	r3, [r7, #8]
    807c:	442b      	add	r3, r5
    807e:	4298      	cmp	r0, r3
    8080:	d004      	beq.n	808c <_malloc_trim_r+0x48>
    8082:	4630      	mov	r0, r6
    8084:	f7fd fd12 	bl	5aac <__malloc_unlock>
    8088:	2000      	movs	r0, #0
    808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    808c:	4261      	negs	r1, r4
    808e:	4630      	mov	r0, r6
    8090:	f7ff fcde 	bl	7a50 <_sbrk_r>
    8094:	3001      	adds	r0, #1
    8096:	d00d      	beq.n	80b4 <_malloc_trim_r+0x70>
    8098:	4a10      	ldr	r2, [pc, #64]	; (80dc <_malloc_trim_r+0x98>)
    809a:	68bb      	ldr	r3, [r7, #8]
    809c:	1b2d      	subs	r5, r5, r4
    809e:	f045 0501 	orr.w	r5, r5, #1
    80a2:	605d      	str	r5, [r3, #4]
    80a4:	6813      	ldr	r3, [r2, #0]
    80a6:	4630      	mov	r0, r6
    80a8:	1b1b      	subs	r3, r3, r4
    80aa:	6013      	str	r3, [r2, #0]
    80ac:	f7fd fcfe 	bl	5aac <__malloc_unlock>
    80b0:	2001      	movs	r0, #1
    80b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80b4:	2100      	movs	r1, #0
    80b6:	4630      	mov	r0, r6
    80b8:	f7ff fcca 	bl	7a50 <_sbrk_r>
    80bc:	68ba      	ldr	r2, [r7, #8]
    80be:	1a83      	subs	r3, r0, r2
    80c0:	2b0f      	cmp	r3, #15
    80c2:	ddde      	ble.n	8082 <_malloc_trim_r+0x3e>
    80c4:	f043 0301 	orr.w	r3, r3, #1
    80c8:	6053      	str	r3, [r2, #4]
    80ca:	4b05      	ldr	r3, [pc, #20]	; (80e0 <_malloc_trim_r+0x9c>)
    80cc:	4903      	ldr	r1, [pc, #12]	; (80dc <_malloc_trim_r+0x98>)
    80ce:	681b      	ldr	r3, [r3, #0]
    80d0:	1ac0      	subs	r0, r0, r3
    80d2:	6008      	str	r0, [r1, #0]
    80d4:	e7d5      	b.n	8082 <_malloc_trim_r+0x3e>
    80d6:	bf00      	nop
    80d8:	20001738 	.word	0x20001738
    80dc:	200026d8 	.word	0x200026d8
    80e0:	20001b40 	.word	0x20001b40

000080e4 <_free_r>:
    80e4:	2900      	cmp	r1, #0
    80e6:	d061      	beq.n	81ac <_free_r+0xc8>
    80e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80ea:	460c      	mov	r4, r1
    80ec:	4606      	mov	r6, r0
    80ee:	f7fd fcd7 	bl	5aa0 <__malloc_lock>
    80f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    80f6:	4f7b      	ldr	r7, [pc, #492]	; (82e4 <_free_r+0x200>)
    80f8:	f1a4 0508 	sub.w	r5, r4, #8
    80fc:	f022 0101 	bic.w	r1, r2, #1
    8100:	eb05 0c01 	add.w	ip, r5, r1
    8104:	68b8      	ldr	r0, [r7, #8]
    8106:	f8dc 3004 	ldr.w	r3, [ip, #4]
    810a:	4560      	cmp	r0, ip
    810c:	f023 0303 	bic.w	r3, r3, #3
    8110:	f000 808b 	beq.w	822a <_free_r+0x146>
    8114:	07d2      	lsls	r2, r2, #31
    8116:	f8cc 3004 	str.w	r3, [ip, #4]
    811a:	d432      	bmi.n	8182 <_free_r+0x9e>
    811c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8120:	1aad      	subs	r5, r5, r2
    8122:	4411      	add	r1, r2
    8124:	68aa      	ldr	r2, [r5, #8]
    8126:	f107 0008 	add.w	r0, r7, #8
    812a:	4282      	cmp	r2, r0
    812c:	d06a      	beq.n	8204 <_free_r+0x120>
    812e:	eb0c 0403 	add.w	r4, ip, r3
    8132:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8136:	68ec      	ldr	r4, [r5, #12]
    8138:	60d4      	str	r4, [r2, #12]
    813a:	f01e 0f01 	tst.w	lr, #1
    813e:	60a2      	str	r2, [r4, #8]
    8140:	f000 8097 	beq.w	8272 <_free_r+0x18e>
    8144:	f041 0301 	orr.w	r3, r1, #1
    8148:	606b      	str	r3, [r5, #4]
    814a:	f8cc 1000 	str.w	r1, [ip]
    814e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8152:	d235      	bcs.n	81c0 <_free_r+0xdc>
    8154:	6878      	ldr	r0, [r7, #4]
    8156:	08cb      	lsrs	r3, r1, #3
    8158:	2201      	movs	r2, #1
    815a:	0949      	lsrs	r1, r1, #5
    815c:	3301      	adds	r3, #1
    815e:	408a      	lsls	r2, r1
    8160:	4302      	orrs	r2, r0
    8162:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    8166:	607a      	str	r2, [r7, #4]
    8168:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    816c:	3a08      	subs	r2, #8
    816e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    8172:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    8176:	60cd      	str	r5, [r1, #12]
    8178:	4630      	mov	r0, r6
    817a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    817e:	f7fd bc95 	b.w	5aac <__malloc_unlock>
    8182:	eb0c 0203 	add.w	r2, ip, r3
    8186:	6852      	ldr	r2, [r2, #4]
    8188:	07d0      	lsls	r0, r2, #31
    818a:	d410      	bmi.n	81ae <_free_r+0xca>
    818c:	4419      	add	r1, r3
    818e:	f107 0008 	add.w	r0, r7, #8
    8192:	f8dc 3008 	ldr.w	r3, [ip, #8]
    8196:	4283      	cmp	r3, r0
    8198:	d073      	beq.n	8282 <_free_r+0x19e>
    819a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    819e:	60da      	str	r2, [r3, #12]
    81a0:	6093      	str	r3, [r2, #8]
    81a2:	f041 0301 	orr.w	r3, r1, #1
    81a6:	606b      	str	r3, [r5, #4]
    81a8:	5069      	str	r1, [r5, r1]
    81aa:	e7d0      	b.n	814e <_free_r+0x6a>
    81ac:	4770      	bx	lr
    81ae:	f041 0301 	orr.w	r3, r1, #1
    81b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    81b6:	f844 3c04 	str.w	r3, [r4, #-4]
    81ba:	f8cc 1000 	str.w	r1, [ip]
    81be:	d3c9      	bcc.n	8154 <_free_r+0x70>
    81c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    81c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    81c8:	d248      	bcs.n	825c <_free_r+0x178>
    81ca:	098b      	lsrs	r3, r1, #6
    81cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    81d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    81d4:	00c3      	lsls	r3, r0, #3
    81d6:	18f8      	adds	r0, r7, r3
    81d8:	58fb      	ldr	r3, [r7, r3]
    81da:	3808      	subs	r0, #8
    81dc:	4298      	cmp	r0, r3
    81de:	d059      	beq.n	8294 <_free_r+0x1b0>
    81e0:	685a      	ldr	r2, [r3, #4]
    81e2:	f022 0203 	bic.w	r2, r2, #3
    81e6:	428a      	cmp	r2, r1
    81e8:	d902      	bls.n	81f0 <_free_r+0x10c>
    81ea:	689b      	ldr	r3, [r3, #8]
    81ec:	4298      	cmp	r0, r3
    81ee:	d1f7      	bne.n	81e0 <_free_r+0xfc>
    81f0:	68d8      	ldr	r0, [r3, #12]
    81f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    81f6:	6085      	str	r5, [r0, #8]
    81f8:	60dd      	str	r5, [r3, #12]
    81fa:	4630      	mov	r0, r6
    81fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8200:	f7fd bc54 	b.w	5aac <__malloc_unlock>
    8204:	eb0c 0203 	add.w	r2, ip, r3
    8208:	6852      	ldr	r2, [r2, #4]
    820a:	07d2      	lsls	r2, r2, #31
    820c:	d463      	bmi.n	82d6 <_free_r+0x1f2>
    820e:	440b      	add	r3, r1
    8210:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    8214:	60ca      	str	r2, [r1, #12]
    8216:	6091      	str	r1, [r2, #8]
    8218:	f043 0201 	orr.w	r2, r3, #1
    821c:	606a      	str	r2, [r5, #4]
    821e:	4630      	mov	r0, r6
    8220:	50eb      	str	r3, [r5, r3]
    8222:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8226:	f7fd bc41 	b.w	5aac <__malloc_unlock>
    822a:	440b      	add	r3, r1
    822c:	07d1      	lsls	r1, r2, #31
    822e:	d407      	bmi.n	8240 <_free_r+0x15c>
    8230:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8234:	1aad      	subs	r5, r5, r2
    8236:	4413      	add	r3, r2
    8238:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    823c:	60ca      	str	r2, [r1, #12]
    823e:	6091      	str	r1, [r2, #8]
    8240:	f043 0201 	orr.w	r2, r3, #1
    8244:	606a      	str	r2, [r5, #4]
    8246:	4a28      	ldr	r2, [pc, #160]	; (82e8 <_free_r+0x204>)
    8248:	60bd      	str	r5, [r7, #8]
    824a:	6812      	ldr	r2, [r2, #0]
    824c:	429a      	cmp	r2, r3
    824e:	d893      	bhi.n	8178 <_free_r+0x94>
    8250:	4b26      	ldr	r3, [pc, #152]	; (82ec <_free_r+0x208>)
    8252:	4630      	mov	r0, r6
    8254:	6819      	ldr	r1, [r3, #0]
    8256:	f7ff fef5 	bl	8044 <_malloc_trim_r>
    825a:	e78d      	b.n	8178 <_free_r+0x94>
    825c:	2b14      	cmp	r3, #20
    825e:	d90a      	bls.n	8276 <_free_r+0x192>
    8260:	2b54      	cmp	r3, #84	; 0x54
    8262:	d81f      	bhi.n	82a4 <_free_r+0x1c0>
    8264:	0b0b      	lsrs	r3, r1, #12
    8266:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    826a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    826e:	00c3      	lsls	r3, r0, #3
    8270:	e7b1      	b.n	81d6 <_free_r+0xf2>
    8272:	4419      	add	r1, r3
    8274:	e78d      	b.n	8192 <_free_r+0xae>
    8276:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    827a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    827e:	00c3      	lsls	r3, r0, #3
    8280:	e7a9      	b.n	81d6 <_free_r+0xf2>
    8282:	f041 0301 	orr.w	r3, r1, #1
    8286:	e9c7 5504 	strd	r5, r5, [r7, #16]
    828a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    828e:	606b      	str	r3, [r5, #4]
    8290:	5069      	str	r1, [r5, r1]
    8292:	e771      	b.n	8178 <_free_r+0x94>
    8294:	6879      	ldr	r1, [r7, #4]
    8296:	1092      	asrs	r2, r2, #2
    8298:	2401      	movs	r4, #1
    829a:	fa04 f202 	lsl.w	r2, r4, r2
    829e:	430a      	orrs	r2, r1
    82a0:	607a      	str	r2, [r7, #4]
    82a2:	e7a6      	b.n	81f2 <_free_r+0x10e>
    82a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    82a8:	d806      	bhi.n	82b8 <_free_r+0x1d4>
    82aa:	0bcb      	lsrs	r3, r1, #15
    82ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    82b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    82b4:	00c3      	lsls	r3, r0, #3
    82b6:	e78e      	b.n	81d6 <_free_r+0xf2>
    82b8:	f240 5254 	movw	r2, #1364	; 0x554
    82bc:	4293      	cmp	r3, r2
    82be:	d806      	bhi.n	82ce <_free_r+0x1ea>
    82c0:	0c8b      	lsrs	r3, r1, #18
    82c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    82c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    82ca:	00c3      	lsls	r3, r0, #3
    82cc:	e783      	b.n	81d6 <_free_r+0xf2>
    82ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    82d2:	227e      	movs	r2, #126	; 0x7e
    82d4:	e77f      	b.n	81d6 <_free_r+0xf2>
    82d6:	f041 0301 	orr.w	r3, r1, #1
    82da:	606b      	str	r3, [r5, #4]
    82dc:	f8cc 1000 	str.w	r1, [ip]
    82e0:	e74a      	b.n	8178 <_free_r+0x94>
    82e2:	bf00      	nop
    82e4:	20001738 	.word	0x20001738
    82e8:	20001b44 	.word	0x20001b44
    82ec:	20002708 	.word	0x20002708

000082f0 <rshift>:
    82f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82f4:	6904      	ldr	r4, [r0, #16]
    82f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    82fa:	dd2f      	ble.n	835c <rshift+0x6c>
    82fc:	f100 0e14 	add.w	lr, r0, #20
    8300:	114e      	asrs	r6, r1, #5
    8302:	f011 0c1f 	ands.w	ip, r1, #31
    8306:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    830a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    830e:	d02b      	beq.n	8368 <rshift+0x78>
    8310:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    8314:	3304      	adds	r3, #4
    8316:	429d      	cmp	r5, r3
    8318:	fa21 f10c 	lsr.w	r1, r1, ip
    831c:	f1cc 0820 	rsb	r8, ip, #32
    8320:	d918      	bls.n	8354 <rshift+0x64>
    8322:	4677      	mov	r7, lr
    8324:	681a      	ldr	r2, [r3, #0]
    8326:	fa02 f208 	lsl.w	r2, r2, r8
    832a:	430a      	orrs	r2, r1
    832c:	f847 2b04 	str.w	r2, [r7], #4
    8330:	f853 1b04 	ldr.w	r1, [r3], #4
    8334:	429d      	cmp	r5, r3
    8336:	fa21 f10c 	lsr.w	r1, r1, ip
    833a:	d8f3      	bhi.n	8324 <rshift+0x34>
    833c:	1ba3      	subs	r3, r4, r6
    833e:	009b      	lsls	r3, r3, #2
    8340:	3b05      	subs	r3, #5
    8342:	089b      	lsrs	r3, r3, #2
    8344:	3301      	adds	r3, #1
    8346:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    834a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    834e:	b1c9      	cbz	r1, 8384 <rshift+0x94>
    8350:	3404      	adds	r4, #4
    8352:	e017      	b.n	8384 <rshift+0x94>
    8354:	6141      	str	r1, [r0, #20]
    8356:	4674      	mov	r4, lr
    8358:	2900      	cmp	r1, #0
    835a:	d1f9      	bne.n	8350 <rshift+0x60>
    835c:	2300      	movs	r3, #0
    835e:	6103      	str	r3, [r0, #16]
    8360:	2300      	movs	r3, #0
    8362:	6143      	str	r3, [r0, #20]
    8364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8368:	429d      	cmp	r5, r3
    836a:	bf88      	it	hi
    836c:	f100 0210 	addhi.w	r2, r0, #16
    8370:	d9f4      	bls.n	835c <rshift+0x6c>
    8372:	f853 1b04 	ldr.w	r1, [r3], #4
    8376:	f842 1f04 	str.w	r1, [r2, #4]!
    837a:	429d      	cmp	r5, r3
    837c:	d8f9      	bhi.n	8372 <rshift+0x82>
    837e:	1ba4      	subs	r4, r4, r6
    8380:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    8384:	eba4 030e 	sub.w	r3, r4, lr
    8388:	109b      	asrs	r3, r3, #2
    838a:	4574      	cmp	r4, lr
    838c:	6103      	str	r3, [r0, #16]
    838e:	d0e7      	beq.n	8360 <rshift+0x70>
    8390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008394 <__gethex>:
    8394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8398:	ed2d 8b02 	vpush	{d8}
    839c:	680c      	ldr	r4, [r1, #0]
    839e:	468b      	mov	fp, r1
    83a0:	78a1      	ldrb	r1, [r4, #2]
    83a2:	b085      	sub	sp, #20
    83a4:	2930      	cmp	r1, #48	; 0x30
    83a6:	ee08 0a10 	vmov	s16, r0
    83aa:	4692      	mov	sl, r2
    83ac:	9302      	str	r3, [sp, #8]
    83ae:	f040 81ce 	bne.w	874e <__gethex+0x3ba>
    83b2:	f06f 0001 	mvn.w	r0, #1
    83b6:	1b00      	subs	r0, r0, r4
    83b8:	1ce2      	adds	r2, r4, #3
    83ba:	1883      	adds	r3, r0, r2
    83bc:	4614      	mov	r4, r2
    83be:	f812 1b01 	ldrb.w	r1, [r2], #1
    83c2:	2930      	cmp	r1, #48	; 0x30
    83c4:	d0f9      	beq.n	83ba <__gethex+0x26>
    83c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; 86c8 <__gethex+0x334>
    83ca:	f818 2001 	ldrb.w	r2, [r8, r1]
    83ce:	2a00      	cmp	r2, #0
    83d0:	f000 80e5 	beq.w	859e <__gethex+0x20a>
    83d4:	7822      	ldrb	r2, [r4, #0]
    83d6:	2700      	movs	r7, #0
    83d8:	f818 2002 	ldrb.w	r2, [r8, r2]
    83dc:	463d      	mov	r5, r7
    83de:	4626      	mov	r6, r4
    83e0:	b12a      	cbz	r2, 83ee <__gethex+0x5a>
    83e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    83e6:	f818 2002 	ldrb.w	r2, [r8, r2]
    83ea:	2a00      	cmp	r2, #0
    83ec:	d1f9      	bne.n	83e2 <__gethex+0x4e>
    83ee:	49b5      	ldr	r1, [pc, #724]	; (86c4 <__gethex+0x330>)
    83f0:	9301      	str	r3, [sp, #4]
    83f2:	2201      	movs	r2, #1
    83f4:	4630      	mov	r0, r6
    83f6:	f7ff f85b 	bl	74b0 <strncmp>
    83fa:	9b01      	ldr	r3, [sp, #4]
    83fc:	4681      	mov	r9, r0
    83fe:	2800      	cmp	r0, #0
    8400:	d04d      	beq.n	849e <__gethex+0x10a>
    8402:	2d00      	cmp	r5, #0
    8404:	d14e      	bne.n	84a4 <__gethex+0x110>
    8406:	7832      	ldrb	r2, [r6, #0]
    8408:	46a9      	mov	r9, r5
    840a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    840e:	2a50      	cmp	r2, #80	; 0x50
    8410:	4635      	mov	r5, r6
    8412:	d050      	beq.n	84b6 <__gethex+0x122>
    8414:	f8cb 6000 	str.w	r6, [fp]
    8418:	2f00      	cmp	r7, #0
    841a:	d169      	bne.n	84f0 <__gethex+0x15c>
    841c:	1b2b      	subs	r3, r5, r4
    841e:	3b01      	subs	r3, #1
    8420:	2b07      	cmp	r3, #7
    8422:	4639      	mov	r1, r7
    8424:	dd04      	ble.n	8430 <__gethex+0x9c>
    8426:	105b      	asrs	r3, r3, #1
    8428:	2b07      	cmp	r3, #7
    842a:	f101 0101 	add.w	r1, r1, #1
    842e:	dcfa      	bgt.n	8426 <__gethex+0x92>
    8430:	ee18 0a10 	vmov	r0, s16
    8434:	f000 fb82 	bl	8b3c <_Balloc>
    8438:	4683      	mov	fp, r0
    843a:	2800      	cmp	r0, #0
    843c:	f000 8266 	beq.w	890c <__gethex+0x578>
    8440:	f100 0614 	add.w	r6, r0, #20
    8444:	42ac      	cmp	r4, r5
    8446:	9601      	str	r6, [sp, #4]
    8448:	f080 81d2 	bcs.w	87f0 <__gethex+0x45c>
    844c:	2700      	movs	r7, #0
    844e:	f8cd 900c 	str.w	r9, [sp, #12]
    8452:	499c      	ldr	r1, [pc, #624]	; (86c4 <__gethex+0x330>)
    8454:	46a1      	mov	r9, r4
    8456:	463c      	mov	r4, r7
    8458:	e00c      	b.n	8474 <__gethex+0xe0>
    845a:	2f20      	cmp	r7, #32
    845c:	d019      	beq.n	8492 <__gethex+0xfe>
    845e:	4638      	mov	r0, r7
    8460:	3704      	adds	r7, #4
    8462:	782a      	ldrb	r2, [r5, #0]
    8464:	f818 2002 	ldrb.w	r2, [r8, r2]
    8468:	f002 020f 	and.w	r2, r2, #15
    846c:	4082      	lsls	r2, r0
    846e:	4314      	orrs	r4, r2
    8470:	454d      	cmp	r5, r9
    8472:	d047      	beq.n	8504 <__gethex+0x170>
    8474:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    8478:	2a2e      	cmp	r2, #46	; 0x2e
    847a:	d1ee      	bne.n	845a <__gethex+0xc6>
    847c:	454d      	cmp	r5, r9
    847e:	d3ec      	bcc.n	845a <__gethex+0xc6>
    8480:	2201      	movs	r2, #1
    8482:	4628      	mov	r0, r5
    8484:	f7ff f814 	bl	74b0 <strncmp>
    8488:	498e      	ldr	r1, [pc, #568]	; (86c4 <__gethex+0x330>)
    848a:	2800      	cmp	r0, #0
    848c:	d0f0      	beq.n	8470 <__gethex+0xdc>
    848e:	2f20      	cmp	r7, #32
    8490:	d1e5      	bne.n	845e <__gethex+0xca>
    8492:	2000      	movs	r0, #0
    8494:	f846 4b04 	str.w	r4, [r6], #4
    8498:	2704      	movs	r7, #4
    849a:	4604      	mov	r4, r0
    849c:	e7e1      	b.n	8462 <__gethex+0xce>
    849e:	2d00      	cmp	r5, #0
    84a0:	f000 8142 	beq.w	8728 <__gethex+0x394>
    84a4:	7832      	ldrb	r2, [r6, #0]
    84a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    84aa:	1bad      	subs	r5, r5, r6
    84ac:	2a50      	cmp	r2, #80	; 0x50
    84ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    84b2:	4635      	mov	r5, r6
    84b4:	d1ae      	bne.n	8414 <__gethex+0x80>
    84b6:	786a      	ldrb	r2, [r5, #1]
    84b8:	2a2b      	cmp	r2, #43	; 0x2b
    84ba:	f000 8125 	beq.w	8708 <__gethex+0x374>
    84be:	2a2d      	cmp	r2, #45	; 0x2d
    84c0:	f000 80a5 	beq.w	860e <__gethex+0x27a>
    84c4:	1c6e      	adds	r6, r5, #1
    84c6:	2000      	movs	r0, #0
    84c8:	f818 1002 	ldrb.w	r1, [r8, r2]
    84cc:	1e4a      	subs	r2, r1, #1
    84ce:	2a18      	cmp	r2, #24
    84d0:	f200 809b 	bhi.w	860a <__gethex+0x276>
    84d4:	7872      	ldrb	r2, [r6, #1]
    84d6:	f818 2002 	ldrb.w	r2, [r8, r2]
    84da:	3910      	subs	r1, #16
    84dc:	3601      	adds	r6, #1
    84de:	2a00      	cmp	r2, #0
    84e0:	d15a      	bne.n	8598 <__gethex+0x204>
    84e2:	b100      	cbz	r0, 84e6 <__gethex+0x152>
    84e4:	4249      	negs	r1, r1
    84e6:	4489      	add	r9, r1
    84e8:	f8cb 6000 	str.w	r6, [fp]
    84ec:	2f00      	cmp	r7, #0
    84ee:	d095      	beq.n	841c <__gethex+0x88>
    84f0:	2b00      	cmp	r3, #0
    84f2:	bf14      	ite	ne
    84f4:	2500      	movne	r5, #0
    84f6:	2506      	moveq	r5, #6
    84f8:	4628      	mov	r0, r5
    84fa:	b005      	add	sp, #20
    84fc:	ecbd 8b02 	vpop	{d8}
    8500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8504:	f8dd 900c 	ldr.w	r9, [sp, #12]
    8508:	4623      	mov	r3, r4
    850a:	f846 3b04 	str.w	r3, [r6], #4
    850e:	4618      	mov	r0, r3
    8510:	9b01      	ldr	r3, [sp, #4]
    8512:	1af6      	subs	r6, r6, r3
    8514:	10b6      	asrs	r6, r6, #2
    8516:	f8cb 6010 	str.w	r6, [fp, #16]
    851a:	f000 fbe9 	bl	8cf0 <__hi0bits>
    851e:	0176      	lsls	r6, r6, #5
    8520:	f8da 4000 	ldr.w	r4, [sl]
    8524:	1a30      	subs	r0, r6, r0
    8526:	42a0      	cmp	r0, r4
    8528:	dc75      	bgt.n	8616 <__gethex+0x282>
    852a:	f2c0 80ef 	blt.w	870c <__gethex+0x378>
    852e:	2700      	movs	r7, #0
    8530:	f8da 3008 	ldr.w	r3, [sl, #8]
    8534:	454b      	cmp	r3, r9
    8536:	f2c0 8151 	blt.w	87dc <__gethex+0x448>
    853a:	f8da 3004 	ldr.w	r3, [sl, #4]
    853e:	454b      	cmp	r3, r9
    8540:	dd4a      	ble.n	85d8 <__gethex+0x244>
    8542:	eba3 0909 	sub.w	r9, r3, r9
    8546:	454c      	cmp	r4, r9
    8548:	f300 8082 	bgt.w	8650 <__gethex+0x2bc>
    854c:	f8da 200c 	ldr.w	r2, [sl, #12]
    8550:	2a02      	cmp	r2, #2
    8552:	f000 8165 	beq.w	8820 <__gethex+0x48c>
    8556:	2a03      	cmp	r2, #3
    8558:	f000 8181 	beq.w	885e <__gethex+0x4ca>
    855c:	2a01      	cmp	r2, #1
    855e:	f000 816f 	beq.w	8840 <__gethex+0x4ac>
    8562:	ee18 0a10 	vmov	r0, s16
    8566:	4659      	mov	r1, fp
    8568:	f000 fb0e 	bl	8b88 <_Bfree>
    856c:	2550      	movs	r5, #80	; 0x50
    856e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8570:	2300      	movs	r3, #0
    8572:	4628      	mov	r0, r5
    8574:	6013      	str	r3, [r2, #0]
    8576:	b005      	add	sp, #20
    8578:	ecbd 8b02 	vpop	{d8}
    857c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8580:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8584:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8588:	f1a2 0110 	sub.w	r1, r2, #16
    858c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8590:	f818 2002 	ldrb.w	r2, [r8, r2]
    8594:	2a00      	cmp	r2, #0
    8596:	d0a4      	beq.n	84e2 <__gethex+0x14e>
    8598:	2a19      	cmp	r2, #25
    859a:	ddf1      	ble.n	8580 <__gethex+0x1ec>
    859c:	e7a1      	b.n	84e2 <__gethex+0x14e>
    859e:	4949      	ldr	r1, [pc, #292]	; (86c4 <__gethex+0x330>)
    85a0:	9301      	str	r3, [sp, #4]
    85a2:	2201      	movs	r2, #1
    85a4:	4620      	mov	r0, r4
    85a6:	f7fe ff83 	bl	74b0 <strncmp>
    85aa:	9b01      	ldr	r3, [sp, #4]
    85ac:	2800      	cmp	r0, #0
    85ae:	d16d      	bne.n	868c <__gethex+0x2f8>
    85b0:	7861      	ldrb	r1, [r4, #1]
    85b2:	f818 2001 	ldrb.w	r2, [r8, r1]
    85b6:	1c65      	adds	r5, r4, #1
    85b8:	2a00      	cmp	r2, #0
    85ba:	d069      	beq.n	8690 <__gethex+0x2fc>
    85bc:	2930      	cmp	r1, #48	; 0x30
    85be:	462c      	mov	r4, r5
    85c0:	d105      	bne.n	85ce <__gethex+0x23a>
    85c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    85c6:	2b30      	cmp	r3, #48	; 0x30
    85c8:	d0fb      	beq.n	85c2 <__gethex+0x22e>
    85ca:	f818 2003 	ldrb.w	r2, [r8, r3]
    85ce:	fab2 f782 	clz	r7, r2
    85d2:	097f      	lsrs	r7, r7, #5
    85d4:	2301      	movs	r3, #1
    85d6:	e702      	b.n	83de <__gethex+0x4a>
    85d8:	2501      	movs	r5, #1
    85da:	b157      	cbz	r7, 85f2 <__gethex+0x25e>
    85dc:	f8da 300c 	ldr.w	r3, [sl, #12]
    85e0:	2b02      	cmp	r3, #2
    85e2:	d05d      	beq.n	86a0 <__gethex+0x30c>
    85e4:	2b03      	cmp	r3, #3
    85e6:	d05f      	beq.n	86a8 <__gethex+0x314>
    85e8:	2b01      	cmp	r3, #1
    85ea:	f000 8084 	beq.w	86f6 <__gethex+0x362>
    85ee:	f045 0510 	orr.w	r5, r5, #16
    85f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    85f4:	f8c3 b000 	str.w	fp, [r3]
    85f8:	9b02      	ldr	r3, [sp, #8]
    85fa:	4628      	mov	r0, r5
    85fc:	f8c3 9000 	str.w	r9, [r3]
    8600:	b005      	add	sp, #20
    8602:	ecbd 8b02 	vpop	{d8}
    8606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    860a:	462e      	mov	r6, r5
    860c:	e702      	b.n	8414 <__gethex+0x80>
    860e:	2001      	movs	r0, #1
    8610:	78aa      	ldrb	r2, [r5, #2]
    8612:	1cae      	adds	r6, r5, #2
    8614:	e758      	b.n	84c8 <__gethex+0x134>
    8616:	1b06      	subs	r6, r0, r4
    8618:	4631      	mov	r1, r6
    861a:	4658      	mov	r0, fp
    861c:	f000 ff96 	bl	954c <__any_on>
    8620:	4607      	mov	r7, r0
    8622:	b178      	cbz	r0, 8644 <__gethex+0x2b0>
    8624:	1e72      	subs	r2, r6, #1
    8626:	1153      	asrs	r3, r2, #5
    8628:	9901      	ldr	r1, [sp, #4]
    862a:	2701      	movs	r7, #1
    862c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    8630:	f002 031f 	and.w	r3, r2, #31
    8634:	fa07 f303 	lsl.w	r3, r7, r3
    8638:	420b      	tst	r3, r1
    863a:	d003      	beq.n	8644 <__gethex+0x2b0>
    863c:	42ba      	cmp	r2, r7
    863e:	f300 80e2 	bgt.w	8806 <__gethex+0x472>
    8642:	2702      	movs	r7, #2
    8644:	4631      	mov	r1, r6
    8646:	4658      	mov	r0, fp
    8648:	44b1      	add	r9, r6
    864a:	f7ff fe51 	bl	82f0 <rshift>
    864e:	e76f      	b.n	8530 <__gethex+0x19c>
    8650:	f109 35ff 	add.w	r5, r9, #4294967295
    8654:	2f00      	cmp	r7, #0
    8656:	f040 80ce 	bne.w	87f6 <__gethex+0x462>
    865a:	2d00      	cmp	r5, #0
    865c:	f040 80cd 	bne.w	87fa <__gethex+0x466>
    8660:	116b      	asrs	r3, r5, #5
    8662:	9a01      	ldr	r2, [sp, #4]
    8664:	f005 051f 	and.w	r5, r5, #31
    8668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    866c:	2301      	movs	r3, #1
    866e:	40ab      	lsls	r3, r5
    8670:	4213      	tst	r3, r2
    8672:	4649      	mov	r1, r9
    8674:	4658      	mov	r0, fp
    8676:	bf18      	it	ne
    8678:	f047 0702 	orrne.w	r7, r7, #2
    867c:	eba4 0409 	sub.w	r4, r4, r9
    8680:	f7ff fe36 	bl	82f0 <rshift>
    8684:	2502      	movs	r5, #2
    8686:	f8da 9004 	ldr.w	r9, [sl, #4]
    868a:	e7a6      	b.n	85da <__gethex+0x246>
    868c:	7821      	ldrb	r1, [r4, #0]
    868e:	4625      	mov	r5, r4
    8690:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8694:	2950      	cmp	r1, #80	; 0x50
    8696:	f000 80bf 	beq.w	8818 <__gethex+0x484>
    869a:	f8cb 5000 	str.w	r5, [fp]
    869e:	e727      	b.n	84f0 <__gethex+0x15c>
    86a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86a2:	f1c3 0301 	rsb	r3, r3, #1
    86a6:	9311      	str	r3, [sp, #68]	; 0x44
    86a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86aa:	2b00      	cmp	r3, #0
    86ac:	d09f      	beq.n	85ee <__gethex+0x25a>
    86ae:	f8db 7010 	ldr.w	r7, [fp, #16]
    86b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    86b6:	00ba      	lsls	r2, r7, #2
    86b8:	4643      	mov	r3, r8
    86ba:	9201      	str	r2, [sp, #4]
    86bc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    86c0:	2100      	movs	r1, #0
    86c2:	e007      	b.n	86d4 <__gethex+0x340>
    86c4:	20000aa0 	.word	0x20000aa0
    86c8:	200007ac 	.word	0x200007ac
    86cc:	4298      	cmp	r0, r3
    86ce:	f843 1c04 	str.w	r1, [r3, #-4]
    86d2:	d93f      	bls.n	8754 <__gethex+0x3c0>
    86d4:	461e      	mov	r6, r3
    86d6:	f853 2b04 	ldr.w	r2, [r3], #4
    86da:	f1b2 3fff 	cmp.w	r2, #4294967295
    86de:	d0f5      	beq.n	86cc <__gethex+0x338>
    86e0:	3201      	adds	r2, #1
    86e2:	2d02      	cmp	r5, #2
    86e4:	6032      	str	r2, [r6, #0]
    86e6:	f000 80bf 	beq.w	8868 <__gethex+0x4d4>
    86ea:	f014 041f 	ands.w	r4, r4, #31
    86ee:	f040 80e7 	bne.w	88c0 <__gethex+0x52c>
    86f2:	2521      	movs	r5, #33	; 0x21
    86f4:	e77d      	b.n	85f2 <__gethex+0x25e>
    86f6:	07ba      	lsls	r2, r7, #30
    86f8:	f57f af79 	bpl.w	85ee <__gethex+0x25a>
    86fc:	9b01      	ldr	r3, [sp, #4]
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	431f      	orrs	r7, r3
    8702:	07fb      	lsls	r3, r7, #31
    8704:	d4d3      	bmi.n	86ae <__gethex+0x31a>
    8706:	e772      	b.n	85ee <__gethex+0x25a>
    8708:	2000      	movs	r0, #0
    870a:	e781      	b.n	8610 <__gethex+0x27c>
    870c:	1a22      	subs	r2, r4, r0
    870e:	4659      	mov	r1, fp
    8710:	ee18 0a10 	vmov	r0, s16
    8714:	eba9 0902 	sub.w	r9, r9, r2
    8718:	f000 fc76 	bl	9008 <__lshift>
    871c:	f100 0314 	add.w	r3, r0, #20
    8720:	4683      	mov	fp, r0
    8722:	9301      	str	r3, [sp, #4]
    8724:	2700      	movs	r7, #0
    8726:	e703      	b.n	8530 <__gethex+0x19c>
    8728:	7872      	ldrb	r2, [r6, #1]
    872a:	f818 0002 	ldrb.w	r0, [r8, r2]
    872e:	1c71      	adds	r1, r6, #1
    8730:	2800      	cmp	r0, #0
    8732:	f000 80a0 	beq.w	8876 <__gethex+0x4e2>
    8736:	460d      	mov	r5, r1
    8738:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    873c:	f818 0002 	ldrb.w	r0, [r8, r2]
    8740:	2800      	cmp	r0, #0
    8742:	d1f8      	bne.n	8736 <__gethex+0x3a2>
    8744:	1b75      	subs	r5, r6, r5
    8746:	ea4f 0985 	mov.w	r9, r5, lsl #2
    874a:	460e      	mov	r6, r1
    874c:	e65d      	b.n	840a <__gethex+0x76>
    874e:	3402      	adds	r4, #2
    8750:	2300      	movs	r3, #0
    8752:	e638      	b.n	83c6 <__gethex+0x32>
    8754:	f8db 3008 	ldr.w	r3, [fp, #8]
    8758:	429f      	cmp	r7, r3
    875a:	f280 808e 	bge.w	887a <__gethex+0x4e6>
    875e:	463b      	mov	r3, r7
    8760:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    8764:	2101      	movs	r1, #1
    8766:	3301      	adds	r3, #1
    8768:	2d02      	cmp	r5, #2
    876a:	f8cb 3010 	str.w	r3, [fp, #16]
    876e:	6151      	str	r1, [r2, #20]
    8770:	d07a      	beq.n	8868 <__gethex+0x4d4>
    8772:	429f      	cmp	r7, r3
    8774:	dab9      	bge.n	86ea <__gethex+0x356>
    8776:	2b00      	cmp	r3, #0
    8778:	f340 809b 	ble.w	88b2 <__gethex+0x51e>
    877c:	f8db 2014 	ldr.w	r2, [fp, #20]
    8780:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    8784:	f10b 0018 	add.w	r0, fp, #24
    8788:	4283      	cmp	r3, r0
    878a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    878e:	f240 80b1 	bls.w	88f4 <__gethex+0x560>
    8792:	4644      	mov	r4, r8
    8794:	6801      	ldr	r1, [r0, #0]
    8796:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    879a:	f844 2b04 	str.w	r2, [r4], #4
    879e:	f850 2b04 	ldr.w	r2, [r0], #4
    87a2:	4283      	cmp	r3, r0
    87a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    87a8:	d8f4      	bhi.n	8794 <__gethex+0x400>
    87aa:	eba3 030b 	sub.w	r3, r3, fp
    87ae:	3b19      	subs	r3, #25
    87b0:	089b      	lsrs	r3, r3, #2
    87b2:	3301      	adds	r3, #1
    87b4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    87b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    87bc:	2a00      	cmp	r2, #0
    87be:	f040 809d 	bne.w	88fc <__gethex+0x568>
    87c2:	eba3 0208 	sub.w	r2, r3, r8
    87c6:	1092      	asrs	r2, r2, #2
    87c8:	4543      	cmp	r3, r8
    87ca:	f8cb 2010 	str.w	r2, [fp, #16]
    87ce:	d073      	beq.n	88b8 <__gethex+0x524>
    87d0:	f8da 3008 	ldr.w	r3, [sl, #8]
    87d4:	f109 0901 	add.w	r9, r9, #1
    87d8:	454b      	cmp	r3, r9
    87da:	da8a      	bge.n	86f2 <__gethex+0x35e>
    87dc:	ee18 0a10 	vmov	r0, s16
    87e0:	4659      	mov	r1, fp
    87e2:	f000 f9d1 	bl	8b88 <_Bfree>
    87e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    87e8:	2300      	movs	r3, #0
    87ea:	6013      	str	r3, [r2, #0]
    87ec:	25a3      	movs	r5, #163	; 0xa3
    87ee:	e683      	b.n	84f8 <__gethex+0x164>
    87f0:	9e01      	ldr	r6, [sp, #4]
    87f2:	2300      	movs	r3, #0
    87f4:	e689      	b.n	850a <__gethex+0x176>
    87f6:	2701      	movs	r7, #1
    87f8:	e732      	b.n	8660 <__gethex+0x2cc>
    87fa:	4629      	mov	r1, r5
    87fc:	4658      	mov	r0, fp
    87fe:	f000 fea5 	bl	954c <__any_on>
    8802:	4607      	mov	r7, r0
    8804:	e72c      	b.n	8660 <__gethex+0x2cc>
    8806:	1eb1      	subs	r1, r6, #2
    8808:	4658      	mov	r0, fp
    880a:	f000 fe9f 	bl	954c <__any_on>
    880e:	2800      	cmp	r0, #0
    8810:	f43f af17 	beq.w	8642 <__gethex+0x2ae>
    8814:	2703      	movs	r7, #3
    8816:	e715      	b.n	8644 <__gethex+0x2b0>
    8818:	f04f 0900 	mov.w	r9, #0
    881c:	2701      	movs	r7, #1
    881e:	e64a      	b.n	84b6 <__gethex+0x122>
    8820:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8822:	2a00      	cmp	r2, #0
    8824:	f47f ae9d 	bne.w	8562 <__gethex+0x1ce>
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	600b      	str	r3, [r1, #0]
    882c:	9b01      	ldr	r3, [sp, #4]
    882e:	2201      	movs	r2, #1
    8830:	f8cb 2010 	str.w	r2, [fp, #16]
    8834:	601a      	str	r2, [r3, #0]
    8836:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8838:	2562      	movs	r5, #98	; 0x62
    883a:	f8c3 b000 	str.w	fp, [r3]
    883e:	e65b      	b.n	84f8 <__gethex+0x164>
    8840:	454c      	cmp	r4, r9
    8842:	f47f ae8e 	bne.w	8562 <__gethex+0x1ce>
    8846:	2c01      	cmp	r4, #1
    8848:	d0ee      	beq.n	8828 <__gethex+0x494>
    884a:	1e61      	subs	r1, r4, #1
    884c:	4658      	mov	r0, fp
    884e:	f000 fe7d 	bl	954c <__any_on>
    8852:	2800      	cmp	r0, #0
    8854:	f43f ae85 	beq.w	8562 <__gethex+0x1ce>
    8858:	f8da 3004 	ldr.w	r3, [sl, #4]
    885c:	e7e4      	b.n	8828 <__gethex+0x494>
    885e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8860:	2a00      	cmp	r2, #0
    8862:	f43f ae7e 	beq.w	8562 <__gethex+0x1ce>
    8866:	e7df      	b.n	8828 <__gethex+0x494>
    8868:	f8da 3000 	ldr.w	r3, [sl]
    886c:	3b01      	subs	r3, #1
    886e:	42a3      	cmp	r3, r4
    8870:	d034      	beq.n	88dc <__gethex+0x548>
    8872:	2522      	movs	r5, #34	; 0x22
    8874:	e6bd      	b.n	85f2 <__gethex+0x25e>
    8876:	460e      	mov	r6, r1
    8878:	e5c7      	b.n	840a <__gethex+0x76>
    887a:	f8db 1004 	ldr.w	r1, [fp, #4]
    887e:	ee18 0a10 	vmov	r0, s16
    8882:	3101      	adds	r1, #1
    8884:	f000 f95a 	bl	8b3c <_Balloc>
    8888:	4606      	mov	r6, r0
    888a:	b3c8      	cbz	r0, 8900 <__gethex+0x56c>
    888c:	f8db 3010 	ldr.w	r3, [fp, #16]
    8890:	3302      	adds	r3, #2
    8892:	009a      	lsls	r2, r3, #2
    8894:	f10b 010c 	add.w	r1, fp, #12
    8898:	300c      	adds	r0, #12
    889a:	f7fa fd19 	bl	32d0 <memcpy>
    889e:	4659      	mov	r1, fp
    88a0:	ee18 0a10 	vmov	r0, s16
    88a4:	f000 f970 	bl	8b88 <_Bfree>
    88a8:	f106 0814 	add.w	r8, r6, #20
    88ac:	6933      	ldr	r3, [r6, #16]
    88ae:	46b3      	mov	fp, r6
    88b0:	e756      	b.n	8760 <__gethex+0x3cc>
    88b2:	2300      	movs	r3, #0
    88b4:	f8cb 3010 	str.w	r3, [fp, #16]
    88b8:	2300      	movs	r3, #0
    88ba:	f8cb 3014 	str.w	r3, [fp, #20]
    88be:	e787      	b.n	87d0 <__gethex+0x43c>
    88c0:	9b01      	ldr	r3, [sp, #4]
    88c2:	4443      	add	r3, r8
    88c4:	f1c4 0420 	rsb	r4, r4, #32
    88c8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    88cc:	f000 fa10 	bl	8cf0 <__hi0bits>
    88d0:	42a0      	cmp	r0, r4
    88d2:	f6bf af0e 	bge.w	86f2 <__gethex+0x35e>
    88d6:	f8db 3010 	ldr.w	r3, [fp, #16]
    88da:	e74c      	b.n	8776 <__gethex+0x3e2>
    88dc:	1163      	asrs	r3, r4, #5
    88de:	f004 041f 	and.w	r4, r4, #31
    88e2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    88e6:	2301      	movs	r3, #1
    88e8:	40a3      	lsls	r3, r4
    88ea:	4213      	tst	r3, r2
    88ec:	bf0c      	ite	eq
    88ee:	2522      	moveq	r5, #34	; 0x22
    88f0:	2521      	movne	r5, #33	; 0x21
    88f2:	e67e      	b.n	85f2 <__gethex+0x25e>
    88f4:	f8c8 2000 	str.w	r2, [r8]
    88f8:	4643      	mov	r3, r8
    88fa:	b16a      	cbz	r2, 8918 <__gethex+0x584>
    88fc:	3304      	adds	r3, #4
    88fe:	e760      	b.n	87c2 <__gethex+0x42e>
    8900:	4b07      	ldr	r3, [pc, #28]	; (8920 <__gethex+0x58c>)
    8902:	4808      	ldr	r0, [pc, #32]	; (8924 <__gethex+0x590>)
    8904:	4632      	mov	r2, r6
    8906:	2184      	movs	r1, #132	; 0x84
    8908:	f001 f872 	bl	99f0 <__assert_func>
    890c:	4b04      	ldr	r3, [pc, #16]	; (8920 <__gethex+0x58c>)
    890e:	4805      	ldr	r0, [pc, #20]	; (8924 <__gethex+0x590>)
    8910:	465a      	mov	r2, fp
    8912:	21e4      	movs	r1, #228	; 0xe4
    8914:	f001 f86c 	bl	99f0 <__assert_func>
    8918:	f8cb 2010 	str.w	r2, [fp, #16]
    891c:	e7cc      	b.n	88b8 <__gethex+0x524>
    891e:	bf00      	nop
    8920:	20000734 	.word	0x20000734
    8924:	20000748 	.word	0x20000748

00008928 <__match>:
    8928:	b410      	push	{r4}
    892a:	6804      	ldr	r4, [r0, #0]
    892c:	e009      	b.n	8942 <__match+0x1a>
    892e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8932:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    8936:	f1bc 0f19 	cmp.w	ip, #25
    893a:	bf98      	it	ls
    893c:	3320      	addls	r3, #32
    893e:	4293      	cmp	r3, r2
    8940:	d109      	bne.n	8956 <__match+0x2e>
    8942:	f811 2b01 	ldrb.w	r2, [r1], #1
    8946:	2a00      	cmp	r2, #0
    8948:	d1f1      	bne.n	892e <__match+0x6>
    894a:	3401      	adds	r4, #1
    894c:	6004      	str	r4, [r0, #0]
    894e:	2001      	movs	r0, #1
    8950:	f85d 4b04 	ldr.w	r4, [sp], #4
    8954:	4770      	bx	lr
    8956:	2000      	movs	r0, #0
    8958:	f85d 4b04 	ldr.w	r4, [sp], #4
    895c:	4770      	bx	lr
    895e:	bf00      	nop

00008960 <__hexnan>:
    8960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8964:	6809      	ldr	r1, [r1, #0]
    8966:	b085      	sub	sp, #20
    8968:	114b      	asrs	r3, r1, #5
    896a:	f011 011f 	ands.w	r1, r1, #31
    896e:	9002      	str	r0, [sp, #8]
    8970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8974:	9103      	str	r1, [sp, #12]
    8976:	f040 808f 	bne.w	8a98 <__hexnan+0x138>
    897a:	1f1d      	subs	r5, r3, #4
    897c:	9301      	str	r3, [sp, #4]
    897e:	9b02      	ldr	r3, [sp, #8]
    8980:	9901      	ldr	r1, [sp, #4]
    8982:	681c      	ldr	r4, [r3, #0]
    8984:	2300      	movs	r3, #0
    8986:	f841 3c04 	str.w	r3, [r1, #-4]
    898a:	7861      	ldrb	r1, [r4, #1]
    898c:	3401      	adds	r4, #1
    898e:	2900      	cmp	r1, #0
    8990:	f000 8098 	beq.w	8ac4 <__hexnan+0x164>
    8994:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8b0c <__hexnan+0x1ac>
    8998:	46a8      	mov	r8, r5
    899a:	46ac      	mov	ip, r5
    899c:	469a      	mov	sl, r3
    899e:	461e      	mov	r6, r3
    89a0:	e00e      	b.n	89c0 <__hexnan+0x60>
    89a2:	2920      	cmp	r1, #32
    89a4:	f200 808c 	bhi.w	8ac0 <__hexnan+0x160>
    89a8:	4556      	cmp	r6, sl
    89aa:	dd06      	ble.n	89ba <__hexnan+0x5a>
    89ac:	45c4      	cmp	ip, r8
    89ae:	d201      	bcs.n	89b4 <__hexnan+0x54>
    89b0:	2b07      	cmp	r3, #7
    89b2:	dd5b      	ble.n	8a6c <__hexnan+0x10c>
    89b4:	4562      	cmp	r2, ip
    89b6:	d351      	bcc.n	8a5c <__hexnan+0xfc>
    89b8:	2308      	movs	r3, #8
    89ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    89be:	b1a1      	cbz	r1, 89ea <__hexnan+0x8a>
    89c0:	f819 0001 	ldrb.w	r0, [r9, r1]
    89c4:	2800      	cmp	r0, #0
    89c6:	d0ec      	beq.n	89a2 <__hexnan+0x42>
    89c8:	3301      	adds	r3, #1
    89ca:	2b08      	cmp	r3, #8
    89cc:	f106 0601 	add.w	r6, r6, #1
    89d0:	dc3a      	bgt.n	8a48 <__hexnan+0xe8>
    89d2:	f8dc 1000 	ldr.w	r1, [ip]
    89d6:	0109      	lsls	r1, r1, #4
    89d8:	f000 000f 	and.w	r0, r0, #15
    89dc:	4308      	orrs	r0, r1
    89de:	f8cc 0000 	str.w	r0, [ip]
    89e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    89e6:	2900      	cmp	r1, #0
    89e8:	d1ea      	bne.n	89c0 <__hexnan+0x60>
    89ea:	2e00      	cmp	r6, #0
    89ec:	d06a      	beq.n	8ac4 <__hexnan+0x164>
    89ee:	45c4      	cmp	ip, r8
    89f0:	d201      	bcs.n	89f6 <__hexnan+0x96>
    89f2:	2b07      	cmp	r3, #7
    89f4:	dd74      	ble.n	8ae0 <__hexnan+0x180>
    89f6:	4562      	cmp	r2, ip
    89f8:	d252      	bcs.n	8aa0 <__hexnan+0x140>
    89fa:	1f11      	subs	r1, r2, #4
    89fc:	4663      	mov	r3, ip
    89fe:	f853 0b04 	ldr.w	r0, [r3], #4
    8a02:	f841 0f04 	str.w	r0, [r1, #4]!
    8a06:	42ab      	cmp	r3, r5
    8a08:	d9f9      	bls.n	89fe <__hexnan+0x9e>
    8a0a:	eba5 030c 	sub.w	r3, r5, ip
    8a0e:	f023 0303 	bic.w	r3, r3, #3
    8a12:	1c69      	adds	r1, r5, #1
    8a14:	3304      	adds	r3, #4
    8a16:	f10c 0c01 	add.w	ip, ip, #1
    8a1a:	4561      	cmp	r1, ip
    8a1c:	bf38      	it	cc
    8a1e:	2304      	movcc	r3, #4
    8a20:	4413      	add	r3, r2
    8a22:	2100      	movs	r1, #0
    8a24:	f843 1b04 	str.w	r1, [r3], #4
    8a28:	42ab      	cmp	r3, r5
    8a2a:	d9fb      	bls.n	8a24 <__hexnan+0xc4>
    8a2c:	9b01      	ldr	r3, [sp, #4]
    8a2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    8a32:	b92b      	cbnz	r3, 8a40 <__hexnan+0xe0>
    8a34:	42aa      	cmp	r2, r5
    8a36:	d049      	beq.n	8acc <__hexnan+0x16c>
    8a38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    8a3c:	2b00      	cmp	r3, #0
    8a3e:	d0f9      	beq.n	8a34 <__hexnan+0xd4>
    8a40:	2005      	movs	r0, #5
    8a42:	b005      	add	sp, #20
    8a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a48:	4562      	cmp	r2, ip
    8a4a:	d2b6      	bcs.n	89ba <__hexnan+0x5a>
    8a4c:	2300      	movs	r3, #0
    8a4e:	f84c 3c04 	str.w	r3, [ip, #-4]
    8a52:	4619      	mov	r1, r3
    8a54:	f1ac 0c04 	sub.w	ip, ip, #4
    8a58:	2301      	movs	r3, #1
    8a5a:	e7bd      	b.n	89d8 <__hexnan+0x78>
    8a5c:	2300      	movs	r3, #0
    8a5e:	f1ac 0804 	sub.w	r8, ip, #4
    8a62:	f84c 3c04 	str.w	r3, [ip, #-4]
    8a66:	46b2      	mov	sl, r6
    8a68:	46c4      	mov	ip, r8
    8a6a:	e7a6      	b.n	89ba <__hexnan+0x5a>
    8a6c:	f1c3 0108 	rsb	r1, r3, #8
    8a70:	f8dc 3000 	ldr.w	r3, [ip]
    8a74:	0089      	lsls	r1, r1, #2
    8a76:	f1c1 0e20 	rsb	lr, r1, #32
    8a7a:	4660      	mov	r0, ip
    8a7c:	469b      	mov	fp, r3
    8a7e:	6847      	ldr	r7, [r0, #4]
    8a80:	fa07 f30e 	lsl.w	r3, r7, lr
    8a84:	ea43 030b 	orr.w	r3, r3, fp
    8a88:	fa27 fb01 	lsr.w	fp, r7, r1
    8a8c:	6003      	str	r3, [r0, #0]
    8a8e:	f840 bf04 	str.w	fp, [r0, #4]!
    8a92:	4540      	cmp	r0, r8
    8a94:	d3f3      	bcc.n	8a7e <__hexnan+0x11e>
    8a96:	e78d      	b.n	89b4 <__hexnan+0x54>
    8a98:	1d19      	adds	r1, r3, #4
    8a9a:	9101      	str	r1, [sp, #4]
    8a9c:	461d      	mov	r5, r3
    8a9e:	e76e      	b.n	897e <__hexnan+0x1e>
    8aa0:	9b03      	ldr	r3, [sp, #12]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d0c2      	beq.n	8a2c <__hexnan+0xcc>
    8aa6:	9b03      	ldr	r3, [sp, #12]
    8aa8:	9801      	ldr	r0, [sp, #4]
    8aaa:	f1c3 0120 	rsb	r1, r3, #32
    8aae:	f04f 33ff 	mov.w	r3, #4294967295
    8ab2:	40cb      	lsrs	r3, r1
    8ab4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    8ab8:	400b      	ands	r3, r1
    8aba:	f840 3c04 	str.w	r3, [r0, #-4]
    8abe:	e7b8      	b.n	8a32 <__hexnan+0xd2>
    8ac0:	2929      	cmp	r1, #41	; 0x29
    8ac2:	d009      	beq.n	8ad8 <__hexnan+0x178>
    8ac4:	2004      	movs	r0, #4
    8ac6:	b005      	add	sp, #20
    8ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8acc:	2301      	movs	r3, #1
    8ace:	2005      	movs	r0, #5
    8ad0:	602b      	str	r3, [r5, #0]
    8ad2:	b005      	add	sp, #20
    8ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ad8:	9902      	ldr	r1, [sp, #8]
    8ada:	3401      	adds	r4, #1
    8adc:	600c      	str	r4, [r1, #0]
    8ade:	e784      	b.n	89ea <__hexnan+0x8a>
    8ae0:	f8dc 1000 	ldr.w	r1, [ip]
    8ae4:	f1c3 0308 	rsb	r3, r3, #8
    8ae8:	009b      	lsls	r3, r3, #2
    8aea:	f1c3 0720 	rsb	r7, r3, #32
    8aee:	4664      	mov	r4, ip
    8af0:	4608      	mov	r0, r1
    8af2:	6866      	ldr	r6, [r4, #4]
    8af4:	fa06 f107 	lsl.w	r1, r6, r7
    8af8:	4301      	orrs	r1, r0
    8afa:	fa26 f003 	lsr.w	r0, r6, r3
    8afe:	6021      	str	r1, [r4, #0]
    8b00:	f844 0f04 	str.w	r0, [r4, #4]!
    8b04:	4544      	cmp	r4, r8
    8b06:	d3f4      	bcc.n	8af2 <__hexnan+0x192>
    8b08:	e775      	b.n	89f6 <__hexnan+0x96>
    8b0a:	bf00      	nop
    8b0c:	200007ac 	.word	0x200007ac

00008b10 <__ascii_mbtowc>:
    8b10:	b082      	sub	sp, #8
    8b12:	b149      	cbz	r1, 8b28 <__ascii_mbtowc+0x18>
    8b14:	b15a      	cbz	r2, 8b2e <__ascii_mbtowc+0x1e>
    8b16:	b16b      	cbz	r3, 8b34 <__ascii_mbtowc+0x24>
    8b18:	7813      	ldrb	r3, [r2, #0]
    8b1a:	600b      	str	r3, [r1, #0]
    8b1c:	7812      	ldrb	r2, [r2, #0]
    8b1e:	1e10      	subs	r0, r2, #0
    8b20:	bf18      	it	ne
    8b22:	2001      	movne	r0, #1
    8b24:	b002      	add	sp, #8
    8b26:	4770      	bx	lr
    8b28:	a901      	add	r1, sp, #4
    8b2a:	2a00      	cmp	r2, #0
    8b2c:	d1f3      	bne.n	8b16 <__ascii_mbtowc+0x6>
    8b2e:	4610      	mov	r0, r2
    8b30:	b002      	add	sp, #8
    8b32:	4770      	bx	lr
    8b34:	f06f 0001 	mvn.w	r0, #1
    8b38:	e7f4      	b.n	8b24 <__ascii_mbtowc+0x14>
    8b3a:	bf00      	nop

00008b3c <_Balloc>:
    8b3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8b3e:	b570      	push	{r4, r5, r6, lr}
    8b40:	4605      	mov	r5, r0
    8b42:	460c      	mov	r4, r1
    8b44:	b14b      	cbz	r3, 8b5a <_Balloc+0x1e>
    8b46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    8b4a:	b180      	cbz	r0, 8b6e <_Balloc+0x32>
    8b4c:	6802      	ldr	r2, [r0, #0]
    8b4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    8b52:	2300      	movs	r3, #0
    8b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8b58:	bd70      	pop	{r4, r5, r6, pc}
    8b5a:	2221      	movs	r2, #33	; 0x21
    8b5c:	2104      	movs	r1, #4
    8b5e:	f000 ff67 	bl	9a30 <_calloc_r>
    8b62:	4603      	mov	r3, r0
    8b64:	6468      	str	r0, [r5, #68]	; 0x44
    8b66:	2800      	cmp	r0, #0
    8b68:	d1ed      	bne.n	8b46 <_Balloc+0xa>
    8b6a:	2000      	movs	r0, #0
    8b6c:	bd70      	pop	{r4, r5, r6, pc}
    8b6e:	2101      	movs	r1, #1
    8b70:	fa01 f604 	lsl.w	r6, r1, r4
    8b74:	1d72      	adds	r2, r6, #5
    8b76:	0092      	lsls	r2, r2, #2
    8b78:	4628      	mov	r0, r5
    8b7a:	f000 ff59 	bl	9a30 <_calloc_r>
    8b7e:	2800      	cmp	r0, #0
    8b80:	d0f3      	beq.n	8b6a <_Balloc+0x2e>
    8b82:	e9c0 4601 	strd	r4, r6, [r0, #4]
    8b86:	e7e4      	b.n	8b52 <_Balloc+0x16>

00008b88 <_Bfree>:
    8b88:	b131      	cbz	r1, 8b98 <_Bfree+0x10>
    8b8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8b8c:	684a      	ldr	r2, [r1, #4]
    8b8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8b92:	6008      	str	r0, [r1, #0]
    8b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    8b98:	4770      	bx	lr
    8b9a:	bf00      	nop

00008b9c <__multadd>:
    8b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ba0:	690e      	ldr	r6, [r1, #16]
    8ba2:	4680      	mov	r8, r0
    8ba4:	460f      	mov	r7, r1
    8ba6:	461d      	mov	r5, r3
    8ba8:	f101 0e14 	add.w	lr, r1, #20
    8bac:	2000      	movs	r0, #0
    8bae:	f8de 1000 	ldr.w	r1, [lr]
    8bb2:	b28c      	uxth	r4, r1
    8bb4:	fb02 5304 	mla	r3, r2, r4, r5
    8bb8:	0c09      	lsrs	r1, r1, #16
    8bba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    8bbe:	fb02 cc01 	mla	ip, r2, r1, ip
    8bc2:	3001      	adds	r0, #1
    8bc4:	b29c      	uxth	r4, r3
    8bc6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    8bca:	4286      	cmp	r6, r0
    8bcc:	f84e 4b04 	str.w	r4, [lr], #4
    8bd0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8bd4:	dceb      	bgt.n	8bae <__multadd+0x12>
    8bd6:	b13d      	cbz	r5, 8be8 <__multadd+0x4c>
    8bd8:	68bb      	ldr	r3, [r7, #8]
    8bda:	42b3      	cmp	r3, r6
    8bdc:	dd07      	ble.n	8bee <__multadd+0x52>
    8bde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8be2:	3601      	adds	r6, #1
    8be4:	615d      	str	r5, [r3, #20]
    8be6:	613e      	str	r6, [r7, #16]
    8be8:	4638      	mov	r0, r7
    8bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bee:	6879      	ldr	r1, [r7, #4]
    8bf0:	4640      	mov	r0, r8
    8bf2:	3101      	adds	r1, #1
    8bf4:	f7ff ffa2 	bl	8b3c <_Balloc>
    8bf8:	4604      	mov	r4, r0
    8bfa:	b1b0      	cbz	r0, 8c2a <__multadd+0x8e>
    8bfc:	693a      	ldr	r2, [r7, #16]
    8bfe:	3202      	adds	r2, #2
    8c00:	f107 010c 	add.w	r1, r7, #12
    8c04:	0092      	lsls	r2, r2, #2
    8c06:	300c      	adds	r0, #12
    8c08:	f7fa fb62 	bl	32d0 <memcpy>
    8c0c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    8c10:	687a      	ldr	r2, [r7, #4]
    8c12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8c16:	6039      	str	r1, [r7, #0]
    8c18:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    8c1c:	4627      	mov	r7, r4
    8c1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8c22:	3601      	adds	r6, #1
    8c24:	615d      	str	r5, [r3, #20]
    8c26:	613e      	str	r6, [r7, #16]
    8c28:	e7de      	b.n	8be8 <__multadd+0x4c>
    8c2a:	4b03      	ldr	r3, [pc, #12]	; (8c38 <__multadd+0x9c>)
    8c2c:	4803      	ldr	r0, [pc, #12]	; (8c3c <__multadd+0xa0>)
    8c2e:	4622      	mov	r2, r4
    8c30:	21ba      	movs	r1, #186	; 0xba
    8c32:	f000 fedd 	bl	99f0 <__assert_func>
    8c36:	bf00      	nop
    8c38:	20000734 	.word	0x20000734
    8c3c:	200008ac 	.word	0x200008ac

00008c40 <__s2b>:
    8c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c44:	4617      	mov	r7, r2
    8c46:	4a27      	ldr	r2, [pc, #156]	; (8ce4 <__s2b+0xa4>)
    8c48:	461e      	mov	r6, r3
    8c4a:	3308      	adds	r3, #8
    8c4c:	460c      	mov	r4, r1
    8c4e:	2e09      	cmp	r6, #9
    8c50:	fb82 1203 	smull	r1, r2, r2, r3
    8c54:	ea4f 73e3 	mov.w	r3, r3, asr #31
    8c58:	4605      	mov	r5, r0
    8c5a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    8c5e:	dd39      	ble.n	8cd4 <__s2b+0x94>
    8c60:	f04f 0c01 	mov.w	ip, #1
    8c64:	2100      	movs	r1, #0
    8c66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    8c6a:	4563      	cmp	r3, ip
    8c6c:	f101 0101 	add.w	r1, r1, #1
    8c70:	dcf9      	bgt.n	8c66 <__s2b+0x26>
    8c72:	4628      	mov	r0, r5
    8c74:	f7ff ff62 	bl	8b3c <_Balloc>
    8c78:	4601      	mov	r1, r0
    8c7a:	b368      	cbz	r0, 8cd8 <__s2b+0x98>
    8c7c:	9b08      	ldr	r3, [sp, #32]
    8c7e:	6143      	str	r3, [r0, #20]
    8c80:	2f09      	cmp	r7, #9
    8c82:	f04f 0301 	mov.w	r3, #1
    8c86:	6103      	str	r3, [r0, #16]
    8c88:	dc12      	bgt.n	8cb0 <__s2b+0x70>
    8c8a:	340a      	adds	r4, #10
    8c8c:	2709      	movs	r7, #9
    8c8e:	42be      	cmp	r6, r7
    8c90:	dd0b      	ble.n	8caa <__s2b+0x6a>
    8c92:	1bf2      	subs	r2, r6, r7
    8c94:	18a6      	adds	r6, r4, r2
    8c96:	f814 3b01 	ldrb.w	r3, [r4], #1
    8c9a:	220a      	movs	r2, #10
    8c9c:	3b30      	subs	r3, #48	; 0x30
    8c9e:	4628      	mov	r0, r5
    8ca0:	f7ff ff7c 	bl	8b9c <__multadd>
    8ca4:	42a6      	cmp	r6, r4
    8ca6:	4601      	mov	r1, r0
    8ca8:	d1f5      	bne.n	8c96 <__s2b+0x56>
    8caa:	4608      	mov	r0, r1
    8cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8cb0:	f104 0909 	add.w	r9, r4, #9
    8cb4:	46c8      	mov	r8, r9
    8cb6:	443c      	add	r4, r7
    8cb8:	f818 3b01 	ldrb.w	r3, [r8], #1
    8cbc:	220a      	movs	r2, #10
    8cbe:	3b30      	subs	r3, #48	; 0x30
    8cc0:	4628      	mov	r0, r5
    8cc2:	f7ff ff6b 	bl	8b9c <__multadd>
    8cc6:	45a0      	cmp	r8, r4
    8cc8:	4601      	mov	r1, r0
    8cca:	d1f5      	bne.n	8cb8 <__s2b+0x78>
    8ccc:	f1a7 0408 	sub.w	r4, r7, #8
    8cd0:	444c      	add	r4, r9
    8cd2:	e7dc      	b.n	8c8e <__s2b+0x4e>
    8cd4:	2100      	movs	r1, #0
    8cd6:	e7cc      	b.n	8c72 <__s2b+0x32>
    8cd8:	460a      	mov	r2, r1
    8cda:	4b03      	ldr	r3, [pc, #12]	; (8ce8 <__s2b+0xa8>)
    8cdc:	4803      	ldr	r0, [pc, #12]	; (8cec <__s2b+0xac>)
    8cde:	21d3      	movs	r1, #211	; 0xd3
    8ce0:	f000 fe86 	bl	99f0 <__assert_func>
    8ce4:	38e38e39 	.word	0x38e38e39
    8ce8:	20000734 	.word	0x20000734
    8cec:	200008ac 	.word	0x200008ac

00008cf0 <__hi0bits>:
    8cf0:	0c03      	lsrs	r3, r0, #16
    8cf2:	041b      	lsls	r3, r3, #16
    8cf4:	b9d3      	cbnz	r3, 8d2c <__hi0bits+0x3c>
    8cf6:	0400      	lsls	r0, r0, #16
    8cf8:	2310      	movs	r3, #16
    8cfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    8cfe:	bf04      	itt	eq
    8d00:	0200      	lsleq	r0, r0, #8
    8d02:	3308      	addeq	r3, #8
    8d04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    8d08:	bf04      	itt	eq
    8d0a:	0100      	lsleq	r0, r0, #4
    8d0c:	3304      	addeq	r3, #4
    8d0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    8d12:	bf04      	itt	eq
    8d14:	0080      	lsleq	r0, r0, #2
    8d16:	3302      	addeq	r3, #2
    8d18:	2800      	cmp	r0, #0
    8d1a:	db05      	blt.n	8d28 <__hi0bits+0x38>
    8d1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    8d20:	f103 0301 	add.w	r3, r3, #1
    8d24:	bf08      	it	eq
    8d26:	2320      	moveq	r3, #32
    8d28:	4618      	mov	r0, r3
    8d2a:	4770      	bx	lr
    8d2c:	2300      	movs	r3, #0
    8d2e:	e7e4      	b.n	8cfa <__hi0bits+0xa>

00008d30 <__lo0bits>:
    8d30:	6803      	ldr	r3, [r0, #0]
    8d32:	f013 0207 	ands.w	r2, r3, #7
    8d36:	d008      	beq.n	8d4a <__lo0bits+0x1a>
    8d38:	07d9      	lsls	r1, r3, #31
    8d3a:	d41f      	bmi.n	8d7c <__lo0bits+0x4c>
    8d3c:	079a      	lsls	r2, r3, #30
    8d3e:	d522      	bpl.n	8d86 <__lo0bits+0x56>
    8d40:	085b      	lsrs	r3, r3, #1
    8d42:	6003      	str	r3, [r0, #0]
    8d44:	2201      	movs	r2, #1
    8d46:	4610      	mov	r0, r2
    8d48:	4770      	bx	lr
    8d4a:	b299      	uxth	r1, r3
    8d4c:	b909      	cbnz	r1, 8d52 <__lo0bits+0x22>
    8d4e:	0c1b      	lsrs	r3, r3, #16
    8d50:	2210      	movs	r2, #16
    8d52:	b2d9      	uxtb	r1, r3
    8d54:	b909      	cbnz	r1, 8d5a <__lo0bits+0x2a>
    8d56:	3208      	adds	r2, #8
    8d58:	0a1b      	lsrs	r3, r3, #8
    8d5a:	0719      	lsls	r1, r3, #28
    8d5c:	bf04      	itt	eq
    8d5e:	091b      	lsreq	r3, r3, #4
    8d60:	3204      	addeq	r2, #4
    8d62:	0799      	lsls	r1, r3, #30
    8d64:	bf04      	itt	eq
    8d66:	089b      	lsreq	r3, r3, #2
    8d68:	3202      	addeq	r2, #2
    8d6a:	07d9      	lsls	r1, r3, #31
    8d6c:	d403      	bmi.n	8d76 <__lo0bits+0x46>
    8d6e:	085b      	lsrs	r3, r3, #1
    8d70:	f102 0201 	add.w	r2, r2, #1
    8d74:	d005      	beq.n	8d82 <__lo0bits+0x52>
    8d76:	6003      	str	r3, [r0, #0]
    8d78:	4610      	mov	r0, r2
    8d7a:	4770      	bx	lr
    8d7c:	2200      	movs	r2, #0
    8d7e:	4610      	mov	r0, r2
    8d80:	4770      	bx	lr
    8d82:	2220      	movs	r2, #32
    8d84:	e7df      	b.n	8d46 <__lo0bits+0x16>
    8d86:	089b      	lsrs	r3, r3, #2
    8d88:	2202      	movs	r2, #2
    8d8a:	6003      	str	r3, [r0, #0]
    8d8c:	4610      	mov	r0, r2
    8d8e:	4770      	bx	lr

00008d90 <__i2b>:
    8d90:	b538      	push	{r3, r4, r5, lr}
    8d92:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8d94:	4604      	mov	r4, r0
    8d96:	460d      	mov	r5, r1
    8d98:	b14b      	cbz	r3, 8dae <__i2b+0x1e>
    8d9a:	6858      	ldr	r0, [r3, #4]
    8d9c:	b1b0      	cbz	r0, 8dcc <__i2b+0x3c>
    8d9e:	6802      	ldr	r2, [r0, #0]
    8da0:	605a      	str	r2, [r3, #4]
    8da2:	2200      	movs	r2, #0
    8da4:	2301      	movs	r3, #1
    8da6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    8daa:	60c2      	str	r2, [r0, #12]
    8dac:	bd38      	pop	{r3, r4, r5, pc}
    8dae:	2221      	movs	r2, #33	; 0x21
    8db0:	2104      	movs	r1, #4
    8db2:	f000 fe3d 	bl	9a30 <_calloc_r>
    8db6:	4603      	mov	r3, r0
    8db8:	6460      	str	r0, [r4, #68]	; 0x44
    8dba:	2800      	cmp	r0, #0
    8dbc:	d1ed      	bne.n	8d9a <__i2b+0xa>
    8dbe:	4b09      	ldr	r3, [pc, #36]	; (8de4 <__i2b+0x54>)
    8dc0:	4809      	ldr	r0, [pc, #36]	; (8de8 <__i2b+0x58>)
    8dc2:	2200      	movs	r2, #0
    8dc4:	f240 1145 	movw	r1, #325	; 0x145
    8dc8:	f000 fe12 	bl	99f0 <__assert_func>
    8dcc:	221c      	movs	r2, #28
    8dce:	2101      	movs	r1, #1
    8dd0:	4620      	mov	r0, r4
    8dd2:	f000 fe2d 	bl	9a30 <_calloc_r>
    8dd6:	2800      	cmp	r0, #0
    8dd8:	d0f1      	beq.n	8dbe <__i2b+0x2e>
    8dda:	2201      	movs	r2, #1
    8ddc:	2302      	movs	r3, #2
    8dde:	e9c0 2301 	strd	r2, r3, [r0, #4]
    8de2:	e7de      	b.n	8da2 <__i2b+0x12>
    8de4:	20000734 	.word	0x20000734
    8de8:	200008ac 	.word	0x200008ac

00008dec <__multiply>:
    8dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8df0:	690e      	ldr	r6, [r1, #16]
    8df2:	6915      	ldr	r5, [r2, #16]
    8df4:	42ae      	cmp	r6, r5
    8df6:	b085      	sub	sp, #20
    8df8:	4688      	mov	r8, r1
    8dfa:	4614      	mov	r4, r2
    8dfc:	db05      	blt.n	8e0a <__multiply+0x1e>
    8dfe:	462a      	mov	r2, r5
    8e00:	4623      	mov	r3, r4
    8e02:	4635      	mov	r5, r6
    8e04:	460c      	mov	r4, r1
    8e06:	4616      	mov	r6, r2
    8e08:	4698      	mov	r8, r3
    8e0a:	68a3      	ldr	r3, [r4, #8]
    8e0c:	6861      	ldr	r1, [r4, #4]
    8e0e:	19af      	adds	r7, r5, r6
    8e10:	42bb      	cmp	r3, r7
    8e12:	bfb8      	it	lt
    8e14:	3101      	addlt	r1, #1
    8e16:	f7ff fe91 	bl	8b3c <_Balloc>
    8e1a:	9001      	str	r0, [sp, #4]
    8e1c:	2800      	cmp	r0, #0
    8e1e:	f000 8087 	beq.w	8f30 <__multiply+0x144>
    8e22:	9b01      	ldr	r3, [sp, #4]
    8e24:	f103 0914 	add.w	r9, r3, #20
    8e28:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    8e2c:	45d1      	cmp	r9, sl
    8e2e:	d205      	bcs.n	8e3c <__multiply+0x50>
    8e30:	464b      	mov	r3, r9
    8e32:	2200      	movs	r2, #0
    8e34:	f843 2b04 	str.w	r2, [r3], #4
    8e38:	459a      	cmp	sl, r3
    8e3a:	d8fb      	bhi.n	8e34 <__multiply+0x48>
    8e3c:	f108 0814 	add.w	r8, r8, #20
    8e40:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    8e44:	f104 0314 	add.w	r3, r4, #20
    8e48:	45d8      	cmp	r8, fp
    8e4a:	461a      	mov	r2, r3
    8e4c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8e50:	d25f      	bcs.n	8f12 <__multiply+0x126>
    8e52:	1b2b      	subs	r3, r5, r4
    8e54:	3b15      	subs	r3, #21
    8e56:	f023 0303 	bic.w	r3, r3, #3
    8e5a:	3304      	adds	r3, #4
    8e5c:	3415      	adds	r4, #21
    8e5e:	42a5      	cmp	r5, r4
    8e60:	bf38      	it	cc
    8e62:	2304      	movcc	r3, #4
    8e64:	e9cd a702 	strd	sl, r7, [sp, #8]
    8e68:	46ac      	mov	ip, r5
    8e6a:	461f      	mov	r7, r3
    8e6c:	4692      	mov	sl, r2
    8e6e:	e005      	b.n	8e7c <__multiply+0x90>
    8e70:	0c09      	lsrs	r1, r1, #16
    8e72:	d129      	bne.n	8ec8 <__multiply+0xdc>
    8e74:	45c3      	cmp	fp, r8
    8e76:	f109 0904 	add.w	r9, r9, #4
    8e7a:	d948      	bls.n	8f0e <__multiply+0x122>
    8e7c:	f858 1b04 	ldr.w	r1, [r8], #4
    8e80:	b28d      	uxth	r5, r1
    8e82:	2d00      	cmp	r5, #0
    8e84:	d0f4      	beq.n	8e70 <__multiply+0x84>
    8e86:	4656      	mov	r6, sl
    8e88:	464c      	mov	r4, r9
    8e8a:	2300      	movs	r3, #0
    8e8c:	f856 1b04 	ldr.w	r1, [r6], #4
    8e90:	6822      	ldr	r2, [r4, #0]
    8e92:	fa1f fe81 	uxth.w	lr, r1
    8e96:	b290      	uxth	r0, r2
    8e98:	0c09      	lsrs	r1, r1, #16
    8e9a:	fb05 000e 	mla	r0, r5, lr, r0
    8e9e:	0c12      	lsrs	r2, r2, #16
    8ea0:	4403      	add	r3, r0
    8ea2:	fb05 2201 	mla	r2, r5, r1, r2
    8ea6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8eaa:	b29b      	uxth	r3, r3
    8eac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8eb0:	45b4      	cmp	ip, r6
    8eb2:	f844 3b04 	str.w	r3, [r4], #4
    8eb6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    8eba:	d8e7      	bhi.n	8e8c <__multiply+0xa0>
    8ebc:	f849 3007 	str.w	r3, [r9, r7]
    8ec0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    8ec4:	0c09      	lsrs	r1, r1, #16
    8ec6:	d0d5      	beq.n	8e74 <__multiply+0x88>
    8ec8:	f8d9 3000 	ldr.w	r3, [r9]
    8ecc:	4650      	mov	r0, sl
    8ece:	461a      	mov	r2, r3
    8ed0:	464c      	mov	r4, r9
    8ed2:	2600      	movs	r6, #0
    8ed4:	8805      	ldrh	r5, [r0, #0]
    8ed6:	0c12      	lsrs	r2, r2, #16
    8ed8:	fb01 2205 	mla	r2, r1, r5, r2
    8edc:	4416      	add	r6, r2
    8ede:	b29b      	uxth	r3, r3
    8ee0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    8ee4:	f844 3b04 	str.w	r3, [r4], #4
    8ee8:	f850 5b04 	ldr.w	r5, [r0], #4
    8eec:	6822      	ldr	r2, [r4, #0]
    8eee:	0c2d      	lsrs	r5, r5, #16
    8ef0:	b293      	uxth	r3, r2
    8ef2:	fb01 3305 	mla	r3, r1, r5, r3
    8ef6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    8efa:	4584      	cmp	ip, r0
    8efc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    8f00:	d8e8      	bhi.n	8ed4 <__multiply+0xe8>
    8f02:	45c3      	cmp	fp, r8
    8f04:	f849 3007 	str.w	r3, [r9, r7]
    8f08:	f109 0904 	add.w	r9, r9, #4
    8f0c:	d8b6      	bhi.n	8e7c <__multiply+0x90>
    8f0e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    8f12:	2f00      	cmp	r7, #0
    8f14:	dc02      	bgt.n	8f1c <__multiply+0x130>
    8f16:	e005      	b.n	8f24 <__multiply+0x138>
    8f18:	3f01      	subs	r7, #1
    8f1a:	d003      	beq.n	8f24 <__multiply+0x138>
    8f1c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    8f20:	2b00      	cmp	r3, #0
    8f22:	d0f9      	beq.n	8f18 <__multiply+0x12c>
    8f24:	9b01      	ldr	r3, [sp, #4]
    8f26:	4618      	mov	r0, r3
    8f28:	611f      	str	r7, [r3, #16]
    8f2a:	b005      	add	sp, #20
    8f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f30:	4b03      	ldr	r3, [pc, #12]	; (8f40 <__multiply+0x154>)
    8f32:	4804      	ldr	r0, [pc, #16]	; (8f44 <__multiply+0x158>)
    8f34:	9a01      	ldr	r2, [sp, #4]
    8f36:	f44f 71b1 	mov.w	r1, #354	; 0x162
    8f3a:	f000 fd59 	bl	99f0 <__assert_func>
    8f3e:	bf00      	nop
    8f40:	20000734 	.word	0x20000734
    8f44:	200008ac 	.word	0x200008ac

00008f48 <__pow5mult>:
    8f48:	f012 0303 	ands.w	r3, r2, #3
    8f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f50:	4614      	mov	r4, r2
    8f52:	4606      	mov	r6, r0
    8f54:	d132      	bne.n	8fbc <__pow5mult+0x74>
    8f56:	460d      	mov	r5, r1
    8f58:	10a4      	asrs	r4, r4, #2
    8f5a:	d020      	beq.n	8f9e <__pow5mult+0x56>
    8f5c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    8f60:	f1b8 0f00 	cmp.w	r8, #0
    8f64:	d033      	beq.n	8fce <__pow5mult+0x86>
    8f66:	07e3      	lsls	r3, r4, #31
    8f68:	f04f 0700 	mov.w	r7, #0
    8f6c:	d407      	bmi.n	8f7e <__pow5mult+0x36>
    8f6e:	1064      	asrs	r4, r4, #1
    8f70:	d015      	beq.n	8f9e <__pow5mult+0x56>
    8f72:	f8d8 0000 	ldr.w	r0, [r8]
    8f76:	b1a8      	cbz	r0, 8fa4 <__pow5mult+0x5c>
    8f78:	4680      	mov	r8, r0
    8f7a:	07e3      	lsls	r3, r4, #31
    8f7c:	d5f7      	bpl.n	8f6e <__pow5mult+0x26>
    8f7e:	4642      	mov	r2, r8
    8f80:	4629      	mov	r1, r5
    8f82:	4630      	mov	r0, r6
    8f84:	f7ff ff32 	bl	8dec <__multiply>
    8f88:	b1b5      	cbz	r5, 8fb8 <__pow5mult+0x70>
    8f8a:	6869      	ldr	r1, [r5, #4]
    8f8c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    8f8e:	1064      	asrs	r4, r4, #1
    8f90:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    8f94:	602a      	str	r2, [r5, #0]
    8f96:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    8f9a:	4605      	mov	r5, r0
    8f9c:	d1e9      	bne.n	8f72 <__pow5mult+0x2a>
    8f9e:	4628      	mov	r0, r5
    8fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fa4:	4642      	mov	r2, r8
    8fa6:	4641      	mov	r1, r8
    8fa8:	4630      	mov	r0, r6
    8faa:	f7ff ff1f 	bl	8dec <__multiply>
    8fae:	f8c8 0000 	str.w	r0, [r8]
    8fb2:	6007      	str	r7, [r0, #0]
    8fb4:	4680      	mov	r8, r0
    8fb6:	e7e0      	b.n	8f7a <__pow5mult+0x32>
    8fb8:	4605      	mov	r5, r0
    8fba:	e7d8      	b.n	8f6e <__pow5mult+0x26>
    8fbc:	3b01      	subs	r3, #1
    8fbe:	4a0f      	ldr	r2, [pc, #60]	; (8ffc <__pow5mult+0xb4>)
    8fc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8fc4:	2300      	movs	r3, #0
    8fc6:	f7ff fde9 	bl	8b9c <__multadd>
    8fca:	4605      	mov	r5, r0
    8fcc:	e7c4      	b.n	8f58 <__pow5mult+0x10>
    8fce:	2101      	movs	r1, #1
    8fd0:	4630      	mov	r0, r6
    8fd2:	f7ff fdb3 	bl	8b3c <_Balloc>
    8fd6:	4680      	mov	r8, r0
    8fd8:	b140      	cbz	r0, 8fec <__pow5mult+0xa4>
    8fda:	2301      	movs	r3, #1
    8fdc:	f240 2271 	movw	r2, #625	; 0x271
    8fe0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    8fe4:	2300      	movs	r3, #0
    8fe6:	6430      	str	r0, [r6, #64]	; 0x40
    8fe8:	6003      	str	r3, [r0, #0]
    8fea:	e7bc      	b.n	8f66 <__pow5mult+0x1e>
    8fec:	4b04      	ldr	r3, [pc, #16]	; (9000 <__pow5mult+0xb8>)
    8fee:	4805      	ldr	r0, [pc, #20]	; (9004 <__pow5mult+0xbc>)
    8ff0:	4642      	mov	r2, r8
    8ff2:	f240 1145 	movw	r1, #325	; 0x145
    8ff6:	f000 fcfb 	bl	99f0 <__assert_func>
    8ffa:	bf00      	nop
    8ffc:	20000e94 	.word	0x20000e94
    9000:	20000734 	.word	0x20000734
    9004:	200008ac 	.word	0x200008ac

00009008 <__lshift>:
    9008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    900c:	460d      	mov	r5, r1
    900e:	4614      	mov	r4, r2
    9010:	692f      	ldr	r7, [r5, #16]
    9012:	68ab      	ldr	r3, [r5, #8]
    9014:	6849      	ldr	r1, [r1, #4]
    9016:	eb07 1762 	add.w	r7, r7, r2, asr #5
    901a:	1c7e      	adds	r6, r7, #1
    901c:	429e      	cmp	r6, r3
    901e:	4680      	mov	r8, r0
    9020:	ea4f 1962 	mov.w	r9, r2, asr #5
    9024:	dd04      	ble.n	9030 <__lshift+0x28>
    9026:	005b      	lsls	r3, r3, #1
    9028:	429e      	cmp	r6, r3
    902a:	f101 0101 	add.w	r1, r1, #1
    902e:	dcfa      	bgt.n	9026 <__lshift+0x1e>
    9030:	4640      	mov	r0, r8
    9032:	f7ff fd83 	bl	8b3c <_Balloc>
    9036:	4684      	mov	ip, r0
    9038:	2800      	cmp	r0, #0
    903a:	d052      	beq.n	90e2 <__lshift+0xda>
    903c:	f1b9 0f00 	cmp.w	r9, #0
    9040:	f100 0214 	add.w	r2, r0, #20
    9044:	dd0e      	ble.n	9064 <__lshift+0x5c>
    9046:	f109 0105 	add.w	r1, r9, #5
    904a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    904e:	4613      	mov	r3, r2
    9050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9054:	2000      	movs	r0, #0
    9056:	f843 0b04 	str.w	r0, [r3], #4
    905a:	428b      	cmp	r3, r1
    905c:	d1fb      	bne.n	9056 <__lshift+0x4e>
    905e:	f1ae 0314 	sub.w	r3, lr, #20
    9062:	441a      	add	r2, r3
    9064:	6929      	ldr	r1, [r5, #16]
    9066:	f105 0314 	add.w	r3, r5, #20
    906a:	f014 0e1f 	ands.w	lr, r4, #31
    906e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9072:	d02e      	beq.n	90d2 <__lshift+0xca>
    9074:	f1ce 0920 	rsb	r9, lr, #32
    9078:	4610      	mov	r0, r2
    907a:	f04f 0a00 	mov.w	sl, #0
    907e:	681c      	ldr	r4, [r3, #0]
    9080:	fa04 f40e 	lsl.w	r4, r4, lr
    9084:	ea44 040a 	orr.w	r4, r4, sl
    9088:	f840 4b04 	str.w	r4, [r0], #4
    908c:	f853 4b04 	ldr.w	r4, [r3], #4
    9090:	4299      	cmp	r1, r3
    9092:	fa24 fa09 	lsr.w	sl, r4, r9
    9096:	d8f2      	bhi.n	907e <__lshift+0x76>
    9098:	1b4b      	subs	r3, r1, r5
    909a:	3b15      	subs	r3, #21
    909c:	f023 0303 	bic.w	r3, r3, #3
    90a0:	3304      	adds	r3, #4
    90a2:	f105 0015 	add.w	r0, r5, #21
    90a6:	4281      	cmp	r1, r0
    90a8:	bf38      	it	cc
    90aa:	2304      	movcc	r3, #4
    90ac:	f1ba 0f00 	cmp.w	sl, #0
    90b0:	bf18      	it	ne
    90b2:	4637      	movne	r7, r6
    90b4:	f842 a003 	str.w	sl, [r2, r3]
    90b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    90bc:	686a      	ldr	r2, [r5, #4]
    90be:	f8cc 7010 	str.w	r7, [ip, #16]
    90c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    90c6:	6029      	str	r1, [r5, #0]
    90c8:	4660      	mov	r0, ip
    90ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    90ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    90d2:	3a04      	subs	r2, #4
    90d4:	f853 0b04 	ldr.w	r0, [r3], #4
    90d8:	f842 0f04 	str.w	r0, [r2, #4]!
    90dc:	4299      	cmp	r1, r3
    90de:	d8f9      	bhi.n	90d4 <__lshift+0xcc>
    90e0:	e7ea      	b.n	90b8 <__lshift+0xb0>
    90e2:	4b03      	ldr	r3, [pc, #12]	; (90f0 <__lshift+0xe8>)
    90e4:	4803      	ldr	r0, [pc, #12]	; (90f4 <__lshift+0xec>)
    90e6:	4662      	mov	r2, ip
    90e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    90ec:	f000 fc80 	bl	99f0 <__assert_func>
    90f0:	20000734 	.word	0x20000734
    90f4:	200008ac 	.word	0x200008ac

000090f8 <__mcmp>:
    90f8:	690b      	ldr	r3, [r1, #16]
    90fa:	4684      	mov	ip, r0
    90fc:	6900      	ldr	r0, [r0, #16]
    90fe:	1ac0      	subs	r0, r0, r3
    9100:	d116      	bne.n	9130 <__mcmp+0x38>
    9102:	f10c 0c14 	add.w	ip, ip, #20
    9106:	3114      	adds	r1, #20
    9108:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    910c:	b410      	push	{r4}
    910e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9112:	e001      	b.n	9118 <__mcmp+0x20>
    9114:	4594      	cmp	ip, r2
    9116:	d208      	bcs.n	912a <__mcmp+0x32>
    9118:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    911c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9120:	428c      	cmp	r4, r1
    9122:	d0f7      	beq.n	9114 <__mcmp+0x1c>
    9124:	d205      	bcs.n	9132 <__mcmp+0x3a>
    9126:	f04f 30ff 	mov.w	r0, #4294967295
    912a:	f85d 4b04 	ldr.w	r4, [sp], #4
    912e:	4770      	bx	lr
    9130:	4770      	bx	lr
    9132:	2001      	movs	r0, #1
    9134:	f85d 4b04 	ldr.w	r4, [sp], #4
    9138:	4770      	bx	lr
    913a:	bf00      	nop

0000913c <__mdiff>:
    913c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9140:	690f      	ldr	r7, [r1, #16]
    9142:	6913      	ldr	r3, [r2, #16]
    9144:	1aff      	subs	r7, r7, r3
    9146:	2f00      	cmp	r7, #0
    9148:	460e      	mov	r6, r1
    914a:	4690      	mov	r8, r2
    914c:	d17f      	bne.n	924e <__mdiff+0x112>
    914e:	f101 0514 	add.w	r5, r1, #20
    9152:	3214      	adds	r2, #20
    9154:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9158:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    915c:	e001      	b.n	9162 <__mdiff+0x26>
    915e:	429d      	cmp	r5, r3
    9160:	d278      	bcs.n	9254 <__mdiff+0x118>
    9162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9166:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    916a:	42a1      	cmp	r1, r4
    916c:	d0f7      	beq.n	915e <__mdiff+0x22>
    916e:	d369      	bcc.n	9244 <__mdiff+0x108>
    9170:	6871      	ldr	r1, [r6, #4]
    9172:	f7ff fce3 	bl	8b3c <_Balloc>
    9176:	4681      	mov	r9, r0
    9178:	2800      	cmp	r0, #0
    917a:	d077      	beq.n	926c <__mdiff+0x130>
    917c:	6935      	ldr	r5, [r6, #16]
    917e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    9182:	60c7      	str	r7, [r0, #12]
    9184:	f108 0e14 	add.w	lr, r8, #20
    9188:	f106 0014 	add.w	r0, r6, #20
    918c:	f109 0a14 	add.w	sl, r9, #20
    9190:	f106 0110 	add.w	r1, r6, #16
    9194:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    9198:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    919c:	4656      	mov	r6, sl
    919e:	f04f 0c00 	mov.w	ip, #0
    91a2:	f85e 4b04 	ldr.w	r4, [lr], #4
    91a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    91aa:	b2a3      	uxth	r3, r4
    91ac:	fa1c fc8b 	uxtah	ip, ip, fp
    91b0:	ebac 0303 	sub.w	r3, ip, r3
    91b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    91b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    91bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    91c0:	b29b      	uxth	r3, r3
    91c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    91c6:	4572      	cmp	r2, lr
    91c8:	f846 3b04 	str.w	r3, [r6], #4
    91cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    91d0:	d8e7      	bhi.n	91a2 <__mdiff+0x66>
    91d2:	eba2 0108 	sub.w	r1, r2, r8
    91d6:	3915      	subs	r1, #21
    91d8:	f108 0815 	add.w	r8, r8, #21
    91dc:	4542      	cmp	r2, r8
    91de:	f021 0403 	bic.w	r4, r1, #3
    91e2:	f104 0404 	add.w	r4, r4, #4
    91e6:	bf38      	it	cc
    91e8:	2404      	movcc	r4, #4
    91ea:	4420      	add	r0, r4
    91ec:	f021 0203 	bic.w	r2, r1, #3
    91f0:	bf38      	it	cc
    91f2:	2200      	movcc	r2, #0
    91f4:	4287      	cmp	r7, r0
    91f6:	4452      	add	r2, sl
    91f8:	4454      	add	r4, sl
    91fa:	d918      	bls.n	922e <__mdiff+0xf2>
    91fc:	4626      	mov	r6, r4
    91fe:	4601      	mov	r1, r0
    9200:	f851 3b04 	ldr.w	r3, [r1], #4
    9204:	fa1c fc83 	uxtah	ip, ip, r3
    9208:	ea4f 422c 	mov.w	r2, ip, asr #16
    920c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9210:	fa1f fc8c 	uxth.w	ip, ip
    9214:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9218:	428f      	cmp	r7, r1
    921a:	f846 3b04 	str.w	r3, [r6], #4
    921e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9222:	d8ed      	bhi.n	9200 <__mdiff+0xc4>
    9224:	3f01      	subs	r7, #1
    9226:	1a3f      	subs	r7, r7, r0
    9228:	f027 0703 	bic.w	r7, r7, #3
    922c:	19e2      	adds	r2, r4, r7
    922e:	b923      	cbnz	r3, 923a <__mdiff+0xfe>
    9230:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    9234:	3d01      	subs	r5, #1
    9236:	2b00      	cmp	r3, #0
    9238:	d0fa      	beq.n	9230 <__mdiff+0xf4>
    923a:	f8c9 5010 	str.w	r5, [r9, #16]
    923e:	4648      	mov	r0, r9
    9240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9244:	4633      	mov	r3, r6
    9246:	2701      	movs	r7, #1
    9248:	4646      	mov	r6, r8
    924a:	4698      	mov	r8, r3
    924c:	e790      	b.n	9170 <__mdiff+0x34>
    924e:	dbf9      	blt.n	9244 <__mdiff+0x108>
    9250:	2700      	movs	r7, #0
    9252:	e78d      	b.n	9170 <__mdiff+0x34>
    9254:	2100      	movs	r1, #0
    9256:	f7ff fc71 	bl	8b3c <_Balloc>
    925a:	4681      	mov	r9, r0
    925c:	b168      	cbz	r0, 927a <__mdiff+0x13e>
    925e:	2201      	movs	r2, #1
    9260:	2300      	movs	r3, #0
    9262:	e9c9 2304 	strd	r2, r3, [r9, #16]
    9266:	4648      	mov	r0, r9
    9268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    926c:	4b06      	ldr	r3, [pc, #24]	; (9288 <__mdiff+0x14c>)
    926e:	4807      	ldr	r0, [pc, #28]	; (928c <__mdiff+0x150>)
    9270:	464a      	mov	r2, r9
    9272:	f240 2145 	movw	r1, #581	; 0x245
    9276:	f000 fbbb 	bl	99f0 <__assert_func>
    927a:	4b03      	ldr	r3, [pc, #12]	; (9288 <__mdiff+0x14c>)
    927c:	4803      	ldr	r0, [pc, #12]	; (928c <__mdiff+0x150>)
    927e:	464a      	mov	r2, r9
    9280:	f240 2137 	movw	r1, #567	; 0x237
    9284:	f000 fbb4 	bl	99f0 <__assert_func>
    9288:	20000734 	.word	0x20000734
    928c:	200008ac 	.word	0x200008ac

00009290 <__ulp>:
    9290:	b082      	sub	sp, #8
    9292:	ed8d 0b00 	vstr	d0, [sp]
    9296:	4b16      	ldr	r3, [pc, #88]	; (92f0 <__ulp+0x60>)
    9298:	9a01      	ldr	r2, [sp, #4]
    929a:	4013      	ands	r3, r2
    929c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    92a0:	2b00      	cmp	r3, #0
    92a2:	dd06      	ble.n	92b2 <__ulp+0x22>
    92a4:	2200      	movs	r2, #0
    92a6:	4619      	mov	r1, r3
    92a8:	4610      	mov	r0, r2
    92aa:	ec41 0b10 	vmov	d0, r0, r1
    92ae:	b002      	add	sp, #8
    92b0:	4770      	bx	lr
    92b2:	425b      	negs	r3, r3
    92b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    92b8:	ea4f 5223 	mov.w	r2, r3, asr #20
    92bc:	da09      	bge.n	92d2 <__ulp+0x42>
    92be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    92c2:	4113      	asrs	r3, r2
    92c4:	2200      	movs	r2, #0
    92c6:	4619      	mov	r1, r3
    92c8:	4610      	mov	r0, r2
    92ca:	ec41 0b10 	vmov	d0, r0, r1
    92ce:	b002      	add	sp, #8
    92d0:	4770      	bx	lr
    92d2:	f1a2 0314 	sub.w	r3, r2, #20
    92d6:	2b1e      	cmp	r3, #30
    92d8:	bfda      	itte	le
    92da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    92de:	40da      	lsrle	r2, r3
    92e0:	2201      	movgt	r2, #1
    92e2:	2300      	movs	r3, #0
    92e4:	4619      	mov	r1, r3
    92e6:	4610      	mov	r0, r2
    92e8:	ec41 0b10 	vmov	d0, r0, r1
    92ec:	b002      	add	sp, #8
    92ee:	4770      	bx	lr
    92f0:	7ff00000 	.word	0x7ff00000

000092f4 <__b2d>:
    92f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92f6:	6904      	ldr	r4, [r0, #16]
    92f8:	f100 0614 	add.w	r6, r0, #20
    92fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    9300:	1f27      	subs	r7, r4, #4
    9302:	f854 5c04 	ldr.w	r5, [r4, #-4]
    9306:	4628      	mov	r0, r5
    9308:	f7ff fcf2 	bl	8cf0 <__hi0bits>
    930c:	f1c0 0320 	rsb	r3, r0, #32
    9310:	280a      	cmp	r0, #10
    9312:	600b      	str	r3, [r1, #0]
    9314:	dd1b      	ble.n	934e <__b2d+0x5a>
    9316:	42be      	cmp	r6, r7
    9318:	d20b      	bcs.n	9332 <__b2d+0x3e>
    931a:	380b      	subs	r0, #11
    931c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9320:	d12e      	bne.n	9380 <__b2d+0x8c>
    9322:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    9326:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    932a:	460a      	mov	r2, r1
    932c:	ec43 2b10 	vmov	d0, r2, r3
    9330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9332:	f1b0 010b 	subs.w	r1, r0, #11
    9336:	d0f4      	beq.n	9322 <__b2d+0x2e>
    9338:	fa05 f101 	lsl.w	r1, r5, r1
    933c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    9340:	2100      	movs	r1, #0
    9342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9346:	460a      	mov	r2, r1
    9348:	ec43 2b10 	vmov	d0, r2, r3
    934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    934e:	f1c0 0c0b 	rsb	ip, r0, #11
    9352:	fa25 f10c 	lsr.w	r1, r5, ip
    9356:	42be      	cmp	r6, r7
    9358:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    935c:	bf38      	it	cc
    935e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    9362:	f100 0015 	add.w	r0, r0, #21
    9366:	bf34      	ite	cc
    9368:	fa21 f10c 	lsrcc.w	r1, r1, ip
    936c:	2100      	movcs	r1, #0
    936e:	fa05 f000 	lsl.w	r0, r5, r0
    9372:	4301      	orrs	r1, r0
    9374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9378:	460a      	mov	r2, r1
    937a:	ec43 2b10 	vmov	d0, r2, r3
    937e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9380:	f1c0 0c20 	rsb	ip, r0, #32
    9384:	4085      	lsls	r5, r0
    9386:	fa21 f30c 	lsr.w	r3, r1, ip
    938a:	ea45 0703 	orr.w	r7, r5, r3
    938e:	f1a4 0508 	sub.w	r5, r4, #8
    9392:	42ae      	cmp	r6, r5
    9394:	fa01 f100 	lsl.w	r1, r1, r0
    9398:	bf3c      	itt	cc
    939a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    939e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    93a2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    93a6:	bf38      	it	cc
    93a8:	4301      	orrcc	r1, r0
    93aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    93ae:	460a      	mov	r2, r1
    93b0:	ec43 2b10 	vmov	d0, r2, r3
    93b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93b6:	bf00      	nop

000093b8 <__d2b>:
    93b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    93bc:	4688      	mov	r8, r1
    93be:	b083      	sub	sp, #12
    93c0:	2101      	movs	r1, #1
    93c2:	ec57 6b10 	vmov	r6, r7, d0
    93c6:	4615      	mov	r5, r2
    93c8:	f7ff fbb8 	bl	8b3c <_Balloc>
    93cc:	4604      	mov	r4, r0
    93ce:	2800      	cmp	r0, #0
    93d0:	d051      	beq.n	9476 <__d2b+0xbe>
    93d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    93d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    93da:	f1b9 0f00 	cmp.w	r9, #0
    93de:	d001      	beq.n	93e4 <__d2b+0x2c>
    93e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    93e4:	2e00      	cmp	r6, #0
    93e6:	9301      	str	r3, [sp, #4]
    93e8:	d118      	bne.n	941c <__d2b+0x64>
    93ea:	a801      	add	r0, sp, #4
    93ec:	f7ff fca0 	bl	8d30 <__lo0bits>
    93f0:	9a01      	ldr	r2, [sp, #4]
    93f2:	6162      	str	r2, [r4, #20]
    93f4:	2201      	movs	r2, #1
    93f6:	f100 0320 	add.w	r3, r0, #32
    93fa:	6122      	str	r2, [r4, #16]
    93fc:	f1b9 0f00 	cmp.w	r9, #0
    9400:	d025      	beq.n	944e <__d2b+0x96>
    9402:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    9406:	eb09 0203 	add.w	r2, r9, r3
    940a:	4620      	mov	r0, r4
    940c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    9410:	f8c8 2000 	str.w	r2, [r8]
    9414:	602b      	str	r3, [r5, #0]
    9416:	b003      	add	sp, #12
    9418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    941c:	4668      	mov	r0, sp
    941e:	9600      	str	r6, [sp, #0]
    9420:	f7ff fc86 	bl	8d30 <__lo0bits>
    9424:	4603      	mov	r3, r0
    9426:	b310      	cbz	r0, 946e <__d2b+0xb6>
    9428:	e9dd 0200 	ldrd	r0, r2, [sp]
    942c:	f1c3 0120 	rsb	r1, r3, #32
    9430:	fa02 f101 	lsl.w	r1, r2, r1
    9434:	4301      	orrs	r1, r0
    9436:	40da      	lsrs	r2, r3
    9438:	6161      	str	r1, [r4, #20]
    943a:	9201      	str	r2, [sp, #4]
    943c:	2a00      	cmp	r2, #0
    943e:	61a2      	str	r2, [r4, #24]
    9440:	bf14      	ite	ne
    9442:	2202      	movne	r2, #2
    9444:	2201      	moveq	r2, #1
    9446:	6122      	str	r2, [r4, #16]
    9448:	f1b9 0f00 	cmp.w	r9, #0
    944c:	d1d9      	bne.n	9402 <__d2b+0x4a>
    944e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    9452:	f8c8 3000 	str.w	r3, [r8]
    9456:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    945a:	6918      	ldr	r0, [r3, #16]
    945c:	f7ff fc48 	bl	8cf0 <__hi0bits>
    9460:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    9464:	4620      	mov	r0, r4
    9466:	602b      	str	r3, [r5, #0]
    9468:	b003      	add	sp, #12
    946a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    946e:	9a00      	ldr	r2, [sp, #0]
    9470:	6162      	str	r2, [r4, #20]
    9472:	9a01      	ldr	r2, [sp, #4]
    9474:	e7e2      	b.n	943c <__d2b+0x84>
    9476:	4b03      	ldr	r3, [pc, #12]	; (9484 <__d2b+0xcc>)
    9478:	4803      	ldr	r0, [pc, #12]	; (9488 <__d2b+0xd0>)
    947a:	4622      	mov	r2, r4
    947c:	f240 310f 	movw	r1, #783	; 0x30f
    9480:	f000 fab6 	bl	99f0 <__assert_func>
    9484:	20000734 	.word	0x20000734
    9488:	200008ac 	.word	0x200008ac

0000948c <__ratio>:
    948c:	b5f0      	push	{r4, r5, r6, r7, lr}
    948e:	b083      	sub	sp, #12
    9490:	460e      	mov	r6, r1
    9492:	4669      	mov	r1, sp
    9494:	4607      	mov	r7, r0
    9496:	f7ff ff2d 	bl	92f4 <__b2d>
    949a:	a901      	add	r1, sp, #4
    949c:	4630      	mov	r0, r6
    949e:	ec55 4b10 	vmov	r4, r5, d0
    94a2:	eeb0 7b40 	vmov.f64	d7, d0
    94a6:	f7ff ff25 	bl	92f4 <__b2d>
    94aa:	6933      	ldr	r3, [r6, #16]
    94ac:	693a      	ldr	r2, [r7, #16]
    94ae:	1ad2      	subs	r2, r2, r3
    94b0:	e9dd 3100 	ldrd	r3, r1, [sp]
    94b4:	1a5b      	subs	r3, r3, r1
    94b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    94ba:	2b00      	cmp	r3, #0
    94bc:	dd09      	ble.n	94d2 <__ratio+0x46>
    94be:	ee17 2a90 	vmov	r2, s15
    94c2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    94c6:	ec45 4b17 	vmov	d7, r4, r5
    94ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
    94ce:	b003      	add	sp, #12
    94d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94d2:	ee10 2a90 	vmov	r2, s1
    94d6:	ec51 0b10 	vmov	r0, r1, d0
    94da:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    94de:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    94e2:	ec41 0b10 	vmov	d0, r0, r1
    94e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    94ea:	b003      	add	sp, #12
    94ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94ee:	bf00      	nop

000094f0 <__copybits>:
    94f0:	3901      	subs	r1, #1
    94f2:	1149      	asrs	r1, r1, #5
    94f4:	f101 0c01 	add.w	ip, r1, #1
    94f8:	6911      	ldr	r1, [r2, #16]
    94fa:	f102 0314 	add.w	r3, r2, #20
    94fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9502:	428b      	cmp	r3, r1
    9504:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    9508:	d217      	bcs.n	953a <__copybits+0x4a>
    950a:	b510      	push	{r4, lr}
    950c:	f1a0 0e04 	sub.w	lr, r0, #4
    9510:	f853 4b04 	ldr.w	r4, [r3], #4
    9514:	f84e 4f04 	str.w	r4, [lr, #4]!
    9518:	4299      	cmp	r1, r3
    951a:	d8f9      	bhi.n	9510 <__copybits+0x20>
    951c:	1a8a      	subs	r2, r1, r2
    951e:	f1a2 0315 	sub.w	r3, r2, #21
    9522:	f023 0303 	bic.w	r3, r3, #3
    9526:	3304      	adds	r3, #4
    9528:	4418      	add	r0, r3
    952a:	4584      	cmp	ip, r0
    952c:	d904      	bls.n	9538 <__copybits+0x48>
    952e:	2300      	movs	r3, #0
    9530:	f840 3b04 	str.w	r3, [r0], #4
    9534:	4584      	cmp	ip, r0
    9536:	d8fb      	bhi.n	9530 <__copybits+0x40>
    9538:	bd10      	pop	{r4, pc}
    953a:	4584      	cmp	ip, r0
    953c:	d905      	bls.n	954a <__copybits+0x5a>
    953e:	2300      	movs	r3, #0
    9540:	f840 3b04 	str.w	r3, [r0], #4
    9544:	4584      	cmp	ip, r0
    9546:	d8fb      	bhi.n	9540 <__copybits+0x50>
    9548:	4770      	bx	lr
    954a:	4770      	bx	lr

0000954c <__any_on>:
    954c:	6903      	ldr	r3, [r0, #16]
    954e:	114a      	asrs	r2, r1, #5
    9550:	4293      	cmp	r3, r2
    9552:	f100 0014 	add.w	r0, r0, #20
    9556:	da09      	bge.n	956c <__any_on+0x20>
    9558:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    955c:	e002      	b.n	9564 <__any_on+0x18>
    955e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    9562:	b9c2      	cbnz	r2, 9596 <__any_on+0x4a>
    9564:	4283      	cmp	r3, r0
    9566:	d8fa      	bhi.n	955e <__any_on+0x12>
    9568:	2000      	movs	r0, #0
    956a:	4770      	bx	lr
    956c:	dd10      	ble.n	9590 <__any_on+0x44>
    956e:	f011 011f 	ands.w	r1, r1, #31
    9572:	d00d      	beq.n	9590 <__any_on+0x44>
    9574:	b410      	push	{r4}
    9576:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    957a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    957e:	fa24 f201 	lsr.w	r2, r4, r1
    9582:	408a      	lsls	r2, r1
    9584:	4294      	cmp	r4, r2
    9586:	d00c      	beq.n	95a2 <__any_on+0x56>
    9588:	2001      	movs	r0, #1
    958a:	f85d 4b04 	ldr.w	r4, [sp], #4
    958e:	4770      	bx	lr
    9590:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9594:	e7e6      	b.n	9564 <__any_on+0x18>
    9596:	2001      	movs	r0, #1
    9598:	4770      	bx	lr
    959a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    959e:	2a00      	cmp	r2, #0
    95a0:	d1f2      	bne.n	9588 <__any_on+0x3c>
    95a2:	4283      	cmp	r3, r0
    95a4:	d8f9      	bhi.n	959a <__any_on+0x4e>
    95a6:	2000      	movs	r0, #0
    95a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    95ac:	4770      	bx	lr
    95ae:	bf00      	nop

000095b0 <__ascii_wctomb>:
    95b0:	b149      	cbz	r1, 95c6 <__ascii_wctomb+0x16>
    95b2:	2aff      	cmp	r2, #255	; 0xff
    95b4:	d802      	bhi.n	95bc <__ascii_wctomb+0xc>
    95b6:	700a      	strb	r2, [r1, #0]
    95b8:	2001      	movs	r0, #1
    95ba:	4770      	bx	lr
    95bc:	238a      	movs	r3, #138	; 0x8a
    95be:	6003      	str	r3, [r0, #0]
    95c0:	f04f 30ff 	mov.w	r0, #4294967295
    95c4:	4770      	bx	lr
    95c6:	4608      	mov	r0, r1
    95c8:	4770      	bx	lr
    95ca:	bf00      	nop

000095cc <fcvtbuf>:
    95cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    95d0:	460e      	mov	r6, r1
    95d2:	4926      	ldr	r1, [pc, #152]	; (966c <fcvtbuf+0xa0>)
    95d4:	b087      	sub	sp, #28
    95d6:	680f      	ldr	r7, [r1, #0]
    95d8:	4604      	mov	r4, r0
    95da:	4690      	mov	r8, r2
    95dc:	461d      	mov	r5, r3
    95de:	b353      	cbz	r3, 9636 <fcvtbuf+0x6a>
    95e0:	aa05      	add	r2, sp, #20
    95e2:	4633      	mov	r3, r6
    95e4:	9201      	str	r2, [sp, #4]
    95e6:	2103      	movs	r1, #3
    95e8:	4622      	mov	r2, r4
    95ea:	f8cd 8000 	str.w	r8, [sp]
    95ee:	4638      	mov	r0, r7
    95f0:	f000 faee 	bl	9bd0 <_dtoa_r>
    95f4:	9b05      	ldr	r3, [sp, #20]
    95f6:	6832      	ldr	r2, [r6, #0]
    95f8:	4298      	cmp	r0, r3
    95fa:	4684      	mov	ip, r0
    95fc:	f1c2 0200 	rsb	r2, r2, #0
    9600:	4629      	mov	r1, r5
    9602:	d209      	bcs.n	9618 <fcvtbuf+0x4c>
    9604:	1a10      	subs	r0, r2, r0
    9606:	f81c 3b01 	ldrb.w	r3, [ip], #1
    960a:	f801 3b01 	strb.w	r3, [r1], #1
    960e:	9b05      	ldr	r3, [sp, #20]
    9610:	4563      	cmp	r3, ip
    9612:	eb00 020c 	add.w	r2, r0, ip
    9616:	d8f6      	bhi.n	9606 <fcvtbuf+0x3a>
    9618:	4294      	cmp	r4, r2
    961a:	dd24      	ble.n	9666 <fcvtbuf+0x9a>
    961c:	1aa2      	subs	r2, r4, r2
    961e:	440a      	add	r2, r1
    9620:	2330      	movs	r3, #48	; 0x30
    9622:	f801 3b01 	strb.w	r3, [r1], #1
    9626:	4291      	cmp	r1, r2
    9628:	d1fb      	bne.n	9622 <fcvtbuf+0x56>
    962a:	2300      	movs	r3, #0
    962c:	7013      	strb	r3, [r2, #0]
    962e:	4628      	mov	r0, r5
    9630:	b007      	add	sp, #28
    9632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9636:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9638:	f100 0323 	add.w	r3, r0, #35	; 0x23
    963c:	429a      	cmp	r2, r3
    963e:	dd01      	ble.n	9644 <fcvtbuf+0x78>
    9640:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    9642:	e7cd      	b.n	95e0 <fcvtbuf+0x14>
    9644:	f100 0924 	add.w	r9, r0, #36	; 0x24
    9648:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    964a:	464a      	mov	r2, r9
    964c:	4638      	mov	r0, r7
    964e:	ed8d 0b02 	vstr	d0, [sp, #8]
    9652:	f7fc fa3d 	bl	5ad0 <_realloc_r>
    9656:	4605      	mov	r5, r0
    9658:	2800      	cmp	r0, #0
    965a:	d0e8      	beq.n	962e <fcvtbuf+0x62>
    965c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    9660:	ed9d 0b02 	vldr	d0, [sp, #8]
    9664:	e7bc      	b.n	95e0 <fcvtbuf+0x14>
    9666:	460a      	mov	r2, r1
    9668:	e7df      	b.n	962a <fcvtbuf+0x5e>
    966a:	bf00      	nop
    966c:	20001b54 	.word	0x20001b54

00009670 <_fclose_r>:
    9670:	b570      	push	{r4, r5, r6, lr}
    9672:	2900      	cmp	r1, #0
    9674:	d04b      	beq.n	970e <_fclose_r+0x9e>
    9676:	4606      	mov	r6, r0
    9678:	460c      	mov	r4, r1
    967a:	b110      	cbz	r0, 9682 <_fclose_r+0x12>
    967c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    967e:	2b00      	cmp	r3, #0
    9680:	d048      	beq.n	9714 <_fclose_r+0xa4>
    9682:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9684:	07d8      	lsls	r0, r3, #31
    9686:	d534      	bpl.n	96f2 <_fclose_r+0x82>
    9688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    968c:	2b00      	cmp	r3, #0
    968e:	d03e      	beq.n	970e <_fclose_r+0x9e>
    9690:	4621      	mov	r1, r4
    9692:	4630      	mov	r0, r6
    9694:	f000 f850 	bl	9738 <__sflush_r>
    9698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    969a:	4605      	mov	r5, r0
    969c:	b133      	cbz	r3, 96ac <_fclose_r+0x3c>
    969e:	69e1      	ldr	r1, [r4, #28]
    96a0:	4630      	mov	r0, r6
    96a2:	4798      	blx	r3
    96a4:	2800      	cmp	r0, #0
    96a6:	bfb8      	it	lt
    96a8:	f04f 35ff 	movlt.w	r5, #4294967295
    96ac:	89a3      	ldrh	r3, [r4, #12]
    96ae:	061a      	lsls	r2, r3, #24
    96b0:	d43c      	bmi.n	972c <_fclose_r+0xbc>
    96b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    96b4:	b141      	cbz	r1, 96c8 <_fclose_r+0x58>
    96b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    96ba:	4299      	cmp	r1, r3
    96bc:	d002      	beq.n	96c4 <_fclose_r+0x54>
    96be:	4630      	mov	r0, r6
    96c0:	f7fe fd10 	bl	80e4 <_free_r>
    96c4:	2300      	movs	r3, #0
    96c6:	6323      	str	r3, [r4, #48]	; 0x30
    96c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    96ca:	b121      	cbz	r1, 96d6 <_fclose_r+0x66>
    96cc:	4630      	mov	r0, r6
    96ce:	f7fe fd09 	bl	80e4 <_free_r>
    96d2:	2300      	movs	r3, #0
    96d4:	6463      	str	r3, [r4, #68]	; 0x44
    96d6:	f7fd fd41 	bl	715c <__sfp_lock_acquire>
    96da:	6e63      	ldr	r3, [r4, #100]	; 0x64
    96dc:	2200      	movs	r2, #0
    96de:	07db      	lsls	r3, r3, #31
    96e0:	81a2      	strh	r2, [r4, #12]
    96e2:	d51f      	bpl.n	9724 <_fclose_r+0xb4>
    96e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96e6:	f7fe fa07 	bl	7af8 <__retarget_lock_close_recursive>
    96ea:	f7fd fd3d 	bl	7168 <__sfp_lock_release>
    96ee:	4628      	mov	r0, r5
    96f0:	bd70      	pop	{r4, r5, r6, pc}
    96f2:	89a3      	ldrh	r3, [r4, #12]
    96f4:	0599      	lsls	r1, r3, #22
    96f6:	d4cb      	bmi.n	9690 <_fclose_r+0x20>
    96f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    96fa:	f7fe f9ff 	bl	7afc <__retarget_lock_acquire_recursive>
    96fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9702:	2b00      	cmp	r3, #0
    9704:	d1c4      	bne.n	9690 <_fclose_r+0x20>
    9706:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9708:	f015 0501 	ands.w	r5, r5, #1
    970c:	d005      	beq.n	971a <_fclose_r+0xaa>
    970e:	2500      	movs	r5, #0
    9710:	4628      	mov	r0, r5
    9712:	bd70      	pop	{r4, r5, r6, pc}
    9714:	f7fd fd04 	bl	7120 <__sinit>
    9718:	e7b3      	b.n	9682 <_fclose_r+0x12>
    971a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    971c:	f7fe f9f0 	bl	7b00 <__retarget_lock_release_recursive>
    9720:	4628      	mov	r0, r5
    9722:	bd70      	pop	{r4, r5, r6, pc}
    9724:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9726:	f7fe f9eb 	bl	7b00 <__retarget_lock_release_recursive>
    972a:	e7db      	b.n	96e4 <_fclose_r+0x74>
    972c:	6921      	ldr	r1, [r4, #16]
    972e:	4630      	mov	r0, r6
    9730:	f7fe fcd8 	bl	80e4 <_free_r>
    9734:	e7bd      	b.n	96b2 <_fclose_r+0x42>
    9736:	bf00      	nop

00009738 <__sflush_r>:
    9738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9740:	460c      	mov	r4, r1
    9742:	0711      	lsls	r1, r2, #28
    9744:	4680      	mov	r8, r0
    9746:	d447      	bmi.n	97d8 <__sflush_r+0xa0>
    9748:	6863      	ldr	r3, [r4, #4]
    974a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    974e:	2b00      	cmp	r3, #0
    9750:	81a2      	strh	r2, [r4, #12]
    9752:	dd5e      	ble.n	9812 <__sflush_r+0xda>
    9754:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9756:	2d00      	cmp	r5, #0
    9758:	d058      	beq.n	980c <__sflush_r+0xd4>
    975a:	2300      	movs	r3, #0
    975c:	f8d8 6000 	ldr.w	r6, [r8]
    9760:	f8c8 3000 	str.w	r3, [r8]
    9764:	b293      	uxth	r3, r2
    9766:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    976a:	d156      	bne.n	981a <__sflush_r+0xe2>
    976c:	2301      	movs	r3, #1
    976e:	69e1      	ldr	r1, [r4, #28]
    9770:	4640      	mov	r0, r8
    9772:	47a8      	blx	r5
    9774:	1c43      	adds	r3, r0, #1
    9776:	d067      	beq.n	9848 <__sflush_r+0x110>
    9778:	89a3      	ldrh	r3, [r4, #12]
    977a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    977c:	075f      	lsls	r7, r3, #29
    977e:	d505      	bpl.n	978c <__sflush_r+0x54>
    9780:	6863      	ldr	r3, [r4, #4]
    9782:	1ac0      	subs	r0, r0, r3
    9784:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9786:	b10b      	cbz	r3, 978c <__sflush_r+0x54>
    9788:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    978a:	1ac0      	subs	r0, r0, r3
    978c:	69e1      	ldr	r1, [r4, #28]
    978e:	4602      	mov	r2, r0
    9790:	2300      	movs	r3, #0
    9792:	4640      	mov	r0, r8
    9794:	47a8      	blx	r5
    9796:	1c41      	adds	r1, r0, #1
    9798:	d141      	bne.n	981e <__sflush_r+0xe6>
    979a:	f8d8 3000 	ldr.w	r3, [r8]
    979e:	2b00      	cmp	r3, #0
    97a0:	d03d      	beq.n	981e <__sflush_r+0xe6>
    97a2:	2b1d      	cmp	r3, #29
    97a4:	d001      	beq.n	97aa <__sflush_r+0x72>
    97a6:	2b16      	cmp	r3, #22
    97a8:	d156      	bne.n	9858 <__sflush_r+0x120>
    97aa:	89a3      	ldrh	r3, [r4, #12]
    97ac:	6922      	ldr	r2, [r4, #16]
    97ae:	6022      	str	r2, [r4, #0]
    97b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    97b4:	2100      	movs	r1, #0
    97b6:	6061      	str	r1, [r4, #4]
    97b8:	81a3      	strh	r3, [r4, #12]
    97ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    97bc:	f8c8 6000 	str.w	r6, [r8]
    97c0:	b321      	cbz	r1, 980c <__sflush_r+0xd4>
    97c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    97c6:	4299      	cmp	r1, r3
    97c8:	d002      	beq.n	97d0 <__sflush_r+0x98>
    97ca:	4640      	mov	r0, r8
    97cc:	f7fe fc8a 	bl	80e4 <_free_r>
    97d0:	2000      	movs	r0, #0
    97d2:	6320      	str	r0, [r4, #48]	; 0x30
    97d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97d8:	6926      	ldr	r6, [r4, #16]
    97da:	b1be      	cbz	r6, 980c <__sflush_r+0xd4>
    97dc:	b293      	uxth	r3, r2
    97de:	6825      	ldr	r5, [r4, #0]
    97e0:	6026      	str	r6, [r4, #0]
    97e2:	079a      	lsls	r2, r3, #30
    97e4:	bf0c      	ite	eq
    97e6:	6963      	ldreq	r3, [r4, #20]
    97e8:	2300      	movne	r3, #0
    97ea:	1bad      	subs	r5, r5, r6
    97ec:	60a3      	str	r3, [r4, #8]
    97ee:	e00b      	b.n	9808 <__sflush_r+0xd0>
    97f0:	462b      	mov	r3, r5
    97f2:	4632      	mov	r2, r6
    97f4:	69e1      	ldr	r1, [r4, #28]
    97f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    97f8:	4640      	mov	r0, r8
    97fa:	47b8      	blx	r7
    97fc:	f1b0 0c00 	subs.w	ip, r0, #0
    9800:	eba5 050c 	sub.w	r5, r5, ip
    9804:	4466      	add	r6, ip
    9806:	dd17      	ble.n	9838 <__sflush_r+0x100>
    9808:	2d00      	cmp	r5, #0
    980a:	dcf1      	bgt.n	97f0 <__sflush_r+0xb8>
    980c:	2000      	movs	r0, #0
    980e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9812:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9814:	2b00      	cmp	r3, #0
    9816:	dc9d      	bgt.n	9754 <__sflush_r+0x1c>
    9818:	e7f8      	b.n	980c <__sflush_r+0xd4>
    981a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    981c:	e7ae      	b.n	977c <__sflush_r+0x44>
    981e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9822:	6922      	ldr	r2, [r4, #16]
    9824:	6022      	str	r2, [r4, #0]
    9826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    982a:	81a3      	strh	r3, [r4, #12]
    982c:	2200      	movs	r2, #0
    982e:	04db      	lsls	r3, r3, #19
    9830:	6062      	str	r2, [r4, #4]
    9832:	d5c2      	bpl.n	97ba <__sflush_r+0x82>
    9834:	6520      	str	r0, [r4, #80]	; 0x50
    9836:	e7c0      	b.n	97ba <__sflush_r+0x82>
    9838:	89a3      	ldrh	r3, [r4, #12]
    983a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    983e:	f04f 30ff 	mov.w	r0, #4294967295
    9842:	81a3      	strh	r3, [r4, #12]
    9844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9848:	f8d8 3000 	ldr.w	r3, [r8]
    984c:	2b00      	cmp	r3, #0
    984e:	d093      	beq.n	9778 <__sflush_r+0x40>
    9850:	2b1d      	cmp	r3, #29
    9852:	d006      	beq.n	9862 <__sflush_r+0x12a>
    9854:	2b16      	cmp	r3, #22
    9856:	d004      	beq.n	9862 <__sflush_r+0x12a>
    9858:	89a3      	ldrh	r3, [r4, #12]
    985a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    985e:	81a3      	strh	r3, [r4, #12]
    9860:	e7d5      	b.n	980e <__sflush_r+0xd6>
    9862:	f8c8 6000 	str.w	r6, [r8]
    9866:	e7d1      	b.n	980c <__sflush_r+0xd4>

00009868 <_fflush_r>:
    9868:	b538      	push	{r3, r4, r5, lr}
    986a:	460c      	mov	r4, r1
    986c:	4605      	mov	r5, r0
    986e:	b108      	cbz	r0, 9874 <_fflush_r+0xc>
    9870:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9872:	b303      	cbz	r3, 98b6 <_fflush_r+0x4e>
    9874:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9878:	b188      	cbz	r0, 989e <_fflush_r+0x36>
    987a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    987c:	07db      	lsls	r3, r3, #31
    987e:	d401      	bmi.n	9884 <_fflush_r+0x1c>
    9880:	0581      	lsls	r1, r0, #22
    9882:	d50f      	bpl.n	98a4 <_fflush_r+0x3c>
    9884:	4628      	mov	r0, r5
    9886:	4621      	mov	r1, r4
    9888:	f7ff ff56 	bl	9738 <__sflush_r>
    988c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    988e:	07da      	lsls	r2, r3, #31
    9890:	4605      	mov	r5, r0
    9892:	d402      	bmi.n	989a <_fflush_r+0x32>
    9894:	89a3      	ldrh	r3, [r4, #12]
    9896:	059b      	lsls	r3, r3, #22
    9898:	d508      	bpl.n	98ac <_fflush_r+0x44>
    989a:	4628      	mov	r0, r5
    989c:	bd38      	pop	{r3, r4, r5, pc}
    989e:	4605      	mov	r5, r0
    98a0:	4628      	mov	r0, r5
    98a2:	bd38      	pop	{r3, r4, r5, pc}
    98a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98a6:	f7fe f929 	bl	7afc <__retarget_lock_acquire_recursive>
    98aa:	e7eb      	b.n	9884 <_fflush_r+0x1c>
    98ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    98ae:	f7fe f927 	bl	7b00 <__retarget_lock_release_recursive>
    98b2:	4628      	mov	r0, r5
    98b4:	bd38      	pop	{r3, r4, r5, pc}
    98b6:	f7fd fc33 	bl	7120 <__sinit>
    98ba:	e7db      	b.n	9874 <_fflush_r+0xc>

000098bc <memcmp>:
    98bc:	2a03      	cmp	r2, #3
    98be:	b570      	push	{r4, r5, r6, lr}
    98c0:	d914      	bls.n	98ec <memcmp+0x30>
    98c2:	ea40 0301 	orr.w	r3, r0, r1
    98c6:	079b      	lsls	r3, r3, #30
    98c8:	d122      	bne.n	9910 <memcmp+0x54>
    98ca:	4604      	mov	r4, r0
    98cc:	460b      	mov	r3, r1
    98ce:	4619      	mov	r1, r3
    98d0:	4620      	mov	r0, r4
    98d2:	680e      	ldr	r6, [r1, #0]
    98d4:	6805      	ldr	r5, [r0, #0]
    98d6:	42b5      	cmp	r5, r6
    98d8:	f104 0404 	add.w	r4, r4, #4
    98dc:	f103 0304 	add.w	r3, r3, #4
    98e0:	d116      	bne.n	9910 <memcmp+0x54>
    98e2:	3a04      	subs	r2, #4
    98e4:	2a03      	cmp	r2, #3
    98e6:	4620      	mov	r0, r4
    98e8:	4619      	mov	r1, r3
    98ea:	d8f0      	bhi.n	98ce <memcmp+0x12>
    98ec:	1e54      	subs	r4, r2, #1
    98ee:	b19a      	cbz	r2, 9918 <memcmp+0x5c>
    98f0:	1e42      	subs	r2, r0, #1
    98f2:	3901      	subs	r1, #1
    98f4:	e001      	b.n	98fa <memcmp+0x3e>
    98f6:	18c3      	adds	r3, r0, r3
    98f8:	d00c      	beq.n	9914 <memcmp+0x58>
    98fa:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    98fe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    9902:	45e6      	cmp	lr, ip
    9904:	eba4 0302 	sub.w	r3, r4, r2
    9908:	d0f5      	beq.n	98f6 <memcmp+0x3a>
    990a:	ebae 000c 	sub.w	r0, lr, ip
    990e:	bd70      	pop	{r4, r5, r6, pc}
    9910:	1e54      	subs	r4, r2, #1
    9912:	e7ed      	b.n	98f0 <memcmp+0x34>
    9914:	4618      	mov	r0, r3
    9916:	bd70      	pop	{r4, r5, r6, pc}
    9918:	4610      	mov	r0, r2
    991a:	bd70      	pop	{r4, r5, r6, pc}

0000991c <strnlen>:
    991c:	b171      	cbz	r1, 993c <strnlen+0x20>
    991e:	4603      	mov	r3, r0
    9920:	eb00 0c01 	add.w	ip, r0, r1
    9924:	e001      	b.n	992a <strnlen+0xe>
    9926:	4563      	cmp	r3, ip
    9928:	d006      	beq.n	9938 <strnlen+0x1c>
    992a:	461a      	mov	r2, r3
    992c:	3301      	adds	r3, #1
    992e:	7811      	ldrb	r1, [r2, #0]
    9930:	2900      	cmp	r1, #0
    9932:	d1f8      	bne.n	9926 <strnlen+0xa>
    9934:	1a10      	subs	r0, r2, r0
    9936:	4770      	bx	lr
    9938:	1a18      	subs	r0, r3, r0
    993a:	4770      	bx	lr
    993c:	4608      	mov	r0, r1
    993e:	4770      	bx	lr

00009940 <_localeconv_r>:
    9940:	4800      	ldr	r0, [pc, #0]	; (9944 <_localeconv_r+0x4>)
    9942:	4770      	bx	lr
    9944:	200016bc 	.word	0x200016bc
	...

00009950 <memchr>:
    9950:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9954:	2a10      	cmp	r2, #16
    9956:	db2b      	blt.n	99b0 <memchr+0x60>
    9958:	f010 0f07 	tst.w	r0, #7
    995c:	d008      	beq.n	9970 <memchr+0x20>
    995e:	f810 3b01 	ldrb.w	r3, [r0], #1
    9962:	3a01      	subs	r2, #1
    9964:	428b      	cmp	r3, r1
    9966:	d02d      	beq.n	99c4 <memchr+0x74>
    9968:	f010 0f07 	tst.w	r0, #7
    996c:	b342      	cbz	r2, 99c0 <memchr+0x70>
    996e:	d1f6      	bne.n	995e <memchr+0xe>
    9970:	b4f0      	push	{r4, r5, r6, r7}
    9972:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9976:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    997a:	f022 0407 	bic.w	r4, r2, #7
    997e:	f07f 0700 	mvns.w	r7, #0
    9982:	2300      	movs	r3, #0
    9984:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    9988:	3c08      	subs	r4, #8
    998a:	ea85 0501 	eor.w	r5, r5, r1
    998e:	ea86 0601 	eor.w	r6, r6, r1
    9992:	fa85 f547 	uadd8	r5, r5, r7
    9996:	faa3 f587 	sel	r5, r3, r7
    999a:	fa86 f647 	uadd8	r6, r6, r7
    999e:	faa5 f687 	sel	r6, r5, r7
    99a2:	b98e      	cbnz	r6, 99c8 <memchr+0x78>
    99a4:	d1ee      	bne.n	9984 <memchr+0x34>
    99a6:	bcf0      	pop	{r4, r5, r6, r7}
    99a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    99ac:	f002 0207 	and.w	r2, r2, #7
    99b0:	b132      	cbz	r2, 99c0 <memchr+0x70>
    99b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    99b6:	3a01      	subs	r2, #1
    99b8:	ea83 0301 	eor.w	r3, r3, r1
    99bc:	b113      	cbz	r3, 99c4 <memchr+0x74>
    99be:	d1f8      	bne.n	99b2 <memchr+0x62>
    99c0:	2000      	movs	r0, #0
    99c2:	4770      	bx	lr
    99c4:	3801      	subs	r0, #1
    99c6:	4770      	bx	lr
    99c8:	2d00      	cmp	r5, #0
    99ca:	bf06      	itte	eq
    99cc:	4635      	moveq	r5, r6
    99ce:	3803      	subeq	r0, #3
    99d0:	3807      	subne	r0, #7
    99d2:	f015 0f01 	tst.w	r5, #1
    99d6:	d107      	bne.n	99e8 <memchr+0x98>
    99d8:	3001      	adds	r0, #1
    99da:	f415 7f80 	tst.w	r5, #256	; 0x100
    99de:	bf02      	ittt	eq
    99e0:	3001      	addeq	r0, #1
    99e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    99e6:	3001      	addeq	r0, #1
    99e8:	bcf0      	pop	{r4, r5, r6, r7}
    99ea:	3801      	subs	r0, #1
    99ec:	4770      	bx	lr
    99ee:	bf00      	nop

000099f0 <__assert_func>:
    99f0:	b500      	push	{lr}
    99f2:	4c0b      	ldr	r4, [pc, #44]	; (9a20 <__assert_func+0x30>)
    99f4:	6825      	ldr	r5, [r4, #0]
    99f6:	4614      	mov	r4, r2
    99f8:	68ee      	ldr	r6, [r5, #12]
    99fa:	461a      	mov	r2, r3
    99fc:	b085      	sub	sp, #20
    99fe:	4603      	mov	r3, r0
    9a00:	460d      	mov	r5, r1
    9a02:	b14c      	cbz	r4, 9a18 <__assert_func+0x28>
    9a04:	4907      	ldr	r1, [pc, #28]	; (9a24 <__assert_func+0x34>)
    9a06:	9500      	str	r5, [sp, #0]
    9a08:	e9cd 1401 	strd	r1, r4, [sp, #4]
    9a0c:	4630      	mov	r0, r6
    9a0e:	4906      	ldr	r1, [pc, #24]	; (9a28 <__assert_func+0x38>)
    9a10:	f000 ff86 	bl	a920 <fiprintf>
    9a14:	f7f9 ffc4 	bl	39a0 <abort>
    9a18:	4904      	ldr	r1, [pc, #16]	; (9a2c <__assert_func+0x3c>)
    9a1a:	460c      	mov	r4, r1
    9a1c:	e7f3      	b.n	9a06 <__assert_func+0x16>
    9a1e:	bf00      	nop
    9a20:	20001b54 	.word	0x20001b54
    9a24:	200006f4 	.word	0x200006f4
    9a28:	20000704 	.word	0x20000704
    9a2c:	200003cc 	.word	0x200003cc

00009a30 <_calloc_r>:
    9a30:	b538      	push	{r3, r4, r5, lr}
    9a32:	fba1 1402 	umull	r1, r4, r1, r2
    9a36:	bb8c      	cbnz	r4, 9a9c <_calloc_r+0x6c>
    9a38:	f7fb fd82 	bl	5540 <_malloc_r>
    9a3c:	4605      	mov	r5, r0
    9a3e:	b1e0      	cbz	r0, 9a7a <_calloc_r+0x4a>
    9a40:	f850 2c04 	ldr.w	r2, [r0, #-4]
    9a44:	f022 0203 	bic.w	r2, r2, #3
    9a48:	3a04      	subs	r2, #4
    9a4a:	2a24      	cmp	r2, #36	; 0x24
    9a4c:	d817      	bhi.n	9a7e <_calloc_r+0x4e>
    9a4e:	2a13      	cmp	r2, #19
    9a50:	d91a      	bls.n	9a88 <_calloc_r+0x58>
    9a52:	2a1b      	cmp	r2, #27
    9a54:	e9c0 4400 	strd	r4, r4, [r0]
    9a58:	d91d      	bls.n	9a96 <_calloc_r+0x66>
    9a5a:	2a24      	cmp	r2, #36	; 0x24
    9a5c:	bf14      	ite	ne
    9a5e:	f100 0210 	addne.w	r2, r0, #16
    9a62:	f100 0218 	addeq.w	r2, r0, #24
    9a66:	f04f 0300 	mov.w	r3, #0
    9a6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    9a6e:	bf04      	itt	eq
    9a70:	6104      	streq	r4, [r0, #16]
    9a72:	6144      	streq	r4, [r0, #20]
    9a74:	e9c2 3300 	strd	r3, r3, [r2]
    9a78:	6093      	str	r3, [r2, #8]
    9a7a:	4628      	mov	r0, r5
    9a7c:	bd38      	pop	{r3, r4, r5, pc}
    9a7e:	4621      	mov	r1, r4
    9a80:	f7fd fc5e 	bl	7340 <memset>
    9a84:	4628      	mov	r0, r5
    9a86:	bd38      	pop	{r3, r4, r5, pc}
    9a88:	4602      	mov	r2, r0
    9a8a:	2300      	movs	r3, #0
    9a8c:	e9c2 3300 	strd	r3, r3, [r2]
    9a90:	6093      	str	r3, [r2, #8]
    9a92:	4628      	mov	r0, r5
    9a94:	bd38      	pop	{r3, r4, r5, pc}
    9a96:	f100 0208 	add.w	r2, r0, #8
    9a9a:	e7f6      	b.n	9a8a <_calloc_r+0x5a>
    9a9c:	f7fe f800 	bl	7aa0 <__errno>
    9aa0:	230c      	movs	r3, #12
    9aa2:	2500      	movs	r5, #0
    9aa4:	6003      	str	r3, [r0, #0]
    9aa6:	e7e8      	b.n	9a7a <_calloc_r+0x4a>

00009aa8 <quorem>:
    9aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9aac:	6903      	ldr	r3, [r0, #16]
    9aae:	690c      	ldr	r4, [r1, #16]
    9ab0:	42a3      	cmp	r3, r4
    9ab2:	b083      	sub	sp, #12
    9ab4:	f2c0 8087 	blt.w	9bc6 <quorem+0x11e>
    9ab8:	3c01      	subs	r4, #1
    9aba:	f101 0514 	add.w	r5, r1, #20
    9abe:	00a3      	lsls	r3, r4, #2
    9ac0:	f100 0814 	add.w	r8, r0, #20
    9ac4:	9300      	str	r3, [sp, #0]
    9ac6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    9aca:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9ace:	3301      	adds	r3, #1
    9ad0:	4681      	mov	r9, r0
    9ad2:	429a      	cmp	r2, r3
    9ad4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    9ad8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    9adc:	9001      	str	r0, [sp, #4]
    9ade:	fbb2 f6f3 	udiv	r6, r2, r3
    9ae2:	d33b      	bcc.n	9b5c <quorem+0xb4>
    9ae4:	f04f 0c00 	mov.w	ip, #0
    9ae8:	46ae      	mov	lr, r5
    9aea:	4640      	mov	r0, r8
    9aec:	46e2      	mov	sl, ip
    9aee:	4663      	mov	r3, ip
    9af0:	f85e bb04 	ldr.w	fp, [lr], #4
    9af4:	6802      	ldr	r2, [r0, #0]
    9af6:	fa1f fc8b 	uxth.w	ip, fp
    9afa:	fb06 330c 	mla	r3, r6, ip, r3
    9afe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    9b02:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    9b06:	fb06 cc0b 	mla	ip, r6, fp, ip
    9b0a:	b29b      	uxth	r3, r3
    9b0c:	ebaa 0303 	sub.w	r3, sl, r3
    9b10:	fa1f fa8c 	uxth.w	sl, ip
    9b14:	fa13 f382 	uxtah	r3, r3, r2
    9b18:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    9b1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    9b20:	b29b      	uxth	r3, r3
    9b22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9b26:	4577      	cmp	r7, lr
    9b28:	f840 3b04 	str.w	r3, [r0], #4
    9b2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    9b30:	ea4f 431c 	mov.w	r3, ip, lsr #16
    9b34:	d2dc      	bcs.n	9af0 <quorem+0x48>
    9b36:	9b00      	ldr	r3, [sp, #0]
    9b38:	f858 3003 	ldr.w	r3, [r8, r3]
    9b3c:	b973      	cbnz	r3, 9b5c <quorem+0xb4>
    9b3e:	9b01      	ldr	r3, [sp, #4]
    9b40:	3b04      	subs	r3, #4
    9b42:	4598      	cmp	r8, r3
    9b44:	d304      	bcc.n	9b50 <quorem+0xa8>
    9b46:	e007      	b.n	9b58 <quorem+0xb0>
    9b48:	4598      	cmp	r8, r3
    9b4a:	f104 34ff 	add.w	r4, r4, #4294967295
    9b4e:	d203      	bcs.n	9b58 <quorem+0xb0>
    9b50:	f853 2904 	ldr.w	r2, [r3], #-4
    9b54:	2a00      	cmp	r2, #0
    9b56:	d0f7      	beq.n	9b48 <quorem+0xa0>
    9b58:	f8c9 4010 	str.w	r4, [r9, #16]
    9b5c:	4648      	mov	r0, r9
    9b5e:	f7ff facb 	bl	90f8 <__mcmp>
    9b62:	2800      	cmp	r0, #0
    9b64:	db2b      	blt.n	9bbe <quorem+0x116>
    9b66:	3601      	adds	r6, #1
    9b68:	4641      	mov	r1, r8
    9b6a:	2300      	movs	r3, #0
    9b6c:	f855 0b04 	ldr.w	r0, [r5], #4
    9b70:	f8d1 c000 	ldr.w	ip, [r1]
    9b74:	b282      	uxth	r2, r0
    9b76:	1a9a      	subs	r2, r3, r2
    9b78:	0c03      	lsrs	r3, r0, #16
    9b7a:	fa12 f28c 	uxtah	r2, r2, ip
    9b7e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    9b82:	eb03 4322 	add.w	r3, r3, r2, asr #16
    9b86:	b292      	uxth	r2, r2
    9b88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    9b8c:	42af      	cmp	r7, r5
    9b8e:	f841 2b04 	str.w	r2, [r1], #4
    9b92:	ea4f 4323 	mov.w	r3, r3, asr #16
    9b96:	d2e9      	bcs.n	9b6c <quorem+0xc4>
    9b98:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9b9c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    9ba0:	b96a      	cbnz	r2, 9bbe <quorem+0x116>
    9ba2:	3b04      	subs	r3, #4
    9ba4:	4598      	cmp	r8, r3
    9ba6:	d304      	bcc.n	9bb2 <quorem+0x10a>
    9ba8:	e007      	b.n	9bba <quorem+0x112>
    9baa:	4598      	cmp	r8, r3
    9bac:	f104 34ff 	add.w	r4, r4, #4294967295
    9bb0:	d203      	bcs.n	9bba <quorem+0x112>
    9bb2:	f853 2904 	ldr.w	r2, [r3], #-4
    9bb6:	2a00      	cmp	r2, #0
    9bb8:	d0f7      	beq.n	9baa <quorem+0x102>
    9bba:	f8c9 4010 	str.w	r4, [r9, #16]
    9bbe:	4630      	mov	r0, r6
    9bc0:	b003      	add	sp, #12
    9bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bc6:	2000      	movs	r0, #0
    9bc8:	b003      	add	sp, #12
    9bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bce:	bf00      	nop

00009bd0 <_dtoa_r>:
    9bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bd4:	ed2d 8b02 	vpush	{d8}
    9bd8:	b08f      	sub	sp, #60	; 0x3c
    9bda:	ed8d 0b02 	vstr	d0, [sp, #8]
    9bde:	9101      	str	r1, [sp, #4]
    9be0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    9be2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    9be4:	9305      	str	r3, [sp, #20]
    9be6:	ec57 6b10 	vmov	r6, r7, d0
    9bea:	4604      	mov	r4, r0
    9bec:	4693      	mov	fp, r2
    9bee:	b141      	cbz	r1, 9c02 <_dtoa_r+0x32>
    9bf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    9bf2:	604a      	str	r2, [r1, #4]
    9bf4:	2301      	movs	r3, #1
    9bf6:	4093      	lsls	r3, r2
    9bf8:	608b      	str	r3, [r1, #8]
    9bfa:	f7fe ffc5 	bl	8b88 <_Bfree>
    9bfe:	2300      	movs	r3, #0
    9c00:	63a3      	str	r3, [r4, #56]	; 0x38
    9c02:	f1b7 0800 	subs.w	r8, r7, #0
    9c06:	bfb4      	ite	lt
    9c08:	2301      	movlt	r3, #1
    9c0a:	2300      	movge	r3, #0
    9c0c:	602b      	str	r3, [r5, #0]
    9c0e:	4bbe      	ldr	r3, [pc, #760]	; (9f08 <_dtoa_r+0x338>)
    9c10:	bfbc      	itt	lt
    9c12:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    9c16:	f8cd 800c 	strlt.w	r8, [sp, #12]
    9c1a:	ea33 0308 	bics.w	r3, r3, r8
    9c1e:	f000 809f 	beq.w	9d60 <_dtoa_r+0x190>
    9c22:	ed9d 8b02 	vldr	d8, [sp, #8]
    9c26:	eeb5 8b40 	vcmp.f64	d8, #0.0
    9c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c2e:	d111      	bne.n	9c54 <_dtoa_r+0x84>
    9c30:	9a05      	ldr	r2, [sp, #20]
    9c32:	2301      	movs	r3, #1
    9c34:	6013      	str	r3, [r2, #0]
    9c36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9c38:	2b00      	cmp	r3, #0
    9c3a:	f000 823f 	beq.w	a0bc <_dtoa_r+0x4ec>
    9c3e:	4bb3      	ldr	r3, [pc, #716]	; (9f0c <_dtoa_r+0x33c>)
    9c40:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9c42:	6013      	str	r3, [r2, #0]
    9c44:	3b01      	subs	r3, #1
    9c46:	9300      	str	r3, [sp, #0]
    9c48:	9800      	ldr	r0, [sp, #0]
    9c4a:	b00f      	add	sp, #60	; 0x3c
    9c4c:	ecbd 8b02 	vpop	{d8}
    9c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c54:	aa0c      	add	r2, sp, #48	; 0x30
    9c56:	a90d      	add	r1, sp, #52	; 0x34
    9c58:	4620      	mov	r0, r4
    9c5a:	eeb0 0b48 	vmov.f64	d0, d8
    9c5e:	f7ff fbab 	bl	93b8 <__d2b>
    9c62:	ea5f 5318 	movs.w	r3, r8, lsr #20
    9c66:	4605      	mov	r5, r0
    9c68:	f040 8092 	bne.w	9d90 <_dtoa_r+0x1c0>
    9c6c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    9c70:	440b      	add	r3, r1
    9c72:	f203 4232 	addw	r2, r3, #1074	; 0x432
    9c76:	2a20      	cmp	r2, #32
    9c78:	f340 82fa 	ble.w	a270 <_dtoa_r+0x6a0>
    9c7c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    9c80:	fa08 f802 	lsl.w	r8, r8, r2
    9c84:	f203 4212 	addw	r2, r3, #1042	; 0x412
    9c88:	40d6      	lsrs	r6, r2
    9c8a:	ea48 0206 	orr.w	r2, r8, r6
    9c8e:	ee07 2a10 	vmov	s14, r2
    9c92:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    9c96:	1e58      	subs	r0, r3, #1
    9c98:	ee17 6a90 	vmov	r6, s15
    9c9c:	ec53 2b17 	vmov	r2, r3, d7
    9ca0:	f04f 0a01 	mov.w	sl, #1
    9ca4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    9ca8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 9ef0 <_dtoa_r+0x320>
    9cac:	ed9f 7b92 	vldr	d7, [pc, #584]	; 9ef8 <_dtoa_r+0x328>
    9cb0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 9f00 <_dtoa_r+0x330>
    9cb4:	ee06 0a90 	vmov	s13, r0
    9cb8:	ec43 2b12 	vmov	d2, r2, r3
    9cbc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    9cc0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    9cc4:	ee32 6b46 	vsub.f64	d6, d2, d6
    9cc8:	eea6 7b03 	vfma.f64	d7, d6, d3
    9ccc:	eea4 7b05 	vfma.f64	d7, d4, d5
    9cd0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9cd4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9cdc:	ee16 7a90 	vmov	r7, s13
    9ce0:	d508      	bpl.n	9cf4 <_dtoa_r+0x124>
    9ce2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    9ce6:	eeb4 6b47 	vcmp.f64	d6, d7
    9cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9cee:	bf18      	it	ne
    9cf0:	f107 37ff 	addne.w	r7, r7, #4294967295
    9cf4:	2f16      	cmp	r7, #22
    9cf6:	f200 8145 	bhi.w	9f84 <_dtoa_r+0x3b4>
    9cfa:	4b85      	ldr	r3, [pc, #532]	; (9f10 <_dtoa_r+0x340>)
    9cfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9d00:	ed93 7b00 	vldr	d7, [r3]
    9d04:	eeb4 8bc7 	vcmpe.f64	d8, d7
    9d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d0c:	d557      	bpl.n	9dbe <_dtoa_r+0x1ee>
    9d0e:	1a09      	subs	r1, r1, r0
    9d10:	2300      	movs	r3, #0
    9d12:	f1b1 0801 	subs.w	r8, r1, #1
    9d16:	f107 37ff 	add.w	r7, r7, #4294967295
    9d1a:	930a      	str	r3, [sp, #40]	; 0x28
    9d1c:	f100 8139 	bmi.w	9f92 <_dtoa_r+0x3c2>
    9d20:	2300      	movs	r3, #0
    9d22:	9306      	str	r3, [sp, #24]
    9d24:	2f00      	cmp	r7, #0
    9d26:	da52      	bge.n	9dce <_dtoa_r+0x1fe>
    9d28:	9b06      	ldr	r3, [sp, #24]
    9d2a:	9704      	str	r7, [sp, #16]
    9d2c:	1bdb      	subs	r3, r3, r7
    9d2e:	9306      	str	r3, [sp, #24]
    9d30:	427b      	negs	r3, r7
    9d32:	9308      	str	r3, [sp, #32]
    9d34:	9b01      	ldr	r3, [sp, #4]
    9d36:	2b09      	cmp	r3, #9
    9d38:	f04f 0700 	mov.w	r7, #0
    9d3c:	d84e      	bhi.n	9ddc <_dtoa_r+0x20c>
    9d3e:	2b05      	cmp	r3, #5
    9d40:	f340 829d 	ble.w	a27e <_dtoa_r+0x6ae>
    9d44:	3b04      	subs	r3, #4
    9d46:	9301      	str	r3, [sp, #4]
    9d48:	2600      	movs	r6, #0
    9d4a:	9b01      	ldr	r3, [sp, #4]
    9d4c:	1e9a      	subs	r2, r3, #2
    9d4e:	2a03      	cmp	r2, #3
    9d50:	f200 8125 	bhi.w	9f9e <_dtoa_r+0x3ce>
    9d54:	e8df f012 	tbh	[pc, r2, lsl #1]
    9d58:	03a703aa 	.word	0x03a703aa
    9d5c:	037e039d 	.word	0x037e039d
    9d60:	9a05      	ldr	r2, [sp, #20]
    9d62:	f3c8 0813 	ubfx	r8, r8, #0, #20
    9d66:	f242 730f 	movw	r3, #9999	; 0x270f
    9d6a:	ea58 0806 	orrs.w	r8, r8, r6
    9d6e:	6013      	str	r3, [r2, #0]
    9d70:	d11e      	bne.n	9db0 <_dtoa_r+0x1e0>
    9d72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9d74:	2b00      	cmp	r3, #0
    9d76:	f000 8591 	beq.w	a89c <_dtoa_r+0xccc>
    9d7a:	4b66      	ldr	r3, [pc, #408]	; (9f14 <_dtoa_r+0x344>)
    9d7c:	9300      	str	r3, [sp, #0]
    9d7e:	3308      	adds	r3, #8
    9d80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9d82:	9800      	ldr	r0, [sp, #0]
    9d84:	6013      	str	r3, [r2, #0]
    9d86:	b00f      	add	sp, #60	; 0x3c
    9d88:	ecbd 8b02 	vpop	{d8}
    9d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d90:	ee18 6a90 	vmov	r6, s17
    9d94:	f3c6 0613 	ubfx	r6, r6, #0, #20
    9d98:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    9d9c:	ec53 2b18 	vmov	r2, r3, d8
    9da0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    9da4:	990c      	ldr	r1, [sp, #48]	; 0x30
    9da6:	f04f 0a00 	mov.w	sl, #0
    9daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9dae:	e77b      	b.n	9ca8 <_dtoa_r+0xd8>
    9db0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9db2:	2b00      	cmp	r3, #0
    9db4:	f040 833b 	bne.w	a42e <_dtoa_r+0x85e>
    9db8:	4b57      	ldr	r3, [pc, #348]	; (9f18 <_dtoa_r+0x348>)
    9dba:	9300      	str	r3, [sp, #0]
    9dbc:	e744      	b.n	9c48 <_dtoa_r+0x78>
    9dbe:	1a09      	subs	r1, r1, r0
    9dc0:	2300      	movs	r3, #0
    9dc2:	f1b1 0801 	subs.w	r8, r1, #1
    9dc6:	930a      	str	r3, [sp, #40]	; 0x28
    9dc8:	f100 80e3 	bmi.w	9f92 <_dtoa_r+0x3c2>
    9dcc:	9306      	str	r3, [sp, #24]
    9dce:	2300      	movs	r3, #0
    9dd0:	9308      	str	r3, [sp, #32]
    9dd2:	9b01      	ldr	r3, [sp, #4]
    9dd4:	9704      	str	r7, [sp, #16]
    9dd6:	2b09      	cmp	r3, #9
    9dd8:	44b8      	add	r8, r7
    9dda:	d9b0      	bls.n	9d3e <_dtoa_r+0x16e>
    9ddc:	2300      	movs	r3, #0
    9dde:	2601      	movs	r6, #1
    9de0:	9301      	str	r3, [sp, #4]
    9de2:	9607      	str	r6, [sp, #28]
    9de4:	f04f 39ff 	mov.w	r9, #4294967295
    9de8:	469b      	mov	fp, r3
    9dea:	2100      	movs	r1, #0
    9dec:	63e1      	str	r1, [r4, #60]	; 0x3c
    9dee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    9df2:	4620      	mov	r0, r4
    9df4:	f7fe fea2 	bl	8b3c <_Balloc>
    9df8:	9000      	str	r0, [sp, #0]
    9dfa:	2800      	cmp	r0, #0
    9dfc:	f000 8540 	beq.w	a880 <_dtoa_r+0xcb0>
    9e00:	9b00      	ldr	r3, [sp, #0]
    9e02:	63a3      	str	r3, [r4, #56]	; 0x38
    9e04:	f1b9 0f0e 	cmp.w	r9, #14
    9e08:	f200 80dc 	bhi.w	9fc4 <_dtoa_r+0x3f4>
    9e0c:	2e00      	cmp	r6, #0
    9e0e:	f000 80d9 	beq.w	9fc4 <_dtoa_r+0x3f4>
    9e12:	9b04      	ldr	r3, [sp, #16]
    9e14:	2b00      	cmp	r3, #0
    9e16:	f340 83de 	ble.w	a5d6 <_dtoa_r+0xa06>
    9e1a:	4a3d      	ldr	r2, [pc, #244]	; (9f10 <_dtoa_r+0x340>)
    9e1c:	f003 010f 	and.w	r1, r3, #15
    9e20:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    9e24:	ed92 7b00 	vldr	d7, [r2]
    9e28:	111a      	asrs	r2, r3, #4
    9e2a:	05db      	lsls	r3, r3, #23
    9e2c:	f140 8382 	bpl.w	a534 <_dtoa_r+0x964>
    9e30:	493a      	ldr	r1, [pc, #232]	; (9f1c <_dtoa_r+0x34c>)
    9e32:	ed91 6b08 	vldr	d6, [r1, #32]
    9e36:	f002 020f 	and.w	r2, r2, #15
    9e3a:	2003      	movs	r0, #3
    9e3c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    9e40:	b15a      	cbz	r2, 9e5a <_dtoa_r+0x28a>
    9e42:	4936      	ldr	r1, [pc, #216]	; (9f1c <_dtoa_r+0x34c>)
    9e44:	07d6      	lsls	r6, r2, #31
    9e46:	d504      	bpl.n	9e52 <_dtoa_r+0x282>
    9e48:	ed91 6b00 	vldr	d6, [r1]
    9e4c:	3001      	adds	r0, #1
    9e4e:	ee27 7b06 	vmul.f64	d7, d7, d6
    9e52:	1052      	asrs	r2, r2, #1
    9e54:	f101 0108 	add.w	r1, r1, #8
    9e58:	d1f4      	bne.n	9e44 <_dtoa_r+0x274>
    9e5a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    9e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e60:	b13b      	cbz	r3, 9e72 <_dtoa_r+0x2a2>
    9e62:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    9e66:	eeb4 6bc7 	vcmpe.f64	d6, d7
    9e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e6e:	f100 84ae 	bmi.w	a7ce <_dtoa_r+0xbfe>
    9e72:	ee07 0a90 	vmov	s15, r0
    9e76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    9e7a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    9e7e:	eea5 7b06 	vfma.f64	d7, d5, d6
    9e82:	ee17 2a90 	vmov	r2, s15
    9e86:	ec51 0b17 	vmov	r0, r1, d7
    9e8a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    9e8e:	f1b9 0f00 	cmp.w	r9, #0
    9e92:	f000 8388 	beq.w	a5a6 <_dtoa_r+0x9d6>
    9e96:	9e04      	ldr	r6, [sp, #16]
    9e98:	464a      	mov	r2, r9
    9e9a:	9b07      	ldr	r3, [sp, #28]
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	f000 8447 	beq.w	a730 <_dtoa_r+0xb60>
    9ea2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    9ea6:	4b1a      	ldr	r3, [pc, #104]	; (9f10 <_dtoa_r+0x340>)
    9ea8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    9eac:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    9eb0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    9eb4:	ee36 7b47 	vsub.f64	d7, d6, d7
    9eb8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    9ebc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    9ec0:	ec41 0b16 	vmov	d6, r0, r1
    9ec4:	ee14 0a90 	vmov	r0, s9
    9ec8:	ee35 5b46 	vsub.f64	d5, d5, d6
    9ecc:	9900      	ldr	r1, [sp, #0]
    9ece:	eeb4 5bc7 	vcmpe.f64	d5, d7
    9ed2:	3030      	adds	r0, #48	; 0x30
    9ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ed8:	f801 0b01 	strb.w	r0, [r1], #1
    9edc:	f300 84ac 	bgt.w	a838 <_dtoa_r+0xc68>
    9ee0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    9ee4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    9ee8:	f04f 0c00 	mov.w	ip, #0
    9eec:	e031      	b.n	9f52 <_dtoa_r+0x382>
    9eee:	bf00      	nop
    9ef0:	636f4361 	.word	0x636f4361
    9ef4:	3fd287a7 	.word	0x3fd287a7
    9ef8:	8b60c8b3 	.word	0x8b60c8b3
    9efc:	3fc68a28 	.word	0x3fc68a28
    9f00:	509f79fb 	.word	0x509f79fb
    9f04:	3fd34413 	.word	0x3fd34413
    9f08:	7ff00000 	.word	0x7ff00000
    9f0c:	20000e65 	.word	0x20000e65
    9f10:	200002a8 	.word	0x200002a8
    9f14:	20000a34 	.word	0x20000a34
    9f18:	20000a40 	.word	0x20000a40
    9f1c:	20000280 	.word	0x20000280
    9f20:	f10c 0c01 	add.w	ip, ip, #1
    9f24:	4594      	cmp	ip, r2
    9f26:	da4d      	bge.n	9fc4 <_dtoa_r+0x3f4>
    9f28:	ee27 7b04 	vmul.f64	d7, d7, d4
    9f2c:	ee25 5b04 	vmul.f64	d5, d5, d4
    9f30:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9f34:	ee16 3a90 	vmov	r3, s13
    9f38:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    9f3c:	3330      	adds	r3, #48	; 0x30
    9f3e:	ee37 7b43 	vsub.f64	d7, d7, d3
    9f42:	eeb4 7bc5 	vcmpe.f64	d7, d5
    9f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f4a:	f801 3b01 	strb.w	r3, [r1], #1
    9f4e:	f100 8473 	bmi.w	a838 <_dtoa_r+0xc68>
    9f52:	ee32 6b47 	vsub.f64	d6, d2, d7
    9f56:	eeb4 6bc5 	vcmpe.f64	d6, d5
    9f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9f5e:	d5df      	bpl.n	9f20 <_dtoa_r+0x350>
    9f60:	9a00      	ldr	r2, [sp, #0]
    9f62:	9604      	str	r6, [sp, #16]
    9f64:	e002      	b.n	9f6c <_dtoa_r+0x39c>
    9f66:	428a      	cmp	r2, r1
    9f68:	f000 8450 	beq.w	a80c <_dtoa_r+0xc3c>
    9f6c:	4689      	mov	r9, r1
    9f6e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    9f72:	2b39      	cmp	r3, #57	; 0x39
    9f74:	d0f7      	beq.n	9f66 <_dtoa_r+0x396>
    9f76:	3301      	adds	r3, #1
    9f78:	b2db      	uxtb	r3, r3
    9f7a:	700b      	strb	r3, [r1, #0]
    9f7c:	9b04      	ldr	r3, [sp, #16]
    9f7e:	3301      	adds	r3, #1
    9f80:	9304      	str	r3, [sp, #16]
    9f82:	e155      	b.n	a230 <_dtoa_r+0x660>
    9f84:	1a09      	subs	r1, r1, r0
    9f86:	2301      	movs	r3, #1
    9f88:	f1b1 0801 	subs.w	r8, r1, #1
    9f8c:	930a      	str	r3, [sp, #40]	; 0x28
    9f8e:	f57f aec7 	bpl.w	9d20 <_dtoa_r+0x150>
    9f92:	f1c1 0301 	rsb	r3, r1, #1
    9f96:	9306      	str	r3, [sp, #24]
    9f98:	f04f 0800 	mov.w	r8, #0
    9f9c:	e6c2      	b.n	9d24 <_dtoa_r+0x154>
    9f9e:	2600      	movs	r6, #0
    9fa0:	63e6      	str	r6, [r4, #60]	; 0x3c
    9fa2:	4631      	mov	r1, r6
    9fa4:	4620      	mov	r0, r4
    9fa6:	f7fe fdc9 	bl	8b3c <_Balloc>
    9faa:	9000      	str	r0, [sp, #0]
    9fac:	2800      	cmp	r0, #0
    9fae:	f000 8467 	beq.w	a880 <_dtoa_r+0xcb0>
    9fb2:	9b00      	ldr	r3, [sp, #0]
    9fb4:	63a3      	str	r3, [r4, #56]	; 0x38
    9fb6:	f04f 33ff 	mov.w	r3, #4294967295
    9fba:	930b      	str	r3, [sp, #44]	; 0x2c
    9fbc:	4699      	mov	r9, r3
    9fbe:	2301      	movs	r3, #1
    9fc0:	46b3      	mov	fp, r6
    9fc2:	9307      	str	r3, [sp, #28]
    9fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9fc6:	2a00      	cmp	r2, #0
    9fc8:	db55      	blt.n	a076 <_dtoa_r+0x4a6>
    9fca:	9904      	ldr	r1, [sp, #16]
    9fcc:	290e      	cmp	r1, #14
    9fce:	dc52      	bgt.n	a076 <_dtoa_r+0x4a6>
    9fd0:	4bb7      	ldr	r3, [pc, #732]	; (a2b0 <_dtoa_r+0x6e0>)
    9fd2:	f1bb 0f00 	cmp.w	fp, #0
    9fd6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9fda:	ed93 6b00 	vldr	d6, [r3]
    9fde:	da15      	bge.n	a00c <_dtoa_r+0x43c>
    9fe0:	f1b9 0f00 	cmp.w	r9, #0
    9fe4:	dc12      	bgt.n	a00c <_dtoa_r+0x43c>
    9fe6:	f040 82f2 	bne.w	a5ce <_dtoa_r+0x9fe>
    9fea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    9fee:	ee26 7b07 	vmul.f64	d7, d6, d7
    9ff2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    9ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ffa:	46ca      	mov	sl, r9
    9ffc:	464e      	mov	r6, r9
    9ffe:	f200 826d 	bhi.w	a4dc <_dtoa_r+0x90c>
    a002:	f8dd 8000 	ldr.w	r8, [sp]
    a006:	ea6f 0b0b 	mvn.w	fp, fp
    a00a:	e270      	b.n	a4ee <_dtoa_r+0x91e>
    a00c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a010:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a014:	9900      	ldr	r1, [sp, #0]
    a016:	ee17 3a10 	vmov	r3, s14
    a01a:	f1b9 0f01 	cmp.w	r9, #1
    a01e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a022:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a026:	f801 3b01 	strb.w	r3, [r1], #1
    a02a:	eea5 8b46 	vfms.f64	d8, d5, d6
    a02e:	f000 8334 	beq.w	a69a <_dtoa_r+0xaca>
    a032:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a036:	2301      	movs	r3, #1
    a038:	e011      	b.n	a05e <_dtoa_r+0x48e>
    a03a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a03e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a042:	3301      	adds	r3, #1
    a044:	ee17 2a10 	vmov	r2, s14
    a048:	454b      	cmp	r3, r9
    a04a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    a04e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a052:	f801 2b01 	strb.w	r2, [r1], #1
    a056:	eea5 8b46 	vfms.f64	d8, d5, d6
    a05a:	f000 831e 	beq.w	a69a <_dtoa_r+0xaca>
    a05e:	ee28 8b04 	vmul.f64	d8, d8, d4
    a062:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a06a:	d1e6      	bne.n	a03a <_dtoa_r+0x46a>
    a06c:	9b04      	ldr	r3, [sp, #16]
    a06e:	3301      	adds	r3, #1
    a070:	9304      	str	r3, [sp, #16]
    a072:	4689      	mov	r9, r1
    a074:	e0dc      	b.n	a230 <_dtoa_r+0x660>
    a076:	9b07      	ldr	r3, [sp, #28]
    a078:	b343      	cbz	r3, a0cc <_dtoa_r+0x4fc>
    a07a:	9b01      	ldr	r3, [sp, #4]
    a07c:	2b01      	cmp	r3, #1
    a07e:	f340 8276 	ble.w	a56e <_dtoa_r+0x99e>
    a082:	9b08      	ldr	r3, [sp, #32]
    a084:	f109 3aff 	add.w	sl, r9, #4294967295
    a088:	4553      	cmp	r3, sl
    a08a:	f280 823f 	bge.w	a50c <_dtoa_r+0x93c>
    a08e:	9b08      	ldr	r3, [sp, #32]
    a090:	f8cd a020 	str.w	sl, [sp, #32]
    a094:	ebaa 0203 	sub.w	r2, sl, r3
    a098:	4417      	add	r7, r2
    a09a:	f04f 0a00 	mov.w	sl, #0
    a09e:	f1b9 0f00 	cmp.w	r9, #0
    a0a2:	f2c0 8325 	blt.w	a6f0 <_dtoa_r+0xb20>
    a0a6:	9b06      	ldr	r3, [sp, #24]
    a0a8:	9309      	str	r3, [sp, #36]	; 0x24
    a0aa:	444b      	add	r3, r9
    a0ac:	44c8      	add	r8, r9
    a0ae:	9306      	str	r3, [sp, #24]
    a0b0:	2101      	movs	r1, #1
    a0b2:	4620      	mov	r0, r4
    a0b4:	f7fe fe6c 	bl	8d90 <__i2b>
    a0b8:	4606      	mov	r6, r0
    a0ba:	e00c      	b.n	a0d6 <_dtoa_r+0x506>
    a0bc:	4b7d      	ldr	r3, [pc, #500]	; (a2b4 <_dtoa_r+0x6e4>)
    a0be:	9300      	str	r3, [sp, #0]
    a0c0:	9800      	ldr	r0, [sp, #0]
    a0c2:	b00f      	add	sp, #60	; 0x3c
    a0c4:	ecbd 8b02 	vpop	{d8}
    a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0cc:	9b06      	ldr	r3, [sp, #24]
    a0ce:	f8dd a020 	ldr.w	sl, [sp, #32]
    a0d2:	9e07      	ldr	r6, [sp, #28]
    a0d4:	9309      	str	r3, [sp, #36]	; 0x24
    a0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a0d8:	b16b      	cbz	r3, a0f6 <_dtoa_r+0x526>
    a0da:	f1b8 0f00 	cmp.w	r8, #0
    a0de:	dd0a      	ble.n	a0f6 <_dtoa_r+0x526>
    a0e0:	4543      	cmp	r3, r8
    a0e2:	9906      	ldr	r1, [sp, #24]
    a0e4:	461a      	mov	r2, r3
    a0e6:	bfa8      	it	ge
    a0e8:	4642      	movge	r2, r8
    a0ea:	1a89      	subs	r1, r1, r2
    a0ec:	1a9b      	subs	r3, r3, r2
    a0ee:	9106      	str	r1, [sp, #24]
    a0f0:	9309      	str	r3, [sp, #36]	; 0x24
    a0f2:	eba8 0802 	sub.w	r8, r8, r2
    a0f6:	9b08      	ldr	r3, [sp, #32]
    a0f8:	b163      	cbz	r3, a114 <_dtoa_r+0x544>
    a0fa:	9b07      	ldr	r3, [sp, #28]
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	f000 82a7 	beq.w	a650 <_dtoa_r+0xa80>
    a102:	f1ba 0f00 	cmp.w	sl, #0
    a106:	f300 8204 	bgt.w	a512 <_dtoa_r+0x942>
    a10a:	9b08      	ldr	r3, [sp, #32]
    a10c:	ebb3 020a 	subs.w	r2, r3, sl
    a110:	f040 82ff 	bne.w	a712 <_dtoa_r+0xb42>
    a114:	2101      	movs	r1, #1
    a116:	4620      	mov	r0, r4
    a118:	f7fe fe3a 	bl	8d90 <__i2b>
    a11c:	2f00      	cmp	r7, #0
    a11e:	4682      	mov	sl, r0
    a120:	f300 80af 	bgt.w	a282 <_dtoa_r+0x6b2>
    a124:	9b01      	ldr	r3, [sp, #4]
    a126:	2b01      	cmp	r3, #1
    a128:	f340 8187 	ble.w	a43a <_dtoa_r+0x86a>
    a12c:	2300      	movs	r3, #0
    a12e:	9308      	str	r3, [sp, #32]
    a130:	2001      	movs	r0, #1
    a132:	2f00      	cmp	r7, #0
    a134:	f040 80b1 	bne.w	a29a <_dtoa_r+0x6ca>
    a138:	4440      	add	r0, r8
    a13a:	f010 001f 	ands.w	r0, r0, #31
    a13e:	f000 817a 	beq.w	a436 <_dtoa_r+0x866>
    a142:	f1c0 0220 	rsb	r2, r0, #32
    a146:	2a04      	cmp	r2, #4
    a148:	f300 8088 	bgt.w	a25c <_dtoa_r+0x68c>
    a14c:	f040 81f6 	bne.w	a53c <_dtoa_r+0x96c>
    a150:	9b06      	ldr	r3, [sp, #24]
    a152:	2b00      	cmp	r3, #0
    a154:	dd05      	ble.n	a162 <_dtoa_r+0x592>
    a156:	4629      	mov	r1, r5
    a158:	461a      	mov	r2, r3
    a15a:	4620      	mov	r0, r4
    a15c:	f7fe ff54 	bl	9008 <__lshift>
    a160:	4605      	mov	r5, r0
    a162:	f1b8 0f00 	cmp.w	r8, #0
    a166:	dd05      	ble.n	a174 <_dtoa_r+0x5a4>
    a168:	4651      	mov	r1, sl
    a16a:	4642      	mov	r2, r8
    a16c:	4620      	mov	r0, r4
    a16e:	f7fe ff4b 	bl	9008 <__lshift>
    a172:	4682      	mov	sl, r0
    a174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a176:	2b00      	cmp	r3, #0
    a178:	f040 813f 	bne.w	a3fa <_dtoa_r+0x82a>
    a17c:	f1b9 0f00 	cmp.w	r9, #0
    a180:	f340 8125 	ble.w	a3ce <_dtoa_r+0x7fe>
    a184:	9b07      	ldr	r3, [sp, #28]
    a186:	2b00      	cmp	r3, #0
    a188:	f040 80a3 	bne.w	a2d2 <_dtoa_r+0x702>
    a18c:	9b04      	ldr	r3, [sp, #16]
    a18e:	3301      	adds	r3, #1
    a190:	9304      	str	r3, [sp, #16]
    a192:	f8dd 8000 	ldr.w	r8, [sp]
    a196:	2701      	movs	r7, #1
    a198:	e007      	b.n	a1aa <_dtoa_r+0x5da>
    a19a:	4629      	mov	r1, r5
    a19c:	2300      	movs	r3, #0
    a19e:	220a      	movs	r2, #10
    a1a0:	4620      	mov	r0, r4
    a1a2:	f7fe fcfb 	bl	8b9c <__multadd>
    a1a6:	3701      	adds	r7, #1
    a1a8:	4605      	mov	r5, r0
    a1aa:	4651      	mov	r1, sl
    a1ac:	4628      	mov	r0, r5
    a1ae:	f7ff fc7b 	bl	9aa8 <quorem>
    a1b2:	45b9      	cmp	r9, r7
    a1b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a1b8:	f808 0b01 	strb.w	r0, [r8], #1
    a1bc:	dced      	bgt.n	a19a <_dtoa_r+0x5ca>
    a1be:	f1b9 0f00 	cmp.w	r9, #0
    a1c2:	9a00      	ldr	r2, [sp, #0]
    a1c4:	bfcc      	ite	gt
    a1c6:	46cb      	movgt	fp, r9
    a1c8:	f04f 0b01 	movle.w	fp, #1
    a1cc:	4603      	mov	r3, r0
    a1ce:	4493      	add	fp, r2
    a1d0:	2700      	movs	r7, #0
    a1d2:	4629      	mov	r1, r5
    a1d4:	2201      	movs	r2, #1
    a1d6:	4620      	mov	r0, r4
    a1d8:	9301      	str	r3, [sp, #4]
    a1da:	f7fe ff15 	bl	9008 <__lshift>
    a1de:	4651      	mov	r1, sl
    a1e0:	4605      	mov	r5, r0
    a1e2:	f7fe ff89 	bl	90f8 <__mcmp>
    a1e6:	2800      	cmp	r0, #0
    a1e8:	f340 81af 	ble.w	a54a <_dtoa_r+0x97a>
    a1ec:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    a1f0:	9a00      	ldr	r2, [sp, #0]
    a1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
    a1f6:	e004      	b.n	a202 <_dtoa_r+0x632>
    a1f8:	455a      	cmp	r2, fp
    a1fa:	f000 81b1 	beq.w	a560 <_dtoa_r+0x990>
    a1fe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a202:	2b39      	cmp	r3, #57	; 0x39
    a204:	f10b 0901 	add.w	r9, fp, #1
    a208:	d0f6      	beq.n	a1f8 <_dtoa_r+0x628>
    a20a:	3301      	adds	r3, #1
    a20c:	f88b 3000 	strb.w	r3, [fp]
    a210:	4651      	mov	r1, sl
    a212:	4620      	mov	r0, r4
    a214:	f7fe fcb8 	bl	8b88 <_Bfree>
    a218:	b156      	cbz	r6, a230 <_dtoa_r+0x660>
    a21a:	b12f      	cbz	r7, a228 <_dtoa_r+0x658>
    a21c:	42b7      	cmp	r7, r6
    a21e:	d003      	beq.n	a228 <_dtoa_r+0x658>
    a220:	4639      	mov	r1, r7
    a222:	4620      	mov	r0, r4
    a224:	f7fe fcb0 	bl	8b88 <_Bfree>
    a228:	4631      	mov	r1, r6
    a22a:	4620      	mov	r0, r4
    a22c:	f7fe fcac 	bl	8b88 <_Bfree>
    a230:	4629      	mov	r1, r5
    a232:	4620      	mov	r0, r4
    a234:	f7fe fca8 	bl	8b88 <_Bfree>
    a238:	2300      	movs	r3, #0
    a23a:	f889 3000 	strb.w	r3, [r9]
    a23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a242:	601a      	str	r2, [r3, #0]
    a244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a246:	2b00      	cmp	r3, #0
    a248:	f43f acfe 	beq.w	9c48 <_dtoa_r+0x78>
    a24c:	9800      	ldr	r0, [sp, #0]
    a24e:	f8c3 9000 	str.w	r9, [r3]
    a252:	b00f      	add	sp, #60	; 0x3c
    a254:	ecbd 8b02 	vpop	{d8}
    a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a25c:	f1c0 001c 	rsb	r0, r0, #28
    a260:	9b06      	ldr	r3, [sp, #24]
    a262:	4403      	add	r3, r0
    a264:	9306      	str	r3, [sp, #24]
    a266:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a268:	4403      	add	r3, r0
    a26a:	9309      	str	r3, [sp, #36]	; 0x24
    a26c:	4480      	add	r8, r0
    a26e:	e76f      	b.n	a150 <_dtoa_r+0x580>
    a270:	f1c2 0220 	rsb	r2, r2, #32
    a274:	fa06 f202 	lsl.w	r2, r6, r2
    a278:	ee07 2a10 	vmov	s14, r2
    a27c:	e509      	b.n	9c92 <_dtoa_r+0xc2>
    a27e:	2601      	movs	r6, #1
    a280:	e563      	b.n	9d4a <_dtoa_r+0x17a>
    a282:	4601      	mov	r1, r0
    a284:	463a      	mov	r2, r7
    a286:	4620      	mov	r0, r4
    a288:	f7fe fe5e 	bl	8f48 <__pow5mult>
    a28c:	9b01      	ldr	r3, [sp, #4]
    a28e:	2b01      	cmp	r3, #1
    a290:	4682      	mov	sl, r0
    a292:	f340 81c5 	ble.w	a620 <_dtoa_r+0xa50>
    a296:	2300      	movs	r3, #0
    a298:	9308      	str	r3, [sp, #32]
    a29a:	f8da 2010 	ldr.w	r2, [sl, #16]
    a29e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    a2a2:	6910      	ldr	r0, [r2, #16]
    a2a4:	f7fe fd24 	bl	8cf0 <__hi0bits>
    a2a8:	f1c0 0020 	rsb	r0, r0, #32
    a2ac:	e744      	b.n	a138 <_dtoa_r+0x568>
    a2ae:	bf00      	nop
    a2b0:	200002a8 	.word	0x200002a8
    a2b4:	20000e64 	.word	0x20000e64
    a2b8:	4631      	mov	r1, r6
    a2ba:	2300      	movs	r3, #0
    a2bc:	220a      	movs	r2, #10
    a2be:	4620      	mov	r0, r4
    a2c0:	f7fe fc6c 	bl	8b9c <__multadd>
    a2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	4606      	mov	r6, r0
    a2ca:	f340 82ce 	ble.w	a86a <_dtoa_r+0xc9a>
    a2ce:	9704      	str	r7, [sp, #16]
    a2d0:	4699      	mov	r9, r3
    a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a2d4:	2b00      	cmp	r3, #0
    a2d6:	dd05      	ble.n	a2e4 <_dtoa_r+0x714>
    a2d8:	4631      	mov	r1, r6
    a2da:	461a      	mov	r2, r3
    a2dc:	4620      	mov	r0, r4
    a2de:	f7fe fe93 	bl	9008 <__lshift>
    a2e2:	4606      	mov	r6, r0
    a2e4:	9b08      	ldr	r3, [sp, #32]
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	f040 81eb 	bne.w	a6c2 <_dtoa_r+0xaf2>
    a2ec:	46b0      	mov	r8, r6
    a2ee:	9b02      	ldr	r3, [sp, #8]
    a2f0:	9f00      	ldr	r7, [sp, #0]
    a2f2:	f003 0201 	and.w	r2, r3, #1
    a2f6:	1e7b      	subs	r3, r7, #1
    a2f8:	444b      	add	r3, r9
    a2fa:	9308      	str	r3, [sp, #32]
    a2fc:	9b01      	ldr	r3, [sp, #4]
    a2fe:	920a      	str	r2, [sp, #40]	; 0x28
    a300:	4313      	orrs	r3, r2
    a302:	9309      	str	r3, [sp, #36]	; 0x24
    a304:	4651      	mov	r1, sl
    a306:	4628      	mov	r0, r5
    a308:	f7ff fbce 	bl	9aa8 <quorem>
    a30c:	4631      	mov	r1, r6
    a30e:	4683      	mov	fp, r0
    a310:	4628      	mov	r0, r5
    a312:	f7fe fef1 	bl	90f8 <__mcmp>
    a316:	4642      	mov	r2, r8
    a318:	4651      	mov	r1, sl
    a31a:	4681      	mov	r9, r0
    a31c:	4620      	mov	r0, r4
    a31e:	f7fe ff0d 	bl	913c <__mdiff>
    a322:	68c2      	ldr	r2, [r0, #12]
    a324:	4601      	mov	r1, r0
    a326:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    a32a:	2a00      	cmp	r2, #0
    a32c:	d142      	bne.n	a3b4 <_dtoa_r+0x7e4>
    a32e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    a332:	4628      	mov	r0, r5
    a334:	f7fe fee0 	bl	90f8 <__mcmp>
    a338:	9906      	ldr	r1, [sp, #24]
    a33a:	9002      	str	r0, [sp, #8]
    a33c:	4620      	mov	r0, r4
    a33e:	f7fe fc23 	bl	8b88 <_Bfree>
    a342:	9a02      	ldr	r2, [sp, #8]
    a344:	9b07      	ldr	r3, [sp, #28]
    a346:	b91a      	cbnz	r2, a350 <_dtoa_r+0x780>
    a348:	9909      	ldr	r1, [sp, #36]	; 0x24
    a34a:	2900      	cmp	r1, #0
    a34c:	f000 827e 	beq.w	a84c <_dtoa_r+0xc7c>
    a350:	f1b9 0f00 	cmp.w	r9, #0
    a354:	f2c0 8183 	blt.w	a65e <_dtoa_r+0xa8e>
    a358:	9901      	ldr	r1, [sp, #4]
    a35a:	ea49 0901 	orr.w	r9, r9, r1
    a35e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a360:	ea51 0909 	orrs.w	r9, r1, r9
    a364:	f000 817b 	beq.w	a65e <_dtoa_r+0xa8e>
    a368:	2a00      	cmp	r2, #0
    a36a:	f300 81c6 	bgt.w	a6fa <_dtoa_r+0xb2a>
    a36e:	9a08      	ldr	r2, [sp, #32]
    a370:	703b      	strb	r3, [r7, #0]
    a372:	f107 0901 	add.w	r9, r7, #1
    a376:	4297      	cmp	r7, r2
    a378:	46cb      	mov	fp, r9
    a37a:	f000 81c4 	beq.w	a706 <_dtoa_r+0xb36>
    a37e:	4629      	mov	r1, r5
    a380:	2300      	movs	r3, #0
    a382:	220a      	movs	r2, #10
    a384:	4620      	mov	r0, r4
    a386:	f7fe fc09 	bl	8b9c <__multadd>
    a38a:	4546      	cmp	r6, r8
    a38c:	4605      	mov	r5, r0
    a38e:	4631      	mov	r1, r6
    a390:	f04f 0300 	mov.w	r3, #0
    a394:	f04f 020a 	mov.w	r2, #10
    a398:	4620      	mov	r0, r4
    a39a:	d012      	beq.n	a3c2 <_dtoa_r+0x7f2>
    a39c:	f7fe fbfe 	bl	8b9c <__multadd>
    a3a0:	4641      	mov	r1, r8
    a3a2:	4606      	mov	r6, r0
    a3a4:	2300      	movs	r3, #0
    a3a6:	220a      	movs	r2, #10
    a3a8:	4620      	mov	r0, r4
    a3aa:	f7fe fbf7 	bl	8b9c <__multadd>
    a3ae:	464f      	mov	r7, r9
    a3b0:	4680      	mov	r8, r0
    a3b2:	e7a7      	b.n	a304 <_dtoa_r+0x734>
    a3b4:	4620      	mov	r0, r4
    a3b6:	9302      	str	r3, [sp, #8]
    a3b8:	f7fe fbe6 	bl	8b88 <_Bfree>
    a3bc:	9b02      	ldr	r3, [sp, #8]
    a3be:	2201      	movs	r2, #1
    a3c0:	e7c6      	b.n	a350 <_dtoa_r+0x780>
    a3c2:	f7fe fbeb 	bl	8b9c <__multadd>
    a3c6:	464f      	mov	r7, r9
    a3c8:	4606      	mov	r6, r0
    a3ca:	4680      	mov	r8, r0
    a3cc:	e79a      	b.n	a304 <_dtoa_r+0x734>
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	2b02      	cmp	r3, #2
    a3d2:	dc71      	bgt.n	a4b8 <_dtoa_r+0x8e8>
    a3d4:	9b07      	ldr	r3, [sp, #28]
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	f47f af7b 	bne.w	a2d2 <_dtoa_r+0x702>
    a3dc:	9b04      	ldr	r3, [sp, #16]
    a3de:	4651      	mov	r1, sl
    a3e0:	3301      	adds	r3, #1
    a3e2:	4628      	mov	r0, r5
    a3e4:	9304      	str	r3, [sp, #16]
    a3e6:	f7ff fb5f 	bl	9aa8 <quorem>
    a3ea:	f8dd b000 	ldr.w	fp, [sp]
    a3ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
    a3f2:	f80b 3b01 	strb.w	r3, [fp], #1
    a3f6:	2700      	movs	r7, #0
    a3f8:	e6eb      	b.n	a1d2 <_dtoa_r+0x602>
    a3fa:	4651      	mov	r1, sl
    a3fc:	4628      	mov	r0, r5
    a3fe:	f7fe fe7b 	bl	90f8 <__mcmp>
    a402:	2800      	cmp	r0, #0
    a404:	f6bf aeba 	bge.w	a17c <_dtoa_r+0x5ac>
    a408:	4629      	mov	r1, r5
    a40a:	2300      	movs	r3, #0
    a40c:	220a      	movs	r2, #10
    a40e:	4620      	mov	r0, r4
    a410:	f7fe fbc4 	bl	8b9c <__multadd>
    a414:	9b04      	ldr	r3, [sp, #16]
    a416:	1e5f      	subs	r7, r3, #1
    a418:	9b07      	ldr	r3, [sp, #28]
    a41a:	4605      	mov	r5, r0
    a41c:	2b00      	cmp	r3, #0
    a41e:	f47f af4b 	bne.w	a2b8 <_dtoa_r+0x6e8>
    a422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a424:	2b00      	cmp	r3, #0
    a426:	f340 8218 	ble.w	a85a <_dtoa_r+0xc8a>
    a42a:	4699      	mov	r9, r3
    a42c:	e6b1      	b.n	a192 <_dtoa_r+0x5c2>
    a42e:	4bbc      	ldr	r3, [pc, #752]	; (a720 <_dtoa_r+0xb50>)
    a430:	9300      	str	r3, [sp, #0]
    a432:	3303      	adds	r3, #3
    a434:	e4a4      	b.n	9d80 <_dtoa_r+0x1b0>
    a436:	201c      	movs	r0, #28
    a438:	e712      	b.n	a260 <_dtoa_r+0x690>
    a43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a43e:	2800      	cmp	r0, #0
    a440:	f47f ae74 	bne.w	a12c <_dtoa_r+0x55c>
    a444:	f3c1 0213 	ubfx	r2, r1, #0, #20
    a448:	2a00      	cmp	r2, #0
    a44a:	f000 80f4 	beq.w	a636 <_dtoa_r+0xa66>
    a44e:	9b02      	ldr	r3, [sp, #8]
    a450:	9308      	str	r3, [sp, #32]
    a452:	e66d      	b.n	a130 <_dtoa_r+0x560>
    a454:	2301      	movs	r3, #1
    a456:	9307      	str	r3, [sp, #28]
    a458:	9b04      	ldr	r3, [sp, #16]
    a45a:	445b      	add	r3, fp
    a45c:	f103 0901 	add.w	r9, r3, #1
    a460:	f1b9 0f01 	cmp.w	r9, #1
    a464:	46cc      	mov	ip, r9
    a466:	930b      	str	r3, [sp, #44]	; 0x2c
    a468:	bfb8      	it	lt
    a46a:	f04f 0c01 	movlt.w	ip, #1
    a46e:	2100      	movs	r1, #0
    a470:	f1bc 0f17 	cmp.w	ip, #23
    a474:	63e1      	str	r1, [r4, #60]	; 0x3c
    a476:	f77f acbc 	ble.w	9df2 <_dtoa_r+0x222>
    a47a:	2001      	movs	r0, #1
    a47c:	2204      	movs	r2, #4
    a47e:	0052      	lsls	r2, r2, #1
    a480:	f102 0314 	add.w	r3, r2, #20
    a484:	4563      	cmp	r3, ip
    a486:	4601      	mov	r1, r0
    a488:	f100 0001 	add.w	r0, r0, #1
    a48c:	d9f7      	bls.n	a47e <_dtoa_r+0x8ae>
    a48e:	63e1      	str	r1, [r4, #60]	; 0x3c
    a490:	e4af      	b.n	9df2 <_dtoa_r+0x222>
    a492:	2301      	movs	r3, #1
    a494:	9307      	str	r3, [sp, #28]
    a496:	f1bb 0f00 	cmp.w	fp, #0
    a49a:	dd52      	ble.n	a542 <_dtoa_r+0x972>
    a49c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    a4a0:	46d9      	mov	r9, fp
    a4a2:	46dc      	mov	ip, fp
    a4a4:	e7e3      	b.n	a46e <_dtoa_r+0x89e>
    a4a6:	2300      	movs	r3, #0
    a4a8:	9307      	str	r3, [sp, #28]
    a4aa:	e7d5      	b.n	a458 <_dtoa_r+0x888>
    a4ac:	2300      	movs	r3, #0
    a4ae:	9307      	str	r3, [sp, #28]
    a4b0:	e7f1      	b.n	a496 <_dtoa_r+0x8c6>
    a4b2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a4b6:	9704      	str	r7, [sp, #16]
    a4b8:	f1b9 0f00 	cmp.w	r9, #0
    a4bc:	f47f ada1 	bne.w	a002 <_dtoa_r+0x432>
    a4c0:	4651      	mov	r1, sl
    a4c2:	464b      	mov	r3, r9
    a4c4:	2205      	movs	r2, #5
    a4c6:	4620      	mov	r0, r4
    a4c8:	f7fe fb68 	bl	8b9c <__multadd>
    a4cc:	4601      	mov	r1, r0
    a4ce:	4682      	mov	sl, r0
    a4d0:	4628      	mov	r0, r5
    a4d2:	f7fe fe11 	bl	90f8 <__mcmp>
    a4d6:	2800      	cmp	r0, #0
    a4d8:	f77f ad93 	ble.w	a002 <_dtoa_r+0x432>
    a4dc:	9b04      	ldr	r3, [sp, #16]
    a4de:	f103 0b01 	add.w	fp, r3, #1
    a4e2:	9b00      	ldr	r3, [sp, #0]
    a4e4:	2231      	movs	r2, #49	; 0x31
    a4e6:	4698      	mov	r8, r3
    a4e8:	f803 2b01 	strb.w	r2, [r3], #1
    a4ec:	9300      	str	r3, [sp, #0]
    a4ee:	4651      	mov	r1, sl
    a4f0:	4620      	mov	r0, r4
    a4f2:	f7fe fb49 	bl	8b88 <_Bfree>
    a4f6:	f10b 0301 	add.w	r3, fp, #1
    a4fa:	f8dd 9000 	ldr.w	r9, [sp]
    a4fe:	9304      	str	r3, [sp, #16]
    a500:	f8cd 8000 	str.w	r8, [sp]
    a504:	2e00      	cmp	r6, #0
    a506:	f47f ae8f 	bne.w	a228 <_dtoa_r+0x658>
    a50a:	e691      	b.n	a230 <_dtoa_r+0x660>
    a50c:	eba3 0a0a 	sub.w	sl, r3, sl
    a510:	e5c5      	b.n	a09e <_dtoa_r+0x4ce>
    a512:	4631      	mov	r1, r6
    a514:	4652      	mov	r2, sl
    a516:	4620      	mov	r0, r4
    a518:	f7fe fd16 	bl	8f48 <__pow5mult>
    a51c:	462a      	mov	r2, r5
    a51e:	4601      	mov	r1, r0
    a520:	4606      	mov	r6, r0
    a522:	4620      	mov	r0, r4
    a524:	f7fe fc62 	bl	8dec <__multiply>
    a528:	4629      	mov	r1, r5
    a52a:	4605      	mov	r5, r0
    a52c:	4620      	mov	r0, r4
    a52e:	f7fe fb2b 	bl	8b88 <_Bfree>
    a532:	e5ea      	b.n	a10a <_dtoa_r+0x53a>
    a534:	2002      	movs	r0, #2
    a536:	eeb0 5b48 	vmov.f64	d5, d8
    a53a:	e481      	b.n	9e40 <_dtoa_r+0x270>
    a53c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    a540:	e68e      	b.n	a260 <_dtoa_r+0x690>
    a542:	f04f 0b01 	mov.w	fp, #1
    a546:	46d9      	mov	r9, fp
    a548:	e44f      	b.n	9dea <_dtoa_r+0x21a>
    a54a:	d103      	bne.n	a554 <_dtoa_r+0x984>
    a54c:	9b01      	ldr	r3, [sp, #4]
    a54e:	07db      	lsls	r3, r3, #31
    a550:	f53f ae4c 	bmi.w	a1ec <_dtoa_r+0x61c>
    a554:	46d9      	mov	r9, fp
    a556:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a55a:	2b30      	cmp	r3, #48	; 0x30
    a55c:	d0fa      	beq.n	a554 <_dtoa_r+0x984>
    a55e:	e657      	b.n	a210 <_dtoa_r+0x640>
    a560:	9b04      	ldr	r3, [sp, #16]
    a562:	9a00      	ldr	r2, [sp, #0]
    a564:	3301      	adds	r3, #1
    a566:	9304      	str	r3, [sp, #16]
    a568:	2331      	movs	r3, #49	; 0x31
    a56a:	7013      	strb	r3, [r2, #0]
    a56c:	e650      	b.n	a210 <_dtoa_r+0x640>
    a56e:	f1ba 0f00 	cmp.w	sl, #0
    a572:	f000 8123 	beq.w	a7bc <_dtoa_r+0xbec>
    a576:	f202 4233 	addw	r2, r2, #1075	; 0x433
    a57a:	9b06      	ldr	r3, [sp, #24]
    a57c:	9309      	str	r3, [sp, #36]	; 0x24
    a57e:	4413      	add	r3, r2
    a580:	f8dd a020 	ldr.w	sl, [sp, #32]
    a584:	9306      	str	r3, [sp, #24]
    a586:	4490      	add	r8, r2
    a588:	e592      	b.n	a0b0 <_dtoa_r+0x4e0>
    a58a:	ee07 0a90 	vmov	s15, r0
    a58e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    a592:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a596:	eea6 5b07 	vfma.f64	d5, d6, d7
    a59a:	ee15 2a90 	vmov	r2, s11
    a59e:	ec51 0b15 	vmov	r0, r1, d5
    a5a2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    a5a6:	ec41 0b15 	vmov	d5, r0, r1
    a5aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a5ae:	ee36 7b47 	vsub.f64	d7, d6, d7
    a5b2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5ba:	f300 8137 	bgt.w	a82c <_dtoa_r+0xc5c>
    a5be:	eeb1 5b45 	vneg.f64	d5, d5
    a5c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5ca:	f57f acfb 	bpl.w	9fc4 <_dtoa_r+0x3f4>
    a5ce:	f04f 0a00 	mov.w	sl, #0
    a5d2:	4656      	mov	r6, sl
    a5d4:	e515      	b.n	a002 <_dtoa_r+0x432>
    a5d6:	f000 80f5 	beq.w	a7c4 <_dtoa_r+0xbf4>
    a5da:	9b04      	ldr	r3, [sp, #16]
    a5dc:	4951      	ldr	r1, [pc, #324]	; (a724 <_dtoa_r+0xb54>)
    a5de:	425a      	negs	r2, r3
    a5e0:	f002 000f 	and.w	r0, r2, #15
    a5e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    a5e8:	ed91 6b00 	vldr	d6, [r1]
    a5ec:	1112      	asrs	r2, r2, #4
    a5ee:	ee28 6b06 	vmul.f64	d6, d8, d6
    a5f2:	f000 8142 	beq.w	a87a <_dtoa_r+0xcaa>
    a5f6:	eeb0 7b46 	vmov.f64	d7, d6
    a5fa:	494b      	ldr	r1, [pc, #300]	; (a728 <_dtoa_r+0xb58>)
    a5fc:	2600      	movs	r6, #0
    a5fe:	2002      	movs	r0, #2
    a600:	07d3      	lsls	r3, r2, #31
    a602:	d505      	bpl.n	a610 <_dtoa_r+0xa40>
    a604:	ed91 5b00 	vldr	d5, [r1]
    a608:	3001      	adds	r0, #1
    a60a:	2601      	movs	r6, #1
    a60c:	ee27 7b05 	vmul.f64	d7, d7, d5
    a610:	1052      	asrs	r2, r2, #1
    a612:	f101 0108 	add.w	r1, r1, #8
    a616:	d1f3      	bne.n	a600 <_dtoa_r+0xa30>
    a618:	2e00      	cmp	r6, #0
    a61a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    a61e:	e41e      	b.n	9e5e <_dtoa_r+0x28e>
    a620:	9b02      	ldr	r3, [sp, #8]
    a622:	2b00      	cmp	r3, #0
    a624:	f47f ae37 	bne.w	a296 <_dtoa_r+0x6c6>
    a628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a62c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    a630:	2a00      	cmp	r2, #0
    a632:	f040 8137 	bne.w	a8a4 <_dtoa_r+0xcd4>
    a636:	4a3d      	ldr	r2, [pc, #244]	; (a72c <_dtoa_r+0xb5c>)
    a638:	400a      	ands	r2, r1
    a63a:	2a00      	cmp	r2, #0
    a63c:	f000 80fa 	beq.w	a834 <_dtoa_r+0xc64>
    a640:	9b06      	ldr	r3, [sp, #24]
    a642:	3301      	adds	r3, #1
    a644:	9306      	str	r3, [sp, #24]
    a646:	2301      	movs	r3, #1
    a648:	f108 0801 	add.w	r8, r8, #1
    a64c:	9308      	str	r3, [sp, #32]
    a64e:	e56f      	b.n	a130 <_dtoa_r+0x560>
    a650:	4629      	mov	r1, r5
    a652:	9a08      	ldr	r2, [sp, #32]
    a654:	4620      	mov	r0, r4
    a656:	f7fe fc77 	bl	8f48 <__pow5mult>
    a65a:	4605      	mov	r5, r0
    a65c:	e55a      	b.n	a114 <_dtoa_r+0x544>
    a65e:	2a00      	cmp	r2, #0
    a660:	dd12      	ble.n	a688 <_dtoa_r+0xab8>
    a662:	4629      	mov	r1, r5
    a664:	2201      	movs	r2, #1
    a666:	4620      	mov	r0, r4
    a668:	9301      	str	r3, [sp, #4]
    a66a:	f7fe fccd 	bl	9008 <__lshift>
    a66e:	4651      	mov	r1, sl
    a670:	4605      	mov	r5, r0
    a672:	f7fe fd41 	bl	90f8 <__mcmp>
    a676:	2800      	cmp	r0, #0
    a678:	9b01      	ldr	r3, [sp, #4]
    a67a:	f340 80e1 	ble.w	a840 <_dtoa_r+0xc70>
    a67e:	2b39      	cmp	r3, #57	; 0x39
    a680:	f000 80ca 	beq.w	a818 <_dtoa_r+0xc48>
    a684:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    a688:	46b9      	mov	r9, r7
    a68a:	f809 3b01 	strb.w	r3, [r9], #1
    a68e:	9b04      	ldr	r3, [sp, #16]
    a690:	3301      	adds	r3, #1
    a692:	4637      	mov	r7, r6
    a694:	9304      	str	r3, [sp, #16]
    a696:	4646      	mov	r6, r8
    a698:	e5ba      	b.n	a210 <_dtoa_r+0x640>
    a69a:	ee38 8b08 	vadd.f64	d8, d8, d8
    a69e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6a6:	dc0a      	bgt.n	a6be <_dtoa_r+0xaee>
    a6a8:	eeb4 8b46 	vcmp.f64	d8, d6
    a6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6b0:	f47f acdc 	bne.w	a06c <_dtoa_r+0x49c>
    a6b4:	ee17 3a10 	vmov	r3, s14
    a6b8:	07d8      	lsls	r0, r3, #31
    a6ba:	f57f acd7 	bpl.w	a06c <_dtoa_r+0x49c>
    a6be:	9a00      	ldr	r2, [sp, #0]
    a6c0:	e454      	b.n	9f6c <_dtoa_r+0x39c>
    a6c2:	6871      	ldr	r1, [r6, #4]
    a6c4:	4620      	mov	r0, r4
    a6c6:	f7fe fa39 	bl	8b3c <_Balloc>
    a6ca:	4607      	mov	r7, r0
    a6cc:	2800      	cmp	r0, #0
    a6ce:	f000 80de 	beq.w	a88e <_dtoa_r+0xcbe>
    a6d2:	6933      	ldr	r3, [r6, #16]
    a6d4:	3302      	adds	r3, #2
    a6d6:	009a      	lsls	r2, r3, #2
    a6d8:	f106 010c 	add.w	r1, r6, #12
    a6dc:	300c      	adds	r0, #12
    a6de:	f7f8 fdf7 	bl	32d0 <memcpy>
    a6e2:	4639      	mov	r1, r7
    a6e4:	2201      	movs	r2, #1
    a6e6:	4620      	mov	r0, r4
    a6e8:	f7fe fc8e 	bl	9008 <__lshift>
    a6ec:	4680      	mov	r8, r0
    a6ee:	e5fe      	b.n	a2ee <_dtoa_r+0x71e>
    a6f0:	9b06      	ldr	r3, [sp, #24]
    a6f2:	eba3 0309 	sub.w	r3, r3, r9
    a6f6:	9309      	str	r3, [sp, #36]	; 0x24
    a6f8:	e4da      	b.n	a0b0 <_dtoa_r+0x4e0>
    a6fa:	2b39      	cmp	r3, #57	; 0x39
    a6fc:	f000 808c 	beq.w	a818 <_dtoa_r+0xc48>
    a700:	46b9      	mov	r9, r7
    a702:	3301      	adds	r3, #1
    a704:	e7c1      	b.n	a68a <_dtoa_r+0xaba>
    a706:	9a04      	ldr	r2, [sp, #16]
    a708:	3201      	adds	r2, #1
    a70a:	4637      	mov	r7, r6
    a70c:	9204      	str	r2, [sp, #16]
    a70e:	4646      	mov	r6, r8
    a710:	e55f      	b.n	a1d2 <_dtoa_r+0x602>
    a712:	4629      	mov	r1, r5
    a714:	4620      	mov	r0, r4
    a716:	f7fe fc17 	bl	8f48 <__pow5mult>
    a71a:	4605      	mov	r5, r0
    a71c:	e4fa      	b.n	a114 <_dtoa_r+0x544>
    a71e:	bf00      	nop
    a720:	20000a40 	.word	0x20000a40
    a724:	200002a8 	.word	0x200002a8
    a728:	20000280 	.word	0x20000280
    a72c:	7ff00000 	.word	0x7ff00000
    a730:	4b5e      	ldr	r3, [pc, #376]	; (a8ac <_dtoa_r+0xcdc>)
    a732:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    a736:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    a73a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    a73e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    a742:	ee36 7b47 	vsub.f64	d7, d6, d7
    a746:	ec41 0b16 	vmov	d6, r0, r1
    a74a:	ee15 1a90 	vmov	r1, s11
    a74e:	ee23 3b06 	vmul.f64	d3, d3, d6
    a752:	9800      	ldr	r0, [sp, #0]
    a754:	3130      	adds	r1, #48	; 0x30
    a756:	2a01      	cmp	r2, #1
    a758:	f800 1b01 	strb.w	r1, [r0], #1
    a75c:	f000 8083 	beq.w	a866 <_dtoa_r+0xc96>
    a760:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a764:	9b00      	ldr	r3, [sp, #0]
    a766:	1899      	adds	r1, r3, r2
    a768:	ee27 7b04 	vmul.f64	d7, d7, d4
    a76c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a770:	ee16 3a90 	vmov	r3, s13
    a774:	3330      	adds	r3, #48	; 0x30
    a776:	f800 3b01 	strb.w	r3, [r0], #1
    a77a:	4281      	cmp	r1, r0
    a77c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    a780:	ee37 7b45 	vsub.f64	d7, d7, d5
    a784:	d1f0      	bne.n	a768 <_dtoa_r+0xb98>
    a786:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    a78a:	ee33 5b06 	vadd.f64	d5, d3, d6
    a78e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a796:	f53f abe3 	bmi.w	9f60 <_dtoa_r+0x390>
    a79a:	ee36 6b43 	vsub.f64	d6, d6, d3
    a79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7a6:	f77f ac0d 	ble.w	9fc4 <_dtoa_r+0x3f4>
    a7aa:	4689      	mov	r9, r1
    a7ac:	3901      	subs	r1, #1
    a7ae:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    a7b2:	2b30      	cmp	r3, #48	; 0x30
    a7b4:	d0f9      	beq.n	a7aa <_dtoa_r+0xbda>
    a7b6:	1c73      	adds	r3, r6, #1
    a7b8:	9304      	str	r3, [sp, #16]
    a7ba:	e539      	b.n	a230 <_dtoa_r+0x660>
    a7bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a7be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a7c2:	e6da      	b.n	a57a <_dtoa_r+0x9aa>
    a7c4:	2002      	movs	r0, #2
    a7c6:	eeb0 6b48 	vmov.f64	d6, d8
    a7ca:	f7ff bb48 	b.w	9e5e <_dtoa_r+0x28e>
    a7ce:	f1b9 0f00 	cmp.w	r9, #0
    a7d2:	f43f aeda 	beq.w	a58a <_dtoa_r+0x9ba>
    a7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a7d8:	2a00      	cmp	r2, #0
    a7da:	f77f abf3 	ble.w	9fc4 <_dtoa_r+0x3f4>
    a7de:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a7e2:	ee26 6b04 	vmul.f64	d6, d6, d4
    a7e6:	3001      	adds	r0, #1
    a7e8:	ee07 0a90 	vmov	s15, r0
    a7ec:	9b04      	ldr	r3, [sp, #16]
    a7ee:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    a7f2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    a7f6:	eea6 7b05 	vfma.f64	d7, d6, d5
    a7fa:	ee17 ca90 	vmov	ip, s15
    a7fe:	ec51 0b17 	vmov	r0, r1, d7
    a802:	1e5e      	subs	r6, r3, #1
    a804:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    a808:	f7ff bb47 	b.w	9e9a <_dtoa_r+0x2ca>
    a80c:	9b04      	ldr	r3, [sp, #16]
    a80e:	3301      	adds	r3, #1
    a810:	9304      	str	r3, [sp, #16]
    a812:	2331      	movs	r3, #49	; 0x31
    a814:	f7ff bbb1 	b.w	9f7a <_dtoa_r+0x3aa>
    a818:	9b04      	ldr	r3, [sp, #16]
    a81a:	46bb      	mov	fp, r7
    a81c:	3301      	adds	r3, #1
    a81e:	9304      	str	r3, [sp, #16]
    a820:	2339      	movs	r3, #57	; 0x39
    a822:	4637      	mov	r7, r6
    a824:	f80b 3b01 	strb.w	r3, [fp], #1
    a828:	4646      	mov	r6, r8
    a82a:	e4e1      	b.n	a1f0 <_dtoa_r+0x620>
    a82c:	f04f 0a00 	mov.w	sl, #0
    a830:	4656      	mov	r6, sl
    a832:	e653      	b.n	a4dc <_dtoa_r+0x90c>
    a834:	9208      	str	r2, [sp, #32]
    a836:	e47b      	b.n	a130 <_dtoa_r+0x560>
    a838:	1c73      	adds	r3, r6, #1
    a83a:	9304      	str	r3, [sp, #16]
    a83c:	4689      	mov	r9, r1
    a83e:	e4f7      	b.n	a230 <_dtoa_r+0x660>
    a840:	f47f af22 	bne.w	a688 <_dtoa_r+0xab8>
    a844:	07da      	lsls	r2, r3, #31
    a846:	f57f af1f 	bpl.w	a688 <_dtoa_r+0xab8>
    a84a:	e718      	b.n	a67e <_dtoa_r+0xaae>
    a84c:	2b39      	cmp	r3, #57	; 0x39
    a84e:	d0e3      	beq.n	a818 <_dtoa_r+0xc48>
    a850:	f1b9 0f00 	cmp.w	r9, #0
    a854:	f73f af16 	bgt.w	a684 <_dtoa_r+0xab4>
    a858:	e716      	b.n	a688 <_dtoa_r+0xab8>
    a85a:	9b01      	ldr	r3, [sp, #4]
    a85c:	2b02      	cmp	r3, #2
    a85e:	f73f ae28 	bgt.w	a4b2 <_dtoa_r+0x8e2>
    a862:	9704      	str	r7, [sp, #16]
    a864:	e5ba      	b.n	a3dc <_dtoa_r+0x80c>
    a866:	4601      	mov	r1, r0
    a868:	e78d      	b.n	a786 <_dtoa_r+0xbb6>
    a86a:	9b01      	ldr	r3, [sp, #4]
    a86c:	2b02      	cmp	r3, #2
    a86e:	f73f ae20 	bgt.w	a4b2 <_dtoa_r+0x8e2>
    a872:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a876:	9704      	str	r7, [sp, #16]
    a878:	e52b      	b.n	a2d2 <_dtoa_r+0x702>
    a87a:	2002      	movs	r0, #2
    a87c:	f7ff baef 	b.w	9e5e <_dtoa_r+0x28e>
    a880:	4b0b      	ldr	r3, [pc, #44]	; (a8b0 <_dtoa_r+0xce0>)
    a882:	480c      	ldr	r0, [pc, #48]	; (a8b4 <_dtoa_r+0xce4>)
    a884:	2200      	movs	r2, #0
    a886:	f240 11af 	movw	r1, #431	; 0x1af
    a88a:	f7ff f8b1 	bl	99f0 <__assert_func>
    a88e:	4b08      	ldr	r3, [pc, #32]	; (a8b0 <_dtoa_r+0xce0>)
    a890:	4808      	ldr	r0, [pc, #32]	; (a8b4 <_dtoa_r+0xce4>)
    a892:	463a      	mov	r2, r7
    a894:	f240 21ef 	movw	r1, #751	; 0x2ef
    a898:	f7ff f8aa 	bl	99f0 <__assert_func>
    a89c:	4b06      	ldr	r3, [pc, #24]	; (a8b8 <_dtoa_r+0xce8>)
    a89e:	9300      	str	r3, [sp, #0]
    a8a0:	f7ff b9d2 	b.w	9c48 <_dtoa_r+0x78>
    a8a4:	9b02      	ldr	r3, [sp, #8]
    a8a6:	9308      	str	r3, [sp, #32]
    a8a8:	e4f7      	b.n	a29a <_dtoa_r+0x6ca>
    a8aa:	bf00      	nop
    a8ac:	200002a8 	.word	0x200002a8
    a8b0:	20000734 	.word	0x20000734
    a8b4:	20000a44 	.word	0x20000a44
    a8b8:	20000a34 	.word	0x20000a34

0000a8bc <_wcrtomb_r>:
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	4605      	mov	r5, r0
    a8c0:	b084      	sub	sp, #16
    a8c2:	b15b      	cbz	r3, a8dc <_wcrtomb_r+0x20>
    a8c4:	461c      	mov	r4, r3
    a8c6:	b169      	cbz	r1, a8e4 <_wcrtomb_r+0x28>
    a8c8:	4b0e      	ldr	r3, [pc, #56]	; (a904 <_wcrtomb_r+0x48>)
    a8ca:	4628      	mov	r0, r5
    a8cc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    a8d0:	4623      	mov	r3, r4
    a8d2:	47b0      	blx	r6
    a8d4:	1c43      	adds	r3, r0, #1
    a8d6:	d00f      	beq.n	a8f8 <_wcrtomb_r+0x3c>
    a8d8:	b004      	add	sp, #16
    a8da:	bd70      	pop	{r4, r5, r6, pc}
    a8dc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    a8e0:	2900      	cmp	r1, #0
    a8e2:	d1f1      	bne.n	a8c8 <_wcrtomb_r+0xc>
    a8e4:	4a07      	ldr	r2, [pc, #28]	; (a904 <_wcrtomb_r+0x48>)
    a8e6:	4623      	mov	r3, r4
    a8e8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    a8ec:	4628      	mov	r0, r5
    a8ee:	460a      	mov	r2, r1
    a8f0:	a901      	add	r1, sp, #4
    a8f2:	47b0      	blx	r6
    a8f4:	1c43      	adds	r3, r0, #1
    a8f6:	d1ef      	bne.n	a8d8 <_wcrtomb_r+0x1c>
    a8f8:	2200      	movs	r2, #0
    a8fa:	238a      	movs	r3, #138	; 0x8a
    a8fc:	6022      	str	r2, [r4, #0]
    a8fe:	602b      	str	r3, [r5, #0]
    a900:	b004      	add	sp, #16
    a902:	bd70      	pop	{r4, r5, r6, pc}
    a904:	200015cc 	.word	0x200015cc

0000a908 <_wcsrtombs_r>:
    a908:	b510      	push	{r4, lr}
    a90a:	b082      	sub	sp, #8
    a90c:	9c04      	ldr	r4, [sp, #16]
    a90e:	e9cd 3400 	strd	r3, r4, [sp]
    a912:	f04f 33ff 	mov.w	r3, #4294967295
    a916:	f001 fb47 	bl	bfa8 <_wcsnrtombs_r>
    a91a:	b002      	add	sp, #8
    a91c:	bd10      	pop	{r4, pc}
    a91e:	bf00      	nop

0000a920 <fiprintf>:
    a920:	b40e      	push	{r1, r2, r3}
    a922:	b510      	push	{r4, lr}
    a924:	b083      	sub	sp, #12
    a926:	ab05      	add	r3, sp, #20
    a928:	4c06      	ldr	r4, [pc, #24]	; (a944 <fiprintf+0x24>)
    a92a:	f853 2b04 	ldr.w	r2, [r3], #4
    a92e:	9301      	str	r3, [sp, #4]
    a930:	4601      	mov	r1, r0
    a932:	6820      	ldr	r0, [r4, #0]
    a934:	f000 f844 	bl	a9c0 <_vfiprintf_r>
    a938:	b003      	add	sp, #12
    a93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a93e:	b003      	add	sp, #12
    a940:	4770      	bx	lr
    a942:	bf00      	nop
    a944:	20001b54 	.word	0x20001b54

0000a948 <__sprint_r.part.0>:
    a948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a94c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    a94e:	049c      	lsls	r4, r3, #18
    a950:	4690      	mov	r8, r2
    a952:	d52d      	bpl.n	a9b0 <__sprint_r.part.0+0x68>
    a954:	6893      	ldr	r3, [r2, #8]
    a956:	6812      	ldr	r2, [r2, #0]
    a958:	b343      	cbz	r3, a9ac <__sprint_r.part.0+0x64>
    a95a:	468b      	mov	fp, r1
    a95c:	4606      	mov	r6, r0
    a95e:	f102 0908 	add.w	r9, r2, #8
    a962:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    a966:	ea5f 079a 	movs.w	r7, sl, lsr #2
    a96a:	d015      	beq.n	a998 <__sprint_r.part.0+0x50>
    a96c:	3d04      	subs	r5, #4
    a96e:	2400      	movs	r4, #0
    a970:	e001      	b.n	a976 <__sprint_r.part.0+0x2e>
    a972:	42a7      	cmp	r7, r4
    a974:	d00e      	beq.n	a994 <__sprint_r.part.0+0x4c>
    a976:	f855 1f04 	ldr.w	r1, [r5, #4]!
    a97a:	465a      	mov	r2, fp
    a97c:	4630      	mov	r0, r6
    a97e:	f001 fa5b 	bl	be38 <_fputwc_r>
    a982:	1c43      	adds	r3, r0, #1
    a984:	f104 0401 	add.w	r4, r4, #1
    a988:	d1f3      	bne.n	a972 <__sprint_r.part.0+0x2a>
    a98a:	2300      	movs	r3, #0
    a98c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    a990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a994:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a998:	f02a 0a03 	bic.w	sl, sl, #3
    a99c:	eba3 030a 	sub.w	r3, r3, sl
    a9a0:	f8c8 3008 	str.w	r3, [r8, #8]
    a9a4:	f109 0908 	add.w	r9, r9, #8
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d1da      	bne.n	a962 <__sprint_r.part.0+0x1a>
    a9ac:	2000      	movs	r0, #0
    a9ae:	e7ec      	b.n	a98a <__sprint_r.part.0+0x42>
    a9b0:	f001 f80c 	bl	b9cc <__sfvwrite_r>
    a9b4:	2300      	movs	r3, #0
    a9b6:	e9c8 3301 	strd	r3, r3, [r8, #4]
    a9ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9be:	bf00      	nop

0000a9c0 <_vfiprintf_r>:
    a9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a9c4:	ed2d 8b02 	vpush	{d8}
    a9c8:	b0c5      	sub	sp, #276	; 0x114
    a9ca:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    a9ce:	4683      	mov	fp, r0
    a9d0:	ee08 1a10 	vmov	s16, r1
    a9d4:	4616      	mov	r6, r2
    a9d6:	2100      	movs	r1, #0
    a9d8:	2208      	movs	r2, #8
    a9da:	4650      	mov	r0, sl
    a9dc:	461c      	mov	r4, r3
    a9de:	9307      	str	r3, [sp, #28]
    a9e0:	f7fc fcae 	bl	7340 <memset>
    a9e4:	f1bb 0f00 	cmp.w	fp, #0
    a9e8:	d004      	beq.n	a9f4 <_vfiprintf_r+0x34>
    a9ea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    a9ee:	2b00      	cmp	r3, #0
    a9f0:	f000 86a0 	beq.w	b734 <_vfiprintf_r+0xd74>
    a9f4:	ee18 2a10 	vmov	r2, s16
    a9f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    a9fa:	07db      	lsls	r3, r3, #31
    a9fc:	f140 8513 	bpl.w	b426 <_vfiprintf_r+0xa66>
    aa00:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    aa04:	b28a      	uxth	r2, r1
    aa06:	0495      	lsls	r5, r2, #18
    aa08:	d40b      	bmi.n	aa22 <_vfiprintf_r+0x62>
    aa0a:	ee18 3a10 	vmov	r3, s16
    aa0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    aa12:	8199      	strh	r1, [r3, #12]
    aa14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    aa16:	b28a      	uxth	r2, r1
    aa18:	ee18 1a10 	vmov	r1, s16
    aa1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    aa20:	664b      	str	r3, [r1, #100]	; 0x64
    aa22:	0710      	lsls	r0, r2, #28
    aa24:	f140 8105 	bpl.w	ac32 <_vfiprintf_r+0x272>
    aa28:	ee18 3a10 	vmov	r3, s16
    aa2c:	691b      	ldr	r3, [r3, #16]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	f000 80ff 	beq.w	ac32 <_vfiprintf_r+0x272>
    aa34:	f002 031a 	and.w	r3, r2, #26
    aa38:	2b0a      	cmp	r3, #10
    aa3a:	f000 810a 	beq.w	ac52 <_vfiprintf_r+0x292>
    aa3e:	2300      	movs	r3, #0
    aa40:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    aa44:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    aa48:	aa1b      	add	r2, sp, #108	; 0x6c
    aa4a:	930c      	str	r3, [sp, #48]	; 0x30
    aa4c:	9218      	str	r2, [sp, #96]	; 0x60
    aa4e:	4691      	mov	r9, r2
    aa50:	930b      	str	r3, [sp, #44]	; 0x2c
    aa52:	9305      	str	r3, [sp, #20]
    aa54:	46b0      	mov	r8, r6
    aa56:	4644      	mov	r4, r8
    aa58:	4ba8      	ldr	r3, [pc, #672]	; (acfc <_vfiprintf_r+0x33c>)
    aa5a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    aa5e:	f7fc ffb3 	bl	79c8 <__locale_mb_cur_max>
    aa62:	4622      	mov	r2, r4
    aa64:	4603      	mov	r3, r0
    aa66:	a912      	add	r1, sp, #72	; 0x48
    aa68:	f8cd a000 	str.w	sl, [sp]
    aa6c:	4658      	mov	r0, fp
    aa6e:	47a8      	blx	r5
    aa70:	2800      	cmp	r0, #0
    aa72:	f000 8145 	beq.w	ad00 <_vfiprintf_r+0x340>
    aa76:	f2c0 8139 	blt.w	acec <_vfiprintf_r+0x32c>
    aa7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aa7c:	2a25      	cmp	r2, #37	; 0x25
    aa7e:	4603      	mov	r3, r0
    aa80:	d001      	beq.n	aa86 <_vfiprintf_r+0xc6>
    aa82:	441c      	add	r4, r3
    aa84:	e7e8      	b.n	aa58 <_vfiprintf_r+0x98>
    aa86:	ebb4 0608 	subs.w	r6, r4, r8
    aa8a:	4605      	mov	r5, r0
    aa8c:	f040 813c 	bne.w	ad08 <_vfiprintf_r+0x348>
    aa90:	2300      	movs	r3, #0
    aa92:	7861      	ldrb	r1, [r4, #1]
    aa94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    aa98:	f104 0801 	add.w	r8, r4, #1
    aa9c:	9306      	str	r3, [sp, #24]
    aa9e:	f04f 37ff 	mov.w	r7, #4294967295
    aaa2:	461e      	mov	r6, r3
    aaa4:	242b      	movs	r4, #43	; 0x2b
    aaa6:	f108 0801 	add.w	r8, r8, #1
    aaaa:	f1a1 0320 	sub.w	r3, r1, #32
    aaae:	2b5a      	cmp	r3, #90	; 0x5a
    aab0:	f200 8178 	bhi.w	ada4 <_vfiprintf_r+0x3e4>
    aab4:	e8df f013 	tbh	[pc, r3, lsl #1]
    aab8:	017602b5 	.word	0x017602b5
    aabc:	02b00176 	.word	0x02b00176
    aac0:	01760176 	.word	0x01760176
    aac4:	006a0176 	.word	0x006a0176
    aac8:	01760176 	.word	0x01760176
    aacc:	028d027d 	.word	0x028d027d
    aad0:	02880176 	.word	0x02880176
    aad4:	01760297 	.word	0x01760297
    aad8:	005b0292 	.word	0x005b0292
    aadc:	005b005b 	.word	0x005b005b
    aae0:	005b005b 	.word	0x005b005b
    aae4:	005b005b 	.word	0x005b005b
    aae8:	005b005b 	.word	0x005b005b
    aaec:	01760176 	.word	0x01760176
    aaf0:	01760176 	.word	0x01760176
    aaf4:	01760176 	.word	0x01760176
    aaf8:	01760176 	.word	0x01760176
    aafc:	025c0176 	.word	0x025c0176
    ab00:	01760084 	.word	0x01760084
    ab04:	01760176 	.word	0x01760176
    ab08:	01760176 	.word	0x01760176
    ab0c:	01760176 	.word	0x01760176
    ab10:	01760176 	.word	0x01760176
    ab14:	00e80176 	.word	0x00e80176
    ab18:	01760176 	.word	0x01760176
    ab1c:	02330176 	.word	0x02330176
    ab20:	02da0176 	.word	0x02da0176
    ab24:	01760176 	.word	0x01760176
    ab28:	0176058b 	.word	0x0176058b
    ab2c:	01760176 	.word	0x01760176
    ab30:	01760176 	.word	0x01760176
    ab34:	01760176 	.word	0x01760176
    ab38:	01760176 	.word	0x01760176
    ab3c:	025c0176 	.word	0x025c0176
    ab40:	01760086 	.word	0x01760086
    ab44:	01760176 	.word	0x01760176
    ab48:	008602cd 	.word	0x008602cd
    ab4c:	0176007f 	.word	0x0176007f
    ab50:	017602c0 	.word	0x017602c0
    ab54:	00ea02fd 	.word	0x00ea02fd
    ab58:	007f02ed 	.word	0x007f02ed
    ab5c:	02330176 	.word	0x02330176
    ab60:	0569007c 	.word	0x0569007c
    ab64:	01760176 	.word	0x01760176
    ab68:	0176056b 	.word	0x0176056b
    ab6c:	007c      	.short	0x007c
    ab6e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ab72:	2200      	movs	r2, #0
    ab74:	f818 1b01 	ldrb.w	r1, [r8], #1
    ab78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ab7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    ab80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    ab84:	2b09      	cmp	r3, #9
    ab86:	d9f5      	bls.n	ab74 <_vfiprintf_r+0x1b4>
    ab88:	9206      	str	r2, [sp, #24]
    ab8a:	e78e      	b.n	aaaa <_vfiprintf_r+0xea>
    ab8c:	4658      	mov	r0, fp
    ab8e:	f7fe fed7 	bl	9940 <_localeconv_r>
    ab92:	6843      	ldr	r3, [r0, #4]
    ab94:	930d      	str	r3, [sp, #52]	; 0x34
    ab96:	4618      	mov	r0, r3
    ab98:	f7fd f992 	bl	7ec0 <strlen>
    ab9c:	900e      	str	r0, [sp, #56]	; 0x38
    ab9e:	4605      	mov	r5, r0
    aba0:	4658      	mov	r0, fp
    aba2:	f7fe fecd 	bl	9940 <_localeconv_r>
    aba6:	6883      	ldr	r3, [r0, #8]
    aba8:	930b      	str	r3, [sp, #44]	; 0x2c
    abaa:	2d00      	cmp	r5, #0
    abac:	f040 84d6 	bne.w	b55c <_vfiprintf_r+0xb9c>
    abb0:	f898 1000 	ldrb.w	r1, [r8]
    abb4:	e777      	b.n	aaa6 <_vfiprintf_r+0xe6>
    abb6:	f898 1000 	ldrb.w	r1, [r8]
    abba:	f046 0620 	orr.w	r6, r6, #32
    abbe:	e772      	b.n	aaa6 <_vfiprintf_r+0xe6>
    abc0:	f046 0610 	orr.w	r6, r6, #16
    abc4:	06b4      	lsls	r4, r6, #26
    abc6:	f140 818e 	bpl.w	aee6 <_vfiprintf_r+0x526>
    abca:	9b07      	ldr	r3, [sp, #28]
    abcc:	3307      	adds	r3, #7
    abce:	f023 0307 	bic.w	r3, r3, #7
    abd2:	461a      	mov	r2, r3
    abd4:	6859      	ldr	r1, [r3, #4]
    abd6:	f852 3b08 	ldr.w	r3, [r2], #8
    abda:	9207      	str	r2, [sp, #28]
    abdc:	460a      	mov	r2, r1
    abde:	2900      	cmp	r1, #0
    abe0:	f2c0 8470 	blt.w	b4c4 <_vfiprintf_r+0xb04>
    abe4:	1c79      	adds	r1, r7, #1
    abe6:	f000 85a2 	beq.w	b72e <_vfiprintf_r+0xd6e>
    abea:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    abee:	9103      	str	r1, [sp, #12]
    abf0:	ea53 0102 	orrs.w	r1, r3, r2
    abf4:	f000 843f 	beq.w	b476 <_vfiprintf_r+0xab6>
    abf8:	2b0a      	cmp	r3, #10
    abfa:	f172 0100 	sbcs.w	r1, r2, #0
    abfe:	f080 8541 	bcs.w	b684 <_vfiprintf_r+0xcc4>
    ac02:	3330      	adds	r3, #48	; 0x30
    ac04:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ac08:	9e03      	ldr	r6, [sp, #12]
    ac0a:	2301      	movs	r3, #1
    ac0c:	9304      	str	r3, [sp, #16]
    ac0e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    ac12:	9b04      	ldr	r3, [sp, #16]
    ac14:	42bb      	cmp	r3, r7
    ac16:	bfb8      	it	lt
    ac18:	463b      	movlt	r3, r7
    ac1a:	9303      	str	r3, [sp, #12]
    ac1c:	2300      	movs	r3, #0
    ac1e:	9308      	str	r3, [sp, #32]
    ac20:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ac24:	2b00      	cmp	r3, #0
    ac26:	f000 80cb 	beq.w	adc0 <_vfiprintf_r+0x400>
    ac2a:	9b03      	ldr	r3, [sp, #12]
    ac2c:	3301      	adds	r3, #1
    ac2e:	9303      	str	r3, [sp, #12]
    ac30:	e0c6      	b.n	adc0 <_vfiprintf_r+0x400>
    ac32:	ee18 1a10 	vmov	r1, s16
    ac36:	4658      	mov	r0, fp
    ac38:	ee18 5a10 	vmov	r5, s16
    ac3c:	f001 f840 	bl	bcc0 <__swsetup_r>
    ac40:	2800      	cmp	r0, #0
    ac42:	f040 8652 	bne.w	b8ea <_vfiprintf_r+0xf2a>
    ac46:	89aa      	ldrh	r2, [r5, #12]
    ac48:	f002 031a 	and.w	r3, r2, #26
    ac4c:	2b0a      	cmp	r3, #10
    ac4e:	f47f aef6 	bne.w	aa3e <_vfiprintf_r+0x7e>
    ac52:	ee18 1a10 	vmov	r1, s16
    ac56:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    ac5a:	2b00      	cmp	r3, #0
    ac5c:	f6ff aeef 	blt.w	aa3e <_vfiprintf_r+0x7e>
    ac60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ac62:	07db      	lsls	r3, r3, #31
    ac64:	d402      	bmi.n	ac6c <_vfiprintf_r+0x2ac>
    ac66:	0597      	lsls	r7, r2, #22
    ac68:	f140 8612 	bpl.w	b890 <_vfiprintf_r+0xed0>
    ac6c:	ee18 1a10 	vmov	r1, s16
    ac70:	4623      	mov	r3, r4
    ac72:	4632      	mov	r2, r6
    ac74:	4658      	mov	r0, fp
    ac76:	f000 fe69 	bl	b94c <__sbprintf>
    ac7a:	9005      	str	r0, [sp, #20]
    ac7c:	9805      	ldr	r0, [sp, #20]
    ac7e:	b045      	add	sp, #276	; 0x114
    ac80:	ecbd 8b02 	vpop	{d8}
    ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac88:	f046 0610 	orr.w	r6, r6, #16
    ac8c:	f016 0220 	ands.w	r2, r6, #32
    ac90:	f000 8136 	beq.w	af00 <_vfiprintf_r+0x540>
    ac94:	9b07      	ldr	r3, [sp, #28]
    ac96:	3307      	adds	r3, #7
    ac98:	f023 0307 	bic.w	r3, r3, #7
    ac9c:	4619      	mov	r1, r3
    ac9e:	685a      	ldr	r2, [r3, #4]
    aca0:	f851 3b08 	ldr.w	r3, [r1], #8
    aca4:	9107      	str	r1, [sp, #28]
    aca6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    acaa:	9103      	str	r1, [sp, #12]
    acac:	2100      	movs	r1, #0
    acae:	2000      	movs	r0, #0
    acb0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    acb4:	1c78      	adds	r0, r7, #1
    acb6:	f000 8210 	beq.w	b0da <_vfiprintf_r+0x71a>
    acba:	9803      	ldr	r0, [sp, #12]
    acbc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    acc0:	ea53 0002 	orrs.w	r0, r3, r2
    acc4:	f040 8208 	bne.w	b0d8 <_vfiprintf_r+0x718>
    acc8:	2f00      	cmp	r7, #0
    acca:	f040 8538 	bne.w	b73e <_vfiprintf_r+0xd7e>
    acce:	2900      	cmp	r1, #0
    acd0:	f040 83d5 	bne.w	b47e <_vfiprintf_r+0xabe>
    acd4:	9b03      	ldr	r3, [sp, #12]
    acd6:	f013 0301 	ands.w	r3, r3, #1
    acda:	9304      	str	r3, [sp, #16]
    acdc:	f000 8411 	beq.w	b502 <_vfiprintf_r+0xb42>
    ace0:	2330      	movs	r3, #48	; 0x30
    ace2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ace6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    acea:	e792      	b.n	ac12 <_vfiprintf_r+0x252>
    acec:	2208      	movs	r2, #8
    acee:	2100      	movs	r1, #0
    acf0:	4650      	mov	r0, sl
    acf2:	f7fc fb25 	bl	7340 <memset>
    acf6:	2301      	movs	r3, #1
    acf8:	441c      	add	r4, r3
    acfa:	e6ad      	b.n	aa58 <_vfiprintf_r+0x98>
    acfc:	200015cc 	.word	0x200015cc
    ad00:	ebb4 0608 	subs.w	r6, r4, r8
    ad04:	4605      	mov	r5, r0
    ad06:	d01b      	beq.n	ad40 <_vfiprintf_r+0x380>
    ad08:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ad0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ad0c:	3301      	adds	r3, #1
    ad0e:	4432      	add	r2, r6
    ad10:	2b07      	cmp	r3, #7
    ad12:	e9c9 8600 	strd	r8, r6, [r9]
    ad16:	921a      	str	r2, [sp, #104]	; 0x68
    ad18:	9319      	str	r3, [sp, #100]	; 0x64
    ad1a:	dd1c      	ble.n	ad56 <_vfiprintf_r+0x396>
    ad1c:	2a00      	cmp	r2, #0
    ad1e:	f000 83a6 	beq.w	b46e <_vfiprintf_r+0xaae>
    ad22:	ee18 1a10 	vmov	r1, s16
    ad26:	aa18      	add	r2, sp, #96	; 0x60
    ad28:	4658      	mov	r0, fp
    ad2a:	f7ff fe0d 	bl	a948 <__sprint_r.part.0>
    ad2e:	bb20      	cbnz	r0, ad7a <_vfiprintf_r+0x3ba>
    ad30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ad34:	9b05      	ldr	r3, [sp, #20]
    ad36:	4433      	add	r3, r6
    ad38:	9305      	str	r3, [sp, #20]
    ad3a:	2d00      	cmp	r5, #0
    ad3c:	f47f aea8 	bne.w	aa90 <_vfiprintf_r+0xd0>
    ad40:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ad42:	2b00      	cmp	r3, #0
    ad44:	f040 85c1 	bne.w	b8ca <_vfiprintf_r+0xf0a>
    ad48:	ee18 3a10 	vmov	r3, s16
    ad4c:	2200      	movs	r2, #0
    ad4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ad52:	9219      	str	r2, [sp, #100]	; 0x64
    ad54:	e015      	b.n	ad82 <_vfiprintf_r+0x3c2>
    ad56:	f109 0908 	add.w	r9, r9, #8
    ad5a:	e7eb      	b.n	ad34 <_vfiprintf_r+0x374>
    ad5c:	ee18 1a10 	vmov	r1, s16
    ad60:	aa18      	add	r2, sp, #96	; 0x60
    ad62:	4658      	mov	r0, fp
    ad64:	f7ff fdf0 	bl	a948 <__sprint_r.part.0>
    ad68:	2800      	cmp	r0, #0
    ad6a:	f000 80a6 	beq.w	aeba <_vfiprintf_r+0x4fa>
    ad6e:	9b08      	ldr	r3, [sp, #32]
    ad70:	b11b      	cbz	r3, ad7a <_vfiprintf_r+0x3ba>
    ad72:	9908      	ldr	r1, [sp, #32]
    ad74:	4658      	mov	r0, fp
    ad76:	f7fd f9b5 	bl	80e4 <_free_r>
    ad7a:	ee18 3a10 	vmov	r3, s16
    ad7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ad82:	ee18 2a10 	vmov	r2, s16
    ad86:	6e52      	ldr	r2, [r2, #100]	; 0x64
    ad88:	f012 0f01 	tst.w	r2, #1
    ad8c:	b29a      	uxth	r2, r3
    ad8e:	f000 80a0 	beq.w	aed2 <_vfiprintf_r+0x512>
    ad92:	0650      	lsls	r0, r2, #25
    ad94:	f100 85b2 	bmi.w	b8fc <_vfiprintf_r+0xf3c>
    ad98:	9805      	ldr	r0, [sp, #20]
    ad9a:	b045      	add	sp, #276	; 0x114
    ad9c:	ecbd 8b02 	vpop	{d8}
    ada0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ada4:	2900      	cmp	r1, #0
    ada6:	d0cb      	beq.n	ad40 <_vfiprintf_r+0x380>
    ada8:	2300      	movs	r3, #0
    adaa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    adae:	2301      	movs	r3, #1
    adb0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    adb4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    adb8:	ac2b      	add	r4, sp, #172	; 0xac
    adba:	2300      	movs	r3, #0
    adbc:	9308      	str	r3, [sp, #32]
    adbe:	461f      	mov	r7, r3
    adc0:	f016 0302 	ands.w	r3, r6, #2
    adc4:	9309      	str	r3, [sp, #36]	; 0x24
    adc6:	d002      	beq.n	adce <_vfiprintf_r+0x40e>
    adc8:	9b03      	ldr	r3, [sp, #12]
    adca:	3302      	adds	r3, #2
    adcc:	9303      	str	r3, [sp, #12]
    adce:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    add2:	930a      	str	r3, [sp, #40]	; 0x28
    add4:	d105      	bne.n	ade2 <_vfiprintf_r+0x422>
    add6:	9b06      	ldr	r3, [sp, #24]
    add8:	9a03      	ldr	r2, [sp, #12]
    adda:	1a9d      	subs	r5, r3, r2
    addc:	2d00      	cmp	r5, #0
    adde:	f300 827b 	bgt.w	b2d8 <_vfiprintf_r+0x918>
    ade2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ade6:	1c41      	adds	r1, r0, #1
    ade8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    adec:	b182      	cbz	r2, ae10 <_vfiprintf_r+0x450>
    adee:	2201      	movs	r2, #1
    adf0:	3301      	adds	r3, #1
    adf2:	f8c9 2004 	str.w	r2, [r9, #4]
    adf6:	2907      	cmp	r1, #7
    adf8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    adfc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ae00:	f8c9 2000 	str.w	r2, [r9]
    ae04:	f300 824a 	bgt.w	b29c <_vfiprintf_r+0x8dc>
    ae08:	4608      	mov	r0, r1
    ae0a:	f109 0908 	add.w	r9, r9, #8
    ae0e:	3101      	adds	r1, #1
    ae10:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ae12:	b1e2      	cbz	r2, ae4e <_vfiprintf_r+0x48e>
    ae14:	aa11      	add	r2, sp, #68	; 0x44
    ae16:	3302      	adds	r3, #2
    ae18:	f8c9 2000 	str.w	r2, [r9]
    ae1c:	2907      	cmp	r1, #7
    ae1e:	f04f 0202 	mov.w	r2, #2
    ae22:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ae26:	f8c9 2004 	str.w	r2, [r9, #4]
    ae2a:	f340 8250 	ble.w	b2ce <_vfiprintf_r+0x90e>
    ae2e:	2b00      	cmp	r3, #0
    ae30:	f000 8343 	beq.w	b4ba <_vfiprintf_r+0xafa>
    ae34:	ee18 1a10 	vmov	r1, s16
    ae38:	aa18      	add	r2, sp, #96	; 0x60
    ae3a:	4658      	mov	r0, fp
    ae3c:	f7ff fd84 	bl	a948 <__sprint_r.part.0>
    ae40:	2800      	cmp	r0, #0
    ae42:	d194      	bne.n	ad6e <_vfiprintf_r+0x3ae>
    ae44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ae48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ae4c:	1c41      	adds	r1, r0, #1
    ae4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ae50:	2a80      	cmp	r2, #128	; 0x80
    ae52:	f000 8184 	beq.w	b15e <_vfiprintf_r+0x79e>
    ae56:	9a04      	ldr	r2, [sp, #16]
    ae58:	1abd      	subs	r5, r7, r2
    ae5a:	2d00      	cmp	r5, #0
    ae5c:	f300 81d7 	bgt.w	b20e <_vfiprintf_r+0x84e>
    ae60:	9a04      	ldr	r2, [sp, #16]
    ae62:	f8c9 4000 	str.w	r4, [r9]
    ae66:	4413      	add	r3, r2
    ae68:	2907      	cmp	r1, #7
    ae6a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    ae6e:	f8c9 2004 	str.w	r2, [r9, #4]
    ae72:	f340 816e 	ble.w	b152 <_vfiprintf_r+0x792>
    ae76:	2b00      	cmp	r3, #0
    ae78:	f000 8275 	beq.w	b366 <_vfiprintf_r+0x9a6>
    ae7c:	ee18 1a10 	vmov	r1, s16
    ae80:	aa18      	add	r2, sp, #96	; 0x60
    ae82:	4658      	mov	r0, fp
    ae84:	f7ff fd60 	bl	a948 <__sprint_r.part.0>
    ae88:	2800      	cmp	r0, #0
    ae8a:	f47f af70 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    ae8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ae90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ae94:	0775      	lsls	r5, r6, #29
    ae96:	d505      	bpl.n	aea4 <_vfiprintf_r+0x4e4>
    ae98:	9a06      	ldr	r2, [sp, #24]
    ae9a:	9903      	ldr	r1, [sp, #12]
    ae9c:	1a54      	subs	r4, r2, r1
    ae9e:	2c00      	cmp	r4, #0
    aea0:	f300 826b 	bgt.w	b37a <_vfiprintf_r+0x9ba>
    aea4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    aea8:	9803      	ldr	r0, [sp, #12]
    aeaa:	4281      	cmp	r1, r0
    aeac:	bfac      	ite	ge
    aeae:	1852      	addge	r2, r2, r1
    aeb0:	1812      	addlt	r2, r2, r0
    aeb2:	9205      	str	r2, [sp, #20]
    aeb4:	2b00      	cmp	r3, #0
    aeb6:	f47f af51 	bne.w	ad5c <_vfiprintf_r+0x39c>
    aeba:	9908      	ldr	r1, [sp, #32]
    aebc:	2300      	movs	r3, #0
    aebe:	9319      	str	r3, [sp, #100]	; 0x64
    aec0:	2900      	cmp	r1, #0
    aec2:	f000 8149 	beq.w	b158 <_vfiprintf_r+0x798>
    aec6:	4658      	mov	r0, fp
    aec8:	f7fd f90c 	bl	80e4 <_free_r>
    aecc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aed0:	e5c1      	b.n	aa56 <_vfiprintf_r+0x96>
    aed2:	059c      	lsls	r4, r3, #22
    aed4:	f53f af5d 	bmi.w	ad92 <_vfiprintf_r+0x3d2>
    aed8:	ee18 4a10 	vmov	r4, s16
    aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    aede:	f7fc fe0f 	bl	7b00 <__retarget_lock_release_recursive>
    aee2:	89a2      	ldrh	r2, [r4, #12]
    aee4:	e755      	b.n	ad92 <_vfiprintf_r+0x3d2>
    aee6:	06f0      	lsls	r0, r6, #27
    aee8:	9a07      	ldr	r2, [sp, #28]
    aeea:	f100 831f 	bmi.w	b52c <_vfiprintf_r+0xb6c>
    aeee:	0671      	lsls	r1, r6, #25
    aef0:	f140 8319 	bpl.w	b526 <_vfiprintf_r+0xb66>
    aef4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    aef8:	9207      	str	r2, [sp, #28]
    aefa:	17da      	asrs	r2, r3, #31
    aefc:	4611      	mov	r1, r2
    aefe:	e66e      	b.n	abde <_vfiprintf_r+0x21e>
    af00:	f016 0310 	ands.w	r3, r6, #16
    af04:	9907      	ldr	r1, [sp, #28]
    af06:	f040 8309 	bne.w	b51c <_vfiprintf_r+0xb5c>
    af0a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    af0e:	f000 8301 	beq.w	b514 <_vfiprintf_r+0xb54>
    af12:	461a      	mov	r2, r3
    af14:	f851 3b04 	ldr.w	r3, [r1], #4
    af18:	9107      	str	r1, [sp, #28]
    af1a:	b29b      	uxth	r3, r3
    af1c:	e6c3      	b.n	aca6 <_vfiprintf_r+0x2e6>
    af1e:	9b07      	ldr	r3, [sp, #28]
    af20:	461a      	mov	r2, r3
    af22:	2300      	movs	r3, #0
    af24:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    af28:	4613      	mov	r3, r2
    af2a:	f853 4b04 	ldr.w	r4, [r3], #4
    af2e:	9303      	str	r3, [sp, #12]
    af30:	2c00      	cmp	r4, #0
    af32:	f000 8412 	beq.w	b75a <_vfiprintf_r+0xd9a>
    af36:	2953      	cmp	r1, #83	; 0x53
    af38:	f000 8365 	beq.w	b606 <_vfiprintf_r+0xc46>
    af3c:	f016 0510 	ands.w	r5, r6, #16
    af40:	f040 8361 	bne.w	b606 <_vfiprintf_r+0xc46>
    af44:	1c7b      	adds	r3, r7, #1
    af46:	f000 84b3 	beq.w	b8b0 <_vfiprintf_r+0xef0>
    af4a:	463a      	mov	r2, r7
    af4c:	4629      	mov	r1, r5
    af4e:	4620      	mov	r0, r4
    af50:	f7fe fcfe 	bl	9950 <memchr>
    af54:	9008      	str	r0, [sp, #32]
    af56:	2800      	cmp	r0, #0
    af58:	f000 849f 	beq.w	b89a <_vfiprintf_r+0xeda>
    af5c:	1b03      	subs	r3, r0, r4
    af5e:	9a03      	ldr	r2, [sp, #12]
    af60:	9304      	str	r3, [sp, #16]
    af62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    af66:	462f      	mov	r7, r5
    af68:	9207      	str	r2, [sp, #28]
    af6a:	9303      	str	r3, [sp, #12]
    af6c:	9508      	str	r5, [sp, #32]
    af6e:	e657      	b.n	ac20 <_vfiprintf_r+0x260>
    af70:	2943      	cmp	r1, #67	; 0x43
    af72:	d002      	beq.n	af7a <_vfiprintf_r+0x5ba>
    af74:	06f5      	lsls	r5, r6, #27
    af76:	f140 832d 	bpl.w	b5d4 <_vfiprintf_r+0xc14>
    af7a:	9d07      	ldr	r5, [sp, #28]
    af7c:	2208      	movs	r2, #8
    af7e:	2100      	movs	r1, #0
    af80:	a816      	add	r0, sp, #88	; 0x58
    af82:	ac2b      	add	r4, sp, #172	; 0xac
    af84:	f7fc f9dc 	bl	7340 <memset>
    af88:	ab16      	add	r3, sp, #88	; 0x58
    af8a:	f855 2b04 	ldr.w	r2, [r5], #4
    af8e:	4621      	mov	r1, r4
    af90:	4658      	mov	r0, fp
    af92:	f7ff fc93 	bl	a8bc <_wcrtomb_r>
    af96:	4603      	mov	r3, r0
    af98:	3301      	adds	r3, #1
    af9a:	9004      	str	r0, [sp, #16]
    af9c:	f000 84b3 	beq.w	b906 <_vfiprintf_r+0xf46>
    afa0:	9b04      	ldr	r3, [sp, #16]
    afa2:	9507      	str	r5, [sp, #28]
    afa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    afa8:	9303      	str	r3, [sp, #12]
    afaa:	2300      	movs	r3, #0
    afac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    afb0:	e703      	b.n	adba <_vfiprintf_r+0x3fa>
    afb2:	9b07      	ldr	r3, [sp, #28]
    afb4:	f853 2b04 	ldr.w	r2, [r3], #4
    afb8:	9206      	str	r2, [sp, #24]
    afba:	2a00      	cmp	r2, #0
    afbc:	f280 829c 	bge.w	b4f8 <_vfiprintf_r+0xb38>
    afc0:	9a06      	ldr	r2, [sp, #24]
    afc2:	4252      	negs	r2, r2
    afc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    afc8:	f898 1000 	ldrb.w	r1, [r8]
    afcc:	f046 0604 	orr.w	r6, r6, #4
    afd0:	e569      	b.n	aaa6 <_vfiprintf_r+0xe6>
    afd2:	f898 1000 	ldrb.w	r1, [r8]
    afd6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    afda:	e564      	b.n	aaa6 <_vfiprintf_r+0xe6>
    afdc:	f898 1000 	ldrb.w	r1, [r8]
    afe0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    afe4:	e55f      	b.n	aaa6 <_vfiprintf_r+0xe6>
    afe6:	4642      	mov	r2, r8
    afe8:	f812 1b01 	ldrb.w	r1, [r2], #1
    afec:	292a      	cmp	r1, #42	; 0x2a
    afee:	f000 8496 	beq.w	b91e <_vfiprintf_r+0xf5e>
    aff2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    aff6:	2b09      	cmp	r3, #9
    aff8:	4690      	mov	r8, r2
    affa:	f04f 0700 	mov.w	r7, #0
    affe:	f63f ad54 	bhi.w	aaaa <_vfiprintf_r+0xea>
    b002:	f818 1b01 	ldrb.w	r1, [r8], #1
    b006:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b00a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    b00e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b012:	2b09      	cmp	r3, #9
    b014:	d9f5      	bls.n	b002 <_vfiprintf_r+0x642>
    b016:	e548      	b.n	aaaa <_vfiprintf_r+0xea>
    b018:	f898 1000 	ldrb.w	r1, [r8]
    b01c:	f046 0601 	orr.w	r6, r6, #1
    b020:	e541      	b.n	aaa6 <_vfiprintf_r+0xe6>
    b022:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b026:	2b00      	cmp	r3, #0
    b028:	f47f adc2 	bne.w	abb0 <_vfiprintf_r+0x1f0>
    b02c:	2320      	movs	r3, #32
    b02e:	f898 1000 	ldrb.w	r1, [r8]
    b032:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b036:	e536      	b.n	aaa6 <_vfiprintf_r+0xe6>
    b038:	f898 1000 	ldrb.w	r1, [r8]
    b03c:	296c      	cmp	r1, #108	; 0x6c
    b03e:	bf03      	ittte	eq
    b040:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b044:	f046 0620 	orreq.w	r6, r6, #32
    b048:	f108 0801 	addeq.w	r8, r8, #1
    b04c:	f046 0610 	orrne.w	r6, r6, #16
    b050:	e529      	b.n	aaa6 <_vfiprintf_r+0xe6>
    b052:	f898 1000 	ldrb.w	r1, [r8]
    b056:	2968      	cmp	r1, #104	; 0x68
    b058:	bf03      	ittte	eq
    b05a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b05e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    b062:	f108 0801 	addeq.w	r8, r8, #1
    b066:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    b06a:	e51c      	b.n	aaa6 <_vfiprintf_r+0xe6>
    b06c:	f046 0310 	orr.w	r3, r6, #16
    b070:	9303      	str	r3, [sp, #12]
    b072:	9b03      	ldr	r3, [sp, #12]
    b074:	f013 0220 	ands.w	r2, r3, #32
    b078:	f000 8206 	beq.w	b488 <_vfiprintf_r+0xac8>
    b07c:	9b07      	ldr	r3, [sp, #28]
    b07e:	3307      	adds	r3, #7
    b080:	f023 0307 	bic.w	r3, r3, #7
    b084:	4619      	mov	r1, r3
    b086:	685a      	ldr	r2, [r3, #4]
    b088:	f851 3b08 	ldr.w	r3, [r1], #8
    b08c:	9107      	str	r1, [sp, #28]
    b08e:	2101      	movs	r1, #1
    b090:	e60d      	b.n	acae <_vfiprintf_r+0x2ee>
    b092:	9a07      	ldr	r2, [sp, #28]
    b094:	f046 0302 	orr.w	r3, r6, #2
    b098:	9303      	str	r3, [sp, #12]
    b09a:	f852 3b04 	ldr.w	r3, [r2], #4
    b09e:	9207      	str	r2, [sp, #28]
    b0a0:	f647 0230 	movw	r2, #30768	; 0x7830
    b0a4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    b0a8:	4ab8      	ldr	r2, [pc, #736]	; (b38c <_vfiprintf_r+0x9cc>)
    b0aa:	920c      	str	r2, [sp, #48]	; 0x30
    b0ac:	2102      	movs	r1, #2
    b0ae:	2200      	movs	r2, #0
    b0b0:	e5fd      	b.n	acae <_vfiprintf_r+0x2ee>
    b0b2:	06b7      	lsls	r7, r6, #26
    b0b4:	f100 8248 	bmi.w	b548 <_vfiprintf_r+0xb88>
    b0b8:	06f5      	lsls	r5, r6, #27
    b0ba:	f100 8346 	bmi.w	b74a <_vfiprintf_r+0xd8a>
    b0be:	0674      	lsls	r4, r6, #25
    b0c0:	f100 83d5 	bmi.w	b86e <_vfiprintf_r+0xeae>
    b0c4:	05b0      	lsls	r0, r6, #22
    b0c6:	f140 8340 	bpl.w	b74a <_vfiprintf_r+0xd8a>
    b0ca:	9b07      	ldr	r3, [sp, #28]
    b0cc:	9905      	ldr	r1, [sp, #20]
    b0ce:	f853 2b04 	ldr.w	r2, [r3], #4
    b0d2:	9307      	str	r3, [sp, #28]
    b0d4:	7011      	strb	r1, [r2, #0]
    b0d6:	e4be      	b.n	aa56 <_vfiprintf_r+0x96>
    b0d8:	9603      	str	r6, [sp, #12]
    b0da:	2901      	cmp	r1, #1
    b0dc:	f43f ad8c 	beq.w	abf8 <_vfiprintf_r+0x238>
    b0e0:	2902      	cmp	r1, #2
    b0e2:	ac44      	add	r4, sp, #272	; 0x110
    b0e4:	d111      	bne.n	b10a <_vfiprintf_r+0x74a>
    b0e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    b0e8:	f003 010f 	and.w	r1, r3, #15
    b0ec:	091b      	lsrs	r3, r3, #4
    b0ee:	5c41      	ldrb	r1, [r0, r1]
    b0f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b0f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    b0f8:	0912      	lsrs	r2, r2, #4
    b0fa:	ea53 0102 	orrs.w	r1, r3, r2
    b0fe:	d1f3      	bne.n	b0e8 <_vfiprintf_r+0x728>
    b100:	9e03      	ldr	r6, [sp, #12]
    b102:	ab44      	add	r3, sp, #272	; 0x110
    b104:	1b1b      	subs	r3, r3, r4
    b106:	9304      	str	r3, [sp, #16]
    b108:	e583      	b.n	ac12 <_vfiprintf_r+0x252>
    b10a:	f003 0107 	and.w	r1, r3, #7
    b10e:	08db      	lsrs	r3, r3, #3
    b110:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    b114:	08d2      	lsrs	r2, r2, #3
    b116:	3130      	adds	r1, #48	; 0x30
    b118:	ea53 0502 	orrs.w	r5, r3, r2
    b11c:	4620      	mov	r0, r4
    b11e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b122:	d1f2      	bne.n	b10a <_vfiprintf_r+0x74a>
    b124:	9e03      	ldr	r6, [sp, #12]
    b126:	07f3      	lsls	r3, r6, #31
    b128:	d5eb      	bpl.n	b102 <_vfiprintf_r+0x742>
    b12a:	2930      	cmp	r1, #48	; 0x30
    b12c:	d0e8      	beq.n	b100 <_vfiprintf_r+0x740>
    b12e:	2330      	movs	r3, #48	; 0x30
    b130:	3802      	subs	r0, #2
    b132:	f804 3c01 	strb.w	r3, [r4, #-1]
    b136:	ab44      	add	r3, sp, #272	; 0x110
    b138:	1a1b      	subs	r3, r3, r0
    b13a:	9e03      	ldr	r6, [sp, #12]
    b13c:	9304      	str	r3, [sp, #16]
    b13e:	4604      	mov	r4, r0
    b140:	e567      	b.n	ac12 <_vfiprintf_r+0x252>
    b142:	9b04      	ldr	r3, [sp, #16]
    b144:	941b      	str	r4, [sp, #108]	; 0x6c
    b146:	2201      	movs	r2, #1
    b148:	931c      	str	r3, [sp, #112]	; 0x70
    b14a:	931a      	str	r3, [sp, #104]	; 0x68
    b14c:	9219      	str	r2, [sp, #100]	; 0x64
    b14e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b152:	f109 0908 	add.w	r9, r9, #8
    b156:	e69d      	b.n	ae94 <_vfiprintf_r+0x4d4>
    b158:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b15c:	e47b      	b.n	aa56 <_vfiprintf_r+0x96>
    b15e:	9a06      	ldr	r2, [sp, #24]
    b160:	9d03      	ldr	r5, [sp, #12]
    b162:	1b55      	subs	r5, r2, r5
    b164:	2d00      	cmp	r5, #0
    b166:	f77f ae76 	ble.w	ae56 <_vfiprintf_r+0x496>
    b16a:	2d10      	cmp	r5, #16
    b16c:	f340 83bb 	ble.w	b8e6 <_vfiprintf_r+0xf26>
    b170:	9409      	str	r4, [sp, #36]	; 0x24
    b172:	ee18 4a10 	vmov	r4, s16
    b176:	e007      	b.n	b188 <_vfiprintf_r+0x7c8>
    b178:	f100 0c02 	add.w	ip, r0, #2
    b17c:	f109 0908 	add.w	r9, r9, #8
    b180:	4610      	mov	r0, r2
    b182:	3d10      	subs	r5, #16
    b184:	2d10      	cmp	r5, #16
    b186:	dd1e      	ble.n	b1c6 <_vfiprintf_r+0x806>
    b188:	4981      	ldr	r1, [pc, #516]	; (b390 <_vfiprintf_r+0x9d0>)
    b18a:	f8c9 1000 	str.w	r1, [r9]
    b18e:	1c42      	adds	r2, r0, #1
    b190:	3310      	adds	r3, #16
    b192:	2110      	movs	r1, #16
    b194:	2a07      	cmp	r2, #7
    b196:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b19a:	f8c9 1004 	str.w	r1, [r9, #4]
    b19e:	ddeb      	ble.n	b178 <_vfiprintf_r+0x7b8>
    b1a0:	aa18      	add	r2, sp, #96	; 0x60
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	d074      	beq.n	b290 <_vfiprintf_r+0x8d0>
    b1a6:	4621      	mov	r1, r4
    b1a8:	4658      	mov	r0, fp
    b1aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b1ae:	f7ff fbcb 	bl	a948 <__sprint_r.part.0>
    b1b2:	2800      	cmp	r0, #0
    b1b4:	f47f addb 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b1b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b1bc:	3d10      	subs	r5, #16
    b1be:	2d10      	cmp	r5, #16
    b1c0:	f100 0c01 	add.w	ip, r0, #1
    b1c4:	dce0      	bgt.n	b188 <_vfiprintf_r+0x7c8>
    b1c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b1c8:	4a71      	ldr	r2, [pc, #452]	; (b390 <_vfiprintf_r+0x9d0>)
    b1ca:	f8c9 5004 	str.w	r5, [r9, #4]
    b1ce:	442b      	add	r3, r5
    b1d0:	f1bc 0f07 	cmp.w	ip, #7
    b1d4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    b1d8:	f8c9 2000 	str.w	r2, [r9]
    b1dc:	f340 8194 	ble.w	b508 <_vfiprintf_r+0xb48>
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	f000 831f 	beq.w	b824 <_vfiprintf_r+0xe64>
    b1e6:	ee18 1a10 	vmov	r1, s16
    b1ea:	aa18      	add	r2, sp, #96	; 0x60
    b1ec:	4658      	mov	r0, fp
    b1ee:	f7ff fbab 	bl	a948 <__sprint_r.part.0>
    b1f2:	2800      	cmp	r0, #0
    b1f4:	f47f adbb 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b1f8:	9a04      	ldr	r2, [sp, #16]
    b1fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b1fe:	1abd      	subs	r5, r7, r2
    b200:	2d00      	cmp	r5, #0
    b202:	f100 0101 	add.w	r1, r0, #1
    b206:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b20a:	f77f ae29 	ble.w	ae60 <_vfiprintf_r+0x4a0>
    b20e:	2d10      	cmp	r5, #16
    b210:	dd29      	ble.n	b266 <_vfiprintf_r+0x8a6>
    b212:	9409      	str	r4, [sp, #36]	; 0x24
    b214:	2710      	movs	r7, #16
    b216:	ee18 4a10 	vmov	r4, s16
    b21a:	e007      	b.n	b22c <_vfiprintf_r+0x86c>
    b21c:	f100 0c02 	add.w	ip, r0, #2
    b220:	f109 0908 	add.w	r9, r9, #8
    b224:	4610      	mov	r0, r2
    b226:	3d10      	subs	r5, #16
    b228:	2d10      	cmp	r5, #16
    b22a:	dd1a      	ble.n	b262 <_vfiprintf_r+0x8a2>
    b22c:	1c42      	adds	r2, r0, #1
    b22e:	4958      	ldr	r1, [pc, #352]	; (b390 <_vfiprintf_r+0x9d0>)
    b230:	3310      	adds	r3, #16
    b232:	2a07      	cmp	r2, #7
    b234:	e9c9 1700 	strd	r1, r7, [r9]
    b238:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b23c:	ddee      	ble.n	b21c <_vfiprintf_r+0x85c>
    b23e:	aa18      	add	r2, sp, #96	; 0x60
    b240:	b303      	cbz	r3, b284 <_vfiprintf_r+0x8c4>
    b242:	4621      	mov	r1, r4
    b244:	4658      	mov	r0, fp
    b246:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b24a:	f7ff fb7d 	bl	a948 <__sprint_r.part.0>
    b24e:	2800      	cmp	r0, #0
    b250:	f47f ad8d 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b254:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b258:	3d10      	subs	r5, #16
    b25a:	2d10      	cmp	r5, #16
    b25c:	f100 0c01 	add.w	ip, r0, #1
    b260:	dce4      	bgt.n	b22c <_vfiprintf_r+0x86c>
    b262:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b264:	4661      	mov	r1, ip
    b266:	4a4a      	ldr	r2, [pc, #296]	; (b390 <_vfiprintf_r+0x9d0>)
    b268:	f8c9 5004 	str.w	r5, [r9, #4]
    b26c:	442b      	add	r3, r5
    b26e:	2907      	cmp	r1, #7
    b270:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b274:	f8c9 2000 	str.w	r2, [r9]
    b278:	f300 80e7 	bgt.w	b44a <_vfiprintf_r+0xa8a>
    b27c:	f109 0908 	add.w	r9, r9, #8
    b280:	3101      	adds	r1, #1
    b282:	e5ed      	b.n	ae60 <_vfiprintf_r+0x4a0>
    b284:	f04f 0c01 	mov.w	ip, #1
    b288:	4618      	mov	r0, r3
    b28a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b28e:	e7ca      	b.n	b226 <_vfiprintf_r+0x866>
    b290:	f04f 0c01 	mov.w	ip, #1
    b294:	4618      	mov	r0, r3
    b296:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b29a:	e772      	b.n	b182 <_vfiprintf_r+0x7c2>
    b29c:	2b00      	cmp	r3, #0
    b29e:	f000 8104 	beq.w	b4aa <_vfiprintf_r+0xaea>
    b2a2:	ee18 1a10 	vmov	r1, s16
    b2a6:	aa18      	add	r2, sp, #96	; 0x60
    b2a8:	4658      	mov	r0, fp
    b2aa:	f7ff fb4d 	bl	a948 <__sprint_r.part.0>
    b2ae:	2800      	cmp	r0, #0
    b2b0:	f47f ad5d 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b2b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b2b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b2bc:	1c41      	adds	r1, r0, #1
    b2be:	e5a7      	b.n	ae10 <_vfiprintf_r+0x450>
    b2c0:	2302      	movs	r3, #2
    b2c2:	aa11      	add	r2, sp, #68	; 0x44
    b2c4:	931c      	str	r3, [sp, #112]	; 0x70
    b2c6:	921b      	str	r2, [sp, #108]	; 0x6c
    b2c8:	2101      	movs	r1, #1
    b2ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b2ce:	4608      	mov	r0, r1
    b2d0:	f109 0908 	add.w	r9, r9, #8
    b2d4:	1c41      	adds	r1, r0, #1
    b2d6:	e5ba      	b.n	ae4e <_vfiprintf_r+0x48e>
    b2d8:	2d10      	cmp	r5, #16
    b2da:	f340 82e5 	ble.w	b8a8 <_vfiprintf_r+0xee8>
    b2de:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b2e2:	940f      	str	r4, [sp, #60]	; 0x3c
    b2e4:	4608      	mov	r0, r1
    b2e6:	ee18 4a10 	vmov	r4, s16
    b2ea:	e007      	b.n	b2fc <_vfiprintf_r+0x93c>
    b2ec:	f100 0c02 	add.w	ip, r0, #2
    b2f0:	f109 0908 	add.w	r9, r9, #8
    b2f4:	4610      	mov	r0, r2
    b2f6:	3d10      	subs	r5, #16
    b2f8:	2d10      	cmp	r5, #16
    b2fa:	dd1d      	ble.n	b338 <_vfiprintf_r+0x978>
    b2fc:	4925      	ldr	r1, [pc, #148]	; (b394 <_vfiprintf_r+0x9d4>)
    b2fe:	f8c9 1000 	str.w	r1, [r9]
    b302:	1c42      	adds	r2, r0, #1
    b304:	3310      	adds	r3, #16
    b306:	2110      	movs	r1, #16
    b308:	2a07      	cmp	r2, #7
    b30a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b30e:	f8c9 1004 	str.w	r1, [r9, #4]
    b312:	ddeb      	ble.n	b2ec <_vfiprintf_r+0x92c>
    b314:	aa18      	add	r2, sp, #96	; 0x60
    b316:	b303      	cbz	r3, b35a <_vfiprintf_r+0x99a>
    b318:	4621      	mov	r1, r4
    b31a:	4658      	mov	r0, fp
    b31c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b320:	f7ff fb12 	bl	a948 <__sprint_r.part.0>
    b324:	2800      	cmp	r0, #0
    b326:	f47f ad22 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b32a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b32e:	3d10      	subs	r5, #16
    b330:	2d10      	cmp	r5, #16
    b332:	f100 0c01 	add.w	ip, r0, #1
    b336:	dce1      	bgt.n	b2fc <_vfiprintf_r+0x93c>
    b338:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b33a:	4660      	mov	r0, ip
    b33c:	4a15      	ldr	r2, [pc, #84]	; (b394 <_vfiprintf_r+0x9d4>)
    b33e:	f8c9 5004 	str.w	r5, [r9, #4]
    b342:	442b      	add	r3, r5
    b344:	2807      	cmp	r0, #7
    b346:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b34a:	f8c9 2000 	str.w	r2, [r9]
    b34e:	f300 80c1 	bgt.w	b4d4 <_vfiprintf_r+0xb14>
    b352:	f109 0908 	add.w	r9, r9, #8
    b356:	1c41      	adds	r1, r0, #1
    b358:	e546      	b.n	ade8 <_vfiprintf_r+0x428>
    b35a:	4618      	mov	r0, r3
    b35c:	f04f 0c01 	mov.w	ip, #1
    b360:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b364:	e7c7      	b.n	b2f6 <_vfiprintf_r+0x936>
    b366:	0776      	lsls	r6, r6, #29
    b368:	9319      	str	r3, [sp, #100]	; 0x64
    b36a:	d553      	bpl.n	b414 <_vfiprintf_r+0xa54>
    b36c:	9a06      	ldr	r2, [sp, #24]
    b36e:	9903      	ldr	r1, [sp, #12]
    b370:	1a54      	subs	r4, r2, r1
    b372:	2c00      	cmp	r4, #0
    b374:	dd4e      	ble.n	b414 <_vfiprintf_r+0xa54>
    b376:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b37a:	2c10      	cmp	r4, #16
    b37c:	f340 82b0 	ble.w	b8e0 <_vfiprintf_r+0xf20>
    b380:	9919      	ldr	r1, [sp, #100]	; 0x64
    b382:	ee18 6a10 	vmov	r6, s16
    b386:	2510      	movs	r5, #16
    b388:	e00d      	b.n	b3a6 <_vfiprintf_r+0x9e6>
    b38a:	bf00      	nop
    b38c:	20000ac8 	.word	0x20000ac8
    b390:	20001058 	.word	0x20001058
    b394:	20000ae4 	.word	0x20000ae4
    b398:	1c88      	adds	r0, r1, #2
    b39a:	f109 0908 	add.w	r9, r9, #8
    b39e:	4611      	mov	r1, r2
    b3a0:	3c10      	subs	r4, #16
    b3a2:	2c10      	cmp	r4, #16
    b3a4:	dd1a      	ble.n	b3dc <_vfiprintf_r+0xa1c>
    b3a6:	1c4a      	adds	r2, r1, #1
    b3a8:	48b3      	ldr	r0, [pc, #716]	; (b678 <_vfiprintf_r+0xcb8>)
    b3aa:	3310      	adds	r3, #16
    b3ac:	2a07      	cmp	r2, #7
    b3ae:	e9c9 0500 	strd	r0, r5, [r9]
    b3b2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b3b6:	ddef      	ble.n	b398 <_vfiprintf_r+0x9d8>
    b3b8:	aa18      	add	r2, sp, #96	; 0x60
    b3ba:	b333      	cbz	r3, b40a <_vfiprintf_r+0xa4a>
    b3bc:	4631      	mov	r1, r6
    b3be:	4658      	mov	r0, fp
    b3c0:	f7ff fac2 	bl	a948 <__sprint_r.part.0>
    b3c4:	2800      	cmp	r0, #0
    b3c6:	f47f acd2 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b3ca:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b3ce:	3c10      	subs	r4, #16
    b3d0:	2c10      	cmp	r4, #16
    b3d2:	f101 0001 	add.w	r0, r1, #1
    b3d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b3da:	dce4      	bgt.n	b3a6 <_vfiprintf_r+0x9e6>
    b3dc:	4aa6      	ldr	r2, [pc, #664]	; (b678 <_vfiprintf_r+0xcb8>)
    b3de:	f8c9 4004 	str.w	r4, [r9, #4]
    b3e2:	4423      	add	r3, r4
    b3e4:	2807      	cmp	r0, #7
    b3e6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b3ea:	f8c9 2000 	str.w	r2, [r9]
    b3ee:	f77f ad59 	ble.w	aea4 <_vfiprintf_r+0x4e4>
    b3f2:	b17b      	cbz	r3, b414 <_vfiprintf_r+0xa54>
    b3f4:	ee18 1a10 	vmov	r1, s16
    b3f8:	aa18      	add	r2, sp, #96	; 0x60
    b3fa:	4658      	mov	r0, fp
    b3fc:	f7ff faa4 	bl	a948 <__sprint_r.part.0>
    b400:	2800      	cmp	r0, #0
    b402:	f47f acb4 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b406:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b408:	e54c      	b.n	aea4 <_vfiprintf_r+0x4e4>
    b40a:	2001      	movs	r0, #1
    b40c:	4619      	mov	r1, r3
    b40e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b412:	e7c5      	b.n	b3a0 <_vfiprintf_r+0x9e0>
    b414:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    b418:	9903      	ldr	r1, [sp, #12]
    b41a:	428a      	cmp	r2, r1
    b41c:	bfac      	ite	ge
    b41e:	189b      	addge	r3, r3, r2
    b420:	185b      	addlt	r3, r3, r1
    b422:	9305      	str	r3, [sp, #20]
    b424:	e549      	b.n	aeba <_vfiprintf_r+0x4fa>
    b426:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b42a:	058f      	lsls	r7, r1, #22
    b42c:	ee18 3a10 	vmov	r3, s16
    b430:	b28a      	uxth	r2, r1
    b432:	f53f aae8 	bmi.w	aa06 <_vfiprintf_r+0x46>
    b436:	ee18 5a10 	vmov	r5, s16
    b43a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b43c:	f7fc fb5e 	bl	7afc <__retarget_lock_acquire_recursive>
    b440:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    b444:	b28a      	uxth	r2, r1
    b446:	f7ff bade 	b.w	aa06 <_vfiprintf_r+0x46>
    b44a:	2b00      	cmp	r3, #0
    b44c:	f43f ae79 	beq.w	b142 <_vfiprintf_r+0x782>
    b450:	ee18 1a10 	vmov	r1, s16
    b454:	aa18      	add	r2, sp, #96	; 0x60
    b456:	4658      	mov	r0, fp
    b458:	f7ff fa76 	bl	a948 <__sprint_r.part.0>
    b45c:	2800      	cmp	r0, #0
    b45e:	f47f ac86 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b462:	9919      	ldr	r1, [sp, #100]	; 0x64
    b464:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b466:	3101      	adds	r1, #1
    b468:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b46c:	e4f8      	b.n	ae60 <_vfiprintf_r+0x4a0>
    b46e:	9219      	str	r2, [sp, #100]	; 0x64
    b470:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b474:	e45e      	b.n	ad34 <_vfiprintf_r+0x374>
    b476:	2f00      	cmp	r7, #0
    b478:	f47f abc3 	bne.w	ac02 <_vfiprintf_r+0x242>
    b47c:	9e03      	ldr	r6, [sp, #12]
    b47e:	2700      	movs	r7, #0
    b480:	9704      	str	r7, [sp, #16]
    b482:	ac44      	add	r4, sp, #272	; 0x110
    b484:	f7ff bbc5 	b.w	ac12 <_vfiprintf_r+0x252>
    b488:	9b03      	ldr	r3, [sp, #12]
    b48a:	f013 0310 	ands.w	r3, r3, #16
    b48e:	d154      	bne.n	b53a <_vfiprintf_r+0xb7a>
    b490:	9a03      	ldr	r2, [sp, #12]
    b492:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    b496:	f000 816b 	beq.w	b770 <_vfiprintf_r+0xdb0>
    b49a:	9907      	ldr	r1, [sp, #28]
    b49c:	461a      	mov	r2, r3
    b49e:	f851 3b04 	ldr.w	r3, [r1], #4
    b4a2:	9107      	str	r1, [sp, #28]
    b4a4:	b29b      	uxth	r3, r3
    b4a6:	2101      	movs	r1, #1
    b4a8:	e401      	b.n	acae <_vfiprintf_r+0x2ee>
    b4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b4ac:	2a00      	cmp	r2, #0
    b4ae:	d164      	bne.n	b57a <_vfiprintf_r+0xbba>
    b4b0:	4618      	mov	r0, r3
    b4b2:	2101      	movs	r1, #1
    b4b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4b8:	e4c9      	b.n	ae4e <_vfiprintf_r+0x48e>
    b4ba:	2101      	movs	r1, #1
    b4bc:	4618      	mov	r0, r3
    b4be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4c2:	e4c4      	b.n	ae4e <_vfiprintf_r+0x48e>
    b4c4:	425b      	negs	r3, r3
    b4c6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    b4ca:	9603      	str	r6, [sp, #12]
    b4cc:	202d      	movs	r0, #45	; 0x2d
    b4ce:	2101      	movs	r1, #1
    b4d0:	f7ff bbee 	b.w	acb0 <_vfiprintf_r+0x2f0>
    b4d4:	2b00      	cmp	r3, #0
    b4d6:	f000 8088 	beq.w	b5ea <_vfiprintf_r+0xc2a>
    b4da:	ee18 1a10 	vmov	r1, s16
    b4de:	aa18      	add	r2, sp, #96	; 0x60
    b4e0:	4658      	mov	r0, fp
    b4e2:	f7ff fa31 	bl	a948 <__sprint_r.part.0>
    b4e6:	2800      	cmp	r0, #0
    b4e8:	f47f ac41 	bne.w	ad6e <_vfiprintf_r+0x3ae>
    b4ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b4f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4f4:	1c41      	adds	r1, r0, #1
    b4f6:	e477      	b.n	ade8 <_vfiprintf_r+0x428>
    b4f8:	f898 1000 	ldrb.w	r1, [r8]
    b4fc:	9307      	str	r3, [sp, #28]
    b4fe:	f7ff bad2 	b.w	aaa6 <_vfiprintf_r+0xe6>
    b502:	ac44      	add	r4, sp, #272	; 0x110
    b504:	f7ff bb85 	b.w	ac12 <_vfiprintf_r+0x252>
    b508:	f109 0908 	add.w	r9, r9, #8
    b50c:	f10c 0101 	add.w	r1, ip, #1
    b510:	4660      	mov	r0, ip
    b512:	e4a0      	b.n	ae56 <_vfiprintf_r+0x496>
    b514:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b518:	f040 8197 	bne.w	b84a <_vfiprintf_r+0xe8a>
    b51c:	f851 3b04 	ldr.w	r3, [r1], #4
    b520:	9107      	str	r1, [sp, #28]
    b522:	f7ff bbc0 	b.w	aca6 <_vfiprintf_r+0x2e6>
    b526:	05b3      	lsls	r3, r6, #22
    b528:	f100 8188 	bmi.w	b83c <_vfiprintf_r+0xe7c>
    b52c:	f852 3b04 	ldr.w	r3, [r2], #4
    b530:	9207      	str	r2, [sp, #28]
    b532:	17da      	asrs	r2, r3, #31
    b534:	4611      	mov	r1, r2
    b536:	f7ff bb52 	b.w	abde <_vfiprintf_r+0x21e>
    b53a:	9907      	ldr	r1, [sp, #28]
    b53c:	f851 3b04 	ldr.w	r3, [r1], #4
    b540:	9107      	str	r1, [sp, #28]
    b542:	2101      	movs	r1, #1
    b544:	f7ff bbb3 	b.w	acae <_vfiprintf_r+0x2ee>
    b548:	9b07      	ldr	r3, [sp, #28]
    b54a:	9805      	ldr	r0, [sp, #20]
    b54c:	f853 1b04 	ldr.w	r1, [r3], #4
    b550:	9307      	str	r3, [sp, #28]
    b552:	17c2      	asrs	r2, r0, #31
    b554:	e9c1 0200 	strd	r0, r2, [r1]
    b558:	f7ff ba7d 	b.w	aa56 <_vfiprintf_r+0x96>
    b55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b55e:	2b00      	cmp	r3, #0
    b560:	f43f ab26 	beq.w	abb0 <_vfiprintf_r+0x1f0>
    b564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b566:	781b      	ldrb	r3, [r3, #0]
    b568:	2b00      	cmp	r3, #0
    b56a:	f43f ab21 	beq.w	abb0 <_vfiprintf_r+0x1f0>
    b56e:	f898 1000 	ldrb.w	r1, [r8]
    b572:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    b576:	f7ff ba96 	b.w	aaa6 <_vfiprintf_r+0xe6>
    b57a:	2302      	movs	r3, #2
    b57c:	aa11      	add	r2, sp, #68	; 0x44
    b57e:	931c      	str	r3, [sp, #112]	; 0x70
    b580:	921b      	str	r2, [sp, #108]	; 0x6c
    b582:	2001      	movs	r0, #1
    b584:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b588:	e6a2      	b.n	b2d0 <_vfiprintf_r+0x910>
    b58a:	9603      	str	r6, [sp, #12]
    b58c:	e571      	b.n	b072 <_vfiprintf_r+0x6b2>
    b58e:	4b3b      	ldr	r3, [pc, #236]	; (b67c <_vfiprintf_r+0xcbc>)
    b590:	930c      	str	r3, [sp, #48]	; 0x30
    b592:	f016 0220 	ands.w	r2, r6, #32
    b596:	d059      	beq.n	b64c <_vfiprintf_r+0xc8c>
    b598:	9b07      	ldr	r3, [sp, #28]
    b59a:	3307      	adds	r3, #7
    b59c:	f023 0307 	bic.w	r3, r3, #7
    b5a0:	4618      	mov	r0, r3
    b5a2:	685a      	ldr	r2, [r3, #4]
    b5a4:	f850 3b08 	ldr.w	r3, [r0], #8
    b5a8:	9007      	str	r0, [sp, #28]
    b5aa:	07f4      	lsls	r4, r6, #31
    b5ac:	d509      	bpl.n	b5c2 <_vfiprintf_r+0xc02>
    b5ae:	ea53 0002 	orrs.w	r0, r3, r2
    b5b2:	d006      	beq.n	b5c2 <_vfiprintf_r+0xc02>
    b5b4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    b5b8:	2130      	movs	r1, #48	; 0x30
    b5ba:	f046 0602 	orr.w	r6, r6, #2
    b5be:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    b5c2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b5c6:	9103      	str	r1, [sp, #12]
    b5c8:	2102      	movs	r1, #2
    b5ca:	f7ff bb70 	b.w	acae <_vfiprintf_r+0x2ee>
    b5ce:	4b2c      	ldr	r3, [pc, #176]	; (b680 <_vfiprintf_r+0xcc0>)
    b5d0:	930c      	str	r3, [sp, #48]	; 0x30
    b5d2:	e7de      	b.n	b592 <_vfiprintf_r+0xbd2>
    b5d4:	9b07      	ldr	r3, [sp, #28]
    b5d6:	2101      	movs	r1, #1
    b5d8:	f853 2b04 	ldr.w	r2, [r3], #4
    b5dc:	9103      	str	r1, [sp, #12]
    b5de:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    b5e2:	9307      	str	r3, [sp, #28]
    b5e4:	9104      	str	r1, [sp, #16]
    b5e6:	ac2b      	add	r4, sp, #172	; 0xac
    b5e8:	e4df      	b.n	afaa <_vfiprintf_r+0x5ea>
    b5ea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b5ee:	2a00      	cmp	r2, #0
    b5f0:	f040 8132 	bne.w	b858 <_vfiprintf_r+0xe98>
    b5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b5f6:	2a00      	cmp	r2, #0
    b5f8:	f47f ae62 	bne.w	b2c0 <_vfiprintf_r+0x900>
    b5fc:	4618      	mov	r0, r3
    b5fe:	2101      	movs	r1, #1
    b600:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b604:	e427      	b.n	ae56 <_vfiprintf_r+0x496>
    b606:	2100      	movs	r1, #0
    b608:	2208      	movs	r2, #8
    b60a:	a816      	add	r0, sp, #88	; 0x58
    b60c:	9413      	str	r4, [sp, #76]	; 0x4c
    b60e:	f7fb fe97 	bl	7340 <memset>
    b612:	1c79      	adds	r1, r7, #1
    b614:	f000 80bc 	beq.w	b790 <_vfiprintf_r+0xdd0>
    b618:	2500      	movs	r5, #0
    b61a:	9407      	str	r4, [sp, #28]
    b61c:	462c      	mov	r4, r5
    b61e:	e00c      	b.n	b63a <_vfiprintf_r+0xc7a>
    b620:	a92b      	add	r1, sp, #172	; 0xac
    b622:	4658      	mov	r0, fp
    b624:	f7ff f94a 	bl	a8bc <_wcrtomb_r>
    b628:	1c42      	adds	r2, r0, #1
    b62a:	4420      	add	r0, r4
    b62c:	f000 816b 	beq.w	b906 <_vfiprintf_r+0xf46>
    b630:	42b8      	cmp	r0, r7
    b632:	dc08      	bgt.n	b646 <_vfiprintf_r+0xc86>
    b634:	f000 8170 	beq.w	b918 <_vfiprintf_r+0xf58>
    b638:	4604      	mov	r4, r0
    b63a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b63c:	5952      	ldr	r2, [r2, r5]
    b63e:	ab16      	add	r3, sp, #88	; 0x58
    b640:	3504      	adds	r5, #4
    b642:	2a00      	cmp	r2, #0
    b644:	d1ec      	bne.n	b620 <_vfiprintf_r+0xc60>
    b646:	9404      	str	r4, [sp, #16]
    b648:	9c07      	ldr	r4, [sp, #28]
    b64a:	e0af      	b.n	b7ac <_vfiprintf_r+0xdec>
    b64c:	f016 0310 	ands.w	r3, r6, #16
    b650:	9807      	ldr	r0, [sp, #28]
    b652:	d10c      	bne.n	b66e <_vfiprintf_r+0xcae>
    b654:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    b658:	d005      	beq.n	b666 <_vfiprintf_r+0xca6>
    b65a:	461a      	mov	r2, r3
    b65c:	f850 3b04 	ldr.w	r3, [r0], #4
    b660:	9007      	str	r0, [sp, #28]
    b662:	b29b      	uxth	r3, r3
    b664:	e7a1      	b.n	b5aa <_vfiprintf_r+0xbea>
    b666:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b66a:	f040 80e1 	bne.w	b830 <_vfiprintf_r+0xe70>
    b66e:	f850 3b04 	ldr.w	r3, [r0], #4
    b672:	9007      	str	r0, [sp, #28]
    b674:	e799      	b.n	b5aa <_vfiprintf_r+0xbea>
    b676:	bf00      	nop
    b678:	20000ae4 	.word	0x20000ae4
    b67c:	20000ac8 	.word	0x20000ac8
    b680:	20000ab4 	.word	0x20000ab4
    b684:	9903      	ldr	r1, [sp, #12]
    b686:	9704      	str	r7, [sp, #16]
    b688:	ac44      	add	r4, sp, #272	; 0x110
    b68a:	469e      	mov	lr, r3
    b68c:	ee08 ba90 	vmov	s17, fp
    b690:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    b694:	f04f 0c00 	mov.w	ip, #0
    b698:	4623      	mov	r3, r4
    b69a:	e006      	b.n	b6aa <_vfiprintf_r+0xcea>
    b69c:	f1be 0f0a 	cmp.w	lr, #10
    b6a0:	f172 0200 	sbcs.w	r2, r2, #0
    b6a4:	d339      	bcc.n	b71a <_vfiprintf_r+0xd5a>
    b6a6:	46a6      	mov	lr, r4
    b6a8:	462a      	mov	r2, r5
    b6aa:	49a6      	ldr	r1, [pc, #664]	; (b944 <_vfiprintf_r+0xf84>)
    b6ac:	eb1e 0002 	adds.w	r0, lr, r2
    b6b0:	f140 0000 	adc.w	r0, r0, #0
    b6b4:	460f      	mov	r7, r1
    b6b6:	fba1 1400 	umull	r1, r4, r1, r0
    b6ba:	f024 0103 	bic.w	r1, r4, #3
    b6be:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    b6c2:	1a40      	subs	r0, r0, r1
    b6c4:	ebbe 0100 	subs.w	r1, lr, r0
    b6c8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    b6cc:	f162 0400 	sbc.w	r4, r2, #0
    b6d0:	fb05 f501 	mul.w	r5, r5, r1
    b6d4:	fb07 5504 	mla	r5, r7, r4, r5
    b6d8:	fba1 4107 	umull	r4, r1, r1, r7
    b6dc:	440d      	add	r5, r1
    b6de:	2705      	movs	r7, #5
    b6e0:	f004 0101 	and.w	r1, r4, #1
    b6e4:	fba1 1b07 	umull	r1, fp, r1, r7
    b6e8:	1809      	adds	r1, r1, r0
    b6ea:	0864      	lsrs	r4, r4, #1
    b6ec:	3130      	adds	r1, #48	; 0x30
    b6ee:	f803 1c01 	strb.w	r1, [r3, #-1]
    b6f2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    b6f6:	f10c 0c01 	add.w	ip, ip, #1
    b6fa:	3b01      	subs	r3, #1
    b6fc:	086d      	lsrs	r5, r5, #1
    b6fe:	2e00      	cmp	r6, #0
    b700:	d0cc      	beq.n	b69c <_vfiprintf_r+0xcdc>
    b702:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b704:	7809      	ldrb	r1, [r1, #0]
    b706:	4561      	cmp	r1, ip
    b708:	d1c8      	bne.n	b69c <_vfiprintf_r+0xcdc>
    b70a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    b70e:	d0c5      	beq.n	b69c <_vfiprintf_r+0xcdc>
    b710:	f1be 0f0a 	cmp.w	lr, #10
    b714:	f172 0200 	sbcs.w	r2, r2, #0
    b718:	d26c      	bcs.n	b7f4 <_vfiprintf_r+0xe34>
    b71a:	461c      	mov	r4, r3
    b71c:	ab44      	add	r3, sp, #272	; 0x110
    b71e:	1b1b      	subs	r3, r3, r4
    b720:	9f04      	ldr	r7, [sp, #16]
    b722:	9e03      	ldr	r6, [sp, #12]
    b724:	9304      	str	r3, [sp, #16]
    b726:	ee18 ba90 	vmov	fp, s17
    b72a:	f7ff ba72 	b.w	ac12 <_vfiprintf_r+0x252>
    b72e:	9603      	str	r6, [sp, #12]
    b730:	f7ff ba62 	b.w	abf8 <_vfiprintf_r+0x238>
    b734:	4658      	mov	r0, fp
    b736:	f7fb fcf3 	bl	7120 <__sinit>
    b73a:	f7ff b95b 	b.w	a9f4 <_vfiprintf_r+0x34>
    b73e:	2901      	cmp	r1, #1
    b740:	9603      	str	r6, [sp, #12]
    b742:	f47f accd 	bne.w	b0e0 <_vfiprintf_r+0x720>
    b746:	f7ff ba5c 	b.w	ac02 <_vfiprintf_r+0x242>
    b74a:	9b07      	ldr	r3, [sp, #28]
    b74c:	9905      	ldr	r1, [sp, #20]
    b74e:	f853 2b04 	ldr.w	r2, [r3], #4
    b752:	6011      	str	r1, [r2, #0]
    b754:	9307      	str	r3, [sp, #28]
    b756:	f7ff b97e 	b.w	aa56 <_vfiprintf_r+0x96>
    b75a:	2f06      	cmp	r7, #6
    b75c:	463b      	mov	r3, r7
    b75e:	9a03      	ldr	r2, [sp, #12]
    b760:	4c79      	ldr	r4, [pc, #484]	; (b948 <_vfiprintf_r+0xf88>)
    b762:	9207      	str	r2, [sp, #28]
    b764:	bf28      	it	cs
    b766:	2306      	movcs	r3, #6
    b768:	9304      	str	r3, [sp, #16]
    b76a:	9303      	str	r3, [sp, #12]
    b76c:	f7ff bb25 	b.w	adba <_vfiprintf_r+0x3fa>
    b770:	9b03      	ldr	r3, [sp, #12]
    b772:	9907      	ldr	r1, [sp, #28]
    b774:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    b778:	bf14      	ite	ne
    b77a:	f851 3b04 	ldrne.w	r3, [r1], #4
    b77e:	f851 3b04 	ldreq.w	r3, [r1], #4
    b782:	9107      	str	r1, [sp, #28]
    b784:	bf1c      	itt	ne
    b786:	4602      	movne	r2, r0
    b788:	b2db      	uxtbne	r3, r3
    b78a:	2101      	movs	r1, #1
    b78c:	f7ff ba8f 	b.w	acae <_vfiprintf_r+0x2ee>
    b790:	ab16      	add	r3, sp, #88	; 0x58
    b792:	9300      	str	r3, [sp, #0]
    b794:	2300      	movs	r3, #0
    b796:	4619      	mov	r1, r3
    b798:	aa13      	add	r2, sp, #76	; 0x4c
    b79a:	4658      	mov	r0, fp
    b79c:	f7ff f8b4 	bl	a908 <_wcsrtombs_r>
    b7a0:	4603      	mov	r3, r0
    b7a2:	3301      	adds	r3, #1
    b7a4:	9004      	str	r0, [sp, #16]
    b7a6:	f000 80ae 	beq.w	b906 <_vfiprintf_r+0xf46>
    b7aa:	9413      	str	r4, [sp, #76]	; 0x4c
    b7ac:	9b04      	ldr	r3, [sp, #16]
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	d030      	beq.n	b814 <_vfiprintf_r+0xe54>
    b7b2:	2b63      	cmp	r3, #99	; 0x63
    b7b4:	dc63      	bgt.n	b87e <_vfiprintf_r+0xebe>
    b7b6:	2300      	movs	r3, #0
    b7b8:	9308      	str	r3, [sp, #32]
    b7ba:	ac2b      	add	r4, sp, #172	; 0xac
    b7bc:	2208      	movs	r2, #8
    b7be:	2100      	movs	r1, #0
    b7c0:	a816      	add	r0, sp, #88	; 0x58
    b7c2:	f7fb fdbd 	bl	7340 <memset>
    b7c6:	9d04      	ldr	r5, [sp, #16]
    b7c8:	ab16      	add	r3, sp, #88	; 0x58
    b7ca:	9300      	str	r3, [sp, #0]
    b7cc:	aa13      	add	r2, sp, #76	; 0x4c
    b7ce:	462b      	mov	r3, r5
    b7d0:	4621      	mov	r1, r4
    b7d2:	4658      	mov	r0, fp
    b7d4:	f7ff f898 	bl	a908 <_wcsrtombs_r>
    b7d8:	4285      	cmp	r5, r0
    b7da:	f040 80ab 	bne.w	b934 <_vfiprintf_r+0xf74>
    b7de:	9b03      	ldr	r3, [sp, #12]
    b7e0:	9a04      	ldr	r2, [sp, #16]
    b7e2:	9307      	str	r3, [sp, #28]
    b7e4:	2300      	movs	r3, #0
    b7e6:	54a3      	strb	r3, [r4, r2]
    b7e8:	461f      	mov	r7, r3
    b7ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b7ee:	9303      	str	r3, [sp, #12]
    b7f0:	f7ff ba16 	b.w	ac20 <_vfiprintf_r+0x260>
    b7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b7f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    b7f8:	1a9b      	subs	r3, r3, r2
    b7fa:	4618      	mov	r0, r3
    b7fc:	9308      	str	r3, [sp, #32]
    b7fe:	f7fb fe9d 	bl	753c <strncpy>
    b802:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b804:	9b08      	ldr	r3, [sp, #32]
    b806:	784a      	ldrb	r2, [r1, #1]
    b808:	b10a      	cbz	r2, b80e <_vfiprintf_r+0xe4e>
    b80a:	3101      	adds	r1, #1
    b80c:	910b      	str	r1, [sp, #44]	; 0x2c
    b80e:	f04f 0c00 	mov.w	ip, #0
    b812:	e748      	b.n	b6a6 <_vfiprintf_r+0xce6>
    b814:	9b03      	ldr	r3, [sp, #12]
    b816:	9307      	str	r3, [sp, #28]
    b818:	9b04      	ldr	r3, [sp, #16]
    b81a:	9303      	str	r3, [sp, #12]
    b81c:	461f      	mov	r7, r3
    b81e:	9308      	str	r3, [sp, #32]
    b820:	f7ff b9fe 	b.w	ac20 <_vfiprintf_r+0x260>
    b824:	2101      	movs	r1, #1
    b826:	4618      	mov	r0, r3
    b828:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b82c:	f7ff bb13 	b.w	ae56 <_vfiprintf_r+0x496>
    b830:	f850 3b04 	ldr.w	r3, [r0], #4
    b834:	9007      	str	r0, [sp, #28]
    b836:	4622      	mov	r2, r4
    b838:	b2db      	uxtb	r3, r3
    b83a:	e6b6      	b.n	b5aa <_vfiprintf_r+0xbea>
    b83c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    b840:	9207      	str	r2, [sp, #28]
    b842:	17da      	asrs	r2, r3, #31
    b844:	4611      	mov	r1, r2
    b846:	f7ff b9ca 	b.w	abde <_vfiprintf_r+0x21e>
    b84a:	f851 3b04 	ldr.w	r3, [r1], #4
    b84e:	9107      	str	r1, [sp, #28]
    b850:	4602      	mov	r2, r0
    b852:	b2db      	uxtb	r3, r3
    b854:	f7ff ba27 	b.w	aca6 <_vfiprintf_r+0x2e6>
    b858:	2301      	movs	r3, #1
    b85a:	931c      	str	r3, [sp, #112]	; 0x70
    b85c:	2101      	movs	r1, #1
    b85e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    b862:	931b      	str	r3, [sp, #108]	; 0x6c
    b864:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b868:	460b      	mov	r3, r1
    b86a:	f7ff bacd 	b.w	ae08 <_vfiprintf_r+0x448>
    b86e:	9b07      	ldr	r3, [sp, #28]
    b870:	9905      	ldr	r1, [sp, #20]
    b872:	f853 2b04 	ldr.w	r2, [r3], #4
    b876:	9307      	str	r3, [sp, #28]
    b878:	8011      	strh	r1, [r2, #0]
    b87a:	f7ff b8ec 	b.w	aa56 <_vfiprintf_r+0x96>
    b87e:	1c59      	adds	r1, r3, #1
    b880:	4658      	mov	r0, fp
    b882:	f7f9 fe5d 	bl	5540 <_malloc_r>
    b886:	4604      	mov	r4, r0
    b888:	2800      	cmp	r0, #0
    b88a:	d03c      	beq.n	b906 <_vfiprintf_r+0xf46>
    b88c:	9008      	str	r0, [sp, #32]
    b88e:	e795      	b.n	b7bc <_vfiprintf_r+0xdfc>
    b890:	6d88      	ldr	r0, [r1, #88]	; 0x58
    b892:	f7fc f935 	bl	7b00 <__retarget_lock_release_recursive>
    b896:	f7ff b9e9 	b.w	ac6c <_vfiprintf_r+0x2ac>
    b89a:	9b03      	ldr	r3, [sp, #12]
    b89c:	9307      	str	r3, [sp, #28]
    b89e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    b8a2:	9f08      	ldr	r7, [sp, #32]
    b8a4:	f7ff b9bc 	b.w	ac20 <_vfiprintf_r+0x260>
    b8a8:	9819      	ldr	r0, [sp, #100]	; 0x64
    b8aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b8ac:	3001      	adds	r0, #1
    b8ae:	e545      	b.n	b33c <_vfiprintf_r+0x97c>
    b8b0:	9b03      	ldr	r3, [sp, #12]
    b8b2:	9307      	str	r3, [sp, #28]
    b8b4:	4620      	mov	r0, r4
    b8b6:	f7fc fb03 	bl	7ec0 <strlen>
    b8ba:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    b8be:	462f      	mov	r7, r5
    b8c0:	9004      	str	r0, [sp, #16]
    b8c2:	9303      	str	r3, [sp, #12]
    b8c4:	9508      	str	r5, [sp, #32]
    b8c6:	f7ff b9ab 	b.w	ac20 <_vfiprintf_r+0x260>
    b8ca:	ee18 1a10 	vmov	r1, s16
    b8ce:	aa18      	add	r2, sp, #96	; 0x60
    b8d0:	4658      	mov	r0, fp
    b8d2:	f7ff f839 	bl	a948 <__sprint_r.part.0>
    b8d6:	2800      	cmp	r0, #0
    b8d8:	f43f aa36 	beq.w	ad48 <_vfiprintf_r+0x388>
    b8dc:	f7ff ba4d 	b.w	ad7a <_vfiprintf_r+0x3ba>
    b8e0:	9819      	ldr	r0, [sp, #100]	; 0x64
    b8e2:	3001      	adds	r0, #1
    b8e4:	e57a      	b.n	b3dc <_vfiprintf_r+0xa1c>
    b8e6:	468c      	mov	ip, r1
    b8e8:	e46e      	b.n	b1c8 <_vfiprintf_r+0x808>
    b8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    b8ec:	07d9      	lsls	r1, r3, #31
    b8ee:	d405      	bmi.n	b8fc <_vfiprintf_r+0xf3c>
    b8f0:	89ab      	ldrh	r3, [r5, #12]
    b8f2:	059a      	lsls	r2, r3, #22
    b8f4:	d402      	bmi.n	b8fc <_vfiprintf_r+0xf3c>
    b8f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b8f8:	f7fc f902 	bl	7b00 <__retarget_lock_release_recursive>
    b8fc:	f04f 33ff 	mov.w	r3, #4294967295
    b900:	9305      	str	r3, [sp, #20]
    b902:	f7ff ba49 	b.w	ad98 <_vfiprintf_r+0x3d8>
    b906:	ee18 2a10 	vmov	r2, s16
    b90a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    b90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b912:	8193      	strh	r3, [r2, #12]
    b914:	f7ff ba35 	b.w	ad82 <_vfiprintf_r+0x3c2>
    b918:	9c07      	ldr	r4, [sp, #28]
    b91a:	9704      	str	r7, [sp, #16]
    b91c:	e746      	b.n	b7ac <_vfiprintf_r+0xdec>
    b91e:	9b07      	ldr	r3, [sp, #28]
    b920:	f898 1001 	ldrb.w	r1, [r8, #1]
    b924:	f853 7b04 	ldr.w	r7, [r3], #4
    b928:	9307      	str	r3, [sp, #28]
    b92a:	4690      	mov	r8, r2
    b92c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    b930:	f7ff b8b9 	b.w	aaa6 <_vfiprintf_r+0xe6>
    b934:	ee18 2a10 	vmov	r2, s16
    b938:	8993      	ldrh	r3, [r2, #12]
    b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b93e:	8193      	strh	r3, [r2, #12]
    b940:	f7ff ba15 	b.w	ad6e <_vfiprintf_r+0x3ae>
    b944:	cccccccd 	.word	0xcccccccd
    b948:	20000adc 	.word	0x20000adc

0000b94c <__sbprintf>:
    b94c:	b570      	push	{r4, r5, r6, lr}
    b94e:	460c      	mov	r4, r1
    b950:	8989      	ldrh	r1, [r1, #12]
    b952:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    b956:	f021 0102 	bic.w	r1, r1, #2
    b95a:	f8ad 1014 	strh.w	r1, [sp, #20]
    b95e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    b960:	911b      	str	r1, [sp, #108]	; 0x6c
    b962:	89e1      	ldrh	r1, [r4, #14]
    b964:	f8ad 1016 	strh.w	r1, [sp, #22]
    b968:	69e1      	ldr	r1, [r4, #28]
    b96a:	9109      	str	r1, [sp, #36]	; 0x24
    b96c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b96e:	910b      	str	r1, [sp, #44]	; 0x2c
    b970:	a91c      	add	r1, sp, #112	; 0x70
    b972:	9102      	str	r1, [sp, #8]
    b974:	9106      	str	r1, [sp, #24]
    b976:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b97a:	4606      	mov	r6, r0
    b97c:	9104      	str	r1, [sp, #16]
    b97e:	9107      	str	r1, [sp, #28]
    b980:	a818      	add	r0, sp, #96	; 0x60
    b982:	2100      	movs	r1, #0
    b984:	e9cd 3200 	strd	r3, r2, [sp]
    b988:	9108      	str	r1, [sp, #32]
    b98a:	f7fc f8b3 	bl	7af4 <__retarget_lock_init_recursive>
    b98e:	e9dd 3200 	ldrd	r3, r2, [sp]
    b992:	a902      	add	r1, sp, #8
    b994:	4630      	mov	r0, r6
    b996:	f7ff f813 	bl	a9c0 <_vfiprintf_r>
    b99a:	1e05      	subs	r5, r0, #0
    b99c:	db07      	blt.n	b9ae <__sbprintf+0x62>
    b99e:	a902      	add	r1, sp, #8
    b9a0:	4630      	mov	r0, r6
    b9a2:	f7fd ff61 	bl	9868 <_fflush_r>
    b9a6:	2800      	cmp	r0, #0
    b9a8:	bf18      	it	ne
    b9aa:	f04f 35ff 	movne.w	r5, #4294967295
    b9ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b9b2:	065b      	lsls	r3, r3, #25
    b9b4:	d503      	bpl.n	b9be <__sbprintf+0x72>
    b9b6:	89a3      	ldrh	r3, [r4, #12]
    b9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9bc:	81a3      	strh	r3, [r4, #12]
    b9be:	9818      	ldr	r0, [sp, #96]	; 0x60
    b9c0:	f7fc f89a 	bl	7af8 <__retarget_lock_close_recursive>
    b9c4:	4628      	mov	r0, r5
    b9c6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    b9ca:	bd70      	pop	{r4, r5, r6, pc}

0000b9cc <__sfvwrite_r>:
    b9cc:	6893      	ldr	r3, [r2, #8]
    b9ce:	2b00      	cmp	r3, #0
    b9d0:	f000 8085 	beq.w	bade <__sfvwrite_r+0x112>
    b9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    b9dc:	460c      	mov	r4, r1
    b9de:	0719      	lsls	r1, r3, #28
    b9e0:	4680      	mov	r8, r0
    b9e2:	b083      	sub	sp, #12
    b9e4:	4617      	mov	r7, r2
    b9e6:	b298      	uxth	r0, r3
    b9e8:	d525      	bpl.n	ba36 <__sfvwrite_r+0x6a>
    b9ea:	6923      	ldr	r3, [r4, #16]
    b9ec:	b31b      	cbz	r3, ba36 <__sfvwrite_r+0x6a>
    b9ee:	f010 0302 	ands.w	r3, r0, #2
    b9f2:	683d      	ldr	r5, [r7, #0]
    b9f4:	d02d      	beq.n	ba52 <__sfvwrite_r+0x86>
    b9f6:	f04f 0a00 	mov.w	sl, #0
    b9fa:	f8df b2c0 	ldr.w	fp, [pc, #704]	; bcbc <__sfvwrite_r+0x2f0>
    b9fe:	4656      	mov	r6, sl
    ba00:	46b9      	mov	r9, r7
    ba02:	455e      	cmp	r6, fp
    ba04:	4633      	mov	r3, r6
    ba06:	4652      	mov	r2, sl
    ba08:	bf28      	it	cs
    ba0a:	465b      	movcs	r3, fp
    ba0c:	4640      	mov	r0, r8
    ba0e:	2e00      	cmp	r6, #0
    ba10:	d052      	beq.n	bab8 <__sfvwrite_r+0xec>
    ba12:	69e1      	ldr	r1, [r4, #28]
    ba14:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ba16:	47b8      	blx	r7
    ba18:	2800      	cmp	r0, #0
    ba1a:	dd56      	ble.n	baca <__sfvwrite_r+0xfe>
    ba1c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    ba20:	1a1b      	subs	r3, r3, r0
    ba22:	4482      	add	sl, r0
    ba24:	1a36      	subs	r6, r6, r0
    ba26:	f8c9 3008 	str.w	r3, [r9, #8]
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d1e9      	bne.n	ba02 <__sfvwrite_r+0x36>
    ba2e:	2000      	movs	r0, #0
    ba30:	b003      	add	sp, #12
    ba32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ba36:	4621      	mov	r1, r4
    ba38:	4640      	mov	r0, r8
    ba3a:	f000 f941 	bl	bcc0 <__swsetup_r>
    ba3e:	2800      	cmp	r0, #0
    ba40:	f040 8138 	bne.w	bcb4 <__sfvwrite_r+0x2e8>
    ba44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ba48:	683d      	ldr	r5, [r7, #0]
    ba4a:	b298      	uxth	r0, r3
    ba4c:	f010 0302 	ands.w	r3, r0, #2
    ba50:	d1d1      	bne.n	b9f6 <__sfvwrite_r+0x2a>
    ba52:	f010 0901 	ands.w	r9, r0, #1
    ba56:	d144      	bne.n	bae2 <__sfvwrite_r+0x116>
    ba58:	464e      	mov	r6, r9
    ba5a:	9700      	str	r7, [sp, #0]
    ba5c:	b346      	cbz	r6, bab0 <__sfvwrite_r+0xe4>
    ba5e:	0582      	lsls	r2, r0, #22
    ba60:	f8d4 b008 	ldr.w	fp, [r4, #8]
    ba64:	f140 8085 	bpl.w	bb72 <__sfvwrite_r+0x1a6>
    ba68:	45b3      	cmp	fp, r6
    ba6a:	465a      	mov	r2, fp
    ba6c:	f200 80b4 	bhi.w	bbd8 <__sfvwrite_r+0x20c>
    ba70:	f410 6f90 	tst.w	r0, #1152	; 0x480
    ba74:	f040 80c1 	bne.w	bbfa <__sfvwrite_r+0x22e>
    ba78:	6820      	ldr	r0, [r4, #0]
    ba7a:	9201      	str	r2, [sp, #4]
    ba7c:	4649      	mov	r1, r9
    ba7e:	f7fb fbe3 	bl	7248 <memmove>
    ba82:	68a3      	ldr	r3, [r4, #8]
    ba84:	9a01      	ldr	r2, [sp, #4]
    ba86:	eba3 010b 	sub.w	r1, r3, fp
    ba8a:	6823      	ldr	r3, [r4, #0]
    ba8c:	60a1      	str	r1, [r4, #8]
    ba8e:	4413      	add	r3, r2
    ba90:	46b2      	mov	sl, r6
    ba92:	6023      	str	r3, [r4, #0]
    ba94:	2600      	movs	r6, #0
    ba96:	9a00      	ldr	r2, [sp, #0]
    ba98:	6893      	ldr	r3, [r2, #8]
    ba9a:	eba3 030a 	sub.w	r3, r3, sl
    ba9e:	44d1      	add	r9, sl
    baa0:	6093      	str	r3, [r2, #8]
    baa2:	2b00      	cmp	r3, #0
    baa4:	d0c3      	beq.n	ba2e <__sfvwrite_r+0x62>
    baa6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    baaa:	b280      	uxth	r0, r0
    baac:	2e00      	cmp	r6, #0
    baae:	d1d6      	bne.n	ba5e <__sfvwrite_r+0x92>
    bab0:	e9d5 9600 	ldrd	r9, r6, [r5]
    bab4:	3508      	adds	r5, #8
    bab6:	e7d1      	b.n	ba5c <__sfvwrite_r+0x90>
    bab8:	e9d5 a600 	ldrd	sl, r6, [r5]
    babc:	3508      	adds	r5, #8
    babe:	e7a0      	b.n	ba02 <__sfvwrite_r+0x36>
    bac0:	4621      	mov	r1, r4
    bac2:	4640      	mov	r0, r8
    bac4:	f7fd fed0 	bl	9868 <_fflush_r>
    bac8:	b388      	cbz	r0, bb2e <__sfvwrite_r+0x162>
    baca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bad2:	f04f 30ff 	mov.w	r0, #4294967295
    bad6:	81a3      	strh	r3, [r4, #12]
    bad8:	b003      	add	sp, #12
    bada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bade:	2000      	movs	r0, #0
    bae0:	4770      	bx	lr
    bae2:	461e      	mov	r6, r3
    bae4:	46ba      	mov	sl, r7
    bae6:	4699      	mov	r9, r3
    bae8:	4618      	mov	r0, r3
    baea:	9500      	str	r5, [sp, #0]
    baec:	461f      	mov	r7, r3
    baee:	b366      	cbz	r6, bb4a <__sfvwrite_r+0x17e>
    baf0:	2800      	cmp	r0, #0
    baf2:	d032      	beq.n	bb5a <__sfvwrite_r+0x18e>
    baf4:	464a      	mov	r2, r9
    baf6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    bafa:	6820      	ldr	r0, [r4, #0]
    bafc:	68a5      	ldr	r5, [r4, #8]
    bafe:	42b2      	cmp	r2, r6
    bb00:	bf28      	it	cs
    bb02:	4632      	movcs	r2, r6
    bb04:	4288      	cmp	r0, r1
    bb06:	d904      	bls.n	bb12 <__sfvwrite_r+0x146>
    bb08:	eb05 0b03 	add.w	fp, r5, r3
    bb0c:	455a      	cmp	r2, fp
    bb0e:	f300 80a7 	bgt.w	bc60 <__sfvwrite_r+0x294>
    bb12:	4293      	cmp	r3, r2
    bb14:	dc64      	bgt.n	bbe0 <__sfvwrite_r+0x214>
    bb16:	69e1      	ldr	r1, [r4, #28]
    bb18:	6a65      	ldr	r5, [r4, #36]	; 0x24
    bb1a:	463a      	mov	r2, r7
    bb1c:	4640      	mov	r0, r8
    bb1e:	47a8      	blx	r5
    bb20:	f1b0 0b00 	subs.w	fp, r0, #0
    bb24:	ddd1      	ble.n	baca <__sfvwrite_r+0xfe>
    bb26:	ebb9 090b 	subs.w	r9, r9, fp
    bb2a:	d0c9      	beq.n	bac0 <__sfvwrite_r+0xf4>
    bb2c:	2001      	movs	r0, #1
    bb2e:	f8da 3008 	ldr.w	r3, [sl, #8]
    bb32:	eba3 030b 	sub.w	r3, r3, fp
    bb36:	445f      	add	r7, fp
    bb38:	eba6 060b 	sub.w	r6, r6, fp
    bb3c:	f8ca 3008 	str.w	r3, [sl, #8]
    bb40:	2b00      	cmp	r3, #0
    bb42:	f43f af74 	beq.w	ba2e <__sfvwrite_r+0x62>
    bb46:	2e00      	cmp	r6, #0
    bb48:	d1d2      	bne.n	baf0 <__sfvwrite_r+0x124>
    bb4a:	9a00      	ldr	r2, [sp, #0]
    bb4c:	6856      	ldr	r6, [r2, #4]
    bb4e:	4613      	mov	r3, r2
    bb50:	3208      	adds	r2, #8
    bb52:	9200      	str	r2, [sp, #0]
    bb54:	2e00      	cmp	r6, #0
    bb56:	d0f8      	beq.n	bb4a <__sfvwrite_r+0x17e>
    bb58:	681f      	ldr	r7, [r3, #0]
    bb5a:	4632      	mov	r2, r6
    bb5c:	210a      	movs	r1, #10
    bb5e:	4638      	mov	r0, r7
    bb60:	f7fd fef6 	bl	9950 <memchr>
    bb64:	2800      	cmp	r0, #0
    bb66:	f000 809c 	beq.w	bca2 <__sfvwrite_r+0x2d6>
    bb6a:	3001      	adds	r0, #1
    bb6c:	eba0 0907 	sub.w	r9, r0, r7
    bb70:	e7c0      	b.n	baf4 <__sfvwrite_r+0x128>
    bb72:	6820      	ldr	r0, [r4, #0]
    bb74:	6923      	ldr	r3, [r4, #16]
    bb76:	4298      	cmp	r0, r3
    bb78:	d816      	bhi.n	bba8 <__sfvwrite_r+0x1dc>
    bb7a:	6962      	ldr	r2, [r4, #20]
    bb7c:	42b2      	cmp	r2, r6
    bb7e:	d813      	bhi.n	bba8 <__sfvwrite_r+0x1dc>
    bb80:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bb84:	42b3      	cmp	r3, r6
    bb86:	bf28      	it	cs
    bb88:	4633      	movcs	r3, r6
    bb8a:	69e1      	ldr	r1, [r4, #28]
    bb8c:	fb93 f3f2 	sdiv	r3, r3, r2
    bb90:	6a67      	ldr	r7, [r4, #36]	; 0x24
    bb92:	fb02 f303 	mul.w	r3, r2, r3
    bb96:	4640      	mov	r0, r8
    bb98:	464a      	mov	r2, r9
    bb9a:	47b8      	blx	r7
    bb9c:	f1b0 0a00 	subs.w	sl, r0, #0
    bba0:	dd93      	ble.n	baca <__sfvwrite_r+0xfe>
    bba2:	eba6 060a 	sub.w	r6, r6, sl
    bba6:	e776      	b.n	ba96 <__sfvwrite_r+0xca>
    bba8:	45b3      	cmp	fp, r6
    bbaa:	46da      	mov	sl, fp
    bbac:	bf28      	it	cs
    bbae:	46b2      	movcs	sl, r6
    bbb0:	4652      	mov	r2, sl
    bbb2:	4649      	mov	r1, r9
    bbb4:	f7fb fb48 	bl	7248 <memmove>
    bbb8:	68a3      	ldr	r3, [r4, #8]
    bbba:	6822      	ldr	r2, [r4, #0]
    bbbc:	eba3 030a 	sub.w	r3, r3, sl
    bbc0:	4452      	add	r2, sl
    bbc2:	60a3      	str	r3, [r4, #8]
    bbc4:	6022      	str	r2, [r4, #0]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d1eb      	bne.n	bba2 <__sfvwrite_r+0x1d6>
    bbca:	4621      	mov	r1, r4
    bbcc:	4640      	mov	r0, r8
    bbce:	f7fd fe4b 	bl	9868 <_fflush_r>
    bbd2:	2800      	cmp	r0, #0
    bbd4:	d0e5      	beq.n	bba2 <__sfvwrite_r+0x1d6>
    bbd6:	e778      	b.n	baca <__sfvwrite_r+0xfe>
    bbd8:	6820      	ldr	r0, [r4, #0]
    bbda:	46b3      	mov	fp, r6
    bbdc:	4632      	mov	r2, r6
    bbde:	e74c      	b.n	ba7a <__sfvwrite_r+0xae>
    bbe0:	4639      	mov	r1, r7
    bbe2:	9201      	str	r2, [sp, #4]
    bbe4:	f7fb fb30 	bl	7248 <memmove>
    bbe8:	9a01      	ldr	r2, [sp, #4]
    bbea:	68a3      	ldr	r3, [r4, #8]
    bbec:	1a9b      	subs	r3, r3, r2
    bbee:	60a3      	str	r3, [r4, #8]
    bbf0:	6823      	ldr	r3, [r4, #0]
    bbf2:	4413      	add	r3, r2
    bbf4:	6023      	str	r3, [r4, #0]
    bbf6:	4693      	mov	fp, r2
    bbf8:	e795      	b.n	bb26 <__sfvwrite_r+0x15a>
    bbfa:	6823      	ldr	r3, [r4, #0]
    bbfc:	6921      	ldr	r1, [r4, #16]
    bbfe:	eba3 0b01 	sub.w	fp, r3, r1
    bc02:	6963      	ldr	r3, [r4, #20]
    bc04:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    bc08:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    bc0c:	f10b 0301 	add.w	r3, fp, #1
    bc10:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    bc14:	4433      	add	r3, r6
    bc16:	4553      	cmp	r3, sl
    bc18:	4652      	mov	r2, sl
    bc1a:	bf84      	itt	hi
    bc1c:	469a      	movhi	sl, r3
    bc1e:	4652      	movhi	r2, sl
    bc20:	0543      	lsls	r3, r0, #21
    bc22:	d52c      	bpl.n	bc7e <__sfvwrite_r+0x2b2>
    bc24:	4611      	mov	r1, r2
    bc26:	4640      	mov	r0, r8
    bc28:	f7f9 fc8a 	bl	5540 <_malloc_r>
    bc2c:	2800      	cmp	r0, #0
    bc2e:	d03b      	beq.n	bca8 <__sfvwrite_r+0x2dc>
    bc30:	465a      	mov	r2, fp
    bc32:	6921      	ldr	r1, [r4, #16]
    bc34:	9001      	str	r0, [sp, #4]
    bc36:	f7f7 fb4b 	bl	32d0 <memcpy>
    bc3a:	89a2      	ldrh	r2, [r4, #12]
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    bc42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    bc46:	81a2      	strh	r2, [r4, #12]
    bc48:	eb03 000b 	add.w	r0, r3, fp
    bc4c:	6123      	str	r3, [r4, #16]
    bc4e:	ebaa 030b 	sub.w	r3, sl, fp
    bc52:	f8c4 a014 	str.w	sl, [r4, #20]
    bc56:	60a3      	str	r3, [r4, #8]
    bc58:	6020      	str	r0, [r4, #0]
    bc5a:	46b3      	mov	fp, r6
    bc5c:	4632      	mov	r2, r6
    bc5e:	e70c      	b.n	ba7a <__sfvwrite_r+0xae>
    bc60:	4639      	mov	r1, r7
    bc62:	465a      	mov	r2, fp
    bc64:	f7fb faf0 	bl	7248 <memmove>
    bc68:	6823      	ldr	r3, [r4, #0]
    bc6a:	445b      	add	r3, fp
    bc6c:	6023      	str	r3, [r4, #0]
    bc6e:	4621      	mov	r1, r4
    bc70:	4640      	mov	r0, r8
    bc72:	f7fd fdf9 	bl	9868 <_fflush_r>
    bc76:	2800      	cmp	r0, #0
    bc78:	f43f af55 	beq.w	bb26 <__sfvwrite_r+0x15a>
    bc7c:	e725      	b.n	baca <__sfvwrite_r+0xfe>
    bc7e:	4640      	mov	r0, r8
    bc80:	f7f9 ff26 	bl	5ad0 <_realloc_r>
    bc84:	4603      	mov	r3, r0
    bc86:	2800      	cmp	r0, #0
    bc88:	d1de      	bne.n	bc48 <__sfvwrite_r+0x27c>
    bc8a:	6921      	ldr	r1, [r4, #16]
    bc8c:	4640      	mov	r0, r8
    bc8e:	f7fc fa29 	bl	80e4 <_free_r>
    bc92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bc96:	220c      	movs	r2, #12
    bc98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bc9c:	f8c8 2000 	str.w	r2, [r8]
    bca0:	e715      	b.n	bace <__sfvwrite_r+0x102>
    bca2:	1c72      	adds	r2, r6, #1
    bca4:	4691      	mov	r9, r2
    bca6:	e726      	b.n	baf6 <__sfvwrite_r+0x12a>
    bca8:	220c      	movs	r2, #12
    bcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bcae:	f8c8 2000 	str.w	r2, [r8]
    bcb2:	e70c      	b.n	bace <__sfvwrite_r+0x102>
    bcb4:	f04f 30ff 	mov.w	r0, #4294967295
    bcb8:	e6ba      	b.n	ba30 <__sfvwrite_r+0x64>
    bcba:	bf00      	nop
    bcbc:	7ffffc00 	.word	0x7ffffc00

0000bcc0 <__swsetup_r>:
    bcc0:	b538      	push	{r3, r4, r5, lr}
    bcc2:	4b31      	ldr	r3, [pc, #196]	; (bd88 <__swsetup_r+0xc8>)
    bcc4:	681b      	ldr	r3, [r3, #0]
    bcc6:	4605      	mov	r5, r0
    bcc8:	460c      	mov	r4, r1
    bcca:	b113      	cbz	r3, bcd2 <__swsetup_r+0x12>
    bccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bcce:	2a00      	cmp	r2, #0
    bcd0:	d04e      	beq.n	bd70 <__swsetup_r+0xb0>
    bcd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bcd6:	0718      	lsls	r0, r3, #28
    bcd8:	b29a      	uxth	r2, r3
    bcda:	d51c      	bpl.n	bd16 <__swsetup_r+0x56>
    bcdc:	6921      	ldr	r1, [r4, #16]
    bcde:	b329      	cbz	r1, bd2c <__swsetup_r+0x6c>
    bce0:	f012 0001 	ands.w	r0, r2, #1
    bce4:	d007      	beq.n	bcf6 <__swsetup_r+0x36>
    bce6:	2000      	movs	r0, #0
    bce8:	60a0      	str	r0, [r4, #8]
    bcea:	6960      	ldr	r0, [r4, #20]
    bcec:	4240      	negs	r0, r0
    bcee:	61a0      	str	r0, [r4, #24]
    bcf0:	b139      	cbz	r1, bd02 <__swsetup_r+0x42>
    bcf2:	2000      	movs	r0, #0
    bcf4:	bd38      	pop	{r3, r4, r5, pc}
    bcf6:	0795      	lsls	r5, r2, #30
    bcf8:	bf58      	it	pl
    bcfa:	6960      	ldrpl	r0, [r4, #20]
    bcfc:	60a0      	str	r0, [r4, #8]
    bcfe:	2900      	cmp	r1, #0
    bd00:	d1f7      	bne.n	bcf2 <__swsetup_r+0x32>
    bd02:	0612      	lsls	r2, r2, #24
    bd04:	bf58      	it	pl
    bd06:	4608      	movpl	r0, r1
    bd08:	d5f4      	bpl.n	bcf4 <__swsetup_r+0x34>
    bd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd0e:	81a3      	strh	r3, [r4, #12]
    bd10:	f04f 30ff 	mov.w	r0, #4294967295
    bd14:	bd38      	pop	{r3, r4, r5, pc}
    bd16:	06d1      	lsls	r1, r2, #27
    bd18:	d52e      	bpl.n	bd78 <__swsetup_r+0xb8>
    bd1a:	0752      	lsls	r2, r2, #29
    bd1c:	d414      	bmi.n	bd48 <__swsetup_r+0x88>
    bd1e:	6921      	ldr	r1, [r4, #16]
    bd20:	f043 0308 	orr.w	r3, r3, #8
    bd24:	81a3      	strh	r3, [r4, #12]
    bd26:	b29a      	uxth	r2, r3
    bd28:	2900      	cmp	r1, #0
    bd2a:	d1d9      	bne.n	bce0 <__swsetup_r+0x20>
    bd2c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    bd30:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    bd34:	d0d4      	beq.n	bce0 <__swsetup_r+0x20>
    bd36:	4621      	mov	r1, r4
    bd38:	4628      	mov	r0, r5
    bd3a:	f000 f947 	bl	bfcc <__smakebuf_r>
    bd3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd42:	6921      	ldr	r1, [r4, #16]
    bd44:	b29a      	uxth	r2, r3
    bd46:	e7cb      	b.n	bce0 <__swsetup_r+0x20>
    bd48:	6b21      	ldr	r1, [r4, #48]	; 0x30
    bd4a:	b151      	cbz	r1, bd62 <__swsetup_r+0xa2>
    bd4c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    bd50:	4291      	cmp	r1, r2
    bd52:	d004      	beq.n	bd5e <__swsetup_r+0x9e>
    bd54:	4628      	mov	r0, r5
    bd56:	f7fc f9c5 	bl	80e4 <_free_r>
    bd5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bd5e:	2200      	movs	r2, #0
    bd60:	6322      	str	r2, [r4, #48]	; 0x30
    bd62:	6921      	ldr	r1, [r4, #16]
    bd64:	2200      	movs	r2, #0
    bd66:	e9c4 1200 	strd	r1, r2, [r4]
    bd6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    bd6e:	e7d7      	b.n	bd20 <__swsetup_r+0x60>
    bd70:	4618      	mov	r0, r3
    bd72:	f7fb f9d5 	bl	7120 <__sinit>
    bd76:	e7ac      	b.n	bcd2 <__swsetup_r+0x12>
    bd78:	2209      	movs	r2, #9
    bd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bd7e:	602a      	str	r2, [r5, #0]
    bd80:	f04f 30ff 	mov.w	r0, #4294967295
    bd84:	81a3      	strh	r3, [r4, #12]
    bd86:	bd38      	pop	{r3, r4, r5, pc}
    bd88:	20001b54 	.word	0x20001b54

0000bd8c <__fputwc>:
    bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd90:	b082      	sub	sp, #8
    bd92:	4682      	mov	sl, r0
    bd94:	4688      	mov	r8, r1
    bd96:	4614      	mov	r4, r2
    bd98:	f7fb fe16 	bl	79c8 <__locale_mb_cur_max>
    bd9c:	2801      	cmp	r0, #1
    bd9e:	d103      	bne.n	bda8 <__fputwc+0x1c>
    bda0:	f108 33ff 	add.w	r3, r8, #4294967295
    bda4:	2bfe      	cmp	r3, #254	; 0xfe
    bda6:	d936      	bls.n	be16 <__fputwc+0x8a>
    bda8:	f10d 0904 	add.w	r9, sp, #4
    bdac:	4642      	mov	r2, r8
    bdae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    bdb2:	4649      	mov	r1, r9
    bdb4:	4650      	mov	r0, sl
    bdb6:	f7fe fd81 	bl	a8bc <_wcrtomb_r>
    bdba:	1c42      	adds	r2, r0, #1
    bdbc:	4606      	mov	r6, r0
    bdbe:	d032      	beq.n	be26 <__fputwc+0x9a>
    bdc0:	b320      	cbz	r0, be0c <__fputwc+0x80>
    bdc2:	f89d c004 	ldrb.w	ip, [sp, #4]
    bdc6:	2500      	movs	r5, #0
    bdc8:	e009      	b.n	bdde <__fputwc+0x52>
    bdca:	6823      	ldr	r3, [r4, #0]
    bdcc:	1c5a      	adds	r2, r3, #1
    bdce:	6022      	str	r2, [r4, #0]
    bdd0:	f883 c000 	strb.w	ip, [r3]
    bdd4:	3501      	adds	r5, #1
    bdd6:	42b5      	cmp	r5, r6
    bdd8:	d218      	bcs.n	be0c <__fputwc+0x80>
    bdda:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    bdde:	68a3      	ldr	r3, [r4, #8]
    bde0:	3b01      	subs	r3, #1
    bde2:	2b00      	cmp	r3, #0
    bde4:	60a3      	str	r3, [r4, #8]
    bde6:	daf0      	bge.n	bdca <__fputwc+0x3e>
    bde8:	69a7      	ldr	r7, [r4, #24]
    bdea:	42bb      	cmp	r3, r7
    bdec:	4661      	mov	r1, ip
    bdee:	4622      	mov	r2, r4
    bdf0:	4650      	mov	r0, sl
    bdf2:	db02      	blt.n	bdfa <__fputwc+0x6e>
    bdf4:	f1bc 0f0a 	cmp.w	ip, #10
    bdf8:	d1e7      	bne.n	bdca <__fputwc+0x3e>
    bdfa:	f000 f953 	bl	c0a4 <__swbuf_r>
    bdfe:	1c43      	adds	r3, r0, #1
    be00:	d1e8      	bne.n	bdd4 <__fputwc+0x48>
    be02:	4606      	mov	r6, r0
    be04:	4630      	mov	r0, r6
    be06:	b002      	add	sp, #8
    be08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be0c:	4646      	mov	r6, r8
    be0e:	4630      	mov	r0, r6
    be10:	b002      	add	sp, #8
    be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be16:	fa5f fc88 	uxtb.w	ip, r8
    be1a:	f88d c004 	strb.w	ip, [sp, #4]
    be1e:	4606      	mov	r6, r0
    be20:	f10d 0904 	add.w	r9, sp, #4
    be24:	e7cf      	b.n	bdc6 <__fputwc+0x3a>
    be26:	89a3      	ldrh	r3, [r4, #12]
    be28:	4630      	mov	r0, r6
    be2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be2e:	81a3      	strh	r3, [r4, #12]
    be30:	b002      	add	sp, #8
    be32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be36:	bf00      	nop

0000be38 <_fputwc_r>:
    be38:	b530      	push	{r4, r5, lr}
    be3a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    be3c:	f013 0f01 	tst.w	r3, #1
    be40:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    be44:	4614      	mov	r4, r2
    be46:	b083      	sub	sp, #12
    be48:	4605      	mov	r5, r0
    be4a:	b29a      	uxth	r2, r3
    be4c:	d101      	bne.n	be52 <_fputwc_r+0x1a>
    be4e:	0598      	lsls	r0, r3, #22
    be50:	d51c      	bpl.n	be8c <_fputwc_r+0x54>
    be52:	0490      	lsls	r0, r2, #18
    be54:	d406      	bmi.n	be64 <_fputwc_r+0x2c>
    be56:	6e62      	ldr	r2, [r4, #100]	; 0x64
    be58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    be5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    be60:	81a3      	strh	r3, [r4, #12]
    be62:	6662      	str	r2, [r4, #100]	; 0x64
    be64:	4622      	mov	r2, r4
    be66:	4628      	mov	r0, r5
    be68:	f7ff ff90 	bl	bd8c <__fputwc>
    be6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    be6e:	07da      	lsls	r2, r3, #31
    be70:	4605      	mov	r5, r0
    be72:	d402      	bmi.n	be7a <_fputwc_r+0x42>
    be74:	89a3      	ldrh	r3, [r4, #12]
    be76:	059b      	lsls	r3, r3, #22
    be78:	d502      	bpl.n	be80 <_fputwc_r+0x48>
    be7a:	4628      	mov	r0, r5
    be7c:	b003      	add	sp, #12
    be7e:	bd30      	pop	{r4, r5, pc}
    be80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be82:	f7fb fe3d 	bl	7b00 <__retarget_lock_release_recursive>
    be86:	4628      	mov	r0, r5
    be88:	b003      	add	sp, #12
    be8a:	bd30      	pop	{r4, r5, pc}
    be8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    be8e:	9101      	str	r1, [sp, #4]
    be90:	f7fb fe34 	bl	7afc <__retarget_lock_acquire_recursive>
    be94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    be98:	9901      	ldr	r1, [sp, #4]
    be9a:	b29a      	uxth	r2, r3
    be9c:	e7d9      	b.n	be52 <_fputwc_r+0x1a>
    be9e:	bf00      	nop

0000bea0 <_wcsnrtombs_l>:
    bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bea4:	b08b      	sub	sp, #44	; 0x2c
    bea6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    beaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
    beac:	9103      	str	r1, [sp, #12]
    beae:	4681      	mov	r9, r0
    beb0:	9205      	str	r2, [sp, #20]
    beb2:	461e      	mov	r6, r3
    beb4:	f1b8 0f00 	cmp.w	r8, #0
    beb8:	d05c      	beq.n	bf74 <_wcsnrtombs_l+0xd4>
    beba:	9b03      	ldr	r3, [sp, #12]
    bebc:	2b00      	cmp	r3, #0
    bebe:	d05e      	beq.n	bf7e <_wcsnrtombs_l+0xde>
    bec0:	9b05      	ldr	r3, [sp, #20]
    bec2:	681d      	ldr	r5, [r3, #0]
    bec4:	2f00      	cmp	r7, #0
    bec6:	d06a      	beq.n	bf9e <_wcsnrtombs_l+0xfe>
    bec8:	1e74      	subs	r4, r6, #1
    beca:	b34e      	cbz	r6, bf20 <_wcsnrtombs_l+0x80>
    becc:	9b03      	ldr	r3, [sp, #12]
    bece:	9304      	str	r3, [sp, #16]
    bed0:	3d04      	subs	r5, #4
    bed2:	2600      	movs	r6, #0
    bed4:	9501      	str	r5, [sp, #4]
    bed6:	e00b      	b.n	bef0 <_wcsnrtombs_l+0x50>
    bed8:	9b03      	ldr	r3, [sp, #12]
    beda:	bb2b      	cbnz	r3, bf28 <_wcsnrtombs_l+0x88>
    bedc:	9b01      	ldr	r3, [sp, #4]
    bede:	681a      	ldr	r2, [r3, #0]
    bee0:	2a00      	cmp	r2, #0
    bee2:	d03a      	beq.n	bf5a <_wcsnrtombs_l+0xba>
    bee4:	45bc      	cmp	ip, r7
    bee6:	d25c      	bcs.n	bfa2 <_wcsnrtombs_l+0x102>
    bee8:	3c01      	subs	r4, #1
    beea:	1c63      	adds	r3, r4, #1
    beec:	4666      	mov	r6, ip
    beee:	d017      	beq.n	bf20 <_wcsnrtombs_l+0x80>
    bef0:	f8d8 3000 	ldr.w	r3, [r8]
    bef4:	9302      	str	r3, [sp, #8]
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    befc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bf00:	9301      	str	r3, [sp, #4]
    bf02:	a907      	add	r1, sp, #28
    bf04:	4643      	mov	r3, r8
    bf06:	4648      	mov	r0, r9
    bf08:	f8d8 b004 	ldr.w	fp, [r8, #4]
    bf0c:	47a8      	blx	r5
    bf0e:	1c42      	adds	r2, r0, #1
    bf10:	d03a      	beq.n	bf88 <_wcsnrtombs_l+0xe8>
    bf12:	eb00 0c06 	add.w	ip, r0, r6
    bf16:	45bc      	cmp	ip, r7
    bf18:	d9de      	bls.n	bed8 <_wcsnrtombs_l+0x38>
    bf1a:	9b02      	ldr	r3, [sp, #8]
    bf1c:	e9c8 3b00 	strd	r3, fp, [r8]
    bf20:	4630      	mov	r0, r6
    bf22:	b00b      	add	sp, #44	; 0x2c
    bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf28:	2800      	cmp	r0, #0
    bf2a:	dd0e      	ble.n	bf4a <_wcsnrtombs_l+0xaa>
    bf2c:	9b04      	ldr	r3, [sp, #16]
    bf2e:	9d01      	ldr	r5, [sp, #4]
    bf30:	4418      	add	r0, r3
    bf32:	1e5a      	subs	r2, r3, #1
    bf34:	a907      	add	r1, sp, #28
    bf36:	f100 3eff 	add.w	lr, r0, #4294967295
    bf3a:	f811 3b01 	ldrb.w	r3, [r1], #1
    bf3e:	f802 3f01 	strb.w	r3, [r2, #1]!
    bf42:	4572      	cmp	r2, lr
    bf44:	d1f9      	bne.n	bf3a <_wcsnrtombs_l+0x9a>
    bf46:	9501      	str	r5, [sp, #4]
    bf48:	9004      	str	r0, [sp, #16]
    bf4a:	9b05      	ldr	r3, [sp, #20]
    bf4c:	681a      	ldr	r2, [r3, #0]
    bf4e:	3204      	adds	r2, #4
    bf50:	601a      	str	r2, [r3, #0]
    bf52:	9b01      	ldr	r3, [sp, #4]
    bf54:	681a      	ldr	r2, [r3, #0]
    bf56:	2a00      	cmp	r2, #0
    bf58:	d1c4      	bne.n	bee4 <_wcsnrtombs_l+0x44>
    bf5a:	9b03      	ldr	r3, [sp, #12]
    bf5c:	b10b      	cbz	r3, bf62 <_wcsnrtombs_l+0xc2>
    bf5e:	9b05      	ldr	r3, [sp, #20]
    bf60:	601a      	str	r2, [r3, #0]
    bf62:	f10c 36ff 	add.w	r6, ip, #4294967295
    bf66:	2200      	movs	r2, #0
    bf68:	4630      	mov	r0, r6
    bf6a:	f8c8 2000 	str.w	r2, [r8]
    bf6e:	b00b      	add	sp, #44	; 0x2c
    bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf74:	9b03      	ldr	r3, [sp, #12]
    bf76:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d1a0      	bne.n	bec0 <_wcsnrtombs_l+0x20>
    bf7e:	9b05      	ldr	r3, [sp, #20]
    bf80:	f04f 37ff 	mov.w	r7, #4294967295
    bf84:	681d      	ldr	r5, [r3, #0]
    bf86:	e79f      	b.n	bec8 <_wcsnrtombs_l+0x28>
    bf88:	4606      	mov	r6, r0
    bf8a:	218a      	movs	r1, #138	; 0x8a
    bf8c:	2200      	movs	r2, #0
    bf8e:	4630      	mov	r0, r6
    bf90:	f8c9 1000 	str.w	r1, [r9]
    bf94:	f8c8 2000 	str.w	r2, [r8]
    bf98:	b00b      	add	sp, #44	; 0x2c
    bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf9e:	463e      	mov	r6, r7
    bfa0:	e7be      	b.n	bf20 <_wcsnrtombs_l+0x80>
    bfa2:	4666      	mov	r6, ip
    bfa4:	e7bc      	b.n	bf20 <_wcsnrtombs_l+0x80>
    bfa6:	bf00      	nop

0000bfa8 <_wcsnrtombs_r>:
    bfa8:	b510      	push	{r4, lr}
    bfaa:	b084      	sub	sp, #16
    bfac:	4c05      	ldr	r4, [pc, #20]	; (bfc4 <_wcsnrtombs_r+0x1c>)
    bfae:	9806      	ldr	r0, [sp, #24]
    bfb0:	9000      	str	r0, [sp, #0]
    bfb2:	9807      	ldr	r0, [sp, #28]
    bfb4:	9001      	str	r0, [sp, #4]
    bfb6:	4804      	ldr	r0, [pc, #16]	; (bfc8 <_wcsnrtombs_r+0x20>)
    bfb8:	6800      	ldr	r0, [r0, #0]
    bfba:	9402      	str	r4, [sp, #8]
    bfbc:	f7ff ff70 	bl	bea0 <_wcsnrtombs_l>
    bfc0:	b004      	add	sp, #16
    bfc2:	bd10      	pop	{r4, pc}
    bfc4:	200015cc 	.word	0x200015cc
    bfc8:	20001b54 	.word	0x20001b54

0000bfcc <__smakebuf_r>:
    bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfd0:	898b      	ldrh	r3, [r1, #12]
    bfd2:	460c      	mov	r4, r1
    bfd4:	0799      	lsls	r1, r3, #30
    bfd6:	b096      	sub	sp, #88	; 0x58
    bfd8:	d508      	bpl.n	bfec <__smakebuf_r+0x20>
    bfda:	f104 0343 	add.w	r3, r4, #67	; 0x43
    bfde:	2201      	movs	r2, #1
    bfe0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    bfe4:	6023      	str	r3, [r4, #0]
    bfe6:	b016      	add	sp, #88	; 0x58
    bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    bff0:	2900      	cmp	r1, #0
    bff2:	4606      	mov	r6, r0
    bff4:	db25      	blt.n	c042 <__smakebuf_r+0x76>
    bff6:	466a      	mov	r2, sp
    bff8:	f000 f8ac 	bl	c154 <_fstat_r>
    bffc:	2800      	cmp	r0, #0
    bffe:	db1f      	blt.n	c040 <__smakebuf_r+0x74>
    c000:	9d01      	ldr	r5, [sp, #4]
    c002:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c006:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    c00a:	fab5 f585 	clz	r5, r5
    c00e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c012:	096d      	lsrs	r5, r5, #5
    c014:	f44f 6700 	mov.w	r7, #2048	; 0x800
    c018:	4641      	mov	r1, r8
    c01a:	4630      	mov	r0, r6
    c01c:	f7f9 fa90 	bl	5540 <_malloc_r>
    c020:	b1e0      	cbz	r0, c05c <__smakebuf_r+0x90>
    c022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c026:	f8c4 8014 	str.w	r8, [r4, #20]
    c02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c02e:	6020      	str	r0, [r4, #0]
    c030:	6120      	str	r0, [r4, #16]
    c032:	81a3      	strh	r3, [r4, #12]
    c034:	bb35      	cbnz	r5, c084 <__smakebuf_r+0xb8>
    c036:	433b      	orrs	r3, r7
    c038:	81a3      	strh	r3, [r4, #12]
    c03a:	b016      	add	sp, #88	; 0x58
    c03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c040:	89a3      	ldrh	r3, [r4, #12]
    c042:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    c046:	d019      	beq.n	c07c <__smakebuf_r+0xb0>
    c048:	f04f 0840 	mov.w	r8, #64	; 0x40
    c04c:	2500      	movs	r5, #0
    c04e:	4641      	mov	r1, r8
    c050:	4630      	mov	r0, r6
    c052:	462f      	mov	r7, r5
    c054:	f7f9 fa74 	bl	5540 <_malloc_r>
    c058:	2800      	cmp	r0, #0
    c05a:	d1e2      	bne.n	c022 <__smakebuf_r+0x56>
    c05c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c060:	059a      	lsls	r2, r3, #22
    c062:	d4c0      	bmi.n	bfe6 <__smakebuf_r+0x1a>
    c064:	f023 0303 	bic.w	r3, r3, #3
    c068:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c06c:	f043 0302 	orr.w	r3, r3, #2
    c070:	2101      	movs	r1, #1
    c072:	e9c4 2104 	strd	r2, r1, [r4, #16]
    c076:	81a3      	strh	r3, [r4, #12]
    c078:	6022      	str	r2, [r4, #0]
    c07a:	e7b4      	b.n	bfe6 <__smakebuf_r+0x1a>
    c07c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c080:	462f      	mov	r7, r5
    c082:	e7c9      	b.n	c018 <__smakebuf_r+0x4c>
    c084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c088:	4630      	mov	r0, r6
    c08a:	f000 f879 	bl	c180 <_isatty_r>
    c08e:	b910      	cbnz	r0, c096 <__smakebuf_r+0xca>
    c090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c094:	e7cf      	b.n	c036 <__smakebuf_r+0x6a>
    c096:	89a3      	ldrh	r3, [r4, #12]
    c098:	f023 0303 	bic.w	r3, r3, #3
    c09c:	f043 0301 	orr.w	r3, r3, #1
    c0a0:	b21b      	sxth	r3, r3
    c0a2:	e7c8      	b.n	c036 <__smakebuf_r+0x6a>

0000c0a4 <__swbuf_r>:
    c0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0a6:	460d      	mov	r5, r1
    c0a8:	4614      	mov	r4, r2
    c0aa:	4606      	mov	r6, r0
    c0ac:	b110      	cbz	r0, c0b4 <__swbuf_r+0x10>
    c0ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d04c      	beq.n	c14e <__swbuf_r+0xaa>
    c0b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c0b8:	69a3      	ldr	r3, [r4, #24]
    c0ba:	60a3      	str	r3, [r4, #8]
    c0bc:	0717      	lsls	r7, r2, #28
    c0be:	b290      	uxth	r0, r2
    c0c0:	d51b      	bpl.n	c0fa <__swbuf_r+0x56>
    c0c2:	6923      	ldr	r3, [r4, #16]
    c0c4:	b1cb      	cbz	r3, c0fa <__swbuf_r+0x56>
    c0c6:	b2ed      	uxtb	r5, r5
    c0c8:	0481      	lsls	r1, r0, #18
    c0ca:	462f      	mov	r7, r5
    c0cc:	d522      	bpl.n	c114 <__swbuf_r+0x70>
    c0ce:	6822      	ldr	r2, [r4, #0]
    c0d0:	6961      	ldr	r1, [r4, #20]
    c0d2:	1ad3      	subs	r3, r2, r3
    c0d4:	4299      	cmp	r1, r3
    c0d6:	dd29      	ble.n	c12c <__swbuf_r+0x88>
    c0d8:	3301      	adds	r3, #1
    c0da:	68a1      	ldr	r1, [r4, #8]
    c0dc:	3901      	subs	r1, #1
    c0de:	60a1      	str	r1, [r4, #8]
    c0e0:	1c51      	adds	r1, r2, #1
    c0e2:	6021      	str	r1, [r4, #0]
    c0e4:	7015      	strb	r5, [r2, #0]
    c0e6:	6962      	ldr	r2, [r4, #20]
    c0e8:	429a      	cmp	r2, r3
    c0ea:	d027      	beq.n	c13c <__swbuf_r+0x98>
    c0ec:	89a3      	ldrh	r3, [r4, #12]
    c0ee:	07db      	lsls	r3, r3, #31
    c0f0:	d501      	bpl.n	c0f6 <__swbuf_r+0x52>
    c0f2:	2d0a      	cmp	r5, #10
    c0f4:	d022      	beq.n	c13c <__swbuf_r+0x98>
    c0f6:	4638      	mov	r0, r7
    c0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0fa:	4621      	mov	r1, r4
    c0fc:	4630      	mov	r0, r6
    c0fe:	f7ff fddf 	bl	bcc0 <__swsetup_r>
    c102:	bb08      	cbnz	r0, c148 <__swbuf_r+0xa4>
    c104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c108:	6923      	ldr	r3, [r4, #16]
    c10a:	b290      	uxth	r0, r2
    c10c:	b2ed      	uxtb	r5, r5
    c10e:	0481      	lsls	r1, r0, #18
    c110:	462f      	mov	r7, r5
    c112:	d4dc      	bmi.n	c0ce <__swbuf_r+0x2a>
    c114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c118:	81a2      	strh	r2, [r4, #12]
    c11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c11c:	6961      	ldr	r1, [r4, #20]
    c11e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    c122:	6662      	str	r2, [r4, #100]	; 0x64
    c124:	6822      	ldr	r2, [r4, #0]
    c126:	1ad3      	subs	r3, r2, r3
    c128:	4299      	cmp	r1, r3
    c12a:	dcd5      	bgt.n	c0d8 <__swbuf_r+0x34>
    c12c:	4621      	mov	r1, r4
    c12e:	4630      	mov	r0, r6
    c130:	f7fd fb9a 	bl	9868 <_fflush_r>
    c134:	b940      	cbnz	r0, c148 <__swbuf_r+0xa4>
    c136:	6822      	ldr	r2, [r4, #0]
    c138:	2301      	movs	r3, #1
    c13a:	e7ce      	b.n	c0da <__swbuf_r+0x36>
    c13c:	4621      	mov	r1, r4
    c13e:	4630      	mov	r0, r6
    c140:	f7fd fb92 	bl	9868 <_fflush_r>
    c144:	2800      	cmp	r0, #0
    c146:	d0d6      	beq.n	c0f6 <__swbuf_r+0x52>
    c148:	f04f 37ff 	mov.w	r7, #4294967295
    c14c:	e7d3      	b.n	c0f6 <__swbuf_r+0x52>
    c14e:	f7fa ffe7 	bl	7120 <__sinit>
    c152:	e7af      	b.n	c0b4 <__swbuf_r+0x10>

0000c154 <_fstat_r>:
    c154:	b570      	push	{r4, r5, r6, lr}
    c156:	460c      	mov	r4, r1
    c158:	4d08      	ldr	r5, [pc, #32]	; (c17c <_fstat_r+0x28>)
    c15a:	4603      	mov	r3, r0
    c15c:	2600      	movs	r6, #0
    c15e:	4620      	mov	r0, r4
    c160:	4611      	mov	r1, r2
    c162:	461c      	mov	r4, r3
    c164:	602e      	str	r6, [r5, #0]
    c166:	f7f7 fc0f 	bl	3988 <_fstat>
    c16a:	1c43      	adds	r3, r0, #1
    c16c:	d000      	beq.n	c170 <_fstat_r+0x1c>
    c16e:	bd70      	pop	{r4, r5, r6, pc}
    c170:	682b      	ldr	r3, [r5, #0]
    c172:	2b00      	cmp	r3, #0
    c174:	d0fb      	beq.n	c16e <_fstat_r+0x1a>
    c176:	6023      	str	r3, [r4, #0]
    c178:	bd70      	pop	{r4, r5, r6, pc}
    c17a:	bf00      	nop
    c17c:	2000285c 	.word	0x2000285c

0000c180 <_isatty_r>:
    c180:	b538      	push	{r3, r4, r5, lr}
    c182:	4d07      	ldr	r5, [pc, #28]	; (c1a0 <_isatty_r+0x20>)
    c184:	2200      	movs	r2, #0
    c186:	4604      	mov	r4, r0
    c188:	4608      	mov	r0, r1
    c18a:	602a      	str	r2, [r5, #0]
    c18c:	f7f7 fc02 	bl	3994 <_isatty>
    c190:	1c43      	adds	r3, r0, #1
    c192:	d000      	beq.n	c196 <_isatty_r+0x16>
    c194:	bd38      	pop	{r3, r4, r5, pc}
    c196:	682b      	ldr	r3, [r5, #0]
    c198:	2b00      	cmp	r3, #0
    c19a:	d0fb      	beq.n	c194 <_isatty_r+0x14>
    c19c:	6023      	str	r3, [r4, #0]
    c19e:	bd38      	pop	{r3, r4, r5, pc}
    c1a0:	2000285c 	.word	0x2000285c

0000c1a4 <__aeabi_drsub>:
    c1a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c1a8:	e002      	b.n	c1b0 <__adddf3>
    c1aa:	bf00      	nop

0000c1ac <__aeabi_dsub>:
    c1ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c1b0 <__adddf3>:
    c1b0:	b530      	push	{r4, r5, lr}
    c1b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c1b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c1ba:	ea94 0f05 	teq	r4, r5
    c1be:	bf08      	it	eq
    c1c0:	ea90 0f02 	teqeq	r0, r2
    c1c4:	bf1f      	itttt	ne
    c1c6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c1ca:	ea55 0c02 	orrsne.w	ip, r5, r2
    c1ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c1d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c1d6:	f000 80e2 	beq.w	c39e <__adddf3+0x1ee>
    c1da:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c1de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c1e2:	bfb8      	it	lt
    c1e4:	426d      	neglt	r5, r5
    c1e6:	dd0c      	ble.n	c202 <__adddf3+0x52>
    c1e8:	442c      	add	r4, r5
    c1ea:	ea80 0202 	eor.w	r2, r0, r2
    c1ee:	ea81 0303 	eor.w	r3, r1, r3
    c1f2:	ea82 0000 	eor.w	r0, r2, r0
    c1f6:	ea83 0101 	eor.w	r1, r3, r1
    c1fa:	ea80 0202 	eor.w	r2, r0, r2
    c1fe:	ea81 0303 	eor.w	r3, r1, r3
    c202:	2d36      	cmp	r5, #54	; 0x36
    c204:	bf88      	it	hi
    c206:	bd30      	pophi	{r4, r5, pc}
    c208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c20c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c218:	d002      	beq.n	c220 <__adddf3+0x70>
    c21a:	4240      	negs	r0, r0
    c21c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c224:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c22c:	d002      	beq.n	c234 <__adddf3+0x84>
    c22e:	4252      	negs	r2, r2
    c230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c234:	ea94 0f05 	teq	r4, r5
    c238:	f000 80a7 	beq.w	c38a <__adddf3+0x1da>
    c23c:	f1a4 0401 	sub.w	r4, r4, #1
    c240:	f1d5 0e20 	rsbs	lr, r5, #32
    c244:	db0d      	blt.n	c262 <__adddf3+0xb2>
    c246:	fa02 fc0e 	lsl.w	ip, r2, lr
    c24a:	fa22 f205 	lsr.w	r2, r2, r5
    c24e:	1880      	adds	r0, r0, r2
    c250:	f141 0100 	adc.w	r1, r1, #0
    c254:	fa03 f20e 	lsl.w	r2, r3, lr
    c258:	1880      	adds	r0, r0, r2
    c25a:	fa43 f305 	asr.w	r3, r3, r5
    c25e:	4159      	adcs	r1, r3
    c260:	e00e      	b.n	c280 <__adddf3+0xd0>
    c262:	f1a5 0520 	sub.w	r5, r5, #32
    c266:	f10e 0e20 	add.w	lr, lr, #32
    c26a:	2a01      	cmp	r2, #1
    c26c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c270:	bf28      	it	cs
    c272:	f04c 0c02 	orrcs.w	ip, ip, #2
    c276:	fa43 f305 	asr.w	r3, r3, r5
    c27a:	18c0      	adds	r0, r0, r3
    c27c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c284:	d507      	bpl.n	c296 <__adddf3+0xe6>
    c286:	f04f 0e00 	mov.w	lr, #0
    c28a:	f1dc 0c00 	rsbs	ip, ip, #0
    c28e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c292:	eb6e 0101 	sbc.w	r1, lr, r1
    c296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c29a:	d31b      	bcc.n	c2d4 <__adddf3+0x124>
    c29c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c2a0:	d30c      	bcc.n	c2bc <__adddf3+0x10c>
    c2a2:	0849      	lsrs	r1, r1, #1
    c2a4:	ea5f 0030 	movs.w	r0, r0, rrx
    c2a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c2ac:	f104 0401 	add.w	r4, r4, #1
    c2b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c2b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c2b8:	f080 809a 	bcs.w	c3f0 <__adddf3+0x240>
    c2bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c2c0:	bf08      	it	eq
    c2c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c2c6:	f150 0000 	adcs.w	r0, r0, #0
    c2ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c2ce:	ea41 0105 	orr.w	r1, r1, r5
    c2d2:	bd30      	pop	{r4, r5, pc}
    c2d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c2d8:	4140      	adcs	r0, r0
    c2da:	eb41 0101 	adc.w	r1, r1, r1
    c2de:	3c01      	subs	r4, #1
    c2e0:	bf28      	it	cs
    c2e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c2e6:	d2e9      	bcs.n	c2bc <__adddf3+0x10c>
    c2e8:	f091 0f00 	teq	r1, #0
    c2ec:	bf04      	itt	eq
    c2ee:	4601      	moveq	r1, r0
    c2f0:	2000      	moveq	r0, #0
    c2f2:	fab1 f381 	clz	r3, r1
    c2f6:	bf08      	it	eq
    c2f8:	3320      	addeq	r3, #32
    c2fa:	f1a3 030b 	sub.w	r3, r3, #11
    c2fe:	f1b3 0220 	subs.w	r2, r3, #32
    c302:	da0c      	bge.n	c31e <__adddf3+0x16e>
    c304:	320c      	adds	r2, #12
    c306:	dd08      	ble.n	c31a <__adddf3+0x16a>
    c308:	f102 0c14 	add.w	ip, r2, #20
    c30c:	f1c2 020c 	rsb	r2, r2, #12
    c310:	fa01 f00c 	lsl.w	r0, r1, ip
    c314:	fa21 f102 	lsr.w	r1, r1, r2
    c318:	e00c      	b.n	c334 <__adddf3+0x184>
    c31a:	f102 0214 	add.w	r2, r2, #20
    c31e:	bfd8      	it	le
    c320:	f1c2 0c20 	rsble	ip, r2, #32
    c324:	fa01 f102 	lsl.w	r1, r1, r2
    c328:	fa20 fc0c 	lsr.w	ip, r0, ip
    c32c:	bfdc      	itt	le
    c32e:	ea41 010c 	orrle.w	r1, r1, ip
    c332:	4090      	lslle	r0, r2
    c334:	1ae4      	subs	r4, r4, r3
    c336:	bfa2      	ittt	ge
    c338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c33c:	4329      	orrge	r1, r5
    c33e:	bd30      	popge	{r4, r5, pc}
    c340:	ea6f 0404 	mvn.w	r4, r4
    c344:	3c1f      	subs	r4, #31
    c346:	da1c      	bge.n	c382 <__adddf3+0x1d2>
    c348:	340c      	adds	r4, #12
    c34a:	dc0e      	bgt.n	c36a <__adddf3+0x1ba>
    c34c:	f104 0414 	add.w	r4, r4, #20
    c350:	f1c4 0220 	rsb	r2, r4, #32
    c354:	fa20 f004 	lsr.w	r0, r0, r4
    c358:	fa01 f302 	lsl.w	r3, r1, r2
    c35c:	ea40 0003 	orr.w	r0, r0, r3
    c360:	fa21 f304 	lsr.w	r3, r1, r4
    c364:	ea45 0103 	orr.w	r1, r5, r3
    c368:	bd30      	pop	{r4, r5, pc}
    c36a:	f1c4 040c 	rsb	r4, r4, #12
    c36e:	f1c4 0220 	rsb	r2, r4, #32
    c372:	fa20 f002 	lsr.w	r0, r0, r2
    c376:	fa01 f304 	lsl.w	r3, r1, r4
    c37a:	ea40 0003 	orr.w	r0, r0, r3
    c37e:	4629      	mov	r1, r5
    c380:	bd30      	pop	{r4, r5, pc}
    c382:	fa21 f004 	lsr.w	r0, r1, r4
    c386:	4629      	mov	r1, r5
    c388:	bd30      	pop	{r4, r5, pc}
    c38a:	f094 0f00 	teq	r4, #0
    c38e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c392:	bf06      	itte	eq
    c394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c398:	3401      	addeq	r4, #1
    c39a:	3d01      	subne	r5, #1
    c39c:	e74e      	b.n	c23c <__adddf3+0x8c>
    c39e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c3a2:	bf18      	it	ne
    c3a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c3a8:	d029      	beq.n	c3fe <__adddf3+0x24e>
    c3aa:	ea94 0f05 	teq	r4, r5
    c3ae:	bf08      	it	eq
    c3b0:	ea90 0f02 	teqeq	r0, r2
    c3b4:	d005      	beq.n	c3c2 <__adddf3+0x212>
    c3b6:	ea54 0c00 	orrs.w	ip, r4, r0
    c3ba:	bf04      	itt	eq
    c3bc:	4619      	moveq	r1, r3
    c3be:	4610      	moveq	r0, r2
    c3c0:	bd30      	pop	{r4, r5, pc}
    c3c2:	ea91 0f03 	teq	r1, r3
    c3c6:	bf1e      	ittt	ne
    c3c8:	2100      	movne	r1, #0
    c3ca:	2000      	movne	r0, #0
    c3cc:	bd30      	popne	{r4, r5, pc}
    c3ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c3d2:	d105      	bne.n	c3e0 <__adddf3+0x230>
    c3d4:	0040      	lsls	r0, r0, #1
    c3d6:	4149      	adcs	r1, r1
    c3d8:	bf28      	it	cs
    c3da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c3de:	bd30      	pop	{r4, r5, pc}
    c3e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c3e4:	bf3c      	itt	cc
    c3e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c3ea:	bd30      	popcc	{r4, r5, pc}
    c3ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c3f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c3f8:	f04f 0000 	mov.w	r0, #0
    c3fc:	bd30      	pop	{r4, r5, pc}
    c3fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c402:	bf1a      	itte	ne
    c404:	4619      	movne	r1, r3
    c406:	4610      	movne	r0, r2
    c408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c40c:	bf1c      	itt	ne
    c40e:	460b      	movne	r3, r1
    c410:	4602      	movne	r2, r0
    c412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c416:	bf06      	itte	eq
    c418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c41c:	ea91 0f03 	teqeq	r1, r3
    c420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	bf00      	nop

0000c428 <__aeabi_ui2d>:
    c428:	f090 0f00 	teq	r0, #0
    c42c:	bf04      	itt	eq
    c42e:	2100      	moveq	r1, #0
    c430:	4770      	bxeq	lr
    c432:	b530      	push	{r4, r5, lr}
    c434:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c438:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c43c:	f04f 0500 	mov.w	r5, #0
    c440:	f04f 0100 	mov.w	r1, #0
    c444:	e750      	b.n	c2e8 <__adddf3+0x138>
    c446:	bf00      	nop

0000c448 <__aeabi_i2d>:
    c448:	f090 0f00 	teq	r0, #0
    c44c:	bf04      	itt	eq
    c44e:	2100      	moveq	r1, #0
    c450:	4770      	bxeq	lr
    c452:	b530      	push	{r4, r5, lr}
    c454:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c458:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c45c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c460:	bf48      	it	mi
    c462:	4240      	negmi	r0, r0
    c464:	f04f 0100 	mov.w	r1, #0
    c468:	e73e      	b.n	c2e8 <__adddf3+0x138>
    c46a:	bf00      	nop

0000c46c <__aeabi_f2d>:
    c46c:	0042      	lsls	r2, r0, #1
    c46e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c472:	ea4f 0131 	mov.w	r1, r1, rrx
    c476:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c47a:	bf1f      	itttt	ne
    c47c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c488:	4770      	bxne	lr
    c48a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c48e:	bf08      	it	eq
    c490:	4770      	bxeq	lr
    c492:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c496:	bf04      	itt	eq
    c498:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c49c:	4770      	bxeq	lr
    c49e:	b530      	push	{r4, r5, lr}
    c4a0:	f44f 7460 	mov.w	r4, #896	; 0x380
    c4a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c4a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c4ac:	e71c      	b.n	c2e8 <__adddf3+0x138>
    c4ae:	bf00      	nop

0000c4b0 <__aeabi_ul2d>:
    c4b0:	ea50 0201 	orrs.w	r2, r0, r1
    c4b4:	bf08      	it	eq
    c4b6:	4770      	bxeq	lr
    c4b8:	b530      	push	{r4, r5, lr}
    c4ba:	f04f 0500 	mov.w	r5, #0
    c4be:	e00a      	b.n	c4d6 <__aeabi_l2d+0x16>

0000c4c0 <__aeabi_l2d>:
    c4c0:	ea50 0201 	orrs.w	r2, r0, r1
    c4c4:	bf08      	it	eq
    c4c6:	4770      	bxeq	lr
    c4c8:	b530      	push	{r4, r5, lr}
    c4ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c4ce:	d502      	bpl.n	c4d6 <__aeabi_l2d+0x16>
    c4d0:	4240      	negs	r0, r0
    c4d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c4d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4da:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c4e2:	f43f aed8 	beq.w	c296 <__adddf3+0xe6>
    c4e6:	f04f 0203 	mov.w	r2, #3
    c4ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c4ee:	bf18      	it	ne
    c4f0:	3203      	addne	r2, #3
    c4f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c4f6:	bf18      	it	ne
    c4f8:	3203      	addne	r2, #3
    c4fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c4fe:	f1c2 0320 	rsb	r3, r2, #32
    c502:	fa00 fc03 	lsl.w	ip, r0, r3
    c506:	fa20 f002 	lsr.w	r0, r0, r2
    c50a:	fa01 fe03 	lsl.w	lr, r1, r3
    c50e:	ea40 000e 	orr.w	r0, r0, lr
    c512:	fa21 f102 	lsr.w	r1, r1, r2
    c516:	4414      	add	r4, r2
    c518:	e6bd      	b.n	c296 <__adddf3+0xe6>
    c51a:	bf00      	nop

0000c51c <__aeabi_d2lz>:
    c51c:	b508      	push	{r3, lr}
    c51e:	4602      	mov	r2, r0
    c520:	460b      	mov	r3, r1
    c522:	ec43 2b17 	vmov	d7, r2, r3
    c526:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    c52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c52e:	d403      	bmi.n	c538 <__aeabi_d2lz+0x1c>
    c530:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c534:	f000 b80c 	b.w	c550 <__aeabi_d2ulz>
    c538:	eeb1 7b47 	vneg.f64	d7, d7
    c53c:	ec51 0b17 	vmov	r0, r1, d7
    c540:	f000 f806 	bl	c550 <__aeabi_d2ulz>
    c544:	4240      	negs	r0, r0
    c546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c54a:	bd08      	pop	{r3, pc}
    c54c:	0000      	movs	r0, r0
	...

0000c550 <__aeabi_d2ulz>:
    c550:	ed9f 6b0b 	vldr	d6, [pc, #44]	; c580 <__aeabi_d2ulz+0x30>
    c554:	ec41 0b17 	vmov	d7, r0, r1
    c558:	ed9f 5b0b 	vldr	d5, [pc, #44]	; c588 <__aeabi_d2ulz+0x38>
    c55c:	ee27 6b06 	vmul.f64	d6, d7, d6
    c560:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    c564:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    c568:	eea4 7b45 	vfms.f64	d7, d4, d5
    c56c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    c570:	ee16 1a10 	vmov	r1, s12
    c574:	ee17 0a90 	vmov	r0, s15
    c578:	4770      	bx	lr
    c57a:	bf00      	nop
    c57c:	f3af 8000 	nop.w
    c580:	00000000 	.word	0x00000000
    c584:	3df00000 	.word	0x3df00000
    c588:	00000000 	.word	0x00000000
    c58c:	41f00000 	.word	0x41f00000

0000c590 <___init_veneer>:
    c590:	f85f f000 	ldr.w	pc, [pc]	; c594 <___init_veneer+0x4>
    c594:	60001fb1 	.word	0x60001fb1

0000c598 <___reboot_Teensyduino__veneer>:
    c598:	f85f f000 	ldr.w	pc, [pc]	; c59c <___reboot_Teensyduino__veneer+0x4>
    c59c:	60001f09 	.word	0x60001f09

0000c5a0 <___ZN7TwoWire5beginEv_veneer>:
    c5a0:	f85f f000 	ldr.w	pc, [pc]	; c5a4 <___ZN7TwoWire5beginEv_veneer+0x4>
    c5a4:	60001789 	.word	0x60001789
	...

Disassembly of section .fini:

0000c5b0 <_fini>:
    c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5b2:	bf00      	nop
