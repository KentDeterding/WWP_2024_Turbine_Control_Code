
C:\Users\Kent4\Projects\Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f9d0 	bl	600017d0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f97c 	bl	600017e0 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fb9e 	bl	60001c5c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fd31 	bl	60001f98 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f9ac 	bl	600018d8 <configure_external_ram>
	analog_init();
60001580:	f000 fcd0 	bl	60001f24 <analog_init>
	pwm_init();
60001584:	f000 fd10 	bl	60001fa8 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fb96 	bl	60001cb8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f922 	bl	600017d4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fc27 	bl	60001de8 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f91b 	bl	600017dc <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f917 	bl	600017d8 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fced 	bl	60001f88 <____libc_init_array_veneer>
	main();
600015ae:	f000 fd03 	bl	60001fb8 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000cc38 	.word	0x0000cc38
600015c0:	600021fc 	.word	0x600021fc
600015c4:	00000000 	.word	0x00000000
600015c8:	200022c0 	.word	0x200022c0
600015cc:	6000ee38 	.word	0x6000ee38
600015d0:	20000000 	.word	0x20000000
600015d4:	20003e20 	.word	0x20003e20
600015d8:	200022c0 	.word	0x200022c0
600015dc:	20002000 	.word	0x20002000
600015e0:	0000469d 	.word	0x0000469d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	000029a9 	.word	0x000029a9
600015f4:	20003dc0 	.word	0x20003dc0
600015f8:	000029ad 	.word	0x000029ad
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20003dc4 	.word	0x20003dc4
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001654:	6943      	ldr	r3, [r0, #20]
60001656:	4a0a      	ldr	r2, [pc, #40]	; (60001680 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001658:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000165c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165e:	7a03      	ldrb	r3, [r0, #8]
60001660:	4c08      	ldr	r4, [pc, #32]	; (60001684 <TwoWire::configSDApin(unsigned char)+0x30>)
60001662:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001666:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000166c:	68c2      	ldr	r2, [r0, #12]
6000166e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001670:	6903      	ldr	r3, [r0, #16]
60001672:	b10b      	cbz	r3, 60001678 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001674:	6942      	ldr	r2, [r0, #20]
60001676:	601a      	str	r2, [r3, #0]
	}
}
60001678:	f85d 4b04 	ldr.w	r4, [sp], #4
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop
60001680:	20000c5c 	.word	0x20000c5c
60001684:	0001f861 	.word	0x0001f861

60001688 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	7e02      	ldrb	r2, [r0, #24]
6000168c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001690:	f892 c008 	ldrb.w	ip, [r2, #8]
60001694:	458c      	cmp	ip, r1
60001696:	d01c      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001698:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000169a:	2aff      	cmp	r2, #255	; 0xff
6000169c:	d019      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000169e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016a0:	b510      	push	{r4, lr}
600016a2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016a4:	d016      	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016a6:	7e1a      	ldrb	r2, [r3, #24]
600016a8:	2aff      	cmp	r2, #255	; 0xff
600016aa:	d006      	beq.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016ac:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
600016b2:	6812      	ldr	r2, [r2, #0]
600016b4:	421a      	tst	r2, r3
600016b6:	d101      	bne.n	600016bc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016b8:	7621      	strb	r1, [r4, #24]
}
600016ba:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016bc:	4b06      	ldr	r3, [pc, #24]	; (600016d8 <TwoWire::setSDA(unsigned char)+0x50>)
600016be:	2205      	movs	r2, #5
		configSDApin(newindex);
600016c0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016c6:	685b      	ldr	r3, [r3, #4]
600016c8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ca:	f7ff ffc3 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ce:	7621      	strb	r1, [r4, #24]
600016d0:	e7f3      	b.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016d2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016d4:	2100      	movs	r1, #0
600016d6:	e7ea      	b.n	600016ae <TwoWire::setSDA(unsigned char)+0x26>
600016d8:	20000c5c 	.word	0x20000c5c

600016dc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	4a0a      	ldr	r2, [pc, #40]	; (60001708 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e0:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e4:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
600016ea:	4c08      	ldr	r4, [pc, #32]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x30>)
600016ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f0:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
600016f8:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
600016fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
600016fc:	b10b      	cbz	r3, 60001702 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
600016fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001700:	601a      	str	r2, [r3, #0]
	}
}
60001702:	f85d 4b04 	ldr.w	r4, [sp], #4
60001706:	4770      	bx	lr
60001708:	20000c5c 	.word	0x20000c5c
6000170c:	0001f861 	.word	0x0001f861

60001710 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001710:	6943      	ldr	r3, [r0, #20]
60001712:	7e42      	ldrb	r2, [r0, #25]
60001714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001718:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000171c:	458c      	cmp	ip, r1
6000171e:	d01e      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001720:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001724:	2aff      	cmp	r2, #255	; 0xff
60001726:	d01a      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001728:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000172a:	b510      	push	{r4, lr}
6000172c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000172e:	d017      	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001734:	2aff      	cmp	r2, #255	; 0xff
60001736:	d006      	beq.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
60001738:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000173e:	6812      	ldr	r2, [r2, #0]
60001740:	421a      	tst	r2, r3
60001742:	d101      	bne.n	60001748 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001744:	7661      	strb	r1, [r4, #25]
}
60001746:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001748:	4b06      	ldr	r3, [pc, #24]	; (60001764 <TwoWire::setSCL(unsigned char)+0x54>)
6000174a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000174c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001752:	685b      	ldr	r3, [r3, #4]
60001754:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001756:	f7ff ffc1 	bl	600016dc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175a:	7661      	strb	r1, [r4, #25]
6000175c:	e7f3      	b.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
6000175e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001760:	2100      	movs	r1, #0
60001762:	e7ea      	b.n	6000173a <TwoWire::setSCL(unsigned char)+0x2a>
60001764:	20000c5c 	.word	0x20000c5c

60001768 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001768:	4916      	ldr	r1, [pc, #88]	; (600017c4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000176e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001776:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001778:	638b      	str	r3, [r1, #56]	; 0x38
{
6000177a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000177c:	4d12      	ldr	r5, [pc, #72]	; (600017c8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000177e:	e9d2 1300 	ldrd	r1, r3, [r2]
60001782:	680a      	ldr	r2, [r1, #0]
60001784:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
60001786:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001788:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000178a:	2202      	movs	r2, #2
	port->MCR = 0;
6000178c:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
6000178e:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001790:	4a0e      	ldr	r2, [pc, #56]	; (600017cc <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001792:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001794:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001796:	2201      	movs	r2, #1
60001798:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000179c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017a0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017a2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017a8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017aa:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ac:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ae:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017b0:	7e01      	ldrb	r1, [r0, #24]
600017b2:	f7ff ff4f 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017b6:	7e61      	ldrb	r1, [r4, #25]
600017b8:	4620      	mov	r0, r4
}
600017ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017be:	f7ff bf8d 	b.w	600016dc <TwoWire::configSCLpin(unsigned char)>
600017c2:	bf00      	nop
600017c4:	400fc000 	.word	0x400fc000
600017c8:	05050bb8 	.word	0x05050bb8
600017cc:	1928373b 	.word	0x1928373b

600017d0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017d0:	4770      	bx	lr
600017d2:	bf00      	nop

600017d4 <startup_default_middle_hook>:
600017d4:	4770      	bx	lr
600017d6:	bf00      	nop

600017d8 <startup_default_late_hook>:
600017d8:	4770      	bx	lr
600017da:	bf00      	nop

600017dc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017dc:	bf00      	nop
600017de:	4770      	bx	lr

600017e0 <configure_cache>:
{
600017e0:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017e6:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e8:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ea:	482b      	ldr	r0, [pc, #172]	; (60001898 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600017ec:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017fa:	4828      	ldr	r0, [pc, #160]	; (6000189c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001800:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001802:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001806:	4826      	ldr	r0, [pc, #152]	; (600018a0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001808:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000180c:	4a25      	ldr	r2, [pc, #148]	; (600018a4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000180e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001812:	4c25      	ldr	r4, [pc, #148]	; (600018a8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001814:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001818:	4824      	ldr	r0, [pc, #144]	; (600018ac <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001822:	4c23      	ldr	r4, [pc, #140]	; (600018b0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001824:	4823      	ldr	r0, [pc, #140]	; (600018b4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001826:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000182e:	4c22      	ldr	r4, [pc, #136]	; (600018b8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001834:	4821      	ldr	r0, [pc, #132]	; (600018bc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001836:	4a22      	ldr	r2, [pc, #136]	; (600018c0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001838:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000183c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001840:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001844:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000184a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000184c:	481e      	ldr	r0, [pc, #120]	; (600018c8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000184e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001852:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001856:	4a1d      	ldr	r2, [pc, #116]	; (600018cc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000185c:	4c1c      	ldr	r4, [pc, #112]	; (600018d0 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000185e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001862:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001864:	481b      	ldr	r0, [pc, #108]	; (600018d4 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001866:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000186e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001872:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001876:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000187a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000187e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001882:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001886:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000188a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000188e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001892:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001896:	4770      	bx	lr
60001898:	1000003f 	.word	0x1000003f
6000189c:	03080025 	.word	0x03080025
600018a0:	00100009 	.word	0x00100009
600018a4:	20003e20 	.word	0x20003e20
600018a8:	00200013 	.word	0x00200013
600018ac:	07020021 	.word	0x07020021
600018b0:	20000014 	.word	0x20000014
600018b4:	13080025 	.word	0x13080025
600018b8:	10000009 	.word	0x10000009
600018bc:	20200016 	.word	0x20200016
600018c0:	130b0027 	.word	0x130b0027
600018c4:	40000017 	.word	0x40000017
600018c8:	60000018 	.word	0x60000018
600018cc:	070b002f 	.word	0x070b002f
600018d0:	70000019 	.word	0x70000019
600018d4:	130b002f 	.word	0x130b002f

600018d8 <configure_external_ram>:
{
600018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018da:	4bb8      	ldr	r3, [pc, #736]	; (60001bbc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018dc:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018de:	4eb8      	ldr	r6, [pc, #736]	; (60001bc0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018e2:	4fb8      	ldr	r7, [pc, #736]	; (60001bc4 <configure_external_ram+0x2ec>)
{
600018e4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018e6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ea:	49b7      	ldr	r1, [pc, #732]	; (60001bc8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ec:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	4db6      	ldr	r5, [pc, #728]	; (60001bcc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018f2:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018f6:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fa:	4cb5      	ldr	r4, [pc, #724]	; (60001bd0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018fc:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001900:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001904:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001908:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000190c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001910:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001916:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001918:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000191a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000191c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000191e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000192a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000192e:	4aa9      	ldr	r2, [pc, #676]	; (60001bd4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001930:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001934:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001938:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000193c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001940:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001944:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001946:	4ba4      	ldr	r3, [pc, #656]	; (60001bd8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001948:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000194a:	48a4      	ldr	r0, [pc, #656]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	49a4      	ldr	r1, [pc, #656]	; (60001be0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000194e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001950:	4aa4      	ldr	r2, [pc, #656]	; (60001be4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001952:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001958:	f043 030c 	orr.w	r3, r3, #12
6000195c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001960:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001964:	6803      	ldr	r3, [r0, #0]
60001966:	f043 0302 	orr.w	r3, r3, #2
6000196a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000196c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000196e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001970:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001974:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001976:	4b9c      	ldr	r3, [pc, #624]	; (60001be8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001978:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000197a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000197c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	4c9b      	ldr	r4, [pc, #620]	; (60001bec <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001980:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001982:	4a9b      	ldr	r2, [pc, #620]	; (60001bf0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001988:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000198a:	68c3      	ldr	r3, [r0, #12]
6000198c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001990:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001992:	6a03      	ldr	r3, [r0, #32]
60001994:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001998:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199a:	6a03      	ldr	r3, [r0, #32]
6000199c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000199e:	4a95      	ldr	r2, [pc, #596]	; (60001bf4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019a0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a2:	4c95      	ldr	r4, [pc, #596]	; (60001bf8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019a4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019aa:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019b4:	f043 0301 	orr.w	r3, r3, #1
600019b8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019bc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	498e      	ldr	r1, [pc, #568]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019c6:	f043 0301 	orr.w	r3, r3, #1
600019ca:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ce:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600019d2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019dc:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019de:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e6:	6803      	ldr	r3, [r0, #0]
600019e8:	f023 0302 	bic.w	r3, r3, #2
600019ec:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ee:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f0:	4b83      	ldr	r3, [pc, #524]	; (60001c00 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	4984      	ldr	r1, [pc, #528]	; (60001c04 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f4:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f6:	f843 2b04 	str.w	r2, [r3], #4
600019fa:	428b      	cmp	r3, r1
600019fc:	d1fb      	bne.n	600019f6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fe:	4a77      	ldr	r2, [pc, #476]	; (60001bdc <configure_external_ram+0x304>)
60001a00:	6813      	ldr	r3, [r2, #0]
60001a02:	f043 0301 	orr.w	r3, r3, #1
60001a06:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a08:	6813      	ldr	r3, [r2, #0]
60001a0a:	f013 0301 	ands.w	r3, r3, #1
60001a0e:	d1fb      	bne.n	60001a08 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a10:	487a      	ldr	r0, [pc, #488]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a12:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a14:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a18:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a1a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a20:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a24:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a28:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a30:	4975      	ldr	r1, [pc, #468]	; (60001c08 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a32:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a36:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a3a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a3e:	4873      	ldr	r0, [pc, #460]	; (60001c0c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a40:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a44:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	4c71      	ldr	r4, [pc, #452]	; (60001c10 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a4a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a4e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a52:	4970      	ldr	r1, [pc, #448]	; (60001c14 <configure_external_ram+0x33c>)
60001a54:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a5a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a62:	485e      	ldr	r0, [pc, #376]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	6943      	ldr	r3, [r0, #20]
60001a72:	07da      	lsls	r2, r3, #31
60001a74:	d5fc      	bpl.n	60001a70 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a78:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a7e:	4957      	ldr	r1, [pc, #348]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a80:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a82:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a86:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	694b      	ldr	r3, [r1, #20]
60001a90:	07db      	lsls	r3, r3, #31
60001a92:	d5fc      	bpl.n	60001a8e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a94:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a96:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9c:	4a4f      	ldr	r2, [pc, #316]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a9e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001aa0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aac:	6953      	ldr	r3, [r2, #20]
60001aae:	07df      	lsls	r7, r3, #31
60001ab0:	d5fc      	bpl.n	60001aac <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ab6:	4858      	ldr	r0, [pc, #352]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab8:	4948      	ldr	r1, [pc, #288]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	694b      	ldr	r3, [r1, #20]
60001aca:	07de      	lsls	r6, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001ace:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ad2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ad6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001ad8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ada:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001adc:	4293      	cmp	r3, r2
60001ade:	d165      	bne.n	60001bac <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001ae0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae8:	483c      	ldr	r0, [pc, #240]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001aea:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aee:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af6:	6943      	ldr	r3, [r0, #20]
60001af8:	07dd      	lsls	r5, r3, #31
60001afa:	d5fc      	bpl.n	60001af6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001afc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001afe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b02:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	4a35      	ldr	r2, [pc, #212]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b08:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b0c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b10:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b14:	6953      	ldr	r3, [r2, #20]
60001b16:	07dc      	lsls	r4, r3, #31
60001b18:	d5fc      	bpl.n	60001b14 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b1a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b1c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b24:	492d      	ldr	r1, [pc, #180]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b26:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b28:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b30:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	694b      	ldr	r3, [r1, #20]
60001b36:	07d8      	lsls	r0, r3, #31
60001b38:	d5fc      	bpl.n	60001b34 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4a25      	ldr	r2, [pc, #148]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6953      	ldr	r3, [r2, #20]
60001b56:	07d9      	lsls	r1, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b60:	482d      	ldr	r0, [pc, #180]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	491e      	ldr	r1, [pc, #120]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b64:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b66:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b6a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b72:	694b      	ldr	r3, [r1, #20]
60001b74:	07da      	lsls	r2, r3, #31
60001b76:	d5fc      	bpl.n	60001b72 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b78:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b7c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b80:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b82:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b84:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b86:	4293      	cmp	r3, r2
60001b88:	d050      	beq.n	60001c2c <configure_external_ram+0x354>
60001b8a:	2508      	movs	r5, #8
60001b8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b90:	4922      	ldr	r1, [pc, #136]	; (60001c1c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b92:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001b94:	4b22      	ldr	r3, [pc, #136]	; (60001c20 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b96:	4a23      	ldr	r2, [pc, #140]	; (60001c24 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b98:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001b9a:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b9c:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b9e:	2301      	movs	r3, #1
60001ba0:	4821      	ldr	r0, [pc, #132]	; (60001c28 <configure_external_ram+0x350>)
60001ba2:	4422      	add	r2, r4
60001ba4:	f000 f9fc 	bl	60001fa0 <__sm_set_pool_veneer>
}
60001ba8:	b003      	add	sp, #12
60001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001bac:	4b1e      	ldr	r3, [pc, #120]	; (60001c28 <configure_external_ram+0x350>)
60001bae:	2200      	movs	r2, #0
60001bb0:	e9c3 2200 	strd	r2, r2, [r3]
60001bb4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bb8:	b003      	add	sp, #12
60001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bbc:	401f8000 	.word	0x401f8000
60001bc0:	0001b0f9 	.word	0x0001b0f9
60001bc4:	000110f9 	.word	0x000110f9
60001bc8:	401f8400 	.word	0x401f8400
60001bcc:	000170f9 	.word	0x000170f9
60001bd0:	400fc000 	.word	0x400fc000
60001bd4:	1ffffcff 	.word	0x1ffffcff
60001bd8:	a0000300 	.word	0xa0000300
60001bdc:	402a4000 	.word	0x402a4000
60001be0:	402a8000 	.word	0x402a8000
60001be4:	ffff0012 	.word	0xffff0012
60001be8:	00f737ff 	.word	0x00f737ff
60001bec:	80000040 	.word	0x80000040
60001bf0:	7cf0ff00 	.word	0x7cf0ff00
60001bf4:	830f00ff 	.word	0x830f00ff
60001bf8:	00020063 	.word	0x00020063
60001bfc:	5af05af0 	.word	0x5af05af0
60001c00:	402a4200 	.word	0x402a4200
60001c04:	402a4300 	.word	0x402a4300
60001c08:	3018049f 	.word	0x3018049f
60001c0c:	0a1806eb 	.word	0x0a1806eb
60001c10:	0a180638 	.word	0x0a180638
60001c14:	26013206 	.word	0x26013206
60001c18:	00030004 	.word	0x00030004
60001c1c:	70000000 	.word	0x70000000
60001c20:	70000000 	.word	0x70000000
60001c24:	20003dea 	.word	0x20003dea
60001c28:	200032e8 	.word	0x200032e8
	FLEXSPI2_IPCR0 = addr;
60001c2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c34:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c36:	4808      	ldr	r0, [pc, #32]	; (60001c58 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6943      	ldr	r3, [r0, #20]
60001c46:	07db      	lsls	r3, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
60001c4c:	2510      	movs	r5, #16
60001c4e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c52:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c54:	e79c      	b.n	60001b90 <configure_external_ram+0x2b8>
60001c56:	bf00      	nop
60001c58:	402a4000 	.word	0x402a4000

60001c5c <usb_pll_start>:
{
60001c5c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5e:	4a15      	ldr	r2, [pc, #84]	; (60001cb4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c76:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c78:	f013 0f02 	tst.w	r3, #2
60001c7c:	d10e      	bne.n	60001c9c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c82:	d00f      	beq.n	60001ca4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c88:	d00e      	beq.n	60001ca8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c8a:	2b00      	cmp	r3, #0
60001c8c:	daf3      	bge.n	60001c76 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c92:	d10b      	bne.n	60001cac <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c94:	065b      	lsls	r3, r3, #25
60001c96:	d50b      	bpl.n	60001cb0 <usb_pll_start+0x54>
}
60001c98:	bcf0      	pop	{r4, r5, r6, r7}
60001c9a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c9c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c9e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ca0:	6190      	str	r0, [r2, #24]
			continue;
60001ca2:	e7e8      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca4:	6155      	str	r5, [r2, #20]
			continue;
60001ca6:	e7e6      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ca8:	6156      	str	r6, [r2, #20]
			continue;
60001caa:	e7e4      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cac:	6191      	str	r1, [r2, #24]
			continue;
60001cae:	e7e2      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cb0:	6157      	str	r7, [r2, #20]
			continue;
60001cb2:	e7e0      	b.n	60001c76 <usb_pll_start+0x1a>
60001cb4:	400d8000 	.word	0x400d8000

60001cb8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb8:	4a3f      	ldr	r2, [pc, #252]	; (60001db8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cba:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cbc:	493f      	ldr	r1, [pc, #252]	; (60001dbc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cbe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cca:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001dc0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cce:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dc4 <tempmon_init+0x10c>
{
60001cd6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cdc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001ce0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ce4:	4d38      	ldr	r5, [pc, #224]	; (60001dc8 <tempmon_init+0x110>)
60001ce6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce8:	4c38      	ldr	r4, [pc, #224]	; (60001dcc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cea:	4839      	ldr	r0, [pc, #228]	; (60001dd0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cee:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cfc:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d00:	ee07 1a10 	vmov	s14, r1
60001d04:	4b33      	ldr	r3, [pc, #204]	; (60001dd4 <tempmon_init+0x11c>)
60001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d0a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d10:	4931      	ldr	r1, [pc, #196]	; (60001dd8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d12:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d16:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d22:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d26:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d32:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d36:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d3a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d3e:	4827      	ldr	r0, [pc, #156]	; (60001ddc <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d40:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d44:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d48:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d4c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d54:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d58:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d60:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	ee16 3a10 	vmov	r3, s12
60001d6c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d74:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001d78:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d7e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001d86:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001d8a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001d8c:	4914      	ldr	r1, [pc, #80]	; (60001de0 <tempmon_init+0x128>)
60001d8e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001d96:	f043 0302 	orr.w	r3, r3, #2
60001d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001d9e:	4b11      	ldr	r3, [pc, #68]	; (60001de4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001da0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001da4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dac:	2201      	movs	r2, #1
}
60001dae:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001db4:	4770      	bx	lr
60001db6:	bf00      	nop
60001db8:	400d8100 	.word	0x400d8100
60001dbc:	401f4400 	.word	0x401f4400
60001dc0:	42aa0000 	.word	0x42aa0000
60001dc4:	42b40000 	.word	0x42b40000
60001dc8:	20003db0 	.word	0x20003db0
60001dcc:	20003dac 	.word	0x20003dac
60001dd0:	20003db4 	.word	0x20003db4
60001dd4:	20003db8 	.word	0x20003db8
60001dd8:	0fff0000 	.word	0x0fff0000
60001ddc:	e000e400 	.word	0xe000e400
60001de0:	20002000 	.word	0x20002000
60001de4:	00004879 	.word	0x00004879

60001de8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001de8:	4b31      	ldr	r3, [pc, #196]	; (60001eb0 <usb_init+0xc8>)
60001dea:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001dee:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001df4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001df8:	f000 f8da 	bl	60001fb0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001dfc:	4a2d      	ldr	r2, [pc, #180]	; (60001eb4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001dfe:	492e      	ldr	r1, [pc, #184]	; (60001eb8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e04:	482d      	ldr	r0, [pc, #180]	; (60001ebc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e06:	f043 0303 	orr.w	r3, r3, #3
60001e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e0e:	4b2c      	ldr	r3, [pc, #176]	; (60001ec0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e10:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e14:	6802      	ldr	r2, [r0, #0]
60001e16:	421a      	tst	r2, r3
60001e18:	d103      	bne.n	60001e22 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e1a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e1e:	079a      	lsls	r2, r3, #30
60001e20:	d01b      	beq.n	60001e5a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e22:	4a25      	ldr	r2, [pc, #148]	; (60001eb8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e28:	4b24      	ldr	r3, [pc, #144]	; (60001ebc <usb_init+0xd4>)
60001e2a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e2c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e30:	f043 0302 	orr.w	r3, r3, #2
60001e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e38:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e3c:	079b      	lsls	r3, r3, #30
60001e3e:	d4fb      	bmi.n	60001e38 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e48:	4b1c      	ldr	r3, [pc, #112]	; (60001ebc <usb_init+0xd4>)
60001e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e4e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e52:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e54:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e56:	f000 f89b 	bl	60001f90 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e5a:	4a18      	ldr	r2, [pc, #96]	; (60001ebc <usb_init+0xd4>)
60001e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e60:	4c15      	ldr	r4, [pc, #84]	; (60001eb8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e62:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e64:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e66:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e68:	4b16      	ldr	r3, [pc, #88]	; (60001ec4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001e6a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e6c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e70:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e74:	4618      	mov	r0, r3
60001e76:	f000 f8a3 	bl	60001fc0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e7e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e80:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e84:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e88:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e8a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001e8e:	641a      	str	r2, [r3, #64]	; 0x40
60001e90:	4b0d      	ldr	r3, [pc, #52]	; (60001ec8 <usb_init+0xe0>)
60001e92:	4a0e      	ldr	r2, [pc, #56]	; (60001ecc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e94:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001e9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ea0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ea4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ea6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001eaa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001eae:	bd10      	pop	{r4, pc}
60001eb0:	400d8000 	.word	0x400d8000
60001eb4:	400fc000 	.word	0x400fc000
60001eb8:	402e0000 	.word	0x402e0000
60001ebc:	400d9000 	.word	0x400d9000
60001ec0:	001e1c00 	.word	0x001e1c00
60001ec4:	20000000 	.word	0x20000000
60001ec8:	20002000 	.word	0x20002000
60001ecc:	00004a61 	.word	0x00004a61

60001ed0 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ed0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ed2:	4b0e      	ldr	r3, [pc, #56]	; (60001f0c <_reboot_Teensyduino_+0x3c>)
60001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ed6:	079b      	lsls	r3, r3, #30
60001ed8:	d400      	bmi.n	60001edc <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001eda:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001edc:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ede:	4b0c      	ldr	r3, [pc, #48]	; (60001f10 <_reboot_Teensyduino_+0x40>)
60001ee0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ee2:	4a0c      	ldr	r2, [pc, #48]	; (60001f14 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ee4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ee8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001eec:	490a      	ldr	r1, [pc, #40]	; (60001f18 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001eee:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ef2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ef4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ef6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001efe:	4807      	ldr	r0, [pc, #28]	; (60001f1c <_reboot_Teensyduino_+0x4c>)
60001f00:	4a07      	ldr	r2, [pc, #28]	; (60001f20 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f02:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f04:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f06:	689b      	ldr	r3, [r3, #8]
60001f08:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f0a:	bf00      	nop
60001f0c:	401f4400 	.word	0x401f4400
60001f10:	402e0000 	.word	0x402e0000
60001f14:	400ac000 	.word	0x400ac000
60001f18:	00200003 	.word	0x00200003
60001f1c:	20208000 	.word	0x20208000
60001f20:	eb120000 	.word	0xeb120000

60001f24 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f24:	4b10      	ldr	r3, [pc, #64]	; (60001f68 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f26:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f28:	4a10      	ldr	r2, [pc, #64]	; (60001f6c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f2c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f30:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f32:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f34:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f40:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f42:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f46:	061b      	lsls	r3, r3, #24
60001f48:	d4fc      	bmi.n	60001f44 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f4a:	4a09      	ldr	r2, [pc, #36]	; (60001f70 <analog_init+0x4c>)
60001f4c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f50:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f52:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f54:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f56:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f58:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f5c:	d1fb      	bne.n	60001f56 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f5e:	4a05      	ldr	r2, [pc, #20]	; (60001f74 <analog_init+0x50>)
60001f60:	7013      	strb	r3, [r2, #0]
}
60001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f66:	4770      	bx	lr
60001f68:	400fc000 	.word	0x400fc000
60001f6c:	400c4000 	.word	0x400c4000
60001f70:	400c8000 	.word	0x400c8000
60001f74:	20003de9 	.word	0x20003de9

60001f78 <_init>:
60001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f7a:	bf00      	nop
60001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f7e:	bc08      	pop	{r3}
60001f80:	469e      	mov	lr, r3
60001f82:	4770      	bx	lr
60001f84:	0000      	movs	r0, r0
	...

60001f88 <____libc_init_array_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <____libc_init_array_veneer+0x4>
60001f8c:	00008135 	.word	0x00008135

60001f90 <__delay_veneer>:
60001f90:	f85f f000 	ldr.w	pc, [pc]	; 60001f94 <__delay_veneer+0x4>
60001f94:	00003d31 	.word	0x00003d31

60001f98 <__set_arm_clock_veneer>:
60001f98:	f85f f000 	ldr.w	pc, [pc]	; 60001f9c <__set_arm_clock_veneer+0x4>
60001f9c:	00003a41 	.word	0x00003a41

60001fa0 <__sm_set_pool_veneer>:
60001fa0:	f85f f000 	ldr.w	pc, [pc]	; 60001fa4 <__sm_set_pool_veneer+0x4>
60001fa4:	00005ae1 	.word	0x00005ae1

60001fa8 <__pwm_init_veneer>:
60001fa8:	f85f f000 	ldr.w	pc, [pc]	; 60001fac <__pwm_init_veneer+0x4>
60001fac:	00004589 	.word	0x00004589

60001fb0 <__usb_init_serialnumber_veneer>:
60001fb0:	f85f f000 	ldr.w	pc, [pc]	; 60001fb4 <__usb_init_serialnumber_veneer+0x4>
60001fb4:	000051d1 	.word	0x000051d1

60001fb8 <__main_veneer>:
60001fb8:	f85f f000 	ldr.w	pc, [pc]	; 60001fbc <__main_veneer+0x4>
60001fbc:	00004011 	.word	0x00004011

60001fc0 <__memset_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__memset_veneer+0x4>
60001fc4:	000079c9 	.word	0x000079c9

60001fc8 <__frame_dummy_init_array_entry>:
60001fc8:	00000101 00000f41 00001505 0000282d     ....A.......-(..
60001fd8:	0000303d 000030bd 00003141 000031c5     =0...0..A1...1..
60001fe8:	00003249 000032cd 00003351 000033d5     I2...2..Q3...3..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    *value <<= 8;
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
    *value |= _buffer[1];
      2a:	4015      	ands	r5, r2
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f24      	ldr	r7, [pc, #144]	; (c0 <_teensy_model_identifier+0x9b>)
}
      30:	2601      	movs	r6, #1

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      32:	619d      	str	r5, [r3, #24]
      34:	fa95 f4a5 	rbit	r4, r5
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1e      	ldr	r3, [pc, #120]	; (c4 <_teensy_model_identifier+0x9f>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
            array_index -= (int)filter->size;
        }
        sum += (double) *(filter->array + array_index);
    }
    return sum / (double)(filter->size - 2);
}
      54:	4f1c      	ldr	r7, [pc, #112]	; (c8 <_teensy_model_identifier+0xa3>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
    }
    if (_miso != -1) {
      70:	4b16      	ldr	r3, [pc, #88]	; (cc <_teensy_model_identifier+0xa7>)
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
}
      7a:	4f15      	ldr	r7, [pc, #84]	; (d0 <_teensy_model_identifier+0xab>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b0f      	ldr	r3, [pc, #60]	; (d4 <_teensy_model_identifier+0xaf>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
}
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0d      	ldr	r7, [pc, #52]	; (d8 <_teensy_model_identifier+0xb3>)
      a2:	2601      	movs	r6, #1
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
}
      bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      be:	bf00      	nop
      c0:	20001b34 	.word	0x20001b34
      c4:	42004000 	.word	0x42004000
      c8:	20001bb4 	.word	0x20001bb4
      cc:	42008000 	.word	0x42008000
      d0:	20001c34 	.word	0x20001c34
      d4:	4200c000 	.word	0x4200c000
      d8:	20001cb4 	.word	0x20001cb4

000000dc <register_tm_clones>:
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      dc:	4805      	ldr	r0, [pc, #20]	; (f4 <register_tm_clones+0x18>)
      de:	4b06      	ldr	r3, [pc, #24]	; (f8 <register_tm_clones+0x1c>)
      e0:	1a1b      	subs	r3, r3, r0
      e2:	0fd9      	lsrs	r1, r3, #31
      e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      e8:	1049      	asrs	r1, r1, #1
      ea:	d002      	beq.n	f2 <register_tm_clones+0x16>
      ec:	4b03      	ldr	r3, [pc, #12]	; (fc <register_tm_clones+0x20>)
      ee:	b103      	cbz	r3, f2 <register_tm_clones+0x16>
      f0:	4718      	bx	r3
      f2:	4770      	bx	lr
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      f4:	200022c0 	.word	0x200022c0
      f8:	200022c0 	.word	0x200022c0
      fc:	00000000 	.word	0x00000000

00000100 <frame_dummy>:
     100:	b508      	push	{r3, lr}
     102:	4b05      	ldr	r3, [pc, #20]	; (118 <frame_dummy+0x18>)
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	b11b      	cbz	r3, 10e <frame_dummy+0xe>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4905      	ldr	r1, [pc, #20]	; (11c <frame_dummy+0x1c>)
     108:	4805      	ldr	r0, [pc, #20]	; (120 <frame_dummy+0x20>)
     10a:	f3af 8000 	nop.w
     10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (newbuffer) {
     112:	f7ff bfe3 	b.w	dc <register_tm_clones>
		capacity = maxStrLen;
     116:	bf00      	nop
     118:	00000000 	.word	0x00000000
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	20003d50 	.word	0x20003d50
     120:	60012000 	.word	0x60012000

00000124 <NextArg(String&)>:
#include <Arduino.h>
#include "types.h"

// Get the next argument from a string and remove it
String NextArg(String &command) {
     124:	b570      	push	{r4, r5, r6, lr}
    String arg = command.substring(0, command.indexOf(" "));
     126:	4e17      	ldr	r6, [pc, #92]	; (184 <NextArg(String&)+0x60>)
String NextArg(String &command) {
     128:	b088      	sub	sp, #32
     12a:	460c      	mov	r4, r1
     12c:	4605      	mov	r5, r0
    String arg = command.substring(0, command.indexOf(" "));
     12e:	4631      	mov	r1, r6
     130:	a804      	add	r0, sp, #16
     132:	f003 faa3 	bl	367c <String::String(char const*)>
     136:	a904      	add	r1, sp, #16
     138:	4620      	mov	r0, r4
     13a:	f003 fbcb 	bl	38d4 <String::indexOf(String const&) const>
     13e:	2200      	movs	r2, #0
     140:	4603      	mov	r3, r0
     142:	4621      	mov	r1, r4
     144:	4628      	mov	r0, r5
     146:	f003 fc03 	bl	3950 <String::substring(unsigned int, unsigned int) const>
     14a:	a804      	add	r0, sp, #16
     14c:	f003 fa5a 	bl	3604 <String::~String()>
    command = command.substring(command.indexOf(" ") + 1);
     150:	4631      	mov	r1, r6
     152:	4668      	mov	r0, sp
     154:	f003 fa92 	bl	367c <String::String(char const*)>
     158:	4669      	mov	r1, sp
     15a:	4620      	mov	r0, r4
     15c:	f003 fbba 	bl	38d4 <String::indexOf(String const&) const>
     160:	4621      	mov	r1, r4
     162:	1c42      	adds	r2, r0, #1
     164:	a804      	add	r0, sp, #16
     166:	f003 fbc7 	bl	38f8 <String::substring(unsigned int) const>
     16a:	a904      	add	r1, sp, #16
     16c:	4620      	mov	r0, r4
     16e:	f003 faed 	bl	374c <String::operator=(String&&)>
     172:	a804      	add	r0, sp, #16
     174:	f003 fa46 	bl	3604 <String::~String()>
     178:	4668      	mov	r0, sp
     17a:	f003 fa43 	bl	3604 <String::~String()>
    return arg;
}
     17e:	4628      	mov	r0, r5
     180:	b008      	add	sp, #32
     182:	bd70      	pop	{r4, r5, r6, pc}
     184:	20000614 	.word	0x20000614

00000188 <MatchCommand(String)>:

Command MatchCommand(String command) {
     188:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     18a:	490d      	ldr	r1, [pc, #52]	; (1c0 <MatchCommand(String)+0x38>)
     18c:	4604      	mov	r4, r0
     18e:	f003 fb6f 	bl	3870 <String::equals(char const*) const>
    if (command == "set") {
     192:	b990      	cbnz	r0, 1ba <MatchCommand(String)+0x32>
        return Command::SET;
    } else if (command.toLowerCase() == "toggle") {
     194:	4620      	mov	r0, r4
     196:	f003 fc07 	bl	39a8 <String::toLowerCase()>
     19a:	490a      	ldr	r1, [pc, #40]	; (1c4 <MatchCommand(String)+0x3c>)
     19c:	f003 fb68 	bl	3870 <String::equals(char const*) const>
     1a0:	b948      	cbnz	r0, 1b6 <MatchCommand(String)+0x2e>
        return Command::TOGGLE;
    } else if (command.toLowerCase() == "help") {
     1a2:	4620      	mov	r0, r4
     1a4:	f003 fc00 	bl	39a8 <String::toLowerCase()>
     1a8:	4907      	ldr	r1, [pc, #28]	; (1c8 <MatchCommand(String)+0x40>)
     1aa:	f003 fb61 	bl	3870 <String::equals(char const*) const>
        return Command::SET;
     1ae:	3800      	subs	r0, #0
     1b0:	bf18      	it	ne
     1b2:	2001      	movne	r0, #1
        return Command::HELP;
    } else {
        return Command::INVALID;
    }
}
     1b4:	bd10      	pop	{r4, pc}
        return Command::TOGGLE;
     1b6:	2003      	movs	r0, #3
}
     1b8:	bd10      	pop	{r4, pc}
        return Command::SET;
     1ba:	2002      	movs	r0, #2
}
     1bc:	bd10      	pop	{r4, pc}
     1be:	bf00      	nop
     1c0:	20000450 	.word	0x20000450
     1c4:	20000454 	.word	0x20000454
     1c8:	2000045c 	.word	0x2000045c

000001cc <Help()>:

// Help menu
String Help() {
     1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1d0:	4604      	mov	r4, r0
     1d2:	b09c      	sub	sp, #112	; 0x70
    // TODO: Fill in commands
    String string =   "List of valid commands:\n";
     1d4:	493e      	ldr	r1, [pc, #248]	; (2d0 <Help()+0x104>)
     1d6:	f003 fa51 	bl	367c <String::String(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
     1da:	493e      	ldr	r1, [pc, #248]	; (2d4 <Help()+0x108>)
     1dc:	4620      	mov	r0, r4
     1de:	f003 fb21 	bl	3824 <String::append(char const*)>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     1e2:	493d      	ldr	r1, [pc, #244]	; (2d8 <Help()+0x10c>)
     1e4:	4668      	mov	r0, sp
     1e6:	f003 fa49 	bl	367c <String::String(char const*)>
            string += "set <target> <value>\n";
            string += "    | dac <int>\n" +
            string += "    | res <float>\n" +
     1ea:	4621      	mov	r1, r4
     1ec:	4668      	mov	r0, sp
     1ee:	f003 fb37 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     1f2:	493a      	ldr	r1, [pc, #232]	; (2dc <Help()+0x110>)
     1f4:	4605      	mov	r5, r0
     1f6:	a804      	add	r0, sp, #16
     1f8:	f003 fa40 	bl	367c <String::String(char const*)>
            string += "    | la <int>\n" +
     1fc:	4621      	mov	r1, r4
     1fe:	a804      	add	r0, sp, #16
     200:	f003 fb2e 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     204:	4936      	ldr	r1, [pc, #216]	; (2e0 <Help()+0x114>)
     206:	4606      	mov	r6, r0
     208:	a808      	add	r0, sp, #32
     20a:	f003 fa37 	bl	367c <String::String(char const*)>
            string += "    | pitch <float> (not implemented)\n" +
     20e:	4621      	mov	r1, r4
     210:	a808      	add	r0, sp, #32
     212:	f003 fb25 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     216:	4933      	ldr	r1, [pc, #204]	; (2e4 <Help()+0x118>)
     218:	4607      	mov	r7, r0
     21a:	a80c      	add	r0, sp, #48	; 0x30
     21c:	f003 fa2e 	bl	367c <String::String(char const*)>
            string += "toggle <traget>\n" +
     220:	4621      	mov	r1, r4
     222:	a80c      	add	r0, sp, #48	; 0x30
     224:	f003 fb1c 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     228:	492f      	ldr	r1, [pc, #188]	; (2e8 <Help()+0x11c>)
     22a:	4680      	mov	r8, r0
     22c:	a810      	add	r0, sp, #64	; 0x40
     22e:	f003 fa25 	bl	367c <String::String(char const*)>
            string += "    | pcc\n" +
     232:	4621      	mov	r1, r4
     234:	a810      	add	r0, sp, #64	; 0x40
     236:	f003 fb13 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     23a:	492c      	ldr	r1, [pc, #176]	; (2ec <Help()+0x120>)
     23c:	4681      	mov	r9, r0
     23e:	a814      	add	r0, sp, #80	; 0x50
     240:	f003 fa1c 	bl	367c <String::String(char const*)>
            string += "    | res (resistance tracking)\n" +
     244:	4621      	mov	r1, r4
     246:	a814      	add	r0, sp, #80	; 0x50
     248:	f003 fb0a 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     24c:	4928      	ldr	r1, [pc, #160]	; (2f0 <Help()+0x124>)
     24e:	4682      	mov	sl, r0
     250:	a818      	add	r0, sp, #96	; 0x60
     252:	f003 fa13 	bl	367c <String::String(char const*)>
            string += "    | print\n";
     256:	4621      	mov	r1, r4
     258:	a818      	add	r0, sp, #96	; 0x60
     25a:	f003 fb01 	bl	3860 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const char *cstr)		{return append(cstr);}
     25e:	4925      	ldr	r1, [pc, #148]	; (2f4 <Help()+0x128>)
     260:	f003 fae0 	bl	3824 <String::append(char const*)>
     264:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{return append(rhs);}
     266:	4650      	mov	r0, sl
     268:	f003 fad8 	bl	381c <String::append(String const&)>
     26c:	4601      	mov	r1, r0
     26e:	4648      	mov	r0, r9
     270:	f003 fad4 	bl	381c <String::append(String const&)>
     274:	4601      	mov	r1, r0
     276:	4640      	mov	r0, r8
     278:	f003 fad0 	bl	381c <String::append(String const&)>
     27c:	4601      	mov	r1, r0
     27e:	4638      	mov	r0, r7
     280:	f003 facc 	bl	381c <String::append(String const&)>
     284:	4601      	mov	r1, r0
     286:	4630      	mov	r0, r6
     288:	f003 fac8 	bl	381c <String::append(String const&)>
     28c:	4601      	mov	r1, r0
     28e:	4628      	mov	r0, r5
     290:	f003 fac4 	bl	381c <String::append(String const&)>
     294:	4601      	mov	r1, r0
     296:	4620      	mov	r0, r4
     298:	f003 fac0 	bl	381c <String::append(String const&)>
class StringSumHelper : public String
     29c:	a818      	add	r0, sp, #96	; 0x60
     29e:	f003 f9b1 	bl	3604 <String::~String()>
     2a2:	a814      	add	r0, sp, #80	; 0x50
     2a4:	f003 f9ae 	bl	3604 <String::~String()>
     2a8:	a810      	add	r0, sp, #64	; 0x40
     2aa:	f003 f9ab 	bl	3604 <String::~String()>
     2ae:	a80c      	add	r0, sp, #48	; 0x30
     2b0:	f003 f9a8 	bl	3604 <String::~String()>
     2b4:	a808      	add	r0, sp, #32
     2b6:	f003 f9a5 	bl	3604 <String::~String()>
     2ba:	a804      	add	r0, sp, #16
     2bc:	f003 f9a2 	bl	3604 <String::~String()>
     2c0:	4668      	mov	r0, sp
     2c2:	f003 f99f 	bl	3604 <String::~String()>
    return string;
     2c6:	4620      	mov	r0, r4
     2c8:	b01c      	add	sp, #112	; 0x70
     2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2ce:	bf00      	nop
     2d0:	20000500 	.word	0x20000500
     2d4:	2000051c 	.word	0x2000051c
     2d8:	20000534 	.word	0x20000534
     2dc:	20000548 	.word	0x20000548
     2e0:	2000055c 	.word	0x2000055c
     2e4:	2000056c 	.word	0x2000056c
     2e8:	20000594 	.word	0x20000594
     2ec:	200005a8 	.word	0x200005a8
     2f0:	200005b4 	.word	0x200005b4
     2f4:	200005d8 	.word	0x200005d8

000002f8 <CreateFilter(unsigned int, int)>:
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2f8:	b570      	push	{r4, r5, r6, lr}
     2fa:	4605      	mov	r5, r0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     2fc:	2018      	movs	r0, #24
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2fe:	460e      	mov	r6, r1
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     300:	f005 fc50 	bl	5ba4 <malloc>
    filter->oldestMoment = 0;
     304:	2300      	movs	r3, #0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     306:	4604      	mov	r4, r0
    filter->size = size;
     308:	6005      	str	r5, [r0, #0]
    filter->errorThreshold = 0.25;
     30a:	2200      	movs	r2, #0
    filter->oldestMoment = 0;
     30c:	6063      	str	r3, [r4, #4]
    filter->array = (int*)malloc(sizeof(int) * size);
     30e:	00a8      	lsls	r0, r5, #2
    filter->errorThreshold = 0.25;
     310:	4b04      	ldr	r3, [pc, #16]	; (324 <CreateFilter(unsigned int, int)+0x2c>)
    filter->peaks_per_rotation = peaks_per_rotation;
     312:	6126      	str	r6, [r4, #16]
    filter->errorThreshold = 0.25;
     314:	e9c4 2302 	strd	r2, r3, [r4, #8]
    filter->array = (int*)malloc(sizeof(int) * size);
     318:	f005 fc44 	bl	5ba4 <malloc>
     31c:	4603      	mov	r3, r0
}
     31e:	4620      	mov	r0, r4
    filter->array = (int*)malloc(sizeof(int) * size);
     320:	6163      	str	r3, [r4, #20]
}
     322:	bd70      	pop	{r4, r5, r6, pc}
     324:	3fd00000 	.word	0x3fd00000

00000328 <Insert(Filter*, int)>:
    int index = filter->oldestMoment;
     328:	6842      	ldr	r2, [r0, #4]
    *(filter->array + index) = value;
     32a:	6943      	ldr	r3, [r0, #20]
     32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    filter->oldestMoment++;
     330:	6843      	ldr	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     332:	6802      	ldr	r2, [r0, #0]
    filter->oldestMoment++;
     334:	3301      	adds	r3, #1
     336:	6043      	str	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     338:	6843      	ldr	r3, [r0, #4]
     33a:	4293      	cmp	r3, r2
     33c:	db01      	blt.n	342 <Insert(Filter*, int)+0x1a>
        filter->oldestMoment = 0;
     33e:	2300      	movs	r3, #0
     340:	6043      	str	r3, [r0, #4]
}
     342:	4770      	bx	lr
     344:	0000      	movs	r0, r0
	...

00000348 <GetRpmBuffered(Filter*)>:

double GetRpmBuffered(struct Filter* filter) {
    int highIndex = filter->oldestMoment - 1;
     348:	6841      	ldr	r1, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
    int lowIndex = filter->oldestMoment + 1;
     34a:	6843      	ldr	r3, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     34c:	6802      	ldr	r2, [r0, #0]
     34e:	3901      	subs	r1, #1
double GetRpmBuffered(struct Filter* filter) {
     350:	b410      	push	{r4}
    int lowIndex = filter->oldestMoment + 1;
     352:	f103 0401 	add.w	r4, r3, #1
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     356:	bf48      	it	mi
     358:	f102 31ff 	addmi.w	r1, r2, #4294967295
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     35c:	4294      	cmp	r4, r2
    lowIndex++;
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
    
    double high = (double) *(filter->array + highIndex);
     35e:	6944      	ldr	r4, [r0, #20]
    lowIndex++;
     360:	bfb4      	ite	lt
     362:	3302      	addlt	r3, #2
     364:	2301      	movge	r3, #1
    double high = (double) *(filter->array + highIndex);
     366:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     36a:	429a      	cmp	r2, r3
    double low = (double) *(filter->array + lowIndex);
     36c:	bfcc      	ite	gt
     36e:	009b      	lslgt	r3, r3, #2
     370:	2300      	movle	r3, #0
     372:	58e3      	ldr	r3, [r4, r3]
    
    if (high < low) {
     374:	4299      	cmp	r1, r3
     376:	db21      	blt.n	3bc <GetRpmBuffered(Filter*)+0x74>
    double high = (double) *(filter->array + highIndex);
     378:	ee07 1a90 	vmov	s15, r1
        return -1;
    }
    
    double period = (high - low) / (filter->size - 3);
     37c:	3a03      	subs	r2, #3
    period = period / 1000000; // convert us -> s
    double rpm = 60/ period;
    return rpm / (double)filter->peaks_per_rotation;
     37e:	ed90 5a04 	vldr	s10, [r0, #16]
    double high = (double) *(filter->array + highIndex);
     382:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    double low = (double) *(filter->array + lowIndex);
     386:	ee07 3a90 	vmov	s15, r3
    return rpm / (double)filter->peaks_per_rotation;
     38a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
}
     38e:	f85d 4b04 	ldr.w	r4, [sp], #4
    double low = (double) *(filter->array + lowIndex);
     392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    period = period / 1000000; // convert us -> s
     396:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 3c8 <GetRpmBuffered(Filter*)+0x80>
    double period = (high - low) / (filter->size - 3);
     39a:	ee36 6b47 	vsub.f64	d6, d6, d7
     39e:	ee07 2a90 	vmov	s15, r2
     3a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    double rpm = 60/ period;
     3a6:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 3d0 <GetRpmBuffered(Filter*)+0x88>
    double period = (high - low) / (filter->size - 3);
     3aa:	ee86 2b07 	vdiv.f64	d2, d6, d7
    period = period / 1000000; // convert us -> s
     3ae:	ee82 6b03 	vdiv.f64	d6, d2, d3
    double rpm = 60/ period;
     3b2:	ee84 7b06 	vdiv.f64	d7, d4, d6
    return rpm / (double)filter->peaks_per_rotation;
     3b6:	ee87 0b05 	vdiv.f64	d0, d7, d5
}
     3ba:	4770      	bx	lr
        return -1;
     3bc:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
}
     3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
     3c4:	4770      	bx	lr
     3c6:	bf00      	nop
     3c8:	00000000 	.word	0x00000000
     3cc:	412e8480 	.word	0x412e8480
     3d0:	00000000 	.word	0x00000000
     3d4:	404e0000 	.word	0x404e0000

000003d8 <RPM_Interrupt()>:
        Serial.println("Try \"help\"");
    }
}

// Interrupt for measuring the RPM
void RPM_Interrupt () {
     3d8:	b508      	push	{r3, lr}
    int time = (int)micros();
     3da:	f003 fcfd 	bl	3dd8 <micros>
    Insert(rpm_filter, time);
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <RPM_Interrupt()+0x14>)
    int time = (int)micros();
     3e0:	4601      	mov	r1, r0
    Insert(rpm_filter, time);
     3e2:	6818      	ldr	r0, [r3, #0]
     3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Insert(rpm_filter, time);
     3e8:	f7ff bf9e 	b.w	328 <Insert(Filter*, int)>
     3ec:	20003d78 	.word	0x20003d78

000003f0 <setup>:
void setup () {
     3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     3f4:	4d6e      	ldr	r5, [pc, #440]	; (5b0 <setup+0x1c0>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     3f6:	f240 28ee 	movw	r8, #750	; 0x2ee
     3fa:	4c6e      	ldr	r4, [pc, #440]	; (5b4 <setup+0x1c4>)
     3fc:	4f6e      	ldr	r7, [pc, #440]	; (5b8 <setup+0x1c8>)
     3fe:	f8df 9204 	ldr.w	r9, [pc, #516]	; 604 <setup+0x214>
		uint32_t millis_begin = systick_millis_count;
     402:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     404:	f005 faba 	bl	597c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     408:	7823      	ldrb	r3, [r4, #0]
     40a:	2b00      	cmp	r3, #0
     40c:	f000 808c 	beq.w	528 <setup+0x138>
     410:	783b      	ldrb	r3, [r7, #0]
     412:	07da      	lsls	r2, r3, #31
     414:	f140 8088 	bpl.w	528 <setup+0x138>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     418:	682b      	ldr	r3, [r5, #0]
     41a:	f8d9 2000 	ldr.w	r2, [r9]
     41e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     420:	2b0e      	cmp	r3, #14
     422:	f240 8081 	bls.w	528 <setup+0x138>
		yield();
     426:	f005 faa9 	bl	597c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     42a:	7823      	ldrb	r3, [r4, #0]
        delay(10);
     42c:	200a      	movs	r0, #10
     42e:	2b00      	cmp	r3, #0
     430:	f000 8085 	beq.w	53e <setup+0x14e>
     434:	783b      	ldrb	r3, [r7, #0]
     436:	07db      	lsls	r3, r3, #31
     438:	f140 8081 	bpl.w	53e <setup+0x14e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     43c:	682b      	ldr	r3, [r5, #0]
     43e:	f8d9 2000 	ldr.w	r2, [r9]
     442:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     444:	2b0e      	cmp	r3, #14
     446:	d97a      	bls.n	53e <setup+0x14e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     448:	210e      	movs	r1, #14
     44a:	485c      	ldr	r0, [pc, #368]	; (5bc <setup+0x1cc>)
     44c:	f005 fa18 	bl	5880 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     450:	485b      	ldr	r0, [pc, #364]	; (5c0 <setup+0x1d0>)
     452:	f003 f849 	bl	34e8 <Print::println()>
    pinMode(Safety_Switch_Pin, INPUT);
     456:	2100      	movs	r1, #0
     458:	200b      	movs	r0, #11
     45a:	f003 fd23 	bl	3ea4 <pinMode>
    myServo.begin(32);
     45e:	2120      	movs	r1, #32
     460:	4858      	ldr	r0, [pc, #352]	; (5c4 <setup+0x1d4>)
     462:	f001 f891 	bl	1588 <PA12::begin(int)>
    delay(100);
     466:	2064      	movs	r0, #100	; 0x64
     468:	f003 fc62 	bl	3d30 <delay>
    if (myServo.available()) {
     46c:	4855      	ldr	r0, [pc, #340]	; (5c4 <setup+0x1d4>)
     46e:	f001 f8e1 	bl	1634 <PA12::available()>
     472:	2115      	movs	r1, #21
     474:	4603      	mov	r3, r0
     476:	2800      	cmp	r0, #0
     478:	d067      	beq.n	54a <setup+0x15a>
     47a:	4853      	ldr	r0, [pc, #332]	; (5c8 <setup+0x1d8>)
    bool success = true;
     47c:	2401      	movs	r4, #1
     47e:	f005 f9ff 	bl	5880 <usb_serial_write>
     482:	484f      	ldr	r0, [pc, #316]	; (5c0 <setup+0x1d0>)
     484:	f003 f830 	bl	34e8 <Print::println()>
    myServo.movingSpeed(LA_ID_NUM, 750);
     488:	f240 22ee 	movw	r2, #750	; 0x2ee
     48c:	2100      	movs	r1, #0
     48e:	484d      	ldr	r0, [pc, #308]	; (5c4 <setup+0x1d4>)
     490:	f001 fafe 	bl	1a90 <PA12::movingSpeed(int, int)>
    ina260.begin(0x40);
     494:	2140      	movs	r1, #64	; 0x40
     496:	4a4d      	ldr	r2, [pc, #308]	; (5cc <setup+0x1dc>)
     498:	484d      	ldr	r0, [pc, #308]	; (5d0 <setup+0x1e0>)
     49a:	f001 fb87 	bl	1bac <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     49e:	200a      	movs	r0, #10
     4a0:	f003 fc46 	bl	3d30 <delay>
    if (ina260.conversionReady()) {
     4a4:	484a      	ldr	r0, [pc, #296]	; (5d0 <setup+0x1e0>)
     4a6:	f001 fc49 	bl	1d3c <Adafruit_INA260::conversionReady()>
     4aa:	210c      	movs	r1, #12
     4ac:	4606      	mov	r6, r0
     4ae:	2800      	cmp	r0, #0
     4b0:	d053      	beq.n	55a <setup+0x16a>
     4b2:	4848      	ldr	r0, [pc, #288]	; (5d4 <setup+0x1e4>)
     4b4:	f005 f9e4 	bl	5880 <usb_serial_write>
     4b8:	4841      	ldr	r0, [pc, #260]	; (5c0 <setup+0x1d0>)
     4ba:	f003 f815 	bl	34e8 <Print::println()>
    dac.begin(0x64);
     4be:	2164      	movs	r1, #100	; 0x64
     4c0:	4845      	ldr	r0, [pc, #276]	; (5d8 <setup+0x1e8>)
     4c2:	f002 f9d9 	bl	2878 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     4c6:	200a      	movs	r0, #10
     4c8:	f003 fc32 	bl	3d30 <delay>
    dac.setVoltage(dacValue, false);
     4cc:	4b43      	ldr	r3, [pc, #268]	; (5dc <setup+0x1ec>)
     4ce:	2200      	movs	r2, #0
     4d0:	4841      	ldr	r0, [pc, #260]	; (5d8 <setup+0x1e8>)
     4d2:	8819      	ldrh	r1, [r3, #0]
     4d4:	f002 f9d8 	bl	2888 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     4d8:	2109      	movs	r1, #9
     4da:	4841      	ldr	r0, [pc, #260]	; (5e0 <setup+0x1f0>)
     4dc:	f005 f9d0 	bl	5880 <usb_serial_write>
     4e0:	4837      	ldr	r0, [pc, #220]	; (5c0 <setup+0x1d0>)
     4e2:	f003 f801 	bl	34e8 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     4e6:	2101      	movs	r1, #1
     4e8:	2021      	movs	r0, #33	; 0x21
     4ea:	f003 fcdb 	bl	3ea4 <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     4ee:	2203      	movs	r2, #3
     4f0:	493c      	ldr	r1, [pc, #240]	; (5e4 <setup+0x1f4>)
     4f2:	201d      	movs	r0, #29
     4f4:	f003 fd10 	bl	3f18 <attachInterrupt>
    if (success) {
     4f8:	2c00      	cmp	r4, #0
     4fa:	d051      	beq.n	5a0 <setup+0x1b0>
     4fc:	210e      	movs	r1, #14
     4fe:	483a      	ldr	r0, [pc, #232]	; (5e8 <setup+0x1f8>)
     500:	f005 f9be 	bl	5880 <usb_serial_write>
     504:	482e      	ldr	r0, [pc, #184]	; (5c0 <setup+0x1d0>)
     506:	f002 ffef 	bl	34e8 <Print::println()>
     50a:	2122      	movs	r1, #34	; 0x22
     50c:	4837      	ldr	r0, [pc, #220]	; (5ec <setup+0x1fc>)
     50e:	f005 f9b7 	bl	5880 <usb_serial_write>
     512:	482b      	ldr	r0, [pc, #172]	; (5c0 <setup+0x1d0>)
     514:	f002 ffe8 	bl	34e8 <Print::println()>
     518:	6828      	ldr	r0, [r5, #0]
    printTimer = millis();
     51a:	4935      	ldr	r1, [pc, #212]	; (5f0 <setup+0x200>)
     51c:	682a      	ldr	r2, [r5, #0]
    resistanceTracingTimer = millis();
     51e:	4b35      	ldr	r3, [pc, #212]	; (5f4 <setup+0x204>)
    printTimer = millis();
     520:	6008      	str	r0, [r1, #0]
    resistanceTracingTimer = millis();
     522:	601a      	str	r2, [r3, #0]
}
     524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     528:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     52a:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     52c:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     52e:	b14a      	cbz	r2, 544 <setup+0x154>
				if (elapsed > 2000) break;
     530:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     534:	f63f af77 	bhi.w	426 <setup+0x36>
			yield();
     538:	f005 fa20 	bl	597c <yield>
     53c:	e762      	b.n	404 <setup+0x14>
        delay(10);
     53e:	f003 fbf7 	bl	3d30 <delay>
     542:	e770      	b.n	426 <setup+0x36>
				if (elapsed > 750) break;
     544:	4543      	cmp	r3, r8
     546:	d9f7      	bls.n	538 <setup+0x148>
     548:	e76d      	b.n	426 <setup+0x36>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     54a:	482b      	ldr	r0, [pc, #172]	; (5f8 <setup+0x208>)
        success = false;
     54c:	461c      	mov	r4, r3
     54e:	f005 f997 	bl	5880 <usb_serial_write>
     552:	481b      	ldr	r0, [pc, #108]	; (5c0 <setup+0x1d0>)
     554:	f002 ffc8 	bl	34e8 <Print::println()>
     558:	e796      	b.n	488 <setup+0x98>
     55a:	4828      	ldr	r0, [pc, #160]	; (5fc <setup+0x20c>)
     55c:	f005 f990 	bl	5880 <usb_serial_write>
     560:	4817      	ldr	r0, [pc, #92]	; (5c0 <setup+0x1d0>)
     562:	f002 ffc1 	bl	34e8 <Print::println()>
    dac.begin(0x64);
     566:	2164      	movs	r1, #100	; 0x64
     568:	481b      	ldr	r0, [pc, #108]	; (5d8 <setup+0x1e8>)
     56a:	f002 f985 	bl	2878 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     56e:	200a      	movs	r0, #10
     570:	f003 fbde 	bl	3d30 <delay>
    dac.setVoltage(dacValue, false);
     574:	4b19      	ldr	r3, [pc, #100]	; (5dc <setup+0x1ec>)
     576:	4632      	mov	r2, r6
     578:	4817      	ldr	r0, [pc, #92]	; (5d8 <setup+0x1e8>)
     57a:	8819      	ldrh	r1, [r3, #0]
     57c:	f002 f984 	bl	2888 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     580:	2109      	movs	r1, #9
     582:	4817      	ldr	r0, [pc, #92]	; (5e0 <setup+0x1f0>)
     584:	f005 f97c 	bl	5880 <usb_serial_write>
     588:	480d      	ldr	r0, [pc, #52]	; (5c0 <setup+0x1d0>)
     58a:	f002 ffad 	bl	34e8 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     58e:	2101      	movs	r1, #1
     590:	2021      	movs	r0, #33	; 0x21
     592:	f003 fc87 	bl	3ea4 <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     596:	2203      	movs	r2, #3
     598:	4912      	ldr	r1, [pc, #72]	; (5e4 <setup+0x1f4>)
     59a:	201d      	movs	r0, #29
     59c:	f003 fcbc 	bl	3f18 <attachInterrupt>
     5a0:	210c      	movs	r1, #12
     5a2:	4817      	ldr	r0, [pc, #92]	; (600 <setup+0x210>)
     5a4:	f005 f96c 	bl	5880 <usb_serial_write>
     5a8:	4805      	ldr	r0, [pc, #20]	; (5c0 <setup+0x1d0>)
     5aa:	f002 ff9d 	bl	34e8 <Print::println()>
     5ae:	e7ac      	b.n	50a <setup+0x11a>
     5b0:	20003dc4 	.word	0x20003dc4
     5b4:	20003df3 	.word	0x20003df3
     5b8:	20003df2 	.word	0x20003df2
     5bc:	20001008 	.word	0x20001008
     5c0:	200012b8 	.word	0x200012b8
     5c4:	20003308 	.word	0x20003308
     5c8:	20001018 	.word	0x20001018
     5cc:	20002878 	.word	0x20002878
     5d0:	200032f8 	.word	0x200032f8
     5d4:	20001048 	.word	0x20001048
     5d8:	200032d0 	.word	0x200032d0
     5dc:	20001d92 	.word	0x20001d92
     5e0:	20001058 	.word	0x20001058
     5e4:	000003d9 	.word	0x000003d9
     5e8:	20001074 	.word	0x20001074
     5ec:	20001094 	.word	0x20001094
     5f0:	20003d68 	.word	0x20003d68
     5f4:	20003d74 	.word	0x20003d74
     5f8:	20001030 	.word	0x20001030
     5fc:	20001064 	.word	0x20001064
     600:	20001084 	.word	0x20001084
     604:	20003dd4 	.word	0x20003dd4

00000608 <PrintOutput()>:
void PrintOutput () {
     608:	b530      	push	{r4, r5, lr}
     60a:	b095      	sub	sp, #84	; 0x54
     60c:	2103      	movs	r1, #3
     60e:	48bc      	ldr	r0, [pc, #752]	; (900 <PrintOutput()+0x2f8>)
     610:	f005 f936 	bl	5880 <usb_serial_write>
	StringSumHelper(const char *p) : String(p) {}
     614:	49bb      	ldr	r1, [pc, #748]	; (904 <PrintOutput()+0x2fc>)
     616:	a80c      	add	r0, sp, #48	; 0x30
     618:	ac10      	add	r4, sp, #64	; 0x40
     61a:	f003 f82f 	bl	367c <String::String(char const*)>
     61e:	4bba      	ldr	r3, [pc, #744]	; (908 <PrintOutput()+0x300>)
    Serial.println("Time:          \t" + PadString(String(millis())));
     620:	220a      	movs	r2, #10
     622:	a808      	add	r0, sp, #32
     624:	6819      	ldr	r1, [r3, #0]
     626:	f003 f855 	bl	36d4 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     62a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     62c:	2b07      	cmp	r3, #7
     62e:	d812      	bhi.n	656 <PrintOutput()+0x4e>
     630:	4db6      	ldr	r5, [pc, #728]	; (90c <PrintOutput()+0x304>)
     632:	4629      	mov	r1, r5
     634:	4620      	mov	r0, r4
     636:	f003 f821 	bl	367c <String::String(char const*)>
        str = " " + str;
     63a:	a908      	add	r1, sp, #32
     63c:	4620      	mov	r0, r4
     63e:	f003 f90f 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     642:	4601      	mov	r1, r0
     644:	a808      	add	r0, sp, #32
     646:	f003 f879 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     64a:	4620      	mov	r0, r4
     64c:	f002 ffda 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     652:	2b07      	cmp	r3, #7
     654:	d9ed      	bls.n	632 <PrintOutput()+0x2a>
    return str;
     656:	a908      	add	r1, sp, #32
     658:	4620      	mov	r0, r4
     65a:	f002 ffbd 	bl	35d8 <String::String(String&&)>
    Serial.println("Time:          \t" + PadString(String(millis())));
     65e:	4621      	mov	r1, r4
     660:	a80c      	add	r0, sp, #48	; 0x30
     662:	f003 f8fd 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     666:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     668:	48a9      	ldr	r0, [pc, #676]	; (910 <PrintOutput()+0x308>)
     66a:	f002 ff17 	bl	349c <Print::print(String const&)>
     66e:	48a8      	ldr	r0, [pc, #672]	; (910 <PrintOutput()+0x308>)
     670:	f002 ff3a 	bl	34e8 <Print::println()>
     674:	4620      	mov	r0, r4
     676:	f002 ffc5 	bl	3604 <String::~String()>
     67a:	a808      	add	r0, sp, #32
     67c:	f002 ffc2 	bl	3604 <String::~String()>
     680:	a80c      	add	r0, sp, #48	; 0x30
     682:	f002 ffbf 	bl	3604 <String::~String()>
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     686:	2021      	movs	r0, #33	; 0x21
     688:	f003 fbfa 	bl	3e80 <digitalRead>
     68c:	4aa1      	ldr	r2, [pc, #644]	; (914 <PrintOutput()+0x30c>)
     68e:	49a2      	ldr	r1, [pc, #648]	; (918 <PrintOutput()+0x310>)
     690:	2800      	cmp	r0, #0
     692:	bf18      	it	ne
     694:	4611      	movne	r1, r2
     696:	4668      	mov	r0, sp
     698:	f002 fff0 	bl	367c <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     69c:	499f      	ldr	r1, [pc, #636]	; (91c <PrintOutput()+0x314>)
     69e:	a80c      	add	r0, sp, #48	; 0x30
     6a0:	f002 ffec 	bl	367c <String::String(char const*)>
    Serial.println("\tRelay State: " + PadString(relayState));
     6a4:	4669      	mov	r1, sp
     6a6:	a808      	add	r0, sp, #32
     6a8:	f002 ff78 	bl	359c <String::String(String const&)>
    while (str.length() < 8) {
     6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     6ae:	2b07      	cmp	r3, #7
     6b0:	d812      	bhi.n	6d8 <PrintOutput()+0xd0>
     6b2:	4d96      	ldr	r5, [pc, #600]	; (90c <PrintOutput()+0x304>)
     6b4:	4629      	mov	r1, r5
     6b6:	4620      	mov	r0, r4
     6b8:	f002 ffe0 	bl	367c <String::String(char const*)>
        str = " " + str;
     6bc:	a908      	add	r1, sp, #32
     6be:	4620      	mov	r0, r4
     6c0:	f003 f8ce 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     6c4:	4601      	mov	r1, r0
     6c6:	a808      	add	r0, sp, #32
     6c8:	f003 f838 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     6cc:	4620      	mov	r0, r4
     6ce:	f002 ff99 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     6d4:	2b07      	cmp	r3, #7
     6d6:	d9ed      	bls.n	6b4 <PrintOutput()+0xac>
    return str;
     6d8:	a908      	add	r1, sp, #32
     6da:	4620      	mov	r0, r4
     6dc:	f002 ff7c 	bl	35d8 <String::String(String&&)>
    Serial.println("\tRelay State: " + PadString(relayState));
     6e0:	4621      	mov	r1, r4
     6e2:	a80c      	add	r0, sp, #48	; 0x30
     6e4:	f003 f8bc 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     6e8:	4601      	mov	r1, r0
     6ea:	4889      	ldr	r0, [pc, #548]	; (910 <PrintOutput()+0x308>)
     6ec:	f002 fed6 	bl	349c <Print::print(String const&)>
     6f0:	4887      	ldr	r0, [pc, #540]	; (910 <PrintOutput()+0x308>)
     6f2:	f002 fef9 	bl	34e8 <Print::println()>
     6f6:	4620      	mov	r0, r4
     6f8:	f002 ff84 	bl	3604 <String::~String()>
     6fc:	a808      	add	r0, sp, #32
     6fe:	f002 ff81 	bl	3604 <String::~String()>
     702:	a80c      	add	r0, sp, #48	; 0x30
     704:	f002 ff7e 	bl	3604 <String::~String()>
    String turbineVoltage = digitalRead(30) ? "High" : "Low";
     708:	201e      	movs	r0, #30
     70a:	f003 fbb9 	bl	3e80 <digitalRead>
     70e:	4a81      	ldr	r2, [pc, #516]	; (914 <PrintOutput()+0x30c>)
     710:	4981      	ldr	r1, [pc, #516]	; (918 <PrintOutput()+0x310>)
     712:	2800      	cmp	r0, #0
     714:	bf18      	it	ne
     716:	4611      	movne	r1, r2
     718:	a804      	add	r0, sp, #16
     71a:	f002 ffaf 	bl	367c <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     71e:	4980      	ldr	r1, [pc, #512]	; (920 <PrintOutput()+0x318>)
     720:	a80c      	add	r0, sp, #48	; 0x30
     722:	f002 ffab 	bl	367c <String::String(char const*)>
    Serial.println("\tT-Side Volt: " + PadString(turbineVoltage));
     726:	a904      	add	r1, sp, #16
     728:	a808      	add	r0, sp, #32
     72a:	f002 ff37 	bl	359c <String::String(String const&)>
    while (str.length() < 8) {
     72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     730:	2b07      	cmp	r3, #7
     732:	d812      	bhi.n	75a <PrintOutput()+0x152>
     734:	4d75      	ldr	r5, [pc, #468]	; (90c <PrintOutput()+0x304>)
     736:	4629      	mov	r1, r5
     738:	4620      	mov	r0, r4
     73a:	f002 ff9f 	bl	367c <String::String(char const*)>
        str = " " + str;
     73e:	a908      	add	r1, sp, #32
     740:	4620      	mov	r0, r4
     742:	f003 f88d 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     746:	4601      	mov	r1, r0
     748:	a808      	add	r0, sp, #32
     74a:	f002 fff7 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     74e:	4620      	mov	r0, r4
     750:	f002 ff58 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     756:	2b07      	cmp	r3, #7
     758:	d9ed      	bls.n	736 <PrintOutput()+0x12e>
    return str;
     75a:	a908      	add	r1, sp, #32
     75c:	4620      	mov	r0, r4
     75e:	f002 ff3b 	bl	35d8 <String::String(String&&)>
    Serial.println("\tT-Side Volt: " + PadString(turbineVoltage));
     762:	4621      	mov	r1, r4
     764:	a80c      	add	r0, sp, #48	; 0x30
     766:	f003 f87b 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     76a:	4601      	mov	r1, r0
     76c:	4868      	ldr	r0, [pc, #416]	; (910 <PrintOutput()+0x308>)
     76e:	f002 fe95 	bl	349c <Print::print(String const&)>
     772:	4867      	ldr	r0, [pc, #412]	; (910 <PrintOutput()+0x308>)
     774:	f002 feb8 	bl	34e8 <Print::println()>
     778:	4620      	mov	r0, r4
     77a:	f002 ff43 	bl	3604 <String::~String()>
     77e:	a808      	add	r0, sp, #32
     780:	f002 ff40 	bl	3604 <String::~String()>
     784:	a80c      	add	r0, sp, #48	; 0x30
     786:	f002 ff3d 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     78a:	4966      	ldr	r1, [pc, #408]	; (924 <PrintOutput()+0x31c>)
     78c:	a80c      	add	r0, sp, #48	; 0x30
     78e:	f002 ff75 	bl	367c <String::String(char const*)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     792:	2100      	movs	r1, #0
     794:	4864      	ldr	r0, [pc, #400]	; (928 <PrintOutput()+0x320>)
     796:	f001 f995 	bl	1ac4 <PA12::presentPosition(int)>
     79a:	220a      	movs	r2, #10
     79c:	4601      	mov	r1, r0
     79e:	a808      	add	r0, sp, #32
     7a0:	f002 ff80 	bl	36a4 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     7a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     7a6:	2b07      	cmp	r3, #7
     7a8:	d812      	bhi.n	7d0 <PrintOutput()+0x1c8>
     7aa:	4d58      	ldr	r5, [pc, #352]	; (90c <PrintOutput()+0x304>)
     7ac:	4629      	mov	r1, r5
     7ae:	4620      	mov	r0, r4
     7b0:	f002 ff64 	bl	367c <String::String(char const*)>
        str = " " + str;
     7b4:	a908      	add	r1, sp, #32
     7b6:	4620      	mov	r0, r4
     7b8:	f003 f852 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     7bc:	4601      	mov	r1, r0
     7be:	a808      	add	r0, sp, #32
     7c0:	f002 ffbc 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     7c4:	4620      	mov	r0, r4
     7c6:	f002 ff1d 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     7cc:	2b07      	cmp	r3, #7
     7ce:	d9ed      	bls.n	7ac <PrintOutput()+0x1a4>
    return str;
     7d0:	a908      	add	r1, sp, #32
     7d2:	4620      	mov	r0, r4
     7d4:	f002 ff00 	bl	35d8 <String::String(String&&)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     7d8:	4621      	mov	r1, r4
     7da:	a80c      	add	r0, sp, #48	; 0x30
     7dc:	f003 f840 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     7e0:	4601      	mov	r1, r0
     7e2:	484b      	ldr	r0, [pc, #300]	; (910 <PrintOutput()+0x308>)
     7e4:	f002 fe5a 	bl	349c <Print::print(String const&)>
     7e8:	4849      	ldr	r0, [pc, #292]	; (910 <PrintOutput()+0x308>)
     7ea:	f002 fe7d 	bl	34e8 <Print::println()>
     7ee:	4620      	mov	r0, r4
     7f0:	f002 ff08 	bl	3604 <String::~String()>
     7f4:	a808      	add	r0, sp, #32
     7f6:	f002 ff05 	bl	3604 <String::~String()>
     7fa:	a80c      	add	r0, sp, #48	; 0x30
     7fc:	f002 ff02 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     800:	494a      	ldr	r1, [pc, #296]	; (92c <PrintOutput()+0x324>)
     802:	a80c      	add	r0, sp, #48	; 0x30
     804:	f002 ff3a 	bl	367c <String::String(char const*)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     808:	4b49      	ldr	r3, [pc, #292]	; (930 <PrintOutput()+0x328>)
     80a:	220a      	movs	r2, #10
     80c:	a808      	add	r0, sp, #32
     80e:	8819      	ldrh	r1, [r3, #0]
     810:	f002 ff48 	bl	36a4 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     816:	2b07      	cmp	r3, #7
     818:	d812      	bhi.n	840 <PrintOutput()+0x238>
     81a:	4d3c      	ldr	r5, [pc, #240]	; (90c <PrintOutput()+0x304>)
     81c:	4629      	mov	r1, r5
     81e:	4620      	mov	r0, r4
     820:	f002 ff2c 	bl	367c <String::String(char const*)>
        str = " " + str;
     824:	a908      	add	r1, sp, #32
     826:	4620      	mov	r0, r4
     828:	f003 f81a 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     82c:	4601      	mov	r1, r0
     82e:	a808      	add	r0, sp, #32
     830:	f002 ff84 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     834:	4620      	mov	r0, r4
     836:	f002 fee5 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     83c:	2b07      	cmp	r3, #7
     83e:	d9ed      	bls.n	81c <PrintOutput()+0x214>
    return str;
     840:	a908      	add	r1, sp, #32
     842:	4620      	mov	r0, r4
     844:	f002 fec8 	bl	35d8 <String::String(String&&)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     848:	4621      	mov	r1, r4
     84a:	a80c      	add	r0, sp, #48	; 0x30
     84c:	f003 f808 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     850:	4601      	mov	r1, r0
     852:	482f      	ldr	r0, [pc, #188]	; (910 <PrintOutput()+0x308>)
     854:	f002 fe22 	bl	349c <Print::print(String const&)>
     858:	482d      	ldr	r0, [pc, #180]	; (910 <PrintOutput()+0x308>)
     85a:	f002 fe45 	bl	34e8 <Print::println()>
     85e:	4620      	mov	r0, r4
     860:	f002 fed0 	bl	3604 <String::~String()>
     864:	a808      	add	r0, sp, #32
     866:	f002 fecd 	bl	3604 <String::~String()>
     86a:	a80c      	add	r0, sp, #48	; 0x30
     86c:	f002 feca 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     870:	4930      	ldr	r1, [pc, #192]	; (934 <PrintOutput()+0x32c>)
     872:	a80c      	add	r0, sp, #48	; 0x30
     874:	f002 ff02 	bl	367c <String::String(char const*)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     878:	482f      	ldr	r0, [pc, #188]	; (938 <PrintOutput()+0x330>)
     87a:	f001 fa11 	bl	1ca0 <Adafruit_INA260::readCurrent()>
     87e:	2102      	movs	r1, #2
     880:	a808      	add	r0, sp, #32
     882:	f002 ff3f 	bl	3704 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     888:	2b07      	cmp	r3, #7
     88a:	d812      	bhi.n	8b2 <PrintOutput()+0x2aa>
     88c:	4d1f      	ldr	r5, [pc, #124]	; (90c <PrintOutput()+0x304>)
     88e:	4629      	mov	r1, r5
     890:	4620      	mov	r0, r4
     892:	f002 fef3 	bl	367c <String::String(char const*)>
        str = " " + str;
     896:	a908      	add	r1, sp, #32
     898:	4620      	mov	r0, r4
     89a:	f002 ffe1 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     89e:	4601      	mov	r1, r0
     8a0:	a808      	add	r0, sp, #32
     8a2:	f002 ff4b 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     8a6:	4620      	mov	r0, r4
     8a8:	f002 feac 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     8ae:	2b07      	cmp	r3, #7
     8b0:	d9ed      	bls.n	88e <PrintOutput()+0x286>
    return str;
     8b2:	a908      	add	r1, sp, #32
     8b4:	4620      	mov	r0, r4
     8b6:	f002 fe8f 	bl	35d8 <String::String(String&&)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     8ba:	4621      	mov	r1, r4
     8bc:	a80c      	add	r0, sp, #48	; 0x30
     8be:	f002 ffcf 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     8c2:	4601      	mov	r1, r0
     8c4:	4812      	ldr	r0, [pc, #72]	; (910 <PrintOutput()+0x308>)
     8c6:	f002 fde9 	bl	349c <Print::print(String const&)>
     8ca:	4811      	ldr	r0, [pc, #68]	; (910 <PrintOutput()+0x308>)
     8cc:	f002 fe0c 	bl	34e8 <Print::println()>
     8d0:	4620      	mov	r0, r4
     8d2:	f002 fe97 	bl	3604 <String::~String()>
     8d6:	a808      	add	r0, sp, #32
     8d8:	f002 fe94 	bl	3604 <String::~String()>
     8dc:	a80c      	add	r0, sp, #48	; 0x30
     8de:	f002 fe91 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     8e2:	4916      	ldr	r1, [pc, #88]	; (93c <PrintOutput()+0x334>)
     8e4:	a80c      	add	r0, sp, #48	; 0x30
     8e6:	f002 fec9 	bl	367c <String::String(char const*)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     8ea:	4813      	ldr	r0, [pc, #76]	; (938 <PrintOutput()+0x330>)
     8ec:	f001 f9f4 	bl	1cd8 <Adafruit_INA260::readBusVoltage()>
     8f0:	2102      	movs	r1, #2
     8f2:	a808      	add	r0, sp, #32
     8f4:	f002 ff06 	bl	3704 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     8fa:	2b07      	cmp	r3, #7
     8fc:	e020      	b.n	940 <PrintOutput()+0x338>
     8fe:	bf00      	nop
     900:	200003b8 	.word	0x200003b8
     904:	200003bc 	.word	0x200003bc
     908:	20003dc4 	.word	0x20003dc4
     90c:	20000614 	.word	0x20000614
     910:	200012b8 	.word	0x200012b8
     914:	200003ac 	.word	0x200003ac
     918:	200003b4 	.word	0x200003b4
     91c:	200003d0 	.word	0x200003d0
     920:	200003e0 	.word	0x200003e0
     924:	200003f0 	.word	0x200003f0
     928:	20003308 	.word	0x20003308
     92c:	20000400 	.word	0x20000400
     930:	20001d92 	.word	0x20001d92
     934:	20000410 	.word	0x20000410
     938:	200032f8 	.word	0x200032f8
     93c:	20000420 	.word	0x20000420
     940:	d812      	bhi.n	968 <PrintOutput()+0x360>
     942:	4d54      	ldr	r5, [pc, #336]	; (a94 <PrintOutput()+0x48c>)
     944:	4629      	mov	r1, r5
     946:	4620      	mov	r0, r4
     948:	f002 fe98 	bl	367c <String::String(char const*)>
        str = " " + str;
     94c:	a908      	add	r1, sp, #32
     94e:	4620      	mov	r0, r4
     950:	f002 ff86 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     954:	4601      	mov	r1, r0
     956:	a808      	add	r0, sp, #32
     958:	f002 fef0 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     95c:	4620      	mov	r0, r4
     95e:	f002 fe51 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     964:	2b07      	cmp	r3, #7
     966:	d9ed      	bls.n	944 <PrintOutput()+0x33c>
    return str;
     968:	a908      	add	r1, sp, #32
     96a:	4620      	mov	r0, r4
     96c:	f002 fe34 	bl	35d8 <String::String(String&&)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     970:	4621      	mov	r1, r4
     972:	a80c      	add	r0, sp, #48	; 0x30
     974:	f002 ff74 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     978:	4601      	mov	r1, r0
     97a:	4847      	ldr	r0, [pc, #284]	; (a98 <PrintOutput()+0x490>)
     97c:	f002 fd8e 	bl	349c <Print::print(String const&)>
     980:	4845      	ldr	r0, [pc, #276]	; (a98 <PrintOutput()+0x490>)
     982:	f002 fdb1 	bl	34e8 <Print::println()>
     986:	4620      	mov	r0, r4
     988:	f002 fe3c 	bl	3604 <String::~String()>
     98c:	a808      	add	r0, sp, #32
     98e:	f002 fe39 	bl	3604 <String::~String()>
     992:	a80c      	add	r0, sp, #48	; 0x30
     994:	f002 fe36 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     998:	4940      	ldr	r1, [pc, #256]	; (a9c <PrintOutput()+0x494>)
     99a:	a80c      	add	r0, sp, #48	; 0x30
     99c:	f002 fe6e 	bl	367c <String::String(char const*)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     9a0:	483f      	ldr	r0, [pc, #252]	; (aa0 <PrintOutput()+0x498>)
     9a2:	f001 f9b3 	bl	1d0c <Adafruit_INA260::readPower()>
     9a6:	2102      	movs	r1, #2
     9a8:	a808      	add	r0, sp, #32
     9aa:	f002 feab 	bl	3704 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     9b0:	2b07      	cmp	r3, #7
     9b2:	d812      	bhi.n	9da <PrintOutput()+0x3d2>
     9b4:	4d37      	ldr	r5, [pc, #220]	; (a94 <PrintOutput()+0x48c>)
     9b6:	4629      	mov	r1, r5
     9b8:	4620      	mov	r0, r4
     9ba:	f002 fe5f 	bl	367c <String::String(char const*)>
        str = " " + str;
     9be:	a908      	add	r1, sp, #32
     9c0:	4620      	mov	r0, r4
     9c2:	f002 ff4d 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     9c6:	4601      	mov	r1, r0
     9c8:	a808      	add	r0, sp, #32
     9ca:	f002 feb7 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     9ce:	4620      	mov	r0, r4
     9d0:	f002 fe18 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     9d6:	2b07      	cmp	r3, #7
     9d8:	d9ed      	bls.n	9b6 <PrintOutput()+0x3ae>
    return str;
     9da:	a908      	add	r1, sp, #32
     9dc:	4620      	mov	r0, r4
     9de:	f002 fdfb 	bl	35d8 <String::String(String&&)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     9e2:	4621      	mov	r1, r4
     9e4:	a80c      	add	r0, sp, #48	; 0x30
     9e6:	f002 ff3b 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     9ea:	4601      	mov	r1, r0
     9ec:	482a      	ldr	r0, [pc, #168]	; (a98 <PrintOutput()+0x490>)
     9ee:	f002 fd55 	bl	349c <Print::print(String const&)>
     9f2:	4829      	ldr	r0, [pc, #164]	; (a98 <PrintOutput()+0x490>)
     9f4:	f002 fd78 	bl	34e8 <Print::println()>
     9f8:	4620      	mov	r0, r4
     9fa:	f002 fe03 	bl	3604 <String::~String()>
     9fe:	a808      	add	r0, sp, #32
     a00:	f002 fe00 	bl	3604 <String::~String()>
     a04:	a80c      	add	r0, sp, #48	; 0x30
     a06:	f002 fdfd 	bl	3604 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     a0a:	4926      	ldr	r1, [pc, #152]	; (aa4 <PrintOutput()+0x49c>)
     a0c:	a80c      	add	r0, sp, #48	; 0x30
     a0e:	f002 fe35 	bl	367c <String::String(char const*)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     a12:	4b25      	ldr	r3, [pc, #148]	; (aa8 <PrintOutput()+0x4a0>)
     a14:	6818      	ldr	r0, [r3, #0]
     a16:	f7ff fc97 	bl	348 <GetRpmBuffered(Filter*)>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     a1a:	2102      	movs	r1, #2
     a1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     a20:	a808      	add	r0, sp, #32
     a22:	f002 fe6f 	bl	3704 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a28:	2b07      	cmp	r3, #7
     a2a:	d812      	bhi.n	a52 <PrintOutput()+0x44a>
	StringSumHelper(const char *p) : String(p) {}
     a2c:	4d19      	ldr	r5, [pc, #100]	; (a94 <PrintOutput()+0x48c>)
     a2e:	4629      	mov	r1, r5
     a30:	4620      	mov	r0, r4
     a32:	f002 fe23 	bl	367c <String::String(char const*)>
        str = " " + str;
     a36:	a908      	add	r1, sp, #32
     a38:	4620      	mov	r0, r4
     a3a:	f002 ff11 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     a3e:	4601      	mov	r1, r0
     a40:	a808      	add	r0, sp, #32
     a42:	f002 fe7b 	bl	373c <String::operator=(String const&)>
class StringSumHelper : public String
     a46:	4620      	mov	r0, r4
     a48:	f002 fddc 	bl	3604 <String::~String()>
    while (str.length() < 8) {
     a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     a4e:	2b07      	cmp	r3, #7
     a50:	d9ed      	bls.n	a2e <PrintOutput()+0x426>
    return str;
     a52:	a908      	add	r1, sp, #32
     a54:	4620      	mov	r0, r4
     a56:	f002 fdbf 	bl	35d8 <String::String(String&&)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     a5a:	4621      	mov	r1, r4
     a5c:	a80c      	add	r0, sp, #48	; 0x30
     a5e:	f002 feff 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     a62:	4601      	mov	r1, r0
     a64:	480c      	ldr	r0, [pc, #48]	; (a98 <PrintOutput()+0x490>)
     a66:	f002 fd19 	bl	349c <Print::print(String const&)>
     a6a:	480b      	ldr	r0, [pc, #44]	; (a98 <PrintOutput()+0x490>)
     a6c:	f002 fd3c 	bl	34e8 <Print::println()>
     a70:	4620      	mov	r0, r4
     a72:	f002 fdc7 	bl	3604 <String::~String()>
     a76:	a808      	add	r0, sp, #32
     a78:	f002 fdc4 	bl	3604 <String::~String()>
     a7c:	a80c      	add	r0, sp, #48	; 0x30
     a7e:	f002 fdc1 	bl	3604 <String::~String()>
}
     a82:	a804      	add	r0, sp, #16
     a84:	f002 fdbe 	bl	3604 <String::~String()>
     a88:	4668      	mov	r0, sp
     a8a:	f002 fdbb 	bl	3604 <String::~String()>
     a8e:	b015      	add	sp, #84	; 0x54
     a90:	bd30      	pop	{r4, r5, pc}
     a92:	bf00      	nop
     a94:	20000614 	.word	0x20000614
     a98:	200012b8 	.word	0x200012b8
     a9c:	20000430 	.word	0x20000430
     aa0:	200032f8 	.word	0x200032f8
     aa4:	20000440 	.word	0x20000440
     aa8:	20003d78 	.word	0x20003d78

00000aac <Set(String)>:
void Set(String command) {
     aac:	b530      	push	{r4, r5, lr}
     aae:	4604      	mov	r4, r0
     ab0:	b08d      	sub	sp, #52	; 0x34
    String arg = NextArg(command).toLowerCase();
     ab2:	4621      	mov	r1, r4
     ab4:	a808      	add	r0, sp, #32
     ab6:	f7ff fb35 	bl	124 <NextArg(String&)>
     aba:	a808      	add	r0, sp, #32
     abc:	f002 ff74 	bl	39a8 <String::toLowerCase()>
     ac0:	4601      	mov	r1, r0
     ac2:	4668      	mov	r0, sp
     ac4:	f002 fd6a 	bl	359c <String::String(String const&)>
     ac8:	a808      	add	r0, sp, #32
     aca:	f002 fd9b 	bl	3604 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     ace:	493f      	ldr	r1, [pc, #252]	; (bcc <Set(String)+0x120>)
     ad0:	4668      	mov	r0, sp
     ad2:	f002 fecd 	bl	3870 <String::equals(char const*) const>
    if (arg == "dac") {
     ad6:	2800      	cmp	r0, #0
     ad8:	d030      	beq.n	b3c <Set(String)+0x90>
        dacValue = NextArg(command).toInt();
     ada:	4621      	mov	r1, r4
     adc:	a808      	add	r0, sp, #32
     ade:	f7ff fb21 	bl	124 <NextArg(String&)>
     ae2:	a808      	add	r0, sp, #32
     ae4:	f002 ff9c 	bl	3a20 <String::toInt() const>
     ae8:	4c39      	ldr	r4, [pc, #228]	; (bd0 <Set(String)+0x124>)
     aea:	4603      	mov	r3, r0
     aec:	a808      	add	r0, sp, #32
     aee:	8023      	strh	r3, [r4, #0]
     af0:	f002 fd88 	bl	3604 <String::~String()>
        dac.setVoltage(dacValue, false);
     af4:	2200      	movs	r2, #0
     af6:	8821      	ldrh	r1, [r4, #0]
     af8:	4836      	ldr	r0, [pc, #216]	; (bd4 <Set(String)+0x128>)
     afa:	f001 fec5 	bl	2888 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	StringSumHelper(const char *p) : String(p) {}
     afe:	4936      	ldr	r1, [pc, #216]	; (bd8 <Set(String)+0x12c>)
     b00:	a808      	add	r0, sp, #32
     b02:	f002 fdbb 	bl	367c <String::String(char const*)>
        Serial.println("DAC set to " + String(dacValue));
     b06:	220a      	movs	r2, #10
     b08:	8821      	ldrh	r1, [r4, #0]
        Serial.println("Linear Actuator set to " + String(pos));
     b0a:	a804      	add	r0, sp, #16
     b0c:	f002 fdca 	bl	36a4 <String::String(int, unsigned char)>
     b10:	a904      	add	r1, sp, #16
     b12:	a808      	add	r0, sp, #32
     b14:	f002 fea4 	bl	3860 <operator+(StringSumHelper const&, String const&)>
     b18:	4601      	mov	r1, r0
     b1a:	4830      	ldr	r0, [pc, #192]	; (bdc <Set(String)+0x130>)
     b1c:	f002 fcbe 	bl	349c <Print::print(String const&)>
     b20:	482e      	ldr	r0, [pc, #184]	; (bdc <Set(String)+0x130>)
     b22:	f002 fce1 	bl	34e8 <Print::println()>
     b26:	a804      	add	r0, sp, #16
     b28:	f002 fd6c 	bl	3604 <String::~String()>
class StringSumHelper : public String
     b2c:	a808      	add	r0, sp, #32
     b2e:	f002 fd69 	bl	3604 <String::~String()>
}
     b32:	4668      	mov	r0, sp
     b34:	f002 fd66 	bl	3604 <String::~String()>
     b38:	b00d      	add	sp, #52	; 0x34
     b3a:	bd30      	pop	{r4, r5, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b3c:	4605      	mov	r5, r0
     b3e:	4928      	ldr	r1, [pc, #160]	; (be0 <Set(String)+0x134>)
     b40:	4668      	mov	r0, sp
     b42:	f002 fe95 	bl	3870 <String::equals(char const*) const>
    } else if (arg == "la") {
     b46:	b1b0      	cbz	r0, b76 <Set(String)+0xca>
        int pos = NextArg(command).toInt();
     b48:	4621      	mov	r1, r4
     b4a:	a808      	add	r0, sp, #32
     b4c:	f7ff faea 	bl	124 <NextArg(String&)>
     b50:	a808      	add	r0, sp, #32
     b52:	f002 ff65 	bl	3a20 <String::toInt() const>
     b56:	4604      	mov	r4, r0
     b58:	a808      	add	r0, sp, #32
     b5a:	f002 fd53 	bl	3604 <String::~String()>
        myServo.goalPosition(LA_ID_NUM, pos);
     b5e:	4622      	mov	r2, r4
     b60:	4629      	mov	r1, r5
     b62:	4820      	ldr	r0, [pc, #128]	; (be4 <Set(String)+0x138>)
     b64:	f000 ff7a 	bl	1a5c <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     b68:	491f      	ldr	r1, [pc, #124]	; (be8 <Set(String)+0x13c>)
     b6a:	a808      	add	r0, sp, #32
     b6c:	f002 fd86 	bl	367c <String::String(char const*)>
        Serial.println("Linear Actuator set to " + String(pos));
     b70:	220a      	movs	r2, #10
     b72:	4621      	mov	r1, r4
     b74:	e7c9      	b.n	b0a <Set(String)+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     b76:	491d      	ldr	r1, [pc, #116]	; (bec <Set(String)+0x140>)
     b78:	4668      	mov	r0, sp
     b7a:	f002 fe79 	bl	3870 <String::equals(char const*) const>
    } else if (arg == "res") {
     b7e:	b188      	cbz	r0, ba4 <Set(String)+0xf8>
        targetResistance = NextArg(command).toFloat();
     b80:	4621      	mov	r1, r4
     b82:	a808      	add	r0, sp, #32
     b84:	f7ff face 	bl	124 <NextArg(String&)>
     b88:	a808      	add	r0, sp, #32
     b8a:	f002 ff4f 	bl	3a2c <String::toFloat() const>
     b8e:	4b18      	ldr	r3, [pc, #96]	; (bf0 <Set(String)+0x144>)
     b90:	a808      	add	r0, sp, #32
     b92:	ed83 0a00 	vstr	s0, [r3]
     b96:	f002 fd35 	bl	3604 <String::~String()>
}
     b9a:	4668      	mov	r0, sp
     b9c:	f002 fd32 	bl	3604 <String::~String()>
     ba0:	b00d      	add	sp, #52	; 0x34
     ba2:	bd30      	pop	{r4, r5, pc}
     ba4:	211a      	movs	r1, #26
     ba6:	4813      	ldr	r0, [pc, #76]	; (bf4 <Set(String)+0x148>)
     ba8:	f004 fe6a 	bl	5880 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     bac:	480b      	ldr	r0, [pc, #44]	; (bdc <Set(String)+0x130>)
     bae:	f002 fc9b 	bl	34e8 <Print::println()>
     bb2:	210a      	movs	r1, #10
     bb4:	4810      	ldr	r0, [pc, #64]	; (bf8 <Set(String)+0x14c>)
     bb6:	f004 fe63 	bl	5880 <usb_serial_write>
     bba:	4808      	ldr	r0, [pc, #32]	; (bdc <Set(String)+0x130>)
     bbc:	f002 fc94 	bl	34e8 <Print::println()>
     bc0:	4668      	mov	r0, sp
     bc2:	f002 fd1f 	bl	3604 <String::~String()>
     bc6:	b00d      	add	sp, #52	; 0x34
     bc8:	bd30      	pop	{r4, r5, pc}
     bca:	bf00      	nop
     bcc:	200004a8 	.word	0x200004a8
     bd0:	20001d92 	.word	0x20001d92
     bd4:	200032d0 	.word	0x200032d0
     bd8:	200004ac 	.word	0x200004ac
     bdc:	200012b8 	.word	0x200012b8
     be0:	200004b8 	.word	0x200004b8
     be4:	20003308 	.word	0x20003308
     be8:	200004bc 	.word	0x200004bc
     bec:	200004d4 	.word	0x200004d4
     bf0:	20001d78 	.word	0x20001d78
     bf4:	200004d8 	.word	0x200004d8
     bf8:	200004f4 	.word	0x200004f4

00000bfc <Toggle(String)>:
void Toggle(String command) {
     bfc:	b510      	push	{r4, lr}
     bfe:	4604      	mov	r4, r0
     c00:	b08c      	sub	sp, #48	; 0x30
    String arg = NextArg(command).toLowerCase();
     c02:	4621      	mov	r1, r4
     c04:	a808      	add	r0, sp, #32
     c06:	f7ff fa8d 	bl	124 <NextArg(String&)>
     c0a:	a808      	add	r0, sp, #32
     c0c:	f002 fecc 	bl	39a8 <String::toLowerCase()>
     c10:	4601      	mov	r1, r0
     c12:	4668      	mov	r0, sp
     c14:	f002 fcc2 	bl	359c <String::String(String const&)>
     c18:	a808      	add	r0, sp, #32
     c1a:	f002 fcf3 	bl	3604 <String::~String()>
	size_t println(const String &s)			{ return print(s) + println(); }
     c1e:	4621      	mov	r1, r4
     c20:	4846      	ldr	r0, [pc, #280]	; (d3c <Toggle(String)+0x140>)
     c22:	f002 fc3b 	bl	349c <Print::print(String const&)>
     c26:	4845      	ldr	r0, [pc, #276]	; (d3c <Toggle(String)+0x140>)
     c28:	f002 fc5e 	bl	34e8 <Print::println()>
    Serial.println(command.substring(command.indexOf(" ") + 1).trim());
     c2c:	4944      	ldr	r1, [pc, #272]	; (d40 <Toggle(String)+0x144>)
     c2e:	a804      	add	r0, sp, #16
     c30:	f002 fd24 	bl	367c <String::String(char const*)>
     c34:	a904      	add	r1, sp, #16
     c36:	4620      	mov	r0, r4
     c38:	f002 fe4c 	bl	38d4 <String::indexOf(String const&) const>
     c3c:	4621      	mov	r1, r4
     c3e:	1c42      	adds	r2, r0, #1
     c40:	a808      	add	r0, sp, #32
     c42:	f002 fe59 	bl	38f8 <String::substring(unsigned int) const>
     c46:	a808      	add	r0, sp, #32
     c48:	f002 febe 	bl	39c8 <String::trim()>
     c4c:	4601      	mov	r1, r0
     c4e:	483b      	ldr	r0, [pc, #236]	; (d3c <Toggle(String)+0x140>)
     c50:	f002 fc24 	bl	349c <Print::print(String const&)>
     c54:	4839      	ldr	r0, [pc, #228]	; (d3c <Toggle(String)+0x140>)
     c56:	f002 fc47 	bl	34e8 <Print::println()>
     c5a:	a808      	add	r0, sp, #32
     c5c:	f002 fcd2 	bl	3604 <String::~String()>
     c60:	a804      	add	r0, sp, #16
     c62:	f002 fccf 	bl	3604 <String::~String()>
    arg = command.substring(command.indexOf(" ") + 1).trim();
     c66:	4936      	ldr	r1, [pc, #216]	; (d40 <Toggle(String)+0x144>)
     c68:	a804      	add	r0, sp, #16
     c6a:	f002 fd07 	bl	367c <String::String(char const*)>
     c6e:	a904      	add	r1, sp, #16
     c70:	4620      	mov	r0, r4
     c72:	f002 fe2f 	bl	38d4 <String::indexOf(String const&) const>
     c76:	4621      	mov	r1, r4
     c78:	1c42      	adds	r2, r0, #1
     c7a:	a808      	add	r0, sp, #32
     c7c:	f002 fe3c 	bl	38f8 <String::substring(unsigned int) const>
     c80:	a808      	add	r0, sp, #32
     c82:	f002 fea1 	bl	39c8 <String::trim()>
     c86:	4601      	mov	r1, r0
     c88:	4668      	mov	r0, sp
     c8a:	f002 fd57 	bl	373c <String::operator=(String const&)>
     c8e:	a808      	add	r0, sp, #32
     c90:	f002 fcb8 	bl	3604 <String::~String()>
     c94:	a804      	add	r0, sp, #16
     c96:	f002 fcb5 	bl	3604 <String::~String()>
     c9a:	4669      	mov	r1, sp
     c9c:	4827      	ldr	r0, [pc, #156]	; (d3c <Toggle(String)+0x140>)
     c9e:	f002 fbfd 	bl	349c <Print::print(String const&)>
     ca2:	4826      	ldr	r0, [pc, #152]	; (d3c <Toggle(String)+0x140>)
     ca4:	f002 fc20 	bl	34e8 <Print::println()>
    arg = "pcc";
     ca8:	4926      	ldr	r1, [pc, #152]	; (d44 <Toggle(String)+0x148>)
     caa:	4668      	mov	r0, sp
     cac:	f002 fd64 	bl	3778 <String::operator=(char const*)>
     cb0:	4924      	ldr	r1, [pc, #144]	; (d44 <Toggle(String)+0x148>)
     cb2:	4668      	mov	r0, sp
     cb4:	f002 fddc 	bl	3870 <String::equals(char const*) const>
    if (arg == "pcc") {
     cb8:	b1a8      	cbz	r0, ce6 <Toggle(String)+0xea>
        digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     cba:	2021      	movs	r0, #33	; 0x21
     cbc:	f003 f8e0 	bl	3e80 <digitalRead>
     cc0:	4601      	mov	r1, r0
     cc2:	2021      	movs	r0, #33	; 0x21
     cc4:	fab1 f181 	clz	r1, r1
     cc8:	0949      	lsrs	r1, r1, #5
     cca:	f003 f8af 	bl	3e2c <digitalWrite>
     cce:	2104      	movs	r1, #4
     cd0:	481d      	ldr	r0, [pc, #116]	; (d48 <Toggle(String)+0x14c>)
     cd2:	f004 fdd5 	bl	5880 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     cd6:	4819      	ldr	r0, [pc, #100]	; (d3c <Toggle(String)+0x140>)
     cd8:	f002 fc06 	bl	34e8 <Print::println()>
}
     cdc:	4668      	mov	r0, sp
     cde:	f002 fc91 	bl	3604 <String::~String()>
     ce2:	b00c      	add	sp, #48	; 0x30
     ce4:	bd10      	pop	{r4, pc}
    } else if (arg = "res") {
     ce6:	4919      	ldr	r1, [pc, #100]	; (d4c <Toggle(String)+0x150>)
     ce8:	4668      	mov	r0, sp
     cea:	f002 fd45 	bl	3778 <String::operator=(char const*)>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     cee:	6803      	ldr	r3, [r0, #0]
     cf0:	b14b      	cbz	r3, d06 <Toggle(String)+0x10a>
        trackResistance = !trackResistance;
     cf2:	4a17      	ldr	r2, [pc, #92]	; (d50 <Toggle(String)+0x154>)
}
     cf4:	4668      	mov	r0, sp
        trackResistance = !trackResistance;
     cf6:	7813      	ldrb	r3, [r2, #0]
     cf8:	f083 0301 	eor.w	r3, r3, #1
     cfc:	7013      	strb	r3, [r2, #0]
}
     cfe:	f002 fc81 	bl	3604 <String::~String()>
     d02:	b00c      	add	sp, #48	; 0x30
     d04:	bd10      	pop	{r4, pc}
    } else if (arg = "print") {
     d06:	4913      	ldr	r1, [pc, #76]	; (d54 <Toggle(String)+0x158>)
     d08:	4668      	mov	r0, sp
     d0a:	f002 fd35 	bl	3778 <String::operator=(char const*)>
     d0e:	6803      	ldr	r3, [r0, #0]
     d10:	b12b      	cbz	r3, d1e <Toggle(String)+0x122>
        printOutput = !printOutput;
     d12:	4a11      	ldr	r2, [pc, #68]	; (d58 <Toggle(String)+0x15c>)
     d14:	7813      	ldrb	r3, [r2, #0]
     d16:	f083 0301 	eor.w	r3, r3, #1
     d1a:	7013      	strb	r3, [r2, #0]
     d1c:	e7de      	b.n	cdc <Toggle(String)+0xe0>
     d1e:	211d      	movs	r1, #29
     d20:	480e      	ldr	r0, [pc, #56]	; (d5c <Toggle(String)+0x160>)
     d22:	f004 fdad 	bl	5880 <usb_serial_write>
     d26:	4805      	ldr	r0, [pc, #20]	; (d3c <Toggle(String)+0x140>)
     d28:	f002 fbde 	bl	34e8 <Print::println()>
     d2c:	210a      	movs	r1, #10
     d2e:	480c      	ldr	r0, [pc, #48]	; (d60 <Toggle(String)+0x164>)
     d30:	f004 fda6 	bl	5880 <usb_serial_write>
     d34:	4801      	ldr	r0, [pc, #4]	; (d3c <Toggle(String)+0x140>)
     d36:	f002 fbd7 	bl	34e8 <Print::println()>
     d3a:	e7cf      	b.n	cdc <Toggle(String)+0xe0>
     d3c:	200012b8 	.word	0x200012b8
     d40:	20000614 	.word	0x20000614
     d44:	200005e8 	.word	0x200005e8
     d48:	200003ac 	.word	0x200003ac
     d4c:	200004d4 	.word	0x200004d4
     d50:	20003dee 	.word	0x20003dee
     d54:	2000060c 	.word	0x2000060c
     d58:	20001d94 	.word	0x20001d94
     d5c:	200005ec 	.word	0x200005ec
     d60:	200004f4 	.word	0x200004f4

00000d64 <ProcessCommand(String)>:
void ProcessCommand (String serialInput) {
     d64:	b510      	push	{r4, lr}
     d66:	b088      	sub	sp, #32
     d68:	4601      	mov	r1, r0
    String command = NextArg(serialInput);
     d6a:	4668      	mov	r0, sp
     d6c:	f7ff f9da 	bl	124 <NextArg(String&)>
    switch (MatchCommand(command)) {
     d70:	4669      	mov	r1, sp
     d72:	a804      	add	r0, sp, #16
     d74:	f002 fc12 	bl	359c <String::String(String const&)>
     d78:	a804      	add	r0, sp, #16
     d7a:	f7ff fa05 	bl	188 <MatchCommand(String)>
     d7e:	4604      	mov	r4, r0
     d80:	a804      	add	r0, sp, #16
     d82:	f002 fc3f 	bl	3604 <String::~String()>
     d86:	2c03      	cmp	r4, #3
     d88:	d846      	bhi.n	e18 <ProcessCommand(String)+0xb4>
     d8a:	e8df f004 	tbb	[pc, r4]
     d8e:	2739      	.short	0x2739
     d90:	0218      	.short	0x0218
     d92:	210e      	movs	r1, #14
     d94:	4824      	ldr	r0, [pc, #144]	; (e28 <ProcessCommand(String)+0xc4>)
     d96:	f004 fd73 	bl	5880 <usb_serial_write>
     d9a:	4824      	ldr	r0, [pc, #144]	; (e2c <ProcessCommand(String)+0xc8>)
     d9c:	f002 fba4 	bl	34e8 <Print::println()>
            Toggle(command);
     da0:	4669      	mov	r1, sp
     da2:	a804      	add	r0, sp, #16
     da4:	f002 fbfa 	bl	359c <String::String(String const&)>
     da8:	a804      	add	r0, sp, #16
     daa:	f7ff ff27 	bl	bfc <Toggle(String)>
     dae:	a804      	add	r0, sp, #16
     db0:	f002 fc28 	bl	3604 <String::~String()>
}
     db4:	4668      	mov	r0, sp
     db6:	f002 fc25 	bl	3604 <String::~String()>
     dba:	b008      	add	sp, #32
     dbc:	bd10      	pop	{r4, pc}
            Set(command);
     dbe:	4669      	mov	r1, sp
     dc0:	a804      	add	r0, sp, #16
     dc2:	f002 fbeb 	bl	359c <String::String(String const&)>
     dc6:	a804      	add	r0, sp, #16
     dc8:	f7ff fe70 	bl	aac <Set(String)>
     dcc:	a804      	add	r0, sp, #16
     dce:	f002 fc19 	bl	3604 <String::~String()>
}
     dd2:	4668      	mov	r0, sp
     dd4:	f002 fc16 	bl	3604 <String::~String()>
     dd8:	b008      	add	sp, #32
     dda:	bd10      	pop	{r4, pc}
            Serial.println(Help());
     ddc:	a804      	add	r0, sp, #16
     dde:	f7ff f9f5 	bl	1cc <Help()>
	size_t println(const String &s)			{ return print(s) + println(); }
     de2:	a904      	add	r1, sp, #16
     de4:	4811      	ldr	r0, [pc, #68]	; (e2c <ProcessCommand(String)+0xc8>)
     de6:	f002 fb59 	bl	349c <Print::print(String const&)>
     dea:	4810      	ldr	r0, [pc, #64]	; (e2c <ProcessCommand(String)+0xc8>)
     dec:	f002 fb7c 	bl	34e8 <Print::println()>
     df0:	a804      	add	r0, sp, #16
     df2:	f002 fc07 	bl	3604 <String::~String()>
}
     df6:	4668      	mov	r0, sp
     df8:	f002 fc04 	bl	3604 <String::~String()>
     dfc:	b008      	add	sp, #32
     dfe:	bd10      	pop	{r4, pc}
     e00:	211b      	movs	r1, #27
     e02:	480b      	ldr	r0, [pc, #44]	; (e30 <ProcessCommand(String)+0xcc>)
     e04:	f004 fd3c 	bl	5880 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     e08:	4808      	ldr	r0, [pc, #32]	; (e2c <ProcessCommand(String)+0xc8>)
     e0a:	f002 fb6d 	bl	34e8 <Print::println()>
     e0e:	4668      	mov	r0, sp
     e10:	f002 fbf8 	bl	3604 <String::~String()>
     e14:	b008      	add	sp, #32
     e16:	bd10      	pop	{r4, pc}
     e18:	2117      	movs	r1, #23
     e1a:	4806      	ldr	r0, [pc, #24]	; (e34 <ProcessCommand(String)+0xd0>)
     e1c:	f004 fd30 	bl	5880 <usb_serial_write>
     e20:	4802      	ldr	r0, [pc, #8]	; (e2c <ProcessCommand(String)+0xc8>)
     e22:	f002 fb61 	bl	34e8 <Print::println()>
     e26:	e7c5      	b.n	db4 <ProcessCommand(String)+0x50>
     e28:	20000480 	.word	0x20000480
     e2c:	200012b8 	.word	0x200012b8
     e30:	20000464 	.word	0x20000464
     e34:	20000490 	.word	0x20000490

00000e38 <loop>:
void loop () {
     e38:	b510      	push	{r4, lr}
     e3a:	ed2d 8b02 	vpush	{d8}
     e3e:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
     e40:	f004 fcb4 	bl	57ac <usb_serial_available>
    if (Serial.available() > 0) {
     e44:	2800      	cmp	r0, #0
     e46:	dd14      	ble.n	e72 <loop+0x3a>
        String serialInput = Serial.readStringUntil('\n');
     e48:	2300      	movs	r3, #0
     e4a:	220a      	movs	r2, #10
     e4c:	492f      	ldr	r1, [pc, #188]	; (f0c <loop+0xd4>)
     e4e:	4668      	mov	r0, sp
     e50:	f002 fb68 	bl	3524 <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     e54:	4669      	mov	r1, sp
     e56:	a804      	add	r0, sp, #16
     e58:	f002 fba0 	bl	359c <String::String(String const&)>
     e5c:	a804      	add	r0, sp, #16
     e5e:	f7ff ff81 	bl	d64 <ProcessCommand(String)>
     e62:	a804      	add	r0, sp, #16
     e64:	f002 fbce 	bl	3604 <String::~String()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     e68:	f004 fd3e 	bl	58e8 <usb_serial_flush_output>
    }
     e6c:	4668      	mov	r0, sp
     e6e:	f002 fbc9 	bl	3604 <String::~String()>
     e72:	4c27      	ldr	r4, [pc, #156]	; (f10 <loop+0xd8>)
    if (printTimer < millis() && printOutput) {
     e74:	4b27      	ldr	r3, [pc, #156]	; (f14 <loop+0xdc>)
     e76:	6821      	ldr	r1, [r4, #0]
     e78:	681a      	ldr	r2, [r3, #0]
     e7a:	428a      	cmp	r2, r1
     e7c:	d203      	bcs.n	e86 <loop+0x4e>
     e7e:	4926      	ldr	r1, [pc, #152]	; (f18 <loop+0xe0>)
     e80:	7809      	ldrb	r1, [r1, #0]
     e82:	2900      	cmp	r1, #0
     e84:	d133      	bne.n	eee <loop+0xb6>
    if (resistanceTracingTimer < millis() && trackResistance) {
     e86:	4b25      	ldr	r3, [pc, #148]	; (f1c <loop+0xe4>)
     e88:	6821      	ldr	r1, [r4, #0]
     e8a:	681a      	ldr	r2, [r3, #0]
     e8c:	428a      	cmp	r2, r1
     e8e:	d202      	bcs.n	e96 <loop+0x5e>
     e90:	4923      	ldr	r1, [pc, #140]	; (f20 <loop+0xe8>)
     e92:	7809      	ldrb	r1, [r1, #0]
     e94:	b919      	cbnz	r1, e9e <loop+0x66>
}
     e96:	b008      	add	sp, #32
     e98:	ecbd 8b02 	vpop	{d8}
     e9c:	bd10      	pop	{r4, pc}
        resistanceTracingTimer += resistanceTrackingInterval;
     e9e:	4921      	ldr	r1, [pc, #132]	; (f24 <loop+0xec>)
        float voltage = ina260.readBusVoltage();
     ea0:	4821      	ldr	r0, [pc, #132]	; (f28 <loop+0xf0>)
        resistanceTracingTimer += resistanceTrackingInterval;
     ea2:	6809      	ldr	r1, [r1, #0]
     ea4:	440a      	add	r2, r1
     ea6:	601a      	str	r2, [r3, #0]
        float voltage = ina260.readBusVoltage();
     ea8:	f000 ff16 	bl	1cd8 <Adafruit_INA260::readBusVoltage()>
     eac:	eeb0 8a40 	vmov.f32	s16, s0
        float current = ina260.readCurrent();
     eb0:	481d      	ldr	r0, [pc, #116]	; (f28 <loop+0xf0>)
     eb2:	f000 fef5 	bl	1ca0 <Adafruit_INA260::readCurrent()>
        float difference = resistance - targetResistance;
     eb6:	4b1d      	ldr	r3, [pc, #116]	; (f2c <loop+0xf4>)
        float resistance = voltage / current;
     eb8:	eec8 7a00 	vdiv.f32	s15, s16, s0
        float difference = resistance - targetResistance;
     ebc:	ed93 7a00 	vldr	s14, [r3]
     ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (difference > 0) {
     ec4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ecc:	dd16      	ble.n	efc <loop+0xc4>
            dacValue += dacStepSize;
     ece:	4a18      	ldr	r2, [pc, #96]	; (f30 <loop+0xf8>)
     ed0:	4b18      	ldr	r3, [pc, #96]	; (f34 <loop+0xfc>)
     ed2:	6811      	ldr	r1, [r2, #0]
     ed4:	881a      	ldrh	r2, [r3, #0]
     ed6:	4411      	add	r1, r2
     ed8:	b289      	uxth	r1, r1
        dac.setVoltage(dacValue, false);
     eda:	2200      	movs	r2, #0
     edc:	4816      	ldr	r0, [pc, #88]	; (f38 <loop+0x100>)
     ede:	8019      	strh	r1, [r3, #0]
}
     ee0:	b008      	add	sp, #32
     ee2:	ecbd 8b02 	vpop	{d8}
     ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dac.setVoltage(dacValue, false);
     eea:	f001 bccd 	b.w	2888 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
        printTimer += printTimerInterval;
     eee:	4913      	ldr	r1, [pc, #76]	; (f3c <loop+0x104>)
     ef0:	6809      	ldr	r1, [r1, #0]
     ef2:	440a      	add	r2, r1
     ef4:	601a      	str	r2, [r3, #0]
        PrintOutput();
     ef6:	f7ff fb87 	bl	608 <PrintOutput()>
     efa:	e7c4      	b.n	e86 <loop+0x4e>
            dacValue -= dacStepSize;
     efc:	4b0d      	ldr	r3, [pc, #52]	; (f34 <loop+0xfc>)
     efe:	4a0c      	ldr	r2, [pc, #48]	; (f30 <loop+0xf8>)
     f00:	8819      	ldrh	r1, [r3, #0]
     f02:	6812      	ldr	r2, [r2, #0]
     f04:	1a89      	subs	r1, r1, r2
     f06:	b289      	uxth	r1, r1
     f08:	e7e7      	b.n	eda <loop+0xa2>
     f0a:	bf00      	nop
     f0c:	200012b8 	.word	0x200012b8
     f10:	20003dc4 	.word	0x20003dc4
     f14:	20003d68 	.word	0x20003d68
     f18:	20001d94 	.word	0x20001d94
     f1c:	20003d74 	.word	0x20003d74
     f20:	20003dee 	.word	0x20003dee
     f24:	20001d74 	.word	0x20001d74
     f28:	200032f8 	.word	0x200032f8
     f2c:	20001d78 	.word	0x20001d78
     f30:	20001b1c 	.word	0x20001b1c
     f34:	20001d92 	.word	0x20001d92
     f38:	200032d0 	.word	0x200032d0
     f3c:	20001d70 	.word	0x20001d70

00000f40 <_GLOBAL__sub_I_myServo>:
     f40:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     f42:	4c0c      	ldr	r4, [pc, #48]	; (f74 <_GLOBAL__sub_I_myServo+0x34>)
     f44:	2301      	movs	r3, #1
     f46:	2210      	movs	r2, #16
     f48:	490b      	ldr	r1, [pc, #44]	; (f78 <_GLOBAL__sub_I_myServo+0x38>)
     f4a:	4620      	mov	r0, r4
     f4c:	f000 fb0e 	bl	156c <PA12::PA12(HardwareSerial*, int, bool)>
     f50:	4a0a      	ldr	r2, [pc, #40]	; (f7c <_GLOBAL__sub_I_myServo+0x3c>)
     f52:	490b      	ldr	r1, [pc, #44]	; (f80 <_GLOBAL__sub_I_myServo+0x40>)
     f54:	4620      	mov	r0, r4
     f56:	f004 fe05 	bl	5b64 <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     f5a:	480a      	ldr	r0, [pc, #40]	; (f84 <_GLOBAL__sub_I_myServo+0x44>)
     f5c:	f000 fe24 	bl	1ba8 <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     f60:	4809      	ldr	r0, [pc, #36]	; (f88 <_GLOBAL__sub_I_myServo+0x48>)
     f62:	f001 fc87 	bl	2874 <Adafruit_MCP4725::Adafruit_MCP4725()>
struct Filter* rpm_filter = CreateFilter(10, 8);
     f66:	2108      	movs	r1, #8
     f68:	200a      	movs	r0, #10
     f6a:	f7ff f9c5 	bl	2f8 <CreateFilter(unsigned int, int)>
     f6e:	4b07      	ldr	r3, [pc, #28]	; (f8c <_GLOBAL__sub_I_myServo+0x4c>)
     f70:	6018      	str	r0, [r3, #0]
     f72:	bd10      	pop	{r4, pc}
     f74:	20003308 	.word	0x20003308
     f78:	20002578 	.word	0x20002578
     f7c:	2000158c 	.word	0x2000158c
     f80:	00001549 	.word	0x00001549
     f84:	200032f8 	.word	0x200032f8
     f88:	200032d0 	.word	0x200032d0
     f8c:	20003d78 	.word	0x20003d78

00000f90 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     f90:	2000      	movs	r0, #0
     f92:	4770      	bx	lr

00000f94 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     f94:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     f98:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     f9c:	1a10      	subs	r0, r2, r0
     f9e:	4770      	bx	lr

00000fa0 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     fa0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     fa4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     fa8:	429a      	cmp	r2, r3
     faa:	d905      	bls.n	fb8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     fac:	1c5a      	adds	r2, r3, #1
     fae:	4403      	add	r3, r0
     fb0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     fb4:	7e98      	ldrb	r0, [r3, #26]
     fb6:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     fb8:	f04f 30ff 	mov.w	r0, #4294967295
	}
     fbc:	4770      	bx	lr
     fbe:	bf00      	nop

00000fc0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     fc0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     fc4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     fc8:	429a      	cmp	r2, r3
     fca:	d902      	bls.n	fd2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     fcc:	4418      	add	r0, r3
     fce:	7e80      	ldrb	r0, [r0, #26]
     fd0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     fd2:	f04f 30ff 	mov.w	r0, #4294967295
	}
     fd6:	4770      	bx	lr

00000fd8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
     fd8:	4770      	bx	lr
     fda:	bf00      	nop

00000fdc <TwoWire::write(unsigned char)>:
{
     fdc:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     fde:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     fe2:	b178      	cbz	r0, 1004 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     fe4:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     fe8:	2a88      	cmp	r2, #136	; 0x88
     fea:	d903      	bls.n	ff4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     fec:	2201      	movs	r2, #1
			return 0;
     fee:	2000      	movs	r0, #0
     ff0:	605a      	str	r2, [r3, #4]
     ff2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     ff4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     ff8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     ffa:	441a      	add	r2, r3
     ffc:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    1000:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    1004:	4770      	bx	lr
    1006:	bf00      	nop

00001008 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    1008:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    100a:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    100e:	b90c      	cbnz	r4, 1014 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    1010:	4620      	mov	r0, r4
    1012:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1014:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    1018:	4605      	mov	r5, r0
    101a:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    101e:	42a2      	cmp	r2, r4
    1020:	d80d      	bhi.n	103e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    1022:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    1024:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    1028:	4622      	mov	r2, r4
    102a:	4418      	add	r0, r3
    102c:	f002 fff8 	bl	4020 <memcpy>
		txBufferLength += quantity;
    1030:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    1034:	4620      	mov	r0, r4
		txBufferLength += quantity;
    1036:	4423      	add	r3, r4
    1038:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    103c:	bd38      	pop	{r3, r4, r5, pc}
    103e:	2201      	movs	r2, #1
    1040:	6042      	str	r2, [r0, #4]
    1042:	e7ef      	b.n	1024 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00001044 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    1044:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    1046:	2500      	movs	r5, #0
    1048:	4613      	mov	r3, r2
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    104a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    104e:	4604      	mov	r4, r0
    1050:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    1054:	4815      	ldr	r0, [pc, #84]	; (10ac <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    1056:	2288      	movs	r2, #136	; 0x88
    1058:	6121      	str	r1, [r4, #16]
    105a:	4629      	mov	r1, r5
    105c:	6020      	str	r0, [r4, #0]
    105e:	f104 001a 	add.w	r0, r4, #26
    1062:	6163      	str	r3, [r4, #20]
    1064:	7325      	strb	r5, [r4, #12]
    1066:	7625      	strb	r5, [r4, #24]
    1068:	7665      	strb	r5, [r4, #25]
    106a:	f006 fcad 	bl	79c8 <memset>
    106e:	2289      	movs	r2, #137	; 0x89
    1070:	4629      	mov	r1, r5
    1072:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    1076:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    107a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    107e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    1082:	f006 fca1 	bl	79c8 <memset>
	}
    1086:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    1088:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    108c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    1090:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    1094:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    1098:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    109c:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    10a0:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    10a4:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    10a8:	bd38      	pop	{r3, r4, r5, pc}
    10aa:	bf00      	nop
    10ac:	20000830 	.word	0x20000830

000010b0 <TwoWire::force_clock()>:
{
    10b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10b4:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10b8:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10ba:	7e01      	ldrb	r1, [r0, #24]
{
    10bc:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10be:	7e43      	ldrb	r3, [r0, #25]
{
    10c0:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10c2:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    10c6:	4a38      	ldr	r2, [pc, #224]	; (11a8 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10c8:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    10cc:	4f37      	ldr	r7, [pc, #220]	; (11ac <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    10ce:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    10d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    10d4:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    10d8:	0109      	lsls	r1, r1, #4
    10da:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    10dc:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    10e0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10e4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    10e8:	011b      	lsls	r3, r3, #4
    10ea:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    10ec:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    10ee:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    10f2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    10f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    10fa:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    10fc:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    10fe:	492c      	ldr	r1, [pc, #176]	; (11b0 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    1100:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    1102:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    1106:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    1108:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    110c:	686b      	ldr	r3, [r5, #4]
    110e:	4333      	orrs	r3, r6
    1110:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1112:	4b28      	ldr	r3, [pc, #160]	; (11b4 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1114:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1116:	683a      	ldr	r2, [r7, #0]
    1118:	fba3 3202 	umull	r3, r2, r3, r2
    111c:	0c92      	lsrs	r2, r2, #18
    111e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1122:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1124:	684b      	ldr	r3, [r1, #4]
    1126:	1b1b      	subs	r3, r3, r4
    1128:	429a      	cmp	r2, r3
    112a:	d8fb      	bhi.n	1124 <TwoWire::force_clock()+0x74>
    112c:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    1130:	4a1f      	ldr	r2, [pc, #124]	; (11b0 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1132:	f8df e080 	ldr.w	lr, [pc, #128]	; 11b4 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    1136:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    113a:	4203      	tst	r3, r0
    113c:	d002      	beq.n	1144 <TwoWire::force_clock()+0x94>
    113e:	68ab      	ldr	r3, [r5, #8]
    1140:	4233      	tst	r3, r6
    1142:	d12f      	bne.n	11a4 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    1144:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    1148:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    114a:	6839      	ldr	r1, [r7, #0]
    114c:	fbae 3101 	umull	r3, r1, lr, r1
    1150:	0c89      	lsrs	r1, r1, #18
    1152:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1156:	6853      	ldr	r3, [r2, #4]
    1158:	1b1b      	subs	r3, r3, r4
    115a:	4299      	cmp	r1, r3
    115c:	d8fb      	bhi.n	1156 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    115e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    1162:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1164:	6839      	ldr	r1, [r7, #0]
    1166:	fbae 3101 	umull	r3, r1, lr, r1
    116a:	0c89      	lsrs	r1, r1, #18
    116c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1170:	6853      	ldr	r3, [r2, #4]
    1172:	1b1b      	subs	r3, r3, r4
    1174:	4299      	cmp	r1, r3
    1176:	d8fb      	bhi.n	1170 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    1178:	f1bc 0c01 	subs.w	ip, ip, #1
    117c:	d1db      	bne.n	1136 <TwoWire::force_clock()+0x86>
	bool ret = false;
    117e:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1180:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1184:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1186:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    118a:	68db      	ldr	r3, [r3, #12]
    118c:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1190:	f899 3019 	ldrb.w	r3, [r9, #25]
    1194:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    1198:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    119c:	6013      	str	r3, [r2, #0]
}
    119e:	b003      	add	sp, #12
    11a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    11a4:	2001      	movs	r0, #1
    11a6:	e7eb      	b.n	1180 <TwoWire::force_clock()+0xd0>
    11a8:	20000c5c 	.word	0x20000c5c
    11ac:	200012b4 	.word	0x200012b4
    11b0:	e0001000 	.word	0xe0001000
    11b4:	431bde83 	.word	0x431bde83

000011b8 <TwoWire::wait_idle()>:
	return systick_millis_count;
    11b8:	4a0e      	ldr	r2, [pc, #56]	; (11f4 <TwoWire::wait_idle()+0x3c>)
{
    11ba:	b510      	push	{r4, lr}
    11bc:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    11be:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    11c0:	e005      	b.n	11ce <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    11c2:	01db      	lsls	r3, r3, #7
    11c4:	d407      	bmi.n	11d6 <TwoWire::wait_idle()+0x1e>
    11c6:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    11c8:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    11ca:	2b10      	cmp	r3, #16
    11cc:	d808      	bhi.n	11e0 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    11ce:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    11d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    11d4:	d1f5      	bne.n	11c2 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    11d6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    11da:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    11dc:	6163      	str	r3, [r4, #20]
}
    11de:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    11e0:	f7ff ff66 	bl	10b0 <TwoWire::force_clock()>
    11e4:	2800      	cmp	r0, #0
    11e6:	d0fa      	beq.n	11de <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    11e8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    11ec:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    11ee:	6163      	str	r3, [r4, #20]
	return true;
    11f0:	e7f5      	b.n	11de <TwoWire::wait_idle()+0x26>
    11f2:	bf00      	nop
    11f4:	20003dc4 	.word	0x20003dc4

000011f8 <TwoWire::endTransmission(unsigned char)>:
{
    11f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    11fc:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    1200:	f1ba 0f00 	cmp.w	sl, #0
    1204:	d058      	beq.n	12b8 <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
    1206:	4681      	mov	r9, r0
    1208:	4688      	mov	r8, r1
    120a:	f7ff ffd5 	bl	11b8 <TwoWire::wait_idle()>
    120e:	2800      	cmp	r0, #0
    1210:	d052      	beq.n	12b8 <TwoWire::endTransmission(unsigned char)+0xc0>
    1212:	4e37      	ldr	r6, [pc, #220]	; (12f0 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    1214:	2400      	movs	r4, #0
    1216:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1218:	e016      	b.n	1248 <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
    121a:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    121c:	051a      	lsls	r2, r3, #20
    121e:	d444      	bmi.n	12aa <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
    1220:	0558      	lsls	r0, r3, #21
    1222:	d458      	bmi.n	12d6 <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    1224:	0499      	lsls	r1, r3, #18
    1226:	d44c      	bmi.n	12c2 <TwoWire::endTransmission(unsigned char)+0xca>
    1228:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    122a:	1bd2      	subs	r2, r2, r7
    122c:	2a32      	cmp	r2, #50	; 0x32
    122e:	d848      	bhi.n	12c2 <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
    1230:	4554      	cmp	r4, sl
    1232:	d907      	bls.n	1244 <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1234:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1236:	0752      	lsls	r2, r2, #29
    1238:	d104      	bne.n	1244 <TwoWire::endTransmission(unsigned char)+0x4c>
    123a:	059b      	lsls	r3, r3, #22
    123c:	d455      	bmi.n	12ea <TwoWire::endTransmission(unsigned char)+0xf2>
    123e:	f1b8 0f00 	cmp.w	r8, #0
    1242:	d052      	beq.n	12ea <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
    1244:	f004 fb9a 	bl	597c <yield>
		if (tx_index <= tx_len) {
    1248:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    124a:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
    124e:	d8e4      	bhi.n	121a <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1250:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    1252:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1254:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    1258:	d4df      	bmi.n	121a <TwoWire::endTransmission(unsigned char)+0x22>
    125a:	e013      	b.n	1284 <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    125c:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    1260:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    1262:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    1268:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    126a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    126c:	d027      	beq.n	12be <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
    126e:	458a      	cmp	sl, r1
				fifo_used++;
    1270:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1274:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1278:	d90e      	bls.n	1298 <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    127a:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    127e:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1280:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    1282:	d0ca      	beq.n	121a <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
    1284:	2101      	movs	r1, #1
				if (tx_index == 0) {
    1286:	2c00      	cmp	r4, #0
    1288:	d0e8      	beq.n	125c <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    128a:	4621      	mov	r1, r4
				fifo_used++;
    128c:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    128e:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    1290:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1292:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1296:	d8f0      	bhi.n	127a <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1298:	f1b8 0f00 	cmp.w	r8, #0
    129c:	d0bd      	beq.n	121a <TwoWire::endTransmission(unsigned char)+0x22>
    129e:	f44f 7300 	mov.w	r3, #512	; 0x200
    12a2:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
    12a4:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    12a6:	051a      	lsls	r2, r3, #20
    12a8:	d5ba      	bpl.n	1220 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12aa:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    12ac:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12b2:	612b      	str	r3, [r5, #16]
}
    12b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
    12b8:	2004      	movs	r0, #4
}
    12ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    12be:	2401      	movs	r4, #1
    12c0:	e7ab      	b.n	121a <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12c2:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12c4:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    12c8:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12ce:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    12d0:	662a      	str	r2, [r5, #96]	; 0x60
}
    12d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12d6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    12d8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    12dc:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    12de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    12e2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    12e4:	662a      	str	r2, [r5, #96]	; 0x60
}
    12e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
    12ea:	2000      	movs	r0, #0
    12ec:	e7e5      	b.n	12ba <TwoWire::endTransmission(unsigned char)+0xc2>
    12ee:	bf00      	nop
    12f0:	20003dc4 	.word	0x20003dc4

000012f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    12f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12f8:	4682      	mov	sl, r0
    12fa:	460c      	mov	r4, r1
    12fc:	4615      	mov	r5, r2
    12fe:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
    1300:	f7ff ff5a 	bl	11b8 <TwoWire::wait_idle()>
    1304:	2800      	cmp	r0, #0
    1306:	f000 808f 	beq.w	1428 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
    130a:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
    130c:	2100      	movs	r1, #0
    130e:	2d01      	cmp	r5, #1
    1310:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1430 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1314:	b2db      	uxtb	r3, r3
    1316:	f240 4601 	movw	r6, #1025	; 0x401
    131a:	bf38      	it	cc
    131c:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    131e:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1320:	431e      	orrs	r6, r3
    1322:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
    1326:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    132a:	e01e      	b.n	136a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
    132c:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    1330:	2b87      	cmp	r3, #135	; 0x87
    1332:	d93d      	bls.n	13b0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1334:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    1336:	050b      	lsls	r3, r1, #20
    1338:	d457      	bmi.n	13ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    133a:	f411 5f10 	tst.w	r1, #9216	; 0x2400
    133e:	d167      	bne.n	1410 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
    1340:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    1344:	eba3 0309 	sub.w	r3, r3, r9
    1348:	2b32      	cmp	r3, #50	; 0x32
    134a:	d861      	bhi.n	1410 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
    134c:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    1350:	42ab      	cmp	r3, r5
    1352:	d308      	bcc.n	1366 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1354:	2c02      	cmp	r4, #2
    1356:	d906      	bls.n	1366 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1358:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    135a:	0758      	lsls	r0, r3, #29
    135c:	d103      	bne.n	1366 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    135e:	058b      	lsls	r3, r1, #22
    1360:	d447      	bmi.n	13f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
    1362:	2f00      	cmp	r7, #0
    1364:	d045      	beq.n	13f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
    1366:	f004 fb09 	bl	597c <yield>
		if (tx_state < 3) {
    136a:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    136c:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
    1370:	d8dc      	bhi.n	132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1372:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
    1374:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1376:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    137a:	d4d7      	bmi.n	132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
    137c:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    137e:	1e6c      	subs	r4, r5, #1
    1380:	4408      	add	r0, r1
    1382:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
    1386:	b941      	cbnz	r1, 139a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1388:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
    138a:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
    138c:	1a43      	subs	r3, r0, r1
    138e:	2b03      	cmp	r3, #3
    1390:	d801      	bhi.n	1396 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
    1392:	2902      	cmp	r1, #2
    1394:	d9f7      	bls.n	1386 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
    1396:	460c      	mov	r4, r1
    1398:	e7c8      	b.n	132c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
    139a:	2901      	cmp	r1, #1
    139c:	d031      	beq.n	1402 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    139e:	b117      	cbz	r7, 13a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
    13a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    13a4:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    13a6:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
    13aa:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    13ac:	2b87      	cmp	r3, #135	; 0x87
    13ae:	d8c1      	bhi.n	1334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13b0:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13b2:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13b6:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13ba:	d0bb      	beq.n	1334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    13bc:	1c59      	adds	r1, r3, #1
    13be:	449e      	add	lr, r3
    13c0:	3319      	adds	r3, #25
    13c2:	b2c9      	uxtb	r1, r1
    13c4:	fa5f fe8e 	uxtb.w	lr, lr
    13c8:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    13cc:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13d0:	1c48      	adds	r0, r1, #1
    13d2:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
    13d4:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13d8:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
    13da:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    13de:	d0a9      	beq.n	1334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    13e0:	2989      	cmp	r1, #137	; 0x89
    13e2:	d1f3      	bne.n	13cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
    13e4:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    13e6:	050b      	lsls	r3, r1, #20
    13e8:	d5a7      	bpl.n	133a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13ea:	6913      	ldr	r3, [r2, #16]
    13ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    13f0:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    13f2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    13f4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    13f8:	d105      	bne.n	1406 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
    13fa:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
    13fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    1402:	6614      	str	r4, [r2, #96]	; 0x60
    1404:	e7c1      	b.n	138a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1406:	6913      	ldr	r3, [r2, #16]
    1408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    140c:	6113      	str	r3, [r2, #16]
    140e:	e7f4      	b.n	13fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1410:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1412:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1416:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    141a:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    141c:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    141e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1420:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    1424:	d0e9      	beq.n	13fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    1426:	e7ee      	b.n	1406 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
    1428:	2004      	movs	r0, #4
}
    142a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    142e:	bf00      	nop
    1430:	20003dc4 	.word	0x20003dc4

00001434 <TwoWire::isr()>:
	uint32_t status = port->SSR;
    1434:	6903      	ldr	r3, [r0, #16]
{
    1436:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    1438:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    143c:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
    143e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    1442:	d001      	beq.n	1448 <TwoWire::isr()+0x14>
    1444:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1448:	07ae      	lsls	r6, r5, #30
    144a:	d50b      	bpl.n	1464 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    144c:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    1450:	0408      	lsls	r0, r1, #16
    1452:	d53e      	bpl.n	14d2 <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    1454:	2200      	movs	r2, #0
    1456:	2001      	movs	r0, #1
    1458:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    145c:	4422      	add	r2, r4
    145e:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    1462:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1464:	07ea      	lsls	r2, r5, #31
    1466:	d510      	bpl.n	148a <TwoWire::isr()+0x56>
		if (!transmitting) {
    1468:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    146c:	b1f6      	cbz	r6, 14ac <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    146e:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    1472:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    1476:	42b2      	cmp	r2, r6
    1478:	d927      	bls.n	14ca <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    147a:	1c72      	adds	r2, r6, #1
    147c:	4426      	add	r6, r4
    147e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    1482:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    1486:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    148a:	05ab      	lsls	r3, r5, #22
    148c:	d50d      	bpl.n	14aa <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    148e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    1492:	b118      	cbz	r0, 149c <TwoWire::isr()+0x68>
    1494:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    1498:	b103      	cbz	r3, 149c <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    149a:	4798      	blx	r3
		rxBufferIndex = 0;
    149c:	2300      	movs	r3, #0
    149e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    14a2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    14a6:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    14aa:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    14ac:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    14b0:	b10a      	cbz	r2, 14b6 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    14b2:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    14b4:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    14b6:	2200      	movs	r2, #0
    14b8:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    14bc:	2201      	movs	r2, #1
    14be:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    14c2:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    14c6:	42b2      	cmp	r2, r6
    14c8:	d8d7      	bhi.n	147a <TwoWire::isr()+0x46>
			port->STDR = 0;
    14ca:	2200      	movs	r2, #0
    14cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    14d0:	e7db      	b.n	148a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    14d2:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    14d6:	2a87      	cmp	r2, #135	; 0x87
    14d8:	d8c4      	bhi.n	1464 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    14da:	1c50      	adds	r0, r2, #1
    14dc:	b2c0      	uxtb	r0, r0
    14de:	e7bd      	b.n	145c <TwoWire::isr()+0x28>

000014e0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    14e0:	4801      	ldr	r0, [pc, #4]	; (14e8 <lpi2c1_isr()+0x8>)
    14e2:	f7ff bfa7 	b.w	1434 <TwoWire::isr()>
    14e6:	bf00      	nop
    14e8:	20002878 	.word	0x20002878

000014ec <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    14ec:	4801      	ldr	r0, [pc, #4]	; (14f4 <lpi2c3_isr()+0x8>)
    14ee:	f7ff bfa1 	b.w	1434 <TwoWire::isr()>
    14f2:	bf00      	nop
    14f4:	200029b8 	.word	0x200029b8

000014f8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    14f8:	4801      	ldr	r0, [pc, #4]	; (1500 <lpi2c4_isr()+0x8>)
    14fa:	f7ff bf9b 	b.w	1434 <TwoWire::isr()>
    14fe:	bf00      	nop
    1500:	20002af8 	.word	0x20002af8

00001504 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    1504:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    1506:	4c09      	ldr	r4, [pc, #36]	; (152c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    1508:	4909      	ldr	r1, [pc, #36]	; (1530 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    150a:	4622      	mov	r2, r4
    150c:	4809      	ldr	r0, [pc, #36]	; (1534 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    150e:	f7ff fd99 	bl	1044 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    1512:	f104 0250 	add.w	r2, r4, #80	; 0x50
    1516:	4908      	ldr	r1, [pc, #32]	; (1538 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    1518:	4808      	ldr	r0, [pc, #32]	; (153c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    151a:	f7ff fd93 	bl	1044 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    151e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    1522:	4907      	ldr	r1, [pc, #28]	; (1540 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    1524:	4807      	ldr	r0, [pc, #28]	; (1544 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    1526:	f7ff fd8d 	bl	1044 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    152a:	bd10      	pop	{r4, pc}
    152c:	60001ff8 	.word	0x60001ff8
    1530:	403f0000 	.word	0x403f0000
    1534:	20002878 	.word	0x20002878
    1538:	403f8000 	.word	0x403f8000
    153c:	200029b8 	.word	0x200029b8
    1540:	403fc000 	.word	0x403fc000
    1544:	20002af8 	.word	0x20002af8

00001548 <PA12::~PA12()>:
}
    1548:	4770      	bx	lr
    154a:	bf00      	nop

0000154c <PA12::~PA12()>:
PA12::~PA12() {
    154c:	b510      	push	{r4, lr}
    154e:	4604      	mov	r4, r0
}
    1550:	f640 2148 	movw	r1, #2632	; 0xa48
    1554:	f002 fe00 	bl	4158 <operator delete(void*, unsigned int)>
    1558:	4620      	mov	r0, r4
    155a:	bd10      	pop	{r4, pc}

0000155c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    155c:	f004 b926 	b.w	57ac <usb_serial_available>

00001560 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1560:	f004 b968 	b.w	5834 <usb_serial_getchar>

00001564 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1564:	4608      	mov	r0, r1
    1566:	f004 b975 	b.w	5854 <usb_serial_putchar>
    156a:	bf00      	nop

0000156c <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
    156c:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
    156e:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
    1572:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
    1574:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
    1576:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
    1578:	4a02      	ldr	r2, [pc, #8]	; (1584 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
    157a:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
    157c:	e9c0 2300 	strd	r2, r3, [r0]
}
    1580:	4770      	bx	lr
    1582:	bf00      	nop
    1584:	20000820 	.word	0x20000820

00001588 <PA12::begin(int)>:
void PA12::begin(int baud){
    1588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    158a:	4604      	mov	r4, r0
    158c:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
    158e:	7b00      	ldrb	r0, [r0, #12]
    1590:	2101      	movs	r1, #1
    1592:	f002 fc87 	bl	3ea4 <pinMode>
	if(PA12_Serial_Type)
    1596:	6866      	ldr	r6, [r4, #4]
    1598:	b30e      	cbz	r6, 15de <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    159a:	68a6      	ldr	r6, [r4, #8]
    159c:	4628      	mov	r0, r5
    159e:	f000 faaf 	bl	1b00 <irp_get_baudrate>
    15a2:	4601      	mov	r1, r0
    15a4:	4630      	mov	r0, r6
    15a6:	f000 fadb 	bl	1b60 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
    15aa:	7c21      	ldrb	r1, [r4, #16]
    15ac:	7b20      	ldrb	r0, [r4, #12]
    15ae:	f002 fc3d 	bl	3e2c <digitalWrite>
	mIRPtxrxStatus = 0;
    15b2:	2100      	movs	r1, #0
	SmartDelayFlag=1;
    15b4:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
    15b6:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
    15b8:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
    15ba:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
    15be:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
    15c2:	2104      	movs	r1, #4
	SmartDelayFlag=1;
    15c4:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
    15c8:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
    15cc:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
    15d0:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
    15d4:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
    15d8:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
    15dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    15de:	68a7      	ldr	r7, [r4, #8]
    15e0:	4628      	mov	r0, r5
    15e2:	f000 fa8d 	bl	1b00 <irp_get_baudrate>
    15e6:	4632      	mov	r2, r6
    15e8:	4601      	mov	r1, r0
    15ea:	4638      	mov	r0, r7
    15ec:	f001 fac4 	bl	2b78 <HardwareSerial::begin(unsigned long, unsigned short)>
    15f0:	e7db      	b.n	15aa <PA12::begin(int)+0x22>
    15f2:	bf00      	nop

000015f4 <PA12::readRaw()>:
int PA12::readRaw(void){
    15f4:	b510      	push	{r4, lr}
    15f6:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
    15f8:	6880      	ldr	r0, [r0, #8]
    15fa:	4a0c      	ldr	r2, [pc, #48]	; (162c <PA12::readRaw()+0x38>)
    15fc:	6803      	ldr	r3, [r0, #0]
    15fe:	691b      	ldr	r3, [r3, #16]
    1600:	4293      	cmp	r3, r2
    1602:	d10d      	bne.n	1620 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
    1604:	f004 f8d2 	bl	57ac <usb_serial_available>
    1608:	b148      	cbz	r0, 161e <PA12::readRaw()+0x2a>
    160a:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
    160c:	4a08      	ldr	r2, [pc, #32]	; (1630 <PA12::readRaw()+0x3c>)
    160e:	6803      	ldr	r3, [r0, #0]
    1610:	695b      	ldr	r3, [r3, #20]
    1612:	4293      	cmp	r3, r2
    1614:	d106      	bne.n	1624 <PA12::readRaw()+0x30>
}
    1616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
    161a:	f004 b90b 	b.w	5834 <usb_serial_getchar>
    161e:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
    1620:	4798      	blx	r3
    1622:	e7f1      	b.n	1608 <PA12::readRaw()+0x14>
}
    1624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
    1628:	4718      	bx	r3
    162a:	bf00      	nop
    162c:	0000155d 	.word	0x0000155d
    1630:	00001561 	.word	0x00001561

00001634 <PA12::available()>:
		return PA12_Serial->available();
    1634:	6880      	ldr	r0, [r0, #8]
    1636:	4a04      	ldr	r2, [pc, #16]	; (1648 <PA12::available()+0x14>)
    1638:	6803      	ldr	r3, [r0, #0]
    163a:	691b      	ldr	r3, [r3, #16]
    163c:	4293      	cmp	r3, r2
    163e:	d101      	bne.n	1644 <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
    1640:	f004 b8b4 	b.w	57ac <usb_serial_available>
    1644:	4718      	bx	r3
    1646:	bf00      	nop
    1648:	0000155d 	.word	0x0000155d

0000164c <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	4d0e      	ldr	r5, [pc, #56]	; (1688 <PA12::clearBuffer()+0x3c>)
    1650:	4604      	mov	r4, r0
    1652:	4e0e      	ldr	r6, [pc, #56]	; (168c <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
    1654:	68a0      	ldr	r0, [r4, #8]
    1656:	6803      	ldr	r3, [r0, #0]
    1658:	691b      	ldr	r3, [r3, #16]
    165a:	42ab      	cmp	r3, r5
    165c:	d10e      	bne.n	167c <PA12::clearBuffer()+0x30>
    165e:	f004 f8a5 	bl	57ac <usb_serial_available>
	while((this->available()))
    1662:	b170      	cbz	r0, 1682 <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
    1664:	68a0      	ldr	r0, [r4, #8]
    1666:	6803      	ldr	r3, [r0, #0]
    1668:	695b      	ldr	r3, [r3, #20]
    166a:	42b3      	cmp	r3, r6
    166c:	d10a      	bne.n	1684 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
    166e:	f004 f8e1 	bl	5834 <usb_serial_getchar>
		return PA12_Serial->available();
    1672:	68a0      	ldr	r0, [r4, #8]
    1674:	6803      	ldr	r3, [r0, #0]
    1676:	691b      	ldr	r3, [r3, #16]
    1678:	42ab      	cmp	r3, r5
    167a:	d0f0      	beq.n	165e <PA12::clearBuffer()+0x12>
    167c:	4798      	blx	r3
	while((this->available()))
    167e:	2800      	cmp	r0, #0
    1680:	d1f0      	bne.n	1664 <PA12::clearBuffer()+0x18>
}
    1682:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
    1684:	4798      	blx	r3
    1686:	e7e5      	b.n	1654 <PA12::clearBuffer()+0x8>
    1688:	0000155d 	.word	0x0000155d
    168c:	00001561 	.word	0x00001561

00001690 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1694:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
    1696:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1698:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    169a:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
    169c:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
    169e:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
    16a2:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    16a6:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
    16a8:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
    16ac:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
    16b0:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
    16b4:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    16b8:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
    16bc:	dd40      	ble.n	1740 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
    16be:	f600 010c 	addw	r1, r0, #2060	; 0x80c
    16c2:	00aa      	lsls	r2, r5, #2
    16c4:	f500 6085 	add.w	r0, r0, #1064	; 0x428
    16c8:	f006 f902 	bl	78d0 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    16cc:	1dab      	adds	r3, r5, #6
    16ce:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    16d2:	2000      	movs	r0, #0
    16d4:	2203      	movs	r2, #3
    16d6:	e001      	b.n	16dc <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
    16d8:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    16dc:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
    16de:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    16e0:	4293      	cmp	r3, r2
    16e2:	dcf9      	bgt.n	16d8 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    16e4:	43c0      	mvns	r0, r0
    16e6:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    16ea:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    16ec:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    16f0:	7b20      	ldrb	r0, [r4, #12]
    16f2:	f002 fb9b 	bl	3e2c <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    16f6:	2e00      	cmp	r6, #0
    16f8:	dd17      	ble.n	172a <PA12::txPacket(int, int, int)+0x9a>
    16fa:	f204 480c 	addw	r8, r4, #1036	; 0x40c
    16fe:	2500      	movs	r5, #0
    1700:	4f13      	ldr	r7, [pc, #76]	; (1750 <PA12::txPacket(int, int, int)+0xc0>)
    1702:	e004      	b.n	170e <PA12::txPacket(int, int, int)+0x7e>
    1704:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1706:	f004 f8a5 	bl	5854 <usb_serial_putchar>
    170a:	42ae      	cmp	r6, r5
    170c:	d00d      	beq.n	172a <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
    170e:	68a2      	ldr	r2, [r4, #8]
    1710:	f858 0f04 	ldr.w	r0, [r8, #4]!
    1714:	6813      	ldr	r3, [r2, #0]
    1716:	b2c0      	uxtb	r0, r0
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	42bb      	cmp	r3, r7
    171c:	d0f2      	beq.n	1704 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    171e:	3501      	adds	r5, #1
PA12_Serial->write(value);
    1720:	4601      	mov	r1, r0
    1722:	4610      	mov	r0, r2
    1724:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1726:	42ae      	cmp	r6, r5
    1728:	d1f1      	bne.n	170e <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
    172a:	68a0      	ldr	r0, [r4, #8]
    172c:	6803      	ldr	r3, [r0, #0]
    172e:	68db      	ldr	r3, [r3, #12]
    1730:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
    1732:	7b20      	ldrb	r0, [r4, #12]
    1734:	7c61      	ldrb	r1, [r4, #17]
    1736:	f002 fb79 	bl	3e2c <digitalWrite>
}
    173a:	4630      	mov	r0, r6
    173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1740:	1dab      	adds	r3, r5, #6
    1742:	2b03      	cmp	r3, #3
    1744:	dcc3      	bgt.n	16ce <PA12::txPacket(int, int, int)+0x3e>
    1746:	f04f 30ff 	mov.w	r0, #4294967295
    174a:	2303      	movs	r3, #3
    174c:	e7cb      	b.n	16e6 <PA12::txPacket(int, int, int)+0x56>
    174e:	bf00      	nop
    1750:	00001565 	.word	0x00001565

00001754 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
    1754:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
    1756:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    175a:	4689      	mov	r9, r1
    175c:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
    175e:	d046      	beq.n	17ee <PA12::rxPacket(int)+0x9a>
    1760:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1764:	4299      	cmp	r1, r3
    1766:	d042      	beq.n	17ee <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
    1768:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
    176c:	f1b9 0f00 	cmp.w	r9, #0
    1770:	dd66      	ble.n	1840 <PA12::rxPacket(int)+0xec>
    1772:	f104 0a10 	add.w	sl, r4, #16
    1776:	3602      	adds	r6, #2
    1778:	2700      	movs	r7, #0
    177a:	4d5a      	ldr	r5, [pc, #360]	; (18e4 <PA12::rxPacket(int)+0x190>)
    177c:	46d0      	mov	r8, sl
		ulCounter = 0;
    177e:	f04f 0b00 	mov.w	fp, #0
    1782:	e007      	b.n	1794 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
    1784:	f004 f812 	bl	57ac <usb_serial_available>
    1788:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    178a:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    178e:	b963      	cbnz	r3, 17aa <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
    1790:	45b3      	cmp	fp, r6
    1792:	d02f      	beq.n	17f4 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
    1794:	68a0      	ldr	r0, [r4, #8]
    1796:	6803      	ldr	r3, [r0, #0]
    1798:	691b      	ldr	r3, [r3, #16]
    179a:	42ab      	cmp	r3, r5
    179c:	d0f2      	beq.n	1784 <PA12::rxPacket(int)+0x30>
    179e:	4798      	blx	r3
    17a0:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    17a2:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    17a6:	2b00      	cmp	r3, #0
    17a8:	d0f2      	beq.n	1790 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
    17aa:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
    17ac:	4620      	mov	r0, r4
    17ae:	f7ff ff21 	bl	15f4 <PA12::readRaw()>
    17b2:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
    17b6:	45b9      	cmp	r9, r7
    17b8:	d1e1      	bne.n	177e <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    17ba:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    17be:	f502 7382 	add.w	r3, r2, #260	; 0x104
    17c2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    17c6:	29fe      	cmp	r1, #254	; 0xfe
    17c8:	d00e      	beq.n	17e8 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
    17ca:	2f03      	cmp	r7, #3
    17cc:	dd0c      	ble.n	17e8 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    17ce:	6963      	ldr	r3, [r4, #20]
    17d0:	2bff      	cmp	r3, #255	; 0xff
    17d2:	d027      	beq.n	1824 <PA12::rxPacket(int)+0xd0>
    17d4:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    17d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
    17dc:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
    17de:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
    17e2:	2700      	movs	r7, #0
				clearBuffer();
    17e4:	f7ff ff32 	bl	164c <PA12::clearBuffer()>
}
    17e8:	4638      	mov	r0, r7
    17ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
    17ee:	f44f 3648 	mov.w	r6, #204800	; 0x32000
    17f2:	e7bb      	b.n	176c <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    17f4:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    17f8:	f502 7182 	add.w	r1, r2, #260	; 0x104
    17fc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    1800:	29fe      	cmp	r1, #254	; 0xfe
    1802:	d0f1      	beq.n	17e8 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
    1804:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    1808:	d0df      	beq.n	17ca <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    180a:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
    180e:	461f      	mov	r7, r3
			clearBuffer();			
    1810:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    1812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1816:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
    181a:	f7ff ff17 	bl	164c <PA12::clearBuffer()>
}
    181e:	4638      	mov	r0, r7
    1820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    1824:	69a3      	ldr	r3, [r4, #24]
    1826:	2bff      	cmp	r3, #255	; 0xff
    1828:	d1d4      	bne.n	17d4 <PA12::rxPacket(int)+0x80>
    182a:	69e3      	ldr	r3, [r4, #28]
    182c:	2bff      	cmp	r3, #255	; 0xff
    182e:	d009      	beq.n	1844 <PA12::rxPacket(int)+0xf0>
    1830:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
    1834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1838:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    183a:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
    183e:	e7cd      	b.n	17dc <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
    1840:	2700      	movs	r7, #0
    1842:	e7d1      	b.n	17e8 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1844:	3204      	adds	r2, #4
    1846:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    184a:	685b      	ldr	r3, [r3, #4]
    184c:	428b      	cmp	r3, r1
    184e:	d02c      	beq.n	18aa <PA12::rxPacket(int)+0x156>
    1850:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1858:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
    185c:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
    185e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1862:	6852      	ldr	r2, [r2, #4]
    1864:	428a      	cmp	r2, r1
    1866:	d115      	bne.n	1894 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
    1868:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
    186c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1870:	6951      	ldr	r1, [r2, #20]
    1872:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
    1876:	1aba      	subs	r2, r7, r2
    1878:	4291      	cmp	r1, r2
    187a:	d10b      	bne.n	1894 <PA12::rxPacket(int)+0x140>
    187c:	f104 021c 	add.w	r2, r4, #28
    1880:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1884:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1888:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    188a:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    188c:	d1fa      	bne.n	1884 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    188e:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    1890:	2bff      	cmp	r3, #255	; 0xff
    1892:	d0a9      	beq.n	17e8 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1894:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1898:	4620      	mov	r0, r4
				return 0;
    189a:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    18a0:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    18a4:	f7ff fed2 	bl	164c <PA12::clearBuffer()>
				return 0;
    18a8:	e79e      	b.n	17e8 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    18aa:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    18ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    18b2:	6958      	ldr	r0, [r3, #20]
    18b4:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    18b8:	1afb      	subs	r3, r7, r3
    18ba:	4298      	cmp	r0, r3
    18bc:	d1c8      	bne.n	1850 <PA12::rxPacket(int)+0xfc>
    18be:	f104 001c 	add.w	r0, r4, #28
    18c2:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    18c6:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    18c8:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    18cc:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    18ce:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    18d0:	d1fa      	bne.n	18c8 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    18d2:	2bff      	cmp	r3, #255	; 0xff
    18d4:	d0c3      	beq.n	185e <PA12::rxPacket(int)+0x10a>
    18d6:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    18da:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    18de:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    18e2:	e7bc      	b.n	185e <PA12::rxPacket(int)+0x10a>
    18e4:	0000155d 	.word	0x0000155d

000018e8 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    18e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    18ec:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    18ee:	4698      	mov	r8, r3
    18f0:	4605      	mov	r5, r0
	mBusUsed = 1;
    18f2:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    18f4:	468a      	mov	sl, r1
    18f6:	4691      	mov	r9, r2
    18f8:	4e56      	ldr	r6, [pc, #344]	; (1a54 <PA12::txRxPacket(int, int, int)+0x16c>)
    18fa:	4f57      	ldr	r7, [pc, #348]	; (1a58 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    18fc:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    1900:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    1904:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    1908:	68a8      	ldr	r0, [r5, #8]
    190a:	6803      	ldr	r3, [r0, #0]
    190c:	691c      	ldr	r4, [r3, #16]
    190e:	42b4      	cmp	r4, r6
    1910:	d10f      	bne.n	1932 <PA12::txRxPacket(int, int, int)+0x4a>
    1912:	f003 ff4b 	bl	57ac <usb_serial_available>
    1916:	4604      	mov	r4, r0
		while((this->available())){
    1918:	b17c      	cbz	r4, 193a <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    191a:	68a8      	ldr	r0, [r5, #8]
    191c:	6803      	ldr	r3, [r0, #0]
    191e:	695b      	ldr	r3, [r3, #20]
    1920:	42bb      	cmp	r3, r7
    1922:	d14a      	bne.n	19ba <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    1924:	f003 ff86 	bl	5834 <usb_serial_getchar>
		return PA12_Serial->available();
    1928:	68a8      	ldr	r0, [r5, #8]
    192a:	6803      	ldr	r3, [r0, #0]
    192c:	691c      	ldr	r4, [r3, #16]
    192e:	42b4      	cmp	r4, r6
    1930:	d0ef      	beq.n	1912 <PA12::txRxPacket(int, int, int)+0x2a>
    1932:	47a0      	blx	r4
    1934:	4604      	mov	r4, r0
		while((this->available())){
    1936:	2c00      	cmp	r4, #0
    1938:	d1ef      	bne.n	191a <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    193a:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    193c:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1940:	464a      	mov	r2, r9
    1942:	4651      	mov	r1, sl
    1944:	4628      	mov	r0, r5
    1946:	f7ff fea3 	bl	1690 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    194a:	4580      	cmp	r8, r0
    194c:	d102      	bne.n	1954 <PA12::txRxPacket(int, int, int)+0x6c>
    194e:	2301      	movs	r3, #1
    1950:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    1954:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    1958:	d043      	beq.n	19e2 <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    195a:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    195e:	d02e      	beq.n	19be <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    1960:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1964:	d065      	beq.n	1a32 <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    1966:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    196a:	2b01      	cmp	r3, #1
    196c:	dd53      	ble.n	1a16 <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    196e:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    1972:	2b01      	cmp	r3, #1
    1974:	d038      	beq.n	19e8 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    1976:	230b      	movs	r3, #11
    1978:	461e      	mov	r6, r3
    197a:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    197e:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1982:	2b01      	cmp	r3, #1
    1984:	d038      	beq.n	19f8 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    1986:	4631      	mov	r1, r6
    1988:	4628      	mov	r0, r5
    198a:	f7ff fee3 	bl	1754 <PA12::rxPacket(int)>
	mBusUsed = 0;
    198e:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1990:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    1992:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1996:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    199a:	d007      	beq.n	19ac <PA12::txRxPacket(int, int, int)+0xc4>
    199c:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    19a0:	f503 7382 	add.w	r3, r3, #260	; 0x104
    19a4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    19a8:	2bfe      	cmp	r3, #254	; 0xfe
    19aa:	d029      	beq.n	1a00 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    19ac:	2302      	movs	r3, #2
	return 1;
    19ae:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    19b0:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    19b4:	4620      	mov	r0, r4
    19b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    19ba:	4798      	blx	r3
    19bc:	e7a4      	b.n	1908 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    19be:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    19c2:	3607      	adds	r6, #7
    19c4:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    19c8:	2e00      	cmp	r6, #0
    19ca:	d1d8      	bne.n	197e <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    19cc:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    19d0:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    19d4:	f503 7382 	add.w	r3, r3, #260	; 0x104
    19d8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    19dc:	2bf1      	cmp	r3, #241	; 0xf1
    19de:	d1e5      	bne.n	19ac <PA12::txRxPacket(int, int, int)+0xc4>
    19e0:	e7e8      	b.n	19b4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    19e2:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    19e6:	d02f      	beq.n	1a48 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    19e8:	2307      	movs	r3, #7
    19ea:	461e      	mov	r6, r3
    19ec:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    19f0:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    19f4:	2b01      	cmp	r3, #1
    19f6:	d1c6      	bne.n	1986 <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    19f8:	2096      	movs	r0, #150	; 0x96
    19fa:	f002 f999 	bl	3d30 <delay>
    19fe:	e7c2      	b.n	1986 <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1a00:	2800      	cmp	r0, #0
    1a02:	d1d3      	bne.n	19ac <PA12::txRxPacket(int, int, int)+0xc4>
    1a04:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1a08:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1a0c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1a10:	2bf1      	cmp	r3, #241	; 0xf1
    1a12:	d1cb      	bne.n	19ac <PA12::txRxPacket(int, int, int)+0xc4>
    1a14:	e7ce      	b.n	19b4 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    1a16:	2300      	movs	r3, #0
    1a18:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1a1c:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1a20:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1a24:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1a28:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1a2c:	2bf1      	cmp	r3, #241	; 0xf1
    1a2e:	d1bd      	bne.n	19ac <PA12::txRxPacket(int, int, int)+0xc4>
    1a30:	e7c0      	b.n	19b4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    1a32:	f029 0910 	bic.w	r9, r9, #16
    1a36:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    1a3a:	d1ec      	bne.n	1a16 <PA12::txRxPacket(int, int, int)+0x12e>
    1a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1a40:	461e      	mov	r6, r3
    1a42:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1a46:	e79a      	b.n	197e <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1a48:	23ff      	movs	r3, #255	; 0xff
    1a4a:	461e      	mov	r6, r3
    1a4c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1a50:	e795      	b.n	197e <PA12::txRxPacket(int, int, int)+0x96>
    1a52:	bf00      	nop
    1a54:	0000155d 	.word	0x0000155d
    1a58:	00001561 	.word	0x00001561

00001a5c <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    1a5c:	b530      	push	{r4, r5, lr}
    1a5e:	4615      	mov	r5, r2
    1a60:	b083      	sub	sp, #12
    1a62:	4604      	mov	r4, r0
    1a64:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1a66:	f7ff fdf1 	bl	164c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1a6a:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1a6c:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1a6e:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1a72:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1a74:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1a78:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1a7a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1a7e:	22f3      	movs	r2, #243	; 0xf3
    1a80:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1a82:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1a86:	b003      	add	sp, #12
    1a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1a8c:	f7ff bf2c 	b.w	18e8 <PA12::txRxPacket(int, int, int)>

00001a90 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    1a90:	b530      	push	{r4, r5, lr}
    1a92:	4615      	mov	r5, r2
    1a94:	b083      	sub	sp, #12
    1a96:	4604      	mov	r4, r0
    1a98:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1a9a:	f7ff fdd7 	bl	164c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1a9e:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1aa0:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1aa2:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1aa6:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1aa8:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1aac:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1aae:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1ab2:	22f3      	movs	r2, #243	; 0xf3
    1ab4:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1ab6:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1aba:	b003      	add	sp, #12
    1abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1ac0:	f7ff bf12 	b.w	18e8 <PA12::txRxPacket(int, int, int)>

00001ac4 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    1ac4:	b510      	push	{r4, lr}
    1ac6:	b082      	sub	sp, #8
    1ac8:	4604      	mov	r4, r0
    1aca:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1acc:	f7ff fdbe 	bl	164c <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    1ad0:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    1ad2:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1ad4:	22f2      	movs	r2, #242	; 0xf2
    1ad6:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1ad8:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1adc:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    1ade:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1ae2:	f7ff ff01 	bl	18e8 <PA12::txRxPacket(int, int, int)>
    1ae6:	b138      	cbz	r0, 1af8 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1aea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1aee:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1af2:	b280      	uxth	r0, r0
}
    1af4:	b002      	add	sp, #8
    1af6:	bd10      	pop	{r4, pc}
		return 0xffff;
    1af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1afc:	b002      	add	sp, #8
    1afe:	bd10      	pop	{r4, pc}

00001b00 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1b00:	2810      	cmp	r0, #16
    1b02:	dc11      	bgt.n	1b28 <irp_get_baudrate+0x28>
    1b04:	2801      	cmp	r0, #1
    1b06:	dd0c      	ble.n	1b22 <irp_get_baudrate+0x22>
    1b08:	3802      	subs	r0, #2
    1b0a:	280e      	cmp	r0, #14
    1b0c:	d809      	bhi.n	1b22 <irp_get_baudrate+0x22>
    1b0e:	e8df f000 	tbb	[pc, r0]
    1b12:	0819      	.short	0x0819
    1b14:	0808081b 	.word	0x0808081b
    1b18:	08080817 	.word	0x08080817
    1b1c:	08080808 	.word	0x08080808
    1b20:	1d          	.byte	0x1d
    1b21:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    1b22:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1b26:	4770      	bx	lr
    switch(baudnum)
    1b28:	2840      	cmp	r0, #64	; 0x40
    1b2a:	d006      	beq.n	1b3a <irp_get_baudrate+0x3a>
        temp= 9600; break;
    1b2c:	2880      	cmp	r0, #128	; 0x80
    1b2e:	bf14      	ite	ne
    1b30:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    1b34:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    1b38:	4770      	bx	lr
    switch(baudnum)
    1b3a:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    1b3e:	4770      	bx	lr
        temp= 2000000; break;
    1b40:	4804      	ldr	r0, [pc, #16]	; (1b54 <irp_get_baudrate+0x54>)
    1b42:	4770      	bx	lr
        temp= 4000000; break;
    1b44:	4804      	ldr	r0, [pc, #16]	; (1b58 <irp_get_baudrate+0x58>)
    1b46:	4770      	bx	lr
        temp= 2500000; break;
    1b48:	4804      	ldr	r0, [pc, #16]	; (1b5c <irp_get_baudrate+0x5c>)
    1b4a:	4770      	bx	lr
        temp= 115200; break;
    1b4c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop
    1b54:	001e8480 	.word	0x001e8480
    1b58:	003d0900 	.word	0x003d0900
    1b5c:	002625a0 	.word	0x002625a0

00001b60 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    1b60:	b410      	push	{r4}
	if (port) {
    1b62:	6904      	ldr	r4, [r0, #16]
    1b64:	b12c      	cbz	r4, 1b72 <SoftwareSerial::begin(unsigned long)+0x12>
		port->begin(speed);
    1b66:	4620      	mov	r0, r4
    1b68:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    1b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    1b6e:	f001 b803 	b.w	2b78 <HardwareSerial::begin(unsigned long, unsigned short)>
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1b72:	460b      	mov	r3, r1
    1b74:	4a0a      	ldr	r2, [pc, #40]	; (1ba0 <SoftwareSerial::begin(unsigned long)+0x40>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1b76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    1b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1b7e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    1b82:	fbb2 f3f3 	udiv	r3, r2, r3
    1b86:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1b88:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1b8c:	4a05      	ldr	r2, [pc, #20]	; (1ba4 <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1b92:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1b96:	6813      	ldr	r3, [r2, #0]
    1b98:	f043 0301 	orr.w	r3, r3, #1
    1b9c:	6013      	str	r3, [r2, #0]
}
    1b9e:	4770      	bx	lr
    1ba0:	23c34600 	.word	0x23c34600
    1ba4:	e0001000 	.word	0xe0001000

00001ba8 <Adafruit_INA260::Adafruit_INA260()>:
#include "Adafruit_INA260.h"

/*!
 *    @brief  Instantiates a new INA260 class
 */
Adafruit_INA260::Adafruit_INA260(void) {}
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop

00001bac <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bb0:	b086      	sub	sp, #24
    1bb2:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1bb4:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1bb6:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1bba:	f002 facb 	bl	4154 <operator new(unsigned int)>
    1bbe:	4604      	mov	r4, r0
    1bc0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1bc4:	f000 f9ee 	bl	1fa4 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>

  if (!i2c_dev->begin()) {
    1bc8:	2101      	movs	r1, #1
    1bca:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1bcc:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    1bce:	f000 f9f3 	bl	1fb8 <Adafruit_I2CDevice::begin(bool)>
    1bd2:	b920      	cbnz	r0, 1bde <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    1bd4:	2400      	movs	r4, #0
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);

  reset();
  delay(2); // delay 2ms to give time for first measurement to finish
  return true;
}
    1bd6:	4620      	mov	r0, r4
    1bd8:	b006      	add	sp, #24
    1bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    1bde:	2601      	movs	r6, #1
    1be0:	4604      	mov	r4, r0
    1be2:	2018      	movs	r0, #24
    1be4:	f002 fab6 	bl	4154 <operator new(unsigned int)>
    1be8:	2302      	movs	r3, #2
    1bea:	22ff      	movs	r2, #255	; 0xff
    1bec:	4680      	mov	r8, r0
    1bee:	e9cd 6600 	strd	r6, r6, [sp]
    1bf2:	68e9      	ldr	r1, [r5, #12]
    1bf4:	f000 f8b4 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1bf8:	2018      	movs	r0, #24
    1bfa:	f002 faab 	bl	4154 <operator new(unsigned int)>
    1bfe:	2302      	movs	r3, #2
    1c00:	22fe      	movs	r2, #254	; 0xfe
    1c02:	4607      	mov	r7, r0
    1c04:	e9cd 6600 	strd	r6, r6, [sp]
    1c08:	68e9      	ldr	r1, [r5, #12]
    1c0a:	f000 f8a9 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    1c0e:	2008      	movs	r0, #8
    1c10:	f002 faa0 	bl	4154 <operator new(unsigned int)>
    1c14:	4641      	mov	r1, r8
    1c16:	2304      	movs	r3, #4
    1c18:	220c      	movs	r2, #12
    1c1a:	4680      	mov	r8, r0
    1c1c:	f000 f998 	bl	1f50 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    1c20:	4638      	mov	r0, r7
    1c22:	f000 f973 	bl	1f0c <Adafruit_BusIO_Register::read()>
    1c26:	f245 4349 	movw	r3, #21577	; 0x5449
    1c2a:	4298      	cmp	r0, r3
    1c2c:	d1d2      	bne.n	1bd4 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    1c2e:	4640      	mov	r0, r8
    1c30:	f000 f992 	bl	1f58 <Adafruit_BusIO_RegisterBits::read()>
    1c34:	f240 2327 	movw	r3, #551	; 0x227
    1c38:	4298      	cmp	r0, r3
    1c3a:	d1cb      	bne.n	1bd4 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    1c3c:	2018      	movs	r0, #24
    1c3e:	f002 fa89 	bl	4154 <operator new(unsigned int)>
    1c42:	4607      	mov	r7, r0
    1c44:	2302      	movs	r3, #2
    1c46:	2200      	movs	r2, #0
    1c48:	e9cd 6600 	strd	r6, r6, [sp]
    1c4c:	68e9      	ldr	r1, [r5, #12]
    1c4e:	f000 f887 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    1c52:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    1c54:	2018      	movs	r0, #24
    1c56:	f002 fa7d 	bl	4154 <operator new(unsigned int)>
    1c5a:	4607      	mov	r7, r0
    1c5c:	2302      	movs	r3, #2
    1c5e:	2206      	movs	r2, #6
    1c60:	e9cd 6600 	strd	r6, r6, [sp]
    1c64:	68e9      	ldr	r1, [r5, #12]
    1c66:	f000 f87b 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    1c6a:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    1c6c:	2018      	movs	r0, #24
    1c6e:	f002 fa71 	bl	4154 <operator new(unsigned int)>
    1c72:	4607      	mov	r7, r0
    1c74:	2302      	movs	r3, #2
    1c76:	2207      	movs	r2, #7
    1c78:	e9cd 6600 	strd	r6, r6, [sp]
    1c7c:	68e9      	ldr	r1, [r5, #12]
    1c7e:	f000 f86f 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    @brief Resets the harware. All registers are set to default values,
    the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_INA260::reset(void) {
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1c82:	230f      	movs	r3, #15
    1c84:	6829      	ldr	r1, [r5, #0]
    1c86:	4632      	mov	r2, r6
    1c88:	a804      	add	r0, sp, #16
  AlertLimit =
    1c8a:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1c8c:	f000 f960 	bl	1f50 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    1c90:	4631      	mov	r1, r6
    1c92:	a804      	add	r0, sp, #16
    1c94:	f000 f96e 	bl	1f74 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    1c98:	2002      	movs	r0, #2
    1c9a:	f002 f849 	bl	3d30 <delay>
  return true;
    1c9e:	e79a      	b.n	1bd6 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

00001ca0 <Adafruit_INA260::readCurrent()>:
/*!
    @brief Reads and scales the current value of the Current register.
    @return The current current measurement in mA
*/
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
    1ca0:	b500      	push	{lr}
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1ca2:	2201      	movs	r2, #1
float Adafruit_INA260::readCurrent(void) {
    1ca4:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1ca6:	68c1      	ldr	r1, [r0, #12]
    1ca8:	2302      	movs	r3, #2
    1caa:	a802      	add	r0, sp, #8
    1cac:	e9cd 2200 	strd	r2, r2, [sp]
    1cb0:	f000 f856 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (int16_t)current.read() * 1.25;
    1cb4:	a802      	add	r0, sp, #8
    1cb6:	f000 f929 	bl	1f0c <Adafruit_BusIO_Register::read()>
    1cba:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1cbe:	b203      	sxth	r3, r0
    1cc0:	ee00 3a10 	vmov	s0, r3
    1cc4:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    1cc8:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1ccc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1cd0:	b009      	add	sp, #36	; 0x24
    1cd2:	f85d fb04 	ldr.w	pc, [sp], #4
    1cd6:	bf00      	nop

00001cd8 <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    1cd8:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1cda:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1cdc:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1cde:	2401      	movs	r4, #1
    1ce0:	68c1      	ldr	r1, [r0, #12]
    1ce2:	461a      	mov	r2, r3
    1ce4:	a802      	add	r0, sp, #8
    1ce6:	e9cd 4400 	strd	r4, r4, [sp]
    1cea:	f000 f839 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    1cee:	a802      	add	r0, sp, #8
    1cf0:	f000 f90c 	bl	1f0c <Adafruit_BusIO_Register::read()>
    1cf4:	ee06 0a90 	vmov	s13, r0
    1cf8:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1cfc:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    1d00:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1d04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1d08:	b008      	add	sp, #32
    1d0a:	bd10      	pop	{r4, pc}

00001d0c <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    1d0c:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1d0e:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    1d10:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1d12:	68c1      	ldr	r1, [r0, #12]
    1d14:	2302      	movs	r3, #2
    1d16:	2203      	movs	r2, #3
    1d18:	a802      	add	r0, sp, #8
    1d1a:	e9cd 4400 	strd	r4, r4, [sp]
    1d1e:	f000 f81f 	bl	1d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    1d22:	a802      	add	r0, sp, #8
    1d24:	f000 f8f2 	bl	1f0c <Adafruit_BusIO_Register::read()>
    1d28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1d2c:	fa00 f304 	lsl.w	r3, r0, r4
    1d30:	ee00 3a10 	vmov	s0, r3
}
    1d34:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    1d38:	b008      	add	sp, #32
    1d3a:	bd10      	pop	{r4, pc}

00001d3c <Adafruit_INA260::conversionReady()>:
/*!
    @brief Checks if the most recent one shot measurement has completed
    @return true if the conversion has completed
*/
/**************************************************************************/
bool Adafruit_INA260::conversionReady(void) {
    1d3c:	b500      	push	{lr}
    1d3e:	b083      	sub	sp, #12
  Adafruit_I2CRegisterBits conversion_ready =
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    1d40:	6841      	ldr	r1, [r0, #4]
    1d42:	2303      	movs	r3, #3
    1d44:	2201      	movs	r2, #1
    1d46:	4668      	mov	r0, sp
    1d48:	f000 f902 	bl	1f50 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1d4c:	4668      	mov	r0, sp
    1d4e:	f000 f903 	bl	1f58 <Adafruit_BusIO_RegisterBits::read()>
}
    1d52:	3800      	subs	r0, #0
    1d54:	bf18      	it	ne
    1d56:	2001      	movne	r0, #1
    1d58:	b003      	add	sp, #12
    1d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1d5e:	bf00      	nop

00001d60 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    1d60:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    1d62:	2300      	movs	r3, #0
  _address = reg_addr;
    1d64:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    1d66:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1d68:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1d6c:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1d6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    1d72:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1d74:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    1d76:	7343      	strb	r3, [r0, #13]
}
    1d78:	4770      	bx	lr
    1d7a:	bf00      	nop

00001d7c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1d7c:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1d80:	4603      	mov	r3, r0
  if (_i2cdevice) {
    1d82:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1d84:	b570      	push	{r4, r5, r6, lr}
    1d86:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    1d88:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    1d8c:	b140      	cbz	r0, 1da0 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    1d8e:	7b5c      	ldrb	r4, [r3, #13]
    1d90:	ab03      	add	r3, sp, #12
    1d92:	e9cd 3400 	strd	r3, r4, [sp]
    1d96:	2301      	movs	r3, #1
    1d98:	f000 f92a 	bl	1ff0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    1d9c:	b004      	add	sp, #16
    1d9e:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    1da0:	6858      	ldr	r0, [r3, #4]
    1da2:	2800      	cmp	r0, #0
    1da4:	d0fa      	beq.n	1d9c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1da6:	7a1e      	ldrb	r6, [r3, #8]
    1da8:	fa5f f58c 	uxtb.w	r5, ip
    1dac:	2e03      	cmp	r6, #3
    1dae:	d021      	beq.n	1df4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1db0:	460c      	mov	r4, r1
    1db2:	4696      	mov	lr, r2
    1db4:	b176      	cbz	r6, 1dd4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1db6:	2e02      	cmp	r6, #2
    1db8:	d111      	bne.n	1dde <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    1dba:	f065 057f 	orn	r5, r5, #127	; 0x7f
    1dbe:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    1dc2:	7b5d      	ldrb	r5, [r3, #13]
    1dc4:	4672      	mov	r2, lr
    1dc6:	ab03      	add	r3, sp, #12
    1dc8:	4621      	mov	r1, r4
    1dca:	9500      	str	r5, [sp, #0]
    1dcc:	f000 fb3c 	bl	2448 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    1dd0:	b004      	add	sp, #16
    1dd2:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    1dd4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    1dd8:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1ddc:	e7f1      	b.n	1dc2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    1dde:	2e01      	cmp	r6, #1
    1de0:	d1ef      	bne.n	1dc2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    1de2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1de6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    1dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1dee:	f88d 200c 	strb.w	r2, [sp, #12]
    1df2:	e7e6      	b.n	1dc2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1df4:	7b5c      	ldrb	r4, [r3, #13]
    1df6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1dfa:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1dfc:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1e00:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    1e02:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1e06:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    1e08:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1e0c:	f000 fb1c 	bl	2448 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    1e10:	e7c4      	b.n	1d9c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    1e12:	bf00      	nop

00001e14 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    1e14:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    1e16:	b962      	cbnz	r2, 1e32 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    1e18:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    1e1a:	2c04      	cmp	r4, #4
    1e1c:	d824      	bhi.n	1e68 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1e1e:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1e20:	b95c      	cbnz	r4, 1e3a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    1e22:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    1e26:	4622      	mov	r2, r4
    1e28:	4671      	mov	r1, lr
}
    1e2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    1e2e:	f7ff bfa5 	b.w	1d7c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    1e32:	2a04      	cmp	r2, #4
    1e34:	4614      	mov	r4, r2
    1e36:	d817      	bhi.n	1e68 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1e38:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    1e3a:	f100 0e0f 	add.w	lr, r0, #15
    1e3e:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    1e42:	7b85      	ldrb	r5, [r0, #14]
    1e44:	f100 020e 	add.w	r2, r0, #14
    1e48:	fa50 f383 	uxtab	r3, r0, r3
    1e4c:	46f4      	mov	ip, lr
    1e4e:	b94d      	cbnz	r5, 1e64 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    1e50:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    1e54:	3b01      	subs	r3, #1
    value >>= 8;
    1e56:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    1e58:	f10c 0c01 	add.w	ip, ip, #1
    1e5c:	4293      	cmp	r3, r2
    1e5e:	d0e2      	beq.n	1e26 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    1e60:	2d00      	cmp	r5, #0
    1e62:	d0f5      	beq.n	1e50 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    1e64:	7019      	strb	r1, [r3, #0]
    1e66:	e7f5      	b.n	1e54 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    1e68:	2000      	movs	r0, #0
}
    1e6a:	bd30      	pop	{r4, r5, pc}

00001e6c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1e6c:	b510      	push	{r4, lr}
    1e6e:	4684      	mov	ip, r0
    1e70:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1e72:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1e74:	4614      	mov	r4, r2
    1e76:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    1e78:	b2c2      	uxtb	r2, r0
    1e7a:	f8ad 000c 	strh.w	r0, [sp, #12]
    1e7e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    1e82:	f8dc 0000 	ldr.w	r0, [ip]
    1e86:	b148      	cbz	r0, 1e9c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1e88:	2100      	movs	r1, #0
    1e8a:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1e8e:	9400      	str	r4, [sp, #0]
    1e90:	9101      	str	r1, [sp, #4]
    1e92:	a903      	add	r1, sp, #12
    1e94:	f000 f918 	bl	20c8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    1e98:	b004      	add	sp, #16
    1e9a:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1e9c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    1ea0:	2800      	cmp	r0, #0
    1ea2:	d0f9      	beq.n	1e98 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1ea4:	f89c 1008 	ldrb.w	r1, [ip, #8]
    1ea8:	2903      	cmp	r1, #3
    1eaa:	d01e      	beq.n	1eea <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1eac:	b179      	cbz	r1, 1ece <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1eae:	2902      	cmp	r1, #2
    1eb0:	d112      	bne.n	1ed8 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    1eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1eb6:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1eba:	21ff      	movs	r1, #255	; 0xff
    1ebc:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1ec0:	9400      	str	r4, [sp, #0]
    1ec2:	9101      	str	r1, [sp, #4]
    1ec4:	a903      	add	r1, sp, #12
    1ec6:	f000 fb1b 	bl	2500 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1eca:	b004      	add	sp, #16
    1ecc:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    1ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1ed2:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1ed6:	e7f0      	b.n	1eba <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1ed8:	2901      	cmp	r1, #1
    1eda:	d1ee      	bne.n	1eba <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1edc:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1ee0:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1ee4:	f88d 200c 	strb.w	r2, [sp, #12]
    1ee8:	e7e7      	b.n	1eba <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1eea:	21ff      	movs	r1, #255	; 0xff
    1eec:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1eee:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    1ef2:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1ef6:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1efa:	9101      	str	r1, [sp, #4]
    1efc:	a903      	add	r1, sp, #12
    1efe:	3201      	adds	r2, #1
      addrbuffer[0] =
    1f00:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1f04:	f000 fafc 	bl	2500 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    1f08:	e7c6      	b.n	1e98 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    1f0a:	bf00      	nop

00001f0c <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1f0c:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    1f0e:	f100 050f 	add.w	r5, r0, #15
    1f12:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    1f14:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    1f16:	4629      	mov	r1, r5
    1f18:	f7ff ffa8 	bl	1e6c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1f1c:	b1a0      	cbz	r0, 1f48 <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    1f1e:	7b20      	ldrb	r0, [r4, #12]
    1f20:	b170      	cbz	r0, 1f40 <Adafruit_BusIO_Register::read()+0x34>
    1f22:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1f24:	7ba6      	ldrb	r6, [r4, #14]
    1f26:	4629      	mov	r1, r5
    1f28:	f104 020e 	add.w	r2, r4, #14
    1f2c:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    1f2e:	2000      	movs	r0, #0
    value <<= 8;
    1f30:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    1f32:	b936      	cbnz	r6, 1f42 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1f34:	781c      	ldrb	r4, [r3, #0]
    1f36:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    1f38:	3b01      	subs	r3, #1
    1f3a:	3101      	adds	r1, #1
    1f3c:	4293      	cmp	r3, r2
    1f3e:	d1f7      	bne.n	1f30 <Adafruit_BusIO_Register::read()+0x24>
}
    1f40:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    1f42:	780c      	ldrb	r4, [r1, #0]
    1f44:	4320      	orrs	r0, r4
    1f46:	e7f7      	b.n	1f38 <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    1f48:	f04f 30ff 	mov.w	r0, #4294967295
}
    1f4c:	bd70      	pop	{r4, r5, r6, pc}
    1f4e:	bf00      	nop

00001f50 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    1f50:	6001      	str	r1, [r0, #0]
  _bits = bits;
    1f52:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    1f54:	7143      	strb	r3, [r0, #5]
}
    1f56:	4770      	bx	lr

00001f58 <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    1f58:	b510      	push	{r4, lr}
    1f5a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    1f5c:	6800      	ldr	r0, [r0, #0]
    1f5e:	f7ff ffd5 	bl	1f0c <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    1f62:	2301      	movs	r3, #1
    1f64:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    1f66:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    1f68:	408b      	lsls	r3, r1
  val >>= _shift;
    1f6a:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    1f6c:	3b01      	subs	r3, #1
}
    1f6e:	4018      	ands	r0, r3
    1f70:	bd10      	pop	{r4, pc}
    1f72:	bf00      	nop

00001f74 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1f74:	b538      	push	{r3, r4, r5, lr}
    1f76:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    1f78:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1f7a:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    1f7c:	f7ff ffc6 	bl	1f0c <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    1f80:	792a      	ldrb	r2, [r5, #4]
    1f82:	2301      	movs	r3, #1
    1f84:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    1f86:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    1f88:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    1f8a:	3b01      	subs	r3, #1
  data &= mask;
    1f8c:	401c      	ands	r4, r3
  mask <<= _shift;
    1f8e:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    1f90:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    1f92:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    1f96:	7b2a      	ldrb	r2, [r5, #12]
    1f98:	4628      	mov	r0, r5
    1f9a:	4321      	orrs	r1, r4
}
    1f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    1fa0:	f7ff bf38 	b.w	1e14 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

00001fa4 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    1fa4:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    1fa8:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    1faa:	2220      	movs	r2, #32
  _addr = addr;
    1fac:	7001      	strb	r1, [r0, #0]
  _begun = false;
    1fae:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    1fb2:	60c2      	str	r2, [r0, #12]
}
    1fb4:	4770      	bx	lr
    1fb6:	bf00      	nop

00001fb8 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1fb8:	b538      	push	{r3, r4, r5, lr}
    1fba:	4604      	mov	r4, r0
  _wire->begin();
    1fbc:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1fbe:	460d      	mov	r5, r1
  _wire->begin();
    1fc0:	f00a fe2a 	bl	cc18 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    1fc4:	2101      	movs	r1, #1
    1fc6:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    1fc8:	b90d      	cbnz	r5, 1fce <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    1fca:	4608      	mov	r0, r1
}
    1fcc:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    1fce:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    1fd0:	6862      	ldr	r2, [r4, #4]
    1fd2:	4088      	lsls	r0, r1
		transmitting = 1;
    1fd4:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    1fd8:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1fdc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    1fe0:	6860      	ldr	r0, [r4, #4]
    1fe2:	f7ff f909 	bl	11f8 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    1fe6:	fab0 f080 	clz	r0, r0
    1fea:	0940      	lsrs	r0, r0, #5
}
    1fec:	bd38      	pop	{r3, r4, r5, pc}
    1fee:	bf00      	nop

00001ff0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ff4:	9f07      	ldr	r7, [sp, #28]
    1ff6:	4615      	mov	r5, r2
    1ff8:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    1ffa:	68c3      	ldr	r3, [r0, #12]
    1ffc:	443a      	add	r2, r7
    1ffe:	429a      	cmp	r2, r3
    2000:	d816      	bhi.n	2030 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    2002:	7802      	ldrb	r2, [r0, #0]
    2004:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    2006:	6843      	ldr	r3, [r0, #4]
    2008:	460e      	mov	r6, r1
    200a:	0052      	lsls	r2, r2, #1
    200c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    2010:	2201      	movs	r2, #1
    2012:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    2016:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    201a:	b167      	cbz	r7, 2036 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    201c:	9b06      	ldr	r3, [sp, #24]
    201e:	b153      	cbz	r3, 2036 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    2020:	6840      	ldr	r0, [r0, #4]
    2022:	463a      	mov	r2, r7
    2024:	9906      	ldr	r1, [sp, #24]
    2026:	6803      	ldr	r3, [r0, #0]
    2028:	685b      	ldr	r3, [r3, #4]
    202a:	4798      	blx	r3
    202c:	4287      	cmp	r7, r0
    202e:	d002      	beq.n	2036 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    2030:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    2032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    2036:	6860      	ldr	r0, [r4, #4]
    2038:	4631      	mov	r1, r6
    203a:	462a      	mov	r2, r5
    203c:	6803      	ldr	r3, [r0, #0]
    203e:	685b      	ldr	r3, [r3, #4]
    2040:	4798      	blx	r3
    2042:	4285      	cmp	r5, r0
    2044:	d1f4      	bne.n	2030 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    2046:	4641      	mov	r1, r8
    2048:	6860      	ldr	r0, [r4, #4]
    204a:	f7ff f8d5 	bl	11f8 <TwoWire::endTransmission(unsigned char)>
    204e:	fab0 f080 	clz	r0, r0
    2052:	0940      	lsrs	r0, r0, #5
}
    2054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002058 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    2058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    205c:	4615      	mov	r5, r2
    205e:	4606      	mov	r6, r0
    2060:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    2062:	b2d2      	uxtb	r2, r2
    2064:	7801      	ldrb	r1, [r0, #0]
    2066:	6840      	ldr	r0, [r0, #4]
    2068:	f7ff f944 	bl	12f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    206c:	4285      	cmp	r5, r0
    206e:	d124      	bne.n	20ba <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    2070:	b305      	cbz	r5, 20b4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    2072:	2400      	movs	r4, #0
    2074:	f8df 904c 	ldr.w	r9, [pc, #76]	; 20c4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    2078:	46a0      	mov	r8, r4
    207a:	e013      	b.n	20a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    207c:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    2080:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2084:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    2086:	f10c 0201 	add.w	r2, ip, #1
    208a:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    208c:	d918      	bls.n	20c0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    208e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2092:	f89c 301a 	ldrb.w	r3, [ip, #26]
    2096:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    2098:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    209c:	b2a4      	uxth	r4, r4
    209e:	42a5      	cmp	r5, r4
    20a0:	46a0      	mov	r8, r4
    20a2:	d907      	bls.n	20b4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    20a4:	6870      	ldr	r0, [r6, #4]
    20a6:	6802      	ldr	r2, [r0, #0]
    20a8:	6952      	ldr	r2, [r2, #20]
    20aa:	454a      	cmp	r2, r9
    20ac:	d0e6      	beq.n	207c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    20ae:	4790      	blx	r2
    20b0:	b2c3      	uxtb	r3, r0
    20b2:	e7f0      	b.n	2096 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    20b4:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    20b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    20ba:	2000      	movs	r0, #0
}
    20bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    20c0:	23ff      	movs	r3, #255	; 0xff
    20c2:	e7e8      	b.n	2096 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    20c4:	00000fa1 	.word	0x00000fa1

000020c8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    20c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    20cc:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    20ce:	b082      	sub	sp, #8
    20d0:	461f      	mov	r7, r3
    20d2:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    20d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    20d8:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    20da:	e9cd 4400 	strd	r4, r4, [sp]
    20de:	f7ff ff87 	bl	1ff0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    20e2:	b928      	cbnz	r0, 20f0 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    20e4:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    20e8:	4640      	mov	r0, r8
    20ea:	b002      	add	sp, #8
    20ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    20f0:	4680      	mov	r8, r0
    20f2:	b915      	cbnz	r5, 20fa <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    20f4:	e7f8      	b.n	20e8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    20f6:	42a5      	cmp	r5, r4
    20f8:	d9f6      	bls.n	20e8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    20fa:	1b2a      	subs	r2, r5, r4
    20fc:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    20fe:	1939      	adds	r1, r7, r4
    2100:	4630      	mov	r0, r6
    2102:	429a      	cmp	r2, r3
    2104:	bf28      	it	cs
    2106:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    2108:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    210a:	42a3      	cmp	r3, r4
    pos += read_len;
    210c:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    210e:	bf8c      	ite	hi
    2110:	2300      	movhi	r3, #0
    2112:	2301      	movls	r3, #1
    2114:	f7ff ffa0 	bl	2058 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    2118:	2800      	cmp	r0, #0
    211a:	d1ec      	bne.n	20f6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    211c:	e7e2      	b.n	20e4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    211e:	bf00      	nop

00002120 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    2120:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    2122:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    2124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    2128:	bf0c      	ite	eq
    212a:	2301      	moveq	r3, #1
    212c:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    212e:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    2130:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2134:	4e63      	ldr	r6, [pc, #396]	; (22c4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    2136:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    213a:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    213c:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    213e:	bf0c      	ite	eq
    2140:	f04f 0a01 	moveq.w	sl, #1
    2144:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2148:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    214c:	2a00      	cmp	r2, #0
    214e:	f000 80b6 	beq.w	22be <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    2152:	3a01      	subs	r2, #1
    2154:	4604      	mov	r4, r0
    2156:	b2f6      	uxtb	r6, r6
    2158:	4688      	mov	r8, r1
    215a:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    215c:	f8df b170 	ldr.w	fp, [pc, #368]	; 22d0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    2160:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    2162:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    2164:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    2166:	2e00      	cmp	r6, #0
    2168:	d141      	bne.n	21ee <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    216a:	7b63      	ldrb	r3, [r4, #13]
    216c:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    2170:	d175      	bne.n	225e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    2172:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2176:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    217a:	bf14      	ite	ne
    217c:	2301      	movne	r3, #1
    217e:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2180:	1c42      	adds	r2, r0, #1
    2182:	d02f      	beq.n	21e4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    2184:	4553      	cmp	r3, sl
    2186:	d02d      	beq.n	21e4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    2188:	4619      	mov	r1, r3
    218a:	b2c0      	uxtb	r0, r0
    218c:	9301      	str	r3, [sp, #4]
    218e:	f001 fe4d 	bl	3e2c <digitalWrite>
        towrite = send & b;
    2192:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    2194:	2101      	movs	r1, #1
    2196:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    2198:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    219a:	f001 fe47 	bl	3e2c <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    219e:	f994 0011 	ldrsb.w	r0, [r4, #17]
    21a2:	1c42      	adds	r2, r0, #1
    21a4:	d004      	beq.n	21b0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    21a6:	b2c0      	uxtb	r0, r0
    21a8:	f001 fe6a 	bl	3e80 <digitalRead>
    21ac:	b100      	cbz	r0, 21b0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    21ae:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    21b0:	2100      	movs	r1, #0
    21b2:	7be0      	ldrb	r0, [r4, #15]
    21b4:	f001 fe3a 	bl	3e2c <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    21b8:	f994 3011 	ldrsb.w	r3, [r4, #17]
    21bc:	3301      	adds	r3, #1
        buffer[i] = reply;
    21be:	bf18      	it	ne
    21c0:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    21c4:	7b23      	ldrb	r3, [r4, #12]
    21c6:	b94b      	cbnz	r3, 21dc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    21c8:	006d      	lsls	r5, r5, #1
    21ca:	b2ed      	uxtb	r5, r5
    21cc:	2d00      	cmp	r5, #0
    21ce:	d1ca      	bne.n	2166 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    21d0:	9b03      	ldr	r3, [sp, #12]
    21d2:	4598      	cmp	r8, r3
    21d4:	d073      	beq.n	22be <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    21d6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    21da:	e7c2      	b.n	2162 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    21dc:	086d      	lsrs	r5, r5, #1
    21de:	2d00      	cmp	r5, #0
    21e0:	d1c1      	bne.n	2166 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    21e2:	e7f5      	b.n	21d0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    21e4:	2101      	movs	r1, #1
    21e6:	7be0      	ldrb	r0, [r4, #15]
    21e8:	f001 fe20 	bl	3e2c <digitalWrite>
        if (bitdelay_us) {
    21ec:	e7d7      	b.n	219e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    21ee:	4b36      	ldr	r3, [pc, #216]	; (22c8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    21f0:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    21f4:	681a      	ldr	r2, [r3, #0]
    21f6:	4b35      	ldr	r3, [pc, #212]	; (22cc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    21f8:	fba3 3202 	umull	r3, r2, r3, r2
    21fc:	0c92      	lsrs	r2, r2, #18
    21fe:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2202:	f8db 3004 	ldr.w	r3, [fp, #4]
    2206:	1a5b      	subs	r3, r3, r1
    2208:	429a      	cmp	r2, r3
    220a:	d8fa      	bhi.n	2202 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    220c:	7b63      	ldrb	r3, [r4, #13]
    220e:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    2212:	d140      	bne.n	2296 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    2214:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2218:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    221c:	bf14      	ite	ne
    221e:	2101      	movne	r1, #1
    2220:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2222:	1c43      	adds	r3, r0, #1
    2224:	d007      	beq.n	2236 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    2226:	4551      	cmp	r1, sl
    2228:	d005      	beq.n	2236 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    222a:	b2c0      	uxtb	r0, r0
    222c:	9101      	str	r1, [sp, #4]
    222e:	f001 fdfd 	bl	3e2c <digitalWrite>
        towrite = send & b;
    2232:	9901      	ldr	r1, [sp, #4]
    2234:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    2236:	2101      	movs	r1, #1
    2238:	7be0      	ldrb	r0, [r4, #15]
    223a:	f001 fdf7 	bl	3e2c <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    223e:	4b22      	ldr	r3, [pc, #136]	; (22c8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2240:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2244:	681a      	ldr	r2, [r3, #0]
    2246:	4b21      	ldr	r3, [pc, #132]	; (22cc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    2248:	fba3 3202 	umull	r3, r2, r3, r2
    224c:	0c92      	lsrs	r2, r2, #18
    224e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2252:	f8db 3004 	ldr.w	r3, [fp, #4]
    2256:	1a5b      	subs	r3, r3, r1
    2258:	429a      	cmp	r2, r3
    225a:	d8fa      	bhi.n	2252 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    225c:	e79f      	b.n	219e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    225e:	2101      	movs	r1, #1
    2260:	7be0      	ldrb	r0, [r4, #15]
    2262:	f001 fde3 	bl	3e2c <digitalWrite>
        if (_mosi != -1) {
    2266:	f994 0010 	ldrsb.w	r0, [r4, #16]
    226a:	1c43      	adds	r3, r0, #1
    226c:	d004      	beq.n	2278 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    226e:	b2c0      	uxtb	r0, r0
    2270:	ea09 0105 	and.w	r1, r9, r5
    2274:	f001 fdda 	bl	3e2c <digitalWrite>
        digitalWrite(_sck, LOW);
    2278:	2100      	movs	r1, #0
    227a:	7be0      	ldrb	r0, [r4, #15]
    227c:	f001 fdd6 	bl	3e2c <digitalWrite>
        if (_miso != -1) {
    2280:	f994 0011 	ldrsb.w	r0, [r4, #17]
    2284:	1c41      	adds	r1, r0, #1
    2286:	d09d      	beq.n	21c4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    2288:	b2c0      	uxtb	r0, r0
    228a:	f001 fdf9 	bl	3e80 <digitalRead>
    228e:	2800      	cmp	r0, #0
    2290:	d092      	beq.n	21b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    2292:	432f      	orrs	r7, r5
    2294:	e790      	b.n	21b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    2296:	2101      	movs	r1, #1
    2298:	7be0      	ldrb	r0, [r4, #15]
    229a:	f001 fdc7 	bl	3e2c <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    229e:	4b0a      	ldr	r3, [pc, #40]	; (22c8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    22a0:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    22a4:	681a      	ldr	r2, [r3, #0]
    22a6:	4b09      	ldr	r3, [pc, #36]	; (22cc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    22a8:	fba3 3202 	umull	r3, r2, r3, r2
    22ac:	0c92      	lsrs	r2, r2, #18
    22ae:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    22b2:	f8db 3004 	ldr.w	r3, [fp, #4]
    22b6:	1a5b      	subs	r3, r3, r1
    22b8:	429a      	cmp	r2, r3
    22ba:	d8fa      	bhi.n	22b2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    22bc:	e7d3      	b.n	2266 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    22be:	b005      	add	sp, #20
    22c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c4:	0007a120 	.word	0x0007a120
    22c8:	200012b4 	.word	0x200012b4
    22cc:	431bde83 	.word	0x431bde83
    22d0:	e0001000 	.word	0xe0001000

000022d4 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    22d4:	b430      	push	{r4, r5}
    22d6:	b082      	sub	sp, #8
    22d8:	460c      	mov	r4, r1
    22da:	ab02      	add	r3, sp, #8
    22dc:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    22e0:	7cc3      	ldrb	r3, [r0, #19]
    22e2:	2b00      	cmp	r3, #0
    22e4:	d030      	beq.n	2348 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    22e6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    22e8:	7cc3      	ldrb	r3, [r0, #19]
    22ea:	07da      	lsls	r2, r3, #31
    22ec:	d508      	bpl.n	2300 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    22ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    22f2:	6945      	ldr	r5, [r0, #20]
    22f4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    22f8:	402a      	ands	r2, r5
    22fa:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    22fc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    2300:	079d      	lsls	r5, r3, #30
    2302:	d508      	bpl.n	2316 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2304:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2308:	6985      	ldr	r5, [r0, #24]
    230a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    230e:	402a      	ands	r2, r5
    2310:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2312:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    2316:	0759      	lsls	r1, r3, #29
    2318:	d508      	bpl.n	232c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    231a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    231e:	69c5      	ldr	r5, [r0, #28]
    2320:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    2324:	402a      	ands	r2, r5
    2326:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2328:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    232c:	071a      	lsls	r2, r3, #28
    232e:	d508      	bpl.n	2342 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2330:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2334:	6a05      	ldr	r5, [r0, #32]
    2336:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    233a:	402a      	ands	r2, r5
    233c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    233e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    2342:	06db      	lsls	r3, r3, #27
    2344:	d42f      	bmi.n	23a6 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2346:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2348:	6883      	ldr	r3, [r0, #8]
    234a:	429c      	cmp	r4, r3
    234c:	d035      	beq.n	23ba <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    234e:	4b22      	ldr	r3, [pc, #136]	; (23d8 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    2350:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2352:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2354:	4a21      	ldr	r2, [pc, #132]	; (23dc <SPIClass::beginTransaction(SPISettings)+0x108>)
    2356:	f3c3 1101 	ubfx	r1, r3, #4, #2
    235a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    235e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2362:	3301      	adds	r3, #1
    2364:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2368:	b1cc      	cbz	r4, 239e <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    236a:	4294      	cmp	r4, r2
    236c:	d827      	bhi.n	23be <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    236e:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    2372:	fbb2 f2f3 	udiv	r2, r2, r3
    2376:	4294      	cmp	r4, r2
    2378:	d32c      	bcc.n	23d4 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    237a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    237e:	d320      	bcc.n	23c2 <SPIClass::beginTransaction(SPISettings)+0xee>
    2380:	4c17      	ldr	r4, [pc, #92]	; (23e0 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2382:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2384:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2386:	2203      	movs	r2, #3
		port().CR = 0;
    2388:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    238a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    238c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    238e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2390:	2201      	movs	r2, #1
		port().CCR = _ccr;
    2392:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2394:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2396:	611a      	str	r2, [r3, #16]
	}
    2398:	b002      	add	sp, #8
    239a:	bc30      	pop	{r4, r5}
    239c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    239e:	4299      	cmp	r1, r3
    23a0:	d3ef      	bcc.n	2382 <SPIClass::beginTransaction(SPISettings)+0xae>
    23a2:	1c53      	adds	r3, r2, #1
    23a4:	e7e9      	b.n	237a <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    23a6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    23aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
    23ac:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    23b0:	400b      	ands	r3, r1
    23b2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    23b4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    23b8:	e7c5      	b.n	2346 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    23ba:	68c4      	ldr	r4, [r0, #12]
    23bc:	e7e2      	b.n	2384 <SPIClass::beginTransaction(SPISettings)+0xb0>
    23be:	2400      	movs	r4, #0
    23c0:	e7df      	b.n	2382 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    23c2:	2b02      	cmp	r3, #2
    23c4:	d9fb      	bls.n	23be <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    23c6:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    23c8:	085a      	lsrs	r2, r3, #1
    23ca:	0214      	lsls	r4, r2, #8
    23cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    23d0:	431c      	orrs	r4, r3
    23d2:	e7d6      	b.n	2382 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    23d4:	461a      	mov	r2, r3
    23d6:	e7e4      	b.n	23a2 <SPIClass::beginTransaction(SPISettings)+0xce>
    23d8:	400fc000 	.word	0x400fc000
    23dc:	2000084c 	.word	0x2000084c
    23e0:	007f7fff 	.word	0x007f7fff

000023e4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    23e4:	b510      	push	{r4, lr}
    23e6:	4604      	mov	r4, r0
  if (_cs != -1) {
    23e8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    23ec:	1c43      	adds	r3, r0, #1
    23ee:	d003      	beq.n	23f8 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    23f0:	2101      	movs	r1, #1
    23f2:	b2c0      	uxtb	r0, r0
    23f4:	f001 fd1a 	bl	3e2c <digitalWrite>
  if (_spi) {
    23f8:	6823      	ldr	r3, [r4, #0]
    23fa:	b323      	cbz	r3, 2446 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    23fc:	7cda      	ldrb	r2, [r3, #19]
    23fe:	b312      	cbz	r2, 2446 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    2400:	07d1      	lsls	r1, r2, #31
    2402:	d504      	bpl.n	240e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    2404:	6a98      	ldr	r0, [r3, #40]	; 0x28
    2406:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    240a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    240e:	0794      	lsls	r4, r2, #30
    2410:	d504      	bpl.n	241c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    2412:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2414:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2418:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    241c:	0750      	lsls	r0, r2, #29
    241e:	d504      	bpl.n	242a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    2420:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2422:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2426:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    242a:	0711      	lsls	r1, r2, #28
    242c:	d504      	bpl.n	2438 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    242e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    2430:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2434:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2438:	06d2      	lsls	r2, r2, #27
    243a:	d504      	bpl.n	2446 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    243c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    243e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2442:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    2446:	bd10      	pop	{r4, pc}

00002448 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    2448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    244c:	4604      	mov	r4, r0
    244e:	b082      	sub	sp, #8
  if (_spi) {
    2450:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    2452:	468a      	mov	sl, r1
    2454:	4690      	mov	r8, r2
    2456:	461e      	mov	r6, r3
    2458:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    245a:	b120      	cbz	r0, 2466 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    245c:	6863      	ldr	r3, [r4, #4]
    245e:	e893 0006 	ldmia.w	r3, {r1, r2}
    2462:	f7ff ff37 	bl	22d4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    2466:	f994 000e 	ldrsb.w	r0, [r4, #14]
    246a:	1c43      	adds	r3, r0, #1
    246c:	d142      	bne.n	24f4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    246e:	b1d5      	cbz	r5, 24a6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    2470:	3e01      	subs	r6, #1
    2472:	eb06 0905 	add.w	r9, r6, r5
    2476:	f10d 0507 	add.w	r5, sp, #7
    247a:	e003      	b.n	2484 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    247c:	f7ff fe50 	bl	2120 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    2480:	454e      	cmp	r6, r9
    2482:	d010      	beq.n	24a6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    2484:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    2488:	2201      	movs	r2, #1
  if (_spi) {
    248a:	6827      	ldr	r7, [r4, #0]
    248c:	4629      	mov	r1, r5
    248e:	4620      	mov	r0, r4
  uint8_t data = send;
    2490:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2494:	2f00      	cmp	r7, #0
    2496:	d0f1      	beq.n	247c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    2498:	4613      	mov	r3, r2
    249a:	4638      	mov	r0, r7
    249c:	462a      	mov	r2, r5
    249e:	f000 f9c1 	bl	2824 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    24a2:	454e      	cmp	r6, r9
    24a4:	d1ee      	bne.n	2484 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    24a6:	f1b8 0f00 	cmp.w	r8, #0
    24aa:	d01c      	beq.n	24e6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    24ac:	44d0      	add	r8, sl
    24ae:	f10a 36ff 	add.w	r6, sl, #4294967295
    24b2:	f10d 0507 	add.w	r5, sp, #7
    24b6:	f108 38ff 	add.w	r8, r8, #4294967295
    24ba:	e003      	b.n	24c4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    24bc:	f7ff fe30 	bl	2120 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    24c0:	45b0      	cmp	r8, r6
    24c2:	d010      	beq.n	24e6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    24c4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    24c8:	2201      	movs	r2, #1
  if (_spi) {
    24ca:	6827      	ldr	r7, [r4, #0]
    24cc:	4629      	mov	r1, r5
    24ce:	4620      	mov	r0, r4
  uint8_t data = send;
    24d0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    24d4:	2f00      	cmp	r7, #0
    24d6:	d0f1      	beq.n	24bc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    24d8:	4613      	mov	r3, r2
    24da:	4638      	mov	r0, r7
    24dc:	462a      	mov	r2, r5
    24de:	f000 f9a1 	bl	2824 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    24e2:	45b0      	cmp	r8, r6
    24e4:	d1ee      	bne.n	24c4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    24e6:	4620      	mov	r0, r4
    24e8:	f7ff ff7c 	bl	23e4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    24ec:	2001      	movs	r0, #1
    24ee:	b002      	add	sp, #8
    24f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    24f4:	b2c0      	uxtb	r0, r0
    24f6:	2100      	movs	r1, #0
    24f8:	f001 fc98 	bl	3e2c <digitalWrite>
    24fc:	e7b7      	b.n	246e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    24fe:	bf00      	nop

00002500 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    2500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2504:	4604      	mov	r4, r0
    2506:	b083      	sub	sp, #12
  if (_spi) {
    2508:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    250a:	460f      	mov	r7, r1
    250c:	4615      	mov	r5, r2
    250e:	469b      	mov	fp, r3
    2510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2514:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    2518:	b120      	cbz	r0, 2524 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    251a:	6863      	ldr	r3, [r4, #4]
    251c:	e893 0006 	ldmia.w	r3, {r1, r2}
    2520:	f7ff fed8 	bl	22d4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    2524:	f994 000e 	ldrsb.w	r0, [r4, #14]
    2528:	1c43      	adds	r3, r0, #1
    252a:	d148      	bne.n	25be <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    252c:	b1d5      	cbz	r5, 2564 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    252e:	3f01      	subs	r7, #1
    2530:	eb07 0905 	add.w	r9, r7, r5
    2534:	f10d 0507 	add.w	r5, sp, #7
    2538:	e003      	b.n	2542 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    253a:	f7ff fdf1 	bl	2120 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    253e:	454f      	cmp	r7, r9
    2540:	d010      	beq.n	2564 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    2542:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2546:	2201      	movs	r2, #1
  if (_spi) {
    2548:	6826      	ldr	r6, [r4, #0]
    254a:	4629      	mov	r1, r5
    254c:	4620      	mov	r0, r4
  uint8_t data = send;
    254e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2552:	2e00      	cmp	r6, #0
    2554:	d0f1      	beq.n	253a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    2556:	4613      	mov	r3, r2
    2558:	4630      	mov	r0, r6
    255a:	462a      	mov	r2, r5
    255c:	f000 f962 	bl	2824 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    2560:	454f      	cmp	r7, r9
    2562:	d1ee      	bne.n	2542 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    2564:	f1ba 0f00 	cmp.w	sl, #0
    2568:	d022      	beq.n	25b0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    256a:	44da      	add	sl, fp
    256c:	f10b 36ff 	add.w	r6, fp, #4294967295
    2570:	f10d 0507 	add.w	r5, sp, #7
    2574:	f10a 3aff 	add.w	sl, sl, #4294967295
    2578:	e007      	b.n	258a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    257a:	f7ff fdd1 	bl	2120 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    257e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    2582:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    2586:	45b2      	cmp	sl, r6
    2588:	d012      	beq.n	25b0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    258a:	6827      	ldr	r7, [r4, #0]
    258c:	2201      	movs	r2, #1
    258e:	4629      	mov	r1, r5
    2590:	4620      	mov	r0, r4
  uint8_t data = send;
    2592:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    2596:	2f00      	cmp	r7, #0
    2598:	d0ef      	beq.n	257a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    259a:	4613      	mov	r3, r2
    259c:	4638      	mov	r0, r7
    259e:	462a      	mov	r2, r5
    25a0:	f000 f940 	bl	2824 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    25a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    25a8:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    25ac:	45b2      	cmp	sl, r6
    25ae:	d1ec      	bne.n	258a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    25b0:	4620      	mov	r0, r4
    25b2:	f7ff ff17 	bl	23e4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    25b6:	2001      	movs	r0, #1
    25b8:	b003      	add	sp, #12
    25ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    25be:	b2c0      	uxtb	r0, r0
    25c0:	2100      	movs	r1, #0
    25c2:	f001 fc33 	bl	3e2c <digitalWrite>
    25c6:	e7b1      	b.n	252c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

000025c8 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    25c8:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    25cc:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    25ce:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    25d2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    25d4:	d101      	bne.n	25da <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    25d6:	6883      	ldr	r3, [r0, #8]
    25d8:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    25da:	f000 b981 	b.w	28e0 <EventResponder::triggerEventNotImmediate()>
    25de:	bf00      	nop

000025e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    25e0:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    25e2:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    25e4:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    25e8:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    25ea:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    25ec:	b1a3      	cbz	r3, 2618 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    25ee:	b321      	cbz	r1, 263a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    25f0:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    25f4:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    25f6:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    25f8:	6f25      	ldr	r5, [r4, #112]	; 0x70
    25fa:	07af      	lsls	r7, r5, #30
    25fc:	d407      	bmi.n	260e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    25fe:	4615      	mov	r5, r2
				count_read--;
    2600:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2602:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    2604:	b11a      	cbz	r2, 260e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    2606:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    260a:	462a      	mov	r2, r5
    260c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    260e:	6965      	ldr	r5, [r4, #20]
    2610:	07ed      	lsls	r5, r5, #31
    2612:	d5f1      	bpl.n	25f8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    2614:	2b00      	cmp	r3, #0
    2616:	d1ea      	bne.n	25ee <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2618:	b16e      	cbz	r6, 2636 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    261a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    261c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    261e:	0789      	lsls	r1, r1, #30
    2620:	d4fa      	bmi.n	2618 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    2622:	4611      	mov	r1, r2
			count_read--;
    2624:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2628:	2a00      	cmp	r2, #0
    262a:	d0f5      	beq.n	2618 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    262c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2630:	460a      	mov	r2, r1
	while (count_read) {
    2632:	2e00      	cmp	r6, #0
    2634:	d1f1      	bne.n	261a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    2636:	bcf0      	pop	{r4, r5, r6, r7}
    2638:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    263a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    263e:	e7d9      	b.n	25f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002640 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2640:	4b32      	ldr	r3, [pc, #200]	; (270c <_spi_dma_rxISR1()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2642:	4933      	ldr	r1, [pc, #204]	; (2710 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2644:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    2646:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    264a:	7920      	ldrb	r0, [r4, #4]
    264c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    264e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2650:	f895 c004 	ldrb.w	ip, [r5, #4]
    2654:	f881 c01c 	strb.w	ip, [r1, #28]
    2658:	7708      	strb	r0, [r1, #28]
    265a:	b152      	cbz	r2, 2672 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    265c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2660:	d323      	bcc.n	26aa <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2662:	492c      	ldr	r1, [pc, #176]	; (2714 <_spi_dma_rxISR1()+0xd4>)
    2664:	4411      	add	r1, r2
		DMA_SERQ = channel;
    2666:	4a2a      	ldr	r2, [pc, #168]	; (2710 <_spi_dma_rxISR1()+0xd0>)
    2668:	6419      	str	r1, [r3, #64]	; 0x40
    266a:	76d0      	strb	r0, [r2, #27]
    266c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2670:	bd30      	pop	{r4, r5, pc}
    2672:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2674:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2676:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2678:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    267a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    267e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2680:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2682:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    2686:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2688:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    268a:	6804      	ldr	r4, [r0, #0]
    268c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    268e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    2692:	4b21      	ldr	r3, [pc, #132]	; (2718 <_spi_dma_rxISR1()+0xd8>)
    2694:	429c      	cmp	r4, r3
    2696:	d126      	bne.n	26e6 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2698:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    269a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    269c:	2b02      	cmp	r3, #2
		_data = data;
    269e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    26a0:	d126      	bne.n	26f0 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    26a2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    26a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    26a8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    26aa:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    26ac:	8be9      	ldrh	r1, [r5, #30]
    26ae:	0409      	lsls	r1, r1, #16
    26b0:	d422      	bmi.n	26f8 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    26b2:	b292      	uxth	r2, r2
    26b4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    26b6:	6821      	ldr	r1, [r4, #0]
    26b8:	8bec      	ldrh	r4, [r5, #30]
    26ba:	b2a4      	uxth	r4, r4
    26bc:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    26be:	8bcc      	ldrh	r4, [r1, #30]
    26c0:	0424      	lsls	r4, r4, #16
    26c2:	d505      	bpl.n	26d0 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    26c4:	8bcc      	ldrh	r4, [r1, #30]
    26c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    26ca:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    26ce:	4322      	orrs	r2, r4
    26d0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    26d2:	8bca      	ldrh	r2, [r1, #30]
    26d4:	b292      	uxth	r2, r2
    26d6:	82ca      	strh	r2, [r1, #22]
    26d8:	2100      	movs	r1, #0
    26da:	4a0d      	ldr	r2, [pc, #52]	; (2710 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    26dc:	6419      	str	r1, [r3, #64]	; 0x40
    26de:	76d0      	strb	r0, [r2, #27]
    26e0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    26e4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    26e6:	4623      	mov	r3, r4
    26e8:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    26ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    26ee:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    26f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    26f4:	f000 b8f4 	b.w	28e0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    26f8:	8be9      	ldrh	r1, [r5, #30]
    26fa:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    26fe:	b292      	uxth	r2, r2
    2700:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    2704:	ea41 010e 	orr.w	r1, r1, lr
    2708:	83e9      	strh	r1, [r5, #30]
    270a:	e7d4      	b.n	26b6 <_spi_dma_rxISR1()+0x76>
    270c:	200024d8 	.word	0x200024d8
    2710:	400e8000 	.word	0x400e8000
    2714:	ffff8001 	.word	0xffff8001
    2718:	000025c9 	.word	0x000025c9

0000271c <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    271c:	4b32      	ldr	r3, [pc, #200]	; (27e8 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    271e:	4933      	ldr	r1, [pc, #204]	; (27ec <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2720:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    2722:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    2726:	7920      	ldrb	r0, [r4, #4]
    2728:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    272a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    272c:	f895 c004 	ldrb.w	ip, [r5, #4]
    2730:	f881 c01c 	strb.w	ip, [r1, #28]
    2734:	7708      	strb	r0, [r1, #28]
    2736:	b152      	cbz	r2, 274e <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2738:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    273c:	d323      	bcc.n	2786 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    273e:	492c      	ldr	r1, [pc, #176]	; (27f0 <_spi_dma_rxISR0()+0xd4>)
    2740:	4411      	add	r1, r2
		DMA_SERQ = channel;
    2742:	4a2a      	ldr	r2, [pc, #168]	; (27ec <_spi_dma_rxISR0()+0xd0>)
    2744:	6419      	str	r1, [r3, #64]	; 0x40
    2746:	76d0      	strb	r0, [r2, #27]
    2748:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    274c:	bd30      	pop	{r4, r5, pc}
    274e:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2750:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    2752:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2754:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2756:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    275a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    275c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    275e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    2762:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2764:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2766:	6804      	ldr	r4, [r0, #0]
    2768:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    276a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    276e:	4b21      	ldr	r3, [pc, #132]	; (27f4 <_spi_dma_rxISR0()+0xd8>)
    2770:	429c      	cmp	r4, r3
    2772:	d126      	bne.n	27c2 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    2774:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    2776:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2778:	2b02      	cmp	r3, #2
		_data = data;
    277a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    277c:	d126      	bne.n	27cc <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    277e:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2784:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2786:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2788:	8be9      	ldrh	r1, [r5, #30]
    278a:	0409      	lsls	r1, r1, #16
    278c:	d422      	bmi.n	27d4 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    278e:	b292      	uxth	r2, r2
    2790:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2792:	6821      	ldr	r1, [r4, #0]
    2794:	8bec      	ldrh	r4, [r5, #30]
    2796:	b2a4      	uxth	r4, r4
    2798:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    279a:	8bcc      	ldrh	r4, [r1, #30]
    279c:	0424      	lsls	r4, r4, #16
    279e:	d505      	bpl.n	27ac <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    27a0:	8bcc      	ldrh	r4, [r1, #30]
    27a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
    27a6:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    27aa:	4322      	orrs	r2, r4
    27ac:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    27ae:	8bca      	ldrh	r2, [r1, #30]
    27b0:	b292      	uxth	r2, r2
    27b2:	82ca      	strh	r2, [r1, #22]
    27b4:	2100      	movs	r1, #0
    27b6:	4a0d      	ldr	r2, [pc, #52]	; (27ec <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    27b8:	6419      	str	r1, [r3, #64]	; 0x40
    27ba:	76d0      	strb	r0, [r2, #27]
    27bc:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    27c0:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    27c2:	4623      	mov	r3, r4
    27c4:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    27c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    27ca:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    27cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    27d0:	f000 b886 	b.w	28e0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    27d4:	8be9      	ldrh	r1, [r5, #30]
    27d6:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    27da:	b292      	uxth	r2, r2
    27dc:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    27e0:	ea41 010e 	orr.w	r1, r1, lr
    27e4:	83e9      	strh	r1, [r5, #30]
    27e6:	e7d4      	b.n	2792 <_spi_dma_rxISR0()+0x76>
    27e8:	20002488 	.word	0x20002488
    27ec:	400e8000 	.word	0x400e8000
    27f0:	ffff8001 	.word	0xffff8001
    27f4:	000025c9 	.word	0x000025c9

000027f8 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    27f8:	2300      	movs	r3, #0
    27fa:	e9c0 1200 	strd	r1, r2, [r0]
    27fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
    2802:	e9c0 3304 	strd	r3, r3, [r0, #16]
    2806:	e9c0 3306 	strd	r3, r3, [r0, #24]
    280a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    280e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    2812:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    2816:	6383      	str	r3, [r0, #56]	; 0x38
    2818:	8783      	strh	r3, [r0, #60]	; 0x3c
    281a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    281e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    2822:	4770      	bx	lr

00002824 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2824:	b10b      	cbz	r3, 282a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2826:	f7ff bedb 	b.w	25e0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    282a:	4770      	bx	lr

0000282c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    282c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    282e:	4a08      	ldr	r2, [pc, #32]	; (2850 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    2830:	4908      	ldr	r1, [pc, #32]	; (2854 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    2832:	4809      	ldr	r0, [pc, #36]	; (2858 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    2834:	f7ff ffe0 	bl	27f8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    2838:	4a08      	ldr	r2, [pc, #32]	; (285c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    283a:	4909      	ldr	r1, [pc, #36]	; (2860 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    283c:	4809      	ldr	r0, [pc, #36]	; (2864 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    283e:	f7ff ffdb 	bl	27f8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    2842:	4a09      	ldr	r2, [pc, #36]	; (2868 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    2844:	4909      	ldr	r1, [pc, #36]	; (286c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    2846:	480a      	ldr	r0, [pc, #40]	; (2870 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    2848:	f7ff ffd6 	bl	27f8 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    284c:	bd08      	pop	{r3, pc}
    284e:	bf00      	nop
    2850:	2000075c 	.word	0x2000075c
    2854:	403a0000 	.word	0x403a0000
    2858:	20002488 	.word	0x20002488
    285c:	200006ec 	.word	0x200006ec
    2860:	4039c000 	.word	0x4039c000
    2864:	200024d8 	.word	0x200024d8
    2868:	2000067c 	.word	0x2000067c
    286c:	40394000 	.word	0x40394000
    2870:	20002528 	.word	0x20002528

00002874 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/*! 
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {
}
    2874:	4770      	bx	lr
    2876:	bf00      	nop

00002878 <Adafruit_MCP4725::begin(unsigned char)>:
/**************************************************************************/
/*! 
    @brief  Setups the HW
*/
/**************************************************************************/
void Adafruit_MCP4725::begin(uint8_t addr) {
    2878:	4603      	mov	r3, r0
  _i2caddr = addr;
  Wire.begin();
    287a:	4802      	ldr	r0, [pc, #8]	; (2884 <Adafruit_MCP4725::begin(unsigned char)+0xc>)
  _i2caddr = addr;
    287c:	7019      	strb	r1, [r3, #0]
  Wire.begin();
    287e:	f00a b9cb 	b.w	cc18 <___ZN7TwoWire5beginEv_veneer>
    2882:	bf00      	nop
    2884:	20002878 	.word	0x20002878

00002888 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>:
                that the DAC will retain the current voltage output
                after power-down or reset.
*/
/**************************************************************************/
void Adafruit_MCP4725::setVoltage( uint16_t output, bool writeEEPROM )
{
    2888:	b510      	push	{r4, lr}
		transmitting = 1;
    288a:	f04f 0c01 	mov.w	ip, #1
		txBuffer[0] = (address << 1);
    288e:	7800      	ldrb	r0, [r0, #0]
    2890:	4b12      	ldr	r3, [pc, #72]	; (28dc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    2892:	460c      	mov	r4, r1
    2894:	fa00 f00c 	lsl.w	r0, r0, ip
		transmitting = 1;
    2898:	f883 c130 	strb.w	ip, [r3, #304]	; 0x130
		txBufferLength = 1;
    289c:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    28a0:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
#ifdef TWBR
  uint8_t twbrback = TWBR;
  TWBR = ((F_CPU / 400000L) - 16) / 2; // Set I2C frequency to 400kHz
#endif
  Wire.beginTransmission(_i2caddr);
  if (writeEEPROM)
    28a4:	b1a2      	cbz	r2, 28d0 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x48>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    28a6:	2160      	movs	r1, #96	; 0x60
    28a8:	4618      	mov	r0, r3
    28aa:	f7fe fb97 	bl	fdc <TwoWire::write(unsigned char)>
    28ae:	f3c4 1107 	ubfx	r1, r4, #4, #8
    28b2:	480a      	ldr	r0, [pc, #40]	; (28dc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    28b4:	f7fe fb92 	bl	fdc <TwoWire::write(unsigned char)>
    28b8:	4808      	ldr	r0, [pc, #32]	; (28dc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  else
  {
    Wire.write(MCP4726_CMD_WRITEDAC);
  }
  Wire.write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4)
  Wire.write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x)
    28ba:	0121      	lsls	r1, r4, #4
    28bc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    28c0:	f7fe fb8c 	bl	fdc <TwoWire::write(unsigned char)>
		return endTransmission(1);
    28c4:	2101      	movs	r1, #1
    28c6:	4805      	ldr	r0, [pc, #20]	; (28dc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  Wire.endTransmission();
#ifdef TWBR
  TWBR = twbrback;
#endif
}
    28c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    28cc:	f7fe bc94 	b.w	11f8 <TwoWire::endTransmission(unsigned char)>
		return write((uint8_t)n);
    28d0:	2140      	movs	r1, #64	; 0x40
    28d2:	4618      	mov	r0, r3
    28d4:	f7fe fb82 	bl	fdc <TwoWire::write(unsigned char)>
    28d8:	e7e9      	b.n	28ae <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x26>
    28da:	bf00      	nop
    28dc:	20002878 	.word	0x20002878

000028e0 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    28e0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    28e4:	b672      	cpsid	i
	if (_triggered == false) {
    28e6:	7f43      	ldrb	r3, [r0, #29]
    28e8:	b95b      	cbnz	r3, 2902 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    28ea:	7f01      	ldrb	r1, [r0, #28]
    28ec:	2901      	cmp	r1, #1
{
    28ee:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    28f0:	d00b      	beq.n	290a <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    28f2:	2903      	cmp	r1, #3
    28f4:	d013      	beq.n	291e <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    28f6:	2301      	movs	r3, #1
    28f8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    28fa:	b902      	cbnz	r2, 28fe <EventResponder::triggerEventNotImmediate()+0x1e>
    28fc:	b662      	cpsie	i
}
    28fe:	bc30      	pop	{r4, r5}
    2900:	4770      	bx	lr
    2902:	b90a      	cbnz	r2, 2908 <EventResponder::triggerEventNotImmediate()+0x28>
    2904:	b662      	cpsie	i
    2906:	4770      	bx	lr
    2908:	4770      	bx	lr
			if (firstYield == nullptr) {
    290a:	4c12      	ldr	r4, [pc, #72]	; (2954 <EventResponder::triggerEventNotImmediate()+0x74>)
    290c:	6821      	ldr	r1, [r4, #0]
    290e:	b1b1      	cbz	r1, 293e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    2910:	4911      	ldr	r1, [pc, #68]	; (2958 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    2912:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    2914:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    2916:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    2918:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    291a:	6158      	str	r0, [r3, #20]
				lastYield = this;
    291c:	e7eb      	b.n	28f6 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    291e:	4d0f      	ldr	r5, [pc, #60]	; (295c <EventResponder::triggerEventNotImmediate()+0x7c>)
    2920:	490f      	ldr	r1, [pc, #60]	; (2960 <EventResponder::triggerEventNotImmediate()+0x80>)
    2922:	682c      	ldr	r4, [r5, #0]
    2924:	b18c      	cbz	r4, 294a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    2926:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2928:	680b      	ldr	r3, [r1, #0]
    292a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    292c:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    292e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2932:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    2936:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2938:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    293c:	e7db      	b.n	28f6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    293e:	4b06      	ldr	r3, [pc, #24]	; (2958 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    2940:	6020      	str	r0, [r4, #0]
				lastYield = this;
    2942:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    2944:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    2948:	e7d5      	b.n	28f6 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    294a:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    294e:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    2950:	e7ed      	b.n	292e <EventResponder::triggerEventNotImmediate()+0x4e>
    2952:	bf00      	nop
    2954:	20002f90 	.word	0x20002f90
    2958:	20002f9c 	.word	0x20002f9c
    295c:	20002f98 	.word	0x20002f98
    2960:	20002f94 	.word	0x20002f94

00002964 <EventResponder::runFromInterrupt()>:
{
    2964:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2966:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    296a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    296c:	4c0c      	ldr	r4, [pc, #48]	; (29a0 <EventResponder::runFromInterrupt()+0x3c>)
    296e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2970:	b180      	cbz	r0, 2994 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    2972:	4e0c      	ldr	r6, [pc, #48]	; (29a4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2974:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2976:	6943      	ldr	r3, [r0, #20]
    2978:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    297a:	b173      	cbz	r3, 299a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    297c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    297e:	b902      	cbnz	r2, 2982 <EventResponder::runFromInterrupt()+0x1e>
    2980:	b662      	cpsie	i
			(*(first->_function))(*first);
    2982:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2984:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2986:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2988:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    298c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    298e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2990:	2800      	cmp	r0, #0
    2992:	d1f0      	bne.n	2976 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2994:	b902      	cbnz	r2, 2998 <EventResponder::runFromInterrupt()+0x34>
    2996:	b662      	cpsie	i
}
    2998:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    299a:	6033      	str	r3, [r6, #0]
    299c:	e7ef      	b.n	297e <EventResponder::runFromInterrupt()+0x1a>
    299e:	bf00      	nop
    29a0:	20002f98 	.word	0x20002f98
    29a4:	20002f94 	.word	0x20002f94

000029a8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    29a8:	f7ff bfdc 	b.w	2964 <EventResponder::runFromInterrupt()>

000029ac <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    29ac:	4904      	ldr	r1, [pc, #16]	; (29c0 <systick_isr+0x14>)
	systick_millis_count++;
    29ae:	4a05      	ldr	r2, [pc, #20]	; (29c4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    29b0:	6849      	ldr	r1, [r1, #4]
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <systick_isr+0x1c>)
    29b4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    29b6:	6813      	ldr	r3, [r2, #0]
    29b8:	3301      	adds	r3, #1
    29ba:	6013      	str	r3, [r2, #0]
}
    29bc:	4770      	bx	lr
    29be:	bf00      	nop
    29c0:	e0001000 	.word	0xe0001000
    29c4:	20003dc4 	.word	0x20003dc4
    29c8:	20003dc0 	.word	0x20003dc0

000029cc <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    29cc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    29d0:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    29d4:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    29d6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    29d8:	4293      	cmp	r3, r2
    29da:	d202      	bcs.n	29e2 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    29dc:	3a01      	subs	r2, #1
    29de:	1ad0      	subs	r0, r2, r3
}
    29e0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    29e2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    29e4:	3901      	subs	r1, #1
    29e6:	440a      	add	r2, r1
    29e8:	1ad0      	subs	r0, r2, r3
    29ea:	4770      	bx	lr

000029ec <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    29ec:	b672      	cpsid	i
	head = rx_buffer_head_;
    29ee:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    29f2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    29f6:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    29f8:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    29fa:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    29fc:	bf3c      	itt	cc
    29fe:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    2a00:	1852      	addcc	r2, r2, r1
    2a02:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    2a04:	6902      	ldr	r2, [r0, #16]
    2a06:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    2a08:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    2a0a:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    2a0e:	4418      	add	r0, r3
    2a10:	4770      	bx	lr
    2a12:	bf00      	nop

00002a14 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2a14:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2a18:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2a1a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2a1e:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2a20:	b29b      	uxth	r3, r3
	if (head == tail) {
    2a22:	4299      	cmp	r1, r3
    2a24:	d010      	beq.n	2a48 <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2a26:	3301      	adds	r3, #1
    2a28:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    2a2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2a2c:	4298      	cmp	r0, r3
    2a2e:	bf98      	it	ls
    2a30:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    2a32:	4299      	cmp	r1, r3
    2a34:	d903      	bls.n	2a3e <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    2a36:	6a12      	ldr	r2, [r2, #32]
    2a38:	5cd0      	ldrb	r0, [r2, r3]
    2a3a:	b2c0      	uxtb	r0, r0
    2a3c:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    2a3e:	1a5b      	subs	r3, r3, r1
    2a40:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2a42:	5cd0      	ldrb	r0, [r2, r3]
    2a44:	b2c0      	uxtb	r0, r0
	}
}
    2a46:	4770      	bx	lr
		__disable_irq();
    2a48:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2a4a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    2a4e:	b280      	uxth	r0, r0
		if (head == tail) {
    2a50:	4281      	cmp	r1, r0
    2a52:	d001      	beq.n	2a58 <HardwareSerial::peek()+0x44>
		__enable_irq();
    2a54:	b662      	cpsie	i
    2a56:	e7e6      	b.n	2a26 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    2a58:	6913      	ldr	r3, [r2, #16]
    2a5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2a5c:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    2a60:	d103      	bne.n	2a6a <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    2a62:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2a66:	b662      	cpsie	i
			return c;
    2a68:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2a6a:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    2a6c:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    2a6e:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    2a72:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    2a74:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2a78:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    2a7c:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    2a7e:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    2a82:	704b      	strb	r3, [r1, #1]
    2a84:	e7ef      	b.n	2a66 <HardwareSerial::peek()+0x52>
    2a86:	bf00      	nop

00002a88 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    2a88:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2a8c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2a8e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2a92:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2a94:	b29b      	uxth	r3, r3
	if (head == tail) {
    2a96:	4299      	cmp	r1, r3
    2a98:	d026      	beq.n	2ae8 <HardwareSerial::read()+0x60>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2a9a:	3301      	adds	r3, #1
{
    2a9c:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2a9e:	6b94      	ldr	r4, [r2, #56]	; 0x38
    2aa0:	429c      	cmp	r4, r3
    2aa2:	d916      	bls.n	2ad2 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    2aa4:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    2aa6:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    2aaa:	4298      	cmp	r0, r3
    2aac:	d917      	bls.n	2ade <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    2aae:	6a10      	ldr	r0, [r2, #32]
    2ab0:	5cc0      	ldrb	r0, [r0, r3]
    2ab2:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    2ab4:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    2ab6:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    2aba:	b145      	cbz	r5, 2ace <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    2abc:	4299      	cmp	r1, r3
    2abe:	d31c      	bcc.n	2afa <HardwareSerial::read()+0x72>
    2ac0:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    2ac2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    2ac4:	4299      	cmp	r1, r3
    2ac6:	d302      	bcc.n	2ace <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    2ac8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2aca:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    2ace:	bc30      	pop	{r4, r5}
    2ad0:	4770      	bx	lr
    2ad2:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    2ad6:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2ad8:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    2ada:	4298      	cmp	r0, r3
    2adc:	d8e7      	bhi.n	2aae <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    2ade:	1a18      	subs	r0, r3, r0
    2ae0:	6a55      	ldr	r5, [r2, #36]	; 0x24
    2ae2:	5c28      	ldrb	r0, [r5, r0]
    2ae4:	b2c0      	uxtb	r0, r0
    2ae6:	e7e5      	b.n	2ab4 <HardwareSerial::read()+0x2c>
    2ae8:	4608      	mov	r0, r1
		__disable_irq();
    2aea:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2aec:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    2af0:	b289      	uxth	r1, r1
		if (head == tail) {
    2af2:	4288      	cmp	r0, r1
    2af4:	d004      	beq.n	2b00 <HardwareSerial::read()+0x78>
		__enable_irq();
    2af6:	b662      	cpsie	i
    2af8:	e7cf      	b.n	2a9a <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    2afa:	440c      	add	r4, r1
    2afc:	1ae3      	subs	r3, r4, r3
    2afe:	e7e0      	b.n	2ac2 <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    2b00:	6913      	ldr	r3, [r2, #16]
    2b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2b04:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    2b08:	d103      	bne.n	2b12 <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    2b0a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2b0e:	b662      	cpsie	i
}	
    2b10:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2b12:	69d8      	ldr	r0, [r3, #28]
    2b14:	f3c0 0009 	ubfx	r0, r0, #0, #10
    2b18:	e7f9      	b.n	2b0e <HardwareSerial::read()+0x86>
    2b1a:	bf00      	nop

00002b1c <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    2b1c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    2b20:	b143      	cbz	r3, 2b34 <HardwareSerial::flush()+0x18>
{
    2b22:	b510      	push	{r4, lr}
    2b24:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    2b26:	f002 ff29 	bl	597c <yield>
    2b2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d1f9      	bne.n	2b26 <HardwareSerial::flush()+0xa>
}
    2b32:	bd10      	pop	{r4, pc}
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop

00002b38 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2b38:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2b3c:	b9b8      	cbnz	r0, 2b6e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2b3e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    2b42:	b94b      	cbnz	r3, 2b58 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2b44:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    2b48:	b93a      	cbnz	r2, 2b5a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    2b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2b4e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2b52:	b150      	cbz	r0, 2b6a <nvic_execution_priority()+0x32>
    2b54:	4298      	cmp	r0, r3
    2b56:	d208      	bcs.n	2b6a <nvic_execution_priority()+0x32>
}
    2b58:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    2b5a:	2a0f      	cmp	r2, #15
    2b5c:	d9f7      	bls.n	2b4e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    2b5e:	4b05      	ldr	r3, [pc, #20]	; (2b74 <nvic_execution_priority()+0x3c>)
    2b60:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2b62:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2b66:	2800      	cmp	r0, #0
    2b68:	d1f4      	bne.n	2b54 <nvic_execution_priority()+0x1c>
    2b6a:	4618      	mov	r0, r3
	return priority;
    2b6c:	4770      	bx	lr
	if (faultmask) return -1;
    2b6e:	f04f 30ff 	mov.w	r0, #4294967295
    2b72:	e7f1      	b.n	2b58 <nvic_execution_priority()+0x20>
    2b74:	e000e3f0 	.word	0xe000e3f0

00002b78 <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    2b78:	ee07 1a90 	vmov	s15, r1
    2b7c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 2dc4 <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>
	for (int osr=4; osr <= 32; osr++) {
    2b80:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    2b82:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    2b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    2b8a:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 2dc8 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
    2b8e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    2b92:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    2b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    2b9a:	468e      	mov	lr, r1
	int bestdiv = 1;
    2b9c:	2401      	movs	r4, #1
		float div = base / (float)osr;
    2b9e:	ee07 1a90 	vmov	s15, r1
    2ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ba6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    2baa:	ee77 7a05 	vadd.f32	s15, s14, s10
    2bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2bb2:	ee17 3a90 	vmov	r3, s15
    2bb6:	4563      	cmp	r3, ip
    2bb8:	bfa8      	it	ge
    2bba:	4663      	movge	r3, ip
    2bbc:	2b01      	cmp	r3, #1
    2bbe:	bfb8      	it	lt
    2bc0:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    2bc2:	ee07 3a90 	vmov	s15, r3
    2bc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2bca:	ee76 6ac7 	vsub.f32	s13, s13, s14
    2bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    2bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bda:	bf48      	it	mi
    2bdc:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    2be0:	eef4 7ac6 	vcmpe.f32	s15, s12
    2be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2be8:	d803      	bhi.n	2bf2 <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    2bea:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    2bee:	468e      	mov	lr, r1
			bestdiv = divint;
    2bf0:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    2bf2:	3101      	adds	r1, #1
    2bf4:	2921      	cmp	r1, #33	; 0x21
    2bf6:	d1d2      	bne.n	2b9e <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    2bf8:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2bfa:	6943      	ldr	r3, [r0, #20]
    2bfc:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    2c00:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2c04:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2c08:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    2c0a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2c0e:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    2c12:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    2c16:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    2c1a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2c1e:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    2c20:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2c22:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2c26:	eba1 010c 	sub.w	r1, r1, ip
    2c2a:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    2c2e:	6831      	ldr	r1, [r6, #0]
    2c30:	695d      	ldr	r5, [r3, #20]
    2c32:	ea41 0105 	orr.w	r1, r1, r5
    2c36:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2c38:	bf14      	ite	ne
    2c3a:	2101      	movne	r1, #1
    2c3c:	2100      	moveq	r1, #0
    2c3e:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    2c40:	f040 8091 	bne.w	2d66 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ee>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2c44:	7e05      	ldrb	r5, [r0, #24]
    2c46:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2de0 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    2c4a:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    2c4e:	4e5f      	ldr	r6, [pc, #380]	; (2dcc <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
    2c50:	f89c 5018 	ldrb.w	r5, [ip, #24]
    2c54:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    2c58:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    2c5a:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2c5c:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    2c5e:	f8dc 601c 	ldr.w	r6, [ip, #28]
    2c62:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    2c64:	f8dc 5020 	ldr.w	r5, [ip, #32]
    2c68:	b115      	cbz	r5, 2c70 <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    2c6a:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    2c6e:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2c70:	7e45      	ldrb	r5, [r0, #25]
    2c72:	27d9      	movs	r7, #217	; 0xd9
    2c74:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    2c78:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    2c7c:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    2c80:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2c82:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2c84:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2c86:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    2c88:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    2c8a:	7e41      	ldrb	r1, [r0, #25]
    2c8c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2c90:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    2c92:	b10d      	cbz	r5, 2c98 <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    2c94:	6c49      	ldr	r1, [r1, #68]	; 0x44
    2c96:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2c98:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2c9c:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    2ca0:	685d      	ldr	r5, [r3, #4]
	port->PINCFG = 0;
    2ca2:	f04f 0600 	mov.w	r6, #0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2ca6:	bfcc      	ite	gt
    2ca8:	f04f 0e00 	movgt.w	lr, #0
    2cac:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2cb0:	0609      	lsls	r1, r1, #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2cb2:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2cb6:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2cba:	4321      	orrs	r1, r4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    2cbc:	785c      	ldrb	r4, [r3, #1]
    2cbe:	f104 0310 	add.w	r3, r4, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2cc2:	6904      	ldr	r4, [r0, #16]
    2cc4:	6121      	str	r1, [r4, #16]
    2cc6:	4942      	ldr	r1, [pc, #264]	; (2dd0 <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	port->PINCFG = 0;
    2cc8:	60e6      	str	r6, [r4, #12]
    2cca:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2cce:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    2cd0:	f04f 0c01 	mov.w	ip, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2cd4:	493f      	ldr	r1, [pc, #252]	; (2dd4 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2cd6:	f002 0503 	and.w	r5, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2cda:	785c      	ldrb	r4, [r3, #1]
    2cdc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    2ce0:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    2ce2:	6944      	ldr	r4, [r0, #20]
    2ce4:	4b3c      	ldr	r3, [pc, #240]	; (2dd8 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>)
    2ce6:	7861      	ldrb	r1, [r4, #1]
    2ce8:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    2cec:	f001 011f 	and.w	r1, r1, #31
    2cf0:	009b      	lsls	r3, r3, #2
    2cf2:	fa0c f101 	lsl.w	r1, ip, r1
    2cf6:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    2cf8:	f04f 1102 	mov.w	r1, #131074	; 0x20002
    2cfc:	6903      	ldr	r3, [r0, #16]
    2cfe:	62d9      	str	r1, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    2d00:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2d02:	f041 0188 	orr.w	r1, r1, #136	; 0x88
    2d06:	6299      	str	r1, [r3, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2d08:	0751      	lsls	r1, r2, #29
    2d0a:	d429      	bmi.n	2d60 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2d0c:	f445 1170 	orr.w	r1, r5, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2d10:	f002 050f 	and.w	r5, r2, #15
    2d14:	2d04      	cmp	r5, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2d16:	7e85      	ldrb	r5, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2d18:	bf08      	it	eq
    2d1a:	f041 4180 	orreq.w	r1, r1, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    2d1e:	0697      	lsls	r7, r2, #26
    2d20:	bf48      	it	mi
    2d22:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2d26:	b10d      	cbz	r5, 2d2c <HardwareSerial::begin(unsigned long, unsigned short)+0x1b4>
    2d28:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2d2c:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    2d2e:	6199      	str	r1, [r3, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2d30:	d503      	bpl.n	2d3a <HardwareSerial::begin(unsigned long, unsigned short)+0x1c2>
    2d32:	6919      	ldr	r1, [r3, #16]
    2d34:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    2d38:	6119      	str	r1, [r3, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2d3a:	6959      	ldr	r1, [r3, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2d3c:	06d5      	lsls	r5, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2d3e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2d42:	bf48      	it	mi
    2d44:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2d48:	05d2      	lsls	r2, r2, #23
	port->STAT = c;
    2d4a:	6159      	str	r1, [r3, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2d4c:	d503      	bpl.n	2d56 <HardwareSerial::begin(unsigned long, unsigned short)+0x1de>
    2d4e:	691a      	ldr	r2, [r3, #16]
    2d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    2d54:	611a      	str	r2, [r3, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    2d56:	68e3      	ldr	r3, [r4, #12]
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	b1a3      	cbz	r3, 2d86 <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
};
    2d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2d60:	491e      	ldr	r1, [pc, #120]	; (2ddc <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    2d62:	4329      	orrs	r1, r5
    2d64:	e7d4      	b.n	2d10 <HardwareSerial::begin(unsigned long, unsigned short)+0x198>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    2d66:	7e41      	ldrb	r1, [r0, #25]
    2d68:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    2d6c:	4d1c      	ldr	r5, [pc, #112]	; (2de0 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    2d6e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2d72:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    2d76:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    2d7a:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2d7c:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    2d7e:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2d80:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    2d82:	6029      	str	r1, [r5, #0]
    2d84:	e781      	b.n	2c8a <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2d86:	4e17      	ldr	r6, [pc, #92]	; (2de4 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    2d88:	7834      	ldrb	r4, [r6, #0]
    2d8a:	b1bc      	cbz	r4, 2dbc <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
    2d8c:	1e61      	subs	r1, r4, #1
    2d8e:	4d16      	ldr	r5, [pc, #88]	; (2de8 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2d90:	b2c9      	uxtb	r1, r1
    2d92:	1f2b      	subs	r3, r5, #4
    2d94:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    2d98:	f853 2f04 	ldr.w	r2, [r3, #4]!
    2d9c:	4290      	cmp	r0, r2
    2d9e:	d0dd      	beq.n	2d5c <HardwareSerial::begin(unsigned long, unsigned short)+0x1e4>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2da0:	4299      	cmp	r1, r3
    2da2:	d1f9      	bne.n	2d98 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2da4:	1c63      	adds	r3, r4, #1
    2da6:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2da8:	4a10      	ldr	r2, [pc, #64]	; (2dec <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2daa:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2dac:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2dae:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2db2:	f043 0302 	orr.w	r3, r3, #2
    2db6:	7013      	strb	r3, [r2, #0]
};
    2db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2dbc:	2301      	movs	r3, #1
    2dbe:	4d0a      	ldr	r5, [pc, #40]	; (2de8 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2dc0:	e7f2      	b.n	2da8 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
    2dc2:	bf00      	nop
    2dc4:	4bb71b00 	.word	0x4bb71b00
    2dc8:	60ad78ec 	.word	0x60ad78ec
    2dcc:	0001f038 	.word	0x0001f038
    2dd0:	20002000 	.word	0x20002000
    2dd4:	e000e400 	.word	0xe000e400
    2dd8:	38003840 	.word	0x38003840
    2ddc:	003c0010 	.word	0x003c0010
    2de0:	20000c5c 	.word	0x20000c5c
    2de4:	20003de7 	.word	0x20003de7
    2de8:	20002fa0 	.word	0x20002fa0
    2dec:	20001d95 	.word	0x20001d95

00002df0 <HardwareSerial::write9bit(unsigned long)>:
{
    2df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2df2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2df4:	4604      	mov	r4, r0
    2df6:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2df8:	b113      	cbz	r3, 2e00 <HardwareSerial::write9bit(unsigned long)+0x10>
    2dfa:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    2e00:	7ea3      	ldrb	r3, [r4, #26]
    2e02:	b133      	cbz	r3, 2e12 <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    2e04:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    2e06:	6922      	ldr	r2, [r4, #16]
    2e08:	6993      	ldr	r3, [r2, #24]
    2e0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2e0e:	6193      	str	r3, [r2, #24]
		__enable_irq();
    2e10:	b662      	cpsie	i
	head = tx_buffer_head_;
    2e12:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    2e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    2e18:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    2e1a:	3501      	adds	r5, #1
    2e1c:	42ab      	cmp	r3, r5
    2e1e:	d84c      	bhi.n	2eba <HardwareSerial::write9bit(unsigned long)+0xca>
    2e20:	2700      	movs	r7, #0
    2e22:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    2e24:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2e28:	b29b      	uxth	r3, r3
    2e2a:	429d      	cmp	r5, r3
    2e2c:	d01a      	beq.n	2e64 <HardwareSerial::write9bit(unsigned long)+0x74>
    2e2e:	e029      	b.n	2e84 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    2e30:	6921      	ldr	r1, [r4, #16]
    2e32:	694b      	ldr	r3, [r1, #20]
    2e34:	021b      	lsls	r3, r3, #8
    2e36:	d510      	bpl.n	2e5a <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    2e38:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2e3c:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    2e3e:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2e40:	3301      	adds	r3, #1
    2e42:	429a      	cmp	r2, r3
    2e44:	d936      	bls.n	2eb4 <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    2e46:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    2e48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2e4a:	4298      	cmp	r0, r3
    2e4c:	d92d      	bls.n	2eaa <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    2e4e:	69e0      	ldr	r0, [r4, #28]
    2e50:	5cc3      	ldrb	r3, [r0, r3]
    2e52:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    2e54:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    2e56:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    2e5a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2e5e:	b29b      	uxth	r3, r3
    2e60:	42ab      	cmp	r3, r5
    2e62:	d10f      	bne.n	2e84 <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    2e64:	f7ff fe68 	bl	2b38 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    2e68:	6963      	ldr	r3, [r4, #20]
    2e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    2e6e:	4283      	cmp	r3, r0
    2e70:	dade      	bge.n	2e30 <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    2e72:	28ff      	cmp	r0, #255	; 0xff
    2e74:	ddf1      	ble.n	2e5a <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    2e76:	f002 fd81 	bl	597c <yield>
	while (tx_buffer_tail_ == head) {
    2e7a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2e7e:	b29b      	uxth	r3, r3
    2e80:	42ab      	cmp	r3, r5
    2e82:	d0ef      	beq.n	2e64 <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    2e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2e86:	42ab      	cmp	r3, r5
    2e88:	d919      	bls.n	2ebe <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    2e8a:	69e3      	ldr	r3, [r4, #28]
    2e8c:	b2f6      	uxtb	r6, r6
    2e8e:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    2e90:	b672      	cpsid	i
	transmitting_ = 1;
    2e92:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2e94:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    2e96:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    2e9a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2e9e:	6993      	ldr	r3, [r2, #24]
    2ea0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    2ea4:	6193      	str	r3, [r2, #24]
	__enable_irq();
    2ea6:	b662      	cpsie	i
}
    2ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    2eaa:	1a1b      	subs	r3, r3, r0
    2eac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2eae:	5cc3      	ldrb	r3, [r0, r3]
    2eb0:	b2db      	uxtb	r3, r3
    2eb2:	e7cf      	b.n	2e54 <HardwareSerial::write9bit(unsigned long)+0x64>
    2eb4:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2eb6:	4613      	mov	r3, r2
    2eb8:	e7c6      	b.n	2e48 <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    2eba:	b2af      	uxth	r7, r5
    2ebc:	e7b2      	b.n	2e24 <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    2ebe:	1aed      	subs	r5, r5, r3
    2ec0:	b2f6      	uxtb	r6, r6
    2ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ec4:	555e      	strb	r6, [r3, r5]
    2ec6:	e7e3      	b.n	2e90 <HardwareSerial::write9bit(unsigned long)+0xa0>

00002ec8 <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    2ec8:	f7ff bf92 	b.w	2df0 <HardwareSerial::write9bit(unsigned long)>

00002ecc <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2ecc:	6902      	ldr	r2, [r0, #16]
    2ece:	6953      	ldr	r3, [r2, #20]
    2ed0:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    2ed4:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2ed6:	4615      	mov	r5, r2
    2ed8:	d047      	beq.n	2f6a <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2eda:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    2edc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2ee0:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    2ee4:	d03e      	beq.n	2f64 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    2ee6:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    2eea:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    2eee:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    2ef0:	b2ad      	uxth	r5, r5
    2ef2:	e008      	b.n	2f06 <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    2ef4:	6a02      	ldr	r2, [r0, #32]
    2ef6:	f802 c003 	strb.w	ip, [r2, r3]
    2efa:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    2efc:	f10e 33ff 	add.w	r3, lr, #4294967295
    2f00:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2f04:	d01e      	beq.n	2f44 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2f06:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    2f08:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    2f0a:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2f0e:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2f10:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    2f14:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2f18:	429e      	cmp	r6, r3
    2f1a:	bf98      	it	ls
    2f1c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    2f1e:	459c      	cmp	ip, r3
    2f20:	d0ec      	beq.n	2efc <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    2f22:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2f24:	fa5f fc81 	uxtb.w	ip, r1
    2f28:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    2f2a:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2f2c:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    2f30:	d8e0      	bhi.n	2ef4 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2f32:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2f34:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    2f38:	f10e 33ff 	add.w	r3, lr, #4294967295
    2f3c:	6902      	ldr	r2, [r0, #16]
    2f3e:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2f42:	d1e0      	bne.n	2f06 <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    2f44:	b2a3      	uxth	r3, r4
    2f46:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    2f4a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d05a      	beq.n	3006 <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    2f50:	42ac      	cmp	r4, r5
    2f52:	d35d      	bcc.n	3010 <HardwareSerial::IRQHandler()+0x144>
    2f54:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    2f56:	6c01      	ldr	r1, [r0, #64]	; 0x40
    2f58:	42a1      	cmp	r1, r4
    2f5a:	d854      	bhi.n	3006 <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2f5c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    2f5e:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2f60:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    2f64:	6953      	ldr	r3, [r2, #20]
    2f66:	02dc      	lsls	r4, r3, #11
    2f68:	d448      	bmi.n	2ffc <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    2f6a:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    2f6c:	0231      	lsls	r1, r6, #8
    2f6e:	d529      	bpl.n	2fc4 <HardwareSerial::IRQHandler()+0xf8>
    2f70:	6953      	ldr	r3, [r2, #20]
    2f72:	021b      	lsls	r3, r3, #8
    2f74:	d526      	bpl.n	2fc4 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    2f76:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    2f7a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    2f7e:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    2f82:	b29b      	uxth	r3, r3
    2f84:	e006      	b.n	2f94 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    2f86:	69c1      	ldr	r1, [r0, #28]
    2f88:	5cc9      	ldrb	r1, [r1, r3]
    2f8a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    2f8c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2f8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2f90:	054c      	lsls	r4, r1, #21
    2f92:	d412      	bmi.n	2fba <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    2f94:	4563      	cmp	r3, ip
    2f96:	d03f      	beq.n	3018 <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    2f98:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2f9a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    2f9c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    2f9e:	429c      	cmp	r4, r3
    2fa0:	bf98      	it	ls
    2fa2:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    2fa4:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    2fa6:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    2faa:	d8ec      	bhi.n	2f86 <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    2fac:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2fae:	5d09      	ldrb	r1, [r1, r4]
    2fb0:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    2fb2:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2fb4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2fb6:	054c      	lsls	r4, r1, #21
    2fb8:	d5ec      	bpl.n	2f94 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    2fba:	b299      	uxth	r1, r3
		if (head == tail) {
    2fbc:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    2fbe:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    2fc2:	d02c      	beq.n	301e <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    2fc4:	0271      	lsls	r1, r6, #9
    2fc6:	d518      	bpl.n	2ffa <HardwareSerial::IRQHandler()+0x12e>
    2fc8:	6953      	ldr	r3, [r2, #20]
    2fca:	025b      	lsls	r3, r3, #9
    2fcc:	d515      	bpl.n	2ffa <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    2fce:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2fd0:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    2fd2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2fd6:	b113      	cbz	r3, 2fde <HardwareSerial::IRQHandler()+0x112>
    2fd8:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    2fde:	7e83      	ldrb	r3, [r0, #26]
    2fe0:	b13b      	cbz	r3, 2ff2 <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    2fe2:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    2fe4:	6902      	ldr	r2, [r0, #16]
    2fe6:	6993      	ldr	r3, [r2, #24]
    2fe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2fec:	6193      	str	r3, [r2, #24]
			__enable_irq();
    2fee:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    2ff0:	6905      	ldr	r5, [r0, #16]
    2ff2:	69ab      	ldr	r3, [r5, #24]
    2ff4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    2ff8:	61ab      	str	r3, [r5, #24]
}
    2ffa:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    2ffc:	6953      	ldr	r3, [r2, #20]
    2ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3002:	6153      	str	r3, [r2, #20]
    3004:	e7b1      	b.n	2f6a <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    3006:	6953      	ldr	r3, [r2, #20]
    3008:	4615      	mov	r5, r2
    300a:	02dc      	lsls	r4, r3, #11
    300c:	d5ad      	bpl.n	2f6a <HardwareSerial::IRQHandler()+0x9e>
    300e:	e7f5      	b.n	2ffc <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    3010:	6b81      	ldr	r1, [r0, #56]	; 0x38
    3012:	1b49      	subs	r1, r1, r5
    3014:	440c      	add	r4, r1
    3016:	e79e      	b.n	2f56 <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    3018:	b29b      	uxth	r3, r3
    301a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    301e:	6993      	ldr	r3, [r2, #24]
    3020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3024:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    3026:	6993      	ldr	r3, [r2, #24]
    3028:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    302c:	6193      	str	r3, [r2, #24]
    302e:	e7c9      	b.n	2fc4 <HardwareSerial::IRQHandler()+0xf8>

00003030 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    3030:	4801      	ldr	r0, [pc, #4]	; (3038 <IRQHandler_Serial1+0x8>)
    3032:	f7ff bf4b 	b.w	2ecc <HardwareSerial::IRQHandler()>
    3036:	bf00      	nop
    3038:	20002578 	.word	0x20002578

0000303c <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    303c:	b410      	push	{r4}
    303e:	4b16      	ldr	r3, [pc, #88]	; (3098 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    3040:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3044:	4815      	ldr	r0, [pc, #84]	; (309c <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    3046:	2200      	movs	r2, #0
    3048:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    304a:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    304c:	4c14      	ldr	r4, [pc, #80]	; (30a0 <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    304e:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    3050:	4814      	ldr	r0, [pc, #80]	; (30a4 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    3052:	611c      	str	r4, [r3, #16]
    3054:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3056:	4c14      	ldr	r4, [pc, #80]	; (30a8 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    3058:	4814      	ldr	r0, [pc, #80]	; (30ac <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    305a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    305e:	731a      	strb	r2, [r3, #12]
    3060:	831a      	strh	r2, [r3, #24]
    3062:	769a      	strb	r2, [r3, #26]
    3064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3068:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    306a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    306e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3072:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    3076:	605a      	str	r2, [r3, #4]
    3078:	625a      	str	r2, [r3, #36]	; 0x24
    307a:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    307c:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    307e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3082:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3086:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    308a:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    308e:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3092:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3096:	4770      	bx	lr
    3098:	20002578 	.word	0x20002578
    309c:	200007d4 	.word	0x200007d4
    30a0:	40198000 	.word	0x40198000
    30a4:	20000618 	.word	0x20000618
    30a8:	20002e38 	.word	0x20002e38
    30ac:	20002c38 	.word	0x20002c38

000030b0 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    30b0:	4801      	ldr	r0, [pc, #4]	; (30b8 <IRQHandler_Serial2+0x8>)
    30b2:	f7ff bf0b 	b.w	2ecc <HardwareSerial::IRQHandler()>
    30b6:	bf00      	nop
    30b8:	200025d8 	.word	0x200025d8

000030bc <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    30bc:	b410      	push	{r4}
    30be:	4b17      	ldr	r3, [pc, #92]	; (311c <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    30c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    30c4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    30c6:	2028      	movs	r0, #40	; 0x28
    30c8:	609c      	str	r4, [r3, #8]
    30ca:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    30cc:	4c14      	ldr	r4, [pc, #80]	; (3120 <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    30ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    30d2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    30d4:	4c13      	ldr	r4, [pc, #76]	; (3124 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    30d6:	731a      	strb	r2, [r3, #12]
    30d8:	611c      	str	r4, [r3, #16]
    30da:	4c13      	ldr	r4, [pc, #76]	; (3128 <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    30dc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    30de:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    30e0:	4c12      	ldr	r4, [pc, #72]	; (312c <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    30e2:	769a      	strb	r2, [r3, #26]
    30e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    30e8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    30ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    30ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    30f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    30f6:	605a      	str	r2, [r3, #4]
    30f8:	625a      	str	r2, [r3, #36]	; 0x24
    30fa:	641a      	str	r2, [r3, #64]	; 0x40
    30fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3100:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3104:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3108:	4809      	ldr	r0, [pc, #36]	; (3130 <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    310a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    310e:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3110:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3114:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3118:	4770      	bx	lr
    311a:	bf00      	nop
    311c:	200025d8 	.word	0x200025d8
    3120:	200007d4 	.word	0x200007d4
    3124:	40190000 	.word	0x40190000
    3128:	200013f4 	.word	0x200013f4
    312c:	20002e78 	.word	0x20002e78
    3130:	20002c78 	.word	0x20002c78

00003134 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    3134:	4801      	ldr	r0, [pc, #4]	; (313c <IRQHandler_Serial3+0x8>)
    3136:	f7ff bec9 	b.w	2ecc <HardwareSerial::IRQHandler()>
    313a:	bf00      	nop
    313c:	20002638 	.word	0x20002638

00003140 <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    3140:	b410      	push	{r4}
    3142:	4b17      	ldr	r3, [pc, #92]	; (31a0 <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    3144:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3148:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    314a:	2028      	movs	r0, #40	; 0x28
    314c:	609c      	str	r4, [r3, #8]
    314e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3150:	4c14      	ldr	r4, [pc, #80]	; (31a4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    3152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    3156:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3158:	4c13      	ldr	r4, [pc, #76]	; (31a8 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    315a:	731a      	strb	r2, [r3, #12]
    315c:	611c      	str	r4, [r3, #16]
    315e:	4c13      	ldr	r4, [pc, #76]	; (31ac <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3160:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    3162:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3164:	4c12      	ldr	r4, [pc, #72]	; (31b0 <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3166:	769a      	strb	r2, [r3, #26]
    3168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    316c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    316e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    3172:	f85d 4b04 	ldr.w	r4, [sp], #4
    3176:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    317a:	605a      	str	r2, [r3, #4]
    317c:	625a      	str	r2, [r3, #36]	; 0x24
    317e:	641a      	str	r2, [r3, #64]	; 0x40
    3180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3184:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3188:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    318c:	4809      	ldr	r0, [pc, #36]	; (31b4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    318e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3192:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3194:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3198:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    319c:	4770      	bx	lr
    319e:	bf00      	nop
    31a0:	20002638 	.word	0x20002638
    31a4:	200007d4 	.word	0x200007d4
    31a8:	40188000 	.word	0x40188000
    31ac:	2000132c 	.word	0x2000132c
    31b0:	20002ea0 	.word	0x20002ea0
    31b4:	20002cb8 	.word	0x20002cb8

000031b8 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    31b8:	4801      	ldr	r0, [pc, #4]	; (31c0 <IRQHandler_Serial4+0x8>)
    31ba:	f7ff be87 	b.w	2ecc <HardwareSerial::IRQHandler()>
    31be:	bf00      	nop
    31c0:	20002698 	.word	0x20002698

000031c4 <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    31c4:	b410      	push	{r4}
    31c6:	4b17      	ldr	r3, [pc, #92]	; (3224 <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    31c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    31cc:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31ce:	2028      	movs	r0, #40	; 0x28
    31d0:	609c      	str	r4, [r3, #8]
    31d2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31d4:	4c14      	ldr	r4, [pc, #80]	; (3228 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    31d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    31da:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    31dc:	4c13      	ldr	r4, [pc, #76]	; (322c <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    31de:	731a      	strb	r2, [r3, #12]
    31e0:	611c      	str	r4, [r3, #16]
    31e2:	4c13      	ldr	r4, [pc, #76]	; (3230 <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31e4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    31e6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31e8:	4c12      	ldr	r4, [pc, #72]	; (3234 <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31ea:	769a      	strb	r2, [r3, #26]
    31ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31f0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    31f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    31fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    31fe:	605a      	str	r2, [r3, #4]
    3200:	625a      	str	r2, [r3, #36]	; 0x24
    3202:	641a      	str	r2, [r3, #64]	; 0x40
    3204:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3208:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    320c:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3210:	4809      	ldr	r0, [pc, #36]	; (3238 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3212:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3216:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3218:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    321c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3220:	4770      	bx	lr
    3222:	bf00      	nop
    3224:	20002698 	.word	0x20002698
    3228:	200007d4 	.word	0x200007d4
    322c:	4018c000 	.word	0x4018c000
    3230:	20001390 	.word	0x20001390
    3234:	20002ec8 	.word	0x20002ec8
    3238:	20002cf8 	.word	0x20002cf8

0000323c <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    323c:	4801      	ldr	r0, [pc, #4]	; (3244 <IRQHandler_Serial5+0x8>)
    323e:	f7ff be45 	b.w	2ecc <HardwareSerial::IRQHandler()>
    3242:	bf00      	nop
    3244:	200026f8 	.word	0x200026f8

00003248 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    3248:	b410      	push	{r4}
    324a:	4b17      	ldr	r3, [pc, #92]	; (32a8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    324c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3250:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3252:	2028      	movs	r0, #40	; 0x28
    3254:	609c      	str	r4, [r3, #8]
    3256:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3258:	4c14      	ldr	r4, [pc, #80]	; (32ac <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    325e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3260:	4c13      	ldr	r4, [pc, #76]	; (32b0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    3262:	731a      	strb	r2, [r3, #12]
    3264:	611c      	str	r4, [r3, #16]
    3266:	4c13      	ldr	r4, [pc, #76]	; (32b4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3268:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    326a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    326c:	4c12      	ldr	r4, [pc, #72]	; (32b8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    326e:	769a      	strb	r2, [r3, #26]
    3270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3274:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3276:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    327a:	f85d 4b04 	ldr.w	r4, [sp], #4
    327e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    3282:	605a      	str	r2, [r3, #4]
    3284:	625a      	str	r2, [r3, #36]	; 0x24
    3286:	641a      	str	r2, [r3, #64]	; 0x40
    3288:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    328c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3290:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3294:	4809      	ldr	r0, [pc, #36]	; (32bc <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3296:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    329a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    329c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    32a0:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    32a4:	4770      	bx	lr
    32a6:	bf00      	nop
    32a8:	200026f8 	.word	0x200026f8
    32ac:	200007d4 	.word	0x200007d4
    32b0:	401a0000 	.word	0x401a0000
    32b4:	20001520 	.word	0x20001520
    32b8:	20002ef0 	.word	0x20002ef0
    32bc:	20002d38 	.word	0x20002d38

000032c0 <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    32c0:	4801      	ldr	r0, [pc, #4]	; (32c8 <IRQHandler_Serial6+0x8>)
    32c2:	f7ff be03 	b.w	2ecc <HardwareSerial::IRQHandler()>
    32c6:	bf00      	nop
    32c8:	20002758 	.word	0x20002758

000032cc <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    32cc:	b410      	push	{r4}
    32ce:	4b17      	ldr	r3, [pc, #92]	; (332c <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    32d0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    32d4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32d6:	2028      	movs	r0, #40	; 0x28
    32d8:	609c      	str	r4, [r3, #8]
    32da:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32dc:	4c14      	ldr	r4, [pc, #80]	; (3330 <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    32de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    32e2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    32e4:	4c13      	ldr	r4, [pc, #76]	; (3334 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    32e6:	731a      	strb	r2, [r3, #12]
    32e8:	611c      	str	r4, [r3, #16]
    32ea:	4c13      	ldr	r4, [pc, #76]	; (3338 <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32ec:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    32ee:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32f0:	4c12      	ldr	r4, [pc, #72]	; (333c <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32f2:	769a      	strb	r2, [r3, #26]
    32f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32f8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    32fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    3302:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    3306:	605a      	str	r2, [r3, #4]
    3308:	625a      	str	r2, [r3, #36]	; 0x24
    330a:	641a      	str	r2, [r3, #64]	; 0x40
    330c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3310:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3314:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3318:	4809      	ldr	r0, [pc, #36]	; (3340 <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    331a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    331e:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3320:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3324:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3328:	4770      	bx	lr
    332a:	bf00      	nop
    332c:	20002758 	.word	0x20002758
    3330:	200007d4 	.word	0x200007d4
    3334:	40184000 	.word	0x40184000
    3338:	200012c8 	.word	0x200012c8
    333c:	20002f18 	.word	0x20002f18
    3340:	20002d78 	.word	0x20002d78

00003344 <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    3344:	4801      	ldr	r0, [pc, #4]	; (334c <IRQHandler_Serial7+0x8>)
    3346:	f7ff bdc1 	b.w	2ecc <HardwareSerial::IRQHandler()>
    334a:	bf00      	nop
    334c:	200027b8 	.word	0x200027b8

00003350 <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    3350:	b410      	push	{r4}
    3352:	4b17      	ldr	r3, [pc, #92]	; (33b0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    3354:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3358:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    335a:	2028      	movs	r0, #40	; 0x28
    335c:	609c      	str	r4, [r3, #8]
    335e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3360:	4c14      	ldr	r4, [pc, #80]	; (33b4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    3362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    3366:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3368:	4c13      	ldr	r4, [pc, #76]	; (33b8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    336a:	731a      	strb	r2, [r3, #12]
    336c:	611c      	str	r4, [r3, #16]
    336e:	4c13      	ldr	r4, [pc, #76]	; (33bc <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3370:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    3372:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3374:	4c12      	ldr	r4, [pc, #72]	; (33c0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3376:	769a      	strb	r2, [r3, #26]
    3378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    337c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    337e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    3382:	f85d 4b04 	ldr.w	r4, [sp], #4
    3386:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    338a:	605a      	str	r2, [r3, #4]
    338c:	625a      	str	r2, [r3, #36]	; 0x24
    338e:	641a      	str	r2, [r3, #64]	; 0x40
    3390:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3394:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3398:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    339c:	4809      	ldr	r0, [pc, #36]	; (33c4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    339e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33a2:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33a4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    33a8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    33ac:	4770      	bx	lr
    33ae:	bf00      	nop
    33b0:	200027b8 	.word	0x200027b8
    33b4:	200007d4 	.word	0x200007d4
    33b8:	4019c000 	.word	0x4019c000
    33bc:	200014bc 	.word	0x200014bc
    33c0:	20002f40 	.word	0x20002f40
    33c4:	20002db8 	.word	0x20002db8

000033c8 <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    33c8:	4801      	ldr	r0, [pc, #4]	; (33d0 <IRQHandler_Serial8+0x8>)
    33ca:	f7ff bd7f 	b.w	2ecc <HardwareSerial::IRQHandler()>
    33ce:	bf00      	nop
    33d0:	20002818 	.word	0x20002818

000033d4 <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    33d4:	b410      	push	{r4}
    33d6:	4b17      	ldr	r3, [pc, #92]	; (3434 <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
    33d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    33dc:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33de:	2028      	movs	r0, #40	; 0x28
    33e0:	609c      	str	r4, [r3, #8]
    33e2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33e4:	4c14      	ldr	r4, [pc, #80]	; (3438 <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    33e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    33ea:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    33ec:	4c13      	ldr	r4, [pc, #76]	; (343c <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    33ee:	731a      	strb	r2, [r3, #12]
    33f0:	611c      	str	r4, [r3, #16]
    33f2:	4c13      	ldr	r4, [pc, #76]	; (3440 <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33f4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    33f6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33f8:	4c12      	ldr	r4, [pc, #72]	; (3444 <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33fa:	769a      	strb	r2, [r3, #26]
    33fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3400:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    3406:	f85d 4b04 	ldr.w	r4, [sp], #4
    340a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    340e:	605a      	str	r2, [r3, #4]
    3410:	625a      	str	r2, [r3, #36]	; 0x24
    3412:	641a      	str	r2, [r3, #64]	; 0x40
    3414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3418:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    341c:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3420:	4809      	ldr	r0, [pc, #36]	; (3448 <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3422:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3426:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3428:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    342c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3430:	4770      	bx	lr
    3432:	bf00      	nop
    3434:	20002818 	.word	0x20002818
    3438:	200007d4 	.word	0x200007d4
    343c:	40194000 	.word	0x40194000
    3440:	20001458 	.word	0x20001458
    3444:	20002f68 	.word	0x20002f68
    3448:	20002df8 	.word	0x20002df8

0000344c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    3450:	460c      	mov	r4, r1
    3452:	b1d1      	cbz	r1, 348a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    3454:	b1ea      	cbz	r2, 3492 <Print::write(unsigned char const*, unsigned int)+0x46>
    3456:	4680      	mov	r8, r0
    3458:	188e      	adds	r6, r1, r2
	size_t count = 0;
    345a:	2500      	movs	r5, #0
    345c:	4f0e      	ldr	r7, [pc, #56]	; (3498 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    345e:	e004      	b.n	346a <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3460:	f002 f9f8 	bl	5854 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    3464:	42b4      	cmp	r4, r6
    3466:	4405      	add	r5, r0
    3468:	d00c      	beq.n	3484 <Print::write(unsigned char const*, unsigned int)+0x38>
    346a:	f8d8 3000 	ldr.w	r3, [r8]
    346e:	f814 0b01 	ldrb.w	r0, [r4], #1
    3472:	681b      	ldr	r3, [r3, #0]
    3474:	42bb      	cmp	r3, r7
    3476:	d0f3      	beq.n	3460 <Print::write(unsigned char const*, unsigned int)+0x14>
    3478:	4601      	mov	r1, r0
    347a:	4640      	mov	r0, r8
    347c:	4798      	blx	r3
    347e:	42b4      	cmp	r4, r6
    3480:	4405      	add	r5, r0
    3482:	d1f2      	bne.n	346a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    3484:	4628      	mov	r0, r5
    3486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    348a:	460d      	mov	r5, r1
}
    348c:	4628      	mov	r0, r5
    348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    3492:	4615      	mov	r5, r2
    3494:	e7f6      	b.n	3484 <Print::write(unsigned char const*, unsigned int)+0x38>
    3496:	bf00      	nop
    3498:	00001565 	.word	0x00001565

0000349c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    34a0:	688c      	ldr	r4, [r1, #8]
    34a2:	b08a      	sub	sp, #40	; 0x28
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    34a4:	b1dc      	cbz	r4, 34de <Print::print(String const&)+0x42>
	unsigned int index = 0;
    34a6:	2500      	movs	r5, #0
    34a8:	4688      	mov	r8, r1
    34aa:	4606      	mov	r6, r0
	size_t count = 0;
    34ac:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    34ae:	462b      	mov	r3, r5
    34b0:	2221      	movs	r2, #33	; 0x21
    34b2:	a901      	add	r1, sp, #4
    34b4:	4640      	mov	r0, r8
    34b6:	f000 f9f1 	bl	389c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    34ba:	2c20      	cmp	r4, #32
    34bc:	4622      	mov	r2, r4
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    34be:	6833      	ldr	r3, [r6, #0]
    34c0:	bf28      	it	cs
    34c2:	2220      	movcs	r2, #32
    34c4:	a901      	add	r1, sp, #4
    34c6:	4630      	mov	r0, r6
    34c8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    34ca:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    34cc:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    34ce:	4798      	blx	r3
    34d0:	4407      	add	r7, r0
	while (len > 0) {
    34d2:	2c00      	cmp	r4, #0
    34d4:	d1eb      	bne.n	34ae <Print::print(String const&)+0x12>
	}
	return count;
}
    34d6:	4638      	mov	r0, r7
    34d8:	b00a      	add	sp, #40	; 0x28
    34da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    34de:	4627      	mov	r7, r4
}
    34e0:	4638      	mov	r0, r7
    34e2:	b00a      	add	sp, #40	; 0x28
    34e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000034e8 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    34e8:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    34ea:	6803      	ldr	r3, [r0, #0]
{
    34ec:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    34ee:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    34f2:	2202      	movs	r2, #2
    34f4:	a901      	add	r1, sp, #4
    34f6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    34f8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    34fc:	4798      	blx	r3
}
    34fe:	b003      	add	sp, #12
    3500:	f85d fb04 	ldr.w	pc, [sp], #4

00003504 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3504:	4b05      	ldr	r3, [pc, #20]	; (351c <_write+0x18>)
    3506:	2802      	cmp	r0, #2
    3508:	bf88      	it	hi
    350a:	4603      	movhi	r3, r0
{
    350c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    350e:	681c      	ldr	r4, [r3, #0]
    3510:	4618      	mov	r0, r3
    3512:	6863      	ldr	r3, [r4, #4]
}
    3514:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3518:	4718      	bx	r3
    351a:	bf00      	nop
    351c:	200012b8 	.word	0x200012b8

00003520 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    3520:	f002 b922 	b.w	5768 <usb_serial_peekchar>

00003524 <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    3524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    3528:	2700      	movs	r7, #0
{
    352a:	468b      	mov	fp, r1
    352c:	4681      	mov	r9, r0
    352e:	4692      	mov	sl, r2
	String str;
    3530:	4639      	mov	r1, r7
    3532:	f103 38ff 	add.w	r8, r3, #4294967295
    3536:	4c17      	ldr	r4, [pc, #92]	; (3594 <Stream::readStringUntil(char, unsigned int)+0x70>)
    3538:	4e17      	ldr	r6, [pc, #92]	; (3598 <Stream::readStringUntil(char, unsigned int)+0x74>)
    353a:	f000 f89f 	bl	367c <String::String(char const*)>
	return systick_millis_count;
    353e:	6825      	ldr	r5, [r4, #0]
    3540:	e00b      	b.n	355a <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    3542:	f002 f977 	bl	5834 <usb_serial_getchar>
    if (c >= 0) return c;
    3546:	2800      	cmp	r0, #0
    3548:	da10      	bge.n	356c <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    354a:	f002 fa17 	bl	597c <yield>
    354e:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    3550:	f8db 2008 	ldr.w	r2, [fp, #8]
    3554:	1b5b      	subs	r3, r3, r5
    3556:	4293      	cmp	r3, r2
    3558:	d215      	bcs.n	3586 <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    355a:	f8db 3000 	ldr.w	r3, [fp]
    355e:	695b      	ldr	r3, [r3, #20]
    3560:	42b3      	cmp	r3, r6
    3562:	d0ee      	beq.n	3542 <Stream::readStringUntil(char, unsigned int)+0x1e>
    3564:	4658      	mov	r0, fp
    3566:	4798      	blx	r3
    if (c >= 0) return c;
    3568:	2800      	cmp	r0, #0
    356a:	dbee      	blt.n	354a <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    356c:	d008      	beq.n	3580 <Stream::readStringUntil(char, unsigned int)+0x5c>
    356e:	4582      	cmp	sl, r0
    3570:	d006      	beq.n	3580 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    3572:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    3574:	b2c1      	uxtb	r1, r0
    3576:	4648      	mov	r0, r9
    3578:	f000 f962 	bl	3840 <String::append(char)>
	while (length < max || !max) {
    357c:	4547      	cmp	r7, r8
    357e:	d9de      	bls.n	353e <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    3580:	4648      	mov	r0, r9
    3582:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    3586:	2301      	movs	r3, #1
    3588:	4648      	mov	r0, r9
    358a:	f88b 300c 	strb.w	r3, [fp, #12]
    358e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3592:	bf00      	nop
    3594:	20003dc4 	.word	0x20003dc4
    3598:	00001561 	.word	0x00001561

0000359c <String::String(String const&)>:
String::String(const String &value)
    359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    359e:	4288      	cmp	r0, r1
	buffer = NULL;
    35a0:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    35a4:	4604      	mov	r4, r0
	len = 0;
    35a6:	6085      	str	r5, [r0, #8]
	flags = 0;
    35a8:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    35aa:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    35ae:	d002      	beq.n	35b6 <String::String(String const&)+0x1a>
    35b0:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    35b2:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    35b4:	b90e      	cbnz	r6, 35ba <String::String(String const&)+0x1e>
}
    35b6:	4620      	mov	r0, r4
    35b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    35ba:	1c70      	adds	r0, r6, #1
    35bc:	f002 faf2 	bl	5ba4 <malloc>
	if (newbuffer) {
    35c0:	2800      	cmp	r0, #0
    35c2:	d0f8      	beq.n	35b6 <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    35c4:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    35c6:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    35c8:	6020      	str	r0, [r4, #0]
	len = length;
    35ca:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    35ce:	f004 ff55 	bl	847c <strcpy>
}
    35d2:	4620      	mov	r0, r4
    35d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35d6:	bf00      	nop

000035d8 <String::String(String&&)>:
	buffer = NULL;
    35d8:	2300      	movs	r3, #0
	if (&rhs == this) return;
    35da:	4288      	cmp	r0, r1
	capacity = 0;
    35dc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    35e0:	6083      	str	r3, [r0, #8]
	flags = 0;
    35e2:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    35e4:	d00c      	beq.n	3600 <String::String(String&&)+0x28>
String::String(String &&rval)
    35e6:	b410      	push	{r4}
	capacity = rhs.capacity;
    35e8:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    35ec:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    35f0:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    35f4:	688a      	ldr	r2, [r1, #8]
}
    35f6:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    35fa:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    35fc:	6082      	str	r2, [r0, #8]
}
    35fe:	4770      	bx	lr
    3600:	4770      	bx	lr
    3602:	bf00      	nop

00003604 <String::~String()>:
String::~String()
    3604:	b510      	push	{r4, lr}
    3606:	4604      	mov	r4, r0
	free(buffer);
    3608:	6800      	ldr	r0, [r0, #0]
    360a:	f002 fad3 	bl	5bb4 <free>
}
    360e:	4620      	mov	r0, r4
    3610:	bd10      	pop	{r4, pc}
    3612:	bf00      	nop

00003614 <String::copy(char const*, unsigned int)>:
{
    3614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3616:	4604      	mov	r4, r0
	if (length == 0) {
    3618:	4615      	mov	r5, r2
    361a:	b932      	cbnz	r2, 362a <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    361c:	6803      	ldr	r3, [r0, #0]
    361e:	b103      	cbz	r3, 3622 <String::copy(char const*, unsigned int)+0xe>
    3620:	701a      	strb	r2, [r3, #0]
		len = 0;
    3622:	2300      	movs	r3, #0
}
    3624:	4620      	mov	r0, r4
		len = 0;
    3626:	60a3      	str	r3, [r4, #8]
}
    3628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    362a:	6843      	ldr	r3, [r0, #4]
    362c:	460e      	mov	r6, r1
    362e:	429a      	cmp	r2, r3
    3630:	d91c      	bls.n	366c <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3632:	1c51      	adds	r1, r2, #1
    3634:	6800      	ldr	r0, [r0, #0]
    3636:	f002 fd81 	bl	613c <realloc>
	if (newbuffer) {
    363a:	4607      	mov	r7, r0
    363c:	b160      	cbz	r0, 3658 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    363e:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    3640:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    3644:	b90b      	cbnz	r3, 364a <String::copy(char const*, unsigned int)+0x36>
    3646:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    3648:	6827      	ldr	r7, [r4, #0]
    364a:	4631      	mov	r1, r6
    364c:	4638      	mov	r0, r7
	len = length;
    364e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    3650:	f004 ff14 	bl	847c <strcpy>
}
    3654:	4620      	mov	r0, r4
    3656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    3658:	6820      	ldr	r0, [r4, #0]
    365a:	b110      	cbz	r0, 3662 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    365c:	f002 faaa 	bl	5bb4 <free>
			buffer = NULL;
    3660:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    3662:	2300      	movs	r3, #0
}
    3664:	4620      	mov	r0, r4
		len = capacity = 0;
    3666:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    366c:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    366e:	4631      	mov	r1, r6
	len = length;
    3670:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    3672:	4638      	mov	r0, r7
    3674:	f004 ff02 	bl	847c <strcpy>
	return *this;
    3678:	e7ec      	b.n	3654 <String::copy(char const*, unsigned int)+0x40>
    367a:	bf00      	nop

0000367c <String::String(char const*)>:
String::String(const char *cstr)
    367c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    367e:	2300      	movs	r3, #0
String::String(const char *cstr)
    3680:	4604      	mov	r4, r0
	capacity = 0;
    3682:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    3686:	6083      	str	r3, [r0, #8]
	flags = 0;
    3688:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    368a:	b141      	cbz	r1, 369e <String::String(char const*)+0x22>
    368c:	460d      	mov	r5, r1
    368e:	4608      	mov	r0, r1
    3690:	f004 ff56 	bl	8540 <strlen>
    3694:	4602      	mov	r2, r0
    3696:	4629      	mov	r1, r5
    3698:	4620      	mov	r0, r4
    369a:	f7ff ffbb 	bl	3614 <String::copy(char const*, unsigned int)>
}
    369e:	4620      	mov	r0, r4
    36a0:	bd38      	pop	{r3, r4, r5, pc}
    36a2:	bf00      	nop

000036a4 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    36a4:	b510      	push	{r4, lr}
	buffer = NULL;
    36a6:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    36a8:	b08a      	sub	sp, #40	; 0x28
    36aa:	4604      	mov	r4, r0
	itoa(value, buf, base);
    36ac:	4608      	mov	r0, r1
    36ae:	a901      	add	r1, sp, #4
	len = 0;
    36b0:	60a3      	str	r3, [r4, #8]
	flags = 0;
    36b2:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    36b4:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    36b8:	f002 fa5e 	bl	5b78 <itoa>
		copy(cstr, strlen(cstr));
    36bc:	a801      	add	r0, sp, #4
    36be:	f004 ff3f 	bl	8540 <strlen>
    36c2:	a901      	add	r1, sp, #4
    36c4:	4602      	mov	r2, r0
    36c6:	4620      	mov	r0, r4
    36c8:	f7ff ffa4 	bl	3614 <String::copy(char const*, unsigned int)>
}
    36cc:	4620      	mov	r0, r4
    36ce:	b00a      	add	sp, #40	; 0x28
    36d0:	bd10      	pop	{r4, pc}
    36d2:	bf00      	nop

000036d4 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    36d4:	b510      	push	{r4, lr}
	buffer = NULL;
    36d6:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    36d8:	b08a      	sub	sp, #40	; 0x28
    36da:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    36dc:	4608      	mov	r0, r1
    36de:	a901      	add	r1, sp, #4
	len = 0;
    36e0:	60a3      	str	r3, [r4, #8]
	flags = 0;
    36e2:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    36e4:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    36e8:	f000 fd38 	bl	415c <ultoa>
		copy(cstr, strlen(cstr));
    36ec:	a801      	add	r0, sp, #4
    36ee:	f004 ff27 	bl	8540 <strlen>
    36f2:	a901      	add	r1, sp, #4
    36f4:	4602      	mov	r2, r0
    36f6:	4620      	mov	r0, r4
    36f8:	f7ff ff8c 	bl	3614 <String::copy(char const*, unsigned int)>
}
    36fc:	4620      	mov	r0, r4
    36fe:	b00a      	add	sp, #40	; 0x28
    3700:	bd10      	pop	{r4, pc}
    3702:	bf00      	nop

00003704 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    3704:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    3706:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    3708:	4604      	mov	r4, r0
    370a:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    370c:	1c88      	adds	r0, r1, #2
	len = 0;
    370e:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    3710:	466a      	mov	r2, sp
	flags = 0;
    3712:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    3714:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    3718:	f000 fd52 	bl	41c0 <dtostrf>
	if (cstr) {
    371c:	4605      	mov	r5, r0
    371e:	b148      	cbz	r0, 3734 <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
    3720:	f004 ff0e 	bl	8540 <strlen>
    3724:	4629      	mov	r1, r5
    3726:	4602      	mov	r2, r0
    3728:	4620      	mov	r0, r4
    372a:	f7ff ff73 	bl	3614 <String::copy(char const*, unsigned int)>
}
    372e:	4620      	mov	r0, r4
    3730:	b00b      	add	sp, #44	; 0x2c
    3732:	bd30      	pop	{r4, r5, pc}
		len = 0;
    3734:	60a0      	str	r0, [r4, #8]
}
    3736:	4620      	mov	r0, r4
    3738:	b00b      	add	sp, #44	; 0x2c
    373a:	bd30      	pop	{r4, r5, pc}

0000373c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    373c:	4281      	cmp	r1, r0
    373e:	d003      	beq.n	3748 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    3740:	688a      	ldr	r2, [r1, #8]
    3742:	6809      	ldr	r1, [r1, #0]
    3744:	f7ff bf66 	b.w	3614 <String::copy(char const*, unsigned int)>
}
    3748:	4770      	bx	lr
    374a:	bf00      	nop

0000374c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    374c:	4288      	cmp	r0, r1
{
    374e:	b538      	push	{r3, r4, r5, lr}
    3750:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    3752:	d00e      	beq.n	3772 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    3754:	6800      	ldr	r0, [r0, #0]
    3756:	460c      	mov	r4, r1
    3758:	b108      	cbz	r0, 375e <String::operator=(String&&)+0x12>
    375a:	f002 fa2b 	bl	5bb4 <free>
	len = rhs.len;
    375e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    3760:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    3762:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    3766:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    3768:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    376c:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    3770:	60a3      	str	r3, [r4, #8]
}
    3772:	4628      	mov	r0, r5
    3774:	bd38      	pop	{r3, r4, r5, pc}
    3776:	bf00      	nop

00003778 <String::operator=(char const*)>:
{
    3778:	b538      	push	{r3, r4, r5, lr}
    377a:	4605      	mov	r5, r0
	if (cstr) {
    377c:	460c      	mov	r4, r1
    377e:	b149      	cbz	r1, 3794 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    3780:	4608      	mov	r0, r1
    3782:	f004 fedd 	bl	8540 <strlen>
    3786:	4621      	mov	r1, r4
    3788:	4602      	mov	r2, r0
    378a:	4628      	mov	r0, r5
    378c:	f7ff ff42 	bl	3614 <String::copy(char const*, unsigned int)>
}
    3790:	4628      	mov	r0, r5
    3792:	bd38      	pop	{r3, r4, r5, pc}
    3794:	4628      	mov	r0, r5
		len = 0;
    3796:	60a9      	str	r1, [r5, #8]
}
    3798:	bd38      	pop	{r3, r4, r5, pc}
    379a:	bf00      	nop

0000379c <String::append(char const*, unsigned int)>:
{
    379c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    37a0:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    37a2:	6800      	ldr	r0, [r0, #0]
{
    37a4:	460d      	mov	r5, r1
    37a6:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    37a8:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    37aa:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    37ac:	d809      	bhi.n	37c2 <String::append(char const*, unsigned int)+0x26>
    37ae:	18c2      	adds	r2, r0, r3
    37b0:	4291      	cmp	r1, r2
    37b2:	d206      	bcs.n	37c2 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    37b4:	1a0f      	subs	r7, r1, r0
		self = true;
    37b6:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    37ba:	b936      	cbnz	r6, 37ca <String::append(char const*, unsigned int)+0x2e>
}
    37bc:	4620      	mov	r0, r4
    37be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    37c2:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    37c6:	2e00      	cmp	r6, #0
    37c8:	d0f8      	beq.n	37bc <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    37ca:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    37ce:	6862      	ldr	r2, [r4, #4]
    37d0:	4590      	cmp	r8, r2
    37d2:	d90c      	bls.n	37ee <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    37d4:	f108 0101 	add.w	r1, r8, #1
    37d8:	f002 fcb0 	bl	613c <realloc>
	if (newbuffer) {
    37dc:	2800      	cmp	r0, #0
    37de:	d0ed      	beq.n	37bc <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    37e0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    37e2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    37e6:	b913      	cbnz	r3, 37ee <String::append(char const*, unsigned int)+0x52>
    37e8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    37ea:	6820      	ldr	r0, [r4, #0]
    37ec:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    37ee:	f1b9 0f00 	cmp.w	r9, #0
    37f2:	d108      	bne.n	3806 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    37f4:	4629      	mov	r1, r5
    37f6:	4418      	add	r0, r3
    37f8:	f004 fe40 	bl	847c <strcpy>
}
    37fc:	4620      	mov	r0, r4
	len = newlen;
    37fe:	f8c4 8008 	str.w	r8, [r4, #8]
}
    3802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    3806:	4632      	mov	r2, r6
    3808:	19c1      	adds	r1, r0, r7
    380a:	4418      	add	r0, r3
    380c:	f000 fc08 	bl	4020 <memcpy>
		buffer[newlen] = 0;
    3810:	6823      	ldr	r3, [r4, #0]
    3812:	2200      	movs	r2, #0
    3814:	f803 2008 	strb.w	r2, [r3, r8]
    3818:	e7f0      	b.n	37fc <String::append(char const*, unsigned int)+0x60>
    381a:	bf00      	nop

0000381c <String::append(String const&)>:
	return append(s.buffer, s.len);
    381c:	688a      	ldr	r2, [r1, #8]
    381e:	6809      	ldr	r1, [r1, #0]
    3820:	f7ff bfbc 	b.w	379c <String::append(char const*, unsigned int)>

00003824 <String::append(char const*)>:
{
    3824:	b538      	push	{r3, r4, r5, lr}
    3826:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    3828:	b141      	cbz	r1, 383c <String::append(char const*)+0x18>
    382a:	460c      	mov	r4, r1
    382c:	4608      	mov	r0, r1
    382e:	f004 fe87 	bl	8540 <strlen>
    3832:	4602      	mov	r2, r0
    3834:	4621      	mov	r1, r4
    3836:	4628      	mov	r0, r5
    3838:	f7ff ffb0 	bl	379c <String::append(char const*, unsigned int)>
}
    383c:	4628      	mov	r0, r5
    383e:	bd38      	pop	{r3, r4, r5, pc}

00003840 <String::append(char)>:
{
    3840:	b510      	push	{r4, lr}
    3842:	b082      	sub	sp, #8
	buf[1] = 0;
    3844:	2300      	movs	r3, #0
{
    3846:	4604      	mov	r4, r0
	append(buf, 1);
    3848:	2201      	movs	r2, #1
	buf[0] = c;
    384a:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    384e:	a901      	add	r1, sp, #4
	buf[1] = 0;
    3850:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    3854:	f7ff ffa2 	bl	379c <String::append(char const*, unsigned int)>
}
    3858:	4620      	mov	r0, r4
    385a:	b002      	add	sp, #8
    385c:	bd10      	pop	{r4, pc}
    385e:	bf00      	nop

00003860 <operator+(StringSumHelper const&, String const&)>:
{
    3860:	b510      	push	{r4, lr}
    3862:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    3864:	688a      	ldr	r2, [r1, #8]
    3866:	6809      	ldr	r1, [r1, #0]
    3868:	f7ff ff98 	bl	379c <String::append(char const*, unsigned int)>
}
    386c:	4620      	mov	r0, r4
    386e:	bd10      	pop	{r4, pc}

00003870 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3870:	6882      	ldr	r2, [r0, #8]
{
    3872:	b508      	push	{r3, lr}
    3874:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3876:	b13a      	cbz	r2, 3888 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    3878:	b161      	cbz	r1, 3894 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    387a:	6800      	ldr	r0, [r0, #0]
    387c:	f004 fc94 	bl	81a8 <strcmp>
    3880:	fab0 f080 	clz	r0, r0
    3884:	0940      	lsrs	r0, r0, #5
}
    3886:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3888:	b131      	cbz	r1, 3898 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    388a:	7818      	ldrb	r0, [r3, #0]
    388c:	fab0 f080 	clz	r0, r0
    3890:	0940      	lsrs	r0, r0, #5
}
    3892:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    3894:	6803      	ldr	r3, [r0, #0]
    3896:	e7f8      	b.n	388a <String::equals(char const*) const+0x1a>
    3898:	2001      	movs	r0, #1
}
    389a:	bd08      	pop	{r3, pc}

0000389c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    389c:	b1c2      	cbz	r2, 38d0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    389e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    38a0:	fab1 f681 	clz	r6, r1
    38a4:	460c      	mov	r4, r1
    38a6:	0976      	lsrs	r6, r6, #5
    38a8:	b119      	cbz	r1, 38b2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    38aa:	6885      	ldr	r5, [r0, #8]
    38ac:	429d      	cmp	r5, r3
    38ae:	d801      	bhi.n	38b4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    38b0:	700e      	strb	r6, [r1, #0]
}
    38b2:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    38b4:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    38b6:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    38ba:	6801      	ldr	r1, [r0, #0]
    38bc:	4620      	mov	r0, r4
    38be:	4565      	cmp	r5, ip
    38c0:	4419      	add	r1, r3
    38c2:	bf28      	it	cs
    38c4:	4665      	movcs	r5, ip
    38c6:	462a      	mov	r2, r5
    38c8:	f004 f97c 	bl	7bc4 <strncpy>
	buf[n] = 0;
    38cc:	5566      	strb	r6, [r4, r5]
}
    38ce:	bd70      	pop	{r4, r5, r6, pc}
    38d0:	4770      	bx	lr
    38d2:	bf00      	nop

000038d4 <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    38d4:	6883      	ldr	r3, [r0, #8]
    38d6:	b143      	cbz	r3, 38ea <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    38d8:	6809      	ldr	r1, [r1, #0]
{
    38da:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    38dc:	6804      	ldr	r4, [r0, #0]
    38de:	4620      	mov	r0, r4
    38e0:	f004 fb02 	bl	7ee8 <strstr>
	if (found == NULL) return -1;
    38e4:	b120      	cbz	r0, 38f0 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    38e6:	1b00      	subs	r0, r0, r4
}
    38e8:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    38ea:	f04f 30ff 	mov.w	r0, #4294967295
}
    38ee:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    38f0:	f04f 30ff 	mov.w	r0, #4294967295
}
    38f4:	bd10      	pop	{r4, pc}
    38f6:	bf00      	nop

000038f8 <String::substring(unsigned int) const>:
{
    38f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    38fc:	688f      	ldr	r7, [r1, #8]
{
    38fe:	460e      	mov	r6, r1
    3900:	4604      	mov	r4, r0
	if (left > right) {
    3902:	4297      	cmp	r7, r2
    3904:	d202      	bcs.n	390c <String::substring(unsigned int) const+0x14>
    3906:	4613      	mov	r3, r2
    3908:	463a      	mov	r2, r7
    390a:	461f      	mov	r7, r3
	buffer = NULL;
    390c:	2300      	movs	r3, #0
	len = 0;
    390e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    3910:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    3912:	68b0      	ldr	r0, [r6, #8]
    3914:	4290      	cmp	r0, r2
	capacity = 0;
    3916:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    391a:	d314      	bcc.n	3946 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    391c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    391e:	6831      	ldr	r1, [r6, #0]
    3920:	bf28      	it	cs
    3922:	4607      	movcs	r7, r0
    3924:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    3928:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    392a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    392c:	189d      	adds	r5, r3, r2
    392e:	d00d      	beq.n	394c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    3930:	4628      	mov	r0, r5
    3932:	f004 fe05 	bl	8540 <strlen>
    3936:	4629      	mov	r1, r5
    3938:	4602      	mov	r2, r0
    393a:	4620      	mov	r0, r4
    393c:	f7ff fe6a 	bl	3614 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3940:	6833      	ldr	r3, [r6, #0]
    3942:	f803 8007 	strb.w	r8, [r3, r7]
}
    3946:	4620      	mov	r0, r4
    3948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    394c:	60a5      	str	r5, [r4, #8]
    394e:	e7f8      	b.n	3942 <String::substring(unsigned int) const+0x4a>

00003950 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    3950:	429a      	cmp	r2, r3
{
    3952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3956:	4604      	mov	r4, r0
    3958:	460e      	mov	r6, r1
	if (left > right) {
    395a:	d902      	bls.n	3962 <String::substring(unsigned int, unsigned int) const+0x12>
    395c:	4611      	mov	r1, r2
    395e:	461a      	mov	r2, r3
    3960:	460b      	mov	r3, r1
	buffer = NULL;
    3962:	2000      	movs	r0, #0
	len = 0;
    3964:	60a0      	str	r0, [r4, #8]
	flags = 0;
    3966:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    3968:	68b7      	ldr	r7, [r6, #8]
    396a:	4297      	cmp	r7, r2
	capacity = 0;
    396c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    3970:	d314      	bcc.n	399c <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    3972:	429f      	cmp	r7, r3
    3974:	bf28      	it	cs
    3976:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    3978:	6833      	ldr	r3, [r6, #0]
    397a:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    397e:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    3980:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    3982:	189d      	adds	r5, r3, r2
    3984:	d00d      	beq.n	39a2 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    3986:	4628      	mov	r0, r5
    3988:	f004 fdda 	bl	8540 <strlen>
    398c:	4629      	mov	r1, r5
    398e:	4602      	mov	r2, r0
    3990:	4620      	mov	r0, r4
    3992:	f7ff fe3f 	bl	3614 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3996:	6833      	ldr	r3, [r6, #0]
    3998:	f803 8007 	strb.w	r8, [r3, r7]
}
    399c:	4620      	mov	r0, r4
    399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    39a2:	60a5      	str	r5, [r4, #8]
    39a4:	e7f8      	b.n	3998 <String::substring(unsigned int, unsigned int) const+0x48>
    39a6:	bf00      	nop

000039a8 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    39a8:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    39aa:	6804      	ldr	r4, [r0, #0]
{
    39ac:	4605      	mov	r5, r0
	if (!buffer) return *this;
    39ae:	b144      	cbz	r4, 39c2 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    39b0:	7820      	ldrb	r0, [r4, #0]
    39b2:	b130      	cbz	r0, 39c2 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    39b4:	f003 fe58 	bl	7668 <tolower>
    39b8:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    39ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    39be:	2800      	cmp	r0, #0
    39c0:	d1f8      	bne.n	39b4 <String::toLowerCase()+0xc>
	}
	return *this;
}
    39c2:	4628      	mov	r0, r5
    39c4:	bd38      	pop	{r3, r4, r5, pc}
    39c6:	bf00      	nop

000039c8 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    39c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    39cc:	6807      	ldr	r7, [r0, #0]
{
    39ce:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    39d0:	b1e7      	cbz	r7, 3a0c <String::trim()+0x44>
    39d2:	6884      	ldr	r4, [r0, #8]
    39d4:	b1d4      	cbz	r4, 3a0c <String::trim()+0x44>
    39d6:	46b8      	mov	r8, r7
    39d8:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    39da:	f818 0b01 	ldrb.w	r0, [r8], #1
    39de:	f003 fe3b 	bl	7658 <isspace>
    39e2:	2800      	cmp	r0, #0
    39e4:	d1f8      	bne.n	39d8 <String::trim()+0x10>
	char *end = buffer + len - 1;
    39e6:	3c01      	subs	r4, #1
    39e8:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    39ea:	e002      	b.n	39f2 <String::trim()+0x2a>
    39ec:	42a5      	cmp	r5, r4
    39ee:	d805      	bhi.n	39fc <String::trim()+0x34>
    39f0:	3c01      	subs	r4, #1
    39f2:	7820      	ldrb	r0, [r4, #0]
    39f4:	f003 fe30 	bl	7658 <isspace>
    39f8:	2800      	cmp	r0, #0
    39fa:	d1f7      	bne.n	39ec <String::trim()+0x24>
	len = end + 1 - begin;
    39fc:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    39fe:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    3a00:	eba2 0205 	sub.w	r2, r2, r5
    3a04:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    3a06:	d304      	bcc.n	3a12 <String::trim()+0x4a>
	buffer[len] = 0;
    3a08:	2300      	movs	r3, #0
    3a0a:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    3a0c:	4630      	mov	r0, r6
    3a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    3a12:	4638      	mov	r0, r7
    3a14:	4629      	mov	r1, r5
    3a16:	f000 fb03 	bl	4020 <memcpy>
	buffer[len] = 0;
    3a1a:	6837      	ldr	r7, [r6, #0]
    3a1c:	68b2      	ldr	r2, [r6, #8]
    3a1e:	e7f3      	b.n	3a08 <String::trim()+0x40>

00003a20 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    3a20:	6800      	ldr	r0, [r0, #0]
    3a22:	b108      	cbz	r0, 3a28 <String::toInt() const+0x8>
    3a24:	f002 b8a4 	b.w	5b70 <atol>
	return 0;
}
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop

00003a2c <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    3a2c:	6800      	ldr	r0, [r0, #0]
    3a2e:	b110      	cbz	r0, 3a36 <String::toFloat() const+0xa>
    3a30:	2100      	movs	r1, #0
    3a32:	f003 bcb5 	b.w	73a0 <strtof>
	return 0.0;
}
    3a36:	ed9f 0a01 	vldr	s0, [pc, #4]	; 3a3c <String::toFloat() const+0x10>
    3a3a:	4770      	bx	lr
    3a3c:	00000000 	.word	0x00000000

00003a40 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3a40:	49a2      	ldr	r1, [pc, #648]	; (3ccc <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3a42:	4ba3      	ldr	r3, [pc, #652]	; (3cd0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    3a44:	4288      	cmp	r0, r1
{
    3a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    3a4a:	4ca2      	ldr	r4, [pc, #648]	; (3cd4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3a4c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    3a4e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3a50:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    3a54:	d91b      	bls.n	3a8e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3a56:	4ba0      	ldr	r3, [pc, #640]	; (3cd8 <set_arm_clock+0x298>)
    3a58:	4298      	cmp	r0, r3
    3a5a:	f240 8102 	bls.w	3c62 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3a5e:	1ac3      	subs	r3, r0, r3
    3a60:	499e      	ldr	r1, [pc, #632]	; (3cdc <set_arm_clock+0x29c>)
    3a62:	0a1b      	lsrs	r3, r3, #8
    3a64:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3a68:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3a6c:	09db      	lsrs	r3, r3, #7
    3a6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3a76:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3a7a:	428b      	cmp	r3, r1
    3a7c:	bf28      	it	cs
    3a7e:	460b      	movcs	r3, r1
    3a80:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    3a84:	4b96      	ldr	r3, [pc, #600]	; (3ce0 <set_arm_clock+0x2a0>)
    3a86:	fba3 3707 	umull	r3, r7, r3, r7
    3a8a:	08ff      	lsrs	r7, r7, #3
    3a8c:	e004      	b.n	3a98 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3a8e:	4f95      	ldr	r7, [pc, #596]	; (3ce4 <set_arm_clock+0x2a4>)
    3a90:	42b8      	cmp	r0, r7
    3a92:	bf8c      	ite	hi
    3a94:	270e      	movhi	r7, #14
    3a96:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3a98:	498d      	ldr	r1, [pc, #564]	; (3cd0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3a9a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3a9e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3aa2:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3aa4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3aa8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3aac:	d20c      	bcs.n	3ac8 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3aae:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3ab2:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3ab6:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3aba:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3abe:	680b      	ldr	r3, [r1, #0]
    3ac0:	2b00      	cmp	r3, #0
    3ac2:	dafc      	bge.n	3abe <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3ac4:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3ac8:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3acc:	d124      	bne.n	3b18 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3ace:	4986      	ldr	r1, [pc, #536]	; (3ce8 <set_arm_clock+0x2a8>)
    3ad0:	690c      	ldr	r4, [r1, #16]
    3ad2:	4986      	ldr	r1, [pc, #536]	; (3cec <set_arm_clock+0x2ac>)
    3ad4:	43a1      	bics	r1, r4
    3ad6:	f000 80ea 	beq.w	3cae <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3ada:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3ade:	4634      	mov	r4, r6
    3ae0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3ae4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3ae8:	d004      	beq.n	3af4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3aea:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3aee:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3af0:	4b77      	ldr	r3, [pc, #476]	; (3cd0 <set_arm_clock+0x290>)
    3af2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3af4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3af8:	d007      	beq.n	3b0a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3afa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3afe:	4974      	ldr	r1, [pc, #464]	; (3cd0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3b00:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    3b02:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3b04:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3b06:	071a      	lsls	r2, r3, #28
    3b08:	d4fc      	bmi.n	3b04 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3b0a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3b0e:	4a70      	ldr	r2, [pc, #448]	; (3cd0 <set_arm_clock+0x290>)
    3b10:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3b12:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3b14:	069b      	lsls	r3, r3, #26
    3b16:	d4fc      	bmi.n	3b12 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3b18:	4c75      	ldr	r4, [pc, #468]	; (3cf0 <set_arm_clock+0x2b0>)
    3b1a:	42a0      	cmp	r0, r4
    3b1c:	f200 80ce 	bhi.w	3cbc <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3b20:	f04f 0c01 	mov.w	ip, #1
    3b24:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    3b26:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3b28:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3b2c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3b30:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b34:	42a2      	cmp	r2, r4
    3b36:	d818      	bhi.n	3b6a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3b38:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3b3c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3b40:	f040 808d 	bne.w	3c5e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    3b44:	f1bc 0f04 	cmp.w	ip, #4
    3b48:	f200 8091 	bhi.w	3c6e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3b4c:	180a      	adds	r2, r1, r0
    3b4e:	42a2      	cmp	r2, r4
    3b50:	f200 80a4 	bhi.w	3c9c <set_arm_clock+0x25c>
    3b54:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3b58:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3b5a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b5e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    3b62:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3b66:	42a2      	cmp	r2, r4
    3b68:	d9e6      	bls.n	3b38 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3b6a:	f10c 31ff 	add.w	r1, ip, #4294967295
    3b6e:	028c      	lsls	r4, r1, #10
    3b70:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3b74:	485f      	ldr	r0, [pc, #380]	; (3cf4 <set_arm_clock+0x2b4>)
    3b76:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3b78:	4a5f      	ldr	r2, [pc, #380]	; (3cf8 <set_arm_clock+0x2b8>)
    3b7a:	4290      	cmp	r0, r2
    3b7c:	d97f      	bls.n	3c7e <set_arm_clock+0x23e>
    3b7e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3d24 <set_arm_clock+0x2e4>
    3b82:	226c      	movs	r2, #108	; 0x6c
    3b84:	485d      	ldr	r0, [pc, #372]	; (3cfc <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3b86:	4d58      	ldr	r5, [pc, #352]	; (3ce8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3b88:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3b8c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3b90:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3b94:	f8df c190 	ldr.w	ip, [pc, #400]	; 3d28 <set_arm_clock+0x2e8>
    3b98:	ea0e 0c0c 	and.w	ip, lr, ip
    3b9c:	45d4      	cmp	ip, sl
    3b9e:	d009      	beq.n	3bb4 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3ba4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3ba8:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3bac:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3bae:	682a      	ldr	r2, [r5, #0]
    3bb0:	2a00      	cmp	r2, #0
    3bb2:	dafc      	bge.n	3bae <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3bb4:	4a46      	ldr	r2, [pc, #280]	; (3cd0 <set_arm_clock+0x290>)
    3bb6:	6915      	ldr	r5, [r2, #16]
    3bb8:	f005 0507 	and.w	r5, r5, #7
    3bbc:	429d      	cmp	r5, r3
    3bbe:	d003      	beq.n	3bc8 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3bc0:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3bc2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bc4:	03dd      	lsls	r5, r3, #15
    3bc6:	d4fc      	bmi.n	3bc2 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3bc8:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3bcc:	d009      	beq.n	3be2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3bce:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3bd2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    3bd6:	4a3e      	ldr	r2, [pc, #248]	; (3cd0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3bd8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3bda:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3bdc:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bde:	0799      	lsls	r1, r3, #30
    3be0:	d4fc      	bmi.n	3bdc <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3be2:	4947      	ldr	r1, [pc, #284]	; (3d00 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3be4:	4a47      	ldr	r2, [pc, #284]	; (3d04 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3be6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3be8:	4291      	cmp	r1, r2
    3bea:	d83c      	bhi.n	3c66 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3bec:	4b46      	ldr	r3, [pc, #280]	; (3d08 <set_arm_clock+0x2c8>)
    3bee:	09c9      	lsrs	r1, r1, #7
    3bf0:	fba3 3101 	umull	r3, r1, r3, r1
    3bf4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3bf6:	1e4b      	subs	r3, r1, #1
    3bf8:	021b      	lsls	r3, r3, #8
    3bfa:	ea86 0203 	eor.w	r2, r6, r3
    3bfe:	f412 7f40 	tst.w	r2, #768	; 0x300
    3c02:	d006      	beq.n	3c12 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3c04:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3c0c:	4a30      	ldr	r2, [pc, #192]	; (3cd0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3c0e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3c10:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3c12:	4a2f      	ldr	r2, [pc, #188]	; (3cd0 <set_arm_clock+0x290>)
    3c14:	6953      	ldr	r3, [r2, #20]
    3c16:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3c1a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3c1c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3c1e:	069b      	lsls	r3, r3, #26
    3c20:	d4fc      	bmi.n	3c1c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c22:	4b3a      	ldr	r3, [pc, #232]	; (3d0c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3c24:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c26:	fba3 2300 	umull	r2, r3, r3, r0
    3c2a:	f04f 32ff 	mov.w	r2, #4294967295
    3c2e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    3c32:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c36:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3c3a:	4a35      	ldr	r2, [pc, #212]	; (3d10 <set_arm_clock+0x2d0>)
    3c3c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3c3e:	4a35      	ldr	r2, [pc, #212]	; (3d14 <set_arm_clock+0x2d4>)
    3c40:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3c42:	4a35      	ldr	r2, [pc, #212]	; (3d18 <set_arm_clock+0x2d8>)
    3c44:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3c46:	d208      	bcs.n	3c5a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3c48:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3c4c:	4a21      	ldr	r2, [pc, #132]	; (3cd4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3c4e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    3c52:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3c54:	6813      	ldr	r3, [r2, #0]
    3c56:	2b00      	cmp	r3, #0
    3c58:	dafc      	bge.n	3c54 <set_arm_clock+0x214>
	}

	return frequency;
}
    3c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c5e:	4673      	mov	r3, lr
    3c60:	e762      	b.n	3b28 <set_arm_clock+0xe8>
    3c62:	2712      	movs	r7, #18
    3c64:	e718      	b.n	3a98 <set_arm_clock+0x58>
    3c66:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3c6a:	2104      	movs	r1, #4
    3c6c:	e7c5      	b.n	3bfa <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c6e:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c72:	4820      	ldr	r0, [pc, #128]	; (3cf4 <set_arm_clock+0x2b4>)
    3c74:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c76:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c78:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c7a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c7e:	4a27      	ldr	r2, [pc, #156]	; (3d1c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3c80:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3d2c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c84:	fba2 2000 	umull	r2, r0, r2, r0
    3c88:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3c8a:	4825      	ldr	r0, [pc, #148]	; (3d20 <set_arm_clock+0x2e0>)
    3c8c:	2a36      	cmp	r2, #54	; 0x36
    3c8e:	bf38      	it	cc
    3c90:	2236      	movcc	r2, #54	; 0x36
    3c92:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3c96:	ea42 0a0a 	orr.w	sl, r2, sl
    3c9a:	e774      	b.n	3b86 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c9c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3ca0:	2300      	movs	r3, #0
    3ca2:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    3ca6:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3caa:	46ac      	mov	ip, r5
    3cac:	e762      	b.n	3b74 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3cae:	461d      	mov	r5, r3
    3cb0:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3cb4:	4611      	mov	r1, r2
    3cb6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3cba:	e713      	b.n	3ae4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3cbc:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3cbe:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3cc2:	4602      	mov	r2, r0
    3cc4:	4631      	mov	r1, r6
    3cc6:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3cc8:	46e6      	mov	lr, ip
    3cca:	e753      	b.n	3b74 <set_arm_clock+0x134>
    3ccc:	1f78a400 	.word	0x1f78a400
    3cd0:	400fc000 	.word	0x400fc000
    3cd4:	40080000 	.word	0x40080000
    3cd8:	23c34600 	.word	0x23c34600
    3cdc:	004cb223 	.word	0x004cb223
    3ce0:	51eb851f 	.word	0x51eb851f
    3ce4:	016e3600 	.word	0x016e3600
    3ce8:	400d8000 	.word	0x400d8000
    3cec:	80003040 	.word	0x80003040
    3cf0:	269fb1ff 	.word	0x269fb1ff
    3cf4:	005b8d80 	.word	0x005b8d80
    3cf8:	4df67eff 	.word	0x4df67eff
    3cfc:	4d3f6400 	.word	0x4d3f6400
    3d00:	08f0d17f 	.word	0x08f0d17f
    3d04:	2cb4177f 	.word	0x2cb4177f
    3d08:	00e5109f 	.word	0x00e5109f
    3d0c:	431bde83 	.word	0x431bde83
    3d10:	200012b4 	.word	0x200012b4
    3d14:	200012b0 	.word	0x200012b0
    3d18:	20003dbc 	.word	0x20003dbc
    3d1c:	165e9f81 	.word	0x165e9f81
    3d20:	00b71b00 	.word	0x00b71b00
    3d24:	8000206c 	.word	0x8000206c
    3d28:	8001307f 	.word	0x8001307f
    3d2c:	80002000 	.word	0x80002000

00003d30 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3d30:	b900      	cbnz	r0, 3d34 <delay+0x4>
    3d32:	4770      	bx	lr
{
    3d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3d38:	2101      	movs	r1, #1
    3d3a:	4681      	mov	r9, r0
    3d3c:	4c21      	ldr	r4, [pc, #132]	; (3dc4 <delay+0x94>)
    3d3e:	4d22      	ldr	r5, [pc, #136]	; (3dc8 <delay+0x98>)
    3d40:	4e22      	ldr	r6, [pc, #136]	; (3dcc <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3d42:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3d46:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3d48:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3d4a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d1f7      	bne.n	3d42 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3d52:	491f      	ldr	r1, [pc, #124]	; (3dd0 <delay+0xa0>)
    3d54:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3d56:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3d5a:	f8df a078 	ldr.w	sl, [pc, #120]	; 3dd4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    3d5e:	1a1b      	subs	r3, r3, r0
    3d60:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    3d62:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3d66:	f8da 2000 	ldr.w	r2, [sl]
    3d6a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    3d6e:	455a      	cmp	r2, fp
    3d70:	bf94      	ite	ls
    3d72:	4490      	addls	r8, r2
    3d74:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3d76:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3d7a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3d7c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3d7e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3d82:	2b00      	cmp	r3, #0
    3d84:	d1f7      	bne.n	3d76 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3d86:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3d88:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3d8c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3d8e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3d92:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    3d96:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    3d9a:	bf94      	ite	ls
    3d9c:	4462      	addls	r2, ip
    3d9e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    3da2:	eba2 0208 	sub.w	r2, r2, r8
    3da6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    3daa:	d306      	bcc.n	3dba <delay+0x8a>
			if (--msec == 0) return;
    3dac:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3db0:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3db4:	d1df      	bne.n	3d76 <delay+0x46>
}
    3db6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    3dba:	f001 fddf 	bl	597c <yield>
		while ((micros() - start) >= 1000) {
    3dbe:	4904      	ldr	r1, [pc, #16]	; (3dd0 <delay+0xa0>)
    3dc0:	e7d9      	b.n	3d76 <delay+0x46>
    3dc2:	bf00      	nop
    3dc4:	20003dc8 	.word	0x20003dc8
    3dc8:	20003dc4 	.word	0x20003dc4
    3dcc:	20003dc0 	.word	0x20003dc0
    3dd0:	e0001000 	.word	0xe0001000
    3dd4:	20003dbc 	.word	0x20003dbc

00003dd8 <micros>:
{
    3dd8:	b430      	push	{r4, r5}
    3dda:	4b0f      	ldr	r3, [pc, #60]	; (3e18 <micros+0x40>)
    3ddc:	f04f 0c01 	mov.w	ip, #1
    3de0:	4d0e      	ldr	r5, [pc, #56]	; (3e1c <micros+0x44>)
    3de2:	4c0f      	ldr	r4, [pc, #60]	; (3e20 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3de4:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    3de8:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    3dea:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3dec:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    3df0:	2a00      	cmp	r2, #0
    3df2:	d1f7      	bne.n	3de4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3df4:	4b0b      	ldr	r3, [pc, #44]	; (3e24 <micros+0x4c>)
    3df6:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3df8:	4a0b      	ldr	r2, [pc, #44]	; (3e28 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    3dfa:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    3dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e00:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    3e02:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e06:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    3e0a:	bc30      	pop	{r4, r5}
    3e0c:	428a      	cmp	r2, r1
    3e0e:	bf94      	ite	ls
    3e10:	1880      	addls	r0, r0, r2
    3e12:	1840      	addhi	r0, r0, r1
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
    3e18:	20003dc8 	.word	0x20003dc8
    3e1c:	20003dc4 	.word	0x20003dc4
    3e20:	20003dc0 	.word	0x20003dc0
    3e24:	e0001000 	.word	0xe0001000
    3e28:	20003dbc 	.word	0x20003dbc

00003e2c <digitalWrite>:
    3e2c:	2836      	cmp	r0, #54	; 0x36
    3e2e:	d816      	bhi.n	3e5e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3e30:	0102      	lsls	r2, r0, #4
    3e32:	4b10      	ldr	r3, [pc, #64]	; (3e74 <digitalWrite+0x48>)
    3e34:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3e38:	589b      	ldr	r3, [r3, r2]
{
    3e3a:	b410      	push	{r4}
	mask = p->mask;
    3e3c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    3e3e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3e40:	4214      	tst	r4, r2
    3e42:	d005      	beq.n	3e50 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    3e44:	b961      	cbnz	r1, 3e60 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3e46:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    3e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    3e4e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3e50:	6883      	ldr	r3, [r0, #8]
		if (val) {
    3e52:	b151      	cbz	r1, 3e6a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3e54:	4a08      	ldr	r2, [pc, #32]	; (3e78 <digitalWrite+0x4c>)
}
    3e56:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3e5a:	601a      	str	r2, [r3, #0]
}
    3e5c:	4770      	bx	lr
    3e5e:	4770      	bx	lr
    3e60:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    3e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3e68:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3e6a:	4a04      	ldr	r2, [pc, #16]	; (3e7c <digitalWrite+0x50>)
}
    3e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3e70:	601a      	str	r2, [r3, #0]
}
    3e72:	4770      	bx	lr
    3e74:	20000c5c 	.word	0x20000c5c
    3e78:	0001f038 	.word	0x0001f038
    3e7c:	00013038 	.word	0x00013038

00003e80 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    3e80:	2836      	cmp	r0, #54	; 0x36
    3e82:	d80b      	bhi.n	3e9c <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    3e84:	4b06      	ldr	r3, [pc, #24]	; (3ea0 <digitalRead+0x20>)
    3e86:	0102      	lsls	r2, r0, #4
    3e88:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    3e8c:	589a      	ldr	r2, [r3, r2]
    3e8e:	68c3      	ldr	r3, [r0, #12]
    3e90:	6892      	ldr	r2, [r2, #8]
    3e92:	421a      	tst	r2, r3
    3e94:	bf14      	ite	ne
    3e96:	2001      	movne	r0, #1
    3e98:	2000      	moveq	r0, #0
    3e9a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3e9c:	2000      	movs	r0, #0
}
    3e9e:	4770      	bx	lr
    3ea0:	20000c5c 	.word	0x20000c5c

00003ea4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3ea4:	2836      	cmp	r0, #54	; 0x36
    3ea6:	d829      	bhi.n	3efc <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    3ea8:	4b16      	ldr	r3, [pc, #88]	; (3f04 <pinMode+0x60>)
    3eaa:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3eac:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    3eae:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3eb2:	589a      	ldr	r2, [r3, r2]
{
    3eb4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3eb6:	6853      	ldr	r3, [r2, #4]
    3eb8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3eba:	d00e      	beq.n	3eda <pinMode+0x36>
    3ebc:	2904      	cmp	r1, #4
    3ebe:	d00c      	beq.n	3eda <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3ec0:	ea23 0304 	bic.w	r3, r3, r4
    3ec4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3ec6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    3ec8:	b1a9      	cbz	r1, 3ef6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    3eca:	2902      	cmp	r1, #2
    3ecc:	d017      	beq.n	3efe <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3ece:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3ed0:	bf0c      	ite	eq
    3ed2:	4a0d      	ldreq	r2, [pc, #52]	; (3f08 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3ed4:	4a0d      	ldrne	r2, [pc, #52]	; (3f0c <pinMode+0x68>)
    3ed6:	601a      	str	r2, [r3, #0]
    3ed8:	e007      	b.n	3eea <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3eda:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    3edc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3ede:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3ee0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    3ee2:	d008      	beq.n	3ef6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3ee4:	f640 0238 	movw	r2, #2104	; 0x838
    3ee8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3eea:	6843      	ldr	r3, [r0, #4]
    3eec:	2215      	movs	r2, #21
}
    3eee:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    3ef2:	601a      	str	r2, [r3, #0]
}
    3ef4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3ef6:	2238      	movs	r2, #56	; 0x38
    3ef8:	601a      	str	r2, [r3, #0]
    3efa:	e7f6      	b.n	3eea <pinMode+0x46>
    3efc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3efe:	4a04      	ldr	r2, [pc, #16]	; (3f10 <pinMode+0x6c>)
    3f00:	601a      	str	r2, [r3, #0]
    3f02:	e7f2      	b.n	3eea <pinMode+0x46>
    3f04:	20000c5c 	.word	0x20000c5c
    3f08:	00013038 	.word	0x00013038
    3f0c:	00010038 	.word	0x00010038
    3f10:	0001f038 	.word	0x0001f038

00003f14 <dummy_isr>:
static void dummy_isr() {};
    3f14:	4770      	bx	lr
    3f16:	bf00      	nop

00003f18 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3f18:	2836      	cmp	r0, #54	; 0x36
    3f1a:	d852      	bhi.n	3fc2 <attachInterrupt+0xaa>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    3f1c:	0100      	lsls	r0, r0, #4
{
    3f1e:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    3f20:	4c31      	ldr	r4, [pc, #196]	; (3fe8 <attachInterrupt+0xd0>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    3f22:	4d32      	ldr	r5, [pc, #200]	; (3fec <attachInterrupt+0xd4>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    3f24:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    3f26:	42ab      	cmp	r3, r5
    3f28:	d050      	beq.n	3fcc <attachInterrupt+0xb4>
    3f2a:	d843      	bhi.n	3fb4 <attachInterrupt+0x9c>
    3f2c:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    3f30:	d045      	beq.n	3fbe <attachInterrupt+0xa6>
    3f32:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    3f36:	42ab      	cmp	r3, r5
    3f38:	d13a      	bne.n	3fb0 <attachInterrupt+0x98>
    3f3a:	4d2d      	ldr	r5, [pc, #180]	; (3ff0 <attachInterrupt+0xd8>)
	volatile uint32_t *mux = portConfigRegister(pin);
    3f3c:	4404      	add	r4, r0
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    3f3e:	4e2d      	ldr	r6, [pc, #180]	; (3ff4 <attachInterrupt+0xdc>)
    3f40:	482d      	ldr	r0, [pc, #180]	; (3ff8 <attachInterrupt+0xe0>)
    3f42:	6867      	ldr	r7, [r4, #4]
    3f44:	f8c0 62b4 	str.w	r6, [r0, #692]	; 0x2b4
	uint32_t mask = digitalPinToBitMask(pin);
    3f48:	68e0      	ldr	r0, [r4, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    3f4a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3f4e:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
    3f52:	2a04      	cmp	r2, #4
    3f54:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    3f58:	d82a      	bhi.n	3fb0 <attachInterrupt+0x98>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3f5a:	695c      	ldr	r4, [r3, #20]
    3f5c:	ea24 0400 	bic.w	r4, r4, r0
    3f60:	615c      	str	r4, [r3, #20]
	*mux = 5;		// pin is GPIO
    3f62:	f04f 0405 	mov.w	r4, #5
    3f66:	603c      	str	r4, [r7, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    3f68:	685c      	ldr	r4, [r3, #4]
    3f6a:	ea24 0400 	bic.w	r4, r4, r0
    3f6e:	605c      	str	r4, [r3, #4]
    3f70:	4c22      	ldr	r4, [pc, #136]	; (3ffc <attachInterrupt+0xe4>)
    3f72:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    3f76:	fa90 f2a0 	rbit	r2, r0
    3f7a:	fab2 f282 	clz	r2, r2
	table[index] = function;
    3f7e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3f82:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    3f86:	d01d      	beq.n	3fc4 <attachInterrupt+0xac>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    3f88:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    3f8a:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    3f8c:	ea01 0105 	and.w	r1, r1, r5
    3f90:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    3f92:	dc1d      	bgt.n	3fd0 <attachInterrupt+0xb8>
			uint32_t shift = index * 2;
    3f94:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    3f96:	2503      	movs	r5, #3
    3f98:	68d9      	ldr	r1, [r3, #12]
    3f9a:	4094      	lsls	r4, r2
    3f9c:	fa05 f202 	lsl.w	r2, r5, r2
    3fa0:	ea21 0202 	bic.w	r2, r1, r2
    3fa4:	4322      	orrs	r2, r4
    3fa6:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    3fa8:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    3faa:	695a      	ldr	r2, [r3, #20]
    3fac:	4302      	orrs	r2, r0
    3fae:	615a      	str	r2, [r3, #20]
}
    3fb0:	bcf0      	pop	{r4, r5, r6, r7}
    3fb2:	4770      	bx	lr
	switch((uint32_t)gpio) {
    3fb4:	4d12      	ldr	r5, [pc, #72]	; (4000 <attachInterrupt+0xe8>)
    3fb6:	42ab      	cmp	r3, r5
    3fb8:	d1fa      	bne.n	3fb0 <attachInterrupt+0x98>
			table = isr_table_gpio4;
    3fba:	4d12      	ldr	r5, [pc, #72]	; (4004 <attachInterrupt+0xec>)
    3fbc:	e7be      	b.n	3f3c <attachInterrupt+0x24>
			table = isr_table_gpio1;
    3fbe:	4d12      	ldr	r5, [pc, #72]	; (4008 <attachInterrupt+0xf0>)
    3fc0:	e7bc      	b.n	3f3c <attachInterrupt+0x24>
    3fc2:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    3fc4:	69da      	ldr	r2, [r3, #28]
    3fc6:	4302      	orrs	r2, r0
    3fc8:	61da      	str	r2, [r3, #28]
    3fca:	e7ed      	b.n	3fa8 <attachInterrupt+0x90>
			table = isr_table_gpio3;
    3fcc:	4d0f      	ldr	r5, [pc, #60]	; (400c <attachInterrupt+0xf4>)
    3fce:	e7b5      	b.n	3f3c <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    3fd0:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3fd2:	2503      	movs	r5, #3
    3fd4:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    3fd6:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3fd8:	4094      	lsls	r4, r2
    3fda:	fa05 f202 	lsl.w	r2, r5, r2
    3fde:	ea21 0202 	bic.w	r2, r1, r2
    3fe2:	4322      	orrs	r2, r4
    3fe4:	611a      	str	r2, [r3, #16]
    3fe6:	e7df      	b.n	3fa8 <attachInterrupt+0x90>
    3fe8:	20000c5c 	.word	0x20000c5c
    3fec:	42008000 	.word	0x42008000
    3ff0:	20001bb4 	.word	0x20001bb4
    3ff4:	00000021 	.word	0x00000021
    3ff8:	20002000 	.word	0x20002000
    3ffc:	20000398 	.word	0x20000398
    4000:	4200c000 	.word	0x4200c000
    4004:	20001cb4 	.word	0x20001cb4
    4008:	20001b34 	.word	0x20001b34
    400c:	20001c34 	.word	0x20001c34

00004010 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    4010:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    4012:	f7fc f9ed 	bl	3f0 <setup>
	while (1) {
		loop();
    4016:	f7fc ff0f 	bl	e38 <loop>
		yield();
    401a:	f001 fcaf 	bl	597c <yield>
	while (1) {
    401e:	e7fa      	b.n	4016 <main+0x6>

00004020 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    4020:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    4022:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    4026:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    402a:	d16d      	bne.n	4108 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    402c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    402e:	d341      	bcc.n	40b4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4030:	f851 3b04 	ldr.w	r3, [r1], #4
    4034:	f840 3b04 	str.w	r3, [r0], #4
    4038:	f851 3b04 	ldr.w	r3, [r1], #4
    403c:	f840 3b04 	str.w	r3, [r0], #4
    4040:	f851 3b04 	ldr.w	r3, [r1], #4
    4044:	f840 3b04 	str.w	r3, [r0], #4
    4048:	f851 3b04 	ldr.w	r3, [r1], #4
    404c:	f840 3b04 	str.w	r3, [r0], #4
    4050:	f851 3b04 	ldr.w	r3, [r1], #4
    4054:	f840 3b04 	str.w	r3, [r0], #4
    4058:	f851 3b04 	ldr.w	r3, [r1], #4
    405c:	f840 3b04 	str.w	r3, [r0], #4
    4060:	f851 3b04 	ldr.w	r3, [r1], #4
    4064:	f840 3b04 	str.w	r3, [r0], #4
    4068:	f851 3b04 	ldr.w	r3, [r1], #4
    406c:	f840 3b04 	str.w	r3, [r0], #4
    4070:	f851 3b04 	ldr.w	r3, [r1], #4
    4074:	f840 3b04 	str.w	r3, [r0], #4
    4078:	f851 3b04 	ldr.w	r3, [r1], #4
    407c:	f840 3b04 	str.w	r3, [r0], #4
    4080:	f851 3b04 	ldr.w	r3, [r1], #4
    4084:	f840 3b04 	str.w	r3, [r0], #4
    4088:	f851 3b04 	ldr.w	r3, [r1], #4
    408c:	f840 3b04 	str.w	r3, [r0], #4
    4090:	f851 3b04 	ldr.w	r3, [r1], #4
    4094:	f840 3b04 	str.w	r3, [r0], #4
    4098:	f851 3b04 	ldr.w	r3, [r1], #4
    409c:	f840 3b04 	str.w	r3, [r0], #4
    40a0:	f851 3b04 	ldr.w	r3, [r1], #4
    40a4:	f840 3b04 	str.w	r3, [r0], #4
    40a8:	f851 3b04 	ldr.w	r3, [r1], #4
    40ac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    40b0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    40b2:	d2bd      	bcs.n	4030 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    40b4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    40b6:	d311      	bcc.n	40dc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    40b8:	f851 3b04 	ldr.w	r3, [r1], #4
    40bc:	f840 3b04 	str.w	r3, [r0], #4
    40c0:	f851 3b04 	ldr.w	r3, [r1], #4
    40c4:	f840 3b04 	str.w	r3, [r0], #4
    40c8:	f851 3b04 	ldr.w	r3, [r1], #4
    40cc:	f840 3b04 	str.w	r3, [r0], #4
    40d0:	f851 3b04 	ldr.w	r3, [r1], #4
    40d4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    40d8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    40da:	d2ed      	bcs.n	40b8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    40dc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    40de:	d305      	bcc.n	40ec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    40e0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    40e4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    40e8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    40ea:	d2f9      	bcs.n	40e0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    40ec:	3204      	adds	r2, #4
	beq	.Ldone
    40ee:	d008      	beq.n	4102 <memcpy+0xe2>

	lsls	r2, r2, #31
    40f0:	07d2      	lsls	r2, r2, #31
	itt ne
    40f2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    40f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    40f8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    40fc:	d301      	bcc.n	4102 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    40fe:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4100:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4102:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4104:	4770      	bx	lr
    4106:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    4108:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    410a:	d313      	bcc.n	4134 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    410c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    410e:	d08d      	beq.n	402c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    4110:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    4114:	d08a      	beq.n	402c <memcpy+0xc>

	rsb	r3, #4
    4116:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    411a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    411c:	07db      	lsls	r3, r3, #31
	itt ne
    411e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    4120:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4124:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    4128:	d380      	bcc.n	402c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    412a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    412e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    4132:	e77b      	b.n	402c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    4134:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    4136:	d3d9      	bcc.n	40ec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    4138:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    413a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    413e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    4142:	d2f9      	bcs.n	4138 <memcpy+0x118>

	ldrb	r3, [r1]
    4144:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    4146:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    4148:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    414a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    414c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    414e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    4150:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    4152:	4770      	bx	lr

00004154 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    4154:	f001 bd26 	b.w	5ba4 <malloc>

00004158 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    4158:	f001 bd2c 	b.w	5bb4 <free>

0000415c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    415c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    4160:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    4162:	4666      	mov	r6, ip
	int i=0, j;
    4164:	2400      	movs	r4, #0
    4166:	e000      	b.n	416a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4168:	3401      	adds	r4, #1
		digit = val % radix;
    416a:	fbb0 f5f2 	udiv	r5, r0, r2
    416e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4172:	2b09      	cmp	r3, #9
    4174:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    4178:	f103 0330 	add.w	r3, r3, #48	; 0x30
    417c:	fa5f fe8e 	uxtb.w	lr, lr
    4180:	bf98      	it	ls
    4182:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    4186:	4290      	cmp	r0, r2
		val /= radix;
    4188:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    418a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    418e:	d2eb      	bcs.n	4168 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    4190:	1c63      	adds	r3, r4, #1
    4192:	2200      	movs	r2, #0
    4194:	18c8      	adds	r0, r1, r3
    4196:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    4198:	b17c      	cbz	r4, 41ba <ultoa+0x5e>
		t = buf[j];
    419a:	4662      	mov	r2, ip
    419c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    41a0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    41a4:	eba1 030c 	sub.w	r3, r1, ip
    41a8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    41aa:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    41ae:	3b01      	subs	r3, #1
    41b0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    41b2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    41b4:	4423      	add	r3, r4
    41b6:	429a      	cmp	r2, r3
    41b8:	dbef      	blt.n	419a <ultoa+0x3e>
	}
	return buf;
}
    41ba:	4608      	mov	r0, r1
    41bc:	bd70      	pop	{r4, r5, r6, pc}
    41be:	bf00      	nop

000041c0 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    41c0:	eeb4 0a40 	vcmp.f32	s0, s0
{
    41c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    41c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    41cc:	4616      	mov	r6, r2
	int awidth = abs(width);
    41ce:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    41d2:	4607      	mov	r7, r0
    41d4:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    41d8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    41dc:	eeb0 8a40 	vmov.f32	s16, s0
    41e0:	b085      	sub	sp, #20
	if (isnanf(val)) {
    41e2:	f180 8148 	bvs.w	4476 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    41e6:	eef0 7ac0 	vabs.f32	s15, s0
    41ea:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 4500 <dtostrf+0x340>
    41ee:	eef4 7a47 	vcmp.f32	s15, s14
    41f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41f6:	dd29      	ble.n	424c <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    41f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    41fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4200:	f100 80ed 	bmi.w	43de <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    4204:	2a03      	cmp	r2, #3
    4206:	f340 8091 	ble.w	432c <dtostrf+0x16c>
    420a:	2303      	movs	r3, #3
		if (width<0) {
    420c:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    420e:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    4212:	f2c0 8085 	blt.w	4320 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    4216:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    421a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    421e:	f100 816a 	bmi.w	44f6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    4222:	2149      	movs	r1, #73	; 0x49
    4224:	234e      	movs	r3, #78	; 0x4e
    4226:	2046      	movs	r0, #70	; 0x46
    4228:	1cf4      	adds	r4, r6, #3
    422a:	7031      	strb	r1, [r6, #0]
    422c:	70b0      	strb	r0, [r6, #2]
    422e:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    4230:	b122      	cbz	r2, 423c <dtostrf+0x7c>
			*buf++ = ' ';
    4232:	4620      	mov	r0, r4
    4234:	2120      	movs	r1, #32
    4236:	4414      	add	r4, r2
    4238:	f003 fbc6 	bl	79c8 <memset>
			awidth--;
		}
		*buf = 0;
    423c:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    423e:	4620      	mov	r0, r4
		*buf = 0;
    4240:	7023      	strb	r3, [r4, #0]
}
    4242:	b005      	add	sp, #20
    4244:	ecbd 8b02 	vpop	{d8}
    4248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    424c:	4689      	mov	r9, r1
    424e:	460d      	mov	r5, r1
    4250:	aa02      	add	r2, sp, #8
    4252:	a901      	add	r1, sp, #4
    4254:	4648      	mov	r0, r9
    4256:	f003 f9f9 	bl	764c <fcvtf>
	if (precision == 0 && decpt == 0) {
    425a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    425e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    4260:	ea59 030a 	orrs.w	r3, r9, sl
    4264:	d172      	bne.n	434c <dtostrf+0x18c>
		decpt++;
    4266:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    4268:	7802      	ldrb	r2, [r0, #0]
    426a:	4ca6      	ldr	r4, [pc, #664]	; (4504 <dtostrf+0x344>)
		decpt++;
    426c:	469a      	mov	sl, r3
    426e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    4270:	4ba5      	ldr	r3, [pc, #660]	; (4508 <dtostrf+0x348>)
		decpt++;
    4272:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    4274:	2a34      	cmp	r2, #52	; 0x34
    4276:	bf88      	it	hi
    4278:	461c      	movhi	r4, r3
	if (sign) reqd++;
    427a:	9b02      	ldr	r3, [sp, #8]
    427c:	2b00      	cmp	r3, #0
    427e:	d07d      	beq.n	437c <dtostrf+0x1bc>
    4280:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    4284:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    4288:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    428c:	f1bb 0f00 	cmp.w	fp, #0
    4290:	f340 80a1 	ble.w	43d6 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    4294:	465a      	mov	r2, fp
    4296:	2120      	movs	r1, #32
    4298:	4630      	mov	r0, r6
		e += pad;
    429a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    429c:	f003 fb94 	bl	79c8 <memset>
    42a0:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    42a4:	222d      	movs	r2, #45	; 0x2d
    42a6:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    42aa:	f1ba 0f00 	cmp.w	sl, #0
    42ae:	d177      	bne.n	43a0 <dtostrf+0x1e0>
    42b0:	f1b9 0f00 	cmp.w	r9, #0
    42b4:	d006      	beq.n	42c4 <dtostrf+0x104>
		*p++ = '0';
    42b6:	461a      	mov	r2, r3
    42b8:	2130      	movs	r1, #48	; 0x30
    42ba:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    42be:	212e      	movs	r1, #46	; 0x2e
    42c0:	7059      	strb	r1, [r3, #1]
    42c2:	4613      	mov	r3, r2
	while (p < e) {
    42c4:	42ab      	cmp	r3, r5
    42c6:	d21f      	bcs.n	4308 <dtostrf+0x148>
		*p++ = *s++;
    42c8:	46a4      	mov	ip, r4
    42ca:	4619      	mov	r1, r3
    42cc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    42d0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    42d4:	42a9      	cmp	r1, r5
    42d6:	d018      	beq.n	430a <dtostrf+0x14a>
    42d8:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    42da:	202e      	movs	r0, #46	; 0x2e
    42dc:	3c01      	subs	r4, #1
    42de:	e00b      	b.n	42f8 <dtostrf+0x138>
    42e0:	7058      	strb	r0, [r3, #1]
    42e2:	3302      	adds	r3, #2
		if (p == e) break;
    42e4:	3c01      	subs	r4, #1
	while (p < e) {
    42e6:	42ab      	cmp	r3, r5
		*p++ = *s++;
    42e8:	4619      	mov	r1, r3
	while (p < e) {
    42ea:	d20d      	bcs.n	4308 <dtostrf+0x148>
		*p++ = *s++;
    42ec:	f81c 2b01 	ldrb.w	r2, [ip], #1
    42f0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    42f4:	42a9      	cmp	r1, r5
    42f6:	d008      	beq.n	430a <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    42f8:	9401      	str	r4, [sp, #4]
    42fa:	2c00      	cmp	r4, #0
    42fc:	d0f0      	beq.n	42e0 <dtostrf+0x120>
    42fe:	460b      	mov	r3, r1
		if (p == e) break;
    4300:	3c01      	subs	r4, #1
	while (p < e) {
    4302:	42ab      	cmp	r3, r5
		*p++ = *s++;
    4304:	4619      	mov	r1, r3
	while (p < e) {
    4306:	d3f1      	bcc.n	42ec <dtostrf+0x12c>
    4308:	461d      	mov	r5, r3
	if (width < 0) {
    430a:	2f00      	cmp	r7, #0
    430c:	db6b      	blt.n	43e6 <dtostrf+0x226>
	return buf;
    430e:	4634      	mov	r4, r6
	*p = 0;
    4310:	2300      	movs	r3, #0
}
    4312:	4620      	mov	r0, r4
	*p = 0;
    4314:	702b      	strb	r3, [r5, #0]
}
    4316:	b005      	add	sp, #20
    4318:	ecbd 8b02 	vpop	{d8}
    431c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    4320:	b122      	cbz	r2, 432c <dtostrf+0x16c>
				*buf++ = ' ';
    4322:	4630      	mov	r0, r6
    4324:	2120      	movs	r1, #32
    4326:	4416      	add	r6, r2
    4328:	f003 fb4e 	bl	79c8 <memset>
		if (val<0) *buf++ = '-';
    432c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    4330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4334:	f140 80bd 	bpl.w	44b2 <dtostrf+0x2f2>
    4338:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    433a:	2249      	movs	r2, #73	; 0x49
    433c:	234e      	movs	r3, #78	; 0x4e
    433e:	2046      	movs	r0, #70	; 0x46
    4340:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    4342:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    4344:	70f0      	strb	r0, [r6, #3]
    4346:	7072      	strb	r2, [r6, #1]
    4348:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    434a:	e777      	b.n	423c <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    434c:	f1ca 0300 	rsb	r3, sl, #0
    4350:	4599      	cmp	r9, r3
    4352:	da57      	bge.n	4404 <dtostrf+0x244>
		decpt = -precision;
    4354:	f04f 0801 	mov.w	r8, #1
    4358:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    435c:	4c69      	ldr	r4, [pc, #420]	; (4504 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    435e:	45c2      	cmp	sl, r8
		decpt = -precision;
    4360:	4640      	mov	r0, r8
    4362:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    4366:	bfb8      	it	lt
    4368:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    436c:	f1ba 0f00 	cmp.w	sl, #0
    4370:	d152      	bne.n	4418 <dtostrf+0x258>
	if (sign) reqd++;
    4372:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    4374:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    4378:	2b00      	cmp	r3, #0
    437a:	d181      	bne.n	4280 <dtostrf+0xc0>
	pad = width - reqd;
    437c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    4380:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    4384:	f1bb 0f00 	cmp.w	fp, #0
    4388:	dd27      	ble.n	43da <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    438a:	465a      	mov	r2, fp
    438c:	2120      	movs	r1, #32
    438e:	4630      	mov	r0, r6
		e += pad;
    4390:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    4392:	f003 fb19 	bl	79c8 <memset>
    4396:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    439a:	f1ba 0f00 	cmp.w	sl, #0
    439e:	d087      	beq.n	42b0 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    43a0:	f1ba 0f00 	cmp.w	sl, #0
    43a4:	da8e      	bge.n	42c4 <dtostrf+0x104>
    43a6:	f1b9 0f00 	cmp.w	r9, #0
    43aa:	d08b      	beq.n	42c4 <dtostrf+0x104>
		*p++ = '0';
    43ac:	4618      	mov	r0, r3
		*p++ = '.';
    43ae:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    43b0:	2130      	movs	r1, #48	; 0x30
    43b2:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    43b6:	705a      	strb	r2, [r3, #1]
    43b8:	4602      	mov	r2, r0
    43ba:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    43bc:	3301      	adds	r3, #1
			*p++ = '0';
    43be:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    43c2:	d1fb      	bne.n	43bc <dtostrf+0x1fc>
			*p++ = '0';
    43c4:	f1ba 0f00 	cmp.w	sl, #0
    43c8:	9301      	str	r3, [sp, #4]
    43ca:	f1ca 0300 	rsb	r3, sl, #0
    43ce:	bfa8      	it	ge
    43d0:	2301      	movge	r3, #1
    43d2:	4403      	add	r3, r0
    43d4:	e776      	b.n	42c4 <dtostrf+0x104>
	if (pad > 0) {
    43d6:	4633      	mov	r3, r6
    43d8:	e764      	b.n	42a4 <dtostrf+0xe4>
    43da:	4633      	mov	r3, r6
    43dc:	e765      	b.n	42aa <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    43de:	2a04      	cmp	r2, #4
    43e0:	ddaa      	ble.n	4338 <dtostrf+0x178>
    43e2:	2304      	movs	r3, #4
    43e4:	e712      	b.n	420c <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    43e6:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    43e8:	f1b8 0f00 	cmp.w	r8, #0
    43ec:	ea6f 0208 	mvn.w	r2, r8
    43f0:	da8d      	bge.n	430e <dtostrf+0x14e>
    43f2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    43f6:	2120      	movs	r1, #32
    43f8:	4628      	mov	r0, r5
    43fa:	3201      	adds	r2, #1
    43fc:	4415      	add	r5, r2
    43fe:	f003 fae3 	bl	79c8 <memset>
    4402:	e784      	b.n	430e <dtostrf+0x14e>
	reqd = strlen(s);
    4404:	f004 f89c 	bl	8540 <strlen>
    4408:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    440a:	45c2      	cmp	sl, r8
    440c:	bfb8      	it	lt
    440e:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    4412:	f1ba 0f00 	cmp.w	sl, #0
    4416:	d0ac      	beq.n	4372 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    4418:	f1ba 0f00 	cmp.w	sl, #0
    441c:	f6bf af2d 	bge.w	427a <dtostrf+0xba>
    4420:	f1b9 0f00 	cmp.w	r9, #0
    4424:	f43f af29 	beq.w	427a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    4428:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    442c:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    4430:	4283      	cmp	r3, r0
    4432:	f4bf af22 	bcs.w	427a <dtostrf+0xba>
			while (newPrecision > 0) {
    4436:	f1b9 0f00 	cmp.w	r9, #0
    443a:	dd05      	ble.n	4448 <dtostrf+0x288>
				val *= 10.0f;
    443c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    4440:	3d01      	subs	r5, #1
				val *= 10.0f;
    4442:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    4446:	d1fb      	bne.n	4440 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    4448:	aa02      	add	r2, sp, #8
    444a:	eeb0 0a48 	vmov.f32	s0, s16
    444e:	4628      	mov	r0, r5
    4450:	a903      	add	r1, sp, #12
    4452:	f003 f8fb 	bl	764c <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    4456:	f8dd a004 	ldr.w	sl, [sp, #4]
    445a:	9b03      	ldr	r3, [sp, #12]
    445c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    4460:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    4462:	eba3 030a 	sub.w	r3, r3, sl
    4466:	4293      	cmp	r3, r2
    4468:	f47f af07 	bne.w	427a <dtostrf+0xba>
    446c:	f10a 0a01 	add.w	sl, sl, #1
    4470:	f8cd a004 	str.w	sl, [sp, #4]
    4474:	e701      	b.n	427a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    4476:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    447a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    447e:	bf4c      	ite	mi
    4480:	2304      	movmi	r3, #4
    4482:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    4484:	4293      	cmp	r3, r2
    4486:	da22      	bge.n	44ce <dtostrf+0x30e>
		if (width<0) {
    4488:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    448a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    448e:	db18      	blt.n	44c2 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    4490:	ee10 3a10 	vmov	r3, s0
    4494:	2b00      	cmp	r3, #0
    4496:	da02      	bge.n	449e <dtostrf+0x2de>
    4498:	232d      	movs	r3, #45	; 0x2d
    449a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    449e:	234e      	movs	r3, #78	; 0x4e
    44a0:	2141      	movs	r1, #65	; 0x41
    44a2:	1cf4      	adds	r4, r6, #3
    44a4:	7033      	strb	r3, [r6, #0]
    44a6:	7071      	strb	r1, [r6, #1]
    44a8:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    44aa:	2a00      	cmp	r2, #0
    44ac:	f47f aec1 	bne.w	4232 <dtostrf+0x72>
    44b0:	e6c4      	b.n	423c <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    44b2:	2149      	movs	r1, #73	; 0x49
    44b4:	224e      	movs	r2, #78	; 0x4e
    44b6:	2346      	movs	r3, #70	; 0x46
    44b8:	1cf4      	adds	r4, r6, #3
    44ba:	7031      	strb	r1, [r6, #0]
    44bc:	7072      	strb	r2, [r6, #1]
    44be:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    44c0:	e6bc      	b.n	423c <dtostrf+0x7c>
			while (awidth) {
    44c2:	b122      	cbz	r2, 44ce <dtostrf+0x30e>
				*buf++ = ' ';
    44c4:	4630      	mov	r0, r6
    44c6:	2120      	movs	r1, #32
    44c8:	4416      	add	r6, r2
    44ca:	f003 fa7d 	bl	79c8 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    44ce:	ee18 3a10 	vmov	r3, s16
    44d2:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    44d4:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    44d8:	db05      	blt.n	44e6 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    44da:	2241      	movs	r2, #65	; 0x41
    44dc:	1cf4      	adds	r4, r6, #3
    44de:	7033      	strb	r3, [r6, #0]
    44e0:	7072      	strb	r2, [r6, #1]
    44e2:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    44e4:	e6aa      	b.n	423c <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    44e6:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    44e8:	2241      	movs	r2, #65	; 0x41
    44ea:	1d34      	adds	r4, r6, #4
    44ec:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    44ee:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    44f0:	70b2      	strb	r2, [r6, #2]
    44f2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    44f4:	e6a2      	b.n	423c <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    44f6:	232d      	movs	r3, #45	; 0x2d
    44f8:	f806 3b01 	strb.w	r3, [r6], #1
    44fc:	e691      	b.n	4222 <dtostrf+0x62>
    44fe:	bf00      	nop
    4500:	7f7fffff 	.word	0x7f7fffff
    4504:	20000fcc 	.word	0x20000fcc
    4508:	20000fd0 	.word	0x20000fd0

0000450c <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    450c:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    450e:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    4510:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    4514:	4619      	mov	r1, r3
{
    4516:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4518:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    451c:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    4520:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4524:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    4528:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    452c:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    452e:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    4532:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4536:	b29b      	uxth	r3, r3
    4538:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    453c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4540:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    4544:	3101      	adds	r1, #1
    4546:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    454a:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    454c:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    454e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    4552:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4554:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    4556:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4558:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    455a:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    455e:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4560:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    4562:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4564:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    4566:	d1eb      	bne.n	4540 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4568:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    456c:	b29b      	uxth	r3, r3
    456e:	f043 030f 	orr.w	r3, r3, #15
    4572:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4576:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    457a:	b29b      	uxth	r3, r3
    457c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    4580:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    4584:	bd10      	pop	{r4, pc}
    4586:	bf00      	nop

00004588 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4588:	4b37      	ldr	r3, [pc, #220]	; (4668 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    458a:	4a38      	ldr	r2, [pc, #224]	; (466c <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    458c:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    458e:	4838      	ldr	r0, [pc, #224]	; (4670 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4590:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    4594:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4596:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4598:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    459c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    45a0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    45a4:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    45a8:	430a      	orrs	r2, r1
    45aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    45ae:	f7ff ffad 	bl	450c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    45b2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    45b6:	f7ff ffa9 	bl	450c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    45ba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    45be:	f7ff ffa5 	bl	450c <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    45c2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    45c6:	f7ff ffa1 	bl	450c <flexpwm_init>
	for (i=0; i < 4; i++) {
    45ca:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    45cc:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    45d0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    45d4:	4611      	mov	r1, r2
    45d6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    45da:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    45de:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    45e0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    45e2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    45e4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    45e6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    45ea:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    45ec:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    45ee:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    45f2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    45f4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    45f6:	d1ee      	bne.n	45d6 <pwm_init+0x4e>
    45f8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    45fa:	481e      	ldr	r0, [pc, #120]	; (4674 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    45fc:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4600:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    4604:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4606:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    460a:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    460e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4612:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4616:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4618:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    461a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    461c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    461e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4622:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4624:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4626:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    462a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    462c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    462e:	d1ee      	bne.n	460e <pwm_init+0x86>
    4630:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4632:	4811      	ldr	r0, [pc, #68]	; (4678 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4634:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4636:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    463a:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    463c:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4640:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    4644:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4648:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    464c:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    464e:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    4650:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    4652:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4654:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4656:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4658:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    465a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    465e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4660:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    4664:	d1ee      	bne.n	4644 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    4666:	bd70      	pop	{r4, r5, r6, pc}
    4668:	400fc000 	.word	0x400fc000
    466c:	fc030000 	.word	0xfc030000
    4670:	403dc000 	.word	0x403dc000
    4674:	401e0000 	.word	0x401e0000
    4678:	401e4000 	.word	0x401e4000

0000467c <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    467c:	4770      	bx	lr
    467e:	bf00      	nop

00004680 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    4680:	4770      	bx	lr
    4682:	bf00      	nop

00004684 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    4684:	4770      	bx	lr
    4686:	bf00      	nop

00004688 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    4688:	4770      	bx	lr
    468a:	bf00      	nop

0000468c <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    468c:	4770      	bx	lr
    468e:	bf00      	nop

00004690 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    4690:	4770      	bx	lr
    4692:	bf00      	nop

00004694 <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    4694:	4770      	bx	lr
    4696:	bf00      	nop

00004698 <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    4698:	4770      	bx	lr
    469a:	bf00      	nop

0000469c <unused_interrupt_vector>:
	__disable_irq();
    469c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    469e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    46a2:	4c4f      	ldr	r4, [pc, #316]	; (47e0 <unused_interrupt_vector+0x144>)
    46a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    46a8:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    46ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    46b0:	4e4c      	ldr	r6, [pc, #304]	; (47e4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    46b2:	4d4d      	ldr	r5, [pc, #308]	; (47e8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    46b4:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    46b8:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    46bc:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    46c0:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    46c4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    46c8:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    46cc:	6993      	ldr	r3, [r2, #24]
    46ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    46d2:	69d3      	ldr	r3, [r2, #28]
    46d4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    46d8:	f000 f8d0 	bl	487c <tempmonGetTemp>
    46dc:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    46e0:	f001 f9c4 	bl	5a6c <rtc_get>
	info->len = sizeof(*info) / 4;
    46e4:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    46e6:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    46ea:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    46ee:	460b      	mov	r3, r1
    46f0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    46f4:	493d      	ldr	r1, [pc, #244]	; (47ec <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    46f6:	1d30      	adds	r0, r6, #4
    46f8:	405a      	eors	r2, r3
    46fa:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    46fc:	f002 0301 	and.w	r3, r2, #1
    4700:	3c01      	subs	r4, #1
    4702:	fb01 f303 	mul.w	r3, r1, r3
    4706:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    470a:	d1f7      	bne.n	46fc <unused_interrupt_vector+0x60>
	while (p < end) {
    470c:	42a8      	cmp	r0, r5
    470e:	d002      	beq.n	4716 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    4710:	6873      	ldr	r3, [r6, #4]
    4712:	4606      	mov	r6, r0
    4714:	e7ef      	b.n	46f6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    4716:	4b32      	ldr	r3, [pc, #200]	; (47e0 <unused_interrupt_vector+0x144>)
    4718:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    471c:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    4720:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4724:	492f      	ldr	r1, [pc, #188]	; (47e4 <unused_interrupt_vector+0x148>)
    4726:	4a32      	ldr	r2, [pc, #200]	; (47f0 <unused_interrupt_vector+0x154>)
    4728:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    472c:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    4730:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4734:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4738:	4a2e      	ldr	r2, [pc, #184]	; (47f4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    473a:	2502      	movs	r5, #2
    473c:	482e      	ldr	r0, [pc, #184]	; (47f8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    473e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4740:	492e      	ldr	r1, [pc, #184]	; (47fc <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4742:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    4746:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    4748:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    474a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    474c:	482c      	ldr	r0, [pc, #176]	; (4800 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    474e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4756:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4758:	680b      	ldr	r3, [r1, #0]
    475a:	4283      	cmp	r3, r0
    475c:	d83d      	bhi.n	47da <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    475e:	4d26      	ldr	r5, [pc, #152]	; (47f8 <unused_interrupt_vector+0x15c>)
    4760:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    4762:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4766:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    476a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    476c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    476e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    4772:	4924      	ldr	r1, [pc, #144]	; (4804 <unused_interrupt_vector+0x168>)
    4774:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    4778:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    477c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    4780:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    4784:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    4788:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    478c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    4790:	e001      	b.n	4796 <unused_interrupt_vector+0xfa>
		usb_isr();
    4792:	f000 f965 	bl	4a60 <usb_isr>
		if (PIT_TFLG0) {
    4796:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    479a:	2b00      	cmp	r3, #0
    479c:	d0f9      	beq.n	4792 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    479e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    47a0:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    47a4:	2c4f      	cmp	r4, #79	; 0x4f
    47a6:	d9f4      	bls.n	4792 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    47a8:	4b17      	ldr	r3, [pc, #92]	; (4808 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    47aa:	2002      	movs	r0, #2
    47ac:	4917      	ldr	r1, [pc, #92]	; (480c <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    47ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    47b2:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    47b6:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    47b8:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    47bc:	b93b      	cbnz	r3, 47ce <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    47be:	4814      	ldr	r0, [pc, #80]	; (4810 <unused_interrupt_vector+0x174>)
    47c0:	4914      	ldr	r1, [pc, #80]	; (4814 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    47c2:	4a0d      	ldr	r2, [pc, #52]	; (47f8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    47c4:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    47c6:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    47ca:	2b00      	cmp	r3, #0
    47cc:	d0fa      	beq.n	47c4 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    47ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    47d2:	4a11      	ldr	r2, [pc, #68]	; (4818 <unused_interrupt_vector+0x17c>)
    47d4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    47d8:	e7fe      	b.n	47d8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    47da:	f7ff f931 	bl	3a40 <set_arm_clock>
    47de:	e7be      	b.n	475e <unused_interrupt_vector+0xc2>
    47e0:	2027ff00 	.word	0x2027ff00
    47e4:	2027ff80 	.word	0x2027ff80
    47e8:	2027ffa8 	.word	0x2027ffa8
    47ec:	edb88320 	.word	0xedb88320
    47f0:	2027ffa0 	.word	0x2027ffa0
    47f4:	400fc000 	.word	0x400fc000
    47f8:	40084000 	.word	0x40084000
    47fc:	200012b4 	.word	0x200012b4
    4800:	0bcd3d80 	.word	0x0bcd3d80
    4804:	00249f00 	.word	0x00249f00
    4808:	400d9000 	.word	0x400d9000
    480c:	402e0000 	.word	0x402e0000
    4810:	400f8000 	.word	0x400f8000
    4814:	0bad00f1 	.word	0x0bad00f1
    4818:	05fa0004 	.word	0x05fa0004

0000481c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    481c:	490a      	ldr	r1, [pc, #40]	; (4848 <_sbrk+0x2c>)
    481e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    4820:	b138      	cbz	r0, 4832 <_sbrk+0x16>
{
    4822:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    4824:	1813      	adds	r3, r2, r0
    4826:	4809      	ldr	r0, [pc, #36]	; (484c <_sbrk+0x30>)
    4828:	4283      	cmp	r3, r0
    482a:	d804      	bhi.n	4836 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    482c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    482e:	600b      	str	r3, [r1, #0]
}
    4830:	bd08      	pop	{r3, pc}
    4832:	4610      	mov	r0, r2
    4834:	4770      	bx	lr
                        errno = ENOMEM;
    4836:	f003 fc77 	bl	8128 <__errno>
    483a:	230c      	movs	r3, #12
                        return (void *)-1;
    483c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    4840:	6003      	str	r3, [r0, #0]
}
    4842:	4610      	mov	r0, r2
    4844:	bd08      	pop	{r3, pc}
    4846:	bf00      	nop
    4848:	20001588 	.word	0x20001588
    484c:	20280000 	.word	0x20280000

00004850 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    4850:	2000      	movs	r0, #0
    4852:	4770      	bx	lr

00004854 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    4854:	f04f 30ff 	mov.w	r0, #4294967295
    4858:	4770      	bx	lr
    485a:	bf00      	nop

0000485c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    485c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    4860:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    4862:	604b      	str	r3, [r1, #4]
}
    4864:	4770      	bx	lr
    4866:	bf00      	nop

00004868 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    4868:	2001      	movs	r0, #1
    486a:	4770      	bx	lr

0000486c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    486c:	f04f 30ff 	mov.w	r0, #4294967295
    4870:	4770      	bx	lr
    4872:	bf00      	nop

00004874 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    4874:	bf30      	wfi
    4876:	e7fd      	b.n	4874 <abort>

00004878 <Panic_Temp_isr>:
  unused_interrupt_vector();
    4878:	f7ff bf10 	b.w	469c <unused_interrupt_vector>

0000487c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    487c:	4a12      	ldr	r2, [pc, #72]	; (48c8 <tempmonGetTemp+0x4c>)
    487e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4882:	075b      	lsls	r3, r3, #29
    4884:	d5fb      	bpl.n	487e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4886:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    488a:	4810      	ldr	r0, [pc, #64]	; (48cc <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    488c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4890:	490f      	ldr	r1, [pc, #60]	; (48d0 <tempmonGetTemp+0x54>)
    4892:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4896:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    489a:	ed91 6a00 	vldr	s12, [r1]
    489e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    48a2:	4a0c      	ldr	r2, [pc, #48]	; (48d4 <tempmonGetTemp+0x58>)
    48a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    48a8:	4b0b      	ldr	r3, [pc, #44]	; (48d8 <tempmonGetTemp+0x5c>)
    48aa:	edd2 6a00 	vldr	s13, [r2]
    48ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
    48b2:	ed93 7a00 	vldr	s14, [r3]
    48b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    48ba:	ee67 7a86 	vmul.f32	s15, s15, s12
    48be:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    48c2:	ee37 0a40 	vsub.f32	s0, s14, s0
    48c6:	4770      	bx	lr
    48c8:	400d8100 	.word	0x400d8100
    48cc:	20003dac 	.word	0x20003dac
    48d0:	20003db4 	.word	0x20003db4
    48d4:	20003db8 	.word	0x20003db8
    48d8:	20003db0 	.word	0x20003db0

000048dc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    48dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    48de:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    48e0:	b11b      	cbz	r3, 48ea <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    48e2:	6853      	ldr	r3, [r2, #4]
    48e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    48e8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    48ea:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    48ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    48ee:	b33c      	cbz	r4, 4940 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    48f0:	4b1a      	ldr	r3, [pc, #104]	; (495c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    48f2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    48f4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    48f8:	420c      	tst	r4, r1
    48fa:	d11d      	bne.n	4938 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    48fc:	4e18      	ldr	r6, [pc, #96]	; (4960 <schedule_transfer+0x84>)
    48fe:	6877      	ldr	r7, [r6, #4]
    4900:	e004      	b.n	490c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    4902:	6874      	ldr	r4, [r6, #4]
    4904:	1be4      	subs	r4, r4, r7
    4906:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    490a:	d20b      	bcs.n	4924 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    490c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    4910:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    4914:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    4918:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    491c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    4920:	0464      	lsls	r4, r4, #17
    4922:	d5ee      	bpl.n	4902 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    4924:	400d      	ands	r5, r1
    4926:	d107      	bne.n	4938 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    4928:	4c0c      	ldr	r4, [pc, #48]	; (495c <schedule_transfer+0x80>)
		endpoint->status = 0;
    492a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    492e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4932:	430b      	orrs	r3, r1
    4934:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    4938:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    493a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    493c:	bcf0      	pop	{r4, r5, r6, r7}
    493e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    4940:	4d06      	ldr	r5, [pc, #24]	; (495c <schedule_transfer+0x80>)
	endpoint->status = 0;
    4942:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    4946:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    494a:	430b      	orrs	r3, r1
    494c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    4950:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    4952:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    4954:	b662      	cpsie	i
}
    4956:	bcf0      	pop	{r4, r5, r6, r7}
    4958:	4770      	bx	lr
    495a:	bf00      	nop
    495c:	402e0000 	.word	0x402e0000
    4960:	e0001000 	.word	0xe0001000

00004964 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    4964:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    4966:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    4968:	b19d      	cbz	r5, 4992 <run_callbacks+0x2e>
    496a:	4606      	mov	r6, r0
    496c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    496e:	2400      	movs	r4, #0
    4970:	e003      	b.n	497a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    4972:	6812      	ldr	r2, [r2, #0]
		count++;
    4974:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    4976:	2a01      	cmp	r2, #1
    4978:	d00c      	beq.n	4994 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    497a:	6853      	ldr	r3, [r2, #4]
    497c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4980:	d0f7      	beq.n	4972 <run_callbacks+0xe>
			ep->first_transfer = t;
    4982:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4984:	b12c      	cbz	r4, 4992 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    4986:	4628      	mov	r0, r5
		ep->callback_function(first);
    4988:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    498a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    498c:	4798      	blx	r3
	while (count) {
    498e:	3c01      	subs	r4, #1
    4990:	d1f9      	bne.n	4986 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    4992:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    4994:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    4998:	e7f4      	b.n	4984 <run_callbacks+0x20>
    499a:	bf00      	nop

0000499c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    499c:	b430      	push	{r4, r5}
	if (len > 0) {
    499e:	b9d9      	cbnz	r1, 49d8 <endpoint0_transmit.constprop.0+0x3c>
    49a0:	4c1f      	ldr	r4, [pc, #124]	; (4a20 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    49a2:	4b20      	ldr	r3, [pc, #128]	; (4a24 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    49a4:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    49a6:	4a20      	ldr	r2, [pc, #128]	; (4a28 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    49a8:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    49aa:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    49ae:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    49b0:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    49b2:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    49b6:	2480      	movs	r4, #128	; 0x80
    49b8:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    49ba:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    49be:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    49c2:	481a      	ldr	r0, [pc, #104]	; (4a2c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    49c4:	432b      	orrs	r3, r5
    49c6:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    49ca:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    49cc:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    49d0:	2b00      	cmp	r3, #0
    49d2:	d1fb      	bne.n	49cc <endpoint0_transmit.constprop.0+0x30>
}
    49d4:	bc30      	pop	{r4, r5}
    49d6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    49d8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    49da:	4b15      	ldr	r3, [pc, #84]	; (4a30 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    49dc:	4c10      	ldr	r4, [pc, #64]	; (4a20 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    49de:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    49e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    49e4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    49e6:	4a10      	ldr	r2, [pc, #64]	; (4a28 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    49e8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    49ea:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    49ee:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    49f0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    49f2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    49f6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    49f8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    49fa:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    49fe:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4a02:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    4a04:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4a06:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    4a08:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    4a0a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4a12:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    4a16:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d1fb      	bne.n	4a16 <endpoint0_transmit.constprop.0+0x7a>
    4a1e:	e7c0      	b.n	49a2 <endpoint0_transmit.constprop.0+0x6>
    4a20:	20000000 	.word	0x20000000
    4a24:	200022c0 	.word	0x200022c0
    4a28:	402e0000 	.word	0x402e0000
    4a2c:	200032dc 	.word	0x200032dc
    4a30:	200022e0 	.word	0x200022e0

00004a34 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    4a34:	4908      	ldr	r1, [pc, #32]	; (4a58 <usb_stop_sof_interrupts+0x24>)
    4a36:	2201      	movs	r2, #1
    4a38:	780b      	ldrb	r3, [r1, #0]
    4a3a:	fa02 f000 	lsl.w	r0, r2, r0
    4a3e:	ea23 0000 	bic.w	r0, r3, r0
    4a42:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    4a44:	b930      	cbnz	r0, 4a54 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    4a46:	4a05      	ldr	r2, [pc, #20]	; (4a5c <usb_stop_sof_interrupts+0x28>)
    4a48:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    4a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4a50:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    4a54:	4770      	bx	lr
    4a56:	bf00      	nop
    4a58:	20003ded 	.word	0x20003ded
    4a5c:	402e0000 	.word	0x402e0000

00004a60 <usb_isr>:
{
    4a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    4a64:	4c97      	ldr	r4, [pc, #604]	; (4cc4 <usb_isr+0x264>)
{
    4a66:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    4a68:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4a6c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    4a6e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4a72:	d553      	bpl.n	4b1c <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4a74:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4a78:	2a00      	cmp	r2, #0
    4a7a:	d04a      	beq.n	4b12 <usb_isr+0xb2>
    4a7c:	4e92      	ldr	r6, [pc, #584]	; (4cc8 <usb_isr+0x268>)
    4a7e:	f8df a260 	ldr.w	sl, [pc, #608]	; 4ce0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    4a82:	f8df 9274 	ldr.w	r9, [pc, #628]	; 4cf8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4a86:	f8df b274 	ldr.w	fp, [pc, #628]	; 4cfc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4a8a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4d00 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    4a8e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    4a92:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4a96:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4a9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4a9e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    4aa2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4aa6:	049d      	lsls	r5, r3, #18
    4aa8:	d5f5      	bpl.n	4a96 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4aaa:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4ab2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4ab6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4aba:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4abe:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    4ac2:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    4ac6:	d1fa      	bne.n	4abe <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    4ac8:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    4aca:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    4acc:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    4ad0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4ad4:	f000 81cf 	beq.w	4e76 <usb_isr+0x416>
    4ad8:	f200 80db 	bhi.w	4c92 <usb_isr+0x232>
    4adc:	f240 3102 	movw	r1, #770	; 0x302
    4ae0:	428b      	cmp	r3, r1
    4ae2:	f000 81e7 	beq.w	4eb4 <usb_isr+0x454>
    4ae6:	f200 809a 	bhi.w	4c1e <usb_isr+0x1be>
    4aea:	2b82      	cmp	r3, #130	; 0x82
    4aec:	f000 81cb 	beq.w	4e86 <usb_isr+0x426>
    4af0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4af4:	f040 808a 	bne.w	4c0c <usb_isr+0x1ac>
		if (endpoint > 7) break;
    4af8:	f010 0f78 	tst.w	r0, #120	; 0x78
    4afc:	b283      	uxth	r3, r0
    4afe:	f000 8203 	beq.w	4f08 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    4b02:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4b06:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4b0a:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4b0e:	2a00      	cmp	r2, #0
    4b10:	d1bd      	bne.n	4a8e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    4b12:	4a6c      	ldr	r2, [pc, #432]	; (4cc4 <usb_isr+0x264>)
    4b14:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d142      	bne.n	4ba2 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    4b1c:	067e      	lsls	r6, r7, #25
    4b1e:	d516      	bpl.n	4b4e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4b20:	4b68      	ldr	r3, [pc, #416]	; (4cc4 <usb_isr+0x264>)
    4b22:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    4b26:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4b2a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    4b2e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4b32:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    4b36:	2c00      	cmp	r4, #0
    4b38:	d1fb      	bne.n	4b32 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    4b3a:	f04f 32ff 	mov.w	r2, #4294967295
    4b3e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    4b42:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    4b46:	f000 fd27 	bl	5598 <usb_serial_reset>
		endpointN_notify_mask = 0;
    4b4a:	4b60      	ldr	r3, [pc, #384]	; (4ccc <usb_isr+0x26c>)
    4b4c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    4b4e:	01fc      	lsls	r4, r7, #7
    4b50:	d503      	bpl.n	4b5a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    4b52:	4b5f      	ldr	r3, [pc, #380]	; (4cd0 <usb_isr+0x270>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	b103      	cbz	r3, 4b5a <usb_isr+0xfa>
    4b58:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    4b5a:	01b8      	lsls	r0, r7, #6
    4b5c:	d503      	bpl.n	4b66 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    4b5e:	4b5d      	ldr	r3, [pc, #372]	; (4cd4 <usb_isr+0x274>)
    4b60:	681b      	ldr	r3, [r3, #0]
    4b62:	b103      	cbz	r3, 4b66 <usb_isr+0x106>
    4b64:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    4b66:	0779      	lsls	r1, r7, #29
    4b68:	d508      	bpl.n	4b7c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    4b6a:	4b56      	ldr	r3, [pc, #344]	; (4cc4 <usb_isr+0x264>)
    4b6c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4b70:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    4b74:	d047      	beq.n	4c06 <usb_isr+0x1a6>
			usb_high_speed = 1;
    4b76:	4b58      	ldr	r3, [pc, #352]	; (4cd8 <usb_isr+0x278>)
    4b78:	2201      	movs	r2, #1
    4b7a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    4b7c:	4b51      	ldr	r3, [pc, #324]	; (4cc4 <usb_isr+0x264>)
    4b7e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    4b82:	061a      	lsls	r2, r3, #24
    4b84:	d50a      	bpl.n	4b9c <usb_isr+0x13c>
    4b86:	063b      	lsls	r3, r7, #24
    4b88:	d508      	bpl.n	4b9c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    4b8a:	4a54      	ldr	r2, [pc, #336]	; (4cdc <usb_isr+0x27c>)
    4b8c:	7813      	ldrb	r3, [r2, #0]
    4b8e:	b12b      	cbz	r3, 4b9c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    4b90:	3b01      	subs	r3, #1
    4b92:	b2db      	uxtb	r3, r3
    4b94:	7013      	strb	r3, [r2, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	f000 8272 	beq.w	5080 <usb_isr+0x620>
}
    4b9c:	b003      	add	sp, #12
    4b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    4ba2:	494f      	ldr	r1, [pc, #316]	; (4ce0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    4ba4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    4ba8:	6808      	ldr	r0, [r1, #0]
    4baa:	4203      	tst	r3, r0
    4bac:	f040 81d1 	bne.w	4f52 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    4bb0:	4a46      	ldr	r2, [pc, #280]	; (4ccc <usb_isr+0x26c>)
    4bb2:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    4bb4:	401c      	ands	r4, r3
    4bb6:	d0b1      	beq.n	4b1c <usb_isr+0xbc>
				while (tx) {
    4bb8:	ea5f 4814 	movs.w	r8, r4, lsr #16
    4bbc:	d010      	beq.n	4be0 <usb_isr+0x180>
    4bbe:	4e42      	ldr	r6, [pc, #264]	; (4cc8 <usb_isr+0x268>)
					tx &= ~(1<<p);
    4bc0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    4bc4:	fa98 f5a8 	rbit	r5, r8
    4bc8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4bcc:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    4bd0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4bd4:	3040      	adds	r0, #64	; 0x40
    4bd6:	f7ff fec5 	bl	4964 <run_callbacks>
				while (tx) {
    4bda:	ea38 0805 	bics.w	r8, r8, r5
    4bde:	d1f1      	bne.n	4bc4 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    4be0:	b2a4      	uxth	r4, r4
				while(rx) {
    4be2:	2c00      	cmp	r4, #0
    4be4:	d09a      	beq.n	4b1c <usb_isr+0xbc>
    4be6:	4e38      	ldr	r6, [pc, #224]	; (4cc8 <usb_isr+0x268>)
					rx &= ~(1<<p);
    4be8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    4bec:	fa94 f5a4 	rbit	r5, r4
    4bf0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4bf4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    4bf8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4bfc:	f7ff feb2 	bl	4964 <run_callbacks>
				while(rx) {
    4c00:	43ac      	bics	r4, r5
    4c02:	d1f3      	bne.n	4bec <usb_isr+0x18c>
    4c04:	e78a      	b.n	4b1c <usb_isr+0xbc>
			usb_high_speed = 0;
    4c06:	4a34      	ldr	r2, [pc, #208]	; (4cd8 <usb_isr+0x278>)
    4c08:	7013      	strb	r3, [r2, #0]
    4c0a:	e7b7      	b.n	4b7c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    4c0c:	2b80      	cmp	r3, #128	; 0x80
    4c0e:	f47f af78 	bne.w	4b02 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    4c12:	4834      	ldr	r0, [pc, #208]	; (4ce4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    4c14:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    4c16:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4c18:	f7ff fec0 	bl	499c <endpoint0_transmit.constprop.0>
		return;
    4c1c:	e775      	b.n	4b0a <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    4c1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    4c22:	f000 810b 	beq.w	4e3c <usb_isr+0x3dc>
    4c26:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    4c2a:	2b01      	cmp	r3, #1
    4c2c:	f63f af69 	bhi.w	4b02 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4c30:	4b2d      	ldr	r3, [pc, #180]	; (4ce8 <usb_isr+0x288>)
    4c32:	685d      	ldr	r5, [r3, #4]
    4c34:	2d00      	cmp	r5, #0
    4c36:	f43f af64 	beq.w	4b02 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4c3a:	fa1f fc8c 	uxth.w	ip, ip
    4c3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    4c42:	e004      	b.n	4c4e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4c44:	691d      	ldr	r5, [r3, #16]
    4c46:	330c      	adds	r3, #12
    4c48:	2d00      	cmp	r5, #0
    4c4a:	f43f af5a 	beq.w	4b02 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4c4e:	881a      	ldrh	r2, [r3, #0]
    4c50:	4572      	cmp	r2, lr
    4c52:	d1f7      	bne.n	4c44 <usb_isr+0x1e4>
    4c54:	885a      	ldrh	r2, [r3, #2]
    4c56:	4562      	cmp	r2, ip
    4c58:	d1f4      	bne.n	4c44 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    4c5a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    4c5e:	2a03      	cmp	r2, #3
    4c60:	f000 81a5 	beq.w	4fae <usb_isr+0x54e>
					datalen = list->length;
    4c64:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    4c66:	0c00      	lsrs	r0, r0, #16
    4c68:	4282      	cmp	r2, r0
    4c6a:	bf28      	it	cs
    4c6c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    4c6e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    4c72:	f040 81a1 	bne.w	4fb8 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    4c76:	4b18      	ldr	r3, [pc, #96]	; (4cd8 <usb_isr+0x278>)
    4c78:	491c      	ldr	r1, [pc, #112]	; (4cec <usb_isr+0x28c>)
    4c7a:	7818      	ldrb	r0, [r3, #0]
    4c7c:	4b1c      	ldr	r3, [pc, #112]	; (4cf0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4c7e:	9201      	str	r2, [sp, #4]
    4c80:	2800      	cmp	r0, #0
    4c82:	bf18      	it	ne
    4c84:	4619      	movne	r1, r3
    4c86:	481b      	ldr	r0, [pc, #108]	; (4cf4 <usb_isr+0x294>)
    4c88:	f7ff f9ca 	bl	4020 <memcpy>
    4c8c:	4d19      	ldr	r5, [pc, #100]	; (4cf4 <usb_isr+0x294>)
    4c8e:	9a01      	ldr	r2, [sp, #4]
    4c90:	e1e1      	b.n	5056 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    4c92:	f242 2121 	movw	r1, #8737	; 0x2221
    4c96:	428b      	cmp	r3, r1
    4c98:	d07c      	beq.n	4d94 <usb_isr+0x334>
    4c9a:	d933      	bls.n	4d04 <usb_isr+0x2a4>
    4c9c:	f242 3121 	movw	r1, #8993	; 0x2321
    4ca0:	428b      	cmp	r3, r1
    4ca2:	f000 8081 	beq.w	4da8 <usb_isr+0x348>
    4ca6:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    4caa:	428b      	cmp	r3, r1
    4cac:	f47f af29 	bne.w	4b02 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    4cb0:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    4cb4:	b283      	uxth	r3, r0
    4cb6:	f47f af24 	bne.w	4b02 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    4cba:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    4cbe:	f363 0c0f 	bfi	ip, r3, #0, #16
    4cc2:	e7b5      	b.n	4c30 <usb_isr+0x1d0>
    4cc4:	402e0000 	.word	0x402e0000
    4cc8:	20000000 	.word	0x20000000
    4ccc:	200032e0 	.word	0x200032e0
    4cd0:	20003dd8 	.word	0x20003dd8
    4cd4:	20003ddc 	.word	0x20003ddc
    4cd8:	20003df4 	.word	0x20003df4
    4cdc:	20003df5 	.word	0x20003df5
    4ce0:	200032dc 	.word	0x200032dc
    4ce4:	20003d6c 	.word	0x20003d6c
    4ce8:	200010fc 	.word	0x200010fc
    4cec:	60002128 	.word	0x60002128
    4cf0:	6000218c 	.word	0x6000218c
    4cf4:	20200000 	.word	0x20200000
    4cf8:	200032d4 	.word	0x200032d4
    4cfc:	b8c6cf5d 	.word	0xb8c6cf5d
    4d00:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    4d04:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4d08:	d066      	beq.n	4dd8 <usb_isr+0x378>
    4d0a:	f242 0121 	movw	r1, #8225	; 0x2021
    4d0e:	428b      	cmp	r3, r1
    4d10:	f47f aef7 	bne.w	4b02 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    4d14:	0c03      	lsrs	r3, r0, #16
    4d16:	2b07      	cmp	r3, #7
    4d18:	f47f aef3 	bne.w	4b02 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    4d1c:	4bb2      	ldr	r3, [pc, #712]	; (4fe8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4d1e:	49b3      	ldr	r1, [pc, #716]	; (4fec <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    4d20:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4d22:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    4d24:	49b2      	ldr	r1, [pc, #712]	; (4ff0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    4d26:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4d28:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    4d2c:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    4d30:	2201      	movs	r2, #1
    4d32:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4d34:	4aaf      	ldr	r2, [pc, #700]	; (4ff4 <usb_isr+0x594>)
    4d36:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4d38:	4aaf      	ldr	r2, [pc, #700]	; (4ff8 <usb_isr+0x598>)
    4d3a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    4d3c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    4d40:	f041 0101 	orr.w	r1, r1, #1
    4d44:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4d48:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4d4c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4d50:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4d52:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    4d54:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1fb      	bne.n	4d54 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    4d5c:	4aa7      	ldr	r2, [pc, #668]	; (4ffc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4d5e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4d60:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    4d62:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4d64:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4d66:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4d68:	f248 0380 	movw	r3, #32896	; 0x8080
    4d6c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4d6e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4d72:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4d76:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4d7e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4d86:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    4d8a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d1fb      	bne.n	4d8a <usb_isr+0x32a>
    4d92:	e6ba      	b.n	4b0a <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4d94:	b280      	uxth	r0, r0
    4d96:	b938      	cbnz	r0, 4da8 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4d98:	4b99      	ldr	r3, [pc, #612]	; (5000 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    4d9a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4d9e:	6819      	ldr	r1, [r3, #0]
    4da0:	4b98      	ldr	r3, [pc, #608]	; (5004 <usb_isr+0x5a4>)
    4da2:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4da4:	4b98      	ldr	r3, [pc, #608]	; (5008 <usb_isr+0x5a8>)
    4da6:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    4da8:	4b94      	ldr	r3, [pc, #592]	; (4ffc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    4daa:	2200      	movs	r2, #0
    4dac:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    4dae:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4db0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4db2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4db4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4db6:	2280      	movs	r2, #128	; 0x80
    4db8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4dba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4dbe:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4dc2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4dca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4dce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d1fb      	bne.n	4dce <usb_isr+0x36e>
    4dd6:	e698      	b.n	4b0a <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    4dd8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    4ddc:	4b8b      	ldr	r3, [pc, #556]	; (500c <usb_isr+0x5ac>)
    4dde:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4de0:	4b8b      	ldr	r3, [pc, #556]	; (5010 <usb_isr+0x5b0>)
    4de2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4de6:	4b8b      	ldr	r3, [pc, #556]	; (5014 <usb_isr+0x5b4>)
    4de8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4dec:	4b8a      	ldr	r3, [pc, #552]	; (5018 <usb_isr+0x5b8>)
    4dee:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    4df2:	f000 fbd3 	bl	559c <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    4df6:	2280      	movs	r2, #128	; 0x80
    4df8:	4629      	mov	r1, r5
    4dfa:	4888      	ldr	r0, [pc, #544]	; (501c <usb_isr+0x5bc>)
    4dfc:	f002 fde4 	bl	79c8 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4e00:	4b87      	ldr	r3, [pc, #540]	; (5020 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e02:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4e04:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4e08:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    4e0c:	4b7b      	ldr	r3, [pc, #492]	; (4ffc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4e0e:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e10:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    4e12:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4e14:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    4e16:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4e18:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4e1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4e1e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4e22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4e2a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4e2e:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    4e32:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e36:	2b00      	cmp	r3, #0
    4e38:	d1fb      	bne.n	4e32 <usb_isr+0x3d2>
    4e3a:	e666      	b.n	4b0a <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    4e3c:	4b6f      	ldr	r3, [pc, #444]	; (4ffc <usb_isr+0x59c>)
    4e3e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    4e40:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4e42:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e44:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    4e46:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4e48:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e4a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4e4c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4e50:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4e54:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4e5c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4e60:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e64:	2b00      	cmp	r3, #0
    4e66:	d1fb      	bne.n	4e60 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    4e68:	0c13      	lsrs	r3, r2, #16
    4e6a:	065b      	lsls	r3, r3, #25
    4e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4e70:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    4e74:	e649      	b.n	4b0a <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    4e76:	4b65      	ldr	r3, [pc, #404]	; (500c <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    4e78:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    4e7a:	486a      	ldr	r0, [pc, #424]	; (5024 <usb_isr+0x5c4>)
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4e80:	f7ff fd8c 	bl	499c <endpoint0_transmit.constprop.0>
		return;
    4e84:	e641      	b.n	4b0a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4e86:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    4e88:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    4e8c:	f47f ae39 	bne.w	4b02 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4e94:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    4e98:	4a62      	ldr	r2, [pc, #392]	; (5024 <usb_isr+0x5c4>)
    4e9a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4e9c:	0618      	lsls	r0, r3, #24
    4e9e:	f100 809e 	bmi.w	4fde <usb_isr+0x57e>
    4ea2:	07cb      	lsls	r3, r1, #31
    4ea4:	d501      	bpl.n	4eaa <usb_isr+0x44a>
			reply_buffer[0] = 1;
    4ea6:	2301      	movs	r3, #1
    4ea8:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4eaa:	2102      	movs	r1, #2
    4eac:	485d      	ldr	r0, [pc, #372]	; (5024 <usb_isr+0x5c4>)
    4eae:	f7ff fd75 	bl	499c <endpoint0_transmit.constprop.0>
		return;
    4eb2:	e62a      	b.n	4b0a <usb_isr+0xaa>
		if (endpoint > 7) break;
    4eb4:	f010 0f78 	tst.w	r0, #120	; 0x78
    4eb8:	b283      	uxth	r3, r0
    4eba:	f47f ae22 	bne.w	4b02 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    4ec6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4eca:	bf14      	ite	ne
    4ecc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4ed0:	f043 0301 	orreq.w	r3, r3, #1
    4ed4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4ed8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4eda:	4b48      	ldr	r3, [pc, #288]	; (4ffc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4edc:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4ede:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4ee0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4ee2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4ee4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4ee6:	2280      	movs	r2, #128	; 0x80
    4ee8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4eea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4eee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4ef2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4efa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4efe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4f02:	2b00      	cmp	r3, #0
    4f04:	d1fb      	bne.n	4efe <usb_isr+0x49e>
    4f06:	e600      	b.n	4b0a <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4f08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4f10:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4f14:	bf14      	ite	ne
    4f16:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    4f1a:	f023 0301 	biceq.w	r3, r3, #1
    4f1e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4f22:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4f24:	4b35      	ldr	r3, [pc, #212]	; (4ffc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4f26:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4f28:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4f2a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4f2c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4f2e:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4f30:	2280      	movs	r2, #128	; 0x80
    4f32:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4f34:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4f38:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4f3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4f44:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4f48:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d1fb      	bne.n	4f48 <usb_isr+0x4e8>
    4f50:	e5db      	b.n	4b0a <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    4f52:	2000      	movs	r0, #0
    4f54:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4f56:	4926      	ldr	r1, [pc, #152]	; (4ff0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4f58:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4f5a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4f5c:	f242 0121 	movw	r1, #8225	; 0x2021
    4f60:	428c      	cmp	r4, r1
    4f62:	f47f ae25 	bne.w	4bb0 <usb_isr+0x150>
    4f66:	b280      	uxth	r0, r0
    4f68:	2800      	cmp	r0, #0
    4f6a:	f47f ae21 	bne.w	4bb0 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4f6e:	492e      	ldr	r1, [pc, #184]	; (5028 <usb_isr+0x5c8>)
    4f70:	4c2e      	ldr	r4, [pc, #184]	; (502c <usb_isr+0x5cc>)
    4f72:	c903      	ldmia	r1, {r0, r1}
    4f74:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    4f76:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4f78:	ea4f 4111 	mov.w	r1, r1, lsr #16
    4f7c:	6020      	str	r0, [r4, #0]
    4f7e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    4f80:	f47f ae16 	bne.w	4bb0 <usb_isr+0x150>
	__disable_irq();
    4f84:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    4f86:	482a      	ldr	r0, [pc, #168]	; (5030 <usb_isr+0x5d0>)
    4f88:	7801      	ldrb	r1, [r0, #0]
    4f8a:	f041 0108 	orr.w	r1, r1, #8
    4f8e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    4f90:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    4f94:	060d      	lsls	r5, r1, #24
    4f96:	d405      	bmi.n	4fa4 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4f98:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4f9a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4f9c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4fa0:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    4fa4:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4fa6:	4a23      	ldr	r2, [pc, #140]	; (5034 <usb_isr+0x5d4>)
    4fa8:	2150      	movs	r1, #80	; 0x50
    4faa:	7011      	strb	r1, [r2, #0]
    4fac:	e600      	b.n	4bb0 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    4fae:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    4fb0:	782a      	ldrb	r2, [r5, #0]
    4fb2:	4282      	cmp	r2, r0
    4fb4:	bf28      	it	cs
    4fb6:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    4fb8:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    4fbc:	d144      	bne.n	5048 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    4fbe:	4b1e      	ldr	r3, [pc, #120]	; (5038 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4fc0:	4d1e      	ldr	r5, [pc, #120]	; (503c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    4fc2:	7818      	ldrb	r0, [r3, #0]
    4fc4:	491e      	ldr	r1, [pc, #120]	; (5040 <usb_isr+0x5e0>)
    4fc6:	4b1f      	ldr	r3, [pc, #124]	; (5044 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4fc8:	9201      	str	r2, [sp, #4]
    4fca:	2800      	cmp	r0, #0
    4fcc:	bf18      	it	ne
    4fce:	4619      	movne	r1, r3
    4fd0:	4628      	mov	r0, r5
    4fd2:	f7ff f825 	bl	4020 <memcpy>
					usb_descriptor_buffer[1] = 7;
    4fd6:	2307      	movs	r3, #7
    4fd8:	706b      	strb	r3, [r5, #1]
    4fda:	9a01      	ldr	r2, [sp, #4]
    4fdc:	e03b      	b.n	5056 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4fde:	03c9      	lsls	r1, r1, #15
    4fe0:	f53f af61 	bmi.w	4ea6 <usb_isr+0x446>
    4fe4:	e761      	b.n	4eaa <usb_isr+0x44a>
    4fe6:	bf00      	nop
    4fe8:	200022e0 	.word	0x200022e0
    4fec:	200042d4 	.word	0x200042d4
    4ff0:	20002480 	.word	0x20002480
    4ff4:	00070080 	.word	0x00070080
    4ff8:	200052d4 	.word	0x200052d4
    4ffc:	200022c0 	.word	0x200022c0
    5000:	20003dc4 	.word	0x20003dc4
    5004:	20003dd4 	.word	0x20003dd4
    5008:	20003df2 	.word	0x20003df2
    500c:	20003df3 	.word	0x20003df3
    5010:	00cc0002 	.word	0x00cc0002
    5014:	000200c8 	.word	0x000200c8
    5018:	00c80002 	.word	0x00c80002
    501c:	20000080 	.word	0x20000080
    5020:	74d59319 	.word	0x74d59319
    5024:	20003d6c 	.word	0x20003d6c
    5028:	200032d4 	.word	0x200032d4
    502c:	20003dcc 	.word	0x20003dcc
    5030:	20003ded 	.word	0x20003ded
    5034:	20003df5 	.word	0x20003df5
    5038:	20003df4 	.word	0x20003df4
    503c:	20200000 	.word	0x20200000
    5040:	6000218c 	.word	0x6000218c
    5044:	60002128 	.word	0x60002128
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    5048:	4629      	mov	r1, r5
    504a:	4d10      	ldr	r5, [pc, #64]	; (508c <usb_isr+0x62c>)
    504c:	9201      	str	r2, [sp, #4]
    504e:	4628      	mov	r0, r5
    5050:	f7fe ffe6 	bl	4020 <memcpy>
    5054:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    5056:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    505a:	4415      	add	r5, r2
	asm("dsb");
    505c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5060:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    5064:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    5068:	3320      	adds	r3, #32
	} while (location < end_addr);
    506a:	429d      	cmp	r5, r3
    506c:	d8fa      	bhi.n	5064 <usb_isr+0x604>
	asm("dsb");
    506e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5072:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    5076:	4805      	ldr	r0, [pc, #20]	; (508c <usb_isr+0x62c>)
    5078:	4611      	mov	r1, r2
    507a:	f7ff fc8f 	bl	499c <endpoint0_transmit.constprop.0>
				return;
    507e:	e544      	b.n	4b0a <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    5080:	2003      	movs	r0, #3
    5082:	f7ff fcd7 	bl	4a34 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    5086:	f007 fdc3 	bl	cc10 <___reboot_Teensyduino__veneer>
    508a:	bf00      	nop
    508c:	20200000 	.word	0x20200000

00005090 <usb_config_rx>:
{
    5090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5094:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5096:	1e83      	subs	r3, r0, #2
    5098:	2b02      	cmp	r3, #2
    509a:	d901      	bls.n	50a0 <usb_config_rx+0x10>
}
    509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    50a0:	f8df 904c 	ldr.w	r9, [pc, #76]	; 50f0 <usb_config_rx+0x60>
    50a4:	4615      	mov	r5, r2
    50a6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    50a8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    50aa:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    50ae:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    50b0:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    50b4:	2100      	movs	r1, #0
    50b6:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    50ba:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    50bc:	f002 fc84 	bl	79c8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    50c0:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    50c4:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    50c6:	0952      	lsrs	r2, r2, #5
    50c8:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    50cc:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    50d0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    50d4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    50d8:	2f00      	cmp	r7, #0
    50da:	d0df      	beq.n	509c <usb_config_rx+0xc>
    50dc:	4a03      	ldr	r2, [pc, #12]	; (50ec <usb_config_rx+0x5c>)
    50de:	40b3      	lsls	r3, r6
    50e0:	6811      	ldr	r1, [r2, #0]
    50e2:	430b      	orrs	r3, r1
    50e4:	6013      	str	r3, [r2, #0]
}
    50e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    50ea:	bf00      	nop
    50ec:	200032e0 	.word	0x200032e0
    50f0:	20000000 	.word	0x20000000

000050f4 <usb_config_tx>:
{
    50f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50f8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    50fa:	1e81      	subs	r1, r0, #2
    50fc:	2902      	cmp	r1, #2
    50fe:	d901      	bls.n	5104 <usb_config_tx+0x10>
}
    5100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5104:	01c7      	lsls	r7, r0, #7
    5106:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5154 <usb_config_tx+0x60>
    510a:	4692      	mov	sl, r2
    510c:	4604      	mov	r4, r0
    510e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    5110:	223c      	movs	r2, #60	; 0x3c
    5112:	2100      	movs	r1, #0
    5114:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    5116:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    511a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    511c:	f108 0004 	add.w	r0, r8, #4
    5120:	f002 fc52 	bl	79c8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5124:	faba f28a 	clz	r2, sl
    5128:	0952      	lsrs	r2, r2, #5
    512a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    512e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    5132:	2201      	movs	r2, #1
	qh->callback_function = callback;
    5134:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    5138:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    513c:	2e00      	cmp	r6, #0
    513e:	d0df      	beq.n	5100 <usb_config_tx+0xc>
    5140:	4b03      	ldr	r3, [pc, #12]	; (5150 <usb_config_tx+0x5c>)
    5142:	3410      	adds	r4, #16
    5144:	6819      	ldr	r1, [r3, #0]
    5146:	40a2      	lsls	r2, r4
    5148:	430a      	orrs	r2, r1
    514a:	601a      	str	r2, [r3, #0]
}
    514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5150:	200032e0 	.word	0x200032e0
    5154:	20000000 	.word	0x20000000

00005158 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    5158:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    515a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    515c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    515e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    5162:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    5166:	b410      	push	{r4}
	transfer->next = 1;
    5168:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    516a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    516c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    5170:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    5172:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    5176:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    517a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    517c:	6181      	str	r1, [r0, #24]
}
    517e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    5182:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    5186:	4770      	bx	lr

00005188 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5188:	1e83      	subs	r3, r0, #2
{
    518a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    518c:	2b02      	cmp	r3, #2
    518e:	d900      	bls.n	5192 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    5190:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5192:	4b06      	ldr	r3, [pc, #24]	; (51ac <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    5194:	f100 0110 	add.w	r1, r0, #16
    5198:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    519c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    51a0:	fa0c f101 	lsl.w	r1, ip, r1
    51a4:	3040      	adds	r0, #64	; 0x40
    51a6:	f7ff bb99 	b.w	48dc <schedule_transfer>
    51aa:	bf00      	nop
    51ac:	20000000 	.word	0x20000000

000051b0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    51b0:	1e83      	subs	r3, r0, #2
{
    51b2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    51b4:	2b02      	cmp	r3, #2
    51b6:	d900      	bls.n	51ba <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    51b8:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    51ba:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    51bc:	4b02      	ldr	r3, [pc, #8]	; (51c8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    51be:	4081      	lsls	r1, r0
    51c0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    51c4:	f7ff bb8a 	b.w	48dc <schedule_transfer>
    51c8:	20000000 	.word	0x20000000

000051cc <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    51cc:	6840      	ldr	r0, [r0, #4]
#endif
}
    51ce:	4770      	bx	lr

000051d0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    51d0:	4a12      	ldr	r2, [pc, #72]	; (521c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    51d2:	4b13      	ldr	r3, [pc, #76]	; (5220 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    51d4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    51d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    51dc:	4298      	cmp	r0, r3
{
    51de:	b510      	push	{r4, lr}
    51e0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    51e2:	d202      	bcs.n	51ea <usb_init_serialnumber+0x1a>
    51e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51e8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    51ea:	4c0e      	ldr	r4, [pc, #56]	; (5224 <usb_init_serialnumber+0x54>)
    51ec:	a901      	add	r1, sp, #4
    51ee:	220a      	movs	r2, #10
    51f0:	f7fe ffb4 	bl	415c <ultoa>
	for (i=0; i<10; i++) {
    51f4:	a901      	add	r1, sp, #4
    51f6:	2300      	movs	r3, #0
    51f8:	4620      	mov	r0, r4
		char c = buf[i];
    51fa:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    51fe:	3301      	adds	r3, #1
		if (!c) break;
    5200:	b13a      	cbz	r2, 5212 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    5202:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    5204:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    5208:	d1f7      	bne.n	51fa <usb_init_serialnumber+0x2a>
    520a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    520c:	7023      	strb	r3, [r4, #0]
}
    520e:	b004      	add	sp, #16
    5210:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    5212:	005b      	lsls	r3, r3, #1
    5214:	b2db      	uxtb	r3, r3
    5216:	7023      	strb	r3, [r4, #0]
}
    5218:	b004      	add	sp, #16
    521a:	bd10      	pop	{r4, pc}
    521c:	401f4400 	.word	0x401f4400
    5220:	00989680 	.word	0x00989680
    5224:	20001d7c 	.word	0x20001d7c

00005228 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    5228:	f000 bacc 	b.w	57c4 <usb_serial_flush_input>

0000522c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    522c:	f000 bb5c 	b.w	58e8 <usb_serial_flush_output>

00005230 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5230:	f000 bb32 	b.w	5898 <usb_serial_write_buffer_free>

00005234 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5234:	4608      	mov	r0, r1
    5236:	4611      	mov	r1, r2
    5238:	f000 bb22 	b.w	5880 <usb_serial_write>

0000523c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    523e:	4c14      	ldr	r4, [pc, #80]	; (5290 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5240:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    5244:	4e13      	ldr	r6, [pc, #76]	; (5294 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    524a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    524e:	4f12      	ldr	r7, [pc, #72]	; (5298 <rx_queue_transfer+0x5c>)
    5250:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    5254:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5256:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    525a:	4621      	mov	r1, r4
    525c:	883a      	ldrh	r2, [r7, #0]
    525e:	4630      	mov	r0, r6
    5260:	f7ff ff7a 	bl	5158 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    5264:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    5266:	4423      	add	r3, r4
	asm("dsb");
    5268:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    526c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    5270:	3420      	adds	r4, #32
	} while (location < end_addr);
    5272:	42a3      	cmp	r3, r4
    5274:	d8fa      	bhi.n	526c <rx_queue_transfer+0x30>
	asm("dsb");
    5276:	f3bf 8f4f 	dsb	sy
	asm("isb");
    527a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    527e:	2003      	movs	r0, #3
    5280:	4631      	mov	r1, r6
    5282:	f7ff ff95 	bl	51b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    5286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    528a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    528e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5290:	20200080 	.word	0x20200080
    5294:	20002300 	.word	0x20002300
    5298:	20003de0 	.word	0x20003de0

0000529c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    529c:	4b24      	ldr	r3, [pc, #144]	; (5330 <rx_event+0x94>)
{
    529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    52a2:	881c      	ldrh	r4, [r3, #0]
    52a4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    52a6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    52a8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    52ac:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    52ae:	2c00      	cmp	r4, #0
    52b0:	dd24      	ble.n	52fc <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    52b2:	4920      	ldr	r1, [pc, #128]	; (5334 <rx_event+0x98>)
		if (head != rx_tail) {
    52b4:	4820      	ldr	r0, [pc, #128]	; (5338 <rx_event+0x9c>)
		uint32_t head = rx_head;
    52b6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    52b8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    52ba:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    52bc:	4e1f      	ldr	r6, [pc, #124]	; (533c <rx_event+0xa0>)
		if (head != rx_tail) {
    52be:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    52c0:	481f      	ldr	r0, [pc, #124]	; (5340 <rx_event+0xa4>)
		if (head != rx_tail) {
    52c2:	d007      	beq.n	52d4 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    52c4:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    52c8:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    52cc:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    52d0:	4294      	cmp	r4, r2
    52d2:	d918      	bls.n	5306 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    52d4:	3301      	adds	r3, #1
		rx_index[i] = 0;
    52d6:	2200      	movs	r2, #0
		rx_count[i] = len;
    52d8:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    52dc:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    52de:	4e19      	ldr	r6, [pc, #100]	; (5344 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    52e0:	bf88      	it	hi
    52e2:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    52e4:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    52e8:	bf98      	it	ls
    52ea:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    52ec:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    52ee:	4b16      	ldr	r3, [pc, #88]	; (5348 <rx_event+0xac>)
		rx_head = head;
    52f0:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    52f2:	681a      	ldr	r2, [r3, #0]
    52f4:	4414      	add	r4, r2
    52f6:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    52f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    52fc:	4628      	mov	r0, r5
}
    52fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    5302:	f7ff bf9b 	b.w	523c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5306:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    530a:	4910      	ldr	r1, [pc, #64]	; (534c <rx_event+0xb0>)
    530c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    530e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    5310:	4408      	add	r0, r1
    5312:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    5316:	f7fe fe83 	bl	4020 <memcpy>
				rx_available += len;
    531a:	4a0b      	ldr	r2, [pc, #44]	; (5348 <rx_event+0xac>)
				rx_queue_transfer(i);
    531c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    531e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    5322:	6813      	ldr	r3, [r2, #0]
    5324:	4423      	add	r3, r4
}
    5326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    532a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    532c:	f7ff bf86 	b.w	523c <rx_queue_transfer>
    5330:	20003de0 	.word	0x20003de0
    5334:	20003deb 	.word	0x20003deb
    5338:	20003dec 	.word	0x20003dec
    533c:	20003d80 	.word	0x20003d80
    5340:	20003da0 	.word	0x20003da0
    5344:	20003d90 	.word	0x20003d90
    5348:	20003d7c 	.word	0x20003d7c
    534c:	20200080 	.word	0x20200080

00005350 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    5350:	4b1d      	ldr	r3, [pc, #116]	; (53c8 <usb_serial_flush_callback+0x78>)
    5352:	781a      	ldrb	r2, [r3, #0]
    5354:	2a00      	cmp	r2, #0
    5356:	d136      	bne.n	53c6 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    5358:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    535c:	4a1b      	ldr	r2, [pc, #108]	; (53cc <usb_serial_flush_callback+0x7c>)
    535e:	7812      	ldrb	r2, [r2, #0]
    5360:	b38a      	cbz	r2, 53c6 <usb_serial_flush_callback+0x76>
{
    5362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    5366:	4d1a      	ldr	r5, [pc, #104]	; (53d0 <usb_serial_flush_callback+0x80>)
    5368:	882a      	ldrh	r2, [r5, #0]
    536a:	b352      	cbz	r2, 53c2 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    536c:	4e19      	ldr	r6, [pc, #100]	; (53d4 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    536e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    5372:	4f19      	ldr	r7, [pc, #100]	; (53d8 <usb_serial_flush_callback+0x88>)
    5374:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5376:	4c19      	ldr	r4, [pc, #100]	; (53dc <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    5378:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    537c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5380:	4642      	mov	r2, r8
    5382:	4638      	mov	r0, r7
    5384:	4621      	mov	r1, r4
    5386:	f7ff fee7 	bl	5158 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    538a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    538e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5392:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5396:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    539a:	3420      	adds	r4, #32
	} while (location < end_addr);
    539c:	42a2      	cmp	r2, r4
    539e:	d8fa      	bhi.n	5396 <usb_serial_flush_callback+0x46>
	asm("dsb");
    53a0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    53a4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    53a8:	2004      	movs	r0, #4
    53aa:	4639      	mov	r1, r7
    53ac:	f7ff feec 	bl	5188 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    53b0:	7833      	ldrb	r3, [r6, #0]
    53b2:	3301      	adds	r3, #1
    53b4:	b2db      	uxtb	r3, r3
    53b6:	2b03      	cmp	r3, #3
    53b8:	bf88      	it	hi
    53ba:	2300      	movhi	r3, #0
    53bc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    53be:	2300      	movs	r3, #0
    53c0:	802b      	strh	r3, [r5, #0]
}
    53c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53c6:	4770      	bx	lr
    53c8:	20003df1 	.word	0x20003df1
    53cc:	20003df3 	.word	0x20003df3
    53d0:	20003de2 	.word	0x20003de2
    53d4:	20003df0 	.word	0x20003df0
    53d8:	20002400 	.word	0x20002400
    53dc:	20201080 	.word	0x20201080

000053e0 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    53e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53e4:	b085      	sub	sp, #20
	while (size > 0) {
    53e6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    53ea:	2900      	cmp	r1, #0
    53ec:	f000 80bf 	beq.w	556e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    53f0:	2300      	movs	r3, #0
    53f2:	4c60      	ldr	r4, [pc, #384]	; (5574 <usb_serial_write.part.0+0x194>)
    53f4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5590 <usb_serial_write.part.0+0x1b0>
    53f8:	f8df a198 	ldr.w	sl, [pc, #408]	; 5594 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    53fc:	4f5e      	ldr	r7, [pc, #376]	; (5578 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    53fe:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    5400:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    5402:	4a5e      	ldr	r2, [pc, #376]	; (557c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    5404:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    5406:	4b5e      	ldr	r3, [pc, #376]	; (5580 <usb_serial_write.part.0+0x1a0>)
    5408:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    540a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    540e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    5412:	2b00      	cmp	r3, #0
    5414:	f040 80a7 	bne.w	5566 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    5418:	461e      	mov	r6, r3
		int waiting=0;
    541a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    541c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    541e:	4648      	mov	r0, r9
    5420:	f7ff fed4 	bl	51cc <usb_transfer_status>
			if (!(status & 0x80)) {
    5424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    5428:	f000 808c 	beq.w	5544 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    542c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    5430:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    5434:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    5438:	b905      	cbnz	r5, 543c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    543a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    543c:	2b00      	cmp	r3, #0
    543e:	d17d      	bne.n	553c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    5440:	683b      	ldr	r3, [r7, #0]
    5442:	1b9b      	subs	r3, r3, r6
    5444:	2b78      	cmp	r3, #120	; 0x78
    5446:	f200 8087 	bhi.w	5558 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    544a:	4b4e      	ldr	r3, [pc, #312]	; (5584 <usb_serial_write.part.0+0x1a4>)
    544c:	781b      	ldrb	r3, [r3, #0]
    544e:	2b00      	cmp	r3, #0
    5450:	d074      	beq.n	553c <usb_serial_write.part.0+0x15c>
			yield();
    5452:	f000 fa93 	bl	597c <yield>
			tx_noautoflush = 1;
    5456:	2201      	movs	r2, #1
		while (!tx_available) {
    5458:	f8b8 3000 	ldrh.w	r3, [r8]
    545c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    545e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    5460:	2b00      	cmp	r3, #0
    5462:	d0dc      	beq.n	541e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5464:	4a46      	ldr	r2, [pc, #280]	; (5580 <usb_serial_write.part.0+0x1a0>)
    5466:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    546a:	7811      	ldrb	r1, [r2, #0]
    546c:	461a      	mov	r2, r3
    546e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    5472:	4d45      	ldr	r5, [pc, #276]	; (5588 <usb_serial_write.part.0+0x1a8>)
    5474:	02c9      	lsls	r1, r1, #11
    5476:	4428      	add	r0, r5
		if (size >= tx_available) {
    5478:	9d01      	ldr	r5, [sp, #4]
    547a:	4295      	cmp	r5, r2
    547c:	d217      	bcs.n	54ae <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    547e:	9303      	str	r3, [sp, #12]
    5480:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    5484:	462a      	mov	r2, r5
    5486:	f7fe fdcb 	bl	4020 <memcpy>
			tx_available -= size;
    548a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    548c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    5490:	1b5b      	subs	r3, r3, r5
    5492:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    5496:	4b3d      	ldr	r3, [pc, #244]	; (558c <usb_serial_write.part.0+0x1ac>)
    5498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    549c:	f3bf 8f4f 	dsb	sy
			sent += size;
    54a0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    54a2:	2300      	movs	r3, #0
			sent += size;
    54a4:	4428      	add	r0, r5
		tx_noautoflush = 0;
    54a6:	7023      	strb	r3, [r4, #0]
}
    54a8:	b005      	add	sp, #20
    54aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    54ae:	4b36      	ldr	r3, [pc, #216]	; (5588 <usb_serial_write.part.0+0x1a8>)
    54b0:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    54b2:	9902      	ldr	r1, [sp, #8]
    54b4:	f7fe fdb4 	bl	4020 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    54b8:	2300      	movs	r3, #0
    54ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    54be:	4629      	mov	r1, r5
    54c0:	4648      	mov	r0, r9
    54c2:	f7ff fe49 	bl	5158 <usb_prepare_transfer>
	asm("dsb");
    54c6:	f3bf 8f4f 	dsb	sy
    54ca:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    54ce:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    54d2:	4293      	cmp	r3, r2
    54d4:	bf34      	ite	cc
    54d6:	2301      	movcc	r3, #1
    54d8:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    54da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    54de:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    54e2:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    54e6:	3520      	adds	r5, #32
	} while (location < end_addr);
    54e8:	42ab      	cmp	r3, r5
    54ea:	d1fa      	bne.n	54e2 <usb_serial_write.part.0+0x102>
	asm("dsb");
    54ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
    54f0:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    54f4:	2004      	movs	r0, #4
    54f6:	4649      	mov	r1, r9
    54f8:	f7ff fe46 	bl	5188 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    54fc:	4a20      	ldr	r2, [pc, #128]	; (5580 <usb_serial_write.part.0+0x1a0>)
    54fe:	7813      	ldrb	r3, [r2, #0]
    5500:	3301      	adds	r3, #1
    5502:	b2db      	uxtb	r3, r3
    5504:	2b03      	cmp	r3, #3
    5506:	bf84      	itt	hi
    5508:	2300      	movhi	r3, #0
    550a:	4a1d      	ldrhi	r2, [pc, #116]	; (5580 <usb_serial_write.part.0+0x1a0>)
    550c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    550e:	f8b8 3000 	ldrh.w	r3, [r8]
    5512:	9a01      	ldr	r2, [sp, #4]
    5514:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    5516:	9a00      	ldr	r2, [sp, #0]
    5518:	441a      	add	r2, r3
			size -= tx_available;
    551a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    551c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    551e:	9a02      	ldr	r2, [sp, #8]
    5520:	441a      	add	r2, r3
			tx_available = 0;
    5522:	2300      	movs	r3, #0
			data += tx_available;
    5524:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    5526:	4a19      	ldr	r2, [pc, #100]	; (558c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    5528:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    552c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    5530:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    5534:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    5536:	2900      	cmp	r1, #0
    5538:	f47f af62 	bne.w	5400 <usb_serial_write.part.0+0x20>
	return sent;
    553c:	9800      	ldr	r0, [sp, #0]
}
    553e:	b005      	add	sp, #20
    5540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    5544:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5548:	4b0d      	ldr	r3, [pc, #52]	; (5580 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    554a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    554e:	7819      	ldrb	r1, [r3, #0]
				break;
    5550:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    5552:	f8a8 2000 	strh.w	r2, [r8]
				break;
    5556:	e78a      	b.n	546e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    5558:	2301      	movs	r3, #1
				return sent;
    555a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    555c:	f88a 3000 	strb.w	r3, [sl]
}
    5560:	b005      	add	sp, #20
    5562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5566:	461a      	mov	r2, r3
    5568:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    556c:	e77f      	b.n	546e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    556e:	9801      	ldr	r0, [sp, #4]
	return sent;
    5570:	e7e5      	b.n	553e <usb_serial_write.part.0+0x15e>
    5572:	bf00      	nop
    5574:	20003df1 	.word	0x20003df1
    5578:	20003dc4 	.word	0x20003dc4
    557c:	20002400 	.word	0x20002400
    5580:	20003df0 	.word	0x20003df0
    5584:	20003df3 	.word	0x20003df3
    5588:	20201080 	.word	0x20201080
    558c:	402e0000 	.word	0x402e0000
    5590:	20003de2 	.word	0x20003de2
    5594:	20003def 	.word	0x20003def

00005598 <usb_serial_reset>:
}
    5598:	4770      	bx	lr
    559a:	bf00      	nop

0000559c <usb_serial_configure>:
	if (usb_high_speed) {
    559c:	4b2a      	ldr	r3, [pc, #168]	; (5648 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    559e:	2100      	movs	r1, #0
    55a0:	2280      	movs	r2, #128	; 0x80
    55a2:	482a      	ldr	r0, [pc, #168]	; (564c <usb_serial_configure+0xb0>)
{
    55a4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    55a6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    55a8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    55aa:	4d29      	ldr	r5, [pc, #164]	; (5650 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    55ac:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    55ae:	4e29      	ldr	r6, [pc, #164]	; (5654 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    55b0:	bf0c      	ite	eq
    55b2:	2340      	moveq	r3, #64	; 0x40
    55b4:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    55b8:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    55ba:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    55bc:	f002 fa04 	bl	79c8 <memset>
	tx_head = 0;
    55c0:	4a25      	ldr	r2, [pc, #148]	; (5658 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    55c2:	4621      	mov	r1, r4
	tx_available = 0;
    55c4:	4b25      	ldr	r3, [pc, #148]	; (565c <usb_serial_configure+0xc0>)
	tx_head = 0;
    55c6:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    55c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    55cc:	4824      	ldr	r0, [pc, #144]	; (5660 <usb_serial_configure+0xc4>)
	tx_available = 0;
    55ce:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    55d0:	f002 f9fa 	bl	79c8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    55d4:	4a23      	ldr	r2, [pc, #140]	; (5664 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    55d6:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    55d8:	4b23      	ldr	r3, [pc, #140]	; (5668 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    55da:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    55dc:	e9c2 4400 	strd	r4, r4, [r2]
    55e0:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    55e4:	4a21      	ldr	r2, [pc, #132]	; (566c <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    55e6:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    55ea:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    55ec:	4a20      	ldr	r2, [pc, #128]	; (5670 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    55ee:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    55f2:	4b20      	ldr	r3, [pc, #128]	; (5674 <usb_serial_configure+0xd8>)
    55f4:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    55f6:	4623      	mov	r3, r4
	rx_available = 0;
    55f8:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    55fa:	4622      	mov	r2, r4
    55fc:	f7ff fd7a 	bl	50f4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    5600:	4622      	mov	r2, r4
    5602:	8831      	ldrh	r1, [r6, #0]
    5604:	2003      	movs	r0, #3
    5606:	4b1c      	ldr	r3, [pc, #112]	; (5678 <usb_serial_configure+0xdc>)
    5608:	f7ff fd42 	bl	5090 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    560c:	4623      	mov	r3, r4
    560e:	2201      	movs	r2, #1
    5610:	8829      	ldrh	r1, [r5, #0]
    5612:	2004      	movs	r0, #4
    5614:	f7ff fd6e 	bl	50f4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    5618:	4620      	mov	r0, r4
    561a:	3401      	adds	r4, #1
    561c:	f7ff fe0e 	bl	523c <rx_queue_transfer>
    5620:	2c08      	cmp	r4, #8
    5622:	d1f9      	bne.n	5618 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    5624:	4b15      	ldr	r3, [pc, #84]	; (567c <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    5626:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    5628:	4815      	ldr	r0, [pc, #84]	; (5680 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    562a:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    562c:	4c15      	ldr	r4, [pc, #84]	; (5684 <usb_serial_configure+0xe8>)
    562e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    5630:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    5634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    5638:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    563c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    5640:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    5644:	bd70      	pop	{r4, r5, r6, pc}
    5646:	bf00      	nop
    5648:	20003df4 	.word	0x20003df4
    564c:	20002400 	.word	0x20002400
    5650:	20003de4 	.word	0x20003de4
    5654:	20003de0 	.word	0x20003de0
    5658:	20003df0 	.word	0x20003df0
    565c:	20003de2 	.word	0x20003de2
    5660:	20002300 	.word	0x20002300
    5664:	20003d80 	.word	0x20003d80
    5668:	20003d90 	.word	0x20003d90
    566c:	20003deb 	.word	0x20003deb
    5670:	20003d7c 	.word	0x20003d7c
    5674:	20003dec 	.word	0x20003dec
    5678:	0000529d 	.word	0x0000529d
    567c:	402e0000 	.word	0x402e0000
    5680:	20003dd8 	.word	0x20003dd8
    5684:	00005351 	.word	0x00005351

00005688 <usb_serial_read>:
{
    5688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    568c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    5694:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 5760 <usb_serial_read+0xd8>
{
    5698:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    569a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    569e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    56a0:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    56a4:	2900      	cmp	r1, #0
    56a6:	d04f      	beq.n	5748 <usb_serial_read+0xc0>
    56a8:	4680      	mov	r8, r0
    56aa:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    56ac:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    56ae:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5764 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    56b2:	4b26      	ldr	r3, [pc, #152]	; (574c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    56b4:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    56b8:	4925      	ldr	r1, [pc, #148]	; (5750 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    56ba:	781b      	ldrb	r3, [r3, #0]
    56bc:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    56be:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    56c2:	d03f      	beq.n	5744 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    56c4:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    56c6:	4b23      	ldr	r3, [pc, #140]	; (5754 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    56c8:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    56ca:	bf28      	it	cs
    56cc:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    56ce:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    56d0:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    56d4:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    56d8:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    56da:	4b1f      	ldr	r3, [pc, #124]	; (5758 <usb_serial_read+0xd0>)
    56dc:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    56e0:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    56e4:	42aa      	cmp	r2, r5
    56e6:	d21c      	bcs.n	5722 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    56e8:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    56ec:	4918      	ldr	r1, [pc, #96]	; (5750 <usb_serial_read+0xc8>)
			rx_available -= len;
    56ee:	4c1b      	ldr	r4, [pc, #108]	; (575c <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    56f0:	4461      	add	r1, ip
    56f2:	9201      	str	r2, [sp, #4]
    56f4:	f7fe fc94 	bl	4020 <memcpy>
			rx_available -= len;
    56f8:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    56fa:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    56fe:	4658      	mov	r0, fp
			rx_index[i] += len;
    5700:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    5702:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    5706:	442a      	add	r2, r5
			rx_available -= len;
    5708:	4439      	add	r1, r7
			rx_index[i] += len;
    570a:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    570e:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    5710:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5714:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5718:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    571c:	b003      	add	sp, #12
    571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5722:	462a      	mov	r2, r5
			count += avail;
    5724:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5726:	f7fe fc7b 	bl	4020 <memcpy>
			rx_available -= avail;
    572a:	490c      	ldr	r1, [pc, #48]	; (575c <usb_serial_read+0xd4>)
			rx_tail = tail;
    572c:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    572e:	4630      	mov	r0, r6
			rx_available -= avail;
    5730:	680a      	ldr	r2, [r1, #0]
			p += avail;
    5732:	44a8      	add	r8, r5
			rx_available -= avail;
    5734:	1b52      	subs	r2, r2, r5
    5736:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    5738:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    573c:	f7ff fd7e 	bl	523c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    5740:	45bb      	cmp	fp, r7
    5742:	d8b6      	bhi.n	56b2 <usb_serial_read+0x2a>
	return count;
    5744:	4638      	mov	r0, r7
    5746:	e7e3      	b.n	5710 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    5748:	4608      	mov	r0, r1
    574a:	e7e1      	b.n	5710 <usb_serial_read+0x88>
    574c:	20003deb 	.word	0x20003deb
    5750:	20200080 	.word	0x20200080
    5754:	20003da0 	.word	0x20003da0
    5758:	20003d80 	.word	0x20003d80
    575c:	20003d7c 	.word	0x20003d7c
    5760:	20003dec 	.word	0x20003dec
    5764:	20003d90 	.word	0x20003d90

00005768 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    5768:	4b0b      	ldr	r3, [pc, #44]	; (5798 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    576a:	4a0c      	ldr	r2, [pc, #48]	; (579c <usb_serial_peekchar+0x34>)
    576c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    576e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    5770:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    5772:	428a      	cmp	r2, r1
    5774:	d00d      	beq.n	5792 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    5776:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    5778:	4809      	ldr	r0, [pc, #36]	; (57a0 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    577a:	4a0a      	ldr	r2, [pc, #40]	; (57a4 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    577c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    577e:	490a      	ldr	r1, [pc, #40]	; (57a8 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    5780:	bf28      	it	cs
    5782:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    5784:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5786:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    578a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    578e:	5c58      	ldrb	r0, [r3, r1]
    5790:	4770      	bx	lr
	if (tail == rx_head) return -1;
    5792:	f04f 30ff 	mov.w	r0, #4294967295
}
    5796:	4770      	bx	lr
    5798:	20003deb 	.word	0x20003deb
    579c:	20003dec 	.word	0x20003dec
    57a0:	20003da0 	.word	0x20003da0
    57a4:	20200080 	.word	0x20200080
    57a8:	20003d90 	.word	0x20003d90

000057ac <usb_serial_available>:
	uint32_t n = rx_available;
    57ac:	4b04      	ldr	r3, [pc, #16]	; (57c0 <usb_serial_available+0x14>)
{
    57ae:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    57b0:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    57b2:	b10c      	cbz	r4, 57b8 <usb_serial_available+0xc>
}
    57b4:	4620      	mov	r0, r4
    57b6:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    57b8:	f000 f8e0 	bl	597c <yield>
}
    57bc:	4620      	mov	r0, r4
    57be:	bd10      	pop	{r4, pc}
    57c0:	20003d7c 	.word	0x20003d7c

000057c4 <usb_serial_flush_input>:
{
    57c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    57c8:	4e14      	ldr	r6, [pc, #80]	; (581c <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    57ca:	4d15      	ldr	r5, [pc, #84]	; (5820 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    57cc:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    57ce:	782a      	ldrb	r2, [r5, #0]
    57d0:	4293      	cmp	r3, r2
    57d2:	d021      	beq.n	5818 <usb_serial_flush_input+0x54>
    57d4:	b2dc      	uxtb	r4, r3
    57d6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 5828 <usb_serial_flush_input+0x64>
    57da:	f8df b050 	ldr.w	fp, [pc, #80]	; 582c <usb_serial_flush_input+0x68>
    57de:	f8df 8050 	ldr.w	r8, [pc, #80]	; 5830 <usb_serial_flush_input+0x6c>
    57e2:	4f10      	ldr	r7, [pc, #64]	; (5824 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    57e4:	3401      	adds	r4, #1
    57e6:	2c08      	cmp	r4, #8
		rx_tail = tail;
    57e8:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    57ec:	d901      	bls.n	57f2 <usb_serial_flush_input+0x2e>
    57ee:	2400      	movs	r4, #0
    57f0:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    57f2:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    57f6:	f8db 3000 	ldr.w	r3, [fp]
    57fa:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    57fe:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    5802:	1a52      	subs	r2, r2, r1
    5804:	1a9b      	subs	r3, r3, r2
    5806:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    580a:	f7ff fd17 	bl	523c <rx_queue_transfer>
		rx_tail = tail;
    580e:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    5812:	782b      	ldrb	r3, [r5, #0]
    5814:	42a3      	cmp	r3, r4
    5816:	d1e5      	bne.n	57e4 <usb_serial_flush_input+0x20>
}
    5818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    581c:	20003dec 	.word	0x20003dec
    5820:	20003deb 	.word	0x20003deb
    5824:	20003d90 	.word	0x20003d90
    5828:	20003da0 	.word	0x20003da0
    582c:	20003d7c 	.word	0x20003d7c
    5830:	20003d80 	.word	0x20003d80

00005834 <usb_serial_getchar>:
{
    5834:	b500      	push	{lr}
    5836:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    5838:	2101      	movs	r1, #1
    583a:	f10d 0007 	add.w	r0, sp, #7
    583e:	f7ff ff23 	bl	5688 <usb_serial_read>
    5842:	b120      	cbz	r0, 584e <usb_serial_getchar+0x1a>
    5844:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    5848:	b003      	add	sp, #12
    584a:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    584e:	f04f 30ff 	mov.w	r0, #4294967295
    5852:	e7f9      	b.n	5848 <usb_serial_getchar+0x14>

00005854 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    5854:	4b09      	ldr	r3, [pc, #36]	; (587c <usb_serial_putchar+0x28>)
{
    5856:	b500      	push	{lr}
    5858:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    585a:	781b      	ldrb	r3, [r3, #0]
{
    585c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    5860:	b13b      	cbz	r3, 5872 <usb_serial_putchar+0x1e>
    5862:	2101      	movs	r1, #1
    5864:	f10d 0007 	add.w	r0, sp, #7
    5868:	f7ff fdba 	bl	53e0 <usb_serial_write.part.0>
}
    586c:	b003      	add	sp, #12
    586e:	f85d fb04 	ldr.w	pc, [sp], #4
    5872:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5876:	b003      	add	sp, #12
    5878:	f85d fb04 	ldr.w	pc, [sp], #4
    587c:	20003df3 	.word	0x20003df3

00005880 <usb_serial_write>:
	if (!usb_configuration) return 0;
    5880:	4b04      	ldr	r3, [pc, #16]	; (5894 <usb_serial_write+0x14>)
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5888:	b10b      	cbz	r3, 588e <usb_serial_write+0xe>
    588a:	f7ff bda9 	b.w	53e0 <usb_serial_write.part.0>
}
    588e:	4610      	mov	r0, r2
    5890:	4770      	bx	lr
    5892:	bf00      	nop
    5894:	20003df3 	.word	0x20003df3

00005898 <usb_serial_write_buffer_free>:
{
    5898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    589c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    589e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 58e4 <usb_serial_write_buffer_free+0x4c>
    58a2:	2301      	movs	r3, #1
    58a4:	4d0d      	ldr	r5, [pc, #52]	; (58dc <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    58a6:	4627      	mov	r7, r4
    58a8:	4e0d      	ldr	r6, [pc, #52]	; (58e0 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    58aa:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    58ae:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    58b0:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    58b2:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    58b4:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    58b6:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    58ba:	d005      	beq.n	58c8 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    58bc:	f7ff fc86 	bl	51cc <usb_transfer_status>
    58c0:	0603      	lsls	r3, r0, #24
    58c2:	bf58      	it	pl
    58c4:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    58c8:	2c04      	cmp	r4, #4
    58ca:	d1f0      	bne.n	58ae <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    58cc:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    58d0:	2300      	movs	r3, #0
}
    58d2:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    58d4:	f888 3000 	strb.w	r3, [r8]
}
    58d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58dc:	20002400 	.word	0x20002400
    58e0:	20003df0 	.word	0x20003df0
    58e4:	20003df1 	.word	0x20003df1

000058e8 <usb_serial_flush_output>:
{
    58e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    58ec:	4b1d      	ldr	r3, [pc, #116]	; (5964 <usb_serial_flush_output+0x7c>)
    58ee:	781b      	ldrb	r3, [r3, #0]
    58f0:	b113      	cbz	r3, 58f8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    58f2:	4d1d      	ldr	r5, [pc, #116]	; (5968 <usb_serial_flush_output+0x80>)
    58f4:	882a      	ldrh	r2, [r5, #0]
    58f6:	b90a      	cbnz	r2, 58fc <usb_serial_flush_output+0x14>
}
    58f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    58fc:	4e1b      	ldr	r6, [pc, #108]	; (596c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    58fe:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    5902:	491b      	ldr	r1, [pc, #108]	; (5970 <usb_serial_flush_output+0x88>)
    5904:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5906:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5908:	4c1a      	ldr	r4, [pc, #104]	; (5974 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    590a:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    590e:	4f1a      	ldr	r7, [pc, #104]	; (5978 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5910:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    5914:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5916:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    5918:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    591a:	4621      	mov	r1, r4
    591c:	2300      	movs	r3, #0
    591e:	f7ff fc1b 	bl	5158 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    5922:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    5926:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    592a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    592e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    5932:	3420      	adds	r4, #32
	} while (location < end_addr);
    5934:	42a2      	cmp	r2, r4
    5936:	d8fa      	bhi.n	592e <usb_serial_flush_output+0x46>
	asm("dsb");
    5938:	f3bf 8f4f 	dsb	sy
	asm("isb");
    593c:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5940:	2004      	movs	r0, #4
    5942:	4641      	mov	r1, r8
    5944:	f7ff fc20 	bl	5188 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5948:	7833      	ldrb	r3, [r6, #0]
    594a:	3301      	adds	r3, #1
    594c:	b2db      	uxtb	r3, r3
    594e:	2b03      	cmp	r3, #3
    5950:	bf88      	it	hi
    5952:	2300      	movhi	r3, #0
    5954:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    5956:	2300      	movs	r3, #0
    5958:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    595a:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    595e:	703b      	strb	r3, [r7, #0]
}
    5960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5964:	20003df3 	.word	0x20003df3
    5968:	20003de2 	.word	0x20003de2
    596c:	20003df0 	.word	0x20003df0
    5970:	20002400 	.word	0x20002400
    5974:	20201080 	.word	0x20201080
    5978:	20003df1 	.word	0x20003df1

0000597c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    5980:	4e32      	ldr	r6, [pc, #200]	; (5a4c <yield+0xd0>)
    5982:	7833      	ldrb	r3, [r6, #0]
    5984:	b163      	cbz	r3, 59a0 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    5986:	4f32      	ldr	r7, [pc, #200]	; (5a50 <yield+0xd4>)
    5988:	783a      	ldrb	r2, [r7, #0]
    598a:	b94a      	cbnz	r2, 59a0 <yield+0x24>
	running = 1;
    598c:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    598e:	07d9      	lsls	r1, r3, #31
	running = 1;
    5990:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5992:	d444      	bmi.n	5a1e <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    5994:	079a      	lsls	r2, r3, #30
    5996:	d426      	bmi.n	59e6 <yield+0x6a>

	running = 0;
    5998:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    599a:	075b      	lsls	r3, r3, #29
	running = 0;
    599c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    599e:	d401      	bmi.n	59a4 <yield+0x28>
	
};
    59a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    59a4:	4b2b      	ldr	r3, [pc, #172]	; (5a54 <yield+0xd8>)
    59a6:	681a      	ldr	r2, [r3, #0]
    59a8:	2a00      	cmp	r2, #0
    59aa:	d0f9      	beq.n	59a0 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    59ac:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    59b0:	2a00      	cmp	r2, #0
    59b2:	d1f5      	bne.n	59a0 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    59b4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    59b8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    59ba:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    59bc:	2800      	cmp	r0, #0
    59be:	d03b      	beq.n	5a38 <yield+0xbc>
		if (runningFromYield) {
    59c0:	4c25      	ldr	r4, [pc, #148]	; (5a58 <yield+0xdc>)
    59c2:	7821      	ldrb	r1, [r4, #0]
    59c4:	2900      	cmp	r1, #0
    59c6:	d137      	bne.n	5a38 <yield+0xbc>
		runningFromYield = true;
    59c8:	2201      	movs	r2, #1
    59ca:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    59cc:	6942      	ldr	r2, [r0, #20]
    59ce:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    59d0:	2a00      	cmp	r2, #0
    59d2:	d038      	beq.n	5a46 <yield+0xca>
			firstYield->_prev = nullptr;
    59d4:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    59d6:	b905      	cbnz	r5, 59da <yield+0x5e>
    59d8:	b662      	cpsie	i
		first->_triggered = false;
    59da:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    59dc:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    59de:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    59e0:	4798      	blx	r3
		runningFromYield = false;
    59e2:	7025      	strb	r5, [r4, #0]
    59e4:	e7dc      	b.n	59a0 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    59e6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5a64 <yield+0xe8>
    59ea:	f898 2000 	ldrb.w	r2, [r8]
    59ee:	2a00      	cmp	r2, #0
    59f0:	d0d2      	beq.n	5998 <yield+0x1c>
    59f2:	2500      	movs	r5, #0
    59f4:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5a68 <yield+0xec>
    59f8:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    59fa:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    59fe:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    5a00:	6823      	ldr	r3, [r4, #0]
    5a02:	4620      	mov	r0, r4
    5a04:	691b      	ldr	r3, [r3, #16]
    5a06:	4798      	blx	r3
    5a08:	b110      	cbz	r0, 5a10 <yield+0x94>
    5a0a:	6963      	ldr	r3, [r4, #20]
    5a0c:	689b      	ldr	r3, [r3, #8]
    5a0e:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5a10:	f898 2000 	ldrb.w	r2, [r8]
    5a14:	b2eb      	uxtb	r3, r5
    5a16:	429a      	cmp	r2, r3
    5a18:	d8ef      	bhi.n	59fa <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5a1a:	7833      	ldrb	r3, [r6, #0]
    5a1c:	e7bc      	b.n	5998 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    5a1e:	f7ff fec5 	bl	57ac <usb_serial_available>
		if (Serial.available()) serialEvent();
    5a22:	b968      	cbnz	r0, 5a40 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    5a24:	4b0d      	ldr	r3, [pc, #52]	; (5a5c <yield+0xe0>)
    5a26:	781b      	ldrb	r3, [r3, #0]
    5a28:	b90b      	cbnz	r3, 5a2e <yield+0xb2>
    5a2a:	7833      	ldrb	r3, [r6, #0]
    5a2c:	e7b2      	b.n	5994 <yield+0x18>
    5a2e:	7833      	ldrb	r3, [r6, #0]
    5a30:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5a34:	7033      	strb	r3, [r6, #0]
    5a36:	e7ad      	b.n	5994 <yield+0x18>
		if (doit) __enable_irq();
    5a38:	2d00      	cmp	r5, #0
    5a3a:	d1b1      	bne.n	59a0 <yield+0x24>
    5a3c:	b662      	cpsie	i
    5a3e:	e7af      	b.n	59a0 <yield+0x24>
		if (Serial.available()) serialEvent();
    5a40:	f000 f826 	bl	5a90 <serialEvent()>
    5a44:	e7ee      	b.n	5a24 <yield+0xa8>
			lastYield = nullptr;
    5a46:	4b06      	ldr	r3, [pc, #24]	; (5a60 <yield+0xe4>)
    5a48:	601a      	str	r2, [r3, #0]
    5a4a:	e7c4      	b.n	59d6 <yield+0x5a>
    5a4c:	20001d95 	.word	0x20001d95
    5a50:	20003de8 	.word	0x20003de8
    5a54:	20002f90 	.word	0x20002f90
    5a58:	20003de6 	.word	0x20003de6
    5a5c:	600020ea 	.word	0x600020ea
    5a60:	20002f9c 	.word	0x20002f9c
    5a64:	20003de7 	.word	0x20003de7
    5a68:	20002fa0 	.word	0x20002fa0

00005a6c <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    5a6c:	4a07      	ldr	r2, [pc, #28]	; (5a8c <rtc_get+0x20>)
    5a6e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    5a70:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    5a72:	4619      	mov	r1, r3
    5a74:	4684      	mov	ip, r0
    5a76:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    5a78:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    5a7a:	4299      	cmp	r1, r3
    5a7c:	d1f9      	bne.n	5a72 <rtc_get+0x6>
    5a7e:	4584      	cmp	ip, r0
    5a80:	d1f7      	bne.n	5a72 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    5a82:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    5a84:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    5a88:	4770      	bx	lr
    5a8a:	bf00      	nop
    5a8c:	400d4000 	.word	0x400d4000

00005a90 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    5a90:	4770      	bx	lr
    5a92:	bf00      	nop

00005a94 <sm_align_pool>:
{
    5a94:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    5a96:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    5a9a:	b15b      	cbz	r3, 5ab4 <sm_align_pool+0x20>
    5a9c:	b1ba      	cbz	r2, 5ace <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    5a9e:	4b0f      	ldr	r3, [pc, #60]	; (5adc <sm_align_pool+0x48>)
    5aa0:	fba3 1302 	umull	r1, r3, r3, r2
    5aa4:	08db      	lsrs	r3, r3, #3
    5aa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5aaa:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5aae:	d10a      	bne.n	5ac6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    5ab0:	2001      	movs	r0, #1
}
    5ab2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    5ab4:	4b09      	ldr	r3, [pc, #36]	; (5adc <sm_align_pool+0x48>)
    5ab6:	fba3 1302 	umull	r1, r3, r3, r2
    5aba:	08db      	lsrs	r3, r3, #3
    5abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    5ac0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5ac4:	d001      	beq.n	5aca <sm_align_pool+0x36>
    5ac6:	1ad2      	subs	r2, r2, r3
    5ac8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    5aca:	2af0      	cmp	r2, #240	; 0xf0
    5acc:	d8f0      	bhi.n	5ab0 <sm_align_pool+0x1c>
		errno = ENOSPC;
    5ace:	f002 fb2b 	bl	8128 <__errno>
    5ad2:	221c      	movs	r2, #28
    5ad4:	4603      	mov	r3, r0
    5ad6:	2000      	movs	r0, #0
    5ad8:	601a      	str	r2, [r3, #0]
}
    5ada:	bd08      	pop	{r3, pc}
    5adc:	aaaaaaab 	.word	0xaaaaaaab

00005ae0 <sm_set_pool>:
{
    5ae0:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    5ae2:	4604      	mov	r4, r0
    5ae4:	b338      	cbz	r0, 5b36 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    5ae6:	b119      	cbz	r1, 5af0 <sm_set_pool+0x10>
    5ae8:	fab2 f682 	clz	r6, r2
    5aec:	0976      	lsrs	r6, r6, #5
    5aee:	b9a2      	cbnz	r2, 5b1a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    5af0:	6820      	ldr	r0, [r4, #0]
    5af2:	b300      	cbz	r0, 5b36 <sm_set_pool+0x56>
    5af4:	6862      	ldr	r2, [r4, #4]
    5af6:	b1f2      	cbz	r2, 5b36 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    5af8:	4b18      	ldr	r3, [pc, #96]	; (5b5c <sm_set_pool+0x7c>)
    5afa:	4919      	ldr	r1, [pc, #100]	; (5b60 <sm_set_pool+0x80>)
    5afc:	fb02 f303 	mul.w	r3, r2, r3
    5b00:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    5b04:	d317      	bcc.n	5b36 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5b06:	68a3      	ldr	r3, [r4, #8]
    5b08:	b9e3      	cbnz	r3, 5b44 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    5b0a:	2200      	movs	r2, #0
			return 1;
    5b0c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    5b0e:	6022      	str	r2, [r4, #0]
    5b10:	6062      	str	r2, [r4, #4]
    5b12:	60a2      	str	r2, [r4, #8]
    5b14:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    5b16:	4618      	mov	r0, r3
    5b18:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    5b1a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    5b1c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    5b1e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    5b22:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    5b24:	f7ff ffb6 	bl	5a94 <sm_align_pool>
    5b28:	4603      	mov	r3, r0
    5b2a:	2800      	cmp	r0, #0
    5b2c:	d0f3      	beq.n	5b16 <sm_set_pool+0x36>
	if (do_zero) {
    5b2e:	b96d      	cbnz	r5, 5b4c <sm_set_pool+0x6c>
	return 1;
    5b30:	2301      	movs	r3, #1
}
    5b32:	4618      	mov	r0, r3
    5b34:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    5b36:	f002 faf7 	bl	8128 <__errno>
    5b3a:	2216      	movs	r2, #22
		return 0;
    5b3c:	2300      	movs	r3, #0
		errno = EINVAL;
    5b3e:	6002      	str	r2, [r0, #0]
}
    5b40:	4618      	mov	r0, r3
    5b42:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5b44:	2100      	movs	r1, #0
    5b46:	f001 ff3f 	bl	79c8 <memset>
    5b4a:	e7de      	b.n	5b0a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    5b4c:	6862      	ldr	r2, [r4, #4]
    5b4e:	4631      	mov	r1, r6
    5b50:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    5b52:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    5b54:	f001 ff38 	bl	79c8 <memset>
	return 1;
    5b58:	2301      	movs	r3, #1
    5b5a:	e7dc      	b.n	5b16 <sm_set_pool+0x36>
    5b5c:	aaaaaaab 	.word	0xaaaaaaab
    5b60:	15555555 	.word	0x15555555

00005b64 <__aeabi_atexit>:
    5b64:	4603      	mov	r3, r0
    5b66:	4608      	mov	r0, r1
    5b68:	4619      	mov	r1, r3
    5b6a:	f001 bd69 	b.w	7640 <__cxa_atexit>
    5b6e:	bf00      	nop

00005b70 <atol>:
    5b70:	220a      	movs	r2, #10
    5b72:	2100      	movs	r1, #0
    5b74:	f001 bd08 	b.w	7588 <strtol>

00005b78 <itoa>:
    5b78:	1e93      	subs	r3, r2, #2
    5b7a:	2b22      	cmp	r3, #34	; 0x22
    5b7c:	b510      	push	{r4, lr}
    5b7e:	460c      	mov	r4, r1
    5b80:	d80c      	bhi.n	5b9c <itoa+0x24>
    5b82:	2a0a      	cmp	r2, #10
    5b84:	d003      	beq.n	5b8e <itoa+0x16>
    5b86:	f001 fd0d 	bl	75a4 <__utoa>
    5b8a:	4620      	mov	r0, r4
    5b8c:	bd10      	pop	{r4, pc}
    5b8e:	2800      	cmp	r0, #0
    5b90:	daf9      	bge.n	5b86 <itoa+0xe>
    5b92:	232d      	movs	r3, #45	; 0x2d
    5b94:	f801 3b01 	strb.w	r3, [r1], #1
    5b98:	4240      	negs	r0, r0
    5b9a:	e7f4      	b.n	5b86 <itoa+0xe>
    5b9c:	2300      	movs	r3, #0
    5b9e:	700b      	strb	r3, [r1, #0]
    5ba0:	4618      	mov	r0, r3
    5ba2:	bd10      	pop	{r4, pc}

00005ba4 <malloc>:
    5ba4:	4b02      	ldr	r3, [pc, #8]	; (5bb0 <malloc+0xc>)
    5ba6:	4601      	mov	r1, r0
    5ba8:	6818      	ldr	r0, [r3, #0]
    5baa:	f000 b80b 	b.w	5bc4 <_malloc_r>
    5bae:	bf00      	nop
    5bb0:	20001b18 	.word	0x20001b18

00005bb4 <free>:
    5bb4:	4b02      	ldr	r3, [pc, #8]	; (5bc0 <free+0xc>)
    5bb6:	4601      	mov	r1, r0
    5bb8:	6818      	ldr	r0, [r3, #0]
    5bba:	f002 bdd3 	b.w	8764 <_free_r>
    5bbe:	bf00      	nop
    5bc0:	20001b18 	.word	0x20001b18

00005bc4 <_malloc_r>:
    5bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bc8:	f101 060b 	add.w	r6, r1, #11
    5bcc:	2e16      	cmp	r6, #22
    5bce:	b083      	sub	sp, #12
    5bd0:	4604      	mov	r4, r0
    5bd2:	d824      	bhi.n	5c1e <_malloc_r+0x5a>
    5bd4:	2910      	cmp	r1, #16
    5bd6:	f200 80ba 	bhi.w	5d4e <_malloc_r+0x18a>
    5bda:	f000 faa3 	bl	6124 <__malloc_lock>
    5bde:	2610      	movs	r6, #16
    5be0:	2218      	movs	r2, #24
    5be2:	2002      	movs	r0, #2
    5be4:	4fb5      	ldr	r7, [pc, #724]	; (5ebc <_malloc_r+0x2f8>)
    5be6:	443a      	add	r2, r7
    5be8:	f1a2 0108 	sub.w	r1, r2, #8
    5bec:	6853      	ldr	r3, [r2, #4]
    5bee:	428b      	cmp	r3, r1
    5bf0:	f000 80ba 	beq.w	5d68 <_malloc_r+0x1a4>
    5bf4:	685a      	ldr	r2, [r3, #4]
    5bf6:	68d9      	ldr	r1, [r3, #12]
    5bf8:	f022 0203 	bic.w	r2, r2, #3
    5bfc:	441a      	add	r2, r3
    5bfe:	689d      	ldr	r5, [r3, #8]
    5c00:	60e9      	str	r1, [r5, #12]
    5c02:	608d      	str	r5, [r1, #8]
    5c04:	6851      	ldr	r1, [r2, #4]
    5c06:	f041 0101 	orr.w	r1, r1, #1
    5c0a:	4620      	mov	r0, r4
    5c0c:	6051      	str	r1, [r2, #4]
    5c0e:	f103 0508 	add.w	r5, r3, #8
    5c12:	f000 fa8d 	bl	6130 <__malloc_unlock>
    5c16:	4628      	mov	r0, r5
    5c18:	b003      	add	sp, #12
    5c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c1e:	f036 0607 	bics.w	r6, r6, #7
    5c22:	f100 8094 	bmi.w	5d4e <_malloc_r+0x18a>
    5c26:	42b1      	cmp	r1, r6
    5c28:	f200 8091 	bhi.w	5d4e <_malloc_r+0x18a>
    5c2c:	f000 fa7a 	bl	6124 <__malloc_lock>
    5c30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    5c34:	f0c0 819a 	bcc.w	5f6c <_malloc_r+0x3a8>
    5c38:	0a73      	lsrs	r3, r6, #9
    5c3a:	f000 808f 	beq.w	5d5c <_malloc_r+0x198>
    5c3e:	2b04      	cmp	r3, #4
    5c40:	f200 816f 	bhi.w	5f22 <_malloc_r+0x35e>
    5c44:	09b3      	lsrs	r3, r6, #6
    5c46:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5c4a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    5c4e:	00c3      	lsls	r3, r0, #3
    5c50:	4f9a      	ldr	r7, [pc, #616]	; (5ebc <_malloc_r+0x2f8>)
    5c52:	443b      	add	r3, r7
    5c54:	f1a3 0508 	sub.w	r5, r3, #8
    5c58:	685b      	ldr	r3, [r3, #4]
    5c5a:	429d      	cmp	r5, r3
    5c5c:	d106      	bne.n	5c6c <_malloc_r+0xa8>
    5c5e:	e00c      	b.n	5c7a <_malloc_r+0xb6>
    5c60:	2900      	cmp	r1, #0
    5c62:	f280 8127 	bge.w	5eb4 <_malloc_r+0x2f0>
    5c66:	68db      	ldr	r3, [r3, #12]
    5c68:	429d      	cmp	r5, r3
    5c6a:	d006      	beq.n	5c7a <_malloc_r+0xb6>
    5c6c:	685a      	ldr	r2, [r3, #4]
    5c6e:	f022 0203 	bic.w	r2, r2, #3
    5c72:	1b91      	subs	r1, r2, r6
    5c74:	290f      	cmp	r1, #15
    5c76:	ddf3      	ble.n	5c60 <_malloc_r+0x9c>
    5c78:	4660      	mov	r0, ip
    5c7a:	693d      	ldr	r5, [r7, #16]
    5c7c:	f8df c250 	ldr.w	ip, [pc, #592]	; 5ed0 <_malloc_r+0x30c>
    5c80:	4565      	cmp	r5, ip
    5c82:	d07c      	beq.n	5d7e <_malloc_r+0x1ba>
    5c84:	686a      	ldr	r2, [r5, #4]
    5c86:	f022 0203 	bic.w	r2, r2, #3
    5c8a:	1b93      	subs	r3, r2, r6
    5c8c:	2b0f      	cmp	r3, #15
    5c8e:	f300 817b 	bgt.w	5f88 <_malloc_r+0x3c4>
    5c92:	2b00      	cmp	r3, #0
    5c94:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    5c98:	f280 816c 	bge.w	5f74 <_malloc_r+0x3b0>
    5c9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5ca0:	f080 811a 	bcs.w	5ed8 <_malloc_r+0x314>
    5ca4:	08d3      	lsrs	r3, r2, #3
    5ca6:	6879      	ldr	r1, [r7, #4]
    5ca8:	3301      	adds	r3, #1
    5caa:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    5cae:	2201      	movs	r2, #1
    5cb0:	fa02 f20e 	lsl.w	r2, r2, lr
    5cb4:	430a      	orrs	r2, r1
    5cb6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    5cba:	f8c5 e008 	str.w	lr, [r5, #8]
    5cbe:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    5cc2:	3908      	subs	r1, #8
    5cc4:	60e9      	str	r1, [r5, #12]
    5cc6:	607a      	str	r2, [r7, #4]
    5cc8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5ccc:	f8ce 500c 	str.w	r5, [lr, #12]
    5cd0:	1083      	asrs	r3, r0, #2
    5cd2:	2101      	movs	r1, #1
    5cd4:	4099      	lsls	r1, r3
    5cd6:	4291      	cmp	r1, r2
    5cd8:	d857      	bhi.n	5d8a <_malloc_r+0x1c6>
    5cda:	4211      	tst	r1, r2
    5cdc:	d106      	bne.n	5cec <_malloc_r+0x128>
    5cde:	f020 0003 	bic.w	r0, r0, #3
    5ce2:	0049      	lsls	r1, r1, #1
    5ce4:	4211      	tst	r1, r2
    5ce6:	f100 0004 	add.w	r0, r0, #4
    5cea:	d0fa      	beq.n	5ce2 <_malloc_r+0x11e>
    5cec:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    5cf0:	464d      	mov	r5, r9
    5cf2:	4686      	mov	lr, r0
    5cf4:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5cf8:	4545      	cmp	r5, r8
    5cfa:	d108      	bne.n	5d0e <_malloc_r+0x14a>
    5cfc:	e11d      	b.n	5f3a <_malloc_r+0x376>
    5cfe:	2b00      	cmp	r3, #0
    5d00:	f280 8124 	bge.w	5f4c <_malloc_r+0x388>
    5d04:	f8d8 800c 	ldr.w	r8, [r8, #12]
    5d08:	4545      	cmp	r5, r8
    5d0a:	f000 8116 	beq.w	5f3a <_malloc_r+0x376>
    5d0e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5d12:	f022 0203 	bic.w	r2, r2, #3
    5d16:	1b93      	subs	r3, r2, r6
    5d18:	2b0f      	cmp	r3, #15
    5d1a:	ddf0      	ble.n	5cfe <_malloc_r+0x13a>
    5d1c:	4620      	mov	r0, r4
    5d1e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    5d22:	eb08 0106 	add.w	r1, r8, r6
    5d26:	f046 0601 	orr.w	r6, r6, #1
    5d2a:	f8c8 6004 	str.w	r6, [r8, #4]
    5d2e:	60ec      	str	r4, [r5, #12]
    5d30:	60a5      	str	r5, [r4, #8]
    5d32:	f043 0401 	orr.w	r4, r3, #1
    5d36:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5d3a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5d3e:	604c      	str	r4, [r1, #4]
    5d40:	f848 3002 	str.w	r3, [r8, r2]
    5d44:	f000 f9f4 	bl	6130 <__malloc_unlock>
    5d48:	f108 0508 	add.w	r5, r8, #8
    5d4c:	e002      	b.n	5d54 <_malloc_r+0x190>
    5d4e:	230c      	movs	r3, #12
    5d50:	6023      	str	r3, [r4, #0]
    5d52:	2500      	movs	r5, #0
    5d54:	4628      	mov	r0, r5
    5d56:	b003      	add	sp, #12
    5d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
    5d60:	2040      	movs	r0, #64	; 0x40
    5d62:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    5d66:	e773      	b.n	5c50 <_malloc_r+0x8c>
    5d68:	68d3      	ldr	r3, [r2, #12]
    5d6a:	429a      	cmp	r2, r3
    5d6c:	bf08      	it	eq
    5d6e:	3002      	addeq	r0, #2
    5d70:	f47f af40 	bne.w	5bf4 <_malloc_r+0x30>
    5d74:	693d      	ldr	r5, [r7, #16]
    5d76:	f8df c158 	ldr.w	ip, [pc, #344]	; 5ed0 <_malloc_r+0x30c>
    5d7a:	4565      	cmp	r5, ip
    5d7c:	d182      	bne.n	5c84 <_malloc_r+0xc0>
    5d7e:	687a      	ldr	r2, [r7, #4]
    5d80:	1083      	asrs	r3, r0, #2
    5d82:	2101      	movs	r1, #1
    5d84:	4099      	lsls	r1, r3
    5d86:	4291      	cmp	r1, r2
    5d88:	d9a7      	bls.n	5cda <_malloc_r+0x116>
    5d8a:	68bd      	ldr	r5, [r7, #8]
    5d8c:	686b      	ldr	r3, [r5, #4]
    5d8e:	f023 0903 	bic.w	r9, r3, #3
    5d92:	454e      	cmp	r6, r9
    5d94:	d803      	bhi.n	5d9e <_malloc_r+0x1da>
    5d96:	eba9 0306 	sub.w	r3, r9, r6
    5d9a:	2b0f      	cmp	r3, #15
    5d9c:	dc7a      	bgt.n	5e94 <_malloc_r+0x2d0>
    5d9e:	f8df b134 	ldr.w	fp, [pc, #308]	; 5ed4 <_malloc_r+0x310>
    5da2:	4b47      	ldr	r3, [pc, #284]	; (5ec0 <_malloc_r+0x2fc>)
    5da4:	f8db 2000 	ldr.w	r2, [fp]
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	3201      	adds	r2, #1
    5dac:	4433      	add	r3, r6
    5dae:	eb05 0a09 	add.w	sl, r5, r9
    5db2:	f000 8133 	beq.w	601c <_malloc_r+0x458>
    5db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5dba:	330f      	adds	r3, #15
    5dbc:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    5dc0:	f028 080f 	bic.w	r8, r8, #15
    5dc4:	4641      	mov	r1, r8
    5dc6:	4620      	mov	r0, r4
    5dc8:	f002 f986 	bl	80d8 <_sbrk_r>
    5dcc:	1c41      	adds	r1, r0, #1
    5dce:	4602      	mov	r2, r0
    5dd0:	f000 80f3 	beq.w	5fba <_malloc_r+0x3f6>
    5dd4:	4582      	cmp	sl, r0
    5dd6:	f200 80ee 	bhi.w	5fb6 <_malloc_r+0x3f2>
    5dda:	4b3a      	ldr	r3, [pc, #232]	; (5ec4 <_malloc_r+0x300>)
    5ddc:	6819      	ldr	r1, [r3, #0]
    5dde:	4441      	add	r1, r8
    5de0:	6019      	str	r1, [r3, #0]
    5de2:	4608      	mov	r0, r1
    5de4:	f000 814e 	beq.w	6084 <_malloc_r+0x4c0>
    5de8:	f8db 1000 	ldr.w	r1, [fp]
    5dec:	9301      	str	r3, [sp, #4]
    5dee:	3101      	adds	r1, #1
    5df0:	bf1b      	ittet	ne
    5df2:	eba2 010a 	subne.w	r1, r2, sl
    5df6:	1809      	addne	r1, r1, r0
    5df8:	f8cb 2000 	streq.w	r2, [fp]
    5dfc:	6019      	strne	r1, [r3, #0]
    5dfe:	f012 0b07 	ands.w	fp, r2, #7
    5e02:	f000 8117 	beq.w	6034 <_malloc_r+0x470>
    5e06:	f1cb 0108 	rsb	r1, fp, #8
    5e0a:	440a      	add	r2, r1
    5e0c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    5e10:	4490      	add	r8, r2
    5e12:	3108      	adds	r1, #8
    5e14:	eba1 0108 	sub.w	r1, r1, r8
    5e18:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5e1c:	4651      	mov	r1, sl
    5e1e:	4620      	mov	r0, r4
    5e20:	9200      	str	r2, [sp, #0]
    5e22:	f002 f959 	bl	80d8 <_sbrk_r>
    5e26:	1c42      	adds	r2, r0, #1
    5e28:	e9dd 2300 	ldrd	r2, r3, [sp]
    5e2c:	f000 814f 	beq.w	60ce <_malloc_r+0x50a>
    5e30:	1a80      	subs	r0, r0, r2
    5e32:	eb00 080a 	add.w	r8, r0, sl
    5e36:	6819      	ldr	r1, [r3, #0]
    5e38:	60ba      	str	r2, [r7, #8]
    5e3a:	f048 0001 	orr.w	r0, r8, #1
    5e3e:	4451      	add	r1, sl
    5e40:	42bd      	cmp	r5, r7
    5e42:	6050      	str	r0, [r2, #4]
    5e44:	6019      	str	r1, [r3, #0]
    5e46:	f000 8129 	beq.w	609c <_malloc_r+0x4d8>
    5e4a:	f1b9 0f0f 	cmp.w	r9, #15
    5e4e:	f240 8127 	bls.w	60a0 <_malloc_r+0x4dc>
    5e52:	6868      	ldr	r0, [r5, #4]
    5e54:	f1a9 0c0c 	sub.w	ip, r9, #12
    5e58:	f02c 0c07 	bic.w	ip, ip, #7
    5e5c:	f000 0001 	and.w	r0, r0, #1
    5e60:	ea40 000c 	orr.w	r0, r0, ip
    5e64:	6068      	str	r0, [r5, #4]
    5e66:	f04f 0e05 	mov.w	lr, #5
    5e6a:	eb05 000c 	add.w	r0, r5, ip
    5e6e:	f1bc 0f0f 	cmp.w	ip, #15
    5e72:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    5e76:	f200 8132 	bhi.w	60de <_malloc_r+0x51a>
    5e7a:	6850      	ldr	r0, [r2, #4]
    5e7c:	4615      	mov	r5, r2
    5e7e:	4b12      	ldr	r3, [pc, #72]	; (5ec8 <_malloc_r+0x304>)
    5e80:	681a      	ldr	r2, [r3, #0]
    5e82:	428a      	cmp	r2, r1
    5e84:	bf38      	it	cc
    5e86:	6019      	strcc	r1, [r3, #0]
    5e88:	4b10      	ldr	r3, [pc, #64]	; (5ecc <_malloc_r+0x308>)
    5e8a:	681a      	ldr	r2, [r3, #0]
    5e8c:	428a      	cmp	r2, r1
    5e8e:	bf38      	it	cc
    5e90:	6019      	strcc	r1, [r3, #0]
    5e92:	e094      	b.n	5fbe <_malloc_r+0x3fa>
    5e94:	19aa      	adds	r2, r5, r6
    5e96:	f043 0301 	orr.w	r3, r3, #1
    5e9a:	f046 0601 	orr.w	r6, r6, #1
    5e9e:	606e      	str	r6, [r5, #4]
    5ea0:	4620      	mov	r0, r4
    5ea2:	60ba      	str	r2, [r7, #8]
    5ea4:	6053      	str	r3, [r2, #4]
    5ea6:	f000 f943 	bl	6130 <__malloc_unlock>
    5eaa:	3508      	adds	r5, #8
    5eac:	4628      	mov	r0, r5
    5eae:	b003      	add	sp, #12
    5eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5eb4:	68d9      	ldr	r1, [r3, #12]
    5eb6:	441a      	add	r2, r3
    5eb8:	e6a1      	b.n	5bfe <_malloc_r+0x3a>
    5eba:	bf00      	nop
    5ebc:	200016fc 	.word	0x200016fc
    5ec0:	20003190 	.word	0x20003190
    5ec4:	20003160 	.word	0x20003160
    5ec8:	20003188 	.word	0x20003188
    5ecc:	2000318c 	.word	0x2000318c
    5ed0:	20001704 	.word	0x20001704
    5ed4:	20001b04 	.word	0x20001b04
    5ed8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5edc:	ea4f 2352 	mov.w	r3, r2, lsr #9
    5ee0:	d363      	bcc.n	5faa <_malloc_r+0x3e6>
    5ee2:	2b14      	cmp	r3, #20
    5ee4:	f200 80b7 	bhi.w	6056 <_malloc_r+0x492>
    5ee8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5eec:	00c9      	lsls	r1, r1, #3
    5eee:	335b      	adds	r3, #91	; 0x5b
    5ef0:	eb07 0e01 	add.w	lr, r7, r1
    5ef4:	5879      	ldr	r1, [r7, r1]
    5ef6:	f1ae 0e08 	sub.w	lr, lr, #8
    5efa:	458e      	cmp	lr, r1
    5efc:	f000 8091 	beq.w	6022 <_malloc_r+0x45e>
    5f00:	684b      	ldr	r3, [r1, #4]
    5f02:	f023 0303 	bic.w	r3, r3, #3
    5f06:	4293      	cmp	r3, r2
    5f08:	d902      	bls.n	5f10 <_malloc_r+0x34c>
    5f0a:	6889      	ldr	r1, [r1, #8]
    5f0c:	458e      	cmp	lr, r1
    5f0e:	d1f7      	bne.n	5f00 <_malloc_r+0x33c>
    5f10:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5f14:	687a      	ldr	r2, [r7, #4]
    5f16:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    5f1a:	f8ce 5008 	str.w	r5, [lr, #8]
    5f1e:	60cd      	str	r5, [r1, #12]
    5f20:	e6d6      	b.n	5cd0 <_malloc_r+0x10c>
    5f22:	2b14      	cmp	r3, #20
    5f24:	d959      	bls.n	5fda <_malloc_r+0x416>
    5f26:	2b54      	cmp	r3, #84	; 0x54
    5f28:	f200 809d 	bhi.w	6066 <_malloc_r+0x4a2>
    5f2c:	0b33      	lsrs	r3, r6, #12
    5f2e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5f32:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    5f36:	00c3      	lsls	r3, r0, #3
    5f38:	e68a      	b.n	5c50 <_malloc_r+0x8c>
    5f3a:	f10e 0e01 	add.w	lr, lr, #1
    5f3e:	f01e 0f03 	tst.w	lr, #3
    5f42:	f105 0508 	add.w	r5, r5, #8
    5f46:	f47f aed5 	bne.w	5cf4 <_malloc_r+0x130>
    5f4a:	e051      	b.n	5ff0 <_malloc_r+0x42c>
    5f4c:	4442      	add	r2, r8
    5f4e:	4645      	mov	r5, r8
    5f50:	6853      	ldr	r3, [r2, #4]
    5f52:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5f56:	f043 0301 	orr.w	r3, r3, #1
    5f5a:	6053      	str	r3, [r2, #4]
    5f5c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    5f60:	4620      	mov	r0, r4
    5f62:	60d9      	str	r1, [r3, #12]
    5f64:	608b      	str	r3, [r1, #8]
    5f66:	f000 f8e3 	bl	6130 <__malloc_unlock>
    5f6a:	e6f3      	b.n	5d54 <_malloc_r+0x190>
    5f6c:	08f0      	lsrs	r0, r6, #3
    5f6e:	f106 0208 	add.w	r2, r6, #8
    5f72:	e637      	b.n	5be4 <_malloc_r+0x20>
    5f74:	442a      	add	r2, r5
    5f76:	4620      	mov	r0, r4
    5f78:	6853      	ldr	r3, [r2, #4]
    5f7a:	f043 0301 	orr.w	r3, r3, #1
    5f7e:	6053      	str	r3, [r2, #4]
    5f80:	3508      	adds	r5, #8
    5f82:	f000 f8d5 	bl	6130 <__malloc_unlock>
    5f86:	e6e5      	b.n	5d54 <_malloc_r+0x190>
    5f88:	19a9      	adds	r1, r5, r6
    5f8a:	4620      	mov	r0, r4
    5f8c:	f046 0601 	orr.w	r6, r6, #1
    5f90:	f043 0401 	orr.w	r4, r3, #1
    5f94:	606e      	str	r6, [r5, #4]
    5f96:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5f9a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5f9e:	604c      	str	r4, [r1, #4]
    5fa0:	50ab      	str	r3, [r5, r2]
    5fa2:	f000 f8c5 	bl	6130 <__malloc_unlock>
    5fa6:	3508      	adds	r5, #8
    5fa8:	e6d4      	b.n	5d54 <_malloc_r+0x190>
    5faa:	0993      	lsrs	r3, r2, #6
    5fac:	f103 0139 	add.w	r1, r3, #57	; 0x39
    5fb0:	00c9      	lsls	r1, r1, #3
    5fb2:	3338      	adds	r3, #56	; 0x38
    5fb4:	e79c      	b.n	5ef0 <_malloc_r+0x32c>
    5fb6:	42bd      	cmp	r5, r7
    5fb8:	d05f      	beq.n	607a <_malloc_r+0x4b6>
    5fba:	68bd      	ldr	r5, [r7, #8]
    5fbc:	6868      	ldr	r0, [r5, #4]
    5fbe:	f020 0803 	bic.w	r8, r0, #3
    5fc2:	4546      	cmp	r6, r8
    5fc4:	eba8 0306 	sub.w	r3, r8, r6
    5fc8:	d802      	bhi.n	5fd0 <_malloc_r+0x40c>
    5fca:	2b0f      	cmp	r3, #15
    5fcc:	f73f af62 	bgt.w	5e94 <_malloc_r+0x2d0>
    5fd0:	4620      	mov	r0, r4
    5fd2:	f000 f8ad 	bl	6130 <__malloc_unlock>
    5fd6:	2500      	movs	r5, #0
    5fd8:	e6bc      	b.n	5d54 <_malloc_r+0x190>
    5fda:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5fde:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    5fe2:	00c3      	lsls	r3, r0, #3
    5fe4:	e634      	b.n	5c50 <_malloc_r+0x8c>
    5fe6:	f859 3908 	ldr.w	r3, [r9], #-8
    5fea:	454b      	cmp	r3, r9
    5fec:	f040 8096 	bne.w	611c <_malloc_r+0x558>
    5ff0:	f010 0f03 	tst.w	r0, #3
    5ff4:	f100 30ff 	add.w	r0, r0, #4294967295
    5ff8:	d1f5      	bne.n	5fe6 <_malloc_r+0x422>
    5ffa:	687b      	ldr	r3, [r7, #4]
    5ffc:	ea23 0301 	bic.w	r3, r3, r1
    6000:	607b      	str	r3, [r7, #4]
    6002:	0049      	lsls	r1, r1, #1
    6004:	4299      	cmp	r1, r3
    6006:	f63f aec0 	bhi.w	5d8a <_malloc_r+0x1c6>
    600a:	b919      	cbnz	r1, 6014 <_malloc_r+0x450>
    600c:	e6bd      	b.n	5d8a <_malloc_r+0x1c6>
    600e:	0049      	lsls	r1, r1, #1
    6010:	f10e 0e04 	add.w	lr, lr, #4
    6014:	4219      	tst	r1, r3
    6016:	d0fa      	beq.n	600e <_malloc_r+0x44a>
    6018:	4670      	mov	r0, lr
    601a:	e667      	b.n	5cec <_malloc_r+0x128>
    601c:	f103 0810 	add.w	r8, r3, #16
    6020:	e6d0      	b.n	5dc4 <_malloc_r+0x200>
    6022:	109a      	asrs	r2, r3, #2
    6024:	f04f 0801 	mov.w	r8, #1
    6028:	687b      	ldr	r3, [r7, #4]
    602a:	fa08 f202 	lsl.w	r2, r8, r2
    602e:	431a      	orrs	r2, r3
    6030:	607a      	str	r2, [r7, #4]
    6032:	e770      	b.n	5f16 <_malloc_r+0x352>
    6034:	eb02 0108 	add.w	r1, r2, r8
    6038:	4249      	negs	r1, r1
    603a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    603e:	4651      	mov	r1, sl
    6040:	4620      	mov	r0, r4
    6042:	9200      	str	r2, [sp, #0]
    6044:	f002 f848 	bl	80d8 <_sbrk_r>
    6048:	1c43      	adds	r3, r0, #1
    604a:	e9dd 2300 	ldrd	r2, r3, [sp]
    604e:	f47f aeef 	bne.w	5e30 <_malloc_r+0x26c>
    6052:	46da      	mov	sl, fp
    6054:	e6ef      	b.n	5e36 <_malloc_r+0x272>
    6056:	2b54      	cmp	r3, #84	; 0x54
    6058:	d825      	bhi.n	60a6 <_malloc_r+0x4e2>
    605a:	0b13      	lsrs	r3, r2, #12
    605c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    6060:	00c9      	lsls	r1, r1, #3
    6062:	336e      	adds	r3, #110	; 0x6e
    6064:	e744      	b.n	5ef0 <_malloc_r+0x32c>
    6066:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    606a:	d825      	bhi.n	60b8 <_malloc_r+0x4f4>
    606c:	0bf3      	lsrs	r3, r6, #15
    606e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    6072:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    6076:	00c3      	lsls	r3, r0, #3
    6078:	e5ea      	b.n	5c50 <_malloc_r+0x8c>
    607a:	4b29      	ldr	r3, [pc, #164]	; (6120 <_malloc_r+0x55c>)
    607c:	6818      	ldr	r0, [r3, #0]
    607e:	4440      	add	r0, r8
    6080:	6018      	str	r0, [r3, #0]
    6082:	e6b1      	b.n	5de8 <_malloc_r+0x224>
    6084:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    6088:	f1bc 0f00 	cmp.w	ip, #0
    608c:	f47f aeac 	bne.w	5de8 <_malloc_r+0x224>
    6090:	68bd      	ldr	r5, [r7, #8]
    6092:	44c8      	add	r8, r9
    6094:	f048 0001 	orr.w	r0, r8, #1
    6098:	6068      	str	r0, [r5, #4]
    609a:	e6f0      	b.n	5e7e <_malloc_r+0x2ba>
    609c:	4615      	mov	r5, r2
    609e:	e6ee      	b.n	5e7e <_malloc_r+0x2ba>
    60a0:	2301      	movs	r3, #1
    60a2:	6053      	str	r3, [r2, #4]
    60a4:	e794      	b.n	5fd0 <_malloc_r+0x40c>
    60a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    60aa:	d823      	bhi.n	60f4 <_malloc_r+0x530>
    60ac:	0bd3      	lsrs	r3, r2, #15
    60ae:	f103 0178 	add.w	r1, r3, #120	; 0x78
    60b2:	00c9      	lsls	r1, r1, #3
    60b4:	3377      	adds	r3, #119	; 0x77
    60b6:	e71b      	b.n	5ef0 <_malloc_r+0x32c>
    60b8:	f240 5254 	movw	r2, #1364	; 0x554
    60bc:	4293      	cmp	r3, r2
    60be:	d823      	bhi.n	6108 <_malloc_r+0x544>
    60c0:	0cb3      	lsrs	r3, r6, #18
    60c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    60c6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    60ca:	00c3      	lsls	r3, r0, #3
    60cc:	e5c0      	b.n	5c50 <_malloc_r+0x8c>
    60ce:	f1ab 0b08 	sub.w	fp, fp, #8
    60d2:	44d8      	add	r8, fp
    60d4:	eba8 0802 	sub.w	r8, r8, r2
    60d8:	f04f 0a00 	mov.w	sl, #0
    60dc:	e6ab      	b.n	5e36 <_malloc_r+0x272>
    60de:	f105 0108 	add.w	r1, r5, #8
    60e2:	4620      	mov	r0, r4
    60e4:	9300      	str	r3, [sp, #0]
    60e6:	f002 fb3d 	bl	8764 <_free_r>
    60ea:	68bd      	ldr	r5, [r7, #8]
    60ec:	9b00      	ldr	r3, [sp, #0]
    60ee:	6868      	ldr	r0, [r5, #4]
    60f0:	6819      	ldr	r1, [r3, #0]
    60f2:	e6c4      	b.n	5e7e <_malloc_r+0x2ba>
    60f4:	f240 5154 	movw	r1, #1364	; 0x554
    60f8:	428b      	cmp	r3, r1
    60fa:	d80b      	bhi.n	6114 <_malloc_r+0x550>
    60fc:	0c93      	lsrs	r3, r2, #18
    60fe:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    6102:	00c9      	lsls	r1, r1, #3
    6104:	337c      	adds	r3, #124	; 0x7c
    6106:	e6f3      	b.n	5ef0 <_malloc_r+0x32c>
    6108:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    610c:	207f      	movs	r0, #127	; 0x7f
    610e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    6112:	e59d      	b.n	5c50 <_malloc_r+0x8c>
    6114:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    6118:	237e      	movs	r3, #126	; 0x7e
    611a:	e6e9      	b.n	5ef0 <_malloc_r+0x32c>
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	e770      	b.n	6002 <_malloc_r+0x43e>
    6120:	20003160 	.word	0x20003160

00006124 <__malloc_lock>:
    6124:	4801      	ldr	r0, [pc, #4]	; (612c <__malloc_lock+0x8>)
    6126:	f002 b82d 	b.w	8184 <__retarget_lock_acquire_recursive>
    612a:	bf00      	nop
    612c:	20003158 	.word	0x20003158

00006130 <__malloc_unlock>:
    6130:	4801      	ldr	r0, [pc, #4]	; (6138 <__malloc_unlock+0x8>)
    6132:	f002 b829 	b.w	8188 <__retarget_lock_release_recursive>
    6136:	bf00      	nop
    6138:	20003158 	.word	0x20003158

0000613c <realloc>:
    613c:	b410      	push	{r4}
    613e:	4c04      	ldr	r4, [pc, #16]	; (6150 <realloc+0x14>)
    6140:	4603      	mov	r3, r0
    6142:	460a      	mov	r2, r1
    6144:	6820      	ldr	r0, [r4, #0]
    6146:	f85d 4b04 	ldr.w	r4, [sp], #4
    614a:	4619      	mov	r1, r3
    614c:	f000 b802 	b.w	6154 <_realloc_r>
    6150:	20001b18 	.word	0x20001b18

00006154 <_realloc_r>:
    6154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6158:	4617      	mov	r7, r2
    615a:	2900      	cmp	r1, #0
    615c:	f000 8098 	beq.w	6290 <_realloc_r+0x13c>
    6160:	460c      	mov	r4, r1
    6162:	f107 050b 	add.w	r5, r7, #11
    6166:	4680      	mov	r8, r0
    6168:	f7ff ffdc 	bl	6124 <__malloc_lock>
    616c:	2d16      	cmp	r5, #22
    616e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    6172:	d85b      	bhi.n	622c <_realloc_r+0xd8>
    6174:	2510      	movs	r5, #16
    6176:	462a      	mov	r2, r5
    6178:	42af      	cmp	r7, r5
    617a:	d85c      	bhi.n	6236 <_realloc_r+0xe2>
    617c:	f021 0603 	bic.w	r6, r1, #3
    6180:	4296      	cmp	r6, r2
    6182:	f1a4 0908 	sub.w	r9, r4, #8
    6186:	da62      	bge.n	624e <_realloc_r+0xfa>
    6188:	4bbc      	ldr	r3, [pc, #752]	; (647c <_realloc_r+0x328>)
    618a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    618e:	eb09 0006 	add.w	r0, r9, r6
    6192:	4584      	cmp	ip, r0
    6194:	f000 8097 	beq.w	62c6 <_realloc_r+0x172>
    6198:	f8d0 c004 	ldr.w	ip, [r0, #4]
    619c:	f02c 0301 	bic.w	r3, ip, #1
    61a0:	4403      	add	r3, r0
    61a2:	685b      	ldr	r3, [r3, #4]
    61a4:	07db      	lsls	r3, r3, #31
    61a6:	d468      	bmi.n	627a <_realloc_r+0x126>
    61a8:	f02c 0c03 	bic.w	ip, ip, #3
    61ac:	eb06 030c 	add.w	r3, r6, ip
    61b0:	4293      	cmp	r3, r2
    61b2:	da47      	bge.n	6244 <_realloc_r+0xf0>
    61b4:	07cb      	lsls	r3, r1, #31
    61b6:	d410      	bmi.n	61da <_realloc_r+0x86>
    61b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    61bc:	eba9 0a03 	sub.w	sl, r9, r3
    61c0:	f8da 3004 	ldr.w	r3, [sl, #4]
    61c4:	f023 0103 	bic.w	r1, r3, #3
    61c8:	448c      	add	ip, r1
    61ca:	44b4      	add	ip, r6
    61cc:	4594      	cmp	ip, r2
    61ce:	f280 8111 	bge.w	63f4 <_realloc_r+0x2a0>
    61d2:	1873      	adds	r3, r6, r1
    61d4:	4293      	cmp	r3, r2
    61d6:	f280 80e8 	bge.w	63aa <_realloc_r+0x256>
    61da:	4639      	mov	r1, r7
    61dc:	4640      	mov	r0, r8
    61de:	f7ff fcf1 	bl	5bc4 <_malloc_r>
    61e2:	4607      	mov	r7, r0
    61e4:	b1e0      	cbz	r0, 6220 <_realloc_r+0xcc>
    61e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    61ea:	f023 0301 	bic.w	r3, r3, #1
    61ee:	444b      	add	r3, r9
    61f0:	f1a0 0208 	sub.w	r2, r0, #8
    61f4:	4293      	cmp	r3, r2
    61f6:	f000 80d2 	beq.w	639e <_realloc_r+0x24a>
    61fa:	1f32      	subs	r2, r6, #4
    61fc:	2a24      	cmp	r2, #36	; 0x24
    61fe:	f200 80f5 	bhi.w	63ec <_realloc_r+0x298>
    6202:	2a13      	cmp	r2, #19
    6204:	f200 80ac 	bhi.w	6360 <_realloc_r+0x20c>
    6208:	4603      	mov	r3, r0
    620a:	4622      	mov	r2, r4
    620c:	6811      	ldr	r1, [r2, #0]
    620e:	6019      	str	r1, [r3, #0]
    6210:	6851      	ldr	r1, [r2, #4]
    6212:	6059      	str	r1, [r3, #4]
    6214:	6892      	ldr	r2, [r2, #8]
    6216:	609a      	str	r2, [r3, #8]
    6218:	4621      	mov	r1, r4
    621a:	4640      	mov	r0, r8
    621c:	f002 faa2 	bl	8764 <_free_r>
    6220:	4640      	mov	r0, r8
    6222:	f7ff ff85 	bl	6130 <__malloc_unlock>
    6226:	4638      	mov	r0, r7
    6228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    622c:	f025 0507 	bic.w	r5, r5, #7
    6230:	2d00      	cmp	r5, #0
    6232:	462a      	mov	r2, r5
    6234:	daa0      	bge.n	6178 <_realloc_r+0x24>
    6236:	230c      	movs	r3, #12
    6238:	f8c8 3000 	str.w	r3, [r8]
    623c:	2700      	movs	r7, #0
    623e:	4638      	mov	r0, r7
    6240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6244:	461e      	mov	r6, r3
    6246:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    624a:	60d3      	str	r3, [r2, #12]
    624c:	609a      	str	r2, [r3, #8]
    624e:	1b73      	subs	r3, r6, r5
    6250:	2b0f      	cmp	r3, #15
    6252:	d822      	bhi.n	629a <_realloc_r+0x146>
    6254:	f8d9 3004 	ldr.w	r3, [r9, #4]
    6258:	f003 0301 	and.w	r3, r3, #1
    625c:	4333      	orrs	r3, r6
    625e:	444e      	add	r6, r9
    6260:	f8c9 3004 	str.w	r3, [r9, #4]
    6264:	6873      	ldr	r3, [r6, #4]
    6266:	f043 0301 	orr.w	r3, r3, #1
    626a:	6073      	str	r3, [r6, #4]
    626c:	4640      	mov	r0, r8
    626e:	4627      	mov	r7, r4
    6270:	f7ff ff5e 	bl	6130 <__malloc_unlock>
    6274:	4638      	mov	r0, r7
    6276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    627a:	07c9      	lsls	r1, r1, #31
    627c:	d4ad      	bmi.n	61da <_realloc_r+0x86>
    627e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6282:	eba9 0a03 	sub.w	sl, r9, r3
    6286:	f8da 1004 	ldr.w	r1, [sl, #4]
    628a:	f021 0103 	bic.w	r1, r1, #3
    628e:	e7a0      	b.n	61d2 <_realloc_r+0x7e>
    6290:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6294:	4611      	mov	r1, r2
    6296:	f7ff bc95 	b.w	5bc4 <_malloc_r>
    629a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    629e:	eb09 0105 	add.w	r1, r9, r5
    62a2:	f002 0201 	and.w	r2, r2, #1
    62a6:	444e      	add	r6, r9
    62a8:	f043 0301 	orr.w	r3, r3, #1
    62ac:	432a      	orrs	r2, r5
    62ae:	f8c9 2004 	str.w	r2, [r9, #4]
    62b2:	604b      	str	r3, [r1, #4]
    62b4:	6873      	ldr	r3, [r6, #4]
    62b6:	f043 0301 	orr.w	r3, r3, #1
    62ba:	3108      	adds	r1, #8
    62bc:	6073      	str	r3, [r6, #4]
    62be:	4640      	mov	r0, r8
    62c0:	f002 fa50 	bl	8764 <_free_r>
    62c4:	e7d2      	b.n	626c <_realloc_r+0x118>
    62c6:	f8dc 0004 	ldr.w	r0, [ip, #4]
    62ca:	f020 0b03 	bic.w	fp, r0, #3
    62ce:	eb06 0c0b 	add.w	ip, r6, fp
    62d2:	f105 0010 	add.w	r0, r5, #16
    62d6:	4584      	cmp	ip, r0
    62d8:	da4d      	bge.n	6376 <_realloc_r+0x222>
    62da:	07c9      	lsls	r1, r1, #31
    62dc:	f53f af7d 	bmi.w	61da <_realloc_r+0x86>
    62e0:	f854 1c08 	ldr.w	r1, [r4, #-8]
    62e4:	eba9 0a01 	sub.w	sl, r9, r1
    62e8:	f8da 1004 	ldr.w	r1, [sl, #4]
    62ec:	f021 0103 	bic.w	r1, r1, #3
    62f0:	448b      	add	fp, r1
    62f2:	44b3      	add	fp, r6
    62f4:	4558      	cmp	r0, fp
    62f6:	f73f af6c 	bgt.w	61d2 <_realloc_r+0x7e>
    62fa:	4657      	mov	r7, sl
    62fc:	f8da 100c 	ldr.w	r1, [sl, #12]
    6300:	f857 0f08 	ldr.w	r0, [r7, #8]!
    6304:	1f32      	subs	r2, r6, #4
    6306:	2a24      	cmp	r2, #36	; 0x24
    6308:	60c1      	str	r1, [r0, #12]
    630a:	6088      	str	r0, [r1, #8]
    630c:	f200 80db 	bhi.w	64c6 <_realloc_r+0x372>
    6310:	2a13      	cmp	r2, #19
    6312:	f240 80d6 	bls.w	64c2 <_realloc_r+0x36e>
    6316:	6821      	ldr	r1, [r4, #0]
    6318:	f8ca 1008 	str.w	r1, [sl, #8]
    631c:	6861      	ldr	r1, [r4, #4]
    631e:	f8ca 100c 	str.w	r1, [sl, #12]
    6322:	2a1b      	cmp	r2, #27
    6324:	f200 80df 	bhi.w	64e6 <_realloc_r+0x392>
    6328:	3408      	adds	r4, #8
    632a:	f10a 0210 	add.w	r2, sl, #16
    632e:	6821      	ldr	r1, [r4, #0]
    6330:	6011      	str	r1, [r2, #0]
    6332:	6861      	ldr	r1, [r4, #4]
    6334:	6051      	str	r1, [r2, #4]
    6336:	68a1      	ldr	r1, [r4, #8]
    6338:	6091      	str	r1, [r2, #8]
    633a:	eb0a 0105 	add.w	r1, sl, r5
    633e:	ebab 0205 	sub.w	r2, fp, r5
    6342:	f042 0201 	orr.w	r2, r2, #1
    6346:	6099      	str	r1, [r3, #8]
    6348:	604a      	str	r2, [r1, #4]
    634a:	f8da 3004 	ldr.w	r3, [sl, #4]
    634e:	f003 0301 	and.w	r3, r3, #1
    6352:	432b      	orrs	r3, r5
    6354:	4640      	mov	r0, r8
    6356:	f8ca 3004 	str.w	r3, [sl, #4]
    635a:	f7ff fee9 	bl	6130 <__malloc_unlock>
    635e:	e76e      	b.n	623e <_realloc_r+0xea>
    6360:	6823      	ldr	r3, [r4, #0]
    6362:	6003      	str	r3, [r0, #0]
    6364:	6863      	ldr	r3, [r4, #4]
    6366:	6043      	str	r3, [r0, #4]
    6368:	2a1b      	cmp	r2, #27
    636a:	d868      	bhi.n	643e <_realloc_r+0x2ea>
    636c:	f104 0208 	add.w	r2, r4, #8
    6370:	f100 0308 	add.w	r3, r0, #8
    6374:	e74a      	b.n	620c <_realloc_r+0xb8>
    6376:	eb09 0205 	add.w	r2, r9, r5
    637a:	609a      	str	r2, [r3, #8]
    637c:	ebac 0305 	sub.w	r3, ip, r5
    6380:	f043 0301 	orr.w	r3, r3, #1
    6384:	6053      	str	r3, [r2, #4]
    6386:	f854 3c04 	ldr.w	r3, [r4, #-4]
    638a:	f003 0301 	and.w	r3, r3, #1
    638e:	432b      	orrs	r3, r5
    6390:	4640      	mov	r0, r8
    6392:	f844 3c04 	str.w	r3, [r4, #-4]
    6396:	f7ff fecb 	bl	6130 <__malloc_unlock>
    639a:	4627      	mov	r7, r4
    639c:	e74f      	b.n	623e <_realloc_r+0xea>
    639e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    63a2:	f023 0303 	bic.w	r3, r3, #3
    63a6:	441e      	add	r6, r3
    63a8:	e751      	b.n	624e <_realloc_r+0xfa>
    63aa:	4657      	mov	r7, sl
    63ac:	f8da 100c 	ldr.w	r1, [sl, #12]
    63b0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    63b4:	1f32      	subs	r2, r6, #4
    63b6:	2a24      	cmp	r2, #36	; 0x24
    63b8:	60c1      	str	r1, [r0, #12]
    63ba:	6088      	str	r0, [r1, #8]
    63bc:	d84c      	bhi.n	6458 <_realloc_r+0x304>
    63be:	2a13      	cmp	r2, #19
    63c0:	d948      	bls.n	6454 <_realloc_r+0x300>
    63c2:	6821      	ldr	r1, [r4, #0]
    63c4:	f8ca 1008 	str.w	r1, [sl, #8]
    63c8:	6861      	ldr	r1, [r4, #4]
    63ca:	f8ca 100c 	str.w	r1, [sl, #12]
    63ce:	2a1b      	cmp	r2, #27
    63d0:	d856      	bhi.n	6480 <_realloc_r+0x32c>
    63d2:	3408      	adds	r4, #8
    63d4:	f10a 0210 	add.w	r2, sl, #16
    63d8:	461e      	mov	r6, r3
    63da:	6823      	ldr	r3, [r4, #0]
    63dc:	6013      	str	r3, [r2, #0]
    63de:	6863      	ldr	r3, [r4, #4]
    63e0:	6053      	str	r3, [r2, #4]
    63e2:	68a3      	ldr	r3, [r4, #8]
    63e4:	6093      	str	r3, [r2, #8]
    63e6:	46d1      	mov	r9, sl
    63e8:	463c      	mov	r4, r7
    63ea:	e730      	b.n	624e <_realloc_r+0xfa>
    63ec:	4621      	mov	r1, r4
    63ee:	f001 fa6f 	bl	78d0 <memmove>
    63f2:	e711      	b.n	6218 <_realloc_r+0xc4>
    63f4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    63f8:	4657      	mov	r7, sl
    63fa:	60cb      	str	r3, [r1, #12]
    63fc:	6099      	str	r1, [r3, #8]
    63fe:	f857 1f08 	ldr.w	r1, [r7, #8]!
    6402:	f8da 300c 	ldr.w	r3, [sl, #12]
    6406:	60cb      	str	r3, [r1, #12]
    6408:	1f32      	subs	r2, r6, #4
    640a:	2a24      	cmp	r2, #36	; 0x24
    640c:	6099      	str	r1, [r3, #8]
    640e:	d82d      	bhi.n	646c <_realloc_r+0x318>
    6410:	2a13      	cmp	r2, #19
    6412:	d929      	bls.n	6468 <_realloc_r+0x314>
    6414:	6823      	ldr	r3, [r4, #0]
    6416:	f8ca 3008 	str.w	r3, [sl, #8]
    641a:	6863      	ldr	r3, [r4, #4]
    641c:	f8ca 300c 	str.w	r3, [sl, #12]
    6420:	2a1b      	cmp	r2, #27
    6422:	d842      	bhi.n	64aa <_realloc_r+0x356>
    6424:	3408      	adds	r4, #8
    6426:	f10a 0310 	add.w	r3, sl, #16
    642a:	6822      	ldr	r2, [r4, #0]
    642c:	601a      	str	r2, [r3, #0]
    642e:	6862      	ldr	r2, [r4, #4]
    6430:	605a      	str	r2, [r3, #4]
    6432:	68a2      	ldr	r2, [r4, #8]
    6434:	609a      	str	r2, [r3, #8]
    6436:	4666      	mov	r6, ip
    6438:	46d1      	mov	r9, sl
    643a:	463c      	mov	r4, r7
    643c:	e707      	b.n	624e <_realloc_r+0xfa>
    643e:	68a3      	ldr	r3, [r4, #8]
    6440:	6083      	str	r3, [r0, #8]
    6442:	68e3      	ldr	r3, [r4, #12]
    6444:	60c3      	str	r3, [r0, #12]
    6446:	2a24      	cmp	r2, #36	; 0x24
    6448:	d026      	beq.n	6498 <_realloc_r+0x344>
    644a:	f104 0210 	add.w	r2, r4, #16
    644e:	f100 0310 	add.w	r3, r0, #16
    6452:	e6db      	b.n	620c <_realloc_r+0xb8>
    6454:	463a      	mov	r2, r7
    6456:	e7bf      	b.n	63d8 <_realloc_r+0x284>
    6458:	4621      	mov	r1, r4
    645a:	4638      	mov	r0, r7
    645c:	461e      	mov	r6, r3
    645e:	46d1      	mov	r9, sl
    6460:	f001 fa36 	bl	78d0 <memmove>
    6464:	463c      	mov	r4, r7
    6466:	e6f2      	b.n	624e <_realloc_r+0xfa>
    6468:	463b      	mov	r3, r7
    646a:	e7de      	b.n	642a <_realloc_r+0x2d6>
    646c:	4621      	mov	r1, r4
    646e:	4638      	mov	r0, r7
    6470:	4666      	mov	r6, ip
    6472:	46d1      	mov	r9, sl
    6474:	f001 fa2c 	bl	78d0 <memmove>
    6478:	463c      	mov	r4, r7
    647a:	e6e8      	b.n	624e <_realloc_r+0xfa>
    647c:	200016fc 	.word	0x200016fc
    6480:	68a1      	ldr	r1, [r4, #8]
    6482:	f8ca 1010 	str.w	r1, [sl, #16]
    6486:	68e1      	ldr	r1, [r4, #12]
    6488:	f8ca 1014 	str.w	r1, [sl, #20]
    648c:	2a24      	cmp	r2, #36	; 0x24
    648e:	d020      	beq.n	64d2 <_realloc_r+0x37e>
    6490:	3410      	adds	r4, #16
    6492:	f10a 0218 	add.w	r2, sl, #24
    6496:	e79f      	b.n	63d8 <_realloc_r+0x284>
    6498:	6923      	ldr	r3, [r4, #16]
    649a:	6103      	str	r3, [r0, #16]
    649c:	6961      	ldr	r1, [r4, #20]
    649e:	6141      	str	r1, [r0, #20]
    64a0:	f104 0218 	add.w	r2, r4, #24
    64a4:	f100 0318 	add.w	r3, r0, #24
    64a8:	e6b0      	b.n	620c <_realloc_r+0xb8>
    64aa:	68a3      	ldr	r3, [r4, #8]
    64ac:	f8ca 3010 	str.w	r3, [sl, #16]
    64b0:	68e3      	ldr	r3, [r4, #12]
    64b2:	f8ca 3014 	str.w	r3, [sl, #20]
    64b6:	2a24      	cmp	r2, #36	; 0x24
    64b8:	d021      	beq.n	64fe <_realloc_r+0x3aa>
    64ba:	3410      	adds	r4, #16
    64bc:	f10a 0318 	add.w	r3, sl, #24
    64c0:	e7b3      	b.n	642a <_realloc_r+0x2d6>
    64c2:	463a      	mov	r2, r7
    64c4:	e733      	b.n	632e <_realloc_r+0x1da>
    64c6:	4621      	mov	r1, r4
    64c8:	4638      	mov	r0, r7
    64ca:	f001 fa01 	bl	78d0 <memmove>
    64ce:	4b16      	ldr	r3, [pc, #88]	; (6528 <_realloc_r+0x3d4>)
    64d0:	e733      	b.n	633a <_realloc_r+0x1e6>
    64d2:	6922      	ldr	r2, [r4, #16]
    64d4:	f8ca 2018 	str.w	r2, [sl, #24]
    64d8:	6962      	ldr	r2, [r4, #20]
    64da:	f8ca 201c 	str.w	r2, [sl, #28]
    64de:	3418      	adds	r4, #24
    64e0:	f10a 0220 	add.w	r2, sl, #32
    64e4:	e778      	b.n	63d8 <_realloc_r+0x284>
    64e6:	68a1      	ldr	r1, [r4, #8]
    64e8:	f8ca 1010 	str.w	r1, [sl, #16]
    64ec:	68e1      	ldr	r1, [r4, #12]
    64ee:	f8ca 1014 	str.w	r1, [sl, #20]
    64f2:	2a24      	cmp	r2, #36	; 0x24
    64f4:	d00d      	beq.n	6512 <_realloc_r+0x3be>
    64f6:	3410      	adds	r4, #16
    64f8:	f10a 0218 	add.w	r2, sl, #24
    64fc:	e717      	b.n	632e <_realloc_r+0x1da>
    64fe:	6923      	ldr	r3, [r4, #16]
    6500:	f8ca 3018 	str.w	r3, [sl, #24]
    6504:	6963      	ldr	r3, [r4, #20]
    6506:	f8ca 301c 	str.w	r3, [sl, #28]
    650a:	3418      	adds	r4, #24
    650c:	f10a 0320 	add.w	r3, sl, #32
    6510:	e78b      	b.n	642a <_realloc_r+0x2d6>
    6512:	6922      	ldr	r2, [r4, #16]
    6514:	f8ca 2018 	str.w	r2, [sl, #24]
    6518:	6962      	ldr	r2, [r4, #20]
    651a:	f8ca 201c 	str.w	r2, [sl, #28]
    651e:	3418      	adds	r4, #24
    6520:	f10a 0220 	add.w	r2, sl, #32
    6524:	e703      	b.n	632e <_realloc_r+0x1da>
    6526:	bf00      	nop
    6528:	200016fc 	.word	0x200016fc
    652c:	00000000 	.word	0x00000000

00006530 <_strtod_l>:
    6530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6534:	ed2d 8b10 	vpush	{d8-d15}
    6538:	b097      	sub	sp, #92	; 0x5c
    653a:	468a      	mov	sl, r1
    653c:	2100      	movs	r1, #0
    653e:	9207      	str	r2, [sp, #28]
    6540:	9112      	str	r1, [sp, #72]	; 0x48
    6542:	2200      	movs	r2, #0
    6544:	2100      	movs	r1, #0
    6546:	e9cd 1204 	strd	r1, r2, [sp, #16]
    654a:	4680      	mov	r8, r0
    654c:	4651      	mov	r1, sl
    654e:	9111      	str	r1, [sp, #68]	; 0x44
    6550:	460f      	mov	r7, r1
    6552:	f811 2b01 	ldrb.w	r2, [r1], #1
    6556:	2a2d      	cmp	r2, #45	; 0x2d
    6558:	d85e      	bhi.n	6618 <_strtod_l+0xe8>
    655a:	a001      	add	r0, pc, #4	; (adr r0, 6560 <_strtod_l+0x30>)
    655c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    6560:	00006701 	.word	0x00006701
    6564:	00006619 	.word	0x00006619
    6568:	00006619 	.word	0x00006619
    656c:	00006619 	.word	0x00006619
    6570:	00006619 	.word	0x00006619
    6574:	00006619 	.word	0x00006619
    6578:	00006619 	.word	0x00006619
    657c:	00006619 	.word	0x00006619
    6580:	00006619 	.word	0x00006619
    6584:	0000654f 	.word	0x0000654f
    6588:	0000654f 	.word	0x0000654f
    658c:	0000654f 	.word	0x0000654f
    6590:	0000654f 	.word	0x0000654f
    6594:	0000654f 	.word	0x0000654f
    6598:	00006619 	.word	0x00006619
    659c:	00006619 	.word	0x00006619
    65a0:	00006619 	.word	0x00006619
    65a4:	00006619 	.word	0x00006619
    65a8:	00006619 	.word	0x00006619
    65ac:	00006619 	.word	0x00006619
    65b0:	00006619 	.word	0x00006619
    65b4:	00006619 	.word	0x00006619
    65b8:	00006619 	.word	0x00006619
    65bc:	00006619 	.word	0x00006619
    65c0:	00006619 	.word	0x00006619
    65c4:	00006619 	.word	0x00006619
    65c8:	00006619 	.word	0x00006619
    65cc:	00006619 	.word	0x00006619
    65d0:	00006619 	.word	0x00006619
    65d4:	00006619 	.word	0x00006619
    65d8:	00006619 	.word	0x00006619
    65dc:	00006619 	.word	0x00006619
    65e0:	0000654f 	.word	0x0000654f
    65e4:	00006619 	.word	0x00006619
    65e8:	00006619 	.word	0x00006619
    65ec:	00006619 	.word	0x00006619
    65f0:	00006619 	.word	0x00006619
    65f4:	00006619 	.word	0x00006619
    65f8:	00006619 	.word	0x00006619
    65fc:	00006619 	.word	0x00006619
    6600:	00006619 	.word	0x00006619
    6604:	00006619 	.word	0x00006619
    6608:	00006619 	.word	0x00006619
    660c:	00006d3b 	.word	0x00006d3b
    6610:	00006619 	.word	0x00006619
    6614:	00006d27 	.word	0x00006d27
    6618:	2100      	movs	r1, #0
    661a:	9109      	str	r1, [sp, #36]	; 0x24
    661c:	2a30      	cmp	r2, #48	; 0x30
    661e:	d07d      	beq.n	671c <_strtod_l+0x1ec>
    6620:	2300      	movs	r3, #0
    6622:	9308      	str	r3, [sp, #32]
    6624:	2a2f      	cmp	r2, #47	; 0x2f
    6626:	4614      	mov	r4, r2
    6628:	f240 84cd 	bls.w	6fc6 <_strtod_l+0xa96>
    662c:	f04f 0900 	mov.w	r9, #0
    6630:	4638      	mov	r0, r7
    6632:	464e      	mov	r6, r9
    6634:	464d      	mov	r5, r9
    6636:	e012      	b.n	665e <_strtod_l+0x12e>
    6638:	3001      	adds	r0, #1
    663a:	2d08      	cmp	r5, #8
    663c:	9011      	str	r0, [sp, #68]	; 0x44
    663e:	bfc8      	it	gt
    6640:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    6644:	7804      	ldrb	r4, [r0, #0]
    6646:	bfc6      	itte	gt
    6648:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    664c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    6650:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    6654:	2c2f      	cmp	r4, #47	; 0x2f
    6656:	f105 0501 	add.w	r5, r5, #1
    665a:	4622      	mov	r2, r4
    665c:	dd6f      	ble.n	673e <_strtod_l+0x20e>
    665e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    6662:	2c39      	cmp	r4, #57	; 0x39
    6664:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6668:	dde6      	ble.n	6638 <_strtod_l+0x108>
    666a:	499f      	ldr	r1, [pc, #636]	; (68e8 <_strtod_l+0x3b8>)
    666c:	2201      	movs	r2, #1
    666e:	f001 fa63 	bl	7b38 <strncmp>
    6672:	2800      	cmp	r0, #0
    6674:	d137      	bne.n	66e6 <_strtod_l+0x1b6>
    6676:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6678:	461a      	mov	r2, r3
    667a:	3301      	adds	r3, #1
    667c:	9311      	str	r3, [sp, #68]	; 0x44
    667e:	7854      	ldrb	r4, [r2, #1]
    6680:	2d00      	cmp	r5, #0
    6682:	f040 8543 	bne.w	710c <_strtod_l+0xbdc>
    6686:	2c30      	cmp	r4, #48	; 0x30
    6688:	f040 8524 	bne.w	70d4 <_strtod_l+0xba4>
    668c:	f1c3 0201 	rsb	r2, r3, #1
    6690:	1898      	adds	r0, r3, r2
    6692:	3301      	adds	r3, #1
    6694:	9311      	str	r3, [sp, #68]	; 0x44
    6696:	781c      	ldrb	r4, [r3, #0]
    6698:	2c30      	cmp	r4, #48	; 0x30
    669a:	d0f9      	beq.n	6690 <_strtod_l+0x160>
    669c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    66a0:	2b08      	cmp	r3, #8
    66a2:	f200 8301 	bhi.w	6ca8 <_strtod_l+0x778>
    66a6:	9f11      	ldr	r7, [sp, #68]	; 0x44
    66a8:	1c43      	adds	r3, r0, #1
    66aa:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    66ae:	930b      	str	r3, [sp, #44]	; 0x2c
    66b0:	2501      	movs	r5, #1
    66b2:	46bc      	mov	ip, r7
    66b4:	f04f 0e00 	mov.w	lr, #0
    66b8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    66bc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    66c0:	2000      	movs	r0, #0
    66c2:	f10c 0301 	add.w	r3, ip, #1
    66c6:	9311      	str	r3, [sp, #68]	; 0x44
    66c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    66cc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    66d0:	2909      	cmp	r1, #9
    66d2:	f200 82bb 	bhi.w	6c4c <_strtod_l+0x71c>
    66d6:	3001      	adds	r0, #1
    66d8:	468b      	mov	fp, r1
    66da:	2900      	cmp	r1, #0
    66dc:	f040 844f 	bne.w	6f7e <_strtod_l+0xa4e>
    66e0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    66e4:	e7ed      	b.n	66c2 <_strtod_l+0x192>
    66e6:	2000      	movs	r0, #0
    66e8:	2c65      	cmp	r4, #101	; 0x65
    66ea:	46ae      	mov	lr, r5
    66ec:	900b      	str	r0, [sp, #44]	; 0x2c
    66ee:	4684      	mov	ip, r0
    66f0:	d001      	beq.n	66f6 <_strtod_l+0x1c6>
    66f2:	2c45      	cmp	r4, #69	; 0x45
    66f4:	d130      	bne.n	6758 <_strtod_l+0x228>
    66f6:	2d00      	cmp	r5, #0
    66f8:	d16b      	bne.n	67d2 <_strtod_l+0x2a2>
    66fa:	9b08      	ldr	r3, [sp, #32]
    66fc:	4303      	orrs	r3, r0
    66fe:	d167      	bne.n	67d0 <_strtod_l+0x2a0>
    6700:	9b07      	ldr	r3, [sp, #28]
    6702:	ed9f 8b77 	vldr	d8, [pc, #476]	; 68e0 <_strtod_l+0x3b0>
    6706:	b113      	cbz	r3, 670e <_strtod_l+0x1de>
    6708:	9b07      	ldr	r3, [sp, #28]
    670a:	f8c3 a000 	str.w	sl, [r3]
    670e:	eeb0 0b48 	vmov.f64	d0, d8
    6712:	b017      	add	sp, #92	; 0x5c
    6714:	ecbd 8b10 	vpop	{d8-d15}
    6718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    671c:	787a      	ldrb	r2, [r7, #1]
    671e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    6722:	2a58      	cmp	r2, #88	; 0x58
    6724:	f000 840c 	beq.w	6f40 <_strtod_l+0xa10>
    6728:	3701      	adds	r7, #1
    672a:	9711      	str	r7, [sp, #68]	; 0x44
    672c:	783a      	ldrb	r2, [r7, #0]
    672e:	2a30      	cmp	r2, #48	; 0x30
    6730:	d0fa      	beq.n	6728 <_strtod_l+0x1f8>
    6732:	2a00      	cmp	r2, #0
    6734:	f000 80b7 	beq.w	68a6 <_strtod_l+0x376>
    6738:	2301      	movs	r3, #1
    673a:	9308      	str	r3, [sp, #32]
    673c:	e772      	b.n	6624 <_strtod_l+0xf4>
    673e:	496a      	ldr	r1, [pc, #424]	; (68e8 <_strtod_l+0x3b8>)
    6740:	2201      	movs	r2, #1
    6742:	f001 f9f9 	bl	7b38 <strncmp>
    6746:	2800      	cmp	r0, #0
    6748:	f000 80c0 	beq.w	68cc <_strtod_l+0x39c>
    674c:	46ae      	mov	lr, r5
    674e:	f04f 0c00 	mov.w	ip, #0
    6752:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    6756:	4660      	mov	r0, ip
    6758:	f04f 0b00 	mov.w	fp, #0
    675c:	2d00      	cmp	r5, #0
    675e:	d07e      	beq.n	685e <_strtod_l+0x32e>
    6760:	ee07 6a90 	vmov	s15, r6
    6764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6766:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    676a:	ebab 0303 	sub.w	r3, fp, r3
    676e:	f1be 0f00 	cmp.w	lr, #0
    6772:	bf08      	it	eq
    6774:	46ae      	moveq	lr, r5
    6776:	2d10      	cmp	r5, #16
    6778:	930a      	str	r3, [sp, #40]	; 0x28
    677a:	462b      	mov	r3, r5
    677c:	bfa8      	it	ge
    677e:	2310      	movge	r3, #16
    6780:	2d09      	cmp	r5, #9
    6782:	ed8d 7b04 	vstr	d7, [sp, #16]
    6786:	dd0c      	ble.n	67a2 <_strtod_l+0x272>
    6788:	4a58      	ldr	r2, [pc, #352]	; (68ec <_strtod_l+0x3bc>)
    678a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    678e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    6792:	ee06 9a90 	vmov	s13, r9
    6796:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    679a:	eea7 6b05 	vfma.f64	d6, d7, d5
    679e:	ed8d 6b04 	vstr	d6, [sp, #16]
    67a2:	2d0f      	cmp	r5, #15
    67a4:	f300 80a8 	bgt.w	68f8 <_strtod_l+0x3c8>
    67a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67aa:	2a00      	cmp	r2, #0
    67ac:	f000 83e4 	beq.w	6f78 <_strtod_l+0xa48>
    67b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67b2:	f340 833c 	ble.w	6e2e <_strtod_l+0x8fe>
    67b6:	2a16      	cmp	r2, #22
    67b8:	f340 8498 	ble.w	70ec <_strtod_l+0xbbc>
    67bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    67be:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    67c2:	428a      	cmp	r2, r1
    67c4:	f280 84a6 	bge.w	7114 <_strtod_l+0xbe4>
    67c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    67ca:	1aeb      	subs	r3, r5, r3
    67cc:	4413      	add	r3, r2
    67ce:	e099      	b.n	6904 <_strtod_l+0x3d4>
    67d0:	2500      	movs	r5, #0
    67d2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    67d6:	f10a 0301 	add.w	r3, sl, #1
    67da:	9311      	str	r3, [sp, #68]	; 0x44
    67dc:	f89a 4001 	ldrb.w	r4, [sl, #1]
    67e0:	2c2b      	cmp	r4, #43	; 0x2b
    67e2:	f000 825e 	beq.w	6ca2 <_strtod_l+0x772>
    67e6:	2c2d      	cmp	r4, #45	; 0x2d
    67e8:	f000 81f7 	beq.w	6bda <_strtod_l+0x6aa>
    67ec:	2300      	movs	r3, #0
    67ee:	930a      	str	r3, [sp, #40]	; 0x28
    67f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    67f4:	2b09      	cmp	r3, #9
    67f6:	f200 81eb 	bhi.w	6bd0 <_strtod_l+0x6a0>
    67fa:	2c30      	cmp	r4, #48	; 0x30
    67fc:	d105      	bne.n	680a <_strtod_l+0x2da>
    67fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6800:	3301      	adds	r3, #1
    6802:	9311      	str	r3, [sp, #68]	; 0x44
    6804:	781c      	ldrb	r4, [r3, #0]
    6806:	2c30      	cmp	r4, #48	; 0x30
    6808:	d0fa      	beq.n	6800 <_strtod_l+0x2d0>
    680a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    680e:	2b08      	cmp	r3, #8
    6810:	d8a2      	bhi.n	6758 <_strtod_l+0x228>
    6812:	9a11      	ldr	r2, [sp, #68]	; 0x44
    6814:	920c      	str	r2, [sp, #48]	; 0x30
    6816:	1c53      	adds	r3, r2, #1
    6818:	9311      	str	r3, [sp, #68]	; 0x44
    681a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    681e:	7854      	ldrb	r4, [r2, #1]
    6820:	2c2f      	cmp	r4, #47	; 0x2f
    6822:	dc07      	bgt.n	6834 <_strtod_l+0x304>
    6824:	e3de      	b.n	6fe4 <_strtod_l+0xab4>
    6826:	3301      	adds	r3, #1
    6828:	9311      	str	r3, [sp, #68]	; 0x44
    682a:	784c      	ldrb	r4, [r1, #1]
    682c:	2c2f      	cmp	r4, #47	; 0x2f
    682e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    6832:	dd06      	ble.n	6842 <_strtod_l+0x312>
    6834:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    6838:	2c39      	cmp	r4, #57	; 0x39
    683a:	4619      	mov	r1, r3
    683c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6840:	ddf1      	ble.n	6826 <_strtod_l+0x2f6>
    6842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6844:	1a9b      	subs	r3, r3, r2
    6846:	2b08      	cmp	r3, #8
    6848:	f340 83cc 	ble.w	6fe4 <_strtod_l+0xab4>
    684c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    6850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6852:	2b00      	cmp	r3, #0
    6854:	d082      	beq.n	675c <_strtod_l+0x22c>
    6856:	f1cb 0b00 	rsb	fp, fp, #0
    685a:	2d00      	cmp	r5, #0
    685c:	d180      	bne.n	6760 <_strtod_l+0x230>
    685e:	9b08      	ldr	r3, [sp, #32]
    6860:	4303      	orrs	r3, r0
    6862:	d120      	bne.n	68a6 <_strtod_l+0x376>
    6864:	f1bc 0f00 	cmp.w	ip, #0
    6868:	f47f af4a 	bne.w	6700 <_strtod_l+0x1d0>
    686c:	2c69      	cmp	r4, #105	; 0x69
    686e:	f000 83cf 	beq.w	7010 <_strtod_l+0xae0>
    6872:	f300 82f3 	bgt.w	6e5c <_strtod_l+0x92c>
    6876:	2c49      	cmp	r4, #73	; 0x49
    6878:	f000 83ca 	beq.w	7010 <_strtod_l+0xae0>
    687c:	2c4e      	cmp	r4, #78	; 0x4e
    687e:	f47f af3f 	bne.w	6700 <_strtod_l+0x1d0>
    6882:	491b      	ldr	r1, [pc, #108]	; (68f0 <_strtod_l+0x3c0>)
    6884:	a811      	add	r0, sp, #68	; 0x44
    6886:	f002 fb8f 	bl	8fa8 <__match>
    688a:	2800      	cmp	r0, #0
    688c:	f43f af38 	beq.w	6700 <_strtod_l+0x1d0>
    6890:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6892:	781b      	ldrb	r3, [r3, #0]
    6894:	2b28      	cmp	r3, #40	; 0x28
    6896:	f000 84f2 	beq.w	727e <_strtod_l+0xd4e>
    689a:	4816      	ldr	r0, [pc, #88]	; (68f4 <_strtod_l+0x3c4>)
    689c:	f001 fec0 	bl	8620 <nan>
    68a0:	eeb0 8b40 	vmov.f64	d8, d0
    68a4:	e001      	b.n	68aa <_strtod_l+0x37a>
    68a6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 68e0 <_strtod_l+0x3b0>
    68aa:	9a07      	ldr	r2, [sp, #28]
    68ac:	b10a      	cbz	r2, 68b2 <_strtod_l+0x382>
    68ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    68b0:	6013      	str	r3, [r2, #0]
    68b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68b4:	2b00      	cmp	r3, #0
    68b6:	f43f af2a 	beq.w	670e <_strtod_l+0x1de>
    68ba:	eeb1 8b48 	vneg.f64	d8, d8
    68be:	eeb0 0b48 	vmov.f64	d0, d8
    68c2:	b017      	add	sp, #92	; 0x5c
    68c4:	ecbd 8b10 	vpop	{d8-d15}
    68c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    68cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    68ce:	900b      	str	r0, [sp, #44]	; 0x2c
    68d0:	1c5a      	adds	r2, r3, #1
    68d2:	9211      	str	r2, [sp, #68]	; 0x44
    68d4:	785c      	ldrb	r4, [r3, #1]
    68d6:	46ae      	mov	lr, r5
    68d8:	e6f8      	b.n	66cc <_strtod_l+0x19c>
    68da:	bf00      	nop
    68dc:	f3af 8000 	nop.w
	...
    68e8:	20000c08 	.word	0x20000c08
    68ec:	200002a8 	.word	0x200002a8
    68f0:	20000c18 	.word	0x20000c18
    68f4:	200003cc 	.word	0x200003cc
    68f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    68fa:	1aeb      	subs	r3, r5, r3
    68fc:	4413      	add	r3, r2
    68fe:	2b00      	cmp	r3, #0
    6900:	f340 82b0 	ble.w	6e64 <_strtod_l+0x934>
    6904:	f013 010f 	ands.w	r1, r3, #15
    6908:	d00a      	beq.n	6920 <_strtod_l+0x3f0>
    690a:	4ac3      	ldr	r2, [pc, #780]	; (6c18 <_strtod_l+0x6e8>)
    690c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6910:	ed9d 6b04 	vldr	d6, [sp, #16]
    6914:	ed92 7b00 	vldr	d7, [r2]
    6918:	ee27 7b06 	vmul.f64	d7, d7, d6
    691c:	ed8d 7b04 	vstr	d7, [sp, #16]
    6920:	f033 020f 	bics.w	r2, r3, #15
    6924:	f040 8238 	bne.w	6d98 <_strtod_l+0x868>
    6928:	2300      	movs	r3, #0
    692a:	9308      	str	r3, [sp, #32]
    692c:	9600      	str	r6, [sp, #0]
    692e:	462b      	mov	r3, r5
    6930:	4672      	mov	r2, lr
    6932:	4639      	mov	r1, r7
    6934:	4640      	mov	r0, r8
    6936:	f002 fcc3 	bl	92c0 <__s2b>
    693a:	4681      	mov	r9, r0
    693c:	2800      	cmp	r0, #0
    693e:	f000 82e1 	beq.w	6f04 <_strtod_l+0x9d4>
    6942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6944:	eba3 0b0b 	sub.w	fp, r3, fp
    6948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    694a:	ed9f eba9 	vldr	d14, [pc, #676]	; 6bf0 <_strtod_l+0x6c0>
    694e:	2b00      	cmp	r3, #0
    6950:	ed9f cba9 	vldr	d12, [pc, #676]	; 6bf8 <_strtod_l+0x6c8>
    6954:	ed9f dbaa 	vldr	d13, [pc, #680]	; 6c00 <_strtod_l+0x6d0>
    6958:	ed9f bbab 	vldr	d11, [pc, #684]	; 6c08 <_strtod_l+0x6d8>
    695c:	bfb4      	ite	lt
    695e:	465a      	movlt	r2, fp
    6960:	2200      	movge	r2, #0
    6962:	f04f 0a00 	mov.w	sl, #0
    6966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    696a:	920b      	str	r2, [sp, #44]	; 0x2c
    696c:	930c      	str	r3, [sp, #48]	; 0x30
    696e:	4654      	mov	r4, sl
    6970:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6974:	4640      	mov	r0, r8
    6976:	f002 fc21 	bl	91bc <_Balloc>
    697a:	4606      	mov	r6, r0
    697c:	2800      	cmp	r0, #0
    697e:	f000 810e 	beq.w	6b9e <_strtod_l+0x66e>
    6982:	f8d9 2010 	ldr.w	r2, [r9, #16]
    6986:	ed9d 8b04 	vldr	d8, [sp, #16]
    698a:	3202      	adds	r2, #2
    698c:	0092      	lsls	r2, r2, #2
    698e:	f109 010c 	add.w	r1, r9, #12
    6992:	300c      	adds	r0, #12
    6994:	f7fd fb44 	bl	4020 <memcpy>
    6998:	eeb0 0b48 	vmov.f64	d0, d8
    699c:	aa14      	add	r2, sp, #80	; 0x50
    699e:	a913      	add	r1, sp, #76	; 0x4c
    69a0:	4640      	mov	r0, r8
    69a2:	f003 f849 	bl	9a38 <__d2b>
    69a6:	9012      	str	r0, [sp, #72]	; 0x48
    69a8:	2800      	cmp	r0, #0
    69aa:	f000 80e4 	beq.w	6b76 <_strtod_l+0x646>
    69ae:	2101      	movs	r1, #1
    69b0:	4640      	mov	r0, r8
    69b2:	f002 fd2d 	bl	9410 <__i2b>
    69b6:	4604      	mov	r4, r0
    69b8:	2800      	cmp	r0, #0
    69ba:	f000 80f0 	beq.w	6b9e <_strtod_l+0x66e>
    69be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    69c0:	2a00      	cmp	r2, #0
    69c2:	f2c0 80de 	blt.w	6b82 <_strtod_l+0x652>
    69c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    69c8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    69ca:	eb02 0b03 	add.w	fp, r2, r3
    69ce:	9b08      	ldr	r3, [sp, #32]
    69d0:	9d14      	ldr	r5, [sp, #80]	; 0x50
    69d2:	1ad2      	subs	r2, r2, r3
    69d4:	442a      	add	r2, r5
    69d6:	4b91      	ldr	r3, [pc, #580]	; (6c1c <_strtod_l+0x6ec>)
    69d8:	3a01      	subs	r2, #1
    69da:	429a      	cmp	r2, r3
    69dc:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    69e0:	f280 8098 	bge.w	6b14 <_strtod_l+0x5e4>
    69e4:	1a99      	subs	r1, r3, r2
    69e6:	291f      	cmp	r1, #31
    69e8:	eba5 0501 	sub.w	r5, r5, r1
    69ec:	f300 80e3 	bgt.w	6bb6 <_strtod_l+0x686>
    69f0:	2201      	movs	r2, #1
    69f2:	fa02 f301 	lsl.w	r3, r2, r1
    69f6:	930d      	str	r3, [sp, #52]	; 0x34
    69f8:	2300      	movs	r3, #0
    69fa:	930e      	str	r3, [sp, #56]	; 0x38
    69fc:	442f      	add	r7, r5
    69fe:	9b08      	ldr	r3, [sp, #32]
    6a00:	445d      	add	r5, fp
    6a02:	45ab      	cmp	fp, r5
    6a04:	465a      	mov	r2, fp
    6a06:	441f      	add	r7, r3
    6a08:	bfa8      	it	ge
    6a0a:	462a      	movge	r2, r5
    6a0c:	42ba      	cmp	r2, r7
    6a0e:	bfa8      	it	ge
    6a10:	463a      	movge	r2, r7
    6a12:	2a00      	cmp	r2, #0
    6a14:	dd03      	ble.n	6a1e <_strtod_l+0x4ee>
    6a16:	1aad      	subs	r5, r5, r2
    6a18:	1abf      	subs	r7, r7, r2
    6a1a:	ebab 0b02 	sub.w	fp, fp, r2
    6a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a20:	2b00      	cmp	r3, #0
    6a22:	f300 8088 	bgt.w	6b36 <_strtod_l+0x606>
    6a26:	2d00      	cmp	r5, #0
    6a28:	f300 809c 	bgt.w	6b64 <_strtod_l+0x634>
    6a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6a2e:	2b00      	cmp	r3, #0
    6a30:	f300 80b7 	bgt.w	6ba2 <_strtod_l+0x672>
    6a34:	2f00      	cmp	r7, #0
    6a36:	f300 80a9 	bgt.w	6b8c <_strtod_l+0x65c>
    6a3a:	f1bb 0f00 	cmp.w	fp, #0
    6a3e:	dd08      	ble.n	6a52 <_strtod_l+0x522>
    6a40:	4621      	mov	r1, r4
    6a42:	465a      	mov	r2, fp
    6a44:	4640      	mov	r0, r8
    6a46:	f002 fe1f 	bl	9688 <__lshift>
    6a4a:	4604      	mov	r4, r0
    6a4c:	2800      	cmp	r0, #0
    6a4e:	f000 80a6 	beq.w	6b9e <_strtod_l+0x66e>
    6a52:	9912      	ldr	r1, [sp, #72]	; 0x48
    6a54:	4632      	mov	r2, r6
    6a56:	4640      	mov	r0, r8
    6a58:	f002 feb0 	bl	97bc <__mdiff>
    6a5c:	4682      	mov	sl, r0
    6a5e:	2800      	cmp	r0, #0
    6a60:	f000 809d 	beq.w	6b9e <_strtod_l+0x66e>
    6a64:	2300      	movs	r3, #0
    6a66:	68c5      	ldr	r5, [r0, #12]
    6a68:	60c3      	str	r3, [r0, #12]
    6a6a:	4621      	mov	r1, r4
    6a6c:	f002 fe84 	bl	9778 <__mcmp>
    6a70:	2800      	cmp	r0, #0
    6a72:	f2c0 83c7 	blt.w	7204 <_strtod_l+0xcd4>
    6a76:	f000 8361 	beq.w	713c <_strtod_l+0xc0c>
    6a7a:	4621      	mov	r1, r4
    6a7c:	4650      	mov	r0, sl
    6a7e:	f003 f845 	bl	9b0c <__ratio>
    6a82:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    6a86:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a8e:	d846      	bhi.n	6b1e <_strtod_l+0x5ee>
    6a90:	2d00      	cmp	r5, #0
    6a92:	f000 80cb 	beq.w	6c2c <_strtod_l+0x6fc>
    6a96:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6a9a:	9805      	ldr	r0, [sp, #20]
    6a9c:	4b60      	ldr	r3, [pc, #384]	; (6c20 <_strtod_l+0x6f0>)
    6a9e:	2200      	movs	r2, #0
    6aa0:	4960      	ldr	r1, [pc, #384]	; (6c24 <_strtod_l+0x6f4>)
    6aa2:	f8df c184 	ldr.w	ip, [pc, #388]	; 6c28 <_strtod_l+0x6f8>
    6aa6:	ea00 0701 	and.w	r7, r0, r1
    6aaa:	4567      	cmp	r7, ip
    6aac:	f000 80d4 	beq.w	6c58 <_strtod_l+0x728>
    6ab0:	9908      	ldr	r1, [sp, #32]
    6ab2:	b159      	cbz	r1, 6acc <_strtod_l+0x59c>
    6ab4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    6ab8:	d808      	bhi.n	6acc <_strtod_l+0x59c>
    6aba:	eeb4 9bcb 	vcmpe.f64	d9, d11
    6abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ac2:	f240 8156 	bls.w	6d72 <_strtod_l+0x842>
    6ac6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    6aca:	1bcb      	subs	r3, r1, r7
    6acc:	eeb0 0b48 	vmov.f64	d0, d8
    6ad0:	ec43 2b1a 	vmov	d10, r2, r3
    6ad4:	f002 ff1c 	bl	9910 <__ulp>
    6ad8:	eeaa 8b00 	vfma.f64	d8, d10, d0
    6adc:	ed8d 8b04 	vstr	d8, [sp, #16]
    6ae0:	ee18 3a90 	vmov	r3, s17
    6ae4:	9a08      	ldr	r2, [sp, #32]
    6ae6:	b922      	cbnz	r2, 6af2 <_strtod_l+0x5c2>
    6ae8:	4a4e      	ldr	r2, [pc, #312]	; (6c24 <_strtod_l+0x6f4>)
    6aea:	401a      	ands	r2, r3
    6aec:	4297      	cmp	r7, r2
    6aee:	f000 80e4 	beq.w	6cba <_strtod_l+0x78a>
    6af2:	9912      	ldr	r1, [sp, #72]	; 0x48
    6af4:	4640      	mov	r0, r8
    6af6:	f002 fb87 	bl	9208 <_Bfree>
    6afa:	4631      	mov	r1, r6
    6afc:	4640      	mov	r0, r8
    6afe:	f002 fb83 	bl	9208 <_Bfree>
    6b02:	4621      	mov	r1, r4
    6b04:	4640      	mov	r0, r8
    6b06:	f002 fb7f 	bl	9208 <_Bfree>
    6b0a:	4651      	mov	r1, sl
    6b0c:	4640      	mov	r0, r8
    6b0e:	f002 fb7b 	bl	9208 <_Bfree>
    6b12:	e72d      	b.n	6970 <_strtod_l+0x440>
    6b14:	2301      	movs	r3, #1
    6b16:	2100      	movs	r1, #0
    6b18:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    6b1c:	e76e      	b.n	69fc <_strtod_l+0x4cc>
    6b1e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6b22:	ee20 9b09 	vmul.f64	d9, d0, d9
    6b26:	2d00      	cmp	r5, #0
    6b28:	d15f      	bne.n	6bea <_strtod_l+0x6ba>
    6b2a:	eeb1 7b49 	vneg.f64	d7, d9
    6b2e:	9805      	ldr	r0, [sp, #20]
    6b30:	ec53 2b17 	vmov	r2, r3, d7
    6b34:	e7b4      	b.n	6aa0 <_strtod_l+0x570>
    6b36:	4621      	mov	r1, r4
    6b38:	461a      	mov	r2, r3
    6b3a:	4640      	mov	r0, r8
    6b3c:	f002 fd44 	bl	95c8 <__pow5mult>
    6b40:	4604      	mov	r4, r0
    6b42:	b360      	cbz	r0, 6b9e <_strtod_l+0x66e>
    6b44:	4601      	mov	r1, r0
    6b46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6b48:	4640      	mov	r0, r8
    6b4a:	f002 fc8f 	bl	946c <__multiply>
    6b4e:	b330      	cbz	r0, 6b9e <_strtod_l+0x66e>
    6b50:	900f      	str	r0, [sp, #60]	; 0x3c
    6b52:	9912      	ldr	r1, [sp, #72]	; 0x48
    6b54:	4640      	mov	r0, r8
    6b56:	f002 fb57 	bl	9208 <_Bfree>
    6b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b5c:	9212      	str	r2, [sp, #72]	; 0x48
    6b5e:	2d00      	cmp	r5, #0
    6b60:	f77f af64 	ble.w	6a2c <_strtod_l+0x4fc>
    6b64:	9912      	ldr	r1, [sp, #72]	; 0x48
    6b66:	462a      	mov	r2, r5
    6b68:	4640      	mov	r0, r8
    6b6a:	f002 fd8d 	bl	9688 <__lshift>
    6b6e:	9012      	str	r0, [sp, #72]	; 0x48
    6b70:	2800      	cmp	r0, #0
    6b72:	f47f af5b 	bne.w	6a2c <_strtod_l+0x4fc>
    6b76:	2322      	movs	r3, #34	; 0x22
    6b78:	ed9f 8b25 	vldr	d8, [pc, #148]	; 6c10 <_strtod_l+0x6e0>
    6b7c:	f8c8 3000 	str.w	r3, [r8]
    6b80:	e0bc      	b.n	6cfc <_strtod_l+0x7cc>
    6b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6b84:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    6b88:	1a9f      	subs	r7, r3, r2
    6b8a:	e720      	b.n	69ce <_strtod_l+0x49e>
    6b8c:	4631      	mov	r1, r6
    6b8e:	463a      	mov	r2, r7
    6b90:	4640      	mov	r0, r8
    6b92:	f002 fd79 	bl	9688 <__lshift>
    6b96:	4606      	mov	r6, r0
    6b98:	2800      	cmp	r0, #0
    6b9a:	f47f af4e 	bne.w	6a3a <_strtod_l+0x50a>
    6b9e:	9812      	ldr	r0, [sp, #72]	; 0x48
    6ba0:	e7e9      	b.n	6b76 <_strtod_l+0x646>
    6ba2:	4631      	mov	r1, r6
    6ba4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6ba6:	4640      	mov	r0, r8
    6ba8:	f002 fd0e 	bl	95c8 <__pow5mult>
    6bac:	4606      	mov	r6, r0
    6bae:	2800      	cmp	r0, #0
    6bb0:	f47f af40 	bne.w	6a34 <_strtod_l+0x504>
    6bb4:	e7f3      	b.n	6b9e <_strtod_l+0x66e>
    6bb6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    6bba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    6bbe:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    6bc2:	2101      	movs	r1, #1
    6bc4:	32e2      	adds	r2, #226	; 0xe2
    6bc6:	fa01 f302 	lsl.w	r3, r1, r2
    6bca:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    6bce:	e715      	b.n	69fc <_strtod_l+0x4cc>
    6bd0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    6bd4:	f04f 0b00 	mov.w	fp, #0
    6bd8:	e5c0      	b.n	675c <_strtod_l+0x22c>
    6bda:	2301      	movs	r3, #1
    6bdc:	930a      	str	r3, [sp, #40]	; 0x28
    6bde:	f10a 0302 	add.w	r3, sl, #2
    6be2:	9311      	str	r3, [sp, #68]	; 0x44
    6be4:	f89a 4002 	ldrb.w	r4, [sl, #2]
    6be8:	e602      	b.n	67f0 <_strtod_l+0x2c0>
    6bea:	eeb0 7b49 	vmov.f64	d7, d9
    6bee:	e79e      	b.n	6b2e <_strtod_l+0x5fe>
    6bf0:	94a03595 	.word	0x94a03595
    6bf4:	3fcfffff 	.word	0x3fcfffff
    6bf8:	94a03595 	.word	0x94a03595
    6bfc:	3fdfffff 	.word	0x3fdfffff
    6c00:	35afe535 	.word	0x35afe535
    6c04:	3fe00000 	.word	0x3fe00000
    6c08:	ffc00000 	.word	0xffc00000
    6c0c:	41dfffff 	.word	0x41dfffff
    6c10:	00000000 	.word	0x00000000
    6c14:	7ff00000 	.word	0x7ff00000
    6c18:	200002a8 	.word	0x200002a8
    6c1c:	fffffc02 	.word	0xfffffc02
    6c20:	3ff00000 	.word	0x3ff00000
    6c24:	7ff00000 	.word	0x7ff00000
    6c28:	7fe00000 	.word	0x7fe00000
    6c2c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6c30:	2900      	cmp	r1, #0
    6c32:	f000 8085 	beq.w	6d40 <_strtod_l+0x810>
    6c36:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6c3a:	2901      	cmp	r1, #1
    6c3c:	f000 81d8 	beq.w	6ff0 <_strtod_l+0xac0>
    6c40:	4610      	mov	r0, r2
    6c42:	4bb7      	ldr	r3, [pc, #732]	; (6f20 <_strtod_l+0x9f0>)
    6c44:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6c48:	2200      	movs	r2, #0
    6c4a:	e729      	b.n	6aa0 <_strtod_l+0x570>
    6c4c:	2c65      	cmp	r4, #101	; 0x65
    6c4e:	f04f 0c01 	mov.w	ip, #1
    6c52:	f43f adbe 	beq.w	67d2 <_strtod_l+0x2a2>
    6c56:	e54c      	b.n	66f2 <_strtod_l+0x1c2>
    6c58:	ec43 2b1a 	vmov	d10, r2, r3
    6c5c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    6c60:	9305      	str	r3, [sp, #20]
    6c62:	ed9d fb04 	vldr	d15, [sp, #16]
    6c66:	eeb0 0b4f 	vmov.f64	d0, d15
    6c6a:	f002 fe51 	bl	9910 <__ulp>
    6c6e:	49ad      	ldr	r1, [pc, #692]	; (6f24 <_strtod_l+0x9f4>)
    6c70:	eeaa fb00 	vfma.f64	d15, d10, d0
    6c74:	ee1f 3a90 	vmov	r3, s31
    6c78:	4aab      	ldr	r2, [pc, #684]	; (6f28 <_strtod_l+0x9f8>)
    6c7a:	4019      	ands	r1, r3
    6c7c:	4291      	cmp	r1, r2
    6c7e:	ed8d fb04 	vstr	d15, [sp, #16]
    6c82:	d972      	bls.n	6d6a <_strtod_l+0x83a>
    6c84:	4ba9      	ldr	r3, [pc, #676]	; (6f2c <_strtod_l+0x9fc>)
    6c86:	ee18 2a90 	vmov	r2, s17
    6c8a:	429a      	cmp	r2, r3
    6c8c:	d103      	bne.n	6c96 <_strtod_l+0x766>
    6c8e:	ee18 3a10 	vmov	r3, s16
    6c92:	3301      	adds	r3, #1
    6c94:	d083      	beq.n	6b9e <_strtod_l+0x66e>
    6c96:	4aa5      	ldr	r2, [pc, #660]	; (6f2c <_strtod_l+0x9fc>)
    6c98:	f04f 33ff 	mov.w	r3, #4294967295
    6c9c:	e9cd 3204 	strd	r3, r2, [sp, #16]
    6ca0:	e727      	b.n	6af2 <_strtod_l+0x5c2>
    6ca2:	2300      	movs	r3, #0
    6ca4:	930a      	str	r3, [sp, #40]	; 0x28
    6ca6:	e79a      	b.n	6bde <_strtod_l+0x6ae>
    6ca8:	2c65      	cmp	r4, #101	; 0x65
    6caa:	f000 80d0 	beq.w	6e4e <_strtod_l+0x91e>
    6cae:	2c45      	cmp	r4, #69	; 0x45
    6cb0:	f000 80cd 	beq.w	6e4e <_strtod_l+0x91e>
    6cb4:	f04f 0c01 	mov.w	ip, #1
    6cb8:	e5d1      	b.n	685e <_strtod_l+0x32e>
    6cba:	ec51 0b19 	vmov	r0, r1, d9
    6cbe:	930d      	str	r3, [sp, #52]	; 0x34
    6cc0:	f005 ff6c 	bl	cb9c <__aeabi_d2lz>
    6cc4:	f005 ff3c 	bl	cb40 <__aeabi_l2d>
    6cc8:	9b04      	ldr	r3, [sp, #16]
    6cca:	431d      	orrs	r5, r3
    6ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6cce:	ec41 0b17 	vmov	d7, r0, r1
    6cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6cd6:	431d      	orrs	r5, r3
    6cd8:	ee39 9b47 	vsub.f64	d9, d9, d7
    6cdc:	f000 80a0 	beq.w	6e20 <_strtod_l+0x8f0>
    6ce0:	eeb4 9bcc 	vcmpe.f64	d9, d12
    6ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ce8:	d405      	bmi.n	6cf6 <_strtod_l+0x7c6>
    6cea:	eeb4 9bcd 	vcmpe.f64	d9, d13
    6cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6cf2:	f77f aefe 	ble.w	6af2 <_strtod_l+0x5c2>
    6cf6:	ed9d 8b04 	vldr	d8, [sp, #16]
    6cfa:	9812      	ldr	r0, [sp, #72]	; 0x48
    6cfc:	4601      	mov	r1, r0
    6cfe:	4640      	mov	r0, r8
    6d00:	f002 fa82 	bl	9208 <_Bfree>
    6d04:	4631      	mov	r1, r6
    6d06:	4640      	mov	r0, r8
    6d08:	f002 fa7e 	bl	9208 <_Bfree>
    6d0c:	4621      	mov	r1, r4
    6d0e:	4640      	mov	r0, r8
    6d10:	f002 fa7a 	bl	9208 <_Bfree>
    6d14:	4649      	mov	r1, r9
    6d16:	4640      	mov	r0, r8
    6d18:	f002 fa76 	bl	9208 <_Bfree>
    6d1c:	4651      	mov	r1, sl
    6d1e:	4640      	mov	r0, r8
    6d20:	f002 fa72 	bl	9208 <_Bfree>
    6d24:	e5c1      	b.n	68aa <_strtod_l+0x37a>
    6d26:	2201      	movs	r2, #1
    6d28:	9209      	str	r2, [sp, #36]	; 0x24
    6d2a:	1c79      	adds	r1, r7, #1
    6d2c:	9111      	str	r1, [sp, #68]	; 0x44
    6d2e:	787a      	ldrb	r2, [r7, #1]
    6d30:	2a00      	cmp	r2, #0
    6d32:	f43f ace5 	beq.w	6700 <_strtod_l+0x1d0>
    6d36:	460f      	mov	r7, r1
    6d38:	e470      	b.n	661c <_strtod_l+0xec>
    6d3a:	2200      	movs	r2, #0
    6d3c:	9209      	str	r2, [sp, #36]	; 0x24
    6d3e:	e7f4      	b.n	6d2a <_strtod_l+0x7fa>
    6d40:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6d44:	4610      	mov	r0, r2
    6d46:	2b00      	cmp	r3, #0
    6d48:	f47f af7b 	bne.w	6c42 <_strtod_l+0x712>
    6d4c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    6d50:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d58:	f100 81d3 	bmi.w	7102 <_strtod_l+0xbd2>
    6d5c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6d60:	ee20 9b09 	vmul.f64	d9, d0, d9
    6d64:	eeb1 7b49 	vneg.f64	d7, d9
    6d68:	e6e2      	b.n	6b30 <_strtod_l+0x600>
    6d6a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    6d6e:	9305      	str	r3, [sp, #20]
    6d70:	e6b8      	b.n	6ae4 <_strtod_l+0x5b4>
    6d72:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    6d76:	ee19 3a10 	vmov	r3, s18
    6d7a:	2b01      	cmp	r3, #1
    6d7c:	bf38      	it	cc
    6d7e:	2301      	movcc	r3, #1
    6d80:	ee09 3a10 	vmov	s18, r3
    6d84:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    6d88:	2d00      	cmp	r5, #0
    6d8a:	f040 813e 	bne.w	700a <_strtod_l+0xada>
    6d8e:	eeb1 7b49 	vneg.f64	d7, d9
    6d92:	ec53 2b17 	vmov	r2, r3, d7
    6d96:	e696      	b.n	6ac6 <_strtod_l+0x596>
    6d98:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    6d9c:	f300 80b2 	bgt.w	6f04 <_strtod_l+0x9d4>
    6da0:	2a10      	cmp	r2, #16
    6da2:	ea4f 1322 	mov.w	r3, r2, asr #4
    6da6:	f340 8286 	ble.w	72b6 <_strtod_l+0xd86>
    6daa:	4c61      	ldr	r4, [pc, #388]	; (6f30 <_strtod_l+0xa00>)
    6dac:	ed9d 7b04 	vldr	d7, [sp, #16]
    6db0:	2000      	movs	r0, #0
    6db2:	4622      	mov	r2, r4
    6db4:	4601      	mov	r1, r0
    6db6:	f013 0f01 	tst.w	r3, #1
    6dba:	f101 0101 	add.w	r1, r1, #1
    6dbe:	ea4f 0363 	mov.w	r3, r3, asr #1
    6dc2:	d004      	beq.n	6dce <_strtod_l+0x89e>
    6dc4:	ed92 6b00 	vldr	d6, [r2]
    6dc8:	2001      	movs	r0, #1
    6dca:	ee27 7b06 	vmul.f64	d7, d7, d6
    6dce:	2b01      	cmp	r3, #1
    6dd0:	f102 0208 	add.w	r2, r2, #8
    6dd4:	d1ef      	bne.n	6db6 <_strtod_l+0x886>
    6dd6:	b108      	cbz	r0, 6ddc <_strtod_l+0x8ac>
    6dd8:	ed8d 7b04 	vstr	d7, [sp, #16]
    6ddc:	9b05      	ldr	r3, [sp, #20]
    6dde:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    6de2:	9305      	str	r3, [sp, #20]
    6de4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    6de8:	ed9d 6b04 	vldr	d6, [sp, #16]
    6dec:	ed94 7b00 	vldr	d7, [r4]
    6df0:	4b4c      	ldr	r3, [pc, #304]	; (6f24 <_strtod_l+0x9f4>)
    6df2:	ee27 7b06 	vmul.f64	d7, d7, d6
    6df6:	ee17 2a90 	vmov	r2, s15
    6dfa:	494e      	ldr	r1, [pc, #312]	; (6f34 <_strtod_l+0xa04>)
    6dfc:	4013      	ands	r3, r2
    6dfe:	428b      	cmp	r3, r1
    6e00:	ed8d 7b04 	vstr	d7, [sp, #16]
    6e04:	d87e      	bhi.n	6f04 <_strtod_l+0x9d4>
    6e06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    6e0a:	428b      	cmp	r3, r1
    6e0c:	f240 81d6 	bls.w	71bc <_strtod_l+0xc8c>
    6e10:	4c46      	ldr	r4, [pc, #280]	; (6f2c <_strtod_l+0x9fc>)
    6e12:	f04f 33ff 	mov.w	r3, #4294967295
    6e16:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6e1a:	2300      	movs	r3, #0
    6e1c:	9308      	str	r3, [sp, #32]
    6e1e:	e585      	b.n	692c <_strtod_l+0x3fc>
    6e20:	eeb4 9bce 	vcmpe.f64	d9, d14
    6e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e28:	f57f ae63 	bpl.w	6af2 <_strtod_l+0x5c2>
    6e2c:	e763      	b.n	6cf6 <_strtod_l+0x7c6>
    6e2e:	3216      	adds	r2, #22
    6e30:	f6ff ad62 	blt.w	68f8 <_strtod_l+0x3c8>
    6e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6e36:	eba3 0b0b 	sub.w	fp, r3, fp
    6e3a:	4b3f      	ldr	r3, [pc, #252]	; (6f38 <_strtod_l+0xa08>)
    6e3c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    6e40:	ed93 7b00 	vldr	d7, [r3]
    6e44:	ed9d 6b04 	vldr	d6, [sp, #16]
    6e48:	ee86 8b07 	vdiv.f64	d8, d6, d7
    6e4c:	e52d      	b.n	68aa <_strtod_l+0x37a>
    6e4e:	f04f 0e00 	mov.w	lr, #0
    6e52:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    6e56:	f04f 0c01 	mov.w	ip, #1
    6e5a:	e44e      	b.n	66fa <_strtod_l+0x1ca>
    6e5c:	2c6e      	cmp	r4, #110	; 0x6e
    6e5e:	f43f ad10 	beq.w	6882 <_strtod_l+0x352>
    6e62:	e44d      	b.n	6700 <_strtod_l+0x1d0>
    6e64:	f43f ad60 	beq.w	6928 <_strtod_l+0x3f8>
    6e68:	425b      	negs	r3, r3
    6e6a:	f013 010f 	ands.w	r1, r3, #15
    6e6e:	d00a      	beq.n	6e86 <_strtod_l+0x956>
    6e70:	4a31      	ldr	r2, [pc, #196]	; (6f38 <_strtod_l+0xa08>)
    6e72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6e76:	ed9d 6b04 	vldr	d6, [sp, #16]
    6e7a:	ed92 7b00 	vldr	d7, [r2]
    6e7e:	ee86 7b07 	vdiv.f64	d7, d6, d7
    6e82:	ed8d 7b04 	vstr	d7, [sp, #16]
    6e86:	111b      	asrs	r3, r3, #4
    6e88:	f43f ad4e 	beq.w	6928 <_strtod_l+0x3f8>
    6e8c:	2b1f      	cmp	r3, #31
    6e8e:	dc33      	bgt.n	6ef8 <_strtod_l+0x9c8>
    6e90:	f013 0210 	ands.w	r2, r3, #16
    6e94:	bf18      	it	ne
    6e96:	226a      	movne	r2, #106	; 0x6a
    6e98:	ed9d 7b04 	vldr	d7, [sp, #16]
    6e9c:	9208      	str	r2, [sp, #32]
    6e9e:	4a27      	ldr	r2, [pc, #156]	; (6f3c <_strtod_l+0xa0c>)
    6ea0:	2100      	movs	r1, #0
    6ea2:	07d8      	lsls	r0, r3, #31
    6ea4:	d504      	bpl.n	6eb0 <_strtod_l+0x980>
    6ea6:	ed92 6b00 	vldr	d6, [r2]
    6eaa:	2101      	movs	r1, #1
    6eac:	ee27 7b06 	vmul.f64	d7, d7, d6
    6eb0:	105b      	asrs	r3, r3, #1
    6eb2:	f102 0208 	add.w	r2, r2, #8
    6eb6:	d1f4      	bne.n	6ea2 <_strtod_l+0x972>
    6eb8:	b109      	cbz	r1, 6ebe <_strtod_l+0x98e>
    6eba:	ed8d 7b04 	vstr	d7, [sp, #16]
    6ebe:	9b08      	ldr	r3, [sp, #32]
    6ec0:	b193      	cbz	r3, 6ee8 <_strtod_l+0x9b8>
    6ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6ec6:	f3c1 520a 	ubfx	r2, r1, #20, #11
    6eca:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    6ece:	2b00      	cmp	r3, #0
    6ed0:	dd0a      	ble.n	6ee8 <_strtod_l+0x9b8>
    6ed2:	2b1f      	cmp	r3, #31
    6ed4:	f340 822f 	ble.w	7336 <_strtod_l+0xe06>
    6ed8:	2000      	movs	r0, #0
    6eda:	2b34      	cmp	r3, #52	; 0x34
    6edc:	9004      	str	r0, [sp, #16]
    6ede:	f340 8240 	ble.w	7362 <_strtod_l+0xe32>
    6ee2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    6ee6:	9305      	str	r3, [sp, #20]
    6ee8:	ed9d 7b04 	vldr	d7, [sp, #16]
    6eec:	eeb5 7b40 	vcmp.f64	d7, #0.0
    6ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ef4:	f47f ad1a 	bne.w	692c <_strtod_l+0x3fc>
    6ef8:	2322      	movs	r3, #34	; 0x22
    6efa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 6f10 <_strtod_l+0x9e0>
    6efe:	f8c8 3000 	str.w	r3, [r8]
    6f02:	e4d2      	b.n	68aa <_strtod_l+0x37a>
    6f04:	2322      	movs	r3, #34	; 0x22
    6f06:	ed9f 8b04 	vldr	d8, [pc, #16]	; 6f18 <_strtod_l+0x9e8>
    6f0a:	f8c8 3000 	str.w	r3, [r8]
    6f0e:	e4cc      	b.n	68aa <_strtod_l+0x37a>
	...
    6f1c:	7ff00000 	.word	0x7ff00000
    6f20:	bff00000 	.word	0xbff00000
    6f24:	7ff00000 	.word	0x7ff00000
    6f28:	7c9fffff 	.word	0x7c9fffff
    6f2c:	7fefffff 	.word	0x7fefffff
    6f30:	20000280 	.word	0x20000280
    6f34:	7ca00000 	.word	0x7ca00000
    6f38:	200002a8 	.word	0x200002a8
    6f3c:	20000370 	.word	0x20000370
    6f40:	9302      	str	r3, [sp, #8]
    6f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6f44:	9301      	str	r3, [sp, #4]
    6f46:	ab12      	add	r3, sp, #72	; 0x48
    6f48:	9300      	str	r3, [sp, #0]
    6f4a:	4aa7      	ldr	r2, [pc, #668]	; (71e8 <_strtod_l+0xcb8>)
    6f4c:	ab13      	add	r3, sp, #76	; 0x4c
    6f4e:	a911      	add	r1, sp, #68	; 0x44
    6f50:	4640      	mov	r0, r8
    6f52:	f001 fd5f 	bl	8a14 <__gethex>
    6f56:	f010 050f 	ands.w	r5, r0, #15
    6f5a:	4604      	mov	r4, r0
    6f5c:	f43f aca3 	beq.w	68a6 <_strtod_l+0x376>
    6f60:	2d06      	cmp	r5, #6
    6f62:	d174      	bne.n	704e <_strtod_l+0xb1e>
    6f64:	9b07      	ldr	r3, [sp, #28]
    6f66:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 71d0 <_strtod_l+0xca0>
    6f6a:	3701      	adds	r7, #1
    6f6c:	2b00      	cmp	r3, #0
    6f6e:	f43f abce 	beq.w	670e <_strtod_l+0x1de>
    6f72:	601f      	str	r7, [r3, #0]
    6f74:	f7ff bbcb 	b.w	670e <_strtod_l+0x1de>
    6f78:	ed9d 8b04 	vldr	d8, [sp, #16]
    6f7c:	e495      	b.n	68aa <_strtod_l+0x37a>
    6f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6f80:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    6f84:	4403      	add	r3, r0
    6f86:	930b      	str	r3, [sp, #44]	; 0x2c
    6f88:	2801      	cmp	r0, #1
    6f8a:	f105 0301 	add.w	r3, r5, #1
    6f8e:	461a      	mov	r2, r3
    6f90:	d014      	beq.n	6fbc <_strtod_l+0xa8c>
    6f92:	4428      	add	r0, r5
    6f94:	1e44      	subs	r4, r0, #1
    6f96:	e003      	b.n	6fa0 <_strtod_l+0xa70>
    6f98:	0046      	lsls	r6, r0, #1
    6f9a:	429c      	cmp	r4, r3
    6f9c:	d00d      	beq.n	6fba <_strtod_l+0xa8a>
    6f9e:	3301      	adds	r3, #1
    6fa0:	462a      	mov	r2, r5
    6fa2:	2a08      	cmp	r2, #8
    6fa4:	461d      	mov	r5, r3
    6fa6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    6faa:	d9f5      	bls.n	6f98 <_strtod_l+0xa68>
    6fac:	2b10      	cmp	r3, #16
    6fae:	bfdc      	itt	le
    6fb0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    6fb4:	ea4f 0949 	movle.w	r9, r9, lsl #1
    6fb8:	e7ef      	b.n	6f9a <_strtod_l+0xa6a>
    6fba:	3202      	adds	r2, #2
    6fbc:	2d08      	cmp	r5, #8
    6fbe:	dc3c      	bgt.n	703a <_strtod_l+0xb0a>
    6fc0:	4615      	mov	r5, r2
    6fc2:	f7ff bb79 	b.w	66b8 <_strtod_l+0x188>
    6fc6:	4989      	ldr	r1, [pc, #548]	; (71ec <_strtod_l+0xcbc>)
    6fc8:	2201      	movs	r2, #1
    6fca:	4638      	mov	r0, r7
    6fcc:	f000 fdb4 	bl	7b38 <strncmp>
    6fd0:	2800      	cmp	r0, #0
    6fd2:	f000 8082 	beq.w	70da <_strtod_l+0xbaa>
    6fd6:	f04f 0e00 	mov.w	lr, #0
    6fda:	46f1      	mov	r9, lr
    6fdc:	4676      	mov	r6, lr
    6fde:	4675      	mov	r5, lr
    6fe0:	f7ff bbb5 	b.w	674e <_strtod_l+0x21e>
    6fe4:	f644 631f 	movw	r3, #19999	; 0x4e1f
    6fe8:	459b      	cmp	fp, r3
    6fea:	bfa8      	it	ge
    6fec:	469b      	movge	fp, r3
    6fee:	e42f      	b.n	6850 <_strtod_l+0x320>
    6ff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6ff4:	4618      	mov	r0, r3
    6ff6:	2b00      	cmp	r3, #0
    6ff8:	f47f ae23 	bne.w	6c42 <_strtod_l+0x712>
    6ffc:	2322      	movs	r3, #34	; 0x22
    6ffe:	ed9f 8b74 	vldr	d8, [pc, #464]	; 71d0 <_strtod_l+0xca0>
    7002:	9812      	ldr	r0, [sp, #72]	; 0x48
    7004:	f8c8 3000 	str.w	r3, [r8]
    7008:	e678      	b.n	6cfc <_strtod_l+0x7cc>
    700a:	eeb0 7b49 	vmov.f64	d7, d9
    700e:	e6c0      	b.n	6d92 <_strtod_l+0x862>
    7010:	4977      	ldr	r1, [pc, #476]	; (71f0 <_strtod_l+0xcc0>)
    7012:	a811      	add	r0, sp, #68	; 0x44
    7014:	f001 ffc8 	bl	8fa8 <__match>
    7018:	2800      	cmp	r0, #0
    701a:	f43f ab71 	beq.w	6700 <_strtod_l+0x1d0>
    701e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7020:	4974      	ldr	r1, [pc, #464]	; (71f4 <_strtod_l+0xcc4>)
    7022:	3b01      	subs	r3, #1
    7024:	a811      	add	r0, sp, #68	; 0x44
    7026:	9311      	str	r3, [sp, #68]	; 0x44
    7028:	f001 ffbe 	bl	8fa8 <__match>
    702c:	b910      	cbnz	r0, 7034 <_strtod_l+0xb04>
    702e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7030:	3301      	adds	r3, #1
    7032:	9311      	str	r3, [sp, #68]	; 0x44
    7034:	ed9f 8b68 	vldr	d8, [pc, #416]	; 71d8 <_strtod_l+0xca8>
    7038:	e437      	b.n	68aa <_strtod_l+0x37a>
    703a:	2a10      	cmp	r2, #16
    703c:	bfdc      	itt	le
    703e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    7042:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    7046:	4615      	mov	r5, r2
    7048:	2000      	movs	r0, #0
    704a:	f7ff bb3a 	b.w	66c2 <_strtod_l+0x192>
    704e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7050:	b13a      	cbz	r2, 7062 <_strtod_l+0xb32>
    7052:	2135      	movs	r1, #53	; 0x35
    7054:	a814      	add	r0, sp, #80	; 0x50
    7056:	f002 fd8b 	bl	9b70 <__copybits>
    705a:	9912      	ldr	r1, [sp, #72]	; 0x48
    705c:	4640      	mov	r0, r8
    705e:	f002 f8d3 	bl	9208 <_Bfree>
    7062:	3d01      	subs	r5, #1
    7064:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7066:	2d04      	cmp	r5, #4
    7068:	f200 818f 	bhi.w	738a <_strtod_l+0xe5a>
    706c:	e8df f005 	tbb	[pc, r5]
    7070:	1f2a2d03 	.word	0x1f2a2d03
    7074:	03          	.byte	0x03
    7075:	00          	.byte	0x00
    7076:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7078:	9204      	str	r2, [sp, #16]
    707a:	f203 4233 	addw	r2, r3, #1075	; 0x433
    707e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7080:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    7084:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    7088:	9305      	str	r3, [sp, #20]
    708a:	05e5      	lsls	r5, r4, #23
    708c:	d502      	bpl.n	7094 <_strtod_l+0xb64>
    708e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    7092:	9305      	str	r3, [sp, #20]
    7094:	4a58      	ldr	r2, [pc, #352]	; (71f8 <_strtod_l+0xcc8>)
    7096:	401a      	ands	r2, r3
    7098:	ed9d 8b04 	vldr	d8, [sp, #16]
    709c:	2a00      	cmp	r2, #0
    709e:	f47f ac04 	bne.w	68aa <_strtod_l+0x37a>
    70a2:	f001 f841 	bl	8128 <__errno>
    70a6:	2322      	movs	r3, #34	; 0x22
    70a8:	6003      	str	r3, [r0, #0]
    70aa:	f7ff bbfe 	b.w	68aa <_strtod_l+0x37a>
    70ae:	f04f 33ff 	mov.w	r3, #4294967295
    70b2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    70b6:	e9cd 3604 	strd	r3, r6, [sp, #16]
    70ba:	05e3      	lsls	r3, r4, #23
    70bc:	f57f af5c 	bpl.w	6f78 <_strtod_l+0xa48>
    70c0:	9b05      	ldr	r3, [sp, #20]
    70c2:	e7e4      	b.n	708e <_strtod_l+0xb5e>
    70c4:	4b4c      	ldr	r3, [pc, #304]	; (71f8 <_strtod_l+0xcc8>)
    70c6:	9305      	str	r3, [sp, #20]
    70c8:	e7f7      	b.n	70ba <_strtod_l+0xb8a>
    70ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    70cc:	9304      	str	r3, [sp, #16]
    70ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    70d0:	9305      	str	r3, [sp, #20]
    70d2:	e7da      	b.n	708a <_strtod_l+0xb5a>
    70d4:	2000      	movs	r0, #0
    70d6:	f7ff bae1 	b.w	669c <_strtod_l+0x16c>
    70da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70dc:	461a      	mov	r2, r3
    70de:	3301      	adds	r3, #1
    70e0:	9311      	str	r3, [sp, #68]	; 0x44
    70e2:	7854      	ldrb	r4, [r2, #1]
    70e4:	4606      	mov	r6, r0
    70e6:	4681      	mov	r9, r0
    70e8:	f7ff bacd 	b.w	6686 <_strtod_l+0x156>
    70ec:	4b43      	ldr	r3, [pc, #268]	; (71fc <_strtod_l+0xccc>)
    70ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    70f2:	ed93 8b00 	vldr	d8, [r3]
    70f6:	ed9d 7b04 	vldr	d7, [sp, #16]
    70fa:	ee28 8b07 	vmul.f64	d8, d8, d7
    70fe:	f7ff bbd4 	b.w	68aa <_strtod_l+0x37a>
    7102:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    7106:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    710a:	e511      	b.n	6b30 <_strtod_l+0x600>
    710c:	46ae      	mov	lr, r5
    710e:	900b      	str	r0, [sp, #44]	; 0x2c
    7110:	f7ff badc 	b.w	66cc <_strtod_l+0x19c>
    7114:	4b39      	ldr	r3, [pc, #228]	; (71fc <_strtod_l+0xccc>)
    7116:	f1c5 050f 	rsb	r5, r5, #15
    711a:	1b4a      	subs	r2, r1, r5
    711c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    7120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    7124:	ed95 8b00 	vldr	d8, [r5]
    7128:	ed93 7b00 	vldr	d7, [r3]
    712c:	ed9d 6b04 	vldr	d6, [sp, #16]
    7130:	ee28 8b06 	vmul.f64	d8, d8, d6
    7134:	ee28 8b07 	vmul.f64	d8, d8, d7
    7138:	f7ff bbb7 	b.w	68aa <_strtod_l+0x37a>
    713c:	2d00      	cmp	r5, #0
    713e:	f000 8095 	beq.w	726c <_strtod_l+0xd3c>
    7142:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    7146:	4b2e      	ldr	r3, [pc, #184]	; (7200 <_strtod_l+0xcd0>)
    7148:	f3cc 0113 	ubfx	r1, ip, #0, #20
    714c:	4299      	cmp	r1, r3
    714e:	4662      	mov	r2, ip
    7150:	f000 80d2 	beq.w	72f8 <_strtod_l+0xdc8>
    7154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7156:	2b00      	cmp	r3, #0
    7158:	f000 80a5 	beq.w	72a6 <_strtod_l+0xd76>
    715c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7160:	4213      	tst	r3, r2
    7162:	4617      	mov	r7, r2
    7164:	d01a      	beq.n	719c <_strtod_l+0xc6c>
    7166:	eeb0 0b48 	vmov.f64	d0, d8
    716a:	2d00      	cmp	r5, #0
    716c:	f000 80a6 	beq.w	72bc <_strtod_l+0xd8c>
    7170:	f002 fbce 	bl	9910 <__ulp>
    7174:	9b08      	ldr	r3, [sp, #32]
    7176:	b17b      	cbz	r3, 7198 <_strtod_l+0xc68>
    7178:	f3c7 530a 	ubfx	r3, r7, #20, #11
    717c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    7180:	2b00      	cmp	r3, #0
    7182:	dd09      	ble.n	7198 <_strtod_l+0xc68>
    7184:	051b      	lsls	r3, r3, #20
    7186:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    718a:	2000      	movs	r0, #0
    718c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    7190:	ec41 0b17 	vmov	d7, r0, r1
    7194:	ee20 0b07 	vmul.f64	d0, d0, d7
    7198:	ee38 8b00 	vadd.f64	d8, d8, d0
    719c:	9b08      	ldr	r3, [sp, #32]
    719e:	b15b      	cbz	r3, 71b8 <_strtod_l+0xc88>
    71a0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 71e0 <_strtod_l+0xcb0>
    71a4:	4b14      	ldr	r3, [pc, #80]	; (71f8 <_strtod_l+0xcc8>)
    71a6:	ee28 8b07 	vmul.f64	d8, d8, d7
    71aa:	ee18 2a90 	vmov	r2, s17
    71ae:	4013      	ands	r3, r2
    71b0:	b913      	cbnz	r3, 71b8 <_strtod_l+0xc88>
    71b2:	2322      	movs	r3, #34	; 0x22
    71b4:	f8c8 3000 	str.w	r3, [r8]
    71b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    71ba:	e59f      	b.n	6cfc <_strtod_l+0x7cc>
    71bc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    71c0:	9305      	str	r3, [sp, #20]
    71c2:	2300      	movs	r3, #0
    71c4:	9308      	str	r3, [sp, #32]
    71c6:	f7ff bbb1 	b.w	692c <_strtod_l+0x3fc>
    71ca:	bf00      	nop
    71cc:	f3af 8000 	nop.w
	...
    71dc:	7ff00000 	.word	0x7ff00000
    71e0:	00000000 	.word	0x00000000
    71e4:	39500000 	.word	0x39500000
    71e8:	20000fd4 	.word	0x20000fd4
    71ec:	20000c08 	.word	0x20000c08
    71f0:	20000c0c 	.word	0x20000c0c
    71f4:	20000c10 	.word	0x20000c10
    71f8:	7ff00000 	.word	0x7ff00000
    71fc:	200002a8 	.word	0x200002a8
    7200:	000fffff 	.word	0x000fffff
    7204:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7208:	430d      	orrs	r5, r1
    720a:	d1c7      	bne.n	719c <_strtod_l+0xc6c>
    720c:	f3c2 0313 	ubfx	r3, r2, #0, #20
    7210:	4617      	mov	r7, r2
    7212:	2b00      	cmp	r3, #0
    7214:	d1c2      	bne.n	719c <_strtod_l+0xc6c>
    7216:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    721a:	0d1b      	lsrs	r3, r3, #20
    721c:	051b      	lsls	r3, r3, #20
    721e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    7222:	d9bb      	bls.n	719c <_strtod_l+0xc6c>
    7224:	f8da 3014 	ldr.w	r3, [sl, #20]
    7228:	b91b      	cbnz	r3, 7232 <_strtod_l+0xd02>
    722a:	f8da 3010 	ldr.w	r3, [sl, #16]
    722e:	2b01      	cmp	r3, #1
    7230:	ddb4      	ble.n	719c <_strtod_l+0xc6c>
    7232:	4651      	mov	r1, sl
    7234:	2201      	movs	r2, #1
    7236:	4640      	mov	r0, r8
    7238:	f002 fa26 	bl	9688 <__lshift>
    723c:	4621      	mov	r1, r4
    723e:	4682      	mov	sl, r0
    7240:	f002 fa9a 	bl	9778 <__mcmp>
    7244:	2800      	cmp	r0, #0
    7246:	dda9      	ble.n	719c <_strtod_l+0xc6c>
    7248:	9b08      	ldr	r3, [sp, #32]
    724a:	2b00      	cmp	r3, #0
    724c:	d17e      	bne.n	734c <_strtod_l+0xe1c>
    724e:	4b50      	ldr	r3, [pc, #320]	; (7390 <_strtod_l+0xe60>)
    7250:	403b      	ands	r3, r7
    7252:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    7256:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    725a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    725e:	9305      	str	r3, [sp, #20]
    7260:	f04f 33ff 	mov.w	r3, #4294967295
    7264:	9304      	str	r3, [sp, #16]
    7266:	ed9d 8b04 	vldr	d8, [sp, #16]
    726a:	e797      	b.n	719c <_strtod_l+0xc6c>
    726c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7270:	f3c2 0313 	ubfx	r3, r2, #0, #20
    7274:	430b      	orrs	r3, r1
    7276:	4617      	mov	r7, r2
    7278:	f47f af6c 	bne.w	7154 <_strtod_l+0xc24>
    727c:	e7e4      	b.n	7248 <_strtod_l+0xd18>
    727e:	4945      	ldr	r1, [pc, #276]	; (7394 <_strtod_l+0xe64>)
    7280:	a811      	add	r0, sp, #68	; 0x44
    7282:	aa14      	add	r2, sp, #80	; 0x50
    7284:	f001 feac 	bl	8fe0 <__hexnan>
    7288:	2805      	cmp	r0, #5
    728a:	f47f ab06 	bne.w	689a <_strtod_l+0x36a>
    728e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7290:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    7294:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    7298:	9305      	str	r3, [sp, #20]
    729a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    729c:	9304      	str	r3, [sp, #16]
    729e:	ed9d 8b04 	vldr	d8, [sp, #16]
    72a2:	f7ff bb02 	b.w	68aa <_strtod_l+0x37a>
    72a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    72aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72ac:	4203      	tst	r3, r0
    72ae:	f43f af75 	beq.w	719c <_strtod_l+0xc6c>
    72b2:	460f      	mov	r7, r1
    72b4:	e757      	b.n	7166 <_strtod_l+0xc36>
    72b6:	4c38      	ldr	r4, [pc, #224]	; (7398 <_strtod_l+0xe68>)
    72b8:	2100      	movs	r1, #0
    72ba:	e58f      	b.n	6ddc <_strtod_l+0x8ac>
    72bc:	f002 fb28 	bl	9910 <__ulp>
    72c0:	9b08      	ldr	r3, [sp, #32]
    72c2:	2b00      	cmp	r3, #0
    72c4:	d055      	beq.n	7372 <_strtod_l+0xe42>
    72c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
    72ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    72ce:	2b00      	cmp	r3, #0
    72d0:	dd09      	ble.n	72e6 <_strtod_l+0xdb6>
    72d2:	051b      	lsls	r3, r3, #20
    72d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    72d8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    72dc:	4628      	mov	r0, r5
    72de:	ec41 0b17 	vmov	d7, r0, r1
    72e2:	ee20 0b07 	vmul.f64	d0, d0, d7
    72e6:	ee38 8b40 	vsub.f64	d8, d8, d0
    72ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
    72ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72f2:	f47f af55 	bne.w	71a0 <_strtod_l+0xc70>
    72f6:	e681      	b.n	6ffc <_strtod_l+0xacc>
    72f8:	9b08      	ldr	r3, [sp, #32]
    72fa:	9904      	ldr	r1, [sp, #16]
    72fc:	b31b      	cbz	r3, 7346 <_strtod_l+0xe16>
    72fe:	4b24      	ldr	r3, [pc, #144]	; (7390 <_strtod_l+0xe60>)
    7300:	4013      	ands	r3, r2
    7302:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    7306:	d81e      	bhi.n	7346 <_strtod_l+0xe16>
    7308:	0d1b      	lsrs	r3, r3, #20
    730a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    730e:	f04f 30ff 	mov.w	r0, #4294967295
    7312:	fa00 f303 	lsl.w	r3, r0, r3
    7316:	4299      	cmp	r1, r3
    7318:	f47f af1c 	bne.w	7154 <_strtod_l+0xc24>
    731c:	4b1f      	ldr	r3, [pc, #124]	; (739c <_strtod_l+0xe6c>)
    731e:	429a      	cmp	r2, r3
    7320:	d030      	beq.n	7384 <_strtod_l+0xe54>
    7322:	4b1b      	ldr	r3, [pc, #108]	; (7390 <_strtod_l+0xe60>)
    7324:	4013      	ands	r3, r2
    7326:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    732a:	9305      	str	r3, [sp, #20]
    732c:	2300      	movs	r3, #0
    732e:	9304      	str	r3, [sp, #16]
    7330:	ed9d 8b04 	vldr	d8, [sp, #16]
    7334:	e732      	b.n	719c <_strtod_l+0xc6c>
    7336:	f04f 32ff 	mov.w	r2, #4294967295
    733a:	fa02 f303 	lsl.w	r3, r2, r3
    733e:	9a04      	ldr	r2, [sp, #16]
    7340:	401a      	ands	r2, r3
    7342:	9204      	str	r2, [sp, #16]
    7344:	e5d0      	b.n	6ee8 <_strtod_l+0x9b8>
    7346:	f04f 33ff 	mov.w	r3, #4294967295
    734a:	e7e4      	b.n	7316 <_strtod_l+0xde6>
    734c:	4b10      	ldr	r3, [pc, #64]	; (7390 <_strtod_l+0xe60>)
    734e:	403b      	ands	r3, r7
    7350:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    7354:	f73f af7d 	bgt.w	7252 <_strtod_l+0xd22>
    7358:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    735c:	f73f af20 	bgt.w	71a0 <_strtod_l+0xc70>
    7360:	e64c      	b.n	6ffc <_strtod_l+0xacc>
    7362:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    7366:	f04f 33ff 	mov.w	r3, #4294967295
    736a:	4093      	lsls	r3, r2
    736c:	400b      	ands	r3, r1
    736e:	9305      	str	r3, [sp, #20]
    7370:	e5ba      	b.n	6ee8 <_strtod_l+0x9b8>
    7372:	ee38 8b40 	vsub.f64	d8, d8, d0
    7376:	eeb5 8b40 	vcmp.f64	d8, #0.0
    737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    737e:	f47f af1b 	bne.w	71b8 <_strtod_l+0xc88>
    7382:	e63b      	b.n	6ffc <_strtod_l+0xacc>
    7384:	3101      	adds	r1, #1
    7386:	d1cc      	bne.n	7322 <_strtod_l+0xdf2>
    7388:	e409      	b.n	6b9e <_strtod_l+0x66e>
    738a:	2300      	movs	r3, #0
    738c:	e67d      	b.n	708a <_strtod_l+0xb5a>
    738e:	bf00      	nop
    7390:	7ff00000 	.word	0x7ff00000
    7394:	20000fe8 	.word	0x20000fe8
    7398:	20000280 	.word	0x20000280
    739c:	7fefffff 	.word	0x7fefffff

000073a0 <strtof>:
    73a0:	b510      	push	{r4, lr}
    73a2:	4c23      	ldr	r4, [pc, #140]	; (7430 <strtof+0x90>)
    73a4:	4b23      	ldr	r3, [pc, #140]	; (7434 <strtof+0x94>)
    73a6:	4684      	mov	ip, r0
    73a8:	460a      	mov	r2, r1
    73aa:	6820      	ldr	r0, [r4, #0]
    73ac:	4661      	mov	r1, ip
    73ae:	f7ff f8bf 	bl	6530 <_strtod_l>
    73b2:	eeb4 0b40 	vcmp.f64	d0, d0
    73b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73ba:	d627      	bvs.n	740c <strtof+0x6c>
    73bc:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    73c0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 7438 <strtof+0x98>
    73c4:	eef0 6ae7 	vabs.f32	s13, s15
    73c8:	eef4 6a47 	vcmp.f32	s13, s14
    73cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73d0:	dd0e      	ble.n	73f0 <strtof+0x50>
    73d2:	eeb0 5bc0 	vabs.f64	d5, d0
    73d6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 7428 <strtof+0x88>
    73da:	eeb4 5b46 	vcmp.f64	d5, d6
    73de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73e2:	dc05      	bgt.n	73f0 <strtof+0x50>
    73e4:	6823      	ldr	r3, [r4, #0]
    73e6:	2222      	movs	r2, #34	; 0x22
    73e8:	601a      	str	r2, [r3, #0]
    73ea:	eeb0 0a67 	vmov.f32	s0, s15
    73ee:	bd10      	pop	{r4, pc}
    73f0:	ee17 3a90 	vmov	r3, s15
    73f4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    73f8:	d1f7      	bne.n	73ea <strtof+0x4a>
    73fa:	4b10      	ldr	r3, [pc, #64]	; (743c <strtof+0x9c>)
    73fc:	ee10 2a90 	vmov	r2, s1
    7400:	4013      	ands	r3, r2
    7402:	2b00      	cmp	r3, #0
    7404:	d1ee      	bne.n	73e4 <strtof+0x44>
    7406:	eeb0 0a67 	vmov.f32	s0, s15
    740a:	bd10      	pop	{r4, pc}
    740c:	ee10 3a90 	vmov	r3, s1
    7410:	2b00      	cmp	r3, #0
    7412:	480b      	ldr	r0, [pc, #44]	; (7440 <strtof+0xa0>)
    7414:	da04      	bge.n	7420 <strtof+0x80>
    7416:	f001 f90b 	bl	8630 <nanf>
    741a:	eef1 7a40 	vneg.f32	s15, s0
    741e:	e7e4      	b.n	73ea <strtof+0x4a>
    7420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7424:	f001 b904 	b.w	8630 <nanf>
    7428:	ffffffff 	.word	0xffffffff
    742c:	7fefffff 	.word	0x7fefffff
    7430:	20001b18 	.word	0x20001b18
    7434:	20001590 	.word	0x20001590
    7438:	7f7fffff 	.word	0x7f7fffff
    743c:	7ff00000 	.word	0x7ff00000
    7440:	200003cc 	.word	0x200003cc

00007444 <_strtol_l.constprop.0>:
    7444:	2b01      	cmp	r3, #1
    7446:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    744a:	d040      	beq.n	74ce <_strtol_l.constprop.0+0x8a>
    744c:	2b24      	cmp	r3, #36	; 0x24
    744e:	4698      	mov	r8, r3
    7450:	d83d      	bhi.n	74ce <_strtol_l.constprop.0+0x8a>
    7452:	4d4c      	ldr	r5, [pc, #304]	; (7584 <_strtol_l.constprop.0+0x140>)
    7454:	468e      	mov	lr, r1
    7456:	4676      	mov	r6, lr
    7458:	f81e bb01 	ldrb.w	fp, [lr], #1
    745c:	f815 400b 	ldrb.w	r4, [r5, fp]
    7460:	f014 0408 	ands.w	r4, r4, #8
    7464:	d1f7      	bne.n	7456 <_strtol_l.constprop.0+0x12>
    7466:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    746a:	d072      	beq.n	7552 <_strtol_l.constprop.0+0x10e>
    746c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    7470:	bf08      	it	eq
    7472:	f89e b000 	ldrbeq.w	fp, [lr]
    7476:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    747a:	bf08      	it	eq
    747c:	f106 0e02 	addeq.w	lr, r6, #2
    7480:	2b00      	cmp	r3, #0
    7482:	d042      	beq.n	750a <_strtol_l.constprop.0+0xc6>
    7484:	2b10      	cmp	r3, #16
    7486:	d057      	beq.n	7538 <_strtol_l.constprop.0+0xf4>
    7488:	fbb9 f7f8 	udiv	r7, r9, r8
    748c:	2500      	movs	r5, #0
    748e:	462e      	mov	r6, r5
    7490:	fb08 9a17 	mls	sl, r8, r7, r9
    7494:	e005      	b.n	74a2 <_strtol_l.constprop.0+0x5e>
    7496:	d033      	beq.n	7500 <_strtol_l.constprop.0+0xbc>
    7498:	fb08 c606 	mla	r6, r8, r6, ip
    749c:	2501      	movs	r5, #1
    749e:	f81e bb01 	ldrb.w	fp, [lr], #1
    74a2:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    74a6:	f1bc 0f09 	cmp.w	ip, #9
    74aa:	d906      	bls.n	74ba <_strtol_l.constprop.0+0x76>
    74ac:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    74b0:	f1bc 0f19 	cmp.w	ip, #25
    74b4:	d812      	bhi.n	74dc <_strtol_l.constprop.0+0x98>
    74b6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    74ba:	4563      	cmp	r3, ip
    74bc:	dd17      	ble.n	74ee <_strtol_l.constprop.0+0xaa>
    74be:	f1b5 3fff 	cmp.w	r5, #4294967295
    74c2:	d0ec      	beq.n	749e <_strtol_l.constprop.0+0x5a>
    74c4:	42b7      	cmp	r7, r6
    74c6:	d2e6      	bcs.n	7496 <_strtol_l.constprop.0+0x52>
    74c8:	f04f 35ff 	mov.w	r5, #4294967295
    74cc:	e7e7      	b.n	749e <_strtol_l.constprop.0+0x5a>
    74ce:	f000 fe2b 	bl	8128 <__errno>
    74d2:	2316      	movs	r3, #22
    74d4:	6003      	str	r3, [r0, #0]
    74d6:	2000      	movs	r0, #0
    74d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74dc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    74e0:	f1bc 0f19 	cmp.w	ip, #25
    74e4:	d803      	bhi.n	74ee <_strtol_l.constprop.0+0xaa>
    74e6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    74ea:	4563      	cmp	r3, ip
    74ec:	dce7      	bgt.n	74be <_strtol_l.constprop.0+0x7a>
    74ee:	1c6b      	adds	r3, r5, #1
    74f0:	d027      	beq.n	7542 <_strtol_l.constprop.0+0xfe>
    74f2:	b98c      	cbnz	r4, 7518 <_strtol_l.constprop.0+0xd4>
    74f4:	b10a      	cbz	r2, 74fa <_strtol_l.constprop.0+0xb6>
    74f6:	bba5      	cbnz	r5, 7562 <_strtol_l.constprop.0+0x11e>
    74f8:	6011      	str	r1, [r2, #0]
    74fa:	4630      	mov	r0, r6
    74fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7500:	45e2      	cmp	sl, ip
    7502:	dac9      	bge.n	7498 <_strtol_l.constprop.0+0x54>
    7504:	f04f 35ff 	mov.w	r5, #4294967295
    7508:	e7c9      	b.n	749e <_strtol_l.constprop.0+0x5a>
    750a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    750e:	d005      	beq.n	751c <_strtol_l.constprop.0+0xd8>
    7510:	f04f 080a 	mov.w	r8, #10
    7514:	4643      	mov	r3, r8
    7516:	e7b7      	b.n	7488 <_strtol_l.constprop.0+0x44>
    7518:	4276      	negs	r6, r6
    751a:	e7eb      	b.n	74f4 <_strtol_l.constprop.0+0xb0>
    751c:	f89e 3000 	ldrb.w	r3, [lr]
    7520:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    7524:	2b58      	cmp	r3, #88	; 0x58
    7526:	d121      	bne.n	756c <_strtol_l.constprop.0+0x128>
    7528:	f04f 0810 	mov.w	r8, #16
    752c:	f89e b001 	ldrb.w	fp, [lr, #1]
    7530:	4643      	mov	r3, r8
    7532:	f10e 0e02 	add.w	lr, lr, #2
    7536:	e7a7      	b.n	7488 <_strtol_l.constprop.0+0x44>
    7538:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    753c:	d01a      	beq.n	7574 <_strtol_l.constprop.0+0x130>
    753e:	4698      	mov	r8, r3
    7540:	e7a2      	b.n	7488 <_strtol_l.constprop.0+0x44>
    7542:	2322      	movs	r3, #34	; 0x22
    7544:	6003      	str	r3, [r0, #0]
    7546:	b172      	cbz	r2, 7566 <_strtol_l.constprop.0+0x122>
    7548:	f10e 31ff 	add.w	r1, lr, #4294967295
    754c:	464e      	mov	r6, r9
    754e:	6011      	str	r1, [r2, #0]
    7550:	e7d3      	b.n	74fa <_strtol_l.constprop.0+0xb6>
    7552:	f89e b000 	ldrb.w	fp, [lr]
    7556:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    755a:	f106 0e02 	add.w	lr, r6, #2
    755e:	2401      	movs	r4, #1
    7560:	e78e      	b.n	7480 <_strtol_l.constprop.0+0x3c>
    7562:	46b1      	mov	r9, r6
    7564:	e7f0      	b.n	7548 <_strtol_l.constprop.0+0x104>
    7566:	464e      	mov	r6, r9
    7568:	4630      	mov	r0, r6
    756a:	e7c7      	b.n	74fc <_strtol_l.constprop.0+0xb8>
    756c:	f04f 0808 	mov.w	r8, #8
    7570:	4643      	mov	r3, r8
    7572:	e789      	b.n	7488 <_strtol_l.constprop.0+0x44>
    7574:	f89e 5000 	ldrb.w	r5, [lr]
    7578:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    757c:	2d58      	cmp	r5, #88	; 0x58
    757e:	d0d3      	beq.n	7528 <_strtol_l.constprop.0+0xe4>
    7580:	4698      	mov	r8, r3
    7582:	e781      	b.n	7488 <_strtol_l.constprop.0+0x44>
    7584:	20000a99 	.word	0x20000a99

00007588 <strtol>:
    7588:	b410      	push	{r4}
    758a:	4c05      	ldr	r4, [pc, #20]	; (75a0 <strtol+0x18>)
    758c:	4684      	mov	ip, r0
    758e:	4613      	mov	r3, r2
    7590:	6820      	ldr	r0, [r4, #0]
    7592:	f85d 4b04 	ldr.w	r4, [sp], #4
    7596:	460a      	mov	r2, r1
    7598:	4661      	mov	r1, ip
    759a:	f7ff bf53 	b.w	7444 <_strtol_l.constprop.0>
    759e:	bf00      	nop
    75a0:	20001b18 	.word	0x20001b18

000075a4 <__utoa>:
    75a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    75a6:	4f25      	ldr	r7, [pc, #148]	; (763c <__utoa+0x98>)
    75a8:	f1a2 0e02 	sub.w	lr, r2, #2
    75ac:	4616      	mov	r6, r2
    75ae:	4605      	mov	r5, r0
    75b0:	460c      	mov	r4, r1
    75b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    75b4:	b08b      	sub	sp, #44	; 0x2c
    75b6:	46ec      	mov	ip, sp
    75b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    75bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    75be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    75c2:	e897 0003 	ldmia.w	r7, {r0, r1}
    75c6:	f84c 0b04 	str.w	r0, [ip], #4
    75ca:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    75ce:	f88c 1000 	strb.w	r1, [ip]
    75d2:	d82e      	bhi.n	7632 <__utoa+0x8e>
    75d4:	f104 3eff 	add.w	lr, r4, #4294967295
    75d8:	4670      	mov	r0, lr
    75da:	f04f 0c00 	mov.w	ip, #0
    75de:	fbb5 f2f6 	udiv	r2, r5, r6
    75e2:	fb06 5312 	mls	r3, r6, r2, r5
    75e6:	3328      	adds	r3, #40	; 0x28
    75e8:	446b      	add	r3, sp
    75ea:	4661      	mov	r1, ip
    75ec:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    75f0:	f800 cf01 	strb.w	ip, [r0, #1]!
    75f4:	462b      	mov	r3, r5
    75f6:	429e      	cmp	r6, r3
    75f8:	f101 0c01 	add.w	ip, r1, #1
    75fc:	4615      	mov	r5, r2
    75fe:	d9ee      	bls.n	75de <__utoa+0x3a>
    7600:	2300      	movs	r3, #0
    7602:	f804 300c 	strb.w	r3, [r4, ip]
    7606:	b189      	cbz	r1, 762c <__utoa+0x88>
    7608:	44a4      	add	ip, r4
    760a:	4672      	mov	r2, lr
    760c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    7610:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    7614:	f88e 5000 	strb.w	r5, [lr]
    7618:	eba4 030e 	sub.w	r3, r4, lr
    761c:	3202      	adds	r2, #2
    761e:	3b01      	subs	r3, #1
    7620:	1b12      	subs	r2, r2, r4
    7622:	440b      	add	r3, r1
    7624:	429a      	cmp	r2, r3
    7626:	f88c 0000 	strb.w	r0, [ip]
    762a:	dbee      	blt.n	760a <__utoa+0x66>
    762c:	4620      	mov	r0, r4
    762e:	b00b      	add	sp, #44	; 0x2c
    7630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7632:	2300      	movs	r3, #0
    7634:	4618      	mov	r0, r3
    7636:	7023      	strb	r3, [r4, #0]
    7638:	b00b      	add	sp, #44	; 0x2c
    763a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    763c:	20000a70 	.word	0x20000a70

00007640 <__cxa_atexit>:
    7640:	4613      	mov	r3, r2
    7642:	460a      	mov	r2, r1
    7644:	4601      	mov	r1, r0
    7646:	2002      	movs	r0, #2
    7648:	f000 bff8 	b.w	863c <__register_exitproc>

0000764c <fcvtf>:
    764c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    7650:	2300      	movs	r3, #0
    7652:	f002 bafb 	b.w	9c4c <fcvtbuf>
    7656:	bf00      	nop

00007658 <isspace>:
    7658:	4b02      	ldr	r3, [pc, #8]	; (7664 <isspace+0xc>)
    765a:	4418      	add	r0, r3
    765c:	7840      	ldrb	r0, [r0, #1]
    765e:	f000 0008 	and.w	r0, r0, #8
    7662:	4770      	bx	lr
    7664:	20000a98 	.word	0x20000a98

00007668 <tolower>:
    7668:	4b03      	ldr	r3, [pc, #12]	; (7678 <tolower+0x10>)
    766a:	5c1b      	ldrb	r3, [r3, r0]
    766c:	f003 0303 	and.w	r3, r3, #3
    7670:	2b01      	cmp	r3, #1
    7672:	bf08      	it	eq
    7674:	3020      	addeq	r0, #32
    7676:	4770      	bx	lr
    7678:	20000a99 	.word	0x20000a99

0000767c <stdio_exit_handler>:
    767c:	4a02      	ldr	r2, [pc, #8]	; (7688 <stdio_exit_handler+0xc>)
    767e:	4903      	ldr	r1, [pc, #12]	; (768c <stdio_exit_handler+0x10>)
    7680:	4803      	ldr	r0, [pc, #12]	; (7690 <stdio_exit_handler+0x14>)
    7682:	f000 b8bb 	b.w	77fc <_fwalk_sglue>
    7686:	bf00      	nop
    7688:	20001b0c 	.word	0x20001b0c
    768c:	00009cf1 	.word	0x00009cf1
    7690:	20001190 	.word	0x20001190

00007694 <cleanup_stdio>:
    7694:	4b0c      	ldr	r3, [pc, #48]	; (76c8 <cleanup_stdio+0x34>)
    7696:	6841      	ldr	r1, [r0, #4]
    7698:	4299      	cmp	r1, r3
    769a:	b510      	push	{r4, lr}
    769c:	4604      	mov	r4, r0
    769e:	d001      	beq.n	76a4 <cleanup_stdio+0x10>
    76a0:	f002 fb26 	bl	9cf0 <_fclose_r>
    76a4:	68a1      	ldr	r1, [r4, #8]
    76a6:	4b09      	ldr	r3, [pc, #36]	; (76cc <cleanup_stdio+0x38>)
    76a8:	4299      	cmp	r1, r3
    76aa:	d002      	beq.n	76b2 <cleanup_stdio+0x1e>
    76ac:	4620      	mov	r0, r4
    76ae:	f002 fb1f 	bl	9cf0 <_fclose_r>
    76b2:	68e1      	ldr	r1, [r4, #12]
    76b4:	4b06      	ldr	r3, [pc, #24]	; (76d0 <cleanup_stdio+0x3c>)
    76b6:	4299      	cmp	r1, r3
    76b8:	d004      	beq.n	76c4 <cleanup_stdio+0x30>
    76ba:	4620      	mov	r0, r4
    76bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76c0:	f002 bb16 	b.w	9cf0 <_fclose_r>
    76c4:	bd10      	pop	{r4, pc}
    76c6:	bf00      	nop
    76c8:	20003194 	.word	0x20003194
    76cc:	200031fc 	.word	0x200031fc
    76d0:	20003264 	.word	0x20003264

000076d4 <global_stdio_init.part.0>:
    76d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    76d8:	4c2a      	ldr	r4, [pc, #168]	; (7784 <global_stdio_init.part.0+0xb0>)
    76da:	4b2b      	ldr	r3, [pc, #172]	; (7788 <global_stdio_init.part.0+0xb4>)
    76dc:	482b      	ldr	r0, [pc, #172]	; (778c <global_stdio_init.part.0+0xb8>)
    76de:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 77a0 <global_stdio_init.part.0+0xcc>
    76e2:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 77a4 <global_stdio_init.part.0+0xd0>
    76e6:	4f2a      	ldr	r7, [pc, #168]	; (7790 <global_stdio_init.part.0+0xbc>)
    76e8:	6018      	str	r0, [r3, #0]
    76ea:	2500      	movs	r5, #0
    76ec:	2304      	movs	r3, #4
    76ee:	2208      	movs	r2, #8
    76f0:	4629      	mov	r1, r5
    76f2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    76f6:	4e27      	ldr	r6, [pc, #156]	; (7794 <global_stdio_init.part.0+0xc0>)
    76f8:	6665      	str	r5, [r4, #100]	; 0x64
    76fa:	e9c4 5302 	strd	r5, r3, [r4, #8]
    76fe:	e9c4 5500 	strd	r5, r5, [r4]
    7702:	e9c4 5504 	strd	r5, r5, [r4, #16]
    7706:	61a5      	str	r5, [r4, #24]
    7708:	f000 f95e 	bl	79c8 <memset>
    770c:	4b22      	ldr	r3, [pc, #136]	; (7798 <global_stdio_init.part.0+0xc4>)
    770e:	6763      	str	r3, [r4, #116]	; 0x74
    7710:	2208      	movs	r2, #8
    7712:	4629      	mov	r1, r5
    7714:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    7718:	e9c4 4907 	strd	r4, r9, [r4, #28]
    771c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    7720:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    7724:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    7728:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    772c:	6725      	str	r5, [r4, #112]	; 0x70
    772e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    7732:	62e6      	str	r6, [r4, #44]	; 0x2c
    7734:	f000 f948 	bl	79c8 <memset>
    7738:	4b18      	ldr	r3, [pc, #96]	; (779c <global_stdio_init.part.0+0xc8>)
    773a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    773e:	4629      	mov	r1, r5
    7740:	f104 0368 	add.w	r3, r4, #104	; 0x68
    7744:	2208      	movs	r2, #8
    7746:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    774a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    774e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    7752:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    7756:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    775a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    775e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    7762:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    7766:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    776a:	f000 f92d 	bl	79c8 <memset>
    776e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    7772:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    7776:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    777a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7782:	bf00      	nop
    7784:	20003194 	.word	0x20003194
    7788:	200032cc 	.word	0x200032cc
    778c:	0000767d 	.word	0x0000767d
    7790:	000078a9 	.word	0x000078a9
    7794:	000078c9 	.word	0x000078c9
    7798:	00010009 	.word	0x00010009
    779c:	00020012 	.word	0x00020012
    77a0:	00007845 	.word	0x00007845
    77a4:	00007869 	.word	0x00007869

000077a8 <__sinit>:
    77a8:	b510      	push	{r4, lr}
    77aa:	4604      	mov	r4, r0
    77ac:	480a      	ldr	r0, [pc, #40]	; (77d8 <__sinit+0x30>)
    77ae:	f000 fce9 	bl	8184 <__retarget_lock_acquire_recursive>
    77b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77b4:	b923      	cbnz	r3, 77c0 <__sinit+0x18>
    77b6:	4b09      	ldr	r3, [pc, #36]	; (77dc <__sinit+0x34>)
    77b8:	4a09      	ldr	r2, [pc, #36]	; (77e0 <__sinit+0x38>)
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	6362      	str	r2, [r4, #52]	; 0x34
    77be:	b123      	cbz	r3, 77ca <__sinit+0x22>
    77c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77c4:	4804      	ldr	r0, [pc, #16]	; (77d8 <__sinit+0x30>)
    77c6:	f000 bcdf 	b.w	8188 <__retarget_lock_release_recursive>
    77ca:	f7ff ff83 	bl	76d4 <global_stdio_init.part.0>
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	4801      	ldr	r0, [pc, #4]	; (77d8 <__sinit+0x30>)
    77d4:	f000 bcd8 	b.w	8188 <__retarget_lock_release_recursive>
    77d8:	2000315c 	.word	0x2000315c
    77dc:	200032cc 	.word	0x200032cc
    77e0:	00007695 	.word	0x00007695

000077e4 <__sfp_lock_acquire>:
    77e4:	4801      	ldr	r0, [pc, #4]	; (77ec <__sfp_lock_acquire+0x8>)
    77e6:	f000 bccd 	b.w	8184 <__retarget_lock_acquire_recursive>
    77ea:	bf00      	nop
    77ec:	2000315c 	.word	0x2000315c

000077f0 <__sfp_lock_release>:
    77f0:	4801      	ldr	r0, [pc, #4]	; (77f8 <__sfp_lock_release+0x8>)
    77f2:	f000 bcc9 	b.w	8188 <__retarget_lock_release_recursive>
    77f6:	bf00      	nop
    77f8:	2000315c 	.word	0x2000315c

000077fc <_fwalk_sglue>:
    77fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7800:	4680      	mov	r8, r0
    7802:	460f      	mov	r7, r1
    7804:	4616      	mov	r6, r2
    7806:	f04f 0900 	mov.w	r9, #0
    780a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    780e:	3d01      	subs	r5, #1
    7810:	d411      	bmi.n	7836 <_fwalk_sglue+0x3a>
    7812:	89a3      	ldrh	r3, [r4, #12]
    7814:	2b01      	cmp	r3, #1
    7816:	f105 35ff 	add.w	r5, r5, #4294967295
    781a:	d908      	bls.n	782e <_fwalk_sglue+0x32>
    781c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    7820:	3301      	adds	r3, #1
    7822:	4621      	mov	r1, r4
    7824:	d003      	beq.n	782e <_fwalk_sglue+0x32>
    7826:	4640      	mov	r0, r8
    7828:	47b8      	blx	r7
    782a:	ea49 0900 	orr.w	r9, r9, r0
    782e:	1c6b      	adds	r3, r5, #1
    7830:	f104 0468 	add.w	r4, r4, #104	; 0x68
    7834:	d1ed      	bne.n	7812 <_fwalk_sglue+0x16>
    7836:	6836      	ldr	r6, [r6, #0]
    7838:	2e00      	cmp	r6, #0
    783a:	d1e6      	bne.n	780a <_fwalk_sglue+0xe>
    783c:	4648      	mov	r0, r9
    783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7842:	bf00      	nop

00007844 <__sread>:
    7844:	b510      	push	{r4, lr}
    7846:	460c      	mov	r4, r1
    7848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    784c:	f000 fc2e 	bl	80ac <_read_r>
    7850:	2800      	cmp	r0, #0
    7852:	db03      	blt.n	785c <__sread+0x18>
    7854:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7856:	4403      	add	r3, r0
    7858:	6523      	str	r3, [r4, #80]	; 0x50
    785a:	bd10      	pop	{r4, pc}
    785c:	89a3      	ldrh	r3, [r4, #12]
    785e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    7862:	81a3      	strh	r3, [r4, #12]
    7864:	bd10      	pop	{r4, pc}
    7866:	bf00      	nop

00007868 <__swrite>:
    7868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    786c:	460c      	mov	r4, r1
    786e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    7872:	461f      	mov	r7, r3
    7874:	05cb      	lsls	r3, r1, #23
    7876:	4605      	mov	r5, r0
    7878:	4616      	mov	r6, r2
    787a:	d40b      	bmi.n	7894 <__swrite+0x2c>
    787c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    7880:	81a1      	strh	r1, [r4, #12]
    7882:	463b      	mov	r3, r7
    7884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7888:	4632      	mov	r2, r6
    788a:	4628      	mov	r0, r5
    788c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7890:	f000 bc34 	b.w	80fc <_write_r>
    7894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7898:	2302      	movs	r3, #2
    789a:	2200      	movs	r2, #0
    789c:	f000 fbf0 	bl	8080 <_lseek_r>
    78a0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    78a4:	e7ea      	b.n	787c <__swrite+0x14>
    78a6:	bf00      	nop

000078a8 <__sseek>:
    78a8:	b510      	push	{r4, lr}
    78aa:	460c      	mov	r4, r1
    78ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    78b0:	f000 fbe6 	bl	8080 <_lseek_r>
    78b4:	89a3      	ldrh	r3, [r4, #12]
    78b6:	1c42      	adds	r2, r0, #1
    78b8:	bf0e      	itee	eq
    78ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    78be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    78c2:	6520      	strne	r0, [r4, #80]	; 0x50
    78c4:	81a3      	strh	r3, [r4, #12]
    78c6:	bd10      	pop	{r4, pc}

000078c8 <__sclose>:
    78c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    78cc:	f000 bbc6 	b.w	805c <_close_r>

000078d0 <memmove>:
    78d0:	4288      	cmp	r0, r1
    78d2:	d90d      	bls.n	78f0 <memmove+0x20>
    78d4:	188b      	adds	r3, r1, r2
    78d6:	4283      	cmp	r3, r0
    78d8:	d90a      	bls.n	78f0 <memmove+0x20>
    78da:	eb00 0c02 	add.w	ip, r0, r2
    78de:	b1ba      	cbz	r2, 7910 <memmove+0x40>
    78e0:	4662      	mov	r2, ip
    78e2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    78e6:	f802 cd01 	strb.w	ip, [r2, #-1]!
    78ea:	4299      	cmp	r1, r3
    78ec:	d1f9      	bne.n	78e2 <memmove+0x12>
    78ee:	4770      	bx	lr
    78f0:	2a0f      	cmp	r2, #15
    78f2:	d80e      	bhi.n	7912 <memmove+0x42>
    78f4:	4603      	mov	r3, r0
    78f6:	f102 3cff 	add.w	ip, r2, #4294967295
    78fa:	b14a      	cbz	r2, 7910 <memmove+0x40>
    78fc:	f10c 0c01 	add.w	ip, ip, #1
    7900:	3b01      	subs	r3, #1
    7902:	448c      	add	ip, r1
    7904:	f811 2b01 	ldrb.w	r2, [r1], #1
    7908:	f803 2f01 	strb.w	r2, [r3, #1]!
    790c:	4561      	cmp	r1, ip
    790e:	d1f9      	bne.n	7904 <memmove+0x34>
    7910:	4770      	bx	lr
    7912:	ea40 0301 	orr.w	r3, r0, r1
    7916:	079b      	lsls	r3, r3, #30
    7918:	d150      	bne.n	79bc <memmove+0xec>
    791a:	f1a2 0310 	sub.w	r3, r2, #16
    791e:	b570      	push	{r4, r5, r6, lr}
    7920:	f101 0c20 	add.w	ip, r1, #32
    7924:	f023 050f 	bic.w	r5, r3, #15
    7928:	f101 0e10 	add.w	lr, r1, #16
    792c:	f100 0410 	add.w	r4, r0, #16
    7930:	44ac      	add	ip, r5
    7932:	091b      	lsrs	r3, r3, #4
    7934:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    7938:	f844 5c10 	str.w	r5, [r4, #-16]
    793c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    7940:	f844 5c0c 	str.w	r5, [r4, #-12]
    7944:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    7948:	f844 5c08 	str.w	r5, [r4, #-8]
    794c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    7950:	f844 5c04 	str.w	r5, [r4, #-4]
    7954:	f10e 0e10 	add.w	lr, lr, #16
    7958:	45e6      	cmp	lr, ip
    795a:	f104 0410 	add.w	r4, r4, #16
    795e:	d1e9      	bne.n	7934 <memmove+0x64>
    7960:	3301      	adds	r3, #1
    7962:	f012 0f0c 	tst.w	r2, #12
    7966:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    796a:	f002 040f 	and.w	r4, r2, #15
    796e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    7972:	d027      	beq.n	79c4 <memmove+0xf4>
    7974:	3c04      	subs	r4, #4
    7976:	f024 0603 	bic.w	r6, r4, #3
    797a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    797e:	441e      	add	r6, r3
    7980:	1f1c      	subs	r4, r3, #4
    7982:	468e      	mov	lr, r1
    7984:	f85e 5b04 	ldr.w	r5, [lr], #4
    7988:	f844 5f04 	str.w	r5, [r4, #4]!
    798c:	42b4      	cmp	r4, r6
    798e:	d1f9      	bne.n	7984 <memmove+0xb4>
    7990:	f10c 0401 	add.w	r4, ip, #1
    7994:	f002 0203 	and.w	r2, r2, #3
    7998:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    799c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    79a0:	f102 3cff 	add.w	ip, r2, #4294967295
    79a4:	b14a      	cbz	r2, 79ba <memmove+0xea>
    79a6:	f10c 0c01 	add.w	ip, ip, #1
    79aa:	3b01      	subs	r3, #1
    79ac:	448c      	add	ip, r1
    79ae:	f811 2b01 	ldrb.w	r2, [r1], #1
    79b2:	f803 2f01 	strb.w	r2, [r3, #1]!
    79b6:	4561      	cmp	r1, ip
    79b8:	d1f9      	bne.n	79ae <memmove+0xde>
    79ba:	bd70      	pop	{r4, r5, r6, pc}
    79bc:	f102 3cff 	add.w	ip, r2, #4294967295
    79c0:	4603      	mov	r3, r0
    79c2:	e79b      	b.n	78fc <memmove+0x2c>
    79c4:	4622      	mov	r2, r4
    79c6:	e7eb      	b.n	79a0 <memmove+0xd0>

000079c8 <memset>:
    79c8:	0783      	lsls	r3, r0, #30
    79ca:	b530      	push	{r4, r5, lr}
    79cc:	d048      	beq.n	7a60 <memset+0x98>
    79ce:	1e54      	subs	r4, r2, #1
    79d0:	2a00      	cmp	r2, #0
    79d2:	d03f      	beq.n	7a54 <memset+0x8c>
    79d4:	b2ca      	uxtb	r2, r1
    79d6:	4603      	mov	r3, r0
    79d8:	e001      	b.n	79de <memset+0x16>
    79da:	3c01      	subs	r4, #1
    79dc:	d33a      	bcc.n	7a54 <memset+0x8c>
    79de:	f803 2b01 	strb.w	r2, [r3], #1
    79e2:	079d      	lsls	r5, r3, #30
    79e4:	d1f9      	bne.n	79da <memset+0x12>
    79e6:	2c03      	cmp	r4, #3
    79e8:	d92d      	bls.n	7a46 <memset+0x7e>
    79ea:	b2cd      	uxtb	r5, r1
    79ec:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    79f0:	2c0f      	cmp	r4, #15
    79f2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    79f6:	d936      	bls.n	7a66 <memset+0x9e>
    79f8:	f1a4 0210 	sub.w	r2, r4, #16
    79fc:	f022 0c0f 	bic.w	ip, r2, #15
    7a00:	f103 0e20 	add.w	lr, r3, #32
    7a04:	44e6      	add	lr, ip
    7a06:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    7a0a:	f103 0210 	add.w	r2, r3, #16
    7a0e:	e942 5504 	strd	r5, r5, [r2, #-16]
    7a12:	e942 5502 	strd	r5, r5, [r2, #-8]
    7a16:	3210      	adds	r2, #16
    7a18:	4572      	cmp	r2, lr
    7a1a:	d1f8      	bne.n	7a0e <memset+0x46>
    7a1c:	f10c 0201 	add.w	r2, ip, #1
    7a20:	f014 0f0c 	tst.w	r4, #12
    7a24:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    7a28:	f004 0c0f 	and.w	ip, r4, #15
    7a2c:	d013      	beq.n	7a56 <memset+0x8e>
    7a2e:	f1ac 0304 	sub.w	r3, ip, #4
    7a32:	f023 0303 	bic.w	r3, r3, #3
    7a36:	3304      	adds	r3, #4
    7a38:	4413      	add	r3, r2
    7a3a:	f842 5b04 	str.w	r5, [r2], #4
    7a3e:	4293      	cmp	r3, r2
    7a40:	d1fb      	bne.n	7a3a <memset+0x72>
    7a42:	f00c 0403 	and.w	r4, ip, #3
    7a46:	b12c      	cbz	r4, 7a54 <memset+0x8c>
    7a48:	b2c9      	uxtb	r1, r1
    7a4a:	441c      	add	r4, r3
    7a4c:	f803 1b01 	strb.w	r1, [r3], #1
    7a50:	429c      	cmp	r4, r3
    7a52:	d1fb      	bne.n	7a4c <memset+0x84>
    7a54:	bd30      	pop	{r4, r5, pc}
    7a56:	4664      	mov	r4, ip
    7a58:	4613      	mov	r3, r2
    7a5a:	2c00      	cmp	r4, #0
    7a5c:	d1f4      	bne.n	7a48 <memset+0x80>
    7a5e:	e7f9      	b.n	7a54 <memset+0x8c>
    7a60:	4603      	mov	r3, r0
    7a62:	4614      	mov	r4, r2
    7a64:	e7bf      	b.n	79e6 <memset+0x1e>
    7a66:	461a      	mov	r2, r3
    7a68:	46a4      	mov	ip, r4
    7a6a:	e7e0      	b.n	7a2e <memset+0x66>

00007a6c <strchr>:
    7a6c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7a70:	4603      	mov	r3, r0
    7a72:	d044      	beq.n	7afe <strchr+0x92>
    7a74:	0782      	lsls	r2, r0, #30
    7a76:	d132      	bne.n	7ade <strchr+0x72>
    7a78:	b510      	push	{r4, lr}
    7a7a:	6804      	ldr	r4, [r0, #0]
    7a7c:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    7a80:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    7a84:	ea8e 0204 	eor.w	r2, lr, r4
    7a88:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7a8c:	ea23 0302 	bic.w	r3, r3, r2
    7a90:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7a94:	ea22 0204 	bic.w	r2, r2, r4
    7a98:	4313      	orrs	r3, r2
    7a9a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7a9e:	d10f      	bne.n	7ac0 <strchr+0x54>
    7aa0:	f850 4f04 	ldr.w	r4, [r0, #4]!
    7aa4:	ea84 0c0e 	eor.w	ip, r4, lr
    7aa8:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    7aac:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    7ab0:	ea23 0304 	bic.w	r3, r3, r4
    7ab4:	ea22 020c 	bic.w	r2, r2, ip
    7ab8:	4313      	orrs	r3, r2
    7aba:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7abe:	d0ef      	beq.n	7aa0 <strchr+0x34>
    7ac0:	7803      	ldrb	r3, [r0, #0]
    7ac2:	b923      	cbnz	r3, 7ace <strchr+0x62>
    7ac4:	e036      	b.n	7b34 <strchr+0xc8>
    7ac6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7aca:	2b00      	cmp	r3, #0
    7acc:	d032      	beq.n	7b34 <strchr+0xc8>
    7ace:	4299      	cmp	r1, r3
    7ad0:	d1f9      	bne.n	7ac6 <strchr+0x5a>
    7ad2:	bd10      	pop	{r4, pc}
    7ad4:	428a      	cmp	r2, r1
    7ad6:	d011      	beq.n	7afc <strchr+0x90>
    7ad8:	079a      	lsls	r2, r3, #30
    7ada:	4618      	mov	r0, r3
    7adc:	d0cc      	beq.n	7a78 <strchr+0xc>
    7ade:	4618      	mov	r0, r3
    7ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
    7ae4:	2a00      	cmp	r2, #0
    7ae6:	d1f5      	bne.n	7ad4 <strchr+0x68>
    7ae8:	4610      	mov	r0, r2
    7aea:	4770      	bx	lr
    7aec:	0799      	lsls	r1, r3, #30
    7aee:	4618      	mov	r0, r3
    7af0:	d007      	beq.n	7b02 <strchr+0x96>
    7af2:	4618      	mov	r0, r3
    7af4:	3301      	adds	r3, #1
    7af6:	7802      	ldrb	r2, [r0, #0]
    7af8:	2a00      	cmp	r2, #0
    7afa:	d1f7      	bne.n	7aec <strchr+0x80>
    7afc:	4770      	bx	lr
    7afe:	0782      	lsls	r2, r0, #30
    7b00:	d1f7      	bne.n	7af2 <strchr+0x86>
    7b02:	6802      	ldr	r2, [r0, #0]
    7b04:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7b08:	ea23 0302 	bic.w	r3, r3, r2
    7b0c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7b10:	d108      	bne.n	7b24 <strchr+0xb8>
    7b12:	f850 2f04 	ldr.w	r2, [r0, #4]!
    7b16:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7b1a:	ea23 0302 	bic.w	r3, r3, r2
    7b1e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7b22:	d0f6      	beq.n	7b12 <strchr+0xa6>
    7b24:	7803      	ldrb	r3, [r0, #0]
    7b26:	2b00      	cmp	r3, #0
    7b28:	d0e8      	beq.n	7afc <strchr+0x90>
    7b2a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d1fb      	bne.n	7b2a <strchr+0xbe>
    7b32:	4770      	bx	lr
    7b34:	4618      	mov	r0, r3
    7b36:	bd10      	pop	{r4, pc}

00007b38 <strncmp>:
    7b38:	2a00      	cmp	r2, #0
    7b3a:	d03e      	beq.n	7bba <strncmp+0x82>
    7b3c:	ea40 0301 	orr.w	r3, r0, r1
    7b40:	079b      	lsls	r3, r3, #30
    7b42:	b530      	push	{r4, r5, lr}
    7b44:	4684      	mov	ip, r0
    7b46:	d12f      	bne.n	7ba8 <strncmp+0x70>
    7b48:	2a03      	cmp	r2, #3
    7b4a:	d92d      	bls.n	7ba8 <strncmp+0x70>
    7b4c:	460b      	mov	r3, r1
    7b4e:	e008      	b.n	7b62 <strncmp+0x2a>
    7b50:	3a04      	subs	r2, #4
    7b52:	4684      	mov	ip, r0
    7b54:	4619      	mov	r1, r3
    7b56:	d025      	beq.n	7ba4 <strncmp+0x6c>
    7b58:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    7b5c:	d122      	bne.n	7ba4 <strncmp+0x6c>
    7b5e:	2a03      	cmp	r2, #3
    7b60:	d922      	bls.n	7ba8 <strncmp+0x70>
    7b62:	6804      	ldr	r4, [r0, #0]
    7b64:	4619      	mov	r1, r3
    7b66:	f853 5b04 	ldr.w	r5, [r3], #4
    7b6a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    7b6e:	42ac      	cmp	r4, r5
    7b70:	4684      	mov	ip, r0
    7b72:	ea2e 0e04 	bic.w	lr, lr, r4
    7b76:	f100 0004 	add.w	r0, r0, #4
    7b7a:	d0e9      	beq.n	7b50 <strncmp+0x18>
    7b7c:	f89c 0000 	ldrb.w	r0, [ip]
    7b80:	780c      	ldrb	r4, [r1, #0]
    7b82:	42a0      	cmp	r0, r4
    7b84:	d11b      	bne.n	7bbe <strncmp+0x86>
    7b86:	46e6      	mov	lr, ip
    7b88:	b168      	cbz	r0, 7ba6 <strncmp+0x6e>
    7b8a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    7b8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7b92:	eba2 030e 	sub.w	r3, r2, lr
    7b96:	42a0      	cmp	r0, r4
    7b98:	f103 33ff 	add.w	r3, r3, #4294967295
    7b9c:	d10f      	bne.n	7bbe <strncmp+0x86>
    7b9e:	eb1c 0303 	adds.w	r3, ip, r3
    7ba2:	d1f1      	bne.n	7b88 <strncmp+0x50>
    7ba4:	2000      	movs	r0, #0
    7ba6:	bd30      	pop	{r4, r5, pc}
    7ba8:	f89c 0000 	ldrb.w	r0, [ip]
    7bac:	780c      	ldrb	r4, [r1, #0]
    7bae:	4284      	cmp	r4, r0
    7bb0:	d105      	bne.n	7bbe <strncmp+0x86>
    7bb2:	2a01      	cmp	r2, #1
    7bb4:	d0f6      	beq.n	7ba4 <strncmp+0x6c>
    7bb6:	46e6      	mov	lr, ip
    7bb8:	e7e6      	b.n	7b88 <strncmp+0x50>
    7bba:	4610      	mov	r0, r2
    7bbc:	4770      	bx	lr
    7bbe:	1b00      	subs	r0, r0, r4
    7bc0:	bd30      	pop	{r4, r5, pc}
    7bc2:	bf00      	nop

00007bc4 <strncpy>:
    7bc4:	ea40 0301 	orr.w	r3, r0, r1
    7bc8:	079b      	lsls	r3, r3, #30
    7bca:	b530      	push	{r4, r5, lr}
    7bcc:	d101      	bne.n	7bd2 <strncpy+0xe>
    7bce:	2a03      	cmp	r2, #3
    7bd0:	d80f      	bhi.n	7bf2 <strncpy+0x2e>
    7bd2:	4684      	mov	ip, r0
    7bd4:	f101 3eff 	add.w	lr, r1, #4294967295
    7bd8:	e007      	b.n	7bea <strncpy+0x26>
    7bda:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    7bde:	f803 1b01 	strb.w	r1, [r3], #1
    7be2:	1e54      	subs	r4, r2, #1
    7be4:	b1c1      	cbz	r1, 7c18 <strncpy+0x54>
    7be6:	469c      	mov	ip, r3
    7be8:	4622      	mov	r2, r4
    7bea:	4663      	mov	r3, ip
    7bec:	2a00      	cmp	r2, #0
    7bee:	d1f4      	bne.n	7bda <strncpy+0x16>
    7bf0:	bd30      	pop	{r4, r5, pc}
    7bf2:	460b      	mov	r3, r1
    7bf4:	4684      	mov	ip, r0
    7bf6:	4619      	mov	r1, r3
    7bf8:	f853 5b04 	ldr.w	r5, [r3], #4
    7bfc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    7c00:	ea24 0405 	bic.w	r4, r4, r5
    7c04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    7c08:	d1e4      	bne.n	7bd4 <strncpy+0x10>
    7c0a:	3a04      	subs	r2, #4
    7c0c:	2a03      	cmp	r2, #3
    7c0e:	f84c 5b04 	str.w	r5, [ip], #4
    7c12:	4619      	mov	r1, r3
    7c14:	d8ef      	bhi.n	7bf6 <strncpy+0x32>
    7c16:	e7dd      	b.n	7bd4 <strncpy+0x10>
    7c18:	4494      	add	ip, r2
    7c1a:	2c00      	cmp	r4, #0
    7c1c:	d0e8      	beq.n	7bf0 <strncpy+0x2c>
    7c1e:	f803 1b01 	strb.w	r1, [r3], #1
    7c22:	4563      	cmp	r3, ip
    7c24:	d1fb      	bne.n	7c1e <strncpy+0x5a>
    7c26:	bd30      	pop	{r4, r5, pc}

00007c28 <critical_factorization>:
    7c28:	2901      	cmp	r1, #1
    7c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c2e:	d95b      	bls.n	7ce8 <critical_factorization+0xc0>
    7c30:	f04f 0801 	mov.w	r8, #1
    7c34:	46c6      	mov	lr, r8
    7c36:	2400      	movs	r4, #0
    7c38:	f04f 35ff 	mov.w	r5, #4294967295
    7c3c:	4643      	mov	r3, r8
    7c3e:	e008      	b.n	7c52 <critical_factorization+0x2a>
    7c40:	eba3 0805 	sub.w	r8, r3, r5
    7c44:	461c      	mov	r4, r3
    7c46:	f04f 0e01 	mov.w	lr, #1
    7c4a:	eb04 030e 	add.w	r3, r4, lr
    7c4e:	428b      	cmp	r3, r1
    7c50:	d210      	bcs.n	7c74 <critical_factorization+0x4c>
    7c52:	eb00 0c0e 	add.w	ip, r0, lr
    7c56:	5cc7      	ldrb	r7, [r0, r3]
    7c58:	f81c 6005 	ldrb.w	r6, [ip, r5]
    7c5c:	42b7      	cmp	r7, r6
    7c5e:	d3ef      	bcc.n	7c40 <critical_factorization+0x18>
    7c60:	d032      	beq.n	7cc8 <critical_factorization+0xa0>
    7c62:	f04f 0801 	mov.w	r8, #1
    7c66:	4625      	mov	r5, r4
    7c68:	46c6      	mov	lr, r8
    7c6a:	4444      	add	r4, r8
    7c6c:	eb04 030e 	add.w	r3, r4, lr
    7c70:	428b      	cmp	r3, r1
    7c72:	d3ee      	bcc.n	7c52 <critical_factorization+0x2a>
    7c74:	2701      	movs	r7, #1
    7c76:	f8c2 8000 	str.w	r8, [r2]
    7c7a:	46be      	mov	lr, r7
    7c7c:	2400      	movs	r4, #0
    7c7e:	f04f 36ff 	mov.w	r6, #4294967295
    7c82:	463b      	mov	r3, r7
    7c84:	e007      	b.n	7c96 <critical_factorization+0x6e>
    7c86:	1b9f      	subs	r7, r3, r6
    7c88:	461c      	mov	r4, r3
    7c8a:	f04f 0e01 	mov.w	lr, #1
    7c8e:	eb04 030e 	add.w	r3, r4, lr
    7c92:	428b      	cmp	r3, r1
    7c94:	d210      	bcs.n	7cb8 <critical_factorization+0x90>
    7c96:	eb00 0c06 	add.w	ip, r0, r6
    7c9a:	f810 8003 	ldrb.w	r8, [r0, r3]
    7c9e:	f81c c00e 	ldrb.w	ip, [ip, lr]
    7ca2:	45e0      	cmp	r8, ip
    7ca4:	d8ef      	bhi.n	7c86 <critical_factorization+0x5e>
    7ca6:	d017      	beq.n	7cd8 <critical_factorization+0xb0>
    7ca8:	2701      	movs	r7, #1
    7caa:	4626      	mov	r6, r4
    7cac:	46be      	mov	lr, r7
    7cae:	443c      	add	r4, r7
    7cb0:	eb04 030e 	add.w	r3, r4, lr
    7cb4:	428b      	cmp	r3, r1
    7cb6:	d3ee      	bcc.n	7c96 <critical_factorization+0x6e>
    7cb8:	3601      	adds	r6, #1
    7cba:	1c68      	adds	r0, r5, #1
    7cbc:	4286      	cmp	r6, r0
    7cbe:	d301      	bcc.n	7cc4 <critical_factorization+0x9c>
    7cc0:	6017      	str	r7, [r2, #0]
    7cc2:	4630      	mov	r0, r6
    7cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cc8:	45c6      	cmp	lr, r8
    7cca:	bf0a      	itet	eq
    7ccc:	4474      	addeq	r4, lr
    7cce:	f10e 0e01 	addne.w	lr, lr, #1
    7cd2:	f04f 0e01 	moveq.w	lr, #1
    7cd6:	e7b8      	b.n	7c4a <critical_factorization+0x22>
    7cd8:	45be      	cmp	lr, r7
    7cda:	bf0a      	itet	eq
    7cdc:	4474      	addeq	r4, lr
    7cde:	f10e 0e01 	addne.w	lr, lr, #1
    7ce2:	f04f 0e01 	moveq.w	lr, #1
    7ce6:	e7d2      	b.n	7c8e <critical_factorization+0x66>
    7ce8:	2701      	movs	r7, #1
    7cea:	2600      	movs	r6, #0
    7cec:	e7e8      	b.n	7cc0 <critical_factorization+0x98>
    7cee:	bf00      	nop

00007cf0 <two_way_long_needle>:
    7cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7cf4:	4692      	mov	sl, r2
    7cf6:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    7cfa:	aa05      	add	r2, sp, #20
    7cfc:	4681      	mov	r9, r0
    7cfe:	460f      	mov	r7, r1
    7d00:	4650      	mov	r0, sl
    7d02:	4619      	mov	r1, r3
    7d04:	461d      	mov	r5, r3
    7d06:	f7ff ff8f 	bl	7c28 <critical_factorization>
    7d0a:	4613      	mov	r3, r2
    7d0c:	4683      	mov	fp, r0
    7d0e:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    7d12:	f843 5f04 	str.w	r5, [r3, #4]!
    7d16:	4293      	cmp	r3, r2
    7d18:	d1fb      	bne.n	7d12 <two_way_long_needle+0x22>
    7d1a:	2d00      	cmp	r5, #0
    7d1c:	f000 80df 	beq.w	7ede <two_way_long_needle+0x1ee>
    7d20:	1e6c      	subs	r4, r5, #1
    7d22:	ae06      	add	r6, sp, #24
    7d24:	f10a 32ff 	add.w	r2, sl, #4294967295
    7d28:	eb0a 0004 	add.w	r0, sl, r4
    7d2c:	9600      	str	r6, [sp, #0]
    7d2e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    7d32:	1aab      	subs	r3, r5, r2
    7d34:	3b01      	subs	r3, #1
    7d36:	4453      	add	r3, sl
    7d38:	4282      	cmp	r2, r0
    7d3a:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    7d3e:	d1f6      	bne.n	7d2e <two_way_long_needle+0x3e>
    7d40:	9905      	ldr	r1, [sp, #20]
    7d42:	465a      	mov	r2, fp
    7d44:	4451      	add	r1, sl
    7d46:	4650      	mov	r0, sl
    7d48:	f002 f8f8 	bl	9f3c <memcmp>
    7d4c:	2800      	cmp	r0, #0
    7d4e:	d16f      	bne.n	7e30 <two_way_long_needle+0x140>
    7d50:	f10b 33ff 	add.w	r3, fp, #4294967295
    7d54:	9303      	str	r3, [sp, #12]
    7d56:	f1cb 0301 	rsb	r3, fp, #1
    7d5a:	4680      	mov	r8, r0
    7d5c:	4606      	mov	r6, r0
    7d5e:	9301      	str	r3, [sp, #4]
    7d60:	eb09 0e06 	add.w	lr, r9, r6
    7d64:	9a00      	ldr	r2, [sp, #0]
    7d66:	f81e 3004 	ldrb.w	r3, [lr, r4]
    7d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d6e:	b1db      	cbz	r3, 7da8 <two_way_long_needle+0xb8>
    7d70:	f1b8 0f00 	cmp.w	r8, #0
    7d74:	d003      	beq.n	7d7e <two_way_long_needle+0x8e>
    7d76:	9a05      	ldr	r2, [sp, #20]
    7d78:	429a      	cmp	r2, r3
    7d7a:	d900      	bls.n	7d7e <two_way_long_needle+0x8e>
    7d7c:	1aab      	subs	r3, r5, r2
    7d7e:	441e      	add	r6, r3
    7d80:	f04f 0800 	mov.w	r8, #0
    7d84:	1b7b      	subs	r3, r7, r5
    7d86:	429e      	cmp	r6, r3
    7d88:	d9ea      	bls.n	7d60 <two_way_long_needle+0x70>
    7d8a:	eb09 0007 	add.w	r0, r9, r7
    7d8e:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    7d92:	f002 f903 	bl	9f9c <strnlen>
    7d96:	4407      	add	r7, r0
    7d98:	1b7b      	subs	r3, r7, r5
    7d9a:	429e      	cmp	r6, r3
    7d9c:	d9e0      	bls.n	7d60 <two_way_long_needle+0x70>
    7d9e:	2000      	movs	r0, #0
    7da0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7da8:	45c3      	cmp	fp, r8
    7daa:	465b      	mov	r3, fp
    7dac:	bf38      	it	cc
    7dae:	4643      	movcc	r3, r8
    7db0:	42a3      	cmp	r3, r4
    7db2:	d210      	bcs.n	7dd6 <two_way_long_needle+0xe6>
    7db4:	1e59      	subs	r1, r3, #1
    7db6:	18f2      	adds	r2, r6, r3
    7db8:	4451      	add	r1, sl
    7dba:	444a      	add	r2, r9
    7dbc:	e002      	b.n	7dc4 <two_way_long_needle+0xd4>
    7dbe:	3301      	adds	r3, #1
    7dc0:	42a3      	cmp	r3, r4
    7dc2:	d208      	bcs.n	7dd6 <two_way_long_needle+0xe6>
    7dc4:	f812 0b01 	ldrb.w	r0, [r2], #1
    7dc8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7dcc:	4584      	cmp	ip, r0
    7dce:	d0f6      	beq.n	7dbe <two_way_long_needle+0xce>
    7dd0:	9a01      	ldr	r2, [sp, #4]
    7dd2:	4416      	add	r6, r2
    7dd4:	e7d3      	b.n	7d7e <two_way_long_needle+0x8e>
    7dd6:	45c3      	cmp	fp, r8
    7dd8:	9b03      	ldr	r3, [sp, #12]
    7dda:	d97e      	bls.n	7eda <two_way_long_needle+0x1ea>
    7ddc:	eb06 020b 	add.w	r2, r6, fp
    7de0:	444a      	add	r2, r9
    7de2:	eb0a 010b 	add.w	r1, sl, fp
    7de6:	9602      	str	r6, [sp, #8]
    7de8:	e002      	b.n	7df0 <two_way_long_needle+0x100>
    7dea:	4543      	cmp	r3, r8
    7dec:	d015      	beq.n	7e1a <two_way_long_needle+0x12a>
    7dee:	4603      	mov	r3, r0
    7df0:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    7df4:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    7df8:	4286      	cmp	r6, r0
    7dfa:	f103 0c01 	add.w	ip, r3, #1
    7dfe:	f103 30ff 	add.w	r0, r3, #4294967295
    7e02:	d0f2      	beq.n	7dea <two_way_long_needle+0xfa>
    7e04:	9e02      	ldr	r6, [sp, #8]
    7e06:	4663      	mov	r3, ip
    7e08:	f108 0801 	add.w	r8, r8, #1
    7e0c:	4598      	cmp	r8, r3
    7e0e:	d80a      	bhi.n	7e26 <two_way_long_needle+0x136>
    7e10:	9b05      	ldr	r3, [sp, #20]
    7e12:	441e      	add	r6, r3
    7e14:	eba5 0803 	sub.w	r8, r5, r3
    7e18:	e7b4      	b.n	7d84 <two_way_long_needle+0x94>
    7e1a:	4643      	mov	r3, r8
    7e1c:	f108 0801 	add.w	r8, r8, #1
    7e20:	4598      	cmp	r8, r3
    7e22:	9e02      	ldr	r6, [sp, #8]
    7e24:	d9f4      	bls.n	7e10 <two_way_long_needle+0x120>
    7e26:	4670      	mov	r0, lr
    7e28:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e30:	eba5 030b 	sub.w	r3, r5, fp
    7e34:	455b      	cmp	r3, fp
    7e36:	bf38      	it	cc
    7e38:	465b      	movcc	r3, fp
    7e3a:	3301      	adds	r3, #1
    7e3c:	9305      	str	r3, [sp, #20]
    7e3e:	f10b 33ff 	add.w	r3, fp, #4294967295
    7e42:	9301      	str	r3, [sp, #4]
    7e44:	f1cb 0301 	rsb	r3, fp, #1
    7e48:	2600      	movs	r6, #0
    7e4a:	9302      	str	r3, [sp, #8]
    7e4c:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    7e50:	eb09 0106 	add.w	r1, r9, r6
    7e54:	9a00      	ldr	r2, [sp, #0]
    7e56:	5d0b      	ldrb	r3, [r1, r4]
    7e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e5c:	b16b      	cbz	r3, 7e7a <two_way_long_needle+0x18a>
    7e5e:	441e      	add	r6, r3
    7e60:	1b7b      	subs	r3, r7, r5
    7e62:	42b3      	cmp	r3, r6
    7e64:	d2f4      	bcs.n	7e50 <two_way_long_needle+0x160>
    7e66:	eb09 0007 	add.w	r0, r9, r7
    7e6a:	4641      	mov	r1, r8
    7e6c:	f002 f896 	bl	9f9c <strnlen>
    7e70:	4407      	add	r7, r0
    7e72:	1b7b      	subs	r3, r7, r5
    7e74:	42b3      	cmp	r3, r6
    7e76:	d2eb      	bcs.n	7e50 <two_way_long_needle+0x160>
    7e78:	e791      	b.n	7d9e <two_way_long_needle+0xae>
    7e7a:	45a3      	cmp	fp, r4
    7e7c:	d214      	bcs.n	7ea8 <two_way_long_needle+0x1b8>
    7e7e:	9b01      	ldr	r3, [sp, #4]
    7e80:	eb0b 0206 	add.w	r2, fp, r6
    7e84:	eb0a 0c03 	add.w	ip, sl, r3
    7e88:	444a      	add	r2, r9
    7e8a:	465b      	mov	r3, fp
    7e8c:	e002      	b.n	7e94 <two_way_long_needle+0x1a4>
    7e8e:	3301      	adds	r3, #1
    7e90:	42a3      	cmp	r3, r4
    7e92:	d209      	bcs.n	7ea8 <two_way_long_needle+0x1b8>
    7e94:	f812 0b01 	ldrb.w	r0, [r2], #1
    7e98:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    7e9c:	4586      	cmp	lr, r0
    7e9e:	d0f6      	beq.n	7e8e <two_way_long_needle+0x19e>
    7ea0:	9a02      	ldr	r2, [sp, #8]
    7ea2:	4416      	add	r6, r2
    7ea4:	441e      	add	r6, r3
    7ea6:	e7db      	b.n	7e60 <two_way_long_needle+0x170>
    7ea8:	f1bb 0f00 	cmp.w	fp, #0
    7eac:	d010      	beq.n	7ed0 <two_way_long_needle+0x1e0>
    7eae:	eb0b 0006 	add.w	r0, fp, r6
    7eb2:	4448      	add	r0, r9
    7eb4:	eb0a 020b 	add.w	r2, sl, fp
    7eb8:	e001      	b.n	7ebe <two_way_long_needle+0x1ce>
    7eba:	4553      	cmp	r3, sl
    7ebc:	d008      	beq.n	7ed0 <two_way_long_needle+0x1e0>
    7ebe:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    7ec2:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    7ec6:	45e6      	cmp	lr, ip
    7ec8:	4613      	mov	r3, r2
    7eca:	d0f6      	beq.n	7eba <two_way_long_needle+0x1ca>
    7ecc:	9b05      	ldr	r3, [sp, #20]
    7ece:	e7c6      	b.n	7e5e <two_way_long_needle+0x16e>
    7ed0:	4608      	mov	r0, r1
    7ed2:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7eda:	465b      	mov	r3, fp
    7edc:	e794      	b.n	7e08 <two_way_long_needle+0x118>
    7ede:	ab06      	add	r3, sp, #24
    7ee0:	f04f 34ff 	mov.w	r4, #4294967295
    7ee4:	9300      	str	r3, [sp, #0]
    7ee6:	e72b      	b.n	7d40 <two_way_long_needle+0x50>

00007ee8 <strstr>:
    7ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7eec:	460d      	mov	r5, r1
    7eee:	7809      	ldrb	r1, [r1, #0]
    7ef0:	b090      	sub	sp, #64	; 0x40
    7ef2:	4604      	mov	r4, r0
    7ef4:	2900      	cmp	r1, #0
    7ef6:	d054      	beq.n	7fa2 <strstr+0xba>
    7ef8:	786a      	ldrb	r2, [r5, #1]
    7efa:	2a00      	cmp	r2, #0
    7efc:	f000 8083 	beq.w	8006 <strstr+0x11e>
    7f00:	78ab      	ldrb	r3, [r5, #2]
    7f02:	2b00      	cmp	r3, #0
    7f04:	d051      	beq.n	7faa <strstr+0xc2>
    7f06:	78e8      	ldrb	r0, [r5, #3]
    7f08:	682e      	ldr	r6, [r5, #0]
    7f0a:	2800      	cmp	r0, #0
    7f0c:	f000 8082 	beq.w	8014 <strstr+0x12c>
    7f10:	792b      	ldrb	r3, [r5, #4]
    7f12:	2b00      	cmp	r3, #0
    7f14:	d057      	beq.n	7fc6 <strstr+0xde>
    7f16:	4628      	mov	r0, r5
    7f18:	f000 fb12 	bl	8540 <strlen>
    7f1c:	4606      	mov	r6, r0
    7f1e:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    7f22:	4620      	mov	r0, r4
    7f24:	f002 f83a 	bl	9f9c <strnlen>
    7f28:	4286      	cmp	r6, r0
    7f2a:	d85b      	bhi.n	7fe4 <strstr+0xfc>
    7f2c:	2efe      	cmp	r6, #254	; 0xfe
    7f2e:	f200 8086 	bhi.w	803e <strstr+0x156>
    7f32:	1b80      	subs	r0, r0, r6
    7f34:	1827      	adds	r7, r4, r0
    7f36:	2240      	movs	r2, #64	; 0x40
    7f38:	1c71      	adds	r1, r6, #1
    7f3a:	4668      	mov	r0, sp
    7f3c:	f7ff fd44 	bl	79c8 <memset>
    7f40:	b17e      	cbz	r6, 7f62 <strstr+0x7a>
    7f42:	1e6a      	subs	r2, r5, #1
    7f44:	fa5f fc86 	uxtb.w	ip, r6
    7f48:	1990      	adds	r0, r2, r6
    7f4a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    7f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7f52:	3340      	adds	r3, #64	; 0x40
    7f54:	446b      	add	r3, sp
    7f56:	1aa9      	subs	r1, r5, r2
    7f58:	4461      	add	r1, ip
    7f5a:	4282      	cmp	r2, r0
    7f5c:	f803 1c40 	strb.w	r1, [r3, #-64]
    7f60:	d1f3      	bne.n	7f4a <strstr+0x62>
    7f62:	3c01      	subs	r4, #1
    7f64:	5da3      	ldrb	r3, [r4, r6]
    7f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7f6a:	3340      	adds	r3, #64	; 0x40
    7f6c:	446b      	add	r3, sp
    7f6e:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    7f72:	441c      	add	r4, r3
    7f74:	42a7      	cmp	r7, r4
    7f76:	d203      	bcs.n	7f80 <strstr+0x98>
    7f78:	e039      	b.n	7fee <strstr+0x106>
    7f7a:	4444      	add	r4, r8
    7f7c:	42a7      	cmp	r7, r4
    7f7e:	d336      	bcc.n	7fee <strstr+0x106>
    7f80:	f814 c006 	ldrb.w	ip, [r4, r6]
    7f84:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    7f88:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    7f8c:	eb0d 0c03 	add.w	ip, sp, r3
    7f90:	4620      	mov	r0, r4
    7f92:	4632      	mov	r2, r6
    7f94:	4629      	mov	r1, r5
    7f96:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    7f9a:	f001 ffcf 	bl	9f3c <memcmp>
    7f9e:	2800      	cmp	r0, #0
    7fa0:	d1eb      	bne.n	7f7a <strstr+0x92>
    7fa2:	4620      	mov	r0, r4
    7fa4:	b010      	add	sp, #64	; 0x40
    7fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7faa:	7800      	ldrb	r0, [r0, #0]
    7fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    7fb0:	e000      	b.n	7fb4 <strstr+0xcc>
    7fb2:	460c      	mov	r4, r1
    7fb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    7fb8:	1c61      	adds	r1, r4, #1
    7fba:	b198      	cbz	r0, 7fe4 <strstr+0xfc>
    7fbc:	429a      	cmp	r2, r3
    7fbe:	7860      	ldrb	r0, [r4, #1]
    7fc0:	d1f7      	bne.n	7fb2 <strstr+0xca>
    7fc2:	3c01      	subs	r4, #1
    7fc4:	e7ed      	b.n	7fa2 <strstr+0xba>
    7fc6:	7822      	ldrb	r2, [r4, #0]
    7fc8:	b162      	cbz	r2, 7fe4 <strstr+0xfc>
    7fca:	ba31      	rev	r1, r6
    7fcc:	e001      	b.n	7fd2 <strstr+0xea>
    7fce:	4299      	cmp	r1, r3
    7fd0:	d01e      	beq.n	8010 <strstr+0x128>
    7fd2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7fd6:	4620      	mov	r0, r4
    7fd8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    7fdc:	2a00      	cmp	r2, #0
    7fde:	d1f6      	bne.n	7fce <strstr+0xe6>
    7fe0:	4299      	cmp	r1, r3
    7fe2:	d015      	beq.n	8010 <strstr+0x128>
    7fe4:	2400      	movs	r4, #0
    7fe6:	4620      	mov	r0, r4
    7fe8:	b010      	add	sp, #64	; 0x40
    7fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7fee:	5dbb      	ldrb	r3, [r7, r6]
    7ff0:	19b8      	adds	r0, r7, r6
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	d0f6      	beq.n	7fe4 <strstr+0xfc>
    7ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7ffa:	f001 ffcf 	bl	9f9c <strnlen>
    7ffe:	4407      	add	r7, r0
    8000:	42bc      	cmp	r4, r7
    8002:	d9ae      	bls.n	7f62 <strstr+0x7a>
    8004:	e7ee      	b.n	7fe4 <strstr+0xfc>
    8006:	b010      	add	sp, #64	; 0x40
    8008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    800c:	f7ff bd2e 	b.w	7a6c <strchr>
    8010:	1ec4      	subs	r4, r0, #3
    8012:	e7c6      	b.n	7fa2 <strstr+0xba>
    8014:	0412      	lsls	r2, r2, #16
    8016:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    801a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    801e:	7821      	ldrb	r1, [r4, #0]
    8020:	4602      	mov	r2, r0
    8022:	e000      	b.n	8026 <strstr+0x13e>
    8024:	462c      	mov	r4, r5
    8026:	ea41 0002 	orr.w	r0, r1, r2
    802a:	1c65      	adds	r5, r4, #1
    802c:	0202      	lsls	r2, r0, #8
    802e:	2900      	cmp	r1, #0
    8030:	d0d8      	beq.n	7fe4 <strstr+0xfc>
    8032:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    8036:	7861      	ldrb	r1, [r4, #1]
    8038:	d1f4      	bne.n	8024 <strstr+0x13c>
    803a:	3c02      	subs	r4, #2
    803c:	e7b1      	b.n	7fa2 <strstr+0xba>
    803e:	4601      	mov	r1, r0
    8040:	4633      	mov	r3, r6
    8042:	462a      	mov	r2, r5
    8044:	4620      	mov	r0, r4
    8046:	b010      	add	sp, #64	; 0x40
    8048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    804c:	f7ff be50 	b.w	7cf0 <two_way_long_needle>

00008050 <__locale_mb_cur_max>:
    8050:	4b01      	ldr	r3, [pc, #4]	; (8058 <__locale_mb_cur_max+0x8>)
    8052:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    8056:	4770      	bx	lr
    8058:	20001590 	.word	0x20001590

0000805c <_close_r>:
    805c:	b538      	push	{r3, r4, r5, lr}
    805e:	4d07      	ldr	r5, [pc, #28]	; (807c <_close_r+0x20>)
    8060:	2200      	movs	r2, #0
    8062:	4604      	mov	r4, r0
    8064:	4608      	mov	r0, r1
    8066:	602a      	str	r2, [r5, #0]
    8068:	f7fc fbf4 	bl	4854 <_close>
    806c:	1c43      	adds	r3, r0, #1
    806e:	d000      	beq.n	8072 <_close_r+0x16>
    8070:	bd38      	pop	{r3, r4, r5, pc}
    8072:	682b      	ldr	r3, [r5, #0]
    8074:	2b00      	cmp	r3, #0
    8076:	d0fb      	beq.n	8070 <_close_r+0x14>
    8078:	6023      	str	r3, [r4, #0]
    807a:	bd38      	pop	{r3, r4, r5, pc}
    807c:	200032e4 	.word	0x200032e4

00008080 <_lseek_r>:
    8080:	b538      	push	{r3, r4, r5, lr}
    8082:	460c      	mov	r4, r1
    8084:	4d08      	ldr	r5, [pc, #32]	; (80a8 <_lseek_r+0x28>)
    8086:	4684      	mov	ip, r0
    8088:	4611      	mov	r1, r2
    808a:	4620      	mov	r0, r4
    808c:	461a      	mov	r2, r3
    808e:	2300      	movs	r3, #0
    8090:	602b      	str	r3, [r5, #0]
    8092:	4664      	mov	r4, ip
    8094:	f7fc fbea 	bl	486c <_lseek>
    8098:	1c43      	adds	r3, r0, #1
    809a:	d000      	beq.n	809e <_lseek_r+0x1e>
    809c:	bd38      	pop	{r3, r4, r5, pc}
    809e:	682b      	ldr	r3, [r5, #0]
    80a0:	2b00      	cmp	r3, #0
    80a2:	d0fb      	beq.n	809c <_lseek_r+0x1c>
    80a4:	6023      	str	r3, [r4, #0]
    80a6:	bd38      	pop	{r3, r4, r5, pc}
    80a8:	200032e4 	.word	0x200032e4

000080ac <_read_r>:
    80ac:	b538      	push	{r3, r4, r5, lr}
    80ae:	460c      	mov	r4, r1
    80b0:	4d08      	ldr	r5, [pc, #32]	; (80d4 <_read_r+0x28>)
    80b2:	4684      	mov	ip, r0
    80b4:	4611      	mov	r1, r2
    80b6:	4620      	mov	r0, r4
    80b8:	461a      	mov	r2, r3
    80ba:	2300      	movs	r3, #0
    80bc:	602b      	str	r3, [r5, #0]
    80be:	4664      	mov	r4, ip
    80c0:	f7fc fbc6 	bl	4850 <_read>
    80c4:	1c43      	adds	r3, r0, #1
    80c6:	d000      	beq.n	80ca <_read_r+0x1e>
    80c8:	bd38      	pop	{r3, r4, r5, pc}
    80ca:	682b      	ldr	r3, [r5, #0]
    80cc:	2b00      	cmp	r3, #0
    80ce:	d0fb      	beq.n	80c8 <_read_r+0x1c>
    80d0:	6023      	str	r3, [r4, #0]
    80d2:	bd38      	pop	{r3, r4, r5, pc}
    80d4:	200032e4 	.word	0x200032e4

000080d8 <_sbrk_r>:
    80d8:	b538      	push	{r3, r4, r5, lr}
    80da:	4d07      	ldr	r5, [pc, #28]	; (80f8 <_sbrk_r+0x20>)
    80dc:	2200      	movs	r2, #0
    80de:	4604      	mov	r4, r0
    80e0:	4608      	mov	r0, r1
    80e2:	602a      	str	r2, [r5, #0]
    80e4:	f7fc fb9a 	bl	481c <_sbrk>
    80e8:	1c43      	adds	r3, r0, #1
    80ea:	d000      	beq.n	80ee <_sbrk_r+0x16>
    80ec:	bd38      	pop	{r3, r4, r5, pc}
    80ee:	682b      	ldr	r3, [r5, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d0fb      	beq.n	80ec <_sbrk_r+0x14>
    80f4:	6023      	str	r3, [r4, #0]
    80f6:	bd38      	pop	{r3, r4, r5, pc}
    80f8:	200032e4 	.word	0x200032e4

000080fc <_write_r>:
    80fc:	b538      	push	{r3, r4, r5, lr}
    80fe:	460c      	mov	r4, r1
    8100:	4d08      	ldr	r5, [pc, #32]	; (8124 <_write_r+0x28>)
    8102:	4684      	mov	ip, r0
    8104:	4611      	mov	r1, r2
    8106:	4620      	mov	r0, r4
    8108:	461a      	mov	r2, r3
    810a:	2300      	movs	r3, #0
    810c:	602b      	str	r3, [r5, #0]
    810e:	4664      	mov	r4, ip
    8110:	f7fb f9f8 	bl	3504 <_write>
    8114:	1c43      	adds	r3, r0, #1
    8116:	d000      	beq.n	811a <_write_r+0x1e>
    8118:	bd38      	pop	{r3, r4, r5, pc}
    811a:	682b      	ldr	r3, [r5, #0]
    811c:	2b00      	cmp	r3, #0
    811e:	d0fb      	beq.n	8118 <_write_r+0x1c>
    8120:	6023      	str	r3, [r4, #0]
    8122:	bd38      	pop	{r3, r4, r5, pc}
    8124:	200032e4 	.word	0x200032e4

00008128 <__errno>:
    8128:	4b01      	ldr	r3, [pc, #4]	; (8130 <__errno+0x8>)
    812a:	6818      	ldr	r0, [r3, #0]
    812c:	4770      	bx	lr
    812e:	bf00      	nop
    8130:	20001b18 	.word	0x20001b18

00008134 <__libc_init_array>:
    8134:	b570      	push	{r4, r5, r6, lr}
    8136:	4e0d      	ldr	r6, [pc, #52]	; (816c <__libc_init_array+0x38>)
    8138:	4d0d      	ldr	r5, [pc, #52]	; (8170 <__libc_init_array+0x3c>)
    813a:	1b76      	subs	r6, r6, r5
    813c:	10b6      	asrs	r6, r6, #2
    813e:	d006      	beq.n	814e <__libc_init_array+0x1a>
    8140:	2400      	movs	r4, #0
    8142:	f855 3b04 	ldr.w	r3, [r5], #4
    8146:	3401      	adds	r4, #1
    8148:	4798      	blx	r3
    814a:	42a6      	cmp	r6, r4
    814c:	d1f9      	bne.n	8142 <__libc_init_array+0xe>
    814e:	4e09      	ldr	r6, [pc, #36]	; (8174 <__libc_init_array+0x40>)
    8150:	4d09      	ldr	r5, [pc, #36]	; (8178 <__libc_init_array+0x44>)
    8152:	1b76      	subs	r6, r6, r5
    8154:	f004 fd64 	bl	cc20 <___init_veneer>
    8158:	10b6      	asrs	r6, r6, #2
    815a:	d006      	beq.n	816a <__libc_init_array+0x36>
    815c:	2400      	movs	r4, #0
    815e:	f855 3b04 	ldr.w	r3, [r5], #4
    8162:	3401      	adds	r4, #1
    8164:	4798      	blx	r3
    8166:	42a6      	cmp	r6, r4
    8168:	d1f9      	bne.n	815e <__libc_init_array+0x2a>
    816a:	bd70      	pop	{r4, r5, r6, pc}
    816c:	60001fc8 	.word	0x60001fc8
    8170:	60001fc8 	.word	0x60001fc8
    8174:	60001ff8 	.word	0x60001ff8
    8178:	60001fc8 	.word	0x60001fc8

0000817c <__retarget_lock_init_recursive>:
    817c:	4770      	bx	lr
    817e:	bf00      	nop

00008180 <__retarget_lock_close_recursive>:
    8180:	4770      	bx	lr
    8182:	bf00      	nop

00008184 <__retarget_lock_acquire_recursive>:
    8184:	4770      	bx	lr
    8186:	bf00      	nop

00008188 <__retarget_lock_release_recursive>:
    8188:	4770      	bx	lr
    818a:	bf00      	nop
	...
    81a0:	eba2 0003 	sub.w	r0, r2, r3
    81a4:	4770      	bx	lr
    81a6:	bf00      	nop

000081a8 <strcmp>:
    81a8:	7802      	ldrb	r2, [r0, #0]
    81aa:	780b      	ldrb	r3, [r1, #0]
    81ac:	2a01      	cmp	r2, #1
    81ae:	bf28      	it	cs
    81b0:	429a      	cmpcs	r2, r3
    81b2:	d1f5      	bne.n	81a0 <__retarget_lock_release_recursive+0x18>
    81b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    81b8:	ea40 0401 	orr.w	r4, r0, r1
    81bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    81c0:	f06f 0c00 	mvn.w	ip, #0
    81c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
    81c8:	b312      	cbz	r2, 8210 <strcmp+0x68>
    81ca:	ea80 0401 	eor.w	r4, r0, r1
    81ce:	f014 0f07 	tst.w	r4, #7
    81d2:	d16a      	bne.n	82aa <strcmp+0x102>
    81d4:	f000 0407 	and.w	r4, r0, #7
    81d8:	f020 0007 	bic.w	r0, r0, #7
    81dc:	f004 0503 	and.w	r5, r4, #3
    81e0:	f021 0107 	bic.w	r1, r1, #7
    81e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    81e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    81ec:	f014 0f04 	tst.w	r4, #4
    81f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    81f4:	fa0c f405 	lsl.w	r4, ip, r5
    81f8:	ea62 0204 	orn	r2, r2, r4
    81fc:	ea66 0604 	orn	r6, r6, r4
    8200:	d00a      	beq.n	8218 <strcmp+0x70>
    8202:	ea63 0304 	orn	r3, r3, r4
    8206:	4662      	mov	r2, ip
    8208:	ea67 0704 	orn	r7, r7, r4
    820c:	4666      	mov	r6, ip
    820e:	e003      	b.n	8218 <strcmp+0x70>
    8210:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    8214:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    8218:	fa82 f54c 	uadd8	r5, r2, ip
    821c:	ea82 0406 	eor.w	r4, r2, r6
    8220:	faa4 f48c 	sel	r4, r4, ip
    8224:	bb6c      	cbnz	r4, 8282 <strcmp+0xda>
    8226:	fa83 f54c 	uadd8	r5, r3, ip
    822a:	ea83 0507 	eor.w	r5, r3, r7
    822e:	faa5 f58c 	sel	r5, r5, ip
    8232:	b995      	cbnz	r5, 825a <strcmp+0xb2>
    8234:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    8238:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    823c:	fa82 f54c 	uadd8	r5, r2, ip
    8240:	ea82 0406 	eor.w	r4, r2, r6
    8244:	faa4 f48c 	sel	r4, r4, ip
    8248:	fa83 f54c 	uadd8	r5, r3, ip
    824c:	ea83 0507 	eor.w	r5, r3, r7
    8250:	faa5 f58c 	sel	r5, r5, ip
    8254:	4325      	orrs	r5, r4
    8256:	d0db      	beq.n	8210 <strcmp+0x68>
    8258:	b99c      	cbnz	r4, 8282 <strcmp+0xda>
    825a:	ba2d      	rev	r5, r5
    825c:	fab5 f485 	clz	r4, r5
    8260:	f024 0407 	bic.w	r4, r4, #7
    8264:	fa27 f104 	lsr.w	r1, r7, r4
    8268:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    826c:	fa23 f304 	lsr.w	r3, r3, r4
    8270:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8274:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8278:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    827c:	eba0 0001 	sub.w	r0, r0, r1
    8280:	4770      	bx	lr
    8282:	ba24      	rev	r4, r4
    8284:	fab4 f484 	clz	r4, r4
    8288:	f024 0407 	bic.w	r4, r4, #7
    828c:	fa26 f104 	lsr.w	r1, r6, r4
    8290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8294:	fa22 f204 	lsr.w	r2, r2, r4
    8298:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    829c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    82a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    82a4:	eba0 0001 	sub.w	r0, r0, r1
    82a8:	4770      	bx	lr
    82aa:	f014 0f03 	tst.w	r4, #3
    82ae:	d13c      	bne.n	832a <strcmp+0x182>
    82b0:	f010 0403 	ands.w	r4, r0, #3
    82b4:	d128      	bne.n	8308 <strcmp+0x160>
    82b6:	f850 2b08 	ldr.w	r2, [r0], #8
    82ba:	f851 3b08 	ldr.w	r3, [r1], #8
    82be:	fa82 f54c 	uadd8	r5, r2, ip
    82c2:	ea82 0503 	eor.w	r5, r2, r3
    82c6:	faa5 f58c 	sel	r5, r5, ip
    82ca:	b95d      	cbnz	r5, 82e4 <strcmp+0x13c>
    82cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
    82d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    82d4:	fa82 f54c 	uadd8	r5, r2, ip
    82d8:	ea82 0503 	eor.w	r5, r2, r3
    82dc:	faa5 f58c 	sel	r5, r5, ip
    82e0:	2d00      	cmp	r5, #0
    82e2:	d0e8      	beq.n	82b6 <strcmp+0x10e>
    82e4:	ba2d      	rev	r5, r5
    82e6:	fab5 f485 	clz	r4, r5
    82ea:	f024 0407 	bic.w	r4, r4, #7
    82ee:	fa23 f104 	lsr.w	r1, r3, r4
    82f2:	fa22 f204 	lsr.w	r2, r2, r4
    82f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    82fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    82fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8302:	eba0 0001 	sub.w	r0, r0, r1
    8306:	4770      	bx	lr
    8308:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    830c:	f020 0003 	bic.w	r0, r0, #3
    8310:	f850 2b08 	ldr.w	r2, [r0], #8
    8314:	f021 0103 	bic.w	r1, r1, #3
    8318:	f851 3b08 	ldr.w	r3, [r1], #8
    831c:	fa0c f404 	lsl.w	r4, ip, r4
    8320:	ea62 0204 	orn	r2, r2, r4
    8324:	ea63 0304 	orn	r3, r3, r4
    8328:	e7c9      	b.n	82be <strcmp+0x116>
    832a:	f010 0403 	ands.w	r4, r0, #3
    832e:	d01a      	beq.n	8366 <strcmp+0x1be>
    8330:	eba1 0104 	sub.w	r1, r1, r4
    8334:	f020 0003 	bic.w	r0, r0, #3
    8338:	07e4      	lsls	r4, r4, #31
    833a:	f850 2b04 	ldr.w	r2, [r0], #4
    833e:	d006      	beq.n	834e <strcmp+0x1a6>
    8340:	d20f      	bcs.n	8362 <strcmp+0x1ba>
    8342:	788b      	ldrb	r3, [r1, #2]
    8344:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    8348:	1ae4      	subs	r4, r4, r3
    834a:	d106      	bne.n	835a <strcmp+0x1b2>
    834c:	b12b      	cbz	r3, 835a <strcmp+0x1b2>
    834e:	78cb      	ldrb	r3, [r1, #3]
    8350:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    8354:	1ae4      	subs	r4, r4, r3
    8356:	d100      	bne.n	835a <strcmp+0x1b2>
    8358:	b91b      	cbnz	r3, 8362 <strcmp+0x1ba>
    835a:	4620      	mov	r0, r4
    835c:	f85d 4b10 	ldr.w	r4, [sp], #16
    8360:	4770      	bx	lr
    8362:	f101 0104 	add.w	r1, r1, #4
    8366:	f850 2b04 	ldr.w	r2, [r0], #4
    836a:	07cc      	lsls	r4, r1, #31
    836c:	f021 0103 	bic.w	r1, r1, #3
    8370:	f851 3b04 	ldr.w	r3, [r1], #4
    8374:	d848      	bhi.n	8408 <strcmp+0x260>
    8376:	d224      	bcs.n	83c2 <strcmp+0x21a>
    8378:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    837c:	fa82 f54c 	uadd8	r5, r2, ip
    8380:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    8384:	faa5 f58c 	sel	r5, r5, ip
    8388:	d10a      	bne.n	83a0 <strcmp+0x1f8>
    838a:	b965      	cbnz	r5, 83a6 <strcmp+0x1fe>
    838c:	f851 3b04 	ldr.w	r3, [r1], #4
    8390:	ea84 0402 	eor.w	r4, r4, r2
    8394:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    8398:	d10e      	bne.n	83b8 <strcmp+0x210>
    839a:	f850 2b04 	ldr.w	r2, [r0], #4
    839e:	e7eb      	b.n	8378 <strcmp+0x1d0>
    83a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
    83a4:	e055      	b.n	8452 <strcmp+0x2aa>
    83a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    83aa:	d14d      	bne.n	8448 <strcmp+0x2a0>
    83ac:	7808      	ldrb	r0, [r1, #0]
    83ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    83b2:	f1c0 0000 	rsb	r0, r0, #0
    83b6:	4770      	bx	lr
    83b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
    83bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    83c0:	e047      	b.n	8452 <strcmp+0x2aa>
    83c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    83c6:	fa82 f54c 	uadd8	r5, r2, ip
    83ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    83ce:	faa5 f58c 	sel	r5, r5, ip
    83d2:	d10a      	bne.n	83ea <strcmp+0x242>
    83d4:	b965      	cbnz	r5, 83f0 <strcmp+0x248>
    83d6:	f851 3b04 	ldr.w	r3, [r1], #4
    83da:	ea84 0402 	eor.w	r4, r4, r2
    83de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    83e2:	d10c      	bne.n	83fe <strcmp+0x256>
    83e4:	f850 2b04 	ldr.w	r2, [r0], #4
    83e8:	e7eb      	b.n	83c2 <strcmp+0x21a>
    83ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    83ee:	e030      	b.n	8452 <strcmp+0x2aa>
    83f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    83f4:	d128      	bne.n	8448 <strcmp+0x2a0>
    83f6:	880b      	ldrh	r3, [r1, #0]
    83f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    83fc:	e029      	b.n	8452 <strcmp+0x2aa>
    83fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    8402:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    8406:	e024      	b.n	8452 <strcmp+0x2aa>
    8408:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    840c:	fa82 f54c 	uadd8	r5, r2, ip
    8410:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    8414:	faa5 f58c 	sel	r5, r5, ip
    8418:	d10a      	bne.n	8430 <strcmp+0x288>
    841a:	b965      	cbnz	r5, 8436 <strcmp+0x28e>
    841c:	f851 3b04 	ldr.w	r3, [r1], #4
    8420:	ea84 0402 	eor.w	r4, r4, r2
    8424:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    8428:	d109      	bne.n	843e <strcmp+0x296>
    842a:	f850 2b04 	ldr.w	r2, [r0], #4
    842e:	e7eb      	b.n	8408 <strcmp+0x260>
    8430:	ea4f 6313 	mov.w	r3, r3, lsr #24
    8434:	e00d      	b.n	8452 <strcmp+0x2aa>
    8436:	f015 0fff 	tst.w	r5, #255	; 0xff
    843a:	d105      	bne.n	8448 <strcmp+0x2a0>
    843c:	680b      	ldr	r3, [r1, #0]
    843e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    8442:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8446:	e004      	b.n	8452 <strcmp+0x2aa>
    8448:	f04f 0000 	mov.w	r0, #0
    844c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8450:	4770      	bx	lr
    8452:	ba12      	rev	r2, r2
    8454:	ba1b      	rev	r3, r3
    8456:	fa82 f44c 	uadd8	r4, r2, ip
    845a:	ea82 0403 	eor.w	r4, r2, r3
    845e:	faa4 f58c 	sel	r5, r4, ip
    8462:	fab5 f485 	clz	r4, r5
    8466:	fa02 f204 	lsl.w	r2, r2, r4
    846a:	fa03 f304 	lsl.w	r3, r3, r4
    846e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    8472:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8476:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    847a:	4770      	bx	lr

0000847c <strcpy>:
    847c:	ea80 0201 	eor.w	r2, r0, r1
    8480:	4684      	mov	ip, r0
    8482:	f012 0f03 	tst.w	r2, #3
    8486:	d14f      	bne.n	8528 <strcpy+0xac>
    8488:	f011 0f03 	tst.w	r1, #3
    848c:	d132      	bne.n	84f4 <strcpy+0x78>
    848e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8492:	f011 0f04 	tst.w	r1, #4
    8496:	f851 3b04 	ldr.w	r3, [r1], #4
    849a:	d00b      	beq.n	84b4 <strcpy+0x38>
    849c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    84a0:	439a      	bics	r2, r3
    84a2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    84a6:	bf04      	itt	eq
    84a8:	f84c 3b04 	streq.w	r3, [ip], #4
    84ac:	f851 3b04 	ldreq.w	r3, [r1], #4
    84b0:	d116      	bne.n	84e0 <strcpy+0x64>
    84b2:	bf00      	nop
    84b4:	f851 4b04 	ldr.w	r4, [r1], #4
    84b8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    84bc:	439a      	bics	r2, r3
    84be:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    84c2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    84c6:	d10b      	bne.n	84e0 <strcpy+0x64>
    84c8:	f84c 3b04 	str.w	r3, [ip], #4
    84cc:	43a2      	bics	r2, r4
    84ce:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    84d2:	bf04      	itt	eq
    84d4:	f851 3b04 	ldreq.w	r3, [r1], #4
    84d8:	f84c 4b04 	streq.w	r4, [ip], #4
    84dc:	d0ea      	beq.n	84b4 <strcpy+0x38>
    84de:	4623      	mov	r3, r4
    84e0:	f80c 3b01 	strb.w	r3, [ip], #1
    84e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    84e8:	ea4f 2333 	mov.w	r3, r3, ror #8
    84ec:	d1f8      	bne.n	84e0 <strcpy+0x64>
    84ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    84f2:	4770      	bx	lr
    84f4:	f011 0f01 	tst.w	r1, #1
    84f8:	d006      	beq.n	8508 <strcpy+0x8c>
    84fa:	f811 2b01 	ldrb.w	r2, [r1], #1
    84fe:	f80c 2b01 	strb.w	r2, [ip], #1
    8502:	2a00      	cmp	r2, #0
    8504:	bf08      	it	eq
    8506:	4770      	bxeq	lr
    8508:	f011 0f02 	tst.w	r1, #2
    850c:	d0bf      	beq.n	848e <strcpy+0x12>
    850e:	f831 2b02 	ldrh.w	r2, [r1], #2
    8512:	f012 0fff 	tst.w	r2, #255	; 0xff
    8516:	bf16      	itet	ne
    8518:	f82c 2b02 	strhne.w	r2, [ip], #2
    851c:	f88c 2000 	strbeq.w	r2, [ip]
    8520:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    8524:	d1b3      	bne.n	848e <strcpy+0x12>
    8526:	4770      	bx	lr
    8528:	f811 2b01 	ldrb.w	r2, [r1], #1
    852c:	f80c 2b01 	strb.w	r2, [ip], #1
    8530:	2a00      	cmp	r2, #0
    8532:	d1f9      	bne.n	8528 <strcpy+0xac>
    8534:	4770      	bx	lr
    8536:	bf00      	nop
	...

00008540 <strlen>:
    8540:	f890 f000 	pld	[r0]
    8544:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8548:	f020 0107 	bic.w	r1, r0, #7
    854c:	f06f 0c00 	mvn.w	ip, #0
    8550:	f010 0407 	ands.w	r4, r0, #7
    8554:	f891 f020 	pld	[r1, #32]
    8558:	f040 8049 	bne.w	85ee <strlen+0xae>
    855c:	f04f 0400 	mov.w	r4, #0
    8560:	f06f 0007 	mvn.w	r0, #7
    8564:	e9d1 2300 	ldrd	r2, r3, [r1]
    8568:	f891 f040 	pld	[r1, #64]	; 0x40
    856c:	f100 0008 	add.w	r0, r0, #8
    8570:	fa82 f24c 	uadd8	r2, r2, ip
    8574:	faa4 f28c 	sel	r2, r4, ip
    8578:	fa83 f34c 	uadd8	r3, r3, ip
    857c:	faa2 f38c 	sel	r3, r2, ip
    8580:	bb4b      	cbnz	r3, 85d6 <strlen+0x96>
    8582:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8586:	fa82 f24c 	uadd8	r2, r2, ip
    858a:	f100 0008 	add.w	r0, r0, #8
    858e:	faa4 f28c 	sel	r2, r4, ip
    8592:	fa83 f34c 	uadd8	r3, r3, ip
    8596:	faa2 f38c 	sel	r3, r2, ip
    859a:	b9e3      	cbnz	r3, 85d6 <strlen+0x96>
    859c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    85a0:	fa82 f24c 	uadd8	r2, r2, ip
    85a4:	f100 0008 	add.w	r0, r0, #8
    85a8:	faa4 f28c 	sel	r2, r4, ip
    85ac:	fa83 f34c 	uadd8	r3, r3, ip
    85b0:	faa2 f38c 	sel	r3, r2, ip
    85b4:	b97b      	cbnz	r3, 85d6 <strlen+0x96>
    85b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    85ba:	f101 0120 	add.w	r1, r1, #32
    85be:	fa82 f24c 	uadd8	r2, r2, ip
    85c2:	f100 0008 	add.w	r0, r0, #8
    85c6:	faa4 f28c 	sel	r2, r4, ip
    85ca:	fa83 f34c 	uadd8	r3, r3, ip
    85ce:	faa2 f38c 	sel	r3, r2, ip
    85d2:	2b00      	cmp	r3, #0
    85d4:	d0c6      	beq.n	8564 <strlen+0x24>
    85d6:	2a00      	cmp	r2, #0
    85d8:	bf04      	itt	eq
    85da:	3004      	addeq	r0, #4
    85dc:	461a      	moveq	r2, r3
    85de:	ba12      	rev	r2, r2
    85e0:	fab2 f282 	clz	r2, r2
    85e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    85e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    85ec:	4770      	bx	lr
    85ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    85f2:	f004 0503 	and.w	r5, r4, #3
    85f6:	f1c4 0000 	rsb	r0, r4, #0
    85fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    85fe:	f014 0f04 	tst.w	r4, #4
    8602:	f891 f040 	pld	[r1, #64]	; 0x40
    8606:	fa0c f505 	lsl.w	r5, ip, r5
    860a:	ea62 0205 	orn	r2, r2, r5
    860e:	bf1c      	itt	ne
    8610:	ea63 0305 	ornne	r3, r3, r5
    8614:	4662      	movne	r2, ip
    8616:	f04f 0400 	mov.w	r4, #0
    861a:	e7a9      	b.n	8570 <strlen+0x30>
    861c:	0000      	movs	r0, r0
	...

00008620 <nan>:
    8620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8628 <nan+0x8>
    8624:	4770      	bx	lr
    8626:	bf00      	nop
    8628:	00000000 	.word	0x00000000
    862c:	7ff80000 	.word	0x7ff80000

00008630 <nanf>:
    8630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8638 <nanf+0x8>
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	7fc00000 	.word	0x7fc00000

0000863c <__register_exitproc>:
    863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8640:	f8df a07c 	ldr.w	sl, [pc, #124]	; 86c0 <__register_exitproc+0x84>
    8644:	4606      	mov	r6, r0
    8646:	f8da 0000 	ldr.w	r0, [sl]
    864a:	4698      	mov	r8, r3
    864c:	460f      	mov	r7, r1
    864e:	4691      	mov	r9, r2
    8650:	f7ff fd98 	bl	8184 <__retarget_lock_acquire_recursive>
    8654:	4b18      	ldr	r3, [pc, #96]	; (86b8 <__register_exitproc+0x7c>)
    8656:	681c      	ldr	r4, [r3, #0]
    8658:	b324      	cbz	r4, 86a4 <__register_exitproc+0x68>
    865a:	6865      	ldr	r5, [r4, #4]
    865c:	2d1f      	cmp	r5, #31
    865e:	dc24      	bgt.n	86aa <__register_exitproc+0x6e>
    8660:	b95e      	cbnz	r6, 867a <__register_exitproc+0x3e>
    8662:	1c6b      	adds	r3, r5, #1
    8664:	3502      	adds	r5, #2
    8666:	f8da 0000 	ldr.w	r0, [sl]
    866a:	6063      	str	r3, [r4, #4]
    866c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    8670:	f7ff fd8a 	bl	8188 <__retarget_lock_release_recursive>
    8674:	2000      	movs	r0, #0
    8676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    867a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    867e:	2301      	movs	r3, #1
    8680:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8684:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8688:	40ab      	lsls	r3, r5
    868a:	431a      	orrs	r2, r3
    868c:	2e02      	cmp	r6, #2
    868e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8692:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8696:	d1e4      	bne.n	8662 <__register_exitproc+0x26>
    8698:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    869c:	431a      	orrs	r2, r3
    869e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    86a2:	e7de      	b.n	8662 <__register_exitproc+0x26>
    86a4:	4c05      	ldr	r4, [pc, #20]	; (86bc <__register_exitproc+0x80>)
    86a6:	601c      	str	r4, [r3, #0]
    86a8:	e7d7      	b.n	865a <__register_exitproc+0x1e>
    86aa:	f8da 0000 	ldr.w	r0, [sl]
    86ae:	f7ff fd6b 	bl	8188 <__retarget_lock_release_recursive>
    86b2:	f04f 30ff 	mov.w	r0, #4294967295
    86b6:	e7de      	b.n	8676 <__register_exitproc+0x3a>
    86b8:	20002fc0 	.word	0x20002fc0
    86bc:	20002fc4 	.word	0x20002fc4
    86c0:	20001584 	.word	0x20001584

000086c4 <_malloc_trim_r>:
    86c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    86c6:	4f24      	ldr	r7, [pc, #144]	; (8758 <_malloc_trim_r+0x94>)
    86c8:	460c      	mov	r4, r1
    86ca:	4606      	mov	r6, r0
    86cc:	f7fd fd2a 	bl	6124 <__malloc_lock>
    86d0:	68bb      	ldr	r3, [r7, #8]
    86d2:	685d      	ldr	r5, [r3, #4]
    86d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    86d8:	310f      	adds	r1, #15
    86da:	f025 0503 	bic.w	r5, r5, #3
    86de:	194b      	adds	r3, r1, r5
    86e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    86e4:	f023 030f 	bic.w	r3, r3, #15
    86e8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    86ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    86f0:	db07      	blt.n	8702 <_malloc_trim_r+0x3e>
    86f2:	2100      	movs	r1, #0
    86f4:	4630      	mov	r0, r6
    86f6:	f7ff fcef 	bl	80d8 <_sbrk_r>
    86fa:	68bb      	ldr	r3, [r7, #8]
    86fc:	442b      	add	r3, r5
    86fe:	4298      	cmp	r0, r3
    8700:	d004      	beq.n	870c <_malloc_trim_r+0x48>
    8702:	4630      	mov	r0, r6
    8704:	f7fd fd14 	bl	6130 <__malloc_unlock>
    8708:	2000      	movs	r0, #0
    870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    870c:	4261      	negs	r1, r4
    870e:	4630      	mov	r0, r6
    8710:	f7ff fce2 	bl	80d8 <_sbrk_r>
    8714:	3001      	adds	r0, #1
    8716:	d00d      	beq.n	8734 <_malloc_trim_r+0x70>
    8718:	4a10      	ldr	r2, [pc, #64]	; (875c <_malloc_trim_r+0x98>)
    871a:	68bb      	ldr	r3, [r7, #8]
    871c:	1b2d      	subs	r5, r5, r4
    871e:	f045 0501 	orr.w	r5, r5, #1
    8722:	605d      	str	r5, [r3, #4]
    8724:	6813      	ldr	r3, [r2, #0]
    8726:	4630      	mov	r0, r6
    8728:	1b1b      	subs	r3, r3, r4
    872a:	6013      	str	r3, [r2, #0]
    872c:	f7fd fd00 	bl	6130 <__malloc_unlock>
    8730:	2001      	movs	r0, #1
    8732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8734:	2100      	movs	r1, #0
    8736:	4630      	mov	r0, r6
    8738:	f7ff fcce 	bl	80d8 <_sbrk_r>
    873c:	68ba      	ldr	r2, [r7, #8]
    873e:	1a83      	subs	r3, r0, r2
    8740:	2b0f      	cmp	r3, #15
    8742:	ddde      	ble.n	8702 <_malloc_trim_r+0x3e>
    8744:	f043 0301 	orr.w	r3, r3, #1
    8748:	6053      	str	r3, [r2, #4]
    874a:	4b05      	ldr	r3, [pc, #20]	; (8760 <_malloc_trim_r+0x9c>)
    874c:	4903      	ldr	r1, [pc, #12]	; (875c <_malloc_trim_r+0x98>)
    874e:	681b      	ldr	r3, [r3, #0]
    8750:	1ac0      	subs	r0, r0, r3
    8752:	6008      	str	r0, [r1, #0]
    8754:	e7d5      	b.n	8702 <_malloc_trim_r+0x3e>
    8756:	bf00      	nop
    8758:	200016fc 	.word	0x200016fc
    875c:	20003160 	.word	0x20003160
    8760:	20001b04 	.word	0x20001b04

00008764 <_free_r>:
    8764:	2900      	cmp	r1, #0
    8766:	d061      	beq.n	882c <_free_r+0xc8>
    8768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    876a:	460c      	mov	r4, r1
    876c:	4606      	mov	r6, r0
    876e:	f7fd fcd9 	bl	6124 <__malloc_lock>
    8772:	f854 2c04 	ldr.w	r2, [r4, #-4]
    8776:	4f7b      	ldr	r7, [pc, #492]	; (8964 <_free_r+0x200>)
    8778:	f1a4 0508 	sub.w	r5, r4, #8
    877c:	f022 0101 	bic.w	r1, r2, #1
    8780:	eb05 0c01 	add.w	ip, r5, r1
    8784:	68b8      	ldr	r0, [r7, #8]
    8786:	f8dc 3004 	ldr.w	r3, [ip, #4]
    878a:	4560      	cmp	r0, ip
    878c:	f023 0303 	bic.w	r3, r3, #3
    8790:	f000 808b 	beq.w	88aa <_free_r+0x146>
    8794:	07d2      	lsls	r2, r2, #31
    8796:	f8cc 3004 	str.w	r3, [ip, #4]
    879a:	d432      	bmi.n	8802 <_free_r+0x9e>
    879c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    87a0:	1aad      	subs	r5, r5, r2
    87a2:	4411      	add	r1, r2
    87a4:	68aa      	ldr	r2, [r5, #8]
    87a6:	f107 0008 	add.w	r0, r7, #8
    87aa:	4282      	cmp	r2, r0
    87ac:	d06a      	beq.n	8884 <_free_r+0x120>
    87ae:	eb0c 0403 	add.w	r4, ip, r3
    87b2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    87b6:	68ec      	ldr	r4, [r5, #12]
    87b8:	60d4      	str	r4, [r2, #12]
    87ba:	f01e 0f01 	tst.w	lr, #1
    87be:	60a2      	str	r2, [r4, #8]
    87c0:	f000 8097 	beq.w	88f2 <_free_r+0x18e>
    87c4:	f041 0301 	orr.w	r3, r1, #1
    87c8:	606b      	str	r3, [r5, #4]
    87ca:	f8cc 1000 	str.w	r1, [ip]
    87ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    87d2:	d235      	bcs.n	8840 <_free_r+0xdc>
    87d4:	6878      	ldr	r0, [r7, #4]
    87d6:	08cb      	lsrs	r3, r1, #3
    87d8:	2201      	movs	r2, #1
    87da:	0949      	lsrs	r1, r1, #5
    87dc:	3301      	adds	r3, #1
    87de:	408a      	lsls	r2, r1
    87e0:	4302      	orrs	r2, r0
    87e2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    87e6:	607a      	str	r2, [r7, #4]
    87e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    87ec:	3a08      	subs	r2, #8
    87ee:	e9c5 1202 	strd	r1, r2, [r5, #8]
    87f2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    87f6:	60cd      	str	r5, [r1, #12]
    87f8:	4630      	mov	r0, r6
    87fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    87fe:	f7fd bc97 	b.w	6130 <__malloc_unlock>
    8802:	eb0c 0203 	add.w	r2, ip, r3
    8806:	6852      	ldr	r2, [r2, #4]
    8808:	07d0      	lsls	r0, r2, #31
    880a:	d410      	bmi.n	882e <_free_r+0xca>
    880c:	4419      	add	r1, r3
    880e:	f107 0008 	add.w	r0, r7, #8
    8812:	f8dc 3008 	ldr.w	r3, [ip, #8]
    8816:	4283      	cmp	r3, r0
    8818:	d073      	beq.n	8902 <_free_r+0x19e>
    881a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    881e:	60da      	str	r2, [r3, #12]
    8820:	6093      	str	r3, [r2, #8]
    8822:	f041 0301 	orr.w	r3, r1, #1
    8826:	606b      	str	r3, [r5, #4]
    8828:	5069      	str	r1, [r5, r1]
    882a:	e7d0      	b.n	87ce <_free_r+0x6a>
    882c:	4770      	bx	lr
    882e:	f041 0301 	orr.w	r3, r1, #1
    8832:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8836:	f844 3c04 	str.w	r3, [r4, #-4]
    883a:	f8cc 1000 	str.w	r1, [ip]
    883e:	d3c9      	bcc.n	87d4 <_free_r+0x70>
    8840:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    8844:	ea4f 2351 	mov.w	r3, r1, lsr #9
    8848:	d248      	bcs.n	88dc <_free_r+0x178>
    884a:	098b      	lsrs	r3, r1, #6
    884c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    8850:	f103 0238 	add.w	r2, r3, #56	; 0x38
    8854:	00c3      	lsls	r3, r0, #3
    8856:	18f8      	adds	r0, r7, r3
    8858:	58fb      	ldr	r3, [r7, r3]
    885a:	3808      	subs	r0, #8
    885c:	4298      	cmp	r0, r3
    885e:	d059      	beq.n	8914 <_free_r+0x1b0>
    8860:	685a      	ldr	r2, [r3, #4]
    8862:	f022 0203 	bic.w	r2, r2, #3
    8866:	428a      	cmp	r2, r1
    8868:	d902      	bls.n	8870 <_free_r+0x10c>
    886a:	689b      	ldr	r3, [r3, #8]
    886c:	4298      	cmp	r0, r3
    886e:	d1f7      	bne.n	8860 <_free_r+0xfc>
    8870:	68d8      	ldr	r0, [r3, #12]
    8872:	e9c5 3002 	strd	r3, r0, [r5, #8]
    8876:	6085      	str	r5, [r0, #8]
    8878:	60dd      	str	r5, [r3, #12]
    887a:	4630      	mov	r0, r6
    887c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8880:	f7fd bc56 	b.w	6130 <__malloc_unlock>
    8884:	eb0c 0203 	add.w	r2, ip, r3
    8888:	6852      	ldr	r2, [r2, #4]
    888a:	07d2      	lsls	r2, r2, #31
    888c:	d463      	bmi.n	8956 <_free_r+0x1f2>
    888e:	440b      	add	r3, r1
    8890:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    8894:	60ca      	str	r2, [r1, #12]
    8896:	6091      	str	r1, [r2, #8]
    8898:	f043 0201 	orr.w	r2, r3, #1
    889c:	606a      	str	r2, [r5, #4]
    889e:	4630      	mov	r0, r6
    88a0:	50eb      	str	r3, [r5, r3]
    88a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    88a6:	f7fd bc43 	b.w	6130 <__malloc_unlock>
    88aa:	440b      	add	r3, r1
    88ac:	07d1      	lsls	r1, r2, #31
    88ae:	d407      	bmi.n	88c0 <_free_r+0x15c>
    88b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    88b4:	1aad      	subs	r5, r5, r2
    88b6:	4413      	add	r3, r2
    88b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    88bc:	60ca      	str	r2, [r1, #12]
    88be:	6091      	str	r1, [r2, #8]
    88c0:	f043 0201 	orr.w	r2, r3, #1
    88c4:	606a      	str	r2, [r5, #4]
    88c6:	4a28      	ldr	r2, [pc, #160]	; (8968 <_free_r+0x204>)
    88c8:	60bd      	str	r5, [r7, #8]
    88ca:	6812      	ldr	r2, [r2, #0]
    88cc:	429a      	cmp	r2, r3
    88ce:	d893      	bhi.n	87f8 <_free_r+0x94>
    88d0:	4b26      	ldr	r3, [pc, #152]	; (896c <_free_r+0x208>)
    88d2:	4630      	mov	r0, r6
    88d4:	6819      	ldr	r1, [r3, #0]
    88d6:	f7ff fef5 	bl	86c4 <_malloc_trim_r>
    88da:	e78d      	b.n	87f8 <_free_r+0x94>
    88dc:	2b14      	cmp	r3, #20
    88de:	d90a      	bls.n	88f6 <_free_r+0x192>
    88e0:	2b54      	cmp	r3, #84	; 0x54
    88e2:	d81f      	bhi.n	8924 <_free_r+0x1c0>
    88e4:	0b0b      	lsrs	r3, r1, #12
    88e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    88ea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    88ee:	00c3      	lsls	r3, r0, #3
    88f0:	e7b1      	b.n	8856 <_free_r+0xf2>
    88f2:	4419      	add	r1, r3
    88f4:	e78d      	b.n	8812 <_free_r+0xae>
    88f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    88fa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    88fe:	00c3      	lsls	r3, r0, #3
    8900:	e7a9      	b.n	8856 <_free_r+0xf2>
    8902:	f041 0301 	orr.w	r3, r1, #1
    8906:	e9c7 5504 	strd	r5, r5, [r7, #16]
    890a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    890e:	606b      	str	r3, [r5, #4]
    8910:	5069      	str	r1, [r5, r1]
    8912:	e771      	b.n	87f8 <_free_r+0x94>
    8914:	6879      	ldr	r1, [r7, #4]
    8916:	1092      	asrs	r2, r2, #2
    8918:	2401      	movs	r4, #1
    891a:	fa04 f202 	lsl.w	r2, r4, r2
    891e:	430a      	orrs	r2, r1
    8920:	607a      	str	r2, [r7, #4]
    8922:	e7a6      	b.n	8872 <_free_r+0x10e>
    8924:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8928:	d806      	bhi.n	8938 <_free_r+0x1d4>
    892a:	0bcb      	lsrs	r3, r1, #15
    892c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    8930:	f103 0277 	add.w	r2, r3, #119	; 0x77
    8934:	00c3      	lsls	r3, r0, #3
    8936:	e78e      	b.n	8856 <_free_r+0xf2>
    8938:	f240 5254 	movw	r2, #1364	; 0x554
    893c:	4293      	cmp	r3, r2
    893e:	d806      	bhi.n	894e <_free_r+0x1ea>
    8940:	0c8b      	lsrs	r3, r1, #18
    8942:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    8946:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    894a:	00c3      	lsls	r3, r0, #3
    894c:	e783      	b.n	8856 <_free_r+0xf2>
    894e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    8952:	227e      	movs	r2, #126	; 0x7e
    8954:	e77f      	b.n	8856 <_free_r+0xf2>
    8956:	f041 0301 	orr.w	r3, r1, #1
    895a:	606b      	str	r3, [r5, #4]
    895c:	f8cc 1000 	str.w	r1, [ip]
    8960:	e74a      	b.n	87f8 <_free_r+0x94>
    8962:	bf00      	nop
    8964:	200016fc 	.word	0x200016fc
    8968:	20001b08 	.word	0x20001b08
    896c:	20003190 	.word	0x20003190

00008970 <rshift>:
    8970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8974:	6904      	ldr	r4, [r0, #16]
    8976:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    897a:	dd2f      	ble.n	89dc <rshift+0x6c>
    897c:	f100 0e14 	add.w	lr, r0, #20
    8980:	114e      	asrs	r6, r1, #5
    8982:	f011 0c1f 	ands.w	ip, r1, #31
    8986:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    898a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    898e:	d02b      	beq.n	89e8 <rshift+0x78>
    8990:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    8994:	3304      	adds	r3, #4
    8996:	429d      	cmp	r5, r3
    8998:	fa21 f10c 	lsr.w	r1, r1, ip
    899c:	f1cc 0820 	rsb	r8, ip, #32
    89a0:	d918      	bls.n	89d4 <rshift+0x64>
    89a2:	4677      	mov	r7, lr
    89a4:	681a      	ldr	r2, [r3, #0]
    89a6:	fa02 f208 	lsl.w	r2, r2, r8
    89aa:	430a      	orrs	r2, r1
    89ac:	f847 2b04 	str.w	r2, [r7], #4
    89b0:	f853 1b04 	ldr.w	r1, [r3], #4
    89b4:	429d      	cmp	r5, r3
    89b6:	fa21 f10c 	lsr.w	r1, r1, ip
    89ba:	d8f3      	bhi.n	89a4 <rshift+0x34>
    89bc:	1ba3      	subs	r3, r4, r6
    89be:	009b      	lsls	r3, r3, #2
    89c0:	3b05      	subs	r3, #5
    89c2:	089b      	lsrs	r3, r3, #2
    89c4:	3301      	adds	r3, #1
    89c6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    89ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    89ce:	b1c9      	cbz	r1, 8a04 <rshift+0x94>
    89d0:	3404      	adds	r4, #4
    89d2:	e017      	b.n	8a04 <rshift+0x94>
    89d4:	6141      	str	r1, [r0, #20]
    89d6:	4674      	mov	r4, lr
    89d8:	2900      	cmp	r1, #0
    89da:	d1f9      	bne.n	89d0 <rshift+0x60>
    89dc:	2300      	movs	r3, #0
    89de:	6103      	str	r3, [r0, #16]
    89e0:	2300      	movs	r3, #0
    89e2:	6143      	str	r3, [r0, #20]
    89e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89e8:	429d      	cmp	r5, r3
    89ea:	bf88      	it	hi
    89ec:	f100 0210 	addhi.w	r2, r0, #16
    89f0:	d9f4      	bls.n	89dc <rshift+0x6c>
    89f2:	f853 1b04 	ldr.w	r1, [r3], #4
    89f6:	f842 1f04 	str.w	r1, [r2, #4]!
    89fa:	429d      	cmp	r5, r3
    89fc:	d8f9      	bhi.n	89f2 <rshift+0x82>
    89fe:	1ba4      	subs	r4, r4, r6
    8a00:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    8a04:	eba4 030e 	sub.w	r3, r4, lr
    8a08:	109b      	asrs	r3, r3, #2
    8a0a:	4574      	cmp	r4, lr
    8a0c:	6103      	str	r3, [r0, #16]
    8a0e:	d0e7      	beq.n	89e0 <rshift+0x70>
    8a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a14 <__gethex>:
    8a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a18:	ed2d 8b02 	vpush	{d8}
    8a1c:	680c      	ldr	r4, [r1, #0]
    8a1e:	468b      	mov	fp, r1
    8a20:	78a1      	ldrb	r1, [r4, #2]
    8a22:	b085      	sub	sp, #20
    8a24:	2930      	cmp	r1, #48	; 0x30
    8a26:	ee08 0a10 	vmov	s16, r0
    8a2a:	4692      	mov	sl, r2
    8a2c:	9302      	str	r3, [sp, #8]
    8a2e:	f040 81ce 	bne.w	8dce <__gethex+0x3ba>
    8a32:	f06f 0001 	mvn.w	r0, #1
    8a36:	1b00      	subs	r0, r0, r4
    8a38:	1ce2      	adds	r2, r4, #3
    8a3a:	1883      	adds	r3, r0, r2
    8a3c:	4614      	mov	r4, r2
    8a3e:	f812 1b01 	ldrb.w	r1, [r2], #1
    8a42:	2930      	cmp	r1, #48	; 0x30
    8a44:	d0f9      	beq.n	8a3a <__gethex+0x26>
    8a46:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8d48 <__gethex+0x334>
    8a4a:	f818 2001 	ldrb.w	r2, [r8, r1]
    8a4e:	2a00      	cmp	r2, #0
    8a50:	f000 80e5 	beq.w	8c1e <__gethex+0x20a>
    8a54:	7822      	ldrb	r2, [r4, #0]
    8a56:	2700      	movs	r7, #0
    8a58:	f818 2002 	ldrb.w	r2, [r8, r2]
    8a5c:	463d      	mov	r5, r7
    8a5e:	4626      	mov	r6, r4
    8a60:	b12a      	cbz	r2, 8a6e <__gethex+0x5a>
    8a62:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8a66:	f818 2002 	ldrb.w	r2, [r8, r2]
    8a6a:	2a00      	cmp	r2, #0
    8a6c:	d1f9      	bne.n	8a62 <__gethex+0x4e>
    8a6e:	49b5      	ldr	r1, [pc, #724]	; (8d44 <__gethex+0x330>)
    8a70:	9301      	str	r3, [sp, #4]
    8a72:	2201      	movs	r2, #1
    8a74:	4630      	mov	r0, r6
    8a76:	f7ff f85f 	bl	7b38 <strncmp>
    8a7a:	9b01      	ldr	r3, [sp, #4]
    8a7c:	4681      	mov	r9, r0
    8a7e:	2800      	cmp	r0, #0
    8a80:	d04d      	beq.n	8b1e <__gethex+0x10a>
    8a82:	2d00      	cmp	r5, #0
    8a84:	d14e      	bne.n	8b24 <__gethex+0x110>
    8a86:	7832      	ldrb	r2, [r6, #0]
    8a88:	46a9      	mov	r9, r5
    8a8a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8a8e:	2a50      	cmp	r2, #80	; 0x50
    8a90:	4635      	mov	r5, r6
    8a92:	d050      	beq.n	8b36 <__gethex+0x122>
    8a94:	f8cb 6000 	str.w	r6, [fp]
    8a98:	2f00      	cmp	r7, #0
    8a9a:	d169      	bne.n	8b70 <__gethex+0x15c>
    8a9c:	1b2b      	subs	r3, r5, r4
    8a9e:	3b01      	subs	r3, #1
    8aa0:	2b07      	cmp	r3, #7
    8aa2:	4639      	mov	r1, r7
    8aa4:	dd04      	ble.n	8ab0 <__gethex+0x9c>
    8aa6:	105b      	asrs	r3, r3, #1
    8aa8:	2b07      	cmp	r3, #7
    8aaa:	f101 0101 	add.w	r1, r1, #1
    8aae:	dcfa      	bgt.n	8aa6 <__gethex+0x92>
    8ab0:	ee18 0a10 	vmov	r0, s16
    8ab4:	f000 fb82 	bl	91bc <_Balloc>
    8ab8:	4683      	mov	fp, r0
    8aba:	2800      	cmp	r0, #0
    8abc:	f000 8266 	beq.w	8f8c <__gethex+0x578>
    8ac0:	f100 0614 	add.w	r6, r0, #20
    8ac4:	42ac      	cmp	r4, r5
    8ac6:	9601      	str	r6, [sp, #4]
    8ac8:	f080 81d2 	bcs.w	8e70 <__gethex+0x45c>
    8acc:	2700      	movs	r7, #0
    8ace:	f8cd 900c 	str.w	r9, [sp, #12]
    8ad2:	499c      	ldr	r1, [pc, #624]	; (8d44 <__gethex+0x330>)
    8ad4:	46a1      	mov	r9, r4
    8ad6:	463c      	mov	r4, r7
    8ad8:	e00c      	b.n	8af4 <__gethex+0xe0>
    8ada:	2f20      	cmp	r7, #32
    8adc:	d019      	beq.n	8b12 <__gethex+0xfe>
    8ade:	4638      	mov	r0, r7
    8ae0:	3704      	adds	r7, #4
    8ae2:	782a      	ldrb	r2, [r5, #0]
    8ae4:	f818 2002 	ldrb.w	r2, [r8, r2]
    8ae8:	f002 020f 	and.w	r2, r2, #15
    8aec:	4082      	lsls	r2, r0
    8aee:	4314      	orrs	r4, r2
    8af0:	454d      	cmp	r5, r9
    8af2:	d047      	beq.n	8b84 <__gethex+0x170>
    8af4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    8af8:	2a2e      	cmp	r2, #46	; 0x2e
    8afa:	d1ee      	bne.n	8ada <__gethex+0xc6>
    8afc:	454d      	cmp	r5, r9
    8afe:	d3ec      	bcc.n	8ada <__gethex+0xc6>
    8b00:	2201      	movs	r2, #1
    8b02:	4628      	mov	r0, r5
    8b04:	f7ff f818 	bl	7b38 <strncmp>
    8b08:	498e      	ldr	r1, [pc, #568]	; (8d44 <__gethex+0x330>)
    8b0a:	2800      	cmp	r0, #0
    8b0c:	d0f0      	beq.n	8af0 <__gethex+0xdc>
    8b0e:	2f20      	cmp	r7, #32
    8b10:	d1e5      	bne.n	8ade <__gethex+0xca>
    8b12:	2000      	movs	r0, #0
    8b14:	f846 4b04 	str.w	r4, [r6], #4
    8b18:	2704      	movs	r7, #4
    8b1a:	4604      	mov	r4, r0
    8b1c:	e7e1      	b.n	8ae2 <__gethex+0xce>
    8b1e:	2d00      	cmp	r5, #0
    8b20:	f000 8142 	beq.w	8da8 <__gethex+0x394>
    8b24:	7832      	ldrb	r2, [r6, #0]
    8b26:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8b2a:	1bad      	subs	r5, r5, r6
    8b2c:	2a50      	cmp	r2, #80	; 0x50
    8b2e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    8b32:	4635      	mov	r5, r6
    8b34:	d1ae      	bne.n	8a94 <__gethex+0x80>
    8b36:	786a      	ldrb	r2, [r5, #1]
    8b38:	2a2b      	cmp	r2, #43	; 0x2b
    8b3a:	f000 8125 	beq.w	8d88 <__gethex+0x374>
    8b3e:	2a2d      	cmp	r2, #45	; 0x2d
    8b40:	f000 80a5 	beq.w	8c8e <__gethex+0x27a>
    8b44:	1c6e      	adds	r6, r5, #1
    8b46:	2000      	movs	r0, #0
    8b48:	f818 1002 	ldrb.w	r1, [r8, r2]
    8b4c:	1e4a      	subs	r2, r1, #1
    8b4e:	2a18      	cmp	r2, #24
    8b50:	f200 809b 	bhi.w	8c8a <__gethex+0x276>
    8b54:	7872      	ldrb	r2, [r6, #1]
    8b56:	f818 2002 	ldrb.w	r2, [r8, r2]
    8b5a:	3910      	subs	r1, #16
    8b5c:	3601      	adds	r6, #1
    8b5e:	2a00      	cmp	r2, #0
    8b60:	d15a      	bne.n	8c18 <__gethex+0x204>
    8b62:	b100      	cbz	r0, 8b66 <__gethex+0x152>
    8b64:	4249      	negs	r1, r1
    8b66:	4489      	add	r9, r1
    8b68:	f8cb 6000 	str.w	r6, [fp]
    8b6c:	2f00      	cmp	r7, #0
    8b6e:	d095      	beq.n	8a9c <__gethex+0x88>
    8b70:	2b00      	cmp	r3, #0
    8b72:	bf14      	ite	ne
    8b74:	2500      	movne	r5, #0
    8b76:	2506      	moveq	r5, #6
    8b78:	4628      	mov	r0, r5
    8b7a:	b005      	add	sp, #20
    8b7c:	ecbd 8b02 	vpop	{d8}
    8b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b84:	f8dd 900c 	ldr.w	r9, [sp, #12]
    8b88:	4623      	mov	r3, r4
    8b8a:	f846 3b04 	str.w	r3, [r6], #4
    8b8e:	4618      	mov	r0, r3
    8b90:	9b01      	ldr	r3, [sp, #4]
    8b92:	1af6      	subs	r6, r6, r3
    8b94:	10b6      	asrs	r6, r6, #2
    8b96:	f8cb 6010 	str.w	r6, [fp, #16]
    8b9a:	f000 fbe9 	bl	9370 <__hi0bits>
    8b9e:	0176      	lsls	r6, r6, #5
    8ba0:	f8da 4000 	ldr.w	r4, [sl]
    8ba4:	1a30      	subs	r0, r6, r0
    8ba6:	42a0      	cmp	r0, r4
    8ba8:	dc75      	bgt.n	8c96 <__gethex+0x282>
    8baa:	f2c0 80ef 	blt.w	8d8c <__gethex+0x378>
    8bae:	2700      	movs	r7, #0
    8bb0:	f8da 3008 	ldr.w	r3, [sl, #8]
    8bb4:	454b      	cmp	r3, r9
    8bb6:	f2c0 8151 	blt.w	8e5c <__gethex+0x448>
    8bba:	f8da 3004 	ldr.w	r3, [sl, #4]
    8bbe:	454b      	cmp	r3, r9
    8bc0:	dd4a      	ble.n	8c58 <__gethex+0x244>
    8bc2:	eba3 0909 	sub.w	r9, r3, r9
    8bc6:	454c      	cmp	r4, r9
    8bc8:	f300 8082 	bgt.w	8cd0 <__gethex+0x2bc>
    8bcc:	f8da 200c 	ldr.w	r2, [sl, #12]
    8bd0:	2a02      	cmp	r2, #2
    8bd2:	f000 8165 	beq.w	8ea0 <__gethex+0x48c>
    8bd6:	2a03      	cmp	r2, #3
    8bd8:	f000 8181 	beq.w	8ede <__gethex+0x4ca>
    8bdc:	2a01      	cmp	r2, #1
    8bde:	f000 816f 	beq.w	8ec0 <__gethex+0x4ac>
    8be2:	ee18 0a10 	vmov	r0, s16
    8be6:	4659      	mov	r1, fp
    8be8:	f000 fb0e 	bl	9208 <_Bfree>
    8bec:	2550      	movs	r5, #80	; 0x50
    8bee:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8bf0:	2300      	movs	r3, #0
    8bf2:	4628      	mov	r0, r5
    8bf4:	6013      	str	r3, [r2, #0]
    8bf6:	b005      	add	sp, #20
    8bf8:	ecbd 8b02 	vpop	{d8}
    8bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c00:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8c04:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8c08:	f1a2 0110 	sub.w	r1, r2, #16
    8c0c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8c10:	f818 2002 	ldrb.w	r2, [r8, r2]
    8c14:	2a00      	cmp	r2, #0
    8c16:	d0a4      	beq.n	8b62 <__gethex+0x14e>
    8c18:	2a19      	cmp	r2, #25
    8c1a:	ddf1      	ble.n	8c00 <__gethex+0x1ec>
    8c1c:	e7a1      	b.n	8b62 <__gethex+0x14e>
    8c1e:	4949      	ldr	r1, [pc, #292]	; (8d44 <__gethex+0x330>)
    8c20:	9301      	str	r3, [sp, #4]
    8c22:	2201      	movs	r2, #1
    8c24:	4620      	mov	r0, r4
    8c26:	f7fe ff87 	bl	7b38 <strncmp>
    8c2a:	9b01      	ldr	r3, [sp, #4]
    8c2c:	2800      	cmp	r0, #0
    8c2e:	d16d      	bne.n	8d0c <__gethex+0x2f8>
    8c30:	7861      	ldrb	r1, [r4, #1]
    8c32:	f818 2001 	ldrb.w	r2, [r8, r1]
    8c36:	1c65      	adds	r5, r4, #1
    8c38:	2a00      	cmp	r2, #0
    8c3a:	d069      	beq.n	8d10 <__gethex+0x2fc>
    8c3c:	2930      	cmp	r1, #48	; 0x30
    8c3e:	462c      	mov	r4, r5
    8c40:	d105      	bne.n	8c4e <__gethex+0x23a>
    8c42:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8c46:	2b30      	cmp	r3, #48	; 0x30
    8c48:	d0fb      	beq.n	8c42 <__gethex+0x22e>
    8c4a:	f818 2003 	ldrb.w	r2, [r8, r3]
    8c4e:	fab2 f782 	clz	r7, r2
    8c52:	097f      	lsrs	r7, r7, #5
    8c54:	2301      	movs	r3, #1
    8c56:	e702      	b.n	8a5e <__gethex+0x4a>
    8c58:	2501      	movs	r5, #1
    8c5a:	b157      	cbz	r7, 8c72 <__gethex+0x25e>
    8c5c:	f8da 300c 	ldr.w	r3, [sl, #12]
    8c60:	2b02      	cmp	r3, #2
    8c62:	d05d      	beq.n	8d20 <__gethex+0x30c>
    8c64:	2b03      	cmp	r3, #3
    8c66:	d05f      	beq.n	8d28 <__gethex+0x314>
    8c68:	2b01      	cmp	r3, #1
    8c6a:	f000 8084 	beq.w	8d76 <__gethex+0x362>
    8c6e:	f045 0510 	orr.w	r5, r5, #16
    8c72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c74:	f8c3 b000 	str.w	fp, [r3]
    8c78:	9b02      	ldr	r3, [sp, #8]
    8c7a:	4628      	mov	r0, r5
    8c7c:	f8c3 9000 	str.w	r9, [r3]
    8c80:	b005      	add	sp, #20
    8c82:	ecbd 8b02 	vpop	{d8}
    8c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c8a:	462e      	mov	r6, r5
    8c8c:	e702      	b.n	8a94 <__gethex+0x80>
    8c8e:	2001      	movs	r0, #1
    8c90:	78aa      	ldrb	r2, [r5, #2]
    8c92:	1cae      	adds	r6, r5, #2
    8c94:	e758      	b.n	8b48 <__gethex+0x134>
    8c96:	1b06      	subs	r6, r0, r4
    8c98:	4631      	mov	r1, r6
    8c9a:	4658      	mov	r0, fp
    8c9c:	f000 ff96 	bl	9bcc <__any_on>
    8ca0:	4607      	mov	r7, r0
    8ca2:	b178      	cbz	r0, 8cc4 <__gethex+0x2b0>
    8ca4:	1e72      	subs	r2, r6, #1
    8ca6:	1153      	asrs	r3, r2, #5
    8ca8:	9901      	ldr	r1, [sp, #4]
    8caa:	2701      	movs	r7, #1
    8cac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    8cb0:	f002 031f 	and.w	r3, r2, #31
    8cb4:	fa07 f303 	lsl.w	r3, r7, r3
    8cb8:	420b      	tst	r3, r1
    8cba:	d003      	beq.n	8cc4 <__gethex+0x2b0>
    8cbc:	42ba      	cmp	r2, r7
    8cbe:	f300 80e2 	bgt.w	8e86 <__gethex+0x472>
    8cc2:	2702      	movs	r7, #2
    8cc4:	4631      	mov	r1, r6
    8cc6:	4658      	mov	r0, fp
    8cc8:	44b1      	add	r9, r6
    8cca:	f7ff fe51 	bl	8970 <rshift>
    8cce:	e76f      	b.n	8bb0 <__gethex+0x19c>
    8cd0:	f109 35ff 	add.w	r5, r9, #4294967295
    8cd4:	2f00      	cmp	r7, #0
    8cd6:	f040 80ce 	bne.w	8e76 <__gethex+0x462>
    8cda:	2d00      	cmp	r5, #0
    8cdc:	f040 80cd 	bne.w	8e7a <__gethex+0x466>
    8ce0:	116b      	asrs	r3, r5, #5
    8ce2:	9a01      	ldr	r2, [sp, #4]
    8ce4:	f005 051f 	and.w	r5, r5, #31
    8ce8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8cec:	2301      	movs	r3, #1
    8cee:	40ab      	lsls	r3, r5
    8cf0:	4213      	tst	r3, r2
    8cf2:	4649      	mov	r1, r9
    8cf4:	4658      	mov	r0, fp
    8cf6:	bf18      	it	ne
    8cf8:	f047 0702 	orrne.w	r7, r7, #2
    8cfc:	eba4 0409 	sub.w	r4, r4, r9
    8d00:	f7ff fe36 	bl	8970 <rshift>
    8d04:	2502      	movs	r5, #2
    8d06:	f8da 9004 	ldr.w	r9, [sl, #4]
    8d0a:	e7a6      	b.n	8c5a <__gethex+0x246>
    8d0c:	7821      	ldrb	r1, [r4, #0]
    8d0e:	4625      	mov	r5, r4
    8d10:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8d14:	2950      	cmp	r1, #80	; 0x50
    8d16:	f000 80bf 	beq.w	8e98 <__gethex+0x484>
    8d1a:	f8cb 5000 	str.w	r5, [fp]
    8d1e:	e727      	b.n	8b70 <__gethex+0x15c>
    8d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d22:	f1c3 0301 	rsb	r3, r3, #1
    8d26:	9311      	str	r3, [sp, #68]	; 0x44
    8d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d09f      	beq.n	8c6e <__gethex+0x25a>
    8d2e:	f8db 7010 	ldr.w	r7, [fp, #16]
    8d32:	f8dd 8004 	ldr.w	r8, [sp, #4]
    8d36:	00ba      	lsls	r2, r7, #2
    8d38:	4643      	mov	r3, r8
    8d3a:	9201      	str	r2, [sp, #4]
    8d3c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    8d40:	2100      	movs	r1, #0
    8d42:	e007      	b.n	8d54 <__gethex+0x340>
    8d44:	20000c08 	.word	0x20000c08
    8d48:	20000914 	.word	0x20000914
    8d4c:	4298      	cmp	r0, r3
    8d4e:	f843 1c04 	str.w	r1, [r3, #-4]
    8d52:	d93f      	bls.n	8dd4 <__gethex+0x3c0>
    8d54:	461e      	mov	r6, r3
    8d56:	f853 2b04 	ldr.w	r2, [r3], #4
    8d5a:	f1b2 3fff 	cmp.w	r2, #4294967295
    8d5e:	d0f5      	beq.n	8d4c <__gethex+0x338>
    8d60:	3201      	adds	r2, #1
    8d62:	2d02      	cmp	r5, #2
    8d64:	6032      	str	r2, [r6, #0]
    8d66:	f000 80bf 	beq.w	8ee8 <__gethex+0x4d4>
    8d6a:	f014 041f 	ands.w	r4, r4, #31
    8d6e:	f040 80e7 	bne.w	8f40 <__gethex+0x52c>
    8d72:	2521      	movs	r5, #33	; 0x21
    8d74:	e77d      	b.n	8c72 <__gethex+0x25e>
    8d76:	07ba      	lsls	r2, r7, #30
    8d78:	f57f af79 	bpl.w	8c6e <__gethex+0x25a>
    8d7c:	9b01      	ldr	r3, [sp, #4]
    8d7e:	681b      	ldr	r3, [r3, #0]
    8d80:	431f      	orrs	r7, r3
    8d82:	07fb      	lsls	r3, r7, #31
    8d84:	d4d3      	bmi.n	8d2e <__gethex+0x31a>
    8d86:	e772      	b.n	8c6e <__gethex+0x25a>
    8d88:	2000      	movs	r0, #0
    8d8a:	e781      	b.n	8c90 <__gethex+0x27c>
    8d8c:	1a22      	subs	r2, r4, r0
    8d8e:	4659      	mov	r1, fp
    8d90:	ee18 0a10 	vmov	r0, s16
    8d94:	eba9 0902 	sub.w	r9, r9, r2
    8d98:	f000 fc76 	bl	9688 <__lshift>
    8d9c:	f100 0314 	add.w	r3, r0, #20
    8da0:	4683      	mov	fp, r0
    8da2:	9301      	str	r3, [sp, #4]
    8da4:	2700      	movs	r7, #0
    8da6:	e703      	b.n	8bb0 <__gethex+0x19c>
    8da8:	7872      	ldrb	r2, [r6, #1]
    8daa:	f818 0002 	ldrb.w	r0, [r8, r2]
    8dae:	1c71      	adds	r1, r6, #1
    8db0:	2800      	cmp	r0, #0
    8db2:	f000 80a0 	beq.w	8ef6 <__gethex+0x4e2>
    8db6:	460d      	mov	r5, r1
    8db8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8dbc:	f818 0002 	ldrb.w	r0, [r8, r2]
    8dc0:	2800      	cmp	r0, #0
    8dc2:	d1f8      	bne.n	8db6 <__gethex+0x3a2>
    8dc4:	1b75      	subs	r5, r6, r5
    8dc6:	ea4f 0985 	mov.w	r9, r5, lsl #2
    8dca:	460e      	mov	r6, r1
    8dcc:	e65d      	b.n	8a8a <__gethex+0x76>
    8dce:	3402      	adds	r4, #2
    8dd0:	2300      	movs	r3, #0
    8dd2:	e638      	b.n	8a46 <__gethex+0x32>
    8dd4:	f8db 3008 	ldr.w	r3, [fp, #8]
    8dd8:	429f      	cmp	r7, r3
    8dda:	f280 808e 	bge.w	8efa <__gethex+0x4e6>
    8dde:	463b      	mov	r3, r7
    8de0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    8de4:	2101      	movs	r1, #1
    8de6:	3301      	adds	r3, #1
    8de8:	2d02      	cmp	r5, #2
    8dea:	f8cb 3010 	str.w	r3, [fp, #16]
    8dee:	6151      	str	r1, [r2, #20]
    8df0:	d07a      	beq.n	8ee8 <__gethex+0x4d4>
    8df2:	429f      	cmp	r7, r3
    8df4:	dab9      	bge.n	8d6a <__gethex+0x356>
    8df6:	2b00      	cmp	r3, #0
    8df8:	f340 809b 	ble.w	8f32 <__gethex+0x51e>
    8dfc:	f8db 2014 	ldr.w	r2, [fp, #20]
    8e00:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    8e04:	f10b 0018 	add.w	r0, fp, #24
    8e08:	4283      	cmp	r3, r0
    8e0a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8e0e:	f240 80b1 	bls.w	8f74 <__gethex+0x560>
    8e12:	4644      	mov	r4, r8
    8e14:	6801      	ldr	r1, [r0, #0]
    8e16:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    8e1a:	f844 2b04 	str.w	r2, [r4], #4
    8e1e:	f850 2b04 	ldr.w	r2, [r0], #4
    8e22:	4283      	cmp	r3, r0
    8e24:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8e28:	d8f4      	bhi.n	8e14 <__gethex+0x400>
    8e2a:	eba3 030b 	sub.w	r3, r3, fp
    8e2e:	3b19      	subs	r3, #25
    8e30:	089b      	lsrs	r3, r3, #2
    8e32:	3301      	adds	r3, #1
    8e34:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    8e38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    8e3c:	2a00      	cmp	r2, #0
    8e3e:	f040 809d 	bne.w	8f7c <__gethex+0x568>
    8e42:	eba3 0208 	sub.w	r2, r3, r8
    8e46:	1092      	asrs	r2, r2, #2
    8e48:	4543      	cmp	r3, r8
    8e4a:	f8cb 2010 	str.w	r2, [fp, #16]
    8e4e:	d073      	beq.n	8f38 <__gethex+0x524>
    8e50:	f8da 3008 	ldr.w	r3, [sl, #8]
    8e54:	f109 0901 	add.w	r9, r9, #1
    8e58:	454b      	cmp	r3, r9
    8e5a:	da8a      	bge.n	8d72 <__gethex+0x35e>
    8e5c:	ee18 0a10 	vmov	r0, s16
    8e60:	4659      	mov	r1, fp
    8e62:	f000 f9d1 	bl	9208 <_Bfree>
    8e66:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8e68:	2300      	movs	r3, #0
    8e6a:	6013      	str	r3, [r2, #0]
    8e6c:	25a3      	movs	r5, #163	; 0xa3
    8e6e:	e683      	b.n	8b78 <__gethex+0x164>
    8e70:	9e01      	ldr	r6, [sp, #4]
    8e72:	2300      	movs	r3, #0
    8e74:	e689      	b.n	8b8a <__gethex+0x176>
    8e76:	2701      	movs	r7, #1
    8e78:	e732      	b.n	8ce0 <__gethex+0x2cc>
    8e7a:	4629      	mov	r1, r5
    8e7c:	4658      	mov	r0, fp
    8e7e:	f000 fea5 	bl	9bcc <__any_on>
    8e82:	4607      	mov	r7, r0
    8e84:	e72c      	b.n	8ce0 <__gethex+0x2cc>
    8e86:	1eb1      	subs	r1, r6, #2
    8e88:	4658      	mov	r0, fp
    8e8a:	f000 fe9f 	bl	9bcc <__any_on>
    8e8e:	2800      	cmp	r0, #0
    8e90:	f43f af17 	beq.w	8cc2 <__gethex+0x2ae>
    8e94:	2703      	movs	r7, #3
    8e96:	e715      	b.n	8cc4 <__gethex+0x2b0>
    8e98:	f04f 0900 	mov.w	r9, #0
    8e9c:	2701      	movs	r7, #1
    8e9e:	e64a      	b.n	8b36 <__gethex+0x122>
    8ea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8ea2:	2a00      	cmp	r2, #0
    8ea4:	f47f ae9d 	bne.w	8be2 <__gethex+0x1ce>
    8ea8:	9902      	ldr	r1, [sp, #8]
    8eaa:	600b      	str	r3, [r1, #0]
    8eac:	9b01      	ldr	r3, [sp, #4]
    8eae:	2201      	movs	r2, #1
    8eb0:	f8cb 2010 	str.w	r2, [fp, #16]
    8eb4:	601a      	str	r2, [r3, #0]
    8eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8eb8:	2562      	movs	r5, #98	; 0x62
    8eba:	f8c3 b000 	str.w	fp, [r3]
    8ebe:	e65b      	b.n	8b78 <__gethex+0x164>
    8ec0:	454c      	cmp	r4, r9
    8ec2:	f47f ae8e 	bne.w	8be2 <__gethex+0x1ce>
    8ec6:	2c01      	cmp	r4, #1
    8ec8:	d0ee      	beq.n	8ea8 <__gethex+0x494>
    8eca:	1e61      	subs	r1, r4, #1
    8ecc:	4658      	mov	r0, fp
    8ece:	f000 fe7d 	bl	9bcc <__any_on>
    8ed2:	2800      	cmp	r0, #0
    8ed4:	f43f ae85 	beq.w	8be2 <__gethex+0x1ce>
    8ed8:	f8da 3004 	ldr.w	r3, [sl, #4]
    8edc:	e7e4      	b.n	8ea8 <__gethex+0x494>
    8ede:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8ee0:	2a00      	cmp	r2, #0
    8ee2:	f43f ae7e 	beq.w	8be2 <__gethex+0x1ce>
    8ee6:	e7df      	b.n	8ea8 <__gethex+0x494>
    8ee8:	f8da 3000 	ldr.w	r3, [sl]
    8eec:	3b01      	subs	r3, #1
    8eee:	42a3      	cmp	r3, r4
    8ef0:	d034      	beq.n	8f5c <__gethex+0x548>
    8ef2:	2522      	movs	r5, #34	; 0x22
    8ef4:	e6bd      	b.n	8c72 <__gethex+0x25e>
    8ef6:	460e      	mov	r6, r1
    8ef8:	e5c7      	b.n	8a8a <__gethex+0x76>
    8efa:	f8db 1004 	ldr.w	r1, [fp, #4]
    8efe:	ee18 0a10 	vmov	r0, s16
    8f02:	3101      	adds	r1, #1
    8f04:	f000 f95a 	bl	91bc <_Balloc>
    8f08:	4606      	mov	r6, r0
    8f0a:	b3c8      	cbz	r0, 8f80 <__gethex+0x56c>
    8f0c:	f8db 3010 	ldr.w	r3, [fp, #16]
    8f10:	3302      	adds	r3, #2
    8f12:	009a      	lsls	r2, r3, #2
    8f14:	f10b 010c 	add.w	r1, fp, #12
    8f18:	300c      	adds	r0, #12
    8f1a:	f7fb f881 	bl	4020 <memcpy>
    8f1e:	4659      	mov	r1, fp
    8f20:	ee18 0a10 	vmov	r0, s16
    8f24:	f000 f970 	bl	9208 <_Bfree>
    8f28:	f106 0814 	add.w	r8, r6, #20
    8f2c:	6933      	ldr	r3, [r6, #16]
    8f2e:	46b3      	mov	fp, r6
    8f30:	e756      	b.n	8de0 <__gethex+0x3cc>
    8f32:	2300      	movs	r3, #0
    8f34:	f8cb 3010 	str.w	r3, [fp, #16]
    8f38:	2300      	movs	r3, #0
    8f3a:	f8cb 3014 	str.w	r3, [fp, #20]
    8f3e:	e787      	b.n	8e50 <__gethex+0x43c>
    8f40:	9b01      	ldr	r3, [sp, #4]
    8f42:	4443      	add	r3, r8
    8f44:	f1c4 0420 	rsb	r4, r4, #32
    8f48:	f853 0c04 	ldr.w	r0, [r3, #-4]
    8f4c:	f000 fa10 	bl	9370 <__hi0bits>
    8f50:	42a0      	cmp	r0, r4
    8f52:	f6bf af0e 	bge.w	8d72 <__gethex+0x35e>
    8f56:	f8db 3010 	ldr.w	r3, [fp, #16]
    8f5a:	e74c      	b.n	8df6 <__gethex+0x3e2>
    8f5c:	1163      	asrs	r3, r4, #5
    8f5e:	f004 041f 	and.w	r4, r4, #31
    8f62:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    8f66:	2301      	movs	r3, #1
    8f68:	40a3      	lsls	r3, r4
    8f6a:	4213      	tst	r3, r2
    8f6c:	bf0c      	ite	eq
    8f6e:	2522      	moveq	r5, #34	; 0x22
    8f70:	2521      	movne	r5, #33	; 0x21
    8f72:	e67e      	b.n	8c72 <__gethex+0x25e>
    8f74:	f8c8 2000 	str.w	r2, [r8]
    8f78:	4643      	mov	r3, r8
    8f7a:	b16a      	cbz	r2, 8f98 <__gethex+0x584>
    8f7c:	3304      	adds	r3, #4
    8f7e:	e760      	b.n	8e42 <__gethex+0x42e>
    8f80:	4b07      	ldr	r3, [pc, #28]	; (8fa0 <__gethex+0x58c>)
    8f82:	4808      	ldr	r0, [pc, #32]	; (8fa4 <__gethex+0x590>)
    8f84:	4632      	mov	r2, r6
    8f86:	2184      	movs	r1, #132	; 0x84
    8f88:	f001 f872 	bl	a070 <__assert_func>
    8f8c:	4b04      	ldr	r3, [pc, #16]	; (8fa0 <__gethex+0x58c>)
    8f8e:	4805      	ldr	r0, [pc, #20]	; (8fa4 <__gethex+0x590>)
    8f90:	465a      	mov	r2, fp
    8f92:	21e4      	movs	r1, #228	; 0xe4
    8f94:	f001 f86c 	bl	a070 <__assert_func>
    8f98:	f8cb 2010 	str.w	r2, [fp, #16]
    8f9c:	e7cc      	b.n	8f38 <__gethex+0x524>
    8f9e:	bf00      	nop
    8fa0:	2000089c 	.word	0x2000089c
    8fa4:	200008b0 	.word	0x200008b0

00008fa8 <__match>:
    8fa8:	b410      	push	{r4}
    8faa:	6804      	ldr	r4, [r0, #0]
    8fac:	e009      	b.n	8fc2 <__match+0x1a>
    8fae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8fb2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    8fb6:	f1bc 0f19 	cmp.w	ip, #25
    8fba:	bf98      	it	ls
    8fbc:	3320      	addls	r3, #32
    8fbe:	4293      	cmp	r3, r2
    8fc0:	d109      	bne.n	8fd6 <__match+0x2e>
    8fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
    8fc6:	2a00      	cmp	r2, #0
    8fc8:	d1f1      	bne.n	8fae <__match+0x6>
    8fca:	3401      	adds	r4, #1
    8fcc:	6004      	str	r4, [r0, #0]
    8fce:	2001      	movs	r0, #1
    8fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    8fd4:	4770      	bx	lr
    8fd6:	2000      	movs	r0, #0
    8fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    8fdc:	4770      	bx	lr
    8fde:	bf00      	nop

00008fe0 <__hexnan>:
    8fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fe4:	6809      	ldr	r1, [r1, #0]
    8fe6:	b085      	sub	sp, #20
    8fe8:	114b      	asrs	r3, r1, #5
    8fea:	f011 011f 	ands.w	r1, r1, #31
    8fee:	9002      	str	r0, [sp, #8]
    8ff0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ff4:	9103      	str	r1, [sp, #12]
    8ff6:	f040 808f 	bne.w	9118 <__hexnan+0x138>
    8ffa:	1f1d      	subs	r5, r3, #4
    8ffc:	9301      	str	r3, [sp, #4]
    8ffe:	9b02      	ldr	r3, [sp, #8]
    9000:	9901      	ldr	r1, [sp, #4]
    9002:	681c      	ldr	r4, [r3, #0]
    9004:	2300      	movs	r3, #0
    9006:	f841 3c04 	str.w	r3, [r1, #-4]
    900a:	7861      	ldrb	r1, [r4, #1]
    900c:	3401      	adds	r4, #1
    900e:	2900      	cmp	r1, #0
    9010:	f000 8098 	beq.w	9144 <__hexnan+0x164>
    9014:	f8df 9174 	ldr.w	r9, [pc, #372]	; 918c <__hexnan+0x1ac>
    9018:	46a8      	mov	r8, r5
    901a:	46ac      	mov	ip, r5
    901c:	469a      	mov	sl, r3
    901e:	461e      	mov	r6, r3
    9020:	e00e      	b.n	9040 <__hexnan+0x60>
    9022:	2920      	cmp	r1, #32
    9024:	f200 808c 	bhi.w	9140 <__hexnan+0x160>
    9028:	4556      	cmp	r6, sl
    902a:	dd06      	ble.n	903a <__hexnan+0x5a>
    902c:	45c4      	cmp	ip, r8
    902e:	d201      	bcs.n	9034 <__hexnan+0x54>
    9030:	2b07      	cmp	r3, #7
    9032:	dd5b      	ble.n	90ec <__hexnan+0x10c>
    9034:	4562      	cmp	r2, ip
    9036:	d351      	bcc.n	90dc <__hexnan+0xfc>
    9038:	2308      	movs	r3, #8
    903a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    903e:	b1a1      	cbz	r1, 906a <__hexnan+0x8a>
    9040:	f819 0001 	ldrb.w	r0, [r9, r1]
    9044:	2800      	cmp	r0, #0
    9046:	d0ec      	beq.n	9022 <__hexnan+0x42>
    9048:	3301      	adds	r3, #1
    904a:	2b08      	cmp	r3, #8
    904c:	f106 0601 	add.w	r6, r6, #1
    9050:	dc3a      	bgt.n	90c8 <__hexnan+0xe8>
    9052:	f8dc 1000 	ldr.w	r1, [ip]
    9056:	0109      	lsls	r1, r1, #4
    9058:	f000 000f 	and.w	r0, r0, #15
    905c:	4308      	orrs	r0, r1
    905e:	f8cc 0000 	str.w	r0, [ip]
    9062:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    9066:	2900      	cmp	r1, #0
    9068:	d1ea      	bne.n	9040 <__hexnan+0x60>
    906a:	2e00      	cmp	r6, #0
    906c:	d06a      	beq.n	9144 <__hexnan+0x164>
    906e:	45c4      	cmp	ip, r8
    9070:	d201      	bcs.n	9076 <__hexnan+0x96>
    9072:	2b07      	cmp	r3, #7
    9074:	dd74      	ble.n	9160 <__hexnan+0x180>
    9076:	4562      	cmp	r2, ip
    9078:	d252      	bcs.n	9120 <__hexnan+0x140>
    907a:	1f11      	subs	r1, r2, #4
    907c:	4663      	mov	r3, ip
    907e:	f853 0b04 	ldr.w	r0, [r3], #4
    9082:	f841 0f04 	str.w	r0, [r1, #4]!
    9086:	42ab      	cmp	r3, r5
    9088:	d9f9      	bls.n	907e <__hexnan+0x9e>
    908a:	eba5 030c 	sub.w	r3, r5, ip
    908e:	f023 0303 	bic.w	r3, r3, #3
    9092:	1c69      	adds	r1, r5, #1
    9094:	3304      	adds	r3, #4
    9096:	f10c 0c01 	add.w	ip, ip, #1
    909a:	4561      	cmp	r1, ip
    909c:	bf38      	it	cc
    909e:	2304      	movcc	r3, #4
    90a0:	4413      	add	r3, r2
    90a2:	2100      	movs	r1, #0
    90a4:	f843 1b04 	str.w	r1, [r3], #4
    90a8:	42ab      	cmp	r3, r5
    90aa:	d9fb      	bls.n	90a4 <__hexnan+0xc4>
    90ac:	9b01      	ldr	r3, [sp, #4]
    90ae:	f853 3c04 	ldr.w	r3, [r3, #-4]
    90b2:	b92b      	cbnz	r3, 90c0 <__hexnan+0xe0>
    90b4:	42aa      	cmp	r2, r5
    90b6:	d049      	beq.n	914c <__hexnan+0x16c>
    90b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    90bc:	2b00      	cmp	r3, #0
    90be:	d0f9      	beq.n	90b4 <__hexnan+0xd4>
    90c0:	2005      	movs	r0, #5
    90c2:	b005      	add	sp, #20
    90c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90c8:	4562      	cmp	r2, ip
    90ca:	d2b6      	bcs.n	903a <__hexnan+0x5a>
    90cc:	2300      	movs	r3, #0
    90ce:	f84c 3c04 	str.w	r3, [ip, #-4]
    90d2:	4619      	mov	r1, r3
    90d4:	f1ac 0c04 	sub.w	ip, ip, #4
    90d8:	2301      	movs	r3, #1
    90da:	e7bd      	b.n	9058 <__hexnan+0x78>
    90dc:	2300      	movs	r3, #0
    90de:	f1ac 0804 	sub.w	r8, ip, #4
    90e2:	f84c 3c04 	str.w	r3, [ip, #-4]
    90e6:	46b2      	mov	sl, r6
    90e8:	46c4      	mov	ip, r8
    90ea:	e7a6      	b.n	903a <__hexnan+0x5a>
    90ec:	f1c3 0108 	rsb	r1, r3, #8
    90f0:	f8dc 3000 	ldr.w	r3, [ip]
    90f4:	0089      	lsls	r1, r1, #2
    90f6:	f1c1 0e20 	rsb	lr, r1, #32
    90fa:	4660      	mov	r0, ip
    90fc:	469b      	mov	fp, r3
    90fe:	6847      	ldr	r7, [r0, #4]
    9100:	fa07 f30e 	lsl.w	r3, r7, lr
    9104:	ea43 030b 	orr.w	r3, r3, fp
    9108:	fa27 fb01 	lsr.w	fp, r7, r1
    910c:	6003      	str	r3, [r0, #0]
    910e:	f840 bf04 	str.w	fp, [r0, #4]!
    9112:	4540      	cmp	r0, r8
    9114:	d3f3      	bcc.n	90fe <__hexnan+0x11e>
    9116:	e78d      	b.n	9034 <__hexnan+0x54>
    9118:	1d19      	adds	r1, r3, #4
    911a:	9101      	str	r1, [sp, #4]
    911c:	461d      	mov	r5, r3
    911e:	e76e      	b.n	8ffe <__hexnan+0x1e>
    9120:	9b03      	ldr	r3, [sp, #12]
    9122:	2b00      	cmp	r3, #0
    9124:	d0c2      	beq.n	90ac <__hexnan+0xcc>
    9126:	9b03      	ldr	r3, [sp, #12]
    9128:	9801      	ldr	r0, [sp, #4]
    912a:	f1c3 0120 	rsb	r1, r3, #32
    912e:	f04f 33ff 	mov.w	r3, #4294967295
    9132:	40cb      	lsrs	r3, r1
    9134:	f850 1c04 	ldr.w	r1, [r0, #-4]
    9138:	400b      	ands	r3, r1
    913a:	f840 3c04 	str.w	r3, [r0, #-4]
    913e:	e7b8      	b.n	90b2 <__hexnan+0xd2>
    9140:	2929      	cmp	r1, #41	; 0x29
    9142:	d009      	beq.n	9158 <__hexnan+0x178>
    9144:	2004      	movs	r0, #4
    9146:	b005      	add	sp, #20
    9148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    914c:	2301      	movs	r3, #1
    914e:	2005      	movs	r0, #5
    9150:	602b      	str	r3, [r5, #0]
    9152:	b005      	add	sp, #20
    9154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9158:	9902      	ldr	r1, [sp, #8]
    915a:	3401      	adds	r4, #1
    915c:	600c      	str	r4, [r1, #0]
    915e:	e784      	b.n	906a <__hexnan+0x8a>
    9160:	f8dc 1000 	ldr.w	r1, [ip]
    9164:	f1c3 0308 	rsb	r3, r3, #8
    9168:	009b      	lsls	r3, r3, #2
    916a:	f1c3 0720 	rsb	r7, r3, #32
    916e:	4664      	mov	r4, ip
    9170:	4608      	mov	r0, r1
    9172:	6866      	ldr	r6, [r4, #4]
    9174:	fa06 f107 	lsl.w	r1, r6, r7
    9178:	4301      	orrs	r1, r0
    917a:	fa26 f003 	lsr.w	r0, r6, r3
    917e:	6021      	str	r1, [r4, #0]
    9180:	f844 0f04 	str.w	r0, [r4, #4]!
    9184:	4544      	cmp	r4, r8
    9186:	d3f4      	bcc.n	9172 <__hexnan+0x192>
    9188:	e775      	b.n	9076 <__hexnan+0x96>
    918a:	bf00      	nop
    918c:	20000914 	.word	0x20000914

00009190 <__ascii_mbtowc>:
    9190:	b082      	sub	sp, #8
    9192:	b149      	cbz	r1, 91a8 <__ascii_mbtowc+0x18>
    9194:	b15a      	cbz	r2, 91ae <__ascii_mbtowc+0x1e>
    9196:	b16b      	cbz	r3, 91b4 <__ascii_mbtowc+0x24>
    9198:	7813      	ldrb	r3, [r2, #0]
    919a:	600b      	str	r3, [r1, #0]
    919c:	7812      	ldrb	r2, [r2, #0]
    919e:	1e10      	subs	r0, r2, #0
    91a0:	bf18      	it	ne
    91a2:	2001      	movne	r0, #1
    91a4:	b002      	add	sp, #8
    91a6:	4770      	bx	lr
    91a8:	a901      	add	r1, sp, #4
    91aa:	2a00      	cmp	r2, #0
    91ac:	d1f3      	bne.n	9196 <__ascii_mbtowc+0x6>
    91ae:	4610      	mov	r0, r2
    91b0:	b002      	add	sp, #8
    91b2:	4770      	bx	lr
    91b4:	f06f 0001 	mvn.w	r0, #1
    91b8:	e7f4      	b.n	91a4 <__ascii_mbtowc+0x14>
    91ba:	bf00      	nop

000091bc <_Balloc>:
    91bc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    91be:	b570      	push	{r4, r5, r6, lr}
    91c0:	4605      	mov	r5, r0
    91c2:	460c      	mov	r4, r1
    91c4:	b14b      	cbz	r3, 91da <_Balloc+0x1e>
    91c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    91ca:	b180      	cbz	r0, 91ee <_Balloc+0x32>
    91cc:	6802      	ldr	r2, [r0, #0]
    91ce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    91d2:	2300      	movs	r3, #0
    91d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
    91d8:	bd70      	pop	{r4, r5, r6, pc}
    91da:	2221      	movs	r2, #33	; 0x21
    91dc:	2104      	movs	r1, #4
    91de:	f000 ff67 	bl	a0b0 <_calloc_r>
    91e2:	4603      	mov	r3, r0
    91e4:	6468      	str	r0, [r5, #68]	; 0x44
    91e6:	2800      	cmp	r0, #0
    91e8:	d1ed      	bne.n	91c6 <_Balloc+0xa>
    91ea:	2000      	movs	r0, #0
    91ec:	bd70      	pop	{r4, r5, r6, pc}
    91ee:	2101      	movs	r1, #1
    91f0:	fa01 f604 	lsl.w	r6, r1, r4
    91f4:	1d72      	adds	r2, r6, #5
    91f6:	0092      	lsls	r2, r2, #2
    91f8:	4628      	mov	r0, r5
    91fa:	f000 ff59 	bl	a0b0 <_calloc_r>
    91fe:	2800      	cmp	r0, #0
    9200:	d0f3      	beq.n	91ea <_Balloc+0x2e>
    9202:	e9c0 4601 	strd	r4, r6, [r0, #4]
    9206:	e7e4      	b.n	91d2 <_Balloc+0x16>

00009208 <_Bfree>:
    9208:	b131      	cbz	r1, 9218 <_Bfree+0x10>
    920a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    920c:	684a      	ldr	r2, [r1, #4]
    920e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9212:	6008      	str	r0, [r1, #0]
    9214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    9218:	4770      	bx	lr
    921a:	bf00      	nop

0000921c <__multadd>:
    921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9220:	690e      	ldr	r6, [r1, #16]
    9222:	4680      	mov	r8, r0
    9224:	460f      	mov	r7, r1
    9226:	461d      	mov	r5, r3
    9228:	f101 0e14 	add.w	lr, r1, #20
    922c:	2000      	movs	r0, #0
    922e:	f8de 1000 	ldr.w	r1, [lr]
    9232:	b28c      	uxth	r4, r1
    9234:	fb02 5304 	mla	r3, r2, r4, r5
    9238:	0c09      	lsrs	r1, r1, #16
    923a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    923e:	fb02 cc01 	mla	ip, r2, r1, ip
    9242:	3001      	adds	r0, #1
    9244:	b29c      	uxth	r4, r3
    9246:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    924a:	4286      	cmp	r6, r0
    924c:	f84e 4b04 	str.w	r4, [lr], #4
    9250:	ea4f 451c 	mov.w	r5, ip, lsr #16
    9254:	dceb      	bgt.n	922e <__multadd+0x12>
    9256:	b13d      	cbz	r5, 9268 <__multadd+0x4c>
    9258:	68bb      	ldr	r3, [r7, #8]
    925a:	42b3      	cmp	r3, r6
    925c:	dd07      	ble.n	926e <__multadd+0x52>
    925e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    9262:	3601      	adds	r6, #1
    9264:	615d      	str	r5, [r3, #20]
    9266:	613e      	str	r6, [r7, #16]
    9268:	4638      	mov	r0, r7
    926a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    926e:	6879      	ldr	r1, [r7, #4]
    9270:	4640      	mov	r0, r8
    9272:	3101      	adds	r1, #1
    9274:	f7ff ffa2 	bl	91bc <_Balloc>
    9278:	4604      	mov	r4, r0
    927a:	b1b0      	cbz	r0, 92aa <__multadd+0x8e>
    927c:	693a      	ldr	r2, [r7, #16]
    927e:	3202      	adds	r2, #2
    9280:	f107 010c 	add.w	r1, r7, #12
    9284:	0092      	lsls	r2, r2, #2
    9286:	300c      	adds	r0, #12
    9288:	f7fa feca 	bl	4020 <memcpy>
    928c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    9290:	687a      	ldr	r2, [r7, #4]
    9292:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9296:	6039      	str	r1, [r7, #0]
    9298:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    929c:	4627      	mov	r7, r4
    929e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    92a2:	3601      	adds	r6, #1
    92a4:	615d      	str	r5, [r3, #20]
    92a6:	613e      	str	r6, [r7, #16]
    92a8:	e7de      	b.n	9268 <__multadd+0x4c>
    92aa:	4b03      	ldr	r3, [pc, #12]	; (92b8 <__multadd+0x9c>)
    92ac:	4803      	ldr	r0, [pc, #12]	; (92bc <__multadd+0xa0>)
    92ae:	4622      	mov	r2, r4
    92b0:	21ba      	movs	r1, #186	; 0xba
    92b2:	f000 fedd 	bl	a070 <__assert_func>
    92b6:	bf00      	nop
    92b8:	2000089c 	.word	0x2000089c
    92bc:	20000a14 	.word	0x20000a14

000092c0 <__s2b>:
    92c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92c4:	4617      	mov	r7, r2
    92c6:	4a27      	ldr	r2, [pc, #156]	; (9364 <__s2b+0xa4>)
    92c8:	461e      	mov	r6, r3
    92ca:	3308      	adds	r3, #8
    92cc:	460c      	mov	r4, r1
    92ce:	2e09      	cmp	r6, #9
    92d0:	fb82 1203 	smull	r1, r2, r2, r3
    92d4:	ea4f 73e3 	mov.w	r3, r3, asr #31
    92d8:	4605      	mov	r5, r0
    92da:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    92de:	dd39      	ble.n	9354 <__s2b+0x94>
    92e0:	f04f 0c01 	mov.w	ip, #1
    92e4:	2100      	movs	r1, #0
    92e6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    92ea:	4563      	cmp	r3, ip
    92ec:	f101 0101 	add.w	r1, r1, #1
    92f0:	dcf9      	bgt.n	92e6 <__s2b+0x26>
    92f2:	4628      	mov	r0, r5
    92f4:	f7ff ff62 	bl	91bc <_Balloc>
    92f8:	4601      	mov	r1, r0
    92fa:	b368      	cbz	r0, 9358 <__s2b+0x98>
    92fc:	9b08      	ldr	r3, [sp, #32]
    92fe:	6143      	str	r3, [r0, #20]
    9300:	2f09      	cmp	r7, #9
    9302:	f04f 0301 	mov.w	r3, #1
    9306:	6103      	str	r3, [r0, #16]
    9308:	dc12      	bgt.n	9330 <__s2b+0x70>
    930a:	340a      	adds	r4, #10
    930c:	2709      	movs	r7, #9
    930e:	42be      	cmp	r6, r7
    9310:	dd0b      	ble.n	932a <__s2b+0x6a>
    9312:	1bf2      	subs	r2, r6, r7
    9314:	18a6      	adds	r6, r4, r2
    9316:	f814 3b01 	ldrb.w	r3, [r4], #1
    931a:	220a      	movs	r2, #10
    931c:	3b30      	subs	r3, #48	; 0x30
    931e:	4628      	mov	r0, r5
    9320:	f7ff ff7c 	bl	921c <__multadd>
    9324:	42a6      	cmp	r6, r4
    9326:	4601      	mov	r1, r0
    9328:	d1f5      	bne.n	9316 <__s2b+0x56>
    932a:	4608      	mov	r0, r1
    932c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9330:	f104 0909 	add.w	r9, r4, #9
    9334:	46c8      	mov	r8, r9
    9336:	443c      	add	r4, r7
    9338:	f818 3b01 	ldrb.w	r3, [r8], #1
    933c:	220a      	movs	r2, #10
    933e:	3b30      	subs	r3, #48	; 0x30
    9340:	4628      	mov	r0, r5
    9342:	f7ff ff6b 	bl	921c <__multadd>
    9346:	45a0      	cmp	r8, r4
    9348:	4601      	mov	r1, r0
    934a:	d1f5      	bne.n	9338 <__s2b+0x78>
    934c:	f1a7 0408 	sub.w	r4, r7, #8
    9350:	444c      	add	r4, r9
    9352:	e7dc      	b.n	930e <__s2b+0x4e>
    9354:	2100      	movs	r1, #0
    9356:	e7cc      	b.n	92f2 <__s2b+0x32>
    9358:	460a      	mov	r2, r1
    935a:	4b03      	ldr	r3, [pc, #12]	; (9368 <__s2b+0xa8>)
    935c:	4803      	ldr	r0, [pc, #12]	; (936c <__s2b+0xac>)
    935e:	21d3      	movs	r1, #211	; 0xd3
    9360:	f000 fe86 	bl	a070 <__assert_func>
    9364:	38e38e39 	.word	0x38e38e39
    9368:	2000089c 	.word	0x2000089c
    936c:	20000a14 	.word	0x20000a14

00009370 <__hi0bits>:
    9370:	0c03      	lsrs	r3, r0, #16
    9372:	041b      	lsls	r3, r3, #16
    9374:	b9d3      	cbnz	r3, 93ac <__hi0bits+0x3c>
    9376:	0400      	lsls	r0, r0, #16
    9378:	2310      	movs	r3, #16
    937a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    937e:	bf04      	itt	eq
    9380:	0200      	lsleq	r0, r0, #8
    9382:	3308      	addeq	r3, #8
    9384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    9388:	bf04      	itt	eq
    938a:	0100      	lsleq	r0, r0, #4
    938c:	3304      	addeq	r3, #4
    938e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    9392:	bf04      	itt	eq
    9394:	0080      	lsleq	r0, r0, #2
    9396:	3302      	addeq	r3, #2
    9398:	2800      	cmp	r0, #0
    939a:	db05      	blt.n	93a8 <__hi0bits+0x38>
    939c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    93a0:	f103 0301 	add.w	r3, r3, #1
    93a4:	bf08      	it	eq
    93a6:	2320      	moveq	r3, #32
    93a8:	4618      	mov	r0, r3
    93aa:	4770      	bx	lr
    93ac:	2300      	movs	r3, #0
    93ae:	e7e4      	b.n	937a <__hi0bits+0xa>

000093b0 <__lo0bits>:
    93b0:	6803      	ldr	r3, [r0, #0]
    93b2:	f013 0207 	ands.w	r2, r3, #7
    93b6:	d008      	beq.n	93ca <__lo0bits+0x1a>
    93b8:	07d9      	lsls	r1, r3, #31
    93ba:	d41f      	bmi.n	93fc <__lo0bits+0x4c>
    93bc:	079a      	lsls	r2, r3, #30
    93be:	d522      	bpl.n	9406 <__lo0bits+0x56>
    93c0:	085b      	lsrs	r3, r3, #1
    93c2:	6003      	str	r3, [r0, #0]
    93c4:	2201      	movs	r2, #1
    93c6:	4610      	mov	r0, r2
    93c8:	4770      	bx	lr
    93ca:	b299      	uxth	r1, r3
    93cc:	b909      	cbnz	r1, 93d2 <__lo0bits+0x22>
    93ce:	0c1b      	lsrs	r3, r3, #16
    93d0:	2210      	movs	r2, #16
    93d2:	b2d9      	uxtb	r1, r3
    93d4:	b909      	cbnz	r1, 93da <__lo0bits+0x2a>
    93d6:	3208      	adds	r2, #8
    93d8:	0a1b      	lsrs	r3, r3, #8
    93da:	0719      	lsls	r1, r3, #28
    93dc:	bf04      	itt	eq
    93de:	091b      	lsreq	r3, r3, #4
    93e0:	3204      	addeq	r2, #4
    93e2:	0799      	lsls	r1, r3, #30
    93e4:	bf04      	itt	eq
    93e6:	089b      	lsreq	r3, r3, #2
    93e8:	3202      	addeq	r2, #2
    93ea:	07d9      	lsls	r1, r3, #31
    93ec:	d403      	bmi.n	93f6 <__lo0bits+0x46>
    93ee:	085b      	lsrs	r3, r3, #1
    93f0:	f102 0201 	add.w	r2, r2, #1
    93f4:	d005      	beq.n	9402 <__lo0bits+0x52>
    93f6:	6003      	str	r3, [r0, #0]
    93f8:	4610      	mov	r0, r2
    93fa:	4770      	bx	lr
    93fc:	2200      	movs	r2, #0
    93fe:	4610      	mov	r0, r2
    9400:	4770      	bx	lr
    9402:	2220      	movs	r2, #32
    9404:	e7df      	b.n	93c6 <__lo0bits+0x16>
    9406:	089b      	lsrs	r3, r3, #2
    9408:	2202      	movs	r2, #2
    940a:	6003      	str	r3, [r0, #0]
    940c:	4610      	mov	r0, r2
    940e:	4770      	bx	lr

00009410 <__i2b>:
    9410:	b538      	push	{r3, r4, r5, lr}
    9412:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9414:	4604      	mov	r4, r0
    9416:	460d      	mov	r5, r1
    9418:	b14b      	cbz	r3, 942e <__i2b+0x1e>
    941a:	6858      	ldr	r0, [r3, #4]
    941c:	b1b0      	cbz	r0, 944c <__i2b+0x3c>
    941e:	6802      	ldr	r2, [r0, #0]
    9420:	605a      	str	r2, [r3, #4]
    9422:	2200      	movs	r2, #0
    9424:	2301      	movs	r3, #1
    9426:	e9c0 3504 	strd	r3, r5, [r0, #16]
    942a:	60c2      	str	r2, [r0, #12]
    942c:	bd38      	pop	{r3, r4, r5, pc}
    942e:	2221      	movs	r2, #33	; 0x21
    9430:	2104      	movs	r1, #4
    9432:	f000 fe3d 	bl	a0b0 <_calloc_r>
    9436:	4603      	mov	r3, r0
    9438:	6460      	str	r0, [r4, #68]	; 0x44
    943a:	2800      	cmp	r0, #0
    943c:	d1ed      	bne.n	941a <__i2b+0xa>
    943e:	4b09      	ldr	r3, [pc, #36]	; (9464 <__i2b+0x54>)
    9440:	4809      	ldr	r0, [pc, #36]	; (9468 <__i2b+0x58>)
    9442:	2200      	movs	r2, #0
    9444:	f240 1145 	movw	r1, #325	; 0x145
    9448:	f000 fe12 	bl	a070 <__assert_func>
    944c:	221c      	movs	r2, #28
    944e:	2101      	movs	r1, #1
    9450:	4620      	mov	r0, r4
    9452:	f000 fe2d 	bl	a0b0 <_calloc_r>
    9456:	2800      	cmp	r0, #0
    9458:	d0f1      	beq.n	943e <__i2b+0x2e>
    945a:	2201      	movs	r2, #1
    945c:	2302      	movs	r3, #2
    945e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    9462:	e7de      	b.n	9422 <__i2b+0x12>
    9464:	2000089c 	.word	0x2000089c
    9468:	20000a14 	.word	0x20000a14

0000946c <__multiply>:
    946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9470:	690e      	ldr	r6, [r1, #16]
    9472:	6915      	ldr	r5, [r2, #16]
    9474:	42ae      	cmp	r6, r5
    9476:	b085      	sub	sp, #20
    9478:	4688      	mov	r8, r1
    947a:	4614      	mov	r4, r2
    947c:	db05      	blt.n	948a <__multiply+0x1e>
    947e:	462a      	mov	r2, r5
    9480:	4623      	mov	r3, r4
    9482:	4635      	mov	r5, r6
    9484:	460c      	mov	r4, r1
    9486:	4616      	mov	r6, r2
    9488:	4698      	mov	r8, r3
    948a:	68a3      	ldr	r3, [r4, #8]
    948c:	6861      	ldr	r1, [r4, #4]
    948e:	19af      	adds	r7, r5, r6
    9490:	42bb      	cmp	r3, r7
    9492:	bfb8      	it	lt
    9494:	3101      	addlt	r1, #1
    9496:	f7ff fe91 	bl	91bc <_Balloc>
    949a:	9001      	str	r0, [sp, #4]
    949c:	2800      	cmp	r0, #0
    949e:	f000 8087 	beq.w	95b0 <__multiply+0x144>
    94a2:	9b01      	ldr	r3, [sp, #4]
    94a4:	f103 0914 	add.w	r9, r3, #20
    94a8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    94ac:	45d1      	cmp	r9, sl
    94ae:	d205      	bcs.n	94bc <__multiply+0x50>
    94b0:	464b      	mov	r3, r9
    94b2:	2200      	movs	r2, #0
    94b4:	f843 2b04 	str.w	r2, [r3], #4
    94b8:	459a      	cmp	sl, r3
    94ba:	d8fb      	bhi.n	94b4 <__multiply+0x48>
    94bc:	f108 0814 	add.w	r8, r8, #20
    94c0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    94c4:	f104 0314 	add.w	r3, r4, #20
    94c8:	45d8      	cmp	r8, fp
    94ca:	461a      	mov	r2, r3
    94cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    94d0:	d25f      	bcs.n	9592 <__multiply+0x126>
    94d2:	1b2b      	subs	r3, r5, r4
    94d4:	3b15      	subs	r3, #21
    94d6:	f023 0303 	bic.w	r3, r3, #3
    94da:	3304      	adds	r3, #4
    94dc:	3415      	adds	r4, #21
    94de:	42a5      	cmp	r5, r4
    94e0:	bf38      	it	cc
    94e2:	2304      	movcc	r3, #4
    94e4:	e9cd a702 	strd	sl, r7, [sp, #8]
    94e8:	46ac      	mov	ip, r5
    94ea:	461f      	mov	r7, r3
    94ec:	4692      	mov	sl, r2
    94ee:	e005      	b.n	94fc <__multiply+0x90>
    94f0:	0c09      	lsrs	r1, r1, #16
    94f2:	d129      	bne.n	9548 <__multiply+0xdc>
    94f4:	45c3      	cmp	fp, r8
    94f6:	f109 0904 	add.w	r9, r9, #4
    94fa:	d948      	bls.n	958e <__multiply+0x122>
    94fc:	f858 1b04 	ldr.w	r1, [r8], #4
    9500:	b28d      	uxth	r5, r1
    9502:	2d00      	cmp	r5, #0
    9504:	d0f4      	beq.n	94f0 <__multiply+0x84>
    9506:	4656      	mov	r6, sl
    9508:	464c      	mov	r4, r9
    950a:	2300      	movs	r3, #0
    950c:	f856 1b04 	ldr.w	r1, [r6], #4
    9510:	6822      	ldr	r2, [r4, #0]
    9512:	fa1f fe81 	uxth.w	lr, r1
    9516:	b290      	uxth	r0, r2
    9518:	0c09      	lsrs	r1, r1, #16
    951a:	fb05 000e 	mla	r0, r5, lr, r0
    951e:	0c12      	lsrs	r2, r2, #16
    9520:	4403      	add	r3, r0
    9522:	fb05 2201 	mla	r2, r5, r1, r2
    9526:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    952a:	b29b      	uxth	r3, r3
    952c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9530:	45b4      	cmp	ip, r6
    9532:	f844 3b04 	str.w	r3, [r4], #4
    9536:	ea4f 4312 	mov.w	r3, r2, lsr #16
    953a:	d8e7      	bhi.n	950c <__multiply+0xa0>
    953c:	f849 3007 	str.w	r3, [r9, r7]
    9540:	f858 1c04 	ldr.w	r1, [r8, #-4]
    9544:	0c09      	lsrs	r1, r1, #16
    9546:	d0d5      	beq.n	94f4 <__multiply+0x88>
    9548:	f8d9 3000 	ldr.w	r3, [r9]
    954c:	4650      	mov	r0, sl
    954e:	461a      	mov	r2, r3
    9550:	464c      	mov	r4, r9
    9552:	2600      	movs	r6, #0
    9554:	8805      	ldrh	r5, [r0, #0]
    9556:	0c12      	lsrs	r2, r2, #16
    9558:	fb01 2205 	mla	r2, r1, r5, r2
    955c:	4416      	add	r6, r2
    955e:	b29b      	uxth	r3, r3
    9560:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    9564:	f844 3b04 	str.w	r3, [r4], #4
    9568:	f850 5b04 	ldr.w	r5, [r0], #4
    956c:	6822      	ldr	r2, [r4, #0]
    956e:	0c2d      	lsrs	r5, r5, #16
    9570:	b293      	uxth	r3, r2
    9572:	fb01 3305 	mla	r3, r1, r5, r3
    9576:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    957a:	4584      	cmp	ip, r0
    957c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    9580:	d8e8      	bhi.n	9554 <__multiply+0xe8>
    9582:	45c3      	cmp	fp, r8
    9584:	f849 3007 	str.w	r3, [r9, r7]
    9588:	f109 0904 	add.w	r9, r9, #4
    958c:	d8b6      	bhi.n	94fc <__multiply+0x90>
    958e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    9592:	2f00      	cmp	r7, #0
    9594:	dc02      	bgt.n	959c <__multiply+0x130>
    9596:	e005      	b.n	95a4 <__multiply+0x138>
    9598:	3f01      	subs	r7, #1
    959a:	d003      	beq.n	95a4 <__multiply+0x138>
    959c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    95a0:	2b00      	cmp	r3, #0
    95a2:	d0f9      	beq.n	9598 <__multiply+0x12c>
    95a4:	9b01      	ldr	r3, [sp, #4]
    95a6:	4618      	mov	r0, r3
    95a8:	611f      	str	r7, [r3, #16]
    95aa:	b005      	add	sp, #20
    95ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95b0:	4b03      	ldr	r3, [pc, #12]	; (95c0 <__multiply+0x154>)
    95b2:	4804      	ldr	r0, [pc, #16]	; (95c4 <__multiply+0x158>)
    95b4:	9a01      	ldr	r2, [sp, #4]
    95b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    95ba:	f000 fd59 	bl	a070 <__assert_func>
    95be:	bf00      	nop
    95c0:	2000089c 	.word	0x2000089c
    95c4:	20000a14 	.word	0x20000a14

000095c8 <__pow5mult>:
    95c8:	f012 0303 	ands.w	r3, r2, #3
    95cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95d0:	4614      	mov	r4, r2
    95d2:	4606      	mov	r6, r0
    95d4:	d132      	bne.n	963c <__pow5mult+0x74>
    95d6:	460d      	mov	r5, r1
    95d8:	10a4      	asrs	r4, r4, #2
    95da:	d020      	beq.n	961e <__pow5mult+0x56>
    95dc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    95e0:	f1b8 0f00 	cmp.w	r8, #0
    95e4:	d033      	beq.n	964e <__pow5mult+0x86>
    95e6:	07e3      	lsls	r3, r4, #31
    95e8:	f04f 0700 	mov.w	r7, #0
    95ec:	d407      	bmi.n	95fe <__pow5mult+0x36>
    95ee:	1064      	asrs	r4, r4, #1
    95f0:	d015      	beq.n	961e <__pow5mult+0x56>
    95f2:	f8d8 0000 	ldr.w	r0, [r8]
    95f6:	b1a8      	cbz	r0, 9624 <__pow5mult+0x5c>
    95f8:	4680      	mov	r8, r0
    95fa:	07e3      	lsls	r3, r4, #31
    95fc:	d5f7      	bpl.n	95ee <__pow5mult+0x26>
    95fe:	4642      	mov	r2, r8
    9600:	4629      	mov	r1, r5
    9602:	4630      	mov	r0, r6
    9604:	f7ff ff32 	bl	946c <__multiply>
    9608:	b1b5      	cbz	r5, 9638 <__pow5mult+0x70>
    960a:	6869      	ldr	r1, [r5, #4]
    960c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    960e:	1064      	asrs	r4, r4, #1
    9610:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    9614:	602a      	str	r2, [r5, #0]
    9616:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    961a:	4605      	mov	r5, r0
    961c:	d1e9      	bne.n	95f2 <__pow5mult+0x2a>
    961e:	4628      	mov	r0, r5
    9620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9624:	4642      	mov	r2, r8
    9626:	4641      	mov	r1, r8
    9628:	4630      	mov	r0, r6
    962a:	f7ff ff1f 	bl	946c <__multiply>
    962e:	f8c8 0000 	str.w	r0, [r8]
    9632:	6007      	str	r7, [r0, #0]
    9634:	4680      	mov	r8, r0
    9636:	e7e0      	b.n	95fa <__pow5mult+0x32>
    9638:	4605      	mov	r5, r0
    963a:	e7d8      	b.n	95ee <__pow5mult+0x26>
    963c:	3b01      	subs	r3, #1
    963e:	4a0f      	ldr	r2, [pc, #60]	; (967c <__pow5mult+0xb4>)
    9640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9644:	2300      	movs	r3, #0
    9646:	f7ff fde9 	bl	921c <__multadd>
    964a:	4605      	mov	r5, r0
    964c:	e7c4      	b.n	95d8 <__pow5mult+0x10>
    964e:	2101      	movs	r1, #1
    9650:	4630      	mov	r0, r6
    9652:	f7ff fdb3 	bl	91bc <_Balloc>
    9656:	4680      	mov	r8, r0
    9658:	b140      	cbz	r0, 966c <__pow5mult+0xa4>
    965a:	2301      	movs	r3, #1
    965c:	f240 2271 	movw	r2, #625	; 0x271
    9660:	e9c0 3204 	strd	r3, r2, [r0, #16]
    9664:	2300      	movs	r3, #0
    9666:	6430      	str	r0, [r6, #64]	; 0x40
    9668:	6003      	str	r3, [r0, #0]
    966a:	e7bc      	b.n	95e6 <__pow5mult+0x1e>
    966c:	4b04      	ldr	r3, [pc, #16]	; (9680 <__pow5mult+0xb8>)
    966e:	4805      	ldr	r0, [pc, #20]	; (9684 <__pow5mult+0xbc>)
    9670:	4642      	mov	r2, r8
    9672:	f240 1145 	movw	r1, #325	; 0x145
    9676:	f000 fcfb 	bl	a070 <__assert_func>
    967a:	bf00      	nop
    967c:	20000ffc 	.word	0x20000ffc
    9680:	2000089c 	.word	0x2000089c
    9684:	20000a14 	.word	0x20000a14

00009688 <__lshift>:
    9688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    968c:	460d      	mov	r5, r1
    968e:	4614      	mov	r4, r2
    9690:	692f      	ldr	r7, [r5, #16]
    9692:	68ab      	ldr	r3, [r5, #8]
    9694:	6849      	ldr	r1, [r1, #4]
    9696:	eb07 1762 	add.w	r7, r7, r2, asr #5
    969a:	1c7e      	adds	r6, r7, #1
    969c:	429e      	cmp	r6, r3
    969e:	4680      	mov	r8, r0
    96a0:	ea4f 1962 	mov.w	r9, r2, asr #5
    96a4:	dd04      	ble.n	96b0 <__lshift+0x28>
    96a6:	005b      	lsls	r3, r3, #1
    96a8:	429e      	cmp	r6, r3
    96aa:	f101 0101 	add.w	r1, r1, #1
    96ae:	dcfa      	bgt.n	96a6 <__lshift+0x1e>
    96b0:	4640      	mov	r0, r8
    96b2:	f7ff fd83 	bl	91bc <_Balloc>
    96b6:	4684      	mov	ip, r0
    96b8:	2800      	cmp	r0, #0
    96ba:	d052      	beq.n	9762 <__lshift+0xda>
    96bc:	f1b9 0f00 	cmp.w	r9, #0
    96c0:	f100 0214 	add.w	r2, r0, #20
    96c4:	dd0e      	ble.n	96e4 <__lshift+0x5c>
    96c6:	f109 0105 	add.w	r1, r9, #5
    96ca:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    96ce:	4613      	mov	r3, r2
    96d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    96d4:	2000      	movs	r0, #0
    96d6:	f843 0b04 	str.w	r0, [r3], #4
    96da:	428b      	cmp	r3, r1
    96dc:	d1fb      	bne.n	96d6 <__lshift+0x4e>
    96de:	f1ae 0314 	sub.w	r3, lr, #20
    96e2:	441a      	add	r2, r3
    96e4:	6929      	ldr	r1, [r5, #16]
    96e6:	f105 0314 	add.w	r3, r5, #20
    96ea:	f014 0e1f 	ands.w	lr, r4, #31
    96ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    96f2:	d02e      	beq.n	9752 <__lshift+0xca>
    96f4:	f1ce 0920 	rsb	r9, lr, #32
    96f8:	4610      	mov	r0, r2
    96fa:	f04f 0a00 	mov.w	sl, #0
    96fe:	681c      	ldr	r4, [r3, #0]
    9700:	fa04 f40e 	lsl.w	r4, r4, lr
    9704:	ea44 040a 	orr.w	r4, r4, sl
    9708:	f840 4b04 	str.w	r4, [r0], #4
    970c:	f853 4b04 	ldr.w	r4, [r3], #4
    9710:	4299      	cmp	r1, r3
    9712:	fa24 fa09 	lsr.w	sl, r4, r9
    9716:	d8f2      	bhi.n	96fe <__lshift+0x76>
    9718:	1b4b      	subs	r3, r1, r5
    971a:	3b15      	subs	r3, #21
    971c:	f023 0303 	bic.w	r3, r3, #3
    9720:	3304      	adds	r3, #4
    9722:	f105 0015 	add.w	r0, r5, #21
    9726:	4281      	cmp	r1, r0
    9728:	bf38      	it	cc
    972a:	2304      	movcc	r3, #4
    972c:	f1ba 0f00 	cmp.w	sl, #0
    9730:	bf18      	it	ne
    9732:	4637      	movne	r7, r6
    9734:	f842 a003 	str.w	sl, [r2, r3]
    9738:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    973c:	686a      	ldr	r2, [r5, #4]
    973e:	f8cc 7010 	str.w	r7, [ip, #16]
    9742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9746:	6029      	str	r1, [r5, #0]
    9748:	4660      	mov	r0, ip
    974a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9752:	3a04      	subs	r2, #4
    9754:	f853 0b04 	ldr.w	r0, [r3], #4
    9758:	f842 0f04 	str.w	r0, [r2, #4]!
    975c:	4299      	cmp	r1, r3
    975e:	d8f9      	bhi.n	9754 <__lshift+0xcc>
    9760:	e7ea      	b.n	9738 <__lshift+0xb0>
    9762:	4b03      	ldr	r3, [pc, #12]	; (9770 <__lshift+0xe8>)
    9764:	4803      	ldr	r0, [pc, #12]	; (9774 <__lshift+0xec>)
    9766:	4662      	mov	r2, ip
    9768:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    976c:	f000 fc80 	bl	a070 <__assert_func>
    9770:	2000089c 	.word	0x2000089c
    9774:	20000a14 	.word	0x20000a14

00009778 <__mcmp>:
    9778:	690b      	ldr	r3, [r1, #16]
    977a:	4684      	mov	ip, r0
    977c:	6900      	ldr	r0, [r0, #16]
    977e:	1ac0      	subs	r0, r0, r3
    9780:	d116      	bne.n	97b0 <__mcmp+0x38>
    9782:	f10c 0c14 	add.w	ip, ip, #20
    9786:	3114      	adds	r1, #20
    9788:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    978c:	b410      	push	{r4}
    978e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9792:	e001      	b.n	9798 <__mcmp+0x20>
    9794:	4594      	cmp	ip, r2
    9796:	d208      	bcs.n	97aa <__mcmp+0x32>
    9798:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    979c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    97a0:	428c      	cmp	r4, r1
    97a2:	d0f7      	beq.n	9794 <__mcmp+0x1c>
    97a4:	d205      	bcs.n	97b2 <__mcmp+0x3a>
    97a6:	f04f 30ff 	mov.w	r0, #4294967295
    97aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    97ae:	4770      	bx	lr
    97b0:	4770      	bx	lr
    97b2:	2001      	movs	r0, #1
    97b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    97b8:	4770      	bx	lr
    97ba:	bf00      	nop

000097bc <__mdiff>:
    97bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97c0:	690f      	ldr	r7, [r1, #16]
    97c2:	6913      	ldr	r3, [r2, #16]
    97c4:	1aff      	subs	r7, r7, r3
    97c6:	2f00      	cmp	r7, #0
    97c8:	460e      	mov	r6, r1
    97ca:	4690      	mov	r8, r2
    97cc:	d17f      	bne.n	98ce <__mdiff+0x112>
    97ce:	f101 0514 	add.w	r5, r1, #20
    97d2:	3214      	adds	r2, #20
    97d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    97d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    97dc:	e001      	b.n	97e2 <__mdiff+0x26>
    97de:	429d      	cmp	r5, r3
    97e0:	d278      	bcs.n	98d4 <__mdiff+0x118>
    97e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    97e6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    97ea:	42a1      	cmp	r1, r4
    97ec:	d0f7      	beq.n	97de <__mdiff+0x22>
    97ee:	d369      	bcc.n	98c4 <__mdiff+0x108>
    97f0:	6871      	ldr	r1, [r6, #4]
    97f2:	f7ff fce3 	bl	91bc <_Balloc>
    97f6:	4681      	mov	r9, r0
    97f8:	2800      	cmp	r0, #0
    97fa:	d077      	beq.n	98ec <__mdiff+0x130>
    97fc:	6935      	ldr	r5, [r6, #16]
    97fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
    9802:	60c7      	str	r7, [r0, #12]
    9804:	f108 0e14 	add.w	lr, r8, #20
    9808:	f106 0014 	add.w	r0, r6, #20
    980c:	f109 0a14 	add.w	sl, r9, #20
    9810:	f106 0110 	add.w	r1, r6, #16
    9814:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    9818:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    981c:	4656      	mov	r6, sl
    981e:	f04f 0c00 	mov.w	ip, #0
    9822:	f85e 4b04 	ldr.w	r4, [lr], #4
    9826:	f851 bf04 	ldr.w	fp, [r1, #4]!
    982a:	b2a3      	uxth	r3, r4
    982c:	fa1c fc8b 	uxtah	ip, ip, fp
    9830:	ebac 0303 	sub.w	r3, ip, r3
    9834:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    9838:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    983c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    9840:	b29b      	uxth	r3, r3
    9842:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9846:	4572      	cmp	r2, lr
    9848:	f846 3b04 	str.w	r3, [r6], #4
    984c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    9850:	d8e7      	bhi.n	9822 <__mdiff+0x66>
    9852:	eba2 0108 	sub.w	r1, r2, r8
    9856:	3915      	subs	r1, #21
    9858:	f108 0815 	add.w	r8, r8, #21
    985c:	4542      	cmp	r2, r8
    985e:	f021 0403 	bic.w	r4, r1, #3
    9862:	f104 0404 	add.w	r4, r4, #4
    9866:	bf38      	it	cc
    9868:	2404      	movcc	r4, #4
    986a:	4420      	add	r0, r4
    986c:	f021 0203 	bic.w	r2, r1, #3
    9870:	bf38      	it	cc
    9872:	2200      	movcc	r2, #0
    9874:	4287      	cmp	r7, r0
    9876:	4452      	add	r2, sl
    9878:	4454      	add	r4, sl
    987a:	d918      	bls.n	98ae <__mdiff+0xf2>
    987c:	4626      	mov	r6, r4
    987e:	4601      	mov	r1, r0
    9880:	f851 3b04 	ldr.w	r3, [r1], #4
    9884:	fa1c fc83 	uxtah	ip, ip, r3
    9888:	ea4f 422c 	mov.w	r2, ip, asr #16
    988c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9890:	fa1f fc8c 	uxth.w	ip, ip
    9894:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9898:	428f      	cmp	r7, r1
    989a:	f846 3b04 	str.w	r3, [r6], #4
    989e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    98a2:	d8ed      	bhi.n	9880 <__mdiff+0xc4>
    98a4:	3f01      	subs	r7, #1
    98a6:	1a3f      	subs	r7, r7, r0
    98a8:	f027 0703 	bic.w	r7, r7, #3
    98ac:	19e2      	adds	r2, r4, r7
    98ae:	b923      	cbnz	r3, 98ba <__mdiff+0xfe>
    98b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    98b4:	3d01      	subs	r5, #1
    98b6:	2b00      	cmp	r3, #0
    98b8:	d0fa      	beq.n	98b0 <__mdiff+0xf4>
    98ba:	f8c9 5010 	str.w	r5, [r9, #16]
    98be:	4648      	mov	r0, r9
    98c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98c4:	4633      	mov	r3, r6
    98c6:	2701      	movs	r7, #1
    98c8:	4646      	mov	r6, r8
    98ca:	4698      	mov	r8, r3
    98cc:	e790      	b.n	97f0 <__mdiff+0x34>
    98ce:	dbf9      	blt.n	98c4 <__mdiff+0x108>
    98d0:	2700      	movs	r7, #0
    98d2:	e78d      	b.n	97f0 <__mdiff+0x34>
    98d4:	2100      	movs	r1, #0
    98d6:	f7ff fc71 	bl	91bc <_Balloc>
    98da:	4681      	mov	r9, r0
    98dc:	b168      	cbz	r0, 98fa <__mdiff+0x13e>
    98de:	2201      	movs	r2, #1
    98e0:	2300      	movs	r3, #0
    98e2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    98e6:	4648      	mov	r0, r9
    98e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ec:	4b06      	ldr	r3, [pc, #24]	; (9908 <__mdiff+0x14c>)
    98ee:	4807      	ldr	r0, [pc, #28]	; (990c <__mdiff+0x150>)
    98f0:	464a      	mov	r2, r9
    98f2:	f240 2145 	movw	r1, #581	; 0x245
    98f6:	f000 fbbb 	bl	a070 <__assert_func>
    98fa:	4b03      	ldr	r3, [pc, #12]	; (9908 <__mdiff+0x14c>)
    98fc:	4803      	ldr	r0, [pc, #12]	; (990c <__mdiff+0x150>)
    98fe:	464a      	mov	r2, r9
    9900:	f240 2137 	movw	r1, #567	; 0x237
    9904:	f000 fbb4 	bl	a070 <__assert_func>
    9908:	2000089c 	.word	0x2000089c
    990c:	20000a14 	.word	0x20000a14

00009910 <__ulp>:
    9910:	b082      	sub	sp, #8
    9912:	ed8d 0b00 	vstr	d0, [sp]
    9916:	4b16      	ldr	r3, [pc, #88]	; (9970 <__ulp+0x60>)
    9918:	9a01      	ldr	r2, [sp, #4]
    991a:	4013      	ands	r3, r2
    991c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    9920:	2b00      	cmp	r3, #0
    9922:	dd06      	ble.n	9932 <__ulp+0x22>
    9924:	2200      	movs	r2, #0
    9926:	4619      	mov	r1, r3
    9928:	4610      	mov	r0, r2
    992a:	ec41 0b10 	vmov	d0, r0, r1
    992e:	b002      	add	sp, #8
    9930:	4770      	bx	lr
    9932:	425b      	negs	r3, r3
    9934:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    9938:	ea4f 5223 	mov.w	r2, r3, asr #20
    993c:	da09      	bge.n	9952 <__ulp+0x42>
    993e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    9942:	4113      	asrs	r3, r2
    9944:	2200      	movs	r2, #0
    9946:	4619      	mov	r1, r3
    9948:	4610      	mov	r0, r2
    994a:	ec41 0b10 	vmov	d0, r0, r1
    994e:	b002      	add	sp, #8
    9950:	4770      	bx	lr
    9952:	f1a2 0314 	sub.w	r3, r2, #20
    9956:	2b1e      	cmp	r3, #30
    9958:	bfda      	itte	le
    995a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    995e:	40da      	lsrle	r2, r3
    9960:	2201      	movgt	r2, #1
    9962:	2300      	movs	r3, #0
    9964:	4619      	mov	r1, r3
    9966:	4610      	mov	r0, r2
    9968:	ec41 0b10 	vmov	d0, r0, r1
    996c:	b002      	add	sp, #8
    996e:	4770      	bx	lr
    9970:	7ff00000 	.word	0x7ff00000

00009974 <__b2d>:
    9974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9976:	6904      	ldr	r4, [r0, #16]
    9978:	f100 0614 	add.w	r6, r0, #20
    997c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    9980:	1f27      	subs	r7, r4, #4
    9982:	f854 5c04 	ldr.w	r5, [r4, #-4]
    9986:	4628      	mov	r0, r5
    9988:	f7ff fcf2 	bl	9370 <__hi0bits>
    998c:	f1c0 0320 	rsb	r3, r0, #32
    9990:	280a      	cmp	r0, #10
    9992:	600b      	str	r3, [r1, #0]
    9994:	dd1b      	ble.n	99ce <__b2d+0x5a>
    9996:	42be      	cmp	r6, r7
    9998:	d20b      	bcs.n	99b2 <__b2d+0x3e>
    999a:	380b      	subs	r0, #11
    999c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    99a0:	d12e      	bne.n	9a00 <__b2d+0x8c>
    99a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    99a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    99aa:	460a      	mov	r2, r1
    99ac:	ec43 2b10 	vmov	d0, r2, r3
    99b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99b2:	f1b0 010b 	subs.w	r1, r0, #11
    99b6:	d0f4      	beq.n	99a2 <__b2d+0x2e>
    99b8:	fa05 f101 	lsl.w	r1, r5, r1
    99bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    99c0:	2100      	movs	r1, #0
    99c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    99c6:	460a      	mov	r2, r1
    99c8:	ec43 2b10 	vmov	d0, r2, r3
    99cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99ce:	f1c0 0c0b 	rsb	ip, r0, #11
    99d2:	fa25 f10c 	lsr.w	r1, r5, ip
    99d6:	42be      	cmp	r6, r7
    99d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    99dc:	bf38      	it	cc
    99de:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    99e2:	f100 0015 	add.w	r0, r0, #21
    99e6:	bf34      	ite	cc
    99e8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    99ec:	2100      	movcs	r1, #0
    99ee:	fa05 f000 	lsl.w	r0, r5, r0
    99f2:	4301      	orrs	r1, r0
    99f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    99f8:	460a      	mov	r2, r1
    99fa:	ec43 2b10 	vmov	d0, r2, r3
    99fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a00:	f1c0 0c20 	rsb	ip, r0, #32
    9a04:	4085      	lsls	r5, r0
    9a06:	fa21 f30c 	lsr.w	r3, r1, ip
    9a0a:	ea45 0703 	orr.w	r7, r5, r3
    9a0e:	f1a4 0508 	sub.w	r5, r4, #8
    9a12:	42ae      	cmp	r6, r5
    9a14:	fa01 f100 	lsl.w	r1, r1, r0
    9a18:	bf3c      	itt	cc
    9a1a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    9a1e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    9a22:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    9a26:	bf38      	it	cc
    9a28:	4301      	orrcc	r1, r0
    9a2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a2e:	460a      	mov	r2, r1
    9a30:	ec43 2b10 	vmov	d0, r2, r3
    9a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a36:	bf00      	nop

00009a38 <__d2b>:
    9a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9a3c:	4688      	mov	r8, r1
    9a3e:	b083      	sub	sp, #12
    9a40:	2101      	movs	r1, #1
    9a42:	ec57 6b10 	vmov	r6, r7, d0
    9a46:	4615      	mov	r5, r2
    9a48:	f7ff fbb8 	bl	91bc <_Balloc>
    9a4c:	4604      	mov	r4, r0
    9a4e:	2800      	cmp	r0, #0
    9a50:	d051      	beq.n	9af6 <__d2b+0xbe>
    9a52:	f3c7 590a 	ubfx	r9, r7, #20, #11
    9a56:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9a5a:	f1b9 0f00 	cmp.w	r9, #0
    9a5e:	d001      	beq.n	9a64 <__d2b+0x2c>
    9a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9a64:	2e00      	cmp	r6, #0
    9a66:	9301      	str	r3, [sp, #4]
    9a68:	d118      	bne.n	9a9c <__d2b+0x64>
    9a6a:	a801      	add	r0, sp, #4
    9a6c:	f7ff fca0 	bl	93b0 <__lo0bits>
    9a70:	9a01      	ldr	r2, [sp, #4]
    9a72:	6162      	str	r2, [r4, #20]
    9a74:	2201      	movs	r2, #1
    9a76:	f100 0320 	add.w	r3, r0, #32
    9a7a:	6122      	str	r2, [r4, #16]
    9a7c:	f1b9 0f00 	cmp.w	r9, #0
    9a80:	d025      	beq.n	9ace <__d2b+0x96>
    9a82:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    9a86:	eb09 0203 	add.w	r2, r9, r3
    9a8a:	4620      	mov	r0, r4
    9a8c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    9a90:	f8c8 2000 	str.w	r2, [r8]
    9a94:	602b      	str	r3, [r5, #0]
    9a96:	b003      	add	sp, #12
    9a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9a9c:	4668      	mov	r0, sp
    9a9e:	9600      	str	r6, [sp, #0]
    9aa0:	f7ff fc86 	bl	93b0 <__lo0bits>
    9aa4:	4603      	mov	r3, r0
    9aa6:	b310      	cbz	r0, 9aee <__d2b+0xb6>
    9aa8:	e9dd 0200 	ldrd	r0, r2, [sp]
    9aac:	f1c3 0120 	rsb	r1, r3, #32
    9ab0:	fa02 f101 	lsl.w	r1, r2, r1
    9ab4:	4301      	orrs	r1, r0
    9ab6:	40da      	lsrs	r2, r3
    9ab8:	6161      	str	r1, [r4, #20]
    9aba:	9201      	str	r2, [sp, #4]
    9abc:	2a00      	cmp	r2, #0
    9abe:	61a2      	str	r2, [r4, #24]
    9ac0:	bf14      	ite	ne
    9ac2:	2202      	movne	r2, #2
    9ac4:	2201      	moveq	r2, #1
    9ac6:	6122      	str	r2, [r4, #16]
    9ac8:	f1b9 0f00 	cmp.w	r9, #0
    9acc:	d1d9      	bne.n	9a82 <__d2b+0x4a>
    9ace:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    9ad2:	f8c8 3000 	str.w	r3, [r8]
    9ad6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    9ada:	6918      	ldr	r0, [r3, #16]
    9adc:	f7ff fc48 	bl	9370 <__hi0bits>
    9ae0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    9ae4:	4620      	mov	r0, r4
    9ae6:	602b      	str	r3, [r5, #0]
    9ae8:	b003      	add	sp, #12
    9aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9aee:	9a00      	ldr	r2, [sp, #0]
    9af0:	6162      	str	r2, [r4, #20]
    9af2:	9a01      	ldr	r2, [sp, #4]
    9af4:	e7e2      	b.n	9abc <__d2b+0x84>
    9af6:	4b03      	ldr	r3, [pc, #12]	; (9b04 <__d2b+0xcc>)
    9af8:	4803      	ldr	r0, [pc, #12]	; (9b08 <__d2b+0xd0>)
    9afa:	4622      	mov	r2, r4
    9afc:	f240 310f 	movw	r1, #783	; 0x30f
    9b00:	f000 fab6 	bl	a070 <__assert_func>
    9b04:	2000089c 	.word	0x2000089c
    9b08:	20000a14 	.word	0x20000a14

00009b0c <__ratio>:
    9b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b0e:	b083      	sub	sp, #12
    9b10:	460e      	mov	r6, r1
    9b12:	4669      	mov	r1, sp
    9b14:	4607      	mov	r7, r0
    9b16:	f7ff ff2d 	bl	9974 <__b2d>
    9b1a:	a901      	add	r1, sp, #4
    9b1c:	4630      	mov	r0, r6
    9b1e:	ec55 4b10 	vmov	r4, r5, d0
    9b22:	eeb0 7b40 	vmov.f64	d7, d0
    9b26:	f7ff ff25 	bl	9974 <__b2d>
    9b2a:	6933      	ldr	r3, [r6, #16]
    9b2c:	693a      	ldr	r2, [r7, #16]
    9b2e:	1ad2      	subs	r2, r2, r3
    9b30:	e9dd 3100 	ldrd	r3, r1, [sp]
    9b34:	1a5b      	subs	r3, r3, r1
    9b36:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	dd09      	ble.n	9b52 <__ratio+0x46>
    9b3e:	ee17 2a90 	vmov	r2, s15
    9b42:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    9b46:	ec45 4b17 	vmov	d7, r4, r5
    9b4a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    9b4e:	b003      	add	sp, #12
    9b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b52:	ee10 2a90 	vmov	r2, s1
    9b56:	ec51 0b10 	vmov	r0, r1, d0
    9b5a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    9b5e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    9b62:	ec41 0b10 	vmov	d0, r0, r1
    9b66:	ee87 0b00 	vdiv.f64	d0, d7, d0
    9b6a:	b003      	add	sp, #12
    9b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b6e:	bf00      	nop

00009b70 <__copybits>:
    9b70:	3901      	subs	r1, #1
    9b72:	1149      	asrs	r1, r1, #5
    9b74:	f101 0c01 	add.w	ip, r1, #1
    9b78:	6911      	ldr	r1, [r2, #16]
    9b7a:	f102 0314 	add.w	r3, r2, #20
    9b7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9b82:	428b      	cmp	r3, r1
    9b84:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    9b88:	d217      	bcs.n	9bba <__copybits+0x4a>
    9b8a:	b510      	push	{r4, lr}
    9b8c:	f1a0 0e04 	sub.w	lr, r0, #4
    9b90:	f853 4b04 	ldr.w	r4, [r3], #4
    9b94:	f84e 4f04 	str.w	r4, [lr, #4]!
    9b98:	4299      	cmp	r1, r3
    9b9a:	d8f9      	bhi.n	9b90 <__copybits+0x20>
    9b9c:	1a8a      	subs	r2, r1, r2
    9b9e:	f1a2 0315 	sub.w	r3, r2, #21
    9ba2:	f023 0303 	bic.w	r3, r3, #3
    9ba6:	3304      	adds	r3, #4
    9ba8:	4418      	add	r0, r3
    9baa:	4584      	cmp	ip, r0
    9bac:	d904      	bls.n	9bb8 <__copybits+0x48>
    9bae:	2300      	movs	r3, #0
    9bb0:	f840 3b04 	str.w	r3, [r0], #4
    9bb4:	4584      	cmp	ip, r0
    9bb6:	d8fb      	bhi.n	9bb0 <__copybits+0x40>
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	4584      	cmp	ip, r0
    9bbc:	d905      	bls.n	9bca <__copybits+0x5a>
    9bbe:	2300      	movs	r3, #0
    9bc0:	f840 3b04 	str.w	r3, [r0], #4
    9bc4:	4584      	cmp	ip, r0
    9bc6:	d8fb      	bhi.n	9bc0 <__copybits+0x50>
    9bc8:	4770      	bx	lr
    9bca:	4770      	bx	lr

00009bcc <__any_on>:
    9bcc:	6903      	ldr	r3, [r0, #16]
    9bce:	114a      	asrs	r2, r1, #5
    9bd0:	4293      	cmp	r3, r2
    9bd2:	f100 0014 	add.w	r0, r0, #20
    9bd6:	da09      	bge.n	9bec <__any_on+0x20>
    9bd8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9bdc:	e002      	b.n	9be4 <__any_on+0x18>
    9bde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    9be2:	b9c2      	cbnz	r2, 9c16 <__any_on+0x4a>
    9be4:	4283      	cmp	r3, r0
    9be6:	d8fa      	bhi.n	9bde <__any_on+0x12>
    9be8:	2000      	movs	r0, #0
    9bea:	4770      	bx	lr
    9bec:	dd10      	ble.n	9c10 <__any_on+0x44>
    9bee:	f011 011f 	ands.w	r1, r1, #31
    9bf2:	d00d      	beq.n	9c10 <__any_on+0x44>
    9bf4:	b410      	push	{r4}
    9bf6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    9bfa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9bfe:	fa24 f201 	lsr.w	r2, r4, r1
    9c02:	408a      	lsls	r2, r1
    9c04:	4294      	cmp	r4, r2
    9c06:	d00c      	beq.n	9c22 <__any_on+0x56>
    9c08:	2001      	movs	r0, #1
    9c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c0e:	4770      	bx	lr
    9c10:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9c14:	e7e6      	b.n	9be4 <__any_on+0x18>
    9c16:	2001      	movs	r0, #1
    9c18:	4770      	bx	lr
    9c1a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    9c1e:	2a00      	cmp	r2, #0
    9c20:	d1f2      	bne.n	9c08 <__any_on+0x3c>
    9c22:	4283      	cmp	r3, r0
    9c24:	d8f9      	bhi.n	9c1a <__any_on+0x4e>
    9c26:	2000      	movs	r0, #0
    9c28:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c2c:	4770      	bx	lr
    9c2e:	bf00      	nop

00009c30 <__ascii_wctomb>:
    9c30:	b149      	cbz	r1, 9c46 <__ascii_wctomb+0x16>
    9c32:	2aff      	cmp	r2, #255	; 0xff
    9c34:	d802      	bhi.n	9c3c <__ascii_wctomb+0xc>
    9c36:	700a      	strb	r2, [r1, #0]
    9c38:	2001      	movs	r0, #1
    9c3a:	4770      	bx	lr
    9c3c:	238a      	movs	r3, #138	; 0x8a
    9c3e:	6003      	str	r3, [r0, #0]
    9c40:	f04f 30ff 	mov.w	r0, #4294967295
    9c44:	4770      	bx	lr
    9c46:	4608      	mov	r0, r1
    9c48:	4770      	bx	lr
    9c4a:	bf00      	nop

00009c4c <fcvtbuf>:
    9c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9c50:	460e      	mov	r6, r1
    9c52:	4926      	ldr	r1, [pc, #152]	; (9cec <fcvtbuf+0xa0>)
    9c54:	b087      	sub	sp, #28
    9c56:	680f      	ldr	r7, [r1, #0]
    9c58:	4604      	mov	r4, r0
    9c5a:	4690      	mov	r8, r2
    9c5c:	461d      	mov	r5, r3
    9c5e:	b353      	cbz	r3, 9cb6 <fcvtbuf+0x6a>
    9c60:	aa05      	add	r2, sp, #20
    9c62:	4633      	mov	r3, r6
    9c64:	9201      	str	r2, [sp, #4]
    9c66:	2103      	movs	r1, #3
    9c68:	4622      	mov	r2, r4
    9c6a:	f8cd 8000 	str.w	r8, [sp]
    9c6e:	4638      	mov	r0, r7
    9c70:	f000 faee 	bl	a250 <_dtoa_r>
    9c74:	9b05      	ldr	r3, [sp, #20]
    9c76:	6832      	ldr	r2, [r6, #0]
    9c78:	4298      	cmp	r0, r3
    9c7a:	4684      	mov	ip, r0
    9c7c:	f1c2 0200 	rsb	r2, r2, #0
    9c80:	4629      	mov	r1, r5
    9c82:	d209      	bcs.n	9c98 <fcvtbuf+0x4c>
    9c84:	1a10      	subs	r0, r2, r0
    9c86:	f81c 3b01 	ldrb.w	r3, [ip], #1
    9c8a:	f801 3b01 	strb.w	r3, [r1], #1
    9c8e:	9b05      	ldr	r3, [sp, #20]
    9c90:	4563      	cmp	r3, ip
    9c92:	eb00 020c 	add.w	r2, r0, ip
    9c96:	d8f6      	bhi.n	9c86 <fcvtbuf+0x3a>
    9c98:	4294      	cmp	r4, r2
    9c9a:	dd24      	ble.n	9ce6 <fcvtbuf+0x9a>
    9c9c:	1aa2      	subs	r2, r4, r2
    9c9e:	440a      	add	r2, r1
    9ca0:	2330      	movs	r3, #48	; 0x30
    9ca2:	f801 3b01 	strb.w	r3, [r1], #1
    9ca6:	4291      	cmp	r1, r2
    9ca8:	d1fb      	bne.n	9ca2 <fcvtbuf+0x56>
    9caa:	2300      	movs	r3, #0
    9cac:	7013      	strb	r3, [r2, #0]
    9cae:	4628      	mov	r0, r5
    9cb0:	b007      	add	sp, #28
    9cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9cb8:	f100 0323 	add.w	r3, r0, #35	; 0x23
    9cbc:	429a      	cmp	r2, r3
    9cbe:	dd01      	ble.n	9cc4 <fcvtbuf+0x78>
    9cc0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    9cc2:	e7cd      	b.n	9c60 <fcvtbuf+0x14>
    9cc4:	f100 0924 	add.w	r9, r0, #36	; 0x24
    9cc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    9cca:	464a      	mov	r2, r9
    9ccc:	4638      	mov	r0, r7
    9cce:	ed8d 0b02 	vstr	d0, [sp, #8]
    9cd2:	f7fc fa3f 	bl	6154 <_realloc_r>
    9cd6:	4605      	mov	r5, r0
    9cd8:	2800      	cmp	r0, #0
    9cda:	d0e8      	beq.n	9cae <fcvtbuf+0x62>
    9cdc:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    9ce0:	ed9d 0b02 	vldr	d0, [sp, #8]
    9ce4:	e7bc      	b.n	9c60 <fcvtbuf+0x14>
    9ce6:	460a      	mov	r2, r1
    9ce8:	e7df      	b.n	9caa <fcvtbuf+0x5e>
    9cea:	bf00      	nop
    9cec:	20001b18 	.word	0x20001b18

00009cf0 <_fclose_r>:
    9cf0:	b570      	push	{r4, r5, r6, lr}
    9cf2:	2900      	cmp	r1, #0
    9cf4:	d04b      	beq.n	9d8e <_fclose_r+0x9e>
    9cf6:	4606      	mov	r6, r0
    9cf8:	460c      	mov	r4, r1
    9cfa:	b110      	cbz	r0, 9d02 <_fclose_r+0x12>
    9cfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9cfe:	2b00      	cmp	r3, #0
    9d00:	d048      	beq.n	9d94 <_fclose_r+0xa4>
    9d02:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9d04:	07d8      	lsls	r0, r3, #31
    9d06:	d534      	bpl.n	9d72 <_fclose_r+0x82>
    9d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d03e      	beq.n	9d8e <_fclose_r+0x9e>
    9d10:	4621      	mov	r1, r4
    9d12:	4630      	mov	r0, r6
    9d14:	f000 f850 	bl	9db8 <__sflush_r>
    9d18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9d1a:	4605      	mov	r5, r0
    9d1c:	b133      	cbz	r3, 9d2c <_fclose_r+0x3c>
    9d1e:	69e1      	ldr	r1, [r4, #28]
    9d20:	4630      	mov	r0, r6
    9d22:	4798      	blx	r3
    9d24:	2800      	cmp	r0, #0
    9d26:	bfb8      	it	lt
    9d28:	f04f 35ff 	movlt.w	r5, #4294967295
    9d2c:	89a3      	ldrh	r3, [r4, #12]
    9d2e:	061a      	lsls	r2, r3, #24
    9d30:	d43c      	bmi.n	9dac <_fclose_r+0xbc>
    9d32:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9d34:	b141      	cbz	r1, 9d48 <_fclose_r+0x58>
    9d36:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9d3a:	4299      	cmp	r1, r3
    9d3c:	d002      	beq.n	9d44 <_fclose_r+0x54>
    9d3e:	4630      	mov	r0, r6
    9d40:	f7fe fd10 	bl	8764 <_free_r>
    9d44:	2300      	movs	r3, #0
    9d46:	6323      	str	r3, [r4, #48]	; 0x30
    9d48:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9d4a:	b121      	cbz	r1, 9d56 <_fclose_r+0x66>
    9d4c:	4630      	mov	r0, r6
    9d4e:	f7fe fd09 	bl	8764 <_free_r>
    9d52:	2300      	movs	r3, #0
    9d54:	6463      	str	r3, [r4, #68]	; 0x44
    9d56:	f7fd fd45 	bl	77e4 <__sfp_lock_acquire>
    9d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9d5c:	2200      	movs	r2, #0
    9d5e:	07db      	lsls	r3, r3, #31
    9d60:	81a2      	strh	r2, [r4, #12]
    9d62:	d51f      	bpl.n	9da4 <_fclose_r+0xb4>
    9d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9d66:	f7fe fa0b 	bl	8180 <__retarget_lock_close_recursive>
    9d6a:	f7fd fd41 	bl	77f0 <__sfp_lock_release>
    9d6e:	4628      	mov	r0, r5
    9d70:	bd70      	pop	{r4, r5, r6, pc}
    9d72:	89a3      	ldrh	r3, [r4, #12]
    9d74:	0599      	lsls	r1, r3, #22
    9d76:	d4cb      	bmi.n	9d10 <_fclose_r+0x20>
    9d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9d7a:	f7fe fa03 	bl	8184 <__retarget_lock_acquire_recursive>
    9d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d82:	2b00      	cmp	r3, #0
    9d84:	d1c4      	bne.n	9d10 <_fclose_r+0x20>
    9d86:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9d88:	f015 0501 	ands.w	r5, r5, #1
    9d8c:	d005      	beq.n	9d9a <_fclose_r+0xaa>
    9d8e:	2500      	movs	r5, #0
    9d90:	4628      	mov	r0, r5
    9d92:	bd70      	pop	{r4, r5, r6, pc}
    9d94:	f7fd fd08 	bl	77a8 <__sinit>
    9d98:	e7b3      	b.n	9d02 <_fclose_r+0x12>
    9d9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9d9c:	f7fe f9f4 	bl	8188 <__retarget_lock_release_recursive>
    9da0:	4628      	mov	r0, r5
    9da2:	bd70      	pop	{r4, r5, r6, pc}
    9da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9da6:	f7fe f9ef 	bl	8188 <__retarget_lock_release_recursive>
    9daa:	e7db      	b.n	9d64 <_fclose_r+0x74>
    9dac:	6921      	ldr	r1, [r4, #16]
    9dae:	4630      	mov	r0, r6
    9db0:	f7fe fcd8 	bl	8764 <_free_r>
    9db4:	e7bd      	b.n	9d32 <_fclose_r+0x42>
    9db6:	bf00      	nop

00009db8 <__sflush_r>:
    9db8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    9dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dc0:	460c      	mov	r4, r1
    9dc2:	0711      	lsls	r1, r2, #28
    9dc4:	4680      	mov	r8, r0
    9dc6:	d447      	bmi.n	9e58 <__sflush_r+0xa0>
    9dc8:	6863      	ldr	r3, [r4, #4]
    9dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    9dce:	2b00      	cmp	r3, #0
    9dd0:	81a2      	strh	r2, [r4, #12]
    9dd2:	dd5e      	ble.n	9e92 <__sflush_r+0xda>
    9dd4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9dd6:	2d00      	cmp	r5, #0
    9dd8:	d058      	beq.n	9e8c <__sflush_r+0xd4>
    9dda:	2300      	movs	r3, #0
    9ddc:	f8d8 6000 	ldr.w	r6, [r8]
    9de0:	f8c8 3000 	str.w	r3, [r8]
    9de4:	b293      	uxth	r3, r2
    9de6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9dea:	d156      	bne.n	9e9a <__sflush_r+0xe2>
    9dec:	2301      	movs	r3, #1
    9dee:	69e1      	ldr	r1, [r4, #28]
    9df0:	4640      	mov	r0, r8
    9df2:	47a8      	blx	r5
    9df4:	1c43      	adds	r3, r0, #1
    9df6:	d067      	beq.n	9ec8 <__sflush_r+0x110>
    9df8:	89a3      	ldrh	r3, [r4, #12]
    9dfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9dfc:	075f      	lsls	r7, r3, #29
    9dfe:	d505      	bpl.n	9e0c <__sflush_r+0x54>
    9e00:	6863      	ldr	r3, [r4, #4]
    9e02:	1ac0      	subs	r0, r0, r3
    9e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9e06:	b10b      	cbz	r3, 9e0c <__sflush_r+0x54>
    9e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9e0a:	1ac0      	subs	r0, r0, r3
    9e0c:	69e1      	ldr	r1, [r4, #28]
    9e0e:	4602      	mov	r2, r0
    9e10:	2300      	movs	r3, #0
    9e12:	4640      	mov	r0, r8
    9e14:	47a8      	blx	r5
    9e16:	1c41      	adds	r1, r0, #1
    9e18:	d141      	bne.n	9e9e <__sflush_r+0xe6>
    9e1a:	f8d8 3000 	ldr.w	r3, [r8]
    9e1e:	2b00      	cmp	r3, #0
    9e20:	d03d      	beq.n	9e9e <__sflush_r+0xe6>
    9e22:	2b1d      	cmp	r3, #29
    9e24:	d001      	beq.n	9e2a <__sflush_r+0x72>
    9e26:	2b16      	cmp	r3, #22
    9e28:	d156      	bne.n	9ed8 <__sflush_r+0x120>
    9e2a:	89a3      	ldrh	r3, [r4, #12]
    9e2c:	6922      	ldr	r2, [r4, #16]
    9e2e:	6022      	str	r2, [r4, #0]
    9e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9e34:	2100      	movs	r1, #0
    9e36:	6061      	str	r1, [r4, #4]
    9e38:	81a3      	strh	r3, [r4, #12]
    9e3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9e3c:	f8c8 6000 	str.w	r6, [r8]
    9e40:	b321      	cbz	r1, 9e8c <__sflush_r+0xd4>
    9e42:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9e46:	4299      	cmp	r1, r3
    9e48:	d002      	beq.n	9e50 <__sflush_r+0x98>
    9e4a:	4640      	mov	r0, r8
    9e4c:	f7fe fc8a 	bl	8764 <_free_r>
    9e50:	2000      	movs	r0, #0
    9e52:	6320      	str	r0, [r4, #48]	; 0x30
    9e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e58:	6926      	ldr	r6, [r4, #16]
    9e5a:	b1be      	cbz	r6, 9e8c <__sflush_r+0xd4>
    9e5c:	b293      	uxth	r3, r2
    9e5e:	6825      	ldr	r5, [r4, #0]
    9e60:	6026      	str	r6, [r4, #0]
    9e62:	079a      	lsls	r2, r3, #30
    9e64:	bf0c      	ite	eq
    9e66:	6963      	ldreq	r3, [r4, #20]
    9e68:	2300      	movne	r3, #0
    9e6a:	1bad      	subs	r5, r5, r6
    9e6c:	60a3      	str	r3, [r4, #8]
    9e6e:	e00b      	b.n	9e88 <__sflush_r+0xd0>
    9e70:	462b      	mov	r3, r5
    9e72:	4632      	mov	r2, r6
    9e74:	69e1      	ldr	r1, [r4, #28]
    9e76:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9e78:	4640      	mov	r0, r8
    9e7a:	47b8      	blx	r7
    9e7c:	f1b0 0c00 	subs.w	ip, r0, #0
    9e80:	eba5 050c 	sub.w	r5, r5, ip
    9e84:	4466      	add	r6, ip
    9e86:	dd17      	ble.n	9eb8 <__sflush_r+0x100>
    9e88:	2d00      	cmp	r5, #0
    9e8a:	dcf1      	bgt.n	9e70 <__sflush_r+0xb8>
    9e8c:	2000      	movs	r0, #0
    9e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9e94:	2b00      	cmp	r3, #0
    9e96:	dc9d      	bgt.n	9dd4 <__sflush_r+0x1c>
    9e98:	e7f8      	b.n	9e8c <__sflush_r+0xd4>
    9e9a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9e9c:	e7ae      	b.n	9dfc <__sflush_r+0x44>
    9e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9ea2:	6922      	ldr	r2, [r4, #16]
    9ea4:	6022      	str	r2, [r4, #0]
    9ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9eaa:	81a3      	strh	r3, [r4, #12]
    9eac:	2200      	movs	r2, #0
    9eae:	04db      	lsls	r3, r3, #19
    9eb0:	6062      	str	r2, [r4, #4]
    9eb2:	d5c2      	bpl.n	9e3a <__sflush_r+0x82>
    9eb4:	6520      	str	r0, [r4, #80]	; 0x50
    9eb6:	e7c0      	b.n	9e3a <__sflush_r+0x82>
    9eb8:	89a3      	ldrh	r3, [r4, #12]
    9eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9ebe:	f04f 30ff 	mov.w	r0, #4294967295
    9ec2:	81a3      	strh	r3, [r4, #12]
    9ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ec8:	f8d8 3000 	ldr.w	r3, [r8]
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d093      	beq.n	9df8 <__sflush_r+0x40>
    9ed0:	2b1d      	cmp	r3, #29
    9ed2:	d006      	beq.n	9ee2 <__sflush_r+0x12a>
    9ed4:	2b16      	cmp	r3, #22
    9ed6:	d004      	beq.n	9ee2 <__sflush_r+0x12a>
    9ed8:	89a3      	ldrh	r3, [r4, #12]
    9eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9ede:	81a3      	strh	r3, [r4, #12]
    9ee0:	e7d5      	b.n	9e8e <__sflush_r+0xd6>
    9ee2:	f8c8 6000 	str.w	r6, [r8]
    9ee6:	e7d1      	b.n	9e8c <__sflush_r+0xd4>

00009ee8 <_fflush_r>:
    9ee8:	b538      	push	{r3, r4, r5, lr}
    9eea:	460c      	mov	r4, r1
    9eec:	4605      	mov	r5, r0
    9eee:	b108      	cbz	r0, 9ef4 <_fflush_r+0xc>
    9ef0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9ef2:	b303      	cbz	r3, 9f36 <_fflush_r+0x4e>
    9ef4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9ef8:	b188      	cbz	r0, 9f1e <_fflush_r+0x36>
    9efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9efc:	07db      	lsls	r3, r3, #31
    9efe:	d401      	bmi.n	9f04 <_fflush_r+0x1c>
    9f00:	0581      	lsls	r1, r0, #22
    9f02:	d50f      	bpl.n	9f24 <_fflush_r+0x3c>
    9f04:	4628      	mov	r0, r5
    9f06:	4621      	mov	r1, r4
    9f08:	f7ff ff56 	bl	9db8 <__sflush_r>
    9f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f0e:	07da      	lsls	r2, r3, #31
    9f10:	4605      	mov	r5, r0
    9f12:	d402      	bmi.n	9f1a <_fflush_r+0x32>
    9f14:	89a3      	ldrh	r3, [r4, #12]
    9f16:	059b      	lsls	r3, r3, #22
    9f18:	d508      	bpl.n	9f2c <_fflush_r+0x44>
    9f1a:	4628      	mov	r0, r5
    9f1c:	bd38      	pop	{r3, r4, r5, pc}
    9f1e:	4605      	mov	r5, r0
    9f20:	4628      	mov	r0, r5
    9f22:	bd38      	pop	{r3, r4, r5, pc}
    9f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f26:	f7fe f92d 	bl	8184 <__retarget_lock_acquire_recursive>
    9f2a:	e7eb      	b.n	9f04 <_fflush_r+0x1c>
    9f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9f2e:	f7fe f92b 	bl	8188 <__retarget_lock_release_recursive>
    9f32:	4628      	mov	r0, r5
    9f34:	bd38      	pop	{r3, r4, r5, pc}
    9f36:	f7fd fc37 	bl	77a8 <__sinit>
    9f3a:	e7db      	b.n	9ef4 <_fflush_r+0xc>

00009f3c <memcmp>:
    9f3c:	2a03      	cmp	r2, #3
    9f3e:	b570      	push	{r4, r5, r6, lr}
    9f40:	d914      	bls.n	9f6c <memcmp+0x30>
    9f42:	ea40 0301 	orr.w	r3, r0, r1
    9f46:	079b      	lsls	r3, r3, #30
    9f48:	d122      	bne.n	9f90 <memcmp+0x54>
    9f4a:	4604      	mov	r4, r0
    9f4c:	460b      	mov	r3, r1
    9f4e:	4619      	mov	r1, r3
    9f50:	4620      	mov	r0, r4
    9f52:	680e      	ldr	r6, [r1, #0]
    9f54:	6805      	ldr	r5, [r0, #0]
    9f56:	42b5      	cmp	r5, r6
    9f58:	f104 0404 	add.w	r4, r4, #4
    9f5c:	f103 0304 	add.w	r3, r3, #4
    9f60:	d116      	bne.n	9f90 <memcmp+0x54>
    9f62:	3a04      	subs	r2, #4
    9f64:	2a03      	cmp	r2, #3
    9f66:	4620      	mov	r0, r4
    9f68:	4619      	mov	r1, r3
    9f6a:	d8f0      	bhi.n	9f4e <memcmp+0x12>
    9f6c:	1e54      	subs	r4, r2, #1
    9f6e:	b19a      	cbz	r2, 9f98 <memcmp+0x5c>
    9f70:	1e42      	subs	r2, r0, #1
    9f72:	3901      	subs	r1, #1
    9f74:	e001      	b.n	9f7a <memcmp+0x3e>
    9f76:	18c3      	adds	r3, r0, r3
    9f78:	d00c      	beq.n	9f94 <memcmp+0x58>
    9f7a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    9f7e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    9f82:	45e6      	cmp	lr, ip
    9f84:	eba4 0302 	sub.w	r3, r4, r2
    9f88:	d0f5      	beq.n	9f76 <memcmp+0x3a>
    9f8a:	ebae 000c 	sub.w	r0, lr, ip
    9f8e:	bd70      	pop	{r4, r5, r6, pc}
    9f90:	1e54      	subs	r4, r2, #1
    9f92:	e7ed      	b.n	9f70 <memcmp+0x34>
    9f94:	4618      	mov	r0, r3
    9f96:	bd70      	pop	{r4, r5, r6, pc}
    9f98:	4610      	mov	r0, r2
    9f9a:	bd70      	pop	{r4, r5, r6, pc}

00009f9c <strnlen>:
    9f9c:	b171      	cbz	r1, 9fbc <strnlen+0x20>
    9f9e:	4603      	mov	r3, r0
    9fa0:	eb00 0c01 	add.w	ip, r0, r1
    9fa4:	e001      	b.n	9faa <strnlen+0xe>
    9fa6:	4563      	cmp	r3, ip
    9fa8:	d006      	beq.n	9fb8 <strnlen+0x1c>
    9faa:	461a      	mov	r2, r3
    9fac:	3301      	adds	r3, #1
    9fae:	7811      	ldrb	r1, [r2, #0]
    9fb0:	2900      	cmp	r1, #0
    9fb2:	d1f8      	bne.n	9fa6 <strnlen+0xa>
    9fb4:	1a10      	subs	r0, r2, r0
    9fb6:	4770      	bx	lr
    9fb8:	1a18      	subs	r0, r3, r0
    9fba:	4770      	bx	lr
    9fbc:	4608      	mov	r0, r1
    9fbe:	4770      	bx	lr

00009fc0 <_localeconv_r>:
    9fc0:	4800      	ldr	r0, [pc, #0]	; (9fc4 <_localeconv_r+0x4>)
    9fc2:	4770      	bx	lr
    9fc4:	20001680 	.word	0x20001680
	...

00009fd0 <memchr>:
    9fd0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9fd4:	2a10      	cmp	r2, #16
    9fd6:	db2b      	blt.n	a030 <memchr+0x60>
    9fd8:	f010 0f07 	tst.w	r0, #7
    9fdc:	d008      	beq.n	9ff0 <memchr+0x20>
    9fde:	f810 3b01 	ldrb.w	r3, [r0], #1
    9fe2:	3a01      	subs	r2, #1
    9fe4:	428b      	cmp	r3, r1
    9fe6:	d02d      	beq.n	a044 <memchr+0x74>
    9fe8:	f010 0f07 	tst.w	r0, #7
    9fec:	b342      	cbz	r2, a040 <memchr+0x70>
    9fee:	d1f6      	bne.n	9fde <memchr+0xe>
    9ff0:	b4f0      	push	{r4, r5, r6, r7}
    9ff2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9ff6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    9ffa:	f022 0407 	bic.w	r4, r2, #7
    9ffe:	f07f 0700 	mvns.w	r7, #0
    a002:	2300      	movs	r3, #0
    a004:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a008:	3c08      	subs	r4, #8
    a00a:	ea85 0501 	eor.w	r5, r5, r1
    a00e:	ea86 0601 	eor.w	r6, r6, r1
    a012:	fa85 f547 	uadd8	r5, r5, r7
    a016:	faa3 f587 	sel	r5, r3, r7
    a01a:	fa86 f647 	uadd8	r6, r6, r7
    a01e:	faa5 f687 	sel	r6, r5, r7
    a022:	b98e      	cbnz	r6, a048 <memchr+0x78>
    a024:	d1ee      	bne.n	a004 <memchr+0x34>
    a026:	bcf0      	pop	{r4, r5, r6, r7}
    a028:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a02c:	f002 0207 	and.w	r2, r2, #7
    a030:	b132      	cbz	r2, a040 <memchr+0x70>
    a032:	f810 3b01 	ldrb.w	r3, [r0], #1
    a036:	3a01      	subs	r2, #1
    a038:	ea83 0301 	eor.w	r3, r3, r1
    a03c:	b113      	cbz	r3, a044 <memchr+0x74>
    a03e:	d1f8      	bne.n	a032 <memchr+0x62>
    a040:	2000      	movs	r0, #0
    a042:	4770      	bx	lr
    a044:	3801      	subs	r0, #1
    a046:	4770      	bx	lr
    a048:	2d00      	cmp	r5, #0
    a04a:	bf06      	itte	eq
    a04c:	4635      	moveq	r5, r6
    a04e:	3803      	subeq	r0, #3
    a050:	3807      	subne	r0, #7
    a052:	f015 0f01 	tst.w	r5, #1
    a056:	d107      	bne.n	a068 <memchr+0x98>
    a058:	3001      	adds	r0, #1
    a05a:	f415 7f80 	tst.w	r5, #256	; 0x100
    a05e:	bf02      	ittt	eq
    a060:	3001      	addeq	r0, #1
    a062:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a066:	3001      	addeq	r0, #1
    a068:	bcf0      	pop	{r4, r5, r6, r7}
    a06a:	3801      	subs	r0, #1
    a06c:	4770      	bx	lr
    a06e:	bf00      	nop

0000a070 <__assert_func>:
    a070:	b500      	push	{lr}
    a072:	4c0b      	ldr	r4, [pc, #44]	; (a0a0 <__assert_func+0x30>)
    a074:	6825      	ldr	r5, [r4, #0]
    a076:	4614      	mov	r4, r2
    a078:	68ee      	ldr	r6, [r5, #12]
    a07a:	461a      	mov	r2, r3
    a07c:	b085      	sub	sp, #20
    a07e:	4603      	mov	r3, r0
    a080:	460d      	mov	r5, r1
    a082:	b14c      	cbz	r4, a098 <__assert_func+0x28>
    a084:	4907      	ldr	r1, [pc, #28]	; (a0a4 <__assert_func+0x34>)
    a086:	9500      	str	r5, [sp, #0]
    a088:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a08c:	4630      	mov	r0, r6
    a08e:	4906      	ldr	r1, [pc, #24]	; (a0a8 <__assert_func+0x38>)
    a090:	f000 ff86 	bl	afa0 <fiprintf>
    a094:	f7fa fbee 	bl	4874 <abort>
    a098:	4904      	ldr	r1, [pc, #16]	; (a0ac <__assert_func+0x3c>)
    a09a:	460c      	mov	r4, r1
    a09c:	e7f3      	b.n	a086 <__assert_func+0x16>
    a09e:	bf00      	nop
    a0a0:	20001b18 	.word	0x20001b18
    a0a4:	2000085c 	.word	0x2000085c
    a0a8:	2000086c 	.word	0x2000086c
    a0ac:	200003cc 	.word	0x200003cc

0000a0b0 <_calloc_r>:
    a0b0:	b538      	push	{r3, r4, r5, lr}
    a0b2:	fba1 1402 	umull	r1, r4, r1, r2
    a0b6:	bb8c      	cbnz	r4, a11c <_calloc_r+0x6c>
    a0b8:	f7fb fd84 	bl	5bc4 <_malloc_r>
    a0bc:	4605      	mov	r5, r0
    a0be:	b1e0      	cbz	r0, a0fa <_calloc_r+0x4a>
    a0c0:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a0c4:	f022 0203 	bic.w	r2, r2, #3
    a0c8:	3a04      	subs	r2, #4
    a0ca:	2a24      	cmp	r2, #36	; 0x24
    a0cc:	d817      	bhi.n	a0fe <_calloc_r+0x4e>
    a0ce:	2a13      	cmp	r2, #19
    a0d0:	d91a      	bls.n	a108 <_calloc_r+0x58>
    a0d2:	2a1b      	cmp	r2, #27
    a0d4:	e9c0 4400 	strd	r4, r4, [r0]
    a0d8:	d91d      	bls.n	a116 <_calloc_r+0x66>
    a0da:	2a24      	cmp	r2, #36	; 0x24
    a0dc:	bf14      	ite	ne
    a0de:	f100 0210 	addne.w	r2, r0, #16
    a0e2:	f100 0218 	addeq.w	r2, r0, #24
    a0e6:	f04f 0300 	mov.w	r3, #0
    a0ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a0ee:	bf04      	itt	eq
    a0f0:	6104      	streq	r4, [r0, #16]
    a0f2:	6144      	streq	r4, [r0, #20]
    a0f4:	e9c2 3300 	strd	r3, r3, [r2]
    a0f8:	6093      	str	r3, [r2, #8]
    a0fa:	4628      	mov	r0, r5
    a0fc:	bd38      	pop	{r3, r4, r5, pc}
    a0fe:	4621      	mov	r1, r4
    a100:	f7fd fc62 	bl	79c8 <memset>
    a104:	4628      	mov	r0, r5
    a106:	bd38      	pop	{r3, r4, r5, pc}
    a108:	4602      	mov	r2, r0
    a10a:	2300      	movs	r3, #0
    a10c:	e9c2 3300 	strd	r3, r3, [r2]
    a110:	6093      	str	r3, [r2, #8]
    a112:	4628      	mov	r0, r5
    a114:	bd38      	pop	{r3, r4, r5, pc}
    a116:	f100 0208 	add.w	r2, r0, #8
    a11a:	e7f6      	b.n	a10a <_calloc_r+0x5a>
    a11c:	f7fe f804 	bl	8128 <__errno>
    a120:	230c      	movs	r3, #12
    a122:	2500      	movs	r5, #0
    a124:	6003      	str	r3, [r0, #0]
    a126:	e7e8      	b.n	a0fa <_calloc_r+0x4a>

0000a128 <quorem>:
    a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a12c:	6903      	ldr	r3, [r0, #16]
    a12e:	690c      	ldr	r4, [r1, #16]
    a130:	42a3      	cmp	r3, r4
    a132:	b083      	sub	sp, #12
    a134:	f2c0 8087 	blt.w	a246 <quorem+0x11e>
    a138:	3c01      	subs	r4, #1
    a13a:	f101 0514 	add.w	r5, r1, #20
    a13e:	00a3      	lsls	r3, r4, #2
    a140:	f100 0814 	add.w	r8, r0, #20
    a144:	9300      	str	r3, [sp, #0]
    a146:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a14a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a14e:	3301      	adds	r3, #1
    a150:	4681      	mov	r9, r0
    a152:	429a      	cmp	r2, r3
    a154:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a158:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a15c:	9001      	str	r0, [sp, #4]
    a15e:	fbb2 f6f3 	udiv	r6, r2, r3
    a162:	d33b      	bcc.n	a1dc <quorem+0xb4>
    a164:	f04f 0c00 	mov.w	ip, #0
    a168:	46ae      	mov	lr, r5
    a16a:	4640      	mov	r0, r8
    a16c:	46e2      	mov	sl, ip
    a16e:	4663      	mov	r3, ip
    a170:	f85e bb04 	ldr.w	fp, [lr], #4
    a174:	6802      	ldr	r2, [r0, #0]
    a176:	fa1f fc8b 	uxth.w	ip, fp
    a17a:	fb06 330c 	mla	r3, r6, ip, r3
    a17e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a182:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    a186:	fb06 cc0b 	mla	ip, r6, fp, ip
    a18a:	b29b      	uxth	r3, r3
    a18c:	ebaa 0303 	sub.w	r3, sl, r3
    a190:	fa1f fa8c 	uxth.w	sl, ip
    a194:	fa13 f382 	uxtah	r3, r3, r2
    a198:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    a19c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    a1a0:	b29b      	uxth	r3, r3
    a1a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a1a6:	4577      	cmp	r7, lr
    a1a8:	f840 3b04 	str.w	r3, [r0], #4
    a1ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
    a1b0:	ea4f 431c 	mov.w	r3, ip, lsr #16
    a1b4:	d2dc      	bcs.n	a170 <quorem+0x48>
    a1b6:	9b00      	ldr	r3, [sp, #0]
    a1b8:	f858 3003 	ldr.w	r3, [r8, r3]
    a1bc:	b973      	cbnz	r3, a1dc <quorem+0xb4>
    a1be:	9b01      	ldr	r3, [sp, #4]
    a1c0:	3b04      	subs	r3, #4
    a1c2:	4598      	cmp	r8, r3
    a1c4:	d304      	bcc.n	a1d0 <quorem+0xa8>
    a1c6:	e007      	b.n	a1d8 <quorem+0xb0>
    a1c8:	4598      	cmp	r8, r3
    a1ca:	f104 34ff 	add.w	r4, r4, #4294967295
    a1ce:	d203      	bcs.n	a1d8 <quorem+0xb0>
    a1d0:	f853 2904 	ldr.w	r2, [r3], #-4
    a1d4:	2a00      	cmp	r2, #0
    a1d6:	d0f7      	beq.n	a1c8 <quorem+0xa0>
    a1d8:	f8c9 4010 	str.w	r4, [r9, #16]
    a1dc:	4648      	mov	r0, r9
    a1de:	f7ff facb 	bl	9778 <__mcmp>
    a1e2:	2800      	cmp	r0, #0
    a1e4:	db2b      	blt.n	a23e <quorem+0x116>
    a1e6:	3601      	adds	r6, #1
    a1e8:	4641      	mov	r1, r8
    a1ea:	2300      	movs	r3, #0
    a1ec:	f855 0b04 	ldr.w	r0, [r5], #4
    a1f0:	f8d1 c000 	ldr.w	ip, [r1]
    a1f4:	b282      	uxth	r2, r0
    a1f6:	1a9a      	subs	r2, r3, r2
    a1f8:	0c03      	lsrs	r3, r0, #16
    a1fa:	fa12 f28c 	uxtah	r2, r2, ip
    a1fe:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    a202:	eb03 4322 	add.w	r3, r3, r2, asr #16
    a206:	b292      	uxth	r2, r2
    a208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a20c:	42af      	cmp	r7, r5
    a20e:	f841 2b04 	str.w	r2, [r1], #4
    a212:	ea4f 4323 	mov.w	r3, r3, asr #16
    a216:	d2e9      	bcs.n	a1ec <quorem+0xc4>
    a218:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a21c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    a220:	b96a      	cbnz	r2, a23e <quorem+0x116>
    a222:	3b04      	subs	r3, #4
    a224:	4598      	cmp	r8, r3
    a226:	d304      	bcc.n	a232 <quorem+0x10a>
    a228:	e007      	b.n	a23a <quorem+0x112>
    a22a:	4598      	cmp	r8, r3
    a22c:	f104 34ff 	add.w	r4, r4, #4294967295
    a230:	d203      	bcs.n	a23a <quorem+0x112>
    a232:	f853 2904 	ldr.w	r2, [r3], #-4
    a236:	2a00      	cmp	r2, #0
    a238:	d0f7      	beq.n	a22a <quorem+0x102>
    a23a:	f8c9 4010 	str.w	r4, [r9, #16]
    a23e:	4630      	mov	r0, r6
    a240:	b003      	add	sp, #12
    a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a246:	2000      	movs	r0, #0
    a248:	b003      	add	sp, #12
    a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a24e:	bf00      	nop

0000a250 <_dtoa_r>:
    a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a254:	ed2d 8b02 	vpush	{d8}
    a258:	b08f      	sub	sp, #60	; 0x3c
    a25a:	ed8d 0b02 	vstr	d0, [sp, #8]
    a25e:	9101      	str	r1, [sp, #4]
    a260:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a262:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    a264:	9305      	str	r3, [sp, #20]
    a266:	ec57 6b10 	vmov	r6, r7, d0
    a26a:	4604      	mov	r4, r0
    a26c:	4693      	mov	fp, r2
    a26e:	b141      	cbz	r1, a282 <_dtoa_r+0x32>
    a270:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a272:	604a      	str	r2, [r1, #4]
    a274:	2301      	movs	r3, #1
    a276:	4093      	lsls	r3, r2
    a278:	608b      	str	r3, [r1, #8]
    a27a:	f7fe ffc5 	bl	9208 <_Bfree>
    a27e:	2300      	movs	r3, #0
    a280:	63a3      	str	r3, [r4, #56]	; 0x38
    a282:	f1b7 0800 	subs.w	r8, r7, #0
    a286:	bfb4      	ite	lt
    a288:	2301      	movlt	r3, #1
    a28a:	2300      	movge	r3, #0
    a28c:	602b      	str	r3, [r5, #0]
    a28e:	4bbe      	ldr	r3, [pc, #760]	; (a588 <_dtoa_r+0x338>)
    a290:	bfbc      	itt	lt
    a292:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    a296:	f8cd 800c 	strlt.w	r8, [sp, #12]
    a29a:	ea33 0308 	bics.w	r3, r3, r8
    a29e:	f000 809f 	beq.w	a3e0 <_dtoa_r+0x190>
    a2a2:	ed9d 8b02 	vldr	d8, [sp, #8]
    a2a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2ae:	d111      	bne.n	a2d4 <_dtoa_r+0x84>
    a2b0:	9a05      	ldr	r2, [sp, #20]
    a2b2:	2301      	movs	r3, #1
    a2b4:	6013      	str	r3, [r2, #0]
    a2b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a2b8:	2b00      	cmp	r3, #0
    a2ba:	f000 823f 	beq.w	a73c <_dtoa_r+0x4ec>
    a2be:	4bb3      	ldr	r3, [pc, #716]	; (a58c <_dtoa_r+0x33c>)
    a2c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a2c2:	6013      	str	r3, [r2, #0]
    a2c4:	3b01      	subs	r3, #1
    a2c6:	9300      	str	r3, [sp, #0]
    a2c8:	9800      	ldr	r0, [sp, #0]
    a2ca:	b00f      	add	sp, #60	; 0x3c
    a2cc:	ecbd 8b02 	vpop	{d8}
    a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2d4:	aa0c      	add	r2, sp, #48	; 0x30
    a2d6:	a90d      	add	r1, sp, #52	; 0x34
    a2d8:	4620      	mov	r0, r4
    a2da:	eeb0 0b48 	vmov.f64	d0, d8
    a2de:	f7ff fbab 	bl	9a38 <__d2b>
    a2e2:	ea5f 5318 	movs.w	r3, r8, lsr #20
    a2e6:	4605      	mov	r5, r0
    a2e8:	f040 8092 	bne.w	a410 <_dtoa_r+0x1c0>
    a2ec:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    a2f0:	440b      	add	r3, r1
    a2f2:	f203 4232 	addw	r2, r3, #1074	; 0x432
    a2f6:	2a20      	cmp	r2, #32
    a2f8:	f340 82fa 	ble.w	a8f0 <_dtoa_r+0x6a0>
    a2fc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    a300:	fa08 f802 	lsl.w	r8, r8, r2
    a304:	f203 4212 	addw	r2, r3, #1042	; 0x412
    a308:	40d6      	lsrs	r6, r2
    a30a:	ea48 0206 	orr.w	r2, r8, r6
    a30e:	ee07 2a10 	vmov	s14, r2
    a312:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    a316:	1e58      	subs	r0, r3, #1
    a318:	ee17 6a90 	vmov	r6, s15
    a31c:	ec53 2b17 	vmov	r2, r3, d7
    a320:	f04f 0a01 	mov.w	sl, #1
    a324:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    a328:	ed9f 3b91 	vldr	d3, [pc, #580]	; a570 <_dtoa_r+0x320>
    a32c:	ed9f 7b92 	vldr	d7, [pc, #584]	; a578 <_dtoa_r+0x328>
    a330:	ed9f 5b93 	vldr	d5, [pc, #588]	; a580 <_dtoa_r+0x330>
    a334:	ee06 0a90 	vmov	s13, r0
    a338:	ec43 2b12 	vmov	d2, r2, r3
    a33c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    a340:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    a344:	ee32 6b46 	vsub.f64	d6, d2, d6
    a348:	eea6 7b03 	vfma.f64	d7, d6, d3
    a34c:	eea4 7b05 	vfma.f64	d7, d4, d5
    a350:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a354:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a35c:	ee16 7a90 	vmov	r7, s13
    a360:	d508      	bpl.n	a374 <_dtoa_r+0x124>
    a362:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    a366:	eeb4 6b47 	vcmp.f64	d6, d7
    a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a36e:	bf18      	it	ne
    a370:	f107 37ff 	addne.w	r7, r7, #4294967295
    a374:	2f16      	cmp	r7, #22
    a376:	f200 8145 	bhi.w	a604 <_dtoa_r+0x3b4>
    a37a:	4b85      	ldr	r3, [pc, #532]	; (a590 <_dtoa_r+0x340>)
    a37c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a380:	ed93 7b00 	vldr	d7, [r3]
    a384:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a38c:	d557      	bpl.n	a43e <_dtoa_r+0x1ee>
    a38e:	1a09      	subs	r1, r1, r0
    a390:	2300      	movs	r3, #0
    a392:	f1b1 0801 	subs.w	r8, r1, #1
    a396:	f107 37ff 	add.w	r7, r7, #4294967295
    a39a:	930a      	str	r3, [sp, #40]	; 0x28
    a39c:	f100 8139 	bmi.w	a612 <_dtoa_r+0x3c2>
    a3a0:	2300      	movs	r3, #0
    a3a2:	9306      	str	r3, [sp, #24]
    a3a4:	2f00      	cmp	r7, #0
    a3a6:	da52      	bge.n	a44e <_dtoa_r+0x1fe>
    a3a8:	9b06      	ldr	r3, [sp, #24]
    a3aa:	9704      	str	r7, [sp, #16]
    a3ac:	1bdb      	subs	r3, r3, r7
    a3ae:	9306      	str	r3, [sp, #24]
    a3b0:	427b      	negs	r3, r7
    a3b2:	9308      	str	r3, [sp, #32]
    a3b4:	9b01      	ldr	r3, [sp, #4]
    a3b6:	2b09      	cmp	r3, #9
    a3b8:	f04f 0700 	mov.w	r7, #0
    a3bc:	d84e      	bhi.n	a45c <_dtoa_r+0x20c>
    a3be:	2b05      	cmp	r3, #5
    a3c0:	f340 829d 	ble.w	a8fe <_dtoa_r+0x6ae>
    a3c4:	3b04      	subs	r3, #4
    a3c6:	9301      	str	r3, [sp, #4]
    a3c8:	2600      	movs	r6, #0
    a3ca:	9b01      	ldr	r3, [sp, #4]
    a3cc:	1e9a      	subs	r2, r3, #2
    a3ce:	2a03      	cmp	r2, #3
    a3d0:	f200 8125 	bhi.w	a61e <_dtoa_r+0x3ce>
    a3d4:	e8df f012 	tbh	[pc, r2, lsl #1]
    a3d8:	03a703aa 	.word	0x03a703aa
    a3dc:	037e039d 	.word	0x037e039d
    a3e0:	9a05      	ldr	r2, [sp, #20]
    a3e2:	f3c8 0813 	ubfx	r8, r8, #0, #20
    a3e6:	f242 730f 	movw	r3, #9999	; 0x270f
    a3ea:	ea58 0806 	orrs.w	r8, r8, r6
    a3ee:	6013      	str	r3, [r2, #0]
    a3f0:	d11e      	bne.n	a430 <_dtoa_r+0x1e0>
    a3f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	f000 8591 	beq.w	af1c <_dtoa_r+0xccc>
    a3fa:	4b66      	ldr	r3, [pc, #408]	; (a594 <_dtoa_r+0x344>)
    a3fc:	9300      	str	r3, [sp, #0]
    a3fe:	3308      	adds	r3, #8
    a400:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a402:	9800      	ldr	r0, [sp, #0]
    a404:	6013      	str	r3, [r2, #0]
    a406:	b00f      	add	sp, #60	; 0x3c
    a408:	ecbd 8b02 	vpop	{d8}
    a40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a410:	ee18 6a90 	vmov	r6, s17
    a414:	f3c6 0613 	ubfx	r6, r6, #0, #20
    a418:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    a41c:	ec53 2b18 	vmov	r2, r3, d8
    a420:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    a424:	990c      	ldr	r1, [sp, #48]	; 0x30
    a426:	f04f 0a00 	mov.w	sl, #0
    a42a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    a42e:	e77b      	b.n	a328 <_dtoa_r+0xd8>
    a430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a432:	2b00      	cmp	r3, #0
    a434:	f040 833b 	bne.w	aaae <_dtoa_r+0x85e>
    a438:	4b57      	ldr	r3, [pc, #348]	; (a598 <_dtoa_r+0x348>)
    a43a:	9300      	str	r3, [sp, #0]
    a43c:	e744      	b.n	a2c8 <_dtoa_r+0x78>
    a43e:	1a09      	subs	r1, r1, r0
    a440:	2300      	movs	r3, #0
    a442:	f1b1 0801 	subs.w	r8, r1, #1
    a446:	930a      	str	r3, [sp, #40]	; 0x28
    a448:	f100 80e3 	bmi.w	a612 <_dtoa_r+0x3c2>
    a44c:	9306      	str	r3, [sp, #24]
    a44e:	2300      	movs	r3, #0
    a450:	9308      	str	r3, [sp, #32]
    a452:	9b01      	ldr	r3, [sp, #4]
    a454:	9704      	str	r7, [sp, #16]
    a456:	2b09      	cmp	r3, #9
    a458:	44b8      	add	r8, r7
    a45a:	d9b0      	bls.n	a3be <_dtoa_r+0x16e>
    a45c:	2300      	movs	r3, #0
    a45e:	2601      	movs	r6, #1
    a460:	9301      	str	r3, [sp, #4]
    a462:	9607      	str	r6, [sp, #28]
    a464:	f04f 39ff 	mov.w	r9, #4294967295
    a468:	469b      	mov	fp, r3
    a46a:	2100      	movs	r1, #0
    a46c:	63e1      	str	r1, [r4, #60]	; 0x3c
    a46e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    a472:	4620      	mov	r0, r4
    a474:	f7fe fea2 	bl	91bc <_Balloc>
    a478:	9000      	str	r0, [sp, #0]
    a47a:	2800      	cmp	r0, #0
    a47c:	f000 8540 	beq.w	af00 <_dtoa_r+0xcb0>
    a480:	9b00      	ldr	r3, [sp, #0]
    a482:	63a3      	str	r3, [r4, #56]	; 0x38
    a484:	f1b9 0f0e 	cmp.w	r9, #14
    a488:	f200 80dc 	bhi.w	a644 <_dtoa_r+0x3f4>
    a48c:	2e00      	cmp	r6, #0
    a48e:	f000 80d9 	beq.w	a644 <_dtoa_r+0x3f4>
    a492:	9b04      	ldr	r3, [sp, #16]
    a494:	2b00      	cmp	r3, #0
    a496:	f340 83de 	ble.w	ac56 <_dtoa_r+0xa06>
    a49a:	4a3d      	ldr	r2, [pc, #244]	; (a590 <_dtoa_r+0x340>)
    a49c:	f003 010f 	and.w	r1, r3, #15
    a4a0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a4a4:	ed92 7b00 	vldr	d7, [r2]
    a4a8:	111a      	asrs	r2, r3, #4
    a4aa:	05db      	lsls	r3, r3, #23
    a4ac:	f140 8382 	bpl.w	abb4 <_dtoa_r+0x964>
    a4b0:	493a      	ldr	r1, [pc, #232]	; (a59c <_dtoa_r+0x34c>)
    a4b2:	ed91 6b08 	vldr	d6, [r1, #32]
    a4b6:	f002 020f 	and.w	r2, r2, #15
    a4ba:	2003      	movs	r0, #3
    a4bc:	ee88 5b06 	vdiv.f64	d5, d8, d6
    a4c0:	b15a      	cbz	r2, a4da <_dtoa_r+0x28a>
    a4c2:	4936      	ldr	r1, [pc, #216]	; (a59c <_dtoa_r+0x34c>)
    a4c4:	07d6      	lsls	r6, r2, #31
    a4c6:	d504      	bpl.n	a4d2 <_dtoa_r+0x282>
    a4c8:	ed91 6b00 	vldr	d6, [r1]
    a4cc:	3001      	adds	r0, #1
    a4ce:	ee27 7b06 	vmul.f64	d7, d7, d6
    a4d2:	1052      	asrs	r2, r2, #1
    a4d4:	f101 0108 	add.w	r1, r1, #8
    a4d8:	d1f4      	bne.n	a4c4 <_dtoa_r+0x274>
    a4da:	ee85 6b07 	vdiv.f64	d6, d5, d7
    a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4e0:	b13b      	cbz	r3, a4f2 <_dtoa_r+0x2a2>
    a4e2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a4e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a4ee:	f100 84ae 	bmi.w	ae4e <_dtoa_r+0xbfe>
    a4f2:	ee07 0a90 	vmov	s15, r0
    a4f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    a4fa:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    a4fe:	eea5 7b06 	vfma.f64	d7, d5, d6
    a502:	ee17 2a90 	vmov	r2, s15
    a506:	ec51 0b17 	vmov	r0, r1, d7
    a50a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    a50e:	f1b9 0f00 	cmp.w	r9, #0
    a512:	f000 8388 	beq.w	ac26 <_dtoa_r+0x9d6>
    a516:	9e04      	ldr	r6, [sp, #16]
    a518:	464a      	mov	r2, r9
    a51a:	9b07      	ldr	r3, [sp, #28]
    a51c:	2b00      	cmp	r3, #0
    a51e:	f000 8447 	beq.w	adb0 <_dtoa_r+0xb60>
    a522:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    a526:	4b1a      	ldr	r3, [pc, #104]	; (a590 <_dtoa_r+0x340>)
    a528:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    a52c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    a530:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    a534:	ee36 7b47 	vsub.f64	d7, d6, d7
    a538:	ed1c 6b02 	vldr	d6, [ip, #-8]
    a53c:	ee83 5b06 	vdiv.f64	d5, d3, d6
    a540:	ec41 0b16 	vmov	d6, r0, r1
    a544:	ee14 0a90 	vmov	r0, s9
    a548:	ee35 5b46 	vsub.f64	d5, d5, d6
    a54c:	9900      	ldr	r1, [sp, #0]
    a54e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a552:	3030      	adds	r0, #48	; 0x30
    a554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a558:	f801 0b01 	strb.w	r0, [r1], #1
    a55c:	f300 84ac 	bgt.w	aeb8 <_dtoa_r+0xc68>
    a560:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    a564:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a568:	f04f 0c00 	mov.w	ip, #0
    a56c:	e031      	b.n	a5d2 <_dtoa_r+0x382>
    a56e:	bf00      	nop
    a570:	636f4361 	.word	0x636f4361
    a574:	3fd287a7 	.word	0x3fd287a7
    a578:	8b60c8b3 	.word	0x8b60c8b3
    a57c:	3fc68a28 	.word	0x3fc68a28
    a580:	509f79fb 	.word	0x509f79fb
    a584:	3fd34413 	.word	0x3fd34413
    a588:	7ff00000 	.word	0x7ff00000
    a58c:	20000fcd 	.word	0x20000fcd
    a590:	200002a8 	.word	0x200002a8
    a594:	20000b9c 	.word	0x20000b9c
    a598:	20000ba8 	.word	0x20000ba8
    a59c:	20000280 	.word	0x20000280
    a5a0:	f10c 0c01 	add.w	ip, ip, #1
    a5a4:	4594      	cmp	ip, r2
    a5a6:	da4d      	bge.n	a644 <_dtoa_r+0x3f4>
    a5a8:	ee27 7b04 	vmul.f64	d7, d7, d4
    a5ac:	ee25 5b04 	vmul.f64	d5, d5, d4
    a5b0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a5b4:	ee16 3a90 	vmov	r3, s13
    a5b8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    a5bc:	3330      	adds	r3, #48	; 0x30
    a5be:	ee37 7b43 	vsub.f64	d7, d7, d3
    a5c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5ca:	f801 3b01 	strb.w	r3, [r1], #1
    a5ce:	f100 8473 	bmi.w	aeb8 <_dtoa_r+0xc68>
    a5d2:	ee32 6b47 	vsub.f64	d6, d2, d7
    a5d6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5de:	d5df      	bpl.n	a5a0 <_dtoa_r+0x350>
    a5e0:	9a00      	ldr	r2, [sp, #0]
    a5e2:	9604      	str	r6, [sp, #16]
    a5e4:	e002      	b.n	a5ec <_dtoa_r+0x39c>
    a5e6:	428a      	cmp	r2, r1
    a5e8:	f000 8450 	beq.w	ae8c <_dtoa_r+0xc3c>
    a5ec:	4689      	mov	r9, r1
    a5ee:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a5f2:	2b39      	cmp	r3, #57	; 0x39
    a5f4:	d0f7      	beq.n	a5e6 <_dtoa_r+0x396>
    a5f6:	3301      	adds	r3, #1
    a5f8:	b2db      	uxtb	r3, r3
    a5fa:	700b      	strb	r3, [r1, #0]
    a5fc:	9b04      	ldr	r3, [sp, #16]
    a5fe:	3301      	adds	r3, #1
    a600:	9304      	str	r3, [sp, #16]
    a602:	e155      	b.n	a8b0 <_dtoa_r+0x660>
    a604:	1a09      	subs	r1, r1, r0
    a606:	2301      	movs	r3, #1
    a608:	f1b1 0801 	subs.w	r8, r1, #1
    a60c:	930a      	str	r3, [sp, #40]	; 0x28
    a60e:	f57f aec7 	bpl.w	a3a0 <_dtoa_r+0x150>
    a612:	f1c1 0301 	rsb	r3, r1, #1
    a616:	9306      	str	r3, [sp, #24]
    a618:	f04f 0800 	mov.w	r8, #0
    a61c:	e6c2      	b.n	a3a4 <_dtoa_r+0x154>
    a61e:	2600      	movs	r6, #0
    a620:	63e6      	str	r6, [r4, #60]	; 0x3c
    a622:	4631      	mov	r1, r6
    a624:	4620      	mov	r0, r4
    a626:	f7fe fdc9 	bl	91bc <_Balloc>
    a62a:	9000      	str	r0, [sp, #0]
    a62c:	2800      	cmp	r0, #0
    a62e:	f000 8467 	beq.w	af00 <_dtoa_r+0xcb0>
    a632:	9b00      	ldr	r3, [sp, #0]
    a634:	63a3      	str	r3, [r4, #56]	; 0x38
    a636:	f04f 33ff 	mov.w	r3, #4294967295
    a63a:	930b      	str	r3, [sp, #44]	; 0x2c
    a63c:	4699      	mov	r9, r3
    a63e:	2301      	movs	r3, #1
    a640:	46b3      	mov	fp, r6
    a642:	9307      	str	r3, [sp, #28]
    a644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a646:	2a00      	cmp	r2, #0
    a648:	db55      	blt.n	a6f6 <_dtoa_r+0x4a6>
    a64a:	9904      	ldr	r1, [sp, #16]
    a64c:	290e      	cmp	r1, #14
    a64e:	dc52      	bgt.n	a6f6 <_dtoa_r+0x4a6>
    a650:	4bb7      	ldr	r3, [pc, #732]	; (a930 <_dtoa_r+0x6e0>)
    a652:	f1bb 0f00 	cmp.w	fp, #0
    a656:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a65a:	ed93 6b00 	vldr	d6, [r3]
    a65e:	da15      	bge.n	a68c <_dtoa_r+0x43c>
    a660:	f1b9 0f00 	cmp.w	r9, #0
    a664:	dc12      	bgt.n	a68c <_dtoa_r+0x43c>
    a666:	f040 82f2 	bne.w	ac4e <_dtoa_r+0x9fe>
    a66a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a66e:	ee26 7b07 	vmul.f64	d7, d6, d7
    a672:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a67a:	46ca      	mov	sl, r9
    a67c:	464e      	mov	r6, r9
    a67e:	f200 826d 	bhi.w	ab5c <_dtoa_r+0x90c>
    a682:	f8dd 8000 	ldr.w	r8, [sp]
    a686:	ea6f 0b0b 	mvn.w	fp, fp
    a68a:	e270      	b.n	ab6e <_dtoa_r+0x91e>
    a68c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a690:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a694:	9900      	ldr	r1, [sp, #0]
    a696:	ee17 3a10 	vmov	r3, s14
    a69a:	f1b9 0f01 	cmp.w	r9, #1
    a69e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a6a2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a6a6:	f801 3b01 	strb.w	r3, [r1], #1
    a6aa:	eea5 8b46 	vfms.f64	d8, d5, d6
    a6ae:	f000 8334 	beq.w	ad1a <_dtoa_r+0xaca>
    a6b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a6b6:	2301      	movs	r3, #1
    a6b8:	e011      	b.n	a6de <_dtoa_r+0x48e>
    a6ba:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a6be:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a6c2:	3301      	adds	r3, #1
    a6c4:	ee17 2a10 	vmov	r2, s14
    a6c8:	454b      	cmp	r3, r9
    a6ca:	f102 0230 	add.w	r2, r2, #48	; 0x30
    a6ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a6d2:	f801 2b01 	strb.w	r2, [r1], #1
    a6d6:	eea5 8b46 	vfms.f64	d8, d5, d6
    a6da:	f000 831e 	beq.w	ad1a <_dtoa_r+0xaca>
    a6de:	ee28 8b04 	vmul.f64	d8, d8, d4
    a6e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6ea:	d1e6      	bne.n	a6ba <_dtoa_r+0x46a>
    a6ec:	9b04      	ldr	r3, [sp, #16]
    a6ee:	3301      	adds	r3, #1
    a6f0:	9304      	str	r3, [sp, #16]
    a6f2:	4689      	mov	r9, r1
    a6f4:	e0dc      	b.n	a8b0 <_dtoa_r+0x660>
    a6f6:	9b07      	ldr	r3, [sp, #28]
    a6f8:	b343      	cbz	r3, a74c <_dtoa_r+0x4fc>
    a6fa:	9b01      	ldr	r3, [sp, #4]
    a6fc:	2b01      	cmp	r3, #1
    a6fe:	f340 8276 	ble.w	abee <_dtoa_r+0x99e>
    a702:	9b08      	ldr	r3, [sp, #32]
    a704:	f109 3aff 	add.w	sl, r9, #4294967295
    a708:	4553      	cmp	r3, sl
    a70a:	f280 823f 	bge.w	ab8c <_dtoa_r+0x93c>
    a70e:	9b08      	ldr	r3, [sp, #32]
    a710:	f8cd a020 	str.w	sl, [sp, #32]
    a714:	ebaa 0203 	sub.w	r2, sl, r3
    a718:	4417      	add	r7, r2
    a71a:	f04f 0a00 	mov.w	sl, #0
    a71e:	f1b9 0f00 	cmp.w	r9, #0
    a722:	f2c0 8325 	blt.w	ad70 <_dtoa_r+0xb20>
    a726:	9b06      	ldr	r3, [sp, #24]
    a728:	9309      	str	r3, [sp, #36]	; 0x24
    a72a:	444b      	add	r3, r9
    a72c:	44c8      	add	r8, r9
    a72e:	9306      	str	r3, [sp, #24]
    a730:	2101      	movs	r1, #1
    a732:	4620      	mov	r0, r4
    a734:	f7fe fe6c 	bl	9410 <__i2b>
    a738:	4606      	mov	r6, r0
    a73a:	e00c      	b.n	a756 <_dtoa_r+0x506>
    a73c:	4b7d      	ldr	r3, [pc, #500]	; (a934 <_dtoa_r+0x6e4>)
    a73e:	9300      	str	r3, [sp, #0]
    a740:	9800      	ldr	r0, [sp, #0]
    a742:	b00f      	add	sp, #60	; 0x3c
    a744:	ecbd 8b02 	vpop	{d8}
    a748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a74c:	9b06      	ldr	r3, [sp, #24]
    a74e:	f8dd a020 	ldr.w	sl, [sp, #32]
    a752:	9e07      	ldr	r6, [sp, #28]
    a754:	9309      	str	r3, [sp, #36]	; 0x24
    a756:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a758:	b16b      	cbz	r3, a776 <_dtoa_r+0x526>
    a75a:	f1b8 0f00 	cmp.w	r8, #0
    a75e:	dd0a      	ble.n	a776 <_dtoa_r+0x526>
    a760:	4543      	cmp	r3, r8
    a762:	9906      	ldr	r1, [sp, #24]
    a764:	461a      	mov	r2, r3
    a766:	bfa8      	it	ge
    a768:	4642      	movge	r2, r8
    a76a:	1a89      	subs	r1, r1, r2
    a76c:	1a9b      	subs	r3, r3, r2
    a76e:	9106      	str	r1, [sp, #24]
    a770:	9309      	str	r3, [sp, #36]	; 0x24
    a772:	eba8 0802 	sub.w	r8, r8, r2
    a776:	9b08      	ldr	r3, [sp, #32]
    a778:	b163      	cbz	r3, a794 <_dtoa_r+0x544>
    a77a:	9b07      	ldr	r3, [sp, #28]
    a77c:	2b00      	cmp	r3, #0
    a77e:	f000 82a7 	beq.w	acd0 <_dtoa_r+0xa80>
    a782:	f1ba 0f00 	cmp.w	sl, #0
    a786:	f300 8204 	bgt.w	ab92 <_dtoa_r+0x942>
    a78a:	9b08      	ldr	r3, [sp, #32]
    a78c:	ebb3 020a 	subs.w	r2, r3, sl
    a790:	f040 82ff 	bne.w	ad92 <_dtoa_r+0xb42>
    a794:	2101      	movs	r1, #1
    a796:	4620      	mov	r0, r4
    a798:	f7fe fe3a 	bl	9410 <__i2b>
    a79c:	2f00      	cmp	r7, #0
    a79e:	4682      	mov	sl, r0
    a7a0:	f300 80af 	bgt.w	a902 <_dtoa_r+0x6b2>
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	2b01      	cmp	r3, #1
    a7a8:	f340 8187 	ble.w	aaba <_dtoa_r+0x86a>
    a7ac:	2300      	movs	r3, #0
    a7ae:	9308      	str	r3, [sp, #32]
    a7b0:	2001      	movs	r0, #1
    a7b2:	2f00      	cmp	r7, #0
    a7b4:	f040 80b1 	bne.w	a91a <_dtoa_r+0x6ca>
    a7b8:	4440      	add	r0, r8
    a7ba:	f010 001f 	ands.w	r0, r0, #31
    a7be:	f000 817a 	beq.w	aab6 <_dtoa_r+0x866>
    a7c2:	f1c0 0220 	rsb	r2, r0, #32
    a7c6:	2a04      	cmp	r2, #4
    a7c8:	f300 8088 	bgt.w	a8dc <_dtoa_r+0x68c>
    a7cc:	f040 81f6 	bne.w	abbc <_dtoa_r+0x96c>
    a7d0:	9b06      	ldr	r3, [sp, #24]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	dd05      	ble.n	a7e2 <_dtoa_r+0x592>
    a7d6:	4629      	mov	r1, r5
    a7d8:	461a      	mov	r2, r3
    a7da:	4620      	mov	r0, r4
    a7dc:	f7fe ff54 	bl	9688 <__lshift>
    a7e0:	4605      	mov	r5, r0
    a7e2:	f1b8 0f00 	cmp.w	r8, #0
    a7e6:	dd05      	ble.n	a7f4 <_dtoa_r+0x5a4>
    a7e8:	4651      	mov	r1, sl
    a7ea:	4642      	mov	r2, r8
    a7ec:	4620      	mov	r0, r4
    a7ee:	f7fe ff4b 	bl	9688 <__lshift>
    a7f2:	4682      	mov	sl, r0
    a7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	f040 813f 	bne.w	aa7a <_dtoa_r+0x82a>
    a7fc:	f1b9 0f00 	cmp.w	r9, #0
    a800:	f340 8125 	ble.w	aa4e <_dtoa_r+0x7fe>
    a804:	9b07      	ldr	r3, [sp, #28]
    a806:	2b00      	cmp	r3, #0
    a808:	f040 80a3 	bne.w	a952 <_dtoa_r+0x702>
    a80c:	9b04      	ldr	r3, [sp, #16]
    a80e:	3301      	adds	r3, #1
    a810:	9304      	str	r3, [sp, #16]
    a812:	f8dd 8000 	ldr.w	r8, [sp]
    a816:	2701      	movs	r7, #1
    a818:	e007      	b.n	a82a <_dtoa_r+0x5da>
    a81a:	4629      	mov	r1, r5
    a81c:	2300      	movs	r3, #0
    a81e:	220a      	movs	r2, #10
    a820:	4620      	mov	r0, r4
    a822:	f7fe fcfb 	bl	921c <__multadd>
    a826:	3701      	adds	r7, #1
    a828:	4605      	mov	r5, r0
    a82a:	4651      	mov	r1, sl
    a82c:	4628      	mov	r0, r5
    a82e:	f7ff fc7b 	bl	a128 <quorem>
    a832:	45b9      	cmp	r9, r7
    a834:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a838:	f808 0b01 	strb.w	r0, [r8], #1
    a83c:	dced      	bgt.n	a81a <_dtoa_r+0x5ca>
    a83e:	f1b9 0f00 	cmp.w	r9, #0
    a842:	9a00      	ldr	r2, [sp, #0]
    a844:	bfcc      	ite	gt
    a846:	46cb      	movgt	fp, r9
    a848:	f04f 0b01 	movle.w	fp, #1
    a84c:	4603      	mov	r3, r0
    a84e:	4493      	add	fp, r2
    a850:	2700      	movs	r7, #0
    a852:	4629      	mov	r1, r5
    a854:	2201      	movs	r2, #1
    a856:	4620      	mov	r0, r4
    a858:	9301      	str	r3, [sp, #4]
    a85a:	f7fe ff15 	bl	9688 <__lshift>
    a85e:	4651      	mov	r1, sl
    a860:	4605      	mov	r5, r0
    a862:	f7fe ff89 	bl	9778 <__mcmp>
    a866:	2800      	cmp	r0, #0
    a868:	f340 81af 	ble.w	abca <_dtoa_r+0x97a>
    a86c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    a870:	9a00      	ldr	r2, [sp, #0]
    a872:	f10b 3bff 	add.w	fp, fp, #4294967295
    a876:	e004      	b.n	a882 <_dtoa_r+0x632>
    a878:	455a      	cmp	r2, fp
    a87a:	f000 81b1 	beq.w	abe0 <_dtoa_r+0x990>
    a87e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a882:	2b39      	cmp	r3, #57	; 0x39
    a884:	f10b 0901 	add.w	r9, fp, #1
    a888:	d0f6      	beq.n	a878 <_dtoa_r+0x628>
    a88a:	3301      	adds	r3, #1
    a88c:	f88b 3000 	strb.w	r3, [fp]
    a890:	4651      	mov	r1, sl
    a892:	4620      	mov	r0, r4
    a894:	f7fe fcb8 	bl	9208 <_Bfree>
    a898:	b156      	cbz	r6, a8b0 <_dtoa_r+0x660>
    a89a:	b12f      	cbz	r7, a8a8 <_dtoa_r+0x658>
    a89c:	42b7      	cmp	r7, r6
    a89e:	d003      	beq.n	a8a8 <_dtoa_r+0x658>
    a8a0:	4639      	mov	r1, r7
    a8a2:	4620      	mov	r0, r4
    a8a4:	f7fe fcb0 	bl	9208 <_Bfree>
    a8a8:	4631      	mov	r1, r6
    a8aa:	4620      	mov	r0, r4
    a8ac:	f7fe fcac 	bl	9208 <_Bfree>
    a8b0:	4629      	mov	r1, r5
    a8b2:	4620      	mov	r0, r4
    a8b4:	f7fe fca8 	bl	9208 <_Bfree>
    a8b8:	2300      	movs	r3, #0
    a8ba:	f889 3000 	strb.w	r3, [r9]
    a8be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a8c2:	601a      	str	r2, [r3, #0]
    a8c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a8c6:	2b00      	cmp	r3, #0
    a8c8:	f43f acfe 	beq.w	a2c8 <_dtoa_r+0x78>
    a8cc:	9800      	ldr	r0, [sp, #0]
    a8ce:	f8c3 9000 	str.w	r9, [r3]
    a8d2:	b00f      	add	sp, #60	; 0x3c
    a8d4:	ecbd 8b02 	vpop	{d8}
    a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8dc:	f1c0 001c 	rsb	r0, r0, #28
    a8e0:	9b06      	ldr	r3, [sp, #24]
    a8e2:	4403      	add	r3, r0
    a8e4:	9306      	str	r3, [sp, #24]
    a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8e8:	4403      	add	r3, r0
    a8ea:	9309      	str	r3, [sp, #36]	; 0x24
    a8ec:	4480      	add	r8, r0
    a8ee:	e76f      	b.n	a7d0 <_dtoa_r+0x580>
    a8f0:	f1c2 0220 	rsb	r2, r2, #32
    a8f4:	fa06 f202 	lsl.w	r2, r6, r2
    a8f8:	ee07 2a10 	vmov	s14, r2
    a8fc:	e509      	b.n	a312 <_dtoa_r+0xc2>
    a8fe:	2601      	movs	r6, #1
    a900:	e563      	b.n	a3ca <_dtoa_r+0x17a>
    a902:	4601      	mov	r1, r0
    a904:	463a      	mov	r2, r7
    a906:	4620      	mov	r0, r4
    a908:	f7fe fe5e 	bl	95c8 <__pow5mult>
    a90c:	9b01      	ldr	r3, [sp, #4]
    a90e:	2b01      	cmp	r3, #1
    a910:	4682      	mov	sl, r0
    a912:	f340 81c5 	ble.w	aca0 <_dtoa_r+0xa50>
    a916:	2300      	movs	r3, #0
    a918:	9308      	str	r3, [sp, #32]
    a91a:	f8da 2010 	ldr.w	r2, [sl, #16]
    a91e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    a922:	6910      	ldr	r0, [r2, #16]
    a924:	f7fe fd24 	bl	9370 <__hi0bits>
    a928:	f1c0 0020 	rsb	r0, r0, #32
    a92c:	e744      	b.n	a7b8 <_dtoa_r+0x568>
    a92e:	bf00      	nop
    a930:	200002a8 	.word	0x200002a8
    a934:	20000fcc 	.word	0x20000fcc
    a938:	4631      	mov	r1, r6
    a93a:	2300      	movs	r3, #0
    a93c:	220a      	movs	r2, #10
    a93e:	4620      	mov	r0, r4
    a940:	f7fe fc6c 	bl	921c <__multadd>
    a944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a946:	2b00      	cmp	r3, #0
    a948:	4606      	mov	r6, r0
    a94a:	f340 82ce 	ble.w	aeea <_dtoa_r+0xc9a>
    a94e:	9704      	str	r7, [sp, #16]
    a950:	4699      	mov	r9, r3
    a952:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a954:	2b00      	cmp	r3, #0
    a956:	dd05      	ble.n	a964 <_dtoa_r+0x714>
    a958:	4631      	mov	r1, r6
    a95a:	461a      	mov	r2, r3
    a95c:	4620      	mov	r0, r4
    a95e:	f7fe fe93 	bl	9688 <__lshift>
    a962:	4606      	mov	r6, r0
    a964:	9b08      	ldr	r3, [sp, #32]
    a966:	2b00      	cmp	r3, #0
    a968:	f040 81eb 	bne.w	ad42 <_dtoa_r+0xaf2>
    a96c:	46b0      	mov	r8, r6
    a96e:	9b02      	ldr	r3, [sp, #8]
    a970:	9f00      	ldr	r7, [sp, #0]
    a972:	f003 0201 	and.w	r2, r3, #1
    a976:	1e7b      	subs	r3, r7, #1
    a978:	444b      	add	r3, r9
    a97a:	9308      	str	r3, [sp, #32]
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	920a      	str	r2, [sp, #40]	; 0x28
    a980:	4313      	orrs	r3, r2
    a982:	9309      	str	r3, [sp, #36]	; 0x24
    a984:	4651      	mov	r1, sl
    a986:	4628      	mov	r0, r5
    a988:	f7ff fbce 	bl	a128 <quorem>
    a98c:	4631      	mov	r1, r6
    a98e:	4683      	mov	fp, r0
    a990:	4628      	mov	r0, r5
    a992:	f7fe fef1 	bl	9778 <__mcmp>
    a996:	4642      	mov	r2, r8
    a998:	4651      	mov	r1, sl
    a99a:	4681      	mov	r9, r0
    a99c:	4620      	mov	r0, r4
    a99e:	f7fe ff0d 	bl	97bc <__mdiff>
    a9a2:	68c2      	ldr	r2, [r0, #12]
    a9a4:	4601      	mov	r1, r0
    a9a6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    a9aa:	2a00      	cmp	r2, #0
    a9ac:	d142      	bne.n	aa34 <_dtoa_r+0x7e4>
    a9ae:	e9cd 0306 	strd	r0, r3, [sp, #24]
    a9b2:	4628      	mov	r0, r5
    a9b4:	f7fe fee0 	bl	9778 <__mcmp>
    a9b8:	9906      	ldr	r1, [sp, #24]
    a9ba:	9002      	str	r0, [sp, #8]
    a9bc:	4620      	mov	r0, r4
    a9be:	f7fe fc23 	bl	9208 <_Bfree>
    a9c2:	9a02      	ldr	r2, [sp, #8]
    a9c4:	9b07      	ldr	r3, [sp, #28]
    a9c6:	b91a      	cbnz	r2, a9d0 <_dtoa_r+0x780>
    a9c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    a9ca:	2900      	cmp	r1, #0
    a9cc:	f000 827e 	beq.w	aecc <_dtoa_r+0xc7c>
    a9d0:	f1b9 0f00 	cmp.w	r9, #0
    a9d4:	f2c0 8183 	blt.w	acde <_dtoa_r+0xa8e>
    a9d8:	9901      	ldr	r1, [sp, #4]
    a9da:	ea49 0901 	orr.w	r9, r9, r1
    a9de:	990a      	ldr	r1, [sp, #40]	; 0x28
    a9e0:	ea51 0909 	orrs.w	r9, r1, r9
    a9e4:	f000 817b 	beq.w	acde <_dtoa_r+0xa8e>
    a9e8:	2a00      	cmp	r2, #0
    a9ea:	f300 81c6 	bgt.w	ad7a <_dtoa_r+0xb2a>
    a9ee:	9a08      	ldr	r2, [sp, #32]
    a9f0:	703b      	strb	r3, [r7, #0]
    a9f2:	f107 0901 	add.w	r9, r7, #1
    a9f6:	4297      	cmp	r7, r2
    a9f8:	46cb      	mov	fp, r9
    a9fa:	f000 81c4 	beq.w	ad86 <_dtoa_r+0xb36>
    a9fe:	4629      	mov	r1, r5
    aa00:	2300      	movs	r3, #0
    aa02:	220a      	movs	r2, #10
    aa04:	4620      	mov	r0, r4
    aa06:	f7fe fc09 	bl	921c <__multadd>
    aa0a:	4546      	cmp	r6, r8
    aa0c:	4605      	mov	r5, r0
    aa0e:	4631      	mov	r1, r6
    aa10:	f04f 0300 	mov.w	r3, #0
    aa14:	f04f 020a 	mov.w	r2, #10
    aa18:	4620      	mov	r0, r4
    aa1a:	d012      	beq.n	aa42 <_dtoa_r+0x7f2>
    aa1c:	f7fe fbfe 	bl	921c <__multadd>
    aa20:	4641      	mov	r1, r8
    aa22:	4606      	mov	r6, r0
    aa24:	2300      	movs	r3, #0
    aa26:	220a      	movs	r2, #10
    aa28:	4620      	mov	r0, r4
    aa2a:	f7fe fbf7 	bl	921c <__multadd>
    aa2e:	464f      	mov	r7, r9
    aa30:	4680      	mov	r8, r0
    aa32:	e7a7      	b.n	a984 <_dtoa_r+0x734>
    aa34:	4620      	mov	r0, r4
    aa36:	9302      	str	r3, [sp, #8]
    aa38:	f7fe fbe6 	bl	9208 <_Bfree>
    aa3c:	9b02      	ldr	r3, [sp, #8]
    aa3e:	2201      	movs	r2, #1
    aa40:	e7c6      	b.n	a9d0 <_dtoa_r+0x780>
    aa42:	f7fe fbeb 	bl	921c <__multadd>
    aa46:	464f      	mov	r7, r9
    aa48:	4606      	mov	r6, r0
    aa4a:	4680      	mov	r8, r0
    aa4c:	e79a      	b.n	a984 <_dtoa_r+0x734>
    aa4e:	9b01      	ldr	r3, [sp, #4]
    aa50:	2b02      	cmp	r3, #2
    aa52:	dc71      	bgt.n	ab38 <_dtoa_r+0x8e8>
    aa54:	9b07      	ldr	r3, [sp, #28]
    aa56:	2b00      	cmp	r3, #0
    aa58:	f47f af7b 	bne.w	a952 <_dtoa_r+0x702>
    aa5c:	9b04      	ldr	r3, [sp, #16]
    aa5e:	4651      	mov	r1, sl
    aa60:	3301      	adds	r3, #1
    aa62:	4628      	mov	r0, r5
    aa64:	9304      	str	r3, [sp, #16]
    aa66:	f7ff fb5f 	bl	a128 <quorem>
    aa6a:	f8dd b000 	ldr.w	fp, [sp]
    aa6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    aa72:	f80b 3b01 	strb.w	r3, [fp], #1
    aa76:	2700      	movs	r7, #0
    aa78:	e6eb      	b.n	a852 <_dtoa_r+0x602>
    aa7a:	4651      	mov	r1, sl
    aa7c:	4628      	mov	r0, r5
    aa7e:	f7fe fe7b 	bl	9778 <__mcmp>
    aa82:	2800      	cmp	r0, #0
    aa84:	f6bf aeba 	bge.w	a7fc <_dtoa_r+0x5ac>
    aa88:	4629      	mov	r1, r5
    aa8a:	2300      	movs	r3, #0
    aa8c:	220a      	movs	r2, #10
    aa8e:	4620      	mov	r0, r4
    aa90:	f7fe fbc4 	bl	921c <__multadd>
    aa94:	9b04      	ldr	r3, [sp, #16]
    aa96:	1e5f      	subs	r7, r3, #1
    aa98:	9b07      	ldr	r3, [sp, #28]
    aa9a:	4605      	mov	r5, r0
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	f47f af4b 	bne.w	a938 <_dtoa_r+0x6e8>
    aaa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	f340 8218 	ble.w	aeda <_dtoa_r+0xc8a>
    aaaa:	4699      	mov	r9, r3
    aaac:	e6b1      	b.n	a812 <_dtoa_r+0x5c2>
    aaae:	4bbc      	ldr	r3, [pc, #752]	; (ada0 <_dtoa_r+0xb50>)
    aab0:	9300      	str	r3, [sp, #0]
    aab2:	3303      	adds	r3, #3
    aab4:	e4a4      	b.n	a400 <_dtoa_r+0x1b0>
    aab6:	201c      	movs	r0, #28
    aab8:	e712      	b.n	a8e0 <_dtoa_r+0x690>
    aaba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    aabe:	2800      	cmp	r0, #0
    aac0:	f47f ae74 	bne.w	a7ac <_dtoa_r+0x55c>
    aac4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    aac8:	2a00      	cmp	r2, #0
    aaca:	f000 80f4 	beq.w	acb6 <_dtoa_r+0xa66>
    aace:	9b02      	ldr	r3, [sp, #8]
    aad0:	9308      	str	r3, [sp, #32]
    aad2:	e66d      	b.n	a7b0 <_dtoa_r+0x560>
    aad4:	2301      	movs	r3, #1
    aad6:	9307      	str	r3, [sp, #28]
    aad8:	9b04      	ldr	r3, [sp, #16]
    aada:	445b      	add	r3, fp
    aadc:	f103 0901 	add.w	r9, r3, #1
    aae0:	f1b9 0f01 	cmp.w	r9, #1
    aae4:	46cc      	mov	ip, r9
    aae6:	930b      	str	r3, [sp, #44]	; 0x2c
    aae8:	bfb8      	it	lt
    aaea:	f04f 0c01 	movlt.w	ip, #1
    aaee:	2100      	movs	r1, #0
    aaf0:	f1bc 0f17 	cmp.w	ip, #23
    aaf4:	63e1      	str	r1, [r4, #60]	; 0x3c
    aaf6:	f77f acbc 	ble.w	a472 <_dtoa_r+0x222>
    aafa:	2001      	movs	r0, #1
    aafc:	2204      	movs	r2, #4
    aafe:	0052      	lsls	r2, r2, #1
    ab00:	f102 0314 	add.w	r3, r2, #20
    ab04:	4563      	cmp	r3, ip
    ab06:	4601      	mov	r1, r0
    ab08:	f100 0001 	add.w	r0, r0, #1
    ab0c:	d9f7      	bls.n	aafe <_dtoa_r+0x8ae>
    ab0e:	63e1      	str	r1, [r4, #60]	; 0x3c
    ab10:	e4af      	b.n	a472 <_dtoa_r+0x222>
    ab12:	2301      	movs	r3, #1
    ab14:	9307      	str	r3, [sp, #28]
    ab16:	f1bb 0f00 	cmp.w	fp, #0
    ab1a:	dd52      	ble.n	abc2 <_dtoa_r+0x972>
    ab1c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    ab20:	46d9      	mov	r9, fp
    ab22:	46dc      	mov	ip, fp
    ab24:	e7e3      	b.n	aaee <_dtoa_r+0x89e>
    ab26:	2300      	movs	r3, #0
    ab28:	9307      	str	r3, [sp, #28]
    ab2a:	e7d5      	b.n	aad8 <_dtoa_r+0x888>
    ab2c:	2300      	movs	r3, #0
    ab2e:	9307      	str	r3, [sp, #28]
    ab30:	e7f1      	b.n	ab16 <_dtoa_r+0x8c6>
    ab32:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    ab36:	9704      	str	r7, [sp, #16]
    ab38:	f1b9 0f00 	cmp.w	r9, #0
    ab3c:	f47f ada1 	bne.w	a682 <_dtoa_r+0x432>
    ab40:	4651      	mov	r1, sl
    ab42:	464b      	mov	r3, r9
    ab44:	2205      	movs	r2, #5
    ab46:	4620      	mov	r0, r4
    ab48:	f7fe fb68 	bl	921c <__multadd>
    ab4c:	4601      	mov	r1, r0
    ab4e:	4682      	mov	sl, r0
    ab50:	4628      	mov	r0, r5
    ab52:	f7fe fe11 	bl	9778 <__mcmp>
    ab56:	2800      	cmp	r0, #0
    ab58:	f77f ad93 	ble.w	a682 <_dtoa_r+0x432>
    ab5c:	9b04      	ldr	r3, [sp, #16]
    ab5e:	f103 0b01 	add.w	fp, r3, #1
    ab62:	9b00      	ldr	r3, [sp, #0]
    ab64:	2231      	movs	r2, #49	; 0x31
    ab66:	4698      	mov	r8, r3
    ab68:	f803 2b01 	strb.w	r2, [r3], #1
    ab6c:	9300      	str	r3, [sp, #0]
    ab6e:	4651      	mov	r1, sl
    ab70:	4620      	mov	r0, r4
    ab72:	f7fe fb49 	bl	9208 <_Bfree>
    ab76:	f10b 0301 	add.w	r3, fp, #1
    ab7a:	f8dd 9000 	ldr.w	r9, [sp]
    ab7e:	9304      	str	r3, [sp, #16]
    ab80:	f8cd 8000 	str.w	r8, [sp]
    ab84:	2e00      	cmp	r6, #0
    ab86:	f47f ae8f 	bne.w	a8a8 <_dtoa_r+0x658>
    ab8a:	e691      	b.n	a8b0 <_dtoa_r+0x660>
    ab8c:	eba3 0a0a 	sub.w	sl, r3, sl
    ab90:	e5c5      	b.n	a71e <_dtoa_r+0x4ce>
    ab92:	4631      	mov	r1, r6
    ab94:	4652      	mov	r2, sl
    ab96:	4620      	mov	r0, r4
    ab98:	f7fe fd16 	bl	95c8 <__pow5mult>
    ab9c:	462a      	mov	r2, r5
    ab9e:	4601      	mov	r1, r0
    aba0:	4606      	mov	r6, r0
    aba2:	4620      	mov	r0, r4
    aba4:	f7fe fc62 	bl	946c <__multiply>
    aba8:	4629      	mov	r1, r5
    abaa:	4605      	mov	r5, r0
    abac:	4620      	mov	r0, r4
    abae:	f7fe fb2b 	bl	9208 <_Bfree>
    abb2:	e5ea      	b.n	a78a <_dtoa_r+0x53a>
    abb4:	2002      	movs	r0, #2
    abb6:	eeb0 5b48 	vmov.f64	d5, d8
    abba:	e481      	b.n	a4c0 <_dtoa_r+0x270>
    abbc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    abc0:	e68e      	b.n	a8e0 <_dtoa_r+0x690>
    abc2:	f04f 0b01 	mov.w	fp, #1
    abc6:	46d9      	mov	r9, fp
    abc8:	e44f      	b.n	a46a <_dtoa_r+0x21a>
    abca:	d103      	bne.n	abd4 <_dtoa_r+0x984>
    abcc:	9b01      	ldr	r3, [sp, #4]
    abce:	07db      	lsls	r3, r3, #31
    abd0:	f53f ae4c 	bmi.w	a86c <_dtoa_r+0x61c>
    abd4:	46d9      	mov	r9, fp
    abd6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    abda:	2b30      	cmp	r3, #48	; 0x30
    abdc:	d0fa      	beq.n	abd4 <_dtoa_r+0x984>
    abde:	e657      	b.n	a890 <_dtoa_r+0x640>
    abe0:	9b04      	ldr	r3, [sp, #16]
    abe2:	9a00      	ldr	r2, [sp, #0]
    abe4:	3301      	adds	r3, #1
    abe6:	9304      	str	r3, [sp, #16]
    abe8:	2331      	movs	r3, #49	; 0x31
    abea:	7013      	strb	r3, [r2, #0]
    abec:	e650      	b.n	a890 <_dtoa_r+0x640>
    abee:	f1ba 0f00 	cmp.w	sl, #0
    abf2:	f000 8123 	beq.w	ae3c <_dtoa_r+0xbec>
    abf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
    abfa:	9b06      	ldr	r3, [sp, #24]
    abfc:	9309      	str	r3, [sp, #36]	; 0x24
    abfe:	4413      	add	r3, r2
    ac00:	f8dd a020 	ldr.w	sl, [sp, #32]
    ac04:	9306      	str	r3, [sp, #24]
    ac06:	4490      	add	r8, r2
    ac08:	e592      	b.n	a730 <_dtoa_r+0x4e0>
    ac0a:	ee07 0a90 	vmov	s15, r0
    ac0e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    ac12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    ac16:	eea6 5b07 	vfma.f64	d5, d6, d7
    ac1a:	ee15 2a90 	vmov	r2, s11
    ac1e:	ec51 0b15 	vmov	r0, r1, d5
    ac22:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    ac26:	ec41 0b15 	vmov	d5, r0, r1
    ac2a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    ac2e:	ee36 7b47 	vsub.f64	d7, d6, d7
    ac32:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ac36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac3a:	f300 8137 	bgt.w	aeac <_dtoa_r+0xc5c>
    ac3e:	eeb1 5b45 	vneg.f64	d5, d5
    ac42:	eeb4 7bc5 	vcmpe.f64	d7, d5
    ac46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ac4a:	f57f acfb 	bpl.w	a644 <_dtoa_r+0x3f4>
    ac4e:	f04f 0a00 	mov.w	sl, #0
    ac52:	4656      	mov	r6, sl
    ac54:	e515      	b.n	a682 <_dtoa_r+0x432>
    ac56:	f000 80f5 	beq.w	ae44 <_dtoa_r+0xbf4>
    ac5a:	9b04      	ldr	r3, [sp, #16]
    ac5c:	4951      	ldr	r1, [pc, #324]	; (ada4 <_dtoa_r+0xb54>)
    ac5e:	425a      	negs	r2, r3
    ac60:	f002 000f 	and.w	r0, r2, #15
    ac64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ac68:	ed91 6b00 	vldr	d6, [r1]
    ac6c:	1112      	asrs	r2, r2, #4
    ac6e:	ee28 6b06 	vmul.f64	d6, d8, d6
    ac72:	f000 8142 	beq.w	aefa <_dtoa_r+0xcaa>
    ac76:	eeb0 7b46 	vmov.f64	d7, d6
    ac7a:	494b      	ldr	r1, [pc, #300]	; (ada8 <_dtoa_r+0xb58>)
    ac7c:	2600      	movs	r6, #0
    ac7e:	2002      	movs	r0, #2
    ac80:	07d3      	lsls	r3, r2, #31
    ac82:	d505      	bpl.n	ac90 <_dtoa_r+0xa40>
    ac84:	ed91 5b00 	vldr	d5, [r1]
    ac88:	3001      	adds	r0, #1
    ac8a:	2601      	movs	r6, #1
    ac8c:	ee27 7b05 	vmul.f64	d7, d7, d5
    ac90:	1052      	asrs	r2, r2, #1
    ac92:	f101 0108 	add.w	r1, r1, #8
    ac96:	d1f3      	bne.n	ac80 <_dtoa_r+0xa30>
    ac98:	2e00      	cmp	r6, #0
    ac9a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    ac9e:	e41e      	b.n	a4de <_dtoa_r+0x28e>
    aca0:	9b02      	ldr	r3, [sp, #8]
    aca2:	2b00      	cmp	r3, #0
    aca4:	f47f ae37 	bne.w	a916 <_dtoa_r+0x6c6>
    aca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    acac:	f3c1 0213 	ubfx	r2, r1, #0, #20
    acb0:	2a00      	cmp	r2, #0
    acb2:	f040 8137 	bne.w	af24 <_dtoa_r+0xcd4>
    acb6:	4a3d      	ldr	r2, [pc, #244]	; (adac <_dtoa_r+0xb5c>)
    acb8:	400a      	ands	r2, r1
    acba:	2a00      	cmp	r2, #0
    acbc:	f000 80fa 	beq.w	aeb4 <_dtoa_r+0xc64>
    acc0:	9b06      	ldr	r3, [sp, #24]
    acc2:	3301      	adds	r3, #1
    acc4:	9306      	str	r3, [sp, #24]
    acc6:	2301      	movs	r3, #1
    acc8:	f108 0801 	add.w	r8, r8, #1
    accc:	9308      	str	r3, [sp, #32]
    acce:	e56f      	b.n	a7b0 <_dtoa_r+0x560>
    acd0:	4629      	mov	r1, r5
    acd2:	9a08      	ldr	r2, [sp, #32]
    acd4:	4620      	mov	r0, r4
    acd6:	f7fe fc77 	bl	95c8 <__pow5mult>
    acda:	4605      	mov	r5, r0
    acdc:	e55a      	b.n	a794 <_dtoa_r+0x544>
    acde:	2a00      	cmp	r2, #0
    ace0:	dd12      	ble.n	ad08 <_dtoa_r+0xab8>
    ace2:	4629      	mov	r1, r5
    ace4:	2201      	movs	r2, #1
    ace6:	4620      	mov	r0, r4
    ace8:	9301      	str	r3, [sp, #4]
    acea:	f7fe fccd 	bl	9688 <__lshift>
    acee:	4651      	mov	r1, sl
    acf0:	4605      	mov	r5, r0
    acf2:	f7fe fd41 	bl	9778 <__mcmp>
    acf6:	2800      	cmp	r0, #0
    acf8:	9b01      	ldr	r3, [sp, #4]
    acfa:	f340 80e1 	ble.w	aec0 <_dtoa_r+0xc70>
    acfe:	2b39      	cmp	r3, #57	; 0x39
    ad00:	f000 80ca 	beq.w	ae98 <_dtoa_r+0xc48>
    ad04:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    ad08:	46b9      	mov	r9, r7
    ad0a:	f809 3b01 	strb.w	r3, [r9], #1
    ad0e:	9b04      	ldr	r3, [sp, #16]
    ad10:	3301      	adds	r3, #1
    ad12:	4637      	mov	r7, r6
    ad14:	9304      	str	r3, [sp, #16]
    ad16:	4646      	mov	r6, r8
    ad18:	e5ba      	b.n	a890 <_dtoa_r+0x640>
    ad1a:	ee38 8b08 	vadd.f64	d8, d8, d8
    ad1e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    ad22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad26:	dc0a      	bgt.n	ad3e <_dtoa_r+0xaee>
    ad28:	eeb4 8b46 	vcmp.f64	d8, d6
    ad2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ad30:	f47f acdc 	bne.w	a6ec <_dtoa_r+0x49c>
    ad34:	ee17 3a10 	vmov	r3, s14
    ad38:	07d8      	lsls	r0, r3, #31
    ad3a:	f57f acd7 	bpl.w	a6ec <_dtoa_r+0x49c>
    ad3e:	9a00      	ldr	r2, [sp, #0]
    ad40:	e454      	b.n	a5ec <_dtoa_r+0x39c>
    ad42:	6871      	ldr	r1, [r6, #4]
    ad44:	4620      	mov	r0, r4
    ad46:	f7fe fa39 	bl	91bc <_Balloc>
    ad4a:	4607      	mov	r7, r0
    ad4c:	2800      	cmp	r0, #0
    ad4e:	f000 80de 	beq.w	af0e <_dtoa_r+0xcbe>
    ad52:	6933      	ldr	r3, [r6, #16]
    ad54:	3302      	adds	r3, #2
    ad56:	009a      	lsls	r2, r3, #2
    ad58:	f106 010c 	add.w	r1, r6, #12
    ad5c:	300c      	adds	r0, #12
    ad5e:	f7f9 f95f 	bl	4020 <memcpy>
    ad62:	4639      	mov	r1, r7
    ad64:	2201      	movs	r2, #1
    ad66:	4620      	mov	r0, r4
    ad68:	f7fe fc8e 	bl	9688 <__lshift>
    ad6c:	4680      	mov	r8, r0
    ad6e:	e5fe      	b.n	a96e <_dtoa_r+0x71e>
    ad70:	9b06      	ldr	r3, [sp, #24]
    ad72:	eba3 0309 	sub.w	r3, r3, r9
    ad76:	9309      	str	r3, [sp, #36]	; 0x24
    ad78:	e4da      	b.n	a730 <_dtoa_r+0x4e0>
    ad7a:	2b39      	cmp	r3, #57	; 0x39
    ad7c:	f000 808c 	beq.w	ae98 <_dtoa_r+0xc48>
    ad80:	46b9      	mov	r9, r7
    ad82:	3301      	adds	r3, #1
    ad84:	e7c1      	b.n	ad0a <_dtoa_r+0xaba>
    ad86:	9a04      	ldr	r2, [sp, #16]
    ad88:	3201      	adds	r2, #1
    ad8a:	4637      	mov	r7, r6
    ad8c:	9204      	str	r2, [sp, #16]
    ad8e:	4646      	mov	r6, r8
    ad90:	e55f      	b.n	a852 <_dtoa_r+0x602>
    ad92:	4629      	mov	r1, r5
    ad94:	4620      	mov	r0, r4
    ad96:	f7fe fc17 	bl	95c8 <__pow5mult>
    ad9a:	4605      	mov	r5, r0
    ad9c:	e4fa      	b.n	a794 <_dtoa_r+0x544>
    ad9e:	bf00      	nop
    ada0:	20000ba8 	.word	0x20000ba8
    ada4:	200002a8 	.word	0x200002a8
    ada8:	20000280 	.word	0x20000280
    adac:	7ff00000 	.word	0x7ff00000
    adb0:	4b5e      	ldr	r3, [pc, #376]	; (af2c <_dtoa_r+0xcdc>)
    adb2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    adb6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    adba:	ed1c 3b02 	vldr	d3, [ip, #-8]
    adbe:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    adc2:	ee36 7b47 	vsub.f64	d7, d6, d7
    adc6:	ec41 0b16 	vmov	d6, r0, r1
    adca:	ee15 1a90 	vmov	r1, s11
    adce:	ee23 3b06 	vmul.f64	d3, d3, d6
    add2:	9800      	ldr	r0, [sp, #0]
    add4:	3130      	adds	r1, #48	; 0x30
    add6:	2a01      	cmp	r2, #1
    add8:	f800 1b01 	strb.w	r1, [r0], #1
    addc:	f000 8083 	beq.w	aee6 <_dtoa_r+0xc96>
    ade0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ade4:	9b00      	ldr	r3, [sp, #0]
    ade6:	1899      	adds	r1, r3, r2
    ade8:	ee27 7b04 	vmul.f64	d7, d7, d4
    adec:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    adf0:	ee16 3a90 	vmov	r3, s13
    adf4:	3330      	adds	r3, #48	; 0x30
    adf6:	f800 3b01 	strb.w	r3, [r0], #1
    adfa:	4281      	cmp	r1, r0
    adfc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    ae00:	ee37 7b45 	vsub.f64	d7, d7, d5
    ae04:	d1f0      	bne.n	ade8 <_dtoa_r+0xb98>
    ae06:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ae0a:	ee33 5b06 	vadd.f64	d5, d3, d6
    ae0e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ae12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae16:	f53f abe3 	bmi.w	a5e0 <_dtoa_r+0x390>
    ae1a:	ee36 6b43 	vsub.f64	d6, d6, d3
    ae1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    ae22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae26:	f77f ac0d 	ble.w	a644 <_dtoa_r+0x3f4>
    ae2a:	4689      	mov	r9, r1
    ae2c:	3901      	subs	r1, #1
    ae2e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    ae32:	2b30      	cmp	r3, #48	; 0x30
    ae34:	d0f9      	beq.n	ae2a <_dtoa_r+0xbda>
    ae36:	1c73      	adds	r3, r6, #1
    ae38:	9304      	str	r3, [sp, #16]
    ae3a:	e539      	b.n	a8b0 <_dtoa_r+0x660>
    ae3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ae3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    ae42:	e6da      	b.n	abfa <_dtoa_r+0x9aa>
    ae44:	2002      	movs	r0, #2
    ae46:	eeb0 6b48 	vmov.f64	d6, d8
    ae4a:	f7ff bb48 	b.w	a4de <_dtoa_r+0x28e>
    ae4e:	f1b9 0f00 	cmp.w	r9, #0
    ae52:	f43f aeda 	beq.w	ac0a <_dtoa_r+0x9ba>
    ae56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ae58:	2a00      	cmp	r2, #0
    ae5a:	f77f abf3 	ble.w	a644 <_dtoa_r+0x3f4>
    ae5e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ae62:	ee26 6b04 	vmul.f64	d6, d6, d4
    ae66:	3001      	adds	r0, #1
    ae68:	ee07 0a90 	vmov	s15, r0
    ae6c:	9b04      	ldr	r3, [sp, #16]
    ae6e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    ae72:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    ae76:	eea6 7b05 	vfma.f64	d7, d6, d5
    ae7a:	ee17 ca90 	vmov	ip, s15
    ae7e:	ec51 0b17 	vmov	r0, r1, d7
    ae82:	1e5e      	subs	r6, r3, #1
    ae84:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    ae88:	f7ff bb47 	b.w	a51a <_dtoa_r+0x2ca>
    ae8c:	9b04      	ldr	r3, [sp, #16]
    ae8e:	3301      	adds	r3, #1
    ae90:	9304      	str	r3, [sp, #16]
    ae92:	2331      	movs	r3, #49	; 0x31
    ae94:	f7ff bbb1 	b.w	a5fa <_dtoa_r+0x3aa>
    ae98:	9b04      	ldr	r3, [sp, #16]
    ae9a:	46bb      	mov	fp, r7
    ae9c:	3301      	adds	r3, #1
    ae9e:	9304      	str	r3, [sp, #16]
    aea0:	2339      	movs	r3, #57	; 0x39
    aea2:	4637      	mov	r7, r6
    aea4:	f80b 3b01 	strb.w	r3, [fp], #1
    aea8:	4646      	mov	r6, r8
    aeaa:	e4e1      	b.n	a870 <_dtoa_r+0x620>
    aeac:	f04f 0a00 	mov.w	sl, #0
    aeb0:	4656      	mov	r6, sl
    aeb2:	e653      	b.n	ab5c <_dtoa_r+0x90c>
    aeb4:	9208      	str	r2, [sp, #32]
    aeb6:	e47b      	b.n	a7b0 <_dtoa_r+0x560>
    aeb8:	1c73      	adds	r3, r6, #1
    aeba:	9304      	str	r3, [sp, #16]
    aebc:	4689      	mov	r9, r1
    aebe:	e4f7      	b.n	a8b0 <_dtoa_r+0x660>
    aec0:	f47f af22 	bne.w	ad08 <_dtoa_r+0xab8>
    aec4:	07da      	lsls	r2, r3, #31
    aec6:	f57f af1f 	bpl.w	ad08 <_dtoa_r+0xab8>
    aeca:	e718      	b.n	acfe <_dtoa_r+0xaae>
    aecc:	2b39      	cmp	r3, #57	; 0x39
    aece:	d0e3      	beq.n	ae98 <_dtoa_r+0xc48>
    aed0:	f1b9 0f00 	cmp.w	r9, #0
    aed4:	f73f af16 	bgt.w	ad04 <_dtoa_r+0xab4>
    aed8:	e716      	b.n	ad08 <_dtoa_r+0xab8>
    aeda:	9b01      	ldr	r3, [sp, #4]
    aedc:	2b02      	cmp	r3, #2
    aede:	f73f ae28 	bgt.w	ab32 <_dtoa_r+0x8e2>
    aee2:	9704      	str	r7, [sp, #16]
    aee4:	e5ba      	b.n	aa5c <_dtoa_r+0x80c>
    aee6:	4601      	mov	r1, r0
    aee8:	e78d      	b.n	ae06 <_dtoa_r+0xbb6>
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	2b02      	cmp	r3, #2
    aeee:	f73f ae20 	bgt.w	ab32 <_dtoa_r+0x8e2>
    aef2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    aef6:	9704      	str	r7, [sp, #16]
    aef8:	e52b      	b.n	a952 <_dtoa_r+0x702>
    aefa:	2002      	movs	r0, #2
    aefc:	f7ff baef 	b.w	a4de <_dtoa_r+0x28e>
    af00:	4b0b      	ldr	r3, [pc, #44]	; (af30 <_dtoa_r+0xce0>)
    af02:	480c      	ldr	r0, [pc, #48]	; (af34 <_dtoa_r+0xce4>)
    af04:	2200      	movs	r2, #0
    af06:	f240 11af 	movw	r1, #431	; 0x1af
    af0a:	f7ff f8b1 	bl	a070 <__assert_func>
    af0e:	4b08      	ldr	r3, [pc, #32]	; (af30 <_dtoa_r+0xce0>)
    af10:	4808      	ldr	r0, [pc, #32]	; (af34 <_dtoa_r+0xce4>)
    af12:	463a      	mov	r2, r7
    af14:	f240 21ef 	movw	r1, #751	; 0x2ef
    af18:	f7ff f8aa 	bl	a070 <__assert_func>
    af1c:	4b06      	ldr	r3, [pc, #24]	; (af38 <_dtoa_r+0xce8>)
    af1e:	9300      	str	r3, [sp, #0]
    af20:	f7ff b9d2 	b.w	a2c8 <_dtoa_r+0x78>
    af24:	9b02      	ldr	r3, [sp, #8]
    af26:	9308      	str	r3, [sp, #32]
    af28:	e4f7      	b.n	a91a <_dtoa_r+0x6ca>
    af2a:	bf00      	nop
    af2c:	200002a8 	.word	0x200002a8
    af30:	2000089c 	.word	0x2000089c
    af34:	20000bac 	.word	0x20000bac
    af38:	20000b9c 	.word	0x20000b9c

0000af3c <_wcrtomb_r>:
    af3c:	b570      	push	{r4, r5, r6, lr}
    af3e:	4605      	mov	r5, r0
    af40:	b084      	sub	sp, #16
    af42:	b15b      	cbz	r3, af5c <_wcrtomb_r+0x20>
    af44:	461c      	mov	r4, r3
    af46:	b169      	cbz	r1, af64 <_wcrtomb_r+0x28>
    af48:	4b0e      	ldr	r3, [pc, #56]	; (af84 <_wcrtomb_r+0x48>)
    af4a:	4628      	mov	r0, r5
    af4c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    af50:	4623      	mov	r3, r4
    af52:	47b0      	blx	r6
    af54:	1c43      	adds	r3, r0, #1
    af56:	d00f      	beq.n	af78 <_wcrtomb_r+0x3c>
    af58:	b004      	add	sp, #16
    af5a:	bd70      	pop	{r4, r5, r6, pc}
    af5c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    af60:	2900      	cmp	r1, #0
    af62:	d1f1      	bne.n	af48 <_wcrtomb_r+0xc>
    af64:	4a07      	ldr	r2, [pc, #28]	; (af84 <_wcrtomb_r+0x48>)
    af66:	4623      	mov	r3, r4
    af68:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    af6c:	4628      	mov	r0, r5
    af6e:	460a      	mov	r2, r1
    af70:	a901      	add	r1, sp, #4
    af72:	47b0      	blx	r6
    af74:	1c43      	adds	r3, r0, #1
    af76:	d1ef      	bne.n	af58 <_wcrtomb_r+0x1c>
    af78:	2200      	movs	r2, #0
    af7a:	238a      	movs	r3, #138	; 0x8a
    af7c:	6022      	str	r2, [r4, #0]
    af7e:	602b      	str	r3, [r5, #0]
    af80:	b004      	add	sp, #16
    af82:	bd70      	pop	{r4, r5, r6, pc}
    af84:	20001590 	.word	0x20001590

0000af88 <_wcsrtombs_r>:
    af88:	b510      	push	{r4, lr}
    af8a:	b082      	sub	sp, #8
    af8c:	9c04      	ldr	r4, [sp, #16]
    af8e:	e9cd 3400 	strd	r3, r4, [sp]
    af92:	f04f 33ff 	mov.w	r3, #4294967295
    af96:	f001 fb47 	bl	c628 <_wcsnrtombs_r>
    af9a:	b002      	add	sp, #8
    af9c:	bd10      	pop	{r4, pc}
    af9e:	bf00      	nop

0000afa0 <fiprintf>:
    afa0:	b40e      	push	{r1, r2, r3}
    afa2:	b510      	push	{r4, lr}
    afa4:	b083      	sub	sp, #12
    afa6:	ab05      	add	r3, sp, #20
    afa8:	4c06      	ldr	r4, [pc, #24]	; (afc4 <fiprintf+0x24>)
    afaa:	f853 2b04 	ldr.w	r2, [r3], #4
    afae:	9301      	str	r3, [sp, #4]
    afb0:	4601      	mov	r1, r0
    afb2:	6820      	ldr	r0, [r4, #0]
    afb4:	f000 f844 	bl	b040 <_vfiprintf_r>
    afb8:	b003      	add	sp, #12
    afba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    afbe:	b003      	add	sp, #12
    afc0:	4770      	bx	lr
    afc2:	bf00      	nop
    afc4:	20001b18 	.word	0x20001b18

0000afc8 <__sprint_r.part.0>:
    afc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afcc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    afce:	049c      	lsls	r4, r3, #18
    afd0:	4690      	mov	r8, r2
    afd2:	d52d      	bpl.n	b030 <__sprint_r.part.0+0x68>
    afd4:	6893      	ldr	r3, [r2, #8]
    afd6:	6812      	ldr	r2, [r2, #0]
    afd8:	b343      	cbz	r3, b02c <__sprint_r.part.0+0x64>
    afda:	468b      	mov	fp, r1
    afdc:	4606      	mov	r6, r0
    afde:	f102 0908 	add.w	r9, r2, #8
    afe2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    afe6:	ea5f 079a 	movs.w	r7, sl, lsr #2
    afea:	d015      	beq.n	b018 <__sprint_r.part.0+0x50>
    afec:	3d04      	subs	r5, #4
    afee:	2400      	movs	r4, #0
    aff0:	e001      	b.n	aff6 <__sprint_r.part.0+0x2e>
    aff2:	42a7      	cmp	r7, r4
    aff4:	d00e      	beq.n	b014 <__sprint_r.part.0+0x4c>
    aff6:	f855 1f04 	ldr.w	r1, [r5, #4]!
    affa:	465a      	mov	r2, fp
    affc:	4630      	mov	r0, r6
    affe:	f001 fa5b 	bl	c4b8 <_fputwc_r>
    b002:	1c43      	adds	r3, r0, #1
    b004:	f104 0401 	add.w	r4, r4, #1
    b008:	d1f3      	bne.n	aff2 <__sprint_r.part.0+0x2a>
    b00a:	2300      	movs	r3, #0
    b00c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b014:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b018:	f02a 0a03 	bic.w	sl, sl, #3
    b01c:	eba3 030a 	sub.w	r3, r3, sl
    b020:	f8c8 3008 	str.w	r3, [r8, #8]
    b024:	f109 0908 	add.w	r9, r9, #8
    b028:	2b00      	cmp	r3, #0
    b02a:	d1da      	bne.n	afe2 <__sprint_r.part.0+0x1a>
    b02c:	2000      	movs	r0, #0
    b02e:	e7ec      	b.n	b00a <__sprint_r.part.0+0x42>
    b030:	f001 f80c 	bl	c04c <__sfvwrite_r>
    b034:	2300      	movs	r3, #0
    b036:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b03e:	bf00      	nop

0000b040 <_vfiprintf_r>:
    b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b044:	ed2d 8b02 	vpush	{d8}
    b048:	b0c5      	sub	sp, #276	; 0x114
    b04a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    b04e:	4683      	mov	fp, r0
    b050:	ee08 1a10 	vmov	s16, r1
    b054:	4616      	mov	r6, r2
    b056:	2100      	movs	r1, #0
    b058:	2208      	movs	r2, #8
    b05a:	4650      	mov	r0, sl
    b05c:	461c      	mov	r4, r3
    b05e:	9307      	str	r3, [sp, #28]
    b060:	f7fc fcb2 	bl	79c8 <memset>
    b064:	f1bb 0f00 	cmp.w	fp, #0
    b068:	d004      	beq.n	b074 <_vfiprintf_r+0x34>
    b06a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    b06e:	2b00      	cmp	r3, #0
    b070:	f000 86a0 	beq.w	bdb4 <_vfiprintf_r+0xd74>
    b074:	ee18 2a10 	vmov	r2, s16
    b078:	6e53      	ldr	r3, [r2, #100]	; 0x64
    b07a:	07db      	lsls	r3, r3, #31
    b07c:	f140 8513 	bpl.w	baa6 <_vfiprintf_r+0xa66>
    b080:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b084:	b28a      	uxth	r2, r1
    b086:	0495      	lsls	r5, r2, #18
    b088:	d40b      	bmi.n	b0a2 <_vfiprintf_r+0x62>
    b08a:	ee18 3a10 	vmov	r3, s16
    b08e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    b092:	8199      	strh	r1, [r3, #12]
    b094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b096:	b28a      	uxth	r2, r1
    b098:	ee18 1a10 	vmov	r1, s16
    b09c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b0a0:	664b      	str	r3, [r1, #100]	; 0x64
    b0a2:	0710      	lsls	r0, r2, #28
    b0a4:	f140 8105 	bpl.w	b2b2 <_vfiprintf_r+0x272>
    b0a8:	ee18 3a10 	vmov	r3, s16
    b0ac:	691b      	ldr	r3, [r3, #16]
    b0ae:	2b00      	cmp	r3, #0
    b0b0:	f000 80ff 	beq.w	b2b2 <_vfiprintf_r+0x272>
    b0b4:	f002 031a 	and.w	r3, r2, #26
    b0b8:	2b0a      	cmp	r3, #10
    b0ba:	f000 810a 	beq.w	b2d2 <_vfiprintf_r+0x292>
    b0be:	2300      	movs	r3, #0
    b0c0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    b0c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    b0c8:	aa1b      	add	r2, sp, #108	; 0x6c
    b0ca:	930c      	str	r3, [sp, #48]	; 0x30
    b0cc:	9218      	str	r2, [sp, #96]	; 0x60
    b0ce:	4691      	mov	r9, r2
    b0d0:	930b      	str	r3, [sp, #44]	; 0x2c
    b0d2:	9305      	str	r3, [sp, #20]
    b0d4:	46b0      	mov	r8, r6
    b0d6:	4644      	mov	r4, r8
    b0d8:	4ba8      	ldr	r3, [pc, #672]	; (b37c <_vfiprintf_r+0x33c>)
    b0da:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    b0de:	f7fc ffb7 	bl	8050 <__locale_mb_cur_max>
    b0e2:	4622      	mov	r2, r4
    b0e4:	4603      	mov	r3, r0
    b0e6:	a912      	add	r1, sp, #72	; 0x48
    b0e8:	f8cd a000 	str.w	sl, [sp]
    b0ec:	4658      	mov	r0, fp
    b0ee:	47a8      	blx	r5
    b0f0:	2800      	cmp	r0, #0
    b0f2:	f000 8145 	beq.w	b380 <_vfiprintf_r+0x340>
    b0f6:	f2c0 8139 	blt.w	b36c <_vfiprintf_r+0x32c>
    b0fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b0fc:	2a25      	cmp	r2, #37	; 0x25
    b0fe:	4603      	mov	r3, r0
    b100:	d001      	beq.n	b106 <_vfiprintf_r+0xc6>
    b102:	441c      	add	r4, r3
    b104:	e7e8      	b.n	b0d8 <_vfiprintf_r+0x98>
    b106:	ebb4 0608 	subs.w	r6, r4, r8
    b10a:	4605      	mov	r5, r0
    b10c:	f040 813c 	bne.w	b388 <_vfiprintf_r+0x348>
    b110:	2300      	movs	r3, #0
    b112:	7861      	ldrb	r1, [r4, #1]
    b114:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b118:	f104 0801 	add.w	r8, r4, #1
    b11c:	9306      	str	r3, [sp, #24]
    b11e:	f04f 37ff 	mov.w	r7, #4294967295
    b122:	461e      	mov	r6, r3
    b124:	242b      	movs	r4, #43	; 0x2b
    b126:	f108 0801 	add.w	r8, r8, #1
    b12a:	f1a1 0320 	sub.w	r3, r1, #32
    b12e:	2b5a      	cmp	r3, #90	; 0x5a
    b130:	f200 8178 	bhi.w	b424 <_vfiprintf_r+0x3e4>
    b134:	e8df f013 	tbh	[pc, r3, lsl #1]
    b138:	017602b5 	.word	0x017602b5
    b13c:	02b00176 	.word	0x02b00176
    b140:	01760176 	.word	0x01760176
    b144:	006a0176 	.word	0x006a0176
    b148:	01760176 	.word	0x01760176
    b14c:	028d027d 	.word	0x028d027d
    b150:	02880176 	.word	0x02880176
    b154:	01760297 	.word	0x01760297
    b158:	005b0292 	.word	0x005b0292
    b15c:	005b005b 	.word	0x005b005b
    b160:	005b005b 	.word	0x005b005b
    b164:	005b005b 	.word	0x005b005b
    b168:	005b005b 	.word	0x005b005b
    b16c:	01760176 	.word	0x01760176
    b170:	01760176 	.word	0x01760176
    b174:	01760176 	.word	0x01760176
    b178:	01760176 	.word	0x01760176
    b17c:	025c0176 	.word	0x025c0176
    b180:	01760084 	.word	0x01760084
    b184:	01760176 	.word	0x01760176
    b188:	01760176 	.word	0x01760176
    b18c:	01760176 	.word	0x01760176
    b190:	01760176 	.word	0x01760176
    b194:	00e80176 	.word	0x00e80176
    b198:	01760176 	.word	0x01760176
    b19c:	02330176 	.word	0x02330176
    b1a0:	02da0176 	.word	0x02da0176
    b1a4:	01760176 	.word	0x01760176
    b1a8:	0176058b 	.word	0x0176058b
    b1ac:	01760176 	.word	0x01760176
    b1b0:	01760176 	.word	0x01760176
    b1b4:	01760176 	.word	0x01760176
    b1b8:	01760176 	.word	0x01760176
    b1bc:	025c0176 	.word	0x025c0176
    b1c0:	01760086 	.word	0x01760086
    b1c4:	01760176 	.word	0x01760176
    b1c8:	008602cd 	.word	0x008602cd
    b1cc:	0176007f 	.word	0x0176007f
    b1d0:	017602c0 	.word	0x017602c0
    b1d4:	00ea02fd 	.word	0x00ea02fd
    b1d8:	007f02ed 	.word	0x007f02ed
    b1dc:	02330176 	.word	0x02330176
    b1e0:	0569007c 	.word	0x0569007c
    b1e4:	01760176 	.word	0x01760176
    b1e8:	0176056b 	.word	0x0176056b
    b1ec:	007c      	.short	0x007c
    b1ee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b1f2:	2200      	movs	r2, #0
    b1f4:	f818 1b01 	ldrb.w	r1, [r8], #1
    b1f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b1fc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    b200:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b204:	2b09      	cmp	r3, #9
    b206:	d9f5      	bls.n	b1f4 <_vfiprintf_r+0x1b4>
    b208:	9206      	str	r2, [sp, #24]
    b20a:	e78e      	b.n	b12a <_vfiprintf_r+0xea>
    b20c:	4658      	mov	r0, fp
    b20e:	f7fe fed7 	bl	9fc0 <_localeconv_r>
    b212:	6843      	ldr	r3, [r0, #4]
    b214:	930d      	str	r3, [sp, #52]	; 0x34
    b216:	4618      	mov	r0, r3
    b218:	f7fd f992 	bl	8540 <strlen>
    b21c:	900e      	str	r0, [sp, #56]	; 0x38
    b21e:	4605      	mov	r5, r0
    b220:	4658      	mov	r0, fp
    b222:	f7fe fecd 	bl	9fc0 <_localeconv_r>
    b226:	6883      	ldr	r3, [r0, #8]
    b228:	930b      	str	r3, [sp, #44]	; 0x2c
    b22a:	2d00      	cmp	r5, #0
    b22c:	f040 84d6 	bne.w	bbdc <_vfiprintf_r+0xb9c>
    b230:	f898 1000 	ldrb.w	r1, [r8]
    b234:	e777      	b.n	b126 <_vfiprintf_r+0xe6>
    b236:	f898 1000 	ldrb.w	r1, [r8]
    b23a:	f046 0620 	orr.w	r6, r6, #32
    b23e:	e772      	b.n	b126 <_vfiprintf_r+0xe6>
    b240:	f046 0610 	orr.w	r6, r6, #16
    b244:	06b4      	lsls	r4, r6, #26
    b246:	f140 818e 	bpl.w	b566 <_vfiprintf_r+0x526>
    b24a:	9b07      	ldr	r3, [sp, #28]
    b24c:	3307      	adds	r3, #7
    b24e:	f023 0307 	bic.w	r3, r3, #7
    b252:	461a      	mov	r2, r3
    b254:	6859      	ldr	r1, [r3, #4]
    b256:	f852 3b08 	ldr.w	r3, [r2], #8
    b25a:	9207      	str	r2, [sp, #28]
    b25c:	460a      	mov	r2, r1
    b25e:	2900      	cmp	r1, #0
    b260:	f2c0 8470 	blt.w	bb44 <_vfiprintf_r+0xb04>
    b264:	1c79      	adds	r1, r7, #1
    b266:	f000 85a2 	beq.w	bdae <_vfiprintf_r+0xd6e>
    b26a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    b26e:	9103      	str	r1, [sp, #12]
    b270:	ea53 0102 	orrs.w	r1, r3, r2
    b274:	f000 843f 	beq.w	baf6 <_vfiprintf_r+0xab6>
    b278:	2b0a      	cmp	r3, #10
    b27a:	f172 0100 	sbcs.w	r1, r2, #0
    b27e:	f080 8541 	bcs.w	bd04 <_vfiprintf_r+0xcc4>
    b282:	3330      	adds	r3, #48	; 0x30
    b284:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b288:	9e03      	ldr	r6, [sp, #12]
    b28a:	2301      	movs	r3, #1
    b28c:	9304      	str	r3, [sp, #16]
    b28e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b292:	9b04      	ldr	r3, [sp, #16]
    b294:	42bb      	cmp	r3, r7
    b296:	bfb8      	it	lt
    b298:	463b      	movlt	r3, r7
    b29a:	9303      	str	r3, [sp, #12]
    b29c:	2300      	movs	r3, #0
    b29e:	9308      	str	r3, [sp, #32]
    b2a0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b2a4:	2b00      	cmp	r3, #0
    b2a6:	f000 80cb 	beq.w	b440 <_vfiprintf_r+0x400>
    b2aa:	9b03      	ldr	r3, [sp, #12]
    b2ac:	3301      	adds	r3, #1
    b2ae:	9303      	str	r3, [sp, #12]
    b2b0:	e0c6      	b.n	b440 <_vfiprintf_r+0x400>
    b2b2:	ee18 1a10 	vmov	r1, s16
    b2b6:	4658      	mov	r0, fp
    b2b8:	ee18 5a10 	vmov	r5, s16
    b2bc:	f001 f840 	bl	c340 <__swsetup_r>
    b2c0:	2800      	cmp	r0, #0
    b2c2:	f040 8652 	bne.w	bf6a <_vfiprintf_r+0xf2a>
    b2c6:	89aa      	ldrh	r2, [r5, #12]
    b2c8:	f002 031a 	and.w	r3, r2, #26
    b2cc:	2b0a      	cmp	r3, #10
    b2ce:	f47f aef6 	bne.w	b0be <_vfiprintf_r+0x7e>
    b2d2:	ee18 1a10 	vmov	r1, s16
    b2d6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	f6ff aeef 	blt.w	b0be <_vfiprintf_r+0x7e>
    b2e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b2e2:	07db      	lsls	r3, r3, #31
    b2e4:	d402      	bmi.n	b2ec <_vfiprintf_r+0x2ac>
    b2e6:	0597      	lsls	r7, r2, #22
    b2e8:	f140 8612 	bpl.w	bf10 <_vfiprintf_r+0xed0>
    b2ec:	ee18 1a10 	vmov	r1, s16
    b2f0:	4623      	mov	r3, r4
    b2f2:	4632      	mov	r2, r6
    b2f4:	4658      	mov	r0, fp
    b2f6:	f000 fe69 	bl	bfcc <__sbprintf>
    b2fa:	9005      	str	r0, [sp, #20]
    b2fc:	9805      	ldr	r0, [sp, #20]
    b2fe:	b045      	add	sp, #276	; 0x114
    b300:	ecbd 8b02 	vpop	{d8}
    b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b308:	f046 0610 	orr.w	r6, r6, #16
    b30c:	f016 0220 	ands.w	r2, r6, #32
    b310:	f000 8136 	beq.w	b580 <_vfiprintf_r+0x540>
    b314:	9b07      	ldr	r3, [sp, #28]
    b316:	3307      	adds	r3, #7
    b318:	f023 0307 	bic.w	r3, r3, #7
    b31c:	4619      	mov	r1, r3
    b31e:	685a      	ldr	r2, [r3, #4]
    b320:	f851 3b08 	ldr.w	r3, [r1], #8
    b324:	9107      	str	r1, [sp, #28]
    b326:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b32a:	9103      	str	r1, [sp, #12]
    b32c:	2100      	movs	r1, #0
    b32e:	2000      	movs	r0, #0
    b330:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    b334:	1c78      	adds	r0, r7, #1
    b336:	f000 8210 	beq.w	b75a <_vfiprintf_r+0x71a>
    b33a:	9803      	ldr	r0, [sp, #12]
    b33c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    b340:	ea53 0002 	orrs.w	r0, r3, r2
    b344:	f040 8208 	bne.w	b758 <_vfiprintf_r+0x718>
    b348:	2f00      	cmp	r7, #0
    b34a:	f040 8538 	bne.w	bdbe <_vfiprintf_r+0xd7e>
    b34e:	2900      	cmp	r1, #0
    b350:	f040 83d5 	bne.w	bafe <_vfiprintf_r+0xabe>
    b354:	9b03      	ldr	r3, [sp, #12]
    b356:	f013 0301 	ands.w	r3, r3, #1
    b35a:	9304      	str	r3, [sp, #16]
    b35c:	f000 8411 	beq.w	bb82 <_vfiprintf_r+0xb42>
    b360:	2330      	movs	r3, #48	; 0x30
    b362:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b366:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b36a:	e792      	b.n	b292 <_vfiprintf_r+0x252>
    b36c:	2208      	movs	r2, #8
    b36e:	2100      	movs	r1, #0
    b370:	4650      	mov	r0, sl
    b372:	f7fc fb29 	bl	79c8 <memset>
    b376:	2301      	movs	r3, #1
    b378:	441c      	add	r4, r3
    b37a:	e6ad      	b.n	b0d8 <_vfiprintf_r+0x98>
    b37c:	20001590 	.word	0x20001590
    b380:	ebb4 0608 	subs.w	r6, r4, r8
    b384:	4605      	mov	r5, r0
    b386:	d01b      	beq.n	b3c0 <_vfiprintf_r+0x380>
    b388:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b38a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    b38c:	3301      	adds	r3, #1
    b38e:	4432      	add	r2, r6
    b390:	2b07      	cmp	r3, #7
    b392:	e9c9 8600 	strd	r8, r6, [r9]
    b396:	921a      	str	r2, [sp, #104]	; 0x68
    b398:	9319      	str	r3, [sp, #100]	; 0x64
    b39a:	dd1c      	ble.n	b3d6 <_vfiprintf_r+0x396>
    b39c:	2a00      	cmp	r2, #0
    b39e:	f000 83a6 	beq.w	baee <_vfiprintf_r+0xaae>
    b3a2:	ee18 1a10 	vmov	r1, s16
    b3a6:	aa18      	add	r2, sp, #96	; 0x60
    b3a8:	4658      	mov	r0, fp
    b3aa:	f7ff fe0d 	bl	afc8 <__sprint_r.part.0>
    b3ae:	bb20      	cbnz	r0, b3fa <_vfiprintf_r+0x3ba>
    b3b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b3b4:	9b05      	ldr	r3, [sp, #20]
    b3b6:	4433      	add	r3, r6
    b3b8:	9305      	str	r3, [sp, #20]
    b3ba:	2d00      	cmp	r5, #0
    b3bc:	f47f aea8 	bne.w	b110 <_vfiprintf_r+0xd0>
    b3c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b3c2:	2b00      	cmp	r3, #0
    b3c4:	f040 85c1 	bne.w	bf4a <_vfiprintf_r+0xf0a>
    b3c8:	ee18 3a10 	vmov	r3, s16
    b3cc:	2200      	movs	r2, #0
    b3ce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b3d2:	9219      	str	r2, [sp, #100]	; 0x64
    b3d4:	e015      	b.n	b402 <_vfiprintf_r+0x3c2>
    b3d6:	f109 0908 	add.w	r9, r9, #8
    b3da:	e7eb      	b.n	b3b4 <_vfiprintf_r+0x374>
    b3dc:	ee18 1a10 	vmov	r1, s16
    b3e0:	aa18      	add	r2, sp, #96	; 0x60
    b3e2:	4658      	mov	r0, fp
    b3e4:	f7ff fdf0 	bl	afc8 <__sprint_r.part.0>
    b3e8:	2800      	cmp	r0, #0
    b3ea:	f000 80a6 	beq.w	b53a <_vfiprintf_r+0x4fa>
    b3ee:	9b08      	ldr	r3, [sp, #32]
    b3f0:	b11b      	cbz	r3, b3fa <_vfiprintf_r+0x3ba>
    b3f2:	9908      	ldr	r1, [sp, #32]
    b3f4:	4658      	mov	r0, fp
    b3f6:	f7fd f9b5 	bl	8764 <_free_r>
    b3fa:	ee18 3a10 	vmov	r3, s16
    b3fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b402:	ee18 2a10 	vmov	r2, s16
    b406:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b408:	f012 0f01 	tst.w	r2, #1
    b40c:	b29a      	uxth	r2, r3
    b40e:	f000 80a0 	beq.w	b552 <_vfiprintf_r+0x512>
    b412:	0650      	lsls	r0, r2, #25
    b414:	f100 85b2 	bmi.w	bf7c <_vfiprintf_r+0xf3c>
    b418:	9805      	ldr	r0, [sp, #20]
    b41a:	b045      	add	sp, #276	; 0x114
    b41c:	ecbd 8b02 	vpop	{d8}
    b420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b424:	2900      	cmp	r1, #0
    b426:	d0cb      	beq.n	b3c0 <_vfiprintf_r+0x380>
    b428:	2300      	movs	r3, #0
    b42a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b42e:	2301      	movs	r3, #1
    b430:	e9cd 3303 	strd	r3, r3, [sp, #12]
    b434:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    b438:	ac2b      	add	r4, sp, #172	; 0xac
    b43a:	2300      	movs	r3, #0
    b43c:	9308      	str	r3, [sp, #32]
    b43e:	461f      	mov	r7, r3
    b440:	f016 0302 	ands.w	r3, r6, #2
    b444:	9309      	str	r3, [sp, #36]	; 0x24
    b446:	d002      	beq.n	b44e <_vfiprintf_r+0x40e>
    b448:	9b03      	ldr	r3, [sp, #12]
    b44a:	3302      	adds	r3, #2
    b44c:	9303      	str	r3, [sp, #12]
    b44e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    b452:	930a      	str	r3, [sp, #40]	; 0x28
    b454:	d105      	bne.n	b462 <_vfiprintf_r+0x422>
    b456:	9b06      	ldr	r3, [sp, #24]
    b458:	9a03      	ldr	r2, [sp, #12]
    b45a:	1a9d      	subs	r5, r3, r2
    b45c:	2d00      	cmp	r5, #0
    b45e:	f300 827b 	bgt.w	b958 <_vfiprintf_r+0x918>
    b462:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b466:	1c41      	adds	r1, r0, #1
    b468:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b46c:	b182      	cbz	r2, b490 <_vfiprintf_r+0x450>
    b46e:	2201      	movs	r2, #1
    b470:	3301      	adds	r3, #1
    b472:	f8c9 2004 	str.w	r2, [r9, #4]
    b476:	2907      	cmp	r1, #7
    b478:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    b47c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b480:	f8c9 2000 	str.w	r2, [r9]
    b484:	f300 824a 	bgt.w	b91c <_vfiprintf_r+0x8dc>
    b488:	4608      	mov	r0, r1
    b48a:	f109 0908 	add.w	r9, r9, #8
    b48e:	3101      	adds	r1, #1
    b490:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b492:	b1e2      	cbz	r2, b4ce <_vfiprintf_r+0x48e>
    b494:	aa11      	add	r2, sp, #68	; 0x44
    b496:	3302      	adds	r3, #2
    b498:	f8c9 2000 	str.w	r2, [r9]
    b49c:	2907      	cmp	r1, #7
    b49e:	f04f 0202 	mov.w	r2, #2
    b4a2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b4a6:	f8c9 2004 	str.w	r2, [r9, #4]
    b4aa:	f340 8250 	ble.w	b94e <_vfiprintf_r+0x90e>
    b4ae:	2b00      	cmp	r3, #0
    b4b0:	f000 8343 	beq.w	bb3a <_vfiprintf_r+0xafa>
    b4b4:	ee18 1a10 	vmov	r1, s16
    b4b8:	aa18      	add	r2, sp, #96	; 0x60
    b4ba:	4658      	mov	r0, fp
    b4bc:	f7ff fd84 	bl	afc8 <__sprint_r.part.0>
    b4c0:	2800      	cmp	r0, #0
    b4c2:	d194      	bne.n	b3ee <_vfiprintf_r+0x3ae>
    b4c4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b4c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4cc:	1c41      	adds	r1, r0, #1
    b4ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b4d0:	2a80      	cmp	r2, #128	; 0x80
    b4d2:	f000 8184 	beq.w	b7de <_vfiprintf_r+0x79e>
    b4d6:	9a04      	ldr	r2, [sp, #16]
    b4d8:	1abd      	subs	r5, r7, r2
    b4da:	2d00      	cmp	r5, #0
    b4dc:	f300 81d7 	bgt.w	b88e <_vfiprintf_r+0x84e>
    b4e0:	9a04      	ldr	r2, [sp, #16]
    b4e2:	f8c9 4000 	str.w	r4, [r9]
    b4e6:	4413      	add	r3, r2
    b4e8:	2907      	cmp	r1, #7
    b4ea:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b4ee:	f8c9 2004 	str.w	r2, [r9, #4]
    b4f2:	f340 816e 	ble.w	b7d2 <_vfiprintf_r+0x792>
    b4f6:	2b00      	cmp	r3, #0
    b4f8:	f000 8275 	beq.w	b9e6 <_vfiprintf_r+0x9a6>
    b4fc:	ee18 1a10 	vmov	r1, s16
    b500:	aa18      	add	r2, sp, #96	; 0x60
    b502:	4658      	mov	r0, fp
    b504:	f7ff fd60 	bl	afc8 <__sprint_r.part.0>
    b508:	2800      	cmp	r0, #0
    b50a:	f47f af70 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b50e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b510:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b514:	0775      	lsls	r5, r6, #29
    b516:	d505      	bpl.n	b524 <_vfiprintf_r+0x4e4>
    b518:	9a06      	ldr	r2, [sp, #24]
    b51a:	9903      	ldr	r1, [sp, #12]
    b51c:	1a54      	subs	r4, r2, r1
    b51e:	2c00      	cmp	r4, #0
    b520:	f300 826b 	bgt.w	b9fa <_vfiprintf_r+0x9ba>
    b524:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    b528:	9803      	ldr	r0, [sp, #12]
    b52a:	4281      	cmp	r1, r0
    b52c:	bfac      	ite	ge
    b52e:	1852      	addge	r2, r2, r1
    b530:	1812      	addlt	r2, r2, r0
    b532:	9205      	str	r2, [sp, #20]
    b534:	2b00      	cmp	r3, #0
    b536:	f47f af51 	bne.w	b3dc <_vfiprintf_r+0x39c>
    b53a:	9908      	ldr	r1, [sp, #32]
    b53c:	2300      	movs	r3, #0
    b53e:	9319      	str	r3, [sp, #100]	; 0x64
    b540:	2900      	cmp	r1, #0
    b542:	f000 8149 	beq.w	b7d8 <_vfiprintf_r+0x798>
    b546:	4658      	mov	r0, fp
    b548:	f7fd f90c 	bl	8764 <_free_r>
    b54c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b550:	e5c1      	b.n	b0d6 <_vfiprintf_r+0x96>
    b552:	059c      	lsls	r4, r3, #22
    b554:	f53f af5d 	bmi.w	b412 <_vfiprintf_r+0x3d2>
    b558:	ee18 4a10 	vmov	r4, s16
    b55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b55e:	f7fc fe13 	bl	8188 <__retarget_lock_release_recursive>
    b562:	89a2      	ldrh	r2, [r4, #12]
    b564:	e755      	b.n	b412 <_vfiprintf_r+0x3d2>
    b566:	06f0      	lsls	r0, r6, #27
    b568:	9a07      	ldr	r2, [sp, #28]
    b56a:	f100 831f 	bmi.w	bbac <_vfiprintf_r+0xb6c>
    b56e:	0671      	lsls	r1, r6, #25
    b570:	f140 8319 	bpl.w	bba6 <_vfiprintf_r+0xb66>
    b574:	f932 3b04 	ldrsh.w	r3, [r2], #4
    b578:	9207      	str	r2, [sp, #28]
    b57a:	17da      	asrs	r2, r3, #31
    b57c:	4611      	mov	r1, r2
    b57e:	e66e      	b.n	b25e <_vfiprintf_r+0x21e>
    b580:	f016 0310 	ands.w	r3, r6, #16
    b584:	9907      	ldr	r1, [sp, #28]
    b586:	f040 8309 	bne.w	bb9c <_vfiprintf_r+0xb5c>
    b58a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    b58e:	f000 8301 	beq.w	bb94 <_vfiprintf_r+0xb54>
    b592:	461a      	mov	r2, r3
    b594:	f851 3b04 	ldr.w	r3, [r1], #4
    b598:	9107      	str	r1, [sp, #28]
    b59a:	b29b      	uxth	r3, r3
    b59c:	e6c3      	b.n	b326 <_vfiprintf_r+0x2e6>
    b59e:	9b07      	ldr	r3, [sp, #28]
    b5a0:	461a      	mov	r2, r3
    b5a2:	2300      	movs	r3, #0
    b5a4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b5a8:	4613      	mov	r3, r2
    b5aa:	f853 4b04 	ldr.w	r4, [r3], #4
    b5ae:	9303      	str	r3, [sp, #12]
    b5b0:	2c00      	cmp	r4, #0
    b5b2:	f000 8412 	beq.w	bdda <_vfiprintf_r+0xd9a>
    b5b6:	2953      	cmp	r1, #83	; 0x53
    b5b8:	f000 8365 	beq.w	bc86 <_vfiprintf_r+0xc46>
    b5bc:	f016 0510 	ands.w	r5, r6, #16
    b5c0:	f040 8361 	bne.w	bc86 <_vfiprintf_r+0xc46>
    b5c4:	1c7b      	adds	r3, r7, #1
    b5c6:	f000 84b3 	beq.w	bf30 <_vfiprintf_r+0xef0>
    b5ca:	463a      	mov	r2, r7
    b5cc:	4629      	mov	r1, r5
    b5ce:	4620      	mov	r0, r4
    b5d0:	f7fe fcfe 	bl	9fd0 <memchr>
    b5d4:	9008      	str	r0, [sp, #32]
    b5d6:	2800      	cmp	r0, #0
    b5d8:	f000 849f 	beq.w	bf1a <_vfiprintf_r+0xeda>
    b5dc:	1b03      	subs	r3, r0, r4
    b5de:	9a03      	ldr	r2, [sp, #12]
    b5e0:	9304      	str	r3, [sp, #16]
    b5e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b5e6:	462f      	mov	r7, r5
    b5e8:	9207      	str	r2, [sp, #28]
    b5ea:	9303      	str	r3, [sp, #12]
    b5ec:	9508      	str	r5, [sp, #32]
    b5ee:	e657      	b.n	b2a0 <_vfiprintf_r+0x260>
    b5f0:	2943      	cmp	r1, #67	; 0x43
    b5f2:	d002      	beq.n	b5fa <_vfiprintf_r+0x5ba>
    b5f4:	06f5      	lsls	r5, r6, #27
    b5f6:	f140 832d 	bpl.w	bc54 <_vfiprintf_r+0xc14>
    b5fa:	9d07      	ldr	r5, [sp, #28]
    b5fc:	2208      	movs	r2, #8
    b5fe:	2100      	movs	r1, #0
    b600:	a816      	add	r0, sp, #88	; 0x58
    b602:	ac2b      	add	r4, sp, #172	; 0xac
    b604:	f7fc f9e0 	bl	79c8 <memset>
    b608:	ab16      	add	r3, sp, #88	; 0x58
    b60a:	f855 2b04 	ldr.w	r2, [r5], #4
    b60e:	4621      	mov	r1, r4
    b610:	4658      	mov	r0, fp
    b612:	f7ff fc93 	bl	af3c <_wcrtomb_r>
    b616:	4603      	mov	r3, r0
    b618:	3301      	adds	r3, #1
    b61a:	9004      	str	r0, [sp, #16]
    b61c:	f000 84b3 	beq.w	bf86 <_vfiprintf_r+0xf46>
    b620:	9b04      	ldr	r3, [sp, #16]
    b622:	9507      	str	r5, [sp, #28]
    b624:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b628:	9303      	str	r3, [sp, #12]
    b62a:	2300      	movs	r3, #0
    b62c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b630:	e703      	b.n	b43a <_vfiprintf_r+0x3fa>
    b632:	9b07      	ldr	r3, [sp, #28]
    b634:	f853 2b04 	ldr.w	r2, [r3], #4
    b638:	9206      	str	r2, [sp, #24]
    b63a:	2a00      	cmp	r2, #0
    b63c:	f280 829c 	bge.w	bb78 <_vfiprintf_r+0xb38>
    b640:	9a06      	ldr	r2, [sp, #24]
    b642:	4252      	negs	r2, r2
    b644:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b648:	f898 1000 	ldrb.w	r1, [r8]
    b64c:	f046 0604 	orr.w	r6, r6, #4
    b650:	e569      	b.n	b126 <_vfiprintf_r+0xe6>
    b652:	f898 1000 	ldrb.w	r1, [r8]
    b656:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    b65a:	e564      	b.n	b126 <_vfiprintf_r+0xe6>
    b65c:	f898 1000 	ldrb.w	r1, [r8]
    b660:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    b664:	e55f      	b.n	b126 <_vfiprintf_r+0xe6>
    b666:	4642      	mov	r2, r8
    b668:	f812 1b01 	ldrb.w	r1, [r2], #1
    b66c:	292a      	cmp	r1, #42	; 0x2a
    b66e:	f000 8496 	beq.w	bf9e <_vfiprintf_r+0xf5e>
    b672:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b676:	2b09      	cmp	r3, #9
    b678:	4690      	mov	r8, r2
    b67a:	f04f 0700 	mov.w	r7, #0
    b67e:	f63f ad54 	bhi.w	b12a <_vfiprintf_r+0xea>
    b682:	f818 1b01 	ldrb.w	r1, [r8], #1
    b686:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b68a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    b68e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b692:	2b09      	cmp	r3, #9
    b694:	d9f5      	bls.n	b682 <_vfiprintf_r+0x642>
    b696:	e548      	b.n	b12a <_vfiprintf_r+0xea>
    b698:	f898 1000 	ldrb.w	r1, [r8]
    b69c:	f046 0601 	orr.w	r6, r6, #1
    b6a0:	e541      	b.n	b126 <_vfiprintf_r+0xe6>
    b6a2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	f47f adc2 	bne.w	b230 <_vfiprintf_r+0x1f0>
    b6ac:	2320      	movs	r3, #32
    b6ae:	f898 1000 	ldrb.w	r1, [r8]
    b6b2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b6b6:	e536      	b.n	b126 <_vfiprintf_r+0xe6>
    b6b8:	f898 1000 	ldrb.w	r1, [r8]
    b6bc:	296c      	cmp	r1, #108	; 0x6c
    b6be:	bf03      	ittte	eq
    b6c0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b6c4:	f046 0620 	orreq.w	r6, r6, #32
    b6c8:	f108 0801 	addeq.w	r8, r8, #1
    b6cc:	f046 0610 	orrne.w	r6, r6, #16
    b6d0:	e529      	b.n	b126 <_vfiprintf_r+0xe6>
    b6d2:	f898 1000 	ldrb.w	r1, [r8]
    b6d6:	2968      	cmp	r1, #104	; 0x68
    b6d8:	bf03      	ittte	eq
    b6da:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b6de:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    b6e2:	f108 0801 	addeq.w	r8, r8, #1
    b6e6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    b6ea:	e51c      	b.n	b126 <_vfiprintf_r+0xe6>
    b6ec:	f046 0310 	orr.w	r3, r6, #16
    b6f0:	9303      	str	r3, [sp, #12]
    b6f2:	9b03      	ldr	r3, [sp, #12]
    b6f4:	f013 0220 	ands.w	r2, r3, #32
    b6f8:	f000 8206 	beq.w	bb08 <_vfiprintf_r+0xac8>
    b6fc:	9b07      	ldr	r3, [sp, #28]
    b6fe:	3307      	adds	r3, #7
    b700:	f023 0307 	bic.w	r3, r3, #7
    b704:	4619      	mov	r1, r3
    b706:	685a      	ldr	r2, [r3, #4]
    b708:	f851 3b08 	ldr.w	r3, [r1], #8
    b70c:	9107      	str	r1, [sp, #28]
    b70e:	2101      	movs	r1, #1
    b710:	e60d      	b.n	b32e <_vfiprintf_r+0x2ee>
    b712:	9a07      	ldr	r2, [sp, #28]
    b714:	f046 0302 	orr.w	r3, r6, #2
    b718:	9303      	str	r3, [sp, #12]
    b71a:	f852 3b04 	ldr.w	r3, [r2], #4
    b71e:	9207      	str	r2, [sp, #28]
    b720:	f647 0230 	movw	r2, #30768	; 0x7830
    b724:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    b728:	4ab8      	ldr	r2, [pc, #736]	; (ba0c <_vfiprintf_r+0x9cc>)
    b72a:	920c      	str	r2, [sp, #48]	; 0x30
    b72c:	2102      	movs	r1, #2
    b72e:	2200      	movs	r2, #0
    b730:	e5fd      	b.n	b32e <_vfiprintf_r+0x2ee>
    b732:	06b7      	lsls	r7, r6, #26
    b734:	f100 8248 	bmi.w	bbc8 <_vfiprintf_r+0xb88>
    b738:	06f5      	lsls	r5, r6, #27
    b73a:	f100 8346 	bmi.w	bdca <_vfiprintf_r+0xd8a>
    b73e:	0674      	lsls	r4, r6, #25
    b740:	f100 83d5 	bmi.w	beee <_vfiprintf_r+0xeae>
    b744:	05b0      	lsls	r0, r6, #22
    b746:	f140 8340 	bpl.w	bdca <_vfiprintf_r+0xd8a>
    b74a:	9b07      	ldr	r3, [sp, #28]
    b74c:	9905      	ldr	r1, [sp, #20]
    b74e:	f853 2b04 	ldr.w	r2, [r3], #4
    b752:	9307      	str	r3, [sp, #28]
    b754:	7011      	strb	r1, [r2, #0]
    b756:	e4be      	b.n	b0d6 <_vfiprintf_r+0x96>
    b758:	9603      	str	r6, [sp, #12]
    b75a:	2901      	cmp	r1, #1
    b75c:	f43f ad8c 	beq.w	b278 <_vfiprintf_r+0x238>
    b760:	2902      	cmp	r1, #2
    b762:	ac44      	add	r4, sp, #272	; 0x110
    b764:	d111      	bne.n	b78a <_vfiprintf_r+0x74a>
    b766:	980c      	ldr	r0, [sp, #48]	; 0x30
    b768:	f003 010f 	and.w	r1, r3, #15
    b76c:	091b      	lsrs	r3, r3, #4
    b76e:	5c41      	ldrb	r1, [r0, r1]
    b770:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b774:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    b778:	0912      	lsrs	r2, r2, #4
    b77a:	ea53 0102 	orrs.w	r1, r3, r2
    b77e:	d1f3      	bne.n	b768 <_vfiprintf_r+0x728>
    b780:	9e03      	ldr	r6, [sp, #12]
    b782:	ab44      	add	r3, sp, #272	; 0x110
    b784:	1b1b      	subs	r3, r3, r4
    b786:	9304      	str	r3, [sp, #16]
    b788:	e583      	b.n	b292 <_vfiprintf_r+0x252>
    b78a:	f003 0107 	and.w	r1, r3, #7
    b78e:	08db      	lsrs	r3, r3, #3
    b790:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    b794:	08d2      	lsrs	r2, r2, #3
    b796:	3130      	adds	r1, #48	; 0x30
    b798:	ea53 0502 	orrs.w	r5, r3, r2
    b79c:	4620      	mov	r0, r4
    b79e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b7a2:	d1f2      	bne.n	b78a <_vfiprintf_r+0x74a>
    b7a4:	9e03      	ldr	r6, [sp, #12]
    b7a6:	07f3      	lsls	r3, r6, #31
    b7a8:	d5eb      	bpl.n	b782 <_vfiprintf_r+0x742>
    b7aa:	2930      	cmp	r1, #48	; 0x30
    b7ac:	d0e8      	beq.n	b780 <_vfiprintf_r+0x740>
    b7ae:	2330      	movs	r3, #48	; 0x30
    b7b0:	3802      	subs	r0, #2
    b7b2:	f804 3c01 	strb.w	r3, [r4, #-1]
    b7b6:	ab44      	add	r3, sp, #272	; 0x110
    b7b8:	1a1b      	subs	r3, r3, r0
    b7ba:	9e03      	ldr	r6, [sp, #12]
    b7bc:	9304      	str	r3, [sp, #16]
    b7be:	4604      	mov	r4, r0
    b7c0:	e567      	b.n	b292 <_vfiprintf_r+0x252>
    b7c2:	9b04      	ldr	r3, [sp, #16]
    b7c4:	941b      	str	r4, [sp, #108]	; 0x6c
    b7c6:	2201      	movs	r2, #1
    b7c8:	931c      	str	r3, [sp, #112]	; 0x70
    b7ca:	931a      	str	r3, [sp, #104]	; 0x68
    b7cc:	9219      	str	r2, [sp, #100]	; 0x64
    b7ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b7d2:	f109 0908 	add.w	r9, r9, #8
    b7d6:	e69d      	b.n	b514 <_vfiprintf_r+0x4d4>
    b7d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b7dc:	e47b      	b.n	b0d6 <_vfiprintf_r+0x96>
    b7de:	9a06      	ldr	r2, [sp, #24]
    b7e0:	9d03      	ldr	r5, [sp, #12]
    b7e2:	1b55      	subs	r5, r2, r5
    b7e4:	2d00      	cmp	r5, #0
    b7e6:	f77f ae76 	ble.w	b4d6 <_vfiprintf_r+0x496>
    b7ea:	2d10      	cmp	r5, #16
    b7ec:	f340 83bb 	ble.w	bf66 <_vfiprintf_r+0xf26>
    b7f0:	9409      	str	r4, [sp, #36]	; 0x24
    b7f2:	ee18 4a10 	vmov	r4, s16
    b7f6:	e007      	b.n	b808 <_vfiprintf_r+0x7c8>
    b7f8:	f100 0c02 	add.w	ip, r0, #2
    b7fc:	f109 0908 	add.w	r9, r9, #8
    b800:	4610      	mov	r0, r2
    b802:	3d10      	subs	r5, #16
    b804:	2d10      	cmp	r5, #16
    b806:	dd1e      	ble.n	b846 <_vfiprintf_r+0x806>
    b808:	4981      	ldr	r1, [pc, #516]	; (ba10 <_vfiprintf_r+0x9d0>)
    b80a:	f8c9 1000 	str.w	r1, [r9]
    b80e:	1c42      	adds	r2, r0, #1
    b810:	3310      	adds	r3, #16
    b812:	2110      	movs	r1, #16
    b814:	2a07      	cmp	r2, #7
    b816:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b81a:	f8c9 1004 	str.w	r1, [r9, #4]
    b81e:	ddeb      	ble.n	b7f8 <_vfiprintf_r+0x7b8>
    b820:	aa18      	add	r2, sp, #96	; 0x60
    b822:	2b00      	cmp	r3, #0
    b824:	d074      	beq.n	b910 <_vfiprintf_r+0x8d0>
    b826:	4621      	mov	r1, r4
    b828:	4658      	mov	r0, fp
    b82a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b82e:	f7ff fbcb 	bl	afc8 <__sprint_r.part.0>
    b832:	2800      	cmp	r0, #0
    b834:	f47f addb 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b838:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b83c:	3d10      	subs	r5, #16
    b83e:	2d10      	cmp	r5, #16
    b840:	f100 0c01 	add.w	ip, r0, #1
    b844:	dce0      	bgt.n	b808 <_vfiprintf_r+0x7c8>
    b846:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b848:	4a71      	ldr	r2, [pc, #452]	; (ba10 <_vfiprintf_r+0x9d0>)
    b84a:	f8c9 5004 	str.w	r5, [r9, #4]
    b84e:	442b      	add	r3, r5
    b850:	f1bc 0f07 	cmp.w	ip, #7
    b854:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    b858:	f8c9 2000 	str.w	r2, [r9]
    b85c:	f340 8194 	ble.w	bb88 <_vfiprintf_r+0xb48>
    b860:	2b00      	cmp	r3, #0
    b862:	f000 831f 	beq.w	bea4 <_vfiprintf_r+0xe64>
    b866:	ee18 1a10 	vmov	r1, s16
    b86a:	aa18      	add	r2, sp, #96	; 0x60
    b86c:	4658      	mov	r0, fp
    b86e:	f7ff fbab 	bl	afc8 <__sprint_r.part.0>
    b872:	2800      	cmp	r0, #0
    b874:	f47f adbb 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b878:	9a04      	ldr	r2, [sp, #16]
    b87a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b87e:	1abd      	subs	r5, r7, r2
    b880:	2d00      	cmp	r5, #0
    b882:	f100 0101 	add.w	r1, r0, #1
    b886:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b88a:	f77f ae29 	ble.w	b4e0 <_vfiprintf_r+0x4a0>
    b88e:	2d10      	cmp	r5, #16
    b890:	dd29      	ble.n	b8e6 <_vfiprintf_r+0x8a6>
    b892:	9409      	str	r4, [sp, #36]	; 0x24
    b894:	2710      	movs	r7, #16
    b896:	ee18 4a10 	vmov	r4, s16
    b89a:	e007      	b.n	b8ac <_vfiprintf_r+0x86c>
    b89c:	f100 0c02 	add.w	ip, r0, #2
    b8a0:	f109 0908 	add.w	r9, r9, #8
    b8a4:	4610      	mov	r0, r2
    b8a6:	3d10      	subs	r5, #16
    b8a8:	2d10      	cmp	r5, #16
    b8aa:	dd1a      	ble.n	b8e2 <_vfiprintf_r+0x8a2>
    b8ac:	1c42      	adds	r2, r0, #1
    b8ae:	4958      	ldr	r1, [pc, #352]	; (ba10 <_vfiprintf_r+0x9d0>)
    b8b0:	3310      	adds	r3, #16
    b8b2:	2a07      	cmp	r2, #7
    b8b4:	e9c9 1700 	strd	r1, r7, [r9]
    b8b8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b8bc:	ddee      	ble.n	b89c <_vfiprintf_r+0x85c>
    b8be:	aa18      	add	r2, sp, #96	; 0x60
    b8c0:	b303      	cbz	r3, b904 <_vfiprintf_r+0x8c4>
    b8c2:	4621      	mov	r1, r4
    b8c4:	4658      	mov	r0, fp
    b8c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b8ca:	f7ff fb7d 	bl	afc8 <__sprint_r.part.0>
    b8ce:	2800      	cmp	r0, #0
    b8d0:	f47f ad8d 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b8d4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b8d8:	3d10      	subs	r5, #16
    b8da:	2d10      	cmp	r5, #16
    b8dc:	f100 0c01 	add.w	ip, r0, #1
    b8e0:	dce4      	bgt.n	b8ac <_vfiprintf_r+0x86c>
    b8e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b8e4:	4661      	mov	r1, ip
    b8e6:	4a4a      	ldr	r2, [pc, #296]	; (ba10 <_vfiprintf_r+0x9d0>)
    b8e8:	f8c9 5004 	str.w	r5, [r9, #4]
    b8ec:	442b      	add	r3, r5
    b8ee:	2907      	cmp	r1, #7
    b8f0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b8f4:	f8c9 2000 	str.w	r2, [r9]
    b8f8:	f300 80e7 	bgt.w	baca <_vfiprintf_r+0xa8a>
    b8fc:	f109 0908 	add.w	r9, r9, #8
    b900:	3101      	adds	r1, #1
    b902:	e5ed      	b.n	b4e0 <_vfiprintf_r+0x4a0>
    b904:	f04f 0c01 	mov.w	ip, #1
    b908:	4618      	mov	r0, r3
    b90a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b90e:	e7ca      	b.n	b8a6 <_vfiprintf_r+0x866>
    b910:	f04f 0c01 	mov.w	ip, #1
    b914:	4618      	mov	r0, r3
    b916:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b91a:	e772      	b.n	b802 <_vfiprintf_r+0x7c2>
    b91c:	2b00      	cmp	r3, #0
    b91e:	f000 8104 	beq.w	bb2a <_vfiprintf_r+0xaea>
    b922:	ee18 1a10 	vmov	r1, s16
    b926:	aa18      	add	r2, sp, #96	; 0x60
    b928:	4658      	mov	r0, fp
    b92a:	f7ff fb4d 	bl	afc8 <__sprint_r.part.0>
    b92e:	2800      	cmp	r0, #0
    b930:	f47f ad5d 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b934:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b938:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b93c:	1c41      	adds	r1, r0, #1
    b93e:	e5a7      	b.n	b490 <_vfiprintf_r+0x450>
    b940:	2302      	movs	r3, #2
    b942:	aa11      	add	r2, sp, #68	; 0x44
    b944:	931c      	str	r3, [sp, #112]	; 0x70
    b946:	921b      	str	r2, [sp, #108]	; 0x6c
    b948:	2101      	movs	r1, #1
    b94a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b94e:	4608      	mov	r0, r1
    b950:	f109 0908 	add.w	r9, r9, #8
    b954:	1c41      	adds	r1, r0, #1
    b956:	e5ba      	b.n	b4ce <_vfiprintf_r+0x48e>
    b958:	2d10      	cmp	r5, #16
    b95a:	f340 82e5 	ble.w	bf28 <_vfiprintf_r+0xee8>
    b95e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b962:	940f      	str	r4, [sp, #60]	; 0x3c
    b964:	4608      	mov	r0, r1
    b966:	ee18 4a10 	vmov	r4, s16
    b96a:	e007      	b.n	b97c <_vfiprintf_r+0x93c>
    b96c:	f100 0c02 	add.w	ip, r0, #2
    b970:	f109 0908 	add.w	r9, r9, #8
    b974:	4610      	mov	r0, r2
    b976:	3d10      	subs	r5, #16
    b978:	2d10      	cmp	r5, #16
    b97a:	dd1d      	ble.n	b9b8 <_vfiprintf_r+0x978>
    b97c:	4925      	ldr	r1, [pc, #148]	; (ba14 <_vfiprintf_r+0x9d4>)
    b97e:	f8c9 1000 	str.w	r1, [r9]
    b982:	1c42      	adds	r2, r0, #1
    b984:	3310      	adds	r3, #16
    b986:	2110      	movs	r1, #16
    b988:	2a07      	cmp	r2, #7
    b98a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b98e:	f8c9 1004 	str.w	r1, [r9, #4]
    b992:	ddeb      	ble.n	b96c <_vfiprintf_r+0x92c>
    b994:	aa18      	add	r2, sp, #96	; 0x60
    b996:	b303      	cbz	r3, b9da <_vfiprintf_r+0x99a>
    b998:	4621      	mov	r1, r4
    b99a:	4658      	mov	r0, fp
    b99c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9a0:	f7ff fb12 	bl	afc8 <__sprint_r.part.0>
    b9a4:	2800      	cmp	r0, #0
    b9a6:	f47f ad22 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    b9aa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b9ae:	3d10      	subs	r5, #16
    b9b0:	2d10      	cmp	r5, #16
    b9b2:	f100 0c01 	add.w	ip, r0, #1
    b9b6:	dce1      	bgt.n	b97c <_vfiprintf_r+0x93c>
    b9b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b9ba:	4660      	mov	r0, ip
    b9bc:	4a15      	ldr	r2, [pc, #84]	; (ba14 <_vfiprintf_r+0x9d4>)
    b9be:	f8c9 5004 	str.w	r5, [r9, #4]
    b9c2:	442b      	add	r3, r5
    b9c4:	2807      	cmp	r0, #7
    b9c6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b9ca:	f8c9 2000 	str.w	r2, [r9]
    b9ce:	f300 80c1 	bgt.w	bb54 <_vfiprintf_r+0xb14>
    b9d2:	f109 0908 	add.w	r9, r9, #8
    b9d6:	1c41      	adds	r1, r0, #1
    b9d8:	e546      	b.n	b468 <_vfiprintf_r+0x428>
    b9da:	4618      	mov	r0, r3
    b9dc:	f04f 0c01 	mov.w	ip, #1
    b9e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9e4:	e7c7      	b.n	b976 <_vfiprintf_r+0x936>
    b9e6:	0776      	lsls	r6, r6, #29
    b9e8:	9319      	str	r3, [sp, #100]	; 0x64
    b9ea:	d553      	bpl.n	ba94 <_vfiprintf_r+0xa54>
    b9ec:	9a06      	ldr	r2, [sp, #24]
    b9ee:	9903      	ldr	r1, [sp, #12]
    b9f0:	1a54      	subs	r4, r2, r1
    b9f2:	2c00      	cmp	r4, #0
    b9f4:	dd4e      	ble.n	ba94 <_vfiprintf_r+0xa54>
    b9f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9fa:	2c10      	cmp	r4, #16
    b9fc:	f340 82b0 	ble.w	bf60 <_vfiprintf_r+0xf20>
    ba00:	9919      	ldr	r1, [sp, #100]	; 0x64
    ba02:	ee18 6a10 	vmov	r6, s16
    ba06:	2510      	movs	r5, #16
    ba08:	e00d      	b.n	ba26 <_vfiprintf_r+0x9e6>
    ba0a:	bf00      	nop
    ba0c:	20000c30 	.word	0x20000c30
    ba10:	20001180 	.word	0x20001180
    ba14:	20000c4c 	.word	0x20000c4c
    ba18:	1c88      	adds	r0, r1, #2
    ba1a:	f109 0908 	add.w	r9, r9, #8
    ba1e:	4611      	mov	r1, r2
    ba20:	3c10      	subs	r4, #16
    ba22:	2c10      	cmp	r4, #16
    ba24:	dd1a      	ble.n	ba5c <_vfiprintf_r+0xa1c>
    ba26:	1c4a      	adds	r2, r1, #1
    ba28:	48b3      	ldr	r0, [pc, #716]	; (bcf8 <_vfiprintf_r+0xcb8>)
    ba2a:	3310      	adds	r3, #16
    ba2c:	2a07      	cmp	r2, #7
    ba2e:	e9c9 0500 	strd	r0, r5, [r9]
    ba32:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ba36:	ddef      	ble.n	ba18 <_vfiprintf_r+0x9d8>
    ba38:	aa18      	add	r2, sp, #96	; 0x60
    ba3a:	b333      	cbz	r3, ba8a <_vfiprintf_r+0xa4a>
    ba3c:	4631      	mov	r1, r6
    ba3e:	4658      	mov	r0, fp
    ba40:	f7ff fac2 	bl	afc8 <__sprint_r.part.0>
    ba44:	2800      	cmp	r0, #0
    ba46:	f47f acd2 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    ba4a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    ba4e:	3c10      	subs	r4, #16
    ba50:	2c10      	cmp	r4, #16
    ba52:	f101 0001 	add.w	r0, r1, #1
    ba56:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba5a:	dce4      	bgt.n	ba26 <_vfiprintf_r+0x9e6>
    ba5c:	4aa6      	ldr	r2, [pc, #664]	; (bcf8 <_vfiprintf_r+0xcb8>)
    ba5e:	f8c9 4004 	str.w	r4, [r9, #4]
    ba62:	4423      	add	r3, r4
    ba64:	2807      	cmp	r0, #7
    ba66:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    ba6a:	f8c9 2000 	str.w	r2, [r9]
    ba6e:	f77f ad59 	ble.w	b524 <_vfiprintf_r+0x4e4>
    ba72:	b17b      	cbz	r3, ba94 <_vfiprintf_r+0xa54>
    ba74:	ee18 1a10 	vmov	r1, s16
    ba78:	aa18      	add	r2, sp, #96	; 0x60
    ba7a:	4658      	mov	r0, fp
    ba7c:	f7ff faa4 	bl	afc8 <__sprint_r.part.0>
    ba80:	2800      	cmp	r0, #0
    ba82:	f47f acb4 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    ba86:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ba88:	e54c      	b.n	b524 <_vfiprintf_r+0x4e4>
    ba8a:	2001      	movs	r0, #1
    ba8c:	4619      	mov	r1, r3
    ba8e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba92:	e7c5      	b.n	ba20 <_vfiprintf_r+0x9e0>
    ba94:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    ba98:	9903      	ldr	r1, [sp, #12]
    ba9a:	428a      	cmp	r2, r1
    ba9c:	bfac      	ite	ge
    ba9e:	189b      	addge	r3, r3, r2
    baa0:	185b      	addlt	r3, r3, r1
    baa2:	9305      	str	r3, [sp, #20]
    baa4:	e549      	b.n	b53a <_vfiprintf_r+0x4fa>
    baa6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    baaa:	058f      	lsls	r7, r1, #22
    baac:	ee18 3a10 	vmov	r3, s16
    bab0:	b28a      	uxth	r2, r1
    bab2:	f53f aae8 	bmi.w	b086 <_vfiprintf_r+0x46>
    bab6:	ee18 5a10 	vmov	r5, s16
    baba:	6d98      	ldr	r0, [r3, #88]	; 0x58
    babc:	f7fc fb62 	bl	8184 <__retarget_lock_acquire_recursive>
    bac0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    bac4:	b28a      	uxth	r2, r1
    bac6:	f7ff bade 	b.w	b086 <_vfiprintf_r+0x46>
    baca:	2b00      	cmp	r3, #0
    bacc:	f43f ae79 	beq.w	b7c2 <_vfiprintf_r+0x782>
    bad0:	ee18 1a10 	vmov	r1, s16
    bad4:	aa18      	add	r2, sp, #96	; 0x60
    bad6:	4658      	mov	r0, fp
    bad8:	f7ff fa76 	bl	afc8 <__sprint_r.part.0>
    badc:	2800      	cmp	r0, #0
    bade:	f47f ac86 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    bae2:	9919      	ldr	r1, [sp, #100]	; 0x64
    bae4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bae6:	3101      	adds	r1, #1
    bae8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    baec:	e4f8      	b.n	b4e0 <_vfiprintf_r+0x4a0>
    baee:	9219      	str	r2, [sp, #100]	; 0x64
    baf0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    baf4:	e45e      	b.n	b3b4 <_vfiprintf_r+0x374>
    baf6:	2f00      	cmp	r7, #0
    baf8:	f47f abc3 	bne.w	b282 <_vfiprintf_r+0x242>
    bafc:	9e03      	ldr	r6, [sp, #12]
    bafe:	2700      	movs	r7, #0
    bb00:	9704      	str	r7, [sp, #16]
    bb02:	ac44      	add	r4, sp, #272	; 0x110
    bb04:	f7ff bbc5 	b.w	b292 <_vfiprintf_r+0x252>
    bb08:	9b03      	ldr	r3, [sp, #12]
    bb0a:	f013 0310 	ands.w	r3, r3, #16
    bb0e:	d154      	bne.n	bbba <_vfiprintf_r+0xb7a>
    bb10:	9a03      	ldr	r2, [sp, #12]
    bb12:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    bb16:	f000 816b 	beq.w	bdf0 <_vfiprintf_r+0xdb0>
    bb1a:	9907      	ldr	r1, [sp, #28]
    bb1c:	461a      	mov	r2, r3
    bb1e:	f851 3b04 	ldr.w	r3, [r1], #4
    bb22:	9107      	str	r1, [sp, #28]
    bb24:	b29b      	uxth	r3, r3
    bb26:	2101      	movs	r1, #1
    bb28:	e401      	b.n	b32e <_vfiprintf_r+0x2ee>
    bb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb2c:	2a00      	cmp	r2, #0
    bb2e:	d164      	bne.n	bbfa <_vfiprintf_r+0xbba>
    bb30:	4618      	mov	r0, r3
    bb32:	2101      	movs	r1, #1
    bb34:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb38:	e4c9      	b.n	b4ce <_vfiprintf_r+0x48e>
    bb3a:	2101      	movs	r1, #1
    bb3c:	4618      	mov	r0, r3
    bb3e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb42:	e4c4      	b.n	b4ce <_vfiprintf_r+0x48e>
    bb44:	425b      	negs	r3, r3
    bb46:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    bb4a:	9603      	str	r6, [sp, #12]
    bb4c:	202d      	movs	r0, #45	; 0x2d
    bb4e:	2101      	movs	r1, #1
    bb50:	f7ff bbee 	b.w	b330 <_vfiprintf_r+0x2f0>
    bb54:	2b00      	cmp	r3, #0
    bb56:	f000 8088 	beq.w	bc6a <_vfiprintf_r+0xc2a>
    bb5a:	ee18 1a10 	vmov	r1, s16
    bb5e:	aa18      	add	r2, sp, #96	; 0x60
    bb60:	4658      	mov	r0, fp
    bb62:	f7ff fa31 	bl	afc8 <__sprint_r.part.0>
    bb66:	2800      	cmp	r0, #0
    bb68:	f47f ac41 	bne.w	b3ee <_vfiprintf_r+0x3ae>
    bb6c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bb70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb74:	1c41      	adds	r1, r0, #1
    bb76:	e477      	b.n	b468 <_vfiprintf_r+0x428>
    bb78:	f898 1000 	ldrb.w	r1, [r8]
    bb7c:	9307      	str	r3, [sp, #28]
    bb7e:	f7ff bad2 	b.w	b126 <_vfiprintf_r+0xe6>
    bb82:	ac44      	add	r4, sp, #272	; 0x110
    bb84:	f7ff bb85 	b.w	b292 <_vfiprintf_r+0x252>
    bb88:	f109 0908 	add.w	r9, r9, #8
    bb8c:	f10c 0101 	add.w	r1, ip, #1
    bb90:	4660      	mov	r0, ip
    bb92:	e4a0      	b.n	b4d6 <_vfiprintf_r+0x496>
    bb94:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    bb98:	f040 8197 	bne.w	beca <_vfiprintf_r+0xe8a>
    bb9c:	f851 3b04 	ldr.w	r3, [r1], #4
    bba0:	9107      	str	r1, [sp, #28]
    bba2:	f7ff bbc0 	b.w	b326 <_vfiprintf_r+0x2e6>
    bba6:	05b3      	lsls	r3, r6, #22
    bba8:	f100 8188 	bmi.w	bebc <_vfiprintf_r+0xe7c>
    bbac:	f852 3b04 	ldr.w	r3, [r2], #4
    bbb0:	9207      	str	r2, [sp, #28]
    bbb2:	17da      	asrs	r2, r3, #31
    bbb4:	4611      	mov	r1, r2
    bbb6:	f7ff bb52 	b.w	b25e <_vfiprintf_r+0x21e>
    bbba:	9907      	ldr	r1, [sp, #28]
    bbbc:	f851 3b04 	ldr.w	r3, [r1], #4
    bbc0:	9107      	str	r1, [sp, #28]
    bbc2:	2101      	movs	r1, #1
    bbc4:	f7ff bbb3 	b.w	b32e <_vfiprintf_r+0x2ee>
    bbc8:	9b07      	ldr	r3, [sp, #28]
    bbca:	9805      	ldr	r0, [sp, #20]
    bbcc:	f853 1b04 	ldr.w	r1, [r3], #4
    bbd0:	9307      	str	r3, [sp, #28]
    bbd2:	17c2      	asrs	r2, r0, #31
    bbd4:	e9c1 0200 	strd	r0, r2, [r1]
    bbd8:	f7ff ba7d 	b.w	b0d6 <_vfiprintf_r+0x96>
    bbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bbde:	2b00      	cmp	r3, #0
    bbe0:	f43f ab26 	beq.w	b230 <_vfiprintf_r+0x1f0>
    bbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bbe6:	781b      	ldrb	r3, [r3, #0]
    bbe8:	2b00      	cmp	r3, #0
    bbea:	f43f ab21 	beq.w	b230 <_vfiprintf_r+0x1f0>
    bbee:	f898 1000 	ldrb.w	r1, [r8]
    bbf2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    bbf6:	f7ff ba96 	b.w	b126 <_vfiprintf_r+0xe6>
    bbfa:	2302      	movs	r3, #2
    bbfc:	aa11      	add	r2, sp, #68	; 0x44
    bbfe:	931c      	str	r3, [sp, #112]	; 0x70
    bc00:	921b      	str	r2, [sp, #108]	; 0x6c
    bc02:	2001      	movs	r0, #1
    bc04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc08:	e6a2      	b.n	b950 <_vfiprintf_r+0x910>
    bc0a:	9603      	str	r6, [sp, #12]
    bc0c:	e571      	b.n	b6f2 <_vfiprintf_r+0x6b2>
    bc0e:	4b3b      	ldr	r3, [pc, #236]	; (bcfc <_vfiprintf_r+0xcbc>)
    bc10:	930c      	str	r3, [sp, #48]	; 0x30
    bc12:	f016 0220 	ands.w	r2, r6, #32
    bc16:	d059      	beq.n	bccc <_vfiprintf_r+0xc8c>
    bc18:	9b07      	ldr	r3, [sp, #28]
    bc1a:	3307      	adds	r3, #7
    bc1c:	f023 0307 	bic.w	r3, r3, #7
    bc20:	4618      	mov	r0, r3
    bc22:	685a      	ldr	r2, [r3, #4]
    bc24:	f850 3b08 	ldr.w	r3, [r0], #8
    bc28:	9007      	str	r0, [sp, #28]
    bc2a:	07f4      	lsls	r4, r6, #31
    bc2c:	d509      	bpl.n	bc42 <_vfiprintf_r+0xc02>
    bc2e:	ea53 0002 	orrs.w	r0, r3, r2
    bc32:	d006      	beq.n	bc42 <_vfiprintf_r+0xc02>
    bc34:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    bc38:	2130      	movs	r1, #48	; 0x30
    bc3a:	f046 0602 	orr.w	r6, r6, #2
    bc3e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    bc42:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    bc46:	9103      	str	r1, [sp, #12]
    bc48:	2102      	movs	r1, #2
    bc4a:	f7ff bb70 	b.w	b32e <_vfiprintf_r+0x2ee>
    bc4e:	4b2c      	ldr	r3, [pc, #176]	; (bd00 <_vfiprintf_r+0xcc0>)
    bc50:	930c      	str	r3, [sp, #48]	; 0x30
    bc52:	e7de      	b.n	bc12 <_vfiprintf_r+0xbd2>
    bc54:	9b07      	ldr	r3, [sp, #28]
    bc56:	2101      	movs	r1, #1
    bc58:	f853 2b04 	ldr.w	r2, [r3], #4
    bc5c:	9103      	str	r1, [sp, #12]
    bc5e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    bc62:	9307      	str	r3, [sp, #28]
    bc64:	9104      	str	r1, [sp, #16]
    bc66:	ac2b      	add	r4, sp, #172	; 0xac
    bc68:	e4df      	b.n	b62a <_vfiprintf_r+0x5ea>
    bc6a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    bc6e:	2a00      	cmp	r2, #0
    bc70:	f040 8132 	bne.w	bed8 <_vfiprintf_r+0xe98>
    bc74:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc76:	2a00      	cmp	r2, #0
    bc78:	f47f ae62 	bne.w	b940 <_vfiprintf_r+0x900>
    bc7c:	4618      	mov	r0, r3
    bc7e:	2101      	movs	r1, #1
    bc80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc84:	e427      	b.n	b4d6 <_vfiprintf_r+0x496>
    bc86:	2100      	movs	r1, #0
    bc88:	2208      	movs	r2, #8
    bc8a:	a816      	add	r0, sp, #88	; 0x58
    bc8c:	9413      	str	r4, [sp, #76]	; 0x4c
    bc8e:	f7fb fe9b 	bl	79c8 <memset>
    bc92:	1c79      	adds	r1, r7, #1
    bc94:	f000 80bc 	beq.w	be10 <_vfiprintf_r+0xdd0>
    bc98:	2500      	movs	r5, #0
    bc9a:	9407      	str	r4, [sp, #28]
    bc9c:	462c      	mov	r4, r5
    bc9e:	e00c      	b.n	bcba <_vfiprintf_r+0xc7a>
    bca0:	a92b      	add	r1, sp, #172	; 0xac
    bca2:	4658      	mov	r0, fp
    bca4:	f7ff f94a 	bl	af3c <_wcrtomb_r>
    bca8:	1c42      	adds	r2, r0, #1
    bcaa:	4420      	add	r0, r4
    bcac:	f000 816b 	beq.w	bf86 <_vfiprintf_r+0xf46>
    bcb0:	42b8      	cmp	r0, r7
    bcb2:	dc08      	bgt.n	bcc6 <_vfiprintf_r+0xc86>
    bcb4:	f000 8170 	beq.w	bf98 <_vfiprintf_r+0xf58>
    bcb8:	4604      	mov	r4, r0
    bcba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bcbc:	5952      	ldr	r2, [r2, r5]
    bcbe:	ab16      	add	r3, sp, #88	; 0x58
    bcc0:	3504      	adds	r5, #4
    bcc2:	2a00      	cmp	r2, #0
    bcc4:	d1ec      	bne.n	bca0 <_vfiprintf_r+0xc60>
    bcc6:	9404      	str	r4, [sp, #16]
    bcc8:	9c07      	ldr	r4, [sp, #28]
    bcca:	e0af      	b.n	be2c <_vfiprintf_r+0xdec>
    bccc:	f016 0310 	ands.w	r3, r6, #16
    bcd0:	9807      	ldr	r0, [sp, #28]
    bcd2:	d10c      	bne.n	bcee <_vfiprintf_r+0xcae>
    bcd4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    bcd8:	d005      	beq.n	bce6 <_vfiprintf_r+0xca6>
    bcda:	461a      	mov	r2, r3
    bcdc:	f850 3b04 	ldr.w	r3, [r0], #4
    bce0:	9007      	str	r0, [sp, #28]
    bce2:	b29b      	uxth	r3, r3
    bce4:	e7a1      	b.n	bc2a <_vfiprintf_r+0xbea>
    bce6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    bcea:	f040 80e1 	bne.w	beb0 <_vfiprintf_r+0xe70>
    bcee:	f850 3b04 	ldr.w	r3, [r0], #4
    bcf2:	9007      	str	r0, [sp, #28]
    bcf4:	e799      	b.n	bc2a <_vfiprintf_r+0xbea>
    bcf6:	bf00      	nop
    bcf8:	20000c4c 	.word	0x20000c4c
    bcfc:	20000c30 	.word	0x20000c30
    bd00:	20000c1c 	.word	0x20000c1c
    bd04:	9903      	ldr	r1, [sp, #12]
    bd06:	9704      	str	r7, [sp, #16]
    bd08:	ac44      	add	r4, sp, #272	; 0x110
    bd0a:	469e      	mov	lr, r3
    bd0c:	ee08 ba90 	vmov	s17, fp
    bd10:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    bd14:	f04f 0c00 	mov.w	ip, #0
    bd18:	4623      	mov	r3, r4
    bd1a:	e006      	b.n	bd2a <_vfiprintf_r+0xcea>
    bd1c:	f1be 0f0a 	cmp.w	lr, #10
    bd20:	f172 0200 	sbcs.w	r2, r2, #0
    bd24:	d339      	bcc.n	bd9a <_vfiprintf_r+0xd5a>
    bd26:	46a6      	mov	lr, r4
    bd28:	462a      	mov	r2, r5
    bd2a:	49a6      	ldr	r1, [pc, #664]	; (bfc4 <_vfiprintf_r+0xf84>)
    bd2c:	eb1e 0002 	adds.w	r0, lr, r2
    bd30:	f140 0000 	adc.w	r0, r0, #0
    bd34:	460f      	mov	r7, r1
    bd36:	fba1 1400 	umull	r1, r4, r1, r0
    bd3a:	f024 0103 	bic.w	r1, r4, #3
    bd3e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    bd42:	1a40      	subs	r0, r0, r1
    bd44:	ebbe 0100 	subs.w	r1, lr, r0
    bd48:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    bd4c:	f162 0400 	sbc.w	r4, r2, #0
    bd50:	fb05 f501 	mul.w	r5, r5, r1
    bd54:	fb07 5504 	mla	r5, r7, r4, r5
    bd58:	fba1 4107 	umull	r4, r1, r1, r7
    bd5c:	440d      	add	r5, r1
    bd5e:	2705      	movs	r7, #5
    bd60:	f004 0101 	and.w	r1, r4, #1
    bd64:	fba1 1b07 	umull	r1, fp, r1, r7
    bd68:	1809      	adds	r1, r1, r0
    bd6a:	0864      	lsrs	r4, r4, #1
    bd6c:	3130      	adds	r1, #48	; 0x30
    bd6e:	f803 1c01 	strb.w	r1, [r3, #-1]
    bd72:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    bd76:	f10c 0c01 	add.w	ip, ip, #1
    bd7a:	3b01      	subs	r3, #1
    bd7c:	086d      	lsrs	r5, r5, #1
    bd7e:	2e00      	cmp	r6, #0
    bd80:	d0cc      	beq.n	bd1c <_vfiprintf_r+0xcdc>
    bd82:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bd84:	7809      	ldrb	r1, [r1, #0]
    bd86:	4561      	cmp	r1, ip
    bd88:	d1c8      	bne.n	bd1c <_vfiprintf_r+0xcdc>
    bd8a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    bd8e:	d0c5      	beq.n	bd1c <_vfiprintf_r+0xcdc>
    bd90:	f1be 0f0a 	cmp.w	lr, #10
    bd94:	f172 0200 	sbcs.w	r2, r2, #0
    bd98:	d26c      	bcs.n	be74 <_vfiprintf_r+0xe34>
    bd9a:	461c      	mov	r4, r3
    bd9c:	ab44      	add	r3, sp, #272	; 0x110
    bd9e:	1b1b      	subs	r3, r3, r4
    bda0:	9f04      	ldr	r7, [sp, #16]
    bda2:	9e03      	ldr	r6, [sp, #12]
    bda4:	9304      	str	r3, [sp, #16]
    bda6:	ee18 ba90 	vmov	fp, s17
    bdaa:	f7ff ba72 	b.w	b292 <_vfiprintf_r+0x252>
    bdae:	9603      	str	r6, [sp, #12]
    bdb0:	f7ff ba62 	b.w	b278 <_vfiprintf_r+0x238>
    bdb4:	4658      	mov	r0, fp
    bdb6:	f7fb fcf7 	bl	77a8 <__sinit>
    bdba:	f7ff b95b 	b.w	b074 <_vfiprintf_r+0x34>
    bdbe:	2901      	cmp	r1, #1
    bdc0:	9603      	str	r6, [sp, #12]
    bdc2:	f47f accd 	bne.w	b760 <_vfiprintf_r+0x720>
    bdc6:	f7ff ba5c 	b.w	b282 <_vfiprintf_r+0x242>
    bdca:	9b07      	ldr	r3, [sp, #28]
    bdcc:	9905      	ldr	r1, [sp, #20]
    bdce:	f853 2b04 	ldr.w	r2, [r3], #4
    bdd2:	6011      	str	r1, [r2, #0]
    bdd4:	9307      	str	r3, [sp, #28]
    bdd6:	f7ff b97e 	b.w	b0d6 <_vfiprintf_r+0x96>
    bdda:	2f06      	cmp	r7, #6
    bddc:	463b      	mov	r3, r7
    bdde:	9a03      	ldr	r2, [sp, #12]
    bde0:	4c79      	ldr	r4, [pc, #484]	; (bfc8 <_vfiprintf_r+0xf88>)
    bde2:	9207      	str	r2, [sp, #28]
    bde4:	bf28      	it	cs
    bde6:	2306      	movcs	r3, #6
    bde8:	9304      	str	r3, [sp, #16]
    bdea:	9303      	str	r3, [sp, #12]
    bdec:	f7ff bb25 	b.w	b43a <_vfiprintf_r+0x3fa>
    bdf0:	9b03      	ldr	r3, [sp, #12]
    bdf2:	9907      	ldr	r1, [sp, #28]
    bdf4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    bdf8:	bf14      	ite	ne
    bdfa:	f851 3b04 	ldrne.w	r3, [r1], #4
    bdfe:	f851 3b04 	ldreq.w	r3, [r1], #4
    be02:	9107      	str	r1, [sp, #28]
    be04:	bf1c      	itt	ne
    be06:	4602      	movne	r2, r0
    be08:	b2db      	uxtbne	r3, r3
    be0a:	2101      	movs	r1, #1
    be0c:	f7ff ba8f 	b.w	b32e <_vfiprintf_r+0x2ee>
    be10:	ab16      	add	r3, sp, #88	; 0x58
    be12:	9300      	str	r3, [sp, #0]
    be14:	2300      	movs	r3, #0
    be16:	4619      	mov	r1, r3
    be18:	aa13      	add	r2, sp, #76	; 0x4c
    be1a:	4658      	mov	r0, fp
    be1c:	f7ff f8b4 	bl	af88 <_wcsrtombs_r>
    be20:	4603      	mov	r3, r0
    be22:	3301      	adds	r3, #1
    be24:	9004      	str	r0, [sp, #16]
    be26:	f000 80ae 	beq.w	bf86 <_vfiprintf_r+0xf46>
    be2a:	9413      	str	r4, [sp, #76]	; 0x4c
    be2c:	9b04      	ldr	r3, [sp, #16]
    be2e:	2b00      	cmp	r3, #0
    be30:	d030      	beq.n	be94 <_vfiprintf_r+0xe54>
    be32:	2b63      	cmp	r3, #99	; 0x63
    be34:	dc63      	bgt.n	befe <_vfiprintf_r+0xebe>
    be36:	2300      	movs	r3, #0
    be38:	9308      	str	r3, [sp, #32]
    be3a:	ac2b      	add	r4, sp, #172	; 0xac
    be3c:	2208      	movs	r2, #8
    be3e:	2100      	movs	r1, #0
    be40:	a816      	add	r0, sp, #88	; 0x58
    be42:	f7fb fdc1 	bl	79c8 <memset>
    be46:	9d04      	ldr	r5, [sp, #16]
    be48:	ab16      	add	r3, sp, #88	; 0x58
    be4a:	9300      	str	r3, [sp, #0]
    be4c:	aa13      	add	r2, sp, #76	; 0x4c
    be4e:	462b      	mov	r3, r5
    be50:	4621      	mov	r1, r4
    be52:	4658      	mov	r0, fp
    be54:	f7ff f898 	bl	af88 <_wcsrtombs_r>
    be58:	4285      	cmp	r5, r0
    be5a:	f040 80ab 	bne.w	bfb4 <_vfiprintf_r+0xf74>
    be5e:	9b03      	ldr	r3, [sp, #12]
    be60:	9a04      	ldr	r2, [sp, #16]
    be62:	9307      	str	r3, [sp, #28]
    be64:	2300      	movs	r3, #0
    be66:	54a3      	strb	r3, [r4, r2]
    be68:	461f      	mov	r7, r3
    be6a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    be6e:	9303      	str	r3, [sp, #12]
    be70:	f7ff ba16 	b.w	b2a0 <_vfiprintf_r+0x260>
    be74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    be76:	990d      	ldr	r1, [sp, #52]	; 0x34
    be78:	1a9b      	subs	r3, r3, r2
    be7a:	4618      	mov	r0, r3
    be7c:	9308      	str	r3, [sp, #32]
    be7e:	f7fb fea1 	bl	7bc4 <strncpy>
    be82:	990b      	ldr	r1, [sp, #44]	; 0x2c
    be84:	9b08      	ldr	r3, [sp, #32]
    be86:	784a      	ldrb	r2, [r1, #1]
    be88:	b10a      	cbz	r2, be8e <_vfiprintf_r+0xe4e>
    be8a:	3101      	adds	r1, #1
    be8c:	910b      	str	r1, [sp, #44]	; 0x2c
    be8e:	f04f 0c00 	mov.w	ip, #0
    be92:	e748      	b.n	bd26 <_vfiprintf_r+0xce6>
    be94:	9b03      	ldr	r3, [sp, #12]
    be96:	9307      	str	r3, [sp, #28]
    be98:	9b04      	ldr	r3, [sp, #16]
    be9a:	9303      	str	r3, [sp, #12]
    be9c:	461f      	mov	r7, r3
    be9e:	9308      	str	r3, [sp, #32]
    bea0:	f7ff b9fe 	b.w	b2a0 <_vfiprintf_r+0x260>
    bea4:	2101      	movs	r1, #1
    bea6:	4618      	mov	r0, r3
    bea8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    beac:	f7ff bb13 	b.w	b4d6 <_vfiprintf_r+0x496>
    beb0:	f850 3b04 	ldr.w	r3, [r0], #4
    beb4:	9007      	str	r0, [sp, #28]
    beb6:	4622      	mov	r2, r4
    beb8:	b2db      	uxtb	r3, r3
    beba:	e6b6      	b.n	bc2a <_vfiprintf_r+0xbea>
    bebc:	f912 3b04 	ldrsb.w	r3, [r2], #4
    bec0:	9207      	str	r2, [sp, #28]
    bec2:	17da      	asrs	r2, r3, #31
    bec4:	4611      	mov	r1, r2
    bec6:	f7ff b9ca 	b.w	b25e <_vfiprintf_r+0x21e>
    beca:	f851 3b04 	ldr.w	r3, [r1], #4
    bece:	9107      	str	r1, [sp, #28]
    bed0:	4602      	mov	r2, r0
    bed2:	b2db      	uxtb	r3, r3
    bed4:	f7ff ba27 	b.w	b326 <_vfiprintf_r+0x2e6>
    bed8:	2301      	movs	r3, #1
    beda:	931c      	str	r3, [sp, #112]	; 0x70
    bedc:	2101      	movs	r1, #1
    bede:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    bee2:	931b      	str	r3, [sp, #108]	; 0x6c
    bee4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bee8:	460b      	mov	r3, r1
    beea:	f7ff bacd 	b.w	b488 <_vfiprintf_r+0x448>
    beee:	9b07      	ldr	r3, [sp, #28]
    bef0:	9905      	ldr	r1, [sp, #20]
    bef2:	f853 2b04 	ldr.w	r2, [r3], #4
    bef6:	9307      	str	r3, [sp, #28]
    bef8:	8011      	strh	r1, [r2, #0]
    befa:	f7ff b8ec 	b.w	b0d6 <_vfiprintf_r+0x96>
    befe:	1c59      	adds	r1, r3, #1
    bf00:	4658      	mov	r0, fp
    bf02:	f7f9 fe5f 	bl	5bc4 <_malloc_r>
    bf06:	4604      	mov	r4, r0
    bf08:	2800      	cmp	r0, #0
    bf0a:	d03c      	beq.n	bf86 <_vfiprintf_r+0xf46>
    bf0c:	9008      	str	r0, [sp, #32]
    bf0e:	e795      	b.n	be3c <_vfiprintf_r+0xdfc>
    bf10:	6d88      	ldr	r0, [r1, #88]	; 0x58
    bf12:	f7fc f939 	bl	8188 <__retarget_lock_release_recursive>
    bf16:	f7ff b9e9 	b.w	b2ec <_vfiprintf_r+0x2ac>
    bf1a:	9b03      	ldr	r3, [sp, #12]
    bf1c:	9307      	str	r3, [sp, #28]
    bf1e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    bf22:	9f08      	ldr	r7, [sp, #32]
    bf24:	f7ff b9bc 	b.w	b2a0 <_vfiprintf_r+0x260>
    bf28:	9819      	ldr	r0, [sp, #100]	; 0x64
    bf2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bf2c:	3001      	adds	r0, #1
    bf2e:	e545      	b.n	b9bc <_vfiprintf_r+0x97c>
    bf30:	9b03      	ldr	r3, [sp, #12]
    bf32:	9307      	str	r3, [sp, #28]
    bf34:	4620      	mov	r0, r4
    bf36:	f7fc fb03 	bl	8540 <strlen>
    bf3a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    bf3e:	462f      	mov	r7, r5
    bf40:	9004      	str	r0, [sp, #16]
    bf42:	9303      	str	r3, [sp, #12]
    bf44:	9508      	str	r5, [sp, #32]
    bf46:	f7ff b9ab 	b.w	b2a0 <_vfiprintf_r+0x260>
    bf4a:	ee18 1a10 	vmov	r1, s16
    bf4e:	aa18      	add	r2, sp, #96	; 0x60
    bf50:	4658      	mov	r0, fp
    bf52:	f7ff f839 	bl	afc8 <__sprint_r.part.0>
    bf56:	2800      	cmp	r0, #0
    bf58:	f43f aa36 	beq.w	b3c8 <_vfiprintf_r+0x388>
    bf5c:	f7ff ba4d 	b.w	b3fa <_vfiprintf_r+0x3ba>
    bf60:	9819      	ldr	r0, [sp, #100]	; 0x64
    bf62:	3001      	adds	r0, #1
    bf64:	e57a      	b.n	ba5c <_vfiprintf_r+0xa1c>
    bf66:	468c      	mov	ip, r1
    bf68:	e46e      	b.n	b848 <_vfiprintf_r+0x808>
    bf6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    bf6c:	07d9      	lsls	r1, r3, #31
    bf6e:	d405      	bmi.n	bf7c <_vfiprintf_r+0xf3c>
    bf70:	89ab      	ldrh	r3, [r5, #12]
    bf72:	059a      	lsls	r2, r3, #22
    bf74:	d402      	bmi.n	bf7c <_vfiprintf_r+0xf3c>
    bf76:	6da8      	ldr	r0, [r5, #88]	; 0x58
    bf78:	f7fc f906 	bl	8188 <__retarget_lock_release_recursive>
    bf7c:	f04f 33ff 	mov.w	r3, #4294967295
    bf80:	9305      	str	r3, [sp, #20]
    bf82:	f7ff ba49 	b.w	b418 <_vfiprintf_r+0x3d8>
    bf86:	ee18 2a10 	vmov	r2, s16
    bf8a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    bf8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf92:	8193      	strh	r3, [r2, #12]
    bf94:	f7ff ba35 	b.w	b402 <_vfiprintf_r+0x3c2>
    bf98:	9c07      	ldr	r4, [sp, #28]
    bf9a:	9704      	str	r7, [sp, #16]
    bf9c:	e746      	b.n	be2c <_vfiprintf_r+0xdec>
    bf9e:	9b07      	ldr	r3, [sp, #28]
    bfa0:	f898 1001 	ldrb.w	r1, [r8, #1]
    bfa4:	f853 7b04 	ldr.w	r7, [r3], #4
    bfa8:	9307      	str	r3, [sp, #28]
    bfaa:	4690      	mov	r8, r2
    bfac:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    bfb0:	f7ff b8b9 	b.w	b126 <_vfiprintf_r+0xe6>
    bfb4:	ee18 2a10 	vmov	r2, s16
    bfb8:	8993      	ldrh	r3, [r2, #12]
    bfba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bfbe:	8193      	strh	r3, [r2, #12]
    bfc0:	f7ff ba15 	b.w	b3ee <_vfiprintf_r+0x3ae>
    bfc4:	cccccccd 	.word	0xcccccccd
    bfc8:	20000c44 	.word	0x20000c44

0000bfcc <__sbprintf>:
    bfcc:	b570      	push	{r4, r5, r6, lr}
    bfce:	460c      	mov	r4, r1
    bfd0:	8989      	ldrh	r1, [r1, #12]
    bfd2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    bfd6:	f021 0102 	bic.w	r1, r1, #2
    bfda:	f8ad 1014 	strh.w	r1, [sp, #20]
    bfde:	6e61      	ldr	r1, [r4, #100]	; 0x64
    bfe0:	911b      	str	r1, [sp, #108]	; 0x6c
    bfe2:	89e1      	ldrh	r1, [r4, #14]
    bfe4:	f8ad 1016 	strh.w	r1, [sp, #22]
    bfe8:	69e1      	ldr	r1, [r4, #28]
    bfea:	9109      	str	r1, [sp, #36]	; 0x24
    bfec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bfee:	910b      	str	r1, [sp, #44]	; 0x2c
    bff0:	a91c      	add	r1, sp, #112	; 0x70
    bff2:	9102      	str	r1, [sp, #8]
    bff4:	9106      	str	r1, [sp, #24]
    bff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    bffa:	4606      	mov	r6, r0
    bffc:	9104      	str	r1, [sp, #16]
    bffe:	9107      	str	r1, [sp, #28]
    c000:	a818      	add	r0, sp, #96	; 0x60
    c002:	2100      	movs	r1, #0
    c004:	e9cd 3200 	strd	r3, r2, [sp]
    c008:	9108      	str	r1, [sp, #32]
    c00a:	f7fc f8b7 	bl	817c <__retarget_lock_init_recursive>
    c00e:	e9dd 3200 	ldrd	r3, r2, [sp]
    c012:	a902      	add	r1, sp, #8
    c014:	4630      	mov	r0, r6
    c016:	f7ff f813 	bl	b040 <_vfiprintf_r>
    c01a:	1e05      	subs	r5, r0, #0
    c01c:	db07      	blt.n	c02e <__sbprintf+0x62>
    c01e:	a902      	add	r1, sp, #8
    c020:	4630      	mov	r0, r6
    c022:	f7fd ff61 	bl	9ee8 <_fflush_r>
    c026:	2800      	cmp	r0, #0
    c028:	bf18      	it	ne
    c02a:	f04f 35ff 	movne.w	r5, #4294967295
    c02e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c032:	065b      	lsls	r3, r3, #25
    c034:	d503      	bpl.n	c03e <__sbprintf+0x72>
    c036:	89a3      	ldrh	r3, [r4, #12]
    c038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c03c:	81a3      	strh	r3, [r4, #12]
    c03e:	9818      	ldr	r0, [sp, #96]	; 0x60
    c040:	f7fc f89e 	bl	8180 <__retarget_lock_close_recursive>
    c044:	4628      	mov	r0, r5
    c046:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    c04a:	bd70      	pop	{r4, r5, r6, pc}

0000c04c <__sfvwrite_r>:
    c04c:	6893      	ldr	r3, [r2, #8]
    c04e:	2b00      	cmp	r3, #0
    c050:	f000 8085 	beq.w	c15e <__sfvwrite_r+0x112>
    c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c058:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    c05c:	460c      	mov	r4, r1
    c05e:	0719      	lsls	r1, r3, #28
    c060:	4680      	mov	r8, r0
    c062:	b083      	sub	sp, #12
    c064:	4617      	mov	r7, r2
    c066:	b298      	uxth	r0, r3
    c068:	d525      	bpl.n	c0b6 <__sfvwrite_r+0x6a>
    c06a:	6923      	ldr	r3, [r4, #16]
    c06c:	b31b      	cbz	r3, c0b6 <__sfvwrite_r+0x6a>
    c06e:	f010 0302 	ands.w	r3, r0, #2
    c072:	683d      	ldr	r5, [r7, #0]
    c074:	d02d      	beq.n	c0d2 <__sfvwrite_r+0x86>
    c076:	f04f 0a00 	mov.w	sl, #0
    c07a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; c33c <__sfvwrite_r+0x2f0>
    c07e:	4656      	mov	r6, sl
    c080:	46b9      	mov	r9, r7
    c082:	455e      	cmp	r6, fp
    c084:	4633      	mov	r3, r6
    c086:	4652      	mov	r2, sl
    c088:	bf28      	it	cs
    c08a:	465b      	movcs	r3, fp
    c08c:	4640      	mov	r0, r8
    c08e:	2e00      	cmp	r6, #0
    c090:	d052      	beq.n	c138 <__sfvwrite_r+0xec>
    c092:	69e1      	ldr	r1, [r4, #28]
    c094:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c096:	47b8      	blx	r7
    c098:	2800      	cmp	r0, #0
    c09a:	dd56      	ble.n	c14a <__sfvwrite_r+0xfe>
    c09c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c0a0:	1a1b      	subs	r3, r3, r0
    c0a2:	4482      	add	sl, r0
    c0a4:	1a36      	subs	r6, r6, r0
    c0a6:	f8c9 3008 	str.w	r3, [r9, #8]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d1e9      	bne.n	c082 <__sfvwrite_r+0x36>
    c0ae:	2000      	movs	r0, #0
    c0b0:	b003      	add	sp, #12
    c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0b6:	4621      	mov	r1, r4
    c0b8:	4640      	mov	r0, r8
    c0ba:	f000 f941 	bl	c340 <__swsetup_r>
    c0be:	2800      	cmp	r0, #0
    c0c0:	f040 8138 	bne.w	c334 <__sfvwrite_r+0x2e8>
    c0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c0c8:	683d      	ldr	r5, [r7, #0]
    c0ca:	b298      	uxth	r0, r3
    c0cc:	f010 0302 	ands.w	r3, r0, #2
    c0d0:	d1d1      	bne.n	c076 <__sfvwrite_r+0x2a>
    c0d2:	f010 0901 	ands.w	r9, r0, #1
    c0d6:	d144      	bne.n	c162 <__sfvwrite_r+0x116>
    c0d8:	464e      	mov	r6, r9
    c0da:	9700      	str	r7, [sp, #0]
    c0dc:	b346      	cbz	r6, c130 <__sfvwrite_r+0xe4>
    c0de:	0582      	lsls	r2, r0, #22
    c0e0:	f8d4 b008 	ldr.w	fp, [r4, #8]
    c0e4:	f140 8085 	bpl.w	c1f2 <__sfvwrite_r+0x1a6>
    c0e8:	45b3      	cmp	fp, r6
    c0ea:	465a      	mov	r2, fp
    c0ec:	f200 80b4 	bhi.w	c258 <__sfvwrite_r+0x20c>
    c0f0:	f410 6f90 	tst.w	r0, #1152	; 0x480
    c0f4:	f040 80c1 	bne.w	c27a <__sfvwrite_r+0x22e>
    c0f8:	6820      	ldr	r0, [r4, #0]
    c0fa:	9201      	str	r2, [sp, #4]
    c0fc:	4649      	mov	r1, r9
    c0fe:	f7fb fbe7 	bl	78d0 <memmove>
    c102:	68a3      	ldr	r3, [r4, #8]
    c104:	9a01      	ldr	r2, [sp, #4]
    c106:	eba3 010b 	sub.w	r1, r3, fp
    c10a:	6823      	ldr	r3, [r4, #0]
    c10c:	60a1      	str	r1, [r4, #8]
    c10e:	4413      	add	r3, r2
    c110:	46b2      	mov	sl, r6
    c112:	6023      	str	r3, [r4, #0]
    c114:	2600      	movs	r6, #0
    c116:	9a00      	ldr	r2, [sp, #0]
    c118:	6893      	ldr	r3, [r2, #8]
    c11a:	eba3 030a 	sub.w	r3, r3, sl
    c11e:	44d1      	add	r9, sl
    c120:	6093      	str	r3, [r2, #8]
    c122:	2b00      	cmp	r3, #0
    c124:	d0c3      	beq.n	c0ae <__sfvwrite_r+0x62>
    c126:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    c12a:	b280      	uxth	r0, r0
    c12c:	2e00      	cmp	r6, #0
    c12e:	d1d6      	bne.n	c0de <__sfvwrite_r+0x92>
    c130:	e9d5 9600 	ldrd	r9, r6, [r5]
    c134:	3508      	adds	r5, #8
    c136:	e7d1      	b.n	c0dc <__sfvwrite_r+0x90>
    c138:	e9d5 a600 	ldrd	sl, r6, [r5]
    c13c:	3508      	adds	r5, #8
    c13e:	e7a0      	b.n	c082 <__sfvwrite_r+0x36>
    c140:	4621      	mov	r1, r4
    c142:	4640      	mov	r0, r8
    c144:	f7fd fed0 	bl	9ee8 <_fflush_r>
    c148:	b388      	cbz	r0, c1ae <__sfvwrite_r+0x162>
    c14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c152:	f04f 30ff 	mov.w	r0, #4294967295
    c156:	81a3      	strh	r3, [r4, #12]
    c158:	b003      	add	sp, #12
    c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c15e:	2000      	movs	r0, #0
    c160:	4770      	bx	lr
    c162:	461e      	mov	r6, r3
    c164:	46ba      	mov	sl, r7
    c166:	4699      	mov	r9, r3
    c168:	4618      	mov	r0, r3
    c16a:	9500      	str	r5, [sp, #0]
    c16c:	461f      	mov	r7, r3
    c16e:	b366      	cbz	r6, c1ca <__sfvwrite_r+0x17e>
    c170:	2800      	cmp	r0, #0
    c172:	d032      	beq.n	c1da <__sfvwrite_r+0x18e>
    c174:	464a      	mov	r2, r9
    c176:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    c17a:	6820      	ldr	r0, [r4, #0]
    c17c:	68a5      	ldr	r5, [r4, #8]
    c17e:	42b2      	cmp	r2, r6
    c180:	bf28      	it	cs
    c182:	4632      	movcs	r2, r6
    c184:	4288      	cmp	r0, r1
    c186:	d904      	bls.n	c192 <__sfvwrite_r+0x146>
    c188:	eb05 0b03 	add.w	fp, r5, r3
    c18c:	455a      	cmp	r2, fp
    c18e:	f300 80a7 	bgt.w	c2e0 <__sfvwrite_r+0x294>
    c192:	4293      	cmp	r3, r2
    c194:	dc64      	bgt.n	c260 <__sfvwrite_r+0x214>
    c196:	69e1      	ldr	r1, [r4, #28]
    c198:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c19a:	463a      	mov	r2, r7
    c19c:	4640      	mov	r0, r8
    c19e:	47a8      	blx	r5
    c1a0:	f1b0 0b00 	subs.w	fp, r0, #0
    c1a4:	ddd1      	ble.n	c14a <__sfvwrite_r+0xfe>
    c1a6:	ebb9 090b 	subs.w	r9, r9, fp
    c1aa:	d0c9      	beq.n	c140 <__sfvwrite_r+0xf4>
    c1ac:	2001      	movs	r0, #1
    c1ae:	f8da 3008 	ldr.w	r3, [sl, #8]
    c1b2:	eba3 030b 	sub.w	r3, r3, fp
    c1b6:	445f      	add	r7, fp
    c1b8:	eba6 060b 	sub.w	r6, r6, fp
    c1bc:	f8ca 3008 	str.w	r3, [sl, #8]
    c1c0:	2b00      	cmp	r3, #0
    c1c2:	f43f af74 	beq.w	c0ae <__sfvwrite_r+0x62>
    c1c6:	2e00      	cmp	r6, #0
    c1c8:	d1d2      	bne.n	c170 <__sfvwrite_r+0x124>
    c1ca:	9a00      	ldr	r2, [sp, #0]
    c1cc:	6856      	ldr	r6, [r2, #4]
    c1ce:	4613      	mov	r3, r2
    c1d0:	3208      	adds	r2, #8
    c1d2:	9200      	str	r2, [sp, #0]
    c1d4:	2e00      	cmp	r6, #0
    c1d6:	d0f8      	beq.n	c1ca <__sfvwrite_r+0x17e>
    c1d8:	681f      	ldr	r7, [r3, #0]
    c1da:	4632      	mov	r2, r6
    c1dc:	210a      	movs	r1, #10
    c1de:	4638      	mov	r0, r7
    c1e0:	f7fd fef6 	bl	9fd0 <memchr>
    c1e4:	2800      	cmp	r0, #0
    c1e6:	f000 809c 	beq.w	c322 <__sfvwrite_r+0x2d6>
    c1ea:	3001      	adds	r0, #1
    c1ec:	eba0 0907 	sub.w	r9, r0, r7
    c1f0:	e7c0      	b.n	c174 <__sfvwrite_r+0x128>
    c1f2:	6820      	ldr	r0, [r4, #0]
    c1f4:	6923      	ldr	r3, [r4, #16]
    c1f6:	4298      	cmp	r0, r3
    c1f8:	d816      	bhi.n	c228 <__sfvwrite_r+0x1dc>
    c1fa:	6962      	ldr	r2, [r4, #20]
    c1fc:	42b2      	cmp	r2, r6
    c1fe:	d813      	bhi.n	c228 <__sfvwrite_r+0x1dc>
    c200:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c204:	42b3      	cmp	r3, r6
    c206:	bf28      	it	cs
    c208:	4633      	movcs	r3, r6
    c20a:	69e1      	ldr	r1, [r4, #28]
    c20c:	fb93 f3f2 	sdiv	r3, r3, r2
    c210:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c212:	fb02 f303 	mul.w	r3, r2, r3
    c216:	4640      	mov	r0, r8
    c218:	464a      	mov	r2, r9
    c21a:	47b8      	blx	r7
    c21c:	f1b0 0a00 	subs.w	sl, r0, #0
    c220:	dd93      	ble.n	c14a <__sfvwrite_r+0xfe>
    c222:	eba6 060a 	sub.w	r6, r6, sl
    c226:	e776      	b.n	c116 <__sfvwrite_r+0xca>
    c228:	45b3      	cmp	fp, r6
    c22a:	46da      	mov	sl, fp
    c22c:	bf28      	it	cs
    c22e:	46b2      	movcs	sl, r6
    c230:	4652      	mov	r2, sl
    c232:	4649      	mov	r1, r9
    c234:	f7fb fb4c 	bl	78d0 <memmove>
    c238:	68a3      	ldr	r3, [r4, #8]
    c23a:	6822      	ldr	r2, [r4, #0]
    c23c:	eba3 030a 	sub.w	r3, r3, sl
    c240:	4452      	add	r2, sl
    c242:	60a3      	str	r3, [r4, #8]
    c244:	6022      	str	r2, [r4, #0]
    c246:	2b00      	cmp	r3, #0
    c248:	d1eb      	bne.n	c222 <__sfvwrite_r+0x1d6>
    c24a:	4621      	mov	r1, r4
    c24c:	4640      	mov	r0, r8
    c24e:	f7fd fe4b 	bl	9ee8 <_fflush_r>
    c252:	2800      	cmp	r0, #0
    c254:	d0e5      	beq.n	c222 <__sfvwrite_r+0x1d6>
    c256:	e778      	b.n	c14a <__sfvwrite_r+0xfe>
    c258:	6820      	ldr	r0, [r4, #0]
    c25a:	46b3      	mov	fp, r6
    c25c:	4632      	mov	r2, r6
    c25e:	e74c      	b.n	c0fa <__sfvwrite_r+0xae>
    c260:	4639      	mov	r1, r7
    c262:	9201      	str	r2, [sp, #4]
    c264:	f7fb fb34 	bl	78d0 <memmove>
    c268:	9a01      	ldr	r2, [sp, #4]
    c26a:	68a3      	ldr	r3, [r4, #8]
    c26c:	1a9b      	subs	r3, r3, r2
    c26e:	60a3      	str	r3, [r4, #8]
    c270:	6823      	ldr	r3, [r4, #0]
    c272:	4413      	add	r3, r2
    c274:	6023      	str	r3, [r4, #0]
    c276:	4693      	mov	fp, r2
    c278:	e795      	b.n	c1a6 <__sfvwrite_r+0x15a>
    c27a:	6823      	ldr	r3, [r4, #0]
    c27c:	6921      	ldr	r1, [r4, #16]
    c27e:	eba3 0b01 	sub.w	fp, r3, r1
    c282:	6963      	ldr	r3, [r4, #20]
    c284:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    c288:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    c28c:	f10b 0301 	add.w	r3, fp, #1
    c290:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    c294:	4433      	add	r3, r6
    c296:	4553      	cmp	r3, sl
    c298:	4652      	mov	r2, sl
    c29a:	bf84      	itt	hi
    c29c:	469a      	movhi	sl, r3
    c29e:	4652      	movhi	r2, sl
    c2a0:	0543      	lsls	r3, r0, #21
    c2a2:	d52c      	bpl.n	c2fe <__sfvwrite_r+0x2b2>
    c2a4:	4611      	mov	r1, r2
    c2a6:	4640      	mov	r0, r8
    c2a8:	f7f9 fc8c 	bl	5bc4 <_malloc_r>
    c2ac:	2800      	cmp	r0, #0
    c2ae:	d03b      	beq.n	c328 <__sfvwrite_r+0x2dc>
    c2b0:	465a      	mov	r2, fp
    c2b2:	6921      	ldr	r1, [r4, #16]
    c2b4:	9001      	str	r0, [sp, #4]
    c2b6:	f7f7 feb3 	bl	4020 <memcpy>
    c2ba:	89a2      	ldrh	r2, [r4, #12]
    c2bc:	9b01      	ldr	r3, [sp, #4]
    c2be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    c2c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c2c6:	81a2      	strh	r2, [r4, #12]
    c2c8:	eb03 000b 	add.w	r0, r3, fp
    c2cc:	6123      	str	r3, [r4, #16]
    c2ce:	ebaa 030b 	sub.w	r3, sl, fp
    c2d2:	f8c4 a014 	str.w	sl, [r4, #20]
    c2d6:	60a3      	str	r3, [r4, #8]
    c2d8:	6020      	str	r0, [r4, #0]
    c2da:	46b3      	mov	fp, r6
    c2dc:	4632      	mov	r2, r6
    c2de:	e70c      	b.n	c0fa <__sfvwrite_r+0xae>
    c2e0:	4639      	mov	r1, r7
    c2e2:	465a      	mov	r2, fp
    c2e4:	f7fb faf4 	bl	78d0 <memmove>
    c2e8:	6823      	ldr	r3, [r4, #0]
    c2ea:	445b      	add	r3, fp
    c2ec:	6023      	str	r3, [r4, #0]
    c2ee:	4621      	mov	r1, r4
    c2f0:	4640      	mov	r0, r8
    c2f2:	f7fd fdf9 	bl	9ee8 <_fflush_r>
    c2f6:	2800      	cmp	r0, #0
    c2f8:	f43f af55 	beq.w	c1a6 <__sfvwrite_r+0x15a>
    c2fc:	e725      	b.n	c14a <__sfvwrite_r+0xfe>
    c2fe:	4640      	mov	r0, r8
    c300:	f7f9 ff28 	bl	6154 <_realloc_r>
    c304:	4603      	mov	r3, r0
    c306:	2800      	cmp	r0, #0
    c308:	d1de      	bne.n	c2c8 <__sfvwrite_r+0x27c>
    c30a:	6921      	ldr	r1, [r4, #16]
    c30c:	4640      	mov	r0, r8
    c30e:	f7fc fa29 	bl	8764 <_free_r>
    c312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c316:	220c      	movs	r2, #12
    c318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c31c:	f8c8 2000 	str.w	r2, [r8]
    c320:	e715      	b.n	c14e <__sfvwrite_r+0x102>
    c322:	1c72      	adds	r2, r6, #1
    c324:	4691      	mov	r9, r2
    c326:	e726      	b.n	c176 <__sfvwrite_r+0x12a>
    c328:	220c      	movs	r2, #12
    c32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c32e:	f8c8 2000 	str.w	r2, [r8]
    c332:	e70c      	b.n	c14e <__sfvwrite_r+0x102>
    c334:	f04f 30ff 	mov.w	r0, #4294967295
    c338:	e6ba      	b.n	c0b0 <__sfvwrite_r+0x64>
    c33a:	bf00      	nop
    c33c:	7ffffc00 	.word	0x7ffffc00

0000c340 <__swsetup_r>:
    c340:	b538      	push	{r3, r4, r5, lr}
    c342:	4b31      	ldr	r3, [pc, #196]	; (c408 <__swsetup_r+0xc8>)
    c344:	681b      	ldr	r3, [r3, #0]
    c346:	4605      	mov	r5, r0
    c348:	460c      	mov	r4, r1
    c34a:	b113      	cbz	r3, c352 <__swsetup_r+0x12>
    c34c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    c34e:	2a00      	cmp	r2, #0
    c350:	d04e      	beq.n	c3f0 <__swsetup_r+0xb0>
    c352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c356:	0718      	lsls	r0, r3, #28
    c358:	b29a      	uxth	r2, r3
    c35a:	d51c      	bpl.n	c396 <__swsetup_r+0x56>
    c35c:	6921      	ldr	r1, [r4, #16]
    c35e:	b329      	cbz	r1, c3ac <__swsetup_r+0x6c>
    c360:	f012 0001 	ands.w	r0, r2, #1
    c364:	d007      	beq.n	c376 <__swsetup_r+0x36>
    c366:	2000      	movs	r0, #0
    c368:	60a0      	str	r0, [r4, #8]
    c36a:	6960      	ldr	r0, [r4, #20]
    c36c:	4240      	negs	r0, r0
    c36e:	61a0      	str	r0, [r4, #24]
    c370:	b139      	cbz	r1, c382 <__swsetup_r+0x42>
    c372:	2000      	movs	r0, #0
    c374:	bd38      	pop	{r3, r4, r5, pc}
    c376:	0795      	lsls	r5, r2, #30
    c378:	bf58      	it	pl
    c37a:	6960      	ldrpl	r0, [r4, #20]
    c37c:	60a0      	str	r0, [r4, #8]
    c37e:	2900      	cmp	r1, #0
    c380:	d1f7      	bne.n	c372 <__swsetup_r+0x32>
    c382:	0612      	lsls	r2, r2, #24
    c384:	bf58      	it	pl
    c386:	4608      	movpl	r0, r1
    c388:	d5f4      	bpl.n	c374 <__swsetup_r+0x34>
    c38a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c38e:	81a3      	strh	r3, [r4, #12]
    c390:	f04f 30ff 	mov.w	r0, #4294967295
    c394:	bd38      	pop	{r3, r4, r5, pc}
    c396:	06d1      	lsls	r1, r2, #27
    c398:	d52e      	bpl.n	c3f8 <__swsetup_r+0xb8>
    c39a:	0752      	lsls	r2, r2, #29
    c39c:	d414      	bmi.n	c3c8 <__swsetup_r+0x88>
    c39e:	6921      	ldr	r1, [r4, #16]
    c3a0:	f043 0308 	orr.w	r3, r3, #8
    c3a4:	81a3      	strh	r3, [r4, #12]
    c3a6:	b29a      	uxth	r2, r3
    c3a8:	2900      	cmp	r1, #0
    c3aa:	d1d9      	bne.n	c360 <__swsetup_r+0x20>
    c3ac:	f402 7020 	and.w	r0, r2, #640	; 0x280
    c3b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c3b4:	d0d4      	beq.n	c360 <__swsetup_r+0x20>
    c3b6:	4621      	mov	r1, r4
    c3b8:	4628      	mov	r0, r5
    c3ba:	f000 f947 	bl	c64c <__smakebuf_r>
    c3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c3c2:	6921      	ldr	r1, [r4, #16]
    c3c4:	b29a      	uxth	r2, r3
    c3c6:	e7cb      	b.n	c360 <__swsetup_r+0x20>
    c3c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c3ca:	b151      	cbz	r1, c3e2 <__swsetup_r+0xa2>
    c3cc:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c3d0:	4291      	cmp	r1, r2
    c3d2:	d004      	beq.n	c3de <__swsetup_r+0x9e>
    c3d4:	4628      	mov	r0, r5
    c3d6:	f7fc f9c5 	bl	8764 <_free_r>
    c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c3de:	2200      	movs	r2, #0
    c3e0:	6322      	str	r2, [r4, #48]	; 0x30
    c3e2:	6921      	ldr	r1, [r4, #16]
    c3e4:	2200      	movs	r2, #0
    c3e6:	e9c4 1200 	strd	r1, r2, [r4]
    c3ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c3ee:	e7d7      	b.n	c3a0 <__swsetup_r+0x60>
    c3f0:	4618      	mov	r0, r3
    c3f2:	f7fb f9d9 	bl	77a8 <__sinit>
    c3f6:	e7ac      	b.n	c352 <__swsetup_r+0x12>
    c3f8:	2209      	movs	r2, #9
    c3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c3fe:	602a      	str	r2, [r5, #0]
    c400:	f04f 30ff 	mov.w	r0, #4294967295
    c404:	81a3      	strh	r3, [r4, #12]
    c406:	bd38      	pop	{r3, r4, r5, pc}
    c408:	20001b18 	.word	0x20001b18

0000c40c <__fputwc>:
    c40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c410:	b082      	sub	sp, #8
    c412:	4682      	mov	sl, r0
    c414:	4688      	mov	r8, r1
    c416:	4614      	mov	r4, r2
    c418:	f7fb fe1a 	bl	8050 <__locale_mb_cur_max>
    c41c:	2801      	cmp	r0, #1
    c41e:	d103      	bne.n	c428 <__fputwc+0x1c>
    c420:	f108 33ff 	add.w	r3, r8, #4294967295
    c424:	2bfe      	cmp	r3, #254	; 0xfe
    c426:	d936      	bls.n	c496 <__fputwc+0x8a>
    c428:	f10d 0904 	add.w	r9, sp, #4
    c42c:	4642      	mov	r2, r8
    c42e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    c432:	4649      	mov	r1, r9
    c434:	4650      	mov	r0, sl
    c436:	f7fe fd81 	bl	af3c <_wcrtomb_r>
    c43a:	1c42      	adds	r2, r0, #1
    c43c:	4606      	mov	r6, r0
    c43e:	d032      	beq.n	c4a6 <__fputwc+0x9a>
    c440:	b320      	cbz	r0, c48c <__fputwc+0x80>
    c442:	f89d c004 	ldrb.w	ip, [sp, #4]
    c446:	2500      	movs	r5, #0
    c448:	e009      	b.n	c45e <__fputwc+0x52>
    c44a:	6823      	ldr	r3, [r4, #0]
    c44c:	1c5a      	adds	r2, r3, #1
    c44e:	6022      	str	r2, [r4, #0]
    c450:	f883 c000 	strb.w	ip, [r3]
    c454:	3501      	adds	r5, #1
    c456:	42b5      	cmp	r5, r6
    c458:	d218      	bcs.n	c48c <__fputwc+0x80>
    c45a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    c45e:	68a3      	ldr	r3, [r4, #8]
    c460:	3b01      	subs	r3, #1
    c462:	2b00      	cmp	r3, #0
    c464:	60a3      	str	r3, [r4, #8]
    c466:	daf0      	bge.n	c44a <__fputwc+0x3e>
    c468:	69a7      	ldr	r7, [r4, #24]
    c46a:	42bb      	cmp	r3, r7
    c46c:	4661      	mov	r1, ip
    c46e:	4622      	mov	r2, r4
    c470:	4650      	mov	r0, sl
    c472:	db02      	blt.n	c47a <__fputwc+0x6e>
    c474:	f1bc 0f0a 	cmp.w	ip, #10
    c478:	d1e7      	bne.n	c44a <__fputwc+0x3e>
    c47a:	f000 f953 	bl	c724 <__swbuf_r>
    c47e:	1c43      	adds	r3, r0, #1
    c480:	d1e8      	bne.n	c454 <__fputwc+0x48>
    c482:	4606      	mov	r6, r0
    c484:	4630      	mov	r0, r6
    c486:	b002      	add	sp, #8
    c488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c48c:	4646      	mov	r6, r8
    c48e:	4630      	mov	r0, r6
    c490:	b002      	add	sp, #8
    c492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c496:	fa5f fc88 	uxtb.w	ip, r8
    c49a:	f88d c004 	strb.w	ip, [sp, #4]
    c49e:	4606      	mov	r6, r0
    c4a0:	f10d 0904 	add.w	r9, sp, #4
    c4a4:	e7cf      	b.n	c446 <__fputwc+0x3a>
    c4a6:	89a3      	ldrh	r3, [r4, #12]
    c4a8:	4630      	mov	r0, r6
    c4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c4ae:	81a3      	strh	r3, [r4, #12]
    c4b0:	b002      	add	sp, #8
    c4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c4b6:	bf00      	nop

0000c4b8 <_fputwc_r>:
    c4b8:	b530      	push	{r4, r5, lr}
    c4ba:	6e53      	ldr	r3, [r2, #100]	; 0x64
    c4bc:	f013 0f01 	tst.w	r3, #1
    c4c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c4c4:	4614      	mov	r4, r2
    c4c6:	b083      	sub	sp, #12
    c4c8:	4605      	mov	r5, r0
    c4ca:	b29a      	uxth	r2, r3
    c4cc:	d101      	bne.n	c4d2 <_fputwc_r+0x1a>
    c4ce:	0598      	lsls	r0, r3, #22
    c4d0:	d51c      	bpl.n	c50c <_fputwc_r+0x54>
    c4d2:	0490      	lsls	r0, r2, #18
    c4d4:	d406      	bmi.n	c4e4 <_fputwc_r+0x2c>
    c4d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c4d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c4dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c4e0:	81a3      	strh	r3, [r4, #12]
    c4e2:	6662      	str	r2, [r4, #100]	; 0x64
    c4e4:	4622      	mov	r2, r4
    c4e6:	4628      	mov	r0, r5
    c4e8:	f7ff ff90 	bl	c40c <__fputwc>
    c4ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c4ee:	07da      	lsls	r2, r3, #31
    c4f0:	4605      	mov	r5, r0
    c4f2:	d402      	bmi.n	c4fa <_fputwc_r+0x42>
    c4f4:	89a3      	ldrh	r3, [r4, #12]
    c4f6:	059b      	lsls	r3, r3, #22
    c4f8:	d502      	bpl.n	c500 <_fputwc_r+0x48>
    c4fa:	4628      	mov	r0, r5
    c4fc:	b003      	add	sp, #12
    c4fe:	bd30      	pop	{r4, r5, pc}
    c500:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c502:	f7fb fe41 	bl	8188 <__retarget_lock_release_recursive>
    c506:	4628      	mov	r0, r5
    c508:	b003      	add	sp, #12
    c50a:	bd30      	pop	{r4, r5, pc}
    c50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c50e:	9101      	str	r1, [sp, #4]
    c510:	f7fb fe38 	bl	8184 <__retarget_lock_acquire_recursive>
    c514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c518:	9901      	ldr	r1, [sp, #4]
    c51a:	b29a      	uxth	r2, r3
    c51c:	e7d9      	b.n	c4d2 <_fputwc_r+0x1a>
    c51e:	bf00      	nop

0000c520 <_wcsnrtombs_l>:
    c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c524:	b08b      	sub	sp, #44	; 0x2c
    c526:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    c52a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    c52c:	9103      	str	r1, [sp, #12]
    c52e:	4681      	mov	r9, r0
    c530:	9205      	str	r2, [sp, #20]
    c532:	461e      	mov	r6, r3
    c534:	f1b8 0f00 	cmp.w	r8, #0
    c538:	d05c      	beq.n	c5f4 <_wcsnrtombs_l+0xd4>
    c53a:	9b03      	ldr	r3, [sp, #12]
    c53c:	2b00      	cmp	r3, #0
    c53e:	d05e      	beq.n	c5fe <_wcsnrtombs_l+0xde>
    c540:	9b05      	ldr	r3, [sp, #20]
    c542:	681d      	ldr	r5, [r3, #0]
    c544:	2f00      	cmp	r7, #0
    c546:	d06a      	beq.n	c61e <_wcsnrtombs_l+0xfe>
    c548:	1e74      	subs	r4, r6, #1
    c54a:	b34e      	cbz	r6, c5a0 <_wcsnrtombs_l+0x80>
    c54c:	9b03      	ldr	r3, [sp, #12]
    c54e:	9304      	str	r3, [sp, #16]
    c550:	3d04      	subs	r5, #4
    c552:	2600      	movs	r6, #0
    c554:	9501      	str	r5, [sp, #4]
    c556:	e00b      	b.n	c570 <_wcsnrtombs_l+0x50>
    c558:	9b03      	ldr	r3, [sp, #12]
    c55a:	bb2b      	cbnz	r3, c5a8 <_wcsnrtombs_l+0x88>
    c55c:	9b01      	ldr	r3, [sp, #4]
    c55e:	681a      	ldr	r2, [r3, #0]
    c560:	2a00      	cmp	r2, #0
    c562:	d03a      	beq.n	c5da <_wcsnrtombs_l+0xba>
    c564:	45bc      	cmp	ip, r7
    c566:	d25c      	bcs.n	c622 <_wcsnrtombs_l+0x102>
    c568:	3c01      	subs	r4, #1
    c56a:	1c63      	adds	r3, r4, #1
    c56c:	4666      	mov	r6, ip
    c56e:	d017      	beq.n	c5a0 <_wcsnrtombs_l+0x80>
    c570:	f8d8 3000 	ldr.w	r3, [r8]
    c574:	9302      	str	r3, [sp, #8]
    c576:	9b01      	ldr	r3, [sp, #4]
    c578:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    c57c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c580:	9301      	str	r3, [sp, #4]
    c582:	a907      	add	r1, sp, #28
    c584:	4643      	mov	r3, r8
    c586:	4648      	mov	r0, r9
    c588:	f8d8 b004 	ldr.w	fp, [r8, #4]
    c58c:	47a8      	blx	r5
    c58e:	1c42      	adds	r2, r0, #1
    c590:	d03a      	beq.n	c608 <_wcsnrtombs_l+0xe8>
    c592:	eb00 0c06 	add.w	ip, r0, r6
    c596:	45bc      	cmp	ip, r7
    c598:	d9de      	bls.n	c558 <_wcsnrtombs_l+0x38>
    c59a:	9b02      	ldr	r3, [sp, #8]
    c59c:	e9c8 3b00 	strd	r3, fp, [r8]
    c5a0:	4630      	mov	r0, r6
    c5a2:	b00b      	add	sp, #44	; 0x2c
    c5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5a8:	2800      	cmp	r0, #0
    c5aa:	dd0e      	ble.n	c5ca <_wcsnrtombs_l+0xaa>
    c5ac:	9b04      	ldr	r3, [sp, #16]
    c5ae:	9d01      	ldr	r5, [sp, #4]
    c5b0:	4418      	add	r0, r3
    c5b2:	1e5a      	subs	r2, r3, #1
    c5b4:	a907      	add	r1, sp, #28
    c5b6:	f100 3eff 	add.w	lr, r0, #4294967295
    c5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
    c5be:	f802 3f01 	strb.w	r3, [r2, #1]!
    c5c2:	4572      	cmp	r2, lr
    c5c4:	d1f9      	bne.n	c5ba <_wcsnrtombs_l+0x9a>
    c5c6:	9501      	str	r5, [sp, #4]
    c5c8:	9004      	str	r0, [sp, #16]
    c5ca:	9b05      	ldr	r3, [sp, #20]
    c5cc:	681a      	ldr	r2, [r3, #0]
    c5ce:	3204      	adds	r2, #4
    c5d0:	601a      	str	r2, [r3, #0]
    c5d2:	9b01      	ldr	r3, [sp, #4]
    c5d4:	681a      	ldr	r2, [r3, #0]
    c5d6:	2a00      	cmp	r2, #0
    c5d8:	d1c4      	bne.n	c564 <_wcsnrtombs_l+0x44>
    c5da:	9b03      	ldr	r3, [sp, #12]
    c5dc:	b10b      	cbz	r3, c5e2 <_wcsnrtombs_l+0xc2>
    c5de:	9b05      	ldr	r3, [sp, #20]
    c5e0:	601a      	str	r2, [r3, #0]
    c5e2:	f10c 36ff 	add.w	r6, ip, #4294967295
    c5e6:	2200      	movs	r2, #0
    c5e8:	4630      	mov	r0, r6
    c5ea:	f8c8 2000 	str.w	r2, [r8]
    c5ee:	b00b      	add	sp, #44	; 0x2c
    c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5f4:	9b03      	ldr	r3, [sp, #12]
    c5f6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    c5fa:	2b00      	cmp	r3, #0
    c5fc:	d1a0      	bne.n	c540 <_wcsnrtombs_l+0x20>
    c5fe:	9b05      	ldr	r3, [sp, #20]
    c600:	f04f 37ff 	mov.w	r7, #4294967295
    c604:	681d      	ldr	r5, [r3, #0]
    c606:	e79f      	b.n	c548 <_wcsnrtombs_l+0x28>
    c608:	4606      	mov	r6, r0
    c60a:	218a      	movs	r1, #138	; 0x8a
    c60c:	2200      	movs	r2, #0
    c60e:	4630      	mov	r0, r6
    c610:	f8c9 1000 	str.w	r1, [r9]
    c614:	f8c8 2000 	str.w	r2, [r8]
    c618:	b00b      	add	sp, #44	; 0x2c
    c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c61e:	463e      	mov	r6, r7
    c620:	e7be      	b.n	c5a0 <_wcsnrtombs_l+0x80>
    c622:	4666      	mov	r6, ip
    c624:	e7bc      	b.n	c5a0 <_wcsnrtombs_l+0x80>
    c626:	bf00      	nop

0000c628 <_wcsnrtombs_r>:
    c628:	b510      	push	{r4, lr}
    c62a:	b084      	sub	sp, #16
    c62c:	4c05      	ldr	r4, [pc, #20]	; (c644 <_wcsnrtombs_r+0x1c>)
    c62e:	9806      	ldr	r0, [sp, #24]
    c630:	9000      	str	r0, [sp, #0]
    c632:	9807      	ldr	r0, [sp, #28]
    c634:	9001      	str	r0, [sp, #4]
    c636:	4804      	ldr	r0, [pc, #16]	; (c648 <_wcsnrtombs_r+0x20>)
    c638:	6800      	ldr	r0, [r0, #0]
    c63a:	9402      	str	r4, [sp, #8]
    c63c:	f7ff ff70 	bl	c520 <_wcsnrtombs_l>
    c640:	b004      	add	sp, #16
    c642:	bd10      	pop	{r4, pc}
    c644:	20001590 	.word	0x20001590
    c648:	20001b18 	.word	0x20001b18

0000c64c <__smakebuf_r>:
    c64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c650:	898b      	ldrh	r3, [r1, #12]
    c652:	460c      	mov	r4, r1
    c654:	0799      	lsls	r1, r3, #30
    c656:	b096      	sub	sp, #88	; 0x58
    c658:	d508      	bpl.n	c66c <__smakebuf_r+0x20>
    c65a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    c65e:	2201      	movs	r2, #1
    c660:	e9c4 3204 	strd	r3, r2, [r4, #16]
    c664:	6023      	str	r3, [r4, #0]
    c666:	b016      	add	sp, #88	; 0x58
    c668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c670:	2900      	cmp	r1, #0
    c672:	4606      	mov	r6, r0
    c674:	db25      	blt.n	c6c2 <__smakebuf_r+0x76>
    c676:	466a      	mov	r2, sp
    c678:	f000 f8ac 	bl	c7d4 <_fstat_r>
    c67c:	2800      	cmp	r0, #0
    c67e:	db1f      	blt.n	c6c0 <__smakebuf_r+0x74>
    c680:	9d01      	ldr	r5, [sp, #4]
    c682:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c686:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    c68a:	fab5 f585 	clz	r5, r5
    c68e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c692:	096d      	lsrs	r5, r5, #5
    c694:	f44f 6700 	mov.w	r7, #2048	; 0x800
    c698:	4641      	mov	r1, r8
    c69a:	4630      	mov	r0, r6
    c69c:	f7f9 fa92 	bl	5bc4 <_malloc_r>
    c6a0:	b1e0      	cbz	r0, c6dc <__smakebuf_r+0x90>
    c6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c6a6:	f8c4 8014 	str.w	r8, [r4, #20]
    c6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c6ae:	6020      	str	r0, [r4, #0]
    c6b0:	6120      	str	r0, [r4, #16]
    c6b2:	81a3      	strh	r3, [r4, #12]
    c6b4:	bb35      	cbnz	r5, c704 <__smakebuf_r+0xb8>
    c6b6:	433b      	orrs	r3, r7
    c6b8:	81a3      	strh	r3, [r4, #12]
    c6ba:	b016      	add	sp, #88	; 0x58
    c6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6c0:	89a3      	ldrh	r3, [r4, #12]
    c6c2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    c6c6:	d019      	beq.n	c6fc <__smakebuf_r+0xb0>
    c6c8:	f04f 0840 	mov.w	r8, #64	; 0x40
    c6cc:	2500      	movs	r5, #0
    c6ce:	4641      	mov	r1, r8
    c6d0:	4630      	mov	r0, r6
    c6d2:	462f      	mov	r7, r5
    c6d4:	f7f9 fa76 	bl	5bc4 <_malloc_r>
    c6d8:	2800      	cmp	r0, #0
    c6da:	d1e2      	bne.n	c6a2 <__smakebuf_r+0x56>
    c6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c6e0:	059a      	lsls	r2, r3, #22
    c6e2:	d4c0      	bmi.n	c666 <__smakebuf_r+0x1a>
    c6e4:	f023 0303 	bic.w	r3, r3, #3
    c6e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c6ec:	f043 0302 	orr.w	r3, r3, #2
    c6f0:	2101      	movs	r1, #1
    c6f2:	e9c4 2104 	strd	r2, r1, [r4, #16]
    c6f6:	81a3      	strh	r3, [r4, #12]
    c6f8:	6022      	str	r2, [r4, #0]
    c6fa:	e7b4      	b.n	c666 <__smakebuf_r+0x1a>
    c6fc:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c700:	462f      	mov	r7, r5
    c702:	e7c9      	b.n	c698 <__smakebuf_r+0x4c>
    c704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c708:	4630      	mov	r0, r6
    c70a:	f000 f879 	bl	c800 <_isatty_r>
    c70e:	b910      	cbnz	r0, c716 <__smakebuf_r+0xca>
    c710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c714:	e7cf      	b.n	c6b6 <__smakebuf_r+0x6a>
    c716:	89a3      	ldrh	r3, [r4, #12]
    c718:	f023 0303 	bic.w	r3, r3, #3
    c71c:	f043 0301 	orr.w	r3, r3, #1
    c720:	b21b      	sxth	r3, r3
    c722:	e7c8      	b.n	c6b6 <__smakebuf_r+0x6a>

0000c724 <__swbuf_r>:
    c724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c726:	460d      	mov	r5, r1
    c728:	4614      	mov	r4, r2
    c72a:	4606      	mov	r6, r0
    c72c:	b110      	cbz	r0, c734 <__swbuf_r+0x10>
    c72e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c730:	2b00      	cmp	r3, #0
    c732:	d04c      	beq.n	c7ce <__swbuf_r+0xaa>
    c734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c738:	69a3      	ldr	r3, [r4, #24]
    c73a:	60a3      	str	r3, [r4, #8]
    c73c:	0717      	lsls	r7, r2, #28
    c73e:	b290      	uxth	r0, r2
    c740:	d51b      	bpl.n	c77a <__swbuf_r+0x56>
    c742:	6923      	ldr	r3, [r4, #16]
    c744:	b1cb      	cbz	r3, c77a <__swbuf_r+0x56>
    c746:	b2ed      	uxtb	r5, r5
    c748:	0481      	lsls	r1, r0, #18
    c74a:	462f      	mov	r7, r5
    c74c:	d522      	bpl.n	c794 <__swbuf_r+0x70>
    c74e:	6822      	ldr	r2, [r4, #0]
    c750:	6961      	ldr	r1, [r4, #20]
    c752:	1ad3      	subs	r3, r2, r3
    c754:	4299      	cmp	r1, r3
    c756:	dd29      	ble.n	c7ac <__swbuf_r+0x88>
    c758:	3301      	adds	r3, #1
    c75a:	68a1      	ldr	r1, [r4, #8]
    c75c:	3901      	subs	r1, #1
    c75e:	60a1      	str	r1, [r4, #8]
    c760:	1c51      	adds	r1, r2, #1
    c762:	6021      	str	r1, [r4, #0]
    c764:	7015      	strb	r5, [r2, #0]
    c766:	6962      	ldr	r2, [r4, #20]
    c768:	429a      	cmp	r2, r3
    c76a:	d027      	beq.n	c7bc <__swbuf_r+0x98>
    c76c:	89a3      	ldrh	r3, [r4, #12]
    c76e:	07db      	lsls	r3, r3, #31
    c770:	d501      	bpl.n	c776 <__swbuf_r+0x52>
    c772:	2d0a      	cmp	r5, #10
    c774:	d022      	beq.n	c7bc <__swbuf_r+0x98>
    c776:	4638      	mov	r0, r7
    c778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c77a:	4621      	mov	r1, r4
    c77c:	4630      	mov	r0, r6
    c77e:	f7ff fddf 	bl	c340 <__swsetup_r>
    c782:	bb08      	cbnz	r0, c7c8 <__swbuf_r+0xa4>
    c784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c788:	6923      	ldr	r3, [r4, #16]
    c78a:	b290      	uxth	r0, r2
    c78c:	b2ed      	uxtb	r5, r5
    c78e:	0481      	lsls	r1, r0, #18
    c790:	462f      	mov	r7, r5
    c792:	d4dc      	bmi.n	c74e <__swbuf_r+0x2a>
    c794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c798:	81a2      	strh	r2, [r4, #12]
    c79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c79c:	6961      	ldr	r1, [r4, #20]
    c79e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    c7a2:	6662      	str	r2, [r4, #100]	; 0x64
    c7a4:	6822      	ldr	r2, [r4, #0]
    c7a6:	1ad3      	subs	r3, r2, r3
    c7a8:	4299      	cmp	r1, r3
    c7aa:	dcd5      	bgt.n	c758 <__swbuf_r+0x34>
    c7ac:	4621      	mov	r1, r4
    c7ae:	4630      	mov	r0, r6
    c7b0:	f7fd fb9a 	bl	9ee8 <_fflush_r>
    c7b4:	b940      	cbnz	r0, c7c8 <__swbuf_r+0xa4>
    c7b6:	6822      	ldr	r2, [r4, #0]
    c7b8:	2301      	movs	r3, #1
    c7ba:	e7ce      	b.n	c75a <__swbuf_r+0x36>
    c7bc:	4621      	mov	r1, r4
    c7be:	4630      	mov	r0, r6
    c7c0:	f7fd fb92 	bl	9ee8 <_fflush_r>
    c7c4:	2800      	cmp	r0, #0
    c7c6:	d0d6      	beq.n	c776 <__swbuf_r+0x52>
    c7c8:	f04f 37ff 	mov.w	r7, #4294967295
    c7cc:	e7d3      	b.n	c776 <__swbuf_r+0x52>
    c7ce:	f7fa ffeb 	bl	77a8 <__sinit>
    c7d2:	e7af      	b.n	c734 <__swbuf_r+0x10>

0000c7d4 <_fstat_r>:
    c7d4:	b570      	push	{r4, r5, r6, lr}
    c7d6:	460c      	mov	r4, r1
    c7d8:	4d08      	ldr	r5, [pc, #32]	; (c7fc <_fstat_r+0x28>)
    c7da:	4603      	mov	r3, r0
    c7dc:	2600      	movs	r6, #0
    c7de:	4620      	mov	r0, r4
    c7e0:	4611      	mov	r1, r2
    c7e2:	461c      	mov	r4, r3
    c7e4:	602e      	str	r6, [r5, #0]
    c7e6:	f7f8 f839 	bl	485c <_fstat>
    c7ea:	1c43      	adds	r3, r0, #1
    c7ec:	d000      	beq.n	c7f0 <_fstat_r+0x1c>
    c7ee:	bd70      	pop	{r4, r5, r6, pc}
    c7f0:	682b      	ldr	r3, [r5, #0]
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d0fb      	beq.n	c7ee <_fstat_r+0x1a>
    c7f6:	6023      	str	r3, [r4, #0]
    c7f8:	bd70      	pop	{r4, r5, r6, pc}
    c7fa:	bf00      	nop
    c7fc:	200032e4 	.word	0x200032e4

0000c800 <_isatty_r>:
    c800:	b538      	push	{r3, r4, r5, lr}
    c802:	4d07      	ldr	r5, [pc, #28]	; (c820 <_isatty_r+0x20>)
    c804:	2200      	movs	r2, #0
    c806:	4604      	mov	r4, r0
    c808:	4608      	mov	r0, r1
    c80a:	602a      	str	r2, [r5, #0]
    c80c:	f7f8 f82c 	bl	4868 <_isatty>
    c810:	1c43      	adds	r3, r0, #1
    c812:	d000      	beq.n	c816 <_isatty_r+0x16>
    c814:	bd38      	pop	{r3, r4, r5, pc}
    c816:	682b      	ldr	r3, [r5, #0]
    c818:	2b00      	cmp	r3, #0
    c81a:	d0fb      	beq.n	c814 <_isatty_r+0x14>
    c81c:	6023      	str	r3, [r4, #0]
    c81e:	bd38      	pop	{r3, r4, r5, pc}
    c820:	200032e4 	.word	0x200032e4

0000c824 <__aeabi_drsub>:
    c824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c828:	e002      	b.n	c830 <__adddf3>
    c82a:	bf00      	nop

0000c82c <__aeabi_dsub>:
    c82c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c830 <__adddf3>:
    c830:	b530      	push	{r4, r5, lr}
    c832:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c836:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c83a:	ea94 0f05 	teq	r4, r5
    c83e:	bf08      	it	eq
    c840:	ea90 0f02 	teqeq	r0, r2
    c844:	bf1f      	itttt	ne
    c846:	ea54 0c00 	orrsne.w	ip, r4, r0
    c84a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c84e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c856:	f000 80e2 	beq.w	ca1e <__adddf3+0x1ee>
    c85a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c85e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c862:	bfb8      	it	lt
    c864:	426d      	neglt	r5, r5
    c866:	dd0c      	ble.n	c882 <__adddf3+0x52>
    c868:	442c      	add	r4, r5
    c86a:	ea80 0202 	eor.w	r2, r0, r2
    c86e:	ea81 0303 	eor.w	r3, r1, r3
    c872:	ea82 0000 	eor.w	r0, r2, r0
    c876:	ea83 0101 	eor.w	r1, r3, r1
    c87a:	ea80 0202 	eor.w	r2, r0, r2
    c87e:	ea81 0303 	eor.w	r3, r1, r3
    c882:	2d36      	cmp	r5, #54	; 0x36
    c884:	bf88      	it	hi
    c886:	bd30      	pophi	{r4, r5, pc}
    c888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c88c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c898:	d002      	beq.n	c8a0 <__adddf3+0x70>
    c89a:	4240      	negs	r0, r0
    c89c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c8a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c8a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c8a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c8ac:	d002      	beq.n	c8b4 <__adddf3+0x84>
    c8ae:	4252      	negs	r2, r2
    c8b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c8b4:	ea94 0f05 	teq	r4, r5
    c8b8:	f000 80a7 	beq.w	ca0a <__adddf3+0x1da>
    c8bc:	f1a4 0401 	sub.w	r4, r4, #1
    c8c0:	f1d5 0e20 	rsbs	lr, r5, #32
    c8c4:	db0d      	blt.n	c8e2 <__adddf3+0xb2>
    c8c6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c8ca:	fa22 f205 	lsr.w	r2, r2, r5
    c8ce:	1880      	adds	r0, r0, r2
    c8d0:	f141 0100 	adc.w	r1, r1, #0
    c8d4:	fa03 f20e 	lsl.w	r2, r3, lr
    c8d8:	1880      	adds	r0, r0, r2
    c8da:	fa43 f305 	asr.w	r3, r3, r5
    c8de:	4159      	adcs	r1, r3
    c8e0:	e00e      	b.n	c900 <__adddf3+0xd0>
    c8e2:	f1a5 0520 	sub.w	r5, r5, #32
    c8e6:	f10e 0e20 	add.w	lr, lr, #32
    c8ea:	2a01      	cmp	r2, #1
    c8ec:	fa03 fc0e 	lsl.w	ip, r3, lr
    c8f0:	bf28      	it	cs
    c8f2:	f04c 0c02 	orrcs.w	ip, ip, #2
    c8f6:	fa43 f305 	asr.w	r3, r3, r5
    c8fa:	18c0      	adds	r0, r0, r3
    c8fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c904:	d507      	bpl.n	c916 <__adddf3+0xe6>
    c906:	f04f 0e00 	mov.w	lr, #0
    c90a:	f1dc 0c00 	rsbs	ip, ip, #0
    c90e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c912:	eb6e 0101 	sbc.w	r1, lr, r1
    c916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c91a:	d31b      	bcc.n	c954 <__adddf3+0x124>
    c91c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c920:	d30c      	bcc.n	c93c <__adddf3+0x10c>
    c922:	0849      	lsrs	r1, r1, #1
    c924:	ea5f 0030 	movs.w	r0, r0, rrx
    c928:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c92c:	f104 0401 	add.w	r4, r4, #1
    c930:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c938:	f080 809a 	bcs.w	ca70 <__adddf3+0x240>
    c93c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c940:	bf08      	it	eq
    c942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c946:	f150 0000 	adcs.w	r0, r0, #0
    c94a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c94e:	ea41 0105 	orr.w	r1, r1, r5
    c952:	bd30      	pop	{r4, r5, pc}
    c954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c958:	4140      	adcs	r0, r0
    c95a:	eb41 0101 	adc.w	r1, r1, r1
    c95e:	3c01      	subs	r4, #1
    c960:	bf28      	it	cs
    c962:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c966:	d2e9      	bcs.n	c93c <__adddf3+0x10c>
    c968:	f091 0f00 	teq	r1, #0
    c96c:	bf04      	itt	eq
    c96e:	4601      	moveq	r1, r0
    c970:	2000      	moveq	r0, #0
    c972:	fab1 f381 	clz	r3, r1
    c976:	bf08      	it	eq
    c978:	3320      	addeq	r3, #32
    c97a:	f1a3 030b 	sub.w	r3, r3, #11
    c97e:	f1b3 0220 	subs.w	r2, r3, #32
    c982:	da0c      	bge.n	c99e <__adddf3+0x16e>
    c984:	320c      	adds	r2, #12
    c986:	dd08      	ble.n	c99a <__adddf3+0x16a>
    c988:	f102 0c14 	add.w	ip, r2, #20
    c98c:	f1c2 020c 	rsb	r2, r2, #12
    c990:	fa01 f00c 	lsl.w	r0, r1, ip
    c994:	fa21 f102 	lsr.w	r1, r1, r2
    c998:	e00c      	b.n	c9b4 <__adddf3+0x184>
    c99a:	f102 0214 	add.w	r2, r2, #20
    c99e:	bfd8      	it	le
    c9a0:	f1c2 0c20 	rsble	ip, r2, #32
    c9a4:	fa01 f102 	lsl.w	r1, r1, r2
    c9a8:	fa20 fc0c 	lsr.w	ip, r0, ip
    c9ac:	bfdc      	itt	le
    c9ae:	ea41 010c 	orrle.w	r1, r1, ip
    c9b2:	4090      	lslle	r0, r2
    c9b4:	1ae4      	subs	r4, r4, r3
    c9b6:	bfa2      	ittt	ge
    c9b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c9bc:	4329      	orrge	r1, r5
    c9be:	bd30      	popge	{r4, r5, pc}
    c9c0:	ea6f 0404 	mvn.w	r4, r4
    c9c4:	3c1f      	subs	r4, #31
    c9c6:	da1c      	bge.n	ca02 <__adddf3+0x1d2>
    c9c8:	340c      	adds	r4, #12
    c9ca:	dc0e      	bgt.n	c9ea <__adddf3+0x1ba>
    c9cc:	f104 0414 	add.w	r4, r4, #20
    c9d0:	f1c4 0220 	rsb	r2, r4, #32
    c9d4:	fa20 f004 	lsr.w	r0, r0, r4
    c9d8:	fa01 f302 	lsl.w	r3, r1, r2
    c9dc:	ea40 0003 	orr.w	r0, r0, r3
    c9e0:	fa21 f304 	lsr.w	r3, r1, r4
    c9e4:	ea45 0103 	orr.w	r1, r5, r3
    c9e8:	bd30      	pop	{r4, r5, pc}
    c9ea:	f1c4 040c 	rsb	r4, r4, #12
    c9ee:	f1c4 0220 	rsb	r2, r4, #32
    c9f2:	fa20 f002 	lsr.w	r0, r0, r2
    c9f6:	fa01 f304 	lsl.w	r3, r1, r4
    c9fa:	ea40 0003 	orr.w	r0, r0, r3
    c9fe:	4629      	mov	r1, r5
    ca00:	bd30      	pop	{r4, r5, pc}
    ca02:	fa21 f004 	lsr.w	r0, r1, r4
    ca06:	4629      	mov	r1, r5
    ca08:	bd30      	pop	{r4, r5, pc}
    ca0a:	f094 0f00 	teq	r4, #0
    ca0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ca12:	bf06      	itte	eq
    ca14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ca18:	3401      	addeq	r4, #1
    ca1a:	3d01      	subne	r5, #1
    ca1c:	e74e      	b.n	c8bc <__adddf3+0x8c>
    ca1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ca22:	bf18      	it	ne
    ca24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ca28:	d029      	beq.n	ca7e <__adddf3+0x24e>
    ca2a:	ea94 0f05 	teq	r4, r5
    ca2e:	bf08      	it	eq
    ca30:	ea90 0f02 	teqeq	r0, r2
    ca34:	d005      	beq.n	ca42 <__adddf3+0x212>
    ca36:	ea54 0c00 	orrs.w	ip, r4, r0
    ca3a:	bf04      	itt	eq
    ca3c:	4619      	moveq	r1, r3
    ca3e:	4610      	moveq	r0, r2
    ca40:	bd30      	pop	{r4, r5, pc}
    ca42:	ea91 0f03 	teq	r1, r3
    ca46:	bf1e      	ittt	ne
    ca48:	2100      	movne	r1, #0
    ca4a:	2000      	movne	r0, #0
    ca4c:	bd30      	popne	{r4, r5, pc}
    ca4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    ca52:	d105      	bne.n	ca60 <__adddf3+0x230>
    ca54:	0040      	lsls	r0, r0, #1
    ca56:	4149      	adcs	r1, r1
    ca58:	bf28      	it	cs
    ca5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ca5e:	bd30      	pop	{r4, r5, pc}
    ca60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    ca64:	bf3c      	itt	cc
    ca66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    ca6a:	bd30      	popcc	{r4, r5, pc}
    ca6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ca70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ca74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ca78:	f04f 0000 	mov.w	r0, #0
    ca7c:	bd30      	pop	{r4, r5, pc}
    ca7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ca82:	bf1a      	itte	ne
    ca84:	4619      	movne	r1, r3
    ca86:	4610      	movne	r0, r2
    ca88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ca8c:	bf1c      	itt	ne
    ca8e:	460b      	movne	r3, r1
    ca90:	4602      	movne	r2, r0
    ca92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ca96:	bf06      	itte	eq
    ca98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    ca9c:	ea91 0f03 	teqeq	r1, r3
    caa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    caa4:	bd30      	pop	{r4, r5, pc}
    caa6:	bf00      	nop

0000caa8 <__aeabi_ui2d>:
    caa8:	f090 0f00 	teq	r0, #0
    caac:	bf04      	itt	eq
    caae:	2100      	moveq	r1, #0
    cab0:	4770      	bxeq	lr
    cab2:	b530      	push	{r4, r5, lr}
    cab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cabc:	f04f 0500 	mov.w	r5, #0
    cac0:	f04f 0100 	mov.w	r1, #0
    cac4:	e750      	b.n	c968 <__adddf3+0x138>
    cac6:	bf00      	nop

0000cac8 <__aeabi_i2d>:
    cac8:	f090 0f00 	teq	r0, #0
    cacc:	bf04      	itt	eq
    cace:	2100      	moveq	r1, #0
    cad0:	4770      	bxeq	lr
    cad2:	b530      	push	{r4, r5, lr}
    cad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cadc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cae0:	bf48      	it	mi
    cae2:	4240      	negmi	r0, r0
    cae4:	f04f 0100 	mov.w	r1, #0
    cae8:	e73e      	b.n	c968 <__adddf3+0x138>
    caea:	bf00      	nop

0000caec <__aeabi_f2d>:
    caec:	0042      	lsls	r2, r0, #1
    caee:	ea4f 01e2 	mov.w	r1, r2, asr #3
    caf2:	ea4f 0131 	mov.w	r1, r1, rrx
    caf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cafa:	bf1f      	itttt	ne
    cafc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cb08:	4770      	bxne	lr
    cb0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    cb0e:	bf08      	it	eq
    cb10:	4770      	bxeq	lr
    cb12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    cb16:	bf04      	itt	eq
    cb18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    cb1c:	4770      	bxeq	lr
    cb1e:	b530      	push	{r4, r5, lr}
    cb20:	f44f 7460 	mov.w	r4, #896	; 0x380
    cb24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cb28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cb2c:	e71c      	b.n	c968 <__adddf3+0x138>
    cb2e:	bf00      	nop

0000cb30 <__aeabi_ul2d>:
    cb30:	ea50 0201 	orrs.w	r2, r0, r1
    cb34:	bf08      	it	eq
    cb36:	4770      	bxeq	lr
    cb38:	b530      	push	{r4, r5, lr}
    cb3a:	f04f 0500 	mov.w	r5, #0
    cb3e:	e00a      	b.n	cb56 <__aeabi_l2d+0x16>

0000cb40 <__aeabi_l2d>:
    cb40:	ea50 0201 	orrs.w	r2, r0, r1
    cb44:	bf08      	it	eq
    cb46:	4770      	bxeq	lr
    cb48:	b530      	push	{r4, r5, lr}
    cb4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cb4e:	d502      	bpl.n	cb56 <__aeabi_l2d+0x16>
    cb50:	4240      	negs	r0, r0
    cb52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb56:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cb62:	f43f aed8 	beq.w	c916 <__adddf3+0xe6>
    cb66:	f04f 0203 	mov.w	r2, #3
    cb6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb6e:	bf18      	it	ne
    cb70:	3203      	addne	r2, #3
    cb72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb76:	bf18      	it	ne
    cb78:	3203      	addne	r2, #3
    cb7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cb7e:	f1c2 0320 	rsb	r3, r2, #32
    cb82:	fa00 fc03 	lsl.w	ip, r0, r3
    cb86:	fa20 f002 	lsr.w	r0, r0, r2
    cb8a:	fa01 fe03 	lsl.w	lr, r1, r3
    cb8e:	ea40 000e 	orr.w	r0, r0, lr
    cb92:	fa21 f102 	lsr.w	r1, r1, r2
    cb96:	4414      	add	r4, r2
    cb98:	e6bd      	b.n	c916 <__adddf3+0xe6>
    cb9a:	bf00      	nop

0000cb9c <__aeabi_d2lz>:
    cb9c:	b508      	push	{r3, lr}
    cb9e:	4602      	mov	r2, r0
    cba0:	460b      	mov	r3, r1
    cba2:	ec43 2b17 	vmov	d7, r2, r3
    cba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    cbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cbae:	d403      	bmi.n	cbb8 <__aeabi_d2lz+0x1c>
    cbb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cbb4:	f000 b80c 	b.w	cbd0 <__aeabi_d2ulz>
    cbb8:	eeb1 7b47 	vneg.f64	d7, d7
    cbbc:	ec51 0b17 	vmov	r0, r1, d7
    cbc0:	f000 f806 	bl	cbd0 <__aeabi_d2ulz>
    cbc4:	4240      	negs	r0, r0
    cbc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbca:	bd08      	pop	{r3, pc}
    cbcc:	0000      	movs	r0, r0
	...

0000cbd0 <__aeabi_d2ulz>:
    cbd0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; cc00 <__aeabi_d2ulz+0x30>
    cbd4:	ec41 0b17 	vmov	d7, r0, r1
    cbd8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; cc08 <__aeabi_d2ulz+0x38>
    cbdc:	ee27 6b06 	vmul.f64	d6, d7, d6
    cbe0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    cbe4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    cbe8:	eea4 7b45 	vfms.f64	d7, d4, d5
    cbec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    cbf0:	ee16 1a10 	vmov	r1, s12
    cbf4:	ee17 0a90 	vmov	r0, s15
    cbf8:	4770      	bx	lr
    cbfa:	bf00      	nop
    cbfc:	f3af 8000 	nop.w
    cc00:	00000000 	.word	0x00000000
    cc04:	3df00000 	.word	0x3df00000
    cc08:	00000000 	.word	0x00000000
    cc0c:	41f00000 	.word	0x41f00000

0000cc10 <___reboot_Teensyduino__veneer>:
    cc10:	f85f f000 	ldr.w	pc, [pc]	; cc14 <___reboot_Teensyduino__veneer+0x4>
    cc14:	60001ed1 	.word	0x60001ed1

0000cc18 <___ZN7TwoWire5beginEv_veneer>:
    cc18:	f85f f000 	ldr.w	pc, [pc]	; cc1c <___ZN7TwoWire5beginEv_veneer+0x4>
    cc1c:	60001769 	.word	0x60001769

0000cc20 <___init_veneer>:
    cc20:	f85f f000 	ldr.w	pc, [pc]	; cc24 <___init_veneer+0x4>
    cc24:	60001f79 	.word	0x60001f79
	...

Disassembly of section .fini:

0000cc30 <_fini>:
    cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc32:	bf00      	nop
