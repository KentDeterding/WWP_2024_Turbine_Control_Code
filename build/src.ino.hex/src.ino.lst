
C:\Users\Kent4\Projects\Wildcat_Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20001ac0 	.word	0x20001ac0
6000142c:	20002ba0 	.word	0x20002ba0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f918 	bl	60001674 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b6 	bl	60001684 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fae4 	bl	60001b18 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fc79 	bl	60001e58 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 f8f2 	bl	60001794 <configure_external_ram>
	analog_init();
600015b0:	f000 fc16 	bl	60001de0 <analog_init>
	pwm_init();
600015b4:	f000 fc5c 	bl	60001e70 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 fadc 	bl	60001b74 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 f85c 	bl	60001678 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 fb6d 	bl	60001ca4 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 f855 	bl	60001680 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 f851 	bl	6000167c <startup_default_late_hook>
	__libc_init_array();
600015da:	f000 fc35 	bl	60001e48 <____libc_init_array_veneer>
	main();
600015de:	f000 fc3f 	bl	60001e60 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0000bae8 	.word	0x0000bae8
600015f0:	60001f90 	.word	0x60001f90
600015f4:	00000000 	.word	0x00000000
600015f8:	20001ac0 	.word	0x20001ac0
600015fc:	6000da7c 	.word	0x6000da7c
60001600:	20000000 	.word	0x20000000
60001604:	20001800 	.word	0x20001800
60001608:	00002d19 	.word	0x00002d19
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	00001e45 	.word	0x00001e45
6000161c:	20002b38 	.word	0x20002b38
60001620:	00001e49 	.word	0x00001e49
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20002b3c 	.word	0x20002b3c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaaf 	.word	0xaaaaaaaf
6000166c:	00200007 	.word	0x00200007
60001670:	20070000 	.word	0x20070000

60001674 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_middle_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_default_late_hook>:
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop

60001680 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001680:	bf00      	nop
60001682:	4770      	bx	lr

60001684 <configure_cache>:
{
60001684:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001686:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000168a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000168c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168e:	4831      	ldr	r0, [pc, #196]	; (60001754 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001690:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001694:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001698:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000169a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169e:	482e      	ldr	r0, [pc, #184]	; (60001758 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600016a0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a4:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016aa:	482c      	ldr	r0, [pc, #176]	; (6000175c <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016ac:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b0:	4a2b      	ldr	r2, [pc, #172]	; (60001760 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016b2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b6:	4c2b      	ldr	r4, [pc, #172]	; (60001764 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b8:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016bc:	482a      	ldr	r0, [pc, #168]	; (60001768 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016be:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016c2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	4c29      	ldr	r4, [pc, #164]	; (6000176c <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c8:	4829      	ldr	r0, [pc, #164]	; (60001770 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016ca:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ce:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d2:	4c28      	ldr	r4, [pc, #160]	; (60001774 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d8:	4827      	ldr	r0, [pc, #156]	; (60001778 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016da:	4a28      	ldr	r2, [pc, #160]	; (6000177c <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016dc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016e0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ec:	4c24      	ldr	r4, [pc, #144]	; (60001780 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ee:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f0:	4824      	ldr	r0, [pc, #144]	; (60001784 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016f2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fa:	4a23      	ldr	r2, [pc, #140]	; (60001788 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016fc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001700:	4c22      	ldr	r4, [pc, #136]	; (6000178c <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001702:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001706:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000170a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170e:	4820      	ldr	r0, [pc, #128]	; (60001790 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001710:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001714:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001716:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000171a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	asm("nop");
60001724:	bf00      	nop
	asm("nop");
60001726:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001728:	2201      	movs	r2, #1
6000172a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001732:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001736:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000173a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001742:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001746:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000174a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001752:	4770      	bx	lr
60001754:	1000003f 	.word	0x1000003f
60001758:	07080025 	.word	0x07080025
6000175c:	00100009 	.word	0x00100009
60001760:	20002ba0 	.word	0x20002ba0
60001764:	00200013 	.word	0x00200013
60001768:	07020021 	.word	0x07020021
6000176c:	20000014 	.word	0x20000014
60001770:	13080025 	.word	0x13080025
60001774:	10000009 	.word	0x10000009
60001778:	20200016 	.word	0x20200016
6000177c:	130b0027 	.word	0x130b0027
60001780:	40000017 	.word	0x40000017
60001784:	60000018 	.word	0x60000018
60001788:	070b002f 	.word	0x070b002f
6000178c:	70000019 	.word	0x70000019
60001790:	8000001a 	.word	0x8000001a

60001794 <configure_external_ram>:
{
60001794:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001796:	4bb8      	ldr	r3, [pc, #736]	; (60001a78 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000179a:	4eb8      	ldr	r6, [pc, #736]	; (60001a7c <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000179c:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000179e:	4fb8      	ldr	r7, [pc, #736]	; (60001a80 <configure_external_ram+0x2ec>)
{
600017a0:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017a2:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017a6:	49b7      	ldr	r1, [pc, #732]	; (60001a84 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600017a8:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017ac:	4db6      	ldr	r5, [pc, #728]	; (60001a88 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600017ae:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b2:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b6:	4cb5      	ldr	r4, [pc, #724]	; (60001a8c <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600017b8:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017bc:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c0:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c4:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600017c8:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017cc:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600017d0:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600017d2:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600017d4:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600017d6:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017d8:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017e6:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017ea:	4aa9      	ldr	r2, [pc, #676]	; (60001a90 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017ec:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017f0:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017f4:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017f8:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017fc:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001800:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001802:	4ba4      	ldr	r3, [pc, #656]	; (60001a94 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001804:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001806:	48a4      	ldr	r0, [pc, #656]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001808:	49a4      	ldr	r1, [pc, #656]	; (60001a9c <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000180a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000180c:	4aa4      	ldr	r2, [pc, #656]	; (60001aa0 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000180e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001814:	f043 030c 	orr.w	r3, r3, #12
60001818:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000181c:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001820:	6803      	ldr	r3, [r0, #0]
60001822:	f043 0302 	orr.w	r3, r3, #2
60001826:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001828:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000182a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000182c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001830:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001832:	4b9c      	ldr	r3, [pc, #624]	; (60001aa4 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001834:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001836:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001838:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000183a:	4c9b      	ldr	r4, [pc, #620]	; (60001aa8 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000183c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000183e:	4a9b      	ldr	r2, [pc, #620]	; (60001aac <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001844:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001846:	68c3      	ldr	r3, [r0, #12]
60001848:	f023 0378 	bic.w	r3, r3, #120	; 0x78
6000184c:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000184e:	6a03      	ldr	r3, [r0, #32]
60001850:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001852:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001854:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001856:	6a03      	ldr	r3, [r0, #32]
60001858:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000185a:	4a95      	ldr	r2, [pc, #596]	; (60001ab0 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000185c:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185e:	4c95      	ldr	r4, [pc, #596]	; (60001ab4 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001860:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001862:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001864:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001866:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001868:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
6000186c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001870:	f043 0301 	orr.w	r3, r3, #1
60001874:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001878:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000187c:	498e      	ldr	r1, [pc, #568]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000187e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001882:	f043 0301 	orr.w	r3, r3, #1
60001886:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000188a:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000188e:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001890:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001892:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001894:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001898:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000189a:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000189c:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000189e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600018a2:	6803      	ldr	r3, [r0, #0]
600018a4:	f023 0302 	bic.w	r3, r3, #2
600018a8:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018aa:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ac:	4b83      	ldr	r3, [pc, #524]	; (60001abc <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018ae:	4984      	ldr	r1, [pc, #528]	; (60001ac0 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018b0:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018b2:	f843 2b04 	str.w	r2, [r3], #4
600018b6:	428b      	cmp	r3, r1
600018b8:	d1fb      	bne.n	600018b2 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600018ba:	4a77      	ldr	r2, [pc, #476]	; (60001a98 <configure_external_ram+0x304>)
600018bc:	6813      	ldr	r3, [r2, #0]
600018be:	f043 0301 	orr.w	r3, r3, #1
600018c2:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600018c4:	6813      	ldr	r3, [r2, #0]
600018c6:	f013 0301 	ands.w	r3, r3, #1
600018ca:	d1fb      	bne.n	600018c4 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018cc:	487a      	ldr	r0, [pc, #488]	; (60001ab8 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018ce:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018d0:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600018d4:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018d6:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018da:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018dc:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018e0:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018e4:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018e8:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ec:	4975      	ldr	r1, [pc, #468]	; (60001ac4 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018ee:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018f2:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018f6:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018fa:	4873      	ldr	r0, [pc, #460]	; (60001ac8 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018fc:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001900:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001904:	4c71      	ldr	r4, [pc, #452]	; (60001acc <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001906:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000190a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000190e:	4970      	ldr	r1, [pc, #448]	; (60001ad0 <configure_external_ram+0x33c>)
60001910:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001914:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001916:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
6000191a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000191e:	485e      	ldr	r0, [pc, #376]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001920:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001924:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001928:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000192c:	6943      	ldr	r3, [r0, #20]
6000192e:	07da      	lsls	r2, r3, #31
60001930:	d5fc      	bpl.n	6000192c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001932:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001934:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193a:	4957      	ldr	r1, [pc, #348]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000193e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001942:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001946:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194a:	694b      	ldr	r3, [r1, #20]
6000194c:	07db      	lsls	r3, r3, #31
6000194e:	d5fc      	bpl.n	6000194a <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001950:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001952:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001958:	4a4f      	ldr	r2, [pc, #316]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000195a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000195c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001960:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001964:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001968:	6953      	ldr	r3, [r2, #20]
6000196a:	07df      	lsls	r7, r3, #31
6000196c:	d5fc      	bpl.n	60001968 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000196e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001970:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001972:	4858      	ldr	r0, [pc, #352]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001974:	4948      	ldr	r1, [pc, #288]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001976:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001978:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001984:	694b      	ldr	r3, [r1, #20]
60001986:	07de      	lsls	r6, r3, #31
60001988:	d5fc      	bpl.n	60001984 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
6000198a:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000198e:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001992:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001994:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001996:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001998:	4293      	cmp	r3, r2
6000199a:	d165      	bne.n	60001a68 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
6000199c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000199e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019a2:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a4:	483c      	ldr	r0, [pc, #240]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600019a6:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019aa:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ae:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b2:	6943      	ldr	r3, [r0, #20]
600019b4:	07dd      	lsls	r5, r3, #31
600019b6:	d5fc      	bpl.n	600019b2 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019b8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019ba:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019be:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c0:	4a35      	ldr	r2, [pc, #212]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019c2:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600019c4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c8:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d0:	6953      	ldr	r3, [r2, #20]
600019d2:	07dc      	lsls	r4, r3, #31
600019d4:	d5fc      	bpl.n	600019d0 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019d6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019d8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e0:	492d      	ldr	r1, [pc, #180]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e2:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019e4:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019e8:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019ec:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f0:	694b      	ldr	r3, [r1, #20]
600019f2:	07d8      	lsls	r0, r3, #31
600019f4:	d5fc      	bpl.n	600019f0 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019f6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019f8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a00:	4a25      	ldr	r2, [pc, #148]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a02:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001a04:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a08:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a0c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a10:	6953      	ldr	r3, [r2, #20]
60001a12:	07d9      	lsls	r1, r3, #31
60001a14:	d5fc      	bpl.n	60001a10 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a16:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a18:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a1c:	482d      	ldr	r0, [pc, #180]	; (60001ad4 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a1e:	491e      	ldr	r1, [pc, #120]	; (60001a98 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a20:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001a22:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a26:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a2a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a2e:	694b      	ldr	r3, [r1, #20]
60001a30:	07da      	lsls	r2, r3, #31
60001a32:	d5fc      	bpl.n	60001a2e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001a34:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a38:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a3c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a3e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a40:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a42:	4293      	cmp	r3, r2
60001a44:	d050      	beq.n	60001ae8 <configure_external_ram+0x354>
60001a46:	2508      	movs	r5, #8
60001a48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a4c:	4922      	ldr	r1, [pc, #136]	; (60001ad8 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a4e:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a50:	4b22      	ldr	r3, [pc, #136]	; (60001adc <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a52:	4a23      	ldr	r2, [pc, #140]	; (60001ae0 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a54:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a56:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a58:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a5a:	2301      	movs	r3, #1
60001a5c:	4821      	ldr	r0, [pc, #132]	; (60001ae4 <configure_external_ram+0x350>)
60001a5e:	4422      	add	r2, r4
60001a60:	f000 fa02 	bl	60001e68 <__sm_set_pool_veneer>
}
60001a64:	b003      	add	sp, #12
60001a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a68:	4b1e      	ldr	r3, [pc, #120]	; (60001ae4 <configure_external_ram+0x350>)
60001a6a:	2200      	movs	r2, #0
60001a6c:	e9c3 2200 	strd	r2, r2, [r3]
60001a70:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a74:	b003      	add	sp, #12
60001a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a78:	401f8000 	.word	0x401f8000
60001a7c:	0001b0f9 	.word	0x0001b0f9
60001a80:	000110f9 	.word	0x000110f9
60001a84:	401f8400 	.word	0x401f8400
60001a88:	000170f9 	.word	0x000170f9
60001a8c:	400fc000 	.word	0x400fc000
60001a90:	1ffffcff 	.word	0x1ffffcff
60001a94:	a0000300 	.word	0xa0000300
60001a98:	402a4000 	.word	0x402a4000
60001a9c:	402a8000 	.word	0x402a8000
60001aa0:	ffff0012 	.word	0xffff0012
60001aa4:	00f737ff 	.word	0x00f737ff
60001aa8:	80000040 	.word	0x80000040
60001aac:	7cf0ff00 	.word	0x7cf0ff00
60001ab0:	830f00ff 	.word	0x830f00ff
60001ab4:	00020063 	.word	0x00020063
60001ab8:	5af05af0 	.word	0x5af05af0
60001abc:	402a4200 	.word	0x402a4200
60001ac0:	402a4300 	.word	0x402a4300
60001ac4:	3018049f 	.word	0x3018049f
60001ac8:	0a1806eb 	.word	0x0a1806eb
60001acc:	0a180638 	.word	0x0a180638
60001ad0:	26013206 	.word	0x26013206
60001ad4:	00030004 	.word	0x00030004
60001ad8:	70000000 	.word	0x70000000
60001adc:	70000000 	.word	0x70000000
60001ae0:	20002b62 	.word	0x20002b62
60001ae4:	20002060 	.word	0x20002060
	FLEXSPI2_IPCR0 = addr;
60001ae8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af0:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af2:	4808      	ldr	r0, [pc, #32]	; (60001b14 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001af4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001af8:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001afc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b00:	6943      	ldr	r3, [r0, #20]
60001b02:	07db      	lsls	r3, r3, #31
60001b04:	d5fc      	bpl.n	60001b00 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	2301      	movs	r3, #1
60001b08:	2510      	movs	r5, #16
60001b0a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001b0e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001b10:	e79c      	b.n	60001a4c <configure_external_ram+0x2b8>
60001b12:	bf00      	nop
60001b14:	402a4000 	.word	0x402a4000

60001b18 <usb_pll_start>:
{
60001b18:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b1a:	4a15      	ldr	r2, [pc, #84]	; (60001b70 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b1c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b1e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b22:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b26:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b2a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b2e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b32:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b34:	f013 0f02 	tst.w	r3, #2
60001b38:	d10e      	bne.n	60001b58 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b3a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b3e:	d00f      	beq.n	60001b60 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b40:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b44:	d00e      	beq.n	60001b64 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b46:	2b00      	cmp	r3, #0
60001b48:	daf3      	bge.n	60001b32 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b4a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b4e:	d10b      	bne.n	60001b68 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b50:	065b      	lsls	r3, r3, #25
60001b52:	d50b      	bpl.n	60001b6c <usb_pll_start+0x54>
}
60001b54:	bcf0      	pop	{r4, r5, r6, r7}
60001b56:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b58:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b5a:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b5c:	6190      	str	r0, [r2, #24]
			continue;
60001b5e:	e7e8      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b60:	6155      	str	r5, [r2, #20]
			continue;
60001b62:	e7e6      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b64:	6156      	str	r6, [r2, #20]
			continue;
60001b66:	e7e4      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b68:	6191      	str	r1, [r2, #24]
			continue;
60001b6a:	e7e2      	b.n	60001b32 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b6c:	6157      	str	r7, [r2, #20]
			continue;
60001b6e:	e7e0      	b.n	60001b32 <usb_pll_start+0x1a>
60001b70:	400d8000 	.word	0x400d8000

60001b74 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b74:	4a3f      	ldr	r2, [pc, #252]	; (60001c74 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b76:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b78:	493f      	ldr	r1, [pc, #252]	; (60001c78 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7a:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b82:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b86:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c7c <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b8a:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b8e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c80 <tempmon_init+0x10c>
{
60001b92:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b98:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b9c:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba0:	4d38      	ldr	r5, [pc, #224]	; (60001c84 <tempmon_init+0x110>)
60001ba2:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ba4:	4c38      	ldr	r4, [pc, #224]	; (60001c88 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba6:	4839      	ldr	r0, [pc, #228]	; (60001c8c <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ba8:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001baa:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bae:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bb0:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001bb8:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bbc:	ee07 1a10 	vmov	s14, r1
60001bc0:	4b33      	ldr	r3, [pc, #204]	; (60001c90 <tempmon_init+0x11c>)
60001bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bc6:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bcc:	4931      	ldr	r1, [pc, #196]	; (60001c94 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bce:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd2:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001bd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bda:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bde:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001be2:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be6:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bee:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bf2:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf6:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bfa:	4827      	ldr	r0, [pc, #156]	; (60001c98 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfc:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c00:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c04:	ee75 5a87 	vadd.f32	s11, s11, s14
60001c08:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c0c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c10:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c14:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c18:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c24:	ee16 3a10 	vmov	r3, s12
60001c28:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c30:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001c34:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c36:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c3a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c42:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c46:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c48:	4914      	ldr	r1, [pc, #80]	; (60001c9c <tempmon_init+0x128>)
60001c4a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c52:	f043 0302 	orr.w	r3, r3, #2
60001c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c5a:	4b11      	ldr	r3, [pc, #68]	; (60001ca0 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c5c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c60:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c68:	2201      	movs	r2, #1
}
60001c6a:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c6c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c70:	4770      	bx	lr
60001c72:	bf00      	nop
60001c74:	400d8100 	.word	0x400d8100
60001c78:	401f4400 	.word	0x401f4400
60001c7c:	42aa0000 	.word	0x42aa0000
60001c80:	42b40000 	.word	0x42b40000
60001c84:	20002b28 	.word	0x20002b28
60001c88:	20002b24 	.word	0x20002b24
60001c8c:	20002b2c 	.word	0x20002b2c
60001c90:	20002b30 	.word	0x20002b30
60001c94:	0fff0000 	.word	0x0fff0000
60001c98:	e000e400 	.word	0xe000e400
60001c9c:	20001800 	.word	0x20001800
60001ca0:	00002f01 	.word	0x00002f01

60001ca4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001ca4:	4b31      	ldr	r3, [pc, #196]	; (60001d6c <usb_init+0xc8>)
60001ca6:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001caa:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001cb0:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001cb4:	f000 f8e0 	bl	60001e78 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cb8:	4a2d      	ldr	r2, [pc, #180]	; (60001d70 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001cba:	492e      	ldr	r1, [pc, #184]	; (60001d74 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cc0:	482d      	ldr	r0, [pc, #180]	; (60001d78 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001cc2:	f043 0303 	orr.w	r3, r3, #3
60001cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cca:	4b2c      	ldr	r3, [pc, #176]	; (60001d7c <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001ccc:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001cd0:	6802      	ldr	r2, [r0, #0]
60001cd2:	421a      	tst	r2, r3
60001cd4:	d103      	bne.n	60001cde <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001cd6:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001cda:	079a      	lsls	r2, r3, #30
60001cdc:	d01b      	beq.n	60001d16 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cde:	4a25      	ldr	r2, [pc, #148]	; (60001d74 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ce0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001ce4:	4b24      	ldr	r3, [pc, #144]	; (60001d78 <usb_init+0xd4>)
60001ce6:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ce8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cec:	f043 0302 	orr.w	r3, r3, #2
60001cf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cf4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cf8:	079b      	lsls	r3, r3, #30
60001cfa:	d4fb      	bmi.n	60001cf4 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001d00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d04:	4b1c      	ldr	r3, [pc, #112]	; (60001d78 <usb_init+0xd4>)
60001d06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001d0a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001d0e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001d10:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001d12:	f000 f89d 	bl	60001e50 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d16:	4a18      	ldr	r2, [pc, #96]	; (60001d78 <usb_init+0xd4>)
60001d18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d1c:	4c15      	ldr	r4, [pc, #84]	; (60001d74 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001d1e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001d20:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d22:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d24:	4b16      	ldr	r3, [pc, #88]	; (60001d80 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001d26:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d28:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001d2c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d30:	4618      	mov	r0, r3
60001d32:	f000 f885 	bl	60001e40 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d3a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d3c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d40:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d44:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d46:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d4a:	641a      	str	r2, [r3, #64]	; 0x40
60001d4c:	4b0d      	ldr	r3, [pc, #52]	; (60001d84 <usb_init+0xe0>)
60001d4e:	4a0e      	ldr	r2, [pc, #56]	; (60001d88 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d50:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d58:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d60:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d62:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d66:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d6a:	bd10      	pop	{r4, pc}
60001d6c:	400d8000 	.word	0x400d8000
60001d70:	400fc000 	.word	0x400fc000
60001d74:	402e0000 	.word	0x402e0000
60001d78:	400d9000 	.word	0x400d9000
60001d7c:	001e1c00 	.word	0x001e1c00
60001d80:	20000000 	.word	0x20000000
60001d84:	20001800 	.word	0x20001800
60001d88:	000030e9 	.word	0x000030e9

60001d8c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001d8c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d8e:	4b0e      	ldr	r3, [pc, #56]	; (60001dc8 <_reboot_Teensyduino_+0x3c>)
60001d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d92:	079b      	lsls	r3, r3, #30
60001d94:	d400      	bmi.n	60001d98 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d96:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d98:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d9a:	4b0c      	ldr	r3, [pc, #48]	; (60001dcc <_reboot_Teensyduino_+0x40>)
60001d9c:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d9e:	4a0c      	ldr	r2, [pc, #48]	; (60001dd0 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001da0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001da4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001da8:	490a      	ldr	r1, [pc, #40]	; (60001dd4 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001daa:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001dae:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001db0:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001db2:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001db6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001dba:	4807      	ldr	r0, [pc, #28]	; (60001dd8 <_reboot_Teensyduino_+0x4c>)
60001dbc:	4a07      	ldr	r2, [pc, #28]	; (60001ddc <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dbe:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001dc0:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001dc2:	689b      	ldr	r3, [r3, #8]
60001dc4:	4798      	blx	r3
	}
	__builtin_unreachable();
60001dc6:	bf00      	nop
60001dc8:	401f4400 	.word	0x401f4400
60001dcc:	402e0000 	.word	0x402e0000
60001dd0:	400ac000 	.word	0x400ac000
60001dd4:	00200003 	.word	0x00200003
60001dd8:	20208000 	.word	0x20208000
60001ddc:	eb120000 	.word	0xeb120000

60001de0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de0:	4b10      	ldr	r3, [pc, #64]	; (60001e24 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de2:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001de4:	4a10      	ldr	r2, [pc, #64]	; (60001e28 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001de6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001de8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001dec:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dee:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001df0:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001df4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001df6:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dfa:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dfc:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dfe:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001e00:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e02:	061b      	lsls	r3, r3, #24
60001e04:	d4fc      	bmi.n	60001e00 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e06:	4a09      	ldr	r2, [pc, #36]	; (60001e2c <analog_init+0x4c>)
60001e08:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e0c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001e0e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001e10:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001e12:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001e14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001e18:	d1fb      	bne.n	60001e12 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001e1a:	4a05      	ldr	r2, [pc, #20]	; (60001e30 <analog_init+0x50>)
60001e1c:	7013      	strb	r3, [r2, #0]
}
60001e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
60001e22:	4770      	bx	lr
60001e24:	400fc000 	.word	0x400fc000
60001e28:	400c4000 	.word	0x400c4000
60001e2c:	400c8000 	.word	0x400c8000
60001e30:	20002b61 	.word	0x20002b61

60001e34 <_init>:
60001e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001e36:	bf00      	nop
60001e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e3a:	bc08      	pop	{r3}
60001e3c:	469e      	mov	lr, r3
60001e3e:	4770      	bx	lr

60001e40 <__memset_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__memset_veneer+0x4>
60001e44:	00006891 	.word	0x00006891

60001e48 <____libc_init_array_veneer>:
60001e48:	f85f f000 	ldr.w	pc, [pc]	; 60001e4c <____libc_init_array_veneer+0x4>
60001e4c:	00006ffd 	.word	0x00006ffd

60001e50 <__delay_veneer>:
60001e50:	f85f f000 	ldr.w	pc, [pc]	; 60001e54 <__delay_veneer+0x4>
60001e54:	00002701 	.word	0x00002701

60001e58 <__set_arm_clock_veneer>:
60001e58:	f85f f000 	ldr.w	pc, [pc]	; 60001e5c <__set_arm_clock_veneer+0x4>
60001e5c:	00002411 	.word	0x00002411

60001e60 <__main_veneer>:
60001e60:	f85f f000 	ldr.w	pc, [pc]	; 60001e64 <__main_veneer+0x4>
60001e64:	00002821 	.word	0x00002821

60001e68 <__sm_set_pool_veneer>:
60001e68:	f85f f000 	ldr.w	pc, [pc]	; 60001e6c <__sm_set_pool_veneer+0x4>
60001e6c:	000049b9 	.word	0x000049b9

60001e70 <__pwm_init_veneer>:
60001e70:	f85f f000 	ldr.w	pc, [pc]	; 60001e74 <__pwm_init_veneer+0x4>
60001e74:	00004855 	.word	0x00004855

60001e78 <__usb_init_serialnumber_veneer>:
60001e78:	f85f f000 	ldr.w	pc, [pc]	; 60001e7c <__usb_init_serialnumber_veneer+0x4>
60001e7c:	00003859 	.word	0x00003859

60001e80 <__frame_dummy_init_array_entry>:
60001e80:	00000045 00000cdd                       E.......

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
bool Adafruit_MCP4725::begin(uint8_t i2c_address, TwoWire *wire) {
  if (i2c_dev) {
    delete i2c_dev;
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31

  if (!i2c_dev->begin()) {
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
      2c:	1049      	asrs	r1, r1, #1
    return false;
  }

  return true;
}
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
  if (!i2c_dev->begin()) {
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	20001ac0 	.word	0x20001ac0
      3c:	20001ac0 	.word	0x20001ac0
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            array_index -= (int)filter->size;
        }
        sum += (double) *(filter->array + array_index);
    }
    return sum / (double)(filter->size - 2);
}
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
      60:	20002ac8 	.word	0x20002ac8
      64:	60010400 	.word	0x60010400

00000068 <NextArg(String&)>:
#include <Arduino.h>
#include "types.h"

// Get the next argument from a string and remove it
String NextArg(String &command) {
      68:	b570      	push	{r4, r5, r6, lr}
    String arg = command.substring(0, command.indexOf(" "));
      6a:	4e17      	ldr	r6, [pc, #92]	; (c8 <NextArg(String&)+0x60>)
String NextArg(String &command) {
      6c:	b086      	sub	sp, #24
      6e:	460c      	mov	r4, r1
      70:	4605      	mov	r5, r0
    String arg = command.substring(0, command.indexOf(" "));
      72:	4631      	mov	r1, r6
      74:	a803      	add	r0, sp, #12
      76:	f001 ffa5 	bl	1fc4 <String::String(char const*)>
      7a:	a903      	add	r1, sp, #12
      7c:	4620      	mov	r0, r4
      7e:	f002 f93f 	bl	2300 <String::indexOf(String const&) const>
      82:	2200      	movs	r2, #0
      84:	4603      	mov	r3, r0
      86:	4621      	mov	r1, r4
      88:	4628      	mov	r0, r5
      8a:	f002 f977 	bl	237c <String::substring(unsigned int, unsigned int) const>
      8e:	a803      	add	r0, sp, #12
      90:	f001 ffe6 	bl	2060 <String::~String()>
    command = command.substring(command.indexOf(" ") + 1);
      94:	4631      	mov	r1, r6
      96:	4668      	mov	r0, sp
      98:	f001 ff94 	bl	1fc4 <String::String(char const*)>
      9c:	4669      	mov	r1, sp
      9e:	4620      	mov	r0, r4
      a0:	f002 f92e 	bl	2300 <String::indexOf(String const&) const>
      a4:	4621      	mov	r1, r4
      a6:	1c42      	adds	r2, r0, #1
      a8:	a803      	add	r0, sp, #12
      aa:	f002 f93b 	bl	2324 <String::substring(unsigned int) const>
      ae:	a903      	add	r1, sp, #12
      b0:	4620      	mov	r0, r4
      b2:	f002 f861 	bl	2178 <String::operator=(String&&)>
      b6:	a803      	add	r0, sp, #12
      b8:	f001 ffd2 	bl	2060 <String::~String()>
      bc:	4668      	mov	r0, sp
      be:	f001 ffcf 	bl	2060 <String::~String()>
    return arg;
}
      c2:	4628      	mov	r0, r5
      c4:	b006      	add	sp, #24
      c6:	bd70      	pop	{r4, r5, r6, pc}
      c8:	200005d8 	.word	0x200005d8

000000cc <MatchCommand(String)>:

Command MatchCommand(String command) {
      cc:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
      ce:	490d      	ldr	r1, [pc, #52]	; (104 <MatchCommand(String)+0x38>)
      d0:	4604      	mov	r4, r0
      d2:	f002 f8e3 	bl	229c <String::equals(char const*) const>
    if (command == "set") {
      d6:	b990      	cbnz	r0, fe <MatchCommand(String)+0x32>
        return Command::SET;
    } else if (command.toLowerCase() == "toggle") {
      d8:	4620      	mov	r0, r4
      da:	f002 f979 	bl	23d0 <String::toLowerCase()>
      de:	490a      	ldr	r1, [pc, #40]	; (108 <MatchCommand(String)+0x3c>)
      e0:	f002 f8dc 	bl	229c <String::equals(char const*) const>
      e4:	b948      	cbnz	r0, fa <MatchCommand(String)+0x2e>
        return Command::TOGGLE;
    } else if (command.toLowerCase() == "help") {
      e6:	4620      	mov	r0, r4
      e8:	f002 f972 	bl	23d0 <String::toLowerCase()>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <MatchCommand(String)+0x40>)
      ee:	f002 f8d5 	bl	229c <String::equals(char const*) const>
        return Command::SET;
      f2:	3800      	subs	r0, #0
      f4:	bf18      	it	ne
      f6:	2001      	movne	r0, #1
        return Command::HELP;
    } else {
        return Command::INVALID;
    }
}
      f8:	bd10      	pop	{r4, pc}
        return Command::TOGGLE;
      fa:	2003      	movs	r0, #3
}
      fc:	bd10      	pop	{r4, pc}
        return Command::SET;
      fe:	2002      	movs	r0, #2
}
     100:	bd10      	pop	{r4, pc}
     102:	bf00      	nop
     104:	2000043c 	.word	0x2000043c
     108:	20000440 	.word	0x20000440
     10c:	20000448 	.word	0x20000448

00000110 <Help()>:

// Help menu
String Help() {
     110:	b530      	push	{r4, r5, lr}
     112:	4604      	mov	r4, r0
     114:	b097      	sub	sp, #92	; 0x5c
    // TODO: Fill in commands
    String string =   "List of valid commands:\n";
     116:	493b      	ldr	r1, [pc, #236]	; (204 <Help()+0xf4>)
     118:	f001 ff54 	bl	1fc4 <String::String(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
     11c:	493a      	ldr	r1, [pc, #232]	; (208 <Help()+0xf8>)
     11e:	4620      	mov	r0, r4
     120:	f002 f896 	bl	2250 <String::append(char const*)>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     124:	4939      	ldr	r1, [pc, #228]	; (20c <Help()+0xfc>)
     126:	a813      	add	r0, sp, #76	; 0x4c
     128:	f001 ff4c 	bl	1fc4 <String::String(char const*)>
            string += "    | la <int>\n" +
            string += "    | pitch <float> (not implemented)\n" +
            string += "toggle <traget>\n" +
            string += "    | pcc\n" +
            string += "    | res (resistance tracking)\n" +
            string += "    | print\n";
     12c:	4621      	mov	r1, r4
     12e:	a813      	add	r0, sp, #76	; 0x4c
     130:	f002 f8ac 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const char *cstr)		{return append(cstr);}
     134:	4936      	ldr	r1, [pc, #216]	; (210 <Help()+0x100>)
     136:	f002 f88b 	bl	2250 <String::append(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     13a:	4936      	ldr	r1, [pc, #216]	; (214 <Help()+0x104>)
	String & operator += (const char *cstr)		{return append(cstr);}
     13c:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     13e:	a810      	add	r0, sp, #64	; 0x40
     140:	f001 ff40 	bl	1fc4 <String::String(char const*)>
            string += "    | res (resistance tracking)\n" +
     144:	4621      	mov	r1, r4
     146:	a810      	add	r0, sp, #64	; 0x40
     148:	f002 f8a0 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     14c:	4629      	mov	r1, r5
     14e:	f002 f87b 	bl	2248 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     152:	4931      	ldr	r1, [pc, #196]	; (218 <Help()+0x108>)
	String & operator += (const String &rhs)	{return append(rhs);}
     154:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     156:	a80d      	add	r0, sp, #52	; 0x34
     158:	f001 ff34 	bl	1fc4 <String::String(char const*)>
            string += "    | pcc\n" +
     15c:	4621      	mov	r1, r4
     15e:	a80d      	add	r0, sp, #52	; 0x34
     160:	f002 f894 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     164:	4629      	mov	r1, r5
     166:	f002 f86f 	bl	2248 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     16a:	492c      	ldr	r1, [pc, #176]	; (21c <Help()+0x10c>)
	String & operator += (const String &rhs)	{return append(rhs);}
     16c:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     16e:	a80a      	add	r0, sp, #40	; 0x28
     170:	f001 ff28 	bl	1fc4 <String::String(char const*)>
            string += "toggle <traget>\n" +
     174:	4621      	mov	r1, r4
     176:	a80a      	add	r0, sp, #40	; 0x28
     178:	f002 f888 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     17c:	4629      	mov	r1, r5
     17e:	f002 f863 	bl	2248 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     182:	4927      	ldr	r1, [pc, #156]	; (220 <Help()+0x110>)
	String & operator += (const String &rhs)	{return append(rhs);}
     184:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     186:	a807      	add	r0, sp, #28
     188:	f001 ff1c 	bl	1fc4 <String::String(char const*)>
            string += "    | pitch <float> (not implemented)\n" +
     18c:	4621      	mov	r1, r4
     18e:	a807      	add	r0, sp, #28
     190:	f002 f87c 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     194:	4629      	mov	r1, r5
     196:	f002 f857 	bl	2248 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     19a:	4922      	ldr	r1, [pc, #136]	; (224 <Help()+0x114>)
	String & operator += (const String &rhs)	{return append(rhs);}
     19c:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     19e:	a804      	add	r0, sp, #16
     1a0:	f001 ff10 	bl	1fc4 <String::String(char const*)>
            string += "    | la <int>\n" +
     1a4:	4621      	mov	r1, r4
     1a6:	a804      	add	r0, sp, #16
     1a8:	f002 f870 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     1ac:	4629      	mov	r1, r5
     1ae:	f002 f84b 	bl	2248 <String::append(String const&)>
	StringSumHelper(const char *p) : String(p) {}
     1b2:	491d      	ldr	r1, [pc, #116]	; (228 <Help()+0x118>)
	String & operator += (const String &rhs)	{return append(rhs);}
     1b4:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
     1b6:	a801      	add	r0, sp, #4
     1b8:	f001 ff04 	bl	1fc4 <String::String(char const*)>
            string += "    | res <float>\n" +
     1bc:	4621      	mov	r1, r4
     1be:	a801      	add	r0, sp, #4
     1c0:	f002 f864 	bl	228c <operator+(StringSumHelper const&, String const&)>
	String & operator += (const String &rhs)	{return append(rhs);}
     1c4:	4629      	mov	r1, r5
     1c6:	f002 f83f 	bl	2248 <String::append(String const&)>
     1ca:	4601      	mov	r1, r0
     1cc:	4620      	mov	r0, r4
     1ce:	f002 f83b 	bl	2248 <String::append(String const&)>
class StringSumHelper : public String
     1d2:	a801      	add	r0, sp, #4
     1d4:	f001 ff44 	bl	2060 <String::~String()>
     1d8:	a804      	add	r0, sp, #16
     1da:	f001 ff41 	bl	2060 <String::~String()>
     1de:	a807      	add	r0, sp, #28
     1e0:	f001 ff3e 	bl	2060 <String::~String()>
     1e4:	a80a      	add	r0, sp, #40	; 0x28
     1e6:	f001 ff3b 	bl	2060 <String::~String()>
     1ea:	a80d      	add	r0, sp, #52	; 0x34
     1ec:	f001 ff38 	bl	2060 <String::~String()>
     1f0:	a810      	add	r0, sp, #64	; 0x40
     1f2:	f001 ff35 	bl	2060 <String::~String()>
     1f6:	a813      	add	r0, sp, #76	; 0x4c
     1f8:	f001 ff32 	bl	2060 <String::~String()>
    return string;
     1fc:	4620      	mov	r0, r4
     1fe:	b017      	add	sp, #92	; 0x5c
     200:	bd30      	pop	{r4, r5, pc}
     202:	bf00      	nop
     204:	200004e8 	.word	0x200004e8
     208:	20000504 	.word	0x20000504
     20c:	2000051c 	.word	0x2000051c
     210:	20000540 	.word	0x20000540
     214:	20000550 	.word	0x20000550
     218:	2000055c 	.word	0x2000055c
     21c:	20000570 	.word	0x20000570
     220:	20000598 	.word	0x20000598
     224:	200005a8 	.word	0x200005a8
     228:	200005bc 	.word	0x200005bc

0000022c <CreateFilter(unsigned int, int)>:
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     22c:	b570      	push	{r4, r5, r6, lr}
     22e:	4605      	mov	r5, r0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     230:	2018      	movs	r0, #24
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     232:	460e      	mov	r6, r1
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     234:	f004 fc22 	bl	4a7c <malloc>
    filter->oldestMoment = 0;
     238:	2300      	movs	r3, #0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     23a:	4604      	mov	r4, r0
    filter->size = size;
     23c:	6005      	str	r5, [r0, #0]
    filter->errorThreshold = 0.25;
     23e:	2200      	movs	r2, #0
    filter->oldestMoment = 0;
     240:	6063      	str	r3, [r4, #4]
    filter->array = (int*)malloc(sizeof(int) * size);
     242:	00a8      	lsls	r0, r5, #2
    filter->errorThreshold = 0.25;
     244:	4b04      	ldr	r3, [pc, #16]	; (258 <CreateFilter(unsigned int, int)+0x2c>)
    filter->peaks_per_rotation = peaks_per_rotation;
     246:	6126      	str	r6, [r4, #16]
    filter->errorThreshold = 0.25;
     248:	e9c4 2302 	strd	r2, r3, [r4, #8]
    filter->array = (int*)malloc(sizeof(int) * size);
     24c:	f004 fc16 	bl	4a7c <malloc>
     250:	4603      	mov	r3, r0
}
     252:	4620      	mov	r0, r4
    filter->array = (int*)malloc(sizeof(int) * size);
     254:	6163      	str	r3, [r4, #20]
}
     256:	bd70      	pop	{r4, r5, r6, pc}
     258:	3fd00000 	.word	0x3fd00000
     25c:	00000000 	.word	0x00000000

00000260 <GetRpmBuffered(Filter*)>:

double GetRpmBuffered(struct Filter* filter) {
    int highIndex = filter->oldestMoment - 1;
     260:	6841      	ldr	r1, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
    int lowIndex = filter->oldestMoment + 1;
     262:	6843      	ldr	r3, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     264:	6802      	ldr	r2, [r0, #0]
     266:	3901      	subs	r1, #1
double GetRpmBuffered(struct Filter* filter) {
     268:	b410      	push	{r4}
    int lowIndex = filter->oldestMoment + 1;
     26a:	f103 0401 	add.w	r4, r3, #1
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     26e:	bf48      	it	mi
     270:	f102 31ff 	addmi.w	r1, r2, #4294967295
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     274:	4294      	cmp	r4, r2
    lowIndex++;
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
    
    double high = (double) *(filter->array + highIndex);
     276:	6944      	ldr	r4, [r0, #20]
    lowIndex++;
     278:	bfb4      	ite	lt
     27a:	3302      	addlt	r3, #2
     27c:	2301      	movge	r3, #1
    double high = (double) *(filter->array + highIndex);
     27e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     282:	429a      	cmp	r2, r3
    double low = (double) *(filter->array + lowIndex);
     284:	bfcc      	ite	gt
     286:	009b      	lslgt	r3, r3, #2
     288:	2300      	movle	r3, #0
     28a:	58e3      	ldr	r3, [r4, r3]
    
    if (high < low) {
     28c:	4299      	cmp	r1, r3
     28e:	db21      	blt.n	2d4 <GetRpmBuffered(Filter*)+0x74>
    double high = (double) *(filter->array + highIndex);
     290:	ee07 1a90 	vmov	s15, r1
        return -1;
    }
    
    double period = (high - low) / (filter->size - 3);
     294:	3a03      	subs	r2, #3
    period = period / 1000000; // convert us -> s
    double rpm = 60/ period;
    return rpm / (double)filter->peaks_per_rotation;
     296:	ed90 5a04 	vldr	s10, [r0, #16]
    double high = (double) *(filter->array + highIndex);
     29a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    double low = (double) *(filter->array + lowIndex);
     29e:	ee07 3a90 	vmov	s15, r3
    return rpm / (double)filter->peaks_per_rotation;
     2a2:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
}
     2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    double low = (double) *(filter->array + lowIndex);
     2aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    period = period / 1000000; // convert us -> s
     2ae:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 2e0 <GetRpmBuffered(Filter*)+0x80>
    double period = (high - low) / (filter->size - 3);
     2b2:	ee36 6b47 	vsub.f64	d6, d6, d7
     2b6:	ee07 2a90 	vmov	s15, r2
     2ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    double rpm = 60/ period;
     2be:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 2e8 <GetRpmBuffered(Filter*)+0x88>
    double period = (high - low) / (filter->size - 3);
     2c2:	ee86 2b07 	vdiv.f64	d2, d6, d7
    period = period / 1000000; // convert us -> s
     2c6:	ee82 6b03 	vdiv.f64	d6, d2, d3
    double rpm = 60/ period;
     2ca:	ee84 7b06 	vdiv.f64	d7, d4, d6
    return rpm / (double)filter->peaks_per_rotation;
     2ce:	ee87 0b05 	vdiv.f64	d0, d7, d5
}
     2d2:	4770      	bx	lr
        return -1;
     2d4:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
}
     2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
     2dc:	4770      	bx	lr
     2de:	bf00      	nop
     2e0:	00000000 	.word	0x00000000
     2e4:	412e8480 	.word	0x412e8480
     2e8:	00000000 	.word	0x00000000
     2ec:	404e0000 	.word	0x404e0000

000002f0 <setup>:
void setup () {
     2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     2f4:	4d24      	ldr	r5, [pc, #144]	; (388 <setup+0x98>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     2f6:	f240 28ee 	movw	r8, #750	; 0x2ee
     2fa:	4c24      	ldr	r4, [pc, #144]	; (38c <setup+0x9c>)
     2fc:	4f24      	ldr	r7, [pc, #144]	; (390 <setup+0xa0>)
     2fe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3a8 <setup+0xb8>
		uint32_t millis_begin = systick_millis_count;
     302:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     304:	f003 fe88 	bl	4018 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     308:	7823      	ldrb	r3, [r4, #0]
     30a:	b363      	cbz	r3, 366 <setup+0x76>
     30c:	783b      	ldrb	r3, [r7, #0]
     30e:	07da      	lsls	r2, r3, #31
     310:	d529      	bpl.n	366 <setup+0x76>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     312:	682b      	ldr	r3, [r5, #0]
     314:	f8d9 2000 	ldr.w	r2, [r9]
     318:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     31a:	2b0e      	cmp	r3, #14
     31c:	d923      	bls.n	366 <setup+0x76>
		yield();
     31e:	f003 fe7b 	bl	4018 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     322:	7823      	ldrb	r3, [r4, #0]
        delay(10);
     324:	200a      	movs	r0, #10
     326:	b343      	cbz	r3, 37a <setup+0x8a>
     328:	783b      	ldrb	r3, [r7, #0]
     32a:	07db      	lsls	r3, r3, #31
     32c:	d525      	bpl.n	37a <setup+0x8a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     32e:	682b      	ldr	r3, [r5, #0]
     330:	f8d9 2000 	ldr.w	r2, [r9]
     334:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     336:	2b0e      	cmp	r3, #14
     338:	d91f      	bls.n	37a <setup+0x8a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     33a:	210e      	movs	r1, #14
     33c:	4815      	ldr	r0, [pc, #84]	; (394 <setup+0xa4>)
     33e:	f003 fded 	bl	3f1c <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     342:	4815      	ldr	r0, [pc, #84]	; (398 <setup+0xa8>)
     344:	f001 fde4 	bl	1f10 <Print::println()>
     348:	2122      	movs	r1, #34	; 0x22
     34a:	4814      	ldr	r0, [pc, #80]	; (39c <setup+0xac>)
     34c:	f003 fde6 	bl	3f1c <usb_serial_write>
     350:	4811      	ldr	r0, [pc, #68]	; (398 <setup+0xa8>)
     352:	f001 fddd 	bl	1f10 <Print::println()>
     356:	6828      	ldr	r0, [r5, #0]
    printTimer = millis();
     358:	4911      	ldr	r1, [pc, #68]	; (3a0 <setup+0xb0>)
     35a:	682a      	ldr	r2, [r5, #0]
    resistanceTracingTimer = millis();
     35c:	4b11      	ldr	r3, [pc, #68]	; (3a4 <setup+0xb4>)
    printTimer = millis();
     35e:	6008      	str	r0, [r1, #0]
    resistanceTracingTimer = millis();
     360:	601a      	str	r2, [r3, #0]
}
     362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     366:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     368:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     36a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     36c:	b142      	cbz	r2, 380 <setup+0x90>
				if (elapsed > 2000) break;
     36e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     372:	d8d4      	bhi.n	31e <setup+0x2e>
			yield();
     374:	f003 fe50 	bl	4018 <yield>
     378:	e7c4      	b.n	304 <setup+0x14>
        delay(10);
     37a:	f002 f9c1 	bl	2700 <delay>
     37e:	e7ce      	b.n	31e <setup+0x2e>
				if (elapsed > 750) break;
     380:	4543      	cmp	r3, r8
     382:	d9f7      	bls.n	374 <setup+0x84>
     384:	e7cb      	b.n	31e <setup+0x2e>
     386:	bf00      	nop
     388:	20002b3c 	.word	0x20002b3c
     38c:	20002b6c 	.word	0x20002b6c
     390:	20002b6b 	.word	0x20002b6b
     394:	20000e8c 	.word	0x20000e8c
     398:	200010c0 	.word	0x200010c0
     39c:	20000e9c 	.word	0x20000e9c
     3a0:	20002ae0 	.word	0x20002ae0
     3a4:	20002aec 	.word	0x20002aec
     3a8:	20002b4c 	.word	0x20002b4c

000003ac <PrintOutput()>:

void PrintOutput () {
     3ac:	b530      	push	{r4, r5, lr}
     3ae:	b091      	sub	sp, #68	; 0x44
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3b0:	2103      	movs	r1, #3
     3b2:	48bc      	ldr	r0, [pc, #752]	; (6a4 <PrintOutput()+0x2f8>)
     3b4:	f003 fdb2 	bl	3f1c <usb_serial_write>
	StringSumHelper(const char *p) : String(p) {}
     3b8:	49bb      	ldr	r1, [pc, #748]	; (6a8 <PrintOutput()+0x2fc>)
     3ba:	a80a      	add	r0, sp, #40	; 0x28
     3bc:	ac0d      	add	r4, sp, #52	; 0x34
     3be:	f001 fe01 	bl	1fc4 <String::String(char const*)>
     3c2:	4bba      	ldr	r3, [pc, #744]	; (6ac <PrintOutput()+0x300>)
    Serial.print("\n\n\n");
    Serial.println("Time:          \t" + PadString(String(millis())));
     3c4:	220a      	movs	r2, #10
     3c6:	a807      	add	r0, sp, #28
     3c8:	6819      	ldr	r1, [r3, #0]
     3ca:	f001 fe9b 	bl	2104 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
     3d0:	2b07      	cmp	r3, #7
     3d2:	d812      	bhi.n	3fa <PrintOutput()+0x4e>
     3d4:	4db6      	ldr	r5, [pc, #728]	; (6b0 <PrintOutput()+0x304>)
     3d6:	4629      	mov	r1, r5
     3d8:	4620      	mov	r0, r4
     3da:	f001 fdf3 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     3de:	a907      	add	r1, sp, #28
     3e0:	4620      	mov	r0, r4
     3e2:	f001 ff53 	bl	228c <operator+(StringSumHelper const&, String const&)>
     3e6:	4601      	mov	r1, r0
     3e8:	a807      	add	r0, sp, #28
     3ea:	f001 febd 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     3ee:	4620      	mov	r0, r4
     3f0:	f001 fe36 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     3f6:	2b07      	cmp	r3, #7
     3f8:	d9ed      	bls.n	3d6 <PrintOutput()+0x2a>
    return str;
     3fa:	a907      	add	r1, sp, #28
     3fc:	4620      	mov	r0, r4
     3fe:	f001 fe1b 	bl	2038 <String::String(String&&)>
    Serial.println("Time:          \t" + PadString(String(millis())));
     402:	4621      	mov	r1, r4
     404:	a80a      	add	r0, sp, #40	; 0x28
     406:	f001 ff41 	bl	228c <operator+(StringSumHelper const&, String const&)>
     40a:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     40c:	48a9      	ldr	r0, [pc, #676]	; (6b4 <PrintOutput()+0x308>)
     40e:	f001 fd59 	bl	1ec4 <Print::print(String const&)>
     412:	48a8      	ldr	r0, [pc, #672]	; (6b4 <PrintOutput()+0x308>)
     414:	f001 fd7c 	bl	1f10 <Print::println()>
     418:	4620      	mov	r0, r4
     41a:	f001 fe21 	bl	2060 <String::~String()>
     41e:	a807      	add	r0, sp, #28
     420:	f001 fe1e 	bl	2060 <String::~String()>
     424:	a80a      	add	r0, sp, #40	; 0x28
     426:	f001 fe1b 	bl	2060 <String::~String()>
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     42a:	2021      	movs	r0, #33	; 0x21
     42c:	f002 f9e6 	bl	27fc <digitalRead>
     430:	4aa1      	ldr	r2, [pc, #644]	; (6b8 <PrintOutput()+0x30c>)
     432:	49a2      	ldr	r1, [pc, #648]	; (6bc <PrintOutput()+0x310>)
     434:	2800      	cmp	r0, #0
     436:	bf18      	it	ne
     438:	4611      	movne	r1, r2
     43a:	a801      	add	r0, sp, #4
     43c:	f001 fdc2 	bl	1fc4 <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     440:	499f      	ldr	r1, [pc, #636]	; (6c0 <PrintOutput()+0x314>)
     442:	a80a      	add	r0, sp, #40	; 0x28
     444:	f001 fdbe 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tRelay State: " + PadString(relayState));
     448:	a901      	add	r1, sp, #4
     44a:	a807      	add	r0, sp, #28
     44c:	f001 fdd8 	bl	2000 <String::String(String const&)>
    while (str.length() < 8) {
     450:	9b09      	ldr	r3, [sp, #36]	; 0x24
     452:	2b07      	cmp	r3, #7
     454:	d812      	bhi.n	47c <PrintOutput()+0xd0>
     456:	4d96      	ldr	r5, [pc, #600]	; (6b0 <PrintOutput()+0x304>)
     458:	4629      	mov	r1, r5
     45a:	4620      	mov	r0, r4
     45c:	f001 fdb2 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     460:	a907      	add	r1, sp, #28
     462:	4620      	mov	r0, r4
     464:	f001 ff12 	bl	228c <operator+(StringSumHelper const&, String const&)>
     468:	4601      	mov	r1, r0
     46a:	a807      	add	r0, sp, #28
     46c:	f001 fe7c 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     470:	4620      	mov	r0, r4
     472:	f001 fdf5 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     476:	9b09      	ldr	r3, [sp, #36]	; 0x24
     478:	2b07      	cmp	r3, #7
     47a:	d9ed      	bls.n	458 <PrintOutput()+0xac>
    return str;
     47c:	a907      	add	r1, sp, #28
     47e:	4620      	mov	r0, r4
     480:	f001 fdda 	bl	2038 <String::String(String&&)>
    Serial.println("\tRelay State: " + PadString(relayState));
     484:	4621      	mov	r1, r4
     486:	a80a      	add	r0, sp, #40	; 0x28
     488:	f001 ff00 	bl	228c <operator+(StringSumHelper const&, String const&)>
     48c:	4601      	mov	r1, r0
     48e:	4889      	ldr	r0, [pc, #548]	; (6b4 <PrintOutput()+0x308>)
     490:	f001 fd18 	bl	1ec4 <Print::print(String const&)>
     494:	4887      	ldr	r0, [pc, #540]	; (6b4 <PrintOutput()+0x308>)
     496:	f001 fd3b 	bl	1f10 <Print::println()>
     49a:	4620      	mov	r0, r4
     49c:	f001 fde0 	bl	2060 <String::~String()>
     4a0:	a807      	add	r0, sp, #28
     4a2:	f001 fddd 	bl	2060 <String::~String()>
     4a6:	a80a      	add	r0, sp, #40	; 0x28
     4a8:	f001 fdda 	bl	2060 <String::~String()>
    String turbineVoltage = digitalRead(30) ? "High" : "Low";
     4ac:	201e      	movs	r0, #30
     4ae:	f002 f9a5 	bl	27fc <digitalRead>
     4b2:	4a81      	ldr	r2, [pc, #516]	; (6b8 <PrintOutput()+0x30c>)
     4b4:	4981      	ldr	r1, [pc, #516]	; (6bc <PrintOutput()+0x310>)
     4b6:	2800      	cmp	r0, #0
     4b8:	bf18      	it	ne
     4ba:	4611      	movne	r1, r2
     4bc:	a804      	add	r0, sp, #16
     4be:	f001 fd81 	bl	1fc4 <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     4c2:	4980      	ldr	r1, [pc, #512]	; (6c4 <PrintOutput()+0x318>)
     4c4:	a80a      	add	r0, sp, #40	; 0x28
     4c6:	f001 fd7d 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tT-Side Volt: " + PadString(turbineVoltage));
     4ca:	a904      	add	r1, sp, #16
     4cc:	a807      	add	r0, sp, #28
     4ce:	f001 fd97 	bl	2000 <String::String(String const&)>
    while (str.length() < 8) {
     4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4d4:	2b07      	cmp	r3, #7
     4d6:	d812      	bhi.n	4fe <PrintOutput()+0x152>
     4d8:	4d75      	ldr	r5, [pc, #468]	; (6b0 <PrintOutput()+0x304>)
     4da:	4629      	mov	r1, r5
     4dc:	4620      	mov	r0, r4
     4de:	f001 fd71 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     4e2:	a907      	add	r1, sp, #28
     4e4:	4620      	mov	r0, r4
     4e6:	f001 fed1 	bl	228c <operator+(StringSumHelper const&, String const&)>
     4ea:	4601      	mov	r1, r0
     4ec:	a807      	add	r0, sp, #28
     4ee:	f001 fe3b 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     4f2:	4620      	mov	r0, r4
     4f4:	f001 fdb4 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     4fa:	2b07      	cmp	r3, #7
     4fc:	d9ed      	bls.n	4da <PrintOutput()+0x12e>
    return str;
     4fe:	a907      	add	r1, sp, #28
     500:	4620      	mov	r0, r4
     502:	f001 fd99 	bl	2038 <String::String(String&&)>
    Serial.println("\tT-Side Volt: " + PadString(turbineVoltage));
     506:	4621      	mov	r1, r4
     508:	a80a      	add	r0, sp, #40	; 0x28
     50a:	f001 febf 	bl	228c <operator+(StringSumHelper const&, String const&)>
     50e:	4601      	mov	r1, r0
     510:	4868      	ldr	r0, [pc, #416]	; (6b4 <PrintOutput()+0x308>)
     512:	f001 fcd7 	bl	1ec4 <Print::print(String const&)>
     516:	4867      	ldr	r0, [pc, #412]	; (6b4 <PrintOutput()+0x308>)
     518:	f001 fcfa 	bl	1f10 <Print::println()>
     51c:	4620      	mov	r0, r4
     51e:	f001 fd9f 	bl	2060 <String::~String()>
     522:	a807      	add	r0, sp, #28
     524:	f001 fd9c 	bl	2060 <String::~String()>
     528:	a80a      	add	r0, sp, #40	; 0x28
     52a:	f001 fd99 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     52e:	4966      	ldr	r1, [pc, #408]	; (6c8 <PrintOutput()+0x31c>)
     530:	a80a      	add	r0, sp, #40	; 0x28
     532:	f001 fd47 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     536:	2100      	movs	r1, #0
     538:	4864      	ldr	r0, [pc, #400]	; (6cc <PrintOutput()+0x320>)
     53a:	f001 f879 	bl	1630 <PA12::presentPosition(int)>
     53e:	220a      	movs	r2, #10
     540:	4601      	mov	r1, r0
     542:	a807      	add	r0, sp, #28
     544:	f001 fdc8 	bl	20d8 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     548:	9b09      	ldr	r3, [sp, #36]	; 0x24
     54a:	2b07      	cmp	r3, #7
     54c:	d812      	bhi.n	574 <PrintOutput()+0x1c8>
     54e:	4d58      	ldr	r5, [pc, #352]	; (6b0 <PrintOutput()+0x304>)
     550:	4629      	mov	r1, r5
     552:	4620      	mov	r0, r4
     554:	f001 fd36 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     558:	a907      	add	r1, sp, #28
     55a:	4620      	mov	r0, r4
     55c:	f001 fe96 	bl	228c <operator+(StringSumHelper const&, String const&)>
     560:	4601      	mov	r1, r0
     562:	a807      	add	r0, sp, #28
     564:	f001 fe00 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     568:	4620      	mov	r0, r4
     56a:	f001 fd79 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     570:	2b07      	cmp	r3, #7
     572:	d9ed      	bls.n	550 <PrintOutput()+0x1a4>
    return str;
     574:	a907      	add	r1, sp, #28
     576:	4620      	mov	r0, r4
     578:	f001 fd5e 	bl	2038 <String::String(String&&)>
    Serial.println("\tLA Position: " + PadString(String(myServo.presentPosition(LA_ID_NUM))));
     57c:	4621      	mov	r1, r4
     57e:	a80a      	add	r0, sp, #40	; 0x28
     580:	f001 fe84 	bl	228c <operator+(StringSumHelper const&, String const&)>
     584:	4601      	mov	r1, r0
     586:	484b      	ldr	r0, [pc, #300]	; (6b4 <PrintOutput()+0x308>)
     588:	f001 fc9c 	bl	1ec4 <Print::print(String const&)>
     58c:	4849      	ldr	r0, [pc, #292]	; (6b4 <PrintOutput()+0x308>)
     58e:	f001 fcbf 	bl	1f10 <Print::println()>
     592:	4620      	mov	r0, r4
     594:	f001 fd64 	bl	2060 <String::~String()>
     598:	a807      	add	r0, sp, #28
     59a:	f001 fd61 	bl	2060 <String::~String()>
     59e:	a80a      	add	r0, sp, #40	; 0x28
     5a0:	f001 fd5e 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     5a4:	494a      	ldr	r1, [pc, #296]	; (6d0 <PrintOutput()+0x324>)
     5a6:	a80a      	add	r0, sp, #40	; 0x28
     5a8:	f001 fd0c 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     5ac:	4b49      	ldr	r3, [pc, #292]	; (6d4 <PrintOutput()+0x328>)
     5ae:	220a      	movs	r2, #10
     5b0:	a807      	add	r0, sp, #28
     5b2:	8819      	ldrh	r1, [r3, #0]
     5b4:	f001 fd90 	bl	20d8 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     5ba:	2b07      	cmp	r3, #7
     5bc:	d812      	bhi.n	5e4 <PrintOutput()+0x238>
     5be:	4d3c      	ldr	r5, [pc, #240]	; (6b0 <PrintOutput()+0x304>)
     5c0:	4629      	mov	r1, r5
     5c2:	4620      	mov	r0, r4
     5c4:	f001 fcfe 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     5c8:	a907      	add	r1, sp, #28
     5ca:	4620      	mov	r0, r4
     5cc:	f001 fe5e 	bl	228c <operator+(StringSumHelper const&, String const&)>
     5d0:	4601      	mov	r1, r0
     5d2:	a807      	add	r0, sp, #28
     5d4:	f001 fdc8 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     5d8:	4620      	mov	r0, r4
     5da:	f001 fd41 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
     5e0:	2b07      	cmp	r3, #7
     5e2:	d9ed      	bls.n	5c0 <PrintOutput()+0x214>
    return str;
     5e4:	a907      	add	r1, sp, #28
     5e6:	4620      	mov	r0, r4
     5e8:	f001 fd26 	bl	2038 <String::String(String&&)>
    Serial.println("\tDac:         " + PadString(String(dacValue)));
     5ec:	4621      	mov	r1, r4
     5ee:	a80a      	add	r0, sp, #40	; 0x28
     5f0:	f001 fe4c 	bl	228c <operator+(StringSumHelper const&, String const&)>
     5f4:	4601      	mov	r1, r0
     5f6:	482f      	ldr	r0, [pc, #188]	; (6b4 <PrintOutput()+0x308>)
     5f8:	f001 fc64 	bl	1ec4 <Print::print(String const&)>
     5fc:	482d      	ldr	r0, [pc, #180]	; (6b4 <PrintOutput()+0x308>)
     5fe:	f001 fc87 	bl	1f10 <Print::println()>
     602:	4620      	mov	r0, r4
     604:	f001 fd2c 	bl	2060 <String::~String()>
     608:	a807      	add	r0, sp, #28
     60a:	f001 fd29 	bl	2060 <String::~String()>
     60e:	a80a      	add	r0, sp, #40	; 0x28
     610:	f001 fd26 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     614:	4930      	ldr	r1, [pc, #192]	; (6d8 <PrintOutput()+0x32c>)
     616:	a80a      	add	r0, sp, #40	; 0x28
     618:	f001 fcd4 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     61c:	482f      	ldr	r0, [pc, #188]	; (6dc <PrintOutput()+0x330>)
     61e:	f001 f827 	bl	1670 <Adafruit_INA260::readCurrent()>
     622:	2102      	movs	r1, #2
     624:	a807      	add	r0, sp, #28
     626:	f001 fd83 	bl	2130 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     62c:	2b07      	cmp	r3, #7
     62e:	d812      	bhi.n	656 <PrintOutput()+0x2aa>
     630:	4d1f      	ldr	r5, [pc, #124]	; (6b0 <PrintOutput()+0x304>)
     632:	4629      	mov	r1, r5
     634:	4620      	mov	r0, r4
     636:	f001 fcc5 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     63a:	a907      	add	r1, sp, #28
     63c:	4620      	mov	r0, r4
     63e:	f001 fe25 	bl	228c <operator+(StringSumHelper const&, String const&)>
     642:	4601      	mov	r1, r0
     644:	a807      	add	r0, sp, #28
     646:	f001 fd8f 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     64a:	4620      	mov	r0, r4
     64c:	f001 fd08 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     650:	9b09      	ldr	r3, [sp, #36]	; 0x24
     652:	2b07      	cmp	r3, #7
     654:	d9ed      	bls.n	632 <PrintOutput()+0x286>
    return str;
     656:	a907      	add	r1, sp, #28
     658:	4620      	mov	r0, r4
     65a:	f001 fced 	bl	2038 <String::String(String&&)>
    Serial.println("\tCurrent:     " + PadString(String(ina260.readCurrent())));
     65e:	4621      	mov	r1, r4
     660:	a80a      	add	r0, sp, #40	; 0x28
     662:	f001 fe13 	bl	228c <operator+(StringSumHelper const&, String const&)>
     666:	4601      	mov	r1, r0
     668:	4812      	ldr	r0, [pc, #72]	; (6b4 <PrintOutput()+0x308>)
     66a:	f001 fc2b 	bl	1ec4 <Print::print(String const&)>
     66e:	4811      	ldr	r0, [pc, #68]	; (6b4 <PrintOutput()+0x308>)
     670:	f001 fc4e 	bl	1f10 <Print::println()>
     674:	4620      	mov	r0, r4
     676:	f001 fcf3 	bl	2060 <String::~String()>
     67a:	a807      	add	r0, sp, #28
     67c:	f001 fcf0 	bl	2060 <String::~String()>
     680:	a80a      	add	r0, sp, #40	; 0x28
     682:	f001 fced 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     686:	4916      	ldr	r1, [pc, #88]	; (6e0 <PrintOutput()+0x334>)
     688:	a80a      	add	r0, sp, #40	; 0x28
     68a:	f001 fc9b 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     68e:	4813      	ldr	r0, [pc, #76]	; (6dc <PrintOutput()+0x330>)
     690:	f001 f80a 	bl	16a8 <Adafruit_INA260::readBusVoltage()>
     694:	2102      	movs	r1, #2
     696:	a807      	add	r0, sp, #28
     698:	f001 fd4a 	bl	2130 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     69e:	2b07      	cmp	r3, #7
     6a0:	e020      	b.n	6e4 <PrintOutput()+0x338>
     6a2:	bf00      	nop
     6a4:	200003a4 	.word	0x200003a4
     6a8:	200003a8 	.word	0x200003a8
     6ac:	20002b3c 	.word	0x20002b3c
     6b0:	200005d8 	.word	0x200005d8
     6b4:	200010c0 	.word	0x200010c0
     6b8:	20000398 	.word	0x20000398
     6bc:	200003a0 	.word	0x200003a0
     6c0:	200003bc 	.word	0x200003bc
     6c4:	200003cc 	.word	0x200003cc
     6c8:	200003dc 	.word	0x200003dc
     6cc:	20002080 	.word	0x20002080
     6d0:	200003ec 	.word	0x200003ec
     6d4:	2000173e 	.word	0x2000173e
     6d8:	200003fc 	.word	0x200003fc
     6dc:	20002070 	.word	0x20002070
     6e0:	2000040c 	.word	0x2000040c
     6e4:	d812      	bhi.n	70c <PrintOutput()+0x360>
     6e6:	4d54      	ldr	r5, [pc, #336]	; (838 <PrintOutput()+0x48c>)
     6e8:	4629      	mov	r1, r5
     6ea:	4620      	mov	r0, r4
     6ec:	f001 fc6a 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     6f0:	a907      	add	r1, sp, #28
     6f2:	4620      	mov	r0, r4
     6f4:	f001 fdca 	bl	228c <operator+(StringSumHelper const&, String const&)>
     6f8:	4601      	mov	r1, r0
     6fa:	a807      	add	r0, sp, #28
     6fc:	f001 fd34 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     700:	4620      	mov	r0, r4
     702:	f001 fcad 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     706:	9b09      	ldr	r3, [sp, #36]	; 0x24
     708:	2b07      	cmp	r3, #7
     70a:	d9ed      	bls.n	6e8 <PrintOutput()+0x33c>
    return str;
     70c:	a907      	add	r1, sp, #28
     70e:	4620      	mov	r0, r4
     710:	f001 fc92 	bl	2038 <String::String(String&&)>
    Serial.println("\tVoltage:     " + PadString(String(ina260.readBusVoltage())));
     714:	4621      	mov	r1, r4
     716:	a80a      	add	r0, sp, #40	; 0x28
     718:	f001 fdb8 	bl	228c <operator+(StringSumHelper const&, String const&)>
     71c:	4601      	mov	r1, r0
     71e:	4847      	ldr	r0, [pc, #284]	; (83c <PrintOutput()+0x490>)
     720:	f001 fbd0 	bl	1ec4 <Print::print(String const&)>
     724:	4845      	ldr	r0, [pc, #276]	; (83c <PrintOutput()+0x490>)
     726:	f001 fbf3 	bl	1f10 <Print::println()>
     72a:	4620      	mov	r0, r4
     72c:	f001 fc98 	bl	2060 <String::~String()>
     730:	a807      	add	r0, sp, #28
     732:	f001 fc95 	bl	2060 <String::~String()>
     736:	a80a      	add	r0, sp, #40	; 0x28
     738:	f001 fc92 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     73c:	4940      	ldr	r1, [pc, #256]	; (840 <PrintOutput()+0x494>)
     73e:	a80a      	add	r0, sp, #40	; 0x28
     740:	f001 fc40 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     744:	483f      	ldr	r0, [pc, #252]	; (844 <PrintOutput()+0x498>)
     746:	f000 ffc9 	bl	16dc <Adafruit_INA260::readPower()>
     74a:	2102      	movs	r1, #2
     74c:	a807      	add	r0, sp, #28
     74e:	f001 fcef 	bl	2130 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     752:	9b09      	ldr	r3, [sp, #36]	; 0x24
     754:	2b07      	cmp	r3, #7
     756:	d812      	bhi.n	77e <PrintOutput()+0x3d2>
     758:	4d37      	ldr	r5, [pc, #220]	; (838 <PrintOutput()+0x48c>)
     75a:	4629      	mov	r1, r5
     75c:	4620      	mov	r0, r4
     75e:	f001 fc31 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     762:	a907      	add	r1, sp, #28
     764:	4620      	mov	r0, r4
     766:	f001 fd91 	bl	228c <operator+(StringSumHelper const&, String const&)>
     76a:	4601      	mov	r1, r0
     76c:	a807      	add	r0, sp, #28
     76e:	f001 fcfb 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     772:	4620      	mov	r0, r4
     774:	f001 fc74 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     778:	9b09      	ldr	r3, [sp, #36]	; 0x24
     77a:	2b07      	cmp	r3, #7
     77c:	d9ed      	bls.n	75a <PrintOutput()+0x3ae>
    return str;
     77e:	a907      	add	r1, sp, #28
     780:	4620      	mov	r0, r4
     782:	f001 fc59 	bl	2038 <String::String(String&&)>
    Serial.println("\tPower:       " + PadString(String(ina260.readPower())));
     786:	4621      	mov	r1, r4
     788:	a80a      	add	r0, sp, #40	; 0x28
     78a:	f001 fd7f 	bl	228c <operator+(StringSumHelper const&, String const&)>
     78e:	4601      	mov	r1, r0
     790:	482a      	ldr	r0, [pc, #168]	; (83c <PrintOutput()+0x490>)
     792:	f001 fb97 	bl	1ec4 <Print::print(String const&)>
     796:	4829      	ldr	r0, [pc, #164]	; (83c <PrintOutput()+0x490>)
     798:	f001 fbba 	bl	1f10 <Print::println()>
     79c:	4620      	mov	r0, r4
     79e:	f001 fc5f 	bl	2060 <String::~String()>
     7a2:	a807      	add	r0, sp, #28
     7a4:	f001 fc5c 	bl	2060 <String::~String()>
     7a8:	a80a      	add	r0, sp, #40	; 0x28
     7aa:	f001 fc59 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     7ae:	4926      	ldr	r1, [pc, #152]	; (848 <PrintOutput()+0x49c>)
     7b0:	a80a      	add	r0, sp, #40	; 0x28
     7b2:	f001 fc07 	bl	1fc4 <String::String(char const*)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     7b6:	4b25      	ldr	r3, [pc, #148]	; (84c <PrintOutput()+0x4a0>)
     7b8:	6818      	ldr	r0, [r3, #0]
     7ba:	f7ff fd51 	bl	260 <GetRpmBuffered(Filter*)>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     7be:	2102      	movs	r1, #2
     7c0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     7c4:	a807      	add	r0, sp, #28
     7c6:	f001 fcb3 	bl	2130 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
     7cc:	2b07      	cmp	r3, #7
     7ce:	d812      	bhi.n	7f6 <PrintOutput()+0x44a>
	StringSumHelper(const char *p) : String(p) {}
     7d0:	4d19      	ldr	r5, [pc, #100]	; (838 <PrintOutput()+0x48c>)
     7d2:	4629      	mov	r1, r5
     7d4:	4620      	mov	r0, r4
     7d6:	f001 fbf5 	bl	1fc4 <String::String(char const*)>
        str = " " + str;
     7da:	a907      	add	r1, sp, #28
     7dc:	4620      	mov	r0, r4
     7de:	f001 fd55 	bl	228c <operator+(StringSumHelper const&, String const&)>
     7e2:	4601      	mov	r1, r0
     7e4:	a807      	add	r0, sp, #28
     7e6:	f001 fcbf 	bl	2168 <String::operator=(String const&)>
class StringSumHelper : public String
     7ea:	4620      	mov	r0, r4
     7ec:	f001 fc38 	bl	2060 <String::~String()>
    while (str.length() < 8) {
     7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     7f2:	2b07      	cmp	r3, #7
     7f4:	d9ed      	bls.n	7d2 <PrintOutput()+0x426>
    return str;
     7f6:	a907      	add	r1, sp, #28
     7f8:	4620      	mov	r0, r4
     7fa:	f001 fc1d 	bl	2038 <String::String(String&&)>
    Serial.println("\tRPM:         " + PadString(String(GetRpmBuffered(rpm_filter))));
     7fe:	4621      	mov	r1, r4
     800:	a80a      	add	r0, sp, #40	; 0x28
     802:	f001 fd43 	bl	228c <operator+(StringSumHelper const&, String const&)>
     806:	4601      	mov	r1, r0
     808:	480c      	ldr	r0, [pc, #48]	; (83c <PrintOutput()+0x490>)
     80a:	f001 fb5b 	bl	1ec4 <Print::print(String const&)>
     80e:	480b      	ldr	r0, [pc, #44]	; (83c <PrintOutput()+0x490>)
     810:	f001 fb7e 	bl	1f10 <Print::println()>
     814:	4620      	mov	r0, r4
     816:	f001 fc23 	bl	2060 <String::~String()>
     81a:	a807      	add	r0, sp, #28
     81c:	f001 fc20 	bl	2060 <String::~String()>
     820:	a80a      	add	r0, sp, #40	; 0x28
     822:	f001 fc1d 	bl	2060 <String::~String()>
}
     826:	a804      	add	r0, sp, #16
     828:	f001 fc1a 	bl	2060 <String::~String()>
     82c:	a801      	add	r0, sp, #4
     82e:	f001 fc17 	bl	2060 <String::~String()>
     832:	b011      	add	sp, #68	; 0x44
     834:	bd30      	pop	{r4, r5, pc}
     836:	bf00      	nop
     838:	200005d8 	.word	0x200005d8
     83c:	200010c0 	.word	0x200010c0
     840:	2000041c 	.word	0x2000041c
     844:	20002070 	.word	0x20002070
     848:	2000042c 	.word	0x2000042c
     84c:	20002af0 	.word	0x20002af0

00000850 <Set(String&)>:
        default:
            Serial.println("Command not implemented");
    }
}

void Set(String &command) {
     850:	b530      	push	{r4, r5, lr}
     852:	4604      	mov	r4, r0
     854:	b08b      	sub	sp, #44	; 0x2c
    String arg = NextArg(command).toLowerCase();
     856:	4621      	mov	r1, r4
     858:	a807      	add	r0, sp, #28
     85a:	f7ff fc05 	bl	68 <NextArg(String&)>
     85e:	a807      	add	r0, sp, #28
     860:	f001 fdb6 	bl	23d0 <String::toLowerCase()>
     864:	4601      	mov	r1, r0
     866:	a801      	add	r0, sp, #4
     868:	f001 fbca 	bl	2000 <String::String(String const&)>
     86c:	a807      	add	r0, sp, #28
     86e:	f001 fbf7 	bl	2060 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     872:	493f      	ldr	r1, [pc, #252]	; (970 <Set(String&)+0x120>)
     874:	a801      	add	r0, sp, #4
     876:	f001 fd11 	bl	229c <String::equals(char const*) const>
    
    if (arg == "dac") {
     87a:	2800      	cmp	r0, #0
     87c:	d031      	beq.n	8e2 <Set(String&)+0x92>
        dacValue = NextArg(command).toInt();
     87e:	4621      	mov	r1, r4
     880:	a807      	add	r0, sp, #28
     882:	f7ff fbf1 	bl	68 <NextArg(String&)>
     886:	a807      	add	r0, sp, #28
     888:	f001 fdb2 	bl	23f0 <String::toInt() const>
     88c:	4c39      	ldr	r4, [pc, #228]	; (974 <Set(String&)+0x124>)
     88e:	4603      	mov	r3, r0
     890:	a807      	add	r0, sp, #28
     892:	8023      	strh	r3, [r4, #0]
     894:	f001 fbe4 	bl	2060 <String::~String()>
        dac.setVoltage(dacValue, false);
     898:	2200      	movs	r2, #0
     89a:	4b37      	ldr	r3, [pc, #220]	; (978 <Set(String&)+0x128>)
     89c:	8821      	ldrh	r1, [r4, #0]
     89e:	4837      	ldr	r0, [pc, #220]	; (97c <Set(String&)+0x12c>)
     8a0:	f001 fa82 	bl	1da8 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
	StringSumHelper(const char *p) : String(p) {}
     8a4:	4936      	ldr	r1, [pc, #216]	; (980 <Set(String&)+0x130>)
     8a6:	a807      	add	r0, sp, #28
     8a8:	f001 fb8c 	bl	1fc4 <String::String(char const*)>
        Serial.println("DAC set to " + String(dacValue));
     8ac:	220a      	movs	r2, #10
     8ae:	8821      	ldrh	r1, [r4, #0]
    } else if (arg == "la") {
        int pos = NextArg(command).toInt();
        myServo.goalPosition(LA_ID_NUM, pos);
        Serial.println("Linear Actuator set to " + String(pos));
     8b0:	a804      	add	r0, sp, #16
     8b2:	f001 fc11 	bl	20d8 <String::String(int, unsigned char)>
     8b6:	a904      	add	r1, sp, #16
     8b8:	a807      	add	r0, sp, #28
     8ba:	f001 fce7 	bl	228c <operator+(StringSumHelper const&, String const&)>
     8be:	4601      	mov	r1, r0
     8c0:	4830      	ldr	r0, [pc, #192]	; (984 <Set(String&)+0x134>)
     8c2:	f001 faff 	bl	1ec4 <Print::print(String const&)>
     8c6:	482f      	ldr	r0, [pc, #188]	; (984 <Set(String&)+0x134>)
     8c8:	f001 fb22 	bl	1f10 <Print::println()>
     8cc:	a804      	add	r0, sp, #16
     8ce:	f001 fbc7 	bl	2060 <String::~String()>
class StringSumHelper : public String
     8d2:	a807      	add	r0, sp, #28
     8d4:	f001 fbc4 	bl	2060 <String::~String()>
        targetResistance = NextArg(command).toFloat();
    } else {
        Serial.println("Invalid subcommand for set");
        Serial.println("Try \"help\"");
    }
}
     8d8:	a801      	add	r0, sp, #4
     8da:	f001 fbc1 	bl	2060 <String::~String()>
     8de:	b00b      	add	sp, #44	; 0x2c
     8e0:	bd30      	pop	{r4, r5, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     8e2:	4605      	mov	r5, r0
     8e4:	4928      	ldr	r1, [pc, #160]	; (988 <Set(String&)+0x138>)
     8e6:	a801      	add	r0, sp, #4
     8e8:	f001 fcd8 	bl	229c <String::equals(char const*) const>
    } else if (arg == "la") {
     8ec:	b1b0      	cbz	r0, 91c <Set(String&)+0xcc>
        int pos = NextArg(command).toInt();
     8ee:	4621      	mov	r1, r4
     8f0:	a807      	add	r0, sp, #28
     8f2:	f7ff fbb9 	bl	68 <NextArg(String&)>
     8f6:	a807      	add	r0, sp, #28
     8f8:	f001 fd7a 	bl	23f0 <String::toInt() const>
     8fc:	4604      	mov	r4, r0
     8fe:	a807      	add	r0, sp, #28
     900:	f001 fbae 	bl	2060 <String::~String()>
        myServo.goalPosition(LA_ID_NUM, pos);
     904:	4622      	mov	r2, r4
     906:	4629      	mov	r1, r5
     908:	4820      	ldr	r0, [pc, #128]	; (98c <Set(String&)+0x13c>)
     90a:	f000 fe77 	bl	15fc <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     90e:	4920      	ldr	r1, [pc, #128]	; (990 <Set(String&)+0x140>)
     910:	a807      	add	r0, sp, #28
     912:	f001 fb57 	bl	1fc4 <String::String(char const*)>
        Serial.println("Linear Actuator set to " + String(pos));
     916:	220a      	movs	r2, #10
     918:	4621      	mov	r1, r4
     91a:	e7c9      	b.n	8b0 <Set(String&)+0x60>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     91c:	491d      	ldr	r1, [pc, #116]	; (994 <Set(String&)+0x144>)
     91e:	a801      	add	r0, sp, #4
     920:	f001 fcbc 	bl	229c <String::equals(char const*) const>
    } else if (arg == "res") {
     924:	b188      	cbz	r0, 94a <Set(String&)+0xfa>
        targetResistance = NextArg(command).toFloat();
     926:	4621      	mov	r1, r4
     928:	a807      	add	r0, sp, #28
     92a:	f7ff fb9d 	bl	68 <NextArg(String&)>
     92e:	a807      	add	r0, sp, #28
     930:	f001 fd64 	bl	23fc <String::toFloat() const>
     934:	4b18      	ldr	r3, [pc, #96]	; (998 <Set(String&)+0x148>)
     936:	a807      	add	r0, sp, #28
     938:	ed83 0a00 	vstr	s0, [r3]
     93c:	f001 fb90 	bl	2060 <String::~String()>
}
     940:	a801      	add	r0, sp, #4
     942:	f001 fb8d 	bl	2060 <String::~String()>
     946:	b00b      	add	sp, #44	; 0x2c
     948:	bd30      	pop	{r4, r5, pc}
     94a:	211a      	movs	r1, #26
     94c:	4813      	ldr	r0, [pc, #76]	; (99c <Set(String&)+0x14c>)
     94e:	f003 fae5 	bl	3f1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     952:	480c      	ldr	r0, [pc, #48]	; (984 <Set(String&)+0x134>)
     954:	f001 fadc 	bl	1f10 <Print::println()>
     958:	210a      	movs	r1, #10
     95a:	4811      	ldr	r0, [pc, #68]	; (9a0 <Set(String&)+0x150>)
     95c:	f003 fade 	bl	3f1c <usb_serial_write>
     960:	4808      	ldr	r0, [pc, #32]	; (984 <Set(String&)+0x134>)
     962:	f001 fad5 	bl	1f10 <Print::println()>
     966:	a801      	add	r0, sp, #4
     968:	f001 fb7a 	bl	2060 <String::~String()>
     96c:	b00b      	add	sp, #44	; 0x2c
     96e:	bd30      	pop	{r4, r5, pc}
     970:	20000490 	.word	0x20000490
     974:	2000173e 	.word	0x2000173e
     978:	00061a80 	.word	0x00061a80
     97c:	20002048 	.word	0x20002048
     980:	20000494 	.word	0x20000494
     984:	200010c0 	.word	0x200010c0
     988:	200004a0 	.word	0x200004a0
     98c:	20002080 	.word	0x20002080
     990:	200004a4 	.word	0x200004a4
     994:	200004bc 	.word	0x200004bc
     998:	20001724 	.word	0x20001724
     99c:	200004c0 	.word	0x200004c0
     9a0:	200004dc 	.word	0x200004dc

000009a4 <Toggle(String&)>:

void Toggle(String &command) {
     9a4:	b510      	push	{r4, lr}
     9a6:	4604      	mov	r4, r0
     9a8:	b086      	sub	sp, #24
    String arg = NextArg(command).toLowerCase();
     9aa:	4621      	mov	r1, r4
     9ac:	a803      	add	r0, sp, #12
     9ae:	f7ff fb5b 	bl	68 <NextArg(String&)>
     9b2:	a803      	add	r0, sp, #12
     9b4:	f001 fd0c 	bl	23d0 <String::toLowerCase()>
     9b8:	4601      	mov	r1, r0
     9ba:	4668      	mov	r0, sp
     9bc:	f001 fb20 	bl	2000 <String::String(String const&)>
     9c0:	a803      	add	r0, sp, #12
     9c2:	f001 fb4d 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     9c6:	493a      	ldr	r1, [pc, #232]	; (ab0 <Toggle(String&)+0x10c>)
     9c8:	a803      	add	r0, sp, #12
     9ca:	f001 fafb 	bl	1fc4 <String::String(char const*)>
    Serial.println("Toggling " + arg);
     9ce:	4669      	mov	r1, sp
     9d0:	a803      	add	r0, sp, #12
     9d2:	f001 fc5b 	bl	228c <operator+(StringSumHelper const&, String const&)>
     9d6:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     9d8:	4836      	ldr	r0, [pc, #216]	; (ab4 <Toggle(String&)+0x110>)
     9da:	f001 fa73 	bl	1ec4 <Print::print(String const&)>
     9de:	4835      	ldr	r0, [pc, #212]	; (ab4 <Toggle(String&)+0x110>)
     9e0:	f001 fa96 	bl	1f10 <Print::println()>
class StringSumHelper : public String
     9e4:	a803      	add	r0, sp, #12
     9e6:	f001 fb3b 	bl	2060 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     9ea:	4933      	ldr	r1, [pc, #204]	; (ab8 <Toggle(String&)+0x114>)
     9ec:	4668      	mov	r0, sp
     9ee:	f001 fc55 	bl	229c <String::equals(char const*) const>

    if (arg == "pcc") {
     9f2:	2800      	cmp	r0, #0
     9f4:	d035      	beq.n	a62 <Toggle(String&)+0xbe>
        digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     9f6:	2021      	movs	r0, #33	; 0x21
     9f8:	f001 ff00 	bl	27fc <digitalRead>
     9fc:	4601      	mov	r1, r0
     9fe:	2021      	movs	r0, #33	; 0x21
     a00:	fab1 f181 	clz	r1, r1
     a04:	0949      	lsrs	r1, r1, #5
     a06:	f001 fecf 	bl	27a8 <digitalWrite>
     a0a:	2104      	movs	r1, #4
     a0c:	482b      	ldr	r0, [pc, #172]	; (abc <Toggle(String&)+0x118>)
     a0e:	f003 fa85 	bl	3f1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     a12:	4828      	ldr	r0, [pc, #160]	; (ab4 <Toggle(String&)+0x110>)
     a14:	f001 fa7c 	bl	1f10 <Print::println()>
    } else {
        Serial.println("Invalid subcommand for switch");
        Serial.println("Try \"help\"");
    }

    arg = NextArg(command).toLowerCase();
     a18:	4621      	mov	r1, r4
     a1a:	a803      	add	r0, sp, #12
     a1c:	f7ff fb24 	bl	68 <NextArg(String&)>
     a20:	a803      	add	r0, sp, #12
     a22:	f001 fcd5 	bl	23d0 <String::toLowerCase()>
     a26:	4601      	mov	r1, r0
     a28:	4668      	mov	r0, sp
     a2a:	f001 fb9d 	bl	2168 <String::operator=(String const&)>
     a2e:	a803      	add	r0, sp, #12
     a30:	f001 fb16 	bl	2060 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     a34:	a803      	add	r0, sp, #12
     a36:	491e      	ldr	r1, [pc, #120]	; (ab0 <Toggle(String&)+0x10c>)
     a38:	f001 fac4 	bl	1fc4 <String::String(char const*)>
    Serial.println("Toggling " + arg);
     a3c:	4669      	mov	r1, sp
     a3e:	a803      	add	r0, sp, #12
     a40:	f001 fc24 	bl	228c <operator+(StringSumHelper const&, String const&)>
     a44:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     a46:	481b      	ldr	r0, [pc, #108]	; (ab4 <Toggle(String&)+0x110>)
     a48:	f001 fa3c 	bl	1ec4 <Print::print(String const&)>
     a4c:	4819      	ldr	r0, [pc, #100]	; (ab4 <Toggle(String&)+0x110>)
     a4e:	f001 fa5f 	bl	1f10 <Print::println()>
class StringSumHelper : public String
     a52:	a803      	add	r0, sp, #12
     a54:	f001 fb04 	bl	2060 <String::~String()>
}
     a58:	4668      	mov	r0, sp
     a5a:	f001 fb01 	bl	2060 <String::~String()>
     a5e:	b006      	add	sp, #24
     a60:	bd10      	pop	{r4, pc}
    } else if (arg = "res") {
     a62:	4917      	ldr	r1, [pc, #92]	; (ac0 <Toggle(String&)+0x11c>)
     a64:	4668      	mov	r0, sp
     a66:	f001 fb9d 	bl	21a4 <String::operator=(char const*)>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     a6a:	6803      	ldr	r3, [r0, #0]
     a6c:	b12b      	cbz	r3, a7a <Toggle(String&)+0xd6>
        trackResistance = !trackResistance;
     a6e:	4a15      	ldr	r2, [pc, #84]	; (ac4 <Toggle(String&)+0x120>)
     a70:	7813      	ldrb	r3, [r2, #0]
     a72:	f083 0301 	eor.w	r3, r3, #1
     a76:	7013      	strb	r3, [r2, #0]
     a78:	e7ce      	b.n	a18 <Toggle(String&)+0x74>
    } else if (arg = "print") {
     a7a:	4913      	ldr	r1, [pc, #76]	; (ac8 <Toggle(String&)+0x124>)
     a7c:	4668      	mov	r0, sp
     a7e:	f001 fb91 	bl	21a4 <String::operator=(char const*)>
     a82:	6803      	ldr	r3, [r0, #0]
     a84:	b12b      	cbz	r3, a92 <Toggle(String&)+0xee>
        printOutput = !printOutput;
     a86:	4a11      	ldr	r2, [pc, #68]	; (acc <Toggle(String&)+0x128>)
     a88:	7813      	ldrb	r3, [r2, #0]
     a8a:	f083 0301 	eor.w	r3, r3, #1
     a8e:	7013      	strb	r3, [r2, #0]
     a90:	e7c2      	b.n	a18 <Toggle(String&)+0x74>
     a92:	211d      	movs	r1, #29
     a94:	480e      	ldr	r0, [pc, #56]	; (ad0 <Toggle(String&)+0x12c>)
     a96:	f003 fa41 	bl	3f1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     a9a:	4806      	ldr	r0, [pc, #24]	; (ab4 <Toggle(String&)+0x110>)
     a9c:	f001 fa38 	bl	1f10 <Print::println()>
     aa0:	210a      	movs	r1, #10
     aa2:	480c      	ldr	r0, [pc, #48]	; (ad4 <Toggle(String&)+0x130>)
     aa4:	f003 fa3a 	bl	3f1c <usb_serial_write>
     aa8:	4802      	ldr	r0, [pc, #8]	; (ab4 <Toggle(String&)+0x110>)
     aaa:	f001 fa31 	bl	1f10 <Print::println()>
     aae:	e7b3      	b.n	a18 <Toggle(String&)+0x74>
     ab0:	200005d0 	.word	0x200005d0
     ab4:	200010c0 	.word	0x200010c0
     ab8:	200005dc 	.word	0x200005dc
     abc:	20000398 	.word	0x20000398
     ac0:	200004bc 	.word	0x200004bc
     ac4:	20002b67 	.word	0x20002b67
     ac8:	20000600 	.word	0x20000600
     acc:	20002b63 	.word	0x20002b63
     ad0:	200005e0 	.word	0x200005e0
     ad4:	200004dc 	.word	0x200004dc

00000ad8 <ProcessCommand(String&)>:
void ProcessCommand (String &serialInput) {
     ad8:	b510      	push	{r4, lr}
     ada:	b08c      	sub	sp, #48	; 0x30
     adc:	4604      	mov	r4, r0
    String test = "set dac 100";
     ade:	493b      	ldr	r1, [pc, #236]	; (bcc <ProcessCommand(String&)+0xf4>)
     ae0:	4668      	mov	r0, sp
     ae2:	f001 fa6f 	bl	1fc4 <String::String(char const*)>
    Serial.println(NextArg(test));
     ae6:	a809      	add	r0, sp, #36	; 0x24
     ae8:	4669      	mov	r1, sp
     aea:	f7ff fabd 	bl	68 <NextArg(String&)>
	size_t println(const String &s)			{ return print(s) + println(); }
     aee:	a909      	add	r1, sp, #36	; 0x24
     af0:	4837      	ldr	r0, [pc, #220]	; (bd0 <ProcessCommand(String&)+0xf8>)
     af2:	f001 f9e7 	bl	1ec4 <Print::print(String const&)>
     af6:	4836      	ldr	r0, [pc, #216]	; (bd0 <ProcessCommand(String&)+0xf8>)
     af8:	f001 fa0a 	bl	1f10 <Print::println()>
     afc:	a809      	add	r0, sp, #36	; 0x24
     afe:	f001 faaf 	bl	2060 <String::~String()>
    Serial.println(NextArg(test));
     b02:	4669      	mov	r1, sp
     b04:	a809      	add	r0, sp, #36	; 0x24
     b06:	f7ff faaf 	bl	68 <NextArg(String&)>
     b0a:	a909      	add	r1, sp, #36	; 0x24
     b0c:	4830      	ldr	r0, [pc, #192]	; (bd0 <ProcessCommand(String&)+0xf8>)
     b0e:	f001 f9d9 	bl	1ec4 <Print::print(String const&)>
     b12:	482f      	ldr	r0, [pc, #188]	; (bd0 <ProcessCommand(String&)+0xf8>)
     b14:	f001 f9fc 	bl	1f10 <Print::println()>
     b18:	a809      	add	r0, sp, #36	; 0x24
     b1a:	f001 faa1 	bl	2060 <String::~String()>
    Serial.println(NextArg(test));
     b1e:	4669      	mov	r1, sp
     b20:	a809      	add	r0, sp, #36	; 0x24
     b22:	f7ff faa1 	bl	68 <NextArg(String&)>
     b26:	a909      	add	r1, sp, #36	; 0x24
     b28:	4829      	ldr	r0, [pc, #164]	; (bd0 <ProcessCommand(String&)+0xf8>)
     b2a:	f001 f9cb 	bl	1ec4 <Print::print(String const&)>
     b2e:	4828      	ldr	r0, [pc, #160]	; (bd0 <ProcessCommand(String&)+0xf8>)
     b30:	f001 f9ee 	bl	1f10 <Print::println()>
     b34:	a809      	add	r0, sp, #36	; 0x24
     b36:	f001 fa93 	bl	2060 <String::~String()>
    String command = serialInput;
     b3a:	4621      	mov	r1, r4
     b3c:	a803      	add	r0, sp, #12
     b3e:	f001 fa5f 	bl	2000 <String::String(String const&)>
    String cmd = NextArg(command);
     b42:	a903      	add	r1, sp, #12
     b44:	a806      	add	r0, sp, #24
     b46:	f7ff fa8f 	bl	68 <NextArg(String&)>
    switch (MatchCommand(cmd)) {
     b4a:	a906      	add	r1, sp, #24
     b4c:	a809      	add	r0, sp, #36	; 0x24
     b4e:	f001 fa57 	bl	2000 <String::String(String const&)>
     b52:	a809      	add	r0, sp, #36	; 0x24
     b54:	f7ff faba 	bl	cc <MatchCommand(String)>
     b58:	4604      	mov	r4, r0
     b5a:	a809      	add	r0, sp, #36	; 0x24
     b5c:	f001 fa80 	bl	2060 <String::~String()>
     b60:	2c03      	cmp	r4, #3
     b62:	d82b      	bhi.n	bbc <ProcessCommand(String&)+0xe4>
     b64:	e8df f004 	tbb	[pc, r4]
     b68:	02101422 	.word	0x02101422
            Toggle(command);
     b6c:	a803      	add	r0, sp, #12
     b6e:	f7ff ff19 	bl	9a4 <Toggle(String&)>
}
     b72:	a806      	add	r0, sp, #24
     b74:	f001 fa74 	bl	2060 <String::~String()>
     b78:	a803      	add	r0, sp, #12
     b7a:	f001 fa71 	bl	2060 <String::~String()>
     b7e:	4668      	mov	r0, sp
     b80:	f001 fa6e 	bl	2060 <String::~String()>
     b84:	b00c      	add	sp, #48	; 0x30
     b86:	bd10      	pop	{r4, pc}
            Set(command);
     b88:	a803      	add	r0, sp, #12
     b8a:	f7ff fe61 	bl	850 <Set(String&)>
            break;
     b8e:	e7f0      	b.n	b72 <ProcessCommand(String&)+0x9a>
            Serial.println(Help());
     b90:	a809      	add	r0, sp, #36	; 0x24
     b92:	f7ff fabd 	bl	110 <Help()>
     b96:	a909      	add	r1, sp, #36	; 0x24
     b98:	480d      	ldr	r0, [pc, #52]	; (bd0 <ProcessCommand(String&)+0xf8>)
     b9a:	f001 f993 	bl	1ec4 <Print::print(String const&)>
     b9e:	480c      	ldr	r0, [pc, #48]	; (bd0 <ProcessCommand(String&)+0xf8>)
     ba0:	f001 f9b6 	bl	1f10 <Print::println()>
     ba4:	a809      	add	r0, sp, #36	; 0x24
     ba6:	f001 fa5b 	bl	2060 <String::~String()>
            break;
     baa:	e7e2      	b.n	b72 <ProcessCommand(String&)+0x9a>
     bac:	211b      	movs	r1, #27
     bae:	4809      	ldr	r0, [pc, #36]	; (bd4 <ProcessCommand(String&)+0xfc>)
     bb0:	f003 f9b4 	bl	3f1c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     bb4:	4806      	ldr	r0, [pc, #24]	; (bd0 <ProcessCommand(String&)+0xf8>)
     bb6:	f001 f9ab 	bl	1f10 <Print::println()>
     bba:	e7da      	b.n	b72 <ProcessCommand(String&)+0x9a>
     bbc:	2117      	movs	r1, #23
     bbe:	4806      	ldr	r0, [pc, #24]	; (bd8 <ProcessCommand(String&)+0x100>)
     bc0:	f003 f9ac 	bl	3f1c <usb_serial_write>
     bc4:	4802      	ldr	r0, [pc, #8]	; (bd0 <ProcessCommand(String&)+0xf8>)
     bc6:	f001 f9a3 	bl	1f10 <Print::println()>
     bca:	e7d2      	b.n	b72 <ProcessCommand(String&)+0x9a>
     bcc:	20000450 	.word	0x20000450
     bd0:	200010c0 	.word	0x200010c0
     bd4:	2000045c 	.word	0x2000045c
     bd8:	20000478 	.word	0x20000478

00000bdc <loop>:
void loop () {
     bdc:	b510      	push	{r4, lr}
     bde:	ed2d 8b02 	vpush	{d8}
     be2:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
     be4:	f003 f930 	bl	3e48 <usb_serial_available>
    if (Serial.available() > 0) {
     be8:	2800      	cmp	r0, #0
     bea:	dd0d      	ble.n	c08 <loop+0x2c>
        String serialInput = Serial.readStringUntil('\n');
     bec:	2300      	movs	r3, #0
     bee:	220a      	movs	r2, #10
     bf0:	492c      	ldr	r1, [pc, #176]	; (ca4 <loop+0xc8>)
     bf2:	a801      	add	r0, sp, #4
     bf4:	f001 f9aa 	bl	1f4c <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     bf8:	a801      	add	r0, sp, #4
     bfa:	f7ff ff6d 	bl	ad8 <ProcessCommand(String&)>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     bfe:	f003 f9c1 	bl	3f84 <usb_serial_flush_output>
    }
     c02:	a801      	add	r0, sp, #4
     c04:	f001 fa2c 	bl	2060 <String::~String()>
     c08:	4c27      	ldr	r4, [pc, #156]	; (ca8 <loop+0xcc>)
    if (printTimer < millis() && printOutput) {
     c0a:	4b28      	ldr	r3, [pc, #160]	; (cac <loop+0xd0>)
     c0c:	6821      	ldr	r1, [r4, #0]
     c0e:	681a      	ldr	r2, [r3, #0]
     c10:	428a      	cmp	r2, r1
     c12:	d203      	bcs.n	c1c <loop+0x40>
     c14:	4926      	ldr	r1, [pc, #152]	; (cb0 <loop+0xd4>)
     c16:	7809      	ldrb	r1, [r1, #0]
     c18:	2900      	cmp	r1, #0
     c1a:	d134      	bne.n	c86 <loop+0xaa>
    if (resistanceTracingTimer < millis() && trackResistance) {
     c1c:	4b25      	ldr	r3, [pc, #148]	; (cb4 <loop+0xd8>)
     c1e:	6821      	ldr	r1, [r4, #0]
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	428a      	cmp	r2, r1
     c24:	d202      	bcs.n	c2c <loop+0x50>
     c26:	4924      	ldr	r1, [pc, #144]	; (cb8 <loop+0xdc>)
     c28:	7809      	ldrb	r1, [r1, #0]
     c2a:	b919      	cbnz	r1, c34 <loop+0x58>
}
     c2c:	b004      	add	sp, #16
     c2e:	ecbd 8b02 	vpop	{d8}
     c32:	bd10      	pop	{r4, pc}
        resistanceTracingTimer += resistanceTrackingInterval;
     c34:	4921      	ldr	r1, [pc, #132]	; (cbc <loop+0xe0>)
        float voltage = ina260.readBusVoltage();
     c36:	4822      	ldr	r0, [pc, #136]	; (cc0 <loop+0xe4>)
        resistanceTracingTimer += resistanceTrackingInterval;
     c38:	6809      	ldr	r1, [r1, #0]
     c3a:	440a      	add	r2, r1
     c3c:	601a      	str	r2, [r3, #0]
        float voltage = ina260.readBusVoltage();
     c3e:	f000 fd33 	bl	16a8 <Adafruit_INA260::readBusVoltage()>
     c42:	eeb0 8a40 	vmov.f32	s16, s0
        float current = ina260.readCurrent();
     c46:	481e      	ldr	r0, [pc, #120]	; (cc0 <loop+0xe4>)
     c48:	f000 fd12 	bl	1670 <Adafruit_INA260::readCurrent()>
        float difference = resistance - targetResistance;
     c4c:	4b1d      	ldr	r3, [pc, #116]	; (cc4 <loop+0xe8>)
        float resistance = voltage / current;
     c4e:	eec8 7a00 	vdiv.f32	s15, s16, s0
        float difference = resistance - targetResistance;
     c52:	ed93 7a00 	vldr	s14, [r3]
     c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (difference > 0) {
     c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     c62:	dd17      	ble.n	c94 <loop+0xb8>
            dacValue += dacStepSize;
     c64:	4b18      	ldr	r3, [pc, #96]	; (cc8 <loop+0xec>)
     c66:	4819      	ldr	r0, [pc, #100]	; (ccc <loop+0xf0>)
     c68:	6819      	ldr	r1, [r3, #0]
     c6a:	8803      	ldrh	r3, [r0, #0]
     c6c:	4419      	add	r1, r3
     c6e:	b289      	uxth	r1, r1
     c70:	8001      	strh	r1, [r0, #0]
        dac.setVoltage(dacValue, false);
     c72:	2200      	movs	r2, #0
     c74:	4b16      	ldr	r3, [pc, #88]	; (cd0 <loop+0xf4>)
     c76:	4817      	ldr	r0, [pc, #92]	; (cd4 <loop+0xf8>)
}
     c78:	b004      	add	sp, #16
     c7a:	ecbd 8b02 	vpop	{d8}
     c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dac.setVoltage(dacValue, false);
     c82:	f001 b891 	b.w	1da8 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>
        printTimer += printTimerInterval;
     c86:	4914      	ldr	r1, [pc, #80]	; (cd8 <loop+0xfc>)
     c88:	6809      	ldr	r1, [r1, #0]
     c8a:	440a      	add	r2, r1
     c8c:	601a      	str	r2, [r3, #0]
        PrintOutput();
     c8e:	f7ff fb8d 	bl	3ac <PrintOutput()>
     c92:	e7c3      	b.n	c1c <loop+0x40>
            dacValue -= dacStepSize;
     c94:	480d      	ldr	r0, [pc, #52]	; (ccc <loop+0xf0>)
     c96:	4b0c      	ldr	r3, [pc, #48]	; (cc8 <loop+0xec>)
     c98:	8801      	ldrh	r1, [r0, #0]
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	1ac9      	subs	r1, r1, r3
     c9e:	b289      	uxth	r1, r1
     ca0:	e7e6      	b.n	c70 <loop+0x94>
     ca2:	bf00      	nop
     ca4:	200010c0 	.word	0x200010c0
     ca8:	20002b3c 	.word	0x20002b3c
     cac:	20002ae0 	.word	0x20002ae0
     cb0:	20002b63 	.word	0x20002b63
     cb4:	20002aec 	.word	0x20002aec
     cb8:	20002b67 	.word	0x20002b67
     cbc:	20001720 	.word	0x20001720
     cc0:	20002070 	.word	0x20002070
     cc4:	20001724 	.word	0x20001724
     cc8:	200016c8 	.word	0x200016c8
     ccc:	2000173e 	.word	0x2000173e
     cd0:	00061a80 	.word	0x00061a80
     cd4:	20002048 	.word	0x20002048
     cd8:	2000171c 	.word	0x2000171c

00000cdc <_GLOBAL__sub_I_myServo>:

// Interrupt for measuring the RPM
void RPM_Interrupt () {
    int time = (int)micros();
    Insert(rpm_filter, time);
     cdc:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     cde:	4c0c      	ldr	r4, [pc, #48]	; (d10 <_GLOBAL__sub_I_myServo+0x34>)
     ce0:	2301      	movs	r3, #1
     ce2:	2210      	movs	r2, #16
     ce4:	490b      	ldr	r1, [pc, #44]	; (d14 <_GLOBAL__sub_I_myServo+0x38>)
     ce6:	4620      	mov	r0, r4
     ce8:	f000 fa52 	bl	1190 <PA12::PA12(HardwareSerial*, int, bool)>
     cec:	4a0a      	ldr	r2, [pc, #40]	; (d18 <_GLOBAL__sub_I_myServo+0x3c>)
     cee:	490b      	ldr	r1, [pc, #44]	; (d1c <_GLOBAL__sub_I_myServo+0x40>)
     cf0:	4620      	mov	r0, r4
     cf2:	f003 fea3 	bl	4a3c <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     cf6:	480a      	ldr	r0, [pc, #40]	; (d20 <_GLOBAL__sub_I_myServo+0x44>)
     cf8:	f000 fcb8 	bl	166c <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     cfc:	4809      	ldr	r0, [pc, #36]	; (d24 <_GLOBAL__sub_I_myServo+0x48>)
     cfe:	f001 f84f 	bl	1da0 <Adafruit_MCP4725::Adafruit_MCP4725()>
struct Filter* rpm_filter = CreateFilter(10, 8);
     d02:	2108      	movs	r1, #8
     d04:	200a      	movs	r0, #10
     d06:	f7ff fa91 	bl	22c <CreateFilter(unsigned int, int)>
     d0a:	4b07      	ldr	r3, [pc, #28]	; (d28 <_GLOBAL__sub_I_myServo+0x4c>)
     d0c:	6018      	str	r0, [r3, #0]
     d0e:	bd10      	pop	{r4, pc}
     d10:	20002080 	.word	0x20002080
     d14:	200010d0 	.word	0x200010d0
     d18:	20001138 	.word	0x20001138
     d1c:	0000116d 	.word	0x0000116d
     d20:	20002070 	.word	0x20002070
     d24:	20002048 	.word	0x20002048
     d28:	20002af0 	.word	0x20002af0

00000d2c <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     d2c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     d30:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     d34:	429a      	cmp	r2, r3
     d36:	d905      	bls.n	d44 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     d38:	1c5a      	adds	r2, r3, #1
     d3a:	4403      	add	r3, r0
     d3c:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     d40:	7e98      	ldrb	r0, [r3, #26]
     d42:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     d44:	f04f 30ff 	mov.w	r0, #4294967295
	}
     d48:	4770      	bx	lr
     d4a:	bf00      	nop

00000d4c <TwoWire::force_clock()>:
	if (qty > BUFFER_LENGTH) qty = BUFFER_LENGTH;
	return requestFrom(addr, qty, stop);
}

bool TwoWire::force_clock()
{
     d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     d50:	f8d0 a014 	ldr.w	sl, [r0, #20]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
     d54:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     d56:	7e01      	ldrb	r1, [r0, #24]
{
     d58:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     d5a:	7e43      	ldrb	r3, [r0, #25]
{
     d5c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     d5e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     d62:	4a38      	ldr	r2, [pc, #224]	; (e44 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     d64:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     d68:	4f37      	ldr	r7, [pc, #220]	; (e48 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     d6a:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     d70:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     d74:	0109      	lsls	r1, r1, #4
     d76:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     d78:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     d7c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     d80:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     d84:	011b      	lsls	r3, r3, #4
     d86:	68ce      	ldr	r6, [r1, #12]
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
     d88:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     d8a:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     d8e:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     d92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     d96:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     d98:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     d9a:	492c      	ldr	r1, [pc, #176]	; (e4c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     d9c:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     d9e:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     da2:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     da4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     da8:	686b      	ldr	r3, [r5, #4]
     daa:	4333      	orrs	r3, r6
     dac:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     dae:	4b28      	ldr	r3, [pc, #160]	; (e50 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     db0:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     db2:	683a      	ldr	r2, [r7, #0]
     db4:	fba3 3202 	umull	r3, r2, r3, r2
     db8:	0c92      	lsrs	r2, r2, #18
     dba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     dbe:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     dc0:	684b      	ldr	r3, [r1, #4]
     dc2:	1b1b      	subs	r3, r3, r4
     dc4:	429a      	cmp	r2, r3
     dc6:	d8fb      	bhi.n	dc0 <TwoWire::force_clock()+0x74>
     dc8:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     dcc:	4a1f      	ldr	r2, [pc, #124]	; (e4c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     dce:	f8df e080 	ldr.w	lr, [pc, #128]	; e50 <TwoWire::force_clock()+0x104>
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
     dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     dd6:	4203      	tst	r3, r0
     dd8:	d002      	beq.n	de0 <TwoWire::force_clock()+0x94>
     dda:	68ab      	ldr	r3, [r5, #8]
     ddc:	4233      	tst	r3, r6
     dde:	d12f      	bne.n	e40 <TwoWire::force_clock()+0xf4>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
     de0:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     de4:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     de6:	6839      	ldr	r1, [r7, #0]
     de8:	fbae 3101 	umull	r3, r1, lr, r1
     dec:	0c89      	lsrs	r1, r1, #18
     dee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     df2:	6853      	ldr	r3, [r2, #4]
     df4:	1b1b      	subs	r3, r3, r4
     df6:	4299      	cmp	r1, r3
     df8:	d8fb      	bhi.n	df2 <TwoWire::force_clock()+0xa6>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
     dfa:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     dfe:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     e00:	6839      	ldr	r1, [r7, #0]
     e02:	fbae 3101 	umull	r3, r1, lr, r1
     e06:	0c89      	lsrs	r1, r1, #18
     e08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     e0c:	6853      	ldr	r3, [r2, #4]
     e0e:	1b1b      	subs	r3, r3, r4
     e10:	4299      	cmp	r1, r3
     e12:	d8fb      	bhi.n	e0c <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     e14:	f1bc 0c01 	subs.w	ip, ip, #1
     e18:	d1db      	bne.n	dd2 <TwoWire::force_clock()+0x86>
	bool ret = false;
     e1a:	4660      	mov	r0, ip
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     e1c:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     e20:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     e22:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     e26:	68db      	ldr	r3, [r3, #12]
     e28:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     e2c:	f899 3019 	ldrb.w	r3, [r9, #25]
     e30:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     e34:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     e38:	6013      	str	r3, [r2, #0]
	return ret;
}
     e3a:	b003      	add	sp, #12
     e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     e40:	2001      	movs	r0, #1
     e42:	e7eb      	b.n	e1c <TwoWire::force_clock()+0xd0>
     e44:	20000ae0 	.word	0x20000ae0
     e48:	200010bc 	.word	0x200010bc
     e4c:	e0001000 	.word	0xe0001000
     e50:	431bde83 	.word	0x431bde83

00000e54 <TwoWire::wait_idle()>:
	return systick_millis_count;
     e54:	4a0e      	ldr	r2, [pc, #56]	; (e90 <TwoWire::wait_idle()+0x3c>)
{
     e56:	b510      	push	{r4, lr}
     e58:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     e5a:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     e5c:	e005      	b.n	e6a <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     e5e:	01db      	lsls	r3, r3, #7
     e60:	d407      	bmi.n	e72 <TwoWire::wait_idle()+0x1e>
     e62:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     e64:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     e66:	2b10      	cmp	r3, #16
     e68:	d808      	bhi.n	e7c <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     e6a:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     e6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     e70:	d1f5      	bne.n	e5e <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     e72:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     e76:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     e78:	6163      	str	r3, [r4, #20]
}
     e7a:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     e7c:	f7ff ff66 	bl	d4c <TwoWire::force_clock()>
     e80:	2800      	cmp	r0, #0
     e82:	d0fa      	beq.n	e7a <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     e84:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     e88:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     e8a:	6163      	str	r3, [r4, #20]
	return true;
     e8c:	e7f5      	b.n	e7a <TwoWire::wait_idle()+0x26>
     e8e:	bf00      	nop
     e90:	20002b3c 	.word	0x20002b3c

00000e94 <TwoWire::endTransmission(unsigned char)>:
{
     e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     e98:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     e9c:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
     e9e:	f1ba 0f00 	cmp.w	sl, #0
     ea2:	d04f      	beq.n	f44 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
     ea4:	4681      	mov	r9, r0
     ea6:	4688      	mov	r8, r1
     ea8:	f7ff ffd4 	bl	e54 <TwoWire::wait_idle()>
     eac:	2800      	cmp	r0, #0
     eae:	d049      	beq.n	f44 <TwoWire::endTransmission(unsigned char)+0xb0>
     eb0:	4e37      	ldr	r6, [pc, #220]	; (f90 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     eb2:	2400      	movs	r4, #0
     eb4:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     eb6:	e018      	b.n	eea <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
     eb8:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     eba:	0519      	lsls	r1, r3, #20
     ebc:	d451      	bmi.n	f62 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
     ebe:	04da      	lsls	r2, r3, #19
     ec0:	d455      	bmi.n	f6e <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
     ec2:	0558      	lsls	r0, r3, #21
     ec4:	d459      	bmi.n	f7a <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     ec6:	0499      	lsls	r1, r3, #18
     ec8:	d441      	bmi.n	f4e <TwoWire::endTransmission(unsigned char)+0xba>
     eca:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     ecc:	1bd2      	subs	r2, r2, r7
     ece:	2a32      	cmp	r2, #50	; 0x32
     ed0:	d83d      	bhi.n	f4e <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
     ed2:	4554      	cmp	r4, sl
     ed4:	d907      	bls.n	ee6 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
     ed6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     ed8:	0752      	lsls	r2, r2, #29
     eda:	d104      	bne.n	ee6 <TwoWire::endTransmission(unsigned char)+0x52>
     edc:	059b      	lsls	r3, r3, #22
     ede:	d455      	bmi.n	f8c <TwoWire::endTransmission(unsigned char)+0xf8>
     ee0:	f1b8 0f00 	cmp.w	r8, #0
     ee4:	d052      	beq.n	f8c <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
     ee6:	f003 f897 	bl	4018 <yield>
		if (tx_index <= tx_len) {
     eea:	4554      	cmp	r4, sl
     eec:	d8e4      	bhi.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     eee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     ef0:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     ef2:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     ef6:	d4df      	bmi.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
     ef8:	e013      	b.n	f22 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     efa:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     efe:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     f00:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     f06:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     f08:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     f0a:	d01e      	beq.n	f4a <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
     f0c:	458a      	cmp	sl, r1
				fifo_used++;
     f0e:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f12:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     f16:	d90e      	bls.n	f36 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f18:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     f1c:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f1e:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     f20:	d0ca      	beq.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
     f22:	2101      	movs	r1, #1
				if (tx_index == 0) {
     f24:	2c00      	cmp	r4, #0
     f26:	d0e8      	beq.n	efa <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f28:	4621      	mov	r1, r4
				fifo_used++;
     f2a:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f2c:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     f2e:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     f30:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     f34:	d8f0      	bhi.n	f18 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     f36:	f1b8 0f00 	cmp.w	r8, #0
     f3a:	d0bd      	beq.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
     f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
     f40:	662b      	str	r3, [r5, #96]	; 0x60
					break;
     f42:	e7b9      	b.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
     f44:	2004      	movs	r0, #4
}
     f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     f4a:	2401      	movs	r4, #1
     f4c:	e7b4      	b.n	eb8 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f4e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     f50:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     f54:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f5a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     f5c:	662a      	str	r2, [r5, #96]	; 0x60
}
     f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f62:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     f64:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f6a:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     f6c:	e7eb      	b.n	f46 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f6e:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
     f70:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f76:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
     f78:	e7e5      	b.n	f46 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f7a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     f80:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f82:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f86:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     f88:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
     f8a:	e7dc      	b.n	f46 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
     f8c:	2000      	movs	r0, #0
     f8e:	e7da      	b.n	f46 <TwoWire::endTransmission(unsigned char)+0xb2>
     f90:	20002b3c 	.word	0x20002b3c

00000f94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f98:	4683      	mov	fp, r0
     f9a:	460c      	mov	r4, r1
     f9c:	4615      	mov	r5, r2
     f9e:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
     fa0:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
     fa4:	f7ff ff56 	bl	e54 <TwoWire::wait_idle()>
     fa8:	2800      	cmp	r0, #0
     faa:	f000 809e 	beq.w	10ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
     fae:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
     fb0:	2d01      	cmp	r5, #1
     fb2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 10f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     fb6:	f240 4601 	movw	r6, #1025	; 0x401
     fba:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
     fbc:	f04f 0100 	mov.w	r1, #0
     fc0:	bf38      	it	cc
     fc2:	2501      	movcc	r5, #1
     fc4:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     fc8:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     fca:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
     fcc:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     fd0:	e020      	b.n	1014 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
     fd2:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     fd6:	2b87      	cmp	r3, #135	; 0x87
     fd8:	d93f      	bls.n	105a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
     fda:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
     fde:	0510      	lsls	r0, r2, #20
     fe0:	d45a      	bmi.n	1098 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     fe2:	f412 5f10 	tst.w	r2, #9216	; 0x2400
     fe6:	d170      	bne.n	10ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
     fe8:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     fec:	eba3 0309 	sub.w	r3, r3, r9
     ff0:	2b32      	cmp	r3, #50	; 0x32
     ff2:	d86a      	bhi.n	10ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
     ff4:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
     ff8:	42ab      	cmp	r3, r5
     ffa:	d309      	bcc.n	1010 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
     ffc:	2c02      	cmp	r4, #2
     ffe:	d907      	bls.n	1010 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1000:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1004:	0759      	lsls	r1, r3, #29
    1006:	d103      	bne.n	1010 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    1008:	0593      	lsls	r3, r2, #22
    100a:	d44b      	bmi.n	10a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    100c:	2f00      	cmp	r7, #0
    100e:	d049      	beq.n	10a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    1010:	f003 f802 	bl	4018 <yield>
		if (tx_state < 3) {
    1014:	2c02      	cmp	r4, #2
    1016:	d8dc      	bhi.n	fd2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1018:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    101c:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    1020:	075b      	lsls	r3, r3, #29
    1022:	d4d6      	bmi.n	fd2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    1024:	1e68      	subs	r0, r5, #1
    1026:	4422      	add	r2, r4
    1028:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    102c:	b94c      	cbnz	r4, 1042 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    102e:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    1032:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    1034:	1b13      	subs	r3, r2, r4
    1036:	2b03      	cmp	r3, #3
    1038:	d8cb      	bhi.n	fd2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    103a:	2c02      	cmp	r4, #2
    103c:	d8c9      	bhi.n	fd2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    103e:	2c00      	cmp	r4, #0
    1040:	d0f5      	beq.n	102e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    1042:	2c01      	cmp	r4, #1
    1044:	d037      	beq.n	10b6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1046:	b11f      	cbz	r7, 1050 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    1048:	f44f 7300 	mov.w	r3, #512	; 0x200
    104c:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    1050:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    1054:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    1056:	2b87      	cmp	r3, #135	; 0x87
    1058:	d8bf      	bhi.n	fda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    105a:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    105e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    1062:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    1066:	d0b8      	beq.n	fda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    1068:	1c59      	adds	r1, r3, #1
    106a:	449c      	add	ip, r3
    106c:	3319      	adds	r3, #25
    106e:	b2c9      	uxtb	r1, r1
    1070:	fa5f fc8c 	uxtb.w	ip, ip
    1074:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    1078:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    107c:	1c4a      	adds	r2, r1, #1
    107e:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    1080:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    1084:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    1086:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    108a:	d0a6      	beq.n	fda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    108c:	2989      	cmp	r1, #137	; 0x89
    108e:	d1f3      	bne.n	1078 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1090:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    1094:	0510      	lsls	r0, r2, #20
    1096:	d5a4      	bpl.n	fe2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1098:	f8da 3010 	ldr.w	r3, [sl, #16]
    109c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    10a0:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    10a4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    10a8:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    10ac:	d106      	bne.n	10bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    10ae:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    10b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    10b6:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    10ba:	e7ba      	b.n	1032 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    10bc:	f8da 3010 	ldr.w	r3, [sl, #16]
    10c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    10c4:	f8ca 3010 	str.w	r3, [sl, #16]
    10c8:	e7f1      	b.n	10ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    10ca:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    10ce:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    10d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    10d6:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    10da:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    10de:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    10e2:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    10e6:	d0e2      	beq.n	10ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    10e8:	e7e8      	b.n	10bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    10ea:	2004      	movs	r0, #4
}
    10ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f0:	20002b3c 	.word	0x20002b3c

000010f4 <TwoWire::setClock(unsigned long)>:
// Timeout if a device stretches SCL this long, in microseconds
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
    10f4:	b410      	push	{r4}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
	port->MCR = 0;
	if (frequency < 400000) {
    10f6:	4c14      	ldr	r4, [pc, #80]	; (1148 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    10f8:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    10fa:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    10fc:	42a1      	cmp	r1, r4
	port->MCR = 0;
    10fe:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    1100:	d814      	bhi.n	112c <TwoWire::setClock(unsigned long)+0x38>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    1102:	4c12      	ldr	r4, [pc, #72]	; (114c <TwoWire::setClock(unsigned long)+0x58>)
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    1104:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    1106:	4912      	ldr	r1, [pc, #72]	; (1150 <TwoWire::setClock(unsigned long)+0x5c>)
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1108:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    110c:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    110e:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    1110:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    1112:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    1114:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    1116:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1118:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    111c:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    111e:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    1120:	6218      	str	r0, [r3, #32]
}
    1122:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    1126:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    1128:	611a      	str	r2, [r3, #16]
}
    112a:	4770      	bx	lr
	} else if (frequency < 1000000) {
    112c:	4809      	ldr	r0, [pc, #36]	; (1154 <TwoWire::setClock(unsigned long)+0x60>)
    112e:	4281      	cmp	r1, r0
    1130:	d907      	bls.n	1142 <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    1132:	4c09      	ldr	r4, [pc, #36]	; (1158 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    1134:	4809      	ldr	r0, [pc, #36]	; (115c <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    1136:	490a      	ldr	r1, [pc, #40]	; (1160 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    1138:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    113a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    113c:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    113e:	62d9      	str	r1, [r3, #44]	; 0x2c
    1140:	e7e8      	b.n	1114 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    1142:	4c08      	ldr	r4, [pc, #32]	; (1164 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    1144:	4808      	ldr	r0, [pc, #32]	; (1168 <TwoWire::setClock(unsigned long)+0x74>)
    1146:	e7f6      	b.n	1136 <TwoWire::setClock(unsigned long)+0x42>
    1148:	00061a7f 	.word	0x00061a7f
    114c:	1928373b 	.word	0x1928373b
    1150:	05050bb8 	.word	0x05050bb8
    1154:	000f423f 	.word	0x000f423f
    1158:	0407090a 	.word	0x0407090a
    115c:	01010960 	.word	0x01010960
    1160:	00057f00 	.word	0x00057f00
    1164:	0c121a1c 	.word	0x0c121a1c
    1168:	02020e10 	.word	0x02020e10

0000116c <PA12::~PA12()>:
	PA12_DirPin_Level_Rx = !TxLevel;
}

PA12::~PA12() {
	// TODO Auto-generated destructor stub
}
    116c:	4770      	bx	lr
    116e:	bf00      	nop

00001170 <PA12::~PA12()>:
PA12::~PA12() {
    1170:	b510      	push	{r4, lr}
    1172:	4604      	mov	r4, r0
}
    1174:	f640 2148 	movw	r1, #2632	; 0xa48
    1178:	f001 fbf4 	bl	2964 <operator delete(void*, unsigned int)>
    117c:	4620      	mov	r0, r4
    117e:	bd10      	pop	{r4, pc}

00001180 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    1180:	f002 be62 	b.w	3e48 <usb_serial_available>

00001184 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1184:	f002 bea4 	b.w	3ed0 <usb_serial_getchar>

00001188 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1188:	4608      	mov	r0, r1
    118a:	f002 beb1 	b.w	3ef0 <usb_serial_putchar>
    118e:	bf00      	nop

00001190 <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
    1190:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
    1192:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
    1196:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
    1198:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
    119a:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
    119c:	4a02      	ldr	r2, [pc, #8]	; (11a8 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
    119e:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
    11a0:	e9c0 2300 	strd	r2, r3, [r0]
}
    11a4:	4770      	bx	lr
    11a6:	bf00      	nop
    11a8:	200006c8 	.word	0x200006c8

000011ac <PA12::readRaw()>:
//	this->clearBuffer();
	
}


int PA12::readRaw(void){
    11ac:	b510      	push	{r4, lr}
    11ae:	4604      	mov	r4, r0
int temp=0;
if (PA12_Serial->available()) {
    11b0:	6880      	ldr	r0, [r0, #8]
    11b2:	4a0c      	ldr	r2, [pc, #48]	; (11e4 <PA12::readRaw()+0x38>)
    11b4:	6803      	ldr	r3, [r0, #0]
    11b6:	691b      	ldr	r3, [r3, #16]
    11b8:	4293      	cmp	r3, r2
    11ba:	d10d      	bne.n	11d8 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
    11bc:	f002 fe44 	bl	3e48 <usb_serial_available>
    11c0:	b148      	cbz	r0, 11d6 <PA12::readRaw()+0x2a>
    11c2:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
    11c4:	4a08      	ldr	r2, [pc, #32]	; (11e8 <PA12::readRaw()+0x3c>)
    11c6:	6803      	ldr	r3, [r0, #0]
    11c8:	695b      	ldr	r3, [r3, #20]
    11ca:	4293      	cmp	r3, r2
    11cc:	d106      	bne.n	11dc <PA12::readRaw()+0x30>
	}
	return temp;
}
    11ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
    11d2:	f002 be7d 	b.w	3ed0 <usb_serial_getchar>
    11d6:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
    11d8:	4798      	blx	r3
    11da:	e7f1      	b.n	11c0 <PA12::readRaw()+0x14>
}
    11dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
    11e0:	4718      	bx	r3
    11e2:	bf00      	nop
    11e4:	00001181 	.word	0x00001181
    11e8:	00001185 	.word	0x00001185

000011ec <PA12::clearBuffer()>:

	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable

}

void PA12::clearBuffer(void){
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	4d0e      	ldr	r5, [pc, #56]	; (1228 <PA12::clearBuffer()+0x3c>)
    11f0:	4604      	mov	r4, r0
    11f2:	4e0e      	ldr	r6, [pc, #56]	; (122c <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
    11f4:	68a0      	ldr	r0, [r4, #8]
    11f6:	6803      	ldr	r3, [r0, #0]
    11f8:	691b      	ldr	r3, [r3, #16]
    11fa:	42ab      	cmp	r3, r5
    11fc:	d10e      	bne.n	121c <PA12::clearBuffer()+0x30>
        virtual int available() { return usb_serial_available(); }
    11fe:	f002 fe23 	bl	3e48 <usb_serial_available>
	while((this->available()))
    1202:	b170      	cbz	r0, 1222 <PA12::clearBuffer()+0x36>
	{
		PA12_Serial->read();
    1204:	68a0      	ldr	r0, [r4, #8]
    1206:	6803      	ldr	r3, [r0, #0]
    1208:	695b      	ldr	r3, [r3, #20]
    120a:	42b3      	cmp	r3, r6
    120c:	d10a      	bne.n	1224 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
    120e:	f002 fe5f 	bl	3ed0 <usb_serial_getchar>
		return PA12_Serial->available();
    1212:	68a0      	ldr	r0, [r4, #8]
    1214:	6803      	ldr	r3, [r0, #0]
    1216:	691b      	ldr	r3, [r3, #16]
    1218:	42ab      	cmp	r3, r5
    121a:	d0f0      	beq.n	11fe <PA12::clearBuffer()+0x12>
    121c:	4798      	blx	r3
	while((this->available()))
    121e:	2800      	cmp	r0, #0
    1220:	d1f0      	bne.n	1204 <PA12::clearBuffer()+0x18>
	}
}
    1222:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
    1224:	4798      	blx	r3
    1226:	e7e5      	b.n	11f4 <PA12::clearBuffer()+0x8>
    1228:	00001181 	.word	0x00001181
    122c:	00001185 	.word	0x00001185

00001230 <PA12::txPacket(int, int, int)>:
int PA12::getError( int errbit ){

	return 0;
}

int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1234:	461d      	mov	r5, r3
    int bCount,bCheckSum,bPacketLength;
	

    int offsetParamIndex;
   
	mTxBuffer[0] = 0xff;
    1236:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[1] = 0xff;
	mTxBuffer[2] = 0xff; //
	mTxBuffer[3] = bID;  //[2]
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1238:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    123a:	4604      	mov	r4, r0
	offsetParamIndex = 6; //5
	bPacketLength = bParameterLength+3+4; //+2+4;

  
    //copy parameters from mParamBuffer to mTxBuffer
    for(bCount = 0; bCount < bParameterLength; bCount++)
    123c:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
    123e:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
    1242:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1246:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
    1248:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
    124c:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
    1250:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
    1254:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1258:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
    125c:	dd40      	ble.n	12e0 <PA12::txPacket(int, int, int)+0xb0>
    {
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
    125e:	f600 010c 	addw	r1, r0, #2060	; 0x80c
    1262:	00aa      	lsls	r2, r5, #2
    1264:	f500 6085 	add.w	r0, r0, #1064	; 0x428
    1268:	f005 fa96 	bl	6798 <memmove>
    }

	// chech sum
    bCheckSum = 0;
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    126c:	1dab      	adds	r3, r5, #6
    126e:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1272:	2000      	movs	r0, #0
    1274:	2203      	movs	r2, #3
    1276:	e001      	b.n	127c <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
    1278:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    127c:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
    127e:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1280:	4293      	cmp	r3, r2
    1282:	dcf9      	bgt.n	1278 <PA12::txPacket(int, int, int)+0x48>
	}
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    1284:	43c0      	mvns	r0, r0
    1286:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    128a:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    128c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    1290:	7b20      	ldrb	r0, [r4, #12]
    1292:	f001 fa89 	bl	27a8 <digitalWrite>
  
    //TxDStringC("bPacketLength = ");TxDHex8C(bPacketLength);TxDStringC("\r\n");
    this->irpTxEnable(); // this define is declared in irp.h
	//delay(2);
	//uDelay(1);
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1296:	2e00      	cmp	r6, #0
    1298:	dd17      	ble.n	12ca <PA12::txPacket(int, int, int)+0x9a>
    129a:	f204 480c 	addw	r8, r4, #1036	; 0x40c
    129e:	2500      	movs	r5, #0
    12a0:	4f13      	ldr	r7, [pc, #76]	; (12f0 <PA12::txPacket(int, int, int)+0xc0>)
    12a2:	e004      	b.n	12ae <PA12::txPacket(int, int, int)+0x7e>
    12a4:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    12a6:	f002 fe23 	bl	3ef0 <usb_serial_putchar>
    12aa:	42ae      	cmp	r6, r5
    12ac:	d00d      	beq.n	12ca <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
    12ae:	68a2      	ldr	r2, [r4, #8]
    12b0:	f858 0f04 	ldr.w	r0, [r8, #4]!
    12b4:	6813      	ldr	r3, [r2, #0]
    12b6:	b2c0      	uxtb	r0, r0
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	42bb      	cmp	r3, r7
    12bc:	d0f2      	beq.n	12a4 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    12be:	3501      	adds	r5, #1
PA12_Serial->write(value);
    12c0:	4601      	mov	r1, r0
    12c2:	4610      	mov	r0, r2
    12c4:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
    12c6:	42ae      	cmp	r6, r5
    12c8:	d1f1      	bne.n	12ae <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
    12ca:	68a0      	ldr	r0, [r4, #8]
    12cc:	6803      	ldr	r3, [r0, #0]
    12ce:	68db      	ldr	r3, [r3, #12]
    12d0:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
    12d2:	7b20      	ldrb	r0, [r4, #12]
    12d4:	7c61      	ldrb	r1, [r4, #17]
    12d6:	f001 fa67 	bl	27a8 <digitalWrite>
}
    12da:	4630      	mov	r0, r6
    12dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    12e0:	1dab      	adds	r3, r5, #6
    12e2:	2b03      	cmp	r3, #3
    12e4:	dcc3      	bgt.n	126e <PA12::txPacket(int, int, int)+0x3e>
    12e6:	f04f 30ff 	mov.w	r0, #4294967295
    12ea:	2303      	movs	r3, #3
    12ec:	e7cb      	b.n	1286 <PA12::txPacket(int, int, int)+0x56>
    12ee:	bf00      	nop
    12f0:	00001189 	.word	0x00001189

000012f4 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
    12f4:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
    12f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12fa:	4689      	mov	r9, r1
    12fc:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
    12fe:	d046      	beq.n	138e <PA12::rxPacket(int)+0x9a>
    1300:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1304:	4299      	cmp	r1, r3
    1306:	d042      	beq.n	138e <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
    1308:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
    130c:	f1b9 0f00 	cmp.w	r9, #0
    1310:	dd66      	ble.n	13e0 <PA12::rxPacket(int)+0xec>
    1312:	f104 0a10 	add.w	sl, r4, #16
    1316:	3602      	adds	r6, #2
    1318:	2700      	movs	r7, #0
    131a:	4d5a      	ldr	r5, [pc, #360]	; (1484 <PA12::rxPacket(int)+0x190>)
    131c:	46d0      	mov	r8, sl
		ulCounter = 0;
    131e:	f04f 0b00 	mov.w	fp, #0
    1322:	e007      	b.n	1334 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
    1324:	f002 fd90 	bl	3e48 <usb_serial_available>
    1328:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    132a:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    132e:	b963      	cbnz	r3, 134a <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
    1330:	45b3      	cmp	fp, r6
    1332:	d02f      	beq.n	1394 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
    1334:	68a0      	ldr	r0, [r4, #8]
    1336:	6803      	ldr	r3, [r0, #0]
    1338:	691b      	ldr	r3, [r3, #16]
    133a:	42ab      	cmp	r3, r5
    133c:	d0f2      	beq.n	1324 <PA12::rxPacket(int)+0x30>
    133e:	4798      	blx	r3
    1340:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    1342:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    1346:	2b00      	cmp	r3, #0
    1348:	d0f2      	beq.n	1330 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
    134a:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
    134c:	4620      	mov	r0, r4
    134e:	f7ff ff2d 	bl	11ac <PA12::readRaw()>
    1352:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
    1356:	45b9      	cmp	r9, r7
    1358:	d1e1      	bne.n	131e <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    135a:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    135e:	f502 7382 	add.w	r3, r2, #260	; 0x104
    1362:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    1366:	29fe      	cmp	r1, #254	; 0xfe
    1368:	d00e      	beq.n	1388 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
    136a:	2f03      	cmp	r7, #3
    136c:	dd0c      	ble.n	1388 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    136e:	6963      	ldr	r3, [r4, #20]
    1370:	2bff      	cmp	r3, #255	; 0xff
    1372:	d027      	beq.n	13c4 <PA12::rxPacket(int)+0xd0>
    1374:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
    137c:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
    137e:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
    1382:	2700      	movs	r7, #0
				clearBuffer();
    1384:	f7ff ff32 	bl	11ec <PA12::clearBuffer()>
}
    1388:	4638      	mov	r0, r7
    138a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
    138e:	f44f 3648 	mov.w	r6, #204800	; 0x32000
    1392:	e7bb      	b.n	130c <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    1394:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    1398:	f502 7182 	add.w	r1, r2, #260	; 0x104
    139c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    13a0:	29fe      	cmp	r1, #254	; 0xfe
    13a2:	d0f1      	beq.n	1388 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
    13a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    13a8:	d0df      	beq.n	136a <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    13aa:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
    13ae:	461f      	mov	r7, r3
			clearBuffer();			
    13b0:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    13b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    13b6:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
    13ba:	f7ff ff17 	bl	11ec <PA12::clearBuffer()>
}
    13be:	4638      	mov	r0, r7
    13c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    13c4:	69a3      	ldr	r3, [r4, #24]
    13c6:	2bff      	cmp	r3, #255	; 0xff
    13c8:	d1d4      	bne.n	1374 <PA12::rxPacket(int)+0x80>
    13ca:	69e3      	ldr	r3, [r4, #28]
    13cc:	2bff      	cmp	r3, #255	; 0xff
    13ce:	d009      	beq.n	13e4 <PA12::rxPacket(int)+0xf0>
    13d0:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
    13d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    13d8:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    13da:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
    13de:	e7cd      	b.n	137c <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
    13e0:	2700      	movs	r7, #0
    13e2:	e7d1      	b.n	1388 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    13e4:	3204      	adds	r2, #4
    13e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    13ea:	685b      	ldr	r3, [r3, #4]
    13ec:	428b      	cmp	r3, r1
    13ee:	d02c      	beq.n	144a <PA12::rxPacket(int)+0x156>
    13f0:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    13f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    13f8:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
    13fc:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
    13fe:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1402:	6852      	ldr	r2, [r2, #4]
    1404:	428a      	cmp	r2, r1
    1406:	d115      	bne.n	1434 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
    1408:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
    140c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1410:	6951      	ldr	r1, [r2, #20]
    1412:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
    1416:	1aba      	subs	r2, r7, r2
    1418:	4291      	cmp	r1, r2
    141a:	d10b      	bne.n	1434 <PA12::rxPacket(int)+0x140>
    141c:	f104 021c 	add.w	r2, r4, #28
    1420:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1424:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1428:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    142a:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    142c:	d1fa      	bne.n	1424 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    142e:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    1430:	2bff      	cmp	r3, #255	; 0xff
    1432:	d0a9      	beq.n	1388 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1434:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1438:	4620      	mov	r0, r4
				return 0;
    143a:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1440:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1444:	f7ff fed2 	bl	11ec <PA12::clearBuffer()>
				return 0;
    1448:	e79e      	b.n	1388 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    144a:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    144e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1452:	6958      	ldr	r0, [r3, #20]
    1454:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    1458:	1afb      	subs	r3, r7, r3
    145a:	4298      	cmp	r0, r3
    145c:	d1c8      	bne.n	13f0 <PA12::rxPacket(int)+0xfc>
    145e:	f104 001c 	add.w	r0, r4, #28
    1462:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    1466:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1468:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    146c:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    146e:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1470:	d1fa      	bne.n	1468 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    1472:	2bff      	cmp	r3, #255	; 0xff
    1474:	d0c3      	beq.n	13fe <PA12::rxPacket(int)+0x10a>
    1476:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    147a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    147e:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    1482:	e7bc      	b.n	13fe <PA12::rxPacket(int)+0x10a>
    1484:	00001181 	.word	0x00001181

00001488 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    148c:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    148e:	4698      	mov	r8, r3
    1490:	4605      	mov	r5, r0
	mBusUsed = 1;
    1492:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1494:	468a      	mov	sl, r1
    1496:	4691      	mov	r9, r2
    1498:	4e56      	ldr	r6, [pc, #344]	; (15f4 <PA12::txRxPacket(int, int, int)+0x16c>)
    149a:	4f57      	ldr	r7, [pc, #348]	; (15f8 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    149c:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    14a0:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    14a4:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    14a8:	68a8      	ldr	r0, [r5, #8]
    14aa:	6803      	ldr	r3, [r0, #0]
    14ac:	691c      	ldr	r4, [r3, #16]
    14ae:	42b4      	cmp	r4, r6
    14b0:	d10f      	bne.n	14d2 <PA12::txRxPacket(int, int, int)+0x4a>
    14b2:	f002 fcc9 	bl	3e48 <usb_serial_available>
    14b6:	4604      	mov	r4, r0
		while((this->available())){
    14b8:	b17c      	cbz	r4, 14da <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    14ba:	68a8      	ldr	r0, [r5, #8]
    14bc:	6803      	ldr	r3, [r0, #0]
    14be:	695b      	ldr	r3, [r3, #20]
    14c0:	42bb      	cmp	r3, r7
    14c2:	d14a      	bne.n	155a <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    14c4:	f002 fd04 	bl	3ed0 <usb_serial_getchar>
		return PA12_Serial->available();
    14c8:	68a8      	ldr	r0, [r5, #8]
    14ca:	6803      	ldr	r3, [r0, #0]
    14cc:	691c      	ldr	r4, [r3, #16]
    14ce:	42b4      	cmp	r4, r6
    14d0:	d0ef      	beq.n	14b2 <PA12::txRxPacket(int, int, int)+0x2a>
    14d2:	47a0      	blx	r4
    14d4:	4604      	mov	r4, r0
		while((this->available())){
    14d6:	2c00      	cmp	r4, #0
    14d8:	d1ef      	bne.n	14ba <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    14da:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    14dc:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    14e0:	464a      	mov	r2, r9
    14e2:	4651      	mov	r1, sl
    14e4:	4628      	mov	r0, r5
    14e6:	f7ff fea3 	bl	1230 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    14ea:	4580      	cmp	r8, r0
    14ec:	d102      	bne.n	14f4 <PA12::txRxPacket(int, int, int)+0x6c>
    14ee:	2301      	movs	r3, #1
    14f0:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    14f4:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    14f8:	d043      	beq.n	1582 <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    14fa:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    14fe:	d02e      	beq.n	155e <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    1500:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1504:	d065      	beq.n	15d2 <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    1506:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    150a:	2b01      	cmp	r3, #1
    150c:	dd53      	ble.n	15b6 <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    150e:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    1512:	2b01      	cmp	r3, #1
    1514:	d038      	beq.n	1588 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    1516:	230b      	movs	r3, #11
    1518:	461e      	mov	r6, r3
    151a:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    151e:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1522:	2b01      	cmp	r3, #1
    1524:	d038      	beq.n	1598 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    1526:	4631      	mov	r1, r6
    1528:	4628      	mov	r0, r5
    152a:	f7ff fee3 	bl	12f4 <PA12::rxPacket(int)>
	mBusUsed = 0;
    152e:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1530:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    1532:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1536:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    153a:	d007      	beq.n	154c <PA12::txRxPacket(int, int, int)+0xc4>
    153c:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    1540:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1544:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1548:	2bfe      	cmp	r3, #254	; 0xfe
    154a:	d029      	beq.n	15a0 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    154c:	2302      	movs	r3, #2
	return 1;
    154e:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1550:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    1554:	4620      	mov	r0, r4
    1556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    155a:	4798      	blx	r3
    155c:	e7a4      	b.n	14a8 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    155e:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    1562:	3607      	adds	r6, #7
    1564:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1568:	2e00      	cmp	r6, #0
    156a:	d1d8      	bne.n	151e <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    156c:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    1570:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1574:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1578:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    157c:	2bf1      	cmp	r3, #241	; 0xf1
    157e:	d1e5      	bne.n	154c <PA12::txRxPacket(int, int, int)+0xc4>
    1580:	e7e8      	b.n	1554 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1582:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1586:	d02f      	beq.n	15e8 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1588:	2307      	movs	r3, #7
    158a:	461e      	mov	r6, r3
    158c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1590:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1594:	2b01      	cmp	r3, #1
    1596:	d1c6      	bne.n	1526 <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1598:	2096      	movs	r0, #150	; 0x96
    159a:	f001 f8b1 	bl	2700 <delay>
    159e:	e7c2      	b.n	1526 <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    15a0:	2800      	cmp	r0, #0
    15a2:	d1d3      	bne.n	154c <PA12::txRxPacket(int, int, int)+0xc4>
    15a4:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    15a8:	f503 7382 	add.w	r3, r3, #260	; 0x104
    15ac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    15b0:	2bf1      	cmp	r3, #241	; 0xf1
    15b2:	d1cb      	bne.n	154c <PA12::txRxPacket(int, int, int)+0xc4>
    15b4:	e7ce      	b.n	1554 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    15b6:	2300      	movs	r3, #0
    15b8:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    15bc:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    15c0:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    15c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
    15c8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    15cc:	2bf1      	cmp	r3, #241	; 0xf1
    15ce:	d1bd      	bne.n	154c <PA12::txRxPacket(int, int, int)+0xc4>
    15d0:	e7c0      	b.n	1554 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    15d2:	f029 0910 	bic.w	r9, r9, #16
    15d6:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    15da:	d1ec      	bne.n	15b6 <PA12::txRxPacket(int, int, int)+0x12e>
    15dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    15e0:	461e      	mov	r6, r3
    15e2:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    15e6:	e79a      	b.n	151e <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    15e8:	23ff      	movs	r3, #255	; 0xff
    15ea:	461e      	mov	r6, r3
    15ec:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    15f0:	e795      	b.n	151e <PA12::txRxPacket(int, int, int)+0x96>
    15f2:	bf00      	nop
    15f4:	00001181 	.word	0x00001181
    15f8:	00001185 	.word	0x00001185

000015fc <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    15fc:	b530      	push	{r4, r5, lr}
    15fe:	4615      	mov	r5, r2
    1600:	b083      	sub	sp, #12
    1602:	4604      	mov	r4, r0
    1604:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1606:	f7ff fdf1 	bl	11ec <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    160a:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    160c:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    160e:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1612:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1614:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1618:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    161a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    161e:	22f3      	movs	r2, #243	; 0xf3
    1620:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1622:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1626:	b003      	add	sp, #12
    1628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    162c:	f7ff bf2c 	b.w	1488 <PA12::txRxPacket(int, int, int)>

00001630 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    1630:	b510      	push	{r4, lr}
    1632:	b082      	sub	sp, #8
    1634:	4604      	mov	r4, r0
    1636:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1638:	f7ff fdd8 	bl	11ec <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    163c:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    163e:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1640:	22f2      	movs	r2, #242	; 0xf2
    1642:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1644:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1648:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    164a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    164e:	f7ff ff1b 	bl	1488 <PA12::txRxPacket(int, int, int)>
    1652:	b138      	cbz	r0, 1664 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1654:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1656:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    165a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    165e:	b280      	uxth	r0, r0
}
    1660:	b002      	add	sp, #8
    1662:	bd10      	pop	{r4, pc}
		return 0xffff;
    1664:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1668:	b002      	add	sp, #8
    166a:	bd10      	pop	{r4, pc}

0000166c <Adafruit_INA260::Adafruit_INA260()>:
#include "Adafruit_INA260.h"

/*!
 *    @brief  Instantiates a new INA260 class
 */
Adafruit_INA260::Adafruit_INA260(void) {}
    166c:	4770      	bx	lr
    166e:	bf00      	nop

00001670 <Adafruit_INA260::readCurrent()>:
/*!
    @brief Reads and scales the current value of the Current register.
    @return The current current measurement in mA
*/
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
    1670:	b500      	push	{lr}
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1672:	2201      	movs	r2, #1
float Adafruit_INA260::readCurrent(void) {
    1674:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1676:	68c1      	ldr	r1, [r0, #12]
    1678:	2302      	movs	r3, #2
    167a:	a802      	add	r0, sp, #8
    167c:	e9cd 2200 	strd	r2, r2, [sp]
    1680:	f000 f844 	bl	170c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (int16_t)current.read() * 1.25;
    1684:	a802      	add	r0, sp, #8
    1686:	f000 f89f 	bl	17c8 <Adafruit_BusIO_Register::read()>
    168a:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    168e:	b203      	sxth	r3, r0
    1690:	ee00 3a10 	vmov	s0, r3
    1694:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    1698:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    169c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    16a0:	b009      	add	sp, #36	; 0x24
    16a2:	f85d fb04 	ldr.w	pc, [sp], #4
    16a6:	bf00      	nop

000016a8 <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    16a8:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    16aa:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    16ac:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    16ae:	2401      	movs	r4, #1
    16b0:	68c1      	ldr	r1, [r0, #12]
    16b2:	461a      	mov	r2, r3
    16b4:	a802      	add	r0, sp, #8
    16b6:	e9cd 4400 	strd	r4, r4, [sp]
    16ba:	f000 f827 	bl	170c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    16be:	a802      	add	r0, sp, #8
    16c0:	f000 f882 	bl	17c8 <Adafruit_BusIO_Register::read()>
    16c4:	ee06 0a90 	vmov	s13, r0
    16c8:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    16cc:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    16d0:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    16d4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    16d8:	b008      	add	sp, #32
    16da:	bd10      	pop	{r4, pc}

000016dc <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    16dc:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    16de:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    16e0:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    16e2:	68c1      	ldr	r1, [r0, #12]
    16e4:	2302      	movs	r3, #2
    16e6:	2203      	movs	r2, #3
    16e8:	a802      	add	r0, sp, #8
    16ea:	e9cd 4400 	strd	r4, r4, [sp]
    16ee:	f000 f80d 	bl	170c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    16f2:	a802      	add	r0, sp, #8
    16f4:	f000 f868 	bl	17c8 <Adafruit_BusIO_Register::read()>
    16f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    16fc:	fa00 f304 	lsl.w	r3, r0, r4
    1700:	ee00 3a10 	vmov	s0, r3
}
    1704:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    1708:	b008      	add	sp, #32
    170a:	bd10      	pop	{r4, pc}

0000170c <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
  _addrwidth = address_width;
  _address = reg_addr;
  _byteorder = byteorder;
  _width = width;
    170c:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    170e:	2300      	movs	r3, #0
  _address = reg_addr;
    1710:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    1712:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1714:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1718:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    171a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    171e:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1720:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    1722:	7343      	strb	r3, [r0, #13]
}
    1724:	4770      	bx	lr
    1726:	bf00      	nop

00001728 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1728:	b510      	push	{r4, lr}
    172a:	4684      	mov	ip, r0
    172c:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    172e:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1730:	4614      	mov	r4, r2
    1732:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    1734:	b2c2      	uxtb	r2, r0
    1736:	f8ad 000c 	strh.w	r0, [sp, #12]
    173a:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
    173e:	f8dc 0000 	ldr.w	r0, [ip]
    1742:	b148      	cbz	r0, 1758 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1744:	2100      	movs	r1, #0
    1746:	f89c 200d 	ldrb.w	r2, [ip, #13]
    174a:	9400      	str	r4, [sp, #0]
    174c:	9101      	str	r1, [sp, #4]
    174e:	a903      	add	r1, sp, #12
    1750:	f000 f8c8 	bl	18e4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
    1754:	b004      	add	sp, #16
    1756:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1758:	f8dc 0004 	ldr.w	r0, [ip, #4]
    175c:	2800      	cmp	r0, #0
    175e:	d0f9      	beq.n	1754 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1760:	f89c 1008 	ldrb.w	r1, [ip, #8]
    1764:	2903      	cmp	r1, #3
    1766:	d01e      	beq.n	17a6 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1768:	b179      	cbz	r1, 178a <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    176a:	2902      	cmp	r1, #2
    176c:	d112      	bne.n	1794 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    176e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1772:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1776:	21ff      	movs	r1, #255	; 0xff
    1778:	f89c 200d 	ldrb.w	r2, [ip, #13]
    177c:	9400      	str	r4, [sp, #0]
    177e:	9101      	str	r1, [sp, #4]
    1780:	a903      	add	r1, sp, #12
    1782:	f000 fa75 	bl	1c70 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1786:	b004      	add	sp, #16
    1788:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    178a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    178e:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1792:	e7f0      	b.n	1776 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1794:	2901      	cmp	r1, #1
    1796:	d1ee      	bne.n	1776 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1798:	f89d 200c 	ldrb.w	r2, [sp, #12]
    179c:	f062 023f 	orn	r2, r2, #63	; 0x3f
    17a0:	f88d 200c 	strb.w	r2, [sp, #12]
    17a4:	e7e7      	b.n	1776 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    17a6:	21ff      	movs	r1, #255	; 0xff
    17a8:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    17aa:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    17ae:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    17b2:	f89c 200d 	ldrb.w	r2, [ip, #13]
    17b6:	9101      	str	r1, [sp, #4]
    17b8:	a903      	add	r1, sp, #12
    17ba:	3201      	adds	r2, #1
      addrbuffer[0] =
    17bc:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    17c0:	f000 fa56 	bl	1c70 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    17c4:	e7c6      	b.n	1754 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    17c6:	bf00      	nop

000017c8 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    17c8:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    17ca:	f100 050f 	add.w	r5, r0, #15
    17ce:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    17d0:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    17d2:	4629      	mov	r1, r5
    17d4:	f7ff ffa8 	bl	1728 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    17d8:	b1a0      	cbz	r0, 1804 <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    17da:	7b20      	ldrb	r0, [r4, #12]
    17dc:	b170      	cbz	r0, 17fc <Adafruit_BusIO_Register::read()+0x34>
    17de:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    17e0:	7ba6      	ldrb	r6, [r4, #14]
    17e2:	4629      	mov	r1, r5
    17e4:	f104 020e 	add.w	r2, r4, #14
    17e8:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    17ea:	2000      	movs	r0, #0
    value <<= 8;
    17ec:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    17ee:	b936      	cbnz	r6, 17fe <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    17f0:	781c      	ldrb	r4, [r3, #0]
    17f2:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    17f4:	3b01      	subs	r3, #1
    17f6:	3101      	adds	r1, #1
    17f8:	4293      	cmp	r3, r2
    17fa:	d1f7      	bne.n	17ec <Adafruit_BusIO_Register::read()+0x24>
}
    17fc:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    17fe:	780c      	ldrb	r4, [r1, #0]
    1800:	4320      	orrs	r0, r4
    1802:	e7f7      	b.n	17f4 <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    1804:	f04f 30ff 	mov.w	r0, #4294967295
}
    1808:	bd70      	pop	{r4, r5, r6, pc}
    180a:	bf00      	nop

0000180c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1810:	9f07      	ldr	r7, [sp, #28]
    1812:	4615      	mov	r5, r2
    1814:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    1816:	68c3      	ldr	r3, [r0, #12]
    1818:	443a      	add	r2, r7
    181a:	429a      	cmp	r2, r3
    181c:	d816      	bhi.n	184c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    181e:	7802      	ldrb	r2, [r0, #0]
    1820:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1822:	6843      	ldr	r3, [r0, #4]
    1824:	460e      	mov	r6, r1
    1826:	0052      	lsls	r2, r2, #1
    1828:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    182c:	2201      	movs	r2, #1
    182e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1832:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    1836:	b167      	cbz	r7, 1852 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1838:	9b06      	ldr	r3, [sp, #24]
    183a:	b153      	cbz	r3, 1852 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    183c:	6840      	ldr	r0, [r0, #4]
    183e:	463a      	mov	r2, r7
    1840:	9906      	ldr	r1, [sp, #24]
    1842:	6803      	ldr	r3, [r0, #0]
    1844:	685b      	ldr	r3, [r3, #4]
    1846:	4798      	blx	r3
    1848:	4287      	cmp	r7, r0
    184a:	d002      	beq.n	1852 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    184c:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    184e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    1852:	6860      	ldr	r0, [r4, #4]
    1854:	4631      	mov	r1, r6
    1856:	462a      	mov	r2, r5
    1858:	6803      	ldr	r3, [r0, #0]
    185a:	685b      	ldr	r3, [r3, #4]
    185c:	4798      	blx	r3
    185e:	4285      	cmp	r5, r0
    1860:	d1f4      	bne.n	184c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    1862:	4641      	mov	r1, r8
    1864:	6860      	ldr	r0, [r4, #4]
    1866:	f7ff fb15 	bl	e94 <TwoWire::endTransmission(unsigned char)>
    186a:	fab0 f080 	clz	r0, r0
    186e:	0940      	lsrs	r0, r0, #5
}
    1870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001874 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    1874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1878:	4615      	mov	r5, r2
    187a:	4606      	mov	r6, r0
    187c:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    187e:	b2d2      	uxtb	r2, r2
    1880:	7801      	ldrb	r1, [r0, #0]
    1882:	6840      	ldr	r0, [r0, #4]
    1884:	f7ff fb86 	bl	f94 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    1888:	4285      	cmp	r5, r0
    188a:	d124      	bne.n	18d6 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    188c:	b305      	cbz	r5, 18d0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    188e:	2400      	movs	r4, #0
    1890:	f8df 904c 	ldr.w	r9, [pc, #76]	; 18e0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    1894:	46a0      	mov	r8, r4
    1896:	e013      	b.n	18c0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1898:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    189c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    18a0:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    18a2:	f10c 0201 	add.w	r2, ip, #1
    18a6:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    18a8:	d918      	bls.n	18dc <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    18aa:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    18ae:	f89c 301a 	ldrb.w	r3, [ip, #26]
    18b2:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    18b4:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    18b8:	b2a4      	uxth	r4, r4
    18ba:	42a5      	cmp	r5, r4
    18bc:	46a0      	mov	r8, r4
    18be:	d907      	bls.n	18d0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    18c0:	6870      	ldr	r0, [r6, #4]
    18c2:	6802      	ldr	r2, [r0, #0]
    18c4:	6952      	ldr	r2, [r2, #20]
    18c6:	454a      	cmp	r2, r9
    18c8:	d0e6      	beq.n	1898 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    18ca:	4790      	blx	r2
    18cc:	b2c3      	uxtb	r3, r0
    18ce:	e7f0      	b.n	18b2 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    18d0:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    18d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    18d6:	2000      	movs	r0, #0
}
    18d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18dc:	23ff      	movs	r3, #255	; 0xff
    18de:	e7e8      	b.n	18b2 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    18e0:	00000d2d 	.word	0x00000d2d

000018e4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    18e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    18e8:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    18ea:	b082      	sub	sp, #8
    18ec:	461f      	mov	r7, r3
    18ee:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    18f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    18f4:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    18f6:	e9cd 4400 	strd	r4, r4, [sp]
    18fa:	f7ff ff87 	bl	180c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    18fe:	b928      	cbnz	r0, 190c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    1900:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    1904:	4640      	mov	r0, r8
    1906:	b002      	add	sp, #8
    1908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    190c:	4680      	mov	r8, r0
    190e:	b915      	cbnz	r5, 1916 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    1910:	e7f8      	b.n	1904 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    1912:	42a5      	cmp	r5, r4
    1914:	d9f6      	bls.n	1904 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    1916:	1b2a      	subs	r2, r5, r4
    1918:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    191a:	1939      	adds	r1, r7, r4
    191c:	4630      	mov	r0, r6
    191e:	429a      	cmp	r2, r3
    1920:	bf28      	it	cs
    1922:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1924:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    1926:	42a3      	cmp	r3, r4
    pos += read_len;
    1928:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    192a:	bf8c      	ite	hi
    192c:	2300      	movhi	r3, #0
    192e:	2301      	movls	r3, #1
    1930:	f7ff ffa0 	bl	1874 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    1934:	2800      	cmp	r0, #0
    1936:	d1ec      	bne.n	1912 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    1938:	e7e2      	b.n	1900 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    193a:	bf00      	nop

0000193c <Adafruit_I2CDevice::setSpeed(unsigned long)>:
  Serial.println(atwbr);
#endif
  return true;
#elif (ARDUINO >= 157) && !defined(ARDUINO_STM32_FEATHER) &&                   \
    !defined(TinyWireM_h)
  _wire->setClock(desiredclk);
    193c:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::setSpeed(uint32_t desiredclk) {
    193e:	b508      	push	{r3, lr}
  _wire->setClock(desiredclk);
    1940:	f7ff fbd8 	bl	10f4 <TwoWire::setClock(unsigned long)>

#else
  (void)desiredclk;
  return false;
#endif
}
    1944:	2001      	movs	r0, #1
    1946:	bd08      	pop	{r3, pc}

00001948 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    1948:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    194a:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    1950:	bf0c      	ite	eq
    1952:	2301      	moveq	r3, #1
    1954:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1956:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    1958:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    195c:	4e63      	ldr	r6, [pc, #396]	; (1aec <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    195e:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    1962:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1964:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1966:	bf0c      	ite	eq
    1968:	f04f 0a01 	moveq.w	sl, #1
    196c:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1970:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    1974:	2a00      	cmp	r2, #0
    1976:	f000 80b6 	beq.w	1ae6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    197a:	3a01      	subs	r2, #1
    197c:	4604      	mov	r4, r0
    197e:	b2f6      	uxtb	r6, r6
    1980:	4688      	mov	r8, r1
    1982:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    1984:	f8df b170 	ldr.w	fp, [pc, #368]	; 1af8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    1988:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    198a:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    198c:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    198e:	2e00      	cmp	r6, #0
    1990:	d141      	bne.n	1a16 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1992:	7b63      	ldrb	r3, [r4, #13]
    1994:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1998:	d175      	bne.n	1a86 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    199a:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    199e:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    19a2:	bf14      	ite	ne
    19a4:	2301      	movne	r3, #1
    19a6:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    19a8:	1c42      	adds	r2, r0, #1
    19aa:	d02f      	beq.n	1a0c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    19ac:	4553      	cmp	r3, sl
    19ae:	d02d      	beq.n	1a0c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    19b0:	4619      	mov	r1, r3
    19b2:	b2c0      	uxtb	r0, r0
    19b4:	9301      	str	r3, [sp, #4]
    19b6:	f000 fef7 	bl	27a8 <digitalWrite>
        towrite = send & b;
    19ba:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    19bc:	2101      	movs	r1, #1
    19be:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    19c0:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    19c2:	f000 fef1 	bl	27a8 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    19c6:	f994 0011 	ldrsb.w	r0, [r4, #17]
    19ca:	1c42      	adds	r2, r0, #1
    19cc:	d004      	beq.n	19d8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    19ce:	b2c0      	uxtb	r0, r0
    19d0:	f000 ff14 	bl	27fc <digitalRead>
    19d4:	b100      	cbz	r0, 19d8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    19d6:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    19d8:	2100      	movs	r1, #0
    19da:	7be0      	ldrb	r0, [r4, #15]
    19dc:	f000 fee4 	bl	27a8 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    19e0:	f994 3011 	ldrsb.w	r3, [r4, #17]
    19e4:	3301      	adds	r3, #1
        buffer[i] = reply;
    19e6:	bf18      	it	ne
    19e8:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    19ec:	7b23      	ldrb	r3, [r4, #12]
    19ee:	b94b      	cbnz	r3, 1a04 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    19f0:	006d      	lsls	r5, r5, #1
    19f2:	b2ed      	uxtb	r5, r5
    19f4:	2d00      	cmp	r5, #0
    19f6:	d1ca      	bne.n	198e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    19f8:	9b03      	ldr	r3, [sp, #12]
    19fa:	4598      	cmp	r8, r3
    19fc:	d073      	beq.n	1ae6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    19fe:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    1a02:	e7c2      	b.n	198a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    1a04:	086d      	lsrs	r5, r5, #1
    1a06:	2d00      	cmp	r5, #0
    1a08:	d1c1      	bne.n	198e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    1a0a:	e7f5      	b.n	19f8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    1a0c:	2101      	movs	r1, #1
    1a0e:	7be0      	ldrb	r0, [r4, #15]
    1a10:	f000 feca 	bl	27a8 <digitalWrite>
        if (bitdelay_us) {
    1a14:	e7d7      	b.n	19c6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a16:	4b36      	ldr	r3, [pc, #216]	; (1af0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1a18:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a1c:	681a      	ldr	r2, [r3, #0]
    1a1e:	4b35      	ldr	r3, [pc, #212]	; (1af4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1a20:	fba3 3202 	umull	r3, r2, r3, r2
    1a24:	0c92      	lsrs	r2, r2, #18
    1a26:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a2a:	f8db 3004 	ldr.w	r3, [fp, #4]
    1a2e:	1a5b      	subs	r3, r3, r1
    1a30:	429a      	cmp	r2, r3
    1a32:	d8fa      	bhi.n	1a2a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1a34:	7b63      	ldrb	r3, [r4, #13]
    1a36:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1a3a:	d140      	bne.n	1abe <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    1a3c:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1a40:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    1a44:	bf14      	ite	ne
    1a46:	2101      	movne	r1, #1
    1a48:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1a4a:	1c43      	adds	r3, r0, #1
    1a4c:	d007      	beq.n	1a5e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    1a4e:	4551      	cmp	r1, sl
    1a50:	d005      	beq.n	1a5e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    1a52:	b2c0      	uxtb	r0, r0
    1a54:	9101      	str	r1, [sp, #4]
    1a56:	f000 fea7 	bl	27a8 <digitalWrite>
        towrite = send & b;
    1a5a:	9901      	ldr	r1, [sp, #4]
    1a5c:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    1a5e:	2101      	movs	r1, #1
    1a60:	7be0      	ldrb	r0, [r4, #15]
    1a62:	f000 fea1 	bl	27a8 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a66:	4b22      	ldr	r3, [pc, #136]	; (1af0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1a68:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1a6c:	681a      	ldr	r2, [r3, #0]
    1a6e:	4b21      	ldr	r3, [pc, #132]	; (1af4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1a70:	fba3 3202 	umull	r3, r2, r3, r2
    1a74:	0c92      	lsrs	r2, r2, #18
    1a76:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1a7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    1a7e:	1a5b      	subs	r3, r3, r1
    1a80:	429a      	cmp	r2, r3
    1a82:	d8fa      	bhi.n	1a7a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    1a84:	e79f      	b.n	19c6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    1a86:	2101      	movs	r1, #1
    1a88:	7be0      	ldrb	r0, [r4, #15]
    1a8a:	f000 fe8d 	bl	27a8 <digitalWrite>
        if (_mosi != -1) {
    1a8e:	f994 0010 	ldrsb.w	r0, [r4, #16]
    1a92:	1c43      	adds	r3, r0, #1
    1a94:	d004      	beq.n	1aa0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    1a96:	b2c0      	uxtb	r0, r0
    1a98:	ea09 0105 	and.w	r1, r9, r5
    1a9c:	f000 fe84 	bl	27a8 <digitalWrite>
        digitalWrite(_sck, LOW);
    1aa0:	2100      	movs	r1, #0
    1aa2:	7be0      	ldrb	r0, [r4, #15]
    1aa4:	f000 fe80 	bl	27a8 <digitalWrite>
        if (_miso != -1) {
    1aa8:	f994 0011 	ldrsb.w	r0, [r4, #17]
    1aac:	1c41      	adds	r1, r0, #1
    1aae:	d09d      	beq.n	19ec <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    1ab0:	b2c0      	uxtb	r0, r0
    1ab2:	f000 fea3 	bl	27fc <digitalRead>
    1ab6:	2800      	cmp	r0, #0
    1ab8:	d092      	beq.n	19e0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    1aba:	432f      	orrs	r7, r5
    1abc:	e790      	b.n	19e0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    1abe:	2101      	movs	r1, #1
    1ac0:	7be0      	ldrb	r0, [r4, #15]
    1ac2:	f000 fe71 	bl	27a8 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1ac6:	4b0a      	ldr	r3, [pc, #40]	; (1af0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1ac8:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1acc:	681a      	ldr	r2, [r3, #0]
    1ace:	4b09      	ldr	r3, [pc, #36]	; (1af4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1ad0:	fba3 3202 	umull	r3, r2, r3, r2
    1ad4:	0c92      	lsrs	r2, r2, #18
    1ad6:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1ada:	f8db 3004 	ldr.w	r3, [fp, #4]
    1ade:	1a5b      	subs	r3, r3, r1
    1ae0:	429a      	cmp	r2, r3
    1ae2:	d8fa      	bhi.n	1ada <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    1ae4:	e7d3      	b.n	1a8e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    1ae6:	b005      	add	sp, #20
    1ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1aec:	0007a120 	.word	0x0007a120
    1af0:	200010bc 	.word	0x200010bc
    1af4:	431bde83 	.word	0x431bde83
    1af8:	e0001000 	.word	0xe0001000

00001afc <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    1afc:	b430      	push	{r4, r5}
    1afe:	b082      	sub	sp, #8
    1b00:	460c      	mov	r4, r1
    1b02:	ab02      	add	r3, sp, #8
    1b04:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1b08:	7cc3      	ldrb	r3, [r0, #19]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d030      	beq.n	1b70 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1b0e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1b10:	7cc3      	ldrb	r3, [r0, #19]
    1b12:	07da      	lsls	r2, r3, #31
    1b14:	d508      	bpl.n	1b28 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1b16:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b1a:	6945      	ldr	r5, [r0, #20]
    1b1c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1b20:	402a      	ands	r2, r5
    1b22:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1b24:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    1b28:	079d      	lsls	r5, r3, #30
    1b2a:	d508      	bpl.n	1b3e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1b2c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b30:	6985      	ldr	r5, [r0, #24]
    1b32:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    1b36:	402a      	ands	r2, r5
    1b38:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1b3a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    1b3e:	0759      	lsls	r1, r3, #29
    1b40:	d508      	bpl.n	1b54 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1b42:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b46:	69c5      	ldr	r5, [r0, #28]
    1b48:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1b4c:	402a      	ands	r2, r5
    1b4e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1b50:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    1b54:	071a      	lsls	r2, r3, #28
    1b56:	d508      	bpl.n	1b6a <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1b58:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1b5c:	6a05      	ldr	r5, [r0, #32]
    1b5e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1b62:	402a      	ands	r2, r5
    1b64:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1b66:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    1b6a:	06db      	lsls	r3, r3, #27
    1b6c:	d42f      	bmi.n	1bce <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    1b6e:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    1b70:	6883      	ldr	r3, [r0, #8]
    1b72:	429c      	cmp	r4, r3
    1b74:	d035      	beq.n	1be2 <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    1b76:	4b22      	ldr	r3, [pc, #136]	; (1c00 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1b78:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1b7a:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1b7c:	4a21      	ldr	r2, [pc, #132]	; (1c04 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1b7e:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1b82:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1b86:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1b8a:	3301      	adds	r3, #1
    1b8c:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    1b90:	b1cc      	cbz	r4, 1bc6 <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    1b92:	4294      	cmp	r4, r2
    1b94:	d827      	bhi.n	1be6 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1b96:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1b9a:	fbb2 f2f3 	udiv	r2, r2, r3
    1b9e:	4294      	cmp	r4, r2
    1ba0:	d32c      	bcc.n	1bfc <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1ba2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1ba6:	d320      	bcc.n	1bea <SPIClass::beginTransaction(SPISettings)+0xee>
    1ba8:	4c17      	ldr	r4, [pc, #92]	; (1c08 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1baa:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1bac:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1bae:	2203      	movs	r2, #3
		port().CR = 0;
    1bb0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1bb2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1bb4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1bb6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1bb8:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1bba:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1bbc:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1bbe:	611a      	str	r2, [r3, #16]
	}
    1bc0:	b002      	add	sp, #8
    1bc2:	bc30      	pop	{r4, r5}
    1bc4:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1bc6:	4299      	cmp	r1, r3
    1bc8:	d3ef      	bcc.n	1baa <SPIClass::beginTransaction(SPISettings)+0xae>
    1bca:	1c53      	adds	r3, r2, #1
    1bcc:	e7e9      	b.n	1ba2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1bce:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1bd2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1bd4:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1bd8:	400b      	ands	r3, r1
    1bda:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1bdc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1be0:	e7c5      	b.n	1b6e <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1be2:	68c4      	ldr	r4, [r0, #12]
    1be4:	e7e2      	b.n	1bac <SPIClass::beginTransaction(SPISettings)+0xb0>
    1be6:	2400      	movs	r4, #0
    1be8:	e7df      	b.n	1baa <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1bea:	2b02      	cmp	r3, #2
    1bec:	d9fb      	bls.n	1be6 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1bee:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1bf0:	085a      	lsrs	r2, r3, #1
    1bf2:	0214      	lsls	r4, r2, #8
    1bf4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1bf8:	431c      	orrs	r4, r3
    1bfa:	e7d6      	b.n	1baa <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1bfc:	461a      	mov	r2, r3
    1bfe:	e7e4      	b.n	1bca <SPIClass::beginTransaction(SPISettings)+0xce>
    1c00:	400fc000 	.word	0x400fc000
    1c04:	200006d0 	.word	0x200006d0
    1c08:	007f7fff 	.word	0x007f7fff

00001c0c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    1c0c:	b510      	push	{r4, lr}
    1c0e:	4604      	mov	r4, r0
  if (_cs != -1) {
    1c10:	f990 000e 	ldrsb.w	r0, [r0, #14]
    1c14:	1c43      	adds	r3, r0, #1
    1c16:	d003      	beq.n	1c20 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    1c18:	2101      	movs	r1, #1
    1c1a:	b2c0      	uxtb	r0, r0
    1c1c:	f000 fdc4 	bl	27a8 <digitalWrite>
  if (_spi) {
    1c20:	6823      	ldr	r3, [r4, #0]
    1c22:	b323      	cbz	r3, 1c6e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    1c24:	7cda      	ldrb	r2, [r3, #19]
    1c26:	b312      	cbz	r2, 1c6e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1c28:	07d1      	lsls	r1, r2, #31
    1c2a:	d504      	bpl.n	1c36 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    1c2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1c2e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1c32:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1c36:	0794      	lsls	r4, r2, #30
    1c38:	d504      	bpl.n	1c44 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    1c3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1c3c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1c40:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1c44:	0750      	lsls	r0, r2, #29
    1c46:	d504      	bpl.n	1c52 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    1c48:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1c4a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1c4e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1c52:	0711      	lsls	r1, r2, #28
    1c54:	d504      	bpl.n	1c60 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    1c56:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1c58:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1c5c:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1c60:	06d2      	lsls	r2, r2, #27
    1c62:	d504      	bpl.n	1c6e <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    1c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1c66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    1c6e:	bd10      	pop	{r4, pc}

00001c70 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    1c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c74:	4604      	mov	r4, r0
    1c76:	b083      	sub	sp, #12
  if (_spi) {
    1c78:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    1c7a:	460f      	mov	r7, r1
    1c7c:	4615      	mov	r5, r2
    1c7e:	469b      	mov	fp, r3
    1c80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    1c84:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    1c88:	b120      	cbz	r0, 1c94 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    1c8a:	6863      	ldr	r3, [r4, #4]
    1c8c:	e893 0006 	ldmia.w	r3, {r1, r2}
    1c90:	f7ff ff34 	bl	1afc <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1c94:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1c98:	1c43      	adds	r3, r0, #1
    1c9a:	d148      	bne.n	1d2e <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    1c9c:	b1d5      	cbz	r5, 1cd4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    1c9e:	3f01      	subs	r7, #1
    1ca0:	eb07 0905 	add.w	r9, r7, r5
    1ca4:	f10d 0507 	add.w	r5, sp, #7
    1ca8:	e003      	b.n	1cb2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    1caa:	f7ff fe4d 	bl	1948 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1cae:	454f      	cmp	r7, r9
    1cb0:	d010      	beq.n	1cd4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    1cb2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    1cb6:	2201      	movs	r2, #1
  if (_spi) {
    1cb8:	6826      	ldr	r6, [r4, #0]
    1cba:	4629      	mov	r1, r5
    1cbc:	4620      	mov	r0, r4
  uint8_t data = send;
    1cbe:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    1cc2:	2e00      	cmp	r6, #0
    1cc4:	d0f1      	beq.n	1caa <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
		transfer(buf, buf, count);
    1cc6:	4613      	mov	r3, r2
    1cc8:	4630      	mov	r0, r6
    1cca:	462a      	mov	r2, r5
    1ccc:	f000 f864 	bl	1d98 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    1cd0:	454f      	cmp	r7, r9
    1cd2:	d1ee      	bne.n	1cb2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    1cd4:	f1ba 0f00 	cmp.w	sl, #0
    1cd8:	d022      	beq.n	1d20 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    1cda:	44da      	add	sl, fp
    1cdc:	f10b 36ff 	add.w	r6, fp, #4294967295
    1ce0:	f10d 0507 	add.w	r5, sp, #7
    1ce4:	f10a 3aff 	add.w	sl, sl, #4294967295
    1ce8:	e007      	b.n	1cfa <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    1cea:	f7ff fe2d 	bl	1948 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    1cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1cf2:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1cf6:	45b2      	cmp	sl, r6
    1cf8:	d012      	beq.n	1d20 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    1cfa:	6827      	ldr	r7, [r4, #0]
    1cfc:	2201      	movs	r2, #1
    1cfe:	4629      	mov	r1, r5
    1d00:	4620      	mov	r0, r4
  uint8_t data = send;
    1d02:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    1d06:	2f00      	cmp	r7, #0
    1d08:	d0ef      	beq.n	1cea <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    1d0a:	4613      	mov	r3, r2
    1d0c:	4638      	mov	r0, r7
    1d0e:	462a      	mov	r2, r5
    1d10:	f000 f842 	bl	1d98 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    1d14:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    1d18:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    1d1c:	45b2      	cmp	sl, r6
    1d1e:	d1ec      	bne.n	1cfa <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    1d20:	4620      	mov	r0, r4
    1d22:	f7ff ff73 	bl	1c0c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    1d26:	2001      	movs	r0, #1
    1d28:	b003      	add	sp, #12
    1d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    1d2e:	b2c0      	uxtb	r0, r0
    1d30:	2100      	movs	r1, #0
    1d32:	f000 fd39 	bl	27a8 <digitalWrite>
    1d36:	e7b1      	b.n	1c9c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00001d38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    1d38:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1d3a:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d3c:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    1d40:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    1d42:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    1d44:	b1a3      	cbz	r3, 1d70 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d46:	b321      	cbz	r1, 1d92 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    1d48:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    1d4c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d4e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d50:	6f25      	ldr	r5, [r4, #112]	; 0x70
    1d52:	07af      	lsls	r7, r5, #30
    1d54:	d407      	bmi.n	1d66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    1d56:	4615      	mov	r5, r2
				count_read--;
    1d58:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d5a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    1d5c:	b11a      	cbz	r2, 1d66 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d5e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    1d62:	462a      	mov	r2, r5
    1d64:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    1d66:	6965      	ldr	r5, [r4, #20]
    1d68:	07ed      	lsls	r5, r5, #31
    1d6a:	d5f1      	bpl.n	1d50 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d1ea      	bne.n	1d46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    1d70:	b16e      	cbz	r6, 1d8e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    1d72:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    1d74:	6f19      	ldr	r1, [r3, #112]	; 0x70
    1d76:	0789      	lsls	r1, r1, #30
    1d78:	d4fa      	bmi.n	1d70 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    1d7a:	4611      	mov	r1, r2
			count_read--;
    1d7c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    1d80:	2a00      	cmp	r2, #0
    1d82:	d0f5      	beq.n	1d70 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    1d84:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    1d88:	460a      	mov	r2, r1
	while (count_read) {
    1d8a:	2e00      	cmp	r6, #0
    1d8c:	d1f1      	bne.n	1d72 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    1d8e:	bcf0      	pop	{r4, r5, r6, r7}
    1d90:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    1d92:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    1d96:	e7d9      	b.n	1d4c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00001d98 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    1d98:	b10b      	cbz	r3, 1d9e <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    1d9a:	f7ff bfcd 	b.w	1d38 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    1d9e:	4770      	bx	lr

00001da0 <Adafruit_MCP4725::Adafruit_MCP4725()>:
Adafruit_MCP4725::Adafruit_MCP4725() {}
    1da0:	2200      	movs	r2, #0
    1da2:	6002      	str	r2, [r0, #0]
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop

00001da8 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)>:
    to the DAC, defaults to 400 KHz
    @returns True if able to write the value over I2C
*/
/**************************************************************************/
bool Adafruit_MCP4725::setVoltage(uint16_t output, bool writeEEPROM,
                                  uint32_t i2c_frequency) {
    1da8:	b570      	push	{r4, r5, r6, lr}
    1daa:	4616      	mov	r6, r2
    1dac:	b084      	sub	sp, #16
    1dae:	460c      	mov	r4, r1
    1db0:	4605      	mov	r5, r0
  i2c_dev->setSpeed(i2c_frequency); // Set I2C frequency to desired speed
    1db2:	4619      	mov	r1, r3
    1db4:	6800      	ldr	r0, [r0, #0]
    1db6:	f7ff fdc1 	bl	193c <Adafruit_I2CDevice::setSpeed(unsigned long)>
  uint8_t packet[3];

  if (writeEEPROM) {
    packet[0] = MCP4725_CMD_WRITEDACEEPROM;
  } else {
    packet[0] = MCP4725_CMD_WRITEDAC;
    1dba:	2e00      	cmp	r6, #0
  }
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    1dbc:	ea4f 1214 	mov.w	r2, r4, lsr #4
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)

  if (!i2c_dev->write(packet, 3)) {
    1dc0:	f04f 0300 	mov.w	r3, #0
    packet[0] = MCP4725_CMD_WRITEDAC;
    1dc4:	bf14      	ite	ne
    1dc6:	2160      	movne	r1, #96	; 0x60
    1dc8:	2140      	moveq	r1, #64	; 0x40
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    1dca:	0124      	lsls	r4, r4, #4
  packet[1] = output / 16;        // Upper data bits (D11.D10.D9.D8.D7.D6.D5.D4)
    1dcc:	f88d 200d 	strb.w	r2, [sp, #13]
    1dd0:	f88d 100c 	strb.w	r1, [sp, #12]
  if (!i2c_dev->write(packet, 3)) {
    1dd4:	2203      	movs	r2, #3
    1dd6:	a903      	add	r1, sp, #12
  packet[2] = (output % 16) << 4; // Lower data bits (D3.D2.D1.D0.x.x.x.x)
    1dd8:	f88d 400e 	strb.w	r4, [sp, #14]
  if (!i2c_dev->write(packet, 3)) {
    1ddc:	e9cd 3300 	strd	r3, r3, [sp]
    1de0:	2301      	movs	r3, #1
    1de2:	6828      	ldr	r0, [r5, #0]
    1de4:	f7ff fd12 	bl	180c <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    1de8:	4604      	mov	r4, r0
    1dea:	b118      	cbz	r0, 1df4 <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x4c>
    return false;
  }

  i2c_dev->setSpeed(100000); // reset to arduino default
    1dec:	4903      	ldr	r1, [pc, #12]	; (1dfc <Adafruit_MCP4725::setVoltage(unsigned short, bool, unsigned long)+0x54>)
    1dee:	6828      	ldr	r0, [r5, #0]
    1df0:	f7ff fda4 	bl	193c <Adafruit_I2CDevice::setSpeed(unsigned long)>
  return true;
}
    1df4:	4620      	mov	r0, r4
    1df6:	b004      	add	sp, #16
    1df8:	bd70      	pop	{r4, r5, r6, pc}
    1dfa:	bf00      	nop
    1dfc:	000186a0 	.word	0x000186a0

00001e00 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1e00:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1e02:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1e06:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1e08:	4c0c      	ldr	r4, [pc, #48]	; (1e3c <EventResponder::runFromInterrupt()+0x3c>)
    1e0a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1e0c:	b180      	cbz	r0, 1e30 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    1e0e:	4e0c      	ldr	r6, [pc, #48]	; (1e40 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1e10:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1e12:	6943      	ldr	r3, [r0, #20]
    1e14:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1e16:	b173      	cbz	r3, 1e36 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1e18:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1e1a:	b902      	cbnz	r2, 1e1e <EventResponder::runFromInterrupt()+0x1e>
    1e1c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    1e1e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1e20:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1e22:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1e24:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1e28:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1e2a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1e2c:	2800      	cmp	r0, #0
    1e2e:	d1f0      	bne.n	1e12 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1e30:	b902      	cbnz	r2, 1e34 <EventResponder::runFromInterrupt()+0x34>
    1e32:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    1e34:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1e36:	6033      	str	r3, [r6, #0]
    1e38:	e7ef      	b.n	1e1a <EventResponder::runFromInterrupt()+0x1a>
    1e3a:	bf00      	nop
    1e3c:	20001d10 	.word	0x20001d10
    1e40:	20001d0c 	.word	0x20001d0c

00001e44 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1e44:	f7ff bfdc 	b.w	1e00 <EventResponder::runFromInterrupt()>

00001e48 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1e48:	4904      	ldr	r1, [pc, #16]	; (1e5c <systick_isr+0x14>)
	systick_millis_count++;
    1e4a:	4a05      	ldr	r2, [pc, #20]	; (1e60 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1e4c:	6849      	ldr	r1, [r1, #4]
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <systick_isr+0x1c>)
    1e50:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1e52:	6813      	ldr	r3, [r2, #0]
    1e54:	3301      	adds	r3, #1
    1e56:	6013      	str	r3, [r2, #0]
}
    1e58:	4770      	bx	lr
    1e5a:	bf00      	nop
    1e5c:	e0001000 	.word	0xe0001000
    1e60:	20002b3c 	.word	0x20002b3c
    1e64:	20002b38 	.word	0x20002b38

00001e68 <IRQHandler_Serial1>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial1()
{
	Serial1.IRQHandler();
    1e68:	4801      	ldr	r0, [pc, #4]	; (1e70 <IRQHandler_Serial1+0x8>)
    1e6a:	f002 bc0f 	b.w	468c <HardwareSerialIMXRT::IRQHandler()>
    1e6e:	bf00      	nop
    1e70:	200010d0 	.word	0x200010d0

00001e74 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    1e78:	460c      	mov	r4, r1
    1e7a:	b1d1      	cbz	r1, 1eb2 <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    1e7c:	b1ea      	cbz	r2, 1eba <Print::write(unsigned char const*, unsigned int)+0x46>
    1e7e:	4680      	mov	r8, r0
    1e80:	188e      	adds	r6, r1, r2
	size_t count = 0;
    1e82:	2500      	movs	r5, #0
    1e84:	4f0e      	ldr	r7, [pc, #56]	; (1ec0 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    1e86:	e004      	b.n	1e92 <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1e88:	f002 f832 	bl	3ef0 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    1e8c:	42b4      	cmp	r4, r6
    1e8e:	4405      	add	r5, r0
    1e90:	d00c      	beq.n	1eac <Print::write(unsigned char const*, unsigned int)+0x38>
    1e92:	f8d8 3000 	ldr.w	r3, [r8]
    1e96:	f814 0b01 	ldrb.w	r0, [r4], #1
    1e9a:	681b      	ldr	r3, [r3, #0]
    1e9c:	42bb      	cmp	r3, r7
    1e9e:	d0f3      	beq.n	1e88 <Print::write(unsigned char const*, unsigned int)+0x14>
    1ea0:	4601      	mov	r1, r0
    1ea2:	4640      	mov	r0, r8
    1ea4:	4798      	blx	r3
    1ea6:	42b4      	cmp	r4, r6
    1ea8:	4405      	add	r5, r0
    1eaa:	d1f2      	bne.n	1e92 <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    1eac:	4628      	mov	r0, r5
    1eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1eb2:	460d      	mov	r5, r1
}
    1eb4:	4628      	mov	r0, r5
    1eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    1eba:	4615      	mov	r5, r2
    1ebc:	e7f6      	b.n	1eac <Print::write(unsigned char const*, unsigned int)+0x38>
    1ebe:	bf00      	nop
    1ec0:	00001189 	.word	0x00001189

00001ec4 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    1ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    1ec8:	688c      	ldr	r4, [r1, #8]
    1eca:	b08a      	sub	sp, #40	; 0x28
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    1ecc:	b1dc      	cbz	r4, 1f06 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    1ece:	2500      	movs	r5, #0
    1ed0:	4688      	mov	r8, r1
    1ed2:	4606      	mov	r6, r0
	size_t count = 0;
    1ed4:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    1ed6:	462b      	mov	r3, r5
    1ed8:	2221      	movs	r2, #33	; 0x21
    1eda:	a901      	add	r1, sp, #4
    1edc:	4640      	mov	r0, r8
    1ede:	f000 f9f3 	bl	22c8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    1ee2:	2c20      	cmp	r4, #32
    1ee4:	4622      	mov	r2, r4
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    1ee6:	6833      	ldr	r3, [r6, #0]
    1ee8:	bf28      	it	cs
    1eea:	2220      	movcs	r2, #32
    1eec:	a901      	add	r1, sp, #4
    1eee:	4630      	mov	r0, r6
    1ef0:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    1ef2:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    1ef4:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    1ef6:	4798      	blx	r3
    1ef8:	4407      	add	r7, r0
	while (len > 0) {
    1efa:	2c00      	cmp	r4, #0
    1efc:	d1eb      	bne.n	1ed6 <Print::print(String const&)+0x12>
	}
	return count;
}
    1efe:	4638      	mov	r0, r7
    1f00:	b00a      	add	sp, #40	; 0x28
    1f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    1f06:	4627      	mov	r7, r4
}
    1f08:	4638      	mov	r0, r7
    1f0a:	b00a      	add	sp, #40	; 0x28
    1f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001f10 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    1f10:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    1f12:	6803      	ldr	r3, [r0, #0]
{
    1f14:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    1f16:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    1f1a:	2202      	movs	r2, #2
    1f1c:	a901      	add	r1, sp, #4
    1f1e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    1f20:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    1f24:	4798      	blx	r3
}
    1f26:	b003      	add	sp, #12
    1f28:	f85d fb04 	ldr.w	pc, [sp], #4

00001f2c <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1f2c:	4b05      	ldr	r3, [pc, #20]	; (1f44 <_write+0x18>)
    1f2e:	2802      	cmp	r0, #2
    1f30:	bf88      	it	hi
    1f32:	4603      	movhi	r3, r0
{
    1f34:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1f36:	681c      	ldr	r4, [r3, #0]
    1f38:	4618      	mov	r0, r3
    1f3a:	6863      	ldr	r3, [r4, #4]
}
    1f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    1f40:	4718      	bx	r3
    1f42:	bf00      	nop
    1f44:	200010c0 	.word	0x200010c0

00001f48 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    1f48:	f001 bf5c 	b.w	3e04 <usb_serial_peekchar>

00001f4c <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    1f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    1f50:	2700      	movs	r7, #0
{
    1f52:	468b      	mov	fp, r1
    1f54:	4681      	mov	r9, r0
    1f56:	4692      	mov	sl, r2
	String str;
    1f58:	4639      	mov	r1, r7
    1f5a:	f103 38ff 	add.w	r8, r3, #4294967295
    1f5e:	4c17      	ldr	r4, [pc, #92]	; (1fbc <Stream::readStringUntil(char, unsigned int)+0x70>)
    1f60:	4e17      	ldr	r6, [pc, #92]	; (1fc0 <Stream::readStringUntil(char, unsigned int)+0x74>)
    1f62:	f000 f82f 	bl	1fc4 <String::String(char const*)>
	return systick_millis_count;
    1f66:	6825      	ldr	r5, [r4, #0]
    1f68:	e00b      	b.n	1f82 <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    1f6a:	f001 ffb1 	bl	3ed0 <usb_serial_getchar>
    if (c >= 0) return c;
    1f6e:	2800      	cmp	r0, #0
    1f70:	da10      	bge.n	1f94 <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    1f72:	f002 f851 	bl	4018 <yield>
    1f76:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    1f78:	f8db 2008 	ldr.w	r2, [fp, #8]
    1f7c:	1b5b      	subs	r3, r3, r5
    1f7e:	4293      	cmp	r3, r2
    1f80:	d215      	bcs.n	1fae <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    1f82:	f8db 3000 	ldr.w	r3, [fp]
    1f86:	695b      	ldr	r3, [r3, #20]
    1f88:	42b3      	cmp	r3, r6
    1f8a:	d0ee      	beq.n	1f6a <Stream::readStringUntil(char, unsigned int)+0x1e>
    1f8c:	4658      	mov	r0, fp
    1f8e:	4798      	blx	r3
    if (c >= 0) return c;
    1f90:	2800      	cmp	r0, #0
    1f92:	dbee      	blt.n	1f72 <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    1f94:	d008      	beq.n	1fa8 <Stream::readStringUntil(char, unsigned int)+0x5c>
    1f96:	4582      	cmp	sl, r0
    1f98:	d006      	beq.n	1fa8 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    1f9a:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    1f9c:	b2c1      	uxtb	r1, r0
    1f9e:	4648      	mov	r0, r9
    1fa0:	f000 f964 	bl	226c <String::append(char)>
	while (length < max || !max) {
    1fa4:	4547      	cmp	r7, r8
    1fa6:	d9de      	bls.n	1f66 <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    1fa8:	4648      	mov	r0, r9
    1faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    1fae:	2301      	movs	r3, #1
    1fb0:	4648      	mov	r0, r9
    1fb2:	f88b 300c 	strb.w	r3, [fp, #12]
    1fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fba:	bf00      	nop
    1fbc:	20002b3c 	.word	0x20002b3c
    1fc0:	00001185 	.word	0x00001185

00001fc4 <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1fc6:	2600      	movs	r6, #0
String::String(const char *cstr)
    1fc8:	4604      	mov	r4, r0
	capacity = 0;
    1fca:	e9c0 6600 	strd	r6, r6, [r0]
	len = 0;
    1fce:	6086      	str	r6, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    1fd0:	b129      	cbz	r1, 1fde <String::String(char const*)+0x1a>
    1fd2:	4608      	mov	r0, r1
    1fd4:	460d      	mov	r5, r1
    1fd6:	f005 fa13 	bl	7400 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    1fda:	4607      	mov	r7, r0
    1fdc:	b908      	cbnz	r0, 1fe2 <String::String(char const*)+0x1e>
}
    1fde:	4620      	mov	r0, r4
    1fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1fe2:	3001      	adds	r0, #1
    1fe4:	f002 fd4a 	bl	4a7c <malloc>
	if (newbuffer) {
    1fe8:	2800      	cmp	r0, #0
    1fea:	d0f8      	beq.n	1fde <String::String(char const*)+0x1a>
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
    1fec:	4629      	mov	r1, r5
		if (len == 0) buffer[0] = 0;
    1fee:	7006      	strb	r6, [r0, #0]
		buffer = newbuffer;
    1ff0:	6020      	str	r0, [r4, #0]
	len = length;
    1ff2:	e9c4 7701 	strd	r7, r7, [r4, #4]
	strcpy(buffer, cstr);
    1ff6:	f005 f9a1 	bl	733c <strcpy>
}
    1ffa:	4620      	mov	r0, r4
    1ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ffe:	bf00      	nop

00002000 <String::String(String const&)>:
String::String(const String &value)
    2000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    2002:	4288      	cmp	r0, r1
	buffer = NULL;
    2004:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    2008:	4604      	mov	r4, r0
	len = 0;
    200a:	6085      	str	r5, [r0, #8]
	capacity = 0;
    200c:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    2010:	d002      	beq.n	2018 <String::String(String const&)+0x18>
    2012:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    2014:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    2016:	b90e      	cbnz	r6, 201c <String::String(String const&)+0x1c>
}
    2018:	4620      	mov	r0, r4
    201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    201c:	1c70      	adds	r0, r6, #1
    201e:	f002 fd2d 	bl	4a7c <malloc>
	if (newbuffer) {
    2022:	2800      	cmp	r0, #0
    2024:	d0f8      	beq.n	2018 <String::String(String const&)+0x18>
	strcpy(buffer, cstr);
    2026:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    2028:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    202a:	6020      	str	r0, [r4, #0]
	len = length;
    202c:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    2030:	f005 f984 	bl	733c <strcpy>
}
    2034:	4620      	mov	r0, r4
    2036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002038 <String::String(String&&)>:
	buffer = NULL;
    2038:	2300      	movs	r3, #0
	if (&rhs == this) return;
    203a:	4288      	cmp	r0, r1
	capacity = 0;
    203c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    2040:	6083      	str	r3, [r0, #8]
	if (&rhs == this) return;
    2042:	d00c      	beq.n	205e <String::String(String&&)+0x26>
String::String(String &&rval)
    2044:	b410      	push	{r4}
	capacity = rhs.capacity;
    2046:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    204a:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    204e:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    2052:	688a      	ldr	r2, [r1, #8]
}
    2054:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    2058:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    205a:	6082      	str	r2, [r0, #8]
}
    205c:	4770      	bx	lr
    205e:	4770      	bx	lr

00002060 <String::~String()>:
String::~String()
    2060:	b510      	push	{r4, lr}
    2062:	4604      	mov	r4, r0
	free(buffer);
    2064:	6800      	ldr	r0, [r0, #0]
    2066:	f002 fd11 	bl	4a8c <free>
}
    206a:	4620      	mov	r0, r4
    206c:	bd10      	pop	{r4, pc}
    206e:	bf00      	nop

00002070 <String::copy(char const*, unsigned int)>:
{
    2070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2072:	4604      	mov	r4, r0
	if (length == 0) {
    2074:	4615      	mov	r5, r2
    2076:	b932      	cbnz	r2, 2086 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    2078:	6803      	ldr	r3, [r0, #0]
    207a:	b103      	cbz	r3, 207e <String::copy(char const*, unsigned int)+0xe>
    207c:	701a      	strb	r2, [r3, #0]
		len = 0;
    207e:	2300      	movs	r3, #0
}
    2080:	4620      	mov	r0, r4
		len = 0;
    2082:	60a3      	str	r3, [r4, #8]
}
    2084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    2086:	6843      	ldr	r3, [r0, #4]
    2088:	460e      	mov	r6, r1
    208a:	429a      	cmp	r2, r3
    208c:	d91c      	bls.n	20c8 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    208e:	1c51      	adds	r1, r2, #1
    2090:	6800      	ldr	r0, [r0, #0]
    2092:	f002 ffbf 	bl	5014 <realloc>
	if (newbuffer) {
    2096:	4607      	mov	r7, r0
    2098:	b160      	cbz	r0, 20b4 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    209a:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    209c:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    20a0:	b90b      	cbnz	r3, 20a6 <String::copy(char const*, unsigned int)+0x36>
    20a2:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    20a4:	6827      	ldr	r7, [r4, #0]
    20a6:	4631      	mov	r1, r6
    20a8:	4638      	mov	r0, r7
	len = length;
    20aa:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    20ac:	f005 f946 	bl	733c <strcpy>
}
    20b0:	4620      	mov	r0, r4
    20b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    20b4:	6820      	ldr	r0, [r4, #0]
    20b6:	b110      	cbz	r0, 20be <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    20b8:	f002 fce8 	bl	4a8c <free>
			buffer = NULL;
    20bc:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    20be:	2300      	movs	r3, #0
}
    20c0:	4620      	mov	r0, r4
		len = capacity = 0;
    20c2:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    20c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    20c8:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    20ca:	4631      	mov	r1, r6
	len = length;
    20cc:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    20ce:	4638      	mov	r0, r7
    20d0:	f005 f934 	bl	733c <strcpy>
	return *this;
    20d4:	e7ec      	b.n	20b0 <String::copy(char const*, unsigned int)+0x40>
    20d6:	bf00      	nop

000020d8 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    20d8:	b510      	push	{r4, lr}
	buffer = NULL;
    20da:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    20dc:	b08a      	sub	sp, #40	; 0x28
    20de:	4604      	mov	r4, r0
	itoa(value, buf, base);
    20e0:	4608      	mov	r0, r1
    20e2:	a901      	add	r1, sp, #4
	len = 0;
    20e4:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    20e6:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    20ea:	f002 fcb1 	bl	4a50 <itoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    20ee:	a801      	add	r0, sp, #4
    20f0:	f005 f986 	bl	7400 <strlen>
    20f4:	a901      	add	r1, sp, #4
    20f6:	4602      	mov	r2, r0
    20f8:	4620      	mov	r0, r4
    20fa:	f7ff ffb9 	bl	2070 <String::copy(char const*, unsigned int)>
}
    20fe:	4620      	mov	r0, r4
    2100:	b00a      	add	sp, #40	; 0x28
    2102:	bd10      	pop	{r4, pc}

00002104 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    2104:	b510      	push	{r4, lr}
	buffer = NULL;
    2106:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    2108:	b08a      	sub	sp, #40	; 0x28
    210a:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    210c:	4608      	mov	r0, r1
    210e:	a901      	add	r1, sp, #4
	len = 0;
    2110:	60a3      	str	r3, [r4, #8]
	capacity = 0;
    2112:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    2116:	f000 fc27 	bl	2968 <ultoa>
		copy(cstr, strlen(cstr));
    211a:	a801      	add	r0, sp, #4
    211c:	f005 f970 	bl	7400 <strlen>
    2120:	a901      	add	r1, sp, #4
    2122:	4602      	mov	r2, r0
    2124:	4620      	mov	r0, r4
    2126:	f7ff ffa3 	bl	2070 <String::copy(char const*, unsigned int)>
}
    212a:	4620      	mov	r0, r4
    212c:	b00a      	add	sp, #40	; 0x28
    212e:	bd10      	pop	{r4, pc}

00002130 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    2130:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    2132:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    2134:	4604      	mov	r4, r0
    2136:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    2138:	1c88      	adds	r0, r1, #2
	len = 0;
    213a:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    213c:	466a      	mov	r2, sp
	capacity = 0;
    213e:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    2142:	f000 fc43 	bl	29cc <dtostrf>
	if (cstr) {
    2146:	4605      	mov	r5, r0
    2148:	b148      	cbz	r0, 215e <String::String(float, unsigned char)+0x2e>
		copy(cstr, strlen(cstr));
    214a:	f005 f959 	bl	7400 <strlen>
    214e:	4629      	mov	r1, r5
    2150:	4602      	mov	r2, r0
    2152:	4620      	mov	r0, r4
    2154:	f7ff ff8c 	bl	2070 <String::copy(char const*, unsigned int)>
}
    2158:	4620      	mov	r0, r4
    215a:	b00b      	add	sp, #44	; 0x2c
    215c:	bd30      	pop	{r4, r5, pc}
	} else {
		len = 0;
    215e:	60a0      	str	r0, [r4, #8]
}
    2160:	4620      	mov	r0, r4
    2162:	b00b      	add	sp, #44	; 0x2c
    2164:	bd30      	pop	{r4, r5, pc}
    2166:	bf00      	nop

00002168 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    2168:	4281      	cmp	r1, r0
    216a:	d003      	beq.n	2174 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    216c:	688a      	ldr	r2, [r1, #8]
    216e:	6809      	ldr	r1, [r1, #0]
    2170:	f7ff bf7e 	b.w	2070 <String::copy(char const*, unsigned int)>
}
    2174:	4770      	bx	lr
    2176:	bf00      	nop

00002178 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    2178:	4288      	cmp	r0, r1
{
    217a:	b538      	push	{r3, r4, r5, lr}
    217c:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    217e:	d00e      	beq.n	219e <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    2180:	6800      	ldr	r0, [r0, #0]
    2182:	460c      	mov	r4, r1
    2184:	b108      	cbz	r0, 218a <String::operator=(String&&)+0x12>
    2186:	f002 fc81 	bl	4a8c <free>
	len = rhs.len;
    218a:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    218c:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    218e:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    2192:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    2194:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    2198:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    219c:	60a3      	str	r3, [r4, #8]
}
    219e:	4628      	mov	r0, r5
    21a0:	bd38      	pop	{r3, r4, r5, pc}
    21a2:	bf00      	nop

000021a4 <String::operator=(char const*)>:
{
    21a4:	b538      	push	{r3, r4, r5, lr}
    21a6:	4605      	mov	r5, r0
	if (cstr) {
    21a8:	460c      	mov	r4, r1
    21aa:	b149      	cbz	r1, 21c0 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    21ac:	4608      	mov	r0, r1
    21ae:	f005 f927 	bl	7400 <strlen>
    21b2:	4621      	mov	r1, r4
    21b4:	4602      	mov	r2, r0
    21b6:	4628      	mov	r0, r5
    21b8:	f7ff ff5a 	bl	2070 <String::copy(char const*, unsigned int)>
	}
	return *this;
}
    21bc:	4628      	mov	r0, r5
    21be:	bd38      	pop	{r3, r4, r5, pc}
    21c0:	4628      	mov	r0, r5
		len = 0;
    21c2:	60a9      	str	r1, [r5, #8]
}
    21c4:	bd38      	pop	{r3, r4, r5, pc}
    21c6:	bf00      	nop

000021c8 <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
    21c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21cc:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    21ce:	6800      	ldr	r0, [r0, #0]
{
    21d0:	460d      	mov	r5, r1
    21d2:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    21d4:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    21d6:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    21d8:	d809      	bhi.n	21ee <String::append(char const*, unsigned int)+0x26>
    21da:	18c2      	adds	r2, r0, r3
    21dc:	4291      	cmp	r1, r2
    21de:	d206      	bcs.n	21ee <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    21e0:	1a0f      	subs	r7, r1, r0
		self = true;
    21e2:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
    21e6:	b936      	cbnz	r6, 21f6 <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
    21e8:	4620      	mov	r0, r4
    21ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    21ee:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    21f2:	2e00      	cmp	r6, #0
    21f4:	d0f8      	beq.n	21e8 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    21f6:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    21fa:	6862      	ldr	r2, [r4, #4]
    21fc:	4590      	cmp	r8, r2
    21fe:	d90c      	bls.n	221a <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2200:	f108 0101 	add.w	r1, r8, #1
    2204:	f002 ff06 	bl	5014 <realloc>
	if (newbuffer) {
    2208:	2800      	cmp	r0, #0
    220a:	d0ed      	beq.n	21e8 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    220c:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    220e:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    2212:	b913      	cbnz	r3, 221a <String::append(char const*, unsigned int)+0x52>
    2214:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    2216:	6820      	ldr	r0, [r4, #0]
    2218:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    221a:	f1b9 0f00 	cmp.w	r9, #0
    221e:	d108      	bne.n	2232 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    2220:	4629      	mov	r1, r5
    2222:	4418      	add	r0, r3
    2224:	f005 f88a 	bl	733c <strcpy>
}
    2228:	4620      	mov	r0, r4
	len = newlen;
    222a:	f8c4 8008 	str.w	r8, [r4, #8]
}
    222e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    2232:	4632      	mov	r2, r6
    2234:	19c1      	adds	r1, r0, r7
    2236:	4418      	add	r0, r3
    2238:	f000 fafa 	bl	2830 <memcpy>
		buffer[newlen] = 0;
    223c:	6823      	ldr	r3, [r4, #0]
    223e:	2200      	movs	r2, #0
    2240:	f803 2008 	strb.w	r2, [r3, r8]
    2244:	e7f0      	b.n	2228 <String::append(char const*, unsigned int)+0x60>
    2246:	bf00      	nop

00002248 <String::append(String const&)>:
	return append(s.buffer, s.len);
    2248:	688a      	ldr	r2, [r1, #8]
    224a:	6809      	ldr	r1, [r1, #0]
    224c:	f7ff bfbc 	b.w	21c8 <String::append(char const*, unsigned int)>

00002250 <String::append(char const*)>:

String & String::append(const char *cstr)
{
    2250:	b538      	push	{r3, r4, r5, lr}
    2252:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    2254:	b141      	cbz	r1, 2268 <String::append(char const*)+0x18>
    2256:	460c      	mov	r4, r1
    2258:	4608      	mov	r0, r1
    225a:	f005 f8d1 	bl	7400 <strlen>
    225e:	4602      	mov	r2, r0
    2260:	4621      	mov	r1, r4
    2262:	4628      	mov	r0, r5
    2264:	f7ff ffb0 	bl	21c8 <String::append(char const*, unsigned int)>
	return *this;
}
    2268:	4628      	mov	r0, r5
    226a:	bd38      	pop	{r3, r4, r5, pc}

0000226c <String::append(char)>:

String & String::append(char c)
{
    226c:	b510      	push	{r4, lr}
    226e:	b082      	sub	sp, #8
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    2270:	2300      	movs	r3, #0
{
    2272:	4604      	mov	r4, r0
	append(buf, 1);
    2274:	2201      	movs	r2, #1
	buf[0] = c;
    2276:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    227a:	a901      	add	r1, sp, #4
	buf[1] = 0;
    227c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    2280:	f7ff ffa2 	bl	21c8 <String::append(char const*, unsigned int)>
	return *this;
}
    2284:	4620      	mov	r0, r4
    2286:	b002      	add	sp, #8
    2288:	bd10      	pop	{r4, pc}
    228a:	bf00      	nop

0000228c <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    228c:	b510      	push	{r4, lr}
    228e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    2290:	688a      	ldr	r2, [r1, #8]
    2292:	6809      	ldr	r1, [r1, #0]
    2294:	f7ff ff98 	bl	21c8 <String::append(char const*, unsigned int)>
	return a;
}
    2298:	4620      	mov	r0, r4
    229a:	bd10      	pop	{r4, pc}

0000229c <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    229c:	6882      	ldr	r2, [r0, #8]
{
    229e:	b508      	push	{r3, lr}
    22a0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    22a2:	b13a      	cbz	r2, 22b4 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    22a4:	b161      	cbz	r1, 22c0 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    22a6:	6800      	ldr	r0, [r0, #0]
    22a8:	f004 fede 	bl	7068 <strcmp>
    22ac:	fab0 f080 	clz	r0, r0
    22b0:	0940      	lsrs	r0, r0, #5
}
    22b2:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    22b4:	b131      	cbz	r1, 22c4 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    22b6:	7818      	ldrb	r0, [r3, #0]
    22b8:	fab0 f080 	clz	r0, r0
    22bc:	0940      	lsrs	r0, r0, #5
}
    22be:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    22c0:	6803      	ldr	r3, [r0, #0]
    22c2:	e7f8      	b.n	22b6 <String::equals(char const*) const+0x1a>
    22c4:	2001      	movs	r0, #1
}
    22c6:	bd08      	pop	{r3, pc}

000022c8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    22c8:	b1c2      	cbz	r2, 22fc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    22ca:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    22cc:	fab1 f681 	clz	r6, r1
    22d0:	460c      	mov	r4, r1
    22d2:	0976      	lsrs	r6, r6, #5
    22d4:	b119      	cbz	r1, 22de <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    22d6:	6885      	ldr	r5, [r0, #8]
    22d8:	429d      	cmp	r5, r3
    22da:	d801      	bhi.n	22e0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    22dc:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    22de:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    22e0:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    22e2:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    22e6:	6801      	ldr	r1, [r0, #0]
    22e8:	4620      	mov	r0, r4
    22ea:	4565      	cmp	r5, ip
    22ec:	4419      	add	r1, r3
    22ee:	bf28      	it	cs
    22f0:	4665      	movcs	r5, ip
    22f2:	462a      	mov	r2, r5
    22f4:	f004 fbca 	bl	6a8c <strncpy>
	buf[n] = 0;
    22f8:	5566      	strb	r6, [r4, r5]
}
    22fa:	bd70      	pop	{r4, r5, r6, pc}
    22fc:	4770      	bx	lr
    22fe:	bf00      	nop

00002300 <String::indexOf(String const&) const>:
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    2300:	6883      	ldr	r3, [r0, #8]
    2302:	b143      	cbz	r3, 2316 <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2304:	6809      	ldr	r1, [r1, #0]
{
    2306:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2308:	6804      	ldr	r4, [r0, #0]
    230a:	4620      	mov	r0, r4
    230c:	f004 fd50 	bl	6db0 <strstr>
	if (found == NULL) return -1;
    2310:	b120      	cbz	r0, 231c <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    2312:	1b00      	subs	r0, r0, r4
}
    2314:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    2316:	f04f 30ff 	mov.w	r0, #4294967295
}
    231a:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    231c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2320:	bd10      	pop	{r4, pc}
    2322:	bf00      	nop

00002324 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    2324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    2328:	688f      	ldr	r7, [r1, #8]
{
    232a:	460e      	mov	r6, r1
    232c:	4605      	mov	r5, r0
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    232e:	4297      	cmp	r7, r2
    2330:	d202      	bcs.n	2338 <String::substring(unsigned int) const+0x14>
    2332:	4613      	mov	r3, r2
    2334:	463a      	mov	r2, r7
    2336:	461f      	mov	r7, r3
	buffer = NULL;
    2338:	2300      	movs	r3, #0
	len = 0;
    233a:	60ab      	str	r3, [r5, #8]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    233c:	68b0      	ldr	r0, [r6, #8]
    233e:	4290      	cmp	r0, r2
	capacity = 0;
    2340:	e9c5 3300 	strd	r3, r3, [r5]
	if (left > len) return out;
    2344:	d314      	bcc.n	2370 <String::substring(unsigned int) const+0x4c>
	if (right > len) right = len;
    2346:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    2348:	6831      	ldr	r1, [r6, #0]
    234a:	bf28      	it	cs
    234c:	4607      	movcs	r7, r0
    234e:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    2352:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    2354:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    2356:	189c      	adds	r4, r3, r2
    2358:	d00d      	beq.n	2376 <String::substring(unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    235a:	4620      	mov	r0, r4
    235c:	f005 f850 	bl	7400 <strlen>
    2360:	4621      	mov	r1, r4
    2362:	4602      	mov	r2, r0
    2364:	4628      	mov	r0, r5
    2366:	f7ff fe83 	bl	2070 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    236a:	6833      	ldr	r3, [r6, #0]
    236c:	f803 8007 	strb.w	r8, [r3, r7]
}
    2370:	4628      	mov	r0, r5
    2372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    2376:	60ac      	str	r4, [r5, #8]
    2378:	e7f8      	b.n	236c <String::substring(unsigned int) const+0x48>
    237a:	bf00      	nop

0000237c <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    237c:	429a      	cmp	r2, r3
{
    237e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2382:	4605      	mov	r5, r0
    2384:	460e      	mov	r6, r1
	if (left > right) {
    2386:	d902      	bls.n	238e <String::substring(unsigned int, unsigned int) const+0x12>
    2388:	4611      	mov	r1, r2
    238a:	461a      	mov	r2, r3
    238c:	460b      	mov	r3, r1
	buffer = NULL;
    238e:	2100      	movs	r1, #0
	len = 0;
    2390:	60a9      	str	r1, [r5, #8]
	if (left > len) return out;
    2392:	68b7      	ldr	r7, [r6, #8]
    2394:	4297      	cmp	r7, r2
	capacity = 0;
    2396:	e9c5 1100 	strd	r1, r1, [r5]
	if (left > len) return out;
    239a:	d314      	bcc.n	23c6 <String::substring(unsigned int, unsigned int) const+0x4a>
	if (right > len) right = len;
    239c:	429f      	cmp	r7, r3
    239e:	bf28      	it	cs
    23a0:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    23a2:	6833      	ldr	r3, [r6, #0]
    23a4:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    23a8:	55d9      	strb	r1, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    23aa:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    23ac:	189c      	adds	r4, r3, r2
    23ae:	d00d      	beq.n	23cc <String::substring(unsigned int, unsigned int) const+0x50>
		copy(cstr, strlen(cstr));
    23b0:	4620      	mov	r0, r4
    23b2:	f005 f825 	bl	7400 <strlen>
    23b6:	4621      	mov	r1, r4
    23b8:	4602      	mov	r2, r0
    23ba:	4628      	mov	r0, r5
    23bc:	f7ff fe58 	bl	2070 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    23c0:	6833      	ldr	r3, [r6, #0]
    23c2:	f803 8007 	strb.w	r8, [r3, r7]
	return out;
}
    23c6:	4628      	mov	r0, r5
    23c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    23cc:	60ac      	str	r4, [r5, #8]
    23ce:	e7f8      	b.n	23c2 <String::substring(unsigned int, unsigned int) const+0x46>

000023d0 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    23d0:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    23d2:	6804      	ldr	r4, [r0, #0]
{
    23d4:	4605      	mov	r5, r0
	if (!buffer) return *this;
    23d6:	b144      	cbz	r4, 23ea <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    23d8:	7820      	ldrb	r0, [r4, #0]
    23da:	b130      	cbz	r0, 23ea <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    23dc:	f004 f8a8 	bl	6530 <tolower>
    23e0:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    23e2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    23e6:	2800      	cmp	r0, #0
    23e8:	d1f8      	bne.n	23dc <String::toLowerCase()+0xc>
	}
	return *this;
}
    23ea:	4628      	mov	r0, r5
    23ec:	bd38      	pop	{r3, r4, r5, pc}
    23ee:	bf00      	nop

000023f0 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    23f0:	6800      	ldr	r0, [r0, #0]
    23f2:	b108      	cbz	r0, 23f8 <String::toInt() const+0x8>
    23f4:	f002 bb28 	b.w	4a48 <atol>
	return 0;
}
    23f8:	4770      	bx	lr
    23fa:	bf00      	nop

000023fc <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    23fc:	6800      	ldr	r0, [r0, #0]
    23fe:	b110      	cbz	r0, 2406 <String::toFloat() const+0xa>
    2400:	2100      	movs	r1, #0
    2402:	f003 bf39 	b.w	6278 <strtof>
	return 0.0;
}
    2406:	ed9f 0a01 	vldr	s0, [pc, #4]	; 240c <String::toFloat() const+0x10>
    240a:	4770      	bx	lr
    240c:	00000000 	.word	0x00000000

00002410 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    2410:	49a2      	ldr	r1, [pc, #648]	; (269c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    2412:	4ba3      	ldr	r3, [pc, #652]	; (26a0 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    2414:	4288      	cmp	r0, r1
{
    2416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    241a:	4ca2      	ldr	r4, [pc, #648]	; (26a4 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    241c:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    241e:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    2420:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    2424:	d91b      	bls.n	245e <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    2426:	4ba0      	ldr	r3, [pc, #640]	; (26a8 <set_arm_clock+0x298>)
    2428:	4298      	cmp	r0, r3
    242a:	f240 8102 	bls.w	2632 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    242e:	1ac3      	subs	r3, r0, r3
    2430:	499e      	ldr	r1, [pc, #632]	; (26ac <set_arm_clock+0x29c>)
    2432:	0a1b      	lsrs	r3, r3, #8
    2434:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2438:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    243c:	09db      	lsrs	r3, r3, #7
    243e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2446:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    244a:	428b      	cmp	r3, r1
    244c:	bf28      	it	cs
    244e:	460b      	movcs	r3, r1
    2450:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    2454:	4b96      	ldr	r3, [pc, #600]	; (26b0 <set_arm_clock+0x2a0>)
    2456:	fba3 3707 	umull	r3, r7, r3, r7
    245a:	08ff      	lsrs	r7, r7, #3
    245c:	e004      	b.n	2468 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    245e:	4f95      	ldr	r7, [pc, #596]	; (26b4 <set_arm_clock+0x2a4>)
    2460:	42b8      	cmp	r0, r7
    2462:	bf8c      	ite	hi
    2464:	270e      	movhi	r7, #14
    2466:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2468:	498d      	ldr	r1, [pc, #564]	; (26a0 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    246a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    246e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    2472:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    2474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    2478:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    247c:	d20c      	bcs.n	2498 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    247e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    2482:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    2486:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    248a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    248e:	680b      	ldr	r3, [r1, #0]
    2490:	2b00      	cmp	r3, #0
    2492:	dafc      	bge.n	248e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2494:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    2498:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    249c:	d124      	bne.n	24e8 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    249e:	4986      	ldr	r1, [pc, #536]	; (26b8 <set_arm_clock+0x2a8>)
    24a0:	690c      	ldr	r4, [r1, #16]
    24a2:	4986      	ldr	r1, [pc, #536]	; (26bc <set_arm_clock+0x2ac>)
    24a4:	43a1      	bics	r1, r4
    24a6:	f000 80ea 	beq.w	267e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    24aa:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    24ae:	4634      	mov	r4, r6
    24b0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    24b4:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    24b8:	d004      	beq.n	24c4 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    24ba:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    24be:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    24c0:	4b77      	ldr	r3, [pc, #476]	; (26a0 <set_arm_clock+0x290>)
    24c2:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    24c4:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    24c8:	d007      	beq.n	24da <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    24ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    24ce:	4974      	ldr	r1, [pc, #464]	; (26a0 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    24d0:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    24d2:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    24d4:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    24d6:	071a      	lsls	r2, r3, #28
    24d8:	d4fc      	bmi.n	24d4 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    24da:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    24de:	4a70      	ldr	r2, [pc, #448]	; (26a0 <set_arm_clock+0x290>)
    24e0:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    24e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
    24e4:	069b      	lsls	r3, r3, #26
    24e6:	d4fc      	bmi.n	24e2 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    24e8:	4c75      	ldr	r4, [pc, #468]	; (26c0 <set_arm_clock+0x2b0>)
    24ea:	42a0      	cmp	r0, r4
    24ec:	f200 80ce 	bhi.w	268c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    24f0:	f04f 0c01 	mov.w	ip, #1
    24f4:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    24f6:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    24f8:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    24fc:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    2500:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2504:	42a2      	cmp	r2, r4
    2506:	d818      	bhi.n	253a <set_arm_clock+0x12a>
		if (div_arm < 8) {
    2508:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    250c:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    2510:	f040 808d 	bne.w	262e <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    2514:	f1bc 0f04 	cmp.w	ip, #4
    2518:	f200 8091 	bhi.w	263e <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    251c:	180a      	adds	r2, r1, r0
    251e:	42a2      	cmp	r2, r4
    2520:	f200 80a4 	bhi.w	266c <set_arm_clock+0x25c>
    2524:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    2528:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    252a:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    252e:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    2532:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2536:	42a2      	cmp	r2, r4
    2538:	d9e6      	bls.n	2508 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    253a:	f10c 31ff 	add.w	r1, ip, #4294967295
    253e:	028c      	lsls	r4, r1, #10
    2540:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2544:	485f      	ldr	r0, [pc, #380]	; (26c4 <set_arm_clock+0x2b4>)
    2546:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    2548:	4a5f      	ldr	r2, [pc, #380]	; (26c8 <set_arm_clock+0x2b8>)
    254a:	4290      	cmp	r0, r2
    254c:	d97f      	bls.n	264e <set_arm_clock+0x23e>
    254e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 26f4 <set_arm_clock+0x2e4>
    2552:	226c      	movs	r2, #108	; 0x6c
    2554:	485d      	ldr	r0, [pc, #372]	; (26cc <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2556:	4d58      	ldr	r5, [pc, #352]	; (26b8 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    2558:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    255c:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    2560:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    2564:	f8df c190 	ldr.w	ip, [pc, #400]	; 26f8 <set_arm_clock+0x2e8>
    2568:	ea0e 0c0c 	and.w	ip, lr, ip
    256c:	45d4      	cmp	ip, sl
    256e:	d009      	beq.n	2584 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    2570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    2574:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    2578:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    257c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    257e:	682a      	ldr	r2, [r5, #0]
    2580:	2a00      	cmp	r2, #0
    2582:	dafc      	bge.n	257e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    2584:	4a46      	ldr	r2, [pc, #280]	; (26a0 <set_arm_clock+0x290>)
    2586:	6915      	ldr	r5, [r2, #16]
    2588:	f005 0507 	and.w	r5, r5, #7
    258c:	429d      	cmp	r5, r3
    258e:	d003      	beq.n	2598 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    2590:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    2592:	6c93      	ldr	r3, [r2, #72]	; 0x48
    2594:	03dd      	lsls	r5, r3, #15
    2596:	d4fc      	bmi.n	2592 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2598:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    259c:	d009      	beq.n	25b2 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    259e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    25a2:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    25a6:	4a3e      	ldr	r2, [pc, #248]	; (26a0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    25a8:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    25aa:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    25ac:	6c93      	ldr	r3, [r2, #72]	; 0x48
    25ae:	0799      	lsls	r1, r3, #30
    25b0:	d4fc      	bmi.n	25ac <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25b2:	4947      	ldr	r1, [pc, #284]	; (26d0 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    25b4:	4a47      	ldr	r2, [pc, #284]	; (26d4 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25b6:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    25b8:	4291      	cmp	r1, r2
    25ba:	d83c      	bhi.n	2636 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    25bc:	4b46      	ldr	r3, [pc, #280]	; (26d8 <set_arm_clock+0x2c8>)
    25be:	09c9      	lsrs	r1, r1, #7
    25c0:	fba3 3101 	umull	r3, r1, r3, r1
    25c4:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    25c6:	1e4b      	subs	r3, r1, #1
    25c8:	021b      	lsls	r3, r3, #8
    25ca:	ea86 0203 	eor.w	r2, r6, r3
    25ce:	f412 7f40 	tst.w	r2, #768	; 0x300
    25d2:	d006      	beq.n	25e2 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    25d4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    25d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    25dc:	4a30      	ldr	r2, [pc, #192]	; (26a0 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    25de:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    25e0:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    25e2:	4a2f      	ldr	r2, [pc, #188]	; (26a0 <set_arm_clock+0x290>)
    25e4:	6953      	ldr	r3, [r2, #20]
    25e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    25ea:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    25ec:	6c93      	ldr	r3, [r2, #72]	; 0x48
    25ee:	069b      	lsls	r3, r3, #26
    25f0:	d4fc      	bmi.n	25ec <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    25f2:	4b3a      	ldr	r3, [pc, #232]	; (26dc <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    25f4:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    25f6:	fba3 2300 	umull	r2, r3, r3, r0
    25fa:	f04f 32ff 	mov.w	r2, #4294967295
    25fe:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    2602:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2606:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    260a:	4a35      	ldr	r2, [pc, #212]	; (26e0 <set_arm_clock+0x2d0>)
    260c:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    260e:	4a35      	ldr	r2, [pc, #212]	; (26e4 <set_arm_clock+0x2d4>)
    2610:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    2612:	4a35      	ldr	r2, [pc, #212]	; (26e8 <set_arm_clock+0x2d8>)
    2614:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    2616:	d208      	bcs.n	262a <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    2618:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    261c:	4a21      	ldr	r2, [pc, #132]	; (26a4 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    261e:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    2622:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    2624:	6813      	ldr	r3, [r2, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	dafc      	bge.n	2624 <set_arm_clock+0x214>
	}

	return frequency;
}
    262a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    262e:	4673      	mov	r3, lr
    2630:	e762      	b.n	24f8 <set_arm_clock+0xe8>
    2632:	2712      	movs	r7, #18
    2634:	e718      	b.n	2468 <set_arm_clock+0x58>
    2636:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    263a:	2104      	movs	r1, #4
    263c:	e7c5      	b.n	25ca <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    263e:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2642:	4820      	ldr	r0, [pc, #128]	; (26c4 <set_arm_clock+0x2b4>)
    2644:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    2646:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2648:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    264a:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    264e:	4a27      	ldr	r2, [pc, #156]	; (26ec <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2650:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 26fc <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    2654:	fba2 2000 	umull	r2, r0, r2, r0
    2658:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    265a:	4825      	ldr	r0, [pc, #148]	; (26f0 <set_arm_clock+0x2e0>)
    265c:	2a36      	cmp	r2, #54	; 0x36
    265e:	bf38      	it	cc
    2660:	2236      	movcc	r2, #54	; 0x36
    2662:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    2666:	ea42 0a0a 	orr.w	sl, r2, sl
    266a:	e774      	b.n	2556 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    266c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    2670:	2300      	movs	r3, #0
    2672:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    2676:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    267a:	46ac      	mov	ip, r5
    267c:	e762      	b.n	2544 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    267e:	461d      	mov	r5, r3
    2680:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    2684:	4611      	mov	r1, r2
    2686:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    268a:	e713      	b.n	24b4 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    268c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    268e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    2692:	4602      	mov	r2, r0
    2694:	4631      	mov	r1, r6
    2696:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    2698:	46e6      	mov	lr, ip
    269a:	e753      	b.n	2544 <set_arm_clock+0x134>
    269c:	1f78a400 	.word	0x1f78a400
    26a0:	400fc000 	.word	0x400fc000
    26a4:	40080000 	.word	0x40080000
    26a8:	23c34600 	.word	0x23c34600
    26ac:	004cb223 	.word	0x004cb223
    26b0:	51eb851f 	.word	0x51eb851f
    26b4:	016e3600 	.word	0x016e3600
    26b8:	400d8000 	.word	0x400d8000
    26bc:	80003040 	.word	0x80003040
    26c0:	269fb1ff 	.word	0x269fb1ff
    26c4:	005b8d80 	.word	0x005b8d80
    26c8:	4df67eff 	.word	0x4df67eff
    26cc:	4d3f6400 	.word	0x4d3f6400
    26d0:	08f0d17f 	.word	0x08f0d17f
    26d4:	2cb4177f 	.word	0x2cb4177f
    26d8:	00e5109f 	.word	0x00e5109f
    26dc:	431bde83 	.word	0x431bde83
    26e0:	200010bc 	.word	0x200010bc
    26e4:	200010b8 	.word	0x200010b8
    26e8:	20002b34 	.word	0x20002b34
    26ec:	165e9f81 	.word	0x165e9f81
    26f0:	00b71b00 	.word	0x00b71b00
    26f4:	8000206c 	.word	0x8000206c
    26f8:	8001307f 	.word	0x8001307f
    26fc:	80002000 	.word	0x80002000

00002700 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    2700:	b900      	cbnz	r0, 2704 <delay+0x4>
    2702:	4770      	bx	lr
{
    2704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    2708:	2101      	movs	r1, #1
    270a:	4681      	mov	r9, r0
    270c:	4c21      	ldr	r4, [pc, #132]	; (2794 <delay+0x94>)
    270e:	4d22      	ldr	r5, [pc, #136]	; (2798 <delay+0x98>)
    2710:	4e22      	ldr	r6, [pc, #136]	; (279c <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2712:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    2716:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    2718:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    271a:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    271e:	2b00      	cmp	r3, #0
    2720:	d1f7      	bne.n	2712 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2722:	491f      	ldr	r1, [pc, #124]	; (27a0 <delay+0xa0>)
    2724:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    2726:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    272a:	f8df a078 	ldr.w	sl, [pc, #120]	; 27a4 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    272e:	1a1b      	subs	r3, r3, r0
    2730:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    2732:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2736:	f8da 2000 	ldr.w	r2, [sl]
    273a:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    273e:	455a      	cmp	r2, fp
    2740:	bf94      	ite	ls
    2742:	4490      	addls	r8, r2
    2744:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    2746:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    274a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    274c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    274e:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    2752:	2b00      	cmp	r3, #0
    2754:	d1f7      	bne.n	2746 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    2756:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2758:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    275c:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    275e:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    2762:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    2766:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    276a:	bf94      	ite	ls
    276c:	4462      	addls	r2, ip
    276e:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    2772:	eba2 0208 	sub.w	r2, r2, r8
    2776:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    277a:	d306      	bcc.n	278a <delay+0x8a>
			if (--msec == 0) return;
    277c:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    2780:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    2784:	d1df      	bne.n	2746 <delay+0x46>
}
    2786:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    278a:	f001 fc45 	bl	4018 <yield>
		while ((micros() - start) >= 1000) {
    278e:	4904      	ldr	r1, [pc, #16]	; (27a0 <delay+0xa0>)
    2790:	e7d9      	b.n	2746 <delay+0x46>
    2792:	bf00      	nop
    2794:	20002b40 	.word	0x20002b40
    2798:	20002b3c 	.word	0x20002b3c
    279c:	20002b38 	.word	0x20002b38
    27a0:	e0001000 	.word	0xe0001000
    27a4:	20002b34 	.word	0x20002b34

000027a8 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    27a8:	2836      	cmp	r0, #54	; 0x36
    27aa:	d816      	bhi.n	27da <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    27ac:	0102      	lsls	r2, r0, #4
    27ae:	4b10      	ldr	r3, [pc, #64]	; (27f0 <digitalWrite+0x48>)
    27b0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    27b4:	589b      	ldr	r3, [r3, r2]
{
    27b6:	b410      	push	{r4}
	mask = p->mask;
    27b8:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    27ba:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    27bc:	4214      	tst	r4, r2
    27be:	d005      	beq.n	27cc <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    27c0:	b961      	cbnz	r1, 27dc <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    27c2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    27c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    27ca:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    27cc:	6883      	ldr	r3, [r0, #8]
		if (val) {
    27ce:	b151      	cbz	r1, 27e6 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    27d0:	4a08      	ldr	r2, [pc, #32]	; (27f4 <digitalWrite+0x4c>)
}
    27d2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    27d6:	601a      	str	r2, [r3, #0]
}
    27d8:	4770      	bx	lr
    27da:	4770      	bx	lr
    27dc:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    27e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    27e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    27e6:	4a04      	ldr	r2, [pc, #16]	; (27f8 <digitalWrite+0x50>)
}
    27e8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    27ec:	601a      	str	r2, [r3, #0]
}
    27ee:	4770      	bx	lr
    27f0:	20000ae0 	.word	0x20000ae0
    27f4:	0001f038 	.word	0x0001f038
    27f8:	00013038 	.word	0x00013038

000027fc <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    27fc:	2836      	cmp	r0, #54	; 0x36
    27fe:	d80b      	bhi.n	2818 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <digitalRead+0x20>)
    2802:	0102      	lsls	r2, r0, #4
    2804:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    2808:	589a      	ldr	r2, [r3, r2]
    280a:	68c3      	ldr	r3, [r0, #12]
    280c:	6892      	ldr	r2, [r2, #8]
    280e:	421a      	tst	r2, r3
    2810:	bf14      	ite	ne
    2812:	2001      	movne	r0, #1
    2814:	2000      	moveq	r0, #0
    2816:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    2818:	2000      	movs	r0, #0
}
    281a:	4770      	bx	lr
    281c:	20000ae0 	.word	0x20000ae0

00002820 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    2820:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    2822:	f7fd fd65 	bl	2f0 <setup>
	while (1) {
		loop();
    2826:	f7fe f9d9 	bl	bdc <loop>
		yield();
    282a:	f001 fbf5 	bl	4018 <yield>
	while (1) {
    282e:	e7fa      	b.n	2826 <main+0x6>

00002830 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2830:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2832:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2836:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    283a:	d16d      	bne.n	2918 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    283c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    283e:	d341      	bcc.n	28c4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2840:	f851 3b04 	ldr.w	r3, [r1], #4
    2844:	f840 3b04 	str.w	r3, [r0], #4
    2848:	f851 3b04 	ldr.w	r3, [r1], #4
    284c:	f840 3b04 	str.w	r3, [r0], #4
    2850:	f851 3b04 	ldr.w	r3, [r1], #4
    2854:	f840 3b04 	str.w	r3, [r0], #4
    2858:	f851 3b04 	ldr.w	r3, [r1], #4
    285c:	f840 3b04 	str.w	r3, [r0], #4
    2860:	f851 3b04 	ldr.w	r3, [r1], #4
    2864:	f840 3b04 	str.w	r3, [r0], #4
    2868:	f851 3b04 	ldr.w	r3, [r1], #4
    286c:	f840 3b04 	str.w	r3, [r0], #4
    2870:	f851 3b04 	ldr.w	r3, [r1], #4
    2874:	f840 3b04 	str.w	r3, [r0], #4
    2878:	f851 3b04 	ldr.w	r3, [r1], #4
    287c:	f840 3b04 	str.w	r3, [r0], #4
    2880:	f851 3b04 	ldr.w	r3, [r1], #4
    2884:	f840 3b04 	str.w	r3, [r0], #4
    2888:	f851 3b04 	ldr.w	r3, [r1], #4
    288c:	f840 3b04 	str.w	r3, [r0], #4
    2890:	f851 3b04 	ldr.w	r3, [r1], #4
    2894:	f840 3b04 	str.w	r3, [r0], #4
    2898:	f851 3b04 	ldr.w	r3, [r1], #4
    289c:	f840 3b04 	str.w	r3, [r0], #4
    28a0:	f851 3b04 	ldr.w	r3, [r1], #4
    28a4:	f840 3b04 	str.w	r3, [r0], #4
    28a8:	f851 3b04 	ldr.w	r3, [r1], #4
    28ac:	f840 3b04 	str.w	r3, [r0], #4
    28b0:	f851 3b04 	ldr.w	r3, [r1], #4
    28b4:	f840 3b04 	str.w	r3, [r0], #4
    28b8:	f851 3b04 	ldr.w	r3, [r1], #4
    28bc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    28c0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    28c2:	d2bd      	bcs.n	2840 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    28c4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    28c6:	d311      	bcc.n	28ec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    28c8:	f851 3b04 	ldr.w	r3, [r1], #4
    28cc:	f840 3b04 	str.w	r3, [r0], #4
    28d0:	f851 3b04 	ldr.w	r3, [r1], #4
    28d4:	f840 3b04 	str.w	r3, [r0], #4
    28d8:	f851 3b04 	ldr.w	r3, [r1], #4
    28dc:	f840 3b04 	str.w	r3, [r0], #4
    28e0:	f851 3b04 	ldr.w	r3, [r1], #4
    28e4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    28e8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    28ea:	d2ed      	bcs.n	28c8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    28ec:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    28ee:	d305      	bcc.n	28fc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    28f0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    28f4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    28f8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    28fa:	d2f9      	bcs.n	28f0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    28fc:	3204      	adds	r2, #4
	beq	.Ldone
    28fe:	d008      	beq.n	2912 <memcpy+0xe2>

	lsls	r2, r2, #31
    2900:	07d2      	lsls	r2, r2, #31
	itt ne
    2902:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2904:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2908:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    290c:	d301      	bcc.n	2912 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    290e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2910:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2912:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2914:	4770      	bx	lr
    2916:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2918:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    291a:	d313      	bcc.n	2944 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    291c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    291e:	d08d      	beq.n	283c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2920:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2924:	d08a      	beq.n	283c <memcpy+0xc>

	rsb	r3, #4
    2926:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    292a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    292c:	07db      	lsls	r3, r3, #31
	itt ne
    292e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2930:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2934:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2938:	d380      	bcc.n	283c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    293a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    293e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2942:	e77b      	b.n	283c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2944:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    2946:	d3d9      	bcc.n	28fc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2948:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    294a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    294e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2952:	d2f9      	bcs.n	2948 <memcpy+0x118>

	ldrb	r3, [r1]
    2954:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2956:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2958:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    295a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    295c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    295e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2960:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2962:	4770      	bx	lr

00002964 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    2964:	f002 b892 	b.w	4a8c <free>

00002968 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    2968:	f101 3cff 	add.w	ip, r1, #4294967295
{
    296c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    296e:	4666      	mov	r6, ip
	int i=0, j;
    2970:	2400      	movs	r4, #0
    2972:	e000      	b.n	2976 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2974:	3401      	adds	r4, #1
		digit = val % radix;
    2976:	fbb0 f5f2 	udiv	r5, r0, r2
    297a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    297e:	2b09      	cmp	r3, #9
    2980:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2984:	f103 0330 	add.w	r3, r3, #48	; 0x30
    2988:	fa5f fe8e 	uxtb.w	lr, lr
    298c:	bf98      	it	ls
    298e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    2992:	4290      	cmp	r0, r2
		val /= radix;
    2994:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2996:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    299a:	d2eb      	bcs.n	2974 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    299c:	1c63      	adds	r3, r4, #1
    299e:	2200      	movs	r2, #0
    29a0:	18c8      	adds	r0, r1, r3
    29a2:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    29a4:	b17c      	cbz	r4, 29c6 <ultoa+0x5e>
		t = buf[j];
    29a6:	4662      	mov	r2, ip
    29a8:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    29ac:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    29b0:	eba1 030c 	sub.w	r3, r1, ip
    29b4:	3202      	adds	r2, #2
		buf[j] = buf[i];
    29b6:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    29ba:	3b01      	subs	r3, #1
    29bc:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    29be:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    29c0:	4423      	add	r3, r4
    29c2:	429a      	cmp	r2, r3
    29c4:	dbef      	blt.n	29a6 <ultoa+0x3e>
	}
	return buf;
}
    29c6:	4608      	mov	r0, r1
    29c8:	bd70      	pop	{r4, r5, r6, pc}
    29ca:	bf00      	nop

000029cc <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    29cc:	eeb4 0a40 	vcmp.f32	s0, s0
{
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    29d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    29d8:	4616      	mov	r6, r2
	int awidth = abs(width);
    29da:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    29de:	4607      	mov	r7, r0
    29e0:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    29e4:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    29e8:	eeb0 8a40 	vmov.f32	s16, s0
    29ec:	b085      	sub	sp, #20
	if (isnanf(val)) {
    29ee:	f180 8148 	bvs.w	2c82 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    29f2:	eef0 7ac0 	vabs.f32	s15, s0
    29f6:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 2d0c <dtostrf+0x340>
    29fa:	eef4 7a47 	vcmp.f32	s15, s14
    29fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a02:	dd29      	ble.n	2a58 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    2a04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    2a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a0c:	f100 80ed 	bmi.w	2bea <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2a10:	2a03      	cmp	r2, #3
    2a12:	f340 8091 	ble.w	2b38 <dtostrf+0x16c>
    2a16:	2303      	movs	r3, #3
		if (width<0) {
    2a18:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2a1a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    2a1e:	f2c0 8085 	blt.w	2b2c <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    2a22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    2a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2a2a:	f100 816a 	bmi.w	2d02 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2a2e:	2149      	movs	r1, #73	; 0x49
    2a30:	234e      	movs	r3, #78	; 0x4e
    2a32:	2046      	movs	r0, #70	; 0x46
    2a34:	1cf4      	adds	r4, r6, #3
    2a36:	7031      	strb	r1, [r6, #0]
    2a38:	70b0      	strb	r0, [r6, #2]
    2a3a:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    2a3c:	b122      	cbz	r2, 2a48 <dtostrf+0x7c>
			*buf++ = ' ';
    2a3e:	4620      	mov	r0, r4
    2a40:	2120      	movs	r1, #32
    2a42:	4414      	add	r4, r2
    2a44:	f003 ff24 	bl	6890 <memset>
			awidth--;
		}
		*buf = 0;
    2a48:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    2a4a:	4620      	mov	r0, r4
		*buf = 0;
    2a4c:	7023      	strb	r3, [r4, #0]
}
    2a4e:	b005      	add	sp, #20
    2a50:	ecbd 8b02 	vpop	{d8}
    2a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    2a58:	4689      	mov	r9, r1
    2a5a:	460d      	mov	r5, r1
    2a5c:	aa02      	add	r2, sp, #8
    2a5e:	a901      	add	r1, sp, #4
    2a60:	4648      	mov	r0, r9
    2a62:	f003 fd5f 	bl	6524 <fcvtf>
	if (precision == 0 && decpt == 0) {
    2a66:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    2a6a:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    2a6c:	ea59 030a 	orrs.w	r3, r9, sl
    2a70:	d172      	bne.n	2b58 <dtostrf+0x18c>
		decpt++;
    2a72:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    2a74:	7802      	ldrb	r2, [r0, #0]
    2a76:	4ca6      	ldr	r4, [pc, #664]	; (2d10 <dtostrf+0x344>)
		decpt++;
    2a78:	469a      	mov	sl, r3
    2a7a:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    2a7c:	4ba5      	ldr	r3, [pc, #660]	; (2d14 <dtostrf+0x348>)
		decpt++;
    2a7e:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    2a80:	2a34      	cmp	r2, #52	; 0x34
    2a82:	bf88      	it	hi
    2a84:	461c      	movhi	r4, r3
	if (sign) reqd++;
    2a86:	9b02      	ldr	r3, [sp, #8]
    2a88:	2b00      	cmp	r3, #0
    2a8a:	d07d      	beq.n	2b88 <dtostrf+0x1bc>
    2a8c:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    2a90:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    2a94:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    2a98:	f1bb 0f00 	cmp.w	fp, #0
    2a9c:	f340 80a1 	ble.w	2be2 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    2aa0:	465a      	mov	r2, fp
    2aa2:	2120      	movs	r1, #32
    2aa4:	4630      	mov	r0, r6
		e += pad;
    2aa6:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    2aa8:	f003 fef2 	bl	6890 <memset>
    2aac:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    2ab0:	222d      	movs	r2, #45	; 0x2d
    2ab2:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    2ab6:	f1ba 0f00 	cmp.w	sl, #0
    2aba:	d177      	bne.n	2bac <dtostrf+0x1e0>
    2abc:	f1b9 0f00 	cmp.w	r9, #0
    2ac0:	d006      	beq.n	2ad0 <dtostrf+0x104>
		*p++ = '0';
    2ac2:	461a      	mov	r2, r3
    2ac4:	2130      	movs	r1, #48	; 0x30
    2ac6:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    2aca:	212e      	movs	r1, #46	; 0x2e
    2acc:	7059      	strb	r1, [r3, #1]
    2ace:	4613      	mov	r3, r2
	while (p < e) {
    2ad0:	42ab      	cmp	r3, r5
    2ad2:	d21f      	bcs.n	2b14 <dtostrf+0x148>
		*p++ = *s++;
    2ad4:	46a4      	mov	ip, r4
    2ad6:	4619      	mov	r1, r3
    2ad8:	f81c 2b01 	ldrb.w	r2, [ip], #1
    2adc:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    2ae0:	42a9      	cmp	r1, r5
    2ae2:	d018      	beq.n	2b16 <dtostrf+0x14a>
    2ae4:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    2ae6:	202e      	movs	r0, #46	; 0x2e
    2ae8:	3c01      	subs	r4, #1
    2aea:	e00b      	b.n	2b04 <dtostrf+0x138>
    2aec:	7058      	strb	r0, [r3, #1]
    2aee:	3302      	adds	r3, #2
		if (p == e) break;
    2af0:	3c01      	subs	r4, #1
	while (p < e) {
    2af2:	42ab      	cmp	r3, r5
		*p++ = *s++;
    2af4:	4619      	mov	r1, r3
	while (p < e) {
    2af6:	d20d      	bcs.n	2b14 <dtostrf+0x148>
		*p++ = *s++;
    2af8:	f81c 2b01 	ldrb.w	r2, [ip], #1
    2afc:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    2b00:	42a9      	cmp	r1, r5
    2b02:	d008      	beq.n	2b16 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    2b04:	9401      	str	r4, [sp, #4]
    2b06:	2c00      	cmp	r4, #0
    2b08:	d0f0      	beq.n	2aec <dtostrf+0x120>
    2b0a:	460b      	mov	r3, r1
		if (p == e) break;
    2b0c:	3c01      	subs	r4, #1
	while (p < e) {
    2b0e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    2b10:	4619      	mov	r1, r3
	while (p < e) {
    2b12:	d3f1      	bcc.n	2af8 <dtostrf+0x12c>
    2b14:	461d      	mov	r5, r3
	if (width < 0) {
    2b16:	2f00      	cmp	r7, #0
    2b18:	db6b      	blt.n	2bf2 <dtostrf+0x226>
	return buf;
    2b1a:	4634      	mov	r4, r6
	*p = 0;
    2b1c:	2300      	movs	r3, #0
}
    2b1e:	4620      	mov	r0, r4
	*p = 0;
    2b20:	702b      	strb	r3, [r5, #0]
}
    2b22:	b005      	add	sp, #20
    2b24:	ecbd 8b02 	vpop	{d8}
    2b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    2b2c:	b122      	cbz	r2, 2b38 <dtostrf+0x16c>
				*buf++ = ' ';
    2b2e:	4630      	mov	r0, r6
    2b30:	2120      	movs	r1, #32
    2b32:	4416      	add	r6, r2
    2b34:	f003 feac 	bl	6890 <memset>
		if (val<0) *buf++ = '-';
    2b38:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    2b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b40:	f140 80bd 	bpl.w	2cbe <dtostrf+0x2f2>
    2b44:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2b46:	2249      	movs	r2, #73	; 0x49
    2b48:	234e      	movs	r3, #78	; 0x4e
    2b4a:	2046      	movs	r0, #70	; 0x46
    2b4c:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    2b4e:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2b50:	70f0      	strb	r0, [r6, #3]
    2b52:	7072      	strb	r2, [r6, #1]
    2b54:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2b56:	e777      	b.n	2a48 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    2b58:	f1ca 0300 	rsb	r3, sl, #0
    2b5c:	4599      	cmp	r9, r3
    2b5e:	da57      	bge.n	2c10 <dtostrf+0x244>
		decpt = -precision;
    2b60:	f04f 0801 	mov.w	r8, #1
    2b64:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    2b68:	4c69      	ldr	r4, [pc, #420]	; (2d10 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    2b6a:	45c2      	cmp	sl, r8
		decpt = -precision;
    2b6c:	4640      	mov	r0, r8
    2b6e:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    2b72:	bfb8      	it	lt
    2b74:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    2b78:	f1ba 0f00 	cmp.w	sl, #0
    2b7c:	d152      	bne.n	2c24 <dtostrf+0x258>
	if (sign) reqd++;
    2b7e:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    2b80:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    2b84:	2b00      	cmp	r3, #0
    2b86:	d181      	bne.n	2a8c <dtostrf+0xc0>
	pad = width - reqd;
    2b88:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    2b8c:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    2b90:	f1bb 0f00 	cmp.w	fp, #0
    2b94:	dd27      	ble.n	2be6 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    2b96:	465a      	mov	r2, fp
    2b98:	2120      	movs	r1, #32
    2b9a:	4630      	mov	r0, r6
		e += pad;
    2b9c:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    2b9e:	f003 fe77 	bl	6890 <memset>
    2ba2:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    2ba6:	f1ba 0f00 	cmp.w	sl, #0
    2baa:	d087      	beq.n	2abc <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    2bac:	f1ba 0f00 	cmp.w	sl, #0
    2bb0:	da8e      	bge.n	2ad0 <dtostrf+0x104>
    2bb2:	f1b9 0f00 	cmp.w	r9, #0
    2bb6:	d08b      	beq.n	2ad0 <dtostrf+0x104>
		*p++ = '0';
    2bb8:	4618      	mov	r0, r3
		*p++ = '.';
    2bba:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    2bbc:	2130      	movs	r1, #48	; 0x30
    2bbe:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    2bc2:	705a      	strb	r2, [r3, #1]
    2bc4:	4602      	mov	r2, r0
    2bc6:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    2bc8:	3301      	adds	r3, #1
			*p++ = '0';
    2bca:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    2bce:	d1fb      	bne.n	2bc8 <dtostrf+0x1fc>
			*p++ = '0';
    2bd0:	f1ba 0f00 	cmp.w	sl, #0
    2bd4:	9301      	str	r3, [sp, #4]
    2bd6:	f1ca 0300 	rsb	r3, sl, #0
    2bda:	bfa8      	it	ge
    2bdc:	2301      	movge	r3, #1
    2bde:	4403      	add	r3, r0
    2be0:	e776      	b.n	2ad0 <dtostrf+0x104>
	if (pad > 0) {
    2be2:	4633      	mov	r3, r6
    2be4:	e764      	b.n	2ab0 <dtostrf+0xe4>
    2be6:	4633      	mov	r3, r6
    2be8:	e765      	b.n	2ab6 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2bea:	2a04      	cmp	r2, #4
    2bec:	ddaa      	ble.n	2b44 <dtostrf+0x178>
    2bee:	2304      	movs	r3, #4
    2bf0:	e712      	b.n	2a18 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    2bf2:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    2bf4:	f1b8 0f00 	cmp.w	r8, #0
    2bf8:	ea6f 0208 	mvn.w	r2, r8
    2bfc:	da8d      	bge.n	2b1a <dtostrf+0x14e>
    2bfe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    2c02:	2120      	movs	r1, #32
    2c04:	4628      	mov	r0, r5
    2c06:	3201      	adds	r2, #1
    2c08:	4415      	add	r5, r2
    2c0a:	f003 fe41 	bl	6890 <memset>
    2c0e:	e784      	b.n	2b1a <dtostrf+0x14e>
	reqd = strlen(s);
    2c10:	f004 fbf6 	bl	7400 <strlen>
    2c14:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    2c16:	45c2      	cmp	sl, r8
    2c18:	bfb8      	it	lt
    2c1a:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    2c1e:	f1ba 0f00 	cmp.w	sl, #0
    2c22:	d0ac      	beq.n	2b7e <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    2c24:	f1ba 0f00 	cmp.w	sl, #0
    2c28:	f6bf af2d 	bge.w	2a86 <dtostrf+0xba>
    2c2c:	f1b9 0f00 	cmp.w	r9, #0
    2c30:	f43f af29 	beq.w	2a86 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    2c34:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    2c38:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    2c3c:	4283      	cmp	r3, r0
    2c3e:	f4bf af22 	bcs.w	2a86 <dtostrf+0xba>
			while (newPrecision > 0) {
    2c42:	f1b9 0f00 	cmp.w	r9, #0
    2c46:	dd05      	ble.n	2c54 <dtostrf+0x288>
				val *= 10.0f;
    2c48:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    2c4c:	3d01      	subs	r5, #1
				val *= 10.0f;
    2c4e:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    2c52:	d1fb      	bne.n	2c4c <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    2c54:	aa02      	add	r2, sp, #8
    2c56:	eeb0 0a48 	vmov.f32	s0, s16
    2c5a:	4628      	mov	r0, r5
    2c5c:	a903      	add	r1, sp, #12
    2c5e:	f003 fc61 	bl	6524 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    2c62:	f8dd a004 	ldr.w	sl, [sp, #4]
    2c66:	9b03      	ldr	r3, [sp, #12]
    2c68:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    2c6c:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    2c6e:	eba3 030a 	sub.w	r3, r3, sl
    2c72:	4293      	cmp	r3, r2
    2c74:	f47f af07 	bne.w	2a86 <dtostrf+0xba>
    2c78:	f10a 0a01 	add.w	sl, sl, #1
    2c7c:	f8cd a004 	str.w	sl, [sp, #4]
    2c80:	e701      	b.n	2a86 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    2c82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    2c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c8a:	bf4c      	ite	mi
    2c8c:	2304      	movmi	r3, #4
    2c8e:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2c90:	4293      	cmp	r3, r2
    2c92:	da22      	bge.n	2cda <dtostrf+0x30e>
		if (width<0) {
    2c94:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    2c96:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    2c9a:	db18      	blt.n	2cce <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2c9c:	ee10 3a10 	vmov	r3, s0
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	da02      	bge.n	2caa <dtostrf+0x2de>
    2ca4:	232d      	movs	r3, #45	; 0x2d
    2ca6:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2caa:	234e      	movs	r3, #78	; 0x4e
    2cac:	2141      	movs	r1, #65	; 0x41
    2cae:	1cf4      	adds	r4, r6, #3
    2cb0:	7033      	strb	r3, [r6, #0]
    2cb2:	7071      	strb	r1, [r6, #1]
    2cb4:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2cb6:	2a00      	cmp	r2, #0
    2cb8:	f47f aec1 	bne.w	2a3e <dtostrf+0x72>
    2cbc:	e6c4      	b.n	2a48 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    2cbe:	2149      	movs	r1, #73	; 0x49
    2cc0:	224e      	movs	r2, #78	; 0x4e
    2cc2:	2346      	movs	r3, #70	; 0x46
    2cc4:	1cf4      	adds	r4, r6, #3
    2cc6:	7031      	strb	r1, [r6, #0]
    2cc8:	7072      	strb	r2, [r6, #1]
    2cca:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2ccc:	e6bc      	b.n	2a48 <dtostrf+0x7c>
			while (awidth) {
    2cce:	b122      	cbz	r2, 2cda <dtostrf+0x30e>
				*buf++ = ' ';
    2cd0:	4630      	mov	r0, r6
    2cd2:	2120      	movs	r1, #32
    2cd4:	4416      	add	r6, r2
    2cd6:	f003 fddb 	bl	6890 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2cda:	ee18 3a10 	vmov	r3, s16
    2cde:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2ce0:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2ce4:	db05      	blt.n	2cf2 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2ce6:	2241      	movs	r2, #65	; 0x41
    2ce8:	1cf4      	adds	r4, r6, #3
    2cea:	7033      	strb	r3, [r6, #0]
    2cec:	7072      	strb	r2, [r6, #1]
    2cee:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    2cf0:	e6aa      	b.n	2a48 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2cf2:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2cf4:	2241      	movs	r2, #65	; 0x41
    2cf6:	1d34      	adds	r4, r6, #4
    2cf8:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    2cfa:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    2cfc:	70b2      	strb	r2, [r6, #2]
    2cfe:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    2d00:	e6a2      	b.n	2a48 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    2d02:	232d      	movs	r3, #45	; 0x2d
    2d04:	f806 3b01 	strb.w	r3, [r6], #1
    2d08:	e691      	b.n	2a2e <dtostrf+0x62>
    2d0a:	bf00      	nop
    2d0c:	7f7fffff 	.word	0x7f7fffff
    2d10:	20000e50 	.word	0x20000e50
    2d14:	20000e54 	.word	0x20000e54

00002d18 <unused_interrupt_vector>:
	__disable_irq();
    2d18:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    2d1a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    2d1e:	4c52      	ldr	r4, [pc, #328]	; (2e68 <unused_interrupt_vector+0x150>)
    2d20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    2d24:	f01e 0f04 	tst.w	lr, #4
    2d28:	bf0c      	ite	eq
    2d2a:	f3ef 8208 	mrseq	r2, MSP
    2d2e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    2d32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    2d36:	4e4d      	ldr	r6, [pc, #308]	; (2e6c <unused_interrupt_vector+0x154>)
	while (p < end) {
    2d38:	4d4d      	ldr	r5, [pc, #308]	; (2e70 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    2d3a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    2d3e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    2d42:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    2d46:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    2d4a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    2d4e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    2d52:	6993      	ldr	r3, [r2, #24]
    2d54:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    2d58:	69d3      	ldr	r3, [r2, #28]
    2d5a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    2d5e:	f000 f8d1 	bl	2f04 <tempmonGetTemp>
    2d62:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    2d66:	f001 fdef 	bl	4948 <rtc_get>
	info->len = sizeof(*info) / 4;
    2d6a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    2d6c:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    2d70:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    2d74:	460b      	mov	r3, r1
    2d76:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2d7a:	493e      	ldr	r1, [pc, #248]	; (2e74 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    2d7c:	1d30      	adds	r0, r6, #4
    2d7e:	405a      	eors	r2, r3
    2d80:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    2d82:	f002 0301 	and.w	r3, r2, #1
    2d86:	3c01      	subs	r4, #1
    2d88:	fb01 f303 	mul.w	r3, r1, r3
    2d8c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    2d90:	d1f7      	bne.n	2d82 <unused_interrupt_vector+0x6a>
	while (p < end) {
    2d92:	42a8      	cmp	r0, r5
    2d94:	d002      	beq.n	2d9c <unused_interrupt_vector+0x84>
		crc ^= *p++;
    2d96:	6873      	ldr	r3, [r6, #4]
    2d98:	4606      	mov	r6, r0
    2d9a:	e7ef      	b.n	2d7c <unused_interrupt_vector+0x64>
	info->crc = crc;
    2d9c:	4b32      	ldr	r3, [pc, #200]	; (2e68 <unused_interrupt_vector+0x150>)
    2d9e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2da2:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2da6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2daa:	4930      	ldr	r1, [pc, #192]	; (2e6c <unused_interrupt_vector+0x154>)
    2dac:	4a32      	ldr	r2, [pc, #200]	; (2e78 <unused_interrupt_vector+0x160>)
    2dae:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    2db2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    2db6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    2dba:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2dbe:	4a2f      	ldr	r2, [pc, #188]	; (2e7c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    2dc0:	2502      	movs	r5, #2
    2dc2:	482f      	ldr	r0, [pc, #188]	; (2e80 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2dc4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2dc6:	492f      	ldr	r1, [pc, #188]	; (2e84 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    2dc8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    2dcc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    2dce:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2dd0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2dd2:	482d      	ldr	r0, [pc, #180]	; (2e88 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    2dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2ddc:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2dde:	680b      	ldr	r3, [r1, #0]
    2de0:	4283      	cmp	r3, r0
    2de2:	d83d      	bhi.n	2e60 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    2de4:	4d26      	ldr	r5, [pc, #152]	; (2e80 <unused_interrupt_vector+0x168>)
    2de6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    2de8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2dec:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    2df0:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2df2:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    2df4:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    2df8:	4924      	ldr	r1, [pc, #144]	; (2e8c <unused_interrupt_vector+0x174>)
    2dfa:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    2dfe:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    2e02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    2e06:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    2e0a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    2e0e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    2e12:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    2e16:	e001      	b.n	2e1c <unused_interrupt_vector+0x104>
		usb_isr();
    2e18:	f000 f966 	bl	30e8 <usb_isr>
		if (PIT_TFLG0) {
    2e1c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2e20:	2b00      	cmp	r3, #0
    2e22:	d0f9      	beq.n	2e18 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    2e24:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    2e26:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    2e2a:	2c4f      	cmp	r4, #79	; 0x4f
    2e2c:	d9f4      	bls.n	2e18 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2e2e:	4b18      	ldr	r3, [pc, #96]	; (2e90 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    2e30:	2002      	movs	r0, #2
    2e32:	4918      	ldr	r1, [pc, #96]	; (2e94 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2e34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    2e38:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    2e3c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2e3e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    2e42:	b93b      	cbnz	r3, 2e54 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    2e44:	4814      	ldr	r0, [pc, #80]	; (2e98 <unused_interrupt_vector+0x180>)
    2e46:	4915      	ldr	r1, [pc, #84]	; (2e9c <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2e48:	4a0d      	ldr	r2, [pc, #52]	; (2e80 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    2e4a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    2e4c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0fa      	beq.n	2e4a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    2e54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2e58:	4a11      	ldr	r2, [pc, #68]	; (2ea0 <unused_interrupt_vector+0x188>)
    2e5a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    2e5e:	e7fe      	b.n	2e5e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    2e60:	f7ff fad6 	bl	2410 <set_arm_clock>
    2e64:	e7be      	b.n	2de4 <unused_interrupt_vector+0xcc>
    2e66:	bf00      	nop
    2e68:	2027ff00 	.word	0x2027ff00
    2e6c:	2027ff80 	.word	0x2027ff80
    2e70:	2027ffa8 	.word	0x2027ffa8
    2e74:	edb88320 	.word	0xedb88320
    2e78:	2027ffa0 	.word	0x2027ffa0
    2e7c:	400fc000 	.word	0x400fc000
    2e80:	40084000 	.word	0x40084000
    2e84:	200010bc 	.word	0x200010bc
    2e88:	0bcd3d80 	.word	0x0bcd3d80
    2e8c:	00249f00 	.word	0x00249f00
    2e90:	400d9000 	.word	0x400d9000
    2e94:	402e0000 	.word	0x402e0000
    2e98:	400f8000 	.word	0x400f8000
    2e9c:	0bad00f1 	.word	0x0bad00f1
    2ea0:	05fa0004 	.word	0x05fa0004

00002ea4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    2ea4:	490a      	ldr	r1, [pc, #40]	; (2ed0 <_sbrk+0x2c>)
    2ea6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    2ea8:	b138      	cbz	r0, 2eba <_sbrk+0x16>
{
    2eaa:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    2eac:	1813      	adds	r3, r2, r0
    2eae:	4809      	ldr	r0, [pc, #36]	; (2ed4 <_sbrk+0x30>)
    2eb0:	4283      	cmp	r3, r0
    2eb2:	d804      	bhi.n	2ebe <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    2eb4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    2eb6:	600b      	str	r3, [r1, #0]
}
    2eb8:	bd08      	pop	{r3, pc}
    2eba:	4610      	mov	r0, r2
    2ebc:	4770      	bx	lr
                        errno = ENOMEM;
    2ebe:	f004 f897 	bl	6ff0 <__errno>
    2ec2:	230c      	movs	r3, #12
                        return (void *)-1;
    2ec4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    2ec8:	6003      	str	r3, [r0, #0]
}
    2eca:	4610      	mov	r0, r2
    2ecc:	bd08      	pop	{r3, pc}
    2ece:	bf00      	nop
    2ed0:	20001134 	.word	0x20001134
    2ed4:	20280000 	.word	0x20280000

00002ed8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    2ed8:	2000      	movs	r0, #0
    2eda:	4770      	bx	lr

00002edc <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    2edc:	f04f 30ff 	mov.w	r0, #4294967295
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop

00002ee4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    2ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    2ee8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    2eea:	604b      	str	r3, [r1, #4]
}
    2eec:	4770      	bx	lr
    2eee:	bf00      	nop

00002ef0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    2ef0:	2001      	movs	r0, #1
    2ef2:	4770      	bx	lr

00002ef4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    2ef4:	f04f 30ff 	mov.w	r0, #4294967295
    2ef8:	4770      	bx	lr
    2efa:	bf00      	nop

00002efc <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    2efc:	bf30      	wfi
    2efe:	e7fd      	b.n	2efc <abort>

00002f00 <Panic_Temp_isr>:
  unused_interrupt_vector();
    2f00:	f7ff bf0a 	b.w	2d18 <unused_interrupt_vector>

00002f04 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    2f04:	4a12      	ldr	r2, [pc, #72]	; (2f50 <tempmonGetTemp+0x4c>)
    2f06:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    2f0a:	075b      	lsls	r3, r3, #29
    2f0c:	d5fb      	bpl.n	2f06 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2f0e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2f12:	4810      	ldr	r0, [pc, #64]	; (2f54 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2f14:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2f18:	490f      	ldr	r1, [pc, #60]	; (2f58 <tempmonGetTemp+0x54>)
    2f1a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    2f1e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    2f22:	ed91 6a00 	vldr	s12, [r1]
    2f26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2f2a:	4a0c      	ldr	r2, [pc, #48]	; (2f5c <tempmonGetTemp+0x58>)
    2f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2f30:	4b0b      	ldr	r3, [pc, #44]	; (2f60 <tempmonGetTemp+0x5c>)
    2f32:	edd2 6a00 	vldr	s13, [r2]
    2f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2f3a:	ed93 7a00 	vldr	s14, [r3]
    2f3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    2f42:	ee67 7a86 	vmul.f32	s15, s15, s12
    2f46:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    2f4a:	ee37 0a40 	vsub.f32	s0, s14, s0
    2f4e:	4770      	bx	lr
    2f50:	400d8100 	.word	0x400d8100
    2f54:	20002b24 	.word	0x20002b24
    2f58:	20002b2c 	.word	0x20002b2c
    2f5c:	20002b30 	.word	0x20002b30
    2f60:	20002b28 	.word	0x20002b28

00002f64 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2f64:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    2f66:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    2f68:	b11b      	cbz	r3, 2f72 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2f6a:	6853      	ldr	r3, [r2, #4]
    2f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2f70:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    2f72:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2f74:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2f76:	b33c      	cbz	r4, 2fc8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2f78:	4b1a      	ldr	r3, [pc, #104]	; (2fe4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    2f7a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2f7c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    2f80:	420c      	tst	r4, r1
    2f82:	d11d      	bne.n	2fc0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2f84:	4e18      	ldr	r6, [pc, #96]	; (2fe8 <schedule_transfer+0x84>)
    2f86:	6877      	ldr	r7, [r6, #4]
    2f88:	e004      	b.n	2f94 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2f8a:	6874      	ldr	r4, [r6, #4]
    2f8c:	1be4      	subs	r4, r4, r7
    2f8e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    2f92:	d20b      	bcs.n	2fac <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2f94:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2f98:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    2f9c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2fa0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2fa4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    2fa8:	0464      	lsls	r4, r4, #17
    2faa:	d5ee      	bpl.n	2f8a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2fac:	400d      	ands	r5, r1
    2fae:	d107      	bne.n	2fc0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    2fb0:	4c0c      	ldr	r4, [pc, #48]	; (2fe4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    2fb2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    2fb6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    2fba:	430b      	orrs	r3, r1
    2fbc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    2fc0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2fc2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2fc4:	bcf0      	pop	{r4, r5, r6, r7}
    2fc6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    2fc8:	4d06      	ldr	r5, [pc, #24]	; (2fe4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    2fca:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    2fce:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    2fd2:	430b      	orrs	r3, r1
    2fd4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2fd8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    2fda:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2fdc:	b662      	cpsie	i
}
    2fde:	bcf0      	pop	{r4, r5, r6, r7}
    2fe0:	4770      	bx	lr
    2fe2:	bf00      	nop
    2fe4:	402e0000 	.word	0x402e0000
    2fe8:	e0001000 	.word	0xe0001000

00002fec <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2fec:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2fee:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    2ff0:	b19d      	cbz	r5, 301a <run_callbacks+0x2e>
    2ff2:	4606      	mov	r6, r0
    2ff4:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    2ff6:	2400      	movs	r4, #0
    2ff8:	e003      	b.n	3002 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2ffa:	6812      	ldr	r2, [r2, #0]
		count++;
    2ffc:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    2ffe:	2a01      	cmp	r2, #1
    3000:	d00c      	beq.n	301c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    3002:	6853      	ldr	r3, [r2, #4]
    3004:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    3008:	d0f7      	beq.n	2ffa <run_callbacks+0xe>
			ep->first_transfer = t;
    300a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    300c:	b12c      	cbz	r4, 301a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    300e:	4628      	mov	r0, r5
		ep->callback_function(first);
    3010:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    3012:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    3014:	4798      	blx	r3
	while (count) {
    3016:	3c01      	subs	r4, #1
    3018:	d1f9      	bne.n	300e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    301a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    301c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    3020:	e7f4      	b.n	300c <run_callbacks+0x20>
    3022:	bf00      	nop

00003024 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    3024:	b430      	push	{r4, r5}
	if (len > 0) {
    3026:	b9d9      	cbnz	r1, 3060 <endpoint0_transmit.constprop.0+0x3c>
    3028:	4c1f      	ldr	r4, [pc, #124]	; (30a8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    302a:	4b20      	ldr	r3, [pc, #128]	; (30ac <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    302c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    302e:	4a20      	ldr	r2, [pc, #128]	; (30b0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    3030:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3032:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    3036:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3038:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    303a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    303e:	2480      	movs	r4, #128	; 0x80
    3040:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3042:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    3046:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    304a:	481a      	ldr	r0, [pc, #104]	; (30b4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    304c:	432b      	orrs	r3, r5
    304e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    3052:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    3054:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3058:	2b00      	cmp	r3, #0
    305a:	d1fb      	bne.n	3054 <endpoint0_transmit.constprop.0+0x30>
}
    305c:	bc30      	pop	{r4, r5}
    305e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3060:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    3062:	4b15      	ldr	r3, [pc, #84]	; (30b8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    3064:	4c10      	ldr	r4, [pc, #64]	; (30a8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    3066:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3068:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    306c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    306e:	4a10      	ldr	r2, [pc, #64]	; (30b0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3070:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3072:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    3076:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3078:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    307a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    307e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3080:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3082:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3086:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    308a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    308c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    308e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    3090:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    3092:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    3096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    309a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    309e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    30a2:	2b00      	cmp	r3, #0
    30a4:	d1fb      	bne.n	309e <endpoint0_transmit.constprop.0+0x7a>
    30a6:	e7c0      	b.n	302a <endpoint0_transmit.constprop.0+0x6>
    30a8:	20000000 	.word	0x20000000
    30ac:	20001ac0 	.word	0x20001ac0
    30b0:	402e0000 	.word	0x402e0000
    30b4:	20002054 	.word	0x20002054
    30b8:	20001ae0 	.word	0x20001ae0

000030bc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    30bc:	4908      	ldr	r1, [pc, #32]	; (30e0 <usb_stop_sof_interrupts+0x24>)
    30be:	2201      	movs	r2, #1
    30c0:	780b      	ldrb	r3, [r1, #0]
    30c2:	fa02 f000 	lsl.w	r0, r2, r0
    30c6:	ea23 0000 	bic.w	r0, r3, r0
    30ca:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    30cc:	b930      	cbnz	r0, 30dc <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    30ce:	4a05      	ldr	r2, [pc, #20]	; (30e4 <usb_stop_sof_interrupts+0x28>)
    30d0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    30d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    30d8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    30dc:	4770      	bx	lr
    30de:	bf00      	nop
    30e0:	20002b66 	.word	0x20002b66
    30e4:	402e0000 	.word	0x402e0000

000030e8 <usb_isr>:
{
    30e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    30ec:	4c97      	ldr	r4, [pc, #604]	; (334c <usb_isr+0x264>)
{
    30ee:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    30f0:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    30f4:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    30f6:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    30fa:	d553      	bpl.n	31a4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    30fc:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3100:	2a00      	cmp	r2, #0
    3102:	d04a      	beq.n	319a <usb_isr+0xb2>
    3104:	4e92      	ldr	r6, [pc, #584]	; (3350 <usb_isr+0x268>)
    3106:	f8df a260 	ldr.w	sl, [pc, #608]	; 3368 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    310a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 3380 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    310e:	f8df b274 	ldr.w	fp, [pc, #628]	; 3384 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3112:	f8df 8274 	ldr.w	r8, [pc, #628]	; 3388 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    3116:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    311a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    311e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3122:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3126:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    312a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    312e:	049d      	lsls	r5, r3, #18
    3130:	d5f5      	bpl.n	311e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    3132:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    313a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    313e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3142:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    3146:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    314a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    314e:	d1fa      	bne.n	3146 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    3150:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    3152:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    3154:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    3158:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    315c:	f000 81cf 	beq.w	34fe <usb_isr+0x416>
    3160:	f200 80db 	bhi.w	331a <usb_isr+0x232>
    3164:	f240 3102 	movw	r1, #770	; 0x302
    3168:	428b      	cmp	r3, r1
    316a:	f000 81e7 	beq.w	353c <usb_isr+0x454>
    316e:	f200 809a 	bhi.w	32a6 <usb_isr+0x1be>
    3172:	2b82      	cmp	r3, #130	; 0x82
    3174:	f000 81cb 	beq.w	350e <usb_isr+0x426>
    3178:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    317c:	f040 808a 	bne.w	3294 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    3180:	f010 0f78 	tst.w	r0, #120	; 0x78
    3184:	b283      	uxth	r3, r0
    3186:	f000 8203 	beq.w	3590 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    318a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    318e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3192:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    3196:	2a00      	cmp	r2, #0
    3198:	d1bd      	bne.n	3116 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    319a:	4a6c      	ldr	r2, [pc, #432]	; (334c <usb_isr+0x264>)
    319c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    31a0:	2b00      	cmp	r3, #0
    31a2:	d142      	bne.n	322a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    31a4:	067e      	lsls	r6, r7, #25
    31a6:	d516      	bpl.n	31d6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    31a8:	4b68      	ldr	r3, [pc, #416]	; (334c <usb_isr+0x264>)
    31aa:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    31ae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    31b2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    31b6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    31ba:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    31be:	2c00      	cmp	r4, #0
    31c0:	d1fb      	bne.n	31ba <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    31c2:	f04f 32ff 	mov.w	r2, #4294967295
    31c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    31ca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    31ce:	f000 fd27 	bl	3c20 <usb_serial_reset>
		endpointN_notify_mask = 0;
    31d2:	4b60      	ldr	r3, [pc, #384]	; (3354 <usb_isr+0x26c>)
    31d4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    31d6:	01fc      	lsls	r4, r7, #7
    31d8:	d503      	bpl.n	31e2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    31da:	4b5f      	ldr	r3, [pc, #380]	; (3358 <usb_isr+0x270>)
    31dc:	681b      	ldr	r3, [r3, #0]
    31de:	b103      	cbz	r3, 31e2 <usb_isr+0xfa>
    31e0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    31e2:	01b8      	lsls	r0, r7, #6
    31e4:	d503      	bpl.n	31ee <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    31e6:	4b5d      	ldr	r3, [pc, #372]	; (335c <usb_isr+0x274>)
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	b103      	cbz	r3, 31ee <usb_isr+0x106>
    31ec:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    31ee:	0779      	lsls	r1, r7, #29
    31f0:	d508      	bpl.n	3204 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    31f2:	4b56      	ldr	r3, [pc, #344]	; (334c <usb_isr+0x264>)
    31f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    31f8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    31fc:	d047      	beq.n	328e <usb_isr+0x1a6>
			usb_high_speed = 1;
    31fe:	4b58      	ldr	r3, [pc, #352]	; (3360 <usb_isr+0x278>)
    3200:	2201      	movs	r2, #1
    3202:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    3204:	4b51      	ldr	r3, [pc, #324]	; (334c <usb_isr+0x264>)
    3206:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    320a:	061a      	lsls	r2, r3, #24
    320c:	d50a      	bpl.n	3224 <usb_isr+0x13c>
    320e:	063b      	lsls	r3, r7, #24
    3210:	d508      	bpl.n	3224 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    3212:	4a54      	ldr	r2, [pc, #336]	; (3364 <usb_isr+0x27c>)
    3214:	7813      	ldrb	r3, [r2, #0]
    3216:	b12b      	cbz	r3, 3224 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    3218:	3b01      	subs	r3, #1
    321a:	b2db      	uxtb	r3, r3
    321c:	7013      	strb	r3, [r2, #0]
    321e:	2b00      	cmp	r3, #0
    3220:	f000 8272 	beq.w	3708 <usb_isr+0x620>
}
    3224:	b003      	add	sp, #12
    3226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    322a:	494f      	ldr	r1, [pc, #316]	; (3368 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    322c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    3230:	6808      	ldr	r0, [r1, #0]
    3232:	4203      	tst	r3, r0
    3234:	f040 81d1 	bne.w	35da <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    3238:	4a46      	ldr	r2, [pc, #280]	; (3354 <usb_isr+0x26c>)
    323a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    323c:	401c      	ands	r4, r3
    323e:	d0b1      	beq.n	31a4 <usb_isr+0xbc>
				while (tx) {
    3240:	ea5f 4814 	movs.w	r8, r4, lsr #16
    3244:	d010      	beq.n	3268 <usb_isr+0x180>
    3246:	4e42      	ldr	r6, [pc, #264]	; (3350 <usb_isr+0x268>)
					tx &= ~(1<<p);
    3248:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    324c:	fa98 f5a8 	rbit	r5, r8
    3250:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    3254:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    3258:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    325c:	3040      	adds	r0, #64	; 0x40
    325e:	f7ff fec5 	bl	2fec <run_callbacks>
				while (tx) {
    3262:	ea38 0805 	bics.w	r8, r8, r5
    3266:	d1f1      	bne.n	324c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    3268:	b2a4      	uxth	r4, r4
				while(rx) {
    326a:	2c00      	cmp	r4, #0
    326c:	d09a      	beq.n	31a4 <usb_isr+0xbc>
    326e:	4e38      	ldr	r6, [pc, #224]	; (3350 <usb_isr+0x268>)
					rx &= ~(1<<p);
    3270:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    3274:	fa94 f5a4 	rbit	r5, r4
    3278:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    327c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    3280:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    3284:	f7ff feb2 	bl	2fec <run_callbacks>
				while(rx) {
    3288:	43ac      	bics	r4, r5
    328a:	d1f3      	bne.n	3274 <usb_isr+0x18c>
    328c:	e78a      	b.n	31a4 <usb_isr+0xbc>
			usb_high_speed = 0;
    328e:	4a34      	ldr	r2, [pc, #208]	; (3360 <usb_isr+0x278>)
    3290:	7013      	strb	r3, [r2, #0]
    3292:	e7b7      	b.n	3204 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    3294:	2b80      	cmp	r3, #128	; 0x80
    3296:	f47f af78 	bne.w	318a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    329a:	4834      	ldr	r0, [pc, #208]	; (336c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    329c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    329e:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    32a0:	f7ff fec0 	bl	3024 <endpoint0_transmit.constprop.0>
		return;
    32a4:	e775      	b.n	3192 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    32a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    32aa:	f000 810b 	beq.w	34c4 <usb_isr+0x3dc>
    32ae:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    32b2:	2b01      	cmp	r3, #1
    32b4:	f63f af69 	bhi.w	318a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    32b8:	4b2d      	ldr	r3, [pc, #180]	; (3370 <usb_isr+0x288>)
    32ba:	685d      	ldr	r5, [r3, #4]
    32bc:	2d00      	cmp	r5, #0
    32be:	f43f af64 	beq.w	318a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    32c2:	fa1f fc8c 	uxth.w	ip, ip
    32c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    32ca:	e004      	b.n	32d6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    32cc:	691d      	ldr	r5, [r3, #16]
    32ce:	330c      	adds	r3, #12
    32d0:	2d00      	cmp	r5, #0
    32d2:	f43f af5a 	beq.w	318a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    32d6:	881a      	ldrh	r2, [r3, #0]
    32d8:	4572      	cmp	r2, lr
    32da:	d1f7      	bne.n	32cc <usb_isr+0x1e4>
    32dc:	885a      	ldrh	r2, [r3, #2]
    32de:	4562      	cmp	r2, ip
    32e0:	d1f4      	bne.n	32cc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    32e2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    32e6:	2a03      	cmp	r2, #3
    32e8:	f000 81a5 	beq.w	3636 <usb_isr+0x54e>
					datalen = list->length;
    32ec:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    32ee:	0c00      	lsrs	r0, r0, #16
    32f0:	4282      	cmp	r2, r0
    32f2:	bf28      	it	cs
    32f4:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    32f6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    32fa:	f040 81a1 	bne.w	3640 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    32fe:	4b18      	ldr	r3, [pc, #96]	; (3360 <usb_isr+0x278>)
    3300:	491c      	ldr	r1, [pc, #112]	; (3374 <usb_isr+0x28c>)
    3302:	7818      	ldrb	r0, [r3, #0]
    3304:	4b1c      	ldr	r3, [pc, #112]	; (3378 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3306:	9201      	str	r2, [sp, #4]
    3308:	2800      	cmp	r0, #0
    330a:	bf18      	it	ne
    330c:	4619      	movne	r1, r3
    330e:	481b      	ldr	r0, [pc, #108]	; (337c <usb_isr+0x294>)
    3310:	f7ff fa8e 	bl	2830 <memcpy>
    3314:	4d19      	ldr	r5, [pc, #100]	; (337c <usb_isr+0x294>)
    3316:	9a01      	ldr	r2, [sp, #4]
    3318:	e1e1      	b.n	36de <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    331a:	f242 2121 	movw	r1, #8737	; 0x2221
    331e:	428b      	cmp	r3, r1
    3320:	d07c      	beq.n	341c <usb_isr+0x334>
    3322:	d933      	bls.n	338c <usb_isr+0x2a4>
    3324:	f242 3121 	movw	r1, #8993	; 0x2321
    3328:	428b      	cmp	r3, r1
    332a:	f000 8081 	beq.w	3430 <usb_isr+0x348>
    332e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    3332:	428b      	cmp	r3, r1
    3334:	f47f af29 	bne.w	318a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    3338:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    333c:	b283      	uxth	r3, r0
    333e:	f47f af24 	bne.w	318a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    3342:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    3346:	f363 0c0f 	bfi	ip, r3, #0, #16
    334a:	e7b5      	b.n	32b8 <usb_isr+0x1d0>
    334c:	402e0000 	.word	0x402e0000
    3350:	20000000 	.word	0x20000000
    3354:	20002058 	.word	0x20002058
    3358:	20002b50 	.word	0x20002b50
    335c:	20002b54 	.word	0x20002b54
    3360:	20002b6d 	.word	0x20002b6d
    3364:	20002b6e 	.word	0x20002b6e
    3368:	20002054 	.word	0x20002054
    336c:	20002ae4 	.word	0x20002ae4
    3370:	20000f04 	.word	0x20000f04
    3374:	60001ebc 	.word	0x60001ebc
    3378:	60001f20 	.word	0x60001f20
    337c:	20200000 	.word	0x20200000
    3380:	2000204c 	.word	0x2000204c
    3384:	b8c6cf5d 	.word	0xb8c6cf5d
    3388:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    338c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3390:	d066      	beq.n	3460 <usb_isr+0x378>
    3392:	f242 0121 	movw	r1, #8225	; 0x2021
    3396:	428b      	cmp	r3, r1
    3398:	f47f aef7 	bne.w	318a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    339c:	0c03      	lsrs	r3, r0, #16
    339e:	2b07      	cmp	r3, #7
    33a0:	f47f aef3 	bne.w	318a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    33a4:	4bb2      	ldr	r3, [pc, #712]	; (3670 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    33a6:	49b3      	ldr	r1, [pc, #716]	; (3674 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    33a8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    33aa:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    33ac:	49b2      	ldr	r1, [pc, #712]	; (3678 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    33ae:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    33b0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    33b4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    33b8:	2201      	movs	r2, #1
    33ba:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    33bc:	4aaf      	ldr	r2, [pc, #700]	; (367c <usb_isr+0x594>)
    33be:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    33c0:	4aaf      	ldr	r2, [pc, #700]	; (3680 <usb_isr+0x598>)
    33c2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    33c4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    33c8:	f041 0101 	orr.w	r1, r1, #1
    33cc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    33d0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    33d4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    33d8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    33da:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    33dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    33e0:	2b00      	cmp	r3, #0
    33e2:	d1fb      	bne.n	33dc <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    33e4:	4aa7      	ldr	r2, [pc, #668]	; (3684 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    33e6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    33e8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    33ea:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    33ec:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    33ee:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    33f0:	f248 0380 	movw	r3, #32896	; 0x8080
    33f4:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    33f6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    33fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    33fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3406:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    340a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    340e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    3412:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    3416:	2b00      	cmp	r3, #0
    3418:	d1fb      	bne.n	3412 <usb_isr+0x32a>
    341a:	e6ba      	b.n	3192 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    341c:	b280      	uxth	r0, r0
    341e:	b938      	cbnz	r0, 3430 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3420:	4b99      	ldr	r3, [pc, #612]	; (3688 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3422:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3426:	6819      	ldr	r1, [r3, #0]
    3428:	4b98      	ldr	r3, [pc, #608]	; (368c <usb_isr+0x5a4>)
    342a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    342c:	4b98      	ldr	r3, [pc, #608]	; (3690 <usb_isr+0x5a8>)
    342e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    3430:	4b94      	ldr	r3, [pc, #592]	; (3684 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    3432:	2200      	movs	r2, #0
    3434:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    3436:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    3438:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    343a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    343c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    343e:	2280      	movs	r2, #128	; 0x80
    3440:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3442:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3446:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    344a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3452:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    3456:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    345a:	2b00      	cmp	r3, #0
    345c:	d1fb      	bne.n	3456 <usb_isr+0x36e>
    345e:	e698      	b.n	3192 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    3460:	f3c2 4207 	ubfx	r2, r2, #16, #8
    3464:	4b8b      	ldr	r3, [pc, #556]	; (3694 <usb_isr+0x5ac>)
    3466:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    3468:	4b8b      	ldr	r3, [pc, #556]	; (3698 <usb_isr+0x5b0>)
    346a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    346e:	4b8b      	ldr	r3, [pc, #556]	; (369c <usb_isr+0x5b4>)
    3470:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    3474:	4b8a      	ldr	r3, [pc, #552]	; (36a0 <usb_isr+0x5b8>)
    3476:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    347a:	f000 fbd3 	bl	3c24 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    347e:	2280      	movs	r2, #128	; 0x80
    3480:	4629      	mov	r1, r5
    3482:	4888      	ldr	r0, [pc, #544]	; (36a4 <usb_isr+0x5bc>)
    3484:	f003 fa04 	bl	6890 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3488:	4b87      	ldr	r3, [pc, #540]	; (36a8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    348a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    348c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    3490:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    3494:	4b7b      	ldr	r3, [pc, #492]	; (3684 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3496:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3498:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    349a:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    349c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    349e:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    34a0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    34a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    34a6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    34aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    34b2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    34b6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    34ba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34be:	2b00      	cmp	r3, #0
    34c0:	d1fb      	bne.n	34ba <usb_isr+0x3d2>
    34c2:	e666      	b.n	3192 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    34c4:	4b6f      	ldr	r3, [pc, #444]	; (3684 <usb_isr+0x59c>)
    34c6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    34c8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    34ca:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34cc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    34ce:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    34d0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    34d2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    34d4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    34d8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    34dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    34e4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    34e8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    34ec:	2b00      	cmp	r3, #0
    34ee:	d1fb      	bne.n	34e8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    34f0:	0c13      	lsrs	r3, r2, #16
    34f2:	065b      	lsls	r3, r3, #25
    34f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    34f8:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    34fc:	e649      	b.n	3192 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    34fe:	4b65      	ldr	r3, [pc, #404]	; (3694 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    3500:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    3502:	486a      	ldr	r0, [pc, #424]	; (36ac <usb_isr+0x5c4>)
    3504:	781b      	ldrb	r3, [r3, #0]
    3506:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3508:	f7ff fd8c 	bl	3024 <endpoint0_transmit.constprop.0>
		return;
    350c:	e641      	b.n	3192 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    350e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    3510:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    3514:	f47f ae39 	bne.w	318a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    3518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    351c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    3520:	4a62      	ldr	r2, [pc, #392]	; (36ac <usb_isr+0x5c4>)
    3522:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3524:	0618      	lsls	r0, r3, #24
    3526:	f100 809e 	bmi.w	3666 <usb_isr+0x57e>
    352a:	07cb      	lsls	r3, r1, #31
    352c:	d501      	bpl.n	3532 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    352e:	2301      	movs	r3, #1
    3530:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    3532:	2102      	movs	r1, #2
    3534:	485d      	ldr	r0, [pc, #372]	; (36ac <usb_isr+0x5c4>)
    3536:	f7ff fd75 	bl	3024 <endpoint0_transmit.constprop.0>
		return;
    353a:	e62a      	b.n	3192 <usb_isr+0xaa>
		if (endpoint > 7) break;
    353c:	f010 0f78 	tst.w	r0, #120	; 0x78
    3540:	b283      	uxth	r3, r0
    3542:	f47f ae22 	bne.w	318a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    3546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    354a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    354e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    3552:	bf14      	ite	ne
    3554:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    3558:	f043 0301 	orreq.w	r3, r3, #1
    355c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    3560:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    3562:	4b48      	ldr	r3, [pc, #288]	; (3684 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    3564:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    3566:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    3568:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    356a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    356c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    356e:	2280      	movs	r2, #128	; 0x80
    3570:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3572:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    3576:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    357a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    357e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3582:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    3586:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    358a:	2b00      	cmp	r3, #0
    358c:	d1fb      	bne.n	3586 <usb_isr+0x49e>
    358e:	e600      	b.n	3192 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    3590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    3594:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    3598:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    359c:	bf14      	ite	ne
    359e:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    35a2:	f023 0301 	biceq.w	r3, r3, #1
    35a6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    35aa:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    35ac:	4b35      	ldr	r3, [pc, #212]	; (3684 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    35ae:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    35b0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    35b2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    35b4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    35b6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    35b8:	2280      	movs	r2, #128	; 0x80
    35ba:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    35bc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    35c0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    35c4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    35c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    35cc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    35d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    35d4:	2b00      	cmp	r3, #0
    35d6:	d1fb      	bne.n	35d0 <usb_isr+0x4e8>
    35d8:	e5db      	b.n	3192 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    35da:	2000      	movs	r0, #0
    35dc:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    35de:	4926      	ldr	r1, [pc, #152]	; (3678 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    35e0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    35e2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    35e4:	f242 0121 	movw	r1, #8225	; 0x2021
    35e8:	428c      	cmp	r4, r1
    35ea:	f47f ae25 	bne.w	3238 <usb_isr+0x150>
    35ee:	b280      	uxth	r0, r0
    35f0:	2800      	cmp	r0, #0
    35f2:	f47f ae21 	bne.w	3238 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    35f6:	492e      	ldr	r1, [pc, #184]	; (36b0 <usb_isr+0x5c8>)
    35f8:	4c2e      	ldr	r4, [pc, #184]	; (36b4 <usb_isr+0x5cc>)
    35fa:	c903      	ldmia	r1, {r0, r1}
    35fc:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    35fe:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    3600:	ea4f 4111 	mov.w	r1, r1, lsr #16
    3604:	6020      	str	r0, [r4, #0]
    3606:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    3608:	f47f ae16 	bne.w	3238 <usb_isr+0x150>
	__disable_irq();
    360c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    360e:	482a      	ldr	r0, [pc, #168]	; (36b8 <usb_isr+0x5d0>)
    3610:	7801      	ldrb	r1, [r0, #0]
    3612:	f041 0108 	orr.w	r1, r1, #8
    3616:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    3618:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    361c:	060d      	lsls	r5, r1, #24
    361e:	d405      	bmi.n	362c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3620:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3622:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    3624:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    3628:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    362c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    362e:	4a23      	ldr	r2, [pc, #140]	; (36bc <usb_isr+0x5d4>)
    3630:	2150      	movs	r1, #80	; 0x50
    3632:	7011      	strb	r1, [r2, #0]
    3634:	e600      	b.n	3238 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    3636:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    3638:	782a      	ldrb	r2, [r5, #0]
    363a:	4282      	cmp	r2, r0
    363c:	bf28      	it	cs
    363e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    3640:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    3644:	d144      	bne.n	36d0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    3646:	4b1e      	ldr	r3, [pc, #120]	; (36c0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3648:	4d1e      	ldr	r5, [pc, #120]	; (36c4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    364a:	7818      	ldrb	r0, [r3, #0]
    364c:	491e      	ldr	r1, [pc, #120]	; (36c8 <usb_isr+0x5e0>)
    364e:	4b1f      	ldr	r3, [pc, #124]	; (36cc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3650:	9201      	str	r2, [sp, #4]
    3652:	2800      	cmp	r0, #0
    3654:	bf18      	it	ne
    3656:	4619      	movne	r1, r3
    3658:	4628      	mov	r0, r5
    365a:	f7ff f8e9 	bl	2830 <memcpy>
					usb_descriptor_buffer[1] = 7;
    365e:	2307      	movs	r3, #7
    3660:	706b      	strb	r3, [r5, #1]
    3662:	9a01      	ldr	r2, [sp, #4]
    3664:	e03b      	b.n	36de <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3666:	03c9      	lsls	r1, r1, #15
    3668:	f53f af61 	bmi.w	352e <usb_isr+0x446>
    366c:	e761      	b.n	3532 <usb_isr+0x44a>
    366e:	bf00      	nop
    3670:	20001ae0 	.word	0x20001ae0
    3674:	2000304c 	.word	0x2000304c
    3678:	20001c80 	.word	0x20001c80
    367c:	00070080 	.word	0x00070080
    3680:	2000404c 	.word	0x2000404c
    3684:	20001ac0 	.word	0x20001ac0
    3688:	20002b3c 	.word	0x20002b3c
    368c:	20002b4c 	.word	0x20002b4c
    3690:	20002b6b 	.word	0x20002b6b
    3694:	20002b6c 	.word	0x20002b6c
    3698:	00cc0002 	.word	0x00cc0002
    369c:	000200c8 	.word	0x000200c8
    36a0:	00c80002 	.word	0x00c80002
    36a4:	20000080 	.word	0x20000080
    36a8:	74d59319 	.word	0x74d59319
    36ac:	20002ae4 	.word	0x20002ae4
    36b0:	2000204c 	.word	0x2000204c
    36b4:	20002b44 	.word	0x20002b44
    36b8:	20002b66 	.word	0x20002b66
    36bc:	20002b6e 	.word	0x20002b6e
    36c0:	20002b6d 	.word	0x20002b6d
    36c4:	20200000 	.word	0x20200000
    36c8:	60001f20 	.word	0x60001f20
    36cc:	60001ebc 	.word	0x60001ebc
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    36d0:	4629      	mov	r1, r5
    36d2:	4d10      	ldr	r5, [pc, #64]	; (3714 <usb_isr+0x62c>)
    36d4:	9201      	str	r2, [sp, #4]
    36d6:	4628      	mov	r0, r5
    36d8:	f7ff f8aa 	bl	2830 <memcpy>
    36dc:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    36de:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    36e2:	4415      	add	r5, r2
	asm("dsb");
    36e4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    36e8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    36ec:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    36f0:	3320      	adds	r3, #32
	} while (location < end_addr);
    36f2:	429d      	cmp	r5, r3
    36f4:	d8fa      	bhi.n	36ec <usb_isr+0x604>
	asm("dsb");
    36f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    36fa:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    36fe:	4805      	ldr	r0, [pc, #20]	; (3714 <usb_isr+0x62c>)
    3700:	4611      	mov	r1, r2
    3702:	f7ff fc8f 	bl	3024 <endpoint0_transmit.constprop.0>
				return;
    3706:	e544      	b.n	3192 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    3708:	2003      	movs	r0, #3
    370a:	f7ff fcd7 	bl	30bc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    370e:	f008 f9df 	bl	bad0 <___reboot_Teensyduino__veneer>
    3712:	bf00      	nop
    3714:	20200000 	.word	0x20200000

00003718 <usb_config_rx>:
{
    3718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    371c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    371e:	1e83      	subs	r3, r0, #2
    3720:	2b02      	cmp	r3, #2
    3722:	d901      	bls.n	3728 <usb_config_rx+0x10>
}
    3724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3728:	f8df 904c 	ldr.w	r9, [pc, #76]	; 3778 <usb_config_rx+0x60>
    372c:	4615      	mov	r5, r2
    372e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    3730:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3732:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    3736:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    3738:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    373c:	2100      	movs	r1, #0
    373e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3742:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    3744:	f003 f8a4 	bl	6890 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3748:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    374c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    374e:	0952      	lsrs	r2, r2, #5
    3750:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    3754:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    3758:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    375c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    3760:	2f00      	cmp	r7, #0
    3762:	d0df      	beq.n	3724 <usb_config_rx+0xc>
    3764:	4a03      	ldr	r2, [pc, #12]	; (3774 <usb_config_rx+0x5c>)
    3766:	40b3      	lsls	r3, r6
    3768:	6811      	ldr	r1, [r2, #0]
    376a:	430b      	orrs	r3, r1
    376c:	6013      	str	r3, [r2, #0]
}
    376e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3772:	bf00      	nop
    3774:	20002058 	.word	0x20002058
    3778:	20000000 	.word	0x20000000

0000377c <usb_config_tx>:
{
    377c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3780:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3782:	1e81      	subs	r1, r0, #2
    3784:	2902      	cmp	r1, #2
    3786:	d901      	bls.n	378c <usb_config_tx+0x10>
}
    3788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    378c:	01c7      	lsls	r7, r0, #7
    378e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 37dc <usb_config_tx+0x60>
    3792:	4692      	mov	sl, r2
    3794:	4604      	mov	r4, r0
    3796:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    3798:	223c      	movs	r2, #60	; 0x3c
    379a:	2100      	movs	r1, #0
    379c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    379e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    37a2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    37a4:	f108 0004 	add.w	r0, r8, #4
    37a8:	f003 f872 	bl	6890 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    37ac:	faba f28a 	clz	r2, sl
    37b0:	0952      	lsrs	r2, r2, #5
    37b2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    37b6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    37ba:	2201      	movs	r2, #1
	qh->callback_function = callback;
    37bc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    37c0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    37c4:	2e00      	cmp	r6, #0
    37c6:	d0df      	beq.n	3788 <usb_config_tx+0xc>
    37c8:	4b03      	ldr	r3, [pc, #12]	; (37d8 <usb_config_tx+0x5c>)
    37ca:	3410      	adds	r4, #16
    37cc:	6819      	ldr	r1, [r3, #0]
    37ce:	40a2      	lsls	r2, r4
    37d0:	430a      	orrs	r2, r1
    37d2:	601a      	str	r2, [r3, #0]
}
    37d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    37d8:	20002058 	.word	0x20002058
    37dc:	20000000 	.word	0x20000000

000037e0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    37e0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    37e2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    37e4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    37e6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    37ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    37ee:	b410      	push	{r4}
	transfer->next = 1;
    37f0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    37f2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    37f4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    37f8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    37fa:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    37fe:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    3802:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    3804:	6181      	str	r1, [r0, #24]
}
    3806:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    380a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    380e:	4770      	bx	lr

00003810 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3810:	1e83      	subs	r3, r0, #2
{
    3812:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3814:	2b02      	cmp	r3, #2
    3816:	d900      	bls.n	381a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    3818:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    381a:	4b06      	ldr	r3, [pc, #24]	; (3834 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    381c:	f100 0110 	add.w	r1, r0, #16
    3820:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    3824:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    3828:	fa0c f101 	lsl.w	r1, ip, r1
    382c:	3040      	adds	r0, #64	; 0x40
    382e:	f7ff bb99 	b.w	2f64 <schedule_transfer>
    3832:	bf00      	nop
    3834:	20000000 	.word	0x20000000

00003838 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    3838:	1e83      	subs	r3, r0, #2
{
    383a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    383c:	2b02      	cmp	r3, #2
    383e:	d900      	bls.n	3842 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    3840:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    3842:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    3844:	4b02      	ldr	r3, [pc, #8]	; (3850 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    3846:	4081      	lsls	r1, r0
    3848:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    384c:	f7ff bb8a 	b.w	2f64 <schedule_transfer>
    3850:	20000000 	.word	0x20000000

00003854 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    3854:	6840      	ldr	r0, [r0, #4]
#endif
}
    3856:	4770      	bx	lr

00003858 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3858:	4a12      	ldr	r2, [pc, #72]	; (38a4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    385a:	4b13      	ldr	r3, [pc, #76]	; (38a8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    385c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    3860:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    3864:	4298      	cmp	r0, r3
{
    3866:	b510      	push	{r4, lr}
    3868:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    386a:	d202      	bcs.n	3872 <usb_init_serialnumber+0x1a>
    386c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3870:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    3872:	4c0e      	ldr	r4, [pc, #56]	; (38ac <usb_init_serialnumber+0x54>)
    3874:	a901      	add	r1, sp, #4
    3876:	220a      	movs	r2, #10
    3878:	f7ff f876 	bl	2968 <ultoa>
	for (i=0; i<10; i++) {
    387c:	a901      	add	r1, sp, #4
    387e:	2300      	movs	r3, #0
    3880:	4620      	mov	r0, r4
		char c = buf[i];
    3882:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    3886:	3301      	adds	r3, #1
		if (!c) break;
    3888:	b13a      	cbz	r2, 389a <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    388a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    388c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    3890:	d1f7      	bne.n	3882 <usb_init_serialnumber+0x2a>
    3892:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3894:	7023      	strb	r3, [r4, #0]
}
    3896:	b004      	add	sp, #16
    3898:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    389a:	005b      	lsls	r3, r3, #1
    389c:	b2db      	uxtb	r3, r3
    389e:	7023      	strb	r3, [r4, #0]
}
    38a0:	b004      	add	sp, #16
    38a2:	bd10      	pop	{r4, pc}
    38a4:	401f4400 	.word	0x401f4400
    38a8:	00989680 	.word	0x00989680
    38ac:	20001728 	.word	0x20001728

000038b0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    38b0:	f000 bad6 	b.w	3e60 <usb_serial_flush_input>

000038b4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    38b4:	f000 bb66 	b.w	3f84 <usb_serial_flush_output>

000038b8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    38b8:	f000 bb3c 	b.w	3f34 <usb_serial_write_buffer_free>

000038bc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    38bc:	4608      	mov	r0, r1
    38be:	4611      	mov	r1, r2
    38c0:	f000 bb2c 	b.w	3f1c <usb_serial_write>

000038c4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    38c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    38c6:	4c14      	ldr	r4, [pc, #80]	; (3918 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    38c8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    38cc:	4e13      	ldr	r6, [pc, #76]	; (391c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    38ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    38d2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    38d6:	4f12      	ldr	r7, [pc, #72]	; (3920 <rx_queue_transfer+0x5c>)
    38d8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    38dc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    38de:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    38e2:	4621      	mov	r1, r4
    38e4:	883a      	ldrh	r2, [r7, #0]
    38e6:	4630      	mov	r0, r6
    38e8:	f7ff ff7a 	bl	37e0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    38ec:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    38ee:	4423      	add	r3, r4
	asm("dsb");
    38f0:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    38f4:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    38f8:	3420      	adds	r4, #32
	} while (location < end_addr);
    38fa:	42a3      	cmp	r3, r4
    38fc:	d8fa      	bhi.n	38f4 <rx_queue_transfer+0x30>
	asm("dsb");
    38fe:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3902:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    3906:	2003      	movs	r0, #3
    3908:	4631      	mov	r1, r6
    390a:	f7ff ff95 	bl	3838 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    390e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    3912:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    3916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3918:	20200080 	.word	0x20200080
    391c:	20001b00 	.word	0x20001b00
    3920:	20002b58 	.word	0x20002b58

00003924 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3924:	4b24      	ldr	r3, [pc, #144]	; (39b8 <rx_event+0x94>)
{
    3926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    392a:	881c      	ldrh	r4, [r3, #0]
    392c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    392e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    3930:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3934:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    3936:	2c00      	cmp	r4, #0
    3938:	dd24      	ble.n	3984 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    393a:	4920      	ldr	r1, [pc, #128]	; (39bc <rx_event+0x98>)
		if (head != rx_tail) {
    393c:	4820      	ldr	r0, [pc, #128]	; (39c0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    393e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    3940:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    3942:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    3944:	4e1f      	ldr	r6, [pc, #124]	; (39c4 <rx_event+0xa0>)
		if (head != rx_tail) {
    3946:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    3948:	481f      	ldr	r0, [pc, #124]	; (39c8 <rx_event+0xa4>)
		if (head != rx_tail) {
    394a:	d007      	beq.n	395c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    394c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    3950:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    3954:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    3958:	4294      	cmp	r4, r2
    395a:	d918      	bls.n	398e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    395c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    395e:	2200      	movs	r2, #0
		rx_count[i] = len;
    3960:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    3964:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    3966:	4e19      	ldr	r6, [pc, #100]	; (39cc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    3968:	bf88      	it	hi
    396a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    396c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    3970:	bf98      	it	ls
    3972:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    3974:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    3976:	4b16      	ldr	r3, [pc, #88]	; (39d0 <rx_event+0xac>)
		rx_head = head;
    3978:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    397a:	681a      	ldr	r2, [r3, #0]
    397c:	4414      	add	r4, r2
    397e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    3980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    3984:	4628      	mov	r0, r5
}
    3986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    398a:	f7ff bf9b 	b.w	38c4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    398e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    3992:	4910      	ldr	r1, [pc, #64]	; (39d4 <rx_event+0xb0>)
    3994:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    3996:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    3998:	4408      	add	r0, r1
    399a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    399e:	f7fe ff47 	bl	2830 <memcpy>
				rx_available += len;
    39a2:	4a0b      	ldr	r2, [pc, #44]	; (39d0 <rx_event+0xac>)
				rx_queue_transfer(i);
    39a4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    39a6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    39aa:	6813      	ldr	r3, [r2, #0]
    39ac:	4423      	add	r3, r4
}
    39ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    39b2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    39b4:	f7ff bf86 	b.w	38c4 <rx_queue_transfer>
    39b8:	20002b58 	.word	0x20002b58
    39bc:	20002b64 	.word	0x20002b64
    39c0:	20002b65 	.word	0x20002b65
    39c4:	20002af8 	.word	0x20002af8
    39c8:	20002b18 	.word	0x20002b18
    39cc:	20002b08 	.word	0x20002b08
    39d0:	20002af4 	.word	0x20002af4
    39d4:	20200080 	.word	0x20200080

000039d8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    39d8:	4b1d      	ldr	r3, [pc, #116]	; (3a50 <usb_serial_flush_callback+0x78>)
    39da:	781a      	ldrb	r2, [r3, #0]
    39dc:	2a00      	cmp	r2, #0
    39de:	d136      	bne.n	3a4e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    39e0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    39e4:	4a1b      	ldr	r2, [pc, #108]	; (3a54 <usb_serial_flush_callback+0x7c>)
    39e6:	7812      	ldrb	r2, [r2, #0]
    39e8:	b38a      	cbz	r2, 3a4e <usb_serial_flush_callback+0x76>
{
    39ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    39ee:	4d1a      	ldr	r5, [pc, #104]	; (3a58 <usb_serial_flush_callback+0x80>)
    39f0:	882a      	ldrh	r2, [r5, #0]
    39f2:	b352      	cbz	r2, 3a4a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    39f4:	4e19      	ldr	r6, [pc, #100]	; (3a5c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    39f6:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    39fa:	4f19      	ldr	r7, [pc, #100]	; (3a60 <usb_serial_flush_callback+0x88>)
    39fc:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    39fe:	4c19      	ldr	r4, [pc, #100]	; (3a64 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3a00:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3a04:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3a08:	4642      	mov	r2, r8
    3a0a:	4638      	mov	r0, r7
    3a0c:	4621      	mov	r1, r4
    3a0e:	f7ff fee7 	bl	37e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3a12:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    3a16:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3a1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3a1e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3a22:	3420      	adds	r4, #32
	} while (location < end_addr);
    3a24:	42a2      	cmp	r2, r4
    3a26:	d8fa      	bhi.n	3a1e <usb_serial_flush_callback+0x46>
	asm("dsb");
    3a28:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3a2c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3a30:	2004      	movs	r0, #4
    3a32:	4639      	mov	r1, r7
    3a34:	f7ff feec 	bl	3810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3a38:	7833      	ldrb	r3, [r6, #0]
    3a3a:	3301      	adds	r3, #1
    3a3c:	b2db      	uxtb	r3, r3
    3a3e:	2b03      	cmp	r3, #3
    3a40:	bf88      	it	hi
    3a42:	2300      	movhi	r3, #0
    3a44:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3a46:	2300      	movs	r3, #0
    3a48:	802b      	strh	r3, [r5, #0]
}
    3a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a4e:	4770      	bx	lr
    3a50:	20002b6a 	.word	0x20002b6a
    3a54:	20002b6c 	.word	0x20002b6c
    3a58:	20002b5a 	.word	0x20002b5a
    3a5c:	20002b69 	.word	0x20002b69
    3a60:	20001c00 	.word	0x20001c00
    3a64:	20201080 	.word	0x20201080

00003a68 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    3a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a6c:	b085      	sub	sp, #20
	while (size > 0) {
    3a6e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3a72:	2900      	cmp	r1, #0
    3a74:	f000 80bf 	beq.w	3bf6 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    3a78:	2300      	movs	r3, #0
    3a7a:	4c60      	ldr	r4, [pc, #384]	; (3bfc <usb_serial_write.part.0+0x194>)
    3a7c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 3c18 <usb_serial_write.part.0+0x1b0>
    3a80:	f8df a198 	ldr.w	sl, [pc, #408]	; 3c1c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    3a84:	4f5e      	ldr	r7, [pc, #376]	; (3c00 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    3a86:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    3a88:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    3a8a:	4a5e      	ldr	r2, [pc, #376]	; (3c04 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    3a8c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    3a8e:	4b5e      	ldr	r3, [pc, #376]	; (3c08 <usb_serial_write.part.0+0x1a0>)
    3a90:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    3a92:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    3a96:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	f040 80a7 	bne.w	3bee <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    3aa0:	461e      	mov	r6, r3
		int waiting=0;
    3aa2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    3aa4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    3aa6:	4648      	mov	r0, r9
    3aa8:	f7ff fed4 	bl	3854 <usb_transfer_status>
			if (!(status & 0x80)) {
    3aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    3ab0:	f000 808c 	beq.w	3bcc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    3ab4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    3ab8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    3abc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    3ac0:	b905      	cbnz	r5, 3ac4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    3ac2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    3ac4:	2b00      	cmp	r3, #0
    3ac6:	d17d      	bne.n	3bc4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    3ac8:	683b      	ldr	r3, [r7, #0]
    3aca:	1b9b      	subs	r3, r3, r6
    3acc:	2b78      	cmp	r3, #120	; 0x78
    3ace:	f200 8087 	bhi.w	3be0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    3ad2:	4b4e      	ldr	r3, [pc, #312]	; (3c0c <usb_serial_write.part.0+0x1a4>)
    3ad4:	781b      	ldrb	r3, [r3, #0]
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d074      	beq.n	3bc4 <usb_serial_write.part.0+0x15c>
			yield();
    3ada:	f000 fa9d 	bl	4018 <yield>
			tx_noautoflush = 1;
    3ade:	2201      	movs	r2, #1
		while (!tx_available) {
    3ae0:	f8b8 3000 	ldrh.w	r3, [r8]
    3ae4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    3ae6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d0dc      	beq.n	3aa6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3aec:	4a46      	ldr	r2, [pc, #280]	; (3c08 <usb_serial_write.part.0+0x1a0>)
    3aee:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3af2:	7811      	ldrb	r1, [r2, #0]
    3af4:	461a      	mov	r2, r3
    3af6:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    3afa:	4d45      	ldr	r5, [pc, #276]	; (3c10 <usb_serial_write.part.0+0x1a8>)
    3afc:	02c9      	lsls	r1, r1, #11
    3afe:	4428      	add	r0, r5
		if (size >= tx_available) {
    3b00:	9d01      	ldr	r5, [sp, #4]
    3b02:	4295      	cmp	r5, r2
    3b04:	d217      	bcs.n	3b36 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    3b06:	9303      	str	r3, [sp, #12]
    3b08:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    3b0c:	462a      	mov	r2, r5
    3b0e:	f7fe fe8f 	bl	2830 <memcpy>
			tx_available -= size;
    3b12:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3b14:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    3b18:	1b5b      	subs	r3, r3, r5
    3b1a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    3b1e:	4b3d      	ldr	r3, [pc, #244]	; (3c14 <usb_serial_write.part.0+0x1ac>)
    3b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    3b24:	f3bf 8f4f 	dsb	sy
			sent += size;
    3b28:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    3b2a:	2300      	movs	r3, #0
			sent += size;
    3b2c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    3b2e:	7023      	strb	r3, [r4, #0]
}
    3b30:	b005      	add	sp, #20
    3b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3b36:	4b36      	ldr	r3, [pc, #216]	; (3c10 <usb_serial_write.part.0+0x1a8>)
    3b38:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    3b3a:	9902      	ldr	r1, [sp, #8]
    3b3c:	f7fe fe78 	bl	2830 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    3b40:	2300      	movs	r3, #0
    3b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3b46:	4629      	mov	r1, r5
    3b48:	4648      	mov	r0, r9
    3b4a:	f7ff fe49 	bl	37e0 <usb_prepare_transfer>
	asm("dsb");
    3b4e:	f3bf 8f4f 	dsb	sy
    3b52:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    3b56:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    3b5a:	4293      	cmp	r3, r2
    3b5c:	bf34      	ite	cc
    3b5e:	2301      	movcc	r3, #1
    3b60:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    3b62:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3b66:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    3b6a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    3b6e:	3520      	adds	r5, #32
	} while (location < end_addr);
    3b70:	42ab      	cmp	r3, r5
    3b72:	d1fa      	bne.n	3b6a <usb_serial_write.part.0+0x102>
	asm("dsb");
    3b74:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3b78:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    3b7c:	2004      	movs	r0, #4
    3b7e:	4649      	mov	r1, r9
    3b80:	f7ff fe46 	bl	3810 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    3b84:	4a20      	ldr	r2, [pc, #128]	; (3c08 <usb_serial_write.part.0+0x1a0>)
    3b86:	7813      	ldrb	r3, [r2, #0]
    3b88:	3301      	adds	r3, #1
    3b8a:	b2db      	uxtb	r3, r3
    3b8c:	2b03      	cmp	r3, #3
    3b8e:	bf84      	itt	hi
    3b90:	2300      	movhi	r3, #0
    3b92:	4a1d      	ldrhi	r2, [pc, #116]	; (3c08 <usb_serial_write.part.0+0x1a0>)
    3b94:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    3b96:	f8b8 3000 	ldrh.w	r3, [r8]
    3b9a:	9a01      	ldr	r2, [sp, #4]
    3b9c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    3b9e:	9a00      	ldr	r2, [sp, #0]
    3ba0:	441a      	add	r2, r3
			size -= tx_available;
    3ba2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    3ba4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    3ba6:	9a02      	ldr	r2, [sp, #8]
    3ba8:	441a      	add	r2, r3
			tx_available = 0;
    3baa:	2300      	movs	r3, #0
			data += tx_available;
    3bac:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    3bae:	4a19      	ldr	r2, [pc, #100]	; (3c14 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    3bb0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    3bb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    3bb8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    3bbc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    3bbe:	2900      	cmp	r1, #0
    3bc0:	f47f af62 	bne.w	3a88 <usb_serial_write.part.0+0x20>
	return sent;
    3bc4:	9800      	ldr	r0, [sp, #0]
}
    3bc6:	b005      	add	sp, #20
    3bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    3bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3bd0:	4b0d      	ldr	r3, [pc, #52]	; (3c08 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    3bd2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3bd6:	7819      	ldrb	r1, [r3, #0]
				break;
    3bd8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    3bda:	f8a8 2000 	strh.w	r2, [r8]
				break;
    3bde:	e78a      	b.n	3af6 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    3be0:	2301      	movs	r3, #1
				return sent;
    3be2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    3be4:	f88a 3000 	strb.w	r3, [sl]
}
    3be8:	b005      	add	sp, #20
    3bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    3bee:	461a      	mov	r2, r3
    3bf0:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    3bf4:	e77f      	b.n	3af6 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    3bf6:	9801      	ldr	r0, [sp, #4]
	return sent;
    3bf8:	e7e5      	b.n	3bc6 <usb_serial_write.part.0+0x15e>
    3bfa:	bf00      	nop
    3bfc:	20002b6a 	.word	0x20002b6a
    3c00:	20002b3c 	.word	0x20002b3c
    3c04:	20001c00 	.word	0x20001c00
    3c08:	20002b69 	.word	0x20002b69
    3c0c:	20002b6c 	.word	0x20002b6c
    3c10:	20201080 	.word	0x20201080
    3c14:	402e0000 	.word	0x402e0000
    3c18:	20002b5a 	.word	0x20002b5a
    3c1c:	20002b68 	.word	0x20002b68

00003c20 <usb_serial_reset>:
}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop

00003c24 <usb_serial_configure>:
	if (usb_high_speed) {
    3c24:	4b2d      	ldr	r3, [pc, #180]	; (3cdc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3c26:	2100      	movs	r1, #0
    3c28:	2280      	movs	r2, #128	; 0x80
    3c2a:	482d      	ldr	r0, [pc, #180]	; (3ce0 <usb_serial_configure+0xbc>)
{
    3c2c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    3c2e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    3c30:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    3c32:	4d2c      	ldr	r5, [pc, #176]	; (3ce4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    3c34:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    3c36:	4e2c      	ldr	r6, [pc, #176]	; (3ce8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    3c38:	bf0c      	ite	eq
    3c3a:	2340      	moveq	r3, #64	; 0x40
    3c3c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    3c40:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    3c42:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    3c44:	f002 fe24 	bl	6890 <memset>
	tx_head = 0;
    3c48:	4a28      	ldr	r2, [pc, #160]	; (3cec <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3c4a:	4621      	mov	r1, r4
	tx_available = 0;
    3c4c:	4b28      	ldr	r3, [pc, #160]	; (3cf0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    3c4e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3c50:	f44f 7280 	mov.w	r2, #256	; 0x100
    3c54:	4827      	ldr	r0, [pc, #156]	; (3cf4 <usb_serial_configure+0xd0>)
	tx_available = 0;
    3c56:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    3c58:	f002 fe1a 	bl	6890 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    3c5c:	4a26      	ldr	r2, [pc, #152]	; (3cf8 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c5e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    3c60:	4b26      	ldr	r3, [pc, #152]	; (3cfc <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c62:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    3c64:	e9c2 4400 	strd	r4, r4, [r2]
    3c68:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    3c6c:	4a24      	ldr	r2, [pc, #144]	; (3d00 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    3c6e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    3c72:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    3c74:	4a23      	ldr	r2, [pc, #140]	; (3d04 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    3c76:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    3c7a:	4b23      	ldr	r3, [pc, #140]	; (3d08 <usb_serial_configure+0xe4>)
    3c7c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c7e:	4623      	mov	r3, r4
	rx_available = 0;
    3c80:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    3c82:	4622      	mov	r2, r4
    3c84:	f7ff fd7a 	bl	377c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    3c88:	4622      	mov	r2, r4
    3c8a:	8831      	ldrh	r1, [r6, #0]
    3c8c:	2003      	movs	r0, #3
    3c8e:	4b1f      	ldr	r3, [pc, #124]	; (3d0c <usb_serial_configure+0xe8>)
    3c90:	f7ff fd42 	bl	3718 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    3c94:	4623      	mov	r3, r4
    3c96:	2201      	movs	r2, #1
    3c98:	8829      	ldrh	r1, [r5, #0]
    3c9a:	2004      	movs	r0, #4
    3c9c:	f7ff fd6e 	bl	377c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    3ca0:	4620      	mov	r0, r4
    3ca2:	3401      	adds	r4, #1
    3ca4:	f7ff fe0e 	bl	38c4 <rx_queue_transfer>
    3ca8:	2c08      	cmp	r4, #8
    3caa:	d1f9      	bne.n	3ca0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    3cac:	4b18      	ldr	r3, [pc, #96]	; (3d10 <usb_serial_configure+0xec>)
    3cae:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    3cb0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    3cb2:	4818      	ldr	r0, [pc, #96]	; (3d14 <usb_serial_configure+0xf0>)
    3cb4:	4c18      	ldr	r4, [pc, #96]	; (3d18 <usb_serial_configure+0xf4>)
    3cb6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    3cb8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    3cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3cc0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    3cc4:	4915      	ldr	r1, [pc, #84]	; (3d1c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    3cc6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    3cca:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    3cce:	b121      	cbz	r1, 3cda <usb_serial_configure+0xb6>
    3cd0:	4a13      	ldr	r2, [pc, #76]	; (3d20 <usb_serial_configure+0xfc>)
    3cd2:	7813      	ldrb	r3, [r2, #0]
    3cd4:	f043 0301 	orr.w	r3, r3, #1
    3cd8:	7013      	strb	r3, [r2, #0]
}
    3cda:	bd70      	pop	{r4, r5, r6, pc}
    3cdc:	20002b6d 	.word	0x20002b6d
    3ce0:	20001c00 	.word	0x20001c00
    3ce4:	20002b5c 	.word	0x20002b5c
    3ce8:	20002b58 	.word	0x20002b58
    3cec:	20002b69 	.word	0x20002b69
    3cf0:	20002b5a 	.word	0x20002b5a
    3cf4:	20001b00 	.word	0x20001b00
    3cf8:	20002af8 	.word	0x20002af8
    3cfc:	20002b08 	.word	0x20002b08
    3d00:	20002b64 	.word	0x20002b64
    3d04:	20002af4 	.word	0x20002af4
    3d08:	20002b65 	.word	0x20002b65
    3d0c:	00003925 	.word	0x00003925
    3d10:	402e0000 	.word	0x402e0000
    3d14:	20002b50 	.word	0x20002b50
    3d18:	000039d9 	.word	0x000039d9
    3d1c:	00000000 	.word	0x00000000
    3d20:	20002b6f 	.word	0x20002b6f

00003d24 <usb_serial_read>:
{
    3d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3d28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    3d30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3dfc <usb_serial_read+0xd8>
{
    3d34:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    3d36:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    3d3a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    3d3c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    3d40:	2900      	cmp	r1, #0
    3d42:	d04f      	beq.n	3de4 <usb_serial_read+0xc0>
    3d44:	4680      	mov	r8, r0
    3d46:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    3d48:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    3d4a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3e00 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    3d4e:	4b26      	ldr	r3, [pc, #152]	; (3de8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    3d50:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3d54:	4925      	ldr	r1, [pc, #148]	; (3dec <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    3d5a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    3d5e:	d03f      	beq.n	3de0 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    3d60:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    3d62:	4b23      	ldr	r3, [pc, #140]	; (3df0 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3d64:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    3d66:	bf28      	it	cs
    3d68:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    3d6a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    3d6c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3d70:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    3d74:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    3d76:	4b1f      	ldr	r3, [pc, #124]	; (3df4 <usb_serial_read+0xd0>)
    3d78:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    3d7c:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    3d80:	42aa      	cmp	r2, r5
    3d82:	d21c      	bcs.n	3dbe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3d84:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    3d88:	4918      	ldr	r1, [pc, #96]	; (3dec <usb_serial_read+0xc8>)
			rx_available -= len;
    3d8a:	4c1b      	ldr	r4, [pc, #108]	; (3df8 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    3d8c:	4461      	add	r1, ip
    3d8e:	9201      	str	r2, [sp, #4]
    3d90:	f7fe fd4e 	bl	2830 <memcpy>
			rx_available -= len;
    3d94:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    3d96:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    3d9a:	4658      	mov	r0, fp
			rx_index[i] += len;
    3d9c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    3d9e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    3da2:	442a      	add	r2, r5
			rx_available -= len;
    3da4:	4439      	add	r1, r7
			rx_index[i] += len;
    3da6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    3daa:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    3dac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3db0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3db4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    3db8:	b003      	add	sp, #12
    3dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3dbe:	462a      	mov	r2, r5
			count += avail;
    3dc0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    3dc2:	f7fe fd35 	bl	2830 <memcpy>
			rx_available -= avail;
    3dc6:	490c      	ldr	r1, [pc, #48]	; (3df8 <usb_serial_read+0xd4>)
			rx_tail = tail;
    3dc8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    3dca:	4630      	mov	r0, r6
			rx_available -= avail;
    3dcc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    3dce:	44a8      	add	r8, r5
			rx_available -= avail;
    3dd0:	1b52      	subs	r2, r2, r5
    3dd2:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    3dd4:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    3dd8:	f7ff fd74 	bl	38c4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    3ddc:	45bb      	cmp	fp, r7
    3dde:	d8b6      	bhi.n	3d4e <usb_serial_read+0x2a>
	return count;
    3de0:	4638      	mov	r0, r7
    3de2:	e7e3      	b.n	3dac <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    3de4:	4608      	mov	r0, r1
    3de6:	e7e1      	b.n	3dac <usb_serial_read+0x88>
    3de8:	20002b64 	.word	0x20002b64
    3dec:	20200080 	.word	0x20200080
    3df0:	20002b18 	.word	0x20002b18
    3df4:	20002af8 	.word	0x20002af8
    3df8:	20002af4 	.word	0x20002af4
    3dfc:	20002b65 	.word	0x20002b65
    3e00:	20002b08 	.word	0x20002b08

00003e04 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    3e04:	4b0b      	ldr	r3, [pc, #44]	; (3e34 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    3e06:	4a0c      	ldr	r2, [pc, #48]	; (3e38 <usb_serial_peekchar+0x34>)
    3e08:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    3e0a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    3e0c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    3e0e:	428a      	cmp	r2, r1
    3e10:	d00d      	beq.n	3e2e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    3e12:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    3e14:	4809      	ldr	r0, [pc, #36]	; (3e3c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3e16:	4a0a      	ldr	r2, [pc, #40]	; (3e40 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    3e18:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3e1a:	490a      	ldr	r1, [pc, #40]	; (3e44 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    3e1c:	bf28      	it	cs
    3e1e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    3e20:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    3e22:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    3e26:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    3e2a:	5c58      	ldrb	r0, [r3, r1]
    3e2c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    3e2e:	f04f 30ff 	mov.w	r0, #4294967295
}
    3e32:	4770      	bx	lr
    3e34:	20002b64 	.word	0x20002b64
    3e38:	20002b65 	.word	0x20002b65
    3e3c:	20002b18 	.word	0x20002b18
    3e40:	20200080 	.word	0x20200080
    3e44:	20002b08 	.word	0x20002b08

00003e48 <usb_serial_available>:
	uint32_t n = rx_available;
    3e48:	4b04      	ldr	r3, [pc, #16]	; (3e5c <usb_serial_available+0x14>)
{
    3e4a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    3e4c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    3e4e:	b10c      	cbz	r4, 3e54 <usb_serial_available+0xc>
}
    3e50:	4620      	mov	r0, r4
    3e52:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    3e54:	f000 f8e0 	bl	4018 <yield>
}
    3e58:	4620      	mov	r0, r4
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	20002af4 	.word	0x20002af4

00003e60 <usb_serial_flush_input>:
{
    3e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    3e64:	4e14      	ldr	r6, [pc, #80]	; (3eb8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    3e66:	4d15      	ldr	r5, [pc, #84]	; (3ebc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    3e68:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    3e6a:	782a      	ldrb	r2, [r5, #0]
    3e6c:	4293      	cmp	r3, r2
    3e6e:	d021      	beq.n	3eb4 <usb_serial_flush_input+0x54>
    3e70:	b2dc      	uxtb	r4, r3
    3e72:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3ec4 <usb_serial_flush_input+0x64>
    3e76:	f8df b050 	ldr.w	fp, [pc, #80]	; 3ec8 <usb_serial_flush_input+0x68>
    3e7a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3ecc <usb_serial_flush_input+0x6c>
    3e7e:	4f10      	ldr	r7, [pc, #64]	; (3ec0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    3e80:	3401      	adds	r4, #1
    3e82:	2c08      	cmp	r4, #8
		rx_tail = tail;
    3e84:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    3e88:	d901      	bls.n	3e8e <usb_serial_flush_input+0x2e>
    3e8a:	2400      	movs	r4, #0
    3e8c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    3e8e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    3e92:	f8db 3000 	ldr.w	r3, [fp]
    3e96:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    3e9a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    3e9e:	1a52      	subs	r2, r2, r1
    3ea0:	1a9b      	subs	r3, r3, r2
    3ea2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    3ea6:	f7ff fd0d 	bl	38c4 <rx_queue_transfer>
		rx_tail = tail;
    3eaa:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    3eae:	782b      	ldrb	r3, [r5, #0]
    3eb0:	42a3      	cmp	r3, r4
    3eb2:	d1e5      	bne.n	3e80 <usb_serial_flush_input+0x20>
}
    3eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eb8:	20002b65 	.word	0x20002b65
    3ebc:	20002b64 	.word	0x20002b64
    3ec0:	20002b08 	.word	0x20002b08
    3ec4:	20002b18 	.word	0x20002b18
    3ec8:	20002af4 	.word	0x20002af4
    3ecc:	20002af8 	.word	0x20002af8

00003ed0 <usb_serial_getchar>:
{
    3ed0:	b500      	push	{lr}
    3ed2:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    3ed4:	2101      	movs	r1, #1
    3ed6:	f10d 0007 	add.w	r0, sp, #7
    3eda:	f7ff ff23 	bl	3d24 <usb_serial_read>
    3ede:	b120      	cbz	r0, 3eea <usb_serial_getchar+0x1a>
    3ee0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    3ee4:	b003      	add	sp, #12
    3ee6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    3eea:	f04f 30ff 	mov.w	r0, #4294967295
    3eee:	e7f9      	b.n	3ee4 <usb_serial_getchar+0x14>

00003ef0 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    3ef0:	4b09      	ldr	r3, [pc, #36]	; (3f18 <usb_serial_putchar+0x28>)
{
    3ef2:	b500      	push	{lr}
    3ef4:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    3ef6:	781b      	ldrb	r3, [r3, #0]
{
    3ef8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    3efc:	b13b      	cbz	r3, 3f0e <usb_serial_putchar+0x1e>
    3efe:	2101      	movs	r1, #1
    3f00:	f10d 0007 	add.w	r0, sp, #7
    3f04:	f7ff fdb0 	bl	3a68 <usb_serial_write.part.0>
}
    3f08:	b003      	add	sp, #12
    3f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    3f0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    3f12:	b003      	add	sp, #12
    3f14:	f85d fb04 	ldr.w	pc, [sp], #4
    3f18:	20002b6c 	.word	0x20002b6c

00003f1c <usb_serial_write>:
	if (!usb_configuration) return 0;
    3f1c:	4b04      	ldr	r3, [pc, #16]	; (3f30 <usb_serial_write+0x14>)
    3f1e:	781b      	ldrb	r3, [r3, #0]
    3f20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3f24:	b10b      	cbz	r3, 3f2a <usb_serial_write+0xe>
    3f26:	f7ff bd9f 	b.w	3a68 <usb_serial_write.part.0>
}
    3f2a:	4610      	mov	r0, r2
    3f2c:	4770      	bx	lr
    3f2e:	bf00      	nop
    3f30:	20002b6c 	.word	0x20002b6c

00003f34 <usb_serial_write_buffer_free>:
{
    3f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    3f38:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    3f3a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 3f80 <usb_serial_write_buffer_free+0x4c>
    3f3e:	2301      	movs	r3, #1
    3f40:	4d0d      	ldr	r5, [pc, #52]	; (3f78 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    3f42:	4627      	mov	r7, r4
    3f44:	4e0d      	ldr	r6, [pc, #52]	; (3f7c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    3f46:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    3f4a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3f4c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    3f4e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    3f50:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    3f52:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    3f56:	d005      	beq.n	3f64 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    3f58:	f7ff fc7c 	bl	3854 <usb_transfer_status>
    3f5c:	0603      	lsls	r3, r0, #24
    3f5e:	bf58      	it	pl
    3f60:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    3f64:	2c04      	cmp	r4, #4
    3f66:	d1f0      	bne.n	3f4a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    3f68:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3f6c:	2300      	movs	r3, #0
}
    3f6e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    3f70:	f888 3000 	strb.w	r3, [r8]
}
    3f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f78:	20001c00 	.word	0x20001c00
    3f7c:	20002b69 	.word	0x20002b69
    3f80:	20002b6a 	.word	0x20002b6a

00003f84 <usb_serial_flush_output>:
{
    3f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    3f88:	4b1d      	ldr	r3, [pc, #116]	; (4000 <usb_serial_flush_output+0x7c>)
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	b113      	cbz	r3, 3f94 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    3f8e:	4d1d      	ldr	r5, [pc, #116]	; (4004 <usb_serial_flush_output+0x80>)
    3f90:	882a      	ldrh	r2, [r5, #0]
    3f92:	b90a      	cbnz	r2, 3f98 <usb_serial_flush_output+0x14>
}
    3f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    3f98:	4e1b      	ldr	r6, [pc, #108]	; (4008 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    3f9a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    3f9e:	491b      	ldr	r1, [pc, #108]	; (400c <usb_serial_flush_output+0x88>)
    3fa0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3fa2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3fa4:	4c1a      	ldr	r4, [pc, #104]	; (4010 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    3fa6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    3faa:	4f1a      	ldr	r7, [pc, #104]	; (4014 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    3fac:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    3fb0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3fb2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    3fb4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    3fb6:	4621      	mov	r1, r4
    3fb8:	2300      	movs	r3, #0
    3fba:	f7ff fc11 	bl	37e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    3fbe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    3fc2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    3fc6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3fca:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    3fce:	3420      	adds	r4, #32
	} while (location < end_addr);
    3fd0:	42a2      	cmp	r2, r4
    3fd2:	d8fa      	bhi.n	3fca <usb_serial_flush_output+0x46>
	asm("dsb");
    3fd4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3fd8:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    3fdc:	2004      	movs	r0, #4
    3fde:	4641      	mov	r1, r8
    3fe0:	f7ff fc16 	bl	3810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    3fe4:	7833      	ldrb	r3, [r6, #0]
    3fe6:	3301      	adds	r3, #1
    3fe8:	b2db      	uxtb	r3, r3
    3fea:	2b03      	cmp	r3, #3
    3fec:	bf88      	it	hi
    3fee:	2300      	movhi	r3, #0
    3ff0:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    3ff2:	2300      	movs	r3, #0
    3ff4:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    3ff6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    3ffa:	703b      	strb	r3, [r7, #0]
}
    3ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4000:	20002b6c 	.word	0x20002b6c
    4004:	20002b5a 	.word	0x20002b5a
    4008:	20002b69 	.word	0x20002b69
    400c:	20001c00 	.word	0x20001c00
    4010:	20201080 	.word	0x20201080
    4014:	20002b6a 	.word	0x20002b6a

00004018 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    4018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    401c:	4b2d      	ldr	r3, [pc, #180]	; (40d4 <yield+0xbc>)
    401e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    4020:	b166      	cbz	r6, 403c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    4022:	4f2d      	ldr	r7, [pc, #180]	; (40d8 <yield+0xc0>)
    4024:	783b      	ldrb	r3, [r7, #0]
    4026:	b94b      	cbnz	r3, 403c <yield+0x24>
	running = 1;
    4028:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    402a:	07f1      	lsls	r1, r6, #31
	running = 1;
    402c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    402e:	d443      	bmi.n	40b8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    4030:	07b2      	lsls	r2, r6, #30
    4032:	d426      	bmi.n	4082 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    4034:	2300      	movs	r3, #0
    4036:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    4038:	0773      	lsls	r3, r6, #29
    403a:	d401      	bmi.n	4040 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    403c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    4040:	4b26      	ldr	r3, [pc, #152]	; (40dc <yield+0xc4>)
    4042:	681a      	ldr	r2, [r3, #0]
    4044:	2a00      	cmp	r2, #0
    4046:	d0f9      	beq.n	403c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4048:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    404c:	2a00      	cmp	r2, #0
    404e:	d1f5      	bne.n	403c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4050:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    4054:	b672      	cpsid	i
		EventResponder *first = firstYield;
    4056:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    4058:	2800      	cmp	r0, #0
    405a:	d034      	beq.n	40c6 <yield+0xae>
		if (runningFromYield) {
    405c:	4c20      	ldr	r4, [pc, #128]	; (40e0 <yield+0xc8>)
    405e:	7821      	ldrb	r1, [r4, #0]
    4060:	2900      	cmp	r1, #0
    4062:	d130      	bne.n	40c6 <yield+0xae>
		runningFromYield = true;
    4064:	2201      	movs	r2, #1
    4066:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    4068:	6942      	ldr	r2, [r0, #20]
    406a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    406c:	2a00      	cmp	r2, #0
    406e:	d02e      	beq.n	40ce <yield+0xb6>
			firstYield->_prev = nullptr;
    4070:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    4072:	b905      	cbnz	r5, 4076 <yield+0x5e>
    4074:	b662      	cpsie	i
		first->_triggered = false;
    4076:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    4078:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    407a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    407c:	4798      	blx	r3
		runningFromYield = false;
    407e:	7025      	strb	r5, [r4, #0]
    4080:	e7dc      	b.n	403c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    4082:	f8df 8064 	ldr.w	r8, [pc, #100]	; 40e8 <yield+0xd0>
    4086:	f898 3000 	ldrb.w	r3, [r8]
    408a:	2b00      	cmp	r3, #0
    408c:	d0d2      	beq.n	4034 <yield+0x1c>
    408e:	2500      	movs	r5, #0
    4090:	f8df 9058 	ldr.w	r9, [pc, #88]	; 40ec <yield+0xd4>
    4094:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    4096:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    409a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    409c:	6823      	ldr	r3, [r4, #0]
    409e:	4620      	mov	r0, r4
    40a0:	691b      	ldr	r3, [r3, #16]
    40a2:	4798      	blx	r3
    40a4:	b110      	cbz	r0, 40ac <yield+0x94>
    40a6:	6963      	ldr	r3, [r4, #20]
    40a8:	689b      	ldr	r3, [r3, #8]
    40aa:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    40ac:	f898 2000 	ldrb.w	r2, [r8]
    40b0:	b2eb      	uxtb	r3, r5
    40b2:	429a      	cmp	r2, r3
    40b4:	d8ef      	bhi.n	4096 <yield+0x7e>
    40b6:	e7bd      	b.n	4034 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    40b8:	f7ff fec6 	bl	3e48 <usb_serial_available>
		if (Serial.available()) serialEvent();
    40bc:	2800      	cmp	r0, #0
    40be:	d0b7      	beq.n	4030 <yield+0x18>
    40c0:	f3af 8000 	nop.w
    40c4:	e7b4      	b.n	4030 <yield+0x18>
		if (doit) __enable_irq();
    40c6:	2d00      	cmp	r5, #0
    40c8:	d1b8      	bne.n	403c <yield+0x24>
    40ca:	b662      	cpsie	i
    40cc:	e7b6      	b.n	403c <yield+0x24>
			lastYield = nullptr;
    40ce:	4b05      	ldr	r3, [pc, #20]	; (40e4 <yield+0xcc>)
    40d0:	601a      	str	r2, [r3, #0]
    40d2:	e7ce      	b.n	4072 <yield+0x5a>
    40d4:	20002b6f 	.word	0x20002b6f
    40d8:	20002b60 	.word	0x20002b60
    40dc:	20001d08 	.word	0x20001d08
    40e0:	20002b5e 	.word	0x20002b5e
    40e4:	20001d14 	.word	0x20001d14
    40e8:	20002b5f 	.word	0x20002b5f
    40ec:	20001d18 	.word	0x20001d18

000040f0 <HardwareSerialIMXRT::operator bool()>:
	operator bool()			{ return true; }
    40f0:	2001      	movs	r0, #1
    40f2:	4770      	bx	lr

000040f4 <HardwareSerialIMXRT::availableForWrite()>:

int HardwareSerialIMXRT::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    40f4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    40f8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    40fc:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    40fe:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    4100:	4293      	cmp	r3, r2
    4102:	d202      	bcs.n	410a <HardwareSerialIMXRT::availableForWrite()+0x16>
	return tail - head - 1;
    4104:	3a01      	subs	r2, #1
    4106:	1ad0      	subs	r0, r2, r3
}
    4108:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    410a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    410c:	3901      	subs	r1, #1
    410e:	440a      	add	r2, r1
    4110:	1ad0      	subs	r0, r2, r3
    4112:	4770      	bx	lr

00004114 <HardwareSerialIMXRT::available()>:



int HardwareSerialIMXRT::available(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    4114:	6901      	ldr	r1, [r0, #16]
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    4116:	b672      	cpsid	i
	head = rx_buffer_head_;
    4118:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    411c:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4120:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    4122:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    4124:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    4126:	bf3c      	itt	cc
    4128:	6b80      	ldrcc	r0, [r0, #56]	; 0x38
    412a:	1812      	addcc	r2, r2, r0
	avail += (port->WATER >> 24) & 0x7;
    412c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
	else avail = rx_buffer_total_size_ + head - tail;	
    412e:	1ad3      	subs	r3, r2, r3
	__enable_irq();
    4130:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    4132:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    4136:	4418      	add	r0, r3
    4138:	4770      	bx	lr
    413a:	bf00      	nop

0000413c <HardwareSerialIMXRT::peek()>:
int HardwareSerialIMXRT::peek(void)
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;

	head = rx_buffer_head_;
    413c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    4140:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    4142:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    4146:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    4148:	b29b      	uxth	r3, r3
	if (head == tail) {
    414a:	4299      	cmp	r1, r3
{
    414c:	b410      	push	{r4}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    414e:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    4150:	d014      	beq.n	417c <HardwareSerialIMXRT::peek()+0x40>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4152:	3301      	adds	r3, #1
    4154:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    4156:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    4158:	4298      	cmp	r0, r3
    415a:	bf98      	it	ls
    415c:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    415e:	4299      	cmp	r1, r3
    4160:	d806      	bhi.n	4170 <HardwareSerialIMXRT::peek()+0x34>
		return rx_buffer_[tail];
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    4162:	1a5b      	subs	r3, r3, r1
    4164:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4166:	5cd0      	ldrb	r0, [r2, r3]
    4168:	b2c0      	uxtb	r0, r0
	}
}
    416a:	f85d 4b04 	ldr.w	r4, [sp], #4
    416e:	4770      	bx	lr
		return rx_buffer_[tail];
    4170:	6a12      	ldr	r2, [r2, #32]
}
    4172:	f85d 4b04 	ldr.w	r4, [sp], #4
		return rx_buffer_[tail];
    4176:	5cd0      	ldrb	r0, [r2, r3]
    4178:	b2c0      	uxtb	r0, r0
}
    417a:	4770      	bx	lr
		__disable_irq();
    417c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    417e:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    4182:	b280      	uxth	r0, r0
		if (head == tail) {
    4184:	4281      	cmp	r1, r0
    4186:	d001      	beq.n	418c <HardwareSerialIMXRT::peek()+0x50>
		__enable_irq();
    4188:	b662      	cpsie	i
    418a:	e7e2      	b.n	4152 <HardwareSerialIMXRT::peek()+0x16>
			if (port->WATER & 0x7000000) {
    418c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    418e:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4192:	d103      	bne.n	419c <HardwareSerialIMXRT::peek()+0x60>
			int c = -1;	// assume nothing to return
    4194:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    4198:	b662      	cpsie	i
			return c;
    419a:	e7e6      	b.n	416a <HardwareSerialIMXRT::peek()+0x2e>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    419c:	69e3      	ldr	r3, [r4, #28]
				rx_buffer_head_ = 1;
    419e:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    41a0:	2400      	movs	r4, #0
				rx_buffer_[1] = c;
    41a2:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    41a4:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    41a8:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    41ac:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    41ae:	f8a2 404c 	strh.w	r4, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    41b2:	704b      	strb	r3, [r1, #1]
    41b4:	e7f0      	b.n	4198 <HardwareSerialIMXRT::peek()+0x5c>
    41b6:	bf00      	nop

000041b8 <HardwareSerialIMXRT::read()>:
{
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    41b8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    41bc:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    41be:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    41c2:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    41c4:	b29b      	uxth	r3, r3
	if (head == tail) {
    41c6:	4299      	cmp	r1, r3
{
    41c8:	b430      	push	{r4, r5}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    41ca:	6904      	ldr	r4, [r0, #16]
	if (head == tail) {
    41cc:	d025      	beq.n	421a <HardwareSerialIMXRT::read()+0x62>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    41ce:	3301      	adds	r3, #1
    41d0:	6b94      	ldr	r4, [r2, #56]	; 0x38
    41d2:	429c      	cmp	r4, r3
    41d4:	d916      	bls.n	4204 <HardwareSerialIMXRT::read()+0x4c>
	if (tail < rx_buffer_size_) {
    41d6:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    41d8:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    41dc:	4298      	cmp	r0, r3
    41de:	d917      	bls.n	4210 <HardwareSerialIMXRT::read()+0x58>
		c = rx_buffer_[tail];
    41e0:	6a10      	ldr	r0, [r2, #32]
    41e2:	5cc0      	ldrb	r0, [r0, r3]
    41e4:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    41e6:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    41e8:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    41ec:	b145      	cbz	r5, 4200 <HardwareSerialIMXRT::read()+0x48>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    41ee:	4299      	cmp	r1, r3
    41f0:	d31c      	bcc.n	422c <HardwareSerialIMXRT::read()+0x74>
    41f2:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    41f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    41f6:	4299      	cmp	r1, r3
    41f8:	d302      	bcc.n	4200 <HardwareSerialIMXRT::read()+0x48>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    41fa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    41fc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    4200:	bc30      	pop	{r4, r5}
    4202:	4770      	bx	lr
    4204:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    4208:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    420a:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    420c:	4298      	cmp	r0, r3
    420e:	d8e7      	bhi.n	41e0 <HardwareSerialIMXRT::read()+0x28>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    4210:	1a18      	subs	r0, r3, r0
    4212:	6a55      	ldr	r5, [r2, #36]	; 0x24
    4214:	5c28      	ldrb	r0, [r5, r0]
    4216:	b2c0      	uxtb	r0, r0
    4218:	e7e5      	b.n	41e6 <HardwareSerialIMXRT::read()+0x2e>
    421a:	4608      	mov	r0, r1
		__disable_irq();
    421c:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    421e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    4222:	b289      	uxth	r1, r1
		if (head == tail) {
    4224:	4288      	cmp	r0, r1
    4226:	d004      	beq.n	4232 <HardwareSerialIMXRT::read()+0x7a>
		__enable_irq();
    4228:	b662      	cpsie	i
    422a:	e7d0      	b.n	41ce <HardwareSerialIMXRT::read()+0x16>
		else avail = rx_buffer_total_size_ + head - tail;
    422c:	440c      	add	r4, r1
    422e:	1ae3      	subs	r3, r4, r3
    4230:	e7e0      	b.n	41f4 <HardwareSerialIMXRT::read()+0x3c>
			if (port->WATER & 0x7000000) {
    4232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4234:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
    4238:	d103      	bne.n	4242 <HardwareSerialIMXRT::read()+0x8a>
			c = -1;	// assume nothing to return
    423a:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    423e:	b662      	cpsie	i
			return c;
    4240:	e7de      	b.n	4200 <HardwareSerialIMXRT::read()+0x48>
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    4242:	69e0      	ldr	r0, [r4, #28]
    4244:	f3c0 0009 	ubfx	r0, r0, #0, #10
    4248:	e7f9      	b.n	423e <HardwareSerialIMXRT::read()+0x86>
    424a:	bf00      	nop

0000424c <HardwareSerialIMXRT::flush()>:

void HardwareSerialIMXRT::flush(void)
{
	while (transmitting_) yield(); // wait
    424c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    4250:	b143      	cbz	r3, 4264 <HardwareSerialIMXRT::flush()+0x18>
{
    4252:	b510      	push	{r4, lr}
    4254:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    4256:	f7ff fedf 	bl	4018 <yield>
    425a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    425e:	2b00      	cmp	r3, #0
    4260:	d1f9      	bne.n	4256 <HardwareSerialIMXRT::flush()+0xa>
}
    4262:	bd10      	pop	{r4, pc}
    4264:	4770      	bx	lr
    4266:	bf00      	nop

00004268 <HardwareSerialIMXRT::end()>:
{
    4268:	b538      	push	{r3, r4, r5, lr}
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    426a:	e9d0 5304 	ldrd	r5, r3, [r0, #16]
	if (!(hardware->ccm_register & hardware->ccm_value)) return;
    426e:	e9d3 1203 	ldrd	r1, r2, [r3, #12]
    4272:	6809      	ldr	r1, [r1, #0]
    4274:	4211      	tst	r1, r2
    4276:	d028      	beq.n	42ca <HardwareSerialIMXRT::end()+0x62>
	while (transmitting_) yield();  // wait for buffered data to send
    4278:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    427c:	4604      	mov	r4, r0
    427e:	b132      	cbz	r2, 428e <HardwareSerialIMXRT::end()+0x26>
    4280:	f7ff feca 	bl	4018 <yield>
    4284:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4288:	2b00      	cmp	r3, #0
    428a:	d1f9      	bne.n	4280 <HardwareSerialIMXRT::end()+0x18>
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    428c:	6963      	ldr	r3, [r4, #20]
	port->CTRL = 0;	// disable the TX and RX ...
    428e:	2100      	movs	r1, #0
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4290:	4a0e      	ldr	r2, [pc, #56]	; (42cc <HardwareSerialIMXRT::end()+0x64>)
	port->CTRL = 0;	// disable the TX and RX ...
    4292:	61a9      	str	r1, [r5, #24]
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = 5;
    4294:	7e20      	ldrb	r0, [r4, #24]
    4296:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    429a:	7d00      	ldrb	r0, [r0, #20]
    429c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    42a0:	6845      	ldr	r5, [r0, #4]
    42a2:	2005      	movs	r0, #5
    42a4:	6028      	str	r0, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    42a6:	7e65      	ldrb	r5, [r4, #25]
    42a8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    42ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    42b0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (rts_pin_baseReg_) rts_deassert();
    42b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = 5;
    42b6:	6852      	ldr	r2, [r2, #4]
    42b8:	6010      	str	r0, [r2, #0]
	rx_buffer_head_ = 0;
    42ba:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
	rx_buffer_tail_ = 0;
    42be:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
	if (rts_pin_baseReg_) rts_deassert();
    42c2:	b113      	cbz	r3, 42ca <HardwareSerialIMXRT::end()+0x62>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    42c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    42c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    42ca:	bd38      	pop	{r3, r4, r5, pc}
    42cc:	20000ae0 	.word	0x20000ae0

000042d0 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    42d0:	ee07 1a90 	vmov	s15, r1
    42d4:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 4540 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x270>
	for (int osr=4; osr <= 32; osr++) {
    42d8:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    42da:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    42de:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    42e2:	ed9f 6a98 	vldr	s12, [pc, #608]	; 4544 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x274>
    42e6:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    42ea:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    42ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int bestosr = 4;
    42f2:	468e      	mov	lr, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    42f4:	6905      	ldr	r5, [r0, #16]
	int bestdiv = 1;
    42f6:	2401      	movs	r4, #1
		float div = base / (float)osr;
    42f8:	ee07 1a90 	vmov	s15, r1
    42fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4300:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    4304:	ee77 7a05 	vadd.f32	s15, s14, s10
    4308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    430c:	ee17 3a90 	vmov	r3, s15
    4310:	4563      	cmp	r3, ip
    4312:	bfa8      	it	ge
    4314:	4663      	movge	r3, ip
    4316:	2b01      	cmp	r3, #1
    4318:	bfb8      	it	lt
    431a:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    431c:	ee07 3a90 	vmov	s15, r3
    4320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    4324:	ee76 6ac7 	vsub.f32	s13, s13, s14
    4328:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    432c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4334:	bf48      	it	mi
    4336:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    433a:	eef4 7ac6 	vcmpe.f32	s15, s12
    433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4342:	d803      	bhi.n	434c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x7c>
			besterr = err;
    4344:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    4348:	468e      	mov	lr, r1
			bestdiv = divint;
    434a:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    434c:	3101      	adds	r1, #1
    434e:	2921      	cmp	r1, #33	; 0x21
    4350:	d1d2      	bne.n	42f8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28>
	rx_buffer_head_ = 0;
    4352:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4354:	6943      	ldr	r3, [r0, #20]
    4356:	f402 7600 	and.w	r6, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    435a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    435e:	f8b3 c05a 	ldrh.w	ip, [r3, #90]	; 0x5a
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    4362:	428e      	cmp	r6, r1
	rx_buffer_tail_ = 0;
    4364:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4368:	f8b3 6058 	ldrh.w	r6, [r3, #88]	; 0x58
	tx_buffer_head_ = 0;
    436c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    4370:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    4374:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    4378:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    437a:	68df      	ldr	r7, [r3, #12]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    437c:	eba1 0606 	sub.w	r6, r1, r6
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    4380:	eba1 010c 	sub.w	r1, r1, ip
    4384:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    4388:	6839      	ldr	r1, [r7, #0]
    438a:	691e      	ldr	r6, [r3, #16]
    438c:	ea41 0106 	orr.w	r1, r1, r6
    4390:	6039      	str	r1, [r7, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    4392:	bf14      	ite	ne
    4394:	2101      	movne	r1, #1
    4396:	2100      	moveq	r1, #0
    4398:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    439a:	f040 80ac 	bne.w	44f6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x226>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    439e:	7e01      	ldrb	r1, [r0, #24]
    43a0:	4e69      	ldr	r6, [pc, #420]	; (4548 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    43a2:	eb03 1801 	add.w	r8, r3, r1, lsl #4
    43a6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 4568 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x298>
    43aa:	f898 7014 	ldrb.w	r7, [r8, #20]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    43ae:	f8d8 a01c 	ldr.w	sl, [r8, #28]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    43b2:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    43b6:	68b9      	ldr	r1, [r7, #8]
    43b8:	f8c1 9000 	str.w	r9, [r1]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    43bc:	6879      	ldr	r1, [r7, #4]
    43be:	f8d8 7018 	ldr.w	r7, [r8, #24]
    43c2:	600f      	str	r7, [r1, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    43c4:	f1ba 0f00 	cmp.w	sl, #0
    43c8:	d003      	beq.n	43d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x102>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    43ca:	f8d8 1020 	ldr.w	r1, [r8, #32]
    43ce:	f8ca 1000 	str.w	r1, [sl]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    43d2:	7e47      	ldrb	r7, [r0, #25]
    43d4:	21d9      	movs	r1, #217	; 0xd9
    43d6:	eb03 1807 	add.w	r8, r3, r7, lsl #4
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    43da:	f898 c034 	ldrb.w	ip, [r8, #52]	; 0x34
    43de:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
    43e2:	f8dc 7008 	ldr.w	r7, [ip, #8]
    43e6:	6039      	str	r1, [r7, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    43e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
    43ec:	f8d8 7038 	ldr.w	r7, [r8, #56]	; 0x38
    43f0:	600f      	str	r7, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    43f2:	7e41      	ldrb	r1, [r0, #25]
    43f4:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    43f8:	6bcf      	ldr	r7, [r1, #60]	; 0x3c
    43fa:	b10f      	cbz	r7, 4400 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x130>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    43fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    43fe:	6039      	str	r1, [r7, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4400:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    4404:	f1be 0f08 	cmp.w	lr, #8
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4408:	ea4f 6101 	mov.w	r1, r1, lsl #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    440c:	bfcc      	ite	gt
    440e:	f04f 0e00 	movgt.w	lr, #0
    4412:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4416:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    441a:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
    441e:	4321      	orrs	r1, r4
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    4420:	685c      	ldr	r4, [r3, #4]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    4422:	6129      	str	r1, [r5, #16]
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    4424:	7859      	ldrb	r1, [r3, #1]
    4426:	f101 0310 	add.w	r3, r1, #16
	port->PINCFG = 0;
    442a:	2100      	movs	r1, #0
    442c:	60e9      	str	r1, [r5, #12]
    442e:	4947      	ldr	r1, [pc, #284]	; (454c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x27c>)
    4430:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4434:	6941      	ldr	r1, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    4436:	f04f 0e01 	mov.w	lr, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    443a:	4c45      	ldr	r4, [pc, #276]	; (4550 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x280>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    443c:	f002 0c03 	and.w	ip, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4440:	784f      	ldrb	r7, [r1, #1]
    4442:	f891 1056 	ldrb.w	r1, [r1, #86]	; 0x56
	NVIC_ENABLE_IRQ(hardware->irq);
    4446:	4b43      	ldr	r3, [pc, #268]	; (4554 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x284>)
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    4448:	5539      	strb	r1, [r7, r4]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    444a:	f04f 1702 	mov.w	r7, #131074	; 0x20002
	NVIC_ENABLE_IRQ(hardware->irq);
    444e:	6944      	ldr	r4, [r0, #20]
    4450:	7861      	ldrb	r1, [r4, #1]
    4452:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    4456:	f001 011f 	and.w	r1, r1, #31
    445a:	009b      	lsls	r3, r3, #2
    445c:	fa0e f101 	lsl.w	r1, lr, r1
    4460:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    4462:	62ef      	str	r7, [r5, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    4464:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4466:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    446a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    446c:	0753      	lsls	r3, r2, #29
    446e:	d43e      	bmi.n	44ee <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x21e>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    4470:	f44c 1370 	orr.w	r3, ip, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    4474:	f002 010f 	and.w	r1, r2, #15
    4478:	2904      	cmp	r1, #4
    447a:	bf08      	it	eq
    447c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
	if (format & 0x20) {
    4480:	0697      	lsls	r7, r2, #26
    4482:	d52e      	bpl.n	44e2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x212>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4484:	7e81      	ldrb	r1, [r0, #26]
		ctrl |= LPUART_CTRL_TXINV;		// tx invert
    4486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    448a:	2900      	cmp	r1, #0
    448c:	d13a      	bne.n	4504 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x234>
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    448e:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    4490:	61ab      	str	r3, [r5, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    4492:	d503      	bpl.n	449c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1cc>
    4494:	692b      	ldr	r3, [r5, #16]
    4496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    449a:	612b      	str	r3, [r5, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    449c:	696b      	ldr	r3, [r5, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    449e:	06d1      	lsls	r1, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    44a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    44a4:	bf48      	it	mi
    44a6:	f043 5380 	orrmi.w	r3, r3, #268435456	; 0x10000000
	port->STAT = c;
    44aa:	616b      	str	r3, [r5, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    44ac:	05d3      	lsls	r3, r2, #23
    44ae:	d503      	bpl.n	44b8 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1e8>
    44b0:	692b      	ldr	r3, [r5, #16]
    44b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    44b6:	612b      	str	r3, [r5, #16]
	if (hardware->_serialEvent) addToSerialEventsList();
    44b8:	68a3      	ldr	r3, [r4, #8]
    44ba:	b183      	cbz	r3, 44de <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x20e>
	//digitalWrite(4, LOW);
}


void HardwareSerialIMXRT::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    44bc:	4e26      	ldr	r6, [pc, #152]	; (4558 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x288>)
    44be:	7834      	ldrb	r4, [r6, #0]
    44c0:	2c00      	cmp	r4, #0
    44c2:	d03a      	beq.n	453a <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x26a>
    44c4:	1e61      	subs	r1, r4, #1
    44c6:	4d25      	ldr	r5, [pc, #148]	; (455c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    44c8:	b2c9      	uxtb	r1, r1
    44ca:	1f2b      	subs	r3, r5, #4
    44cc:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    44d0:	e001      	b.n	44d6 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x206>
    44d2:	4299      	cmp	r1, r3
    44d4:	d025      	beq.n	4522 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x252>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    44d6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    44da:	4290      	cmp	r0, r2
    44dc:	d1f9      	bne.n	44d2 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x202>
};
    44de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    44e2:	7e81      	ldrb	r1, [r0, #26]
    44e4:	2900      	cmp	r1, #0
    44e6:	d0d2      	beq.n	448e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
    44e8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    44ec:	e7cf      	b.n	448e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    44ee:	4b1c      	ldr	r3, [pc, #112]	; (4560 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x290>)
    44f0:	ea4c 0303 	orr.w	r3, ip, r3
    44f4:	e7be      	b.n	4474 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1a4>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    44f6:	7e47      	ldrb	r7, [r0, #25]
    44f8:	f24f 01d9 	movw	r1, #61657	; 0xf0d9
    44fc:	4e12      	ldr	r6, [pc, #72]	; (4548 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x278>)
    44fe:	eb03 1807 	add.w	r8, r3, r7, lsl #4
    4502:	e76a      	b.n	43da <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x10a>
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    4504:	7e41      	ldrb	r1, [r0, #25]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4506:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		if (half_duplex_mode_) *(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) &=  ~IOMUXC_PAD_PUS(3);
    450a:	eb04 1101 	add.w	r1, r4, r1, lsl #4
    450e:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    4512:	eb06 1601 	add.w	r6, r6, r1, lsl #4
    4516:	68b6      	ldr	r6, [r6, #8]
    4518:	6831      	ldr	r1, [r6, #0]
    451a:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
    451e:	6031      	str	r1, [r6, #0]
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    4520:	e7b5      	b.n	448e <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x1be>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    4522:	1c63      	adds	r3, r4, #1
    4524:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    4526:	4a0f      	ldr	r2, [pc, #60]	; (4564 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x294>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    4528:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    452a:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    452c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    4530:	f043 0302 	orr.w	r3, r3, #2
    4534:	7013      	strb	r3, [r2, #0]
};
    4536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    453a:	2301      	movs	r3, #1
    453c:	4d07      	ldr	r5, [pc, #28]	; (455c <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x28c>)
    453e:	e7f2      	b.n	4526 <HardwareSerialIMXRT::begin(unsigned long, unsigned short)+0x256>
    4540:	4bb71b00 	.word	0x4bb71b00
    4544:	60ad78ec 	.word	0x60ad78ec
    4548:	20000ae0 	.word	0x20000ae0
    454c:	20001800 	.word	0x20001800
    4550:	e000e400 	.word	0xe000e400
    4554:	38003840 	.word	0x38003840
    4558:	20002b5f 	.word	0x20002b5f
    455c:	20001d18 	.word	0x20001d18
    4560:	003c0010 	.word	0x003c0010
    4564:	20002b6f 	.word	0x20002b6f
    4568:	0001f038 	.word	0x0001f038

0000456c <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    456c:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    4570:	b9b8      	cbnz	r0, 45a2 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    4572:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    4576:	b94b      	cbnz	r3, 458c <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    4578:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    457c:	b93a      	cbnz	r2, 458e <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    457e:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    4582:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    4586:	b150      	cbz	r0, 459e <nvic_execution_priority()+0x32>
    4588:	4298      	cmp	r0, r3
    458a:	d208      	bcs.n	459e <nvic_execution_priority()+0x32>
}
    458c:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    458e:	2a0f      	cmp	r2, #15
    4590:	d9f7      	bls.n	4582 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    4592:	4b05      	ldr	r3, [pc, #20]	; (45a8 <nvic_execution_priority()+0x3c>)
    4594:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    4596:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    459a:	2800      	cmp	r0, #0
    459c:	d1f4      	bne.n	4588 <nvic_execution_priority()+0x1c>
    459e:	4618      	mov	r0, r3
	return priority;
    45a0:	4770      	bx	lr
	if (faultmask) return -1;
    45a2:	f04f 30ff 	mov.w	r0, #4294967295
    45a6:	e7f1      	b.n	458c <nvic_execution_priority()+0x20>
    45a8:	e000e3f0 	.word	0xe000e3f0

000045ac <HardwareSerialIMXRT::write9bit(unsigned long)>:
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    45ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    45ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45b2:	4604      	mov	r4, r0
    45b4:	460f      	mov	r7, r1
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    45b6:	6906      	ldr	r6, [r0, #16]
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    45b8:	b113      	cbz	r3, 45c0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x14>
    45ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
    45bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    45c0:	7ea3      	ldrb	r3, [r4, #26]
    45c2:	b12b      	cbz	r3, 45d0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x24>
		__disable_irq();
    45c4:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    45c6:	69b3      	ldr	r3, [r6, #24]
    45c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    45cc:	61b3      	str	r3, [r6, #24]
		__enable_irq();
    45ce:	b662      	cpsie	i
	head = tx_buffer_head_;
    45d0:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    45d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    45d6:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    45d8:	3501      	adds	r5, #1
    45da:	42ab      	cmp	r3, r5
    45dc:	d84c      	bhi.n	4678 <HardwareSerialIMXRT::write9bit(unsigned long)+0xcc>
    45de:	f04f 0800 	mov.w	r8, #0
    45e2:	4645      	mov	r5, r8
	while (tx_buffer_tail_ == head) {
    45e4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    45e8:	b29b      	uxth	r3, r3
    45ea:	429d      	cmp	r5, r3
    45ec:	d019      	beq.n	4622 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
    45ee:	e028      	b.n	4642 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    45f0:	6973      	ldr	r3, [r6, #20]
    45f2:	021b      	lsls	r3, r3, #8
    45f4:	d510      	bpl.n	4618 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
				uint32_t tail = tx_buffer_tail_;
    45f6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    45fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    45fc:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    45fe:	3301      	adds	r3, #1
    4600:	429a      	cmp	r2, r3
    4602:	d936      	bls.n	4672 <HardwareSerialIMXRT::write9bit(unsigned long)+0xc6>
				tx_buffer_tail_ = tail;
    4604:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    4606:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4608:	4299      	cmp	r1, r3
    460a:	d92d      	bls.n	4668 <HardwareSerialIMXRT::write9bit(unsigned long)+0xbc>
					n = tx_buffer_[tail];
    460c:	69e1      	ldr	r1, [r4, #28]
    460e:	5ccb      	ldrb	r3, [r1, r3]
    4610:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    4612:	61f3      	str	r3, [r6, #28]
				tx_buffer_tail_ = tail;
    4614:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    4618:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    461c:	b29b      	uxth	r3, r3
    461e:	42ab      	cmp	r3, r5
    4620:	d10f      	bne.n	4642 <HardwareSerialIMXRT::write9bit(unsigned long)+0x96>
		int priority = nvic_execution_priority();
    4622:	f7ff ffa3 	bl	456c <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    4626:	6963      	ldr	r3, [r4, #20]
    4628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
    462c:	4283      	cmp	r3, r0
    462e:	dadf      	bge.n	45f0 <HardwareSerialIMXRT::write9bit(unsigned long)+0x44>
		} else if (priority >= 256) 
    4630:	28ff      	cmp	r0, #255	; 0xff
    4632:	ddf1      	ble.n	4618 <HardwareSerialIMXRT::write9bit(unsigned long)+0x6c>
			yield(); // wait
    4634:	f7ff fcf0 	bl	4018 <yield>
	while (tx_buffer_tail_ == head) {
    4638:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    463c:	b29b      	uxth	r3, r3
    463e:	42ab      	cmp	r3, r5
    4640:	d0ef      	beq.n	4622 <HardwareSerialIMXRT::write9bit(unsigned long)+0x76>
	if (head < tx_buffer_size_) {
    4642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4644:	42ab      	cmp	r3, r5
    4646:	d91a      	bls.n	467e <HardwareSerialIMXRT::write9bit(unsigned long)+0xd2>
		tx_buffer_[head] = c;
    4648:	b2ff      	uxtb	r7, r7
    464a:	69e3      	ldr	r3, [r4, #28]
    464c:	555f      	strb	r7, [r3, r5]
	__disable_irq();
    464e:	b672      	cpsid	i
	transmitting_ = 1;
    4650:	2001      	movs	r0, #1
    4652:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    4656:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    465a:	69b3      	ldr	r3, [r6, #24]
    465c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    4660:	61b3      	str	r3, [r6, #24]
	__enable_irq();
    4662:	b662      	cpsie	i
}
    4664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    4668:	1a5b      	subs	r3, r3, r1
    466a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    466c:	5ccb      	ldrb	r3, [r1, r3]
    466e:	b2db      	uxtb	r3, r3
    4670:	e7cf      	b.n	4612 <HardwareSerialIMXRT::write9bit(unsigned long)+0x66>
    4672:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    4674:	4613      	mov	r3, r2
    4676:	e7c6      	b.n	4606 <HardwareSerialIMXRT::write9bit(unsigned long)+0x5a>
	tx_buffer_head_ = head;
    4678:	fa1f f885 	uxth.w	r8, r5
    467c:	e7b2      	b.n	45e4 <HardwareSerialIMXRT::write9bit(unsigned long)+0x38>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    467e:	1aed      	subs	r5, r5, r3
    4680:	b2ff      	uxtb	r7, r7
    4682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4684:	555f      	strb	r7, [r3, r5]
    4686:	e7e2      	b.n	464e <HardwareSerialIMXRT::write9bit(unsigned long)+0xa2>

00004688 <HardwareSerialIMXRT::write(unsigned char)>:
	return write9bit(c);
    4688:	f7ff bf90 	b.w	45ac <HardwareSerialIMXRT::write9bit(unsigned long)>

0000468c <HardwareSerialIMXRT::IRQHandler()>:
	IMXRT_LPUART_t *port = (IMXRT_LPUART_t *)port_addr;
    468c:	6902      	ldr	r2, [r0, #16]
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    468e:	6953      	ldr	r3, [r2, #20]
    4690:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    4694:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    4696:	d043      	beq.n	4720 <HardwareSerialIMXRT::IRQHandler()+0x94>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    4698:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    469a:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    469e:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    46a2:	d03a      	beq.n	471a <HardwareSerialIMXRT::IRQHandler()+0x8e>
			head = rx_buffer_head_;
    46a4:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    46a8:	f8b0 604c 	ldrh.w	r6, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    46ac:	b2ad      	uxth	r5, r5
			tail = rx_buffer_tail_;
    46ae:	b2b6      	uxth	r6, r6
    46b0:	e007      	b.n	46c2 <HardwareSerialIMXRT::IRQHandler()+0x36>
						rx_buffer_[head] = n;
    46b2:	6a01      	ldr	r1, [r0, #32]
    46b4:	f801 c003 	strb.w	ip, [r1, r3]
			} while (--avail > 0) ;
    46b8:	f10e 33ff 	add.w	r3, lr, #4294967295
    46bc:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    46c0:	d01d      	beq.n	46fe <HardwareSerialIMXRT::IRQHandler()+0x72>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    46c2:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    46c4:	1c6b      	adds	r3, r5, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    46c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
				if (newhead != rx_buffer_tail_) {
    46c8:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    46cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    46d0:	429c      	cmp	r4, r3
    46d2:	bf98      	it	ls
    46d4:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    46d6:	fa1f fc8c 	uxth.w	ip, ip
    46da:	459c      	cmp	ip, r3
    46dc:	d0ec      	beq.n	46b8 <HardwareSerialIMXRT::IRQHandler()+0x2c>
					if (newhead < rx_buffer_size_) {
    46de:	6b04      	ldr	r4, [r0, #48]	; 0x30
						rx_buffer_[head] = n;
    46e0:	fa5f fc81 	uxtb.w	ip, r1
    46e4:	461d      	mov	r5, r3
					if (newhead < rx_buffer_size_) {
    46e6:	429c      	cmp	r4, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    46e8:	eba3 0404 	sub.w	r4, r3, r4
					if (newhead < rx_buffer_size_) {
    46ec:	d8e1      	bhi.n	46b2 <HardwareSerialIMXRT::IRQHandler()+0x26>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    46ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
    46f0:	f803 c004 	strb.w	ip, [r3, r4]
			} while (--avail > 0) ;
    46f4:	f10e 33ff 	add.w	r3, lr, #4294967295
    46f8:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    46fc:	d1e1      	bne.n	46c2 <HardwareSerialIMXRT::IRQHandler()+0x36>
			rx_buffer_head_ = head;
    46fe:	b2ab      	uxth	r3, r5
    4700:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    4704:	6d83      	ldr	r3, [r0, #88]	; 0x58
    4706:	b143      	cbz	r3, 471a <HardwareSerialIMXRT::IRQHandler()+0x8e>
				if (head >= tail) avail = head - tail;
    4708:	42b5      	cmp	r5, r6
    470a:	d354      	bcc.n	47b6 <HardwareSerialIMXRT::IRQHandler()+0x12a>
    470c:	1bad      	subs	r5, r5, r6
				if (avail >= rts_high_watermark_) rts_deassert();
    470e:	6c01      	ldr	r1, [r0, #64]	; 0x40
    4710:	42a9      	cmp	r1, r5
    4712:	d802      	bhi.n	471a <HardwareSerialIMXRT::IRQHandler()+0x8e>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    4714:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    4716:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    471a:	6953      	ldr	r3, [r2, #20]
    471c:	02d9      	lsls	r1, r3, #11
    471e:	d445      	bmi.n	47ac <HardwareSerialIMXRT::IRQHandler()+0x120>
	ctrl = port->CTRL;
    4720:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    4722:	0233      	lsls	r3, r6, #8
    4724:	d528      	bpl.n	4778 <HardwareSerialIMXRT::IRQHandler()+0xec>
    4726:	6953      	ldr	r3, [r2, #20]
    4728:	021d      	lsls	r5, r3, #8
    472a:	d525      	bpl.n	4778 <HardwareSerialIMXRT::IRQHandler()+0xec>
		head = tx_buffer_head_;
    472c:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    4730:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    4734:	b2ad      	uxth	r5, r5
		tail = tx_buffer_tail_;
    4736:	b29b      	uxth	r3, r3
    4738:	e006      	b.n	4748 <HardwareSerialIMXRT::IRQHandler()+0xbc>
				n = tx_buffer_[tail];
    473a:	69c1      	ldr	r1, [r0, #28]
    473c:	5cc9      	ldrb	r1, [r1, r3]
    473e:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    4740:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    4742:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    4744:	054c      	lsls	r4, r1, #21
    4746:	d412      	bmi.n	476e <HardwareSerialIMXRT::IRQHandler()+0xe2>
			if (head == tail) break;
    4748:	42ab      	cmp	r3, r5
    474a:	d038      	beq.n	47be <HardwareSerialIMXRT::IRQHandler()+0x132>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    474c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    474e:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    4750:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    4752:	429c      	cmp	r4, r3
    4754:	bf98      	it	ls
    4756:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    4758:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    475a:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    475e:	d8ec      	bhi.n	473a <HardwareSerialIMXRT::IRQHandler()+0xae>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    4760:	6a81      	ldr	r1, [r0, #40]	; 0x28
    4762:	5d09      	ldrb	r1, [r1, r4]
    4764:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    4766:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    4768:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    476a:	054c      	lsls	r4, r1, #21
    476c:	d5ec      	bpl.n	4748 <HardwareSerialIMXRT::IRQHandler()+0xbc>
		tx_buffer_tail_ = tail;
    476e:	b299      	uxth	r1, r3
		if (head == tail) {
    4770:	42ab      	cmp	r3, r5
		tx_buffer_tail_ = tail;
    4772:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    4776:	d025      	beq.n	47c4 <HardwareSerialIMXRT::IRQHandler()+0x138>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    4778:	0271      	lsls	r1, r6, #9
    477a:	d516      	bpl.n	47aa <HardwareSerialIMXRT::IRQHandler()+0x11e>
    477c:	6953      	ldr	r3, [r2, #20]
    477e:	025b      	lsls	r3, r3, #9
    4780:	d513      	bpl.n	47aa <HardwareSerialIMXRT::IRQHandler()+0x11e>
		transmitting_ = 0;
    4782:	2100      	movs	r1, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    4784:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    4786:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    478a:	b113      	cbz	r3, 4792 <HardwareSerialIMXRT::IRQHandler()+0x106>
    478c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    478e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    4792:	7e83      	ldrb	r3, [r0, #26]
    4794:	b12b      	cbz	r3, 47a2 <HardwareSerialIMXRT::IRQHandler()+0x116>
			__disable_irq();
    4796:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    4798:	6993      	ldr	r3, [r2, #24]
    479a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    479e:	6193      	str	r3, [r2, #24]
			__enable_irq();
    47a0:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    47a2:	6993      	ldr	r3, [r2, #24]
    47a4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    47a8:	6193      	str	r3, [r2, #24]
}
    47aa:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    47ac:	6953      	ldr	r3, [r2, #20]
    47ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    47b2:	6153      	str	r3, [r2, #20]
    47b4:	e7b4      	b.n	4720 <HardwareSerialIMXRT::IRQHandler()+0x94>
				else avail = rx_buffer_total_size_ + head - tail;
    47b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
    47b8:	1b89      	subs	r1, r1, r6
    47ba:	440d      	add	r5, r1
    47bc:	e7a7      	b.n	470e <HardwareSerialIMXRT::IRQHandler()+0x82>
		tx_buffer_tail_ = tail;
    47be:	b29b      	uxth	r3, r3
    47c0:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    47c4:	6993      	ldr	r3, [r2, #24]
    47c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    47ca:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    47cc:	6993      	ldr	r3, [r2, #24]
    47ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    47d2:	6193      	str	r3, [r2, #24]
    47d4:	e7d0      	b.n	4778 <HardwareSerialIMXRT::IRQHandler()+0xec>
    47d6:	bf00      	nop

000047d8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    47d8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    47da:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    47dc:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    47e0:	4619      	mov	r1, r3
{
    47e2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    47e4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    47e8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    47ec:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    47f0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    47f4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    47f8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    47fa:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    47fe:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4802:	b29b      	uxth	r3, r3
    4804:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    4808:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    480c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    4810:	3101      	adds	r1, #1
    4812:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    4816:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4818:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    481a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    481e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    4820:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    4822:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4824:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    4826:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    482a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    482c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    482e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    4830:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    4832:	d1eb      	bne.n	480c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4834:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4838:	b29b      	uxth	r3, r3
    483a:	f043 030f 	orr.w	r3, r3, #15
    483e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    4842:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4846:	b29b      	uxth	r3, r3
    4848:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    484c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    4850:	bd10      	pop	{r4, pc}
    4852:	bf00      	nop

00004854 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4854:	4b37      	ldr	r3, [pc, #220]	; (4934 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4856:	4a38      	ldr	r2, [pc, #224]	; (4938 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4858:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    485a:	4838      	ldr	r0, [pc, #224]	; (493c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    485c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    4860:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4862:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4864:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4868:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    486c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4870:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4874:	430a      	orrs	r2, r1
    4876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    487a:	f7ff ffad 	bl	47d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    487e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4882:	f7ff ffa9 	bl	47d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    4886:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    488a:	f7ff ffa5 	bl	47d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    488e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4892:	f7ff ffa1 	bl	47d8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    4896:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4898:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    489c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    48a0:	4611      	mov	r1, r2
    48a2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    48a6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    48aa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    48ac:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    48ae:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    48b0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48b2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48b6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48b8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    48ba:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    48be:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48c0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    48c2:	d1ee      	bne.n	48a2 <pwm_init+0x4e>
    48c4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    48c6:	481e      	ldr	r0, [pc, #120]	; (4940 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48c8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48cc:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    48d0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48d2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48d6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    48da:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    48de:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    48e2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    48e4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    48e6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    48e8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    48ea:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    48ee:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    48f0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    48f2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    48f6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    48f8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    48fa:	d1ee      	bne.n	48da <pwm_init+0x86>
    48fc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    48fe:	4811      	ldr	r0, [pc, #68]	; (4944 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4900:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4902:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    4906:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4908:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    490c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    4910:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4914:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4918:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    491a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    491c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    491e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4920:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4922:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4924:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4926:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    492a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    492c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    4930:	d1ee      	bne.n	4910 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    4932:	bd70      	pop	{r4, r5, r6, pc}
    4934:	400fc000 	.word	0x400fc000
    4938:	fc030000 	.word	0xfc030000
    493c:	403dc000 	.word	0x403dc000
    4940:	401e0000 	.word	0x401e0000
    4944:	401e4000 	.word	0x401e4000

00004948 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    4948:	4a07      	ldr	r2, [pc, #28]	; (4968 <rtc_get+0x20>)
    494a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    494c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    494e:	4619      	mov	r1, r3
    4950:	4684      	mov	ip, r0
    4952:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    4954:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    4956:	4299      	cmp	r1, r3
    4958:	d1f9      	bne.n	494e <rtc_get+0x6>
    495a:	4584      	cmp	ip, r0
    495c:	d1f7      	bne.n	494e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    495e:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    4960:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    4964:	4770      	bx	lr
    4966:	bf00      	nop
    4968:	400d4000 	.word	0x400d4000

0000496c <sm_align_pool>:
{
    496c:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    496e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    4972:	b15b      	cbz	r3, 498c <sm_align_pool+0x20>
    4974:	b1ba      	cbz	r2, 49a6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    4976:	4b0f      	ldr	r3, [pc, #60]	; (49b4 <sm_align_pool+0x48>)
    4978:	fba3 1302 	umull	r1, r3, r3, r2
    497c:	08db      	lsrs	r3, r3, #3
    497e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4982:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    4986:	d10a      	bne.n	499e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    4988:	2001      	movs	r0, #1
}
    498a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    498c:	4b09      	ldr	r3, [pc, #36]	; (49b4 <sm_align_pool+0x48>)
    498e:	fba3 1302 	umull	r1, r3, r3, r2
    4992:	08db      	lsrs	r3, r3, #3
    4994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    4998:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    499c:	d001      	beq.n	49a2 <sm_align_pool+0x36>
    499e:	1ad2      	subs	r2, r2, r3
    49a0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    49a2:	2af0      	cmp	r2, #240	; 0xf0
    49a4:	d8f0      	bhi.n	4988 <sm_align_pool+0x1c>
		errno = ENOSPC;
    49a6:	f002 fb23 	bl	6ff0 <__errno>
    49aa:	221c      	movs	r2, #28
    49ac:	4603      	mov	r3, r0
    49ae:	2000      	movs	r0, #0
    49b0:	601a      	str	r2, [r3, #0]
}
    49b2:	bd08      	pop	{r3, pc}
    49b4:	aaaaaaab 	.word	0xaaaaaaab

000049b8 <sm_set_pool>:
{
    49b8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    49ba:	4604      	mov	r4, r0
    49bc:	b338      	cbz	r0, 4a0e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    49be:	b119      	cbz	r1, 49c8 <sm_set_pool+0x10>
    49c0:	fab2 f682 	clz	r6, r2
    49c4:	0976      	lsrs	r6, r6, #5
    49c6:	b9a2      	cbnz	r2, 49f2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    49c8:	6820      	ldr	r0, [r4, #0]
    49ca:	b300      	cbz	r0, 4a0e <sm_set_pool+0x56>
    49cc:	6862      	ldr	r2, [r4, #4]
    49ce:	b1f2      	cbz	r2, 4a0e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    49d0:	4b18      	ldr	r3, [pc, #96]	; (4a34 <sm_set_pool+0x7c>)
    49d2:	4919      	ldr	r1, [pc, #100]	; (4a38 <sm_set_pool+0x80>)
    49d4:	fb02 f303 	mul.w	r3, r2, r3
    49d8:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    49dc:	d317      	bcc.n	4a0e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    49de:	68a3      	ldr	r3, [r4, #8]
    49e0:	b9e3      	cbnz	r3, 4a1c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    49e2:	2200      	movs	r2, #0
			return 1;
    49e4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    49e6:	6022      	str	r2, [r4, #0]
    49e8:	6062      	str	r2, [r4, #4]
    49ea:	60a2      	str	r2, [r4, #8]
    49ec:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    49ee:	4618      	mov	r0, r3
    49f0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    49f2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    49f4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    49f6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    49fa:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    49fc:	f7ff ffb6 	bl	496c <sm_align_pool>
    4a00:	4603      	mov	r3, r0
    4a02:	2800      	cmp	r0, #0
    4a04:	d0f3      	beq.n	49ee <sm_set_pool+0x36>
	if (do_zero) {
    4a06:	b96d      	cbnz	r5, 4a24 <sm_set_pool+0x6c>
	return 1;
    4a08:	2301      	movs	r3, #1
}
    4a0a:	4618      	mov	r0, r3
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    4a0e:	f002 faef 	bl	6ff0 <__errno>
    4a12:	2216      	movs	r2, #22
		return 0;
    4a14:	2300      	movs	r3, #0
		errno = EINVAL;
    4a16:	6002      	str	r2, [r0, #0]
}
    4a18:	4618      	mov	r0, r3
    4a1a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    4a1c:	2100      	movs	r1, #0
    4a1e:	f001 ff37 	bl	6890 <memset>
    4a22:	e7de      	b.n	49e2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    4a24:	6862      	ldr	r2, [r4, #4]
    4a26:	4631      	mov	r1, r6
    4a28:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    4a2a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    4a2c:	f001 ff30 	bl	6890 <memset>
	return 1;
    4a30:	2301      	movs	r3, #1
    4a32:	e7dc      	b.n	49ee <sm_set_pool+0x36>
    4a34:	aaaaaaab 	.word	0xaaaaaaab
    4a38:	15555555 	.word	0x15555555

00004a3c <__aeabi_atexit>:
    4a3c:	4603      	mov	r3, r0
    4a3e:	4608      	mov	r0, r1
    4a40:	4619      	mov	r1, r3
    4a42:	f001 bd69 	b.w	6518 <__cxa_atexit>
    4a46:	bf00      	nop

00004a48 <atol>:
    4a48:	220a      	movs	r2, #10
    4a4a:	2100      	movs	r1, #0
    4a4c:	f001 bd08 	b.w	6460 <strtol>

00004a50 <itoa>:
    4a50:	1e93      	subs	r3, r2, #2
    4a52:	2b22      	cmp	r3, #34	; 0x22
    4a54:	b510      	push	{r4, lr}
    4a56:	460c      	mov	r4, r1
    4a58:	d80c      	bhi.n	4a74 <itoa+0x24>
    4a5a:	2a0a      	cmp	r2, #10
    4a5c:	d003      	beq.n	4a66 <itoa+0x16>
    4a5e:	f001 fd0d 	bl	647c <__utoa>
    4a62:	4620      	mov	r0, r4
    4a64:	bd10      	pop	{r4, pc}
    4a66:	2800      	cmp	r0, #0
    4a68:	daf9      	bge.n	4a5e <itoa+0xe>
    4a6a:	232d      	movs	r3, #45	; 0x2d
    4a6c:	f801 3b01 	strb.w	r3, [r1], #1
    4a70:	4240      	negs	r0, r0
    4a72:	e7f4      	b.n	4a5e <itoa+0xe>
    4a74:	2300      	movs	r3, #0
    4a76:	700b      	strb	r3, [r1, #0]
    4a78:	4618      	mov	r0, r3
    4a7a:	bd10      	pop	{r4, pc}

00004a7c <malloc>:
    4a7c:	4b02      	ldr	r3, [pc, #8]	; (4a88 <malloc+0xc>)
    4a7e:	4601      	mov	r1, r0
    4a80:	6818      	ldr	r0, [r3, #0]
    4a82:	f000 b80b 	b.w	4a9c <_malloc_r>
    4a86:	bf00      	nop
    4a88:	200016c4 	.word	0x200016c4

00004a8c <free>:
    4a8c:	4b02      	ldr	r3, [pc, #8]	; (4a98 <free+0xc>)
    4a8e:	4601      	mov	r1, r0
    4a90:	6818      	ldr	r0, [r3, #0]
    4a92:	f002 bdc7 	b.w	7624 <_free_r>
    4a96:	bf00      	nop
    4a98:	200016c4 	.word	0x200016c4

00004a9c <_malloc_r>:
    4a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aa0:	f101 060b 	add.w	r6, r1, #11
    4aa4:	2e16      	cmp	r6, #22
    4aa6:	b083      	sub	sp, #12
    4aa8:	4604      	mov	r4, r0
    4aaa:	d824      	bhi.n	4af6 <_malloc_r+0x5a>
    4aac:	2910      	cmp	r1, #16
    4aae:	f200 80ba 	bhi.w	4c26 <_malloc_r+0x18a>
    4ab2:	f000 faa3 	bl	4ffc <__malloc_lock>
    4ab6:	2610      	movs	r6, #16
    4ab8:	2218      	movs	r2, #24
    4aba:	2002      	movs	r0, #2
    4abc:	4fb5      	ldr	r7, [pc, #724]	; (4d94 <_malloc_r+0x2f8>)
    4abe:	443a      	add	r2, r7
    4ac0:	f1a2 0108 	sub.w	r1, r2, #8
    4ac4:	6853      	ldr	r3, [r2, #4]
    4ac6:	428b      	cmp	r3, r1
    4ac8:	f000 80ba 	beq.w	4c40 <_malloc_r+0x1a4>
    4acc:	685a      	ldr	r2, [r3, #4]
    4ace:	68d9      	ldr	r1, [r3, #12]
    4ad0:	f022 0203 	bic.w	r2, r2, #3
    4ad4:	441a      	add	r2, r3
    4ad6:	689d      	ldr	r5, [r3, #8]
    4ad8:	60e9      	str	r1, [r5, #12]
    4ada:	608d      	str	r5, [r1, #8]
    4adc:	6851      	ldr	r1, [r2, #4]
    4ade:	f041 0101 	orr.w	r1, r1, #1
    4ae2:	4620      	mov	r0, r4
    4ae4:	6051      	str	r1, [r2, #4]
    4ae6:	f103 0508 	add.w	r5, r3, #8
    4aea:	f000 fa8d 	bl	5008 <__malloc_unlock>
    4aee:	4628      	mov	r0, r5
    4af0:	b003      	add	sp, #12
    4af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4af6:	f036 0607 	bics.w	r6, r6, #7
    4afa:	f100 8094 	bmi.w	4c26 <_malloc_r+0x18a>
    4afe:	42b1      	cmp	r1, r6
    4b00:	f200 8091 	bhi.w	4c26 <_malloc_r+0x18a>
    4b04:	f000 fa7a 	bl	4ffc <__malloc_lock>
    4b08:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    4b0c:	f0c0 819a 	bcc.w	4e44 <_malloc_r+0x3a8>
    4b10:	0a73      	lsrs	r3, r6, #9
    4b12:	f000 808f 	beq.w	4c34 <_malloc_r+0x198>
    4b16:	2b04      	cmp	r3, #4
    4b18:	f200 816f 	bhi.w	4dfa <_malloc_r+0x35e>
    4b1c:	09b3      	lsrs	r3, r6, #6
    4b1e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    4b22:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    4b26:	00c3      	lsls	r3, r0, #3
    4b28:	4f9a      	ldr	r7, [pc, #616]	; (4d94 <_malloc_r+0x2f8>)
    4b2a:	443b      	add	r3, r7
    4b2c:	f1a3 0508 	sub.w	r5, r3, #8
    4b30:	685b      	ldr	r3, [r3, #4]
    4b32:	429d      	cmp	r5, r3
    4b34:	d106      	bne.n	4b44 <_malloc_r+0xa8>
    4b36:	e00c      	b.n	4b52 <_malloc_r+0xb6>
    4b38:	2900      	cmp	r1, #0
    4b3a:	f280 8127 	bge.w	4d8c <_malloc_r+0x2f0>
    4b3e:	68db      	ldr	r3, [r3, #12]
    4b40:	429d      	cmp	r5, r3
    4b42:	d006      	beq.n	4b52 <_malloc_r+0xb6>
    4b44:	685a      	ldr	r2, [r3, #4]
    4b46:	f022 0203 	bic.w	r2, r2, #3
    4b4a:	1b91      	subs	r1, r2, r6
    4b4c:	290f      	cmp	r1, #15
    4b4e:	ddf3      	ble.n	4b38 <_malloc_r+0x9c>
    4b50:	4660      	mov	r0, ip
    4b52:	693d      	ldr	r5, [r7, #16]
    4b54:	f8df c250 	ldr.w	ip, [pc, #592]	; 4da8 <_malloc_r+0x30c>
    4b58:	4565      	cmp	r5, ip
    4b5a:	d07c      	beq.n	4c56 <_malloc_r+0x1ba>
    4b5c:	686a      	ldr	r2, [r5, #4]
    4b5e:	f022 0203 	bic.w	r2, r2, #3
    4b62:	1b93      	subs	r3, r2, r6
    4b64:	2b0f      	cmp	r3, #15
    4b66:	f300 817b 	bgt.w	4e60 <_malloc_r+0x3c4>
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    4b70:	f280 816c 	bge.w	4e4c <_malloc_r+0x3b0>
    4b74:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    4b78:	f080 811a 	bcs.w	4db0 <_malloc_r+0x314>
    4b7c:	08d3      	lsrs	r3, r2, #3
    4b7e:	6879      	ldr	r1, [r7, #4]
    4b80:	3301      	adds	r3, #1
    4b82:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    4b86:	2201      	movs	r2, #1
    4b88:	fa02 f20e 	lsl.w	r2, r2, lr
    4b8c:	430a      	orrs	r2, r1
    4b8e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    4b92:	f8c5 e008 	str.w	lr, [r5, #8]
    4b96:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    4b9a:	3908      	subs	r1, #8
    4b9c:	60e9      	str	r1, [r5, #12]
    4b9e:	607a      	str	r2, [r7, #4]
    4ba0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    4ba4:	f8ce 500c 	str.w	r5, [lr, #12]
    4ba8:	1083      	asrs	r3, r0, #2
    4baa:	2101      	movs	r1, #1
    4bac:	4099      	lsls	r1, r3
    4bae:	4291      	cmp	r1, r2
    4bb0:	d857      	bhi.n	4c62 <_malloc_r+0x1c6>
    4bb2:	4211      	tst	r1, r2
    4bb4:	d106      	bne.n	4bc4 <_malloc_r+0x128>
    4bb6:	f020 0003 	bic.w	r0, r0, #3
    4bba:	0049      	lsls	r1, r1, #1
    4bbc:	4211      	tst	r1, r2
    4bbe:	f100 0004 	add.w	r0, r0, #4
    4bc2:	d0fa      	beq.n	4bba <_malloc_r+0x11e>
    4bc4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    4bc8:	464d      	mov	r5, r9
    4bca:	4686      	mov	lr, r0
    4bcc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    4bd0:	4545      	cmp	r5, r8
    4bd2:	d108      	bne.n	4be6 <_malloc_r+0x14a>
    4bd4:	e11d      	b.n	4e12 <_malloc_r+0x376>
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	f280 8124 	bge.w	4e24 <_malloc_r+0x388>
    4bdc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    4be0:	4545      	cmp	r5, r8
    4be2:	f000 8116 	beq.w	4e12 <_malloc_r+0x376>
    4be6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4bea:	f022 0203 	bic.w	r2, r2, #3
    4bee:	1b93      	subs	r3, r2, r6
    4bf0:	2b0f      	cmp	r3, #15
    4bf2:	ddf0      	ble.n	4bd6 <_malloc_r+0x13a>
    4bf4:	4620      	mov	r0, r4
    4bf6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    4bfa:	eb08 0106 	add.w	r1, r8, r6
    4bfe:	f046 0601 	orr.w	r6, r6, #1
    4c02:	f8c8 6004 	str.w	r6, [r8, #4]
    4c06:	60ec      	str	r4, [r5, #12]
    4c08:	60a5      	str	r5, [r4, #8]
    4c0a:	f043 0401 	orr.w	r4, r3, #1
    4c0e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4c12:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4c16:	604c      	str	r4, [r1, #4]
    4c18:	f848 3002 	str.w	r3, [r8, r2]
    4c1c:	f000 f9f4 	bl	5008 <__malloc_unlock>
    4c20:	f108 0508 	add.w	r5, r8, #8
    4c24:	e002      	b.n	4c2c <_malloc_r+0x190>
    4c26:	230c      	movs	r3, #12
    4c28:	6023      	str	r3, [r4, #0]
    4c2a:	2500      	movs	r5, #0
    4c2c:	4628      	mov	r0, r5
    4c2e:	b003      	add	sp, #12
    4c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c34:	f44f 7300 	mov.w	r3, #512	; 0x200
    4c38:	2040      	movs	r0, #64	; 0x40
    4c3a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    4c3e:	e773      	b.n	4b28 <_malloc_r+0x8c>
    4c40:	68d3      	ldr	r3, [r2, #12]
    4c42:	429a      	cmp	r2, r3
    4c44:	bf08      	it	eq
    4c46:	3002      	addeq	r0, #2
    4c48:	f47f af40 	bne.w	4acc <_malloc_r+0x30>
    4c4c:	693d      	ldr	r5, [r7, #16]
    4c4e:	f8df c158 	ldr.w	ip, [pc, #344]	; 4da8 <_malloc_r+0x30c>
    4c52:	4565      	cmp	r5, ip
    4c54:	d182      	bne.n	4b5c <_malloc_r+0xc0>
    4c56:	687a      	ldr	r2, [r7, #4]
    4c58:	1083      	asrs	r3, r0, #2
    4c5a:	2101      	movs	r1, #1
    4c5c:	4099      	lsls	r1, r3
    4c5e:	4291      	cmp	r1, r2
    4c60:	d9a7      	bls.n	4bb2 <_malloc_r+0x116>
    4c62:	68bd      	ldr	r5, [r7, #8]
    4c64:	686b      	ldr	r3, [r5, #4]
    4c66:	f023 0903 	bic.w	r9, r3, #3
    4c6a:	454e      	cmp	r6, r9
    4c6c:	d803      	bhi.n	4c76 <_malloc_r+0x1da>
    4c6e:	eba9 0306 	sub.w	r3, r9, r6
    4c72:	2b0f      	cmp	r3, #15
    4c74:	dc7a      	bgt.n	4d6c <_malloc_r+0x2d0>
    4c76:	f8df b134 	ldr.w	fp, [pc, #308]	; 4dac <_malloc_r+0x310>
    4c7a:	4b47      	ldr	r3, [pc, #284]	; (4d98 <_malloc_r+0x2fc>)
    4c7c:	f8db 2000 	ldr.w	r2, [fp]
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	3201      	adds	r2, #1
    4c84:	4433      	add	r3, r6
    4c86:	eb05 0a09 	add.w	sl, r5, r9
    4c8a:	f000 8133 	beq.w	4ef4 <_malloc_r+0x458>
    4c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    4c92:	330f      	adds	r3, #15
    4c94:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    4c98:	f028 080f 	bic.w	r8, r8, #15
    4c9c:	4641      	mov	r1, r8
    4c9e:	4620      	mov	r0, r4
    4ca0:	f002 f97e 	bl	6fa0 <_sbrk_r>
    4ca4:	1c41      	adds	r1, r0, #1
    4ca6:	4602      	mov	r2, r0
    4ca8:	f000 80f3 	beq.w	4e92 <_malloc_r+0x3f6>
    4cac:	4582      	cmp	sl, r0
    4cae:	f200 80ee 	bhi.w	4e8e <_malloc_r+0x3f2>
    4cb2:	4b3a      	ldr	r3, [pc, #232]	; (4d9c <_malloc_r+0x300>)
    4cb4:	6819      	ldr	r1, [r3, #0]
    4cb6:	4441      	add	r1, r8
    4cb8:	6019      	str	r1, [r3, #0]
    4cba:	4608      	mov	r0, r1
    4cbc:	f000 814e 	beq.w	4f5c <_malloc_r+0x4c0>
    4cc0:	f8db 1000 	ldr.w	r1, [fp]
    4cc4:	9301      	str	r3, [sp, #4]
    4cc6:	3101      	adds	r1, #1
    4cc8:	bf1b      	ittet	ne
    4cca:	eba2 010a 	subne.w	r1, r2, sl
    4cce:	1809      	addne	r1, r1, r0
    4cd0:	f8cb 2000 	streq.w	r2, [fp]
    4cd4:	6019      	strne	r1, [r3, #0]
    4cd6:	f012 0b07 	ands.w	fp, r2, #7
    4cda:	f000 8117 	beq.w	4f0c <_malloc_r+0x470>
    4cde:	f1cb 0108 	rsb	r1, fp, #8
    4ce2:	440a      	add	r2, r1
    4ce4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    4ce8:	4490      	add	r8, r2
    4cea:	3108      	adds	r1, #8
    4cec:	eba1 0108 	sub.w	r1, r1, r8
    4cf0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4cf4:	4651      	mov	r1, sl
    4cf6:	4620      	mov	r0, r4
    4cf8:	9200      	str	r2, [sp, #0]
    4cfa:	f002 f951 	bl	6fa0 <_sbrk_r>
    4cfe:	1c42      	adds	r2, r0, #1
    4d00:	e9dd 2300 	ldrd	r2, r3, [sp]
    4d04:	f000 814f 	beq.w	4fa6 <_malloc_r+0x50a>
    4d08:	1a80      	subs	r0, r0, r2
    4d0a:	eb00 080a 	add.w	r8, r0, sl
    4d0e:	6819      	ldr	r1, [r3, #0]
    4d10:	60ba      	str	r2, [r7, #8]
    4d12:	f048 0001 	orr.w	r0, r8, #1
    4d16:	4451      	add	r1, sl
    4d18:	42bd      	cmp	r5, r7
    4d1a:	6050      	str	r0, [r2, #4]
    4d1c:	6019      	str	r1, [r3, #0]
    4d1e:	f000 8129 	beq.w	4f74 <_malloc_r+0x4d8>
    4d22:	f1b9 0f0f 	cmp.w	r9, #15
    4d26:	f240 8127 	bls.w	4f78 <_malloc_r+0x4dc>
    4d2a:	6868      	ldr	r0, [r5, #4]
    4d2c:	f1a9 0c0c 	sub.w	ip, r9, #12
    4d30:	f02c 0c07 	bic.w	ip, ip, #7
    4d34:	f000 0001 	and.w	r0, r0, #1
    4d38:	ea40 000c 	orr.w	r0, r0, ip
    4d3c:	6068      	str	r0, [r5, #4]
    4d3e:	f04f 0e05 	mov.w	lr, #5
    4d42:	eb05 000c 	add.w	r0, r5, ip
    4d46:	f1bc 0f0f 	cmp.w	ip, #15
    4d4a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    4d4e:	f200 8132 	bhi.w	4fb6 <_malloc_r+0x51a>
    4d52:	6850      	ldr	r0, [r2, #4]
    4d54:	4615      	mov	r5, r2
    4d56:	4b12      	ldr	r3, [pc, #72]	; (4da0 <_malloc_r+0x304>)
    4d58:	681a      	ldr	r2, [r3, #0]
    4d5a:	428a      	cmp	r2, r1
    4d5c:	bf38      	it	cc
    4d5e:	6019      	strcc	r1, [r3, #0]
    4d60:	4b10      	ldr	r3, [pc, #64]	; (4da4 <_malloc_r+0x308>)
    4d62:	681a      	ldr	r2, [r3, #0]
    4d64:	428a      	cmp	r2, r1
    4d66:	bf38      	it	cc
    4d68:	6019      	strcc	r1, [r3, #0]
    4d6a:	e094      	b.n	4e96 <_malloc_r+0x3fa>
    4d6c:	19aa      	adds	r2, r5, r6
    4d6e:	f043 0301 	orr.w	r3, r3, #1
    4d72:	f046 0601 	orr.w	r6, r6, #1
    4d76:	606e      	str	r6, [r5, #4]
    4d78:	4620      	mov	r0, r4
    4d7a:	60ba      	str	r2, [r7, #8]
    4d7c:	6053      	str	r3, [r2, #4]
    4d7e:	f000 f943 	bl	5008 <__malloc_unlock>
    4d82:	3508      	adds	r5, #8
    4d84:	4628      	mov	r0, r5
    4d86:	b003      	add	sp, #12
    4d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d8c:	68d9      	ldr	r1, [r3, #12]
    4d8e:	441a      	add	r2, r3
    4d90:	e6a1      	b.n	4ad6 <_malloc_r+0x3a>
    4d92:	bf00      	nop
    4d94:	200012a8 	.word	0x200012a8
    4d98:	20001f08 	.word	0x20001f08
    4d9c:	20001ed8 	.word	0x20001ed8
    4da0:	20001f00 	.word	0x20001f00
    4da4:	20001f04 	.word	0x20001f04
    4da8:	200012b0 	.word	0x200012b0
    4dac:	200016b0 	.word	0x200016b0
    4db0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    4db4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    4db8:	d363      	bcc.n	4e82 <_malloc_r+0x3e6>
    4dba:	2b14      	cmp	r3, #20
    4dbc:	f200 80b7 	bhi.w	4f2e <_malloc_r+0x492>
    4dc0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    4dc4:	00c9      	lsls	r1, r1, #3
    4dc6:	335b      	adds	r3, #91	; 0x5b
    4dc8:	eb07 0e01 	add.w	lr, r7, r1
    4dcc:	5879      	ldr	r1, [r7, r1]
    4dce:	f1ae 0e08 	sub.w	lr, lr, #8
    4dd2:	458e      	cmp	lr, r1
    4dd4:	f000 8091 	beq.w	4efa <_malloc_r+0x45e>
    4dd8:	684b      	ldr	r3, [r1, #4]
    4dda:	f023 0303 	bic.w	r3, r3, #3
    4dde:	4293      	cmp	r3, r2
    4de0:	d902      	bls.n	4de8 <_malloc_r+0x34c>
    4de2:	6889      	ldr	r1, [r1, #8]
    4de4:	458e      	cmp	lr, r1
    4de6:	d1f7      	bne.n	4dd8 <_malloc_r+0x33c>
    4de8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    4dec:	687a      	ldr	r2, [r7, #4]
    4dee:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    4df2:	f8ce 5008 	str.w	r5, [lr, #8]
    4df6:	60cd      	str	r5, [r1, #12]
    4df8:	e6d6      	b.n	4ba8 <_malloc_r+0x10c>
    4dfa:	2b14      	cmp	r3, #20
    4dfc:	d959      	bls.n	4eb2 <_malloc_r+0x416>
    4dfe:	2b54      	cmp	r3, #84	; 0x54
    4e00:	f200 809d 	bhi.w	4f3e <_malloc_r+0x4a2>
    4e04:	0b33      	lsrs	r3, r6, #12
    4e06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    4e0a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    4e0e:	00c3      	lsls	r3, r0, #3
    4e10:	e68a      	b.n	4b28 <_malloc_r+0x8c>
    4e12:	f10e 0e01 	add.w	lr, lr, #1
    4e16:	f01e 0f03 	tst.w	lr, #3
    4e1a:	f105 0508 	add.w	r5, r5, #8
    4e1e:	f47f aed5 	bne.w	4bcc <_malloc_r+0x130>
    4e22:	e051      	b.n	4ec8 <_malloc_r+0x42c>
    4e24:	4442      	add	r2, r8
    4e26:	4645      	mov	r5, r8
    4e28:	6853      	ldr	r3, [r2, #4]
    4e2a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4e2e:	f043 0301 	orr.w	r3, r3, #1
    4e32:	6053      	str	r3, [r2, #4]
    4e34:	f855 3f08 	ldr.w	r3, [r5, #8]!
    4e38:	4620      	mov	r0, r4
    4e3a:	60d9      	str	r1, [r3, #12]
    4e3c:	608b      	str	r3, [r1, #8]
    4e3e:	f000 f8e3 	bl	5008 <__malloc_unlock>
    4e42:	e6f3      	b.n	4c2c <_malloc_r+0x190>
    4e44:	08f0      	lsrs	r0, r6, #3
    4e46:	f106 0208 	add.w	r2, r6, #8
    4e4a:	e637      	b.n	4abc <_malloc_r+0x20>
    4e4c:	442a      	add	r2, r5
    4e4e:	4620      	mov	r0, r4
    4e50:	6853      	ldr	r3, [r2, #4]
    4e52:	f043 0301 	orr.w	r3, r3, #1
    4e56:	6053      	str	r3, [r2, #4]
    4e58:	3508      	adds	r5, #8
    4e5a:	f000 f8d5 	bl	5008 <__malloc_unlock>
    4e5e:	e6e5      	b.n	4c2c <_malloc_r+0x190>
    4e60:	19a9      	adds	r1, r5, r6
    4e62:	4620      	mov	r0, r4
    4e64:	f046 0601 	orr.w	r6, r6, #1
    4e68:	f043 0401 	orr.w	r4, r3, #1
    4e6c:	606e      	str	r6, [r5, #4]
    4e6e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    4e72:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    4e76:	604c      	str	r4, [r1, #4]
    4e78:	50ab      	str	r3, [r5, r2]
    4e7a:	f000 f8c5 	bl	5008 <__malloc_unlock>
    4e7e:	3508      	adds	r5, #8
    4e80:	e6d4      	b.n	4c2c <_malloc_r+0x190>
    4e82:	0993      	lsrs	r3, r2, #6
    4e84:	f103 0139 	add.w	r1, r3, #57	; 0x39
    4e88:	00c9      	lsls	r1, r1, #3
    4e8a:	3338      	adds	r3, #56	; 0x38
    4e8c:	e79c      	b.n	4dc8 <_malloc_r+0x32c>
    4e8e:	42bd      	cmp	r5, r7
    4e90:	d05f      	beq.n	4f52 <_malloc_r+0x4b6>
    4e92:	68bd      	ldr	r5, [r7, #8]
    4e94:	6868      	ldr	r0, [r5, #4]
    4e96:	f020 0803 	bic.w	r8, r0, #3
    4e9a:	4546      	cmp	r6, r8
    4e9c:	eba8 0306 	sub.w	r3, r8, r6
    4ea0:	d802      	bhi.n	4ea8 <_malloc_r+0x40c>
    4ea2:	2b0f      	cmp	r3, #15
    4ea4:	f73f af62 	bgt.w	4d6c <_malloc_r+0x2d0>
    4ea8:	4620      	mov	r0, r4
    4eaa:	f000 f8ad 	bl	5008 <__malloc_unlock>
    4eae:	2500      	movs	r5, #0
    4eb0:	e6bc      	b.n	4c2c <_malloc_r+0x190>
    4eb2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    4eb6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    4eba:	00c3      	lsls	r3, r0, #3
    4ebc:	e634      	b.n	4b28 <_malloc_r+0x8c>
    4ebe:	f859 3908 	ldr.w	r3, [r9], #-8
    4ec2:	454b      	cmp	r3, r9
    4ec4:	f040 8096 	bne.w	4ff4 <_malloc_r+0x558>
    4ec8:	f010 0f03 	tst.w	r0, #3
    4ecc:	f100 30ff 	add.w	r0, r0, #4294967295
    4ed0:	d1f5      	bne.n	4ebe <_malloc_r+0x422>
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	ea23 0301 	bic.w	r3, r3, r1
    4ed8:	607b      	str	r3, [r7, #4]
    4eda:	0049      	lsls	r1, r1, #1
    4edc:	4299      	cmp	r1, r3
    4ede:	f63f aec0 	bhi.w	4c62 <_malloc_r+0x1c6>
    4ee2:	b919      	cbnz	r1, 4eec <_malloc_r+0x450>
    4ee4:	e6bd      	b.n	4c62 <_malloc_r+0x1c6>
    4ee6:	0049      	lsls	r1, r1, #1
    4ee8:	f10e 0e04 	add.w	lr, lr, #4
    4eec:	4219      	tst	r1, r3
    4eee:	d0fa      	beq.n	4ee6 <_malloc_r+0x44a>
    4ef0:	4670      	mov	r0, lr
    4ef2:	e667      	b.n	4bc4 <_malloc_r+0x128>
    4ef4:	f103 0810 	add.w	r8, r3, #16
    4ef8:	e6d0      	b.n	4c9c <_malloc_r+0x200>
    4efa:	109a      	asrs	r2, r3, #2
    4efc:	f04f 0801 	mov.w	r8, #1
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	fa08 f202 	lsl.w	r2, r8, r2
    4f06:	431a      	orrs	r2, r3
    4f08:	607a      	str	r2, [r7, #4]
    4f0a:	e770      	b.n	4dee <_malloc_r+0x352>
    4f0c:	eb02 0108 	add.w	r1, r2, r8
    4f10:	4249      	negs	r1, r1
    4f12:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    4f16:	4651      	mov	r1, sl
    4f18:	4620      	mov	r0, r4
    4f1a:	9200      	str	r2, [sp, #0]
    4f1c:	f002 f840 	bl	6fa0 <_sbrk_r>
    4f20:	1c43      	adds	r3, r0, #1
    4f22:	e9dd 2300 	ldrd	r2, r3, [sp]
    4f26:	f47f aeef 	bne.w	4d08 <_malloc_r+0x26c>
    4f2a:	46da      	mov	sl, fp
    4f2c:	e6ef      	b.n	4d0e <_malloc_r+0x272>
    4f2e:	2b54      	cmp	r3, #84	; 0x54
    4f30:	d825      	bhi.n	4f7e <_malloc_r+0x4e2>
    4f32:	0b13      	lsrs	r3, r2, #12
    4f34:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    4f38:	00c9      	lsls	r1, r1, #3
    4f3a:	336e      	adds	r3, #110	; 0x6e
    4f3c:	e744      	b.n	4dc8 <_malloc_r+0x32c>
    4f3e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4f42:	d825      	bhi.n	4f90 <_malloc_r+0x4f4>
    4f44:	0bf3      	lsrs	r3, r6, #15
    4f46:	f103 0078 	add.w	r0, r3, #120	; 0x78
    4f4a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    4f4e:	00c3      	lsls	r3, r0, #3
    4f50:	e5ea      	b.n	4b28 <_malloc_r+0x8c>
    4f52:	4b29      	ldr	r3, [pc, #164]	; (4ff8 <_malloc_r+0x55c>)
    4f54:	6818      	ldr	r0, [r3, #0]
    4f56:	4440      	add	r0, r8
    4f58:	6018      	str	r0, [r3, #0]
    4f5a:	e6b1      	b.n	4cc0 <_malloc_r+0x224>
    4f5c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    4f60:	f1bc 0f00 	cmp.w	ip, #0
    4f64:	f47f aeac 	bne.w	4cc0 <_malloc_r+0x224>
    4f68:	68bd      	ldr	r5, [r7, #8]
    4f6a:	44c8      	add	r8, r9
    4f6c:	f048 0001 	orr.w	r0, r8, #1
    4f70:	6068      	str	r0, [r5, #4]
    4f72:	e6f0      	b.n	4d56 <_malloc_r+0x2ba>
    4f74:	4615      	mov	r5, r2
    4f76:	e6ee      	b.n	4d56 <_malloc_r+0x2ba>
    4f78:	2301      	movs	r3, #1
    4f7a:	6053      	str	r3, [r2, #4]
    4f7c:	e794      	b.n	4ea8 <_malloc_r+0x40c>
    4f7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4f82:	d823      	bhi.n	4fcc <_malloc_r+0x530>
    4f84:	0bd3      	lsrs	r3, r2, #15
    4f86:	f103 0178 	add.w	r1, r3, #120	; 0x78
    4f8a:	00c9      	lsls	r1, r1, #3
    4f8c:	3377      	adds	r3, #119	; 0x77
    4f8e:	e71b      	b.n	4dc8 <_malloc_r+0x32c>
    4f90:	f240 5254 	movw	r2, #1364	; 0x554
    4f94:	4293      	cmp	r3, r2
    4f96:	d823      	bhi.n	4fe0 <_malloc_r+0x544>
    4f98:	0cb3      	lsrs	r3, r6, #18
    4f9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    4f9e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    4fa2:	00c3      	lsls	r3, r0, #3
    4fa4:	e5c0      	b.n	4b28 <_malloc_r+0x8c>
    4fa6:	f1ab 0b08 	sub.w	fp, fp, #8
    4faa:	44d8      	add	r8, fp
    4fac:	eba8 0802 	sub.w	r8, r8, r2
    4fb0:	f04f 0a00 	mov.w	sl, #0
    4fb4:	e6ab      	b.n	4d0e <_malloc_r+0x272>
    4fb6:	f105 0108 	add.w	r1, r5, #8
    4fba:	4620      	mov	r0, r4
    4fbc:	9300      	str	r3, [sp, #0]
    4fbe:	f002 fb31 	bl	7624 <_free_r>
    4fc2:	68bd      	ldr	r5, [r7, #8]
    4fc4:	9b00      	ldr	r3, [sp, #0]
    4fc6:	6868      	ldr	r0, [r5, #4]
    4fc8:	6819      	ldr	r1, [r3, #0]
    4fca:	e6c4      	b.n	4d56 <_malloc_r+0x2ba>
    4fcc:	f240 5154 	movw	r1, #1364	; 0x554
    4fd0:	428b      	cmp	r3, r1
    4fd2:	d80b      	bhi.n	4fec <_malloc_r+0x550>
    4fd4:	0c93      	lsrs	r3, r2, #18
    4fd6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    4fda:	00c9      	lsls	r1, r1, #3
    4fdc:	337c      	adds	r3, #124	; 0x7c
    4fde:	e6f3      	b.n	4dc8 <_malloc_r+0x32c>
    4fe0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    4fe4:	207f      	movs	r0, #127	; 0x7f
    4fe6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    4fea:	e59d      	b.n	4b28 <_malloc_r+0x8c>
    4fec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    4ff0:	237e      	movs	r3, #126	; 0x7e
    4ff2:	e6e9      	b.n	4dc8 <_malloc_r+0x32c>
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	e770      	b.n	4eda <_malloc_r+0x43e>
    4ff8:	20001ed8 	.word	0x20001ed8

00004ffc <__malloc_lock>:
    4ffc:	4801      	ldr	r0, [pc, #4]	; (5004 <__malloc_lock+0x8>)
    4ffe:	f002 b825 	b.w	704c <__retarget_lock_acquire_recursive>
    5002:	bf00      	nop
    5004:	20001ed0 	.word	0x20001ed0

00005008 <__malloc_unlock>:
    5008:	4801      	ldr	r0, [pc, #4]	; (5010 <__malloc_unlock+0x8>)
    500a:	f002 b821 	b.w	7050 <__retarget_lock_release_recursive>
    500e:	bf00      	nop
    5010:	20001ed0 	.word	0x20001ed0

00005014 <realloc>:
    5014:	b410      	push	{r4}
    5016:	4c04      	ldr	r4, [pc, #16]	; (5028 <realloc+0x14>)
    5018:	4603      	mov	r3, r0
    501a:	460a      	mov	r2, r1
    501c:	6820      	ldr	r0, [r4, #0]
    501e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5022:	4619      	mov	r1, r3
    5024:	f000 b802 	b.w	502c <_realloc_r>
    5028:	200016c4 	.word	0x200016c4

0000502c <_realloc_r>:
    502c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5030:	4617      	mov	r7, r2
    5032:	2900      	cmp	r1, #0
    5034:	f000 8098 	beq.w	5168 <_realloc_r+0x13c>
    5038:	460c      	mov	r4, r1
    503a:	f107 050b 	add.w	r5, r7, #11
    503e:	4680      	mov	r8, r0
    5040:	f7ff ffdc 	bl	4ffc <__malloc_lock>
    5044:	2d16      	cmp	r5, #22
    5046:	f854 1c04 	ldr.w	r1, [r4, #-4]
    504a:	d85b      	bhi.n	5104 <_realloc_r+0xd8>
    504c:	2510      	movs	r5, #16
    504e:	462a      	mov	r2, r5
    5050:	42af      	cmp	r7, r5
    5052:	d85c      	bhi.n	510e <_realloc_r+0xe2>
    5054:	f021 0603 	bic.w	r6, r1, #3
    5058:	4296      	cmp	r6, r2
    505a:	f1a4 0908 	sub.w	r9, r4, #8
    505e:	da62      	bge.n	5126 <_realloc_r+0xfa>
    5060:	4bbc      	ldr	r3, [pc, #752]	; (5354 <_realloc_r+0x328>)
    5062:	f8d3 c008 	ldr.w	ip, [r3, #8]
    5066:	eb09 0006 	add.w	r0, r9, r6
    506a:	4584      	cmp	ip, r0
    506c:	f000 8097 	beq.w	519e <_realloc_r+0x172>
    5070:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5074:	f02c 0301 	bic.w	r3, ip, #1
    5078:	4403      	add	r3, r0
    507a:	685b      	ldr	r3, [r3, #4]
    507c:	07db      	lsls	r3, r3, #31
    507e:	d468      	bmi.n	5152 <_realloc_r+0x126>
    5080:	f02c 0c03 	bic.w	ip, ip, #3
    5084:	eb06 030c 	add.w	r3, r6, ip
    5088:	4293      	cmp	r3, r2
    508a:	da47      	bge.n	511c <_realloc_r+0xf0>
    508c:	07cb      	lsls	r3, r1, #31
    508e:	d410      	bmi.n	50b2 <_realloc_r+0x86>
    5090:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5094:	eba9 0a03 	sub.w	sl, r9, r3
    5098:	f8da 3004 	ldr.w	r3, [sl, #4]
    509c:	f023 0103 	bic.w	r1, r3, #3
    50a0:	448c      	add	ip, r1
    50a2:	44b4      	add	ip, r6
    50a4:	4594      	cmp	ip, r2
    50a6:	f280 8111 	bge.w	52cc <_realloc_r+0x2a0>
    50aa:	1873      	adds	r3, r6, r1
    50ac:	4293      	cmp	r3, r2
    50ae:	f280 80e8 	bge.w	5282 <_realloc_r+0x256>
    50b2:	4639      	mov	r1, r7
    50b4:	4640      	mov	r0, r8
    50b6:	f7ff fcf1 	bl	4a9c <_malloc_r>
    50ba:	4607      	mov	r7, r0
    50bc:	b1e0      	cbz	r0, 50f8 <_realloc_r+0xcc>
    50be:	f854 3c04 	ldr.w	r3, [r4, #-4]
    50c2:	f023 0301 	bic.w	r3, r3, #1
    50c6:	444b      	add	r3, r9
    50c8:	f1a0 0208 	sub.w	r2, r0, #8
    50cc:	4293      	cmp	r3, r2
    50ce:	f000 80d2 	beq.w	5276 <_realloc_r+0x24a>
    50d2:	1f32      	subs	r2, r6, #4
    50d4:	2a24      	cmp	r2, #36	; 0x24
    50d6:	f200 80f5 	bhi.w	52c4 <_realloc_r+0x298>
    50da:	2a13      	cmp	r2, #19
    50dc:	f200 80ac 	bhi.w	5238 <_realloc_r+0x20c>
    50e0:	4603      	mov	r3, r0
    50e2:	4622      	mov	r2, r4
    50e4:	6811      	ldr	r1, [r2, #0]
    50e6:	6019      	str	r1, [r3, #0]
    50e8:	6851      	ldr	r1, [r2, #4]
    50ea:	6059      	str	r1, [r3, #4]
    50ec:	6892      	ldr	r2, [r2, #8]
    50ee:	609a      	str	r2, [r3, #8]
    50f0:	4621      	mov	r1, r4
    50f2:	4640      	mov	r0, r8
    50f4:	f002 fa96 	bl	7624 <_free_r>
    50f8:	4640      	mov	r0, r8
    50fa:	f7ff ff85 	bl	5008 <__malloc_unlock>
    50fe:	4638      	mov	r0, r7
    5100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5104:	f025 0507 	bic.w	r5, r5, #7
    5108:	2d00      	cmp	r5, #0
    510a:	462a      	mov	r2, r5
    510c:	daa0      	bge.n	5050 <_realloc_r+0x24>
    510e:	230c      	movs	r3, #12
    5110:	f8c8 3000 	str.w	r3, [r8]
    5114:	2700      	movs	r7, #0
    5116:	4638      	mov	r0, r7
    5118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    511c:	461e      	mov	r6, r3
    511e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    5122:	60d3      	str	r3, [r2, #12]
    5124:	609a      	str	r2, [r3, #8]
    5126:	1b73      	subs	r3, r6, r5
    5128:	2b0f      	cmp	r3, #15
    512a:	d822      	bhi.n	5172 <_realloc_r+0x146>
    512c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5130:	f003 0301 	and.w	r3, r3, #1
    5134:	4333      	orrs	r3, r6
    5136:	444e      	add	r6, r9
    5138:	f8c9 3004 	str.w	r3, [r9, #4]
    513c:	6873      	ldr	r3, [r6, #4]
    513e:	f043 0301 	orr.w	r3, r3, #1
    5142:	6073      	str	r3, [r6, #4]
    5144:	4640      	mov	r0, r8
    5146:	4627      	mov	r7, r4
    5148:	f7ff ff5e 	bl	5008 <__malloc_unlock>
    514c:	4638      	mov	r0, r7
    514e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5152:	07c9      	lsls	r1, r1, #31
    5154:	d4ad      	bmi.n	50b2 <_realloc_r+0x86>
    5156:	f854 3c08 	ldr.w	r3, [r4, #-8]
    515a:	eba9 0a03 	sub.w	sl, r9, r3
    515e:	f8da 1004 	ldr.w	r1, [sl, #4]
    5162:	f021 0103 	bic.w	r1, r1, #3
    5166:	e7a0      	b.n	50aa <_realloc_r+0x7e>
    5168:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    516c:	4611      	mov	r1, r2
    516e:	f7ff bc95 	b.w	4a9c <_malloc_r>
    5172:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5176:	eb09 0105 	add.w	r1, r9, r5
    517a:	f002 0201 	and.w	r2, r2, #1
    517e:	444e      	add	r6, r9
    5180:	f043 0301 	orr.w	r3, r3, #1
    5184:	432a      	orrs	r2, r5
    5186:	f8c9 2004 	str.w	r2, [r9, #4]
    518a:	604b      	str	r3, [r1, #4]
    518c:	6873      	ldr	r3, [r6, #4]
    518e:	f043 0301 	orr.w	r3, r3, #1
    5192:	3108      	adds	r1, #8
    5194:	6073      	str	r3, [r6, #4]
    5196:	4640      	mov	r0, r8
    5198:	f002 fa44 	bl	7624 <_free_r>
    519c:	e7d2      	b.n	5144 <_realloc_r+0x118>
    519e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    51a2:	f020 0b03 	bic.w	fp, r0, #3
    51a6:	eb06 0c0b 	add.w	ip, r6, fp
    51aa:	f105 0010 	add.w	r0, r5, #16
    51ae:	4584      	cmp	ip, r0
    51b0:	da4d      	bge.n	524e <_realloc_r+0x222>
    51b2:	07c9      	lsls	r1, r1, #31
    51b4:	f53f af7d 	bmi.w	50b2 <_realloc_r+0x86>
    51b8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    51bc:	eba9 0a01 	sub.w	sl, r9, r1
    51c0:	f8da 1004 	ldr.w	r1, [sl, #4]
    51c4:	f021 0103 	bic.w	r1, r1, #3
    51c8:	448b      	add	fp, r1
    51ca:	44b3      	add	fp, r6
    51cc:	4558      	cmp	r0, fp
    51ce:	f73f af6c 	bgt.w	50aa <_realloc_r+0x7e>
    51d2:	4657      	mov	r7, sl
    51d4:	f8da 100c 	ldr.w	r1, [sl, #12]
    51d8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    51dc:	1f32      	subs	r2, r6, #4
    51de:	2a24      	cmp	r2, #36	; 0x24
    51e0:	60c1      	str	r1, [r0, #12]
    51e2:	6088      	str	r0, [r1, #8]
    51e4:	f200 80db 	bhi.w	539e <_realloc_r+0x372>
    51e8:	2a13      	cmp	r2, #19
    51ea:	f240 80d6 	bls.w	539a <_realloc_r+0x36e>
    51ee:	6821      	ldr	r1, [r4, #0]
    51f0:	f8ca 1008 	str.w	r1, [sl, #8]
    51f4:	6861      	ldr	r1, [r4, #4]
    51f6:	f8ca 100c 	str.w	r1, [sl, #12]
    51fa:	2a1b      	cmp	r2, #27
    51fc:	f200 80df 	bhi.w	53be <_realloc_r+0x392>
    5200:	3408      	adds	r4, #8
    5202:	f10a 0210 	add.w	r2, sl, #16
    5206:	6821      	ldr	r1, [r4, #0]
    5208:	6011      	str	r1, [r2, #0]
    520a:	6861      	ldr	r1, [r4, #4]
    520c:	6051      	str	r1, [r2, #4]
    520e:	68a1      	ldr	r1, [r4, #8]
    5210:	6091      	str	r1, [r2, #8]
    5212:	eb0a 0105 	add.w	r1, sl, r5
    5216:	ebab 0205 	sub.w	r2, fp, r5
    521a:	f042 0201 	orr.w	r2, r2, #1
    521e:	6099      	str	r1, [r3, #8]
    5220:	604a      	str	r2, [r1, #4]
    5222:	f8da 3004 	ldr.w	r3, [sl, #4]
    5226:	f003 0301 	and.w	r3, r3, #1
    522a:	432b      	orrs	r3, r5
    522c:	4640      	mov	r0, r8
    522e:	f8ca 3004 	str.w	r3, [sl, #4]
    5232:	f7ff fee9 	bl	5008 <__malloc_unlock>
    5236:	e76e      	b.n	5116 <_realloc_r+0xea>
    5238:	6823      	ldr	r3, [r4, #0]
    523a:	6003      	str	r3, [r0, #0]
    523c:	6863      	ldr	r3, [r4, #4]
    523e:	6043      	str	r3, [r0, #4]
    5240:	2a1b      	cmp	r2, #27
    5242:	d868      	bhi.n	5316 <_realloc_r+0x2ea>
    5244:	f104 0208 	add.w	r2, r4, #8
    5248:	f100 0308 	add.w	r3, r0, #8
    524c:	e74a      	b.n	50e4 <_realloc_r+0xb8>
    524e:	eb09 0205 	add.w	r2, r9, r5
    5252:	609a      	str	r2, [r3, #8]
    5254:	ebac 0305 	sub.w	r3, ip, r5
    5258:	f043 0301 	orr.w	r3, r3, #1
    525c:	6053      	str	r3, [r2, #4]
    525e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5262:	f003 0301 	and.w	r3, r3, #1
    5266:	432b      	orrs	r3, r5
    5268:	4640      	mov	r0, r8
    526a:	f844 3c04 	str.w	r3, [r4, #-4]
    526e:	f7ff fecb 	bl	5008 <__malloc_unlock>
    5272:	4627      	mov	r7, r4
    5274:	e74f      	b.n	5116 <_realloc_r+0xea>
    5276:	f850 3c04 	ldr.w	r3, [r0, #-4]
    527a:	f023 0303 	bic.w	r3, r3, #3
    527e:	441e      	add	r6, r3
    5280:	e751      	b.n	5126 <_realloc_r+0xfa>
    5282:	4657      	mov	r7, sl
    5284:	f8da 100c 	ldr.w	r1, [sl, #12]
    5288:	f857 0f08 	ldr.w	r0, [r7, #8]!
    528c:	1f32      	subs	r2, r6, #4
    528e:	2a24      	cmp	r2, #36	; 0x24
    5290:	60c1      	str	r1, [r0, #12]
    5292:	6088      	str	r0, [r1, #8]
    5294:	d84c      	bhi.n	5330 <_realloc_r+0x304>
    5296:	2a13      	cmp	r2, #19
    5298:	d948      	bls.n	532c <_realloc_r+0x300>
    529a:	6821      	ldr	r1, [r4, #0]
    529c:	f8ca 1008 	str.w	r1, [sl, #8]
    52a0:	6861      	ldr	r1, [r4, #4]
    52a2:	f8ca 100c 	str.w	r1, [sl, #12]
    52a6:	2a1b      	cmp	r2, #27
    52a8:	d856      	bhi.n	5358 <_realloc_r+0x32c>
    52aa:	3408      	adds	r4, #8
    52ac:	f10a 0210 	add.w	r2, sl, #16
    52b0:	461e      	mov	r6, r3
    52b2:	6823      	ldr	r3, [r4, #0]
    52b4:	6013      	str	r3, [r2, #0]
    52b6:	6863      	ldr	r3, [r4, #4]
    52b8:	6053      	str	r3, [r2, #4]
    52ba:	68a3      	ldr	r3, [r4, #8]
    52bc:	6093      	str	r3, [r2, #8]
    52be:	46d1      	mov	r9, sl
    52c0:	463c      	mov	r4, r7
    52c2:	e730      	b.n	5126 <_realloc_r+0xfa>
    52c4:	4621      	mov	r1, r4
    52c6:	f001 fa67 	bl	6798 <memmove>
    52ca:	e711      	b.n	50f0 <_realloc_r+0xc4>
    52cc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    52d0:	4657      	mov	r7, sl
    52d2:	60cb      	str	r3, [r1, #12]
    52d4:	6099      	str	r1, [r3, #8]
    52d6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    52da:	f8da 300c 	ldr.w	r3, [sl, #12]
    52de:	60cb      	str	r3, [r1, #12]
    52e0:	1f32      	subs	r2, r6, #4
    52e2:	2a24      	cmp	r2, #36	; 0x24
    52e4:	6099      	str	r1, [r3, #8]
    52e6:	d82d      	bhi.n	5344 <_realloc_r+0x318>
    52e8:	2a13      	cmp	r2, #19
    52ea:	d929      	bls.n	5340 <_realloc_r+0x314>
    52ec:	6823      	ldr	r3, [r4, #0]
    52ee:	f8ca 3008 	str.w	r3, [sl, #8]
    52f2:	6863      	ldr	r3, [r4, #4]
    52f4:	f8ca 300c 	str.w	r3, [sl, #12]
    52f8:	2a1b      	cmp	r2, #27
    52fa:	d842      	bhi.n	5382 <_realloc_r+0x356>
    52fc:	3408      	adds	r4, #8
    52fe:	f10a 0310 	add.w	r3, sl, #16
    5302:	6822      	ldr	r2, [r4, #0]
    5304:	601a      	str	r2, [r3, #0]
    5306:	6862      	ldr	r2, [r4, #4]
    5308:	605a      	str	r2, [r3, #4]
    530a:	68a2      	ldr	r2, [r4, #8]
    530c:	609a      	str	r2, [r3, #8]
    530e:	4666      	mov	r6, ip
    5310:	46d1      	mov	r9, sl
    5312:	463c      	mov	r4, r7
    5314:	e707      	b.n	5126 <_realloc_r+0xfa>
    5316:	68a3      	ldr	r3, [r4, #8]
    5318:	6083      	str	r3, [r0, #8]
    531a:	68e3      	ldr	r3, [r4, #12]
    531c:	60c3      	str	r3, [r0, #12]
    531e:	2a24      	cmp	r2, #36	; 0x24
    5320:	d026      	beq.n	5370 <_realloc_r+0x344>
    5322:	f104 0210 	add.w	r2, r4, #16
    5326:	f100 0310 	add.w	r3, r0, #16
    532a:	e6db      	b.n	50e4 <_realloc_r+0xb8>
    532c:	463a      	mov	r2, r7
    532e:	e7bf      	b.n	52b0 <_realloc_r+0x284>
    5330:	4621      	mov	r1, r4
    5332:	4638      	mov	r0, r7
    5334:	461e      	mov	r6, r3
    5336:	46d1      	mov	r9, sl
    5338:	f001 fa2e 	bl	6798 <memmove>
    533c:	463c      	mov	r4, r7
    533e:	e6f2      	b.n	5126 <_realloc_r+0xfa>
    5340:	463b      	mov	r3, r7
    5342:	e7de      	b.n	5302 <_realloc_r+0x2d6>
    5344:	4621      	mov	r1, r4
    5346:	4638      	mov	r0, r7
    5348:	4666      	mov	r6, ip
    534a:	46d1      	mov	r9, sl
    534c:	f001 fa24 	bl	6798 <memmove>
    5350:	463c      	mov	r4, r7
    5352:	e6e8      	b.n	5126 <_realloc_r+0xfa>
    5354:	200012a8 	.word	0x200012a8
    5358:	68a1      	ldr	r1, [r4, #8]
    535a:	f8ca 1010 	str.w	r1, [sl, #16]
    535e:	68e1      	ldr	r1, [r4, #12]
    5360:	f8ca 1014 	str.w	r1, [sl, #20]
    5364:	2a24      	cmp	r2, #36	; 0x24
    5366:	d020      	beq.n	53aa <_realloc_r+0x37e>
    5368:	3410      	adds	r4, #16
    536a:	f10a 0218 	add.w	r2, sl, #24
    536e:	e79f      	b.n	52b0 <_realloc_r+0x284>
    5370:	6923      	ldr	r3, [r4, #16]
    5372:	6103      	str	r3, [r0, #16]
    5374:	6961      	ldr	r1, [r4, #20]
    5376:	6141      	str	r1, [r0, #20]
    5378:	f104 0218 	add.w	r2, r4, #24
    537c:	f100 0318 	add.w	r3, r0, #24
    5380:	e6b0      	b.n	50e4 <_realloc_r+0xb8>
    5382:	68a3      	ldr	r3, [r4, #8]
    5384:	f8ca 3010 	str.w	r3, [sl, #16]
    5388:	68e3      	ldr	r3, [r4, #12]
    538a:	f8ca 3014 	str.w	r3, [sl, #20]
    538e:	2a24      	cmp	r2, #36	; 0x24
    5390:	d021      	beq.n	53d6 <_realloc_r+0x3aa>
    5392:	3410      	adds	r4, #16
    5394:	f10a 0318 	add.w	r3, sl, #24
    5398:	e7b3      	b.n	5302 <_realloc_r+0x2d6>
    539a:	463a      	mov	r2, r7
    539c:	e733      	b.n	5206 <_realloc_r+0x1da>
    539e:	4621      	mov	r1, r4
    53a0:	4638      	mov	r0, r7
    53a2:	f001 f9f9 	bl	6798 <memmove>
    53a6:	4b16      	ldr	r3, [pc, #88]	; (5400 <_realloc_r+0x3d4>)
    53a8:	e733      	b.n	5212 <_realloc_r+0x1e6>
    53aa:	6922      	ldr	r2, [r4, #16]
    53ac:	f8ca 2018 	str.w	r2, [sl, #24]
    53b0:	6962      	ldr	r2, [r4, #20]
    53b2:	f8ca 201c 	str.w	r2, [sl, #28]
    53b6:	3418      	adds	r4, #24
    53b8:	f10a 0220 	add.w	r2, sl, #32
    53bc:	e778      	b.n	52b0 <_realloc_r+0x284>
    53be:	68a1      	ldr	r1, [r4, #8]
    53c0:	f8ca 1010 	str.w	r1, [sl, #16]
    53c4:	68e1      	ldr	r1, [r4, #12]
    53c6:	f8ca 1014 	str.w	r1, [sl, #20]
    53ca:	2a24      	cmp	r2, #36	; 0x24
    53cc:	d00d      	beq.n	53ea <_realloc_r+0x3be>
    53ce:	3410      	adds	r4, #16
    53d0:	f10a 0218 	add.w	r2, sl, #24
    53d4:	e717      	b.n	5206 <_realloc_r+0x1da>
    53d6:	6923      	ldr	r3, [r4, #16]
    53d8:	f8ca 3018 	str.w	r3, [sl, #24]
    53dc:	6963      	ldr	r3, [r4, #20]
    53de:	f8ca 301c 	str.w	r3, [sl, #28]
    53e2:	3418      	adds	r4, #24
    53e4:	f10a 0320 	add.w	r3, sl, #32
    53e8:	e78b      	b.n	5302 <_realloc_r+0x2d6>
    53ea:	6922      	ldr	r2, [r4, #16]
    53ec:	f8ca 2018 	str.w	r2, [sl, #24]
    53f0:	6962      	ldr	r2, [r4, #20]
    53f2:	f8ca 201c 	str.w	r2, [sl, #28]
    53f6:	3418      	adds	r4, #24
    53f8:	f10a 0220 	add.w	r2, sl, #32
    53fc:	e703      	b.n	5206 <_realloc_r+0x1da>
    53fe:	bf00      	nop
    5400:	200012a8 	.word	0x200012a8
    5404:	00000000 	.word	0x00000000

00005408 <_strtod_l>:
    5408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    540c:	ed2d 8b10 	vpush	{d8-d15}
    5410:	b097      	sub	sp, #92	; 0x5c
    5412:	468a      	mov	sl, r1
    5414:	2100      	movs	r1, #0
    5416:	9207      	str	r2, [sp, #28]
    5418:	9112      	str	r1, [sp, #72]	; 0x48
    541a:	2200      	movs	r2, #0
    541c:	2100      	movs	r1, #0
    541e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    5422:	4680      	mov	r8, r0
    5424:	4651      	mov	r1, sl
    5426:	9111      	str	r1, [sp, #68]	; 0x44
    5428:	460f      	mov	r7, r1
    542a:	f811 2b01 	ldrb.w	r2, [r1], #1
    542e:	2a2d      	cmp	r2, #45	; 0x2d
    5430:	d85e      	bhi.n	54f0 <_strtod_l+0xe8>
    5432:	a001      	add	r0, pc, #4	; (adr r0, 5438 <_strtod_l+0x30>)
    5434:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    5438:	000055d9 	.word	0x000055d9
    543c:	000054f1 	.word	0x000054f1
    5440:	000054f1 	.word	0x000054f1
    5444:	000054f1 	.word	0x000054f1
    5448:	000054f1 	.word	0x000054f1
    544c:	000054f1 	.word	0x000054f1
    5450:	000054f1 	.word	0x000054f1
    5454:	000054f1 	.word	0x000054f1
    5458:	000054f1 	.word	0x000054f1
    545c:	00005427 	.word	0x00005427
    5460:	00005427 	.word	0x00005427
    5464:	00005427 	.word	0x00005427
    5468:	00005427 	.word	0x00005427
    546c:	00005427 	.word	0x00005427
    5470:	000054f1 	.word	0x000054f1
    5474:	000054f1 	.word	0x000054f1
    5478:	000054f1 	.word	0x000054f1
    547c:	000054f1 	.word	0x000054f1
    5480:	000054f1 	.word	0x000054f1
    5484:	000054f1 	.word	0x000054f1
    5488:	000054f1 	.word	0x000054f1
    548c:	000054f1 	.word	0x000054f1
    5490:	000054f1 	.word	0x000054f1
    5494:	000054f1 	.word	0x000054f1
    5498:	000054f1 	.word	0x000054f1
    549c:	000054f1 	.word	0x000054f1
    54a0:	000054f1 	.word	0x000054f1
    54a4:	000054f1 	.word	0x000054f1
    54a8:	000054f1 	.word	0x000054f1
    54ac:	000054f1 	.word	0x000054f1
    54b0:	000054f1 	.word	0x000054f1
    54b4:	000054f1 	.word	0x000054f1
    54b8:	00005427 	.word	0x00005427
    54bc:	000054f1 	.word	0x000054f1
    54c0:	000054f1 	.word	0x000054f1
    54c4:	000054f1 	.word	0x000054f1
    54c8:	000054f1 	.word	0x000054f1
    54cc:	000054f1 	.word	0x000054f1
    54d0:	000054f1 	.word	0x000054f1
    54d4:	000054f1 	.word	0x000054f1
    54d8:	000054f1 	.word	0x000054f1
    54dc:	000054f1 	.word	0x000054f1
    54e0:	000054f1 	.word	0x000054f1
    54e4:	00005c13 	.word	0x00005c13
    54e8:	000054f1 	.word	0x000054f1
    54ec:	00005bff 	.word	0x00005bff
    54f0:	2100      	movs	r1, #0
    54f2:	9109      	str	r1, [sp, #36]	; 0x24
    54f4:	2a30      	cmp	r2, #48	; 0x30
    54f6:	d07d      	beq.n	55f4 <_strtod_l+0x1ec>
    54f8:	2300      	movs	r3, #0
    54fa:	9308      	str	r3, [sp, #32]
    54fc:	2a2f      	cmp	r2, #47	; 0x2f
    54fe:	4614      	mov	r4, r2
    5500:	f240 84cd 	bls.w	5e9e <_strtod_l+0xa96>
    5504:	f04f 0900 	mov.w	r9, #0
    5508:	4638      	mov	r0, r7
    550a:	464e      	mov	r6, r9
    550c:	464d      	mov	r5, r9
    550e:	e012      	b.n	5536 <_strtod_l+0x12e>
    5510:	3001      	adds	r0, #1
    5512:	2d08      	cmp	r5, #8
    5514:	9011      	str	r0, [sp, #68]	; 0x44
    5516:	bfc8      	it	gt
    5518:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    551c:	7804      	ldrb	r4, [r0, #0]
    551e:	bfc6      	itte	gt
    5520:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    5524:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    5528:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    552c:	2c2f      	cmp	r4, #47	; 0x2f
    552e:	f105 0501 	add.w	r5, r5, #1
    5532:	4622      	mov	r2, r4
    5534:	dd6f      	ble.n	5616 <_strtod_l+0x20e>
    5536:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    553a:	2c39      	cmp	r4, #57	; 0x39
    553c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5540:	dde6      	ble.n	5510 <_strtod_l+0x108>
    5542:	499f      	ldr	r1, [pc, #636]	; (57c0 <_strtod_l+0x3b8>)
    5544:	2201      	movs	r2, #1
    5546:	f001 fa5b 	bl	6a00 <strncmp>
    554a:	2800      	cmp	r0, #0
    554c:	d137      	bne.n	55be <_strtod_l+0x1b6>
    554e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5550:	461a      	mov	r2, r3
    5552:	3301      	adds	r3, #1
    5554:	9311      	str	r3, [sp, #68]	; 0x44
    5556:	7854      	ldrb	r4, [r2, #1]
    5558:	2d00      	cmp	r5, #0
    555a:	f040 8543 	bne.w	5fe4 <_strtod_l+0xbdc>
    555e:	2c30      	cmp	r4, #48	; 0x30
    5560:	f040 8524 	bne.w	5fac <_strtod_l+0xba4>
    5564:	f1c3 0201 	rsb	r2, r3, #1
    5568:	1898      	adds	r0, r3, r2
    556a:	3301      	adds	r3, #1
    556c:	9311      	str	r3, [sp, #68]	; 0x44
    556e:	781c      	ldrb	r4, [r3, #0]
    5570:	2c30      	cmp	r4, #48	; 0x30
    5572:	d0f9      	beq.n	5568 <_strtod_l+0x160>
    5574:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    5578:	2b08      	cmp	r3, #8
    557a:	f200 8301 	bhi.w	5b80 <_strtod_l+0x778>
    557e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    5580:	1c43      	adds	r3, r0, #1
    5582:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    5586:	930b      	str	r3, [sp, #44]	; 0x2c
    5588:	2501      	movs	r5, #1
    558a:	46bc      	mov	ip, r7
    558c:	f04f 0e00 	mov.w	lr, #0
    5590:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    5594:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    5598:	2000      	movs	r0, #0
    559a:	f10c 0301 	add.w	r3, ip, #1
    559e:	9311      	str	r3, [sp, #68]	; 0x44
    55a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    55a4:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    55a8:	2909      	cmp	r1, #9
    55aa:	f200 82bb 	bhi.w	5b24 <_strtod_l+0x71c>
    55ae:	3001      	adds	r0, #1
    55b0:	468b      	mov	fp, r1
    55b2:	2900      	cmp	r1, #0
    55b4:	f040 844f 	bne.w	5e56 <_strtod_l+0xa4e>
    55b8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    55bc:	e7ed      	b.n	559a <_strtod_l+0x192>
    55be:	2000      	movs	r0, #0
    55c0:	2c65      	cmp	r4, #101	; 0x65
    55c2:	46ae      	mov	lr, r5
    55c4:	900b      	str	r0, [sp, #44]	; 0x2c
    55c6:	4684      	mov	ip, r0
    55c8:	d001      	beq.n	55ce <_strtod_l+0x1c6>
    55ca:	2c45      	cmp	r4, #69	; 0x45
    55cc:	d130      	bne.n	5630 <_strtod_l+0x228>
    55ce:	2d00      	cmp	r5, #0
    55d0:	d16b      	bne.n	56aa <_strtod_l+0x2a2>
    55d2:	9b08      	ldr	r3, [sp, #32]
    55d4:	4303      	orrs	r3, r0
    55d6:	d167      	bne.n	56a8 <_strtod_l+0x2a0>
    55d8:	9b07      	ldr	r3, [sp, #28]
    55da:	ed9f 8b77 	vldr	d8, [pc, #476]	; 57b8 <_strtod_l+0x3b0>
    55de:	b113      	cbz	r3, 55e6 <_strtod_l+0x1de>
    55e0:	9b07      	ldr	r3, [sp, #28]
    55e2:	f8c3 a000 	str.w	sl, [r3]
    55e6:	eeb0 0b48 	vmov.f64	d0, d8
    55ea:	b017      	add	sp, #92	; 0x5c
    55ec:	ecbd 8b10 	vpop	{d8-d15}
    55f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55f4:	787a      	ldrb	r2, [r7, #1]
    55f6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    55fa:	2a58      	cmp	r2, #88	; 0x58
    55fc:	f000 840c 	beq.w	5e18 <_strtod_l+0xa10>
    5600:	3701      	adds	r7, #1
    5602:	9711      	str	r7, [sp, #68]	; 0x44
    5604:	783a      	ldrb	r2, [r7, #0]
    5606:	2a30      	cmp	r2, #48	; 0x30
    5608:	d0fa      	beq.n	5600 <_strtod_l+0x1f8>
    560a:	2a00      	cmp	r2, #0
    560c:	f000 80b7 	beq.w	577e <_strtod_l+0x376>
    5610:	2301      	movs	r3, #1
    5612:	9308      	str	r3, [sp, #32]
    5614:	e772      	b.n	54fc <_strtod_l+0xf4>
    5616:	496a      	ldr	r1, [pc, #424]	; (57c0 <_strtod_l+0x3b8>)
    5618:	2201      	movs	r2, #1
    561a:	f001 f9f1 	bl	6a00 <strncmp>
    561e:	2800      	cmp	r0, #0
    5620:	f000 80c0 	beq.w	57a4 <_strtod_l+0x39c>
    5624:	46ae      	mov	lr, r5
    5626:	f04f 0c00 	mov.w	ip, #0
    562a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    562e:	4660      	mov	r0, ip
    5630:	f04f 0b00 	mov.w	fp, #0
    5634:	2d00      	cmp	r5, #0
    5636:	d07e      	beq.n	5736 <_strtod_l+0x32e>
    5638:	ee07 6a90 	vmov	s15, r6
    563c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    563e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    5642:	ebab 0303 	sub.w	r3, fp, r3
    5646:	f1be 0f00 	cmp.w	lr, #0
    564a:	bf08      	it	eq
    564c:	46ae      	moveq	lr, r5
    564e:	2d10      	cmp	r5, #16
    5650:	930a      	str	r3, [sp, #40]	; 0x28
    5652:	462b      	mov	r3, r5
    5654:	bfa8      	it	ge
    5656:	2310      	movge	r3, #16
    5658:	2d09      	cmp	r5, #9
    565a:	ed8d 7b04 	vstr	d7, [sp, #16]
    565e:	dd0c      	ble.n	567a <_strtod_l+0x272>
    5660:	4a58      	ldr	r2, [pc, #352]	; (57c4 <_strtod_l+0x3bc>)
    5662:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5666:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    566a:	ee06 9a90 	vmov	s13, r9
    566e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    5672:	eea7 6b05 	vfma.f64	d6, d7, d5
    5676:	ed8d 6b04 	vstr	d6, [sp, #16]
    567a:	2d0f      	cmp	r5, #15
    567c:	f300 80a8 	bgt.w	57d0 <_strtod_l+0x3c8>
    5680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5682:	2a00      	cmp	r2, #0
    5684:	f000 83e4 	beq.w	5e50 <_strtod_l+0xa48>
    5688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    568a:	f340 833c 	ble.w	5d06 <_strtod_l+0x8fe>
    568e:	2a16      	cmp	r2, #22
    5690:	f340 8498 	ble.w	5fc4 <_strtod_l+0xbbc>
    5694:	990a      	ldr	r1, [sp, #40]	; 0x28
    5696:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    569a:	428a      	cmp	r2, r1
    569c:	f280 84a6 	bge.w	5fec <_strtod_l+0xbe4>
    56a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    56a2:	1aeb      	subs	r3, r5, r3
    56a4:	4413      	add	r3, r2
    56a6:	e099      	b.n	57dc <_strtod_l+0x3d4>
    56a8:	2500      	movs	r5, #0
    56aa:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    56ae:	f10a 0301 	add.w	r3, sl, #1
    56b2:	9311      	str	r3, [sp, #68]	; 0x44
    56b4:	f89a 4001 	ldrb.w	r4, [sl, #1]
    56b8:	2c2b      	cmp	r4, #43	; 0x2b
    56ba:	f000 825e 	beq.w	5b7a <_strtod_l+0x772>
    56be:	2c2d      	cmp	r4, #45	; 0x2d
    56c0:	f000 81f7 	beq.w	5ab2 <_strtod_l+0x6aa>
    56c4:	2300      	movs	r3, #0
    56c6:	930a      	str	r3, [sp, #40]	; 0x28
    56c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    56cc:	2b09      	cmp	r3, #9
    56ce:	f200 81eb 	bhi.w	5aa8 <_strtod_l+0x6a0>
    56d2:	2c30      	cmp	r4, #48	; 0x30
    56d4:	d105      	bne.n	56e2 <_strtod_l+0x2da>
    56d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    56d8:	3301      	adds	r3, #1
    56da:	9311      	str	r3, [sp, #68]	; 0x44
    56dc:	781c      	ldrb	r4, [r3, #0]
    56de:	2c30      	cmp	r4, #48	; 0x30
    56e0:	d0fa      	beq.n	56d8 <_strtod_l+0x2d0>
    56e2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    56e6:	2b08      	cmp	r3, #8
    56e8:	d8a2      	bhi.n	5630 <_strtod_l+0x228>
    56ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    56ec:	920c      	str	r2, [sp, #48]	; 0x30
    56ee:	1c53      	adds	r3, r2, #1
    56f0:	9311      	str	r3, [sp, #68]	; 0x44
    56f2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    56f6:	7854      	ldrb	r4, [r2, #1]
    56f8:	2c2f      	cmp	r4, #47	; 0x2f
    56fa:	dc07      	bgt.n	570c <_strtod_l+0x304>
    56fc:	e3de      	b.n	5ebc <_strtod_l+0xab4>
    56fe:	3301      	adds	r3, #1
    5700:	9311      	str	r3, [sp, #68]	; 0x44
    5702:	784c      	ldrb	r4, [r1, #1]
    5704:	2c2f      	cmp	r4, #47	; 0x2f
    5706:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    570a:	dd06      	ble.n	571a <_strtod_l+0x312>
    570c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    5710:	2c39      	cmp	r4, #57	; 0x39
    5712:	4619      	mov	r1, r3
    5714:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5718:	ddf1      	ble.n	56fe <_strtod_l+0x2f6>
    571a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    571c:	1a9b      	subs	r3, r3, r2
    571e:	2b08      	cmp	r3, #8
    5720:	f340 83cc 	ble.w	5ebc <_strtod_l+0xab4>
    5724:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    5728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    572a:	2b00      	cmp	r3, #0
    572c:	d082      	beq.n	5634 <_strtod_l+0x22c>
    572e:	f1cb 0b00 	rsb	fp, fp, #0
    5732:	2d00      	cmp	r5, #0
    5734:	d180      	bne.n	5638 <_strtod_l+0x230>
    5736:	9b08      	ldr	r3, [sp, #32]
    5738:	4303      	orrs	r3, r0
    573a:	d120      	bne.n	577e <_strtod_l+0x376>
    573c:	f1bc 0f00 	cmp.w	ip, #0
    5740:	f47f af4a 	bne.w	55d8 <_strtod_l+0x1d0>
    5744:	2c69      	cmp	r4, #105	; 0x69
    5746:	f000 83cf 	beq.w	5ee8 <_strtod_l+0xae0>
    574a:	f300 82f3 	bgt.w	5d34 <_strtod_l+0x92c>
    574e:	2c49      	cmp	r4, #73	; 0x49
    5750:	f000 83ca 	beq.w	5ee8 <_strtod_l+0xae0>
    5754:	2c4e      	cmp	r4, #78	; 0x4e
    5756:	f47f af3f 	bne.w	55d8 <_strtod_l+0x1d0>
    575a:	491b      	ldr	r1, [pc, #108]	; (57c8 <_strtod_l+0x3c0>)
    575c:	a811      	add	r0, sp, #68	; 0x44
    575e:	f002 fb83 	bl	7e68 <__match>
    5762:	2800      	cmp	r0, #0
    5764:	f43f af38 	beq.w	55d8 <_strtod_l+0x1d0>
    5768:	9b11      	ldr	r3, [sp, #68]	; 0x44
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	2b28      	cmp	r3, #40	; 0x28
    576e:	f000 84f2 	beq.w	6156 <_strtod_l+0xd4e>
    5772:	4816      	ldr	r0, [pc, #88]	; (57cc <_strtod_l+0x3c4>)
    5774:	f001 feb4 	bl	74e0 <nan>
    5778:	eeb0 8b40 	vmov.f64	d8, d0
    577c:	e001      	b.n	5782 <_strtod_l+0x37a>
    577e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 57b8 <_strtod_l+0x3b0>
    5782:	9a07      	ldr	r2, [sp, #28]
    5784:	b10a      	cbz	r2, 578a <_strtod_l+0x382>
    5786:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5788:	6013      	str	r3, [r2, #0]
    578a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    578c:	2b00      	cmp	r3, #0
    578e:	f43f af2a 	beq.w	55e6 <_strtod_l+0x1de>
    5792:	eeb1 8b48 	vneg.f64	d8, d8
    5796:	eeb0 0b48 	vmov.f64	d0, d8
    579a:	b017      	add	sp, #92	; 0x5c
    579c:	ecbd 8b10 	vpop	{d8-d15}
    57a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    57a6:	900b      	str	r0, [sp, #44]	; 0x2c
    57a8:	1c5a      	adds	r2, r3, #1
    57aa:	9211      	str	r2, [sp, #68]	; 0x44
    57ac:	785c      	ldrb	r4, [r3, #1]
    57ae:	46ae      	mov	lr, r5
    57b0:	e6f8      	b.n	55a4 <_strtod_l+0x19c>
    57b2:	bf00      	nop
    57b4:	f3af 8000 	nop.w
	...
    57c0:	20000a8c 	.word	0x20000a8c
    57c4:	200002a8 	.word	0x200002a8
    57c8:	20000a9c 	.word	0x20000a9c
    57cc:	200003b8 	.word	0x200003b8
    57d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    57d2:	1aeb      	subs	r3, r5, r3
    57d4:	4413      	add	r3, r2
    57d6:	2b00      	cmp	r3, #0
    57d8:	f340 82b0 	ble.w	5d3c <_strtod_l+0x934>
    57dc:	f013 010f 	ands.w	r1, r3, #15
    57e0:	d00a      	beq.n	57f8 <_strtod_l+0x3f0>
    57e2:	4ac3      	ldr	r2, [pc, #780]	; (5af0 <_strtod_l+0x6e8>)
    57e4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    57e8:	ed9d 6b04 	vldr	d6, [sp, #16]
    57ec:	ed92 7b00 	vldr	d7, [r2]
    57f0:	ee27 7b06 	vmul.f64	d7, d7, d6
    57f4:	ed8d 7b04 	vstr	d7, [sp, #16]
    57f8:	f033 020f 	bics.w	r2, r3, #15
    57fc:	f040 8238 	bne.w	5c70 <_strtod_l+0x868>
    5800:	2300      	movs	r3, #0
    5802:	9308      	str	r3, [sp, #32]
    5804:	9600      	str	r6, [sp, #0]
    5806:	462b      	mov	r3, r5
    5808:	4672      	mov	r2, lr
    580a:	4639      	mov	r1, r7
    580c:	4640      	mov	r0, r8
    580e:	f002 fcb7 	bl	8180 <__s2b>
    5812:	4681      	mov	r9, r0
    5814:	2800      	cmp	r0, #0
    5816:	f000 82e1 	beq.w	5ddc <_strtod_l+0x9d4>
    581a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    581c:	eba3 0b0b 	sub.w	fp, r3, fp
    5820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5822:	ed9f eba9 	vldr	d14, [pc, #676]	; 5ac8 <_strtod_l+0x6c0>
    5826:	2b00      	cmp	r3, #0
    5828:	ed9f cba9 	vldr	d12, [pc, #676]	; 5ad0 <_strtod_l+0x6c8>
    582c:	ed9f dbaa 	vldr	d13, [pc, #680]	; 5ad8 <_strtod_l+0x6d0>
    5830:	ed9f bbab 	vldr	d11, [pc, #684]	; 5ae0 <_strtod_l+0x6d8>
    5834:	bfb4      	ite	lt
    5836:	465a      	movlt	r2, fp
    5838:	2200      	movge	r2, #0
    583a:	f04f 0a00 	mov.w	sl, #0
    583e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5842:	920b      	str	r2, [sp, #44]	; 0x2c
    5844:	930c      	str	r3, [sp, #48]	; 0x30
    5846:	4654      	mov	r4, sl
    5848:	f8d9 1004 	ldr.w	r1, [r9, #4]
    584c:	4640      	mov	r0, r8
    584e:	f002 fc15 	bl	807c <_Balloc>
    5852:	4606      	mov	r6, r0
    5854:	2800      	cmp	r0, #0
    5856:	f000 810e 	beq.w	5a76 <_strtod_l+0x66e>
    585a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    585e:	ed9d 8b04 	vldr	d8, [sp, #16]
    5862:	3202      	adds	r2, #2
    5864:	0092      	lsls	r2, r2, #2
    5866:	f109 010c 	add.w	r1, r9, #12
    586a:	300c      	adds	r0, #12
    586c:	f7fc ffe0 	bl	2830 <memcpy>
    5870:	eeb0 0b48 	vmov.f64	d0, d8
    5874:	aa14      	add	r2, sp, #80	; 0x50
    5876:	a913      	add	r1, sp, #76	; 0x4c
    5878:	4640      	mov	r0, r8
    587a:	f003 f83d 	bl	88f8 <__d2b>
    587e:	9012      	str	r0, [sp, #72]	; 0x48
    5880:	2800      	cmp	r0, #0
    5882:	f000 80e4 	beq.w	5a4e <_strtod_l+0x646>
    5886:	2101      	movs	r1, #1
    5888:	4640      	mov	r0, r8
    588a:	f002 fd21 	bl	82d0 <__i2b>
    588e:	4604      	mov	r4, r0
    5890:	2800      	cmp	r0, #0
    5892:	f000 80f0 	beq.w	5a76 <_strtod_l+0x66e>
    5896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5898:	2a00      	cmp	r2, #0
    589a:	f2c0 80de 	blt.w	5a5a <_strtod_l+0x652>
    589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    58a2:	eb02 0b03 	add.w	fp, r2, r3
    58a6:	9b08      	ldr	r3, [sp, #32]
    58a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    58aa:	1ad2      	subs	r2, r2, r3
    58ac:	442a      	add	r2, r5
    58ae:	4b91      	ldr	r3, [pc, #580]	; (5af4 <_strtod_l+0x6ec>)
    58b0:	3a01      	subs	r2, #1
    58b2:	429a      	cmp	r2, r3
    58b4:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    58b8:	f280 8098 	bge.w	59ec <_strtod_l+0x5e4>
    58bc:	1a99      	subs	r1, r3, r2
    58be:	291f      	cmp	r1, #31
    58c0:	eba5 0501 	sub.w	r5, r5, r1
    58c4:	f300 80e3 	bgt.w	5a8e <_strtod_l+0x686>
    58c8:	2201      	movs	r2, #1
    58ca:	fa02 f301 	lsl.w	r3, r2, r1
    58ce:	930d      	str	r3, [sp, #52]	; 0x34
    58d0:	2300      	movs	r3, #0
    58d2:	930e      	str	r3, [sp, #56]	; 0x38
    58d4:	442f      	add	r7, r5
    58d6:	9b08      	ldr	r3, [sp, #32]
    58d8:	445d      	add	r5, fp
    58da:	45ab      	cmp	fp, r5
    58dc:	465a      	mov	r2, fp
    58de:	441f      	add	r7, r3
    58e0:	bfa8      	it	ge
    58e2:	462a      	movge	r2, r5
    58e4:	42ba      	cmp	r2, r7
    58e6:	bfa8      	it	ge
    58e8:	463a      	movge	r2, r7
    58ea:	2a00      	cmp	r2, #0
    58ec:	dd03      	ble.n	58f6 <_strtod_l+0x4ee>
    58ee:	1aad      	subs	r5, r5, r2
    58f0:	1abf      	subs	r7, r7, r2
    58f2:	ebab 0b02 	sub.w	fp, fp, r2
    58f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    58f8:	2b00      	cmp	r3, #0
    58fa:	f300 8088 	bgt.w	5a0e <_strtod_l+0x606>
    58fe:	2d00      	cmp	r5, #0
    5900:	f300 809c 	bgt.w	5a3c <_strtod_l+0x634>
    5904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5906:	2b00      	cmp	r3, #0
    5908:	f300 80b7 	bgt.w	5a7a <_strtod_l+0x672>
    590c:	2f00      	cmp	r7, #0
    590e:	f300 80a9 	bgt.w	5a64 <_strtod_l+0x65c>
    5912:	f1bb 0f00 	cmp.w	fp, #0
    5916:	dd08      	ble.n	592a <_strtod_l+0x522>
    5918:	4621      	mov	r1, r4
    591a:	465a      	mov	r2, fp
    591c:	4640      	mov	r0, r8
    591e:	f002 fe13 	bl	8548 <__lshift>
    5922:	4604      	mov	r4, r0
    5924:	2800      	cmp	r0, #0
    5926:	f000 80a6 	beq.w	5a76 <_strtod_l+0x66e>
    592a:	9912      	ldr	r1, [sp, #72]	; 0x48
    592c:	4632      	mov	r2, r6
    592e:	4640      	mov	r0, r8
    5930:	f002 fea4 	bl	867c <__mdiff>
    5934:	4682      	mov	sl, r0
    5936:	2800      	cmp	r0, #0
    5938:	f000 809d 	beq.w	5a76 <_strtod_l+0x66e>
    593c:	2300      	movs	r3, #0
    593e:	68c5      	ldr	r5, [r0, #12]
    5940:	60c3      	str	r3, [r0, #12]
    5942:	4621      	mov	r1, r4
    5944:	f002 fe78 	bl	8638 <__mcmp>
    5948:	2800      	cmp	r0, #0
    594a:	f2c0 83c7 	blt.w	60dc <_strtod_l+0xcd4>
    594e:	f000 8361 	beq.w	6014 <_strtod_l+0xc0c>
    5952:	4621      	mov	r1, r4
    5954:	4650      	mov	r0, sl
    5956:	f003 f839 	bl	89cc <__ratio>
    595a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    595e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    5962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5966:	d846      	bhi.n	59f6 <_strtod_l+0x5ee>
    5968:	2d00      	cmp	r5, #0
    596a:	f000 80cb 	beq.w	5b04 <_strtod_l+0x6fc>
    596e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    5972:	9805      	ldr	r0, [sp, #20]
    5974:	4b60      	ldr	r3, [pc, #384]	; (5af8 <_strtod_l+0x6f0>)
    5976:	2200      	movs	r2, #0
    5978:	4960      	ldr	r1, [pc, #384]	; (5afc <_strtod_l+0x6f4>)
    597a:	f8df c184 	ldr.w	ip, [pc, #388]	; 5b00 <_strtod_l+0x6f8>
    597e:	ea00 0701 	and.w	r7, r0, r1
    5982:	4567      	cmp	r7, ip
    5984:	f000 80d4 	beq.w	5b30 <_strtod_l+0x728>
    5988:	9908      	ldr	r1, [sp, #32]
    598a:	b159      	cbz	r1, 59a4 <_strtod_l+0x59c>
    598c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    5990:	d808      	bhi.n	59a4 <_strtod_l+0x59c>
    5992:	eeb4 9bcb 	vcmpe.f64	d9, d11
    5996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    599a:	f240 8156 	bls.w	5c4a <_strtod_l+0x842>
    599e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    59a2:	1bcb      	subs	r3, r1, r7
    59a4:	eeb0 0b48 	vmov.f64	d0, d8
    59a8:	ec43 2b1a 	vmov	d10, r2, r3
    59ac:	f002 ff10 	bl	87d0 <__ulp>
    59b0:	eeaa 8b00 	vfma.f64	d8, d10, d0
    59b4:	ed8d 8b04 	vstr	d8, [sp, #16]
    59b8:	ee18 3a90 	vmov	r3, s17
    59bc:	9a08      	ldr	r2, [sp, #32]
    59be:	b922      	cbnz	r2, 59ca <_strtod_l+0x5c2>
    59c0:	4a4e      	ldr	r2, [pc, #312]	; (5afc <_strtod_l+0x6f4>)
    59c2:	401a      	ands	r2, r3
    59c4:	4297      	cmp	r7, r2
    59c6:	f000 80e4 	beq.w	5b92 <_strtod_l+0x78a>
    59ca:	9912      	ldr	r1, [sp, #72]	; 0x48
    59cc:	4640      	mov	r0, r8
    59ce:	f002 fb7b 	bl	80c8 <_Bfree>
    59d2:	4631      	mov	r1, r6
    59d4:	4640      	mov	r0, r8
    59d6:	f002 fb77 	bl	80c8 <_Bfree>
    59da:	4621      	mov	r1, r4
    59dc:	4640      	mov	r0, r8
    59de:	f002 fb73 	bl	80c8 <_Bfree>
    59e2:	4651      	mov	r1, sl
    59e4:	4640      	mov	r0, r8
    59e6:	f002 fb6f 	bl	80c8 <_Bfree>
    59ea:	e72d      	b.n	5848 <_strtod_l+0x440>
    59ec:	2301      	movs	r3, #1
    59ee:	2100      	movs	r1, #0
    59f0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    59f4:	e76e      	b.n	58d4 <_strtod_l+0x4cc>
    59f6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    59fa:	ee20 9b09 	vmul.f64	d9, d0, d9
    59fe:	2d00      	cmp	r5, #0
    5a00:	d15f      	bne.n	5ac2 <_strtod_l+0x6ba>
    5a02:	eeb1 7b49 	vneg.f64	d7, d9
    5a06:	9805      	ldr	r0, [sp, #20]
    5a08:	ec53 2b17 	vmov	r2, r3, d7
    5a0c:	e7b4      	b.n	5978 <_strtod_l+0x570>
    5a0e:	4621      	mov	r1, r4
    5a10:	461a      	mov	r2, r3
    5a12:	4640      	mov	r0, r8
    5a14:	f002 fd38 	bl	8488 <__pow5mult>
    5a18:	4604      	mov	r4, r0
    5a1a:	b360      	cbz	r0, 5a76 <_strtod_l+0x66e>
    5a1c:	4601      	mov	r1, r0
    5a1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5a20:	4640      	mov	r0, r8
    5a22:	f002 fc83 	bl	832c <__multiply>
    5a26:	b330      	cbz	r0, 5a76 <_strtod_l+0x66e>
    5a28:	900f      	str	r0, [sp, #60]	; 0x3c
    5a2a:	9912      	ldr	r1, [sp, #72]	; 0x48
    5a2c:	4640      	mov	r0, r8
    5a2e:	f002 fb4b 	bl	80c8 <_Bfree>
    5a32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5a34:	9212      	str	r2, [sp, #72]	; 0x48
    5a36:	2d00      	cmp	r5, #0
    5a38:	f77f af64 	ble.w	5904 <_strtod_l+0x4fc>
    5a3c:	9912      	ldr	r1, [sp, #72]	; 0x48
    5a3e:	462a      	mov	r2, r5
    5a40:	4640      	mov	r0, r8
    5a42:	f002 fd81 	bl	8548 <__lshift>
    5a46:	9012      	str	r0, [sp, #72]	; 0x48
    5a48:	2800      	cmp	r0, #0
    5a4a:	f47f af5b 	bne.w	5904 <_strtod_l+0x4fc>
    5a4e:	2322      	movs	r3, #34	; 0x22
    5a50:	ed9f 8b25 	vldr	d8, [pc, #148]	; 5ae8 <_strtod_l+0x6e0>
    5a54:	f8c8 3000 	str.w	r3, [r8]
    5a58:	e0bc      	b.n	5bd4 <_strtod_l+0x7cc>
    5a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a5c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    5a60:	1a9f      	subs	r7, r3, r2
    5a62:	e720      	b.n	58a6 <_strtod_l+0x49e>
    5a64:	4631      	mov	r1, r6
    5a66:	463a      	mov	r2, r7
    5a68:	4640      	mov	r0, r8
    5a6a:	f002 fd6d 	bl	8548 <__lshift>
    5a6e:	4606      	mov	r6, r0
    5a70:	2800      	cmp	r0, #0
    5a72:	f47f af4e 	bne.w	5912 <_strtod_l+0x50a>
    5a76:	9812      	ldr	r0, [sp, #72]	; 0x48
    5a78:	e7e9      	b.n	5a4e <_strtod_l+0x646>
    5a7a:	4631      	mov	r1, r6
    5a7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5a7e:	4640      	mov	r0, r8
    5a80:	f002 fd02 	bl	8488 <__pow5mult>
    5a84:	4606      	mov	r6, r0
    5a86:	2800      	cmp	r0, #0
    5a88:	f47f af40 	bne.w	590c <_strtod_l+0x504>
    5a8c:	e7f3      	b.n	5a76 <_strtod_l+0x66e>
    5a8e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    5a92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    5a96:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    5a9a:	2101      	movs	r1, #1
    5a9c:	32e2      	adds	r2, #226	; 0xe2
    5a9e:	fa01 f302 	lsl.w	r3, r1, r2
    5aa2:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    5aa6:	e715      	b.n	58d4 <_strtod_l+0x4cc>
    5aa8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    5aac:	f04f 0b00 	mov.w	fp, #0
    5ab0:	e5c0      	b.n	5634 <_strtod_l+0x22c>
    5ab2:	2301      	movs	r3, #1
    5ab4:	930a      	str	r3, [sp, #40]	; 0x28
    5ab6:	f10a 0302 	add.w	r3, sl, #2
    5aba:	9311      	str	r3, [sp, #68]	; 0x44
    5abc:	f89a 4002 	ldrb.w	r4, [sl, #2]
    5ac0:	e602      	b.n	56c8 <_strtod_l+0x2c0>
    5ac2:	eeb0 7b49 	vmov.f64	d7, d9
    5ac6:	e79e      	b.n	5a06 <_strtod_l+0x5fe>
    5ac8:	94a03595 	.word	0x94a03595
    5acc:	3fcfffff 	.word	0x3fcfffff
    5ad0:	94a03595 	.word	0x94a03595
    5ad4:	3fdfffff 	.word	0x3fdfffff
    5ad8:	35afe535 	.word	0x35afe535
    5adc:	3fe00000 	.word	0x3fe00000
    5ae0:	ffc00000 	.word	0xffc00000
    5ae4:	41dfffff 	.word	0x41dfffff
    5ae8:	00000000 	.word	0x00000000
    5aec:	7ff00000 	.word	0x7ff00000
    5af0:	200002a8 	.word	0x200002a8
    5af4:	fffffc02 	.word	0xfffffc02
    5af8:	3ff00000 	.word	0x3ff00000
    5afc:	7ff00000 	.word	0x7ff00000
    5b00:	7fe00000 	.word	0x7fe00000
    5b04:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5b08:	2900      	cmp	r1, #0
    5b0a:	f000 8085 	beq.w	5c18 <_strtod_l+0x810>
    5b0e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5b12:	2901      	cmp	r1, #1
    5b14:	f000 81d8 	beq.w	5ec8 <_strtod_l+0xac0>
    5b18:	4610      	mov	r0, r2
    5b1a:	4bb7      	ldr	r3, [pc, #732]	; (5df8 <_strtod_l+0x9f0>)
    5b1c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    5b20:	2200      	movs	r2, #0
    5b22:	e729      	b.n	5978 <_strtod_l+0x570>
    5b24:	2c65      	cmp	r4, #101	; 0x65
    5b26:	f04f 0c01 	mov.w	ip, #1
    5b2a:	f43f adbe 	beq.w	56aa <_strtod_l+0x2a2>
    5b2e:	e54c      	b.n	55ca <_strtod_l+0x1c2>
    5b30:	ec43 2b1a 	vmov	d10, r2, r3
    5b34:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    5b38:	9305      	str	r3, [sp, #20]
    5b3a:	ed9d fb04 	vldr	d15, [sp, #16]
    5b3e:	eeb0 0b4f 	vmov.f64	d0, d15
    5b42:	f002 fe45 	bl	87d0 <__ulp>
    5b46:	49ad      	ldr	r1, [pc, #692]	; (5dfc <_strtod_l+0x9f4>)
    5b48:	eeaa fb00 	vfma.f64	d15, d10, d0
    5b4c:	ee1f 3a90 	vmov	r3, s31
    5b50:	4aab      	ldr	r2, [pc, #684]	; (5e00 <_strtod_l+0x9f8>)
    5b52:	4019      	ands	r1, r3
    5b54:	4291      	cmp	r1, r2
    5b56:	ed8d fb04 	vstr	d15, [sp, #16]
    5b5a:	d972      	bls.n	5c42 <_strtod_l+0x83a>
    5b5c:	4ba9      	ldr	r3, [pc, #676]	; (5e04 <_strtod_l+0x9fc>)
    5b5e:	ee18 2a90 	vmov	r2, s17
    5b62:	429a      	cmp	r2, r3
    5b64:	d103      	bne.n	5b6e <_strtod_l+0x766>
    5b66:	ee18 3a10 	vmov	r3, s16
    5b6a:	3301      	adds	r3, #1
    5b6c:	d083      	beq.n	5a76 <_strtod_l+0x66e>
    5b6e:	4aa5      	ldr	r2, [pc, #660]	; (5e04 <_strtod_l+0x9fc>)
    5b70:	f04f 33ff 	mov.w	r3, #4294967295
    5b74:	e9cd 3204 	strd	r3, r2, [sp, #16]
    5b78:	e727      	b.n	59ca <_strtod_l+0x5c2>
    5b7a:	2300      	movs	r3, #0
    5b7c:	930a      	str	r3, [sp, #40]	; 0x28
    5b7e:	e79a      	b.n	5ab6 <_strtod_l+0x6ae>
    5b80:	2c65      	cmp	r4, #101	; 0x65
    5b82:	f000 80d0 	beq.w	5d26 <_strtod_l+0x91e>
    5b86:	2c45      	cmp	r4, #69	; 0x45
    5b88:	f000 80cd 	beq.w	5d26 <_strtod_l+0x91e>
    5b8c:	f04f 0c01 	mov.w	ip, #1
    5b90:	e5d1      	b.n	5736 <_strtod_l+0x32e>
    5b92:	ec51 0b19 	vmov	r0, r1, d9
    5b96:	930d      	str	r3, [sp, #52]	; 0x34
    5b98:	f005 ff60 	bl	ba5c <__aeabi_d2lz>
    5b9c:	f005 ff30 	bl	ba00 <__aeabi_l2d>
    5ba0:	9b04      	ldr	r3, [sp, #16]
    5ba2:	431d      	orrs	r5, r3
    5ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5ba6:	ec41 0b17 	vmov	d7, r0, r1
    5baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5bae:	431d      	orrs	r5, r3
    5bb0:	ee39 9b47 	vsub.f64	d9, d9, d7
    5bb4:	f000 80a0 	beq.w	5cf8 <_strtod_l+0x8f0>
    5bb8:	eeb4 9bcc 	vcmpe.f64	d9, d12
    5bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bc0:	d405      	bmi.n	5bce <_strtod_l+0x7c6>
    5bc2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    5bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bca:	f77f aefe 	ble.w	59ca <_strtod_l+0x5c2>
    5bce:	ed9d 8b04 	vldr	d8, [sp, #16]
    5bd2:	9812      	ldr	r0, [sp, #72]	; 0x48
    5bd4:	4601      	mov	r1, r0
    5bd6:	4640      	mov	r0, r8
    5bd8:	f002 fa76 	bl	80c8 <_Bfree>
    5bdc:	4631      	mov	r1, r6
    5bde:	4640      	mov	r0, r8
    5be0:	f002 fa72 	bl	80c8 <_Bfree>
    5be4:	4621      	mov	r1, r4
    5be6:	4640      	mov	r0, r8
    5be8:	f002 fa6e 	bl	80c8 <_Bfree>
    5bec:	4649      	mov	r1, r9
    5bee:	4640      	mov	r0, r8
    5bf0:	f002 fa6a 	bl	80c8 <_Bfree>
    5bf4:	4651      	mov	r1, sl
    5bf6:	4640      	mov	r0, r8
    5bf8:	f002 fa66 	bl	80c8 <_Bfree>
    5bfc:	e5c1      	b.n	5782 <_strtod_l+0x37a>
    5bfe:	2201      	movs	r2, #1
    5c00:	9209      	str	r2, [sp, #36]	; 0x24
    5c02:	1c79      	adds	r1, r7, #1
    5c04:	9111      	str	r1, [sp, #68]	; 0x44
    5c06:	787a      	ldrb	r2, [r7, #1]
    5c08:	2a00      	cmp	r2, #0
    5c0a:	f43f ace5 	beq.w	55d8 <_strtod_l+0x1d0>
    5c0e:	460f      	mov	r7, r1
    5c10:	e470      	b.n	54f4 <_strtod_l+0xec>
    5c12:	2200      	movs	r2, #0
    5c14:	9209      	str	r2, [sp, #36]	; 0x24
    5c16:	e7f4      	b.n	5c02 <_strtod_l+0x7fa>
    5c18:	f3c2 0313 	ubfx	r3, r2, #0, #20
    5c1c:	4610      	mov	r0, r2
    5c1e:	2b00      	cmp	r3, #0
    5c20:	f47f af7b 	bne.w	5b1a <_strtod_l+0x712>
    5c24:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    5c28:	eeb4 0bc7 	vcmpe.f64	d0, d7
    5c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c30:	f100 81d3 	bmi.w	5fda <_strtod_l+0xbd2>
    5c34:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    5c38:	ee20 9b09 	vmul.f64	d9, d0, d9
    5c3c:	eeb1 7b49 	vneg.f64	d7, d9
    5c40:	e6e2      	b.n	5a08 <_strtod_l+0x600>
    5c42:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    5c46:	9305      	str	r3, [sp, #20]
    5c48:	e6b8      	b.n	59bc <_strtod_l+0x5b4>
    5c4a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    5c4e:	ee19 3a10 	vmov	r3, s18
    5c52:	2b01      	cmp	r3, #1
    5c54:	bf38      	it	cc
    5c56:	2301      	movcc	r3, #1
    5c58:	ee09 3a10 	vmov	s18, r3
    5c5c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    5c60:	2d00      	cmp	r5, #0
    5c62:	f040 813e 	bne.w	5ee2 <_strtod_l+0xada>
    5c66:	eeb1 7b49 	vneg.f64	d7, d9
    5c6a:	ec53 2b17 	vmov	r2, r3, d7
    5c6e:	e696      	b.n	599e <_strtod_l+0x596>
    5c70:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    5c74:	f300 80b2 	bgt.w	5ddc <_strtod_l+0x9d4>
    5c78:	2a10      	cmp	r2, #16
    5c7a:	ea4f 1322 	mov.w	r3, r2, asr #4
    5c7e:	f340 8286 	ble.w	618e <_strtod_l+0xd86>
    5c82:	4c61      	ldr	r4, [pc, #388]	; (5e08 <_strtod_l+0xa00>)
    5c84:	ed9d 7b04 	vldr	d7, [sp, #16]
    5c88:	2000      	movs	r0, #0
    5c8a:	4622      	mov	r2, r4
    5c8c:	4601      	mov	r1, r0
    5c8e:	f013 0f01 	tst.w	r3, #1
    5c92:	f101 0101 	add.w	r1, r1, #1
    5c96:	ea4f 0363 	mov.w	r3, r3, asr #1
    5c9a:	d004      	beq.n	5ca6 <_strtod_l+0x89e>
    5c9c:	ed92 6b00 	vldr	d6, [r2]
    5ca0:	2001      	movs	r0, #1
    5ca2:	ee27 7b06 	vmul.f64	d7, d7, d6
    5ca6:	2b01      	cmp	r3, #1
    5ca8:	f102 0208 	add.w	r2, r2, #8
    5cac:	d1ef      	bne.n	5c8e <_strtod_l+0x886>
    5cae:	b108      	cbz	r0, 5cb4 <_strtod_l+0x8ac>
    5cb0:	ed8d 7b04 	vstr	d7, [sp, #16]
    5cb4:	9b05      	ldr	r3, [sp, #20]
    5cb6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    5cba:	9305      	str	r3, [sp, #20]
    5cbc:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    5cc0:	ed9d 6b04 	vldr	d6, [sp, #16]
    5cc4:	ed94 7b00 	vldr	d7, [r4]
    5cc8:	4b4c      	ldr	r3, [pc, #304]	; (5dfc <_strtod_l+0x9f4>)
    5cca:	ee27 7b06 	vmul.f64	d7, d7, d6
    5cce:	ee17 2a90 	vmov	r2, s15
    5cd2:	494e      	ldr	r1, [pc, #312]	; (5e0c <_strtod_l+0xa04>)
    5cd4:	4013      	ands	r3, r2
    5cd6:	428b      	cmp	r3, r1
    5cd8:	ed8d 7b04 	vstr	d7, [sp, #16]
    5cdc:	d87e      	bhi.n	5ddc <_strtod_l+0x9d4>
    5cde:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    5ce2:	428b      	cmp	r3, r1
    5ce4:	f240 81d6 	bls.w	6094 <_strtod_l+0xc8c>
    5ce8:	4c46      	ldr	r4, [pc, #280]	; (5e04 <_strtod_l+0x9fc>)
    5cea:	f04f 33ff 	mov.w	r3, #4294967295
    5cee:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5cf2:	2300      	movs	r3, #0
    5cf4:	9308      	str	r3, [sp, #32]
    5cf6:	e585      	b.n	5804 <_strtod_l+0x3fc>
    5cf8:	eeb4 9bce 	vcmpe.f64	d9, d14
    5cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d00:	f57f ae63 	bpl.w	59ca <_strtod_l+0x5c2>
    5d04:	e763      	b.n	5bce <_strtod_l+0x7c6>
    5d06:	3216      	adds	r2, #22
    5d08:	f6ff ad62 	blt.w	57d0 <_strtod_l+0x3c8>
    5d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5d0e:	eba3 0b0b 	sub.w	fp, r3, fp
    5d12:	4b3f      	ldr	r3, [pc, #252]	; (5e10 <_strtod_l+0xa08>)
    5d14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    5d18:	ed93 7b00 	vldr	d7, [r3]
    5d1c:	ed9d 6b04 	vldr	d6, [sp, #16]
    5d20:	ee86 8b07 	vdiv.f64	d8, d6, d7
    5d24:	e52d      	b.n	5782 <_strtod_l+0x37a>
    5d26:	f04f 0e00 	mov.w	lr, #0
    5d2a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    5d2e:	f04f 0c01 	mov.w	ip, #1
    5d32:	e44e      	b.n	55d2 <_strtod_l+0x1ca>
    5d34:	2c6e      	cmp	r4, #110	; 0x6e
    5d36:	f43f ad10 	beq.w	575a <_strtod_l+0x352>
    5d3a:	e44d      	b.n	55d8 <_strtod_l+0x1d0>
    5d3c:	f43f ad60 	beq.w	5800 <_strtod_l+0x3f8>
    5d40:	425b      	negs	r3, r3
    5d42:	f013 010f 	ands.w	r1, r3, #15
    5d46:	d00a      	beq.n	5d5e <_strtod_l+0x956>
    5d48:	4a31      	ldr	r2, [pc, #196]	; (5e10 <_strtod_l+0xa08>)
    5d4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    5d4e:	ed9d 6b04 	vldr	d6, [sp, #16]
    5d52:	ed92 7b00 	vldr	d7, [r2]
    5d56:	ee86 7b07 	vdiv.f64	d7, d6, d7
    5d5a:	ed8d 7b04 	vstr	d7, [sp, #16]
    5d5e:	111b      	asrs	r3, r3, #4
    5d60:	f43f ad4e 	beq.w	5800 <_strtod_l+0x3f8>
    5d64:	2b1f      	cmp	r3, #31
    5d66:	dc33      	bgt.n	5dd0 <_strtod_l+0x9c8>
    5d68:	f013 0210 	ands.w	r2, r3, #16
    5d6c:	bf18      	it	ne
    5d6e:	226a      	movne	r2, #106	; 0x6a
    5d70:	ed9d 7b04 	vldr	d7, [sp, #16]
    5d74:	9208      	str	r2, [sp, #32]
    5d76:	4a27      	ldr	r2, [pc, #156]	; (5e14 <_strtod_l+0xa0c>)
    5d78:	2100      	movs	r1, #0
    5d7a:	07d8      	lsls	r0, r3, #31
    5d7c:	d504      	bpl.n	5d88 <_strtod_l+0x980>
    5d7e:	ed92 6b00 	vldr	d6, [r2]
    5d82:	2101      	movs	r1, #1
    5d84:	ee27 7b06 	vmul.f64	d7, d7, d6
    5d88:	105b      	asrs	r3, r3, #1
    5d8a:	f102 0208 	add.w	r2, r2, #8
    5d8e:	d1f4      	bne.n	5d7a <_strtod_l+0x972>
    5d90:	b109      	cbz	r1, 5d96 <_strtod_l+0x98e>
    5d92:	ed8d 7b04 	vstr	d7, [sp, #16]
    5d96:	9b08      	ldr	r3, [sp, #32]
    5d98:	b193      	cbz	r3, 5dc0 <_strtod_l+0x9b8>
    5d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    5d9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    5da2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    5da6:	2b00      	cmp	r3, #0
    5da8:	dd0a      	ble.n	5dc0 <_strtod_l+0x9b8>
    5daa:	2b1f      	cmp	r3, #31
    5dac:	f340 822f 	ble.w	620e <_strtod_l+0xe06>
    5db0:	2000      	movs	r0, #0
    5db2:	2b34      	cmp	r3, #52	; 0x34
    5db4:	9004      	str	r0, [sp, #16]
    5db6:	f340 8240 	ble.w	623a <_strtod_l+0xe32>
    5dba:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    5dbe:	9305      	str	r3, [sp, #20]
    5dc0:	ed9d 7b04 	vldr	d7, [sp, #16]
    5dc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    5dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5dcc:	f47f ad1a 	bne.w	5804 <_strtod_l+0x3fc>
    5dd0:	2322      	movs	r3, #34	; 0x22
    5dd2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 5de8 <_strtod_l+0x9e0>
    5dd6:	f8c8 3000 	str.w	r3, [r8]
    5dda:	e4d2      	b.n	5782 <_strtod_l+0x37a>
    5ddc:	2322      	movs	r3, #34	; 0x22
    5dde:	ed9f 8b04 	vldr	d8, [pc, #16]	; 5df0 <_strtod_l+0x9e8>
    5de2:	f8c8 3000 	str.w	r3, [r8]
    5de6:	e4cc      	b.n	5782 <_strtod_l+0x37a>
	...
    5df4:	7ff00000 	.word	0x7ff00000
    5df8:	bff00000 	.word	0xbff00000
    5dfc:	7ff00000 	.word	0x7ff00000
    5e00:	7c9fffff 	.word	0x7c9fffff
    5e04:	7fefffff 	.word	0x7fefffff
    5e08:	20000280 	.word	0x20000280
    5e0c:	7ca00000 	.word	0x7ca00000
    5e10:	200002a8 	.word	0x200002a8
    5e14:	20000370 	.word	0x20000370
    5e18:	9302      	str	r3, [sp, #8]
    5e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e1c:	9301      	str	r3, [sp, #4]
    5e1e:	ab12      	add	r3, sp, #72	; 0x48
    5e20:	9300      	str	r3, [sp, #0]
    5e22:	4aa7      	ldr	r2, [pc, #668]	; (60c0 <_strtod_l+0xcb8>)
    5e24:	ab13      	add	r3, sp, #76	; 0x4c
    5e26:	a911      	add	r1, sp, #68	; 0x44
    5e28:	4640      	mov	r0, r8
    5e2a:	f001 fd53 	bl	78d4 <__gethex>
    5e2e:	f010 050f 	ands.w	r5, r0, #15
    5e32:	4604      	mov	r4, r0
    5e34:	f43f aca3 	beq.w	577e <_strtod_l+0x376>
    5e38:	2d06      	cmp	r5, #6
    5e3a:	d174      	bne.n	5f26 <_strtod_l+0xb1e>
    5e3c:	9b07      	ldr	r3, [sp, #28]
    5e3e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 60a8 <_strtod_l+0xca0>
    5e42:	3701      	adds	r7, #1
    5e44:	2b00      	cmp	r3, #0
    5e46:	f43f abce 	beq.w	55e6 <_strtod_l+0x1de>
    5e4a:	601f      	str	r7, [r3, #0]
    5e4c:	f7ff bbcb 	b.w	55e6 <_strtod_l+0x1de>
    5e50:	ed9d 8b04 	vldr	d8, [sp, #16]
    5e54:	e495      	b.n	5782 <_strtod_l+0x37a>
    5e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5e58:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    5e5c:	4403      	add	r3, r0
    5e5e:	930b      	str	r3, [sp, #44]	; 0x2c
    5e60:	2801      	cmp	r0, #1
    5e62:	f105 0301 	add.w	r3, r5, #1
    5e66:	461a      	mov	r2, r3
    5e68:	d014      	beq.n	5e94 <_strtod_l+0xa8c>
    5e6a:	4428      	add	r0, r5
    5e6c:	1e44      	subs	r4, r0, #1
    5e6e:	e003      	b.n	5e78 <_strtod_l+0xa70>
    5e70:	0046      	lsls	r6, r0, #1
    5e72:	429c      	cmp	r4, r3
    5e74:	d00d      	beq.n	5e92 <_strtod_l+0xa8a>
    5e76:	3301      	adds	r3, #1
    5e78:	462a      	mov	r2, r5
    5e7a:	2a08      	cmp	r2, #8
    5e7c:	461d      	mov	r5, r3
    5e7e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    5e82:	d9f5      	bls.n	5e70 <_strtod_l+0xa68>
    5e84:	2b10      	cmp	r3, #16
    5e86:	bfdc      	itt	le
    5e88:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    5e8c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    5e90:	e7ef      	b.n	5e72 <_strtod_l+0xa6a>
    5e92:	3202      	adds	r2, #2
    5e94:	2d08      	cmp	r5, #8
    5e96:	dc3c      	bgt.n	5f12 <_strtod_l+0xb0a>
    5e98:	4615      	mov	r5, r2
    5e9a:	f7ff bb79 	b.w	5590 <_strtod_l+0x188>
    5e9e:	4989      	ldr	r1, [pc, #548]	; (60c4 <_strtod_l+0xcbc>)
    5ea0:	2201      	movs	r2, #1
    5ea2:	4638      	mov	r0, r7
    5ea4:	f000 fdac 	bl	6a00 <strncmp>
    5ea8:	2800      	cmp	r0, #0
    5eaa:	f000 8082 	beq.w	5fb2 <_strtod_l+0xbaa>
    5eae:	f04f 0e00 	mov.w	lr, #0
    5eb2:	46f1      	mov	r9, lr
    5eb4:	4676      	mov	r6, lr
    5eb6:	4675      	mov	r5, lr
    5eb8:	f7ff bbb5 	b.w	5626 <_strtod_l+0x21e>
    5ebc:	f644 631f 	movw	r3, #19999	; 0x4e1f
    5ec0:	459b      	cmp	fp, r3
    5ec2:	bfa8      	it	ge
    5ec4:	469b      	movge	fp, r3
    5ec6:	e42f      	b.n	5728 <_strtod_l+0x320>
    5ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    5ecc:	4618      	mov	r0, r3
    5ece:	2b00      	cmp	r3, #0
    5ed0:	f47f ae23 	bne.w	5b1a <_strtod_l+0x712>
    5ed4:	2322      	movs	r3, #34	; 0x22
    5ed6:	ed9f 8b74 	vldr	d8, [pc, #464]	; 60a8 <_strtod_l+0xca0>
    5eda:	9812      	ldr	r0, [sp, #72]	; 0x48
    5edc:	f8c8 3000 	str.w	r3, [r8]
    5ee0:	e678      	b.n	5bd4 <_strtod_l+0x7cc>
    5ee2:	eeb0 7b49 	vmov.f64	d7, d9
    5ee6:	e6c0      	b.n	5c6a <_strtod_l+0x862>
    5ee8:	4977      	ldr	r1, [pc, #476]	; (60c8 <_strtod_l+0xcc0>)
    5eea:	a811      	add	r0, sp, #68	; 0x44
    5eec:	f001 ffbc 	bl	7e68 <__match>
    5ef0:	2800      	cmp	r0, #0
    5ef2:	f43f ab71 	beq.w	55d8 <_strtod_l+0x1d0>
    5ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ef8:	4974      	ldr	r1, [pc, #464]	; (60cc <_strtod_l+0xcc4>)
    5efa:	3b01      	subs	r3, #1
    5efc:	a811      	add	r0, sp, #68	; 0x44
    5efe:	9311      	str	r3, [sp, #68]	; 0x44
    5f00:	f001 ffb2 	bl	7e68 <__match>
    5f04:	b910      	cbnz	r0, 5f0c <_strtod_l+0xb04>
    5f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f08:	3301      	adds	r3, #1
    5f0a:	9311      	str	r3, [sp, #68]	; 0x44
    5f0c:	ed9f 8b68 	vldr	d8, [pc, #416]	; 60b0 <_strtod_l+0xca8>
    5f10:	e437      	b.n	5782 <_strtod_l+0x37a>
    5f12:	2a10      	cmp	r2, #16
    5f14:	bfdc      	itt	le
    5f16:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    5f1a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    5f1e:	4615      	mov	r5, r2
    5f20:	2000      	movs	r0, #0
    5f22:	f7ff bb3a 	b.w	559a <_strtod_l+0x192>
    5f26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    5f28:	b13a      	cbz	r2, 5f3a <_strtod_l+0xb32>
    5f2a:	2135      	movs	r1, #53	; 0x35
    5f2c:	a814      	add	r0, sp, #80	; 0x50
    5f2e:	f002 fd7f 	bl	8a30 <__copybits>
    5f32:	9912      	ldr	r1, [sp, #72]	; 0x48
    5f34:	4640      	mov	r0, r8
    5f36:	f002 f8c7 	bl	80c8 <_Bfree>
    5f3a:	3d01      	subs	r5, #1
    5f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5f3e:	2d04      	cmp	r5, #4
    5f40:	f200 818f 	bhi.w	6262 <_strtod_l+0xe5a>
    5f44:	e8df f005 	tbb	[pc, r5]
    5f48:	1f2a2d03 	.word	0x1f2a2d03
    5f4c:	03          	.byte	0x03
    5f4d:	00          	.byte	0x00
    5f4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5f50:	9204      	str	r2, [sp, #16]
    5f52:	f203 4233 	addw	r2, r3, #1075	; 0x433
    5f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5f58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    5f5c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    5f60:	9305      	str	r3, [sp, #20]
    5f62:	05e5      	lsls	r5, r4, #23
    5f64:	d502      	bpl.n	5f6c <_strtod_l+0xb64>
    5f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    5f6a:	9305      	str	r3, [sp, #20]
    5f6c:	4a58      	ldr	r2, [pc, #352]	; (60d0 <_strtod_l+0xcc8>)
    5f6e:	401a      	ands	r2, r3
    5f70:	ed9d 8b04 	vldr	d8, [sp, #16]
    5f74:	2a00      	cmp	r2, #0
    5f76:	f47f ac04 	bne.w	5782 <_strtod_l+0x37a>
    5f7a:	f001 f839 	bl	6ff0 <__errno>
    5f7e:	2322      	movs	r3, #34	; 0x22
    5f80:	6003      	str	r3, [r0, #0]
    5f82:	f7ff bbfe 	b.w	5782 <_strtod_l+0x37a>
    5f86:	f04f 33ff 	mov.w	r3, #4294967295
    5f8a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    5f8e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    5f92:	05e3      	lsls	r3, r4, #23
    5f94:	f57f af5c 	bpl.w	5e50 <_strtod_l+0xa48>
    5f98:	9b05      	ldr	r3, [sp, #20]
    5f9a:	e7e4      	b.n	5f66 <_strtod_l+0xb5e>
    5f9c:	4b4c      	ldr	r3, [pc, #304]	; (60d0 <_strtod_l+0xcc8>)
    5f9e:	9305      	str	r3, [sp, #20]
    5fa0:	e7f7      	b.n	5f92 <_strtod_l+0xb8a>
    5fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5fa4:	9304      	str	r3, [sp, #16]
    5fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5fa8:	9305      	str	r3, [sp, #20]
    5faa:	e7da      	b.n	5f62 <_strtod_l+0xb5a>
    5fac:	2000      	movs	r0, #0
    5fae:	f7ff bae1 	b.w	5574 <_strtod_l+0x16c>
    5fb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5fb4:	461a      	mov	r2, r3
    5fb6:	3301      	adds	r3, #1
    5fb8:	9311      	str	r3, [sp, #68]	; 0x44
    5fba:	7854      	ldrb	r4, [r2, #1]
    5fbc:	4606      	mov	r6, r0
    5fbe:	4681      	mov	r9, r0
    5fc0:	f7ff bacd 	b.w	555e <_strtod_l+0x156>
    5fc4:	4b43      	ldr	r3, [pc, #268]	; (60d4 <_strtod_l+0xccc>)
    5fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5fca:	ed93 8b00 	vldr	d8, [r3]
    5fce:	ed9d 7b04 	vldr	d7, [sp, #16]
    5fd2:	ee28 8b07 	vmul.f64	d8, d8, d7
    5fd6:	f7ff bbd4 	b.w	5782 <_strtod_l+0x37a>
    5fda:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    5fde:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    5fe2:	e511      	b.n	5a08 <_strtod_l+0x600>
    5fe4:	46ae      	mov	lr, r5
    5fe6:	900b      	str	r0, [sp, #44]	; 0x2c
    5fe8:	f7ff badc 	b.w	55a4 <_strtod_l+0x19c>
    5fec:	4b39      	ldr	r3, [pc, #228]	; (60d4 <_strtod_l+0xccc>)
    5fee:	f1c5 050f 	rsb	r5, r5, #15
    5ff2:	1b4a      	subs	r2, r1, r5
    5ff4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    5ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5ffc:	ed95 8b00 	vldr	d8, [r5]
    6000:	ed93 7b00 	vldr	d7, [r3]
    6004:	ed9d 6b04 	vldr	d6, [sp, #16]
    6008:	ee28 8b06 	vmul.f64	d8, d8, d6
    600c:	ee28 8b07 	vmul.f64	d8, d8, d7
    6010:	f7ff bbb7 	b.w	5782 <_strtod_l+0x37a>
    6014:	2d00      	cmp	r5, #0
    6016:	f000 8095 	beq.w	6144 <_strtod_l+0xd3c>
    601a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    601e:	4b2e      	ldr	r3, [pc, #184]	; (60d8 <_strtod_l+0xcd0>)
    6020:	f3cc 0113 	ubfx	r1, ip, #0, #20
    6024:	4299      	cmp	r1, r3
    6026:	4662      	mov	r2, ip
    6028:	f000 80d2 	beq.w	61d0 <_strtod_l+0xdc8>
    602c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    602e:	2b00      	cmp	r3, #0
    6030:	f000 80a5 	beq.w	617e <_strtod_l+0xd76>
    6034:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6038:	4213      	tst	r3, r2
    603a:	4617      	mov	r7, r2
    603c:	d01a      	beq.n	6074 <_strtod_l+0xc6c>
    603e:	eeb0 0b48 	vmov.f64	d0, d8
    6042:	2d00      	cmp	r5, #0
    6044:	f000 80a6 	beq.w	6194 <_strtod_l+0xd8c>
    6048:	f002 fbc2 	bl	87d0 <__ulp>
    604c:	9b08      	ldr	r3, [sp, #32]
    604e:	b17b      	cbz	r3, 6070 <_strtod_l+0xc68>
    6050:	f3c7 530a 	ubfx	r3, r7, #20, #11
    6054:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6058:	2b00      	cmp	r3, #0
    605a:	dd09      	ble.n	6070 <_strtod_l+0xc68>
    605c:	051b      	lsls	r3, r3, #20
    605e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    6062:	2000      	movs	r0, #0
    6064:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    6068:	ec41 0b17 	vmov	d7, r0, r1
    606c:	ee20 0b07 	vmul.f64	d0, d0, d7
    6070:	ee38 8b00 	vadd.f64	d8, d8, d0
    6074:	9b08      	ldr	r3, [sp, #32]
    6076:	b15b      	cbz	r3, 6090 <_strtod_l+0xc88>
    6078:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 60b8 <_strtod_l+0xcb0>
    607c:	4b14      	ldr	r3, [pc, #80]	; (60d0 <_strtod_l+0xcc8>)
    607e:	ee28 8b07 	vmul.f64	d8, d8, d7
    6082:	ee18 2a90 	vmov	r2, s17
    6086:	4013      	ands	r3, r2
    6088:	b913      	cbnz	r3, 6090 <_strtod_l+0xc88>
    608a:	2322      	movs	r3, #34	; 0x22
    608c:	f8c8 3000 	str.w	r3, [r8]
    6090:	9812      	ldr	r0, [sp, #72]	; 0x48
    6092:	e59f      	b.n	5bd4 <_strtod_l+0x7cc>
    6094:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    6098:	9305      	str	r3, [sp, #20]
    609a:	2300      	movs	r3, #0
    609c:	9308      	str	r3, [sp, #32]
    609e:	f7ff bbb1 	b.w	5804 <_strtod_l+0x3fc>
    60a2:	bf00      	nop
    60a4:	f3af 8000 	nop.w
	...
    60b4:	7ff00000 	.word	0x7ff00000
    60b8:	00000000 	.word	0x00000000
    60bc:	39500000 	.word	0x39500000
    60c0:	20000e58 	.word	0x20000e58
    60c4:	20000a8c 	.word	0x20000a8c
    60c8:	20000a90 	.word	0x20000a90
    60cc:	20000a94 	.word	0x20000a94
    60d0:	7ff00000 	.word	0x7ff00000
    60d4:	200002a8 	.word	0x200002a8
    60d8:	000fffff 	.word	0x000fffff
    60dc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    60e0:	430d      	orrs	r5, r1
    60e2:	d1c7      	bne.n	6074 <_strtod_l+0xc6c>
    60e4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    60e8:	4617      	mov	r7, r2
    60ea:	2b00      	cmp	r3, #0
    60ec:	d1c2      	bne.n	6074 <_strtod_l+0xc6c>
    60ee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    60f2:	0d1b      	lsrs	r3, r3, #20
    60f4:	051b      	lsls	r3, r3, #20
    60f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    60fa:	d9bb      	bls.n	6074 <_strtod_l+0xc6c>
    60fc:	f8da 3014 	ldr.w	r3, [sl, #20]
    6100:	b91b      	cbnz	r3, 610a <_strtod_l+0xd02>
    6102:	f8da 3010 	ldr.w	r3, [sl, #16]
    6106:	2b01      	cmp	r3, #1
    6108:	ddb4      	ble.n	6074 <_strtod_l+0xc6c>
    610a:	4651      	mov	r1, sl
    610c:	2201      	movs	r2, #1
    610e:	4640      	mov	r0, r8
    6110:	f002 fa1a 	bl	8548 <__lshift>
    6114:	4621      	mov	r1, r4
    6116:	4682      	mov	sl, r0
    6118:	f002 fa8e 	bl	8638 <__mcmp>
    611c:	2800      	cmp	r0, #0
    611e:	dda9      	ble.n	6074 <_strtod_l+0xc6c>
    6120:	9b08      	ldr	r3, [sp, #32]
    6122:	2b00      	cmp	r3, #0
    6124:	d17e      	bne.n	6224 <_strtod_l+0xe1c>
    6126:	4b50      	ldr	r3, [pc, #320]	; (6268 <_strtod_l+0xe60>)
    6128:	403b      	ands	r3, r7
    612a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    612e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    6132:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    6136:	9305      	str	r3, [sp, #20]
    6138:	f04f 33ff 	mov.w	r3, #4294967295
    613c:	9304      	str	r3, [sp, #16]
    613e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6142:	e797      	b.n	6074 <_strtod_l+0xc6c>
    6144:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6148:	f3c2 0313 	ubfx	r3, r2, #0, #20
    614c:	430b      	orrs	r3, r1
    614e:	4617      	mov	r7, r2
    6150:	f47f af6c 	bne.w	602c <_strtod_l+0xc24>
    6154:	e7e4      	b.n	6120 <_strtod_l+0xd18>
    6156:	4945      	ldr	r1, [pc, #276]	; (626c <_strtod_l+0xe64>)
    6158:	a811      	add	r0, sp, #68	; 0x44
    615a:	aa14      	add	r2, sp, #80	; 0x50
    615c:	f001 fea0 	bl	7ea0 <__hexnan>
    6160:	2805      	cmp	r0, #5
    6162:	f47f ab06 	bne.w	5772 <_strtod_l+0x36a>
    6166:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6168:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    616c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    6170:	9305      	str	r3, [sp, #20]
    6172:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6174:	9304      	str	r3, [sp, #16]
    6176:	ed9d 8b04 	vldr	d8, [sp, #16]
    617a:	f7ff bb02 	b.w	5782 <_strtod_l+0x37a>
    617e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6184:	4203      	tst	r3, r0
    6186:	f43f af75 	beq.w	6074 <_strtod_l+0xc6c>
    618a:	460f      	mov	r7, r1
    618c:	e757      	b.n	603e <_strtod_l+0xc36>
    618e:	4c38      	ldr	r4, [pc, #224]	; (6270 <_strtod_l+0xe68>)
    6190:	2100      	movs	r1, #0
    6192:	e58f      	b.n	5cb4 <_strtod_l+0x8ac>
    6194:	f002 fb1c 	bl	87d0 <__ulp>
    6198:	9b08      	ldr	r3, [sp, #32]
    619a:	2b00      	cmp	r3, #0
    619c:	d055      	beq.n	624a <_strtod_l+0xe42>
    619e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    61a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    61a6:	2b00      	cmp	r3, #0
    61a8:	dd09      	ble.n	61be <_strtod_l+0xdb6>
    61aa:	051b      	lsls	r3, r3, #20
    61ac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    61b0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    61b4:	4628      	mov	r0, r5
    61b6:	ec41 0b17 	vmov	d7, r0, r1
    61ba:	ee20 0b07 	vmul.f64	d0, d0, d7
    61be:	ee38 8b40 	vsub.f64	d8, d8, d0
    61c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    61c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    61ca:	f47f af55 	bne.w	6078 <_strtod_l+0xc70>
    61ce:	e681      	b.n	5ed4 <_strtod_l+0xacc>
    61d0:	9b08      	ldr	r3, [sp, #32]
    61d2:	9904      	ldr	r1, [sp, #16]
    61d4:	b31b      	cbz	r3, 621e <_strtod_l+0xe16>
    61d6:	4b24      	ldr	r3, [pc, #144]	; (6268 <_strtod_l+0xe60>)
    61d8:	4013      	ands	r3, r2
    61da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    61de:	d81e      	bhi.n	621e <_strtod_l+0xe16>
    61e0:	0d1b      	lsrs	r3, r3, #20
    61e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    61e6:	f04f 30ff 	mov.w	r0, #4294967295
    61ea:	fa00 f303 	lsl.w	r3, r0, r3
    61ee:	4299      	cmp	r1, r3
    61f0:	f47f af1c 	bne.w	602c <_strtod_l+0xc24>
    61f4:	4b1f      	ldr	r3, [pc, #124]	; (6274 <_strtod_l+0xe6c>)
    61f6:	429a      	cmp	r2, r3
    61f8:	d030      	beq.n	625c <_strtod_l+0xe54>
    61fa:	4b1b      	ldr	r3, [pc, #108]	; (6268 <_strtod_l+0xe60>)
    61fc:	4013      	ands	r3, r2
    61fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    6202:	9305      	str	r3, [sp, #20]
    6204:	2300      	movs	r3, #0
    6206:	9304      	str	r3, [sp, #16]
    6208:	ed9d 8b04 	vldr	d8, [sp, #16]
    620c:	e732      	b.n	6074 <_strtod_l+0xc6c>
    620e:	f04f 32ff 	mov.w	r2, #4294967295
    6212:	fa02 f303 	lsl.w	r3, r2, r3
    6216:	9a04      	ldr	r2, [sp, #16]
    6218:	401a      	ands	r2, r3
    621a:	9204      	str	r2, [sp, #16]
    621c:	e5d0      	b.n	5dc0 <_strtod_l+0x9b8>
    621e:	f04f 33ff 	mov.w	r3, #4294967295
    6222:	e7e4      	b.n	61ee <_strtod_l+0xde6>
    6224:	4b10      	ldr	r3, [pc, #64]	; (6268 <_strtod_l+0xe60>)
    6226:	403b      	ands	r3, r7
    6228:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    622c:	f73f af7d 	bgt.w	612a <_strtod_l+0xd22>
    6230:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    6234:	f73f af20 	bgt.w	6078 <_strtod_l+0xc70>
    6238:	e64c      	b.n	5ed4 <_strtod_l+0xacc>
    623a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    623e:	f04f 33ff 	mov.w	r3, #4294967295
    6242:	4093      	lsls	r3, r2
    6244:	400b      	ands	r3, r1
    6246:	9305      	str	r3, [sp, #20]
    6248:	e5ba      	b.n	5dc0 <_strtod_l+0x9b8>
    624a:	ee38 8b40 	vsub.f64	d8, d8, d0
    624e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6256:	f47f af1b 	bne.w	6090 <_strtod_l+0xc88>
    625a:	e63b      	b.n	5ed4 <_strtod_l+0xacc>
    625c:	3101      	adds	r1, #1
    625e:	d1cc      	bne.n	61fa <_strtod_l+0xdf2>
    6260:	e409      	b.n	5a76 <_strtod_l+0x66e>
    6262:	2300      	movs	r3, #0
    6264:	e67d      	b.n	5f62 <_strtod_l+0xb5a>
    6266:	bf00      	nop
    6268:	7ff00000 	.word	0x7ff00000
    626c:	20000e6c 	.word	0x20000e6c
    6270:	20000280 	.word	0x20000280
    6274:	7fefffff 	.word	0x7fefffff

00006278 <strtof>:
    6278:	b510      	push	{r4, lr}
    627a:	4c23      	ldr	r4, [pc, #140]	; (6308 <strtof+0x90>)
    627c:	4b23      	ldr	r3, [pc, #140]	; (630c <strtof+0x94>)
    627e:	4684      	mov	ip, r0
    6280:	460a      	mov	r2, r1
    6282:	6820      	ldr	r0, [r4, #0]
    6284:	4661      	mov	r1, ip
    6286:	f7ff f8bf 	bl	5408 <_strtod_l>
    628a:	eeb4 0b40 	vcmp.f64	d0, d0
    628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6292:	d627      	bvs.n	62e4 <strtof+0x6c>
    6294:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    6298:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 6310 <strtof+0x98>
    629c:	eef0 6ae7 	vabs.f32	s13, s15
    62a0:	eef4 6a47 	vcmp.f32	s13, s14
    62a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62a8:	dd0e      	ble.n	62c8 <strtof+0x50>
    62aa:	eeb0 5bc0 	vabs.f64	d5, d0
    62ae:	ed9f 6b14 	vldr	d6, [pc, #80]	; 6300 <strtof+0x88>
    62b2:	eeb4 5b46 	vcmp.f64	d5, d6
    62b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62ba:	dc05      	bgt.n	62c8 <strtof+0x50>
    62bc:	6823      	ldr	r3, [r4, #0]
    62be:	2222      	movs	r2, #34	; 0x22
    62c0:	601a      	str	r2, [r3, #0]
    62c2:	eeb0 0a67 	vmov.f32	s0, s15
    62c6:	bd10      	pop	{r4, pc}
    62c8:	ee17 3a90 	vmov	r3, s15
    62cc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    62d0:	d1f7      	bne.n	62c2 <strtof+0x4a>
    62d2:	4b10      	ldr	r3, [pc, #64]	; (6314 <strtof+0x9c>)
    62d4:	ee10 2a90 	vmov	r2, s1
    62d8:	4013      	ands	r3, r2
    62da:	2b00      	cmp	r3, #0
    62dc:	d1ee      	bne.n	62bc <strtof+0x44>
    62de:	eeb0 0a67 	vmov.f32	s0, s15
    62e2:	bd10      	pop	{r4, pc}
    62e4:	ee10 3a90 	vmov	r3, s1
    62e8:	2b00      	cmp	r3, #0
    62ea:	480b      	ldr	r0, [pc, #44]	; (6318 <strtof+0xa0>)
    62ec:	da04      	bge.n	62f8 <strtof+0x80>
    62ee:	f001 f8ff 	bl	74f0 <nanf>
    62f2:	eef1 7a40 	vneg.f32	s15, s0
    62f6:	e7e4      	b.n	62c2 <strtof+0x4a>
    62f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    62fc:	f001 b8f8 	b.w	74f0 <nanf>
    6300:	ffffffff 	.word	0xffffffff
    6304:	7fefffff 	.word	0x7fefffff
    6308:	200016c4 	.word	0x200016c4
    630c:	2000113c 	.word	0x2000113c
    6310:	7f7fffff 	.word	0x7f7fffff
    6314:	7ff00000 	.word	0x7ff00000
    6318:	200003b8 	.word	0x200003b8

0000631c <_strtol_l.constprop.0>:
    631c:	2b01      	cmp	r3, #1
    631e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6322:	d040      	beq.n	63a6 <_strtol_l.constprop.0+0x8a>
    6324:	2b24      	cmp	r3, #36	; 0x24
    6326:	4698      	mov	r8, r3
    6328:	d83d      	bhi.n	63a6 <_strtol_l.constprop.0+0x8a>
    632a:	4d4c      	ldr	r5, [pc, #304]	; (645c <_strtol_l.constprop.0+0x140>)
    632c:	468e      	mov	lr, r1
    632e:	4676      	mov	r6, lr
    6330:	f81e bb01 	ldrb.w	fp, [lr], #1
    6334:	f815 400b 	ldrb.w	r4, [r5, fp]
    6338:	f014 0408 	ands.w	r4, r4, #8
    633c:	d1f7      	bne.n	632e <_strtol_l.constprop.0+0x12>
    633e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    6342:	d072      	beq.n	642a <_strtol_l.constprop.0+0x10e>
    6344:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    6348:	bf08      	it	eq
    634a:	f89e b000 	ldrbeq.w	fp, [lr]
    634e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    6352:	bf08      	it	eq
    6354:	f106 0e02 	addeq.w	lr, r6, #2
    6358:	2b00      	cmp	r3, #0
    635a:	d042      	beq.n	63e2 <_strtol_l.constprop.0+0xc6>
    635c:	2b10      	cmp	r3, #16
    635e:	d057      	beq.n	6410 <_strtol_l.constprop.0+0xf4>
    6360:	fbb9 f7f8 	udiv	r7, r9, r8
    6364:	2500      	movs	r5, #0
    6366:	462e      	mov	r6, r5
    6368:	fb08 9a17 	mls	sl, r8, r7, r9
    636c:	e005      	b.n	637a <_strtol_l.constprop.0+0x5e>
    636e:	d033      	beq.n	63d8 <_strtol_l.constprop.0+0xbc>
    6370:	fb08 c606 	mla	r6, r8, r6, ip
    6374:	2501      	movs	r5, #1
    6376:	f81e bb01 	ldrb.w	fp, [lr], #1
    637a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    637e:	f1bc 0f09 	cmp.w	ip, #9
    6382:	d906      	bls.n	6392 <_strtol_l.constprop.0+0x76>
    6384:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    6388:	f1bc 0f19 	cmp.w	ip, #25
    638c:	d812      	bhi.n	63b4 <_strtol_l.constprop.0+0x98>
    638e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    6392:	4563      	cmp	r3, ip
    6394:	dd17      	ble.n	63c6 <_strtol_l.constprop.0+0xaa>
    6396:	f1b5 3fff 	cmp.w	r5, #4294967295
    639a:	d0ec      	beq.n	6376 <_strtol_l.constprop.0+0x5a>
    639c:	42b7      	cmp	r7, r6
    639e:	d2e6      	bcs.n	636e <_strtol_l.constprop.0+0x52>
    63a0:	f04f 35ff 	mov.w	r5, #4294967295
    63a4:	e7e7      	b.n	6376 <_strtol_l.constprop.0+0x5a>
    63a6:	f000 fe23 	bl	6ff0 <__errno>
    63aa:	2316      	movs	r3, #22
    63ac:	6003      	str	r3, [r0, #0]
    63ae:	2000      	movs	r0, #0
    63b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63b4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    63b8:	f1bc 0f19 	cmp.w	ip, #25
    63bc:	d803      	bhi.n	63c6 <_strtol_l.constprop.0+0xaa>
    63be:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    63c2:	4563      	cmp	r3, ip
    63c4:	dce7      	bgt.n	6396 <_strtol_l.constprop.0+0x7a>
    63c6:	1c6b      	adds	r3, r5, #1
    63c8:	d027      	beq.n	641a <_strtol_l.constprop.0+0xfe>
    63ca:	b98c      	cbnz	r4, 63f0 <_strtol_l.constprop.0+0xd4>
    63cc:	b10a      	cbz	r2, 63d2 <_strtol_l.constprop.0+0xb6>
    63ce:	bba5      	cbnz	r5, 643a <_strtol_l.constprop.0+0x11e>
    63d0:	6011      	str	r1, [r2, #0]
    63d2:	4630      	mov	r0, r6
    63d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63d8:	45e2      	cmp	sl, ip
    63da:	dac9      	bge.n	6370 <_strtol_l.constprop.0+0x54>
    63dc:	f04f 35ff 	mov.w	r5, #4294967295
    63e0:	e7c9      	b.n	6376 <_strtol_l.constprop.0+0x5a>
    63e2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    63e6:	d005      	beq.n	63f4 <_strtol_l.constprop.0+0xd8>
    63e8:	f04f 080a 	mov.w	r8, #10
    63ec:	4643      	mov	r3, r8
    63ee:	e7b7      	b.n	6360 <_strtol_l.constprop.0+0x44>
    63f0:	4276      	negs	r6, r6
    63f2:	e7eb      	b.n	63cc <_strtol_l.constprop.0+0xb0>
    63f4:	f89e 3000 	ldrb.w	r3, [lr]
    63f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    63fc:	2b58      	cmp	r3, #88	; 0x58
    63fe:	d121      	bne.n	6444 <_strtol_l.constprop.0+0x128>
    6400:	f04f 0810 	mov.w	r8, #16
    6404:	f89e b001 	ldrb.w	fp, [lr, #1]
    6408:	4643      	mov	r3, r8
    640a:	f10e 0e02 	add.w	lr, lr, #2
    640e:	e7a7      	b.n	6360 <_strtol_l.constprop.0+0x44>
    6410:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    6414:	d01a      	beq.n	644c <_strtol_l.constprop.0+0x130>
    6416:	4698      	mov	r8, r3
    6418:	e7a2      	b.n	6360 <_strtol_l.constprop.0+0x44>
    641a:	2322      	movs	r3, #34	; 0x22
    641c:	6003      	str	r3, [r0, #0]
    641e:	b172      	cbz	r2, 643e <_strtol_l.constprop.0+0x122>
    6420:	f10e 31ff 	add.w	r1, lr, #4294967295
    6424:	464e      	mov	r6, r9
    6426:	6011      	str	r1, [r2, #0]
    6428:	e7d3      	b.n	63d2 <_strtol_l.constprop.0+0xb6>
    642a:	f89e b000 	ldrb.w	fp, [lr]
    642e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    6432:	f106 0e02 	add.w	lr, r6, #2
    6436:	2401      	movs	r4, #1
    6438:	e78e      	b.n	6358 <_strtol_l.constprop.0+0x3c>
    643a:	46b1      	mov	r9, r6
    643c:	e7f0      	b.n	6420 <_strtol_l.constprop.0+0x104>
    643e:	464e      	mov	r6, r9
    6440:	4630      	mov	r0, r6
    6442:	e7c7      	b.n	63d4 <_strtol_l.constprop.0+0xb8>
    6444:	f04f 0808 	mov.w	r8, #8
    6448:	4643      	mov	r3, r8
    644a:	e789      	b.n	6360 <_strtol_l.constprop.0+0x44>
    644c:	f89e 5000 	ldrb.w	r5, [lr]
    6450:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    6454:	2d58      	cmp	r5, #88	; 0x58
    6456:	d0d3      	beq.n	6400 <_strtol_l.constprop.0+0xe4>
    6458:	4698      	mov	r8, r3
    645a:	e781      	b.n	6360 <_strtol_l.constprop.0+0x44>
    645c:	2000091d 	.word	0x2000091d

00006460 <strtol>:
    6460:	b410      	push	{r4}
    6462:	4c05      	ldr	r4, [pc, #20]	; (6478 <strtol+0x18>)
    6464:	4684      	mov	ip, r0
    6466:	4613      	mov	r3, r2
    6468:	6820      	ldr	r0, [r4, #0]
    646a:	f85d 4b04 	ldr.w	r4, [sp], #4
    646e:	460a      	mov	r2, r1
    6470:	4661      	mov	r1, ip
    6472:	f7ff bf53 	b.w	631c <_strtol_l.constprop.0>
    6476:	bf00      	nop
    6478:	200016c4 	.word	0x200016c4

0000647c <__utoa>:
    647c:	b5f0      	push	{r4, r5, r6, r7, lr}
    647e:	4f25      	ldr	r7, [pc, #148]	; (6514 <__utoa+0x98>)
    6480:	f1a2 0e02 	sub.w	lr, r2, #2
    6484:	4616      	mov	r6, r2
    6486:	4605      	mov	r5, r0
    6488:	460c      	mov	r4, r1
    648a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    648c:	b08b      	sub	sp, #44	; 0x2c
    648e:	46ec      	mov	ip, sp
    6490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6494:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    6496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    649a:	e897 0003 	ldmia.w	r7, {r0, r1}
    649e:	f84c 0b04 	str.w	r0, [ip], #4
    64a2:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    64a6:	f88c 1000 	strb.w	r1, [ip]
    64aa:	d82e      	bhi.n	650a <__utoa+0x8e>
    64ac:	f104 3eff 	add.w	lr, r4, #4294967295
    64b0:	4670      	mov	r0, lr
    64b2:	f04f 0c00 	mov.w	ip, #0
    64b6:	fbb5 f2f6 	udiv	r2, r5, r6
    64ba:	fb06 5312 	mls	r3, r6, r2, r5
    64be:	3328      	adds	r3, #40	; 0x28
    64c0:	446b      	add	r3, sp
    64c2:	4661      	mov	r1, ip
    64c4:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    64c8:	f800 cf01 	strb.w	ip, [r0, #1]!
    64cc:	462b      	mov	r3, r5
    64ce:	429e      	cmp	r6, r3
    64d0:	f101 0c01 	add.w	ip, r1, #1
    64d4:	4615      	mov	r5, r2
    64d6:	d9ee      	bls.n	64b6 <__utoa+0x3a>
    64d8:	2300      	movs	r3, #0
    64da:	f804 300c 	strb.w	r3, [r4, ip]
    64de:	b189      	cbz	r1, 6504 <__utoa+0x88>
    64e0:	44a4      	add	ip, r4
    64e2:	4672      	mov	r2, lr
    64e4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    64e8:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    64ec:	f88e 5000 	strb.w	r5, [lr]
    64f0:	eba4 030e 	sub.w	r3, r4, lr
    64f4:	3202      	adds	r2, #2
    64f6:	3b01      	subs	r3, #1
    64f8:	1b12      	subs	r2, r2, r4
    64fa:	440b      	add	r3, r1
    64fc:	429a      	cmp	r2, r3
    64fe:	f88c 0000 	strb.w	r0, [ip]
    6502:	dbee      	blt.n	64e2 <__utoa+0x66>
    6504:	4620      	mov	r0, r4
    6506:	b00b      	add	sp, #44	; 0x2c
    6508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    650a:	2300      	movs	r3, #0
    650c:	4618      	mov	r0, r3
    650e:	7023      	strb	r3, [r4, #0]
    6510:	b00b      	add	sp, #44	; 0x2c
    6512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6514:	200008f4 	.word	0x200008f4

00006518 <__cxa_atexit>:
    6518:	4613      	mov	r3, r2
    651a:	460a      	mov	r2, r1
    651c:	4601      	mov	r1, r0
    651e:	2002      	movs	r0, #2
    6520:	f000 bfec 	b.w	74fc <__register_exitproc>

00006524 <fcvtf>:
    6524:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    6528:	2300      	movs	r3, #0
    652a:	f002 baef 	b.w	8b0c <fcvtbuf>
    652e:	bf00      	nop

00006530 <tolower>:
    6530:	4b03      	ldr	r3, [pc, #12]	; (6540 <tolower+0x10>)
    6532:	5c1b      	ldrb	r3, [r3, r0]
    6534:	f003 0303 	and.w	r3, r3, #3
    6538:	2b01      	cmp	r3, #1
    653a:	bf08      	it	eq
    653c:	3020      	addeq	r0, #32
    653e:	4770      	bx	lr
    6540:	2000091d 	.word	0x2000091d

00006544 <stdio_exit_handler>:
    6544:	4a02      	ldr	r2, [pc, #8]	; (6550 <stdio_exit_handler+0xc>)
    6546:	4903      	ldr	r1, [pc, #12]	; (6554 <stdio_exit_handler+0x10>)
    6548:	4803      	ldr	r0, [pc, #12]	; (6558 <stdio_exit_handler+0x14>)
    654a:	f000 b8bb 	b.w	66c4 <_fwalk_sglue>
    654e:	bf00      	nop
    6550:	200016b8 	.word	0x200016b8
    6554:	00008bb1 	.word	0x00008bb1
    6558:	20000f98 	.word	0x20000f98

0000655c <cleanup_stdio>:
    655c:	4b0c      	ldr	r3, [pc, #48]	; (6590 <cleanup_stdio+0x34>)
    655e:	6841      	ldr	r1, [r0, #4]
    6560:	4299      	cmp	r1, r3
    6562:	b510      	push	{r4, lr}
    6564:	4604      	mov	r4, r0
    6566:	d001      	beq.n	656c <cleanup_stdio+0x10>
    6568:	f002 fb22 	bl	8bb0 <_fclose_r>
    656c:	68a1      	ldr	r1, [r4, #8]
    656e:	4b09      	ldr	r3, [pc, #36]	; (6594 <cleanup_stdio+0x38>)
    6570:	4299      	cmp	r1, r3
    6572:	d002      	beq.n	657a <cleanup_stdio+0x1e>
    6574:	4620      	mov	r0, r4
    6576:	f002 fb1b 	bl	8bb0 <_fclose_r>
    657a:	68e1      	ldr	r1, [r4, #12]
    657c:	4b06      	ldr	r3, [pc, #24]	; (6598 <cleanup_stdio+0x3c>)
    657e:	4299      	cmp	r1, r3
    6580:	d004      	beq.n	658c <cleanup_stdio+0x30>
    6582:	4620      	mov	r0, r4
    6584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6588:	f002 bb12 	b.w	8bb0 <_fclose_r>
    658c:	bd10      	pop	{r4, pc}
    658e:	bf00      	nop
    6590:	20001f0c 	.word	0x20001f0c
    6594:	20001f74 	.word	0x20001f74
    6598:	20001fdc 	.word	0x20001fdc

0000659c <global_stdio_init.part.0>:
    659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65a0:	4c2a      	ldr	r4, [pc, #168]	; (664c <global_stdio_init.part.0+0xb0>)
    65a2:	4b2b      	ldr	r3, [pc, #172]	; (6650 <global_stdio_init.part.0+0xb4>)
    65a4:	482b      	ldr	r0, [pc, #172]	; (6654 <global_stdio_init.part.0+0xb8>)
    65a6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 6668 <global_stdio_init.part.0+0xcc>
    65aa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 666c <global_stdio_init.part.0+0xd0>
    65ae:	4f2a      	ldr	r7, [pc, #168]	; (6658 <global_stdio_init.part.0+0xbc>)
    65b0:	6018      	str	r0, [r3, #0]
    65b2:	2500      	movs	r5, #0
    65b4:	2304      	movs	r3, #4
    65b6:	2208      	movs	r2, #8
    65b8:	4629      	mov	r1, r5
    65ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    65be:	4e27      	ldr	r6, [pc, #156]	; (665c <global_stdio_init.part.0+0xc0>)
    65c0:	6665      	str	r5, [r4, #100]	; 0x64
    65c2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    65c6:	e9c4 5500 	strd	r5, r5, [r4]
    65ca:	e9c4 5504 	strd	r5, r5, [r4, #16]
    65ce:	61a5      	str	r5, [r4, #24]
    65d0:	f000 f95e 	bl	6890 <memset>
    65d4:	4b22      	ldr	r3, [pc, #136]	; (6660 <global_stdio_init.part.0+0xc4>)
    65d6:	6763      	str	r3, [r4, #116]	; 0x74
    65d8:	2208      	movs	r2, #8
    65da:	4629      	mov	r1, r5
    65dc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    65e0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    65e4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    65e8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    65ec:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    65f0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    65f4:	6725      	str	r5, [r4, #112]	; 0x70
    65f6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    65fa:	62e6      	str	r6, [r4, #44]	; 0x2c
    65fc:	f000 f948 	bl	6890 <memset>
    6600:	4b18      	ldr	r3, [pc, #96]	; (6664 <global_stdio_init.part.0+0xc8>)
    6602:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    6606:	4629      	mov	r1, r5
    6608:	f104 0368 	add.w	r3, r4, #104	; 0x68
    660c:	2208      	movs	r2, #8
    660e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    6612:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    6616:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    661a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    661e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    6622:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    6626:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    662a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    662e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    6632:	f000 f92d 	bl	6890 <memset>
    6636:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    663a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    663e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    6642:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    6646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    664a:	bf00      	nop
    664c:	20001f0c 	.word	0x20001f0c
    6650:	20002044 	.word	0x20002044
    6654:	00006545 	.word	0x00006545
    6658:	00006771 	.word	0x00006771
    665c:	00006791 	.word	0x00006791
    6660:	00010009 	.word	0x00010009
    6664:	00020012 	.word	0x00020012
    6668:	0000670d 	.word	0x0000670d
    666c:	00006731 	.word	0x00006731

00006670 <__sinit>:
    6670:	b510      	push	{r4, lr}
    6672:	4604      	mov	r4, r0
    6674:	480a      	ldr	r0, [pc, #40]	; (66a0 <__sinit+0x30>)
    6676:	f000 fce9 	bl	704c <__retarget_lock_acquire_recursive>
    667a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    667c:	b923      	cbnz	r3, 6688 <__sinit+0x18>
    667e:	4b09      	ldr	r3, [pc, #36]	; (66a4 <__sinit+0x34>)
    6680:	4a09      	ldr	r2, [pc, #36]	; (66a8 <__sinit+0x38>)
    6682:	681b      	ldr	r3, [r3, #0]
    6684:	6362      	str	r2, [r4, #52]	; 0x34
    6686:	b123      	cbz	r3, 6692 <__sinit+0x22>
    6688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    668c:	4804      	ldr	r0, [pc, #16]	; (66a0 <__sinit+0x30>)
    668e:	f000 bcdf 	b.w	7050 <__retarget_lock_release_recursive>
    6692:	f7ff ff83 	bl	659c <global_stdio_init.part.0>
    6696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    669a:	4801      	ldr	r0, [pc, #4]	; (66a0 <__sinit+0x30>)
    669c:	f000 bcd8 	b.w	7050 <__retarget_lock_release_recursive>
    66a0:	20001ed4 	.word	0x20001ed4
    66a4:	20002044 	.word	0x20002044
    66a8:	0000655d 	.word	0x0000655d

000066ac <__sfp_lock_acquire>:
    66ac:	4801      	ldr	r0, [pc, #4]	; (66b4 <__sfp_lock_acquire+0x8>)
    66ae:	f000 bccd 	b.w	704c <__retarget_lock_acquire_recursive>
    66b2:	bf00      	nop
    66b4:	20001ed4 	.word	0x20001ed4

000066b8 <__sfp_lock_release>:
    66b8:	4801      	ldr	r0, [pc, #4]	; (66c0 <__sfp_lock_release+0x8>)
    66ba:	f000 bcc9 	b.w	7050 <__retarget_lock_release_recursive>
    66be:	bf00      	nop
    66c0:	20001ed4 	.word	0x20001ed4

000066c4 <_fwalk_sglue>:
    66c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66c8:	4680      	mov	r8, r0
    66ca:	460f      	mov	r7, r1
    66cc:	4616      	mov	r6, r2
    66ce:	f04f 0900 	mov.w	r9, #0
    66d2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    66d6:	3d01      	subs	r5, #1
    66d8:	d411      	bmi.n	66fe <_fwalk_sglue+0x3a>
    66da:	89a3      	ldrh	r3, [r4, #12]
    66dc:	2b01      	cmp	r3, #1
    66de:	f105 35ff 	add.w	r5, r5, #4294967295
    66e2:	d908      	bls.n	66f6 <_fwalk_sglue+0x32>
    66e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    66e8:	3301      	adds	r3, #1
    66ea:	4621      	mov	r1, r4
    66ec:	d003      	beq.n	66f6 <_fwalk_sglue+0x32>
    66ee:	4640      	mov	r0, r8
    66f0:	47b8      	blx	r7
    66f2:	ea49 0900 	orr.w	r9, r9, r0
    66f6:	1c6b      	adds	r3, r5, #1
    66f8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    66fc:	d1ed      	bne.n	66da <_fwalk_sglue+0x16>
    66fe:	6836      	ldr	r6, [r6, #0]
    6700:	2e00      	cmp	r6, #0
    6702:	d1e6      	bne.n	66d2 <_fwalk_sglue+0xe>
    6704:	4648      	mov	r0, r9
    6706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    670a:	bf00      	nop

0000670c <__sread>:
    670c:	b510      	push	{r4, lr}
    670e:	460c      	mov	r4, r1
    6710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6714:	f000 fc2e 	bl	6f74 <_read_r>
    6718:	2800      	cmp	r0, #0
    671a:	db03      	blt.n	6724 <__sread+0x18>
    671c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    671e:	4403      	add	r3, r0
    6720:	6523      	str	r3, [r4, #80]	; 0x50
    6722:	bd10      	pop	{r4, pc}
    6724:	89a3      	ldrh	r3, [r4, #12]
    6726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    672a:	81a3      	strh	r3, [r4, #12]
    672c:	bd10      	pop	{r4, pc}
    672e:	bf00      	nop

00006730 <__swrite>:
    6730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6734:	460c      	mov	r4, r1
    6736:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    673a:	461f      	mov	r7, r3
    673c:	05cb      	lsls	r3, r1, #23
    673e:	4605      	mov	r5, r0
    6740:	4616      	mov	r6, r2
    6742:	d40b      	bmi.n	675c <__swrite+0x2c>
    6744:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    6748:	81a1      	strh	r1, [r4, #12]
    674a:	463b      	mov	r3, r7
    674c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6750:	4632      	mov	r2, r6
    6752:	4628      	mov	r0, r5
    6754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6758:	f000 bc34 	b.w	6fc4 <_write_r>
    675c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    6760:	2302      	movs	r3, #2
    6762:	2200      	movs	r2, #0
    6764:	f000 fbf0 	bl	6f48 <_lseek_r>
    6768:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    676c:	e7ea      	b.n	6744 <__swrite+0x14>
    676e:	bf00      	nop

00006770 <__sseek>:
    6770:	b510      	push	{r4, lr}
    6772:	460c      	mov	r4, r1
    6774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6778:	f000 fbe6 	bl	6f48 <_lseek_r>
    677c:	89a3      	ldrh	r3, [r4, #12]
    677e:	1c42      	adds	r2, r0, #1
    6780:	bf0e      	itee	eq
    6782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    6786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    678a:	6520      	strne	r0, [r4, #80]	; 0x50
    678c:	81a3      	strh	r3, [r4, #12]
    678e:	bd10      	pop	{r4, pc}

00006790 <__sclose>:
    6790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    6794:	f000 bbc6 	b.w	6f24 <_close_r>

00006798 <memmove>:
    6798:	4288      	cmp	r0, r1
    679a:	d90d      	bls.n	67b8 <memmove+0x20>
    679c:	188b      	adds	r3, r1, r2
    679e:	4283      	cmp	r3, r0
    67a0:	d90a      	bls.n	67b8 <memmove+0x20>
    67a2:	eb00 0c02 	add.w	ip, r0, r2
    67a6:	b1ba      	cbz	r2, 67d8 <memmove+0x40>
    67a8:	4662      	mov	r2, ip
    67aa:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    67ae:	f802 cd01 	strb.w	ip, [r2, #-1]!
    67b2:	4299      	cmp	r1, r3
    67b4:	d1f9      	bne.n	67aa <memmove+0x12>
    67b6:	4770      	bx	lr
    67b8:	2a0f      	cmp	r2, #15
    67ba:	d80e      	bhi.n	67da <memmove+0x42>
    67bc:	4603      	mov	r3, r0
    67be:	f102 3cff 	add.w	ip, r2, #4294967295
    67c2:	b14a      	cbz	r2, 67d8 <memmove+0x40>
    67c4:	f10c 0c01 	add.w	ip, ip, #1
    67c8:	3b01      	subs	r3, #1
    67ca:	448c      	add	ip, r1
    67cc:	f811 2b01 	ldrb.w	r2, [r1], #1
    67d0:	f803 2f01 	strb.w	r2, [r3, #1]!
    67d4:	4561      	cmp	r1, ip
    67d6:	d1f9      	bne.n	67cc <memmove+0x34>
    67d8:	4770      	bx	lr
    67da:	ea40 0301 	orr.w	r3, r0, r1
    67de:	079b      	lsls	r3, r3, #30
    67e0:	d150      	bne.n	6884 <memmove+0xec>
    67e2:	f1a2 0310 	sub.w	r3, r2, #16
    67e6:	b570      	push	{r4, r5, r6, lr}
    67e8:	f101 0c20 	add.w	ip, r1, #32
    67ec:	f023 050f 	bic.w	r5, r3, #15
    67f0:	f101 0e10 	add.w	lr, r1, #16
    67f4:	f100 0410 	add.w	r4, r0, #16
    67f8:	44ac      	add	ip, r5
    67fa:	091b      	lsrs	r3, r3, #4
    67fc:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    6800:	f844 5c10 	str.w	r5, [r4, #-16]
    6804:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    6808:	f844 5c0c 	str.w	r5, [r4, #-12]
    680c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    6810:	f844 5c08 	str.w	r5, [r4, #-8]
    6814:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    6818:	f844 5c04 	str.w	r5, [r4, #-4]
    681c:	f10e 0e10 	add.w	lr, lr, #16
    6820:	45e6      	cmp	lr, ip
    6822:	f104 0410 	add.w	r4, r4, #16
    6826:	d1e9      	bne.n	67fc <memmove+0x64>
    6828:	3301      	adds	r3, #1
    682a:	f012 0f0c 	tst.w	r2, #12
    682e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    6832:	f002 040f 	and.w	r4, r2, #15
    6836:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    683a:	d027      	beq.n	688c <memmove+0xf4>
    683c:	3c04      	subs	r4, #4
    683e:	f024 0603 	bic.w	r6, r4, #3
    6842:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    6846:	441e      	add	r6, r3
    6848:	1f1c      	subs	r4, r3, #4
    684a:	468e      	mov	lr, r1
    684c:	f85e 5b04 	ldr.w	r5, [lr], #4
    6850:	f844 5f04 	str.w	r5, [r4, #4]!
    6854:	42b4      	cmp	r4, r6
    6856:	d1f9      	bne.n	684c <memmove+0xb4>
    6858:	f10c 0401 	add.w	r4, ip, #1
    685c:	f002 0203 	and.w	r2, r2, #3
    6860:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6868:	f102 3cff 	add.w	ip, r2, #4294967295
    686c:	b14a      	cbz	r2, 6882 <memmove+0xea>
    686e:	f10c 0c01 	add.w	ip, ip, #1
    6872:	3b01      	subs	r3, #1
    6874:	448c      	add	ip, r1
    6876:	f811 2b01 	ldrb.w	r2, [r1], #1
    687a:	f803 2f01 	strb.w	r2, [r3, #1]!
    687e:	4561      	cmp	r1, ip
    6880:	d1f9      	bne.n	6876 <memmove+0xde>
    6882:	bd70      	pop	{r4, r5, r6, pc}
    6884:	f102 3cff 	add.w	ip, r2, #4294967295
    6888:	4603      	mov	r3, r0
    688a:	e79b      	b.n	67c4 <memmove+0x2c>
    688c:	4622      	mov	r2, r4
    688e:	e7eb      	b.n	6868 <memmove+0xd0>

00006890 <memset>:
    6890:	0783      	lsls	r3, r0, #30
    6892:	b530      	push	{r4, r5, lr}
    6894:	d048      	beq.n	6928 <memset+0x98>
    6896:	1e54      	subs	r4, r2, #1
    6898:	2a00      	cmp	r2, #0
    689a:	d03f      	beq.n	691c <memset+0x8c>
    689c:	b2ca      	uxtb	r2, r1
    689e:	4603      	mov	r3, r0
    68a0:	e001      	b.n	68a6 <memset+0x16>
    68a2:	3c01      	subs	r4, #1
    68a4:	d33a      	bcc.n	691c <memset+0x8c>
    68a6:	f803 2b01 	strb.w	r2, [r3], #1
    68aa:	079d      	lsls	r5, r3, #30
    68ac:	d1f9      	bne.n	68a2 <memset+0x12>
    68ae:	2c03      	cmp	r4, #3
    68b0:	d92d      	bls.n	690e <memset+0x7e>
    68b2:	b2cd      	uxtb	r5, r1
    68b4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    68b8:	2c0f      	cmp	r4, #15
    68ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    68be:	d936      	bls.n	692e <memset+0x9e>
    68c0:	f1a4 0210 	sub.w	r2, r4, #16
    68c4:	f022 0c0f 	bic.w	ip, r2, #15
    68c8:	f103 0e20 	add.w	lr, r3, #32
    68cc:	44e6      	add	lr, ip
    68ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    68d2:	f103 0210 	add.w	r2, r3, #16
    68d6:	e942 5504 	strd	r5, r5, [r2, #-16]
    68da:	e942 5502 	strd	r5, r5, [r2, #-8]
    68de:	3210      	adds	r2, #16
    68e0:	4572      	cmp	r2, lr
    68e2:	d1f8      	bne.n	68d6 <memset+0x46>
    68e4:	f10c 0201 	add.w	r2, ip, #1
    68e8:	f014 0f0c 	tst.w	r4, #12
    68ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    68f0:	f004 0c0f 	and.w	ip, r4, #15
    68f4:	d013      	beq.n	691e <memset+0x8e>
    68f6:	f1ac 0304 	sub.w	r3, ip, #4
    68fa:	f023 0303 	bic.w	r3, r3, #3
    68fe:	3304      	adds	r3, #4
    6900:	4413      	add	r3, r2
    6902:	f842 5b04 	str.w	r5, [r2], #4
    6906:	4293      	cmp	r3, r2
    6908:	d1fb      	bne.n	6902 <memset+0x72>
    690a:	f00c 0403 	and.w	r4, ip, #3
    690e:	b12c      	cbz	r4, 691c <memset+0x8c>
    6910:	b2c9      	uxtb	r1, r1
    6912:	441c      	add	r4, r3
    6914:	f803 1b01 	strb.w	r1, [r3], #1
    6918:	429c      	cmp	r4, r3
    691a:	d1fb      	bne.n	6914 <memset+0x84>
    691c:	bd30      	pop	{r4, r5, pc}
    691e:	4664      	mov	r4, ip
    6920:	4613      	mov	r3, r2
    6922:	2c00      	cmp	r4, #0
    6924:	d1f4      	bne.n	6910 <memset+0x80>
    6926:	e7f9      	b.n	691c <memset+0x8c>
    6928:	4603      	mov	r3, r0
    692a:	4614      	mov	r4, r2
    692c:	e7bf      	b.n	68ae <memset+0x1e>
    692e:	461a      	mov	r2, r3
    6930:	46a4      	mov	ip, r4
    6932:	e7e0      	b.n	68f6 <memset+0x66>

00006934 <strchr>:
    6934:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    6938:	4603      	mov	r3, r0
    693a:	d044      	beq.n	69c6 <strchr+0x92>
    693c:	0782      	lsls	r2, r0, #30
    693e:	d132      	bne.n	69a6 <strchr+0x72>
    6940:	b510      	push	{r4, lr}
    6942:	6804      	ldr	r4, [r0, #0]
    6944:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    6948:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    694c:	ea8e 0204 	eor.w	r2, lr, r4
    6950:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    6954:	ea23 0302 	bic.w	r3, r3, r2
    6958:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    695c:	ea22 0204 	bic.w	r2, r2, r4
    6960:	4313      	orrs	r3, r2
    6962:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6966:	d10f      	bne.n	6988 <strchr+0x54>
    6968:	f850 4f04 	ldr.w	r4, [r0, #4]!
    696c:	ea84 0c0e 	eor.w	ip, r4, lr
    6970:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    6974:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    6978:	ea23 0304 	bic.w	r3, r3, r4
    697c:	ea22 020c 	bic.w	r2, r2, ip
    6980:	4313      	orrs	r3, r2
    6982:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    6986:	d0ef      	beq.n	6968 <strchr+0x34>
    6988:	7803      	ldrb	r3, [r0, #0]
    698a:	b923      	cbnz	r3, 6996 <strchr+0x62>
    698c:	e036      	b.n	69fc <strchr+0xc8>
    698e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    6992:	2b00      	cmp	r3, #0
    6994:	d032      	beq.n	69fc <strchr+0xc8>
    6996:	4299      	cmp	r1, r3
    6998:	d1f9      	bne.n	698e <strchr+0x5a>
    699a:	bd10      	pop	{r4, pc}
    699c:	428a      	cmp	r2, r1
    699e:	d011      	beq.n	69c4 <strchr+0x90>
    69a0:	079a      	lsls	r2, r3, #30
    69a2:	4618      	mov	r0, r3
    69a4:	d0cc      	beq.n	6940 <strchr+0xc>
    69a6:	4618      	mov	r0, r3
    69a8:	f813 2b01 	ldrb.w	r2, [r3], #1
    69ac:	2a00      	cmp	r2, #0
    69ae:	d1f5      	bne.n	699c <strchr+0x68>
    69b0:	4610      	mov	r0, r2
    69b2:	4770      	bx	lr
    69b4:	0799      	lsls	r1, r3, #30
    69b6:	4618      	mov	r0, r3
    69b8:	d007      	beq.n	69ca <strchr+0x96>
    69ba:	4618      	mov	r0, r3
    69bc:	3301      	adds	r3, #1
    69be:	7802      	ldrb	r2, [r0, #0]
    69c0:	2a00      	cmp	r2, #0
    69c2:	d1f7      	bne.n	69b4 <strchr+0x80>
    69c4:	4770      	bx	lr
    69c6:	0782      	lsls	r2, r0, #30
    69c8:	d1f7      	bne.n	69ba <strchr+0x86>
    69ca:	6802      	ldr	r2, [r0, #0]
    69cc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    69d0:	ea23 0302 	bic.w	r3, r3, r2
    69d4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    69d8:	d108      	bne.n	69ec <strchr+0xb8>
    69da:	f850 2f04 	ldr.w	r2, [r0, #4]!
    69de:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    69e2:	ea23 0302 	bic.w	r3, r3, r2
    69e6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    69ea:	d0f6      	beq.n	69da <strchr+0xa6>
    69ec:	7803      	ldrb	r3, [r0, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d0e8      	beq.n	69c4 <strchr+0x90>
    69f2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    69f6:	2b00      	cmp	r3, #0
    69f8:	d1fb      	bne.n	69f2 <strchr+0xbe>
    69fa:	4770      	bx	lr
    69fc:	4618      	mov	r0, r3
    69fe:	bd10      	pop	{r4, pc}

00006a00 <strncmp>:
    6a00:	2a00      	cmp	r2, #0
    6a02:	d03e      	beq.n	6a82 <strncmp+0x82>
    6a04:	ea40 0301 	orr.w	r3, r0, r1
    6a08:	079b      	lsls	r3, r3, #30
    6a0a:	b530      	push	{r4, r5, lr}
    6a0c:	4684      	mov	ip, r0
    6a0e:	d12f      	bne.n	6a70 <strncmp+0x70>
    6a10:	2a03      	cmp	r2, #3
    6a12:	d92d      	bls.n	6a70 <strncmp+0x70>
    6a14:	460b      	mov	r3, r1
    6a16:	e008      	b.n	6a2a <strncmp+0x2a>
    6a18:	3a04      	subs	r2, #4
    6a1a:	4684      	mov	ip, r0
    6a1c:	4619      	mov	r1, r3
    6a1e:	d025      	beq.n	6a6c <strncmp+0x6c>
    6a20:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    6a24:	d122      	bne.n	6a6c <strncmp+0x6c>
    6a26:	2a03      	cmp	r2, #3
    6a28:	d922      	bls.n	6a70 <strncmp+0x70>
    6a2a:	6804      	ldr	r4, [r0, #0]
    6a2c:	4619      	mov	r1, r3
    6a2e:	f853 5b04 	ldr.w	r5, [r3], #4
    6a32:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    6a36:	42ac      	cmp	r4, r5
    6a38:	4684      	mov	ip, r0
    6a3a:	ea2e 0e04 	bic.w	lr, lr, r4
    6a3e:	f100 0004 	add.w	r0, r0, #4
    6a42:	d0e9      	beq.n	6a18 <strncmp+0x18>
    6a44:	f89c 0000 	ldrb.w	r0, [ip]
    6a48:	780c      	ldrb	r4, [r1, #0]
    6a4a:	42a0      	cmp	r0, r4
    6a4c:	d11b      	bne.n	6a86 <strncmp+0x86>
    6a4e:	46e6      	mov	lr, ip
    6a50:	b168      	cbz	r0, 6a6e <strncmp+0x6e>
    6a52:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    6a56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6a5a:	eba2 030e 	sub.w	r3, r2, lr
    6a5e:	42a0      	cmp	r0, r4
    6a60:	f103 33ff 	add.w	r3, r3, #4294967295
    6a64:	d10f      	bne.n	6a86 <strncmp+0x86>
    6a66:	eb1c 0303 	adds.w	r3, ip, r3
    6a6a:	d1f1      	bne.n	6a50 <strncmp+0x50>
    6a6c:	2000      	movs	r0, #0
    6a6e:	bd30      	pop	{r4, r5, pc}
    6a70:	f89c 0000 	ldrb.w	r0, [ip]
    6a74:	780c      	ldrb	r4, [r1, #0]
    6a76:	4284      	cmp	r4, r0
    6a78:	d105      	bne.n	6a86 <strncmp+0x86>
    6a7a:	2a01      	cmp	r2, #1
    6a7c:	d0f6      	beq.n	6a6c <strncmp+0x6c>
    6a7e:	46e6      	mov	lr, ip
    6a80:	e7e6      	b.n	6a50 <strncmp+0x50>
    6a82:	4610      	mov	r0, r2
    6a84:	4770      	bx	lr
    6a86:	1b00      	subs	r0, r0, r4
    6a88:	bd30      	pop	{r4, r5, pc}
    6a8a:	bf00      	nop

00006a8c <strncpy>:
    6a8c:	ea40 0301 	orr.w	r3, r0, r1
    6a90:	079b      	lsls	r3, r3, #30
    6a92:	b530      	push	{r4, r5, lr}
    6a94:	d101      	bne.n	6a9a <strncpy+0xe>
    6a96:	2a03      	cmp	r2, #3
    6a98:	d80f      	bhi.n	6aba <strncpy+0x2e>
    6a9a:	4684      	mov	ip, r0
    6a9c:	f101 3eff 	add.w	lr, r1, #4294967295
    6aa0:	e007      	b.n	6ab2 <strncpy+0x26>
    6aa2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    6aa6:	f803 1b01 	strb.w	r1, [r3], #1
    6aaa:	1e54      	subs	r4, r2, #1
    6aac:	b1c1      	cbz	r1, 6ae0 <strncpy+0x54>
    6aae:	469c      	mov	ip, r3
    6ab0:	4622      	mov	r2, r4
    6ab2:	4663      	mov	r3, ip
    6ab4:	2a00      	cmp	r2, #0
    6ab6:	d1f4      	bne.n	6aa2 <strncpy+0x16>
    6ab8:	bd30      	pop	{r4, r5, pc}
    6aba:	460b      	mov	r3, r1
    6abc:	4684      	mov	ip, r0
    6abe:	4619      	mov	r1, r3
    6ac0:	f853 5b04 	ldr.w	r5, [r3], #4
    6ac4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    6ac8:	ea24 0405 	bic.w	r4, r4, r5
    6acc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    6ad0:	d1e4      	bne.n	6a9c <strncpy+0x10>
    6ad2:	3a04      	subs	r2, #4
    6ad4:	2a03      	cmp	r2, #3
    6ad6:	f84c 5b04 	str.w	r5, [ip], #4
    6ada:	4619      	mov	r1, r3
    6adc:	d8ef      	bhi.n	6abe <strncpy+0x32>
    6ade:	e7dd      	b.n	6a9c <strncpy+0x10>
    6ae0:	4494      	add	ip, r2
    6ae2:	2c00      	cmp	r4, #0
    6ae4:	d0e8      	beq.n	6ab8 <strncpy+0x2c>
    6ae6:	f803 1b01 	strb.w	r1, [r3], #1
    6aea:	4563      	cmp	r3, ip
    6aec:	d1fb      	bne.n	6ae6 <strncpy+0x5a>
    6aee:	bd30      	pop	{r4, r5, pc}

00006af0 <critical_factorization>:
    6af0:	2901      	cmp	r1, #1
    6af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6af6:	d95b      	bls.n	6bb0 <critical_factorization+0xc0>
    6af8:	f04f 0801 	mov.w	r8, #1
    6afc:	46c6      	mov	lr, r8
    6afe:	2400      	movs	r4, #0
    6b00:	f04f 35ff 	mov.w	r5, #4294967295
    6b04:	4643      	mov	r3, r8
    6b06:	e008      	b.n	6b1a <critical_factorization+0x2a>
    6b08:	eba3 0805 	sub.w	r8, r3, r5
    6b0c:	461c      	mov	r4, r3
    6b0e:	f04f 0e01 	mov.w	lr, #1
    6b12:	eb04 030e 	add.w	r3, r4, lr
    6b16:	428b      	cmp	r3, r1
    6b18:	d210      	bcs.n	6b3c <critical_factorization+0x4c>
    6b1a:	eb00 0c0e 	add.w	ip, r0, lr
    6b1e:	5cc7      	ldrb	r7, [r0, r3]
    6b20:	f81c 6005 	ldrb.w	r6, [ip, r5]
    6b24:	42b7      	cmp	r7, r6
    6b26:	d3ef      	bcc.n	6b08 <critical_factorization+0x18>
    6b28:	d032      	beq.n	6b90 <critical_factorization+0xa0>
    6b2a:	f04f 0801 	mov.w	r8, #1
    6b2e:	4625      	mov	r5, r4
    6b30:	46c6      	mov	lr, r8
    6b32:	4444      	add	r4, r8
    6b34:	eb04 030e 	add.w	r3, r4, lr
    6b38:	428b      	cmp	r3, r1
    6b3a:	d3ee      	bcc.n	6b1a <critical_factorization+0x2a>
    6b3c:	2701      	movs	r7, #1
    6b3e:	f8c2 8000 	str.w	r8, [r2]
    6b42:	46be      	mov	lr, r7
    6b44:	2400      	movs	r4, #0
    6b46:	f04f 36ff 	mov.w	r6, #4294967295
    6b4a:	463b      	mov	r3, r7
    6b4c:	e007      	b.n	6b5e <critical_factorization+0x6e>
    6b4e:	1b9f      	subs	r7, r3, r6
    6b50:	461c      	mov	r4, r3
    6b52:	f04f 0e01 	mov.w	lr, #1
    6b56:	eb04 030e 	add.w	r3, r4, lr
    6b5a:	428b      	cmp	r3, r1
    6b5c:	d210      	bcs.n	6b80 <critical_factorization+0x90>
    6b5e:	eb00 0c06 	add.w	ip, r0, r6
    6b62:	f810 8003 	ldrb.w	r8, [r0, r3]
    6b66:	f81c c00e 	ldrb.w	ip, [ip, lr]
    6b6a:	45e0      	cmp	r8, ip
    6b6c:	d8ef      	bhi.n	6b4e <critical_factorization+0x5e>
    6b6e:	d017      	beq.n	6ba0 <critical_factorization+0xb0>
    6b70:	2701      	movs	r7, #1
    6b72:	4626      	mov	r6, r4
    6b74:	46be      	mov	lr, r7
    6b76:	443c      	add	r4, r7
    6b78:	eb04 030e 	add.w	r3, r4, lr
    6b7c:	428b      	cmp	r3, r1
    6b7e:	d3ee      	bcc.n	6b5e <critical_factorization+0x6e>
    6b80:	3601      	adds	r6, #1
    6b82:	1c68      	adds	r0, r5, #1
    6b84:	4286      	cmp	r6, r0
    6b86:	d301      	bcc.n	6b8c <critical_factorization+0x9c>
    6b88:	6017      	str	r7, [r2, #0]
    6b8a:	4630      	mov	r0, r6
    6b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b90:	45c6      	cmp	lr, r8
    6b92:	bf0a      	itet	eq
    6b94:	4474      	addeq	r4, lr
    6b96:	f10e 0e01 	addne.w	lr, lr, #1
    6b9a:	f04f 0e01 	moveq.w	lr, #1
    6b9e:	e7b8      	b.n	6b12 <critical_factorization+0x22>
    6ba0:	45be      	cmp	lr, r7
    6ba2:	bf0a      	itet	eq
    6ba4:	4474      	addeq	r4, lr
    6ba6:	f10e 0e01 	addne.w	lr, lr, #1
    6baa:	f04f 0e01 	moveq.w	lr, #1
    6bae:	e7d2      	b.n	6b56 <critical_factorization+0x66>
    6bb0:	2701      	movs	r7, #1
    6bb2:	2600      	movs	r6, #0
    6bb4:	e7e8      	b.n	6b88 <critical_factorization+0x98>
    6bb6:	bf00      	nop

00006bb8 <two_way_long_needle>:
    6bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bbc:	4692      	mov	sl, r2
    6bbe:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    6bc2:	aa05      	add	r2, sp, #20
    6bc4:	4681      	mov	r9, r0
    6bc6:	460f      	mov	r7, r1
    6bc8:	4650      	mov	r0, sl
    6bca:	4619      	mov	r1, r3
    6bcc:	461d      	mov	r5, r3
    6bce:	f7ff ff8f 	bl	6af0 <critical_factorization>
    6bd2:	4613      	mov	r3, r2
    6bd4:	4683      	mov	fp, r0
    6bd6:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    6bda:	f843 5f04 	str.w	r5, [r3, #4]!
    6bde:	4293      	cmp	r3, r2
    6be0:	d1fb      	bne.n	6bda <two_way_long_needle+0x22>
    6be2:	2d00      	cmp	r5, #0
    6be4:	f000 80df 	beq.w	6da6 <two_way_long_needle+0x1ee>
    6be8:	1e6c      	subs	r4, r5, #1
    6bea:	ae06      	add	r6, sp, #24
    6bec:	f10a 32ff 	add.w	r2, sl, #4294967295
    6bf0:	eb0a 0004 	add.w	r0, sl, r4
    6bf4:	9600      	str	r6, [sp, #0]
    6bf6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    6bfa:	1aab      	subs	r3, r5, r2
    6bfc:	3b01      	subs	r3, #1
    6bfe:	4453      	add	r3, sl
    6c00:	4282      	cmp	r2, r0
    6c02:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    6c06:	d1f6      	bne.n	6bf6 <two_way_long_needle+0x3e>
    6c08:	9905      	ldr	r1, [sp, #20]
    6c0a:	465a      	mov	r2, fp
    6c0c:	4451      	add	r1, sl
    6c0e:	4650      	mov	r0, sl
    6c10:	f002 f8f4 	bl	8dfc <memcmp>
    6c14:	2800      	cmp	r0, #0
    6c16:	d16f      	bne.n	6cf8 <two_way_long_needle+0x140>
    6c18:	f10b 33ff 	add.w	r3, fp, #4294967295
    6c1c:	9303      	str	r3, [sp, #12]
    6c1e:	f1cb 0301 	rsb	r3, fp, #1
    6c22:	4680      	mov	r8, r0
    6c24:	4606      	mov	r6, r0
    6c26:	9301      	str	r3, [sp, #4]
    6c28:	eb09 0e06 	add.w	lr, r9, r6
    6c2c:	9a00      	ldr	r2, [sp, #0]
    6c2e:	f81e 3004 	ldrb.w	r3, [lr, r4]
    6c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c36:	b1db      	cbz	r3, 6c70 <two_way_long_needle+0xb8>
    6c38:	f1b8 0f00 	cmp.w	r8, #0
    6c3c:	d003      	beq.n	6c46 <two_way_long_needle+0x8e>
    6c3e:	9a05      	ldr	r2, [sp, #20]
    6c40:	429a      	cmp	r2, r3
    6c42:	d900      	bls.n	6c46 <two_way_long_needle+0x8e>
    6c44:	1aab      	subs	r3, r5, r2
    6c46:	441e      	add	r6, r3
    6c48:	f04f 0800 	mov.w	r8, #0
    6c4c:	1b7b      	subs	r3, r7, r5
    6c4e:	429e      	cmp	r6, r3
    6c50:	d9ea      	bls.n	6c28 <two_way_long_needle+0x70>
    6c52:	eb09 0007 	add.w	r0, r9, r7
    6c56:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    6c5a:	f002 f8ff 	bl	8e5c <strnlen>
    6c5e:	4407      	add	r7, r0
    6c60:	1b7b      	subs	r3, r7, r5
    6c62:	429e      	cmp	r6, r3
    6c64:	d9e0      	bls.n	6c28 <two_way_long_needle+0x70>
    6c66:	2000      	movs	r0, #0
    6c68:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c70:	45c3      	cmp	fp, r8
    6c72:	465b      	mov	r3, fp
    6c74:	bf38      	it	cc
    6c76:	4643      	movcc	r3, r8
    6c78:	42a3      	cmp	r3, r4
    6c7a:	d210      	bcs.n	6c9e <two_way_long_needle+0xe6>
    6c7c:	1e59      	subs	r1, r3, #1
    6c7e:	18f2      	adds	r2, r6, r3
    6c80:	4451      	add	r1, sl
    6c82:	444a      	add	r2, r9
    6c84:	e002      	b.n	6c8c <two_way_long_needle+0xd4>
    6c86:	3301      	adds	r3, #1
    6c88:	42a3      	cmp	r3, r4
    6c8a:	d208      	bcs.n	6c9e <two_way_long_needle+0xe6>
    6c8c:	f812 0b01 	ldrb.w	r0, [r2], #1
    6c90:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    6c94:	4584      	cmp	ip, r0
    6c96:	d0f6      	beq.n	6c86 <two_way_long_needle+0xce>
    6c98:	9a01      	ldr	r2, [sp, #4]
    6c9a:	4416      	add	r6, r2
    6c9c:	e7d3      	b.n	6c46 <two_way_long_needle+0x8e>
    6c9e:	45c3      	cmp	fp, r8
    6ca0:	9b03      	ldr	r3, [sp, #12]
    6ca2:	d97e      	bls.n	6da2 <two_way_long_needle+0x1ea>
    6ca4:	eb06 020b 	add.w	r2, r6, fp
    6ca8:	444a      	add	r2, r9
    6caa:	eb0a 010b 	add.w	r1, sl, fp
    6cae:	9602      	str	r6, [sp, #8]
    6cb0:	e002      	b.n	6cb8 <two_way_long_needle+0x100>
    6cb2:	4543      	cmp	r3, r8
    6cb4:	d015      	beq.n	6ce2 <two_way_long_needle+0x12a>
    6cb6:	4603      	mov	r3, r0
    6cb8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    6cbc:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    6cc0:	4286      	cmp	r6, r0
    6cc2:	f103 0c01 	add.w	ip, r3, #1
    6cc6:	f103 30ff 	add.w	r0, r3, #4294967295
    6cca:	d0f2      	beq.n	6cb2 <two_way_long_needle+0xfa>
    6ccc:	9e02      	ldr	r6, [sp, #8]
    6cce:	4663      	mov	r3, ip
    6cd0:	f108 0801 	add.w	r8, r8, #1
    6cd4:	4598      	cmp	r8, r3
    6cd6:	d80a      	bhi.n	6cee <two_way_long_needle+0x136>
    6cd8:	9b05      	ldr	r3, [sp, #20]
    6cda:	441e      	add	r6, r3
    6cdc:	eba5 0803 	sub.w	r8, r5, r3
    6ce0:	e7b4      	b.n	6c4c <two_way_long_needle+0x94>
    6ce2:	4643      	mov	r3, r8
    6ce4:	f108 0801 	add.w	r8, r8, #1
    6ce8:	4598      	cmp	r8, r3
    6cea:	9e02      	ldr	r6, [sp, #8]
    6cec:	d9f4      	bls.n	6cd8 <two_way_long_needle+0x120>
    6cee:	4670      	mov	r0, lr
    6cf0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6cf8:	eba5 030b 	sub.w	r3, r5, fp
    6cfc:	455b      	cmp	r3, fp
    6cfe:	bf38      	it	cc
    6d00:	465b      	movcc	r3, fp
    6d02:	3301      	adds	r3, #1
    6d04:	9305      	str	r3, [sp, #20]
    6d06:	f10b 33ff 	add.w	r3, fp, #4294967295
    6d0a:	9301      	str	r3, [sp, #4]
    6d0c:	f1cb 0301 	rsb	r3, fp, #1
    6d10:	2600      	movs	r6, #0
    6d12:	9302      	str	r3, [sp, #8]
    6d14:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    6d18:	eb09 0106 	add.w	r1, r9, r6
    6d1c:	9a00      	ldr	r2, [sp, #0]
    6d1e:	5d0b      	ldrb	r3, [r1, r4]
    6d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d24:	b16b      	cbz	r3, 6d42 <two_way_long_needle+0x18a>
    6d26:	441e      	add	r6, r3
    6d28:	1b7b      	subs	r3, r7, r5
    6d2a:	42b3      	cmp	r3, r6
    6d2c:	d2f4      	bcs.n	6d18 <two_way_long_needle+0x160>
    6d2e:	eb09 0007 	add.w	r0, r9, r7
    6d32:	4641      	mov	r1, r8
    6d34:	f002 f892 	bl	8e5c <strnlen>
    6d38:	4407      	add	r7, r0
    6d3a:	1b7b      	subs	r3, r7, r5
    6d3c:	42b3      	cmp	r3, r6
    6d3e:	d2eb      	bcs.n	6d18 <two_way_long_needle+0x160>
    6d40:	e791      	b.n	6c66 <two_way_long_needle+0xae>
    6d42:	45a3      	cmp	fp, r4
    6d44:	d214      	bcs.n	6d70 <two_way_long_needle+0x1b8>
    6d46:	9b01      	ldr	r3, [sp, #4]
    6d48:	eb0b 0206 	add.w	r2, fp, r6
    6d4c:	eb0a 0c03 	add.w	ip, sl, r3
    6d50:	444a      	add	r2, r9
    6d52:	465b      	mov	r3, fp
    6d54:	e002      	b.n	6d5c <two_way_long_needle+0x1a4>
    6d56:	3301      	adds	r3, #1
    6d58:	42a3      	cmp	r3, r4
    6d5a:	d209      	bcs.n	6d70 <two_way_long_needle+0x1b8>
    6d5c:	f812 0b01 	ldrb.w	r0, [r2], #1
    6d60:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    6d64:	4586      	cmp	lr, r0
    6d66:	d0f6      	beq.n	6d56 <two_way_long_needle+0x19e>
    6d68:	9a02      	ldr	r2, [sp, #8]
    6d6a:	4416      	add	r6, r2
    6d6c:	441e      	add	r6, r3
    6d6e:	e7db      	b.n	6d28 <two_way_long_needle+0x170>
    6d70:	f1bb 0f00 	cmp.w	fp, #0
    6d74:	d010      	beq.n	6d98 <two_way_long_needle+0x1e0>
    6d76:	eb0b 0006 	add.w	r0, fp, r6
    6d7a:	4448      	add	r0, r9
    6d7c:	eb0a 020b 	add.w	r2, sl, fp
    6d80:	e001      	b.n	6d86 <two_way_long_needle+0x1ce>
    6d82:	4553      	cmp	r3, sl
    6d84:	d008      	beq.n	6d98 <two_way_long_needle+0x1e0>
    6d86:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    6d8a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    6d8e:	45e6      	cmp	lr, ip
    6d90:	4613      	mov	r3, r2
    6d92:	d0f6      	beq.n	6d82 <two_way_long_needle+0x1ca>
    6d94:	9b05      	ldr	r3, [sp, #20]
    6d96:	e7c6      	b.n	6d26 <two_way_long_needle+0x16e>
    6d98:	4608      	mov	r0, r1
    6d9a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6da2:	465b      	mov	r3, fp
    6da4:	e794      	b.n	6cd0 <two_way_long_needle+0x118>
    6da6:	ab06      	add	r3, sp, #24
    6da8:	f04f 34ff 	mov.w	r4, #4294967295
    6dac:	9300      	str	r3, [sp, #0]
    6dae:	e72b      	b.n	6c08 <two_way_long_needle+0x50>

00006db0 <strstr>:
    6db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6db4:	460d      	mov	r5, r1
    6db6:	7809      	ldrb	r1, [r1, #0]
    6db8:	b090      	sub	sp, #64	; 0x40
    6dba:	4604      	mov	r4, r0
    6dbc:	2900      	cmp	r1, #0
    6dbe:	d054      	beq.n	6e6a <strstr+0xba>
    6dc0:	786a      	ldrb	r2, [r5, #1]
    6dc2:	2a00      	cmp	r2, #0
    6dc4:	f000 8083 	beq.w	6ece <strstr+0x11e>
    6dc8:	78ab      	ldrb	r3, [r5, #2]
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d051      	beq.n	6e72 <strstr+0xc2>
    6dce:	78e8      	ldrb	r0, [r5, #3]
    6dd0:	682e      	ldr	r6, [r5, #0]
    6dd2:	2800      	cmp	r0, #0
    6dd4:	f000 8082 	beq.w	6edc <strstr+0x12c>
    6dd8:	792b      	ldrb	r3, [r5, #4]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d057      	beq.n	6e8e <strstr+0xde>
    6dde:	4628      	mov	r0, r5
    6de0:	f000 fb0e 	bl	7400 <strlen>
    6de4:	4606      	mov	r6, r0
    6de6:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    6dea:	4620      	mov	r0, r4
    6dec:	f002 f836 	bl	8e5c <strnlen>
    6df0:	4286      	cmp	r6, r0
    6df2:	d85b      	bhi.n	6eac <strstr+0xfc>
    6df4:	2efe      	cmp	r6, #254	; 0xfe
    6df6:	f200 8086 	bhi.w	6f06 <strstr+0x156>
    6dfa:	1b80      	subs	r0, r0, r6
    6dfc:	1827      	adds	r7, r4, r0
    6dfe:	2240      	movs	r2, #64	; 0x40
    6e00:	1c71      	adds	r1, r6, #1
    6e02:	4668      	mov	r0, sp
    6e04:	f7ff fd44 	bl	6890 <memset>
    6e08:	b17e      	cbz	r6, 6e2a <strstr+0x7a>
    6e0a:	1e6a      	subs	r2, r5, #1
    6e0c:	fa5f fc86 	uxtb.w	ip, r6
    6e10:	1990      	adds	r0, r2, r6
    6e12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    6e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e1a:	3340      	adds	r3, #64	; 0x40
    6e1c:	446b      	add	r3, sp
    6e1e:	1aa9      	subs	r1, r5, r2
    6e20:	4461      	add	r1, ip
    6e22:	4282      	cmp	r2, r0
    6e24:	f803 1c40 	strb.w	r1, [r3, #-64]
    6e28:	d1f3      	bne.n	6e12 <strstr+0x62>
    6e2a:	3c01      	subs	r4, #1
    6e2c:	5da3      	ldrb	r3, [r4, r6]
    6e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e32:	3340      	adds	r3, #64	; 0x40
    6e34:	446b      	add	r3, sp
    6e36:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    6e3a:	441c      	add	r4, r3
    6e3c:	42a7      	cmp	r7, r4
    6e3e:	d203      	bcs.n	6e48 <strstr+0x98>
    6e40:	e039      	b.n	6eb6 <strstr+0x106>
    6e42:	4444      	add	r4, r8
    6e44:	42a7      	cmp	r7, r4
    6e46:	d336      	bcc.n	6eb6 <strstr+0x106>
    6e48:	f814 c006 	ldrb.w	ip, [r4, r6]
    6e4c:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    6e50:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    6e54:	eb0d 0c03 	add.w	ip, sp, r3
    6e58:	4620      	mov	r0, r4
    6e5a:	4632      	mov	r2, r6
    6e5c:	4629      	mov	r1, r5
    6e5e:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    6e62:	f001 ffcb 	bl	8dfc <memcmp>
    6e66:	2800      	cmp	r0, #0
    6e68:	d1eb      	bne.n	6e42 <strstr+0x92>
    6e6a:	4620      	mov	r0, r4
    6e6c:	b010      	add	sp, #64	; 0x40
    6e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e72:	7800      	ldrb	r0, [r0, #0]
    6e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    6e78:	e000      	b.n	6e7c <strstr+0xcc>
    6e7a:	460c      	mov	r4, r1
    6e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    6e80:	1c61      	adds	r1, r4, #1
    6e82:	b198      	cbz	r0, 6eac <strstr+0xfc>
    6e84:	429a      	cmp	r2, r3
    6e86:	7860      	ldrb	r0, [r4, #1]
    6e88:	d1f7      	bne.n	6e7a <strstr+0xca>
    6e8a:	3c01      	subs	r4, #1
    6e8c:	e7ed      	b.n	6e6a <strstr+0xba>
    6e8e:	7822      	ldrb	r2, [r4, #0]
    6e90:	b162      	cbz	r2, 6eac <strstr+0xfc>
    6e92:	ba31      	rev	r1, r6
    6e94:	e001      	b.n	6e9a <strstr+0xea>
    6e96:	4299      	cmp	r1, r3
    6e98:	d01e      	beq.n	6ed8 <strstr+0x128>
    6e9a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6e9e:	4620      	mov	r0, r4
    6ea0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    6ea4:	2a00      	cmp	r2, #0
    6ea6:	d1f6      	bne.n	6e96 <strstr+0xe6>
    6ea8:	4299      	cmp	r1, r3
    6eaa:	d015      	beq.n	6ed8 <strstr+0x128>
    6eac:	2400      	movs	r4, #0
    6eae:	4620      	mov	r0, r4
    6eb0:	b010      	add	sp, #64	; 0x40
    6eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6eb6:	5dbb      	ldrb	r3, [r7, r6]
    6eb8:	19b8      	adds	r0, r7, r6
    6eba:	2b00      	cmp	r3, #0
    6ebc:	d0f6      	beq.n	6eac <strstr+0xfc>
    6ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6ec2:	f001 ffcb 	bl	8e5c <strnlen>
    6ec6:	4407      	add	r7, r0
    6ec8:	42bc      	cmp	r4, r7
    6eca:	d9ae      	bls.n	6e2a <strstr+0x7a>
    6ecc:	e7ee      	b.n	6eac <strstr+0xfc>
    6ece:	b010      	add	sp, #64	; 0x40
    6ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6ed4:	f7ff bd2e 	b.w	6934 <strchr>
    6ed8:	1ec4      	subs	r4, r0, #3
    6eda:	e7c6      	b.n	6e6a <strstr+0xba>
    6edc:	0412      	lsls	r2, r2, #16
    6ede:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    6ee2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6ee6:	7821      	ldrb	r1, [r4, #0]
    6ee8:	4602      	mov	r2, r0
    6eea:	e000      	b.n	6eee <strstr+0x13e>
    6eec:	462c      	mov	r4, r5
    6eee:	ea41 0002 	orr.w	r0, r1, r2
    6ef2:	1c65      	adds	r5, r4, #1
    6ef4:	0202      	lsls	r2, r0, #8
    6ef6:	2900      	cmp	r1, #0
    6ef8:	d0d8      	beq.n	6eac <strstr+0xfc>
    6efa:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    6efe:	7861      	ldrb	r1, [r4, #1]
    6f00:	d1f4      	bne.n	6eec <strstr+0x13c>
    6f02:	3c02      	subs	r4, #2
    6f04:	e7b1      	b.n	6e6a <strstr+0xba>
    6f06:	4601      	mov	r1, r0
    6f08:	4633      	mov	r3, r6
    6f0a:	462a      	mov	r2, r5
    6f0c:	4620      	mov	r0, r4
    6f0e:	b010      	add	sp, #64	; 0x40
    6f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6f14:	f7ff be50 	b.w	6bb8 <two_way_long_needle>

00006f18 <__locale_mb_cur_max>:
    6f18:	4b01      	ldr	r3, [pc, #4]	; (6f20 <__locale_mb_cur_max+0x8>)
    6f1a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    6f1e:	4770      	bx	lr
    6f20:	2000113c 	.word	0x2000113c

00006f24 <_close_r>:
    6f24:	b538      	push	{r3, r4, r5, lr}
    6f26:	4d07      	ldr	r5, [pc, #28]	; (6f44 <_close_r+0x20>)
    6f28:	2200      	movs	r2, #0
    6f2a:	4604      	mov	r4, r0
    6f2c:	4608      	mov	r0, r1
    6f2e:	602a      	str	r2, [r5, #0]
    6f30:	f7fb ffd4 	bl	2edc <_close>
    6f34:	1c43      	adds	r3, r0, #1
    6f36:	d000      	beq.n	6f3a <_close_r+0x16>
    6f38:	bd38      	pop	{r3, r4, r5, pc}
    6f3a:	682b      	ldr	r3, [r5, #0]
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d0fb      	beq.n	6f38 <_close_r+0x14>
    6f40:	6023      	str	r3, [r4, #0]
    6f42:	bd38      	pop	{r3, r4, r5, pc}
    6f44:	2000205c 	.word	0x2000205c

00006f48 <_lseek_r>:
    6f48:	b538      	push	{r3, r4, r5, lr}
    6f4a:	460c      	mov	r4, r1
    6f4c:	4d08      	ldr	r5, [pc, #32]	; (6f70 <_lseek_r+0x28>)
    6f4e:	4684      	mov	ip, r0
    6f50:	4611      	mov	r1, r2
    6f52:	4620      	mov	r0, r4
    6f54:	461a      	mov	r2, r3
    6f56:	2300      	movs	r3, #0
    6f58:	602b      	str	r3, [r5, #0]
    6f5a:	4664      	mov	r4, ip
    6f5c:	f7fb ffca 	bl	2ef4 <_lseek>
    6f60:	1c43      	adds	r3, r0, #1
    6f62:	d000      	beq.n	6f66 <_lseek_r+0x1e>
    6f64:	bd38      	pop	{r3, r4, r5, pc}
    6f66:	682b      	ldr	r3, [r5, #0]
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d0fb      	beq.n	6f64 <_lseek_r+0x1c>
    6f6c:	6023      	str	r3, [r4, #0]
    6f6e:	bd38      	pop	{r3, r4, r5, pc}
    6f70:	2000205c 	.word	0x2000205c

00006f74 <_read_r>:
    6f74:	b538      	push	{r3, r4, r5, lr}
    6f76:	460c      	mov	r4, r1
    6f78:	4d08      	ldr	r5, [pc, #32]	; (6f9c <_read_r+0x28>)
    6f7a:	4684      	mov	ip, r0
    6f7c:	4611      	mov	r1, r2
    6f7e:	4620      	mov	r0, r4
    6f80:	461a      	mov	r2, r3
    6f82:	2300      	movs	r3, #0
    6f84:	602b      	str	r3, [r5, #0]
    6f86:	4664      	mov	r4, ip
    6f88:	f7fb ffa6 	bl	2ed8 <_read>
    6f8c:	1c43      	adds	r3, r0, #1
    6f8e:	d000      	beq.n	6f92 <_read_r+0x1e>
    6f90:	bd38      	pop	{r3, r4, r5, pc}
    6f92:	682b      	ldr	r3, [r5, #0]
    6f94:	2b00      	cmp	r3, #0
    6f96:	d0fb      	beq.n	6f90 <_read_r+0x1c>
    6f98:	6023      	str	r3, [r4, #0]
    6f9a:	bd38      	pop	{r3, r4, r5, pc}
    6f9c:	2000205c 	.word	0x2000205c

00006fa0 <_sbrk_r>:
    6fa0:	b538      	push	{r3, r4, r5, lr}
    6fa2:	4d07      	ldr	r5, [pc, #28]	; (6fc0 <_sbrk_r+0x20>)
    6fa4:	2200      	movs	r2, #0
    6fa6:	4604      	mov	r4, r0
    6fa8:	4608      	mov	r0, r1
    6faa:	602a      	str	r2, [r5, #0]
    6fac:	f7fb ff7a 	bl	2ea4 <_sbrk>
    6fb0:	1c43      	adds	r3, r0, #1
    6fb2:	d000      	beq.n	6fb6 <_sbrk_r+0x16>
    6fb4:	bd38      	pop	{r3, r4, r5, pc}
    6fb6:	682b      	ldr	r3, [r5, #0]
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d0fb      	beq.n	6fb4 <_sbrk_r+0x14>
    6fbc:	6023      	str	r3, [r4, #0]
    6fbe:	bd38      	pop	{r3, r4, r5, pc}
    6fc0:	2000205c 	.word	0x2000205c

00006fc4 <_write_r>:
    6fc4:	b538      	push	{r3, r4, r5, lr}
    6fc6:	460c      	mov	r4, r1
    6fc8:	4d08      	ldr	r5, [pc, #32]	; (6fec <_write_r+0x28>)
    6fca:	4684      	mov	ip, r0
    6fcc:	4611      	mov	r1, r2
    6fce:	4620      	mov	r0, r4
    6fd0:	461a      	mov	r2, r3
    6fd2:	2300      	movs	r3, #0
    6fd4:	602b      	str	r3, [r5, #0]
    6fd6:	4664      	mov	r4, ip
    6fd8:	f7fa ffa8 	bl	1f2c <_write>
    6fdc:	1c43      	adds	r3, r0, #1
    6fde:	d000      	beq.n	6fe2 <_write_r+0x1e>
    6fe0:	bd38      	pop	{r3, r4, r5, pc}
    6fe2:	682b      	ldr	r3, [r5, #0]
    6fe4:	2b00      	cmp	r3, #0
    6fe6:	d0fb      	beq.n	6fe0 <_write_r+0x1c>
    6fe8:	6023      	str	r3, [r4, #0]
    6fea:	bd38      	pop	{r3, r4, r5, pc}
    6fec:	2000205c 	.word	0x2000205c

00006ff0 <__errno>:
    6ff0:	4b01      	ldr	r3, [pc, #4]	; (6ff8 <__errno+0x8>)
    6ff2:	6818      	ldr	r0, [r3, #0]
    6ff4:	4770      	bx	lr
    6ff6:	bf00      	nop
    6ff8:	200016c4 	.word	0x200016c4

00006ffc <__libc_init_array>:
    6ffc:	b570      	push	{r4, r5, r6, lr}
    6ffe:	4e0d      	ldr	r6, [pc, #52]	; (7034 <__libc_init_array+0x38>)
    7000:	4d0d      	ldr	r5, [pc, #52]	; (7038 <__libc_init_array+0x3c>)
    7002:	1b76      	subs	r6, r6, r5
    7004:	10b6      	asrs	r6, r6, #2
    7006:	d006      	beq.n	7016 <__libc_init_array+0x1a>
    7008:	2400      	movs	r4, #0
    700a:	f855 3b04 	ldr.w	r3, [r5], #4
    700e:	3401      	adds	r4, #1
    7010:	4798      	blx	r3
    7012:	42a6      	cmp	r6, r4
    7014:	d1f9      	bne.n	700a <__libc_init_array+0xe>
    7016:	4e09      	ldr	r6, [pc, #36]	; (703c <__libc_init_array+0x40>)
    7018:	4d09      	ldr	r5, [pc, #36]	; (7040 <__libc_init_array+0x44>)
    701a:	1b76      	subs	r6, r6, r5
    701c:	f004 fd5c 	bl	bad8 <___init_veneer>
    7020:	10b6      	asrs	r6, r6, #2
    7022:	d006      	beq.n	7032 <__libc_init_array+0x36>
    7024:	2400      	movs	r4, #0
    7026:	f855 3b04 	ldr.w	r3, [r5], #4
    702a:	3401      	adds	r4, #1
    702c:	4798      	blx	r3
    702e:	42a6      	cmp	r6, r4
    7030:	d1f9      	bne.n	7026 <__libc_init_array+0x2a>
    7032:	bd70      	pop	{r4, r5, r6, pc}
    7034:	60001e80 	.word	0x60001e80
    7038:	60001e80 	.word	0x60001e80
    703c:	60001e88 	.word	0x60001e88
    7040:	60001e80 	.word	0x60001e80

00007044 <__retarget_lock_init_recursive>:
    7044:	4770      	bx	lr
    7046:	bf00      	nop

00007048 <__retarget_lock_close_recursive>:
    7048:	4770      	bx	lr
    704a:	bf00      	nop

0000704c <__retarget_lock_acquire_recursive>:
    704c:	4770      	bx	lr
    704e:	bf00      	nop

00007050 <__retarget_lock_release_recursive>:
    7050:	4770      	bx	lr
    7052:	bf00      	nop
	...
    7060:	eba2 0003 	sub.w	r0, r2, r3
    7064:	4770      	bx	lr
    7066:	bf00      	nop

00007068 <strcmp>:
    7068:	7802      	ldrb	r2, [r0, #0]
    706a:	780b      	ldrb	r3, [r1, #0]
    706c:	2a01      	cmp	r2, #1
    706e:	bf28      	it	cs
    7070:	429a      	cmpcs	r2, r3
    7072:	d1f5      	bne.n	7060 <__retarget_lock_release_recursive+0x10>
    7074:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    7078:	ea40 0401 	orr.w	r4, r0, r1
    707c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7080:	f06f 0c00 	mvn.w	ip, #0
    7084:	ea4f 7244 	mov.w	r2, r4, lsl #29
    7088:	b312      	cbz	r2, 70d0 <strcmp+0x68>
    708a:	ea80 0401 	eor.w	r4, r0, r1
    708e:	f014 0f07 	tst.w	r4, #7
    7092:	d16a      	bne.n	716a <strcmp+0x102>
    7094:	f000 0407 	and.w	r4, r0, #7
    7098:	f020 0007 	bic.w	r0, r0, #7
    709c:	f004 0503 	and.w	r5, r4, #3
    70a0:	f021 0107 	bic.w	r1, r1, #7
    70a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    70a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    70ac:	f014 0f04 	tst.w	r4, #4
    70b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    70b4:	fa0c f405 	lsl.w	r4, ip, r5
    70b8:	ea62 0204 	orn	r2, r2, r4
    70bc:	ea66 0604 	orn	r6, r6, r4
    70c0:	d00a      	beq.n	70d8 <strcmp+0x70>
    70c2:	ea63 0304 	orn	r3, r3, r4
    70c6:	4662      	mov	r2, ip
    70c8:	ea67 0704 	orn	r7, r7, r4
    70cc:	4666      	mov	r6, ip
    70ce:	e003      	b.n	70d8 <strcmp+0x70>
    70d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    70d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    70d8:	fa82 f54c 	uadd8	r5, r2, ip
    70dc:	ea82 0406 	eor.w	r4, r2, r6
    70e0:	faa4 f48c 	sel	r4, r4, ip
    70e4:	bb6c      	cbnz	r4, 7142 <strcmp+0xda>
    70e6:	fa83 f54c 	uadd8	r5, r3, ip
    70ea:	ea83 0507 	eor.w	r5, r3, r7
    70ee:	faa5 f58c 	sel	r5, r5, ip
    70f2:	b995      	cbnz	r5, 711a <strcmp+0xb2>
    70f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    70f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    70fc:	fa82 f54c 	uadd8	r5, r2, ip
    7100:	ea82 0406 	eor.w	r4, r2, r6
    7104:	faa4 f48c 	sel	r4, r4, ip
    7108:	fa83 f54c 	uadd8	r5, r3, ip
    710c:	ea83 0507 	eor.w	r5, r3, r7
    7110:	faa5 f58c 	sel	r5, r5, ip
    7114:	4325      	orrs	r5, r4
    7116:	d0db      	beq.n	70d0 <strcmp+0x68>
    7118:	b99c      	cbnz	r4, 7142 <strcmp+0xda>
    711a:	ba2d      	rev	r5, r5
    711c:	fab5 f485 	clz	r4, r5
    7120:	f024 0407 	bic.w	r4, r4, #7
    7124:	fa27 f104 	lsr.w	r1, r7, r4
    7128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    712c:	fa23 f304 	lsr.w	r3, r3, r4
    7130:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7134:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7138:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    713c:	eba0 0001 	sub.w	r0, r0, r1
    7140:	4770      	bx	lr
    7142:	ba24      	rev	r4, r4
    7144:	fab4 f484 	clz	r4, r4
    7148:	f024 0407 	bic.w	r4, r4, #7
    714c:	fa26 f104 	lsr.w	r1, r6, r4
    7150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7154:	fa22 f204 	lsr.w	r2, r2, r4
    7158:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    715c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7160:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7164:	eba0 0001 	sub.w	r0, r0, r1
    7168:	4770      	bx	lr
    716a:	f014 0f03 	tst.w	r4, #3
    716e:	d13c      	bne.n	71ea <strcmp+0x182>
    7170:	f010 0403 	ands.w	r4, r0, #3
    7174:	d128      	bne.n	71c8 <strcmp+0x160>
    7176:	f850 2b08 	ldr.w	r2, [r0], #8
    717a:	f851 3b08 	ldr.w	r3, [r1], #8
    717e:	fa82 f54c 	uadd8	r5, r2, ip
    7182:	ea82 0503 	eor.w	r5, r2, r3
    7186:	faa5 f58c 	sel	r5, r5, ip
    718a:	b95d      	cbnz	r5, 71a4 <strcmp+0x13c>
    718c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7190:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7194:	fa82 f54c 	uadd8	r5, r2, ip
    7198:	ea82 0503 	eor.w	r5, r2, r3
    719c:	faa5 f58c 	sel	r5, r5, ip
    71a0:	2d00      	cmp	r5, #0
    71a2:	d0e8      	beq.n	7176 <strcmp+0x10e>
    71a4:	ba2d      	rev	r5, r5
    71a6:	fab5 f485 	clz	r4, r5
    71aa:	f024 0407 	bic.w	r4, r4, #7
    71ae:	fa23 f104 	lsr.w	r1, r3, r4
    71b2:	fa22 f204 	lsr.w	r2, r2, r4
    71b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    71ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    71be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    71c2:	eba0 0001 	sub.w	r0, r0, r1
    71c6:	4770      	bx	lr
    71c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    71cc:	f020 0003 	bic.w	r0, r0, #3
    71d0:	f850 2b08 	ldr.w	r2, [r0], #8
    71d4:	f021 0103 	bic.w	r1, r1, #3
    71d8:	f851 3b08 	ldr.w	r3, [r1], #8
    71dc:	fa0c f404 	lsl.w	r4, ip, r4
    71e0:	ea62 0204 	orn	r2, r2, r4
    71e4:	ea63 0304 	orn	r3, r3, r4
    71e8:	e7c9      	b.n	717e <strcmp+0x116>
    71ea:	f010 0403 	ands.w	r4, r0, #3
    71ee:	d01a      	beq.n	7226 <strcmp+0x1be>
    71f0:	eba1 0104 	sub.w	r1, r1, r4
    71f4:	f020 0003 	bic.w	r0, r0, #3
    71f8:	07e4      	lsls	r4, r4, #31
    71fa:	f850 2b04 	ldr.w	r2, [r0], #4
    71fe:	d006      	beq.n	720e <strcmp+0x1a6>
    7200:	d20f      	bcs.n	7222 <strcmp+0x1ba>
    7202:	788b      	ldrb	r3, [r1, #2]
    7204:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    7208:	1ae4      	subs	r4, r4, r3
    720a:	d106      	bne.n	721a <strcmp+0x1b2>
    720c:	b12b      	cbz	r3, 721a <strcmp+0x1b2>
    720e:	78cb      	ldrb	r3, [r1, #3]
    7210:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    7214:	1ae4      	subs	r4, r4, r3
    7216:	d100      	bne.n	721a <strcmp+0x1b2>
    7218:	b91b      	cbnz	r3, 7222 <strcmp+0x1ba>
    721a:	4620      	mov	r0, r4
    721c:	f85d 4b10 	ldr.w	r4, [sp], #16
    7220:	4770      	bx	lr
    7222:	f101 0104 	add.w	r1, r1, #4
    7226:	f850 2b04 	ldr.w	r2, [r0], #4
    722a:	07cc      	lsls	r4, r1, #31
    722c:	f021 0103 	bic.w	r1, r1, #3
    7230:	f851 3b04 	ldr.w	r3, [r1], #4
    7234:	d848      	bhi.n	72c8 <strcmp+0x260>
    7236:	d224      	bcs.n	7282 <strcmp+0x21a>
    7238:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    723c:	fa82 f54c 	uadd8	r5, r2, ip
    7240:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    7244:	faa5 f58c 	sel	r5, r5, ip
    7248:	d10a      	bne.n	7260 <strcmp+0x1f8>
    724a:	b965      	cbnz	r5, 7266 <strcmp+0x1fe>
    724c:	f851 3b04 	ldr.w	r3, [r1], #4
    7250:	ea84 0402 	eor.w	r4, r4, r2
    7254:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    7258:	d10e      	bne.n	7278 <strcmp+0x210>
    725a:	f850 2b04 	ldr.w	r2, [r0], #4
    725e:	e7eb      	b.n	7238 <strcmp+0x1d0>
    7260:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7264:	e055      	b.n	7312 <strcmp+0x2aa>
    7266:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    726a:	d14d      	bne.n	7308 <strcmp+0x2a0>
    726c:	7808      	ldrb	r0, [r1, #0]
    726e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7272:	f1c0 0000 	rsb	r0, r0, #0
    7276:	4770      	bx	lr
    7278:	ea4f 6212 	mov.w	r2, r2, lsr #24
    727c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7280:	e047      	b.n	7312 <strcmp+0x2aa>
    7282:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    7286:	fa82 f54c 	uadd8	r5, r2, ip
    728a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    728e:	faa5 f58c 	sel	r5, r5, ip
    7292:	d10a      	bne.n	72aa <strcmp+0x242>
    7294:	b965      	cbnz	r5, 72b0 <strcmp+0x248>
    7296:	f851 3b04 	ldr.w	r3, [r1], #4
    729a:	ea84 0402 	eor.w	r4, r4, r2
    729e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    72a2:	d10c      	bne.n	72be <strcmp+0x256>
    72a4:	f850 2b04 	ldr.w	r2, [r0], #4
    72a8:	e7eb      	b.n	7282 <strcmp+0x21a>
    72aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    72ae:	e030      	b.n	7312 <strcmp+0x2aa>
    72b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    72b4:	d128      	bne.n	7308 <strcmp+0x2a0>
    72b6:	880b      	ldrh	r3, [r1, #0]
    72b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    72bc:	e029      	b.n	7312 <strcmp+0x2aa>
    72be:	ea4f 4212 	mov.w	r2, r2, lsr #16
    72c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    72c6:	e024      	b.n	7312 <strcmp+0x2aa>
    72c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    72cc:	fa82 f54c 	uadd8	r5, r2, ip
    72d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    72d4:	faa5 f58c 	sel	r5, r5, ip
    72d8:	d10a      	bne.n	72f0 <strcmp+0x288>
    72da:	b965      	cbnz	r5, 72f6 <strcmp+0x28e>
    72dc:	f851 3b04 	ldr.w	r3, [r1], #4
    72e0:	ea84 0402 	eor.w	r4, r4, r2
    72e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    72e8:	d109      	bne.n	72fe <strcmp+0x296>
    72ea:	f850 2b04 	ldr.w	r2, [r0], #4
    72ee:	e7eb      	b.n	72c8 <strcmp+0x260>
    72f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    72f4:	e00d      	b.n	7312 <strcmp+0x2aa>
    72f6:	f015 0fff 	tst.w	r5, #255	; 0xff
    72fa:	d105      	bne.n	7308 <strcmp+0x2a0>
    72fc:	680b      	ldr	r3, [r1, #0]
    72fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    7302:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7306:	e004      	b.n	7312 <strcmp+0x2aa>
    7308:	f04f 0000 	mov.w	r0, #0
    730c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7310:	4770      	bx	lr
    7312:	ba12      	rev	r2, r2
    7314:	ba1b      	rev	r3, r3
    7316:	fa82 f44c 	uadd8	r4, r2, ip
    731a:	ea82 0403 	eor.w	r4, r2, r3
    731e:	faa4 f58c 	sel	r5, r4, ip
    7322:	fab5 f485 	clz	r4, r5
    7326:	fa02 f204 	lsl.w	r2, r2, r4
    732a:	fa03 f304 	lsl.w	r3, r3, r4
    732e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    7332:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7336:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    733a:	4770      	bx	lr

0000733c <strcpy>:
    733c:	ea80 0201 	eor.w	r2, r0, r1
    7340:	4684      	mov	ip, r0
    7342:	f012 0f03 	tst.w	r2, #3
    7346:	d14f      	bne.n	73e8 <strcpy+0xac>
    7348:	f011 0f03 	tst.w	r1, #3
    734c:	d132      	bne.n	73b4 <strcpy+0x78>
    734e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    7352:	f011 0f04 	tst.w	r1, #4
    7356:	f851 3b04 	ldr.w	r3, [r1], #4
    735a:	d00b      	beq.n	7374 <strcpy+0x38>
    735c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7360:	439a      	bics	r2, r3
    7362:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7366:	bf04      	itt	eq
    7368:	f84c 3b04 	streq.w	r3, [ip], #4
    736c:	f851 3b04 	ldreq.w	r3, [r1], #4
    7370:	d116      	bne.n	73a0 <strcpy+0x64>
    7372:	bf00      	nop
    7374:	f851 4b04 	ldr.w	r4, [r1], #4
    7378:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    737c:	439a      	bics	r2, r3
    737e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7382:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7386:	d10b      	bne.n	73a0 <strcpy+0x64>
    7388:	f84c 3b04 	str.w	r3, [ip], #4
    738c:	43a2      	bics	r2, r4
    738e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7392:	bf04      	itt	eq
    7394:	f851 3b04 	ldreq.w	r3, [r1], #4
    7398:	f84c 4b04 	streq.w	r4, [ip], #4
    739c:	d0ea      	beq.n	7374 <strcpy+0x38>
    739e:	4623      	mov	r3, r4
    73a0:	f80c 3b01 	strb.w	r3, [ip], #1
    73a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    73a8:	ea4f 2333 	mov.w	r3, r3, ror #8
    73ac:	d1f8      	bne.n	73a0 <strcpy+0x64>
    73ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    73b2:	4770      	bx	lr
    73b4:	f011 0f01 	tst.w	r1, #1
    73b8:	d006      	beq.n	73c8 <strcpy+0x8c>
    73ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    73be:	f80c 2b01 	strb.w	r2, [ip], #1
    73c2:	2a00      	cmp	r2, #0
    73c4:	bf08      	it	eq
    73c6:	4770      	bxeq	lr
    73c8:	f011 0f02 	tst.w	r1, #2
    73cc:	d0bf      	beq.n	734e <strcpy+0x12>
    73ce:	f831 2b02 	ldrh.w	r2, [r1], #2
    73d2:	f012 0fff 	tst.w	r2, #255	; 0xff
    73d6:	bf16      	itet	ne
    73d8:	f82c 2b02 	strhne.w	r2, [ip], #2
    73dc:	f88c 2000 	strbeq.w	r2, [ip]
    73e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    73e4:	d1b3      	bne.n	734e <strcpy+0x12>
    73e6:	4770      	bx	lr
    73e8:	f811 2b01 	ldrb.w	r2, [r1], #1
    73ec:	f80c 2b01 	strb.w	r2, [ip], #1
    73f0:	2a00      	cmp	r2, #0
    73f2:	d1f9      	bne.n	73e8 <strcpy+0xac>
    73f4:	4770      	bx	lr
    73f6:	bf00      	nop
	...

00007400 <strlen>:
    7400:	f890 f000 	pld	[r0]
    7404:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    7408:	f020 0107 	bic.w	r1, r0, #7
    740c:	f06f 0c00 	mvn.w	ip, #0
    7410:	f010 0407 	ands.w	r4, r0, #7
    7414:	f891 f020 	pld	[r1, #32]
    7418:	f040 8049 	bne.w	74ae <strlen+0xae>
    741c:	f04f 0400 	mov.w	r4, #0
    7420:	f06f 0007 	mvn.w	r0, #7
    7424:	e9d1 2300 	ldrd	r2, r3, [r1]
    7428:	f891 f040 	pld	[r1, #64]	; 0x40
    742c:	f100 0008 	add.w	r0, r0, #8
    7430:	fa82 f24c 	uadd8	r2, r2, ip
    7434:	faa4 f28c 	sel	r2, r4, ip
    7438:	fa83 f34c 	uadd8	r3, r3, ip
    743c:	faa2 f38c 	sel	r3, r2, ip
    7440:	bb4b      	cbnz	r3, 7496 <strlen+0x96>
    7442:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    7446:	fa82 f24c 	uadd8	r2, r2, ip
    744a:	f100 0008 	add.w	r0, r0, #8
    744e:	faa4 f28c 	sel	r2, r4, ip
    7452:	fa83 f34c 	uadd8	r3, r3, ip
    7456:	faa2 f38c 	sel	r3, r2, ip
    745a:	b9e3      	cbnz	r3, 7496 <strlen+0x96>
    745c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7460:	fa82 f24c 	uadd8	r2, r2, ip
    7464:	f100 0008 	add.w	r0, r0, #8
    7468:	faa4 f28c 	sel	r2, r4, ip
    746c:	fa83 f34c 	uadd8	r3, r3, ip
    7470:	faa2 f38c 	sel	r3, r2, ip
    7474:	b97b      	cbnz	r3, 7496 <strlen+0x96>
    7476:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    747a:	f101 0120 	add.w	r1, r1, #32
    747e:	fa82 f24c 	uadd8	r2, r2, ip
    7482:	f100 0008 	add.w	r0, r0, #8
    7486:	faa4 f28c 	sel	r2, r4, ip
    748a:	fa83 f34c 	uadd8	r3, r3, ip
    748e:	faa2 f38c 	sel	r3, r2, ip
    7492:	2b00      	cmp	r3, #0
    7494:	d0c6      	beq.n	7424 <strlen+0x24>
    7496:	2a00      	cmp	r2, #0
    7498:	bf04      	itt	eq
    749a:	3004      	addeq	r0, #4
    749c:	461a      	moveq	r2, r3
    749e:	ba12      	rev	r2, r2
    74a0:	fab2 f282 	clz	r2, r2
    74a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    74a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    74ac:	4770      	bx	lr
    74ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    74b2:	f004 0503 	and.w	r5, r4, #3
    74b6:	f1c4 0000 	rsb	r0, r4, #0
    74ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    74be:	f014 0f04 	tst.w	r4, #4
    74c2:	f891 f040 	pld	[r1, #64]	; 0x40
    74c6:	fa0c f505 	lsl.w	r5, ip, r5
    74ca:	ea62 0205 	orn	r2, r2, r5
    74ce:	bf1c      	itt	ne
    74d0:	ea63 0305 	ornne	r3, r3, r5
    74d4:	4662      	movne	r2, ip
    74d6:	f04f 0400 	mov.w	r4, #0
    74da:	e7a9      	b.n	7430 <strlen+0x30>
    74dc:	0000      	movs	r0, r0
	...

000074e0 <nan>:
    74e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 74e8 <nan+0x8>
    74e4:	4770      	bx	lr
    74e6:	bf00      	nop
    74e8:	00000000 	.word	0x00000000
    74ec:	7ff80000 	.word	0x7ff80000

000074f0 <nanf>:
    74f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 74f8 <nanf+0x8>
    74f4:	4770      	bx	lr
    74f6:	bf00      	nop
    74f8:	7fc00000 	.word	0x7fc00000

000074fc <__register_exitproc>:
    74fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7500:	f8df a07c 	ldr.w	sl, [pc, #124]	; 7580 <__register_exitproc+0x84>
    7504:	4606      	mov	r6, r0
    7506:	f8da 0000 	ldr.w	r0, [sl]
    750a:	4698      	mov	r8, r3
    750c:	460f      	mov	r7, r1
    750e:	4691      	mov	r9, r2
    7510:	f7ff fd9c 	bl	704c <__retarget_lock_acquire_recursive>
    7514:	4b18      	ldr	r3, [pc, #96]	; (7578 <__register_exitproc+0x7c>)
    7516:	681c      	ldr	r4, [r3, #0]
    7518:	b324      	cbz	r4, 7564 <__register_exitproc+0x68>
    751a:	6865      	ldr	r5, [r4, #4]
    751c:	2d1f      	cmp	r5, #31
    751e:	dc24      	bgt.n	756a <__register_exitproc+0x6e>
    7520:	b95e      	cbnz	r6, 753a <__register_exitproc+0x3e>
    7522:	1c6b      	adds	r3, r5, #1
    7524:	3502      	adds	r5, #2
    7526:	f8da 0000 	ldr.w	r0, [sl]
    752a:	6063      	str	r3, [r4, #4]
    752c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    7530:	f7ff fd8e 	bl	7050 <__retarget_lock_release_recursive>
    7534:	2000      	movs	r0, #0
    7536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    753a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    753e:	2301      	movs	r3, #1
    7540:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    7544:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    7548:	40ab      	lsls	r3, r5
    754a:	431a      	orrs	r2, r3
    754c:	2e02      	cmp	r6, #2
    754e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    7552:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    7556:	d1e4      	bne.n	7522 <__register_exitproc+0x26>
    7558:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    755c:	431a      	orrs	r2, r3
    755e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    7562:	e7de      	b.n	7522 <__register_exitproc+0x26>
    7564:	4c05      	ldr	r4, [pc, #20]	; (757c <__register_exitproc+0x80>)
    7566:	601c      	str	r4, [r3, #0]
    7568:	e7d7      	b.n	751a <__register_exitproc+0x1e>
    756a:	f8da 0000 	ldr.w	r0, [sl]
    756e:	f7ff fd6f 	bl	7050 <__retarget_lock_release_recursive>
    7572:	f04f 30ff 	mov.w	r0, #4294967295
    7576:	e7de      	b.n	7536 <__register_exitproc+0x3a>
    7578:	20001d38 	.word	0x20001d38
    757c:	20001d3c 	.word	0x20001d3c
    7580:	20001130 	.word	0x20001130

00007584 <_malloc_trim_r>:
    7584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7586:	4f24      	ldr	r7, [pc, #144]	; (7618 <_malloc_trim_r+0x94>)
    7588:	460c      	mov	r4, r1
    758a:	4606      	mov	r6, r0
    758c:	f7fd fd36 	bl	4ffc <__malloc_lock>
    7590:	68bb      	ldr	r3, [r7, #8]
    7592:	685d      	ldr	r5, [r3, #4]
    7594:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    7598:	310f      	adds	r1, #15
    759a:	f025 0503 	bic.w	r5, r5, #3
    759e:	194b      	adds	r3, r1, r5
    75a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    75a4:	f023 030f 	bic.w	r3, r3, #15
    75a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    75ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    75b0:	db07      	blt.n	75c2 <_malloc_trim_r+0x3e>
    75b2:	2100      	movs	r1, #0
    75b4:	4630      	mov	r0, r6
    75b6:	f7ff fcf3 	bl	6fa0 <_sbrk_r>
    75ba:	68bb      	ldr	r3, [r7, #8]
    75bc:	442b      	add	r3, r5
    75be:	4298      	cmp	r0, r3
    75c0:	d004      	beq.n	75cc <_malloc_trim_r+0x48>
    75c2:	4630      	mov	r0, r6
    75c4:	f7fd fd20 	bl	5008 <__malloc_unlock>
    75c8:	2000      	movs	r0, #0
    75ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75cc:	4261      	negs	r1, r4
    75ce:	4630      	mov	r0, r6
    75d0:	f7ff fce6 	bl	6fa0 <_sbrk_r>
    75d4:	3001      	adds	r0, #1
    75d6:	d00d      	beq.n	75f4 <_malloc_trim_r+0x70>
    75d8:	4a10      	ldr	r2, [pc, #64]	; (761c <_malloc_trim_r+0x98>)
    75da:	68bb      	ldr	r3, [r7, #8]
    75dc:	1b2d      	subs	r5, r5, r4
    75de:	f045 0501 	orr.w	r5, r5, #1
    75e2:	605d      	str	r5, [r3, #4]
    75e4:	6813      	ldr	r3, [r2, #0]
    75e6:	4630      	mov	r0, r6
    75e8:	1b1b      	subs	r3, r3, r4
    75ea:	6013      	str	r3, [r2, #0]
    75ec:	f7fd fd0c 	bl	5008 <__malloc_unlock>
    75f0:	2001      	movs	r0, #1
    75f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75f4:	2100      	movs	r1, #0
    75f6:	4630      	mov	r0, r6
    75f8:	f7ff fcd2 	bl	6fa0 <_sbrk_r>
    75fc:	68ba      	ldr	r2, [r7, #8]
    75fe:	1a83      	subs	r3, r0, r2
    7600:	2b0f      	cmp	r3, #15
    7602:	ddde      	ble.n	75c2 <_malloc_trim_r+0x3e>
    7604:	f043 0301 	orr.w	r3, r3, #1
    7608:	6053      	str	r3, [r2, #4]
    760a:	4b05      	ldr	r3, [pc, #20]	; (7620 <_malloc_trim_r+0x9c>)
    760c:	4903      	ldr	r1, [pc, #12]	; (761c <_malloc_trim_r+0x98>)
    760e:	681b      	ldr	r3, [r3, #0]
    7610:	1ac0      	subs	r0, r0, r3
    7612:	6008      	str	r0, [r1, #0]
    7614:	e7d5      	b.n	75c2 <_malloc_trim_r+0x3e>
    7616:	bf00      	nop
    7618:	200012a8 	.word	0x200012a8
    761c:	20001ed8 	.word	0x20001ed8
    7620:	200016b0 	.word	0x200016b0

00007624 <_free_r>:
    7624:	2900      	cmp	r1, #0
    7626:	d061      	beq.n	76ec <_free_r+0xc8>
    7628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    762a:	460c      	mov	r4, r1
    762c:	4606      	mov	r6, r0
    762e:	f7fd fce5 	bl	4ffc <__malloc_lock>
    7632:	f854 2c04 	ldr.w	r2, [r4, #-4]
    7636:	4f7b      	ldr	r7, [pc, #492]	; (7824 <_free_r+0x200>)
    7638:	f1a4 0508 	sub.w	r5, r4, #8
    763c:	f022 0101 	bic.w	r1, r2, #1
    7640:	eb05 0c01 	add.w	ip, r5, r1
    7644:	68b8      	ldr	r0, [r7, #8]
    7646:	f8dc 3004 	ldr.w	r3, [ip, #4]
    764a:	4560      	cmp	r0, ip
    764c:	f023 0303 	bic.w	r3, r3, #3
    7650:	f000 808b 	beq.w	776a <_free_r+0x146>
    7654:	07d2      	lsls	r2, r2, #31
    7656:	f8cc 3004 	str.w	r3, [ip, #4]
    765a:	d432      	bmi.n	76c2 <_free_r+0x9e>
    765c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7660:	1aad      	subs	r5, r5, r2
    7662:	4411      	add	r1, r2
    7664:	68aa      	ldr	r2, [r5, #8]
    7666:	f107 0008 	add.w	r0, r7, #8
    766a:	4282      	cmp	r2, r0
    766c:	d06a      	beq.n	7744 <_free_r+0x120>
    766e:	eb0c 0403 	add.w	r4, ip, r3
    7672:	f8d4 e004 	ldr.w	lr, [r4, #4]
    7676:	68ec      	ldr	r4, [r5, #12]
    7678:	60d4      	str	r4, [r2, #12]
    767a:	f01e 0f01 	tst.w	lr, #1
    767e:	60a2      	str	r2, [r4, #8]
    7680:	f000 8097 	beq.w	77b2 <_free_r+0x18e>
    7684:	f041 0301 	orr.w	r3, r1, #1
    7688:	606b      	str	r3, [r5, #4]
    768a:	f8cc 1000 	str.w	r1, [ip]
    768e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    7692:	d235      	bcs.n	7700 <_free_r+0xdc>
    7694:	6878      	ldr	r0, [r7, #4]
    7696:	08cb      	lsrs	r3, r1, #3
    7698:	2201      	movs	r2, #1
    769a:	0949      	lsrs	r1, r1, #5
    769c:	3301      	adds	r3, #1
    769e:	408a      	lsls	r2, r1
    76a0:	4302      	orrs	r2, r0
    76a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    76a6:	607a      	str	r2, [r7, #4]
    76a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    76ac:	3a08      	subs	r2, #8
    76ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    76b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    76b6:	60cd      	str	r5, [r1, #12]
    76b8:	4630      	mov	r0, r6
    76ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    76be:	f7fd bca3 	b.w	5008 <__malloc_unlock>
    76c2:	eb0c 0203 	add.w	r2, ip, r3
    76c6:	6852      	ldr	r2, [r2, #4]
    76c8:	07d0      	lsls	r0, r2, #31
    76ca:	d410      	bmi.n	76ee <_free_r+0xca>
    76cc:	4419      	add	r1, r3
    76ce:	f107 0008 	add.w	r0, r7, #8
    76d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    76d6:	4283      	cmp	r3, r0
    76d8:	d073      	beq.n	77c2 <_free_r+0x19e>
    76da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    76de:	60da      	str	r2, [r3, #12]
    76e0:	6093      	str	r3, [r2, #8]
    76e2:	f041 0301 	orr.w	r3, r1, #1
    76e6:	606b      	str	r3, [r5, #4]
    76e8:	5069      	str	r1, [r5, r1]
    76ea:	e7d0      	b.n	768e <_free_r+0x6a>
    76ec:	4770      	bx	lr
    76ee:	f041 0301 	orr.w	r3, r1, #1
    76f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    76f6:	f844 3c04 	str.w	r3, [r4, #-4]
    76fa:	f8cc 1000 	str.w	r1, [ip]
    76fe:	d3c9      	bcc.n	7694 <_free_r+0x70>
    7700:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    7704:	ea4f 2351 	mov.w	r3, r1, lsr #9
    7708:	d248      	bcs.n	779c <_free_r+0x178>
    770a:	098b      	lsrs	r3, r1, #6
    770c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    7710:	f103 0238 	add.w	r2, r3, #56	; 0x38
    7714:	00c3      	lsls	r3, r0, #3
    7716:	18f8      	adds	r0, r7, r3
    7718:	58fb      	ldr	r3, [r7, r3]
    771a:	3808      	subs	r0, #8
    771c:	4298      	cmp	r0, r3
    771e:	d059      	beq.n	77d4 <_free_r+0x1b0>
    7720:	685a      	ldr	r2, [r3, #4]
    7722:	f022 0203 	bic.w	r2, r2, #3
    7726:	428a      	cmp	r2, r1
    7728:	d902      	bls.n	7730 <_free_r+0x10c>
    772a:	689b      	ldr	r3, [r3, #8]
    772c:	4298      	cmp	r0, r3
    772e:	d1f7      	bne.n	7720 <_free_r+0xfc>
    7730:	68d8      	ldr	r0, [r3, #12]
    7732:	e9c5 3002 	strd	r3, r0, [r5, #8]
    7736:	6085      	str	r5, [r0, #8]
    7738:	60dd      	str	r5, [r3, #12]
    773a:	4630      	mov	r0, r6
    773c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7740:	f7fd bc62 	b.w	5008 <__malloc_unlock>
    7744:	eb0c 0203 	add.w	r2, ip, r3
    7748:	6852      	ldr	r2, [r2, #4]
    774a:	07d2      	lsls	r2, r2, #31
    774c:	d463      	bmi.n	7816 <_free_r+0x1f2>
    774e:	440b      	add	r3, r1
    7750:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    7754:	60ca      	str	r2, [r1, #12]
    7756:	6091      	str	r1, [r2, #8]
    7758:	f043 0201 	orr.w	r2, r3, #1
    775c:	606a      	str	r2, [r5, #4]
    775e:	4630      	mov	r0, r6
    7760:	50eb      	str	r3, [r5, r3]
    7762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7766:	f7fd bc4f 	b.w	5008 <__malloc_unlock>
    776a:	440b      	add	r3, r1
    776c:	07d1      	lsls	r1, r2, #31
    776e:	d407      	bmi.n	7780 <_free_r+0x15c>
    7770:	f854 2c08 	ldr.w	r2, [r4, #-8]
    7774:	1aad      	subs	r5, r5, r2
    7776:	4413      	add	r3, r2
    7778:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    777c:	60ca      	str	r2, [r1, #12]
    777e:	6091      	str	r1, [r2, #8]
    7780:	f043 0201 	orr.w	r2, r3, #1
    7784:	606a      	str	r2, [r5, #4]
    7786:	4a28      	ldr	r2, [pc, #160]	; (7828 <_free_r+0x204>)
    7788:	60bd      	str	r5, [r7, #8]
    778a:	6812      	ldr	r2, [r2, #0]
    778c:	429a      	cmp	r2, r3
    778e:	d893      	bhi.n	76b8 <_free_r+0x94>
    7790:	4b26      	ldr	r3, [pc, #152]	; (782c <_free_r+0x208>)
    7792:	4630      	mov	r0, r6
    7794:	6819      	ldr	r1, [r3, #0]
    7796:	f7ff fef5 	bl	7584 <_malloc_trim_r>
    779a:	e78d      	b.n	76b8 <_free_r+0x94>
    779c:	2b14      	cmp	r3, #20
    779e:	d90a      	bls.n	77b6 <_free_r+0x192>
    77a0:	2b54      	cmp	r3, #84	; 0x54
    77a2:	d81f      	bhi.n	77e4 <_free_r+0x1c0>
    77a4:	0b0b      	lsrs	r3, r1, #12
    77a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    77aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    77ae:	00c3      	lsls	r3, r0, #3
    77b0:	e7b1      	b.n	7716 <_free_r+0xf2>
    77b2:	4419      	add	r1, r3
    77b4:	e78d      	b.n	76d2 <_free_r+0xae>
    77b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    77ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    77be:	00c3      	lsls	r3, r0, #3
    77c0:	e7a9      	b.n	7716 <_free_r+0xf2>
    77c2:	f041 0301 	orr.w	r3, r1, #1
    77c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    77ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    77ce:	606b      	str	r3, [r5, #4]
    77d0:	5069      	str	r1, [r5, r1]
    77d2:	e771      	b.n	76b8 <_free_r+0x94>
    77d4:	6879      	ldr	r1, [r7, #4]
    77d6:	1092      	asrs	r2, r2, #2
    77d8:	2401      	movs	r4, #1
    77da:	fa04 f202 	lsl.w	r2, r4, r2
    77de:	430a      	orrs	r2, r1
    77e0:	607a      	str	r2, [r7, #4]
    77e2:	e7a6      	b.n	7732 <_free_r+0x10e>
    77e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    77e8:	d806      	bhi.n	77f8 <_free_r+0x1d4>
    77ea:	0bcb      	lsrs	r3, r1, #15
    77ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    77f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    77f4:	00c3      	lsls	r3, r0, #3
    77f6:	e78e      	b.n	7716 <_free_r+0xf2>
    77f8:	f240 5254 	movw	r2, #1364	; 0x554
    77fc:	4293      	cmp	r3, r2
    77fe:	d806      	bhi.n	780e <_free_r+0x1ea>
    7800:	0c8b      	lsrs	r3, r1, #18
    7802:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    7806:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    780a:	00c3      	lsls	r3, r0, #3
    780c:	e783      	b.n	7716 <_free_r+0xf2>
    780e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    7812:	227e      	movs	r2, #126	; 0x7e
    7814:	e77f      	b.n	7716 <_free_r+0xf2>
    7816:	f041 0301 	orr.w	r3, r1, #1
    781a:	606b      	str	r3, [r5, #4]
    781c:	f8cc 1000 	str.w	r1, [ip]
    7820:	e74a      	b.n	76b8 <_free_r+0x94>
    7822:	bf00      	nop
    7824:	200012a8 	.word	0x200012a8
    7828:	200016b4 	.word	0x200016b4
    782c:	20001f08 	.word	0x20001f08

00007830 <rshift>:
    7830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7834:	6904      	ldr	r4, [r0, #16]
    7836:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    783a:	dd2f      	ble.n	789c <rshift+0x6c>
    783c:	f100 0e14 	add.w	lr, r0, #20
    7840:	114e      	asrs	r6, r1, #5
    7842:	f011 0c1f 	ands.w	ip, r1, #31
    7846:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    784a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    784e:	d02b      	beq.n	78a8 <rshift+0x78>
    7850:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    7854:	3304      	adds	r3, #4
    7856:	429d      	cmp	r5, r3
    7858:	fa21 f10c 	lsr.w	r1, r1, ip
    785c:	f1cc 0820 	rsb	r8, ip, #32
    7860:	d918      	bls.n	7894 <rshift+0x64>
    7862:	4677      	mov	r7, lr
    7864:	681a      	ldr	r2, [r3, #0]
    7866:	fa02 f208 	lsl.w	r2, r2, r8
    786a:	430a      	orrs	r2, r1
    786c:	f847 2b04 	str.w	r2, [r7], #4
    7870:	f853 1b04 	ldr.w	r1, [r3], #4
    7874:	429d      	cmp	r5, r3
    7876:	fa21 f10c 	lsr.w	r1, r1, ip
    787a:	d8f3      	bhi.n	7864 <rshift+0x34>
    787c:	1ba3      	subs	r3, r4, r6
    787e:	009b      	lsls	r3, r3, #2
    7880:	3b05      	subs	r3, #5
    7882:	089b      	lsrs	r3, r3, #2
    7884:	3301      	adds	r3, #1
    7886:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    788a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    788e:	b1c9      	cbz	r1, 78c4 <rshift+0x94>
    7890:	3404      	adds	r4, #4
    7892:	e017      	b.n	78c4 <rshift+0x94>
    7894:	6141      	str	r1, [r0, #20]
    7896:	4674      	mov	r4, lr
    7898:	2900      	cmp	r1, #0
    789a:	d1f9      	bne.n	7890 <rshift+0x60>
    789c:	2300      	movs	r3, #0
    789e:	6103      	str	r3, [r0, #16]
    78a0:	2300      	movs	r3, #0
    78a2:	6143      	str	r3, [r0, #20]
    78a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78a8:	429d      	cmp	r5, r3
    78aa:	bf88      	it	hi
    78ac:	f100 0210 	addhi.w	r2, r0, #16
    78b0:	d9f4      	bls.n	789c <rshift+0x6c>
    78b2:	f853 1b04 	ldr.w	r1, [r3], #4
    78b6:	f842 1f04 	str.w	r1, [r2, #4]!
    78ba:	429d      	cmp	r5, r3
    78bc:	d8f9      	bhi.n	78b2 <rshift+0x82>
    78be:	1ba4      	subs	r4, r4, r6
    78c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    78c4:	eba4 030e 	sub.w	r3, r4, lr
    78c8:	109b      	asrs	r3, r3, #2
    78ca:	4574      	cmp	r4, lr
    78cc:	6103      	str	r3, [r0, #16]
    78ce:	d0e7      	beq.n	78a0 <rshift+0x70>
    78d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000078d4 <__gethex>:
    78d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    78d8:	ed2d 8b02 	vpush	{d8}
    78dc:	680c      	ldr	r4, [r1, #0]
    78de:	468b      	mov	fp, r1
    78e0:	78a1      	ldrb	r1, [r4, #2]
    78e2:	b085      	sub	sp, #20
    78e4:	2930      	cmp	r1, #48	; 0x30
    78e6:	ee08 0a10 	vmov	s16, r0
    78ea:	4692      	mov	sl, r2
    78ec:	9302      	str	r3, [sp, #8]
    78ee:	f040 81ce 	bne.w	7c8e <__gethex+0x3ba>
    78f2:	f06f 0001 	mvn.w	r0, #1
    78f6:	1b00      	subs	r0, r0, r4
    78f8:	1ce2      	adds	r2, r4, #3
    78fa:	1883      	adds	r3, r0, r2
    78fc:	4614      	mov	r4, r2
    78fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    7902:	2930      	cmp	r1, #48	; 0x30
    7904:	d0f9      	beq.n	78fa <__gethex+0x26>
    7906:	f8df 8300 	ldr.w	r8, [pc, #768]	; 7c08 <__gethex+0x334>
    790a:	f818 2001 	ldrb.w	r2, [r8, r1]
    790e:	2a00      	cmp	r2, #0
    7910:	f000 80e5 	beq.w	7ade <__gethex+0x20a>
    7914:	7822      	ldrb	r2, [r4, #0]
    7916:	2700      	movs	r7, #0
    7918:	f818 2002 	ldrb.w	r2, [r8, r2]
    791c:	463d      	mov	r5, r7
    791e:	4626      	mov	r6, r4
    7920:	b12a      	cbz	r2, 792e <__gethex+0x5a>
    7922:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    7926:	f818 2002 	ldrb.w	r2, [r8, r2]
    792a:	2a00      	cmp	r2, #0
    792c:	d1f9      	bne.n	7922 <__gethex+0x4e>
    792e:	49b5      	ldr	r1, [pc, #724]	; (7c04 <__gethex+0x330>)
    7930:	9301      	str	r3, [sp, #4]
    7932:	2201      	movs	r2, #1
    7934:	4630      	mov	r0, r6
    7936:	f7ff f863 	bl	6a00 <strncmp>
    793a:	9b01      	ldr	r3, [sp, #4]
    793c:	4681      	mov	r9, r0
    793e:	2800      	cmp	r0, #0
    7940:	d04d      	beq.n	79de <__gethex+0x10a>
    7942:	2d00      	cmp	r5, #0
    7944:	d14e      	bne.n	79e4 <__gethex+0x110>
    7946:	7832      	ldrb	r2, [r6, #0]
    7948:	46a9      	mov	r9, r5
    794a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    794e:	2a50      	cmp	r2, #80	; 0x50
    7950:	4635      	mov	r5, r6
    7952:	d050      	beq.n	79f6 <__gethex+0x122>
    7954:	f8cb 6000 	str.w	r6, [fp]
    7958:	2f00      	cmp	r7, #0
    795a:	d169      	bne.n	7a30 <__gethex+0x15c>
    795c:	1b2b      	subs	r3, r5, r4
    795e:	3b01      	subs	r3, #1
    7960:	2b07      	cmp	r3, #7
    7962:	4639      	mov	r1, r7
    7964:	dd04      	ble.n	7970 <__gethex+0x9c>
    7966:	105b      	asrs	r3, r3, #1
    7968:	2b07      	cmp	r3, #7
    796a:	f101 0101 	add.w	r1, r1, #1
    796e:	dcfa      	bgt.n	7966 <__gethex+0x92>
    7970:	ee18 0a10 	vmov	r0, s16
    7974:	f000 fb82 	bl	807c <_Balloc>
    7978:	4683      	mov	fp, r0
    797a:	2800      	cmp	r0, #0
    797c:	f000 8266 	beq.w	7e4c <__gethex+0x578>
    7980:	f100 0614 	add.w	r6, r0, #20
    7984:	42ac      	cmp	r4, r5
    7986:	9601      	str	r6, [sp, #4]
    7988:	f080 81d2 	bcs.w	7d30 <__gethex+0x45c>
    798c:	2700      	movs	r7, #0
    798e:	f8cd 900c 	str.w	r9, [sp, #12]
    7992:	499c      	ldr	r1, [pc, #624]	; (7c04 <__gethex+0x330>)
    7994:	46a1      	mov	r9, r4
    7996:	463c      	mov	r4, r7
    7998:	e00c      	b.n	79b4 <__gethex+0xe0>
    799a:	2f20      	cmp	r7, #32
    799c:	d019      	beq.n	79d2 <__gethex+0xfe>
    799e:	4638      	mov	r0, r7
    79a0:	3704      	adds	r7, #4
    79a2:	782a      	ldrb	r2, [r5, #0]
    79a4:	f818 2002 	ldrb.w	r2, [r8, r2]
    79a8:	f002 020f 	and.w	r2, r2, #15
    79ac:	4082      	lsls	r2, r0
    79ae:	4314      	orrs	r4, r2
    79b0:	454d      	cmp	r5, r9
    79b2:	d047      	beq.n	7a44 <__gethex+0x170>
    79b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    79b8:	2a2e      	cmp	r2, #46	; 0x2e
    79ba:	d1ee      	bne.n	799a <__gethex+0xc6>
    79bc:	454d      	cmp	r5, r9
    79be:	d3ec      	bcc.n	799a <__gethex+0xc6>
    79c0:	2201      	movs	r2, #1
    79c2:	4628      	mov	r0, r5
    79c4:	f7ff f81c 	bl	6a00 <strncmp>
    79c8:	498e      	ldr	r1, [pc, #568]	; (7c04 <__gethex+0x330>)
    79ca:	2800      	cmp	r0, #0
    79cc:	d0f0      	beq.n	79b0 <__gethex+0xdc>
    79ce:	2f20      	cmp	r7, #32
    79d0:	d1e5      	bne.n	799e <__gethex+0xca>
    79d2:	2000      	movs	r0, #0
    79d4:	f846 4b04 	str.w	r4, [r6], #4
    79d8:	2704      	movs	r7, #4
    79da:	4604      	mov	r4, r0
    79dc:	e7e1      	b.n	79a2 <__gethex+0xce>
    79de:	2d00      	cmp	r5, #0
    79e0:	f000 8142 	beq.w	7c68 <__gethex+0x394>
    79e4:	7832      	ldrb	r2, [r6, #0]
    79e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    79ea:	1bad      	subs	r5, r5, r6
    79ec:	2a50      	cmp	r2, #80	; 0x50
    79ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    79f2:	4635      	mov	r5, r6
    79f4:	d1ae      	bne.n	7954 <__gethex+0x80>
    79f6:	786a      	ldrb	r2, [r5, #1]
    79f8:	2a2b      	cmp	r2, #43	; 0x2b
    79fa:	f000 8125 	beq.w	7c48 <__gethex+0x374>
    79fe:	2a2d      	cmp	r2, #45	; 0x2d
    7a00:	f000 80a5 	beq.w	7b4e <__gethex+0x27a>
    7a04:	1c6e      	adds	r6, r5, #1
    7a06:	2000      	movs	r0, #0
    7a08:	f818 1002 	ldrb.w	r1, [r8, r2]
    7a0c:	1e4a      	subs	r2, r1, #1
    7a0e:	2a18      	cmp	r2, #24
    7a10:	f200 809b 	bhi.w	7b4a <__gethex+0x276>
    7a14:	7872      	ldrb	r2, [r6, #1]
    7a16:	f818 2002 	ldrb.w	r2, [r8, r2]
    7a1a:	3910      	subs	r1, #16
    7a1c:	3601      	adds	r6, #1
    7a1e:	2a00      	cmp	r2, #0
    7a20:	d15a      	bne.n	7ad8 <__gethex+0x204>
    7a22:	b100      	cbz	r0, 7a26 <__gethex+0x152>
    7a24:	4249      	negs	r1, r1
    7a26:	4489      	add	r9, r1
    7a28:	f8cb 6000 	str.w	r6, [fp]
    7a2c:	2f00      	cmp	r7, #0
    7a2e:	d095      	beq.n	795c <__gethex+0x88>
    7a30:	2b00      	cmp	r3, #0
    7a32:	bf14      	ite	ne
    7a34:	2500      	movne	r5, #0
    7a36:	2506      	moveq	r5, #6
    7a38:	4628      	mov	r0, r5
    7a3a:	b005      	add	sp, #20
    7a3c:	ecbd 8b02 	vpop	{d8}
    7a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7a44:	f8dd 900c 	ldr.w	r9, [sp, #12]
    7a48:	4623      	mov	r3, r4
    7a4a:	f846 3b04 	str.w	r3, [r6], #4
    7a4e:	4618      	mov	r0, r3
    7a50:	9b01      	ldr	r3, [sp, #4]
    7a52:	1af6      	subs	r6, r6, r3
    7a54:	10b6      	asrs	r6, r6, #2
    7a56:	f8cb 6010 	str.w	r6, [fp, #16]
    7a5a:	f000 fbe9 	bl	8230 <__hi0bits>
    7a5e:	0176      	lsls	r6, r6, #5
    7a60:	f8da 4000 	ldr.w	r4, [sl]
    7a64:	1a30      	subs	r0, r6, r0
    7a66:	42a0      	cmp	r0, r4
    7a68:	dc75      	bgt.n	7b56 <__gethex+0x282>
    7a6a:	f2c0 80ef 	blt.w	7c4c <__gethex+0x378>
    7a6e:	2700      	movs	r7, #0
    7a70:	f8da 3008 	ldr.w	r3, [sl, #8]
    7a74:	454b      	cmp	r3, r9
    7a76:	f2c0 8151 	blt.w	7d1c <__gethex+0x448>
    7a7a:	f8da 3004 	ldr.w	r3, [sl, #4]
    7a7e:	454b      	cmp	r3, r9
    7a80:	dd4a      	ble.n	7b18 <__gethex+0x244>
    7a82:	eba3 0909 	sub.w	r9, r3, r9
    7a86:	454c      	cmp	r4, r9
    7a88:	f300 8082 	bgt.w	7b90 <__gethex+0x2bc>
    7a8c:	f8da 200c 	ldr.w	r2, [sl, #12]
    7a90:	2a02      	cmp	r2, #2
    7a92:	f000 8165 	beq.w	7d60 <__gethex+0x48c>
    7a96:	2a03      	cmp	r2, #3
    7a98:	f000 8181 	beq.w	7d9e <__gethex+0x4ca>
    7a9c:	2a01      	cmp	r2, #1
    7a9e:	f000 816f 	beq.w	7d80 <__gethex+0x4ac>
    7aa2:	ee18 0a10 	vmov	r0, s16
    7aa6:	4659      	mov	r1, fp
    7aa8:	f000 fb0e 	bl	80c8 <_Bfree>
    7aac:	2550      	movs	r5, #80	; 0x50
    7aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7ab0:	2300      	movs	r3, #0
    7ab2:	4628      	mov	r0, r5
    7ab4:	6013      	str	r3, [r2, #0]
    7ab6:	b005      	add	sp, #20
    7ab8:	ecbd 8b02 	vpop	{d8}
    7abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ac0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    7ac4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    7ac8:	f1a2 0110 	sub.w	r1, r2, #16
    7acc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    7ad0:	f818 2002 	ldrb.w	r2, [r8, r2]
    7ad4:	2a00      	cmp	r2, #0
    7ad6:	d0a4      	beq.n	7a22 <__gethex+0x14e>
    7ad8:	2a19      	cmp	r2, #25
    7ada:	ddf1      	ble.n	7ac0 <__gethex+0x1ec>
    7adc:	e7a1      	b.n	7a22 <__gethex+0x14e>
    7ade:	4949      	ldr	r1, [pc, #292]	; (7c04 <__gethex+0x330>)
    7ae0:	9301      	str	r3, [sp, #4]
    7ae2:	2201      	movs	r2, #1
    7ae4:	4620      	mov	r0, r4
    7ae6:	f7fe ff8b 	bl	6a00 <strncmp>
    7aea:	9b01      	ldr	r3, [sp, #4]
    7aec:	2800      	cmp	r0, #0
    7aee:	d16d      	bne.n	7bcc <__gethex+0x2f8>
    7af0:	7861      	ldrb	r1, [r4, #1]
    7af2:	f818 2001 	ldrb.w	r2, [r8, r1]
    7af6:	1c65      	adds	r5, r4, #1
    7af8:	2a00      	cmp	r2, #0
    7afa:	d069      	beq.n	7bd0 <__gethex+0x2fc>
    7afc:	2930      	cmp	r1, #48	; 0x30
    7afe:	462c      	mov	r4, r5
    7b00:	d105      	bne.n	7b0e <__gethex+0x23a>
    7b02:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7b06:	2b30      	cmp	r3, #48	; 0x30
    7b08:	d0fb      	beq.n	7b02 <__gethex+0x22e>
    7b0a:	f818 2003 	ldrb.w	r2, [r8, r3]
    7b0e:	fab2 f782 	clz	r7, r2
    7b12:	097f      	lsrs	r7, r7, #5
    7b14:	2301      	movs	r3, #1
    7b16:	e702      	b.n	791e <__gethex+0x4a>
    7b18:	2501      	movs	r5, #1
    7b1a:	b157      	cbz	r7, 7b32 <__gethex+0x25e>
    7b1c:	f8da 300c 	ldr.w	r3, [sl, #12]
    7b20:	2b02      	cmp	r3, #2
    7b22:	d05d      	beq.n	7be0 <__gethex+0x30c>
    7b24:	2b03      	cmp	r3, #3
    7b26:	d05f      	beq.n	7be8 <__gethex+0x314>
    7b28:	2b01      	cmp	r3, #1
    7b2a:	f000 8084 	beq.w	7c36 <__gethex+0x362>
    7b2e:	f045 0510 	orr.w	r5, r5, #16
    7b32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b34:	f8c3 b000 	str.w	fp, [r3]
    7b38:	9b02      	ldr	r3, [sp, #8]
    7b3a:	4628      	mov	r0, r5
    7b3c:	f8c3 9000 	str.w	r9, [r3]
    7b40:	b005      	add	sp, #20
    7b42:	ecbd 8b02 	vpop	{d8}
    7b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b4a:	462e      	mov	r6, r5
    7b4c:	e702      	b.n	7954 <__gethex+0x80>
    7b4e:	2001      	movs	r0, #1
    7b50:	78aa      	ldrb	r2, [r5, #2]
    7b52:	1cae      	adds	r6, r5, #2
    7b54:	e758      	b.n	7a08 <__gethex+0x134>
    7b56:	1b06      	subs	r6, r0, r4
    7b58:	4631      	mov	r1, r6
    7b5a:	4658      	mov	r0, fp
    7b5c:	f000 ff96 	bl	8a8c <__any_on>
    7b60:	4607      	mov	r7, r0
    7b62:	b178      	cbz	r0, 7b84 <__gethex+0x2b0>
    7b64:	1e72      	subs	r2, r6, #1
    7b66:	1153      	asrs	r3, r2, #5
    7b68:	9901      	ldr	r1, [sp, #4]
    7b6a:	2701      	movs	r7, #1
    7b6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    7b70:	f002 031f 	and.w	r3, r2, #31
    7b74:	fa07 f303 	lsl.w	r3, r7, r3
    7b78:	420b      	tst	r3, r1
    7b7a:	d003      	beq.n	7b84 <__gethex+0x2b0>
    7b7c:	42ba      	cmp	r2, r7
    7b7e:	f300 80e2 	bgt.w	7d46 <__gethex+0x472>
    7b82:	2702      	movs	r7, #2
    7b84:	4631      	mov	r1, r6
    7b86:	4658      	mov	r0, fp
    7b88:	44b1      	add	r9, r6
    7b8a:	f7ff fe51 	bl	7830 <rshift>
    7b8e:	e76f      	b.n	7a70 <__gethex+0x19c>
    7b90:	f109 35ff 	add.w	r5, r9, #4294967295
    7b94:	2f00      	cmp	r7, #0
    7b96:	f040 80ce 	bne.w	7d36 <__gethex+0x462>
    7b9a:	2d00      	cmp	r5, #0
    7b9c:	f040 80cd 	bne.w	7d3a <__gethex+0x466>
    7ba0:	116b      	asrs	r3, r5, #5
    7ba2:	9a01      	ldr	r2, [sp, #4]
    7ba4:	f005 051f 	and.w	r5, r5, #31
    7ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    7bac:	2301      	movs	r3, #1
    7bae:	40ab      	lsls	r3, r5
    7bb0:	4213      	tst	r3, r2
    7bb2:	4649      	mov	r1, r9
    7bb4:	4658      	mov	r0, fp
    7bb6:	bf18      	it	ne
    7bb8:	f047 0702 	orrne.w	r7, r7, #2
    7bbc:	eba4 0409 	sub.w	r4, r4, r9
    7bc0:	f7ff fe36 	bl	7830 <rshift>
    7bc4:	2502      	movs	r5, #2
    7bc6:	f8da 9004 	ldr.w	r9, [sl, #4]
    7bca:	e7a6      	b.n	7b1a <__gethex+0x246>
    7bcc:	7821      	ldrb	r1, [r4, #0]
    7bce:	4625      	mov	r5, r4
    7bd0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    7bd4:	2950      	cmp	r1, #80	; 0x50
    7bd6:	f000 80bf 	beq.w	7d58 <__gethex+0x484>
    7bda:	f8cb 5000 	str.w	r5, [fp]
    7bde:	e727      	b.n	7a30 <__gethex+0x15c>
    7be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7be2:	f1c3 0301 	rsb	r3, r3, #1
    7be6:	9311      	str	r3, [sp, #68]	; 0x44
    7be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7bea:	2b00      	cmp	r3, #0
    7bec:	d09f      	beq.n	7b2e <__gethex+0x25a>
    7bee:	f8db 7010 	ldr.w	r7, [fp, #16]
    7bf2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    7bf6:	00ba      	lsls	r2, r7, #2
    7bf8:	4643      	mov	r3, r8
    7bfa:	9201      	str	r2, [sp, #4]
    7bfc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    7c00:	2100      	movs	r1, #0
    7c02:	e007      	b.n	7c14 <__gethex+0x340>
    7c04:	20000a8c 	.word	0x20000a8c
    7c08:	20000798 	.word	0x20000798
    7c0c:	4298      	cmp	r0, r3
    7c0e:	f843 1c04 	str.w	r1, [r3, #-4]
    7c12:	d93f      	bls.n	7c94 <__gethex+0x3c0>
    7c14:	461e      	mov	r6, r3
    7c16:	f853 2b04 	ldr.w	r2, [r3], #4
    7c1a:	f1b2 3fff 	cmp.w	r2, #4294967295
    7c1e:	d0f5      	beq.n	7c0c <__gethex+0x338>
    7c20:	3201      	adds	r2, #1
    7c22:	2d02      	cmp	r5, #2
    7c24:	6032      	str	r2, [r6, #0]
    7c26:	f000 80bf 	beq.w	7da8 <__gethex+0x4d4>
    7c2a:	f014 041f 	ands.w	r4, r4, #31
    7c2e:	f040 80e7 	bne.w	7e00 <__gethex+0x52c>
    7c32:	2521      	movs	r5, #33	; 0x21
    7c34:	e77d      	b.n	7b32 <__gethex+0x25e>
    7c36:	07ba      	lsls	r2, r7, #30
    7c38:	f57f af79 	bpl.w	7b2e <__gethex+0x25a>
    7c3c:	9b01      	ldr	r3, [sp, #4]
    7c3e:	681b      	ldr	r3, [r3, #0]
    7c40:	431f      	orrs	r7, r3
    7c42:	07fb      	lsls	r3, r7, #31
    7c44:	d4d3      	bmi.n	7bee <__gethex+0x31a>
    7c46:	e772      	b.n	7b2e <__gethex+0x25a>
    7c48:	2000      	movs	r0, #0
    7c4a:	e781      	b.n	7b50 <__gethex+0x27c>
    7c4c:	1a22      	subs	r2, r4, r0
    7c4e:	4659      	mov	r1, fp
    7c50:	ee18 0a10 	vmov	r0, s16
    7c54:	eba9 0902 	sub.w	r9, r9, r2
    7c58:	f000 fc76 	bl	8548 <__lshift>
    7c5c:	f100 0314 	add.w	r3, r0, #20
    7c60:	4683      	mov	fp, r0
    7c62:	9301      	str	r3, [sp, #4]
    7c64:	2700      	movs	r7, #0
    7c66:	e703      	b.n	7a70 <__gethex+0x19c>
    7c68:	7872      	ldrb	r2, [r6, #1]
    7c6a:	f818 0002 	ldrb.w	r0, [r8, r2]
    7c6e:	1c71      	adds	r1, r6, #1
    7c70:	2800      	cmp	r0, #0
    7c72:	f000 80a0 	beq.w	7db6 <__gethex+0x4e2>
    7c76:	460d      	mov	r5, r1
    7c78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7c7c:	f818 0002 	ldrb.w	r0, [r8, r2]
    7c80:	2800      	cmp	r0, #0
    7c82:	d1f8      	bne.n	7c76 <__gethex+0x3a2>
    7c84:	1b75      	subs	r5, r6, r5
    7c86:	ea4f 0985 	mov.w	r9, r5, lsl #2
    7c8a:	460e      	mov	r6, r1
    7c8c:	e65d      	b.n	794a <__gethex+0x76>
    7c8e:	3402      	adds	r4, #2
    7c90:	2300      	movs	r3, #0
    7c92:	e638      	b.n	7906 <__gethex+0x32>
    7c94:	f8db 3008 	ldr.w	r3, [fp, #8]
    7c98:	429f      	cmp	r7, r3
    7c9a:	f280 808e 	bge.w	7dba <__gethex+0x4e6>
    7c9e:	463b      	mov	r3, r7
    7ca0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    7ca4:	2101      	movs	r1, #1
    7ca6:	3301      	adds	r3, #1
    7ca8:	2d02      	cmp	r5, #2
    7caa:	f8cb 3010 	str.w	r3, [fp, #16]
    7cae:	6151      	str	r1, [r2, #20]
    7cb0:	d07a      	beq.n	7da8 <__gethex+0x4d4>
    7cb2:	429f      	cmp	r7, r3
    7cb4:	dab9      	bge.n	7c2a <__gethex+0x356>
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	f340 809b 	ble.w	7df2 <__gethex+0x51e>
    7cbc:	f8db 2014 	ldr.w	r2, [fp, #20]
    7cc0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    7cc4:	f10b 0018 	add.w	r0, fp, #24
    7cc8:	4283      	cmp	r3, r0
    7cca:	ea4f 0252 	mov.w	r2, r2, lsr #1
    7cce:	f240 80b1 	bls.w	7e34 <__gethex+0x560>
    7cd2:	4644      	mov	r4, r8
    7cd4:	6801      	ldr	r1, [r0, #0]
    7cd6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    7cda:	f844 2b04 	str.w	r2, [r4], #4
    7cde:	f850 2b04 	ldr.w	r2, [r0], #4
    7ce2:	4283      	cmp	r3, r0
    7ce4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    7ce8:	d8f4      	bhi.n	7cd4 <__gethex+0x400>
    7cea:	eba3 030b 	sub.w	r3, r3, fp
    7cee:	3b19      	subs	r3, #25
    7cf0:	089b      	lsrs	r3, r3, #2
    7cf2:	3301      	adds	r3, #1
    7cf4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    7cf8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    7cfc:	2a00      	cmp	r2, #0
    7cfe:	f040 809d 	bne.w	7e3c <__gethex+0x568>
    7d02:	eba3 0208 	sub.w	r2, r3, r8
    7d06:	1092      	asrs	r2, r2, #2
    7d08:	4543      	cmp	r3, r8
    7d0a:	f8cb 2010 	str.w	r2, [fp, #16]
    7d0e:	d073      	beq.n	7df8 <__gethex+0x524>
    7d10:	f8da 3008 	ldr.w	r3, [sl, #8]
    7d14:	f109 0901 	add.w	r9, r9, #1
    7d18:	454b      	cmp	r3, r9
    7d1a:	da8a      	bge.n	7c32 <__gethex+0x35e>
    7d1c:	ee18 0a10 	vmov	r0, s16
    7d20:	4659      	mov	r1, fp
    7d22:	f000 f9d1 	bl	80c8 <_Bfree>
    7d26:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7d28:	2300      	movs	r3, #0
    7d2a:	6013      	str	r3, [r2, #0]
    7d2c:	25a3      	movs	r5, #163	; 0xa3
    7d2e:	e683      	b.n	7a38 <__gethex+0x164>
    7d30:	9e01      	ldr	r6, [sp, #4]
    7d32:	2300      	movs	r3, #0
    7d34:	e689      	b.n	7a4a <__gethex+0x176>
    7d36:	2701      	movs	r7, #1
    7d38:	e732      	b.n	7ba0 <__gethex+0x2cc>
    7d3a:	4629      	mov	r1, r5
    7d3c:	4658      	mov	r0, fp
    7d3e:	f000 fea5 	bl	8a8c <__any_on>
    7d42:	4607      	mov	r7, r0
    7d44:	e72c      	b.n	7ba0 <__gethex+0x2cc>
    7d46:	1eb1      	subs	r1, r6, #2
    7d48:	4658      	mov	r0, fp
    7d4a:	f000 fe9f 	bl	8a8c <__any_on>
    7d4e:	2800      	cmp	r0, #0
    7d50:	f43f af17 	beq.w	7b82 <__gethex+0x2ae>
    7d54:	2703      	movs	r7, #3
    7d56:	e715      	b.n	7b84 <__gethex+0x2b0>
    7d58:	f04f 0900 	mov.w	r9, #0
    7d5c:	2701      	movs	r7, #1
    7d5e:	e64a      	b.n	79f6 <__gethex+0x122>
    7d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7d62:	2a00      	cmp	r2, #0
    7d64:	f47f ae9d 	bne.w	7aa2 <__gethex+0x1ce>
    7d68:	9902      	ldr	r1, [sp, #8]
    7d6a:	600b      	str	r3, [r1, #0]
    7d6c:	9b01      	ldr	r3, [sp, #4]
    7d6e:	2201      	movs	r2, #1
    7d70:	f8cb 2010 	str.w	r2, [fp, #16]
    7d74:	601a      	str	r2, [r3, #0]
    7d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7d78:	2562      	movs	r5, #98	; 0x62
    7d7a:	f8c3 b000 	str.w	fp, [r3]
    7d7e:	e65b      	b.n	7a38 <__gethex+0x164>
    7d80:	454c      	cmp	r4, r9
    7d82:	f47f ae8e 	bne.w	7aa2 <__gethex+0x1ce>
    7d86:	2c01      	cmp	r4, #1
    7d88:	d0ee      	beq.n	7d68 <__gethex+0x494>
    7d8a:	1e61      	subs	r1, r4, #1
    7d8c:	4658      	mov	r0, fp
    7d8e:	f000 fe7d 	bl	8a8c <__any_on>
    7d92:	2800      	cmp	r0, #0
    7d94:	f43f ae85 	beq.w	7aa2 <__gethex+0x1ce>
    7d98:	f8da 3004 	ldr.w	r3, [sl, #4]
    7d9c:	e7e4      	b.n	7d68 <__gethex+0x494>
    7d9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7da0:	2a00      	cmp	r2, #0
    7da2:	f43f ae7e 	beq.w	7aa2 <__gethex+0x1ce>
    7da6:	e7df      	b.n	7d68 <__gethex+0x494>
    7da8:	f8da 3000 	ldr.w	r3, [sl]
    7dac:	3b01      	subs	r3, #1
    7dae:	42a3      	cmp	r3, r4
    7db0:	d034      	beq.n	7e1c <__gethex+0x548>
    7db2:	2522      	movs	r5, #34	; 0x22
    7db4:	e6bd      	b.n	7b32 <__gethex+0x25e>
    7db6:	460e      	mov	r6, r1
    7db8:	e5c7      	b.n	794a <__gethex+0x76>
    7dba:	f8db 1004 	ldr.w	r1, [fp, #4]
    7dbe:	ee18 0a10 	vmov	r0, s16
    7dc2:	3101      	adds	r1, #1
    7dc4:	f000 f95a 	bl	807c <_Balloc>
    7dc8:	4606      	mov	r6, r0
    7dca:	b3c8      	cbz	r0, 7e40 <__gethex+0x56c>
    7dcc:	f8db 3010 	ldr.w	r3, [fp, #16]
    7dd0:	3302      	adds	r3, #2
    7dd2:	009a      	lsls	r2, r3, #2
    7dd4:	f10b 010c 	add.w	r1, fp, #12
    7dd8:	300c      	adds	r0, #12
    7dda:	f7fa fd29 	bl	2830 <memcpy>
    7dde:	4659      	mov	r1, fp
    7de0:	ee18 0a10 	vmov	r0, s16
    7de4:	f000 f970 	bl	80c8 <_Bfree>
    7de8:	f106 0814 	add.w	r8, r6, #20
    7dec:	6933      	ldr	r3, [r6, #16]
    7dee:	46b3      	mov	fp, r6
    7df0:	e756      	b.n	7ca0 <__gethex+0x3cc>
    7df2:	2300      	movs	r3, #0
    7df4:	f8cb 3010 	str.w	r3, [fp, #16]
    7df8:	2300      	movs	r3, #0
    7dfa:	f8cb 3014 	str.w	r3, [fp, #20]
    7dfe:	e787      	b.n	7d10 <__gethex+0x43c>
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	4443      	add	r3, r8
    7e04:	f1c4 0420 	rsb	r4, r4, #32
    7e08:	f853 0c04 	ldr.w	r0, [r3, #-4]
    7e0c:	f000 fa10 	bl	8230 <__hi0bits>
    7e10:	42a0      	cmp	r0, r4
    7e12:	f6bf af0e 	bge.w	7c32 <__gethex+0x35e>
    7e16:	f8db 3010 	ldr.w	r3, [fp, #16]
    7e1a:	e74c      	b.n	7cb6 <__gethex+0x3e2>
    7e1c:	1163      	asrs	r3, r4, #5
    7e1e:	f004 041f 	and.w	r4, r4, #31
    7e22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    7e26:	2301      	movs	r3, #1
    7e28:	40a3      	lsls	r3, r4
    7e2a:	4213      	tst	r3, r2
    7e2c:	bf0c      	ite	eq
    7e2e:	2522      	moveq	r5, #34	; 0x22
    7e30:	2521      	movne	r5, #33	; 0x21
    7e32:	e67e      	b.n	7b32 <__gethex+0x25e>
    7e34:	f8c8 2000 	str.w	r2, [r8]
    7e38:	4643      	mov	r3, r8
    7e3a:	b16a      	cbz	r2, 7e58 <__gethex+0x584>
    7e3c:	3304      	adds	r3, #4
    7e3e:	e760      	b.n	7d02 <__gethex+0x42e>
    7e40:	4b07      	ldr	r3, [pc, #28]	; (7e60 <__gethex+0x58c>)
    7e42:	4808      	ldr	r0, [pc, #32]	; (7e64 <__gethex+0x590>)
    7e44:	4632      	mov	r2, r6
    7e46:	2184      	movs	r1, #132	; 0x84
    7e48:	f001 f872 	bl	8f30 <__assert_func>
    7e4c:	4b04      	ldr	r3, [pc, #16]	; (7e60 <__gethex+0x58c>)
    7e4e:	4805      	ldr	r0, [pc, #20]	; (7e64 <__gethex+0x590>)
    7e50:	465a      	mov	r2, fp
    7e52:	21e4      	movs	r1, #228	; 0xe4
    7e54:	f001 f86c 	bl	8f30 <__assert_func>
    7e58:	f8cb 2010 	str.w	r2, [fp, #16]
    7e5c:	e7cc      	b.n	7df8 <__gethex+0x524>
    7e5e:	bf00      	nop
    7e60:	20000720 	.word	0x20000720
    7e64:	20000734 	.word	0x20000734

00007e68 <__match>:
    7e68:	b410      	push	{r4}
    7e6a:	6804      	ldr	r4, [r0, #0]
    7e6c:	e009      	b.n	7e82 <__match+0x1a>
    7e6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    7e72:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    7e76:	f1bc 0f19 	cmp.w	ip, #25
    7e7a:	bf98      	it	ls
    7e7c:	3320      	addls	r3, #32
    7e7e:	4293      	cmp	r3, r2
    7e80:	d109      	bne.n	7e96 <__match+0x2e>
    7e82:	f811 2b01 	ldrb.w	r2, [r1], #1
    7e86:	2a00      	cmp	r2, #0
    7e88:	d1f1      	bne.n	7e6e <__match+0x6>
    7e8a:	3401      	adds	r4, #1
    7e8c:	6004      	str	r4, [r0, #0]
    7e8e:	2001      	movs	r0, #1
    7e90:	f85d 4b04 	ldr.w	r4, [sp], #4
    7e94:	4770      	bx	lr
    7e96:	2000      	movs	r0, #0
    7e98:	f85d 4b04 	ldr.w	r4, [sp], #4
    7e9c:	4770      	bx	lr
    7e9e:	bf00      	nop

00007ea0 <__hexnan>:
    7ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ea4:	6809      	ldr	r1, [r1, #0]
    7ea6:	b085      	sub	sp, #20
    7ea8:	114b      	asrs	r3, r1, #5
    7eaa:	f011 011f 	ands.w	r1, r1, #31
    7eae:	9002      	str	r0, [sp, #8]
    7eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7eb4:	9103      	str	r1, [sp, #12]
    7eb6:	f040 808f 	bne.w	7fd8 <__hexnan+0x138>
    7eba:	1f1d      	subs	r5, r3, #4
    7ebc:	9301      	str	r3, [sp, #4]
    7ebe:	9b02      	ldr	r3, [sp, #8]
    7ec0:	9901      	ldr	r1, [sp, #4]
    7ec2:	681c      	ldr	r4, [r3, #0]
    7ec4:	2300      	movs	r3, #0
    7ec6:	f841 3c04 	str.w	r3, [r1, #-4]
    7eca:	7861      	ldrb	r1, [r4, #1]
    7ecc:	3401      	adds	r4, #1
    7ece:	2900      	cmp	r1, #0
    7ed0:	f000 8098 	beq.w	8004 <__hexnan+0x164>
    7ed4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 804c <__hexnan+0x1ac>
    7ed8:	46a8      	mov	r8, r5
    7eda:	46ac      	mov	ip, r5
    7edc:	469a      	mov	sl, r3
    7ede:	461e      	mov	r6, r3
    7ee0:	e00e      	b.n	7f00 <__hexnan+0x60>
    7ee2:	2920      	cmp	r1, #32
    7ee4:	f200 808c 	bhi.w	8000 <__hexnan+0x160>
    7ee8:	4556      	cmp	r6, sl
    7eea:	dd06      	ble.n	7efa <__hexnan+0x5a>
    7eec:	45c4      	cmp	ip, r8
    7eee:	d201      	bcs.n	7ef4 <__hexnan+0x54>
    7ef0:	2b07      	cmp	r3, #7
    7ef2:	dd5b      	ble.n	7fac <__hexnan+0x10c>
    7ef4:	4562      	cmp	r2, ip
    7ef6:	d351      	bcc.n	7f9c <__hexnan+0xfc>
    7ef8:	2308      	movs	r3, #8
    7efa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    7efe:	b1a1      	cbz	r1, 7f2a <__hexnan+0x8a>
    7f00:	f819 0001 	ldrb.w	r0, [r9, r1]
    7f04:	2800      	cmp	r0, #0
    7f06:	d0ec      	beq.n	7ee2 <__hexnan+0x42>
    7f08:	3301      	adds	r3, #1
    7f0a:	2b08      	cmp	r3, #8
    7f0c:	f106 0601 	add.w	r6, r6, #1
    7f10:	dc3a      	bgt.n	7f88 <__hexnan+0xe8>
    7f12:	f8dc 1000 	ldr.w	r1, [ip]
    7f16:	0109      	lsls	r1, r1, #4
    7f18:	f000 000f 	and.w	r0, r0, #15
    7f1c:	4308      	orrs	r0, r1
    7f1e:	f8cc 0000 	str.w	r0, [ip]
    7f22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    7f26:	2900      	cmp	r1, #0
    7f28:	d1ea      	bne.n	7f00 <__hexnan+0x60>
    7f2a:	2e00      	cmp	r6, #0
    7f2c:	d06a      	beq.n	8004 <__hexnan+0x164>
    7f2e:	45c4      	cmp	ip, r8
    7f30:	d201      	bcs.n	7f36 <__hexnan+0x96>
    7f32:	2b07      	cmp	r3, #7
    7f34:	dd74      	ble.n	8020 <__hexnan+0x180>
    7f36:	4562      	cmp	r2, ip
    7f38:	d252      	bcs.n	7fe0 <__hexnan+0x140>
    7f3a:	1f11      	subs	r1, r2, #4
    7f3c:	4663      	mov	r3, ip
    7f3e:	f853 0b04 	ldr.w	r0, [r3], #4
    7f42:	f841 0f04 	str.w	r0, [r1, #4]!
    7f46:	42ab      	cmp	r3, r5
    7f48:	d9f9      	bls.n	7f3e <__hexnan+0x9e>
    7f4a:	eba5 030c 	sub.w	r3, r5, ip
    7f4e:	f023 0303 	bic.w	r3, r3, #3
    7f52:	1c69      	adds	r1, r5, #1
    7f54:	3304      	adds	r3, #4
    7f56:	f10c 0c01 	add.w	ip, ip, #1
    7f5a:	4561      	cmp	r1, ip
    7f5c:	bf38      	it	cc
    7f5e:	2304      	movcc	r3, #4
    7f60:	4413      	add	r3, r2
    7f62:	2100      	movs	r1, #0
    7f64:	f843 1b04 	str.w	r1, [r3], #4
    7f68:	42ab      	cmp	r3, r5
    7f6a:	d9fb      	bls.n	7f64 <__hexnan+0xc4>
    7f6c:	9b01      	ldr	r3, [sp, #4]
    7f6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7f72:	b92b      	cbnz	r3, 7f80 <__hexnan+0xe0>
    7f74:	42aa      	cmp	r2, r5
    7f76:	d049      	beq.n	800c <__hexnan+0x16c>
    7f78:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    7f7c:	2b00      	cmp	r3, #0
    7f7e:	d0f9      	beq.n	7f74 <__hexnan+0xd4>
    7f80:	2005      	movs	r0, #5
    7f82:	b005      	add	sp, #20
    7f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f88:	4562      	cmp	r2, ip
    7f8a:	d2b6      	bcs.n	7efa <__hexnan+0x5a>
    7f8c:	2300      	movs	r3, #0
    7f8e:	f84c 3c04 	str.w	r3, [ip, #-4]
    7f92:	4619      	mov	r1, r3
    7f94:	f1ac 0c04 	sub.w	ip, ip, #4
    7f98:	2301      	movs	r3, #1
    7f9a:	e7bd      	b.n	7f18 <__hexnan+0x78>
    7f9c:	2300      	movs	r3, #0
    7f9e:	f1ac 0804 	sub.w	r8, ip, #4
    7fa2:	f84c 3c04 	str.w	r3, [ip, #-4]
    7fa6:	46b2      	mov	sl, r6
    7fa8:	46c4      	mov	ip, r8
    7faa:	e7a6      	b.n	7efa <__hexnan+0x5a>
    7fac:	f1c3 0108 	rsb	r1, r3, #8
    7fb0:	f8dc 3000 	ldr.w	r3, [ip]
    7fb4:	0089      	lsls	r1, r1, #2
    7fb6:	f1c1 0e20 	rsb	lr, r1, #32
    7fba:	4660      	mov	r0, ip
    7fbc:	469b      	mov	fp, r3
    7fbe:	6847      	ldr	r7, [r0, #4]
    7fc0:	fa07 f30e 	lsl.w	r3, r7, lr
    7fc4:	ea43 030b 	orr.w	r3, r3, fp
    7fc8:	fa27 fb01 	lsr.w	fp, r7, r1
    7fcc:	6003      	str	r3, [r0, #0]
    7fce:	f840 bf04 	str.w	fp, [r0, #4]!
    7fd2:	4540      	cmp	r0, r8
    7fd4:	d3f3      	bcc.n	7fbe <__hexnan+0x11e>
    7fd6:	e78d      	b.n	7ef4 <__hexnan+0x54>
    7fd8:	1d19      	adds	r1, r3, #4
    7fda:	9101      	str	r1, [sp, #4]
    7fdc:	461d      	mov	r5, r3
    7fde:	e76e      	b.n	7ebe <__hexnan+0x1e>
    7fe0:	9b03      	ldr	r3, [sp, #12]
    7fe2:	2b00      	cmp	r3, #0
    7fe4:	d0c2      	beq.n	7f6c <__hexnan+0xcc>
    7fe6:	9b03      	ldr	r3, [sp, #12]
    7fe8:	9801      	ldr	r0, [sp, #4]
    7fea:	f1c3 0120 	rsb	r1, r3, #32
    7fee:	f04f 33ff 	mov.w	r3, #4294967295
    7ff2:	40cb      	lsrs	r3, r1
    7ff4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    7ff8:	400b      	ands	r3, r1
    7ffa:	f840 3c04 	str.w	r3, [r0, #-4]
    7ffe:	e7b8      	b.n	7f72 <__hexnan+0xd2>
    8000:	2929      	cmp	r1, #41	; 0x29
    8002:	d009      	beq.n	8018 <__hexnan+0x178>
    8004:	2004      	movs	r0, #4
    8006:	b005      	add	sp, #20
    8008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    800c:	2301      	movs	r3, #1
    800e:	2005      	movs	r0, #5
    8010:	602b      	str	r3, [r5, #0]
    8012:	b005      	add	sp, #20
    8014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8018:	9902      	ldr	r1, [sp, #8]
    801a:	3401      	adds	r4, #1
    801c:	600c      	str	r4, [r1, #0]
    801e:	e784      	b.n	7f2a <__hexnan+0x8a>
    8020:	f8dc 1000 	ldr.w	r1, [ip]
    8024:	f1c3 0308 	rsb	r3, r3, #8
    8028:	009b      	lsls	r3, r3, #2
    802a:	f1c3 0720 	rsb	r7, r3, #32
    802e:	4664      	mov	r4, ip
    8030:	4608      	mov	r0, r1
    8032:	6866      	ldr	r6, [r4, #4]
    8034:	fa06 f107 	lsl.w	r1, r6, r7
    8038:	4301      	orrs	r1, r0
    803a:	fa26 f003 	lsr.w	r0, r6, r3
    803e:	6021      	str	r1, [r4, #0]
    8040:	f844 0f04 	str.w	r0, [r4, #4]!
    8044:	4544      	cmp	r4, r8
    8046:	d3f4      	bcc.n	8032 <__hexnan+0x192>
    8048:	e775      	b.n	7f36 <__hexnan+0x96>
    804a:	bf00      	nop
    804c:	20000798 	.word	0x20000798

00008050 <__ascii_mbtowc>:
    8050:	b082      	sub	sp, #8
    8052:	b149      	cbz	r1, 8068 <__ascii_mbtowc+0x18>
    8054:	b15a      	cbz	r2, 806e <__ascii_mbtowc+0x1e>
    8056:	b16b      	cbz	r3, 8074 <__ascii_mbtowc+0x24>
    8058:	7813      	ldrb	r3, [r2, #0]
    805a:	600b      	str	r3, [r1, #0]
    805c:	7812      	ldrb	r2, [r2, #0]
    805e:	1e10      	subs	r0, r2, #0
    8060:	bf18      	it	ne
    8062:	2001      	movne	r0, #1
    8064:	b002      	add	sp, #8
    8066:	4770      	bx	lr
    8068:	a901      	add	r1, sp, #4
    806a:	2a00      	cmp	r2, #0
    806c:	d1f3      	bne.n	8056 <__ascii_mbtowc+0x6>
    806e:	4610      	mov	r0, r2
    8070:	b002      	add	sp, #8
    8072:	4770      	bx	lr
    8074:	f06f 0001 	mvn.w	r0, #1
    8078:	e7f4      	b.n	8064 <__ascii_mbtowc+0x14>
    807a:	bf00      	nop

0000807c <_Balloc>:
    807c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    807e:	b570      	push	{r4, r5, r6, lr}
    8080:	4605      	mov	r5, r0
    8082:	460c      	mov	r4, r1
    8084:	b14b      	cbz	r3, 809a <_Balloc+0x1e>
    8086:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    808a:	b180      	cbz	r0, 80ae <_Balloc+0x32>
    808c:	6802      	ldr	r2, [r0, #0]
    808e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    8092:	2300      	movs	r3, #0
    8094:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8098:	bd70      	pop	{r4, r5, r6, pc}
    809a:	2221      	movs	r2, #33	; 0x21
    809c:	2104      	movs	r1, #4
    809e:	f000 ff67 	bl	8f70 <_calloc_r>
    80a2:	4603      	mov	r3, r0
    80a4:	6468      	str	r0, [r5, #68]	; 0x44
    80a6:	2800      	cmp	r0, #0
    80a8:	d1ed      	bne.n	8086 <_Balloc+0xa>
    80aa:	2000      	movs	r0, #0
    80ac:	bd70      	pop	{r4, r5, r6, pc}
    80ae:	2101      	movs	r1, #1
    80b0:	fa01 f604 	lsl.w	r6, r1, r4
    80b4:	1d72      	adds	r2, r6, #5
    80b6:	0092      	lsls	r2, r2, #2
    80b8:	4628      	mov	r0, r5
    80ba:	f000 ff59 	bl	8f70 <_calloc_r>
    80be:	2800      	cmp	r0, #0
    80c0:	d0f3      	beq.n	80aa <_Balloc+0x2e>
    80c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    80c6:	e7e4      	b.n	8092 <_Balloc+0x16>

000080c8 <_Bfree>:
    80c8:	b131      	cbz	r1, 80d8 <_Bfree+0x10>
    80ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    80cc:	684a      	ldr	r2, [r1, #4]
    80ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    80d2:	6008      	str	r0, [r1, #0]
    80d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    80d8:	4770      	bx	lr
    80da:	bf00      	nop

000080dc <__multadd>:
    80dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e0:	690e      	ldr	r6, [r1, #16]
    80e2:	4680      	mov	r8, r0
    80e4:	460f      	mov	r7, r1
    80e6:	461d      	mov	r5, r3
    80e8:	f101 0e14 	add.w	lr, r1, #20
    80ec:	2000      	movs	r0, #0
    80ee:	f8de 1000 	ldr.w	r1, [lr]
    80f2:	b28c      	uxth	r4, r1
    80f4:	fb02 5304 	mla	r3, r2, r4, r5
    80f8:	0c09      	lsrs	r1, r1, #16
    80fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    80fe:	fb02 cc01 	mla	ip, r2, r1, ip
    8102:	3001      	adds	r0, #1
    8104:	b29c      	uxth	r4, r3
    8106:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    810a:	4286      	cmp	r6, r0
    810c:	f84e 4b04 	str.w	r4, [lr], #4
    8110:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8114:	dceb      	bgt.n	80ee <__multadd+0x12>
    8116:	b13d      	cbz	r5, 8128 <__multadd+0x4c>
    8118:	68bb      	ldr	r3, [r7, #8]
    811a:	42b3      	cmp	r3, r6
    811c:	dd07      	ble.n	812e <__multadd+0x52>
    811e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8122:	3601      	adds	r6, #1
    8124:	615d      	str	r5, [r3, #20]
    8126:	613e      	str	r6, [r7, #16]
    8128:	4638      	mov	r0, r7
    812a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    812e:	6879      	ldr	r1, [r7, #4]
    8130:	4640      	mov	r0, r8
    8132:	3101      	adds	r1, #1
    8134:	f7ff ffa2 	bl	807c <_Balloc>
    8138:	4604      	mov	r4, r0
    813a:	b1b0      	cbz	r0, 816a <__multadd+0x8e>
    813c:	693a      	ldr	r2, [r7, #16]
    813e:	3202      	adds	r2, #2
    8140:	f107 010c 	add.w	r1, r7, #12
    8144:	0092      	lsls	r2, r2, #2
    8146:	300c      	adds	r0, #12
    8148:	f7fa fb72 	bl	2830 <memcpy>
    814c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    8150:	687a      	ldr	r2, [r7, #4]
    8152:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8156:	6039      	str	r1, [r7, #0]
    8158:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    815c:	4627      	mov	r7, r4
    815e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8162:	3601      	adds	r6, #1
    8164:	615d      	str	r5, [r3, #20]
    8166:	613e      	str	r6, [r7, #16]
    8168:	e7de      	b.n	8128 <__multadd+0x4c>
    816a:	4b03      	ldr	r3, [pc, #12]	; (8178 <__multadd+0x9c>)
    816c:	4803      	ldr	r0, [pc, #12]	; (817c <__multadd+0xa0>)
    816e:	4622      	mov	r2, r4
    8170:	21ba      	movs	r1, #186	; 0xba
    8172:	f000 fedd 	bl	8f30 <__assert_func>
    8176:	bf00      	nop
    8178:	20000720 	.word	0x20000720
    817c:	20000898 	.word	0x20000898

00008180 <__s2b>:
    8180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8184:	4617      	mov	r7, r2
    8186:	4a27      	ldr	r2, [pc, #156]	; (8224 <__s2b+0xa4>)
    8188:	461e      	mov	r6, r3
    818a:	3308      	adds	r3, #8
    818c:	460c      	mov	r4, r1
    818e:	2e09      	cmp	r6, #9
    8190:	fb82 1203 	smull	r1, r2, r2, r3
    8194:	ea4f 73e3 	mov.w	r3, r3, asr #31
    8198:	4605      	mov	r5, r0
    819a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    819e:	dd39      	ble.n	8214 <__s2b+0x94>
    81a0:	f04f 0c01 	mov.w	ip, #1
    81a4:	2100      	movs	r1, #0
    81a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    81aa:	4563      	cmp	r3, ip
    81ac:	f101 0101 	add.w	r1, r1, #1
    81b0:	dcf9      	bgt.n	81a6 <__s2b+0x26>
    81b2:	4628      	mov	r0, r5
    81b4:	f7ff ff62 	bl	807c <_Balloc>
    81b8:	4601      	mov	r1, r0
    81ba:	b368      	cbz	r0, 8218 <__s2b+0x98>
    81bc:	9b08      	ldr	r3, [sp, #32]
    81be:	6143      	str	r3, [r0, #20]
    81c0:	2f09      	cmp	r7, #9
    81c2:	f04f 0301 	mov.w	r3, #1
    81c6:	6103      	str	r3, [r0, #16]
    81c8:	dc12      	bgt.n	81f0 <__s2b+0x70>
    81ca:	340a      	adds	r4, #10
    81cc:	2709      	movs	r7, #9
    81ce:	42be      	cmp	r6, r7
    81d0:	dd0b      	ble.n	81ea <__s2b+0x6a>
    81d2:	1bf2      	subs	r2, r6, r7
    81d4:	18a6      	adds	r6, r4, r2
    81d6:	f814 3b01 	ldrb.w	r3, [r4], #1
    81da:	220a      	movs	r2, #10
    81dc:	3b30      	subs	r3, #48	; 0x30
    81de:	4628      	mov	r0, r5
    81e0:	f7ff ff7c 	bl	80dc <__multadd>
    81e4:	42a6      	cmp	r6, r4
    81e6:	4601      	mov	r1, r0
    81e8:	d1f5      	bne.n	81d6 <__s2b+0x56>
    81ea:	4608      	mov	r0, r1
    81ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    81f0:	f104 0909 	add.w	r9, r4, #9
    81f4:	46c8      	mov	r8, r9
    81f6:	443c      	add	r4, r7
    81f8:	f818 3b01 	ldrb.w	r3, [r8], #1
    81fc:	220a      	movs	r2, #10
    81fe:	3b30      	subs	r3, #48	; 0x30
    8200:	4628      	mov	r0, r5
    8202:	f7ff ff6b 	bl	80dc <__multadd>
    8206:	45a0      	cmp	r8, r4
    8208:	4601      	mov	r1, r0
    820a:	d1f5      	bne.n	81f8 <__s2b+0x78>
    820c:	f1a7 0408 	sub.w	r4, r7, #8
    8210:	444c      	add	r4, r9
    8212:	e7dc      	b.n	81ce <__s2b+0x4e>
    8214:	2100      	movs	r1, #0
    8216:	e7cc      	b.n	81b2 <__s2b+0x32>
    8218:	460a      	mov	r2, r1
    821a:	4b03      	ldr	r3, [pc, #12]	; (8228 <__s2b+0xa8>)
    821c:	4803      	ldr	r0, [pc, #12]	; (822c <__s2b+0xac>)
    821e:	21d3      	movs	r1, #211	; 0xd3
    8220:	f000 fe86 	bl	8f30 <__assert_func>
    8224:	38e38e39 	.word	0x38e38e39
    8228:	20000720 	.word	0x20000720
    822c:	20000898 	.word	0x20000898

00008230 <__hi0bits>:
    8230:	0c03      	lsrs	r3, r0, #16
    8232:	041b      	lsls	r3, r3, #16
    8234:	b9d3      	cbnz	r3, 826c <__hi0bits+0x3c>
    8236:	0400      	lsls	r0, r0, #16
    8238:	2310      	movs	r3, #16
    823a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    823e:	bf04      	itt	eq
    8240:	0200      	lsleq	r0, r0, #8
    8242:	3308      	addeq	r3, #8
    8244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    8248:	bf04      	itt	eq
    824a:	0100      	lsleq	r0, r0, #4
    824c:	3304      	addeq	r3, #4
    824e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    8252:	bf04      	itt	eq
    8254:	0080      	lsleq	r0, r0, #2
    8256:	3302      	addeq	r3, #2
    8258:	2800      	cmp	r0, #0
    825a:	db05      	blt.n	8268 <__hi0bits+0x38>
    825c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    8260:	f103 0301 	add.w	r3, r3, #1
    8264:	bf08      	it	eq
    8266:	2320      	moveq	r3, #32
    8268:	4618      	mov	r0, r3
    826a:	4770      	bx	lr
    826c:	2300      	movs	r3, #0
    826e:	e7e4      	b.n	823a <__hi0bits+0xa>

00008270 <__lo0bits>:
    8270:	6803      	ldr	r3, [r0, #0]
    8272:	f013 0207 	ands.w	r2, r3, #7
    8276:	d008      	beq.n	828a <__lo0bits+0x1a>
    8278:	07d9      	lsls	r1, r3, #31
    827a:	d41f      	bmi.n	82bc <__lo0bits+0x4c>
    827c:	079a      	lsls	r2, r3, #30
    827e:	d522      	bpl.n	82c6 <__lo0bits+0x56>
    8280:	085b      	lsrs	r3, r3, #1
    8282:	6003      	str	r3, [r0, #0]
    8284:	2201      	movs	r2, #1
    8286:	4610      	mov	r0, r2
    8288:	4770      	bx	lr
    828a:	b299      	uxth	r1, r3
    828c:	b909      	cbnz	r1, 8292 <__lo0bits+0x22>
    828e:	0c1b      	lsrs	r3, r3, #16
    8290:	2210      	movs	r2, #16
    8292:	b2d9      	uxtb	r1, r3
    8294:	b909      	cbnz	r1, 829a <__lo0bits+0x2a>
    8296:	3208      	adds	r2, #8
    8298:	0a1b      	lsrs	r3, r3, #8
    829a:	0719      	lsls	r1, r3, #28
    829c:	bf04      	itt	eq
    829e:	091b      	lsreq	r3, r3, #4
    82a0:	3204      	addeq	r2, #4
    82a2:	0799      	lsls	r1, r3, #30
    82a4:	bf04      	itt	eq
    82a6:	089b      	lsreq	r3, r3, #2
    82a8:	3202      	addeq	r2, #2
    82aa:	07d9      	lsls	r1, r3, #31
    82ac:	d403      	bmi.n	82b6 <__lo0bits+0x46>
    82ae:	085b      	lsrs	r3, r3, #1
    82b0:	f102 0201 	add.w	r2, r2, #1
    82b4:	d005      	beq.n	82c2 <__lo0bits+0x52>
    82b6:	6003      	str	r3, [r0, #0]
    82b8:	4610      	mov	r0, r2
    82ba:	4770      	bx	lr
    82bc:	2200      	movs	r2, #0
    82be:	4610      	mov	r0, r2
    82c0:	4770      	bx	lr
    82c2:	2220      	movs	r2, #32
    82c4:	e7df      	b.n	8286 <__lo0bits+0x16>
    82c6:	089b      	lsrs	r3, r3, #2
    82c8:	2202      	movs	r2, #2
    82ca:	6003      	str	r3, [r0, #0]
    82cc:	4610      	mov	r0, r2
    82ce:	4770      	bx	lr

000082d0 <__i2b>:
    82d0:	b538      	push	{r3, r4, r5, lr}
    82d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    82d4:	4604      	mov	r4, r0
    82d6:	460d      	mov	r5, r1
    82d8:	b14b      	cbz	r3, 82ee <__i2b+0x1e>
    82da:	6858      	ldr	r0, [r3, #4]
    82dc:	b1b0      	cbz	r0, 830c <__i2b+0x3c>
    82de:	6802      	ldr	r2, [r0, #0]
    82e0:	605a      	str	r2, [r3, #4]
    82e2:	2200      	movs	r2, #0
    82e4:	2301      	movs	r3, #1
    82e6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    82ea:	60c2      	str	r2, [r0, #12]
    82ec:	bd38      	pop	{r3, r4, r5, pc}
    82ee:	2221      	movs	r2, #33	; 0x21
    82f0:	2104      	movs	r1, #4
    82f2:	f000 fe3d 	bl	8f70 <_calloc_r>
    82f6:	4603      	mov	r3, r0
    82f8:	6460      	str	r0, [r4, #68]	; 0x44
    82fa:	2800      	cmp	r0, #0
    82fc:	d1ed      	bne.n	82da <__i2b+0xa>
    82fe:	4b09      	ldr	r3, [pc, #36]	; (8324 <__i2b+0x54>)
    8300:	4809      	ldr	r0, [pc, #36]	; (8328 <__i2b+0x58>)
    8302:	2200      	movs	r2, #0
    8304:	f240 1145 	movw	r1, #325	; 0x145
    8308:	f000 fe12 	bl	8f30 <__assert_func>
    830c:	221c      	movs	r2, #28
    830e:	2101      	movs	r1, #1
    8310:	4620      	mov	r0, r4
    8312:	f000 fe2d 	bl	8f70 <_calloc_r>
    8316:	2800      	cmp	r0, #0
    8318:	d0f1      	beq.n	82fe <__i2b+0x2e>
    831a:	2201      	movs	r2, #1
    831c:	2302      	movs	r3, #2
    831e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    8322:	e7de      	b.n	82e2 <__i2b+0x12>
    8324:	20000720 	.word	0x20000720
    8328:	20000898 	.word	0x20000898

0000832c <__multiply>:
    832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8330:	690e      	ldr	r6, [r1, #16]
    8332:	6915      	ldr	r5, [r2, #16]
    8334:	42ae      	cmp	r6, r5
    8336:	b085      	sub	sp, #20
    8338:	4688      	mov	r8, r1
    833a:	4614      	mov	r4, r2
    833c:	db05      	blt.n	834a <__multiply+0x1e>
    833e:	462a      	mov	r2, r5
    8340:	4623      	mov	r3, r4
    8342:	4635      	mov	r5, r6
    8344:	460c      	mov	r4, r1
    8346:	4616      	mov	r6, r2
    8348:	4698      	mov	r8, r3
    834a:	68a3      	ldr	r3, [r4, #8]
    834c:	6861      	ldr	r1, [r4, #4]
    834e:	19af      	adds	r7, r5, r6
    8350:	42bb      	cmp	r3, r7
    8352:	bfb8      	it	lt
    8354:	3101      	addlt	r1, #1
    8356:	f7ff fe91 	bl	807c <_Balloc>
    835a:	9001      	str	r0, [sp, #4]
    835c:	2800      	cmp	r0, #0
    835e:	f000 8087 	beq.w	8470 <__multiply+0x144>
    8362:	9b01      	ldr	r3, [sp, #4]
    8364:	f103 0914 	add.w	r9, r3, #20
    8368:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    836c:	45d1      	cmp	r9, sl
    836e:	d205      	bcs.n	837c <__multiply+0x50>
    8370:	464b      	mov	r3, r9
    8372:	2200      	movs	r2, #0
    8374:	f843 2b04 	str.w	r2, [r3], #4
    8378:	459a      	cmp	sl, r3
    837a:	d8fb      	bhi.n	8374 <__multiply+0x48>
    837c:	f108 0814 	add.w	r8, r8, #20
    8380:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    8384:	f104 0314 	add.w	r3, r4, #20
    8388:	45d8      	cmp	r8, fp
    838a:	461a      	mov	r2, r3
    838c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8390:	d25f      	bcs.n	8452 <__multiply+0x126>
    8392:	1b2b      	subs	r3, r5, r4
    8394:	3b15      	subs	r3, #21
    8396:	f023 0303 	bic.w	r3, r3, #3
    839a:	3304      	adds	r3, #4
    839c:	3415      	adds	r4, #21
    839e:	42a5      	cmp	r5, r4
    83a0:	bf38      	it	cc
    83a2:	2304      	movcc	r3, #4
    83a4:	e9cd a702 	strd	sl, r7, [sp, #8]
    83a8:	46ac      	mov	ip, r5
    83aa:	461f      	mov	r7, r3
    83ac:	4692      	mov	sl, r2
    83ae:	e005      	b.n	83bc <__multiply+0x90>
    83b0:	0c09      	lsrs	r1, r1, #16
    83b2:	d129      	bne.n	8408 <__multiply+0xdc>
    83b4:	45c3      	cmp	fp, r8
    83b6:	f109 0904 	add.w	r9, r9, #4
    83ba:	d948      	bls.n	844e <__multiply+0x122>
    83bc:	f858 1b04 	ldr.w	r1, [r8], #4
    83c0:	b28d      	uxth	r5, r1
    83c2:	2d00      	cmp	r5, #0
    83c4:	d0f4      	beq.n	83b0 <__multiply+0x84>
    83c6:	4656      	mov	r6, sl
    83c8:	464c      	mov	r4, r9
    83ca:	2300      	movs	r3, #0
    83cc:	f856 1b04 	ldr.w	r1, [r6], #4
    83d0:	6822      	ldr	r2, [r4, #0]
    83d2:	fa1f fe81 	uxth.w	lr, r1
    83d6:	b290      	uxth	r0, r2
    83d8:	0c09      	lsrs	r1, r1, #16
    83da:	fb05 000e 	mla	r0, r5, lr, r0
    83de:	0c12      	lsrs	r2, r2, #16
    83e0:	4403      	add	r3, r0
    83e2:	fb05 2201 	mla	r2, r5, r1, r2
    83e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    83ea:	b29b      	uxth	r3, r3
    83ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    83f0:	45b4      	cmp	ip, r6
    83f2:	f844 3b04 	str.w	r3, [r4], #4
    83f6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    83fa:	d8e7      	bhi.n	83cc <__multiply+0xa0>
    83fc:	f849 3007 	str.w	r3, [r9, r7]
    8400:	f858 1c04 	ldr.w	r1, [r8, #-4]
    8404:	0c09      	lsrs	r1, r1, #16
    8406:	d0d5      	beq.n	83b4 <__multiply+0x88>
    8408:	f8d9 3000 	ldr.w	r3, [r9]
    840c:	4650      	mov	r0, sl
    840e:	461a      	mov	r2, r3
    8410:	464c      	mov	r4, r9
    8412:	2600      	movs	r6, #0
    8414:	8805      	ldrh	r5, [r0, #0]
    8416:	0c12      	lsrs	r2, r2, #16
    8418:	fb01 2205 	mla	r2, r1, r5, r2
    841c:	4416      	add	r6, r2
    841e:	b29b      	uxth	r3, r3
    8420:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    8424:	f844 3b04 	str.w	r3, [r4], #4
    8428:	f850 5b04 	ldr.w	r5, [r0], #4
    842c:	6822      	ldr	r2, [r4, #0]
    842e:	0c2d      	lsrs	r5, r5, #16
    8430:	b293      	uxth	r3, r2
    8432:	fb01 3305 	mla	r3, r1, r5, r3
    8436:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    843a:	4584      	cmp	ip, r0
    843c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    8440:	d8e8      	bhi.n	8414 <__multiply+0xe8>
    8442:	45c3      	cmp	fp, r8
    8444:	f849 3007 	str.w	r3, [r9, r7]
    8448:	f109 0904 	add.w	r9, r9, #4
    844c:	d8b6      	bhi.n	83bc <__multiply+0x90>
    844e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    8452:	2f00      	cmp	r7, #0
    8454:	dc02      	bgt.n	845c <__multiply+0x130>
    8456:	e005      	b.n	8464 <__multiply+0x138>
    8458:	3f01      	subs	r7, #1
    845a:	d003      	beq.n	8464 <__multiply+0x138>
    845c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    8460:	2b00      	cmp	r3, #0
    8462:	d0f9      	beq.n	8458 <__multiply+0x12c>
    8464:	9b01      	ldr	r3, [sp, #4]
    8466:	4618      	mov	r0, r3
    8468:	611f      	str	r7, [r3, #16]
    846a:	b005      	add	sp, #20
    846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8470:	4b03      	ldr	r3, [pc, #12]	; (8480 <__multiply+0x154>)
    8472:	4804      	ldr	r0, [pc, #16]	; (8484 <__multiply+0x158>)
    8474:	9a01      	ldr	r2, [sp, #4]
    8476:	f44f 71b1 	mov.w	r1, #354	; 0x162
    847a:	f000 fd59 	bl	8f30 <__assert_func>
    847e:	bf00      	nop
    8480:	20000720 	.word	0x20000720
    8484:	20000898 	.word	0x20000898

00008488 <__pow5mult>:
    8488:	f012 0303 	ands.w	r3, r2, #3
    848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8490:	4614      	mov	r4, r2
    8492:	4606      	mov	r6, r0
    8494:	d132      	bne.n	84fc <__pow5mult+0x74>
    8496:	460d      	mov	r5, r1
    8498:	10a4      	asrs	r4, r4, #2
    849a:	d020      	beq.n	84de <__pow5mult+0x56>
    849c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    84a0:	f1b8 0f00 	cmp.w	r8, #0
    84a4:	d033      	beq.n	850e <__pow5mult+0x86>
    84a6:	07e3      	lsls	r3, r4, #31
    84a8:	f04f 0700 	mov.w	r7, #0
    84ac:	d407      	bmi.n	84be <__pow5mult+0x36>
    84ae:	1064      	asrs	r4, r4, #1
    84b0:	d015      	beq.n	84de <__pow5mult+0x56>
    84b2:	f8d8 0000 	ldr.w	r0, [r8]
    84b6:	b1a8      	cbz	r0, 84e4 <__pow5mult+0x5c>
    84b8:	4680      	mov	r8, r0
    84ba:	07e3      	lsls	r3, r4, #31
    84bc:	d5f7      	bpl.n	84ae <__pow5mult+0x26>
    84be:	4642      	mov	r2, r8
    84c0:	4629      	mov	r1, r5
    84c2:	4630      	mov	r0, r6
    84c4:	f7ff ff32 	bl	832c <__multiply>
    84c8:	b1b5      	cbz	r5, 84f8 <__pow5mult+0x70>
    84ca:	6869      	ldr	r1, [r5, #4]
    84cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    84ce:	1064      	asrs	r4, r4, #1
    84d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    84d4:	602a      	str	r2, [r5, #0]
    84d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    84da:	4605      	mov	r5, r0
    84dc:	d1e9      	bne.n	84b2 <__pow5mult+0x2a>
    84de:	4628      	mov	r0, r5
    84e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84e4:	4642      	mov	r2, r8
    84e6:	4641      	mov	r1, r8
    84e8:	4630      	mov	r0, r6
    84ea:	f7ff ff1f 	bl	832c <__multiply>
    84ee:	f8c8 0000 	str.w	r0, [r8]
    84f2:	6007      	str	r7, [r0, #0]
    84f4:	4680      	mov	r8, r0
    84f6:	e7e0      	b.n	84ba <__pow5mult+0x32>
    84f8:	4605      	mov	r5, r0
    84fa:	e7d8      	b.n	84ae <__pow5mult+0x26>
    84fc:	3b01      	subs	r3, #1
    84fe:	4a0f      	ldr	r2, [pc, #60]	; (853c <__pow5mult+0xb4>)
    8500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8504:	2300      	movs	r3, #0
    8506:	f7ff fde9 	bl	80dc <__multadd>
    850a:	4605      	mov	r5, r0
    850c:	e7c4      	b.n	8498 <__pow5mult+0x10>
    850e:	2101      	movs	r1, #1
    8510:	4630      	mov	r0, r6
    8512:	f7ff fdb3 	bl	807c <_Balloc>
    8516:	4680      	mov	r8, r0
    8518:	b140      	cbz	r0, 852c <__pow5mult+0xa4>
    851a:	2301      	movs	r3, #1
    851c:	f240 2271 	movw	r2, #625	; 0x271
    8520:	e9c0 3204 	strd	r3, r2, [r0, #16]
    8524:	2300      	movs	r3, #0
    8526:	6430      	str	r0, [r6, #64]	; 0x40
    8528:	6003      	str	r3, [r0, #0]
    852a:	e7bc      	b.n	84a6 <__pow5mult+0x1e>
    852c:	4b04      	ldr	r3, [pc, #16]	; (8540 <__pow5mult+0xb8>)
    852e:	4805      	ldr	r0, [pc, #20]	; (8544 <__pow5mult+0xbc>)
    8530:	4642      	mov	r2, r8
    8532:	f240 1145 	movw	r1, #325	; 0x145
    8536:	f000 fcfb 	bl	8f30 <__assert_func>
    853a:	bf00      	nop
    853c:	20000e80 	.word	0x20000e80
    8540:	20000720 	.word	0x20000720
    8544:	20000898 	.word	0x20000898

00008548 <__lshift>:
    8548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    854c:	460d      	mov	r5, r1
    854e:	4614      	mov	r4, r2
    8550:	692f      	ldr	r7, [r5, #16]
    8552:	68ab      	ldr	r3, [r5, #8]
    8554:	6849      	ldr	r1, [r1, #4]
    8556:	eb07 1762 	add.w	r7, r7, r2, asr #5
    855a:	1c7e      	adds	r6, r7, #1
    855c:	429e      	cmp	r6, r3
    855e:	4680      	mov	r8, r0
    8560:	ea4f 1962 	mov.w	r9, r2, asr #5
    8564:	dd04      	ble.n	8570 <__lshift+0x28>
    8566:	005b      	lsls	r3, r3, #1
    8568:	429e      	cmp	r6, r3
    856a:	f101 0101 	add.w	r1, r1, #1
    856e:	dcfa      	bgt.n	8566 <__lshift+0x1e>
    8570:	4640      	mov	r0, r8
    8572:	f7ff fd83 	bl	807c <_Balloc>
    8576:	4684      	mov	ip, r0
    8578:	2800      	cmp	r0, #0
    857a:	d052      	beq.n	8622 <__lshift+0xda>
    857c:	f1b9 0f00 	cmp.w	r9, #0
    8580:	f100 0214 	add.w	r2, r0, #20
    8584:	dd0e      	ble.n	85a4 <__lshift+0x5c>
    8586:	f109 0105 	add.w	r1, r9, #5
    858a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    858e:	4613      	mov	r3, r2
    8590:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8594:	2000      	movs	r0, #0
    8596:	f843 0b04 	str.w	r0, [r3], #4
    859a:	428b      	cmp	r3, r1
    859c:	d1fb      	bne.n	8596 <__lshift+0x4e>
    859e:	f1ae 0314 	sub.w	r3, lr, #20
    85a2:	441a      	add	r2, r3
    85a4:	6929      	ldr	r1, [r5, #16]
    85a6:	f105 0314 	add.w	r3, r5, #20
    85aa:	f014 0e1f 	ands.w	lr, r4, #31
    85ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    85b2:	d02e      	beq.n	8612 <__lshift+0xca>
    85b4:	f1ce 0920 	rsb	r9, lr, #32
    85b8:	4610      	mov	r0, r2
    85ba:	f04f 0a00 	mov.w	sl, #0
    85be:	681c      	ldr	r4, [r3, #0]
    85c0:	fa04 f40e 	lsl.w	r4, r4, lr
    85c4:	ea44 040a 	orr.w	r4, r4, sl
    85c8:	f840 4b04 	str.w	r4, [r0], #4
    85cc:	f853 4b04 	ldr.w	r4, [r3], #4
    85d0:	4299      	cmp	r1, r3
    85d2:	fa24 fa09 	lsr.w	sl, r4, r9
    85d6:	d8f2      	bhi.n	85be <__lshift+0x76>
    85d8:	1b4b      	subs	r3, r1, r5
    85da:	3b15      	subs	r3, #21
    85dc:	f023 0303 	bic.w	r3, r3, #3
    85e0:	3304      	adds	r3, #4
    85e2:	f105 0015 	add.w	r0, r5, #21
    85e6:	4281      	cmp	r1, r0
    85e8:	bf38      	it	cc
    85ea:	2304      	movcc	r3, #4
    85ec:	f1ba 0f00 	cmp.w	sl, #0
    85f0:	bf18      	it	ne
    85f2:	4637      	movne	r7, r6
    85f4:	f842 a003 	str.w	sl, [r2, r3]
    85f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    85fc:	686a      	ldr	r2, [r5, #4]
    85fe:	f8cc 7010 	str.w	r7, [ip, #16]
    8602:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8606:	6029      	str	r1, [r5, #0]
    8608:	4660      	mov	r0, ip
    860a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8612:	3a04      	subs	r2, #4
    8614:	f853 0b04 	ldr.w	r0, [r3], #4
    8618:	f842 0f04 	str.w	r0, [r2, #4]!
    861c:	4299      	cmp	r1, r3
    861e:	d8f9      	bhi.n	8614 <__lshift+0xcc>
    8620:	e7ea      	b.n	85f8 <__lshift+0xb0>
    8622:	4b03      	ldr	r3, [pc, #12]	; (8630 <__lshift+0xe8>)
    8624:	4803      	ldr	r0, [pc, #12]	; (8634 <__lshift+0xec>)
    8626:	4662      	mov	r2, ip
    8628:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    862c:	f000 fc80 	bl	8f30 <__assert_func>
    8630:	20000720 	.word	0x20000720
    8634:	20000898 	.word	0x20000898

00008638 <__mcmp>:
    8638:	690b      	ldr	r3, [r1, #16]
    863a:	4684      	mov	ip, r0
    863c:	6900      	ldr	r0, [r0, #16]
    863e:	1ac0      	subs	r0, r0, r3
    8640:	d116      	bne.n	8670 <__mcmp+0x38>
    8642:	f10c 0c14 	add.w	ip, ip, #20
    8646:	3114      	adds	r1, #20
    8648:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    864c:	b410      	push	{r4}
    864e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8652:	e001      	b.n	8658 <__mcmp+0x20>
    8654:	4594      	cmp	ip, r2
    8656:	d208      	bcs.n	866a <__mcmp+0x32>
    8658:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    865c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    8660:	428c      	cmp	r4, r1
    8662:	d0f7      	beq.n	8654 <__mcmp+0x1c>
    8664:	d205      	bcs.n	8672 <__mcmp+0x3a>
    8666:	f04f 30ff 	mov.w	r0, #4294967295
    866a:	f85d 4b04 	ldr.w	r4, [sp], #4
    866e:	4770      	bx	lr
    8670:	4770      	bx	lr
    8672:	2001      	movs	r0, #1
    8674:	f85d 4b04 	ldr.w	r4, [sp], #4
    8678:	4770      	bx	lr
    867a:	bf00      	nop

0000867c <__mdiff>:
    867c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8680:	690f      	ldr	r7, [r1, #16]
    8682:	6913      	ldr	r3, [r2, #16]
    8684:	1aff      	subs	r7, r7, r3
    8686:	2f00      	cmp	r7, #0
    8688:	460e      	mov	r6, r1
    868a:	4690      	mov	r8, r2
    868c:	d17f      	bne.n	878e <__mdiff+0x112>
    868e:	f101 0514 	add.w	r5, r1, #20
    8692:	3214      	adds	r2, #20
    8694:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    869c:	e001      	b.n	86a2 <__mdiff+0x26>
    869e:	429d      	cmp	r5, r3
    86a0:	d278      	bcs.n	8794 <__mdiff+0x118>
    86a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    86a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    86aa:	42a1      	cmp	r1, r4
    86ac:	d0f7      	beq.n	869e <__mdiff+0x22>
    86ae:	d369      	bcc.n	8784 <__mdiff+0x108>
    86b0:	6871      	ldr	r1, [r6, #4]
    86b2:	f7ff fce3 	bl	807c <_Balloc>
    86b6:	4681      	mov	r9, r0
    86b8:	2800      	cmp	r0, #0
    86ba:	d077      	beq.n	87ac <__mdiff+0x130>
    86bc:	6935      	ldr	r5, [r6, #16]
    86be:	f8d8 2010 	ldr.w	r2, [r8, #16]
    86c2:	60c7      	str	r7, [r0, #12]
    86c4:	f108 0e14 	add.w	lr, r8, #20
    86c8:	f106 0014 	add.w	r0, r6, #20
    86cc:	f109 0a14 	add.w	sl, r9, #20
    86d0:	f106 0110 	add.w	r1, r6, #16
    86d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    86d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    86dc:	4656      	mov	r6, sl
    86de:	f04f 0c00 	mov.w	ip, #0
    86e2:	f85e 4b04 	ldr.w	r4, [lr], #4
    86e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    86ea:	b2a3      	uxth	r3, r4
    86ec:	fa1c fc8b 	uxtah	ip, ip, fp
    86f0:	ebac 0303 	sub.w	r3, ip, r3
    86f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    86f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    86fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    8700:	b29b      	uxth	r3, r3
    8702:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    8706:	4572      	cmp	r2, lr
    8708:	f846 3b04 	str.w	r3, [r6], #4
    870c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    8710:	d8e7      	bhi.n	86e2 <__mdiff+0x66>
    8712:	eba2 0108 	sub.w	r1, r2, r8
    8716:	3915      	subs	r1, #21
    8718:	f108 0815 	add.w	r8, r8, #21
    871c:	4542      	cmp	r2, r8
    871e:	f021 0403 	bic.w	r4, r1, #3
    8722:	f104 0404 	add.w	r4, r4, #4
    8726:	bf38      	it	cc
    8728:	2404      	movcc	r4, #4
    872a:	4420      	add	r0, r4
    872c:	f021 0203 	bic.w	r2, r1, #3
    8730:	bf38      	it	cc
    8732:	2200      	movcc	r2, #0
    8734:	4287      	cmp	r7, r0
    8736:	4452      	add	r2, sl
    8738:	4454      	add	r4, sl
    873a:	d918      	bls.n	876e <__mdiff+0xf2>
    873c:	4626      	mov	r6, r4
    873e:	4601      	mov	r1, r0
    8740:	f851 3b04 	ldr.w	r3, [r1], #4
    8744:	fa1c fc83 	uxtah	ip, ip, r3
    8748:	ea4f 422c 	mov.w	r2, ip, asr #16
    874c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8750:	fa1f fc8c 	uxth.w	ip, ip
    8754:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    8758:	428f      	cmp	r7, r1
    875a:	f846 3b04 	str.w	r3, [r6], #4
    875e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    8762:	d8ed      	bhi.n	8740 <__mdiff+0xc4>
    8764:	3f01      	subs	r7, #1
    8766:	1a3f      	subs	r7, r7, r0
    8768:	f027 0703 	bic.w	r7, r7, #3
    876c:	19e2      	adds	r2, r4, r7
    876e:	b923      	cbnz	r3, 877a <__mdiff+0xfe>
    8770:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    8774:	3d01      	subs	r5, #1
    8776:	2b00      	cmp	r3, #0
    8778:	d0fa      	beq.n	8770 <__mdiff+0xf4>
    877a:	f8c9 5010 	str.w	r5, [r9, #16]
    877e:	4648      	mov	r0, r9
    8780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8784:	4633      	mov	r3, r6
    8786:	2701      	movs	r7, #1
    8788:	4646      	mov	r6, r8
    878a:	4698      	mov	r8, r3
    878c:	e790      	b.n	86b0 <__mdiff+0x34>
    878e:	dbf9      	blt.n	8784 <__mdiff+0x108>
    8790:	2700      	movs	r7, #0
    8792:	e78d      	b.n	86b0 <__mdiff+0x34>
    8794:	2100      	movs	r1, #0
    8796:	f7ff fc71 	bl	807c <_Balloc>
    879a:	4681      	mov	r9, r0
    879c:	b168      	cbz	r0, 87ba <__mdiff+0x13e>
    879e:	2201      	movs	r2, #1
    87a0:	2300      	movs	r3, #0
    87a2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    87a6:	4648      	mov	r0, r9
    87a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87ac:	4b06      	ldr	r3, [pc, #24]	; (87c8 <__mdiff+0x14c>)
    87ae:	4807      	ldr	r0, [pc, #28]	; (87cc <__mdiff+0x150>)
    87b0:	464a      	mov	r2, r9
    87b2:	f240 2145 	movw	r1, #581	; 0x245
    87b6:	f000 fbbb 	bl	8f30 <__assert_func>
    87ba:	4b03      	ldr	r3, [pc, #12]	; (87c8 <__mdiff+0x14c>)
    87bc:	4803      	ldr	r0, [pc, #12]	; (87cc <__mdiff+0x150>)
    87be:	464a      	mov	r2, r9
    87c0:	f240 2137 	movw	r1, #567	; 0x237
    87c4:	f000 fbb4 	bl	8f30 <__assert_func>
    87c8:	20000720 	.word	0x20000720
    87cc:	20000898 	.word	0x20000898

000087d0 <__ulp>:
    87d0:	b082      	sub	sp, #8
    87d2:	ed8d 0b00 	vstr	d0, [sp]
    87d6:	4b16      	ldr	r3, [pc, #88]	; (8830 <__ulp+0x60>)
    87d8:	9a01      	ldr	r2, [sp, #4]
    87da:	4013      	ands	r3, r2
    87dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    87e0:	2b00      	cmp	r3, #0
    87e2:	dd06      	ble.n	87f2 <__ulp+0x22>
    87e4:	2200      	movs	r2, #0
    87e6:	4619      	mov	r1, r3
    87e8:	4610      	mov	r0, r2
    87ea:	ec41 0b10 	vmov	d0, r0, r1
    87ee:	b002      	add	sp, #8
    87f0:	4770      	bx	lr
    87f2:	425b      	negs	r3, r3
    87f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    87f8:	ea4f 5223 	mov.w	r2, r3, asr #20
    87fc:	da09      	bge.n	8812 <__ulp+0x42>
    87fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    8802:	4113      	asrs	r3, r2
    8804:	2200      	movs	r2, #0
    8806:	4619      	mov	r1, r3
    8808:	4610      	mov	r0, r2
    880a:	ec41 0b10 	vmov	d0, r0, r1
    880e:	b002      	add	sp, #8
    8810:	4770      	bx	lr
    8812:	f1a2 0314 	sub.w	r3, r2, #20
    8816:	2b1e      	cmp	r3, #30
    8818:	bfda      	itte	le
    881a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    881e:	40da      	lsrle	r2, r3
    8820:	2201      	movgt	r2, #1
    8822:	2300      	movs	r3, #0
    8824:	4619      	mov	r1, r3
    8826:	4610      	mov	r0, r2
    8828:	ec41 0b10 	vmov	d0, r0, r1
    882c:	b002      	add	sp, #8
    882e:	4770      	bx	lr
    8830:	7ff00000 	.word	0x7ff00000

00008834 <__b2d>:
    8834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8836:	6904      	ldr	r4, [r0, #16]
    8838:	f100 0614 	add.w	r6, r0, #20
    883c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    8840:	1f27      	subs	r7, r4, #4
    8842:	f854 5c04 	ldr.w	r5, [r4, #-4]
    8846:	4628      	mov	r0, r5
    8848:	f7ff fcf2 	bl	8230 <__hi0bits>
    884c:	f1c0 0320 	rsb	r3, r0, #32
    8850:	280a      	cmp	r0, #10
    8852:	600b      	str	r3, [r1, #0]
    8854:	dd1b      	ble.n	888e <__b2d+0x5a>
    8856:	42be      	cmp	r6, r7
    8858:	d20b      	bcs.n	8872 <__b2d+0x3e>
    885a:	380b      	subs	r0, #11
    885c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    8860:	d12e      	bne.n	88c0 <__b2d+0x8c>
    8862:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    8866:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    886a:	460a      	mov	r2, r1
    886c:	ec43 2b10 	vmov	d0, r2, r3
    8870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8872:	f1b0 010b 	subs.w	r1, r0, #11
    8876:	d0f4      	beq.n	8862 <__b2d+0x2e>
    8878:	fa05 f101 	lsl.w	r1, r5, r1
    887c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    8880:	2100      	movs	r1, #0
    8882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    8886:	460a      	mov	r2, r1
    8888:	ec43 2b10 	vmov	d0, r2, r3
    888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    888e:	f1c0 0c0b 	rsb	ip, r0, #11
    8892:	fa25 f10c 	lsr.w	r1, r5, ip
    8896:	42be      	cmp	r6, r7
    8898:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    889c:	bf38      	it	cc
    889e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    88a2:	f100 0015 	add.w	r0, r0, #21
    88a6:	bf34      	ite	cc
    88a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    88ac:	2100      	movcs	r1, #0
    88ae:	fa05 f000 	lsl.w	r0, r5, r0
    88b2:	4301      	orrs	r1, r0
    88b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    88b8:	460a      	mov	r2, r1
    88ba:	ec43 2b10 	vmov	d0, r2, r3
    88be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88c0:	f1c0 0c20 	rsb	ip, r0, #32
    88c4:	4085      	lsls	r5, r0
    88c6:	fa21 f30c 	lsr.w	r3, r1, ip
    88ca:	ea45 0703 	orr.w	r7, r5, r3
    88ce:	f1a4 0508 	sub.w	r5, r4, #8
    88d2:	42ae      	cmp	r6, r5
    88d4:	fa01 f100 	lsl.w	r1, r1, r0
    88d8:	bf3c      	itt	cc
    88da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    88de:	fa20 f00c 	lsrcc.w	r0, r0, ip
    88e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    88e6:	bf38      	it	cc
    88e8:	4301      	orrcc	r1, r0
    88ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    88ee:	460a      	mov	r2, r1
    88f0:	ec43 2b10 	vmov	d0, r2, r3
    88f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88f6:	bf00      	nop

000088f8 <__d2b>:
    88f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    88fc:	4688      	mov	r8, r1
    88fe:	b083      	sub	sp, #12
    8900:	2101      	movs	r1, #1
    8902:	ec57 6b10 	vmov	r6, r7, d0
    8906:	4615      	mov	r5, r2
    8908:	f7ff fbb8 	bl	807c <_Balloc>
    890c:	4604      	mov	r4, r0
    890e:	2800      	cmp	r0, #0
    8910:	d051      	beq.n	89b6 <__d2b+0xbe>
    8912:	f3c7 590a 	ubfx	r9, r7, #20, #11
    8916:	f3c7 0313 	ubfx	r3, r7, #0, #20
    891a:	f1b9 0f00 	cmp.w	r9, #0
    891e:	d001      	beq.n	8924 <__d2b+0x2c>
    8920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8924:	2e00      	cmp	r6, #0
    8926:	9301      	str	r3, [sp, #4]
    8928:	d118      	bne.n	895c <__d2b+0x64>
    892a:	a801      	add	r0, sp, #4
    892c:	f7ff fca0 	bl	8270 <__lo0bits>
    8930:	9a01      	ldr	r2, [sp, #4]
    8932:	6162      	str	r2, [r4, #20]
    8934:	2201      	movs	r2, #1
    8936:	f100 0320 	add.w	r3, r0, #32
    893a:	6122      	str	r2, [r4, #16]
    893c:	f1b9 0f00 	cmp.w	r9, #0
    8940:	d025      	beq.n	898e <__d2b+0x96>
    8942:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    8946:	eb09 0203 	add.w	r2, r9, r3
    894a:	4620      	mov	r0, r4
    894c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    8950:	f8c8 2000 	str.w	r2, [r8]
    8954:	602b      	str	r3, [r5, #0]
    8956:	b003      	add	sp, #12
    8958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    895c:	4668      	mov	r0, sp
    895e:	9600      	str	r6, [sp, #0]
    8960:	f7ff fc86 	bl	8270 <__lo0bits>
    8964:	4603      	mov	r3, r0
    8966:	b310      	cbz	r0, 89ae <__d2b+0xb6>
    8968:	e9dd 0200 	ldrd	r0, r2, [sp]
    896c:	f1c3 0120 	rsb	r1, r3, #32
    8970:	fa02 f101 	lsl.w	r1, r2, r1
    8974:	4301      	orrs	r1, r0
    8976:	40da      	lsrs	r2, r3
    8978:	6161      	str	r1, [r4, #20]
    897a:	9201      	str	r2, [sp, #4]
    897c:	2a00      	cmp	r2, #0
    897e:	61a2      	str	r2, [r4, #24]
    8980:	bf14      	ite	ne
    8982:	2202      	movne	r2, #2
    8984:	2201      	moveq	r2, #1
    8986:	6122      	str	r2, [r4, #16]
    8988:	f1b9 0f00 	cmp.w	r9, #0
    898c:	d1d9      	bne.n	8942 <__d2b+0x4a>
    898e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    8992:	f8c8 3000 	str.w	r3, [r8]
    8996:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    899a:	6918      	ldr	r0, [r3, #16]
    899c:	f7ff fc48 	bl	8230 <__hi0bits>
    89a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    89a4:	4620      	mov	r0, r4
    89a6:	602b      	str	r3, [r5, #0]
    89a8:	b003      	add	sp, #12
    89aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    89ae:	9a00      	ldr	r2, [sp, #0]
    89b0:	6162      	str	r2, [r4, #20]
    89b2:	9a01      	ldr	r2, [sp, #4]
    89b4:	e7e2      	b.n	897c <__d2b+0x84>
    89b6:	4b03      	ldr	r3, [pc, #12]	; (89c4 <__d2b+0xcc>)
    89b8:	4803      	ldr	r0, [pc, #12]	; (89c8 <__d2b+0xd0>)
    89ba:	4622      	mov	r2, r4
    89bc:	f240 310f 	movw	r1, #783	; 0x30f
    89c0:	f000 fab6 	bl	8f30 <__assert_func>
    89c4:	20000720 	.word	0x20000720
    89c8:	20000898 	.word	0x20000898

000089cc <__ratio>:
    89cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    89ce:	b083      	sub	sp, #12
    89d0:	460e      	mov	r6, r1
    89d2:	4669      	mov	r1, sp
    89d4:	4607      	mov	r7, r0
    89d6:	f7ff ff2d 	bl	8834 <__b2d>
    89da:	a901      	add	r1, sp, #4
    89dc:	4630      	mov	r0, r6
    89de:	ec55 4b10 	vmov	r4, r5, d0
    89e2:	eeb0 7b40 	vmov.f64	d7, d0
    89e6:	f7ff ff25 	bl	8834 <__b2d>
    89ea:	6933      	ldr	r3, [r6, #16]
    89ec:	693a      	ldr	r2, [r7, #16]
    89ee:	1ad2      	subs	r2, r2, r3
    89f0:	e9dd 3100 	ldrd	r3, r1, [sp]
    89f4:	1a5b      	subs	r3, r3, r1
    89f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    89fa:	2b00      	cmp	r3, #0
    89fc:	dd09      	ble.n	8a12 <__ratio+0x46>
    89fe:	ee17 2a90 	vmov	r2, s15
    8a02:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    8a06:	ec45 4b17 	vmov	d7, r4, r5
    8a0a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    8a0e:	b003      	add	sp, #12
    8a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a12:	ee10 2a90 	vmov	r2, s1
    8a16:	ec51 0b10 	vmov	r0, r1, d0
    8a1a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    8a1e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    8a22:	ec41 0b10 	vmov	d0, r0, r1
    8a26:	ee87 0b00 	vdiv.f64	d0, d7, d0
    8a2a:	b003      	add	sp, #12
    8a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a2e:	bf00      	nop

00008a30 <__copybits>:
    8a30:	3901      	subs	r1, #1
    8a32:	1149      	asrs	r1, r1, #5
    8a34:	f101 0c01 	add.w	ip, r1, #1
    8a38:	6911      	ldr	r1, [r2, #16]
    8a3a:	f102 0314 	add.w	r3, r2, #20
    8a3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8a42:	428b      	cmp	r3, r1
    8a44:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    8a48:	d217      	bcs.n	8a7a <__copybits+0x4a>
    8a4a:	b510      	push	{r4, lr}
    8a4c:	f1a0 0e04 	sub.w	lr, r0, #4
    8a50:	f853 4b04 	ldr.w	r4, [r3], #4
    8a54:	f84e 4f04 	str.w	r4, [lr, #4]!
    8a58:	4299      	cmp	r1, r3
    8a5a:	d8f9      	bhi.n	8a50 <__copybits+0x20>
    8a5c:	1a8a      	subs	r2, r1, r2
    8a5e:	f1a2 0315 	sub.w	r3, r2, #21
    8a62:	f023 0303 	bic.w	r3, r3, #3
    8a66:	3304      	adds	r3, #4
    8a68:	4418      	add	r0, r3
    8a6a:	4584      	cmp	ip, r0
    8a6c:	d904      	bls.n	8a78 <__copybits+0x48>
    8a6e:	2300      	movs	r3, #0
    8a70:	f840 3b04 	str.w	r3, [r0], #4
    8a74:	4584      	cmp	ip, r0
    8a76:	d8fb      	bhi.n	8a70 <__copybits+0x40>
    8a78:	bd10      	pop	{r4, pc}
    8a7a:	4584      	cmp	ip, r0
    8a7c:	d905      	bls.n	8a8a <__copybits+0x5a>
    8a7e:	2300      	movs	r3, #0
    8a80:	f840 3b04 	str.w	r3, [r0], #4
    8a84:	4584      	cmp	ip, r0
    8a86:	d8fb      	bhi.n	8a80 <__copybits+0x50>
    8a88:	4770      	bx	lr
    8a8a:	4770      	bx	lr

00008a8c <__any_on>:
    8a8c:	6903      	ldr	r3, [r0, #16]
    8a8e:	114a      	asrs	r2, r1, #5
    8a90:	4293      	cmp	r3, r2
    8a92:	f100 0014 	add.w	r0, r0, #20
    8a96:	da09      	bge.n	8aac <__any_on+0x20>
    8a98:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    8a9c:	e002      	b.n	8aa4 <__any_on+0x18>
    8a9e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    8aa2:	b9c2      	cbnz	r2, 8ad6 <__any_on+0x4a>
    8aa4:	4283      	cmp	r3, r0
    8aa6:	d8fa      	bhi.n	8a9e <__any_on+0x12>
    8aa8:	2000      	movs	r0, #0
    8aaa:	4770      	bx	lr
    8aac:	dd10      	ble.n	8ad0 <__any_on+0x44>
    8aae:	f011 011f 	ands.w	r1, r1, #31
    8ab2:	d00d      	beq.n	8ad0 <__any_on+0x44>
    8ab4:	b410      	push	{r4}
    8ab6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    8aba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8abe:	fa24 f201 	lsr.w	r2, r4, r1
    8ac2:	408a      	lsls	r2, r1
    8ac4:	4294      	cmp	r4, r2
    8ac6:	d00c      	beq.n	8ae2 <__any_on+0x56>
    8ac8:	2001      	movs	r0, #1
    8aca:	f85d 4b04 	ldr.w	r4, [sp], #4
    8ace:	4770      	bx	lr
    8ad0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    8ad4:	e7e6      	b.n	8aa4 <__any_on+0x18>
    8ad6:	2001      	movs	r0, #1
    8ad8:	4770      	bx	lr
    8ada:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    8ade:	2a00      	cmp	r2, #0
    8ae0:	d1f2      	bne.n	8ac8 <__any_on+0x3c>
    8ae2:	4283      	cmp	r3, r0
    8ae4:	d8f9      	bhi.n	8ada <__any_on+0x4e>
    8ae6:	2000      	movs	r0, #0
    8ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
    8aec:	4770      	bx	lr
    8aee:	bf00      	nop

00008af0 <__ascii_wctomb>:
    8af0:	b149      	cbz	r1, 8b06 <__ascii_wctomb+0x16>
    8af2:	2aff      	cmp	r2, #255	; 0xff
    8af4:	d802      	bhi.n	8afc <__ascii_wctomb+0xc>
    8af6:	700a      	strb	r2, [r1, #0]
    8af8:	2001      	movs	r0, #1
    8afa:	4770      	bx	lr
    8afc:	238a      	movs	r3, #138	; 0x8a
    8afe:	6003      	str	r3, [r0, #0]
    8b00:	f04f 30ff 	mov.w	r0, #4294967295
    8b04:	4770      	bx	lr
    8b06:	4608      	mov	r0, r1
    8b08:	4770      	bx	lr
    8b0a:	bf00      	nop

00008b0c <fcvtbuf>:
    8b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b10:	460e      	mov	r6, r1
    8b12:	4926      	ldr	r1, [pc, #152]	; (8bac <fcvtbuf+0xa0>)
    8b14:	b087      	sub	sp, #28
    8b16:	680f      	ldr	r7, [r1, #0]
    8b18:	4604      	mov	r4, r0
    8b1a:	4690      	mov	r8, r2
    8b1c:	461d      	mov	r5, r3
    8b1e:	b353      	cbz	r3, 8b76 <fcvtbuf+0x6a>
    8b20:	aa05      	add	r2, sp, #20
    8b22:	4633      	mov	r3, r6
    8b24:	9201      	str	r2, [sp, #4]
    8b26:	2103      	movs	r1, #3
    8b28:	4622      	mov	r2, r4
    8b2a:	f8cd 8000 	str.w	r8, [sp]
    8b2e:	4638      	mov	r0, r7
    8b30:	f000 faee 	bl	9110 <_dtoa_r>
    8b34:	9b05      	ldr	r3, [sp, #20]
    8b36:	6832      	ldr	r2, [r6, #0]
    8b38:	4298      	cmp	r0, r3
    8b3a:	4684      	mov	ip, r0
    8b3c:	f1c2 0200 	rsb	r2, r2, #0
    8b40:	4629      	mov	r1, r5
    8b42:	d209      	bcs.n	8b58 <fcvtbuf+0x4c>
    8b44:	1a10      	subs	r0, r2, r0
    8b46:	f81c 3b01 	ldrb.w	r3, [ip], #1
    8b4a:	f801 3b01 	strb.w	r3, [r1], #1
    8b4e:	9b05      	ldr	r3, [sp, #20]
    8b50:	4563      	cmp	r3, ip
    8b52:	eb00 020c 	add.w	r2, r0, ip
    8b56:	d8f6      	bhi.n	8b46 <fcvtbuf+0x3a>
    8b58:	4294      	cmp	r4, r2
    8b5a:	dd24      	ble.n	8ba6 <fcvtbuf+0x9a>
    8b5c:	1aa2      	subs	r2, r4, r2
    8b5e:	440a      	add	r2, r1
    8b60:	2330      	movs	r3, #48	; 0x30
    8b62:	f801 3b01 	strb.w	r3, [r1], #1
    8b66:	4291      	cmp	r1, r2
    8b68:	d1fb      	bne.n	8b62 <fcvtbuf+0x56>
    8b6a:	2300      	movs	r3, #0
    8b6c:	7013      	strb	r3, [r2, #0]
    8b6e:	4628      	mov	r0, r5
    8b70:	b007      	add	sp, #28
    8b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
    8b78:	f100 0323 	add.w	r3, r0, #35	; 0x23
    8b7c:	429a      	cmp	r2, r3
    8b7e:	dd01      	ble.n	8b84 <fcvtbuf+0x78>
    8b80:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    8b82:	e7cd      	b.n	8b20 <fcvtbuf+0x14>
    8b84:	f100 0924 	add.w	r9, r0, #36	; 0x24
    8b88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    8b8a:	464a      	mov	r2, r9
    8b8c:	4638      	mov	r0, r7
    8b8e:	ed8d 0b02 	vstr	d0, [sp, #8]
    8b92:	f7fc fa4b 	bl	502c <_realloc_r>
    8b96:	4605      	mov	r5, r0
    8b98:	2800      	cmp	r0, #0
    8b9a:	d0e8      	beq.n	8b6e <fcvtbuf+0x62>
    8b9c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    8ba0:	ed9d 0b02 	vldr	d0, [sp, #8]
    8ba4:	e7bc      	b.n	8b20 <fcvtbuf+0x14>
    8ba6:	460a      	mov	r2, r1
    8ba8:	e7df      	b.n	8b6a <fcvtbuf+0x5e>
    8baa:	bf00      	nop
    8bac:	200016c4 	.word	0x200016c4

00008bb0 <_fclose_r>:
    8bb0:	b570      	push	{r4, r5, r6, lr}
    8bb2:	2900      	cmp	r1, #0
    8bb4:	d04b      	beq.n	8c4e <_fclose_r+0x9e>
    8bb6:	4606      	mov	r6, r0
    8bb8:	460c      	mov	r4, r1
    8bba:	b110      	cbz	r0, 8bc2 <_fclose_r+0x12>
    8bbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d048      	beq.n	8c54 <_fclose_r+0xa4>
    8bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8bc4:	07d8      	lsls	r0, r3, #31
    8bc6:	d534      	bpl.n	8c32 <_fclose_r+0x82>
    8bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d03e      	beq.n	8c4e <_fclose_r+0x9e>
    8bd0:	4621      	mov	r1, r4
    8bd2:	4630      	mov	r0, r6
    8bd4:	f000 f850 	bl	8c78 <__sflush_r>
    8bd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8bda:	4605      	mov	r5, r0
    8bdc:	b133      	cbz	r3, 8bec <_fclose_r+0x3c>
    8bde:	69e1      	ldr	r1, [r4, #28]
    8be0:	4630      	mov	r0, r6
    8be2:	4798      	blx	r3
    8be4:	2800      	cmp	r0, #0
    8be6:	bfb8      	it	lt
    8be8:	f04f 35ff 	movlt.w	r5, #4294967295
    8bec:	89a3      	ldrh	r3, [r4, #12]
    8bee:	061a      	lsls	r2, r3, #24
    8bf0:	d43c      	bmi.n	8c6c <_fclose_r+0xbc>
    8bf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8bf4:	b141      	cbz	r1, 8c08 <_fclose_r+0x58>
    8bf6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8bfa:	4299      	cmp	r1, r3
    8bfc:	d002      	beq.n	8c04 <_fclose_r+0x54>
    8bfe:	4630      	mov	r0, r6
    8c00:	f7fe fd10 	bl	7624 <_free_r>
    8c04:	2300      	movs	r3, #0
    8c06:	6323      	str	r3, [r4, #48]	; 0x30
    8c08:	6c61      	ldr	r1, [r4, #68]	; 0x44
    8c0a:	b121      	cbz	r1, 8c16 <_fclose_r+0x66>
    8c0c:	4630      	mov	r0, r6
    8c0e:	f7fe fd09 	bl	7624 <_free_r>
    8c12:	2300      	movs	r3, #0
    8c14:	6463      	str	r3, [r4, #68]	; 0x44
    8c16:	f7fd fd49 	bl	66ac <__sfp_lock_acquire>
    8c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8c1c:	2200      	movs	r2, #0
    8c1e:	07db      	lsls	r3, r3, #31
    8c20:	81a2      	strh	r2, [r4, #12]
    8c22:	d51f      	bpl.n	8c64 <_fclose_r+0xb4>
    8c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c26:	f7fe fa0f 	bl	7048 <__retarget_lock_close_recursive>
    8c2a:	f7fd fd45 	bl	66b8 <__sfp_lock_release>
    8c2e:	4628      	mov	r0, r5
    8c30:	bd70      	pop	{r4, r5, r6, pc}
    8c32:	89a3      	ldrh	r3, [r4, #12]
    8c34:	0599      	lsls	r1, r3, #22
    8c36:	d4cb      	bmi.n	8bd0 <_fclose_r+0x20>
    8c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c3a:	f7fe fa07 	bl	704c <__retarget_lock_acquire_recursive>
    8c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8c42:	2b00      	cmp	r3, #0
    8c44:	d1c4      	bne.n	8bd0 <_fclose_r+0x20>
    8c46:	6e65      	ldr	r5, [r4, #100]	; 0x64
    8c48:	f015 0501 	ands.w	r5, r5, #1
    8c4c:	d005      	beq.n	8c5a <_fclose_r+0xaa>
    8c4e:	2500      	movs	r5, #0
    8c50:	4628      	mov	r0, r5
    8c52:	bd70      	pop	{r4, r5, r6, pc}
    8c54:	f7fd fd0c 	bl	6670 <__sinit>
    8c58:	e7b3      	b.n	8bc2 <_fclose_r+0x12>
    8c5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c5c:	f7fe f9f8 	bl	7050 <__retarget_lock_release_recursive>
    8c60:	4628      	mov	r0, r5
    8c62:	bd70      	pop	{r4, r5, r6, pc}
    8c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8c66:	f7fe f9f3 	bl	7050 <__retarget_lock_release_recursive>
    8c6a:	e7db      	b.n	8c24 <_fclose_r+0x74>
    8c6c:	6921      	ldr	r1, [r4, #16]
    8c6e:	4630      	mov	r0, r6
    8c70:	f7fe fcd8 	bl	7624 <_free_r>
    8c74:	e7bd      	b.n	8bf2 <_fclose_r+0x42>
    8c76:	bf00      	nop

00008c78 <__sflush_r>:
    8c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    8c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c80:	460c      	mov	r4, r1
    8c82:	0711      	lsls	r1, r2, #28
    8c84:	4680      	mov	r8, r0
    8c86:	d447      	bmi.n	8d18 <__sflush_r+0xa0>
    8c88:	6863      	ldr	r3, [r4, #4]
    8c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    8c8e:	2b00      	cmp	r3, #0
    8c90:	81a2      	strh	r2, [r4, #12]
    8c92:	dd5e      	ble.n	8d52 <__sflush_r+0xda>
    8c94:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    8c96:	2d00      	cmp	r5, #0
    8c98:	d058      	beq.n	8d4c <__sflush_r+0xd4>
    8c9a:	2300      	movs	r3, #0
    8c9c:	f8d8 6000 	ldr.w	r6, [r8]
    8ca0:	f8c8 3000 	str.w	r3, [r8]
    8ca4:	b293      	uxth	r3, r2
    8ca6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    8caa:	d156      	bne.n	8d5a <__sflush_r+0xe2>
    8cac:	2301      	movs	r3, #1
    8cae:	69e1      	ldr	r1, [r4, #28]
    8cb0:	4640      	mov	r0, r8
    8cb2:	47a8      	blx	r5
    8cb4:	1c43      	adds	r3, r0, #1
    8cb6:	d067      	beq.n	8d88 <__sflush_r+0x110>
    8cb8:	89a3      	ldrh	r3, [r4, #12]
    8cba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    8cbc:	075f      	lsls	r7, r3, #29
    8cbe:	d505      	bpl.n	8ccc <__sflush_r+0x54>
    8cc0:	6863      	ldr	r3, [r4, #4]
    8cc2:	1ac0      	subs	r0, r0, r3
    8cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8cc6:	b10b      	cbz	r3, 8ccc <__sflush_r+0x54>
    8cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8cca:	1ac0      	subs	r0, r0, r3
    8ccc:	69e1      	ldr	r1, [r4, #28]
    8cce:	4602      	mov	r2, r0
    8cd0:	2300      	movs	r3, #0
    8cd2:	4640      	mov	r0, r8
    8cd4:	47a8      	blx	r5
    8cd6:	1c41      	adds	r1, r0, #1
    8cd8:	d141      	bne.n	8d5e <__sflush_r+0xe6>
    8cda:	f8d8 3000 	ldr.w	r3, [r8]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d03d      	beq.n	8d5e <__sflush_r+0xe6>
    8ce2:	2b1d      	cmp	r3, #29
    8ce4:	d001      	beq.n	8cea <__sflush_r+0x72>
    8ce6:	2b16      	cmp	r3, #22
    8ce8:	d156      	bne.n	8d98 <__sflush_r+0x120>
    8cea:	89a3      	ldrh	r3, [r4, #12]
    8cec:	6922      	ldr	r2, [r4, #16]
    8cee:	6022      	str	r2, [r4, #0]
    8cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8cf4:	2100      	movs	r1, #0
    8cf6:	6061      	str	r1, [r4, #4]
    8cf8:	81a3      	strh	r3, [r4, #12]
    8cfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8cfc:	f8c8 6000 	str.w	r6, [r8]
    8d00:	b321      	cbz	r1, 8d4c <__sflush_r+0xd4>
    8d02:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8d06:	4299      	cmp	r1, r3
    8d08:	d002      	beq.n	8d10 <__sflush_r+0x98>
    8d0a:	4640      	mov	r0, r8
    8d0c:	f7fe fc8a 	bl	7624 <_free_r>
    8d10:	2000      	movs	r0, #0
    8d12:	6320      	str	r0, [r4, #48]	; 0x30
    8d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d18:	6926      	ldr	r6, [r4, #16]
    8d1a:	b1be      	cbz	r6, 8d4c <__sflush_r+0xd4>
    8d1c:	b293      	uxth	r3, r2
    8d1e:	6825      	ldr	r5, [r4, #0]
    8d20:	6026      	str	r6, [r4, #0]
    8d22:	079a      	lsls	r2, r3, #30
    8d24:	bf0c      	ite	eq
    8d26:	6963      	ldreq	r3, [r4, #20]
    8d28:	2300      	movne	r3, #0
    8d2a:	1bad      	subs	r5, r5, r6
    8d2c:	60a3      	str	r3, [r4, #8]
    8d2e:	e00b      	b.n	8d48 <__sflush_r+0xd0>
    8d30:	462b      	mov	r3, r5
    8d32:	4632      	mov	r2, r6
    8d34:	69e1      	ldr	r1, [r4, #28]
    8d36:	6a67      	ldr	r7, [r4, #36]	; 0x24
    8d38:	4640      	mov	r0, r8
    8d3a:	47b8      	blx	r7
    8d3c:	f1b0 0c00 	subs.w	ip, r0, #0
    8d40:	eba5 050c 	sub.w	r5, r5, ip
    8d44:	4466      	add	r6, ip
    8d46:	dd17      	ble.n	8d78 <__sflush_r+0x100>
    8d48:	2d00      	cmp	r5, #0
    8d4a:	dcf1      	bgt.n	8d30 <__sflush_r+0xb8>
    8d4c:	2000      	movs	r0, #0
    8d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8d54:	2b00      	cmp	r3, #0
    8d56:	dc9d      	bgt.n	8c94 <__sflush_r+0x1c>
    8d58:	e7f8      	b.n	8d4c <__sflush_r+0xd4>
    8d5a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8d5c:	e7ae      	b.n	8cbc <__sflush_r+0x44>
    8d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    8d62:	6922      	ldr	r2, [r4, #16]
    8d64:	6022      	str	r2, [r4, #0]
    8d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8d6a:	81a3      	strh	r3, [r4, #12]
    8d6c:	2200      	movs	r2, #0
    8d6e:	04db      	lsls	r3, r3, #19
    8d70:	6062      	str	r2, [r4, #4]
    8d72:	d5c2      	bpl.n	8cfa <__sflush_r+0x82>
    8d74:	6520      	str	r0, [r4, #80]	; 0x50
    8d76:	e7c0      	b.n	8cfa <__sflush_r+0x82>
    8d78:	89a3      	ldrh	r3, [r4, #12]
    8d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d7e:	f04f 30ff 	mov.w	r0, #4294967295
    8d82:	81a3      	strh	r3, [r4, #12]
    8d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d88:	f8d8 3000 	ldr.w	r3, [r8]
    8d8c:	2b00      	cmp	r3, #0
    8d8e:	d093      	beq.n	8cb8 <__sflush_r+0x40>
    8d90:	2b1d      	cmp	r3, #29
    8d92:	d006      	beq.n	8da2 <__sflush_r+0x12a>
    8d94:	2b16      	cmp	r3, #22
    8d96:	d004      	beq.n	8da2 <__sflush_r+0x12a>
    8d98:	89a3      	ldrh	r3, [r4, #12]
    8d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8d9e:	81a3      	strh	r3, [r4, #12]
    8da0:	e7d5      	b.n	8d4e <__sflush_r+0xd6>
    8da2:	f8c8 6000 	str.w	r6, [r8]
    8da6:	e7d1      	b.n	8d4c <__sflush_r+0xd4>

00008da8 <_fflush_r>:
    8da8:	b538      	push	{r3, r4, r5, lr}
    8daa:	460c      	mov	r4, r1
    8dac:	4605      	mov	r5, r0
    8dae:	b108      	cbz	r0, 8db4 <_fflush_r+0xc>
    8db0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8db2:	b303      	cbz	r3, 8df6 <_fflush_r+0x4e>
    8db4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    8db8:	b188      	cbz	r0, 8dde <_fflush_r+0x36>
    8dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8dbc:	07db      	lsls	r3, r3, #31
    8dbe:	d401      	bmi.n	8dc4 <_fflush_r+0x1c>
    8dc0:	0581      	lsls	r1, r0, #22
    8dc2:	d50f      	bpl.n	8de4 <_fflush_r+0x3c>
    8dc4:	4628      	mov	r0, r5
    8dc6:	4621      	mov	r1, r4
    8dc8:	f7ff ff56 	bl	8c78 <__sflush_r>
    8dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    8dce:	07da      	lsls	r2, r3, #31
    8dd0:	4605      	mov	r5, r0
    8dd2:	d402      	bmi.n	8dda <_fflush_r+0x32>
    8dd4:	89a3      	ldrh	r3, [r4, #12]
    8dd6:	059b      	lsls	r3, r3, #22
    8dd8:	d508      	bpl.n	8dec <_fflush_r+0x44>
    8dda:	4628      	mov	r0, r5
    8ddc:	bd38      	pop	{r3, r4, r5, pc}
    8dde:	4605      	mov	r5, r0
    8de0:	4628      	mov	r0, r5
    8de2:	bd38      	pop	{r3, r4, r5, pc}
    8de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8de6:	f7fe f931 	bl	704c <__retarget_lock_acquire_recursive>
    8dea:	e7eb      	b.n	8dc4 <_fflush_r+0x1c>
    8dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    8dee:	f7fe f92f 	bl	7050 <__retarget_lock_release_recursive>
    8df2:	4628      	mov	r0, r5
    8df4:	bd38      	pop	{r3, r4, r5, pc}
    8df6:	f7fd fc3b 	bl	6670 <__sinit>
    8dfa:	e7db      	b.n	8db4 <_fflush_r+0xc>

00008dfc <memcmp>:
    8dfc:	2a03      	cmp	r2, #3
    8dfe:	b570      	push	{r4, r5, r6, lr}
    8e00:	d914      	bls.n	8e2c <memcmp+0x30>
    8e02:	ea40 0301 	orr.w	r3, r0, r1
    8e06:	079b      	lsls	r3, r3, #30
    8e08:	d122      	bne.n	8e50 <memcmp+0x54>
    8e0a:	4604      	mov	r4, r0
    8e0c:	460b      	mov	r3, r1
    8e0e:	4619      	mov	r1, r3
    8e10:	4620      	mov	r0, r4
    8e12:	680e      	ldr	r6, [r1, #0]
    8e14:	6805      	ldr	r5, [r0, #0]
    8e16:	42b5      	cmp	r5, r6
    8e18:	f104 0404 	add.w	r4, r4, #4
    8e1c:	f103 0304 	add.w	r3, r3, #4
    8e20:	d116      	bne.n	8e50 <memcmp+0x54>
    8e22:	3a04      	subs	r2, #4
    8e24:	2a03      	cmp	r2, #3
    8e26:	4620      	mov	r0, r4
    8e28:	4619      	mov	r1, r3
    8e2a:	d8f0      	bhi.n	8e0e <memcmp+0x12>
    8e2c:	1e54      	subs	r4, r2, #1
    8e2e:	b19a      	cbz	r2, 8e58 <memcmp+0x5c>
    8e30:	1e42      	subs	r2, r0, #1
    8e32:	3901      	subs	r1, #1
    8e34:	e001      	b.n	8e3a <memcmp+0x3e>
    8e36:	18c3      	adds	r3, r0, r3
    8e38:	d00c      	beq.n	8e54 <memcmp+0x58>
    8e3a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    8e3e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    8e42:	45e6      	cmp	lr, ip
    8e44:	eba4 0302 	sub.w	r3, r4, r2
    8e48:	d0f5      	beq.n	8e36 <memcmp+0x3a>
    8e4a:	ebae 000c 	sub.w	r0, lr, ip
    8e4e:	bd70      	pop	{r4, r5, r6, pc}
    8e50:	1e54      	subs	r4, r2, #1
    8e52:	e7ed      	b.n	8e30 <memcmp+0x34>
    8e54:	4618      	mov	r0, r3
    8e56:	bd70      	pop	{r4, r5, r6, pc}
    8e58:	4610      	mov	r0, r2
    8e5a:	bd70      	pop	{r4, r5, r6, pc}

00008e5c <strnlen>:
    8e5c:	b171      	cbz	r1, 8e7c <strnlen+0x20>
    8e5e:	4603      	mov	r3, r0
    8e60:	eb00 0c01 	add.w	ip, r0, r1
    8e64:	e001      	b.n	8e6a <strnlen+0xe>
    8e66:	4563      	cmp	r3, ip
    8e68:	d006      	beq.n	8e78 <strnlen+0x1c>
    8e6a:	461a      	mov	r2, r3
    8e6c:	3301      	adds	r3, #1
    8e6e:	7811      	ldrb	r1, [r2, #0]
    8e70:	2900      	cmp	r1, #0
    8e72:	d1f8      	bne.n	8e66 <strnlen+0xa>
    8e74:	1a10      	subs	r0, r2, r0
    8e76:	4770      	bx	lr
    8e78:	1a18      	subs	r0, r3, r0
    8e7a:	4770      	bx	lr
    8e7c:	4608      	mov	r0, r1
    8e7e:	4770      	bx	lr

00008e80 <_localeconv_r>:
    8e80:	4800      	ldr	r0, [pc, #0]	; (8e84 <_localeconv_r+0x4>)
    8e82:	4770      	bx	lr
    8e84:	2000122c 	.word	0x2000122c
	...

00008e90 <memchr>:
    8e90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8e94:	2a10      	cmp	r2, #16
    8e96:	db2b      	blt.n	8ef0 <memchr+0x60>
    8e98:	f010 0f07 	tst.w	r0, #7
    8e9c:	d008      	beq.n	8eb0 <memchr+0x20>
    8e9e:	f810 3b01 	ldrb.w	r3, [r0], #1
    8ea2:	3a01      	subs	r2, #1
    8ea4:	428b      	cmp	r3, r1
    8ea6:	d02d      	beq.n	8f04 <memchr+0x74>
    8ea8:	f010 0f07 	tst.w	r0, #7
    8eac:	b342      	cbz	r2, 8f00 <memchr+0x70>
    8eae:	d1f6      	bne.n	8e9e <memchr+0xe>
    8eb0:	b4f0      	push	{r4, r5, r6, r7}
    8eb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    8eb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    8eba:	f022 0407 	bic.w	r4, r2, #7
    8ebe:	f07f 0700 	mvns.w	r7, #0
    8ec2:	2300      	movs	r3, #0
    8ec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    8ec8:	3c08      	subs	r4, #8
    8eca:	ea85 0501 	eor.w	r5, r5, r1
    8ece:	ea86 0601 	eor.w	r6, r6, r1
    8ed2:	fa85 f547 	uadd8	r5, r5, r7
    8ed6:	faa3 f587 	sel	r5, r3, r7
    8eda:	fa86 f647 	uadd8	r6, r6, r7
    8ede:	faa5 f687 	sel	r6, r5, r7
    8ee2:	b98e      	cbnz	r6, 8f08 <memchr+0x78>
    8ee4:	d1ee      	bne.n	8ec4 <memchr+0x34>
    8ee6:	bcf0      	pop	{r4, r5, r6, r7}
    8ee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8eec:	f002 0207 	and.w	r2, r2, #7
    8ef0:	b132      	cbz	r2, 8f00 <memchr+0x70>
    8ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
    8ef6:	3a01      	subs	r2, #1
    8ef8:	ea83 0301 	eor.w	r3, r3, r1
    8efc:	b113      	cbz	r3, 8f04 <memchr+0x74>
    8efe:	d1f8      	bne.n	8ef2 <memchr+0x62>
    8f00:	2000      	movs	r0, #0
    8f02:	4770      	bx	lr
    8f04:	3801      	subs	r0, #1
    8f06:	4770      	bx	lr
    8f08:	2d00      	cmp	r5, #0
    8f0a:	bf06      	itte	eq
    8f0c:	4635      	moveq	r5, r6
    8f0e:	3803      	subeq	r0, #3
    8f10:	3807      	subne	r0, #7
    8f12:	f015 0f01 	tst.w	r5, #1
    8f16:	d107      	bne.n	8f28 <memchr+0x98>
    8f18:	3001      	adds	r0, #1
    8f1a:	f415 7f80 	tst.w	r5, #256	; 0x100
    8f1e:	bf02      	ittt	eq
    8f20:	3001      	addeq	r0, #1
    8f22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    8f26:	3001      	addeq	r0, #1
    8f28:	bcf0      	pop	{r4, r5, r6, r7}
    8f2a:	3801      	subs	r0, #1
    8f2c:	4770      	bx	lr
    8f2e:	bf00      	nop

00008f30 <__assert_func>:
    8f30:	b500      	push	{lr}
    8f32:	4c0b      	ldr	r4, [pc, #44]	; (8f60 <__assert_func+0x30>)
    8f34:	6825      	ldr	r5, [r4, #0]
    8f36:	4614      	mov	r4, r2
    8f38:	68ee      	ldr	r6, [r5, #12]
    8f3a:	461a      	mov	r2, r3
    8f3c:	b085      	sub	sp, #20
    8f3e:	4603      	mov	r3, r0
    8f40:	460d      	mov	r5, r1
    8f42:	b14c      	cbz	r4, 8f58 <__assert_func+0x28>
    8f44:	4907      	ldr	r1, [pc, #28]	; (8f64 <__assert_func+0x34>)
    8f46:	9500      	str	r5, [sp, #0]
    8f48:	e9cd 1401 	strd	r1, r4, [sp, #4]
    8f4c:	4630      	mov	r0, r6
    8f4e:	4906      	ldr	r1, [pc, #24]	; (8f68 <__assert_func+0x38>)
    8f50:	f000 ff86 	bl	9e60 <fiprintf>
    8f54:	f7f9 ffd2 	bl	2efc <abort>
    8f58:	4904      	ldr	r1, [pc, #16]	; (8f6c <__assert_func+0x3c>)
    8f5a:	460c      	mov	r4, r1
    8f5c:	e7f3      	b.n	8f46 <__assert_func+0x16>
    8f5e:	bf00      	nop
    8f60:	200016c4 	.word	0x200016c4
    8f64:	200006e0 	.word	0x200006e0
    8f68:	200006f0 	.word	0x200006f0
    8f6c:	200003b8 	.word	0x200003b8

00008f70 <_calloc_r>:
    8f70:	b538      	push	{r3, r4, r5, lr}
    8f72:	fba1 1402 	umull	r1, r4, r1, r2
    8f76:	bb8c      	cbnz	r4, 8fdc <_calloc_r+0x6c>
    8f78:	f7fb fd90 	bl	4a9c <_malloc_r>
    8f7c:	4605      	mov	r5, r0
    8f7e:	b1e0      	cbz	r0, 8fba <_calloc_r+0x4a>
    8f80:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8f84:	f022 0203 	bic.w	r2, r2, #3
    8f88:	3a04      	subs	r2, #4
    8f8a:	2a24      	cmp	r2, #36	; 0x24
    8f8c:	d817      	bhi.n	8fbe <_calloc_r+0x4e>
    8f8e:	2a13      	cmp	r2, #19
    8f90:	d91a      	bls.n	8fc8 <_calloc_r+0x58>
    8f92:	2a1b      	cmp	r2, #27
    8f94:	e9c0 4400 	strd	r4, r4, [r0]
    8f98:	d91d      	bls.n	8fd6 <_calloc_r+0x66>
    8f9a:	2a24      	cmp	r2, #36	; 0x24
    8f9c:	bf14      	ite	ne
    8f9e:	f100 0210 	addne.w	r2, r0, #16
    8fa2:	f100 0218 	addeq.w	r2, r0, #24
    8fa6:	f04f 0300 	mov.w	r3, #0
    8faa:	e9c0 4402 	strd	r4, r4, [r0, #8]
    8fae:	bf04      	itt	eq
    8fb0:	6104      	streq	r4, [r0, #16]
    8fb2:	6144      	streq	r4, [r0, #20]
    8fb4:	e9c2 3300 	strd	r3, r3, [r2]
    8fb8:	6093      	str	r3, [r2, #8]
    8fba:	4628      	mov	r0, r5
    8fbc:	bd38      	pop	{r3, r4, r5, pc}
    8fbe:	4621      	mov	r1, r4
    8fc0:	f7fd fc66 	bl	6890 <memset>
    8fc4:	4628      	mov	r0, r5
    8fc6:	bd38      	pop	{r3, r4, r5, pc}
    8fc8:	4602      	mov	r2, r0
    8fca:	2300      	movs	r3, #0
    8fcc:	e9c2 3300 	strd	r3, r3, [r2]
    8fd0:	6093      	str	r3, [r2, #8]
    8fd2:	4628      	mov	r0, r5
    8fd4:	bd38      	pop	{r3, r4, r5, pc}
    8fd6:	f100 0208 	add.w	r2, r0, #8
    8fda:	e7f6      	b.n	8fca <_calloc_r+0x5a>
    8fdc:	f7fe f808 	bl	6ff0 <__errno>
    8fe0:	230c      	movs	r3, #12
    8fe2:	2500      	movs	r5, #0
    8fe4:	6003      	str	r3, [r0, #0]
    8fe6:	e7e8      	b.n	8fba <_calloc_r+0x4a>

00008fe8 <quorem>:
    8fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fec:	6903      	ldr	r3, [r0, #16]
    8fee:	690c      	ldr	r4, [r1, #16]
    8ff0:	42a3      	cmp	r3, r4
    8ff2:	b083      	sub	sp, #12
    8ff4:	f2c0 8087 	blt.w	9106 <quorem+0x11e>
    8ff8:	3c01      	subs	r4, #1
    8ffa:	f101 0514 	add.w	r5, r1, #20
    8ffe:	00a3      	lsls	r3, r4, #2
    9000:	f100 0814 	add.w	r8, r0, #20
    9004:	9300      	str	r3, [sp, #0]
    9006:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    900a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    900e:	3301      	adds	r3, #1
    9010:	4681      	mov	r9, r0
    9012:	429a      	cmp	r2, r3
    9014:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    9018:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    901c:	9001      	str	r0, [sp, #4]
    901e:	fbb2 f6f3 	udiv	r6, r2, r3
    9022:	d33b      	bcc.n	909c <quorem+0xb4>
    9024:	f04f 0c00 	mov.w	ip, #0
    9028:	46ae      	mov	lr, r5
    902a:	4640      	mov	r0, r8
    902c:	46e2      	mov	sl, ip
    902e:	4663      	mov	r3, ip
    9030:	f85e bb04 	ldr.w	fp, [lr], #4
    9034:	6802      	ldr	r2, [r0, #0]
    9036:	fa1f fc8b 	uxth.w	ip, fp
    903a:	fb06 330c 	mla	r3, r6, ip, r3
    903e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    9042:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    9046:	fb06 cc0b 	mla	ip, r6, fp, ip
    904a:	b29b      	uxth	r3, r3
    904c:	ebaa 0303 	sub.w	r3, sl, r3
    9050:	fa1f fa8c 	uxth.w	sl, ip
    9054:	fa13 f382 	uxtah	r3, r3, r2
    9058:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    905c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    9060:	b29b      	uxth	r3, r3
    9062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9066:	4577      	cmp	r7, lr
    9068:	f840 3b04 	str.w	r3, [r0], #4
    906c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    9070:	ea4f 431c 	mov.w	r3, ip, lsr #16
    9074:	d2dc      	bcs.n	9030 <quorem+0x48>
    9076:	9b00      	ldr	r3, [sp, #0]
    9078:	f858 3003 	ldr.w	r3, [r8, r3]
    907c:	b973      	cbnz	r3, 909c <quorem+0xb4>
    907e:	9b01      	ldr	r3, [sp, #4]
    9080:	3b04      	subs	r3, #4
    9082:	4598      	cmp	r8, r3
    9084:	d304      	bcc.n	9090 <quorem+0xa8>
    9086:	e007      	b.n	9098 <quorem+0xb0>
    9088:	4598      	cmp	r8, r3
    908a:	f104 34ff 	add.w	r4, r4, #4294967295
    908e:	d203      	bcs.n	9098 <quorem+0xb0>
    9090:	f853 2904 	ldr.w	r2, [r3], #-4
    9094:	2a00      	cmp	r2, #0
    9096:	d0f7      	beq.n	9088 <quorem+0xa0>
    9098:	f8c9 4010 	str.w	r4, [r9, #16]
    909c:	4648      	mov	r0, r9
    909e:	f7ff facb 	bl	8638 <__mcmp>
    90a2:	2800      	cmp	r0, #0
    90a4:	db2b      	blt.n	90fe <quorem+0x116>
    90a6:	3601      	adds	r6, #1
    90a8:	4641      	mov	r1, r8
    90aa:	2300      	movs	r3, #0
    90ac:	f855 0b04 	ldr.w	r0, [r5], #4
    90b0:	f8d1 c000 	ldr.w	ip, [r1]
    90b4:	b282      	uxth	r2, r0
    90b6:	1a9a      	subs	r2, r3, r2
    90b8:	0c03      	lsrs	r3, r0, #16
    90ba:	fa12 f28c 	uxtah	r2, r2, ip
    90be:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    90c2:	eb03 4322 	add.w	r3, r3, r2, asr #16
    90c6:	b292      	uxth	r2, r2
    90c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    90cc:	42af      	cmp	r7, r5
    90ce:	f841 2b04 	str.w	r2, [r1], #4
    90d2:	ea4f 4323 	mov.w	r3, r3, asr #16
    90d6:	d2e9      	bcs.n	90ac <quorem+0xc4>
    90d8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    90dc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    90e0:	b96a      	cbnz	r2, 90fe <quorem+0x116>
    90e2:	3b04      	subs	r3, #4
    90e4:	4598      	cmp	r8, r3
    90e6:	d304      	bcc.n	90f2 <quorem+0x10a>
    90e8:	e007      	b.n	90fa <quorem+0x112>
    90ea:	4598      	cmp	r8, r3
    90ec:	f104 34ff 	add.w	r4, r4, #4294967295
    90f0:	d203      	bcs.n	90fa <quorem+0x112>
    90f2:	f853 2904 	ldr.w	r2, [r3], #-4
    90f6:	2a00      	cmp	r2, #0
    90f8:	d0f7      	beq.n	90ea <quorem+0x102>
    90fa:	f8c9 4010 	str.w	r4, [r9, #16]
    90fe:	4630      	mov	r0, r6
    9100:	b003      	add	sp, #12
    9102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9106:	2000      	movs	r0, #0
    9108:	b003      	add	sp, #12
    910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    910e:	bf00      	nop

00009110 <_dtoa_r>:
    9110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9114:	ed2d 8b02 	vpush	{d8}
    9118:	b08f      	sub	sp, #60	; 0x3c
    911a:	ed8d 0b02 	vstr	d0, [sp, #8]
    911e:	9101      	str	r1, [sp, #4]
    9120:	6b81      	ldr	r1, [r0, #56]	; 0x38
    9122:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    9124:	9305      	str	r3, [sp, #20]
    9126:	ec57 6b10 	vmov	r6, r7, d0
    912a:	4604      	mov	r4, r0
    912c:	4693      	mov	fp, r2
    912e:	b141      	cbz	r1, 9142 <_dtoa_r+0x32>
    9130:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    9132:	604a      	str	r2, [r1, #4]
    9134:	2301      	movs	r3, #1
    9136:	4093      	lsls	r3, r2
    9138:	608b      	str	r3, [r1, #8]
    913a:	f7fe ffc5 	bl	80c8 <_Bfree>
    913e:	2300      	movs	r3, #0
    9140:	63a3      	str	r3, [r4, #56]	; 0x38
    9142:	f1b7 0800 	subs.w	r8, r7, #0
    9146:	bfb4      	ite	lt
    9148:	2301      	movlt	r3, #1
    914a:	2300      	movge	r3, #0
    914c:	602b      	str	r3, [r5, #0]
    914e:	4bbe      	ldr	r3, [pc, #760]	; (9448 <_dtoa_r+0x338>)
    9150:	bfbc      	itt	lt
    9152:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    9156:	f8cd 800c 	strlt.w	r8, [sp, #12]
    915a:	ea33 0308 	bics.w	r3, r3, r8
    915e:	f000 809f 	beq.w	92a0 <_dtoa_r+0x190>
    9162:	ed9d 8b02 	vldr	d8, [sp, #8]
    9166:	eeb5 8b40 	vcmp.f64	d8, #0.0
    916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    916e:	d111      	bne.n	9194 <_dtoa_r+0x84>
    9170:	9a05      	ldr	r2, [sp, #20]
    9172:	2301      	movs	r3, #1
    9174:	6013      	str	r3, [r2, #0]
    9176:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9178:	2b00      	cmp	r3, #0
    917a:	f000 823f 	beq.w	95fc <_dtoa_r+0x4ec>
    917e:	4bb3      	ldr	r3, [pc, #716]	; (944c <_dtoa_r+0x33c>)
    9180:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9182:	6013      	str	r3, [r2, #0]
    9184:	3b01      	subs	r3, #1
    9186:	9300      	str	r3, [sp, #0]
    9188:	9800      	ldr	r0, [sp, #0]
    918a:	b00f      	add	sp, #60	; 0x3c
    918c:	ecbd 8b02 	vpop	{d8}
    9190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9194:	aa0c      	add	r2, sp, #48	; 0x30
    9196:	a90d      	add	r1, sp, #52	; 0x34
    9198:	4620      	mov	r0, r4
    919a:	eeb0 0b48 	vmov.f64	d0, d8
    919e:	f7ff fbab 	bl	88f8 <__d2b>
    91a2:	ea5f 5318 	movs.w	r3, r8, lsr #20
    91a6:	4605      	mov	r5, r0
    91a8:	f040 8092 	bne.w	92d0 <_dtoa_r+0x1c0>
    91ac:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    91b0:	440b      	add	r3, r1
    91b2:	f203 4232 	addw	r2, r3, #1074	; 0x432
    91b6:	2a20      	cmp	r2, #32
    91b8:	f340 82fa 	ble.w	97b0 <_dtoa_r+0x6a0>
    91bc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    91c0:	fa08 f802 	lsl.w	r8, r8, r2
    91c4:	f203 4212 	addw	r2, r3, #1042	; 0x412
    91c8:	40d6      	lsrs	r6, r2
    91ca:	ea48 0206 	orr.w	r2, r8, r6
    91ce:	ee07 2a10 	vmov	s14, r2
    91d2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    91d6:	1e58      	subs	r0, r3, #1
    91d8:	ee17 6a90 	vmov	r6, s15
    91dc:	ec53 2b17 	vmov	r2, r3, d7
    91e0:	f04f 0a01 	mov.w	sl, #1
    91e4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    91e8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 9430 <_dtoa_r+0x320>
    91ec:	ed9f 7b92 	vldr	d7, [pc, #584]	; 9438 <_dtoa_r+0x328>
    91f0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 9440 <_dtoa_r+0x330>
    91f4:	ee06 0a90 	vmov	s13, r0
    91f8:	ec43 2b12 	vmov	d2, r2, r3
    91fc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    9200:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    9204:	ee32 6b46 	vsub.f64	d6, d2, d6
    9208:	eea6 7b03 	vfma.f64	d7, d6, d3
    920c:	eea4 7b05 	vfma.f64	d7, d4, d5
    9210:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9214:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    921c:	ee16 7a90 	vmov	r7, s13
    9220:	d508      	bpl.n	9234 <_dtoa_r+0x124>
    9222:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    9226:	eeb4 6b47 	vcmp.f64	d6, d7
    922a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    922e:	bf18      	it	ne
    9230:	f107 37ff 	addne.w	r7, r7, #4294967295
    9234:	2f16      	cmp	r7, #22
    9236:	f200 8145 	bhi.w	94c4 <_dtoa_r+0x3b4>
    923a:	4b85      	ldr	r3, [pc, #532]	; (9450 <_dtoa_r+0x340>)
    923c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9240:	ed93 7b00 	vldr	d7, [r3]
    9244:	eeb4 8bc7 	vcmpe.f64	d8, d7
    9248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    924c:	d557      	bpl.n	92fe <_dtoa_r+0x1ee>
    924e:	1a09      	subs	r1, r1, r0
    9250:	2300      	movs	r3, #0
    9252:	f1b1 0801 	subs.w	r8, r1, #1
    9256:	f107 37ff 	add.w	r7, r7, #4294967295
    925a:	930a      	str	r3, [sp, #40]	; 0x28
    925c:	f100 8139 	bmi.w	94d2 <_dtoa_r+0x3c2>
    9260:	2300      	movs	r3, #0
    9262:	9306      	str	r3, [sp, #24]
    9264:	2f00      	cmp	r7, #0
    9266:	da52      	bge.n	930e <_dtoa_r+0x1fe>
    9268:	9b06      	ldr	r3, [sp, #24]
    926a:	9704      	str	r7, [sp, #16]
    926c:	1bdb      	subs	r3, r3, r7
    926e:	9306      	str	r3, [sp, #24]
    9270:	427b      	negs	r3, r7
    9272:	9308      	str	r3, [sp, #32]
    9274:	9b01      	ldr	r3, [sp, #4]
    9276:	2b09      	cmp	r3, #9
    9278:	f04f 0700 	mov.w	r7, #0
    927c:	d84e      	bhi.n	931c <_dtoa_r+0x20c>
    927e:	2b05      	cmp	r3, #5
    9280:	f340 829d 	ble.w	97be <_dtoa_r+0x6ae>
    9284:	3b04      	subs	r3, #4
    9286:	9301      	str	r3, [sp, #4]
    9288:	2600      	movs	r6, #0
    928a:	9b01      	ldr	r3, [sp, #4]
    928c:	1e9a      	subs	r2, r3, #2
    928e:	2a03      	cmp	r2, #3
    9290:	f200 8125 	bhi.w	94de <_dtoa_r+0x3ce>
    9294:	e8df f012 	tbh	[pc, r2, lsl #1]
    9298:	03a703aa 	.word	0x03a703aa
    929c:	037e039d 	.word	0x037e039d
    92a0:	9a05      	ldr	r2, [sp, #20]
    92a2:	f3c8 0813 	ubfx	r8, r8, #0, #20
    92a6:	f242 730f 	movw	r3, #9999	; 0x270f
    92aa:	ea58 0806 	orrs.w	r8, r8, r6
    92ae:	6013      	str	r3, [r2, #0]
    92b0:	d11e      	bne.n	92f0 <_dtoa_r+0x1e0>
    92b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    92b4:	2b00      	cmp	r3, #0
    92b6:	f000 8591 	beq.w	9ddc <_dtoa_r+0xccc>
    92ba:	4b66      	ldr	r3, [pc, #408]	; (9454 <_dtoa_r+0x344>)
    92bc:	9300      	str	r3, [sp, #0]
    92be:	3308      	adds	r3, #8
    92c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    92c2:	9800      	ldr	r0, [sp, #0]
    92c4:	6013      	str	r3, [r2, #0]
    92c6:	b00f      	add	sp, #60	; 0x3c
    92c8:	ecbd 8b02 	vpop	{d8}
    92cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92d0:	ee18 6a90 	vmov	r6, s17
    92d4:	f3c6 0613 	ubfx	r6, r6, #0, #20
    92d8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    92dc:	ec53 2b18 	vmov	r2, r3, d8
    92e0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    92e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    92e6:	f04f 0a00 	mov.w	sl, #0
    92ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    92ee:	e77b      	b.n	91e8 <_dtoa_r+0xd8>
    92f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    92f2:	2b00      	cmp	r3, #0
    92f4:	f040 833b 	bne.w	996e <_dtoa_r+0x85e>
    92f8:	4b57      	ldr	r3, [pc, #348]	; (9458 <_dtoa_r+0x348>)
    92fa:	9300      	str	r3, [sp, #0]
    92fc:	e744      	b.n	9188 <_dtoa_r+0x78>
    92fe:	1a09      	subs	r1, r1, r0
    9300:	2300      	movs	r3, #0
    9302:	f1b1 0801 	subs.w	r8, r1, #1
    9306:	930a      	str	r3, [sp, #40]	; 0x28
    9308:	f100 80e3 	bmi.w	94d2 <_dtoa_r+0x3c2>
    930c:	9306      	str	r3, [sp, #24]
    930e:	2300      	movs	r3, #0
    9310:	9308      	str	r3, [sp, #32]
    9312:	9b01      	ldr	r3, [sp, #4]
    9314:	9704      	str	r7, [sp, #16]
    9316:	2b09      	cmp	r3, #9
    9318:	44b8      	add	r8, r7
    931a:	d9b0      	bls.n	927e <_dtoa_r+0x16e>
    931c:	2300      	movs	r3, #0
    931e:	2601      	movs	r6, #1
    9320:	9301      	str	r3, [sp, #4]
    9322:	9607      	str	r6, [sp, #28]
    9324:	f04f 39ff 	mov.w	r9, #4294967295
    9328:	469b      	mov	fp, r3
    932a:	2100      	movs	r1, #0
    932c:	63e1      	str	r1, [r4, #60]	; 0x3c
    932e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    9332:	4620      	mov	r0, r4
    9334:	f7fe fea2 	bl	807c <_Balloc>
    9338:	9000      	str	r0, [sp, #0]
    933a:	2800      	cmp	r0, #0
    933c:	f000 8540 	beq.w	9dc0 <_dtoa_r+0xcb0>
    9340:	9b00      	ldr	r3, [sp, #0]
    9342:	63a3      	str	r3, [r4, #56]	; 0x38
    9344:	f1b9 0f0e 	cmp.w	r9, #14
    9348:	f200 80dc 	bhi.w	9504 <_dtoa_r+0x3f4>
    934c:	2e00      	cmp	r6, #0
    934e:	f000 80d9 	beq.w	9504 <_dtoa_r+0x3f4>
    9352:	9b04      	ldr	r3, [sp, #16]
    9354:	2b00      	cmp	r3, #0
    9356:	f340 83de 	ble.w	9b16 <_dtoa_r+0xa06>
    935a:	4a3d      	ldr	r2, [pc, #244]	; (9450 <_dtoa_r+0x340>)
    935c:	f003 010f 	and.w	r1, r3, #15
    9360:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    9364:	ed92 7b00 	vldr	d7, [r2]
    9368:	111a      	asrs	r2, r3, #4
    936a:	05db      	lsls	r3, r3, #23
    936c:	f140 8382 	bpl.w	9a74 <_dtoa_r+0x964>
    9370:	493a      	ldr	r1, [pc, #232]	; (945c <_dtoa_r+0x34c>)
    9372:	ed91 6b08 	vldr	d6, [r1, #32]
    9376:	f002 020f 	and.w	r2, r2, #15
    937a:	2003      	movs	r0, #3
    937c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    9380:	b15a      	cbz	r2, 939a <_dtoa_r+0x28a>
    9382:	4936      	ldr	r1, [pc, #216]	; (945c <_dtoa_r+0x34c>)
    9384:	07d6      	lsls	r6, r2, #31
    9386:	d504      	bpl.n	9392 <_dtoa_r+0x282>
    9388:	ed91 6b00 	vldr	d6, [r1]
    938c:	3001      	adds	r0, #1
    938e:	ee27 7b06 	vmul.f64	d7, d7, d6
    9392:	1052      	asrs	r2, r2, #1
    9394:	f101 0108 	add.w	r1, r1, #8
    9398:	d1f4      	bne.n	9384 <_dtoa_r+0x274>
    939a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    939e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93a0:	b13b      	cbz	r3, 93b2 <_dtoa_r+0x2a2>
    93a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    93a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    93aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ae:	f100 84ae 	bmi.w	9d0e <_dtoa_r+0xbfe>
    93b2:	ee07 0a90 	vmov	s15, r0
    93b6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    93ba:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    93be:	eea5 7b06 	vfma.f64	d7, d5, d6
    93c2:	ee17 2a90 	vmov	r2, s15
    93c6:	ec51 0b17 	vmov	r0, r1, d7
    93ca:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    93ce:	f1b9 0f00 	cmp.w	r9, #0
    93d2:	f000 8388 	beq.w	9ae6 <_dtoa_r+0x9d6>
    93d6:	9e04      	ldr	r6, [sp, #16]
    93d8:	464a      	mov	r2, r9
    93da:	9b07      	ldr	r3, [sp, #28]
    93dc:	2b00      	cmp	r3, #0
    93de:	f000 8447 	beq.w	9c70 <_dtoa_r+0xb60>
    93e2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    93e6:	4b1a      	ldr	r3, [pc, #104]	; (9450 <_dtoa_r+0x340>)
    93e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    93ec:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    93f0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    93f4:	ee36 7b47 	vsub.f64	d7, d6, d7
    93f8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    93fc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    9400:	ec41 0b16 	vmov	d6, r0, r1
    9404:	ee14 0a90 	vmov	r0, s9
    9408:	ee35 5b46 	vsub.f64	d5, d5, d6
    940c:	9900      	ldr	r1, [sp, #0]
    940e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    9412:	3030      	adds	r0, #48	; 0x30
    9414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9418:	f801 0b01 	strb.w	r0, [r1], #1
    941c:	f300 84ac 	bgt.w	9d78 <_dtoa_r+0xc68>
    9420:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    9424:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    9428:	f04f 0c00 	mov.w	ip, #0
    942c:	e031      	b.n	9492 <_dtoa_r+0x382>
    942e:	bf00      	nop
    9430:	636f4361 	.word	0x636f4361
    9434:	3fd287a7 	.word	0x3fd287a7
    9438:	8b60c8b3 	.word	0x8b60c8b3
    943c:	3fc68a28 	.word	0x3fc68a28
    9440:	509f79fb 	.word	0x509f79fb
    9444:	3fd34413 	.word	0x3fd34413
    9448:	7ff00000 	.word	0x7ff00000
    944c:	20000e51 	.word	0x20000e51
    9450:	200002a8 	.word	0x200002a8
    9454:	20000a20 	.word	0x20000a20
    9458:	20000a2c 	.word	0x20000a2c
    945c:	20000280 	.word	0x20000280
    9460:	f10c 0c01 	add.w	ip, ip, #1
    9464:	4594      	cmp	ip, r2
    9466:	da4d      	bge.n	9504 <_dtoa_r+0x3f4>
    9468:	ee27 7b04 	vmul.f64	d7, d7, d4
    946c:	ee25 5b04 	vmul.f64	d5, d5, d4
    9470:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9474:	ee16 3a90 	vmov	r3, s13
    9478:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    947c:	3330      	adds	r3, #48	; 0x30
    947e:	ee37 7b43 	vsub.f64	d7, d7, d3
    9482:	eeb4 7bc5 	vcmpe.f64	d7, d5
    9486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    948a:	f801 3b01 	strb.w	r3, [r1], #1
    948e:	f100 8473 	bmi.w	9d78 <_dtoa_r+0xc68>
    9492:	ee32 6b47 	vsub.f64	d6, d2, d7
    9496:	eeb4 6bc5 	vcmpe.f64	d6, d5
    949a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    949e:	d5df      	bpl.n	9460 <_dtoa_r+0x350>
    94a0:	9a00      	ldr	r2, [sp, #0]
    94a2:	9604      	str	r6, [sp, #16]
    94a4:	e002      	b.n	94ac <_dtoa_r+0x39c>
    94a6:	428a      	cmp	r2, r1
    94a8:	f000 8450 	beq.w	9d4c <_dtoa_r+0xc3c>
    94ac:	4689      	mov	r9, r1
    94ae:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    94b2:	2b39      	cmp	r3, #57	; 0x39
    94b4:	d0f7      	beq.n	94a6 <_dtoa_r+0x396>
    94b6:	3301      	adds	r3, #1
    94b8:	b2db      	uxtb	r3, r3
    94ba:	700b      	strb	r3, [r1, #0]
    94bc:	9b04      	ldr	r3, [sp, #16]
    94be:	3301      	adds	r3, #1
    94c0:	9304      	str	r3, [sp, #16]
    94c2:	e155      	b.n	9770 <_dtoa_r+0x660>
    94c4:	1a09      	subs	r1, r1, r0
    94c6:	2301      	movs	r3, #1
    94c8:	f1b1 0801 	subs.w	r8, r1, #1
    94cc:	930a      	str	r3, [sp, #40]	; 0x28
    94ce:	f57f aec7 	bpl.w	9260 <_dtoa_r+0x150>
    94d2:	f1c1 0301 	rsb	r3, r1, #1
    94d6:	9306      	str	r3, [sp, #24]
    94d8:	f04f 0800 	mov.w	r8, #0
    94dc:	e6c2      	b.n	9264 <_dtoa_r+0x154>
    94de:	2600      	movs	r6, #0
    94e0:	63e6      	str	r6, [r4, #60]	; 0x3c
    94e2:	4631      	mov	r1, r6
    94e4:	4620      	mov	r0, r4
    94e6:	f7fe fdc9 	bl	807c <_Balloc>
    94ea:	9000      	str	r0, [sp, #0]
    94ec:	2800      	cmp	r0, #0
    94ee:	f000 8467 	beq.w	9dc0 <_dtoa_r+0xcb0>
    94f2:	9b00      	ldr	r3, [sp, #0]
    94f4:	63a3      	str	r3, [r4, #56]	; 0x38
    94f6:	f04f 33ff 	mov.w	r3, #4294967295
    94fa:	930b      	str	r3, [sp, #44]	; 0x2c
    94fc:	4699      	mov	r9, r3
    94fe:	2301      	movs	r3, #1
    9500:	46b3      	mov	fp, r6
    9502:	9307      	str	r3, [sp, #28]
    9504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9506:	2a00      	cmp	r2, #0
    9508:	db55      	blt.n	95b6 <_dtoa_r+0x4a6>
    950a:	9904      	ldr	r1, [sp, #16]
    950c:	290e      	cmp	r1, #14
    950e:	dc52      	bgt.n	95b6 <_dtoa_r+0x4a6>
    9510:	4bb7      	ldr	r3, [pc, #732]	; (97f0 <_dtoa_r+0x6e0>)
    9512:	f1bb 0f00 	cmp.w	fp, #0
    9516:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    951a:	ed93 6b00 	vldr	d6, [r3]
    951e:	da15      	bge.n	954c <_dtoa_r+0x43c>
    9520:	f1b9 0f00 	cmp.w	r9, #0
    9524:	dc12      	bgt.n	954c <_dtoa_r+0x43c>
    9526:	f040 82f2 	bne.w	9b0e <_dtoa_r+0x9fe>
    952a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    952e:	ee26 7b07 	vmul.f64	d7, d6, d7
    9532:	eeb4 8bc7 	vcmpe.f64	d8, d7
    9536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    953a:	46ca      	mov	sl, r9
    953c:	464e      	mov	r6, r9
    953e:	f200 826d 	bhi.w	9a1c <_dtoa_r+0x90c>
    9542:	f8dd 8000 	ldr.w	r8, [sp]
    9546:	ea6f 0b0b 	mvn.w	fp, fp
    954a:	e270      	b.n	9a2e <_dtoa_r+0x91e>
    954c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    9550:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    9554:	9900      	ldr	r1, [sp, #0]
    9556:	ee17 3a10 	vmov	r3, s14
    955a:	f1b9 0f01 	cmp.w	r9, #1
    955e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    9562:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    9566:	f801 3b01 	strb.w	r3, [r1], #1
    956a:	eea5 8b46 	vfms.f64	d8, d5, d6
    956e:	f000 8334 	beq.w	9bda <_dtoa_r+0xaca>
    9572:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    9576:	2301      	movs	r3, #1
    9578:	e011      	b.n	959e <_dtoa_r+0x48e>
    957a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    957e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    9582:	3301      	adds	r3, #1
    9584:	ee17 2a10 	vmov	r2, s14
    9588:	454b      	cmp	r3, r9
    958a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    958e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    9592:	f801 2b01 	strb.w	r2, [r1], #1
    9596:	eea5 8b46 	vfms.f64	d8, d5, d6
    959a:	f000 831e 	beq.w	9bda <_dtoa_r+0xaca>
    959e:	ee28 8b04 	vmul.f64	d8, d8, d4
    95a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    95a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    95aa:	d1e6      	bne.n	957a <_dtoa_r+0x46a>
    95ac:	9b04      	ldr	r3, [sp, #16]
    95ae:	3301      	adds	r3, #1
    95b0:	9304      	str	r3, [sp, #16]
    95b2:	4689      	mov	r9, r1
    95b4:	e0dc      	b.n	9770 <_dtoa_r+0x660>
    95b6:	9b07      	ldr	r3, [sp, #28]
    95b8:	b343      	cbz	r3, 960c <_dtoa_r+0x4fc>
    95ba:	9b01      	ldr	r3, [sp, #4]
    95bc:	2b01      	cmp	r3, #1
    95be:	f340 8276 	ble.w	9aae <_dtoa_r+0x99e>
    95c2:	9b08      	ldr	r3, [sp, #32]
    95c4:	f109 3aff 	add.w	sl, r9, #4294967295
    95c8:	4553      	cmp	r3, sl
    95ca:	f280 823f 	bge.w	9a4c <_dtoa_r+0x93c>
    95ce:	9b08      	ldr	r3, [sp, #32]
    95d0:	f8cd a020 	str.w	sl, [sp, #32]
    95d4:	ebaa 0203 	sub.w	r2, sl, r3
    95d8:	4417      	add	r7, r2
    95da:	f04f 0a00 	mov.w	sl, #0
    95de:	f1b9 0f00 	cmp.w	r9, #0
    95e2:	f2c0 8325 	blt.w	9c30 <_dtoa_r+0xb20>
    95e6:	9b06      	ldr	r3, [sp, #24]
    95e8:	9309      	str	r3, [sp, #36]	; 0x24
    95ea:	444b      	add	r3, r9
    95ec:	44c8      	add	r8, r9
    95ee:	9306      	str	r3, [sp, #24]
    95f0:	2101      	movs	r1, #1
    95f2:	4620      	mov	r0, r4
    95f4:	f7fe fe6c 	bl	82d0 <__i2b>
    95f8:	4606      	mov	r6, r0
    95fa:	e00c      	b.n	9616 <_dtoa_r+0x506>
    95fc:	4b7d      	ldr	r3, [pc, #500]	; (97f4 <_dtoa_r+0x6e4>)
    95fe:	9300      	str	r3, [sp, #0]
    9600:	9800      	ldr	r0, [sp, #0]
    9602:	b00f      	add	sp, #60	; 0x3c
    9604:	ecbd 8b02 	vpop	{d8}
    9608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960c:	9b06      	ldr	r3, [sp, #24]
    960e:	f8dd a020 	ldr.w	sl, [sp, #32]
    9612:	9e07      	ldr	r6, [sp, #28]
    9614:	9309      	str	r3, [sp, #36]	; 0x24
    9616:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9618:	b16b      	cbz	r3, 9636 <_dtoa_r+0x526>
    961a:	f1b8 0f00 	cmp.w	r8, #0
    961e:	dd0a      	ble.n	9636 <_dtoa_r+0x526>
    9620:	4543      	cmp	r3, r8
    9622:	9906      	ldr	r1, [sp, #24]
    9624:	461a      	mov	r2, r3
    9626:	bfa8      	it	ge
    9628:	4642      	movge	r2, r8
    962a:	1a89      	subs	r1, r1, r2
    962c:	1a9b      	subs	r3, r3, r2
    962e:	9106      	str	r1, [sp, #24]
    9630:	9309      	str	r3, [sp, #36]	; 0x24
    9632:	eba8 0802 	sub.w	r8, r8, r2
    9636:	9b08      	ldr	r3, [sp, #32]
    9638:	b163      	cbz	r3, 9654 <_dtoa_r+0x544>
    963a:	9b07      	ldr	r3, [sp, #28]
    963c:	2b00      	cmp	r3, #0
    963e:	f000 82a7 	beq.w	9b90 <_dtoa_r+0xa80>
    9642:	f1ba 0f00 	cmp.w	sl, #0
    9646:	f300 8204 	bgt.w	9a52 <_dtoa_r+0x942>
    964a:	9b08      	ldr	r3, [sp, #32]
    964c:	ebb3 020a 	subs.w	r2, r3, sl
    9650:	f040 82ff 	bne.w	9c52 <_dtoa_r+0xb42>
    9654:	2101      	movs	r1, #1
    9656:	4620      	mov	r0, r4
    9658:	f7fe fe3a 	bl	82d0 <__i2b>
    965c:	2f00      	cmp	r7, #0
    965e:	4682      	mov	sl, r0
    9660:	f300 80af 	bgt.w	97c2 <_dtoa_r+0x6b2>
    9664:	9b01      	ldr	r3, [sp, #4]
    9666:	2b01      	cmp	r3, #1
    9668:	f340 8187 	ble.w	997a <_dtoa_r+0x86a>
    966c:	2300      	movs	r3, #0
    966e:	9308      	str	r3, [sp, #32]
    9670:	2001      	movs	r0, #1
    9672:	2f00      	cmp	r7, #0
    9674:	f040 80b1 	bne.w	97da <_dtoa_r+0x6ca>
    9678:	4440      	add	r0, r8
    967a:	f010 001f 	ands.w	r0, r0, #31
    967e:	f000 817a 	beq.w	9976 <_dtoa_r+0x866>
    9682:	f1c0 0220 	rsb	r2, r0, #32
    9686:	2a04      	cmp	r2, #4
    9688:	f300 8088 	bgt.w	979c <_dtoa_r+0x68c>
    968c:	f040 81f6 	bne.w	9a7c <_dtoa_r+0x96c>
    9690:	9b06      	ldr	r3, [sp, #24]
    9692:	2b00      	cmp	r3, #0
    9694:	dd05      	ble.n	96a2 <_dtoa_r+0x592>
    9696:	4629      	mov	r1, r5
    9698:	461a      	mov	r2, r3
    969a:	4620      	mov	r0, r4
    969c:	f7fe ff54 	bl	8548 <__lshift>
    96a0:	4605      	mov	r5, r0
    96a2:	f1b8 0f00 	cmp.w	r8, #0
    96a6:	dd05      	ble.n	96b4 <_dtoa_r+0x5a4>
    96a8:	4651      	mov	r1, sl
    96aa:	4642      	mov	r2, r8
    96ac:	4620      	mov	r0, r4
    96ae:	f7fe ff4b 	bl	8548 <__lshift>
    96b2:	4682      	mov	sl, r0
    96b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96b6:	2b00      	cmp	r3, #0
    96b8:	f040 813f 	bne.w	993a <_dtoa_r+0x82a>
    96bc:	f1b9 0f00 	cmp.w	r9, #0
    96c0:	f340 8125 	ble.w	990e <_dtoa_r+0x7fe>
    96c4:	9b07      	ldr	r3, [sp, #28]
    96c6:	2b00      	cmp	r3, #0
    96c8:	f040 80a3 	bne.w	9812 <_dtoa_r+0x702>
    96cc:	9b04      	ldr	r3, [sp, #16]
    96ce:	3301      	adds	r3, #1
    96d0:	9304      	str	r3, [sp, #16]
    96d2:	f8dd 8000 	ldr.w	r8, [sp]
    96d6:	2701      	movs	r7, #1
    96d8:	e007      	b.n	96ea <_dtoa_r+0x5da>
    96da:	4629      	mov	r1, r5
    96dc:	2300      	movs	r3, #0
    96de:	220a      	movs	r2, #10
    96e0:	4620      	mov	r0, r4
    96e2:	f7fe fcfb 	bl	80dc <__multadd>
    96e6:	3701      	adds	r7, #1
    96e8:	4605      	mov	r5, r0
    96ea:	4651      	mov	r1, sl
    96ec:	4628      	mov	r0, r5
    96ee:	f7ff fc7b 	bl	8fe8 <quorem>
    96f2:	45b9      	cmp	r9, r7
    96f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    96f8:	f808 0b01 	strb.w	r0, [r8], #1
    96fc:	dced      	bgt.n	96da <_dtoa_r+0x5ca>
    96fe:	f1b9 0f00 	cmp.w	r9, #0
    9702:	9a00      	ldr	r2, [sp, #0]
    9704:	bfcc      	ite	gt
    9706:	46cb      	movgt	fp, r9
    9708:	f04f 0b01 	movle.w	fp, #1
    970c:	4603      	mov	r3, r0
    970e:	4493      	add	fp, r2
    9710:	2700      	movs	r7, #0
    9712:	4629      	mov	r1, r5
    9714:	2201      	movs	r2, #1
    9716:	4620      	mov	r0, r4
    9718:	9301      	str	r3, [sp, #4]
    971a:	f7fe ff15 	bl	8548 <__lshift>
    971e:	4651      	mov	r1, sl
    9720:	4605      	mov	r5, r0
    9722:	f7fe ff89 	bl	8638 <__mcmp>
    9726:	2800      	cmp	r0, #0
    9728:	f340 81af 	ble.w	9a8a <_dtoa_r+0x97a>
    972c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    9730:	9a00      	ldr	r2, [sp, #0]
    9732:	f10b 3bff 	add.w	fp, fp, #4294967295
    9736:	e004      	b.n	9742 <_dtoa_r+0x632>
    9738:	455a      	cmp	r2, fp
    973a:	f000 81b1 	beq.w	9aa0 <_dtoa_r+0x990>
    973e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    9742:	2b39      	cmp	r3, #57	; 0x39
    9744:	f10b 0901 	add.w	r9, fp, #1
    9748:	d0f6      	beq.n	9738 <_dtoa_r+0x628>
    974a:	3301      	adds	r3, #1
    974c:	f88b 3000 	strb.w	r3, [fp]
    9750:	4651      	mov	r1, sl
    9752:	4620      	mov	r0, r4
    9754:	f7fe fcb8 	bl	80c8 <_Bfree>
    9758:	b156      	cbz	r6, 9770 <_dtoa_r+0x660>
    975a:	b12f      	cbz	r7, 9768 <_dtoa_r+0x658>
    975c:	42b7      	cmp	r7, r6
    975e:	d003      	beq.n	9768 <_dtoa_r+0x658>
    9760:	4639      	mov	r1, r7
    9762:	4620      	mov	r0, r4
    9764:	f7fe fcb0 	bl	80c8 <_Bfree>
    9768:	4631      	mov	r1, r6
    976a:	4620      	mov	r0, r4
    976c:	f7fe fcac 	bl	80c8 <_Bfree>
    9770:	4629      	mov	r1, r5
    9772:	4620      	mov	r0, r4
    9774:	f7fe fca8 	bl	80c8 <_Bfree>
    9778:	2300      	movs	r3, #0
    977a:	f889 3000 	strb.w	r3, [r9]
    977e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9782:	601a      	str	r2, [r3, #0]
    9784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9786:	2b00      	cmp	r3, #0
    9788:	f43f acfe 	beq.w	9188 <_dtoa_r+0x78>
    978c:	9800      	ldr	r0, [sp, #0]
    978e:	f8c3 9000 	str.w	r9, [r3]
    9792:	b00f      	add	sp, #60	; 0x3c
    9794:	ecbd 8b02 	vpop	{d8}
    9798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    979c:	f1c0 001c 	rsb	r0, r0, #28
    97a0:	9b06      	ldr	r3, [sp, #24]
    97a2:	4403      	add	r3, r0
    97a4:	9306      	str	r3, [sp, #24]
    97a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97a8:	4403      	add	r3, r0
    97aa:	9309      	str	r3, [sp, #36]	; 0x24
    97ac:	4480      	add	r8, r0
    97ae:	e76f      	b.n	9690 <_dtoa_r+0x580>
    97b0:	f1c2 0220 	rsb	r2, r2, #32
    97b4:	fa06 f202 	lsl.w	r2, r6, r2
    97b8:	ee07 2a10 	vmov	s14, r2
    97bc:	e509      	b.n	91d2 <_dtoa_r+0xc2>
    97be:	2601      	movs	r6, #1
    97c0:	e563      	b.n	928a <_dtoa_r+0x17a>
    97c2:	4601      	mov	r1, r0
    97c4:	463a      	mov	r2, r7
    97c6:	4620      	mov	r0, r4
    97c8:	f7fe fe5e 	bl	8488 <__pow5mult>
    97cc:	9b01      	ldr	r3, [sp, #4]
    97ce:	2b01      	cmp	r3, #1
    97d0:	4682      	mov	sl, r0
    97d2:	f340 81c5 	ble.w	9b60 <_dtoa_r+0xa50>
    97d6:	2300      	movs	r3, #0
    97d8:	9308      	str	r3, [sp, #32]
    97da:	f8da 2010 	ldr.w	r2, [sl, #16]
    97de:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    97e2:	6910      	ldr	r0, [r2, #16]
    97e4:	f7fe fd24 	bl	8230 <__hi0bits>
    97e8:	f1c0 0020 	rsb	r0, r0, #32
    97ec:	e744      	b.n	9678 <_dtoa_r+0x568>
    97ee:	bf00      	nop
    97f0:	200002a8 	.word	0x200002a8
    97f4:	20000e50 	.word	0x20000e50
    97f8:	4631      	mov	r1, r6
    97fa:	2300      	movs	r3, #0
    97fc:	220a      	movs	r2, #10
    97fe:	4620      	mov	r0, r4
    9800:	f7fe fc6c 	bl	80dc <__multadd>
    9804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9806:	2b00      	cmp	r3, #0
    9808:	4606      	mov	r6, r0
    980a:	f340 82ce 	ble.w	9daa <_dtoa_r+0xc9a>
    980e:	9704      	str	r7, [sp, #16]
    9810:	4699      	mov	r9, r3
    9812:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9814:	2b00      	cmp	r3, #0
    9816:	dd05      	ble.n	9824 <_dtoa_r+0x714>
    9818:	4631      	mov	r1, r6
    981a:	461a      	mov	r2, r3
    981c:	4620      	mov	r0, r4
    981e:	f7fe fe93 	bl	8548 <__lshift>
    9822:	4606      	mov	r6, r0
    9824:	9b08      	ldr	r3, [sp, #32]
    9826:	2b00      	cmp	r3, #0
    9828:	f040 81eb 	bne.w	9c02 <_dtoa_r+0xaf2>
    982c:	46b0      	mov	r8, r6
    982e:	9b02      	ldr	r3, [sp, #8]
    9830:	9f00      	ldr	r7, [sp, #0]
    9832:	f003 0201 	and.w	r2, r3, #1
    9836:	1e7b      	subs	r3, r7, #1
    9838:	444b      	add	r3, r9
    983a:	9308      	str	r3, [sp, #32]
    983c:	9b01      	ldr	r3, [sp, #4]
    983e:	920a      	str	r2, [sp, #40]	; 0x28
    9840:	4313      	orrs	r3, r2
    9842:	9309      	str	r3, [sp, #36]	; 0x24
    9844:	4651      	mov	r1, sl
    9846:	4628      	mov	r0, r5
    9848:	f7ff fbce 	bl	8fe8 <quorem>
    984c:	4631      	mov	r1, r6
    984e:	4683      	mov	fp, r0
    9850:	4628      	mov	r0, r5
    9852:	f7fe fef1 	bl	8638 <__mcmp>
    9856:	4642      	mov	r2, r8
    9858:	4651      	mov	r1, sl
    985a:	4681      	mov	r9, r0
    985c:	4620      	mov	r0, r4
    985e:	f7fe ff0d 	bl	867c <__mdiff>
    9862:	68c2      	ldr	r2, [r0, #12]
    9864:	4601      	mov	r1, r0
    9866:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    986a:	2a00      	cmp	r2, #0
    986c:	d142      	bne.n	98f4 <_dtoa_r+0x7e4>
    986e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    9872:	4628      	mov	r0, r5
    9874:	f7fe fee0 	bl	8638 <__mcmp>
    9878:	9906      	ldr	r1, [sp, #24]
    987a:	9002      	str	r0, [sp, #8]
    987c:	4620      	mov	r0, r4
    987e:	f7fe fc23 	bl	80c8 <_Bfree>
    9882:	9a02      	ldr	r2, [sp, #8]
    9884:	9b07      	ldr	r3, [sp, #28]
    9886:	b91a      	cbnz	r2, 9890 <_dtoa_r+0x780>
    9888:	9909      	ldr	r1, [sp, #36]	; 0x24
    988a:	2900      	cmp	r1, #0
    988c:	f000 827e 	beq.w	9d8c <_dtoa_r+0xc7c>
    9890:	f1b9 0f00 	cmp.w	r9, #0
    9894:	f2c0 8183 	blt.w	9b9e <_dtoa_r+0xa8e>
    9898:	9901      	ldr	r1, [sp, #4]
    989a:	ea49 0901 	orr.w	r9, r9, r1
    989e:	990a      	ldr	r1, [sp, #40]	; 0x28
    98a0:	ea51 0909 	orrs.w	r9, r1, r9
    98a4:	f000 817b 	beq.w	9b9e <_dtoa_r+0xa8e>
    98a8:	2a00      	cmp	r2, #0
    98aa:	f300 81c6 	bgt.w	9c3a <_dtoa_r+0xb2a>
    98ae:	9a08      	ldr	r2, [sp, #32]
    98b0:	703b      	strb	r3, [r7, #0]
    98b2:	f107 0901 	add.w	r9, r7, #1
    98b6:	4297      	cmp	r7, r2
    98b8:	46cb      	mov	fp, r9
    98ba:	f000 81c4 	beq.w	9c46 <_dtoa_r+0xb36>
    98be:	4629      	mov	r1, r5
    98c0:	2300      	movs	r3, #0
    98c2:	220a      	movs	r2, #10
    98c4:	4620      	mov	r0, r4
    98c6:	f7fe fc09 	bl	80dc <__multadd>
    98ca:	4546      	cmp	r6, r8
    98cc:	4605      	mov	r5, r0
    98ce:	4631      	mov	r1, r6
    98d0:	f04f 0300 	mov.w	r3, #0
    98d4:	f04f 020a 	mov.w	r2, #10
    98d8:	4620      	mov	r0, r4
    98da:	d012      	beq.n	9902 <_dtoa_r+0x7f2>
    98dc:	f7fe fbfe 	bl	80dc <__multadd>
    98e0:	4641      	mov	r1, r8
    98e2:	4606      	mov	r6, r0
    98e4:	2300      	movs	r3, #0
    98e6:	220a      	movs	r2, #10
    98e8:	4620      	mov	r0, r4
    98ea:	f7fe fbf7 	bl	80dc <__multadd>
    98ee:	464f      	mov	r7, r9
    98f0:	4680      	mov	r8, r0
    98f2:	e7a7      	b.n	9844 <_dtoa_r+0x734>
    98f4:	4620      	mov	r0, r4
    98f6:	9302      	str	r3, [sp, #8]
    98f8:	f7fe fbe6 	bl	80c8 <_Bfree>
    98fc:	9b02      	ldr	r3, [sp, #8]
    98fe:	2201      	movs	r2, #1
    9900:	e7c6      	b.n	9890 <_dtoa_r+0x780>
    9902:	f7fe fbeb 	bl	80dc <__multadd>
    9906:	464f      	mov	r7, r9
    9908:	4606      	mov	r6, r0
    990a:	4680      	mov	r8, r0
    990c:	e79a      	b.n	9844 <_dtoa_r+0x734>
    990e:	9b01      	ldr	r3, [sp, #4]
    9910:	2b02      	cmp	r3, #2
    9912:	dc71      	bgt.n	99f8 <_dtoa_r+0x8e8>
    9914:	9b07      	ldr	r3, [sp, #28]
    9916:	2b00      	cmp	r3, #0
    9918:	f47f af7b 	bne.w	9812 <_dtoa_r+0x702>
    991c:	9b04      	ldr	r3, [sp, #16]
    991e:	4651      	mov	r1, sl
    9920:	3301      	adds	r3, #1
    9922:	4628      	mov	r0, r5
    9924:	9304      	str	r3, [sp, #16]
    9926:	f7ff fb5f 	bl	8fe8 <quorem>
    992a:	f8dd b000 	ldr.w	fp, [sp]
    992e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    9932:	f80b 3b01 	strb.w	r3, [fp], #1
    9936:	2700      	movs	r7, #0
    9938:	e6eb      	b.n	9712 <_dtoa_r+0x602>
    993a:	4651      	mov	r1, sl
    993c:	4628      	mov	r0, r5
    993e:	f7fe fe7b 	bl	8638 <__mcmp>
    9942:	2800      	cmp	r0, #0
    9944:	f6bf aeba 	bge.w	96bc <_dtoa_r+0x5ac>
    9948:	4629      	mov	r1, r5
    994a:	2300      	movs	r3, #0
    994c:	220a      	movs	r2, #10
    994e:	4620      	mov	r0, r4
    9950:	f7fe fbc4 	bl	80dc <__multadd>
    9954:	9b04      	ldr	r3, [sp, #16]
    9956:	1e5f      	subs	r7, r3, #1
    9958:	9b07      	ldr	r3, [sp, #28]
    995a:	4605      	mov	r5, r0
    995c:	2b00      	cmp	r3, #0
    995e:	f47f af4b 	bne.w	97f8 <_dtoa_r+0x6e8>
    9962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9964:	2b00      	cmp	r3, #0
    9966:	f340 8218 	ble.w	9d9a <_dtoa_r+0xc8a>
    996a:	4699      	mov	r9, r3
    996c:	e6b1      	b.n	96d2 <_dtoa_r+0x5c2>
    996e:	4bbc      	ldr	r3, [pc, #752]	; (9c60 <_dtoa_r+0xb50>)
    9970:	9300      	str	r3, [sp, #0]
    9972:	3303      	adds	r3, #3
    9974:	e4a4      	b.n	92c0 <_dtoa_r+0x1b0>
    9976:	201c      	movs	r0, #28
    9978:	e712      	b.n	97a0 <_dtoa_r+0x690>
    997a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    997e:	2800      	cmp	r0, #0
    9980:	f47f ae74 	bne.w	966c <_dtoa_r+0x55c>
    9984:	f3c1 0213 	ubfx	r2, r1, #0, #20
    9988:	2a00      	cmp	r2, #0
    998a:	f000 80f4 	beq.w	9b76 <_dtoa_r+0xa66>
    998e:	9b02      	ldr	r3, [sp, #8]
    9990:	9308      	str	r3, [sp, #32]
    9992:	e66d      	b.n	9670 <_dtoa_r+0x560>
    9994:	2301      	movs	r3, #1
    9996:	9307      	str	r3, [sp, #28]
    9998:	9b04      	ldr	r3, [sp, #16]
    999a:	445b      	add	r3, fp
    999c:	f103 0901 	add.w	r9, r3, #1
    99a0:	f1b9 0f01 	cmp.w	r9, #1
    99a4:	46cc      	mov	ip, r9
    99a6:	930b      	str	r3, [sp, #44]	; 0x2c
    99a8:	bfb8      	it	lt
    99aa:	f04f 0c01 	movlt.w	ip, #1
    99ae:	2100      	movs	r1, #0
    99b0:	f1bc 0f17 	cmp.w	ip, #23
    99b4:	63e1      	str	r1, [r4, #60]	; 0x3c
    99b6:	f77f acbc 	ble.w	9332 <_dtoa_r+0x222>
    99ba:	2001      	movs	r0, #1
    99bc:	2204      	movs	r2, #4
    99be:	0052      	lsls	r2, r2, #1
    99c0:	f102 0314 	add.w	r3, r2, #20
    99c4:	4563      	cmp	r3, ip
    99c6:	4601      	mov	r1, r0
    99c8:	f100 0001 	add.w	r0, r0, #1
    99cc:	d9f7      	bls.n	99be <_dtoa_r+0x8ae>
    99ce:	63e1      	str	r1, [r4, #60]	; 0x3c
    99d0:	e4af      	b.n	9332 <_dtoa_r+0x222>
    99d2:	2301      	movs	r3, #1
    99d4:	9307      	str	r3, [sp, #28]
    99d6:	f1bb 0f00 	cmp.w	fp, #0
    99da:	dd52      	ble.n	9a82 <_dtoa_r+0x972>
    99dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    99e0:	46d9      	mov	r9, fp
    99e2:	46dc      	mov	ip, fp
    99e4:	e7e3      	b.n	99ae <_dtoa_r+0x89e>
    99e6:	2300      	movs	r3, #0
    99e8:	9307      	str	r3, [sp, #28]
    99ea:	e7d5      	b.n	9998 <_dtoa_r+0x888>
    99ec:	2300      	movs	r3, #0
    99ee:	9307      	str	r3, [sp, #28]
    99f0:	e7f1      	b.n	99d6 <_dtoa_r+0x8c6>
    99f2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    99f6:	9704      	str	r7, [sp, #16]
    99f8:	f1b9 0f00 	cmp.w	r9, #0
    99fc:	f47f ada1 	bne.w	9542 <_dtoa_r+0x432>
    9a00:	4651      	mov	r1, sl
    9a02:	464b      	mov	r3, r9
    9a04:	2205      	movs	r2, #5
    9a06:	4620      	mov	r0, r4
    9a08:	f7fe fb68 	bl	80dc <__multadd>
    9a0c:	4601      	mov	r1, r0
    9a0e:	4682      	mov	sl, r0
    9a10:	4628      	mov	r0, r5
    9a12:	f7fe fe11 	bl	8638 <__mcmp>
    9a16:	2800      	cmp	r0, #0
    9a18:	f77f ad93 	ble.w	9542 <_dtoa_r+0x432>
    9a1c:	9b04      	ldr	r3, [sp, #16]
    9a1e:	f103 0b01 	add.w	fp, r3, #1
    9a22:	9b00      	ldr	r3, [sp, #0]
    9a24:	2231      	movs	r2, #49	; 0x31
    9a26:	4698      	mov	r8, r3
    9a28:	f803 2b01 	strb.w	r2, [r3], #1
    9a2c:	9300      	str	r3, [sp, #0]
    9a2e:	4651      	mov	r1, sl
    9a30:	4620      	mov	r0, r4
    9a32:	f7fe fb49 	bl	80c8 <_Bfree>
    9a36:	f10b 0301 	add.w	r3, fp, #1
    9a3a:	f8dd 9000 	ldr.w	r9, [sp]
    9a3e:	9304      	str	r3, [sp, #16]
    9a40:	f8cd 8000 	str.w	r8, [sp]
    9a44:	2e00      	cmp	r6, #0
    9a46:	f47f ae8f 	bne.w	9768 <_dtoa_r+0x658>
    9a4a:	e691      	b.n	9770 <_dtoa_r+0x660>
    9a4c:	eba3 0a0a 	sub.w	sl, r3, sl
    9a50:	e5c5      	b.n	95de <_dtoa_r+0x4ce>
    9a52:	4631      	mov	r1, r6
    9a54:	4652      	mov	r2, sl
    9a56:	4620      	mov	r0, r4
    9a58:	f7fe fd16 	bl	8488 <__pow5mult>
    9a5c:	462a      	mov	r2, r5
    9a5e:	4601      	mov	r1, r0
    9a60:	4606      	mov	r6, r0
    9a62:	4620      	mov	r0, r4
    9a64:	f7fe fc62 	bl	832c <__multiply>
    9a68:	4629      	mov	r1, r5
    9a6a:	4605      	mov	r5, r0
    9a6c:	4620      	mov	r0, r4
    9a6e:	f7fe fb2b 	bl	80c8 <_Bfree>
    9a72:	e5ea      	b.n	964a <_dtoa_r+0x53a>
    9a74:	2002      	movs	r0, #2
    9a76:	eeb0 5b48 	vmov.f64	d5, d8
    9a7a:	e481      	b.n	9380 <_dtoa_r+0x270>
    9a7c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    9a80:	e68e      	b.n	97a0 <_dtoa_r+0x690>
    9a82:	f04f 0b01 	mov.w	fp, #1
    9a86:	46d9      	mov	r9, fp
    9a88:	e44f      	b.n	932a <_dtoa_r+0x21a>
    9a8a:	d103      	bne.n	9a94 <_dtoa_r+0x984>
    9a8c:	9b01      	ldr	r3, [sp, #4]
    9a8e:	07db      	lsls	r3, r3, #31
    9a90:	f53f ae4c 	bmi.w	972c <_dtoa_r+0x61c>
    9a94:	46d9      	mov	r9, fp
    9a96:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    9a9a:	2b30      	cmp	r3, #48	; 0x30
    9a9c:	d0fa      	beq.n	9a94 <_dtoa_r+0x984>
    9a9e:	e657      	b.n	9750 <_dtoa_r+0x640>
    9aa0:	9b04      	ldr	r3, [sp, #16]
    9aa2:	9a00      	ldr	r2, [sp, #0]
    9aa4:	3301      	adds	r3, #1
    9aa6:	9304      	str	r3, [sp, #16]
    9aa8:	2331      	movs	r3, #49	; 0x31
    9aaa:	7013      	strb	r3, [r2, #0]
    9aac:	e650      	b.n	9750 <_dtoa_r+0x640>
    9aae:	f1ba 0f00 	cmp.w	sl, #0
    9ab2:	f000 8123 	beq.w	9cfc <_dtoa_r+0xbec>
    9ab6:	f202 4233 	addw	r2, r2, #1075	; 0x433
    9aba:	9b06      	ldr	r3, [sp, #24]
    9abc:	9309      	str	r3, [sp, #36]	; 0x24
    9abe:	4413      	add	r3, r2
    9ac0:	f8dd a020 	ldr.w	sl, [sp, #32]
    9ac4:	9306      	str	r3, [sp, #24]
    9ac6:	4490      	add	r8, r2
    9ac8:	e592      	b.n	95f0 <_dtoa_r+0x4e0>
    9aca:	ee07 0a90 	vmov	s15, r0
    9ace:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    9ad2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    9ad6:	eea6 5b07 	vfma.f64	d5, d6, d7
    9ada:	ee15 2a90 	vmov	r2, s11
    9ade:	ec51 0b15 	vmov	r0, r1, d5
    9ae2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    9ae6:	ec41 0b15 	vmov	d5, r0, r1
    9aea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    9aee:	ee36 7b47 	vsub.f64	d7, d6, d7
    9af2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    9af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9afa:	f300 8137 	bgt.w	9d6c <_dtoa_r+0xc5c>
    9afe:	eeb1 5b45 	vneg.f64	d5, d5
    9b02:	eeb4 7bc5 	vcmpe.f64	d7, d5
    9b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b0a:	f57f acfb 	bpl.w	9504 <_dtoa_r+0x3f4>
    9b0e:	f04f 0a00 	mov.w	sl, #0
    9b12:	4656      	mov	r6, sl
    9b14:	e515      	b.n	9542 <_dtoa_r+0x432>
    9b16:	f000 80f5 	beq.w	9d04 <_dtoa_r+0xbf4>
    9b1a:	9b04      	ldr	r3, [sp, #16]
    9b1c:	4951      	ldr	r1, [pc, #324]	; (9c64 <_dtoa_r+0xb54>)
    9b1e:	425a      	negs	r2, r3
    9b20:	f002 000f 	and.w	r0, r2, #15
    9b24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    9b28:	ed91 6b00 	vldr	d6, [r1]
    9b2c:	1112      	asrs	r2, r2, #4
    9b2e:	ee28 6b06 	vmul.f64	d6, d8, d6
    9b32:	f000 8142 	beq.w	9dba <_dtoa_r+0xcaa>
    9b36:	eeb0 7b46 	vmov.f64	d7, d6
    9b3a:	494b      	ldr	r1, [pc, #300]	; (9c68 <_dtoa_r+0xb58>)
    9b3c:	2600      	movs	r6, #0
    9b3e:	2002      	movs	r0, #2
    9b40:	07d3      	lsls	r3, r2, #31
    9b42:	d505      	bpl.n	9b50 <_dtoa_r+0xa40>
    9b44:	ed91 5b00 	vldr	d5, [r1]
    9b48:	3001      	adds	r0, #1
    9b4a:	2601      	movs	r6, #1
    9b4c:	ee27 7b05 	vmul.f64	d7, d7, d5
    9b50:	1052      	asrs	r2, r2, #1
    9b52:	f101 0108 	add.w	r1, r1, #8
    9b56:	d1f3      	bne.n	9b40 <_dtoa_r+0xa30>
    9b58:	2e00      	cmp	r6, #0
    9b5a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    9b5e:	e41e      	b.n	939e <_dtoa_r+0x28e>
    9b60:	9b02      	ldr	r3, [sp, #8]
    9b62:	2b00      	cmp	r3, #0
    9b64:	f47f ae37 	bne.w	97d6 <_dtoa_r+0x6c6>
    9b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9b6c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    9b70:	2a00      	cmp	r2, #0
    9b72:	f040 8137 	bne.w	9de4 <_dtoa_r+0xcd4>
    9b76:	4a3d      	ldr	r2, [pc, #244]	; (9c6c <_dtoa_r+0xb5c>)
    9b78:	400a      	ands	r2, r1
    9b7a:	2a00      	cmp	r2, #0
    9b7c:	f000 80fa 	beq.w	9d74 <_dtoa_r+0xc64>
    9b80:	9b06      	ldr	r3, [sp, #24]
    9b82:	3301      	adds	r3, #1
    9b84:	9306      	str	r3, [sp, #24]
    9b86:	2301      	movs	r3, #1
    9b88:	f108 0801 	add.w	r8, r8, #1
    9b8c:	9308      	str	r3, [sp, #32]
    9b8e:	e56f      	b.n	9670 <_dtoa_r+0x560>
    9b90:	4629      	mov	r1, r5
    9b92:	9a08      	ldr	r2, [sp, #32]
    9b94:	4620      	mov	r0, r4
    9b96:	f7fe fc77 	bl	8488 <__pow5mult>
    9b9a:	4605      	mov	r5, r0
    9b9c:	e55a      	b.n	9654 <_dtoa_r+0x544>
    9b9e:	2a00      	cmp	r2, #0
    9ba0:	dd12      	ble.n	9bc8 <_dtoa_r+0xab8>
    9ba2:	4629      	mov	r1, r5
    9ba4:	2201      	movs	r2, #1
    9ba6:	4620      	mov	r0, r4
    9ba8:	9301      	str	r3, [sp, #4]
    9baa:	f7fe fccd 	bl	8548 <__lshift>
    9bae:	4651      	mov	r1, sl
    9bb0:	4605      	mov	r5, r0
    9bb2:	f7fe fd41 	bl	8638 <__mcmp>
    9bb6:	2800      	cmp	r0, #0
    9bb8:	9b01      	ldr	r3, [sp, #4]
    9bba:	f340 80e1 	ble.w	9d80 <_dtoa_r+0xc70>
    9bbe:	2b39      	cmp	r3, #57	; 0x39
    9bc0:	f000 80ca 	beq.w	9d58 <_dtoa_r+0xc48>
    9bc4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    9bc8:	46b9      	mov	r9, r7
    9bca:	f809 3b01 	strb.w	r3, [r9], #1
    9bce:	9b04      	ldr	r3, [sp, #16]
    9bd0:	3301      	adds	r3, #1
    9bd2:	4637      	mov	r7, r6
    9bd4:	9304      	str	r3, [sp, #16]
    9bd6:	4646      	mov	r6, r8
    9bd8:	e5ba      	b.n	9750 <_dtoa_r+0x640>
    9bda:	ee38 8b08 	vadd.f64	d8, d8, d8
    9bde:	eeb4 8bc6 	vcmpe.f64	d8, d6
    9be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9be6:	dc0a      	bgt.n	9bfe <_dtoa_r+0xaee>
    9be8:	eeb4 8b46 	vcmp.f64	d8, d6
    9bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bf0:	f47f acdc 	bne.w	95ac <_dtoa_r+0x49c>
    9bf4:	ee17 3a10 	vmov	r3, s14
    9bf8:	07d8      	lsls	r0, r3, #31
    9bfa:	f57f acd7 	bpl.w	95ac <_dtoa_r+0x49c>
    9bfe:	9a00      	ldr	r2, [sp, #0]
    9c00:	e454      	b.n	94ac <_dtoa_r+0x39c>
    9c02:	6871      	ldr	r1, [r6, #4]
    9c04:	4620      	mov	r0, r4
    9c06:	f7fe fa39 	bl	807c <_Balloc>
    9c0a:	4607      	mov	r7, r0
    9c0c:	2800      	cmp	r0, #0
    9c0e:	f000 80de 	beq.w	9dce <_dtoa_r+0xcbe>
    9c12:	6933      	ldr	r3, [r6, #16]
    9c14:	3302      	adds	r3, #2
    9c16:	009a      	lsls	r2, r3, #2
    9c18:	f106 010c 	add.w	r1, r6, #12
    9c1c:	300c      	adds	r0, #12
    9c1e:	f7f8 fe07 	bl	2830 <memcpy>
    9c22:	4639      	mov	r1, r7
    9c24:	2201      	movs	r2, #1
    9c26:	4620      	mov	r0, r4
    9c28:	f7fe fc8e 	bl	8548 <__lshift>
    9c2c:	4680      	mov	r8, r0
    9c2e:	e5fe      	b.n	982e <_dtoa_r+0x71e>
    9c30:	9b06      	ldr	r3, [sp, #24]
    9c32:	eba3 0309 	sub.w	r3, r3, r9
    9c36:	9309      	str	r3, [sp, #36]	; 0x24
    9c38:	e4da      	b.n	95f0 <_dtoa_r+0x4e0>
    9c3a:	2b39      	cmp	r3, #57	; 0x39
    9c3c:	f000 808c 	beq.w	9d58 <_dtoa_r+0xc48>
    9c40:	46b9      	mov	r9, r7
    9c42:	3301      	adds	r3, #1
    9c44:	e7c1      	b.n	9bca <_dtoa_r+0xaba>
    9c46:	9a04      	ldr	r2, [sp, #16]
    9c48:	3201      	adds	r2, #1
    9c4a:	4637      	mov	r7, r6
    9c4c:	9204      	str	r2, [sp, #16]
    9c4e:	4646      	mov	r6, r8
    9c50:	e55f      	b.n	9712 <_dtoa_r+0x602>
    9c52:	4629      	mov	r1, r5
    9c54:	4620      	mov	r0, r4
    9c56:	f7fe fc17 	bl	8488 <__pow5mult>
    9c5a:	4605      	mov	r5, r0
    9c5c:	e4fa      	b.n	9654 <_dtoa_r+0x544>
    9c5e:	bf00      	nop
    9c60:	20000a2c 	.word	0x20000a2c
    9c64:	200002a8 	.word	0x200002a8
    9c68:	20000280 	.word	0x20000280
    9c6c:	7ff00000 	.word	0x7ff00000
    9c70:	4b5e      	ldr	r3, [pc, #376]	; (9dec <_dtoa_r+0xcdc>)
    9c72:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    9c76:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    9c7a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    9c7e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    9c82:	ee36 7b47 	vsub.f64	d7, d6, d7
    9c86:	ec41 0b16 	vmov	d6, r0, r1
    9c8a:	ee15 1a90 	vmov	r1, s11
    9c8e:	ee23 3b06 	vmul.f64	d3, d3, d6
    9c92:	9800      	ldr	r0, [sp, #0]
    9c94:	3130      	adds	r1, #48	; 0x30
    9c96:	2a01      	cmp	r2, #1
    9c98:	f800 1b01 	strb.w	r1, [r0], #1
    9c9c:	f000 8083 	beq.w	9da6 <_dtoa_r+0xc96>
    9ca0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    9ca4:	9b00      	ldr	r3, [sp, #0]
    9ca6:	1899      	adds	r1, r3, r2
    9ca8:	ee27 7b04 	vmul.f64	d7, d7, d4
    9cac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9cb0:	ee16 3a90 	vmov	r3, s13
    9cb4:	3330      	adds	r3, #48	; 0x30
    9cb6:	f800 3b01 	strb.w	r3, [r0], #1
    9cba:	4281      	cmp	r1, r0
    9cbc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    9cc0:	ee37 7b45 	vsub.f64	d7, d7, d5
    9cc4:	d1f0      	bne.n	9ca8 <_dtoa_r+0xb98>
    9cc6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    9cca:	ee33 5b06 	vadd.f64	d5, d3, d6
    9cce:	eeb4 5bc7 	vcmpe.f64	d5, d7
    9cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9cd6:	f53f abe3 	bmi.w	94a0 <_dtoa_r+0x390>
    9cda:	ee36 6b43 	vsub.f64	d6, d6, d3
    9cde:	eeb4 6bc7 	vcmpe.f64	d6, d7
    9ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ce6:	f77f ac0d 	ble.w	9504 <_dtoa_r+0x3f4>
    9cea:	4689      	mov	r9, r1
    9cec:	3901      	subs	r1, #1
    9cee:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    9cf2:	2b30      	cmp	r3, #48	; 0x30
    9cf4:	d0f9      	beq.n	9cea <_dtoa_r+0xbda>
    9cf6:	1c73      	adds	r3, r6, #1
    9cf8:	9304      	str	r3, [sp, #16]
    9cfa:	e539      	b.n	9770 <_dtoa_r+0x660>
    9cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9cfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    9d02:	e6da      	b.n	9aba <_dtoa_r+0x9aa>
    9d04:	2002      	movs	r0, #2
    9d06:	eeb0 6b48 	vmov.f64	d6, d8
    9d0a:	f7ff bb48 	b.w	939e <_dtoa_r+0x28e>
    9d0e:	f1b9 0f00 	cmp.w	r9, #0
    9d12:	f43f aeda 	beq.w	9aca <_dtoa_r+0x9ba>
    9d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d18:	2a00      	cmp	r2, #0
    9d1a:	f77f abf3 	ble.w	9504 <_dtoa_r+0x3f4>
    9d1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    9d22:	ee26 6b04 	vmul.f64	d6, d6, d4
    9d26:	3001      	adds	r0, #1
    9d28:	ee07 0a90 	vmov	s15, r0
    9d2c:	9b04      	ldr	r3, [sp, #16]
    9d2e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    9d32:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    9d36:	eea6 7b05 	vfma.f64	d7, d6, d5
    9d3a:	ee17 ca90 	vmov	ip, s15
    9d3e:	ec51 0b17 	vmov	r0, r1, d7
    9d42:	1e5e      	subs	r6, r3, #1
    9d44:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    9d48:	f7ff bb47 	b.w	93da <_dtoa_r+0x2ca>
    9d4c:	9b04      	ldr	r3, [sp, #16]
    9d4e:	3301      	adds	r3, #1
    9d50:	9304      	str	r3, [sp, #16]
    9d52:	2331      	movs	r3, #49	; 0x31
    9d54:	f7ff bbb1 	b.w	94ba <_dtoa_r+0x3aa>
    9d58:	9b04      	ldr	r3, [sp, #16]
    9d5a:	46bb      	mov	fp, r7
    9d5c:	3301      	adds	r3, #1
    9d5e:	9304      	str	r3, [sp, #16]
    9d60:	2339      	movs	r3, #57	; 0x39
    9d62:	4637      	mov	r7, r6
    9d64:	f80b 3b01 	strb.w	r3, [fp], #1
    9d68:	4646      	mov	r6, r8
    9d6a:	e4e1      	b.n	9730 <_dtoa_r+0x620>
    9d6c:	f04f 0a00 	mov.w	sl, #0
    9d70:	4656      	mov	r6, sl
    9d72:	e653      	b.n	9a1c <_dtoa_r+0x90c>
    9d74:	9208      	str	r2, [sp, #32]
    9d76:	e47b      	b.n	9670 <_dtoa_r+0x560>
    9d78:	1c73      	adds	r3, r6, #1
    9d7a:	9304      	str	r3, [sp, #16]
    9d7c:	4689      	mov	r9, r1
    9d7e:	e4f7      	b.n	9770 <_dtoa_r+0x660>
    9d80:	f47f af22 	bne.w	9bc8 <_dtoa_r+0xab8>
    9d84:	07da      	lsls	r2, r3, #31
    9d86:	f57f af1f 	bpl.w	9bc8 <_dtoa_r+0xab8>
    9d8a:	e718      	b.n	9bbe <_dtoa_r+0xaae>
    9d8c:	2b39      	cmp	r3, #57	; 0x39
    9d8e:	d0e3      	beq.n	9d58 <_dtoa_r+0xc48>
    9d90:	f1b9 0f00 	cmp.w	r9, #0
    9d94:	f73f af16 	bgt.w	9bc4 <_dtoa_r+0xab4>
    9d98:	e716      	b.n	9bc8 <_dtoa_r+0xab8>
    9d9a:	9b01      	ldr	r3, [sp, #4]
    9d9c:	2b02      	cmp	r3, #2
    9d9e:	f73f ae28 	bgt.w	99f2 <_dtoa_r+0x8e2>
    9da2:	9704      	str	r7, [sp, #16]
    9da4:	e5ba      	b.n	991c <_dtoa_r+0x80c>
    9da6:	4601      	mov	r1, r0
    9da8:	e78d      	b.n	9cc6 <_dtoa_r+0xbb6>
    9daa:	9b01      	ldr	r3, [sp, #4]
    9dac:	2b02      	cmp	r3, #2
    9dae:	f73f ae20 	bgt.w	99f2 <_dtoa_r+0x8e2>
    9db2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    9db6:	9704      	str	r7, [sp, #16]
    9db8:	e52b      	b.n	9812 <_dtoa_r+0x702>
    9dba:	2002      	movs	r0, #2
    9dbc:	f7ff baef 	b.w	939e <_dtoa_r+0x28e>
    9dc0:	4b0b      	ldr	r3, [pc, #44]	; (9df0 <_dtoa_r+0xce0>)
    9dc2:	480c      	ldr	r0, [pc, #48]	; (9df4 <_dtoa_r+0xce4>)
    9dc4:	2200      	movs	r2, #0
    9dc6:	f240 11af 	movw	r1, #431	; 0x1af
    9dca:	f7ff f8b1 	bl	8f30 <__assert_func>
    9dce:	4b08      	ldr	r3, [pc, #32]	; (9df0 <_dtoa_r+0xce0>)
    9dd0:	4808      	ldr	r0, [pc, #32]	; (9df4 <_dtoa_r+0xce4>)
    9dd2:	463a      	mov	r2, r7
    9dd4:	f240 21ef 	movw	r1, #751	; 0x2ef
    9dd8:	f7ff f8aa 	bl	8f30 <__assert_func>
    9ddc:	4b06      	ldr	r3, [pc, #24]	; (9df8 <_dtoa_r+0xce8>)
    9dde:	9300      	str	r3, [sp, #0]
    9de0:	f7ff b9d2 	b.w	9188 <_dtoa_r+0x78>
    9de4:	9b02      	ldr	r3, [sp, #8]
    9de6:	9308      	str	r3, [sp, #32]
    9de8:	e4f7      	b.n	97da <_dtoa_r+0x6ca>
    9dea:	bf00      	nop
    9dec:	200002a8 	.word	0x200002a8
    9df0:	20000720 	.word	0x20000720
    9df4:	20000a30 	.word	0x20000a30
    9df8:	20000a20 	.word	0x20000a20

00009dfc <_wcrtomb_r>:
    9dfc:	b570      	push	{r4, r5, r6, lr}
    9dfe:	4605      	mov	r5, r0
    9e00:	b084      	sub	sp, #16
    9e02:	b15b      	cbz	r3, 9e1c <_wcrtomb_r+0x20>
    9e04:	461c      	mov	r4, r3
    9e06:	b169      	cbz	r1, 9e24 <_wcrtomb_r+0x28>
    9e08:	4b0e      	ldr	r3, [pc, #56]	; (9e44 <_wcrtomb_r+0x48>)
    9e0a:	4628      	mov	r0, r5
    9e0c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    9e10:	4623      	mov	r3, r4
    9e12:	47b0      	blx	r6
    9e14:	1c43      	adds	r3, r0, #1
    9e16:	d00f      	beq.n	9e38 <_wcrtomb_r+0x3c>
    9e18:	b004      	add	sp, #16
    9e1a:	bd70      	pop	{r4, r5, r6, pc}
    9e1c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    9e20:	2900      	cmp	r1, #0
    9e22:	d1f1      	bne.n	9e08 <_wcrtomb_r+0xc>
    9e24:	4a07      	ldr	r2, [pc, #28]	; (9e44 <_wcrtomb_r+0x48>)
    9e26:	4623      	mov	r3, r4
    9e28:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    9e2c:	4628      	mov	r0, r5
    9e2e:	460a      	mov	r2, r1
    9e30:	a901      	add	r1, sp, #4
    9e32:	47b0      	blx	r6
    9e34:	1c43      	adds	r3, r0, #1
    9e36:	d1ef      	bne.n	9e18 <_wcrtomb_r+0x1c>
    9e38:	2200      	movs	r2, #0
    9e3a:	238a      	movs	r3, #138	; 0x8a
    9e3c:	6022      	str	r2, [r4, #0]
    9e3e:	602b      	str	r3, [r5, #0]
    9e40:	b004      	add	sp, #16
    9e42:	bd70      	pop	{r4, r5, r6, pc}
    9e44:	2000113c 	.word	0x2000113c

00009e48 <_wcsrtombs_r>:
    9e48:	b510      	push	{r4, lr}
    9e4a:	b082      	sub	sp, #8
    9e4c:	9c04      	ldr	r4, [sp, #16]
    9e4e:	e9cd 3400 	strd	r3, r4, [sp]
    9e52:	f04f 33ff 	mov.w	r3, #4294967295
    9e56:	f001 fb47 	bl	b4e8 <_wcsnrtombs_r>
    9e5a:	b002      	add	sp, #8
    9e5c:	bd10      	pop	{r4, pc}
    9e5e:	bf00      	nop

00009e60 <fiprintf>:
    9e60:	b40e      	push	{r1, r2, r3}
    9e62:	b510      	push	{r4, lr}
    9e64:	b083      	sub	sp, #12
    9e66:	ab05      	add	r3, sp, #20
    9e68:	4c06      	ldr	r4, [pc, #24]	; (9e84 <fiprintf+0x24>)
    9e6a:	f853 2b04 	ldr.w	r2, [r3], #4
    9e6e:	9301      	str	r3, [sp, #4]
    9e70:	4601      	mov	r1, r0
    9e72:	6820      	ldr	r0, [r4, #0]
    9e74:	f000 f844 	bl	9f00 <_vfiprintf_r>
    9e78:	b003      	add	sp, #12
    9e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e7e:	b003      	add	sp, #12
    9e80:	4770      	bx	lr
    9e82:	bf00      	nop
    9e84:	200016c4 	.word	0x200016c4

00009e88 <__sprint_r.part.0>:
    9e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e8c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    9e8e:	049c      	lsls	r4, r3, #18
    9e90:	4690      	mov	r8, r2
    9e92:	d52d      	bpl.n	9ef0 <__sprint_r.part.0+0x68>
    9e94:	6893      	ldr	r3, [r2, #8]
    9e96:	6812      	ldr	r2, [r2, #0]
    9e98:	b343      	cbz	r3, 9eec <__sprint_r.part.0+0x64>
    9e9a:	468b      	mov	fp, r1
    9e9c:	4606      	mov	r6, r0
    9e9e:	f102 0908 	add.w	r9, r2, #8
    9ea2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    9ea6:	ea5f 079a 	movs.w	r7, sl, lsr #2
    9eaa:	d015      	beq.n	9ed8 <__sprint_r.part.0+0x50>
    9eac:	3d04      	subs	r5, #4
    9eae:	2400      	movs	r4, #0
    9eb0:	e001      	b.n	9eb6 <__sprint_r.part.0+0x2e>
    9eb2:	42a7      	cmp	r7, r4
    9eb4:	d00e      	beq.n	9ed4 <__sprint_r.part.0+0x4c>
    9eb6:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9eba:	465a      	mov	r2, fp
    9ebc:	4630      	mov	r0, r6
    9ebe:	f001 fa5b 	bl	b378 <_fputwc_r>
    9ec2:	1c43      	adds	r3, r0, #1
    9ec4:	f104 0401 	add.w	r4, r4, #1
    9ec8:	d1f3      	bne.n	9eb2 <__sprint_r.part.0+0x2a>
    9eca:	2300      	movs	r3, #0
    9ecc:	e9c8 3301 	strd	r3, r3, [r8, #4]
    9ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ed4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    9ed8:	f02a 0a03 	bic.w	sl, sl, #3
    9edc:	eba3 030a 	sub.w	r3, r3, sl
    9ee0:	f8c8 3008 	str.w	r3, [r8, #8]
    9ee4:	f109 0908 	add.w	r9, r9, #8
    9ee8:	2b00      	cmp	r3, #0
    9eea:	d1da      	bne.n	9ea2 <__sprint_r.part.0+0x1a>
    9eec:	2000      	movs	r0, #0
    9eee:	e7ec      	b.n	9eca <__sprint_r.part.0+0x42>
    9ef0:	f001 f80c 	bl	af0c <__sfvwrite_r>
    9ef4:	2300      	movs	r3, #0
    9ef6:	e9c8 3301 	strd	r3, r3, [r8, #4]
    9efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9efe:	bf00      	nop

00009f00 <_vfiprintf_r>:
    9f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f04:	ed2d 8b02 	vpush	{d8}
    9f08:	b0c5      	sub	sp, #276	; 0x114
    9f0a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    9f0e:	4683      	mov	fp, r0
    9f10:	ee08 1a10 	vmov	s16, r1
    9f14:	4616      	mov	r6, r2
    9f16:	2100      	movs	r1, #0
    9f18:	2208      	movs	r2, #8
    9f1a:	4650      	mov	r0, sl
    9f1c:	461c      	mov	r4, r3
    9f1e:	9307      	str	r3, [sp, #28]
    9f20:	f7fc fcb6 	bl	6890 <memset>
    9f24:	f1bb 0f00 	cmp.w	fp, #0
    9f28:	d004      	beq.n	9f34 <_vfiprintf_r+0x34>
    9f2a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    9f2e:	2b00      	cmp	r3, #0
    9f30:	f000 86a0 	beq.w	ac74 <_vfiprintf_r+0xd74>
    9f34:	ee18 2a10 	vmov	r2, s16
    9f38:	6e53      	ldr	r3, [r2, #100]	; 0x64
    9f3a:	07db      	lsls	r3, r3, #31
    9f3c:	f140 8513 	bpl.w	a966 <_vfiprintf_r+0xa66>
    9f40:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    9f44:	b28a      	uxth	r2, r1
    9f46:	0495      	lsls	r5, r2, #18
    9f48:	d40b      	bmi.n	9f62 <_vfiprintf_r+0x62>
    9f4a:	ee18 3a10 	vmov	r3, s16
    9f4e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    9f52:	8199      	strh	r1, [r3, #12]
    9f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9f56:	b28a      	uxth	r2, r1
    9f58:	ee18 1a10 	vmov	r1, s16
    9f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9f60:	664b      	str	r3, [r1, #100]	; 0x64
    9f62:	0710      	lsls	r0, r2, #28
    9f64:	f140 8105 	bpl.w	a172 <_vfiprintf_r+0x272>
    9f68:	ee18 3a10 	vmov	r3, s16
    9f6c:	691b      	ldr	r3, [r3, #16]
    9f6e:	2b00      	cmp	r3, #0
    9f70:	f000 80ff 	beq.w	a172 <_vfiprintf_r+0x272>
    9f74:	f002 031a 	and.w	r3, r2, #26
    9f78:	2b0a      	cmp	r3, #10
    9f7a:	f000 810a 	beq.w	a192 <_vfiprintf_r+0x292>
    9f7e:	2300      	movs	r3, #0
    9f80:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    9f84:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    9f88:	aa1b      	add	r2, sp, #108	; 0x6c
    9f8a:	930c      	str	r3, [sp, #48]	; 0x30
    9f8c:	9218      	str	r2, [sp, #96]	; 0x60
    9f8e:	4691      	mov	r9, r2
    9f90:	930b      	str	r3, [sp, #44]	; 0x2c
    9f92:	9305      	str	r3, [sp, #20]
    9f94:	46b0      	mov	r8, r6
    9f96:	4644      	mov	r4, r8
    9f98:	4ba8      	ldr	r3, [pc, #672]	; (a23c <_vfiprintf_r+0x33c>)
    9f9a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    9f9e:	f7fc ffbb 	bl	6f18 <__locale_mb_cur_max>
    9fa2:	4622      	mov	r2, r4
    9fa4:	4603      	mov	r3, r0
    9fa6:	a912      	add	r1, sp, #72	; 0x48
    9fa8:	f8cd a000 	str.w	sl, [sp]
    9fac:	4658      	mov	r0, fp
    9fae:	47a8      	blx	r5
    9fb0:	2800      	cmp	r0, #0
    9fb2:	f000 8145 	beq.w	a240 <_vfiprintf_r+0x340>
    9fb6:	f2c0 8139 	blt.w	a22c <_vfiprintf_r+0x32c>
    9fba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9fbc:	2a25      	cmp	r2, #37	; 0x25
    9fbe:	4603      	mov	r3, r0
    9fc0:	d001      	beq.n	9fc6 <_vfiprintf_r+0xc6>
    9fc2:	441c      	add	r4, r3
    9fc4:	e7e8      	b.n	9f98 <_vfiprintf_r+0x98>
    9fc6:	ebb4 0608 	subs.w	r6, r4, r8
    9fca:	4605      	mov	r5, r0
    9fcc:	f040 813c 	bne.w	a248 <_vfiprintf_r+0x348>
    9fd0:	2300      	movs	r3, #0
    9fd2:	7861      	ldrb	r1, [r4, #1]
    9fd4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    9fd8:	f104 0801 	add.w	r8, r4, #1
    9fdc:	9306      	str	r3, [sp, #24]
    9fde:	f04f 37ff 	mov.w	r7, #4294967295
    9fe2:	461e      	mov	r6, r3
    9fe4:	242b      	movs	r4, #43	; 0x2b
    9fe6:	f108 0801 	add.w	r8, r8, #1
    9fea:	f1a1 0320 	sub.w	r3, r1, #32
    9fee:	2b5a      	cmp	r3, #90	; 0x5a
    9ff0:	f200 8178 	bhi.w	a2e4 <_vfiprintf_r+0x3e4>
    9ff4:	e8df f013 	tbh	[pc, r3, lsl #1]
    9ff8:	017602b5 	.word	0x017602b5
    9ffc:	02b00176 	.word	0x02b00176
    a000:	01760176 	.word	0x01760176
    a004:	006a0176 	.word	0x006a0176
    a008:	01760176 	.word	0x01760176
    a00c:	028d027d 	.word	0x028d027d
    a010:	02880176 	.word	0x02880176
    a014:	01760297 	.word	0x01760297
    a018:	005b0292 	.word	0x005b0292
    a01c:	005b005b 	.word	0x005b005b
    a020:	005b005b 	.word	0x005b005b
    a024:	005b005b 	.word	0x005b005b
    a028:	005b005b 	.word	0x005b005b
    a02c:	01760176 	.word	0x01760176
    a030:	01760176 	.word	0x01760176
    a034:	01760176 	.word	0x01760176
    a038:	01760176 	.word	0x01760176
    a03c:	025c0176 	.word	0x025c0176
    a040:	01760084 	.word	0x01760084
    a044:	01760176 	.word	0x01760176
    a048:	01760176 	.word	0x01760176
    a04c:	01760176 	.word	0x01760176
    a050:	01760176 	.word	0x01760176
    a054:	00e80176 	.word	0x00e80176
    a058:	01760176 	.word	0x01760176
    a05c:	02330176 	.word	0x02330176
    a060:	02da0176 	.word	0x02da0176
    a064:	01760176 	.word	0x01760176
    a068:	0176058b 	.word	0x0176058b
    a06c:	01760176 	.word	0x01760176
    a070:	01760176 	.word	0x01760176
    a074:	01760176 	.word	0x01760176
    a078:	01760176 	.word	0x01760176
    a07c:	025c0176 	.word	0x025c0176
    a080:	01760086 	.word	0x01760086
    a084:	01760176 	.word	0x01760176
    a088:	008602cd 	.word	0x008602cd
    a08c:	0176007f 	.word	0x0176007f
    a090:	017602c0 	.word	0x017602c0
    a094:	00ea02fd 	.word	0x00ea02fd
    a098:	007f02ed 	.word	0x007f02ed
    a09c:	02330176 	.word	0x02330176
    a0a0:	0569007c 	.word	0x0569007c
    a0a4:	01760176 	.word	0x01760176
    a0a8:	0176056b 	.word	0x0176056b
    a0ac:	007c      	.short	0x007c
    a0ae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a0b2:	2200      	movs	r2, #0
    a0b4:	f818 1b01 	ldrb.w	r1, [r8], #1
    a0b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a0bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    a0c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a0c4:	2b09      	cmp	r3, #9
    a0c6:	d9f5      	bls.n	a0b4 <_vfiprintf_r+0x1b4>
    a0c8:	9206      	str	r2, [sp, #24]
    a0ca:	e78e      	b.n	9fea <_vfiprintf_r+0xea>
    a0cc:	4658      	mov	r0, fp
    a0ce:	f7fe fed7 	bl	8e80 <_localeconv_r>
    a0d2:	6843      	ldr	r3, [r0, #4]
    a0d4:	930d      	str	r3, [sp, #52]	; 0x34
    a0d6:	4618      	mov	r0, r3
    a0d8:	f7fd f992 	bl	7400 <strlen>
    a0dc:	900e      	str	r0, [sp, #56]	; 0x38
    a0de:	4605      	mov	r5, r0
    a0e0:	4658      	mov	r0, fp
    a0e2:	f7fe fecd 	bl	8e80 <_localeconv_r>
    a0e6:	6883      	ldr	r3, [r0, #8]
    a0e8:	930b      	str	r3, [sp, #44]	; 0x2c
    a0ea:	2d00      	cmp	r5, #0
    a0ec:	f040 84d6 	bne.w	aa9c <_vfiprintf_r+0xb9c>
    a0f0:	f898 1000 	ldrb.w	r1, [r8]
    a0f4:	e777      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a0f6:	f898 1000 	ldrb.w	r1, [r8]
    a0fa:	f046 0620 	orr.w	r6, r6, #32
    a0fe:	e772      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a100:	f046 0610 	orr.w	r6, r6, #16
    a104:	06b4      	lsls	r4, r6, #26
    a106:	f140 818e 	bpl.w	a426 <_vfiprintf_r+0x526>
    a10a:	9b07      	ldr	r3, [sp, #28]
    a10c:	3307      	adds	r3, #7
    a10e:	f023 0307 	bic.w	r3, r3, #7
    a112:	461a      	mov	r2, r3
    a114:	6859      	ldr	r1, [r3, #4]
    a116:	f852 3b08 	ldr.w	r3, [r2], #8
    a11a:	9207      	str	r2, [sp, #28]
    a11c:	460a      	mov	r2, r1
    a11e:	2900      	cmp	r1, #0
    a120:	f2c0 8470 	blt.w	aa04 <_vfiprintf_r+0xb04>
    a124:	1c79      	adds	r1, r7, #1
    a126:	f000 85a2 	beq.w	ac6e <_vfiprintf_r+0xd6e>
    a12a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    a12e:	9103      	str	r1, [sp, #12]
    a130:	ea53 0102 	orrs.w	r1, r3, r2
    a134:	f000 843f 	beq.w	a9b6 <_vfiprintf_r+0xab6>
    a138:	2b0a      	cmp	r3, #10
    a13a:	f172 0100 	sbcs.w	r1, r2, #0
    a13e:	f080 8541 	bcs.w	abc4 <_vfiprintf_r+0xcc4>
    a142:	3330      	adds	r3, #48	; 0x30
    a144:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    a148:	9e03      	ldr	r6, [sp, #12]
    a14a:	2301      	movs	r3, #1
    a14c:	9304      	str	r3, [sp, #16]
    a14e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    a152:	9b04      	ldr	r3, [sp, #16]
    a154:	42bb      	cmp	r3, r7
    a156:	bfb8      	it	lt
    a158:	463b      	movlt	r3, r7
    a15a:	9303      	str	r3, [sp, #12]
    a15c:	2300      	movs	r3, #0
    a15e:	9308      	str	r3, [sp, #32]
    a160:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    a164:	2b00      	cmp	r3, #0
    a166:	f000 80cb 	beq.w	a300 <_vfiprintf_r+0x400>
    a16a:	9b03      	ldr	r3, [sp, #12]
    a16c:	3301      	adds	r3, #1
    a16e:	9303      	str	r3, [sp, #12]
    a170:	e0c6      	b.n	a300 <_vfiprintf_r+0x400>
    a172:	ee18 1a10 	vmov	r1, s16
    a176:	4658      	mov	r0, fp
    a178:	ee18 5a10 	vmov	r5, s16
    a17c:	f001 f840 	bl	b200 <__swsetup_r>
    a180:	2800      	cmp	r0, #0
    a182:	f040 8652 	bne.w	ae2a <_vfiprintf_r+0xf2a>
    a186:	89aa      	ldrh	r2, [r5, #12]
    a188:	f002 031a 	and.w	r3, r2, #26
    a18c:	2b0a      	cmp	r3, #10
    a18e:	f47f aef6 	bne.w	9f7e <_vfiprintf_r+0x7e>
    a192:	ee18 1a10 	vmov	r1, s16
    a196:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    a19a:	2b00      	cmp	r3, #0
    a19c:	f6ff aeef 	blt.w	9f7e <_vfiprintf_r+0x7e>
    a1a0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    a1a2:	07db      	lsls	r3, r3, #31
    a1a4:	d402      	bmi.n	a1ac <_vfiprintf_r+0x2ac>
    a1a6:	0597      	lsls	r7, r2, #22
    a1a8:	f140 8612 	bpl.w	add0 <_vfiprintf_r+0xed0>
    a1ac:	ee18 1a10 	vmov	r1, s16
    a1b0:	4623      	mov	r3, r4
    a1b2:	4632      	mov	r2, r6
    a1b4:	4658      	mov	r0, fp
    a1b6:	f000 fe69 	bl	ae8c <__sbprintf>
    a1ba:	9005      	str	r0, [sp, #20]
    a1bc:	9805      	ldr	r0, [sp, #20]
    a1be:	b045      	add	sp, #276	; 0x114
    a1c0:	ecbd 8b02 	vpop	{d8}
    a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1c8:	f046 0610 	orr.w	r6, r6, #16
    a1cc:	f016 0220 	ands.w	r2, r6, #32
    a1d0:	f000 8136 	beq.w	a440 <_vfiprintf_r+0x540>
    a1d4:	9b07      	ldr	r3, [sp, #28]
    a1d6:	3307      	adds	r3, #7
    a1d8:	f023 0307 	bic.w	r3, r3, #7
    a1dc:	4619      	mov	r1, r3
    a1de:	685a      	ldr	r2, [r3, #4]
    a1e0:	f851 3b08 	ldr.w	r3, [r1], #8
    a1e4:	9107      	str	r1, [sp, #28]
    a1e6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    a1ea:	9103      	str	r1, [sp, #12]
    a1ec:	2100      	movs	r1, #0
    a1ee:	2000      	movs	r0, #0
    a1f0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    a1f4:	1c78      	adds	r0, r7, #1
    a1f6:	f000 8210 	beq.w	a61a <_vfiprintf_r+0x71a>
    a1fa:	9803      	ldr	r0, [sp, #12]
    a1fc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    a200:	ea53 0002 	orrs.w	r0, r3, r2
    a204:	f040 8208 	bne.w	a618 <_vfiprintf_r+0x718>
    a208:	2f00      	cmp	r7, #0
    a20a:	f040 8538 	bne.w	ac7e <_vfiprintf_r+0xd7e>
    a20e:	2900      	cmp	r1, #0
    a210:	f040 83d5 	bne.w	a9be <_vfiprintf_r+0xabe>
    a214:	9b03      	ldr	r3, [sp, #12]
    a216:	f013 0301 	ands.w	r3, r3, #1
    a21a:	9304      	str	r3, [sp, #16]
    a21c:	f000 8411 	beq.w	aa42 <_vfiprintf_r+0xb42>
    a220:	2330      	movs	r3, #48	; 0x30
    a222:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    a226:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    a22a:	e792      	b.n	a152 <_vfiprintf_r+0x252>
    a22c:	2208      	movs	r2, #8
    a22e:	2100      	movs	r1, #0
    a230:	4650      	mov	r0, sl
    a232:	f7fc fb2d 	bl	6890 <memset>
    a236:	2301      	movs	r3, #1
    a238:	441c      	add	r4, r3
    a23a:	e6ad      	b.n	9f98 <_vfiprintf_r+0x98>
    a23c:	2000113c 	.word	0x2000113c
    a240:	ebb4 0608 	subs.w	r6, r4, r8
    a244:	4605      	mov	r5, r0
    a246:	d01b      	beq.n	a280 <_vfiprintf_r+0x380>
    a248:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a24a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    a24c:	3301      	adds	r3, #1
    a24e:	4432      	add	r2, r6
    a250:	2b07      	cmp	r3, #7
    a252:	e9c9 8600 	strd	r8, r6, [r9]
    a256:	921a      	str	r2, [sp, #104]	; 0x68
    a258:	9319      	str	r3, [sp, #100]	; 0x64
    a25a:	dd1c      	ble.n	a296 <_vfiprintf_r+0x396>
    a25c:	2a00      	cmp	r2, #0
    a25e:	f000 83a6 	beq.w	a9ae <_vfiprintf_r+0xaae>
    a262:	ee18 1a10 	vmov	r1, s16
    a266:	aa18      	add	r2, sp, #96	; 0x60
    a268:	4658      	mov	r0, fp
    a26a:	f7ff fe0d 	bl	9e88 <__sprint_r.part.0>
    a26e:	bb20      	cbnz	r0, a2ba <_vfiprintf_r+0x3ba>
    a270:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a274:	9b05      	ldr	r3, [sp, #20]
    a276:	4433      	add	r3, r6
    a278:	9305      	str	r3, [sp, #20]
    a27a:	2d00      	cmp	r5, #0
    a27c:	f47f aea8 	bne.w	9fd0 <_vfiprintf_r+0xd0>
    a280:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a282:	2b00      	cmp	r3, #0
    a284:	f040 85c1 	bne.w	ae0a <_vfiprintf_r+0xf0a>
    a288:	ee18 3a10 	vmov	r3, s16
    a28c:	2200      	movs	r2, #0
    a28e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    a292:	9219      	str	r2, [sp, #100]	; 0x64
    a294:	e015      	b.n	a2c2 <_vfiprintf_r+0x3c2>
    a296:	f109 0908 	add.w	r9, r9, #8
    a29a:	e7eb      	b.n	a274 <_vfiprintf_r+0x374>
    a29c:	ee18 1a10 	vmov	r1, s16
    a2a0:	aa18      	add	r2, sp, #96	; 0x60
    a2a2:	4658      	mov	r0, fp
    a2a4:	f7ff fdf0 	bl	9e88 <__sprint_r.part.0>
    a2a8:	2800      	cmp	r0, #0
    a2aa:	f000 80a6 	beq.w	a3fa <_vfiprintf_r+0x4fa>
    a2ae:	9b08      	ldr	r3, [sp, #32]
    a2b0:	b11b      	cbz	r3, a2ba <_vfiprintf_r+0x3ba>
    a2b2:	9908      	ldr	r1, [sp, #32]
    a2b4:	4658      	mov	r0, fp
    a2b6:	f7fd f9b5 	bl	7624 <_free_r>
    a2ba:	ee18 3a10 	vmov	r3, s16
    a2be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    a2c2:	ee18 2a10 	vmov	r2, s16
    a2c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
    a2c8:	f012 0f01 	tst.w	r2, #1
    a2cc:	b29a      	uxth	r2, r3
    a2ce:	f000 80a0 	beq.w	a412 <_vfiprintf_r+0x512>
    a2d2:	0650      	lsls	r0, r2, #25
    a2d4:	f100 85b2 	bmi.w	ae3c <_vfiprintf_r+0xf3c>
    a2d8:	9805      	ldr	r0, [sp, #20]
    a2da:	b045      	add	sp, #276	; 0x114
    a2dc:	ecbd 8b02 	vpop	{d8}
    a2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2e4:	2900      	cmp	r1, #0
    a2e6:	d0cb      	beq.n	a280 <_vfiprintf_r+0x380>
    a2e8:	2300      	movs	r3, #0
    a2ea:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    a2ee:	2301      	movs	r3, #1
    a2f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    a2f4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    a2f8:	ac2b      	add	r4, sp, #172	; 0xac
    a2fa:	2300      	movs	r3, #0
    a2fc:	9308      	str	r3, [sp, #32]
    a2fe:	461f      	mov	r7, r3
    a300:	f016 0302 	ands.w	r3, r6, #2
    a304:	9309      	str	r3, [sp, #36]	; 0x24
    a306:	d002      	beq.n	a30e <_vfiprintf_r+0x40e>
    a308:	9b03      	ldr	r3, [sp, #12]
    a30a:	3302      	adds	r3, #2
    a30c:	9303      	str	r3, [sp, #12]
    a30e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    a312:	930a      	str	r3, [sp, #40]	; 0x28
    a314:	d105      	bne.n	a322 <_vfiprintf_r+0x422>
    a316:	9b06      	ldr	r3, [sp, #24]
    a318:	9a03      	ldr	r2, [sp, #12]
    a31a:	1a9d      	subs	r5, r3, r2
    a31c:	2d00      	cmp	r5, #0
    a31e:	f300 827b 	bgt.w	a818 <_vfiprintf_r+0x918>
    a322:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a326:	1c41      	adds	r1, r0, #1
    a328:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    a32c:	b182      	cbz	r2, a350 <_vfiprintf_r+0x450>
    a32e:	2201      	movs	r2, #1
    a330:	3301      	adds	r3, #1
    a332:	f8c9 2004 	str.w	r2, [r9, #4]
    a336:	2907      	cmp	r1, #7
    a338:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    a33c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    a340:	f8c9 2000 	str.w	r2, [r9]
    a344:	f300 824a 	bgt.w	a7dc <_vfiprintf_r+0x8dc>
    a348:	4608      	mov	r0, r1
    a34a:	f109 0908 	add.w	r9, r9, #8
    a34e:	3101      	adds	r1, #1
    a350:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a352:	b1e2      	cbz	r2, a38e <_vfiprintf_r+0x48e>
    a354:	aa11      	add	r2, sp, #68	; 0x44
    a356:	3302      	adds	r3, #2
    a358:	f8c9 2000 	str.w	r2, [r9]
    a35c:	2907      	cmp	r1, #7
    a35e:	f04f 0202 	mov.w	r2, #2
    a362:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    a366:	f8c9 2004 	str.w	r2, [r9, #4]
    a36a:	f340 8250 	ble.w	a80e <_vfiprintf_r+0x90e>
    a36e:	2b00      	cmp	r3, #0
    a370:	f000 8343 	beq.w	a9fa <_vfiprintf_r+0xafa>
    a374:	ee18 1a10 	vmov	r1, s16
    a378:	aa18      	add	r2, sp, #96	; 0x60
    a37a:	4658      	mov	r0, fp
    a37c:	f7ff fd84 	bl	9e88 <__sprint_r.part.0>
    a380:	2800      	cmp	r0, #0
    a382:	d194      	bne.n	a2ae <_vfiprintf_r+0x3ae>
    a384:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a388:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a38c:	1c41      	adds	r1, r0, #1
    a38e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a390:	2a80      	cmp	r2, #128	; 0x80
    a392:	f000 8184 	beq.w	a69e <_vfiprintf_r+0x79e>
    a396:	9a04      	ldr	r2, [sp, #16]
    a398:	1abd      	subs	r5, r7, r2
    a39a:	2d00      	cmp	r5, #0
    a39c:	f300 81d7 	bgt.w	a74e <_vfiprintf_r+0x84e>
    a3a0:	9a04      	ldr	r2, [sp, #16]
    a3a2:	f8c9 4000 	str.w	r4, [r9]
    a3a6:	4413      	add	r3, r2
    a3a8:	2907      	cmp	r1, #7
    a3aa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    a3ae:	f8c9 2004 	str.w	r2, [r9, #4]
    a3b2:	f340 816e 	ble.w	a692 <_vfiprintf_r+0x792>
    a3b6:	2b00      	cmp	r3, #0
    a3b8:	f000 8275 	beq.w	a8a6 <_vfiprintf_r+0x9a6>
    a3bc:	ee18 1a10 	vmov	r1, s16
    a3c0:	aa18      	add	r2, sp, #96	; 0x60
    a3c2:	4658      	mov	r0, fp
    a3c4:	f7ff fd60 	bl	9e88 <__sprint_r.part.0>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	f47f af70 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a3ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a3d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a3d4:	0775      	lsls	r5, r6, #29
    a3d6:	d505      	bpl.n	a3e4 <_vfiprintf_r+0x4e4>
    a3d8:	9a06      	ldr	r2, [sp, #24]
    a3da:	9903      	ldr	r1, [sp, #12]
    a3dc:	1a54      	subs	r4, r2, r1
    a3de:	2c00      	cmp	r4, #0
    a3e0:	f300 826b 	bgt.w	a8ba <_vfiprintf_r+0x9ba>
    a3e4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    a3e8:	9803      	ldr	r0, [sp, #12]
    a3ea:	4281      	cmp	r1, r0
    a3ec:	bfac      	ite	ge
    a3ee:	1852      	addge	r2, r2, r1
    a3f0:	1812      	addlt	r2, r2, r0
    a3f2:	9205      	str	r2, [sp, #20]
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	f47f af51 	bne.w	a29c <_vfiprintf_r+0x39c>
    a3fa:	9908      	ldr	r1, [sp, #32]
    a3fc:	2300      	movs	r3, #0
    a3fe:	9319      	str	r3, [sp, #100]	; 0x64
    a400:	2900      	cmp	r1, #0
    a402:	f000 8149 	beq.w	a698 <_vfiprintf_r+0x798>
    a406:	4658      	mov	r0, fp
    a408:	f7fd f90c 	bl	7624 <_free_r>
    a40c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a410:	e5c1      	b.n	9f96 <_vfiprintf_r+0x96>
    a412:	059c      	lsls	r4, r3, #22
    a414:	f53f af5d 	bmi.w	a2d2 <_vfiprintf_r+0x3d2>
    a418:	ee18 4a10 	vmov	r4, s16
    a41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    a41e:	f7fc fe17 	bl	7050 <__retarget_lock_release_recursive>
    a422:	89a2      	ldrh	r2, [r4, #12]
    a424:	e755      	b.n	a2d2 <_vfiprintf_r+0x3d2>
    a426:	06f0      	lsls	r0, r6, #27
    a428:	9a07      	ldr	r2, [sp, #28]
    a42a:	f100 831f 	bmi.w	aa6c <_vfiprintf_r+0xb6c>
    a42e:	0671      	lsls	r1, r6, #25
    a430:	f140 8319 	bpl.w	aa66 <_vfiprintf_r+0xb66>
    a434:	f932 3b04 	ldrsh.w	r3, [r2], #4
    a438:	9207      	str	r2, [sp, #28]
    a43a:	17da      	asrs	r2, r3, #31
    a43c:	4611      	mov	r1, r2
    a43e:	e66e      	b.n	a11e <_vfiprintf_r+0x21e>
    a440:	f016 0310 	ands.w	r3, r6, #16
    a444:	9907      	ldr	r1, [sp, #28]
    a446:	f040 8309 	bne.w	aa5c <_vfiprintf_r+0xb5c>
    a44a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    a44e:	f000 8301 	beq.w	aa54 <_vfiprintf_r+0xb54>
    a452:	461a      	mov	r2, r3
    a454:	f851 3b04 	ldr.w	r3, [r1], #4
    a458:	9107      	str	r1, [sp, #28]
    a45a:	b29b      	uxth	r3, r3
    a45c:	e6c3      	b.n	a1e6 <_vfiprintf_r+0x2e6>
    a45e:	9b07      	ldr	r3, [sp, #28]
    a460:	461a      	mov	r2, r3
    a462:	2300      	movs	r3, #0
    a464:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    a468:	4613      	mov	r3, r2
    a46a:	f853 4b04 	ldr.w	r4, [r3], #4
    a46e:	9303      	str	r3, [sp, #12]
    a470:	2c00      	cmp	r4, #0
    a472:	f000 8412 	beq.w	ac9a <_vfiprintf_r+0xd9a>
    a476:	2953      	cmp	r1, #83	; 0x53
    a478:	f000 8365 	beq.w	ab46 <_vfiprintf_r+0xc46>
    a47c:	f016 0510 	ands.w	r5, r6, #16
    a480:	f040 8361 	bne.w	ab46 <_vfiprintf_r+0xc46>
    a484:	1c7b      	adds	r3, r7, #1
    a486:	f000 84b3 	beq.w	adf0 <_vfiprintf_r+0xef0>
    a48a:	463a      	mov	r2, r7
    a48c:	4629      	mov	r1, r5
    a48e:	4620      	mov	r0, r4
    a490:	f7fe fcfe 	bl	8e90 <memchr>
    a494:	9008      	str	r0, [sp, #32]
    a496:	2800      	cmp	r0, #0
    a498:	f000 849f 	beq.w	adda <_vfiprintf_r+0xeda>
    a49c:	1b03      	subs	r3, r0, r4
    a49e:	9a03      	ldr	r2, [sp, #12]
    a4a0:	9304      	str	r3, [sp, #16]
    a4a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a4a6:	462f      	mov	r7, r5
    a4a8:	9207      	str	r2, [sp, #28]
    a4aa:	9303      	str	r3, [sp, #12]
    a4ac:	9508      	str	r5, [sp, #32]
    a4ae:	e657      	b.n	a160 <_vfiprintf_r+0x260>
    a4b0:	2943      	cmp	r1, #67	; 0x43
    a4b2:	d002      	beq.n	a4ba <_vfiprintf_r+0x5ba>
    a4b4:	06f5      	lsls	r5, r6, #27
    a4b6:	f140 832d 	bpl.w	ab14 <_vfiprintf_r+0xc14>
    a4ba:	9d07      	ldr	r5, [sp, #28]
    a4bc:	2208      	movs	r2, #8
    a4be:	2100      	movs	r1, #0
    a4c0:	a816      	add	r0, sp, #88	; 0x58
    a4c2:	ac2b      	add	r4, sp, #172	; 0xac
    a4c4:	f7fc f9e4 	bl	6890 <memset>
    a4c8:	ab16      	add	r3, sp, #88	; 0x58
    a4ca:	f855 2b04 	ldr.w	r2, [r5], #4
    a4ce:	4621      	mov	r1, r4
    a4d0:	4658      	mov	r0, fp
    a4d2:	f7ff fc93 	bl	9dfc <_wcrtomb_r>
    a4d6:	4603      	mov	r3, r0
    a4d8:	3301      	adds	r3, #1
    a4da:	9004      	str	r0, [sp, #16]
    a4dc:	f000 84b3 	beq.w	ae46 <_vfiprintf_r+0xf46>
    a4e0:	9b04      	ldr	r3, [sp, #16]
    a4e2:	9507      	str	r5, [sp, #28]
    a4e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a4e8:	9303      	str	r3, [sp, #12]
    a4ea:	2300      	movs	r3, #0
    a4ec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    a4f0:	e703      	b.n	a2fa <_vfiprintf_r+0x3fa>
    a4f2:	9b07      	ldr	r3, [sp, #28]
    a4f4:	f853 2b04 	ldr.w	r2, [r3], #4
    a4f8:	9206      	str	r2, [sp, #24]
    a4fa:	2a00      	cmp	r2, #0
    a4fc:	f280 829c 	bge.w	aa38 <_vfiprintf_r+0xb38>
    a500:	9a06      	ldr	r2, [sp, #24]
    a502:	4252      	negs	r2, r2
    a504:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a508:	f898 1000 	ldrb.w	r1, [r8]
    a50c:	f046 0604 	orr.w	r6, r6, #4
    a510:	e569      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a512:	f898 1000 	ldrb.w	r1, [r8]
    a516:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    a51a:	e564      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a51c:	f898 1000 	ldrb.w	r1, [r8]
    a520:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    a524:	e55f      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a526:	4642      	mov	r2, r8
    a528:	f812 1b01 	ldrb.w	r1, [r2], #1
    a52c:	292a      	cmp	r1, #42	; 0x2a
    a52e:	f000 8496 	beq.w	ae5e <_vfiprintf_r+0xf5e>
    a532:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a536:	2b09      	cmp	r3, #9
    a538:	4690      	mov	r8, r2
    a53a:	f04f 0700 	mov.w	r7, #0
    a53e:	f63f ad54 	bhi.w	9fea <_vfiprintf_r+0xea>
    a542:	f818 1b01 	ldrb.w	r1, [r8], #1
    a546:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a54a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    a54e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    a552:	2b09      	cmp	r3, #9
    a554:	d9f5      	bls.n	a542 <_vfiprintf_r+0x642>
    a556:	e548      	b.n	9fea <_vfiprintf_r+0xea>
    a558:	f898 1000 	ldrb.w	r1, [r8]
    a55c:	f046 0601 	orr.w	r6, r6, #1
    a560:	e541      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a562:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    a566:	2b00      	cmp	r3, #0
    a568:	f47f adc2 	bne.w	a0f0 <_vfiprintf_r+0x1f0>
    a56c:	2320      	movs	r3, #32
    a56e:	f898 1000 	ldrb.w	r1, [r8]
    a572:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    a576:	e536      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a578:	f898 1000 	ldrb.w	r1, [r8]
    a57c:	296c      	cmp	r1, #108	; 0x6c
    a57e:	bf03      	ittte	eq
    a580:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    a584:	f046 0620 	orreq.w	r6, r6, #32
    a588:	f108 0801 	addeq.w	r8, r8, #1
    a58c:	f046 0610 	orrne.w	r6, r6, #16
    a590:	e529      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a592:	f898 1000 	ldrb.w	r1, [r8]
    a596:	2968      	cmp	r1, #104	; 0x68
    a598:	bf03      	ittte	eq
    a59a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    a59e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    a5a2:	f108 0801 	addeq.w	r8, r8, #1
    a5a6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    a5aa:	e51c      	b.n	9fe6 <_vfiprintf_r+0xe6>
    a5ac:	f046 0310 	orr.w	r3, r6, #16
    a5b0:	9303      	str	r3, [sp, #12]
    a5b2:	9b03      	ldr	r3, [sp, #12]
    a5b4:	f013 0220 	ands.w	r2, r3, #32
    a5b8:	f000 8206 	beq.w	a9c8 <_vfiprintf_r+0xac8>
    a5bc:	9b07      	ldr	r3, [sp, #28]
    a5be:	3307      	adds	r3, #7
    a5c0:	f023 0307 	bic.w	r3, r3, #7
    a5c4:	4619      	mov	r1, r3
    a5c6:	685a      	ldr	r2, [r3, #4]
    a5c8:	f851 3b08 	ldr.w	r3, [r1], #8
    a5cc:	9107      	str	r1, [sp, #28]
    a5ce:	2101      	movs	r1, #1
    a5d0:	e60d      	b.n	a1ee <_vfiprintf_r+0x2ee>
    a5d2:	9a07      	ldr	r2, [sp, #28]
    a5d4:	f046 0302 	orr.w	r3, r6, #2
    a5d8:	9303      	str	r3, [sp, #12]
    a5da:	f852 3b04 	ldr.w	r3, [r2], #4
    a5de:	9207      	str	r2, [sp, #28]
    a5e0:	f647 0230 	movw	r2, #30768	; 0x7830
    a5e4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    a5e8:	4ab8      	ldr	r2, [pc, #736]	; (a8cc <_vfiprintf_r+0x9cc>)
    a5ea:	920c      	str	r2, [sp, #48]	; 0x30
    a5ec:	2102      	movs	r1, #2
    a5ee:	2200      	movs	r2, #0
    a5f0:	e5fd      	b.n	a1ee <_vfiprintf_r+0x2ee>
    a5f2:	06b7      	lsls	r7, r6, #26
    a5f4:	f100 8248 	bmi.w	aa88 <_vfiprintf_r+0xb88>
    a5f8:	06f5      	lsls	r5, r6, #27
    a5fa:	f100 8346 	bmi.w	ac8a <_vfiprintf_r+0xd8a>
    a5fe:	0674      	lsls	r4, r6, #25
    a600:	f100 83d5 	bmi.w	adae <_vfiprintf_r+0xeae>
    a604:	05b0      	lsls	r0, r6, #22
    a606:	f140 8340 	bpl.w	ac8a <_vfiprintf_r+0xd8a>
    a60a:	9b07      	ldr	r3, [sp, #28]
    a60c:	9905      	ldr	r1, [sp, #20]
    a60e:	f853 2b04 	ldr.w	r2, [r3], #4
    a612:	9307      	str	r3, [sp, #28]
    a614:	7011      	strb	r1, [r2, #0]
    a616:	e4be      	b.n	9f96 <_vfiprintf_r+0x96>
    a618:	9603      	str	r6, [sp, #12]
    a61a:	2901      	cmp	r1, #1
    a61c:	f43f ad8c 	beq.w	a138 <_vfiprintf_r+0x238>
    a620:	2902      	cmp	r1, #2
    a622:	ac44      	add	r4, sp, #272	; 0x110
    a624:	d111      	bne.n	a64a <_vfiprintf_r+0x74a>
    a626:	980c      	ldr	r0, [sp, #48]	; 0x30
    a628:	f003 010f 	and.w	r1, r3, #15
    a62c:	091b      	lsrs	r3, r3, #4
    a62e:	5c41      	ldrb	r1, [r0, r1]
    a630:	f804 1d01 	strb.w	r1, [r4, #-1]!
    a634:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    a638:	0912      	lsrs	r2, r2, #4
    a63a:	ea53 0102 	orrs.w	r1, r3, r2
    a63e:	d1f3      	bne.n	a628 <_vfiprintf_r+0x728>
    a640:	9e03      	ldr	r6, [sp, #12]
    a642:	ab44      	add	r3, sp, #272	; 0x110
    a644:	1b1b      	subs	r3, r3, r4
    a646:	9304      	str	r3, [sp, #16]
    a648:	e583      	b.n	a152 <_vfiprintf_r+0x252>
    a64a:	f003 0107 	and.w	r1, r3, #7
    a64e:	08db      	lsrs	r3, r3, #3
    a650:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    a654:	08d2      	lsrs	r2, r2, #3
    a656:	3130      	adds	r1, #48	; 0x30
    a658:	ea53 0502 	orrs.w	r5, r3, r2
    a65c:	4620      	mov	r0, r4
    a65e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    a662:	d1f2      	bne.n	a64a <_vfiprintf_r+0x74a>
    a664:	9e03      	ldr	r6, [sp, #12]
    a666:	07f3      	lsls	r3, r6, #31
    a668:	d5eb      	bpl.n	a642 <_vfiprintf_r+0x742>
    a66a:	2930      	cmp	r1, #48	; 0x30
    a66c:	d0e8      	beq.n	a640 <_vfiprintf_r+0x740>
    a66e:	2330      	movs	r3, #48	; 0x30
    a670:	3802      	subs	r0, #2
    a672:	f804 3c01 	strb.w	r3, [r4, #-1]
    a676:	ab44      	add	r3, sp, #272	; 0x110
    a678:	1a1b      	subs	r3, r3, r0
    a67a:	9e03      	ldr	r6, [sp, #12]
    a67c:	9304      	str	r3, [sp, #16]
    a67e:	4604      	mov	r4, r0
    a680:	e567      	b.n	a152 <_vfiprintf_r+0x252>
    a682:	9b04      	ldr	r3, [sp, #16]
    a684:	941b      	str	r4, [sp, #108]	; 0x6c
    a686:	2201      	movs	r2, #1
    a688:	931c      	str	r3, [sp, #112]	; 0x70
    a68a:	931a      	str	r3, [sp, #104]	; 0x68
    a68c:	9219      	str	r2, [sp, #100]	; 0x64
    a68e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a692:	f109 0908 	add.w	r9, r9, #8
    a696:	e69d      	b.n	a3d4 <_vfiprintf_r+0x4d4>
    a698:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a69c:	e47b      	b.n	9f96 <_vfiprintf_r+0x96>
    a69e:	9a06      	ldr	r2, [sp, #24]
    a6a0:	9d03      	ldr	r5, [sp, #12]
    a6a2:	1b55      	subs	r5, r2, r5
    a6a4:	2d00      	cmp	r5, #0
    a6a6:	f77f ae76 	ble.w	a396 <_vfiprintf_r+0x496>
    a6aa:	2d10      	cmp	r5, #16
    a6ac:	f340 83bb 	ble.w	ae26 <_vfiprintf_r+0xf26>
    a6b0:	9409      	str	r4, [sp, #36]	; 0x24
    a6b2:	ee18 4a10 	vmov	r4, s16
    a6b6:	e007      	b.n	a6c8 <_vfiprintf_r+0x7c8>
    a6b8:	f100 0c02 	add.w	ip, r0, #2
    a6bc:	f109 0908 	add.w	r9, r9, #8
    a6c0:	4610      	mov	r0, r2
    a6c2:	3d10      	subs	r5, #16
    a6c4:	2d10      	cmp	r5, #16
    a6c6:	dd1e      	ble.n	a706 <_vfiprintf_r+0x806>
    a6c8:	4981      	ldr	r1, [pc, #516]	; (a8d0 <_vfiprintf_r+0x9d0>)
    a6ca:	f8c9 1000 	str.w	r1, [r9]
    a6ce:	1c42      	adds	r2, r0, #1
    a6d0:	3310      	adds	r3, #16
    a6d2:	2110      	movs	r1, #16
    a6d4:	2a07      	cmp	r2, #7
    a6d6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a6da:	f8c9 1004 	str.w	r1, [r9, #4]
    a6de:	ddeb      	ble.n	a6b8 <_vfiprintf_r+0x7b8>
    a6e0:	aa18      	add	r2, sp, #96	; 0x60
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d074      	beq.n	a7d0 <_vfiprintf_r+0x8d0>
    a6e6:	4621      	mov	r1, r4
    a6e8:	4658      	mov	r0, fp
    a6ea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a6ee:	f7ff fbcb 	bl	9e88 <__sprint_r.part.0>
    a6f2:	2800      	cmp	r0, #0
    a6f4:	f47f addb 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a6f8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a6fc:	3d10      	subs	r5, #16
    a6fe:	2d10      	cmp	r5, #16
    a700:	f100 0c01 	add.w	ip, r0, #1
    a704:	dce0      	bgt.n	a6c8 <_vfiprintf_r+0x7c8>
    a706:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a708:	4a71      	ldr	r2, [pc, #452]	; (a8d0 <_vfiprintf_r+0x9d0>)
    a70a:	f8c9 5004 	str.w	r5, [r9, #4]
    a70e:	442b      	add	r3, r5
    a710:	f1bc 0f07 	cmp.w	ip, #7
    a714:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    a718:	f8c9 2000 	str.w	r2, [r9]
    a71c:	f340 8194 	ble.w	aa48 <_vfiprintf_r+0xb48>
    a720:	2b00      	cmp	r3, #0
    a722:	f000 831f 	beq.w	ad64 <_vfiprintf_r+0xe64>
    a726:	ee18 1a10 	vmov	r1, s16
    a72a:	aa18      	add	r2, sp, #96	; 0x60
    a72c:	4658      	mov	r0, fp
    a72e:	f7ff fbab 	bl	9e88 <__sprint_r.part.0>
    a732:	2800      	cmp	r0, #0
    a734:	f47f adbb 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a738:	9a04      	ldr	r2, [sp, #16]
    a73a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a73e:	1abd      	subs	r5, r7, r2
    a740:	2d00      	cmp	r5, #0
    a742:	f100 0101 	add.w	r1, r0, #1
    a746:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a74a:	f77f ae29 	ble.w	a3a0 <_vfiprintf_r+0x4a0>
    a74e:	2d10      	cmp	r5, #16
    a750:	dd29      	ble.n	a7a6 <_vfiprintf_r+0x8a6>
    a752:	9409      	str	r4, [sp, #36]	; 0x24
    a754:	2710      	movs	r7, #16
    a756:	ee18 4a10 	vmov	r4, s16
    a75a:	e007      	b.n	a76c <_vfiprintf_r+0x86c>
    a75c:	f100 0c02 	add.w	ip, r0, #2
    a760:	f109 0908 	add.w	r9, r9, #8
    a764:	4610      	mov	r0, r2
    a766:	3d10      	subs	r5, #16
    a768:	2d10      	cmp	r5, #16
    a76a:	dd1a      	ble.n	a7a2 <_vfiprintf_r+0x8a2>
    a76c:	1c42      	adds	r2, r0, #1
    a76e:	4958      	ldr	r1, [pc, #352]	; (a8d0 <_vfiprintf_r+0x9d0>)
    a770:	3310      	adds	r3, #16
    a772:	2a07      	cmp	r2, #7
    a774:	e9c9 1700 	strd	r1, r7, [r9]
    a778:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a77c:	ddee      	ble.n	a75c <_vfiprintf_r+0x85c>
    a77e:	aa18      	add	r2, sp, #96	; 0x60
    a780:	b303      	cbz	r3, a7c4 <_vfiprintf_r+0x8c4>
    a782:	4621      	mov	r1, r4
    a784:	4658      	mov	r0, fp
    a786:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a78a:	f7ff fb7d 	bl	9e88 <__sprint_r.part.0>
    a78e:	2800      	cmp	r0, #0
    a790:	f47f ad8d 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a794:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a798:	3d10      	subs	r5, #16
    a79a:	2d10      	cmp	r5, #16
    a79c:	f100 0c01 	add.w	ip, r0, #1
    a7a0:	dce4      	bgt.n	a76c <_vfiprintf_r+0x86c>
    a7a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a7a4:	4661      	mov	r1, ip
    a7a6:	4a4a      	ldr	r2, [pc, #296]	; (a8d0 <_vfiprintf_r+0x9d0>)
    a7a8:	f8c9 5004 	str.w	r5, [r9, #4]
    a7ac:	442b      	add	r3, r5
    a7ae:	2907      	cmp	r1, #7
    a7b0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    a7b4:	f8c9 2000 	str.w	r2, [r9]
    a7b8:	f300 80e7 	bgt.w	a98a <_vfiprintf_r+0xa8a>
    a7bc:	f109 0908 	add.w	r9, r9, #8
    a7c0:	3101      	adds	r1, #1
    a7c2:	e5ed      	b.n	a3a0 <_vfiprintf_r+0x4a0>
    a7c4:	f04f 0c01 	mov.w	ip, #1
    a7c8:	4618      	mov	r0, r3
    a7ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a7ce:	e7ca      	b.n	a766 <_vfiprintf_r+0x866>
    a7d0:	f04f 0c01 	mov.w	ip, #1
    a7d4:	4618      	mov	r0, r3
    a7d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a7da:	e772      	b.n	a6c2 <_vfiprintf_r+0x7c2>
    a7dc:	2b00      	cmp	r3, #0
    a7de:	f000 8104 	beq.w	a9ea <_vfiprintf_r+0xaea>
    a7e2:	ee18 1a10 	vmov	r1, s16
    a7e6:	aa18      	add	r2, sp, #96	; 0x60
    a7e8:	4658      	mov	r0, fp
    a7ea:	f7ff fb4d 	bl	9e88 <__sprint_r.part.0>
    a7ee:	2800      	cmp	r0, #0
    a7f0:	f47f ad5d 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a7f4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a7f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a7fc:	1c41      	adds	r1, r0, #1
    a7fe:	e5a7      	b.n	a350 <_vfiprintf_r+0x450>
    a800:	2302      	movs	r3, #2
    a802:	aa11      	add	r2, sp, #68	; 0x44
    a804:	931c      	str	r3, [sp, #112]	; 0x70
    a806:	921b      	str	r2, [sp, #108]	; 0x6c
    a808:	2101      	movs	r1, #1
    a80a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a80e:	4608      	mov	r0, r1
    a810:	f109 0908 	add.w	r9, r9, #8
    a814:	1c41      	adds	r1, r0, #1
    a816:	e5ba      	b.n	a38e <_vfiprintf_r+0x48e>
    a818:	2d10      	cmp	r5, #16
    a81a:	f340 82e5 	ble.w	ade8 <_vfiprintf_r+0xee8>
    a81e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    a822:	940f      	str	r4, [sp, #60]	; 0x3c
    a824:	4608      	mov	r0, r1
    a826:	ee18 4a10 	vmov	r4, s16
    a82a:	e007      	b.n	a83c <_vfiprintf_r+0x93c>
    a82c:	f100 0c02 	add.w	ip, r0, #2
    a830:	f109 0908 	add.w	r9, r9, #8
    a834:	4610      	mov	r0, r2
    a836:	3d10      	subs	r5, #16
    a838:	2d10      	cmp	r5, #16
    a83a:	dd1d      	ble.n	a878 <_vfiprintf_r+0x978>
    a83c:	4925      	ldr	r1, [pc, #148]	; (a8d4 <_vfiprintf_r+0x9d4>)
    a83e:	f8c9 1000 	str.w	r1, [r9]
    a842:	1c42      	adds	r2, r0, #1
    a844:	3310      	adds	r3, #16
    a846:	2110      	movs	r1, #16
    a848:	2a07      	cmp	r2, #7
    a84a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a84e:	f8c9 1004 	str.w	r1, [r9, #4]
    a852:	ddeb      	ble.n	a82c <_vfiprintf_r+0x92c>
    a854:	aa18      	add	r2, sp, #96	; 0x60
    a856:	b303      	cbz	r3, a89a <_vfiprintf_r+0x99a>
    a858:	4621      	mov	r1, r4
    a85a:	4658      	mov	r0, fp
    a85c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a860:	f7ff fb12 	bl	9e88 <__sprint_r.part.0>
    a864:	2800      	cmp	r0, #0
    a866:	f47f ad22 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a86a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    a86e:	3d10      	subs	r5, #16
    a870:	2d10      	cmp	r5, #16
    a872:	f100 0c01 	add.w	ip, r0, #1
    a876:	dce1      	bgt.n	a83c <_vfiprintf_r+0x93c>
    a878:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    a87a:	4660      	mov	r0, ip
    a87c:	4a15      	ldr	r2, [pc, #84]	; (a8d4 <_vfiprintf_r+0x9d4>)
    a87e:	f8c9 5004 	str.w	r5, [r9, #4]
    a882:	442b      	add	r3, r5
    a884:	2807      	cmp	r0, #7
    a886:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    a88a:	f8c9 2000 	str.w	r2, [r9]
    a88e:	f300 80c1 	bgt.w	aa14 <_vfiprintf_r+0xb14>
    a892:	f109 0908 	add.w	r9, r9, #8
    a896:	1c41      	adds	r1, r0, #1
    a898:	e546      	b.n	a328 <_vfiprintf_r+0x428>
    a89a:	4618      	mov	r0, r3
    a89c:	f04f 0c01 	mov.w	ip, #1
    a8a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a8a4:	e7c7      	b.n	a836 <_vfiprintf_r+0x936>
    a8a6:	0776      	lsls	r6, r6, #29
    a8a8:	9319      	str	r3, [sp, #100]	; 0x64
    a8aa:	d553      	bpl.n	a954 <_vfiprintf_r+0xa54>
    a8ac:	9a06      	ldr	r2, [sp, #24]
    a8ae:	9903      	ldr	r1, [sp, #12]
    a8b0:	1a54      	subs	r4, r2, r1
    a8b2:	2c00      	cmp	r4, #0
    a8b4:	dd4e      	ble.n	a954 <_vfiprintf_r+0xa54>
    a8b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a8ba:	2c10      	cmp	r4, #16
    a8bc:	f340 82b0 	ble.w	ae20 <_vfiprintf_r+0xf20>
    a8c0:	9919      	ldr	r1, [sp, #100]	; 0x64
    a8c2:	ee18 6a10 	vmov	r6, s16
    a8c6:	2510      	movs	r5, #16
    a8c8:	e00d      	b.n	a8e6 <_vfiprintf_r+0x9e6>
    a8ca:	bf00      	nop
    a8cc:	20000ab4 	.word	0x20000ab4
    a8d0:	20000f88 	.word	0x20000f88
    a8d4:	20000ad0 	.word	0x20000ad0
    a8d8:	1c88      	adds	r0, r1, #2
    a8da:	f109 0908 	add.w	r9, r9, #8
    a8de:	4611      	mov	r1, r2
    a8e0:	3c10      	subs	r4, #16
    a8e2:	2c10      	cmp	r4, #16
    a8e4:	dd1a      	ble.n	a91c <_vfiprintf_r+0xa1c>
    a8e6:	1c4a      	adds	r2, r1, #1
    a8e8:	48b3      	ldr	r0, [pc, #716]	; (abb8 <_vfiprintf_r+0xcb8>)
    a8ea:	3310      	adds	r3, #16
    a8ec:	2a07      	cmp	r2, #7
    a8ee:	e9c9 0500 	strd	r0, r5, [r9]
    a8f2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    a8f6:	ddef      	ble.n	a8d8 <_vfiprintf_r+0x9d8>
    a8f8:	aa18      	add	r2, sp, #96	; 0x60
    a8fa:	b333      	cbz	r3, a94a <_vfiprintf_r+0xa4a>
    a8fc:	4631      	mov	r1, r6
    a8fe:	4658      	mov	r0, fp
    a900:	f7ff fac2 	bl	9e88 <__sprint_r.part.0>
    a904:	2800      	cmp	r0, #0
    a906:	f47f acd2 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a90a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    a90e:	3c10      	subs	r4, #16
    a910:	2c10      	cmp	r4, #16
    a912:	f101 0001 	add.w	r0, r1, #1
    a916:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a91a:	dce4      	bgt.n	a8e6 <_vfiprintf_r+0x9e6>
    a91c:	4aa6      	ldr	r2, [pc, #664]	; (abb8 <_vfiprintf_r+0xcb8>)
    a91e:	f8c9 4004 	str.w	r4, [r9, #4]
    a922:	4423      	add	r3, r4
    a924:	2807      	cmp	r0, #7
    a926:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    a92a:	f8c9 2000 	str.w	r2, [r9]
    a92e:	f77f ad59 	ble.w	a3e4 <_vfiprintf_r+0x4e4>
    a932:	b17b      	cbz	r3, a954 <_vfiprintf_r+0xa54>
    a934:	ee18 1a10 	vmov	r1, s16
    a938:	aa18      	add	r2, sp, #96	; 0x60
    a93a:	4658      	mov	r0, fp
    a93c:	f7ff faa4 	bl	9e88 <__sprint_r.part.0>
    a940:	2800      	cmp	r0, #0
    a942:	f47f acb4 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a946:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a948:	e54c      	b.n	a3e4 <_vfiprintf_r+0x4e4>
    a94a:	2001      	movs	r0, #1
    a94c:	4619      	mov	r1, r3
    a94e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a952:	e7c5      	b.n	a8e0 <_vfiprintf_r+0x9e0>
    a954:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    a958:	9903      	ldr	r1, [sp, #12]
    a95a:	428a      	cmp	r2, r1
    a95c:	bfac      	ite	ge
    a95e:	189b      	addge	r3, r3, r2
    a960:	185b      	addlt	r3, r3, r1
    a962:	9305      	str	r3, [sp, #20]
    a964:	e549      	b.n	a3fa <_vfiprintf_r+0x4fa>
    a966:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    a96a:	058f      	lsls	r7, r1, #22
    a96c:	ee18 3a10 	vmov	r3, s16
    a970:	b28a      	uxth	r2, r1
    a972:	f53f aae8 	bmi.w	9f46 <_vfiprintf_r+0x46>
    a976:	ee18 5a10 	vmov	r5, s16
    a97a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    a97c:	f7fc fb66 	bl	704c <__retarget_lock_acquire_recursive>
    a980:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    a984:	b28a      	uxth	r2, r1
    a986:	f7ff bade 	b.w	9f46 <_vfiprintf_r+0x46>
    a98a:	2b00      	cmp	r3, #0
    a98c:	f43f ae79 	beq.w	a682 <_vfiprintf_r+0x782>
    a990:	ee18 1a10 	vmov	r1, s16
    a994:	aa18      	add	r2, sp, #96	; 0x60
    a996:	4658      	mov	r0, fp
    a998:	f7ff fa76 	bl	9e88 <__sprint_r.part.0>
    a99c:	2800      	cmp	r0, #0
    a99e:	f47f ac86 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    a9a2:	9919      	ldr	r1, [sp, #100]	; 0x64
    a9a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a9a6:	3101      	adds	r1, #1
    a9a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a9ac:	e4f8      	b.n	a3a0 <_vfiprintf_r+0x4a0>
    a9ae:	9219      	str	r2, [sp, #100]	; 0x64
    a9b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a9b4:	e45e      	b.n	a274 <_vfiprintf_r+0x374>
    a9b6:	2f00      	cmp	r7, #0
    a9b8:	f47f abc3 	bne.w	a142 <_vfiprintf_r+0x242>
    a9bc:	9e03      	ldr	r6, [sp, #12]
    a9be:	2700      	movs	r7, #0
    a9c0:	9704      	str	r7, [sp, #16]
    a9c2:	ac44      	add	r4, sp, #272	; 0x110
    a9c4:	f7ff bbc5 	b.w	a152 <_vfiprintf_r+0x252>
    a9c8:	9b03      	ldr	r3, [sp, #12]
    a9ca:	f013 0310 	ands.w	r3, r3, #16
    a9ce:	d154      	bne.n	aa7a <_vfiprintf_r+0xb7a>
    a9d0:	9a03      	ldr	r2, [sp, #12]
    a9d2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    a9d6:	f000 816b 	beq.w	acb0 <_vfiprintf_r+0xdb0>
    a9da:	9907      	ldr	r1, [sp, #28]
    a9dc:	461a      	mov	r2, r3
    a9de:	f851 3b04 	ldr.w	r3, [r1], #4
    a9e2:	9107      	str	r1, [sp, #28]
    a9e4:	b29b      	uxth	r3, r3
    a9e6:	2101      	movs	r1, #1
    a9e8:	e401      	b.n	a1ee <_vfiprintf_r+0x2ee>
    a9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a9ec:	2a00      	cmp	r2, #0
    a9ee:	d164      	bne.n	aaba <_vfiprintf_r+0xbba>
    a9f0:	4618      	mov	r0, r3
    a9f2:	2101      	movs	r1, #1
    a9f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    a9f8:	e4c9      	b.n	a38e <_vfiprintf_r+0x48e>
    a9fa:	2101      	movs	r1, #1
    a9fc:	4618      	mov	r0, r3
    a9fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aa02:	e4c4      	b.n	a38e <_vfiprintf_r+0x48e>
    aa04:	425b      	negs	r3, r3
    aa06:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    aa0a:	9603      	str	r6, [sp, #12]
    aa0c:	202d      	movs	r0, #45	; 0x2d
    aa0e:	2101      	movs	r1, #1
    aa10:	f7ff bbee 	b.w	a1f0 <_vfiprintf_r+0x2f0>
    aa14:	2b00      	cmp	r3, #0
    aa16:	f000 8088 	beq.w	ab2a <_vfiprintf_r+0xc2a>
    aa1a:	ee18 1a10 	vmov	r1, s16
    aa1e:	aa18      	add	r2, sp, #96	; 0x60
    aa20:	4658      	mov	r0, fp
    aa22:	f7ff fa31 	bl	9e88 <__sprint_r.part.0>
    aa26:	2800      	cmp	r0, #0
    aa28:	f47f ac41 	bne.w	a2ae <_vfiprintf_r+0x3ae>
    aa2c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    aa30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aa34:	1c41      	adds	r1, r0, #1
    aa36:	e477      	b.n	a328 <_vfiprintf_r+0x428>
    aa38:	f898 1000 	ldrb.w	r1, [r8]
    aa3c:	9307      	str	r3, [sp, #28]
    aa3e:	f7ff bad2 	b.w	9fe6 <_vfiprintf_r+0xe6>
    aa42:	ac44      	add	r4, sp, #272	; 0x110
    aa44:	f7ff bb85 	b.w	a152 <_vfiprintf_r+0x252>
    aa48:	f109 0908 	add.w	r9, r9, #8
    aa4c:	f10c 0101 	add.w	r1, ip, #1
    aa50:	4660      	mov	r0, ip
    aa52:	e4a0      	b.n	a396 <_vfiprintf_r+0x496>
    aa54:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    aa58:	f040 8197 	bne.w	ad8a <_vfiprintf_r+0xe8a>
    aa5c:	f851 3b04 	ldr.w	r3, [r1], #4
    aa60:	9107      	str	r1, [sp, #28]
    aa62:	f7ff bbc0 	b.w	a1e6 <_vfiprintf_r+0x2e6>
    aa66:	05b3      	lsls	r3, r6, #22
    aa68:	f100 8188 	bmi.w	ad7c <_vfiprintf_r+0xe7c>
    aa6c:	f852 3b04 	ldr.w	r3, [r2], #4
    aa70:	9207      	str	r2, [sp, #28]
    aa72:	17da      	asrs	r2, r3, #31
    aa74:	4611      	mov	r1, r2
    aa76:	f7ff bb52 	b.w	a11e <_vfiprintf_r+0x21e>
    aa7a:	9907      	ldr	r1, [sp, #28]
    aa7c:	f851 3b04 	ldr.w	r3, [r1], #4
    aa80:	9107      	str	r1, [sp, #28]
    aa82:	2101      	movs	r1, #1
    aa84:	f7ff bbb3 	b.w	a1ee <_vfiprintf_r+0x2ee>
    aa88:	9b07      	ldr	r3, [sp, #28]
    aa8a:	9805      	ldr	r0, [sp, #20]
    aa8c:	f853 1b04 	ldr.w	r1, [r3], #4
    aa90:	9307      	str	r3, [sp, #28]
    aa92:	17c2      	asrs	r2, r0, #31
    aa94:	e9c1 0200 	strd	r0, r2, [r1]
    aa98:	f7ff ba7d 	b.w	9f96 <_vfiprintf_r+0x96>
    aa9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	f43f ab26 	beq.w	a0f0 <_vfiprintf_r+0x1f0>
    aaa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aaa6:	781b      	ldrb	r3, [r3, #0]
    aaa8:	2b00      	cmp	r3, #0
    aaaa:	f43f ab21 	beq.w	a0f0 <_vfiprintf_r+0x1f0>
    aaae:	f898 1000 	ldrb.w	r1, [r8]
    aab2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    aab6:	f7ff ba96 	b.w	9fe6 <_vfiprintf_r+0xe6>
    aaba:	2302      	movs	r3, #2
    aabc:	aa11      	add	r2, sp, #68	; 0x44
    aabe:	931c      	str	r3, [sp, #112]	; 0x70
    aac0:	921b      	str	r2, [sp, #108]	; 0x6c
    aac2:	2001      	movs	r0, #1
    aac4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    aac8:	e6a2      	b.n	a810 <_vfiprintf_r+0x910>
    aaca:	9603      	str	r6, [sp, #12]
    aacc:	e571      	b.n	a5b2 <_vfiprintf_r+0x6b2>
    aace:	4b3b      	ldr	r3, [pc, #236]	; (abbc <_vfiprintf_r+0xcbc>)
    aad0:	930c      	str	r3, [sp, #48]	; 0x30
    aad2:	f016 0220 	ands.w	r2, r6, #32
    aad6:	d059      	beq.n	ab8c <_vfiprintf_r+0xc8c>
    aad8:	9b07      	ldr	r3, [sp, #28]
    aada:	3307      	adds	r3, #7
    aadc:	f023 0307 	bic.w	r3, r3, #7
    aae0:	4618      	mov	r0, r3
    aae2:	685a      	ldr	r2, [r3, #4]
    aae4:	f850 3b08 	ldr.w	r3, [r0], #8
    aae8:	9007      	str	r0, [sp, #28]
    aaea:	07f4      	lsls	r4, r6, #31
    aaec:	d509      	bpl.n	ab02 <_vfiprintf_r+0xc02>
    aaee:	ea53 0002 	orrs.w	r0, r3, r2
    aaf2:	d006      	beq.n	ab02 <_vfiprintf_r+0xc02>
    aaf4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    aaf8:	2130      	movs	r1, #48	; 0x30
    aafa:	f046 0602 	orr.w	r6, r6, #2
    aafe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    ab02:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    ab06:	9103      	str	r1, [sp, #12]
    ab08:	2102      	movs	r1, #2
    ab0a:	f7ff bb70 	b.w	a1ee <_vfiprintf_r+0x2ee>
    ab0e:	4b2c      	ldr	r3, [pc, #176]	; (abc0 <_vfiprintf_r+0xcc0>)
    ab10:	930c      	str	r3, [sp, #48]	; 0x30
    ab12:	e7de      	b.n	aad2 <_vfiprintf_r+0xbd2>
    ab14:	9b07      	ldr	r3, [sp, #28]
    ab16:	2101      	movs	r1, #1
    ab18:	f853 2b04 	ldr.w	r2, [r3], #4
    ab1c:	9103      	str	r1, [sp, #12]
    ab1e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    ab22:	9307      	str	r3, [sp, #28]
    ab24:	9104      	str	r1, [sp, #16]
    ab26:	ac2b      	add	r4, sp, #172	; 0xac
    ab28:	e4df      	b.n	a4ea <_vfiprintf_r+0x5ea>
    ab2a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    ab2e:	2a00      	cmp	r2, #0
    ab30:	f040 8132 	bne.w	ad98 <_vfiprintf_r+0xe98>
    ab34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab36:	2a00      	cmp	r2, #0
    ab38:	f47f ae62 	bne.w	a800 <_vfiprintf_r+0x900>
    ab3c:	4618      	mov	r0, r3
    ab3e:	2101      	movs	r1, #1
    ab40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ab44:	e427      	b.n	a396 <_vfiprintf_r+0x496>
    ab46:	2100      	movs	r1, #0
    ab48:	2208      	movs	r2, #8
    ab4a:	a816      	add	r0, sp, #88	; 0x58
    ab4c:	9413      	str	r4, [sp, #76]	; 0x4c
    ab4e:	f7fb fe9f 	bl	6890 <memset>
    ab52:	1c79      	adds	r1, r7, #1
    ab54:	f000 80bc 	beq.w	acd0 <_vfiprintf_r+0xdd0>
    ab58:	2500      	movs	r5, #0
    ab5a:	9407      	str	r4, [sp, #28]
    ab5c:	462c      	mov	r4, r5
    ab5e:	e00c      	b.n	ab7a <_vfiprintf_r+0xc7a>
    ab60:	a92b      	add	r1, sp, #172	; 0xac
    ab62:	4658      	mov	r0, fp
    ab64:	f7ff f94a 	bl	9dfc <_wcrtomb_r>
    ab68:	1c42      	adds	r2, r0, #1
    ab6a:	4420      	add	r0, r4
    ab6c:	f000 816b 	beq.w	ae46 <_vfiprintf_r+0xf46>
    ab70:	42b8      	cmp	r0, r7
    ab72:	dc08      	bgt.n	ab86 <_vfiprintf_r+0xc86>
    ab74:	f000 8170 	beq.w	ae58 <_vfiprintf_r+0xf58>
    ab78:	4604      	mov	r4, r0
    ab7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ab7c:	5952      	ldr	r2, [r2, r5]
    ab7e:	ab16      	add	r3, sp, #88	; 0x58
    ab80:	3504      	adds	r5, #4
    ab82:	2a00      	cmp	r2, #0
    ab84:	d1ec      	bne.n	ab60 <_vfiprintf_r+0xc60>
    ab86:	9404      	str	r4, [sp, #16]
    ab88:	9c07      	ldr	r4, [sp, #28]
    ab8a:	e0af      	b.n	acec <_vfiprintf_r+0xdec>
    ab8c:	f016 0310 	ands.w	r3, r6, #16
    ab90:	9807      	ldr	r0, [sp, #28]
    ab92:	d10c      	bne.n	abae <_vfiprintf_r+0xcae>
    ab94:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    ab98:	d005      	beq.n	aba6 <_vfiprintf_r+0xca6>
    ab9a:	461a      	mov	r2, r3
    ab9c:	f850 3b04 	ldr.w	r3, [r0], #4
    aba0:	9007      	str	r0, [sp, #28]
    aba2:	b29b      	uxth	r3, r3
    aba4:	e7a1      	b.n	aaea <_vfiprintf_r+0xbea>
    aba6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    abaa:	f040 80e1 	bne.w	ad70 <_vfiprintf_r+0xe70>
    abae:	f850 3b04 	ldr.w	r3, [r0], #4
    abb2:	9007      	str	r0, [sp, #28]
    abb4:	e799      	b.n	aaea <_vfiprintf_r+0xbea>
    abb6:	bf00      	nop
    abb8:	20000ad0 	.word	0x20000ad0
    abbc:	20000ab4 	.word	0x20000ab4
    abc0:	20000aa0 	.word	0x20000aa0
    abc4:	9903      	ldr	r1, [sp, #12]
    abc6:	9704      	str	r7, [sp, #16]
    abc8:	ac44      	add	r4, sp, #272	; 0x110
    abca:	469e      	mov	lr, r3
    abcc:	ee08 ba90 	vmov	s17, fp
    abd0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    abd4:	f04f 0c00 	mov.w	ip, #0
    abd8:	4623      	mov	r3, r4
    abda:	e006      	b.n	abea <_vfiprintf_r+0xcea>
    abdc:	f1be 0f0a 	cmp.w	lr, #10
    abe0:	f172 0200 	sbcs.w	r2, r2, #0
    abe4:	d339      	bcc.n	ac5a <_vfiprintf_r+0xd5a>
    abe6:	46a6      	mov	lr, r4
    abe8:	462a      	mov	r2, r5
    abea:	49a6      	ldr	r1, [pc, #664]	; (ae84 <_vfiprintf_r+0xf84>)
    abec:	eb1e 0002 	adds.w	r0, lr, r2
    abf0:	f140 0000 	adc.w	r0, r0, #0
    abf4:	460f      	mov	r7, r1
    abf6:	fba1 1400 	umull	r1, r4, r1, r0
    abfa:	f024 0103 	bic.w	r1, r4, #3
    abfe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    ac02:	1a40      	subs	r0, r0, r1
    ac04:	ebbe 0100 	subs.w	r1, lr, r0
    ac08:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    ac0c:	f162 0400 	sbc.w	r4, r2, #0
    ac10:	fb05 f501 	mul.w	r5, r5, r1
    ac14:	fb07 5504 	mla	r5, r7, r4, r5
    ac18:	fba1 4107 	umull	r4, r1, r1, r7
    ac1c:	440d      	add	r5, r1
    ac1e:	2705      	movs	r7, #5
    ac20:	f004 0101 	and.w	r1, r4, #1
    ac24:	fba1 1b07 	umull	r1, fp, r1, r7
    ac28:	1809      	adds	r1, r1, r0
    ac2a:	0864      	lsrs	r4, r4, #1
    ac2c:	3130      	adds	r1, #48	; 0x30
    ac2e:	f803 1c01 	strb.w	r1, [r3, #-1]
    ac32:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    ac36:	f10c 0c01 	add.w	ip, ip, #1
    ac3a:	3b01      	subs	r3, #1
    ac3c:	086d      	lsrs	r5, r5, #1
    ac3e:	2e00      	cmp	r6, #0
    ac40:	d0cc      	beq.n	abdc <_vfiprintf_r+0xcdc>
    ac42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ac44:	7809      	ldrb	r1, [r1, #0]
    ac46:	4561      	cmp	r1, ip
    ac48:	d1c8      	bne.n	abdc <_vfiprintf_r+0xcdc>
    ac4a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ac4e:	d0c5      	beq.n	abdc <_vfiprintf_r+0xcdc>
    ac50:	f1be 0f0a 	cmp.w	lr, #10
    ac54:	f172 0200 	sbcs.w	r2, r2, #0
    ac58:	d26c      	bcs.n	ad34 <_vfiprintf_r+0xe34>
    ac5a:	461c      	mov	r4, r3
    ac5c:	ab44      	add	r3, sp, #272	; 0x110
    ac5e:	1b1b      	subs	r3, r3, r4
    ac60:	9f04      	ldr	r7, [sp, #16]
    ac62:	9e03      	ldr	r6, [sp, #12]
    ac64:	9304      	str	r3, [sp, #16]
    ac66:	ee18 ba90 	vmov	fp, s17
    ac6a:	f7ff ba72 	b.w	a152 <_vfiprintf_r+0x252>
    ac6e:	9603      	str	r6, [sp, #12]
    ac70:	f7ff ba62 	b.w	a138 <_vfiprintf_r+0x238>
    ac74:	4658      	mov	r0, fp
    ac76:	f7fb fcfb 	bl	6670 <__sinit>
    ac7a:	f7ff b95b 	b.w	9f34 <_vfiprintf_r+0x34>
    ac7e:	2901      	cmp	r1, #1
    ac80:	9603      	str	r6, [sp, #12]
    ac82:	f47f accd 	bne.w	a620 <_vfiprintf_r+0x720>
    ac86:	f7ff ba5c 	b.w	a142 <_vfiprintf_r+0x242>
    ac8a:	9b07      	ldr	r3, [sp, #28]
    ac8c:	9905      	ldr	r1, [sp, #20]
    ac8e:	f853 2b04 	ldr.w	r2, [r3], #4
    ac92:	6011      	str	r1, [r2, #0]
    ac94:	9307      	str	r3, [sp, #28]
    ac96:	f7ff b97e 	b.w	9f96 <_vfiprintf_r+0x96>
    ac9a:	2f06      	cmp	r7, #6
    ac9c:	463b      	mov	r3, r7
    ac9e:	9a03      	ldr	r2, [sp, #12]
    aca0:	4c79      	ldr	r4, [pc, #484]	; (ae88 <_vfiprintf_r+0xf88>)
    aca2:	9207      	str	r2, [sp, #28]
    aca4:	bf28      	it	cs
    aca6:	2306      	movcs	r3, #6
    aca8:	9304      	str	r3, [sp, #16]
    acaa:	9303      	str	r3, [sp, #12]
    acac:	f7ff bb25 	b.w	a2fa <_vfiprintf_r+0x3fa>
    acb0:	9b03      	ldr	r3, [sp, #12]
    acb2:	9907      	ldr	r1, [sp, #28]
    acb4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    acb8:	bf14      	ite	ne
    acba:	f851 3b04 	ldrne.w	r3, [r1], #4
    acbe:	f851 3b04 	ldreq.w	r3, [r1], #4
    acc2:	9107      	str	r1, [sp, #28]
    acc4:	bf1c      	itt	ne
    acc6:	4602      	movne	r2, r0
    acc8:	b2db      	uxtbne	r3, r3
    acca:	2101      	movs	r1, #1
    accc:	f7ff ba8f 	b.w	a1ee <_vfiprintf_r+0x2ee>
    acd0:	ab16      	add	r3, sp, #88	; 0x58
    acd2:	9300      	str	r3, [sp, #0]
    acd4:	2300      	movs	r3, #0
    acd6:	4619      	mov	r1, r3
    acd8:	aa13      	add	r2, sp, #76	; 0x4c
    acda:	4658      	mov	r0, fp
    acdc:	f7ff f8b4 	bl	9e48 <_wcsrtombs_r>
    ace0:	4603      	mov	r3, r0
    ace2:	3301      	adds	r3, #1
    ace4:	9004      	str	r0, [sp, #16]
    ace6:	f000 80ae 	beq.w	ae46 <_vfiprintf_r+0xf46>
    acea:	9413      	str	r4, [sp, #76]	; 0x4c
    acec:	9b04      	ldr	r3, [sp, #16]
    acee:	2b00      	cmp	r3, #0
    acf0:	d030      	beq.n	ad54 <_vfiprintf_r+0xe54>
    acf2:	2b63      	cmp	r3, #99	; 0x63
    acf4:	dc63      	bgt.n	adbe <_vfiprintf_r+0xebe>
    acf6:	2300      	movs	r3, #0
    acf8:	9308      	str	r3, [sp, #32]
    acfa:	ac2b      	add	r4, sp, #172	; 0xac
    acfc:	2208      	movs	r2, #8
    acfe:	2100      	movs	r1, #0
    ad00:	a816      	add	r0, sp, #88	; 0x58
    ad02:	f7fb fdc5 	bl	6890 <memset>
    ad06:	9d04      	ldr	r5, [sp, #16]
    ad08:	ab16      	add	r3, sp, #88	; 0x58
    ad0a:	9300      	str	r3, [sp, #0]
    ad0c:	aa13      	add	r2, sp, #76	; 0x4c
    ad0e:	462b      	mov	r3, r5
    ad10:	4621      	mov	r1, r4
    ad12:	4658      	mov	r0, fp
    ad14:	f7ff f898 	bl	9e48 <_wcsrtombs_r>
    ad18:	4285      	cmp	r5, r0
    ad1a:	f040 80ab 	bne.w	ae74 <_vfiprintf_r+0xf74>
    ad1e:	9b03      	ldr	r3, [sp, #12]
    ad20:	9a04      	ldr	r2, [sp, #16]
    ad22:	9307      	str	r3, [sp, #28]
    ad24:	2300      	movs	r3, #0
    ad26:	54a3      	strb	r3, [r4, r2]
    ad28:	461f      	mov	r7, r3
    ad2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    ad2e:	9303      	str	r3, [sp, #12]
    ad30:	f7ff ba16 	b.w	a160 <_vfiprintf_r+0x260>
    ad34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ad36:	990d      	ldr	r1, [sp, #52]	; 0x34
    ad38:	1a9b      	subs	r3, r3, r2
    ad3a:	4618      	mov	r0, r3
    ad3c:	9308      	str	r3, [sp, #32]
    ad3e:	f7fb fea5 	bl	6a8c <strncpy>
    ad42:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad44:	9b08      	ldr	r3, [sp, #32]
    ad46:	784a      	ldrb	r2, [r1, #1]
    ad48:	b10a      	cbz	r2, ad4e <_vfiprintf_r+0xe4e>
    ad4a:	3101      	adds	r1, #1
    ad4c:	910b      	str	r1, [sp, #44]	; 0x2c
    ad4e:	f04f 0c00 	mov.w	ip, #0
    ad52:	e748      	b.n	abe6 <_vfiprintf_r+0xce6>
    ad54:	9b03      	ldr	r3, [sp, #12]
    ad56:	9307      	str	r3, [sp, #28]
    ad58:	9b04      	ldr	r3, [sp, #16]
    ad5a:	9303      	str	r3, [sp, #12]
    ad5c:	461f      	mov	r7, r3
    ad5e:	9308      	str	r3, [sp, #32]
    ad60:	f7ff b9fe 	b.w	a160 <_vfiprintf_r+0x260>
    ad64:	2101      	movs	r1, #1
    ad66:	4618      	mov	r0, r3
    ad68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ad6c:	f7ff bb13 	b.w	a396 <_vfiprintf_r+0x496>
    ad70:	f850 3b04 	ldr.w	r3, [r0], #4
    ad74:	9007      	str	r0, [sp, #28]
    ad76:	4622      	mov	r2, r4
    ad78:	b2db      	uxtb	r3, r3
    ad7a:	e6b6      	b.n	aaea <_vfiprintf_r+0xbea>
    ad7c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    ad80:	9207      	str	r2, [sp, #28]
    ad82:	17da      	asrs	r2, r3, #31
    ad84:	4611      	mov	r1, r2
    ad86:	f7ff b9ca 	b.w	a11e <_vfiprintf_r+0x21e>
    ad8a:	f851 3b04 	ldr.w	r3, [r1], #4
    ad8e:	9107      	str	r1, [sp, #28]
    ad90:	4602      	mov	r2, r0
    ad92:	b2db      	uxtb	r3, r3
    ad94:	f7ff ba27 	b.w	a1e6 <_vfiprintf_r+0x2e6>
    ad98:	2301      	movs	r3, #1
    ad9a:	931c      	str	r3, [sp, #112]	; 0x70
    ad9c:	2101      	movs	r1, #1
    ad9e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    ada2:	931b      	str	r3, [sp, #108]	; 0x6c
    ada4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ada8:	460b      	mov	r3, r1
    adaa:	f7ff bacd 	b.w	a348 <_vfiprintf_r+0x448>
    adae:	9b07      	ldr	r3, [sp, #28]
    adb0:	9905      	ldr	r1, [sp, #20]
    adb2:	f853 2b04 	ldr.w	r2, [r3], #4
    adb6:	9307      	str	r3, [sp, #28]
    adb8:	8011      	strh	r1, [r2, #0]
    adba:	f7ff b8ec 	b.w	9f96 <_vfiprintf_r+0x96>
    adbe:	1c59      	adds	r1, r3, #1
    adc0:	4658      	mov	r0, fp
    adc2:	f7f9 fe6b 	bl	4a9c <_malloc_r>
    adc6:	4604      	mov	r4, r0
    adc8:	2800      	cmp	r0, #0
    adca:	d03c      	beq.n	ae46 <_vfiprintf_r+0xf46>
    adcc:	9008      	str	r0, [sp, #32]
    adce:	e795      	b.n	acfc <_vfiprintf_r+0xdfc>
    add0:	6d88      	ldr	r0, [r1, #88]	; 0x58
    add2:	f7fc f93d 	bl	7050 <__retarget_lock_release_recursive>
    add6:	f7ff b9e9 	b.w	a1ac <_vfiprintf_r+0x2ac>
    adda:	9b03      	ldr	r3, [sp, #12]
    addc:	9307      	str	r3, [sp, #28]
    adde:	e9cd 7703 	strd	r7, r7, [sp, #12]
    ade2:	9f08      	ldr	r7, [sp, #32]
    ade4:	f7ff b9bc 	b.w	a160 <_vfiprintf_r+0x260>
    ade8:	9819      	ldr	r0, [sp, #100]	; 0x64
    adea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    adec:	3001      	adds	r0, #1
    adee:	e545      	b.n	a87c <_vfiprintf_r+0x97c>
    adf0:	9b03      	ldr	r3, [sp, #12]
    adf2:	9307      	str	r3, [sp, #28]
    adf4:	4620      	mov	r0, r4
    adf6:	f7fc fb03 	bl	7400 <strlen>
    adfa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    adfe:	462f      	mov	r7, r5
    ae00:	9004      	str	r0, [sp, #16]
    ae02:	9303      	str	r3, [sp, #12]
    ae04:	9508      	str	r5, [sp, #32]
    ae06:	f7ff b9ab 	b.w	a160 <_vfiprintf_r+0x260>
    ae0a:	ee18 1a10 	vmov	r1, s16
    ae0e:	aa18      	add	r2, sp, #96	; 0x60
    ae10:	4658      	mov	r0, fp
    ae12:	f7ff f839 	bl	9e88 <__sprint_r.part.0>
    ae16:	2800      	cmp	r0, #0
    ae18:	f43f aa36 	beq.w	a288 <_vfiprintf_r+0x388>
    ae1c:	f7ff ba4d 	b.w	a2ba <_vfiprintf_r+0x3ba>
    ae20:	9819      	ldr	r0, [sp, #100]	; 0x64
    ae22:	3001      	adds	r0, #1
    ae24:	e57a      	b.n	a91c <_vfiprintf_r+0xa1c>
    ae26:	468c      	mov	ip, r1
    ae28:	e46e      	b.n	a708 <_vfiprintf_r+0x808>
    ae2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    ae2c:	07d9      	lsls	r1, r3, #31
    ae2e:	d405      	bmi.n	ae3c <_vfiprintf_r+0xf3c>
    ae30:	89ab      	ldrh	r3, [r5, #12]
    ae32:	059a      	lsls	r2, r3, #22
    ae34:	d402      	bmi.n	ae3c <_vfiprintf_r+0xf3c>
    ae36:	6da8      	ldr	r0, [r5, #88]	; 0x58
    ae38:	f7fc f90a 	bl	7050 <__retarget_lock_release_recursive>
    ae3c:	f04f 33ff 	mov.w	r3, #4294967295
    ae40:	9305      	str	r3, [sp, #20]
    ae42:	f7ff ba49 	b.w	a2d8 <_vfiprintf_r+0x3d8>
    ae46:	ee18 2a10 	vmov	r2, s16
    ae4a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae52:	8193      	strh	r3, [r2, #12]
    ae54:	f7ff ba35 	b.w	a2c2 <_vfiprintf_r+0x3c2>
    ae58:	9c07      	ldr	r4, [sp, #28]
    ae5a:	9704      	str	r7, [sp, #16]
    ae5c:	e746      	b.n	acec <_vfiprintf_r+0xdec>
    ae5e:	9b07      	ldr	r3, [sp, #28]
    ae60:	f898 1001 	ldrb.w	r1, [r8, #1]
    ae64:	f853 7b04 	ldr.w	r7, [r3], #4
    ae68:	9307      	str	r3, [sp, #28]
    ae6a:	4690      	mov	r8, r2
    ae6c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    ae70:	f7ff b8b9 	b.w	9fe6 <_vfiprintf_r+0xe6>
    ae74:	ee18 2a10 	vmov	r2, s16
    ae78:	8993      	ldrh	r3, [r2, #12]
    ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae7e:	8193      	strh	r3, [r2, #12]
    ae80:	f7ff ba15 	b.w	a2ae <_vfiprintf_r+0x3ae>
    ae84:	cccccccd 	.word	0xcccccccd
    ae88:	20000ac8 	.word	0x20000ac8

0000ae8c <__sbprintf>:
    ae8c:	b570      	push	{r4, r5, r6, lr}
    ae8e:	460c      	mov	r4, r1
    ae90:	8989      	ldrh	r1, [r1, #12]
    ae92:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    ae96:	f021 0102 	bic.w	r1, r1, #2
    ae9a:	f8ad 1014 	strh.w	r1, [sp, #20]
    ae9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    aea0:	911b      	str	r1, [sp, #108]	; 0x6c
    aea2:	89e1      	ldrh	r1, [r4, #14]
    aea4:	f8ad 1016 	strh.w	r1, [sp, #22]
    aea8:	69e1      	ldr	r1, [r4, #28]
    aeaa:	9109      	str	r1, [sp, #36]	; 0x24
    aeac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    aeae:	910b      	str	r1, [sp, #44]	; 0x2c
    aeb0:	a91c      	add	r1, sp, #112	; 0x70
    aeb2:	9102      	str	r1, [sp, #8]
    aeb4:	9106      	str	r1, [sp, #24]
    aeb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    aeba:	4606      	mov	r6, r0
    aebc:	9104      	str	r1, [sp, #16]
    aebe:	9107      	str	r1, [sp, #28]
    aec0:	a818      	add	r0, sp, #96	; 0x60
    aec2:	2100      	movs	r1, #0
    aec4:	e9cd 3200 	strd	r3, r2, [sp]
    aec8:	9108      	str	r1, [sp, #32]
    aeca:	f7fc f8bb 	bl	7044 <__retarget_lock_init_recursive>
    aece:	e9dd 3200 	ldrd	r3, r2, [sp]
    aed2:	a902      	add	r1, sp, #8
    aed4:	4630      	mov	r0, r6
    aed6:	f7ff f813 	bl	9f00 <_vfiprintf_r>
    aeda:	1e05      	subs	r5, r0, #0
    aedc:	db07      	blt.n	aeee <__sbprintf+0x62>
    aede:	a902      	add	r1, sp, #8
    aee0:	4630      	mov	r0, r6
    aee2:	f7fd ff61 	bl	8da8 <_fflush_r>
    aee6:	2800      	cmp	r0, #0
    aee8:	bf18      	it	ne
    aeea:	f04f 35ff 	movne.w	r5, #4294967295
    aeee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    aef2:	065b      	lsls	r3, r3, #25
    aef4:	d503      	bpl.n	aefe <__sbprintf+0x72>
    aef6:	89a3      	ldrh	r3, [r4, #12]
    aef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aefc:	81a3      	strh	r3, [r4, #12]
    aefe:	9818      	ldr	r0, [sp, #96]	; 0x60
    af00:	f7fc f8a2 	bl	7048 <__retarget_lock_close_recursive>
    af04:	4628      	mov	r0, r5
    af06:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    af0a:	bd70      	pop	{r4, r5, r6, pc}

0000af0c <__sfvwrite_r>:
    af0c:	6893      	ldr	r3, [r2, #8]
    af0e:	2b00      	cmp	r3, #0
    af10:	f000 8085 	beq.w	b01e <__sfvwrite_r+0x112>
    af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    af1c:	460c      	mov	r4, r1
    af1e:	0719      	lsls	r1, r3, #28
    af20:	4680      	mov	r8, r0
    af22:	b083      	sub	sp, #12
    af24:	4617      	mov	r7, r2
    af26:	b298      	uxth	r0, r3
    af28:	d525      	bpl.n	af76 <__sfvwrite_r+0x6a>
    af2a:	6923      	ldr	r3, [r4, #16]
    af2c:	b31b      	cbz	r3, af76 <__sfvwrite_r+0x6a>
    af2e:	f010 0302 	ands.w	r3, r0, #2
    af32:	683d      	ldr	r5, [r7, #0]
    af34:	d02d      	beq.n	af92 <__sfvwrite_r+0x86>
    af36:	f04f 0a00 	mov.w	sl, #0
    af3a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; b1fc <__sfvwrite_r+0x2f0>
    af3e:	4656      	mov	r6, sl
    af40:	46b9      	mov	r9, r7
    af42:	455e      	cmp	r6, fp
    af44:	4633      	mov	r3, r6
    af46:	4652      	mov	r2, sl
    af48:	bf28      	it	cs
    af4a:	465b      	movcs	r3, fp
    af4c:	4640      	mov	r0, r8
    af4e:	2e00      	cmp	r6, #0
    af50:	d052      	beq.n	aff8 <__sfvwrite_r+0xec>
    af52:	69e1      	ldr	r1, [r4, #28]
    af54:	6a67      	ldr	r7, [r4, #36]	; 0x24
    af56:	47b8      	blx	r7
    af58:	2800      	cmp	r0, #0
    af5a:	dd56      	ble.n	b00a <__sfvwrite_r+0xfe>
    af5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    af60:	1a1b      	subs	r3, r3, r0
    af62:	4482      	add	sl, r0
    af64:	1a36      	subs	r6, r6, r0
    af66:	f8c9 3008 	str.w	r3, [r9, #8]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d1e9      	bne.n	af42 <__sfvwrite_r+0x36>
    af6e:	2000      	movs	r0, #0
    af70:	b003      	add	sp, #12
    af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af76:	4621      	mov	r1, r4
    af78:	4640      	mov	r0, r8
    af7a:	f000 f941 	bl	b200 <__swsetup_r>
    af7e:	2800      	cmp	r0, #0
    af80:	f040 8138 	bne.w	b1f4 <__sfvwrite_r+0x2e8>
    af84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    af88:	683d      	ldr	r5, [r7, #0]
    af8a:	b298      	uxth	r0, r3
    af8c:	f010 0302 	ands.w	r3, r0, #2
    af90:	d1d1      	bne.n	af36 <__sfvwrite_r+0x2a>
    af92:	f010 0901 	ands.w	r9, r0, #1
    af96:	d144      	bne.n	b022 <__sfvwrite_r+0x116>
    af98:	464e      	mov	r6, r9
    af9a:	9700      	str	r7, [sp, #0]
    af9c:	b346      	cbz	r6, aff0 <__sfvwrite_r+0xe4>
    af9e:	0582      	lsls	r2, r0, #22
    afa0:	f8d4 b008 	ldr.w	fp, [r4, #8]
    afa4:	f140 8085 	bpl.w	b0b2 <__sfvwrite_r+0x1a6>
    afa8:	45b3      	cmp	fp, r6
    afaa:	465a      	mov	r2, fp
    afac:	f200 80b4 	bhi.w	b118 <__sfvwrite_r+0x20c>
    afb0:	f410 6f90 	tst.w	r0, #1152	; 0x480
    afb4:	f040 80c1 	bne.w	b13a <__sfvwrite_r+0x22e>
    afb8:	6820      	ldr	r0, [r4, #0]
    afba:	9201      	str	r2, [sp, #4]
    afbc:	4649      	mov	r1, r9
    afbe:	f7fb fbeb 	bl	6798 <memmove>
    afc2:	68a3      	ldr	r3, [r4, #8]
    afc4:	9a01      	ldr	r2, [sp, #4]
    afc6:	eba3 010b 	sub.w	r1, r3, fp
    afca:	6823      	ldr	r3, [r4, #0]
    afcc:	60a1      	str	r1, [r4, #8]
    afce:	4413      	add	r3, r2
    afd0:	46b2      	mov	sl, r6
    afd2:	6023      	str	r3, [r4, #0]
    afd4:	2600      	movs	r6, #0
    afd6:	9a00      	ldr	r2, [sp, #0]
    afd8:	6893      	ldr	r3, [r2, #8]
    afda:	eba3 030a 	sub.w	r3, r3, sl
    afde:	44d1      	add	r9, sl
    afe0:	6093      	str	r3, [r2, #8]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d0c3      	beq.n	af6e <__sfvwrite_r+0x62>
    afe6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    afea:	b280      	uxth	r0, r0
    afec:	2e00      	cmp	r6, #0
    afee:	d1d6      	bne.n	af9e <__sfvwrite_r+0x92>
    aff0:	e9d5 9600 	ldrd	r9, r6, [r5]
    aff4:	3508      	adds	r5, #8
    aff6:	e7d1      	b.n	af9c <__sfvwrite_r+0x90>
    aff8:	e9d5 a600 	ldrd	sl, r6, [r5]
    affc:	3508      	adds	r5, #8
    affe:	e7a0      	b.n	af42 <__sfvwrite_r+0x36>
    b000:	4621      	mov	r1, r4
    b002:	4640      	mov	r0, r8
    b004:	f7fd fed0 	bl	8da8 <_fflush_r>
    b008:	b388      	cbz	r0, b06e <__sfvwrite_r+0x162>
    b00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b012:	f04f 30ff 	mov.w	r0, #4294967295
    b016:	81a3      	strh	r3, [r4, #12]
    b018:	b003      	add	sp, #12
    b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b01e:	2000      	movs	r0, #0
    b020:	4770      	bx	lr
    b022:	461e      	mov	r6, r3
    b024:	46ba      	mov	sl, r7
    b026:	4699      	mov	r9, r3
    b028:	4618      	mov	r0, r3
    b02a:	9500      	str	r5, [sp, #0]
    b02c:	461f      	mov	r7, r3
    b02e:	b366      	cbz	r6, b08a <__sfvwrite_r+0x17e>
    b030:	2800      	cmp	r0, #0
    b032:	d032      	beq.n	b09a <__sfvwrite_r+0x18e>
    b034:	464a      	mov	r2, r9
    b036:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    b03a:	6820      	ldr	r0, [r4, #0]
    b03c:	68a5      	ldr	r5, [r4, #8]
    b03e:	42b2      	cmp	r2, r6
    b040:	bf28      	it	cs
    b042:	4632      	movcs	r2, r6
    b044:	4288      	cmp	r0, r1
    b046:	d904      	bls.n	b052 <__sfvwrite_r+0x146>
    b048:	eb05 0b03 	add.w	fp, r5, r3
    b04c:	455a      	cmp	r2, fp
    b04e:	f300 80a7 	bgt.w	b1a0 <__sfvwrite_r+0x294>
    b052:	4293      	cmp	r3, r2
    b054:	dc64      	bgt.n	b120 <__sfvwrite_r+0x214>
    b056:	69e1      	ldr	r1, [r4, #28]
    b058:	6a65      	ldr	r5, [r4, #36]	; 0x24
    b05a:	463a      	mov	r2, r7
    b05c:	4640      	mov	r0, r8
    b05e:	47a8      	blx	r5
    b060:	f1b0 0b00 	subs.w	fp, r0, #0
    b064:	ddd1      	ble.n	b00a <__sfvwrite_r+0xfe>
    b066:	ebb9 090b 	subs.w	r9, r9, fp
    b06a:	d0c9      	beq.n	b000 <__sfvwrite_r+0xf4>
    b06c:	2001      	movs	r0, #1
    b06e:	f8da 3008 	ldr.w	r3, [sl, #8]
    b072:	eba3 030b 	sub.w	r3, r3, fp
    b076:	445f      	add	r7, fp
    b078:	eba6 060b 	sub.w	r6, r6, fp
    b07c:	f8ca 3008 	str.w	r3, [sl, #8]
    b080:	2b00      	cmp	r3, #0
    b082:	f43f af74 	beq.w	af6e <__sfvwrite_r+0x62>
    b086:	2e00      	cmp	r6, #0
    b088:	d1d2      	bne.n	b030 <__sfvwrite_r+0x124>
    b08a:	9a00      	ldr	r2, [sp, #0]
    b08c:	6856      	ldr	r6, [r2, #4]
    b08e:	4613      	mov	r3, r2
    b090:	3208      	adds	r2, #8
    b092:	9200      	str	r2, [sp, #0]
    b094:	2e00      	cmp	r6, #0
    b096:	d0f8      	beq.n	b08a <__sfvwrite_r+0x17e>
    b098:	681f      	ldr	r7, [r3, #0]
    b09a:	4632      	mov	r2, r6
    b09c:	210a      	movs	r1, #10
    b09e:	4638      	mov	r0, r7
    b0a0:	f7fd fef6 	bl	8e90 <memchr>
    b0a4:	2800      	cmp	r0, #0
    b0a6:	f000 809c 	beq.w	b1e2 <__sfvwrite_r+0x2d6>
    b0aa:	3001      	adds	r0, #1
    b0ac:	eba0 0907 	sub.w	r9, r0, r7
    b0b0:	e7c0      	b.n	b034 <__sfvwrite_r+0x128>
    b0b2:	6820      	ldr	r0, [r4, #0]
    b0b4:	6923      	ldr	r3, [r4, #16]
    b0b6:	4298      	cmp	r0, r3
    b0b8:	d816      	bhi.n	b0e8 <__sfvwrite_r+0x1dc>
    b0ba:	6962      	ldr	r2, [r4, #20]
    b0bc:	42b2      	cmp	r2, r6
    b0be:	d813      	bhi.n	b0e8 <__sfvwrite_r+0x1dc>
    b0c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    b0c4:	42b3      	cmp	r3, r6
    b0c6:	bf28      	it	cs
    b0c8:	4633      	movcs	r3, r6
    b0ca:	69e1      	ldr	r1, [r4, #28]
    b0cc:	fb93 f3f2 	sdiv	r3, r3, r2
    b0d0:	6a67      	ldr	r7, [r4, #36]	; 0x24
    b0d2:	fb02 f303 	mul.w	r3, r2, r3
    b0d6:	4640      	mov	r0, r8
    b0d8:	464a      	mov	r2, r9
    b0da:	47b8      	blx	r7
    b0dc:	f1b0 0a00 	subs.w	sl, r0, #0
    b0e0:	dd93      	ble.n	b00a <__sfvwrite_r+0xfe>
    b0e2:	eba6 060a 	sub.w	r6, r6, sl
    b0e6:	e776      	b.n	afd6 <__sfvwrite_r+0xca>
    b0e8:	45b3      	cmp	fp, r6
    b0ea:	46da      	mov	sl, fp
    b0ec:	bf28      	it	cs
    b0ee:	46b2      	movcs	sl, r6
    b0f0:	4652      	mov	r2, sl
    b0f2:	4649      	mov	r1, r9
    b0f4:	f7fb fb50 	bl	6798 <memmove>
    b0f8:	68a3      	ldr	r3, [r4, #8]
    b0fa:	6822      	ldr	r2, [r4, #0]
    b0fc:	eba3 030a 	sub.w	r3, r3, sl
    b100:	4452      	add	r2, sl
    b102:	60a3      	str	r3, [r4, #8]
    b104:	6022      	str	r2, [r4, #0]
    b106:	2b00      	cmp	r3, #0
    b108:	d1eb      	bne.n	b0e2 <__sfvwrite_r+0x1d6>
    b10a:	4621      	mov	r1, r4
    b10c:	4640      	mov	r0, r8
    b10e:	f7fd fe4b 	bl	8da8 <_fflush_r>
    b112:	2800      	cmp	r0, #0
    b114:	d0e5      	beq.n	b0e2 <__sfvwrite_r+0x1d6>
    b116:	e778      	b.n	b00a <__sfvwrite_r+0xfe>
    b118:	6820      	ldr	r0, [r4, #0]
    b11a:	46b3      	mov	fp, r6
    b11c:	4632      	mov	r2, r6
    b11e:	e74c      	b.n	afba <__sfvwrite_r+0xae>
    b120:	4639      	mov	r1, r7
    b122:	9201      	str	r2, [sp, #4]
    b124:	f7fb fb38 	bl	6798 <memmove>
    b128:	9a01      	ldr	r2, [sp, #4]
    b12a:	68a3      	ldr	r3, [r4, #8]
    b12c:	1a9b      	subs	r3, r3, r2
    b12e:	60a3      	str	r3, [r4, #8]
    b130:	6823      	ldr	r3, [r4, #0]
    b132:	4413      	add	r3, r2
    b134:	6023      	str	r3, [r4, #0]
    b136:	4693      	mov	fp, r2
    b138:	e795      	b.n	b066 <__sfvwrite_r+0x15a>
    b13a:	6823      	ldr	r3, [r4, #0]
    b13c:	6921      	ldr	r1, [r4, #16]
    b13e:	eba3 0b01 	sub.w	fp, r3, r1
    b142:	6963      	ldr	r3, [r4, #20]
    b144:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    b148:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    b14c:	f10b 0301 	add.w	r3, fp, #1
    b150:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    b154:	4433      	add	r3, r6
    b156:	4553      	cmp	r3, sl
    b158:	4652      	mov	r2, sl
    b15a:	bf84      	itt	hi
    b15c:	469a      	movhi	sl, r3
    b15e:	4652      	movhi	r2, sl
    b160:	0543      	lsls	r3, r0, #21
    b162:	d52c      	bpl.n	b1be <__sfvwrite_r+0x2b2>
    b164:	4611      	mov	r1, r2
    b166:	4640      	mov	r0, r8
    b168:	f7f9 fc98 	bl	4a9c <_malloc_r>
    b16c:	2800      	cmp	r0, #0
    b16e:	d03b      	beq.n	b1e8 <__sfvwrite_r+0x2dc>
    b170:	465a      	mov	r2, fp
    b172:	6921      	ldr	r1, [r4, #16]
    b174:	9001      	str	r0, [sp, #4]
    b176:	f7f7 fb5b 	bl	2830 <memcpy>
    b17a:	89a2      	ldrh	r2, [r4, #12]
    b17c:	9b01      	ldr	r3, [sp, #4]
    b17e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    b182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b186:	81a2      	strh	r2, [r4, #12]
    b188:	eb03 000b 	add.w	r0, r3, fp
    b18c:	6123      	str	r3, [r4, #16]
    b18e:	ebaa 030b 	sub.w	r3, sl, fp
    b192:	f8c4 a014 	str.w	sl, [r4, #20]
    b196:	60a3      	str	r3, [r4, #8]
    b198:	6020      	str	r0, [r4, #0]
    b19a:	46b3      	mov	fp, r6
    b19c:	4632      	mov	r2, r6
    b19e:	e70c      	b.n	afba <__sfvwrite_r+0xae>
    b1a0:	4639      	mov	r1, r7
    b1a2:	465a      	mov	r2, fp
    b1a4:	f7fb faf8 	bl	6798 <memmove>
    b1a8:	6823      	ldr	r3, [r4, #0]
    b1aa:	445b      	add	r3, fp
    b1ac:	6023      	str	r3, [r4, #0]
    b1ae:	4621      	mov	r1, r4
    b1b0:	4640      	mov	r0, r8
    b1b2:	f7fd fdf9 	bl	8da8 <_fflush_r>
    b1b6:	2800      	cmp	r0, #0
    b1b8:	f43f af55 	beq.w	b066 <__sfvwrite_r+0x15a>
    b1bc:	e725      	b.n	b00a <__sfvwrite_r+0xfe>
    b1be:	4640      	mov	r0, r8
    b1c0:	f7f9 ff34 	bl	502c <_realloc_r>
    b1c4:	4603      	mov	r3, r0
    b1c6:	2800      	cmp	r0, #0
    b1c8:	d1de      	bne.n	b188 <__sfvwrite_r+0x27c>
    b1ca:	6921      	ldr	r1, [r4, #16]
    b1cc:	4640      	mov	r0, r8
    b1ce:	f7fc fa29 	bl	7624 <_free_r>
    b1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b1d6:	220c      	movs	r2, #12
    b1d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b1dc:	f8c8 2000 	str.w	r2, [r8]
    b1e0:	e715      	b.n	b00e <__sfvwrite_r+0x102>
    b1e2:	1c72      	adds	r2, r6, #1
    b1e4:	4691      	mov	r9, r2
    b1e6:	e726      	b.n	b036 <__sfvwrite_r+0x12a>
    b1e8:	220c      	movs	r2, #12
    b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b1ee:	f8c8 2000 	str.w	r2, [r8]
    b1f2:	e70c      	b.n	b00e <__sfvwrite_r+0x102>
    b1f4:	f04f 30ff 	mov.w	r0, #4294967295
    b1f8:	e6ba      	b.n	af70 <__sfvwrite_r+0x64>
    b1fa:	bf00      	nop
    b1fc:	7ffffc00 	.word	0x7ffffc00

0000b200 <__swsetup_r>:
    b200:	b538      	push	{r3, r4, r5, lr}
    b202:	4b31      	ldr	r3, [pc, #196]	; (b2c8 <__swsetup_r+0xc8>)
    b204:	681b      	ldr	r3, [r3, #0]
    b206:	4605      	mov	r5, r0
    b208:	460c      	mov	r4, r1
    b20a:	b113      	cbz	r3, b212 <__swsetup_r+0x12>
    b20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b20e:	2a00      	cmp	r2, #0
    b210:	d04e      	beq.n	b2b0 <__swsetup_r+0xb0>
    b212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b216:	0718      	lsls	r0, r3, #28
    b218:	b29a      	uxth	r2, r3
    b21a:	d51c      	bpl.n	b256 <__swsetup_r+0x56>
    b21c:	6921      	ldr	r1, [r4, #16]
    b21e:	b329      	cbz	r1, b26c <__swsetup_r+0x6c>
    b220:	f012 0001 	ands.w	r0, r2, #1
    b224:	d007      	beq.n	b236 <__swsetup_r+0x36>
    b226:	2000      	movs	r0, #0
    b228:	60a0      	str	r0, [r4, #8]
    b22a:	6960      	ldr	r0, [r4, #20]
    b22c:	4240      	negs	r0, r0
    b22e:	61a0      	str	r0, [r4, #24]
    b230:	b139      	cbz	r1, b242 <__swsetup_r+0x42>
    b232:	2000      	movs	r0, #0
    b234:	bd38      	pop	{r3, r4, r5, pc}
    b236:	0795      	lsls	r5, r2, #30
    b238:	bf58      	it	pl
    b23a:	6960      	ldrpl	r0, [r4, #20]
    b23c:	60a0      	str	r0, [r4, #8]
    b23e:	2900      	cmp	r1, #0
    b240:	d1f7      	bne.n	b232 <__swsetup_r+0x32>
    b242:	0612      	lsls	r2, r2, #24
    b244:	bf58      	it	pl
    b246:	4608      	movpl	r0, r1
    b248:	d5f4      	bpl.n	b234 <__swsetup_r+0x34>
    b24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b24e:	81a3      	strh	r3, [r4, #12]
    b250:	f04f 30ff 	mov.w	r0, #4294967295
    b254:	bd38      	pop	{r3, r4, r5, pc}
    b256:	06d1      	lsls	r1, r2, #27
    b258:	d52e      	bpl.n	b2b8 <__swsetup_r+0xb8>
    b25a:	0752      	lsls	r2, r2, #29
    b25c:	d414      	bmi.n	b288 <__swsetup_r+0x88>
    b25e:	6921      	ldr	r1, [r4, #16]
    b260:	f043 0308 	orr.w	r3, r3, #8
    b264:	81a3      	strh	r3, [r4, #12]
    b266:	b29a      	uxth	r2, r3
    b268:	2900      	cmp	r1, #0
    b26a:	d1d9      	bne.n	b220 <__swsetup_r+0x20>
    b26c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    b270:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    b274:	d0d4      	beq.n	b220 <__swsetup_r+0x20>
    b276:	4621      	mov	r1, r4
    b278:	4628      	mov	r0, r5
    b27a:	f000 f947 	bl	b50c <__smakebuf_r>
    b27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b282:	6921      	ldr	r1, [r4, #16]
    b284:	b29a      	uxth	r2, r3
    b286:	e7cb      	b.n	b220 <__swsetup_r+0x20>
    b288:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b28a:	b151      	cbz	r1, b2a2 <__swsetup_r+0xa2>
    b28c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    b290:	4291      	cmp	r1, r2
    b292:	d004      	beq.n	b29e <__swsetup_r+0x9e>
    b294:	4628      	mov	r0, r5
    b296:	f7fc f9c5 	bl	7624 <_free_r>
    b29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b29e:	2200      	movs	r2, #0
    b2a0:	6322      	str	r2, [r4, #48]	; 0x30
    b2a2:	6921      	ldr	r1, [r4, #16]
    b2a4:	2200      	movs	r2, #0
    b2a6:	e9c4 1200 	strd	r1, r2, [r4]
    b2aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    b2ae:	e7d7      	b.n	b260 <__swsetup_r+0x60>
    b2b0:	4618      	mov	r0, r3
    b2b2:	f7fb f9dd 	bl	6670 <__sinit>
    b2b6:	e7ac      	b.n	b212 <__swsetup_r+0x12>
    b2b8:	2209      	movs	r2, #9
    b2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b2be:	602a      	str	r2, [r5, #0]
    b2c0:	f04f 30ff 	mov.w	r0, #4294967295
    b2c4:	81a3      	strh	r3, [r4, #12]
    b2c6:	bd38      	pop	{r3, r4, r5, pc}
    b2c8:	200016c4 	.word	0x200016c4

0000b2cc <__fputwc>:
    b2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b2d0:	b082      	sub	sp, #8
    b2d2:	4682      	mov	sl, r0
    b2d4:	4688      	mov	r8, r1
    b2d6:	4614      	mov	r4, r2
    b2d8:	f7fb fe1e 	bl	6f18 <__locale_mb_cur_max>
    b2dc:	2801      	cmp	r0, #1
    b2de:	d103      	bne.n	b2e8 <__fputwc+0x1c>
    b2e0:	f108 33ff 	add.w	r3, r8, #4294967295
    b2e4:	2bfe      	cmp	r3, #254	; 0xfe
    b2e6:	d936      	bls.n	b356 <__fputwc+0x8a>
    b2e8:	f10d 0904 	add.w	r9, sp, #4
    b2ec:	4642      	mov	r2, r8
    b2ee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    b2f2:	4649      	mov	r1, r9
    b2f4:	4650      	mov	r0, sl
    b2f6:	f7fe fd81 	bl	9dfc <_wcrtomb_r>
    b2fa:	1c42      	adds	r2, r0, #1
    b2fc:	4606      	mov	r6, r0
    b2fe:	d032      	beq.n	b366 <__fputwc+0x9a>
    b300:	b320      	cbz	r0, b34c <__fputwc+0x80>
    b302:	f89d c004 	ldrb.w	ip, [sp, #4]
    b306:	2500      	movs	r5, #0
    b308:	e009      	b.n	b31e <__fputwc+0x52>
    b30a:	6823      	ldr	r3, [r4, #0]
    b30c:	1c5a      	adds	r2, r3, #1
    b30e:	6022      	str	r2, [r4, #0]
    b310:	f883 c000 	strb.w	ip, [r3]
    b314:	3501      	adds	r5, #1
    b316:	42b5      	cmp	r5, r6
    b318:	d218      	bcs.n	b34c <__fputwc+0x80>
    b31a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    b31e:	68a3      	ldr	r3, [r4, #8]
    b320:	3b01      	subs	r3, #1
    b322:	2b00      	cmp	r3, #0
    b324:	60a3      	str	r3, [r4, #8]
    b326:	daf0      	bge.n	b30a <__fputwc+0x3e>
    b328:	69a7      	ldr	r7, [r4, #24]
    b32a:	42bb      	cmp	r3, r7
    b32c:	4661      	mov	r1, ip
    b32e:	4622      	mov	r2, r4
    b330:	4650      	mov	r0, sl
    b332:	db02      	blt.n	b33a <__fputwc+0x6e>
    b334:	f1bc 0f0a 	cmp.w	ip, #10
    b338:	d1e7      	bne.n	b30a <__fputwc+0x3e>
    b33a:	f000 f953 	bl	b5e4 <__swbuf_r>
    b33e:	1c43      	adds	r3, r0, #1
    b340:	d1e8      	bne.n	b314 <__fputwc+0x48>
    b342:	4606      	mov	r6, r0
    b344:	4630      	mov	r0, r6
    b346:	b002      	add	sp, #8
    b348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b34c:	4646      	mov	r6, r8
    b34e:	4630      	mov	r0, r6
    b350:	b002      	add	sp, #8
    b352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b356:	fa5f fc88 	uxtb.w	ip, r8
    b35a:	f88d c004 	strb.w	ip, [sp, #4]
    b35e:	4606      	mov	r6, r0
    b360:	f10d 0904 	add.w	r9, sp, #4
    b364:	e7cf      	b.n	b306 <__fputwc+0x3a>
    b366:	89a3      	ldrh	r3, [r4, #12]
    b368:	4630      	mov	r0, r6
    b36a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b36e:	81a3      	strh	r3, [r4, #12]
    b370:	b002      	add	sp, #8
    b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b376:	bf00      	nop

0000b378 <_fputwc_r>:
    b378:	b530      	push	{r4, r5, lr}
    b37a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    b37c:	f013 0f01 	tst.w	r3, #1
    b380:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    b384:	4614      	mov	r4, r2
    b386:	b083      	sub	sp, #12
    b388:	4605      	mov	r5, r0
    b38a:	b29a      	uxth	r2, r3
    b38c:	d101      	bne.n	b392 <_fputwc_r+0x1a>
    b38e:	0598      	lsls	r0, r3, #22
    b390:	d51c      	bpl.n	b3cc <_fputwc_r+0x54>
    b392:	0490      	lsls	r0, r2, #18
    b394:	d406      	bmi.n	b3a4 <_fputwc_r+0x2c>
    b396:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b39c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b3a0:	81a3      	strh	r3, [r4, #12]
    b3a2:	6662      	str	r2, [r4, #100]	; 0x64
    b3a4:	4622      	mov	r2, r4
    b3a6:	4628      	mov	r0, r5
    b3a8:	f7ff ff90 	bl	b2cc <__fputwc>
    b3ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b3ae:	07da      	lsls	r2, r3, #31
    b3b0:	4605      	mov	r5, r0
    b3b2:	d402      	bmi.n	b3ba <_fputwc_r+0x42>
    b3b4:	89a3      	ldrh	r3, [r4, #12]
    b3b6:	059b      	lsls	r3, r3, #22
    b3b8:	d502      	bpl.n	b3c0 <_fputwc_r+0x48>
    b3ba:	4628      	mov	r0, r5
    b3bc:	b003      	add	sp, #12
    b3be:	bd30      	pop	{r4, r5, pc}
    b3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b3c2:	f7fb fe45 	bl	7050 <__retarget_lock_release_recursive>
    b3c6:	4628      	mov	r0, r5
    b3c8:	b003      	add	sp, #12
    b3ca:	bd30      	pop	{r4, r5, pc}
    b3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b3ce:	9101      	str	r1, [sp, #4]
    b3d0:	f7fb fe3c 	bl	704c <__retarget_lock_acquire_recursive>
    b3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b3d8:	9901      	ldr	r1, [sp, #4]
    b3da:	b29a      	uxth	r2, r3
    b3dc:	e7d9      	b.n	b392 <_fputwc_r+0x1a>
    b3de:	bf00      	nop

0000b3e0 <_wcsnrtombs_l>:
    b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3e4:	b08b      	sub	sp, #44	; 0x2c
    b3e6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    b3ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    b3ec:	9103      	str	r1, [sp, #12]
    b3ee:	4681      	mov	r9, r0
    b3f0:	9205      	str	r2, [sp, #20]
    b3f2:	461e      	mov	r6, r3
    b3f4:	f1b8 0f00 	cmp.w	r8, #0
    b3f8:	d05c      	beq.n	b4b4 <_wcsnrtombs_l+0xd4>
    b3fa:	9b03      	ldr	r3, [sp, #12]
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d05e      	beq.n	b4be <_wcsnrtombs_l+0xde>
    b400:	9b05      	ldr	r3, [sp, #20]
    b402:	681d      	ldr	r5, [r3, #0]
    b404:	2f00      	cmp	r7, #0
    b406:	d06a      	beq.n	b4de <_wcsnrtombs_l+0xfe>
    b408:	1e74      	subs	r4, r6, #1
    b40a:	b34e      	cbz	r6, b460 <_wcsnrtombs_l+0x80>
    b40c:	9b03      	ldr	r3, [sp, #12]
    b40e:	9304      	str	r3, [sp, #16]
    b410:	3d04      	subs	r5, #4
    b412:	2600      	movs	r6, #0
    b414:	9501      	str	r5, [sp, #4]
    b416:	e00b      	b.n	b430 <_wcsnrtombs_l+0x50>
    b418:	9b03      	ldr	r3, [sp, #12]
    b41a:	bb2b      	cbnz	r3, b468 <_wcsnrtombs_l+0x88>
    b41c:	9b01      	ldr	r3, [sp, #4]
    b41e:	681a      	ldr	r2, [r3, #0]
    b420:	2a00      	cmp	r2, #0
    b422:	d03a      	beq.n	b49a <_wcsnrtombs_l+0xba>
    b424:	45bc      	cmp	ip, r7
    b426:	d25c      	bcs.n	b4e2 <_wcsnrtombs_l+0x102>
    b428:	3c01      	subs	r4, #1
    b42a:	1c63      	adds	r3, r4, #1
    b42c:	4666      	mov	r6, ip
    b42e:	d017      	beq.n	b460 <_wcsnrtombs_l+0x80>
    b430:	f8d8 3000 	ldr.w	r3, [r8]
    b434:	9302      	str	r3, [sp, #8]
    b436:	9b01      	ldr	r3, [sp, #4]
    b438:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    b43c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b440:	9301      	str	r3, [sp, #4]
    b442:	a907      	add	r1, sp, #28
    b444:	4643      	mov	r3, r8
    b446:	4648      	mov	r0, r9
    b448:	f8d8 b004 	ldr.w	fp, [r8, #4]
    b44c:	47a8      	blx	r5
    b44e:	1c42      	adds	r2, r0, #1
    b450:	d03a      	beq.n	b4c8 <_wcsnrtombs_l+0xe8>
    b452:	eb00 0c06 	add.w	ip, r0, r6
    b456:	45bc      	cmp	ip, r7
    b458:	d9de      	bls.n	b418 <_wcsnrtombs_l+0x38>
    b45a:	9b02      	ldr	r3, [sp, #8]
    b45c:	e9c8 3b00 	strd	r3, fp, [r8]
    b460:	4630      	mov	r0, r6
    b462:	b00b      	add	sp, #44	; 0x2c
    b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b468:	2800      	cmp	r0, #0
    b46a:	dd0e      	ble.n	b48a <_wcsnrtombs_l+0xaa>
    b46c:	9b04      	ldr	r3, [sp, #16]
    b46e:	9d01      	ldr	r5, [sp, #4]
    b470:	4418      	add	r0, r3
    b472:	1e5a      	subs	r2, r3, #1
    b474:	a907      	add	r1, sp, #28
    b476:	f100 3eff 	add.w	lr, r0, #4294967295
    b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
    b47e:	f802 3f01 	strb.w	r3, [r2, #1]!
    b482:	4572      	cmp	r2, lr
    b484:	d1f9      	bne.n	b47a <_wcsnrtombs_l+0x9a>
    b486:	9501      	str	r5, [sp, #4]
    b488:	9004      	str	r0, [sp, #16]
    b48a:	9b05      	ldr	r3, [sp, #20]
    b48c:	681a      	ldr	r2, [r3, #0]
    b48e:	3204      	adds	r2, #4
    b490:	601a      	str	r2, [r3, #0]
    b492:	9b01      	ldr	r3, [sp, #4]
    b494:	681a      	ldr	r2, [r3, #0]
    b496:	2a00      	cmp	r2, #0
    b498:	d1c4      	bne.n	b424 <_wcsnrtombs_l+0x44>
    b49a:	9b03      	ldr	r3, [sp, #12]
    b49c:	b10b      	cbz	r3, b4a2 <_wcsnrtombs_l+0xc2>
    b49e:	9b05      	ldr	r3, [sp, #20]
    b4a0:	601a      	str	r2, [r3, #0]
    b4a2:	f10c 36ff 	add.w	r6, ip, #4294967295
    b4a6:	2200      	movs	r2, #0
    b4a8:	4630      	mov	r0, r6
    b4aa:	f8c8 2000 	str.w	r2, [r8]
    b4ae:	b00b      	add	sp, #44	; 0x2c
    b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4b4:	9b03      	ldr	r3, [sp, #12]
    b4b6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	d1a0      	bne.n	b400 <_wcsnrtombs_l+0x20>
    b4be:	9b05      	ldr	r3, [sp, #20]
    b4c0:	f04f 37ff 	mov.w	r7, #4294967295
    b4c4:	681d      	ldr	r5, [r3, #0]
    b4c6:	e79f      	b.n	b408 <_wcsnrtombs_l+0x28>
    b4c8:	4606      	mov	r6, r0
    b4ca:	218a      	movs	r1, #138	; 0x8a
    b4cc:	2200      	movs	r2, #0
    b4ce:	4630      	mov	r0, r6
    b4d0:	f8c9 1000 	str.w	r1, [r9]
    b4d4:	f8c8 2000 	str.w	r2, [r8]
    b4d8:	b00b      	add	sp, #44	; 0x2c
    b4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4de:	463e      	mov	r6, r7
    b4e0:	e7be      	b.n	b460 <_wcsnrtombs_l+0x80>
    b4e2:	4666      	mov	r6, ip
    b4e4:	e7bc      	b.n	b460 <_wcsnrtombs_l+0x80>
    b4e6:	bf00      	nop

0000b4e8 <_wcsnrtombs_r>:
    b4e8:	b510      	push	{r4, lr}
    b4ea:	b084      	sub	sp, #16
    b4ec:	4c05      	ldr	r4, [pc, #20]	; (b504 <_wcsnrtombs_r+0x1c>)
    b4ee:	9806      	ldr	r0, [sp, #24]
    b4f0:	9000      	str	r0, [sp, #0]
    b4f2:	9807      	ldr	r0, [sp, #28]
    b4f4:	9001      	str	r0, [sp, #4]
    b4f6:	4804      	ldr	r0, [pc, #16]	; (b508 <_wcsnrtombs_r+0x20>)
    b4f8:	6800      	ldr	r0, [r0, #0]
    b4fa:	9402      	str	r4, [sp, #8]
    b4fc:	f7ff ff70 	bl	b3e0 <_wcsnrtombs_l>
    b500:	b004      	add	sp, #16
    b502:	bd10      	pop	{r4, pc}
    b504:	2000113c 	.word	0x2000113c
    b508:	200016c4 	.word	0x200016c4

0000b50c <__smakebuf_r>:
    b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b510:	898b      	ldrh	r3, [r1, #12]
    b512:	460c      	mov	r4, r1
    b514:	0799      	lsls	r1, r3, #30
    b516:	b096      	sub	sp, #88	; 0x58
    b518:	d508      	bpl.n	b52c <__smakebuf_r+0x20>
    b51a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    b51e:	2201      	movs	r2, #1
    b520:	e9c4 3204 	strd	r3, r2, [r4, #16]
    b524:	6023      	str	r3, [r4, #0]
    b526:	b016      	add	sp, #88	; 0x58
    b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b530:	2900      	cmp	r1, #0
    b532:	4606      	mov	r6, r0
    b534:	db25      	blt.n	b582 <__smakebuf_r+0x76>
    b536:	466a      	mov	r2, sp
    b538:	f000 f8ac 	bl	b694 <_fstat_r>
    b53c:	2800      	cmp	r0, #0
    b53e:	db1f      	blt.n	b580 <__smakebuf_r+0x74>
    b540:	9d01      	ldr	r5, [sp, #4]
    b542:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    b546:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    b54a:	fab5 f585 	clz	r5, r5
    b54e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    b552:	096d      	lsrs	r5, r5, #5
    b554:	f44f 6700 	mov.w	r7, #2048	; 0x800
    b558:	4641      	mov	r1, r8
    b55a:	4630      	mov	r0, r6
    b55c:	f7f9 fa9e 	bl	4a9c <_malloc_r>
    b560:	b1e0      	cbz	r0, b59c <__smakebuf_r+0x90>
    b562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b566:	f8c4 8014 	str.w	r8, [r4, #20]
    b56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b56e:	6020      	str	r0, [r4, #0]
    b570:	6120      	str	r0, [r4, #16]
    b572:	81a3      	strh	r3, [r4, #12]
    b574:	bb35      	cbnz	r5, b5c4 <__smakebuf_r+0xb8>
    b576:	433b      	orrs	r3, r7
    b578:	81a3      	strh	r3, [r4, #12]
    b57a:	b016      	add	sp, #88	; 0x58
    b57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b580:	89a3      	ldrh	r3, [r4, #12]
    b582:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    b586:	d019      	beq.n	b5bc <__smakebuf_r+0xb0>
    b588:	f04f 0840 	mov.w	r8, #64	; 0x40
    b58c:	2500      	movs	r5, #0
    b58e:	4641      	mov	r1, r8
    b590:	4630      	mov	r0, r6
    b592:	462f      	mov	r7, r5
    b594:	f7f9 fa82 	bl	4a9c <_malloc_r>
    b598:	2800      	cmp	r0, #0
    b59a:	d1e2      	bne.n	b562 <__smakebuf_r+0x56>
    b59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b5a0:	059a      	lsls	r2, r3, #22
    b5a2:	d4c0      	bmi.n	b526 <__smakebuf_r+0x1a>
    b5a4:	f023 0303 	bic.w	r3, r3, #3
    b5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    b5ac:	f043 0302 	orr.w	r3, r3, #2
    b5b0:	2101      	movs	r1, #1
    b5b2:	e9c4 2104 	strd	r2, r1, [r4, #16]
    b5b6:	81a3      	strh	r3, [r4, #12]
    b5b8:	6022      	str	r2, [r4, #0]
    b5ba:	e7b4      	b.n	b526 <__smakebuf_r+0x1a>
    b5bc:	f44f 6880 	mov.w	r8, #1024	; 0x400
    b5c0:	462f      	mov	r7, r5
    b5c2:	e7c9      	b.n	b558 <__smakebuf_r+0x4c>
    b5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b5c8:	4630      	mov	r0, r6
    b5ca:	f000 f879 	bl	b6c0 <_isatty_r>
    b5ce:	b910      	cbnz	r0, b5d6 <__smakebuf_r+0xca>
    b5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b5d4:	e7cf      	b.n	b576 <__smakebuf_r+0x6a>
    b5d6:	89a3      	ldrh	r3, [r4, #12]
    b5d8:	f023 0303 	bic.w	r3, r3, #3
    b5dc:	f043 0301 	orr.w	r3, r3, #1
    b5e0:	b21b      	sxth	r3, r3
    b5e2:	e7c8      	b.n	b576 <__smakebuf_r+0x6a>

0000b5e4 <__swbuf_r>:
    b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5e6:	460d      	mov	r5, r1
    b5e8:	4614      	mov	r4, r2
    b5ea:	4606      	mov	r6, r0
    b5ec:	b110      	cbz	r0, b5f4 <__swbuf_r+0x10>
    b5ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d04c      	beq.n	b68e <__swbuf_r+0xaa>
    b5f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    b5f8:	69a3      	ldr	r3, [r4, #24]
    b5fa:	60a3      	str	r3, [r4, #8]
    b5fc:	0717      	lsls	r7, r2, #28
    b5fe:	b290      	uxth	r0, r2
    b600:	d51b      	bpl.n	b63a <__swbuf_r+0x56>
    b602:	6923      	ldr	r3, [r4, #16]
    b604:	b1cb      	cbz	r3, b63a <__swbuf_r+0x56>
    b606:	b2ed      	uxtb	r5, r5
    b608:	0481      	lsls	r1, r0, #18
    b60a:	462f      	mov	r7, r5
    b60c:	d522      	bpl.n	b654 <__swbuf_r+0x70>
    b60e:	6822      	ldr	r2, [r4, #0]
    b610:	6961      	ldr	r1, [r4, #20]
    b612:	1ad3      	subs	r3, r2, r3
    b614:	4299      	cmp	r1, r3
    b616:	dd29      	ble.n	b66c <__swbuf_r+0x88>
    b618:	3301      	adds	r3, #1
    b61a:	68a1      	ldr	r1, [r4, #8]
    b61c:	3901      	subs	r1, #1
    b61e:	60a1      	str	r1, [r4, #8]
    b620:	1c51      	adds	r1, r2, #1
    b622:	6021      	str	r1, [r4, #0]
    b624:	7015      	strb	r5, [r2, #0]
    b626:	6962      	ldr	r2, [r4, #20]
    b628:	429a      	cmp	r2, r3
    b62a:	d027      	beq.n	b67c <__swbuf_r+0x98>
    b62c:	89a3      	ldrh	r3, [r4, #12]
    b62e:	07db      	lsls	r3, r3, #31
    b630:	d501      	bpl.n	b636 <__swbuf_r+0x52>
    b632:	2d0a      	cmp	r5, #10
    b634:	d022      	beq.n	b67c <__swbuf_r+0x98>
    b636:	4638      	mov	r0, r7
    b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b63a:	4621      	mov	r1, r4
    b63c:	4630      	mov	r0, r6
    b63e:	f7ff fddf 	bl	b200 <__swsetup_r>
    b642:	bb08      	cbnz	r0, b688 <__swbuf_r+0xa4>
    b644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    b648:	6923      	ldr	r3, [r4, #16]
    b64a:	b290      	uxth	r0, r2
    b64c:	b2ed      	uxtb	r5, r5
    b64e:	0481      	lsls	r1, r0, #18
    b650:	462f      	mov	r7, r5
    b652:	d4dc      	bmi.n	b60e <__swbuf_r+0x2a>
    b654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b658:	81a2      	strh	r2, [r4, #12]
    b65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b65c:	6961      	ldr	r1, [r4, #20]
    b65e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    b662:	6662      	str	r2, [r4, #100]	; 0x64
    b664:	6822      	ldr	r2, [r4, #0]
    b666:	1ad3      	subs	r3, r2, r3
    b668:	4299      	cmp	r1, r3
    b66a:	dcd5      	bgt.n	b618 <__swbuf_r+0x34>
    b66c:	4621      	mov	r1, r4
    b66e:	4630      	mov	r0, r6
    b670:	f7fd fb9a 	bl	8da8 <_fflush_r>
    b674:	b940      	cbnz	r0, b688 <__swbuf_r+0xa4>
    b676:	6822      	ldr	r2, [r4, #0]
    b678:	2301      	movs	r3, #1
    b67a:	e7ce      	b.n	b61a <__swbuf_r+0x36>
    b67c:	4621      	mov	r1, r4
    b67e:	4630      	mov	r0, r6
    b680:	f7fd fb92 	bl	8da8 <_fflush_r>
    b684:	2800      	cmp	r0, #0
    b686:	d0d6      	beq.n	b636 <__swbuf_r+0x52>
    b688:	f04f 37ff 	mov.w	r7, #4294967295
    b68c:	e7d3      	b.n	b636 <__swbuf_r+0x52>
    b68e:	f7fa ffef 	bl	6670 <__sinit>
    b692:	e7af      	b.n	b5f4 <__swbuf_r+0x10>

0000b694 <_fstat_r>:
    b694:	b570      	push	{r4, r5, r6, lr}
    b696:	460c      	mov	r4, r1
    b698:	4d08      	ldr	r5, [pc, #32]	; (b6bc <_fstat_r+0x28>)
    b69a:	4603      	mov	r3, r0
    b69c:	2600      	movs	r6, #0
    b69e:	4620      	mov	r0, r4
    b6a0:	4611      	mov	r1, r2
    b6a2:	461c      	mov	r4, r3
    b6a4:	602e      	str	r6, [r5, #0]
    b6a6:	f7f7 fc1d 	bl	2ee4 <_fstat>
    b6aa:	1c43      	adds	r3, r0, #1
    b6ac:	d000      	beq.n	b6b0 <_fstat_r+0x1c>
    b6ae:	bd70      	pop	{r4, r5, r6, pc}
    b6b0:	682b      	ldr	r3, [r5, #0]
    b6b2:	2b00      	cmp	r3, #0
    b6b4:	d0fb      	beq.n	b6ae <_fstat_r+0x1a>
    b6b6:	6023      	str	r3, [r4, #0]
    b6b8:	bd70      	pop	{r4, r5, r6, pc}
    b6ba:	bf00      	nop
    b6bc:	2000205c 	.word	0x2000205c

0000b6c0 <_isatty_r>:
    b6c0:	b538      	push	{r3, r4, r5, lr}
    b6c2:	4d07      	ldr	r5, [pc, #28]	; (b6e0 <_isatty_r+0x20>)
    b6c4:	2200      	movs	r2, #0
    b6c6:	4604      	mov	r4, r0
    b6c8:	4608      	mov	r0, r1
    b6ca:	602a      	str	r2, [r5, #0]
    b6cc:	f7f7 fc10 	bl	2ef0 <_isatty>
    b6d0:	1c43      	adds	r3, r0, #1
    b6d2:	d000      	beq.n	b6d6 <_isatty_r+0x16>
    b6d4:	bd38      	pop	{r3, r4, r5, pc}
    b6d6:	682b      	ldr	r3, [r5, #0]
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d0fb      	beq.n	b6d4 <_isatty_r+0x14>
    b6dc:	6023      	str	r3, [r4, #0]
    b6de:	bd38      	pop	{r3, r4, r5, pc}
    b6e0:	2000205c 	.word	0x2000205c

0000b6e4 <__aeabi_drsub>:
    b6e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b6e8:	e002      	b.n	b6f0 <__adddf3>
    b6ea:	bf00      	nop

0000b6ec <__aeabi_dsub>:
    b6ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b6f0 <__adddf3>:
    b6f0:	b530      	push	{r4, r5, lr}
    b6f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b6f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b6fa:	ea94 0f05 	teq	r4, r5
    b6fe:	bf08      	it	eq
    b700:	ea90 0f02 	teqeq	r0, r2
    b704:	bf1f      	itttt	ne
    b706:	ea54 0c00 	orrsne.w	ip, r4, r0
    b70a:	ea55 0c02 	orrsne.w	ip, r5, r2
    b70e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b716:	f000 80e2 	beq.w	b8de <__adddf3+0x1ee>
    b71a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b71e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b722:	bfb8      	it	lt
    b724:	426d      	neglt	r5, r5
    b726:	dd0c      	ble.n	b742 <__adddf3+0x52>
    b728:	442c      	add	r4, r5
    b72a:	ea80 0202 	eor.w	r2, r0, r2
    b72e:	ea81 0303 	eor.w	r3, r1, r3
    b732:	ea82 0000 	eor.w	r0, r2, r0
    b736:	ea83 0101 	eor.w	r1, r3, r1
    b73a:	ea80 0202 	eor.w	r2, r0, r2
    b73e:	ea81 0303 	eor.w	r3, r1, r3
    b742:	2d36      	cmp	r5, #54	; 0x36
    b744:	bf88      	it	hi
    b746:	bd30      	pophi	{r4, r5, pc}
    b748:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b74c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b750:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b758:	d002      	beq.n	b760 <__adddf3+0x70>
    b75a:	4240      	negs	r0, r0
    b75c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b760:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b764:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b76c:	d002      	beq.n	b774 <__adddf3+0x84>
    b76e:	4252      	negs	r2, r2
    b770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b774:	ea94 0f05 	teq	r4, r5
    b778:	f000 80a7 	beq.w	b8ca <__adddf3+0x1da>
    b77c:	f1a4 0401 	sub.w	r4, r4, #1
    b780:	f1d5 0e20 	rsbs	lr, r5, #32
    b784:	db0d      	blt.n	b7a2 <__adddf3+0xb2>
    b786:	fa02 fc0e 	lsl.w	ip, r2, lr
    b78a:	fa22 f205 	lsr.w	r2, r2, r5
    b78e:	1880      	adds	r0, r0, r2
    b790:	f141 0100 	adc.w	r1, r1, #0
    b794:	fa03 f20e 	lsl.w	r2, r3, lr
    b798:	1880      	adds	r0, r0, r2
    b79a:	fa43 f305 	asr.w	r3, r3, r5
    b79e:	4159      	adcs	r1, r3
    b7a0:	e00e      	b.n	b7c0 <__adddf3+0xd0>
    b7a2:	f1a5 0520 	sub.w	r5, r5, #32
    b7a6:	f10e 0e20 	add.w	lr, lr, #32
    b7aa:	2a01      	cmp	r2, #1
    b7ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    b7b0:	bf28      	it	cs
    b7b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    b7b6:	fa43 f305 	asr.w	r3, r3, r5
    b7ba:	18c0      	adds	r0, r0, r3
    b7bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b7c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b7c4:	d507      	bpl.n	b7d6 <__adddf3+0xe6>
    b7c6:	f04f 0e00 	mov.w	lr, #0
    b7ca:	f1dc 0c00 	rsbs	ip, ip, #0
    b7ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    b7d2:	eb6e 0101 	sbc.w	r1, lr, r1
    b7d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b7da:	d31b      	bcc.n	b814 <__adddf3+0x124>
    b7dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b7e0:	d30c      	bcc.n	b7fc <__adddf3+0x10c>
    b7e2:	0849      	lsrs	r1, r1, #1
    b7e4:	ea5f 0030 	movs.w	r0, r0, rrx
    b7e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b7ec:	f104 0401 	add.w	r4, r4, #1
    b7f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b7f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b7f8:	f080 809a 	bcs.w	b930 <__adddf3+0x240>
    b7fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b800:	bf08      	it	eq
    b802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b806:	f150 0000 	adcs.w	r0, r0, #0
    b80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b80e:	ea41 0105 	orr.w	r1, r1, r5
    b812:	bd30      	pop	{r4, r5, pc}
    b814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b818:	4140      	adcs	r0, r0
    b81a:	eb41 0101 	adc.w	r1, r1, r1
    b81e:	3c01      	subs	r4, #1
    b820:	bf28      	it	cs
    b822:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    b826:	d2e9      	bcs.n	b7fc <__adddf3+0x10c>
    b828:	f091 0f00 	teq	r1, #0
    b82c:	bf04      	itt	eq
    b82e:	4601      	moveq	r1, r0
    b830:	2000      	moveq	r0, #0
    b832:	fab1 f381 	clz	r3, r1
    b836:	bf08      	it	eq
    b838:	3320      	addeq	r3, #32
    b83a:	f1a3 030b 	sub.w	r3, r3, #11
    b83e:	f1b3 0220 	subs.w	r2, r3, #32
    b842:	da0c      	bge.n	b85e <__adddf3+0x16e>
    b844:	320c      	adds	r2, #12
    b846:	dd08      	ble.n	b85a <__adddf3+0x16a>
    b848:	f102 0c14 	add.w	ip, r2, #20
    b84c:	f1c2 020c 	rsb	r2, r2, #12
    b850:	fa01 f00c 	lsl.w	r0, r1, ip
    b854:	fa21 f102 	lsr.w	r1, r1, r2
    b858:	e00c      	b.n	b874 <__adddf3+0x184>
    b85a:	f102 0214 	add.w	r2, r2, #20
    b85e:	bfd8      	it	le
    b860:	f1c2 0c20 	rsble	ip, r2, #32
    b864:	fa01 f102 	lsl.w	r1, r1, r2
    b868:	fa20 fc0c 	lsr.w	ip, r0, ip
    b86c:	bfdc      	itt	le
    b86e:	ea41 010c 	orrle.w	r1, r1, ip
    b872:	4090      	lslle	r0, r2
    b874:	1ae4      	subs	r4, r4, r3
    b876:	bfa2      	ittt	ge
    b878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b87c:	4329      	orrge	r1, r5
    b87e:	bd30      	popge	{r4, r5, pc}
    b880:	ea6f 0404 	mvn.w	r4, r4
    b884:	3c1f      	subs	r4, #31
    b886:	da1c      	bge.n	b8c2 <__adddf3+0x1d2>
    b888:	340c      	adds	r4, #12
    b88a:	dc0e      	bgt.n	b8aa <__adddf3+0x1ba>
    b88c:	f104 0414 	add.w	r4, r4, #20
    b890:	f1c4 0220 	rsb	r2, r4, #32
    b894:	fa20 f004 	lsr.w	r0, r0, r4
    b898:	fa01 f302 	lsl.w	r3, r1, r2
    b89c:	ea40 0003 	orr.w	r0, r0, r3
    b8a0:	fa21 f304 	lsr.w	r3, r1, r4
    b8a4:	ea45 0103 	orr.w	r1, r5, r3
    b8a8:	bd30      	pop	{r4, r5, pc}
    b8aa:	f1c4 040c 	rsb	r4, r4, #12
    b8ae:	f1c4 0220 	rsb	r2, r4, #32
    b8b2:	fa20 f002 	lsr.w	r0, r0, r2
    b8b6:	fa01 f304 	lsl.w	r3, r1, r4
    b8ba:	ea40 0003 	orr.w	r0, r0, r3
    b8be:	4629      	mov	r1, r5
    b8c0:	bd30      	pop	{r4, r5, pc}
    b8c2:	fa21 f004 	lsr.w	r0, r1, r4
    b8c6:	4629      	mov	r1, r5
    b8c8:	bd30      	pop	{r4, r5, pc}
    b8ca:	f094 0f00 	teq	r4, #0
    b8ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b8d2:	bf06      	itte	eq
    b8d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b8d8:	3401      	addeq	r4, #1
    b8da:	3d01      	subne	r5, #1
    b8dc:	e74e      	b.n	b77c <__adddf3+0x8c>
    b8de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b8e2:	bf18      	it	ne
    b8e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b8e8:	d029      	beq.n	b93e <__adddf3+0x24e>
    b8ea:	ea94 0f05 	teq	r4, r5
    b8ee:	bf08      	it	eq
    b8f0:	ea90 0f02 	teqeq	r0, r2
    b8f4:	d005      	beq.n	b902 <__adddf3+0x212>
    b8f6:	ea54 0c00 	orrs.w	ip, r4, r0
    b8fa:	bf04      	itt	eq
    b8fc:	4619      	moveq	r1, r3
    b8fe:	4610      	moveq	r0, r2
    b900:	bd30      	pop	{r4, r5, pc}
    b902:	ea91 0f03 	teq	r1, r3
    b906:	bf1e      	ittt	ne
    b908:	2100      	movne	r1, #0
    b90a:	2000      	movne	r0, #0
    b90c:	bd30      	popne	{r4, r5, pc}
    b90e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b912:	d105      	bne.n	b920 <__adddf3+0x230>
    b914:	0040      	lsls	r0, r0, #1
    b916:	4149      	adcs	r1, r1
    b918:	bf28      	it	cs
    b91a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b91e:	bd30      	pop	{r4, r5, pc}
    b920:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b924:	bf3c      	itt	cc
    b926:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b92a:	bd30      	popcc	{r4, r5, pc}
    b92c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b930:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b938:	f04f 0000 	mov.w	r0, #0
    b93c:	bd30      	pop	{r4, r5, pc}
    b93e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b942:	bf1a      	itte	ne
    b944:	4619      	movne	r1, r3
    b946:	4610      	movne	r0, r2
    b948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b94c:	bf1c      	itt	ne
    b94e:	460b      	movne	r3, r1
    b950:	4602      	movne	r2, r0
    b952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b956:	bf06      	itte	eq
    b958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b95c:	ea91 0f03 	teqeq	r1, r3
    b960:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b964:	bd30      	pop	{r4, r5, pc}
    b966:	bf00      	nop

0000b968 <__aeabi_ui2d>:
    b968:	f090 0f00 	teq	r0, #0
    b96c:	bf04      	itt	eq
    b96e:	2100      	moveq	r1, #0
    b970:	4770      	bxeq	lr
    b972:	b530      	push	{r4, r5, lr}
    b974:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b978:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b97c:	f04f 0500 	mov.w	r5, #0
    b980:	f04f 0100 	mov.w	r1, #0
    b984:	e750      	b.n	b828 <__adddf3+0x138>
    b986:	bf00      	nop

0000b988 <__aeabi_i2d>:
    b988:	f090 0f00 	teq	r0, #0
    b98c:	bf04      	itt	eq
    b98e:	2100      	moveq	r1, #0
    b990:	4770      	bxeq	lr
    b992:	b530      	push	{r4, r5, lr}
    b994:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b998:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b99c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b9a0:	bf48      	it	mi
    b9a2:	4240      	negmi	r0, r0
    b9a4:	f04f 0100 	mov.w	r1, #0
    b9a8:	e73e      	b.n	b828 <__adddf3+0x138>
    b9aa:	bf00      	nop

0000b9ac <__aeabi_f2d>:
    b9ac:	0042      	lsls	r2, r0, #1
    b9ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b9b2:	ea4f 0131 	mov.w	r1, r1, rrx
    b9b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b9ba:	bf1f      	itttt	ne
    b9bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b9c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b9c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b9c8:	4770      	bxne	lr
    b9ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    b9ce:	bf08      	it	eq
    b9d0:	4770      	bxeq	lr
    b9d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    b9d6:	bf04      	itt	eq
    b9d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    b9dc:	4770      	bxeq	lr
    b9de:	b530      	push	{r4, r5, lr}
    b9e0:	f44f 7460 	mov.w	r4, #896	; 0x380
    b9e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b9e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b9ec:	e71c      	b.n	b828 <__adddf3+0x138>
    b9ee:	bf00      	nop

0000b9f0 <__aeabi_ul2d>:
    b9f0:	ea50 0201 	orrs.w	r2, r0, r1
    b9f4:	bf08      	it	eq
    b9f6:	4770      	bxeq	lr
    b9f8:	b530      	push	{r4, r5, lr}
    b9fa:	f04f 0500 	mov.w	r5, #0
    b9fe:	e00a      	b.n	ba16 <__aeabi_l2d+0x16>

0000ba00 <__aeabi_l2d>:
    ba00:	ea50 0201 	orrs.w	r2, r0, r1
    ba04:	bf08      	it	eq
    ba06:	4770      	bxeq	lr
    ba08:	b530      	push	{r4, r5, lr}
    ba0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    ba0e:	d502      	bpl.n	ba16 <__aeabi_l2d+0x16>
    ba10:	4240      	negs	r0, r0
    ba12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ba16:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ba1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ba1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    ba22:	f43f aed8 	beq.w	b7d6 <__adddf3+0xe6>
    ba26:	f04f 0203 	mov.w	r2, #3
    ba2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ba2e:	bf18      	it	ne
    ba30:	3203      	addne	r2, #3
    ba32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ba36:	bf18      	it	ne
    ba38:	3203      	addne	r2, #3
    ba3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ba3e:	f1c2 0320 	rsb	r3, r2, #32
    ba42:	fa00 fc03 	lsl.w	ip, r0, r3
    ba46:	fa20 f002 	lsr.w	r0, r0, r2
    ba4a:	fa01 fe03 	lsl.w	lr, r1, r3
    ba4e:	ea40 000e 	orr.w	r0, r0, lr
    ba52:	fa21 f102 	lsr.w	r1, r1, r2
    ba56:	4414      	add	r4, r2
    ba58:	e6bd      	b.n	b7d6 <__adddf3+0xe6>
    ba5a:	bf00      	nop

0000ba5c <__aeabi_d2lz>:
    ba5c:	b508      	push	{r3, lr}
    ba5e:	4602      	mov	r2, r0
    ba60:	460b      	mov	r3, r1
    ba62:	ec43 2b17 	vmov	d7, r2, r3
    ba66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ba6e:	d403      	bmi.n	ba78 <__aeabi_d2lz+0x1c>
    ba70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ba74:	f000 b80c 	b.w	ba90 <__aeabi_d2ulz>
    ba78:	eeb1 7b47 	vneg.f64	d7, d7
    ba7c:	ec51 0b17 	vmov	r0, r1, d7
    ba80:	f000 f806 	bl	ba90 <__aeabi_d2ulz>
    ba84:	4240      	negs	r0, r0
    ba86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ba8a:	bd08      	pop	{r3, pc}
    ba8c:	0000      	movs	r0, r0
	...

0000ba90 <__aeabi_d2ulz>:
    ba90:	ed9f 6b0b 	vldr	d6, [pc, #44]	; bac0 <__aeabi_d2ulz+0x30>
    ba94:	ec41 0b17 	vmov	d7, r0, r1
    ba98:	ed9f 5b0b 	vldr	d5, [pc, #44]	; bac8 <__aeabi_d2ulz+0x38>
    ba9c:	ee27 6b06 	vmul.f64	d6, d7, d6
    baa0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    baa4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    baa8:	eea4 7b45 	vfms.f64	d7, d4, d5
    baac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    bab0:	ee16 1a10 	vmov	r1, s12
    bab4:	ee17 0a90 	vmov	r0, s15
    bab8:	4770      	bx	lr
    baba:	bf00      	nop
    babc:	f3af 8000 	nop.w
    bac0:	00000000 	.word	0x00000000
    bac4:	3df00000 	.word	0x3df00000
    bac8:	00000000 	.word	0x00000000
    bacc:	41f00000 	.word	0x41f00000

0000bad0 <___reboot_Teensyduino__veneer>:
    bad0:	f85f f000 	ldr.w	pc, [pc]	; bad4 <___reboot_Teensyduino__veneer+0x4>
    bad4:	60001d8d 	.word	0x60001d8d

0000bad8 <___init_veneer>:
    bad8:	f85f f000 	ldr.w	pc, [pc]	; badc <___init_veneer+0x4>
    badc:	60001e35 	.word	0x60001e35

Disassembly of section .fini:

0000bae0 <_fini>:
    bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bae2:	bf00      	nop
