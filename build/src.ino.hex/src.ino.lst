
C:\Users\Kent4\Projects\Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f9d0 	bl	600017d0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f97c 	bl	600017e0 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fb9e 	bl	60001c5c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fd31 	bl	60001f98 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f9ac 	bl	600018d8 <configure_external_ram>
	analog_init();
60001580:	f000 fcd0 	bl	60001f24 <analog_init>
	pwm_init();
60001584:	f000 fd10 	bl	60001fa8 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fb96 	bl	60001cb8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f922 	bl	600017d4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fc27 	bl	60001de8 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f91b 	bl	600017dc <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f917 	bl	600017d8 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fced 	bl	60001f88 <____libc_init_array_veneer>
	main();
600015ae:	f000 fd03 	bl	60001fb8 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000ccb8 	.word	0x0000ccb8
600015c0:	600021fc 	.word	0x600021fc
600015c4:	00000000 	.word	0x00000000
600015c8:	200022c0 	.word	0x200022c0
600015cc:	6000eeb8 	.word	0x6000eeb8
600015d0:	20000000 	.word	0x20000000
600015d4:	20003e20 	.word	0x20003e20
600015d8:	200022c0 	.word	0x200022c0
600015dc:	20002000 	.word	0x20002000
600015e0:	00004735 	.word	0x00004735
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00002a99 	.word	0x00002a99
600015f4:	20003dc0 	.word	0x20003dc0
600015f8:	00002a9d 	.word	0x00002a9d
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20003dc4 	.word	0x20003dc4
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001654:	6943      	ldr	r3, [r0, #20]
60001656:	4a0a      	ldr	r2, [pc, #40]	; (60001680 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001658:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000165c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165e:	7a03      	ldrb	r3, [r0, #8]
60001660:	4c08      	ldr	r4, [pc, #32]	; (60001684 <TwoWire::configSDApin(unsigned char)+0x30>)
60001662:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001666:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000166c:	68c2      	ldr	r2, [r0, #12]
6000166e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001670:	6903      	ldr	r3, [r0, #16]
60001672:	b10b      	cbz	r3, 60001678 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001674:	6942      	ldr	r2, [r0, #20]
60001676:	601a      	str	r2, [r3, #0]
	}
}
60001678:	f85d 4b04 	ldr.w	r4, [sp], #4
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop
60001680:	20000cac 	.word	0x20000cac
60001684:	0001f861 	.word	0x0001f861

60001688 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	7e02      	ldrb	r2, [r0, #24]
6000168c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001690:	f892 c008 	ldrb.w	ip, [r2, #8]
60001694:	458c      	cmp	ip, r1
60001696:	d01c      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001698:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000169a:	2aff      	cmp	r2, #255	; 0xff
6000169c:	d019      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000169e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016a0:	b510      	push	{r4, lr}
600016a2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016a4:	d016      	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016a6:	7e1a      	ldrb	r2, [r3, #24]
600016a8:	2aff      	cmp	r2, #255	; 0xff
600016aa:	d006      	beq.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016ac:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
600016b2:	6812      	ldr	r2, [r2, #0]
600016b4:	421a      	tst	r2, r3
600016b6:	d101      	bne.n	600016bc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016b8:	7621      	strb	r1, [r4, #24]
}
600016ba:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016bc:	4b06      	ldr	r3, [pc, #24]	; (600016d8 <TwoWire::setSDA(unsigned char)+0x50>)
600016be:	2205      	movs	r2, #5
		configSDApin(newindex);
600016c0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016c6:	685b      	ldr	r3, [r3, #4]
600016c8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ca:	f7ff ffc3 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ce:	7621      	strb	r1, [r4, #24]
600016d0:	e7f3      	b.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016d2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016d4:	2100      	movs	r1, #0
600016d6:	e7ea      	b.n	600016ae <TwoWire::setSDA(unsigned char)+0x26>
600016d8:	20000cac 	.word	0x20000cac

600016dc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	4a0a      	ldr	r2, [pc, #40]	; (60001708 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e0:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e4:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
600016ea:	4c08      	ldr	r4, [pc, #32]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x30>)
600016ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f0:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
600016f8:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
600016fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
600016fc:	b10b      	cbz	r3, 60001702 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
600016fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001700:	601a      	str	r2, [r3, #0]
	}
}
60001702:	f85d 4b04 	ldr.w	r4, [sp], #4
60001706:	4770      	bx	lr
60001708:	20000cac 	.word	0x20000cac
6000170c:	0001f861 	.word	0x0001f861

60001710 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001710:	6943      	ldr	r3, [r0, #20]
60001712:	7e42      	ldrb	r2, [r0, #25]
60001714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001718:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000171c:	458c      	cmp	ip, r1
6000171e:	d01e      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001720:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001724:	2aff      	cmp	r2, #255	; 0xff
60001726:	d01a      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001728:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000172a:	b510      	push	{r4, lr}
6000172c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000172e:	d017      	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001734:	2aff      	cmp	r2, #255	; 0xff
60001736:	d006      	beq.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
60001738:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000173e:	6812      	ldr	r2, [r2, #0]
60001740:	421a      	tst	r2, r3
60001742:	d101      	bne.n	60001748 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001744:	7661      	strb	r1, [r4, #25]
}
60001746:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001748:	4b06      	ldr	r3, [pc, #24]	; (60001764 <TwoWire::setSCL(unsigned char)+0x54>)
6000174a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000174c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001752:	685b      	ldr	r3, [r3, #4]
60001754:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001756:	f7ff ffc1 	bl	600016dc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175a:	7661      	strb	r1, [r4, #25]
6000175c:	e7f3      	b.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
6000175e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001760:	2100      	movs	r1, #0
60001762:	e7ea      	b.n	6000173a <TwoWire::setSCL(unsigned char)+0x2a>
60001764:	20000cac 	.word	0x20000cac

60001768 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001768:	4916      	ldr	r1, [pc, #88]	; (600017c4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000176e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001776:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001778:	638b      	str	r3, [r1, #56]	; 0x38
{
6000177a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000177c:	4d12      	ldr	r5, [pc, #72]	; (600017c8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000177e:	e9d2 1300 	ldrd	r1, r3, [r2]
60001782:	680a      	ldr	r2, [r1, #0]
60001784:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
60001786:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001788:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000178a:	2202      	movs	r2, #2
	port->MCR = 0;
6000178c:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
6000178e:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001790:	4a0e      	ldr	r2, [pc, #56]	; (600017cc <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001792:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001794:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001796:	2201      	movs	r2, #1
60001798:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000179c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017a0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017a2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017a8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017aa:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ac:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ae:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017b0:	7e01      	ldrb	r1, [r0, #24]
600017b2:	f7ff ff4f 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017b6:	7e61      	ldrb	r1, [r4, #25]
600017b8:	4620      	mov	r0, r4
}
600017ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017be:	f7ff bf8d 	b.w	600016dc <TwoWire::configSCLpin(unsigned char)>
600017c2:	bf00      	nop
600017c4:	400fc000 	.word	0x400fc000
600017c8:	05050bb8 	.word	0x05050bb8
600017cc:	1928373b 	.word	0x1928373b

600017d0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017d0:	4770      	bx	lr
600017d2:	bf00      	nop

600017d4 <startup_default_middle_hook>:
600017d4:	4770      	bx	lr
600017d6:	bf00      	nop

600017d8 <startup_default_late_hook>:
600017d8:	4770      	bx	lr
600017da:	bf00      	nop

600017dc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017dc:	bf00      	nop
600017de:	4770      	bx	lr

600017e0 <configure_cache>:
{
600017e0:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017e6:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e8:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ea:	482b      	ldr	r0, [pc, #172]	; (60001898 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600017ec:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017fa:	4828      	ldr	r0, [pc, #160]	; (6000189c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001800:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001802:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001806:	4826      	ldr	r0, [pc, #152]	; (600018a0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001808:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000180c:	4a25      	ldr	r2, [pc, #148]	; (600018a4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000180e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001812:	4c25      	ldr	r4, [pc, #148]	; (600018a8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001814:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001818:	4824      	ldr	r0, [pc, #144]	; (600018ac <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001822:	4c23      	ldr	r4, [pc, #140]	; (600018b0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001824:	4823      	ldr	r0, [pc, #140]	; (600018b4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001826:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000182e:	4c22      	ldr	r4, [pc, #136]	; (600018b8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001834:	4821      	ldr	r0, [pc, #132]	; (600018bc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001836:	4a22      	ldr	r2, [pc, #136]	; (600018c0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001838:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000183c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001840:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001844:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000184a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000184c:	481e      	ldr	r0, [pc, #120]	; (600018c8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000184e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001852:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001856:	4a1d      	ldr	r2, [pc, #116]	; (600018cc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000185c:	4c1c      	ldr	r4, [pc, #112]	; (600018d0 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000185e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001862:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001864:	481b      	ldr	r0, [pc, #108]	; (600018d4 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001866:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000186e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001872:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001876:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000187a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000187e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001882:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001886:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000188a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000188e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001892:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001896:	4770      	bx	lr
60001898:	1000003f 	.word	0x1000003f
6000189c:	03080025 	.word	0x03080025
600018a0:	00100009 	.word	0x00100009
600018a4:	20003e20 	.word	0x20003e20
600018a8:	00200013 	.word	0x00200013
600018ac:	07020021 	.word	0x07020021
600018b0:	20000014 	.word	0x20000014
600018b4:	13080025 	.word	0x13080025
600018b8:	10000009 	.word	0x10000009
600018bc:	20200016 	.word	0x20200016
600018c0:	130b0027 	.word	0x130b0027
600018c4:	40000017 	.word	0x40000017
600018c8:	60000018 	.word	0x60000018
600018cc:	070b002f 	.word	0x070b002f
600018d0:	70000019 	.word	0x70000019
600018d4:	130b002f 	.word	0x130b002f

600018d8 <configure_external_ram>:
{
600018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018da:	4bb8      	ldr	r3, [pc, #736]	; (60001bbc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018dc:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018de:	4eb8      	ldr	r6, [pc, #736]	; (60001bc0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018e2:	4fb8      	ldr	r7, [pc, #736]	; (60001bc4 <configure_external_ram+0x2ec>)
{
600018e4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018e6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ea:	49b7      	ldr	r1, [pc, #732]	; (60001bc8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ec:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	4db6      	ldr	r5, [pc, #728]	; (60001bcc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018f2:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018f6:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fa:	4cb5      	ldr	r4, [pc, #724]	; (60001bd0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018fc:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001900:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001904:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001908:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000190c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001910:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001916:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001918:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000191a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000191c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000191e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000192a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000192e:	4aa9      	ldr	r2, [pc, #676]	; (60001bd4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001930:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001934:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001938:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000193c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001940:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001944:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001946:	4ba4      	ldr	r3, [pc, #656]	; (60001bd8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001948:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000194a:	48a4      	ldr	r0, [pc, #656]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	49a4      	ldr	r1, [pc, #656]	; (60001be0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000194e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001950:	4aa4      	ldr	r2, [pc, #656]	; (60001be4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001952:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001958:	f043 030c 	orr.w	r3, r3, #12
6000195c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001960:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001964:	6803      	ldr	r3, [r0, #0]
60001966:	f043 0302 	orr.w	r3, r3, #2
6000196a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000196c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000196e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001970:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001974:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001976:	4b9c      	ldr	r3, [pc, #624]	; (60001be8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001978:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000197a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000197c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	4c9b      	ldr	r4, [pc, #620]	; (60001bec <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001980:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001982:	4a9b      	ldr	r2, [pc, #620]	; (60001bf0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001988:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000198a:	68c3      	ldr	r3, [r0, #12]
6000198c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001990:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001992:	6a03      	ldr	r3, [r0, #32]
60001994:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001998:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199a:	6a03      	ldr	r3, [r0, #32]
6000199c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000199e:	4a95      	ldr	r2, [pc, #596]	; (60001bf4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019a0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a2:	4c95      	ldr	r4, [pc, #596]	; (60001bf8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019a4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019aa:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019b4:	f043 0301 	orr.w	r3, r3, #1
600019b8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019bc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	498e      	ldr	r1, [pc, #568]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019c6:	f043 0301 	orr.w	r3, r3, #1
600019ca:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ce:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600019d2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019dc:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019de:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e6:	6803      	ldr	r3, [r0, #0]
600019e8:	f023 0302 	bic.w	r3, r3, #2
600019ec:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ee:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f0:	4b83      	ldr	r3, [pc, #524]	; (60001c00 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	4984      	ldr	r1, [pc, #528]	; (60001c04 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f4:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f6:	f843 2b04 	str.w	r2, [r3], #4
600019fa:	428b      	cmp	r3, r1
600019fc:	d1fb      	bne.n	600019f6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fe:	4a77      	ldr	r2, [pc, #476]	; (60001bdc <configure_external_ram+0x304>)
60001a00:	6813      	ldr	r3, [r2, #0]
60001a02:	f043 0301 	orr.w	r3, r3, #1
60001a06:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a08:	6813      	ldr	r3, [r2, #0]
60001a0a:	f013 0301 	ands.w	r3, r3, #1
60001a0e:	d1fb      	bne.n	60001a08 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a10:	487a      	ldr	r0, [pc, #488]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a12:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a14:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a18:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a1a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a20:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a24:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a28:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a30:	4975      	ldr	r1, [pc, #468]	; (60001c08 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a32:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a36:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a3a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a3e:	4873      	ldr	r0, [pc, #460]	; (60001c0c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a40:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a44:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	4c71      	ldr	r4, [pc, #452]	; (60001c10 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a4a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a4e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a52:	4970      	ldr	r1, [pc, #448]	; (60001c14 <configure_external_ram+0x33c>)
60001a54:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a5a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a62:	485e      	ldr	r0, [pc, #376]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	6943      	ldr	r3, [r0, #20]
60001a72:	07da      	lsls	r2, r3, #31
60001a74:	d5fc      	bpl.n	60001a70 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a78:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a7e:	4957      	ldr	r1, [pc, #348]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a80:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a82:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a86:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	694b      	ldr	r3, [r1, #20]
60001a90:	07db      	lsls	r3, r3, #31
60001a92:	d5fc      	bpl.n	60001a8e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a94:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a96:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9c:	4a4f      	ldr	r2, [pc, #316]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a9e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001aa0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aac:	6953      	ldr	r3, [r2, #20]
60001aae:	07df      	lsls	r7, r3, #31
60001ab0:	d5fc      	bpl.n	60001aac <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ab6:	4858      	ldr	r0, [pc, #352]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab8:	4948      	ldr	r1, [pc, #288]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	694b      	ldr	r3, [r1, #20]
60001aca:	07de      	lsls	r6, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001ace:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ad2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ad6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001ad8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ada:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001adc:	4293      	cmp	r3, r2
60001ade:	d165      	bne.n	60001bac <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001ae0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae8:	483c      	ldr	r0, [pc, #240]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001aea:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aee:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af6:	6943      	ldr	r3, [r0, #20]
60001af8:	07dd      	lsls	r5, r3, #31
60001afa:	d5fc      	bpl.n	60001af6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001afc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001afe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b02:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	4a35      	ldr	r2, [pc, #212]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b08:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b0c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b10:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b14:	6953      	ldr	r3, [r2, #20]
60001b16:	07dc      	lsls	r4, r3, #31
60001b18:	d5fc      	bpl.n	60001b14 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b1a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b1c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b24:	492d      	ldr	r1, [pc, #180]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b26:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b28:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b30:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	694b      	ldr	r3, [r1, #20]
60001b36:	07d8      	lsls	r0, r3, #31
60001b38:	d5fc      	bpl.n	60001b34 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4a25      	ldr	r2, [pc, #148]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6953      	ldr	r3, [r2, #20]
60001b56:	07d9      	lsls	r1, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b60:	482d      	ldr	r0, [pc, #180]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	491e      	ldr	r1, [pc, #120]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b64:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b66:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b6a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b72:	694b      	ldr	r3, [r1, #20]
60001b74:	07da      	lsls	r2, r3, #31
60001b76:	d5fc      	bpl.n	60001b72 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b78:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b7c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b80:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b82:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b84:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b86:	4293      	cmp	r3, r2
60001b88:	d050      	beq.n	60001c2c <configure_external_ram+0x354>
60001b8a:	2508      	movs	r5, #8
60001b8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b90:	4922      	ldr	r1, [pc, #136]	; (60001c1c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b92:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001b94:	4b22      	ldr	r3, [pc, #136]	; (60001c20 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b96:	4a23      	ldr	r2, [pc, #140]	; (60001c24 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b98:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001b9a:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b9c:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b9e:	2301      	movs	r3, #1
60001ba0:	4821      	ldr	r0, [pc, #132]	; (60001c28 <configure_external_ram+0x350>)
60001ba2:	4422      	add	r2, r4
60001ba4:	f000 f9fc 	bl	60001fa0 <__sm_set_pool_veneer>
}
60001ba8:	b003      	add	sp, #12
60001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001bac:	4b1e      	ldr	r3, [pc, #120]	; (60001c28 <configure_external_ram+0x350>)
60001bae:	2200      	movs	r2, #0
60001bb0:	e9c3 2200 	strd	r2, r2, [r3]
60001bb4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bb8:	b003      	add	sp, #12
60001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bbc:	401f8000 	.word	0x401f8000
60001bc0:	0001b0f9 	.word	0x0001b0f9
60001bc4:	000110f9 	.word	0x000110f9
60001bc8:	401f8400 	.word	0x401f8400
60001bcc:	000170f9 	.word	0x000170f9
60001bd0:	400fc000 	.word	0x400fc000
60001bd4:	1ffffcff 	.word	0x1ffffcff
60001bd8:	a0000300 	.word	0xa0000300
60001bdc:	402a4000 	.word	0x402a4000
60001be0:	402a8000 	.word	0x402a8000
60001be4:	ffff0012 	.word	0xffff0012
60001be8:	00f737ff 	.word	0x00f737ff
60001bec:	80000040 	.word	0x80000040
60001bf0:	7cf0ff00 	.word	0x7cf0ff00
60001bf4:	830f00ff 	.word	0x830f00ff
60001bf8:	00020063 	.word	0x00020063
60001bfc:	5af05af0 	.word	0x5af05af0
60001c00:	402a4200 	.word	0x402a4200
60001c04:	402a4300 	.word	0x402a4300
60001c08:	3018049f 	.word	0x3018049f
60001c0c:	0a1806eb 	.word	0x0a1806eb
60001c10:	0a180638 	.word	0x0a180638
60001c14:	26013206 	.word	0x26013206
60001c18:	00030004 	.word	0x00030004
60001c1c:	70000000 	.word	0x70000000
60001c20:	70000000 	.word	0x70000000
60001c24:	20003dea 	.word	0x20003dea
60001c28:	200032e8 	.word	0x200032e8
	FLEXSPI2_IPCR0 = addr;
60001c2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c34:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c36:	4808      	ldr	r0, [pc, #32]	; (60001c58 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6943      	ldr	r3, [r0, #20]
60001c46:	07db      	lsls	r3, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
60001c4c:	2510      	movs	r5, #16
60001c4e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c52:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c54:	e79c      	b.n	60001b90 <configure_external_ram+0x2b8>
60001c56:	bf00      	nop
60001c58:	402a4000 	.word	0x402a4000

60001c5c <usb_pll_start>:
{
60001c5c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5e:	4a15      	ldr	r2, [pc, #84]	; (60001cb4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c76:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c78:	f013 0f02 	tst.w	r3, #2
60001c7c:	d10e      	bne.n	60001c9c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c82:	d00f      	beq.n	60001ca4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c88:	d00e      	beq.n	60001ca8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c8a:	2b00      	cmp	r3, #0
60001c8c:	daf3      	bge.n	60001c76 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c92:	d10b      	bne.n	60001cac <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c94:	065b      	lsls	r3, r3, #25
60001c96:	d50b      	bpl.n	60001cb0 <usb_pll_start+0x54>
}
60001c98:	bcf0      	pop	{r4, r5, r6, r7}
60001c9a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c9c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c9e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ca0:	6190      	str	r0, [r2, #24]
			continue;
60001ca2:	e7e8      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca4:	6155      	str	r5, [r2, #20]
			continue;
60001ca6:	e7e6      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ca8:	6156      	str	r6, [r2, #20]
			continue;
60001caa:	e7e4      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cac:	6191      	str	r1, [r2, #24]
			continue;
60001cae:	e7e2      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cb0:	6157      	str	r7, [r2, #20]
			continue;
60001cb2:	e7e0      	b.n	60001c76 <usb_pll_start+0x1a>
60001cb4:	400d8000 	.word	0x400d8000

60001cb8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb8:	4a3f      	ldr	r2, [pc, #252]	; (60001db8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cba:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cbc:	493f      	ldr	r1, [pc, #252]	; (60001dbc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cbe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cca:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001dc0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cce:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dc4 <tempmon_init+0x10c>
{
60001cd6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cdc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001ce0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ce4:	4d38      	ldr	r5, [pc, #224]	; (60001dc8 <tempmon_init+0x110>)
60001ce6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce8:	4c38      	ldr	r4, [pc, #224]	; (60001dcc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cea:	4839      	ldr	r0, [pc, #228]	; (60001dd0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cee:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cfc:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d00:	ee07 1a10 	vmov	s14, r1
60001d04:	4b33      	ldr	r3, [pc, #204]	; (60001dd4 <tempmon_init+0x11c>)
60001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d0a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d10:	4931      	ldr	r1, [pc, #196]	; (60001dd8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d12:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d16:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d22:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d26:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d32:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d36:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d3a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d3e:	4827      	ldr	r0, [pc, #156]	; (60001ddc <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d40:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d44:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d48:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d4c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d54:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d58:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d60:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	ee16 3a10 	vmov	r3, s12
60001d6c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d74:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001d78:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d7e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001d86:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001d8a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001d8c:	4914      	ldr	r1, [pc, #80]	; (60001de0 <tempmon_init+0x128>)
60001d8e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001d96:	f043 0302 	orr.w	r3, r3, #2
60001d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001d9e:	4b11      	ldr	r3, [pc, #68]	; (60001de4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001da0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001da4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dac:	2201      	movs	r2, #1
}
60001dae:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001db4:	4770      	bx	lr
60001db6:	bf00      	nop
60001db8:	400d8100 	.word	0x400d8100
60001dbc:	401f4400 	.word	0x401f4400
60001dc0:	42aa0000 	.word	0x42aa0000
60001dc4:	42b40000 	.word	0x42b40000
60001dc8:	20003db0 	.word	0x20003db0
60001dcc:	20003dac 	.word	0x20003dac
60001dd0:	20003db4 	.word	0x20003db4
60001dd4:	20003db8 	.word	0x20003db8
60001dd8:	0fff0000 	.word	0x0fff0000
60001ddc:	e000e400 	.word	0xe000e400
60001de0:	20002000 	.word	0x20002000
60001de4:	00004911 	.word	0x00004911

60001de8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001de8:	4b31      	ldr	r3, [pc, #196]	; (60001eb0 <usb_init+0xc8>)
60001dea:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001dee:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001df4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001df8:	f000 f8da 	bl	60001fb0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001dfc:	4a2d      	ldr	r2, [pc, #180]	; (60001eb4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001dfe:	492e      	ldr	r1, [pc, #184]	; (60001eb8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e04:	482d      	ldr	r0, [pc, #180]	; (60001ebc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e06:	f043 0303 	orr.w	r3, r3, #3
60001e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e0e:	4b2c      	ldr	r3, [pc, #176]	; (60001ec0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e10:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e14:	6802      	ldr	r2, [r0, #0]
60001e16:	421a      	tst	r2, r3
60001e18:	d103      	bne.n	60001e22 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e1a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e1e:	079a      	lsls	r2, r3, #30
60001e20:	d01b      	beq.n	60001e5a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e22:	4a25      	ldr	r2, [pc, #148]	; (60001eb8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e28:	4b24      	ldr	r3, [pc, #144]	; (60001ebc <usb_init+0xd4>)
60001e2a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e2c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e30:	f043 0302 	orr.w	r3, r3, #2
60001e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e38:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e3c:	079b      	lsls	r3, r3, #30
60001e3e:	d4fb      	bmi.n	60001e38 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e48:	4b1c      	ldr	r3, [pc, #112]	; (60001ebc <usb_init+0xd4>)
60001e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e4e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e52:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e54:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e56:	f000 f89b 	bl	60001f90 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e5a:	4a18      	ldr	r2, [pc, #96]	; (60001ebc <usb_init+0xd4>)
60001e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e60:	4c15      	ldr	r4, [pc, #84]	; (60001eb8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e62:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e64:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e66:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e68:	4b16      	ldr	r3, [pc, #88]	; (60001ec4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001e6a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e6c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e70:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e74:	4618      	mov	r0, r3
60001e76:	f000 f8a3 	bl	60001fc0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e7e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e80:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e84:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e88:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e8a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001e8e:	641a      	str	r2, [r3, #64]	; 0x40
60001e90:	4b0d      	ldr	r3, [pc, #52]	; (60001ec8 <usb_init+0xe0>)
60001e92:	4a0e      	ldr	r2, [pc, #56]	; (60001ecc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e94:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001e9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ea0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ea4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ea6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001eaa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001eae:	bd10      	pop	{r4, pc}
60001eb0:	400d8000 	.word	0x400d8000
60001eb4:	400fc000 	.word	0x400fc000
60001eb8:	402e0000 	.word	0x402e0000
60001ebc:	400d9000 	.word	0x400d9000
60001ec0:	001e1c00 	.word	0x001e1c00
60001ec4:	20000000 	.word	0x20000000
60001ec8:	20002000 	.word	0x20002000
60001ecc:	00004af9 	.word	0x00004af9

60001ed0 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ed0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ed2:	4b0e      	ldr	r3, [pc, #56]	; (60001f0c <_reboot_Teensyduino_+0x3c>)
60001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ed6:	079b      	lsls	r3, r3, #30
60001ed8:	d400      	bmi.n	60001edc <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001eda:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001edc:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ede:	4b0c      	ldr	r3, [pc, #48]	; (60001f10 <_reboot_Teensyduino_+0x40>)
60001ee0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ee2:	4a0c      	ldr	r2, [pc, #48]	; (60001f14 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ee4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ee8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001eec:	490a      	ldr	r1, [pc, #40]	; (60001f18 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001eee:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ef2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ef4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ef6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001efe:	4807      	ldr	r0, [pc, #28]	; (60001f1c <_reboot_Teensyduino_+0x4c>)
60001f00:	4a07      	ldr	r2, [pc, #28]	; (60001f20 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f02:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f04:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f06:	689b      	ldr	r3, [r3, #8]
60001f08:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f0a:	bf00      	nop
60001f0c:	401f4400 	.word	0x401f4400
60001f10:	402e0000 	.word	0x402e0000
60001f14:	400ac000 	.word	0x400ac000
60001f18:	00200003 	.word	0x00200003
60001f1c:	20208000 	.word	0x20208000
60001f20:	eb120000 	.word	0xeb120000

60001f24 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f24:	4b10      	ldr	r3, [pc, #64]	; (60001f68 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f26:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f28:	4a10      	ldr	r2, [pc, #64]	; (60001f6c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f2c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f30:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f32:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f34:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f40:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f42:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f46:	061b      	lsls	r3, r3, #24
60001f48:	d4fc      	bmi.n	60001f44 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f4a:	4a09      	ldr	r2, [pc, #36]	; (60001f70 <analog_init+0x4c>)
60001f4c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f50:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f52:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f54:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f56:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f58:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f5c:	d1fb      	bne.n	60001f56 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f5e:	4a05      	ldr	r2, [pc, #20]	; (60001f74 <analog_init+0x50>)
60001f60:	7013      	strb	r3, [r2, #0]
}
60001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f66:	4770      	bx	lr
60001f68:	400fc000 	.word	0x400fc000
60001f6c:	400c4000 	.word	0x400c4000
60001f70:	400c8000 	.word	0x400c8000
60001f74:	20003de9 	.word	0x20003de9

60001f78 <_init>:
60001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f7a:	bf00      	nop
60001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f7e:	bc08      	pop	{r3}
60001f80:	469e      	mov	lr, r3
60001f82:	4770      	bx	lr
60001f84:	0000      	movs	r0, r0
	...

60001f88 <____libc_init_array_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <____libc_init_array_veneer+0x4>
60001f8c:	000081bd 	.word	0x000081bd

60001f90 <__delay_veneer>:
60001f90:	f85f f000 	ldr.w	pc, [pc]	; 60001f94 <__delay_veneer+0x4>
60001f94:	00003dc9 	.word	0x00003dc9

60001f98 <__set_arm_clock_veneer>:
60001f98:	f85f f000 	ldr.w	pc, [pc]	; 60001f9c <__set_arm_clock_veneer+0x4>
60001f9c:	00003ad9 	.word	0x00003ad9

60001fa0 <__sm_set_pool_veneer>:
60001fa0:	f85f f000 	ldr.w	pc, [pc]	; 60001fa4 <__sm_set_pool_veneer+0x4>
60001fa4:	00005b79 	.word	0x00005b79

60001fa8 <__pwm_init_veneer>:
60001fa8:	f85f f000 	ldr.w	pc, [pc]	; 60001fac <__pwm_init_veneer+0x4>
60001fac:	00004621 	.word	0x00004621

60001fb0 <__usb_init_serialnumber_veneer>:
60001fb0:	f85f f000 	ldr.w	pc, [pc]	; 60001fb4 <__usb_init_serialnumber_veneer+0x4>
60001fb4:	00005269 	.word	0x00005269

60001fb8 <__main_veneer>:
60001fb8:	f85f f000 	ldr.w	pc, [pc]	; 60001fbc <__main_veneer+0x4>
60001fbc:	000040a9 	.word	0x000040a9

60001fc0 <__memset_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__memset_veneer+0x4>
60001fc4:	00007a51 	.word	0x00007a51

60001fc8 <__frame_dummy_init_array_entry>:
60001fc8:	00000101 00001031 000015f5 0000291d     ....1........)..
60001fd8:	0000312d 000031ad 00003231 000032b5     -1...1..12...2..
60001fe8:	00003339 000033bd 00003441 000034c5     93...3..A4...4..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    *value <<= 8;
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
    *value |= _buffer[1];
      2a:	4015      	ands	r5, r2
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f24      	ldr	r7, [pc, #144]	; (c0 <_teensy_model_identifier+0x9b>)
}
      30:	2601      	movs	r6, #1

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      32:	619d      	str	r5, [r3, #24]
      34:	fa95 f4a5 	rbit	r4, r5
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1e      	ldr	r3, [pc, #120]	; (c4 <_teensy_model_identifier+0x9f>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
            array_index -= (int)filter->size;
        }
        sum += (double) *(filter->array + array_index);
    }
    return sum / (double)(filter->size - 2);
}
      54:	4f1c      	ldr	r7, [pc, #112]	; (c8 <_teensy_model_identifier+0xa3>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
    }
    if (_miso != -1) {
      70:	4b16      	ldr	r3, [pc, #88]	; (cc <_teensy_model_identifier+0xa7>)
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
}
      7a:	4f15      	ldr	r7, [pc, #84]	; (d0 <_teensy_model_identifier+0xab>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b0f      	ldr	r3, [pc, #60]	; (d4 <_teensy_model_identifier+0xaf>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
}
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0d      	ldr	r7, [pc, #52]	; (d8 <_teensy_model_identifier+0xb3>)
      a2:	2601      	movs	r6, #1
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
}
      bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      be:	bf00      	nop
      c0:	20001b84 	.word	0x20001b84
      c4:	42004000 	.word	0x42004000
      c8:	20001c04 	.word	0x20001c04
      cc:	42008000 	.word	0x42008000
      d0:	20001c84 	.word	0x20001c84
      d4:	4200c000 	.word	0x4200c000
      d8:	20001d04 	.word	0x20001d04

000000dc <register_tm_clones>:
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      dc:	4805      	ldr	r0, [pc, #20]	; (f4 <register_tm_clones+0x18>)
      de:	4b06      	ldr	r3, [pc, #24]	; (f8 <register_tm_clones+0x1c>)
      e0:	1a1b      	subs	r3, r3, r0
      e2:	0fd9      	lsrs	r1, r3, #31
      e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      e8:	1049      	asrs	r1, r1, #1
      ea:	d002      	beq.n	f2 <register_tm_clones+0x16>
      ec:	4b03      	ldr	r3, [pc, #12]	; (fc <register_tm_clones+0x20>)
      ee:	b103      	cbz	r3, f2 <register_tm_clones+0x16>
      f0:	4718      	bx	r3
      f2:	4770      	bx	lr
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      f4:	200022c0 	.word	0x200022c0
      f8:	200022c0 	.word	0x200022c0
      fc:	00000000 	.word	0x00000000

00000100 <frame_dummy>:
     100:	b508      	push	{r3, lr}
     102:	4b05      	ldr	r3, [pc, #20]	; (118 <frame_dummy+0x18>)
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	b11b      	cbz	r3, 10e <frame_dummy+0xe>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4905      	ldr	r1, [pc, #20]	; (11c <frame_dummy+0x1c>)
     108:	4805      	ldr	r0, [pc, #20]	; (120 <frame_dummy+0x20>)
     10a:	f3af 8000 	nop.w
     10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (newbuffer) {
     112:	f7ff bfe3 	b.w	dc <register_tm_clones>
		capacity = maxStrLen;
     116:	bf00      	nop
     118:	00000000 	.word	0x00000000
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	20003d50 	.word	0x20003d50
     120:	60012000 	.word	0x60012000

00000124 <NextArg(String&)>:
#include <Arduino.h>
#include "types.h"

// Get the next argument from a string and remove it
String NextArg(String &command) {
     124:	b570      	push	{r4, r5, r6, lr}
    String arg = command.substring(0, command.indexOf(" "));
     126:	4e17      	ldr	r6, [pc, #92]	; (184 <NextArg(String&)+0x60>)
String NextArg(String &command) {
     128:	b088      	sub	sp, #32
     12a:	460c      	mov	r4, r1
     12c:	4605      	mov	r5, r0
    String arg = command.substring(0, command.indexOf(" "));
     12e:	4631      	mov	r1, r6
     130:	a804      	add	r0, sp, #16
     132:	f003 fb1b 	bl	376c <String::String(char const*)>
     136:	a904      	add	r1, sp, #16
     138:	4620      	mov	r0, r4
     13a:	f003 fc43 	bl	39c4 <String::indexOf(String const&) const>
     13e:	2200      	movs	r2, #0
     140:	4603      	mov	r3, r0
     142:	4621      	mov	r1, r4
     144:	4628      	mov	r0, r5
     146:	f003 fc7b 	bl	3a40 <String::substring(unsigned int, unsigned int) const>
     14a:	a804      	add	r0, sp, #16
     14c:	f003 fad2 	bl	36f4 <String::~String()>
    command = command.substring(command.indexOf(" ") + 1);
     150:	4631      	mov	r1, r6
     152:	4668      	mov	r0, sp
     154:	f003 fb0a 	bl	376c <String::String(char const*)>
     158:	4669      	mov	r1, sp
     15a:	4620      	mov	r0, r4
     15c:	f003 fc32 	bl	39c4 <String::indexOf(String const&) const>
     160:	4621      	mov	r1, r4
     162:	1c42      	adds	r2, r0, #1
     164:	a804      	add	r0, sp, #16
     166:	f003 fc3f 	bl	39e8 <String::substring(unsigned int) const>
     16a:	a904      	add	r1, sp, #16
     16c:	4620      	mov	r0, r4
     16e:	f003 fb65 	bl	383c <String::operator=(String&&)>
     172:	a804      	add	r0, sp, #16
     174:	f003 fabe 	bl	36f4 <String::~String()>
     178:	4668      	mov	r0, sp
     17a:	f003 fabb 	bl	36f4 <String::~String()>
    return arg;
}
     17e:	4628      	mov	r0, r5
     180:	b008      	add	sp, #32
     182:	bd70      	pop	{r4, r5, r6, pc}
     184:	200003e8 	.word	0x200003e8

00000188 <MatchCommand(String)>:

Command MatchCommand(String command) {
     188:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     18a:	490d      	ldr	r1, [pc, #52]	; (1c0 <MatchCommand(String)+0x38>)
     18c:	4604      	mov	r4, r0
     18e:	f003 fbe7 	bl	3960 <String::equals(char const*) const>
    if (command == "set") {
     192:	b990      	cbnz	r0, 1ba <MatchCommand(String)+0x32>
        return Command::SET;
    } else if (command.toLowerCase() == "toggle") {
     194:	4620      	mov	r0, r4
     196:	f003 fc7f 	bl	3a98 <String::toLowerCase()>
     19a:	490a      	ldr	r1, [pc, #40]	; (1c4 <MatchCommand(String)+0x3c>)
     19c:	f003 fbe0 	bl	3960 <String::equals(char const*) const>
     1a0:	b948      	cbnz	r0, 1b6 <MatchCommand(String)+0x2e>
        return Command::TOGGLE;
    } else if (command.toLowerCase() == "help") {
     1a2:	4620      	mov	r0, r4
     1a4:	f003 fc78 	bl	3a98 <String::toLowerCase()>
     1a8:	4907      	ldr	r1, [pc, #28]	; (1c8 <MatchCommand(String)+0x40>)
     1aa:	f003 fbd9 	bl	3960 <String::equals(char const*) const>
        return Command::SET;
     1ae:	3800      	subs	r0, #0
     1b0:	bf18      	it	ne
     1b2:	2001      	movne	r0, #1
        return Command::HELP;
    } else {
        return Command::INVALID;
    }
}
     1b4:	bd10      	pop	{r4, pc}
        return Command::TOGGLE;
     1b6:	2003      	movs	r0, #3
}
     1b8:	bd10      	pop	{r4, pc}
        return Command::SET;
     1ba:	2002      	movs	r0, #2
}
     1bc:	bd10      	pop	{r4, pc}
     1be:	bf00      	nop
     1c0:	200004b4 	.word	0x200004b4
     1c4:	200004b8 	.word	0x200004b8
     1c8:	200004c0 	.word	0x200004c0

000001cc <Help()>:

// Help menu
String Help() {
     1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1d0:	4604      	mov	r4, r0
     1d2:	b09c      	sub	sp, #112	; 0x70
    // TODO: Fill in commands
    String string =   "List of valid commands:\n";
     1d4:	493e      	ldr	r1, [pc, #248]	; (2d0 <Help()+0x104>)
     1d6:	f003 fac9 	bl	376c <String::String(char const*)>
	String & operator += (const char *cstr)		{return append(cstr);}
     1da:	493e      	ldr	r1, [pc, #248]	; (2d4 <Help()+0x108>)
     1dc:	4620      	mov	r0, r4
     1de:	f003 fb99 	bl	3914 <String::append(char const*)>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     1e2:	493d      	ldr	r1, [pc, #244]	; (2d8 <Help()+0x10c>)
     1e4:	4668      	mov	r0, sp
     1e6:	f003 fac1 	bl	376c <String::String(char const*)>
            string += "set <target> <value>\n";
            string += "    | dac <int>\n" +
            string += "    | res <float>\n" +
     1ea:	4621      	mov	r1, r4
     1ec:	4668      	mov	r0, sp
     1ee:	f003 fbaf 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     1f2:	493a      	ldr	r1, [pc, #232]	; (2dc <Help()+0x110>)
     1f4:	4605      	mov	r5, r0
     1f6:	a804      	add	r0, sp, #16
     1f8:	f003 fab8 	bl	376c <String::String(char const*)>
            string += "    | la <int>\n" +
     1fc:	4621      	mov	r1, r4
     1fe:	a804      	add	r0, sp, #16
     200:	f003 fba6 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     204:	4936      	ldr	r1, [pc, #216]	; (2e0 <Help()+0x114>)
     206:	4606      	mov	r6, r0
     208:	a808      	add	r0, sp, #32
     20a:	f003 faaf 	bl	376c <String::String(char const*)>
            string += "    | pitch <float> (not implemented)\n" +
     20e:	4621      	mov	r1, r4
     210:	a808      	add	r0, sp, #32
     212:	f003 fb9d 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     216:	4933      	ldr	r1, [pc, #204]	; (2e4 <Help()+0x118>)
     218:	4607      	mov	r7, r0
     21a:	a80c      	add	r0, sp, #48	; 0x30
     21c:	f003 faa6 	bl	376c <String::String(char const*)>
            string += "toggle <traget>\n" +
     220:	4621      	mov	r1, r4
     222:	a80c      	add	r0, sp, #48	; 0x30
     224:	f003 fb94 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     228:	492f      	ldr	r1, [pc, #188]	; (2e8 <Help()+0x11c>)
     22a:	4680      	mov	r8, r0
     22c:	a810      	add	r0, sp, #64	; 0x40
     22e:	f003 fa9d 	bl	376c <String::String(char const*)>
            string += "    | pcc\n" +
     232:	4621      	mov	r1, r4
     234:	a810      	add	r0, sp, #64	; 0x40
     236:	f003 fb8b 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     23a:	492c      	ldr	r1, [pc, #176]	; (2ec <Help()+0x120>)
     23c:	4681      	mov	r9, r0
     23e:	a814      	add	r0, sp, #80	; 0x50
     240:	f003 fa94 	bl	376c <String::String(char const*)>
            string += "    | res (resistance tracking)\n" +
     244:	4621      	mov	r1, r4
     246:	a814      	add	r0, sp, #80	; 0x50
     248:	f003 fb82 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     24c:	4928      	ldr	r1, [pc, #160]	; (2f0 <Help()+0x124>)
     24e:	4682      	mov	sl, r0
     250:	a818      	add	r0, sp, #96	; 0x60
     252:	f003 fa8b 	bl	376c <String::String(char const*)>
            string += "    | print\n";
     256:	4621      	mov	r1, r4
     258:	a818      	add	r0, sp, #96	; 0x60
     25a:	f003 fb79 	bl	3950 <operator+(StringSumHelper const&, String const&)>
	String & operator += (const char *cstr)		{return append(cstr);}
     25e:	4925      	ldr	r1, [pc, #148]	; (2f4 <Help()+0x128>)
     260:	f003 fb58 	bl	3914 <String::append(char const*)>
     264:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{return append(rhs);}
     266:	4650      	mov	r0, sl
     268:	f003 fb50 	bl	390c <String::append(String const&)>
     26c:	4601      	mov	r1, r0
     26e:	4648      	mov	r0, r9
     270:	f003 fb4c 	bl	390c <String::append(String const&)>
     274:	4601      	mov	r1, r0
     276:	4640      	mov	r0, r8
     278:	f003 fb48 	bl	390c <String::append(String const&)>
     27c:	4601      	mov	r1, r0
     27e:	4638      	mov	r0, r7
     280:	f003 fb44 	bl	390c <String::append(String const&)>
     284:	4601      	mov	r1, r0
     286:	4630      	mov	r0, r6
     288:	f003 fb40 	bl	390c <String::append(String const&)>
     28c:	4601      	mov	r1, r0
     28e:	4628      	mov	r0, r5
     290:	f003 fb3c 	bl	390c <String::append(String const&)>
     294:	4601      	mov	r1, r0
     296:	4620      	mov	r0, r4
     298:	f003 fb38 	bl	390c <String::append(String const&)>
class StringSumHelper : public String
     29c:	a818      	add	r0, sp, #96	; 0x60
     29e:	f003 fa29 	bl	36f4 <String::~String()>
     2a2:	a814      	add	r0, sp, #80	; 0x50
     2a4:	f003 fa26 	bl	36f4 <String::~String()>
     2a8:	a810      	add	r0, sp, #64	; 0x40
     2aa:	f003 fa23 	bl	36f4 <String::~String()>
     2ae:	a80c      	add	r0, sp, #48	; 0x30
     2b0:	f003 fa20 	bl	36f4 <String::~String()>
     2b4:	a808      	add	r0, sp, #32
     2b6:	f003 fa1d 	bl	36f4 <String::~String()>
     2ba:	a804      	add	r0, sp, #16
     2bc:	f003 fa1a 	bl	36f4 <String::~String()>
     2c0:	4668      	mov	r0, sp
     2c2:	f003 fa17 	bl	36f4 <String::~String()>
    return string;
     2c6:	4620      	mov	r0, r4
     2c8:	b01c      	add	sp, #112	; 0x70
     2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2ce:	bf00      	nop
     2d0:	20000554 	.word	0x20000554
     2d4:	20000570 	.word	0x20000570
     2d8:	20000588 	.word	0x20000588
     2dc:	2000059c 	.word	0x2000059c
     2e0:	200005b0 	.word	0x200005b0
     2e4:	200005c0 	.word	0x200005c0
     2e8:	200005e8 	.word	0x200005e8
     2ec:	200005fc 	.word	0x200005fc
     2f0:	20000608 	.word	0x20000608
     2f4:	2000062c 	.word	0x2000062c

000002f8 <CreateFilter(unsigned int, int)>:
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2f8:	b570      	push	{r4, r5, r6, lr}
     2fa:	4605      	mov	r5, r0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     2fc:	2018      	movs	r0, #24
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     2fe:	460e      	mov	r6, r1
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     300:	f005 fc9c 	bl	5c3c <malloc>
    filter->oldestMoment = 0;
     304:	2300      	movs	r3, #0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     306:	4604      	mov	r4, r0
    filter->size = size;
     308:	6005      	str	r5, [r0, #0]
    filter->errorThreshold = 0.25;
     30a:	2200      	movs	r2, #0
    filter->oldestMoment = 0;
     30c:	6063      	str	r3, [r4, #4]
    filter->array = (int*)malloc(sizeof(int) * size);
     30e:	00a8      	lsls	r0, r5, #2
    filter->errorThreshold = 0.25;
     310:	4b04      	ldr	r3, [pc, #16]	; (324 <CreateFilter(unsigned int, int)+0x2c>)
    filter->peaks_per_rotation = peaks_per_rotation;
     312:	6126      	str	r6, [r4, #16]
    filter->errorThreshold = 0.25;
     314:	e9c4 2302 	strd	r2, r3, [r4, #8]
    filter->array = (int*)malloc(sizeof(int) * size);
     318:	f005 fc90 	bl	5c3c <malloc>
     31c:	4603      	mov	r3, r0
}
     31e:	4620      	mov	r0, r4
    filter->array = (int*)malloc(sizeof(int) * size);
     320:	6163      	str	r3, [r4, #20]
}
     322:	bd70      	pop	{r4, r5, r6, pc}
     324:	3fd00000 	.word	0x3fd00000

00000328 <Insert(Filter*, int)>:
    int index = filter->oldestMoment;
     328:	6842      	ldr	r2, [r0, #4]
    *(filter->array + index) = value;
     32a:	6943      	ldr	r3, [r0, #20]
     32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    filter->oldestMoment++;
     330:	6843      	ldr	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     332:	6802      	ldr	r2, [r0, #0]
    filter->oldestMoment++;
     334:	3301      	adds	r3, #1
     336:	6043      	str	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     338:	6843      	ldr	r3, [r0, #4]
     33a:	4293      	cmp	r3, r2
     33c:	db01      	blt.n	342 <Insert(Filter*, int)+0x1a>
        filter->oldestMoment = 0;
     33e:	2300      	movs	r3, #0
     340:	6043      	str	r3, [r0, #4]
}
     342:	4770      	bx	lr
     344:	0000      	movs	r0, r0
	...

00000348 <GetRpmBuffered(Filter*)>:

double GetRpmBuffered(struct Filter* filter) {
    int highIndex = filter->oldestMoment - 1;
     348:	6841      	ldr	r1, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
    int lowIndex = filter->oldestMoment + 1;
     34a:	6843      	ldr	r3, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     34c:	6802      	ldr	r2, [r0, #0]
     34e:	3901      	subs	r1, #1
double GetRpmBuffered(struct Filter* filter) {
     350:	b410      	push	{r4}
    int lowIndex = filter->oldestMoment + 1;
     352:	f103 0401 	add.w	r4, r3, #1
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     356:	bf48      	it	mi
     358:	f102 31ff 	addmi.w	r1, r2, #4294967295
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     35c:	4294      	cmp	r4, r2
    lowIndex++;
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
    
    double high = (double) *(filter->array + highIndex);
     35e:	6944      	ldr	r4, [r0, #20]
    lowIndex++;
     360:	bfb4      	ite	lt
     362:	3302      	addlt	r3, #2
     364:	2301      	movge	r3, #1
    double high = (double) *(filter->array + highIndex);
     366:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     36a:	429a      	cmp	r2, r3
    double low = (double) *(filter->array + lowIndex);
     36c:	bfcc      	ite	gt
     36e:	009b      	lslgt	r3, r3, #2
     370:	2300      	movle	r3, #0
     372:	58e3      	ldr	r3, [r4, r3]
    
    if (high < low) {
     374:	4299      	cmp	r1, r3
     376:	db21      	blt.n	3bc <GetRpmBuffered(Filter*)+0x74>
    double high = (double) *(filter->array + highIndex);
     378:	ee07 1a90 	vmov	s15, r1
        return -1;
    }
    
    double period = (high - low) / (filter->size - 3);
     37c:	3a03      	subs	r2, #3
    period = period / 1000000; // convert us -> s
    double rpm = 60 / period;
    return rpm / (double)filter->peaks_per_rotation;
     37e:	ed90 5a04 	vldr	s10, [r0, #16]
    double high = (double) *(filter->array + highIndex);
     382:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    double low = (double) *(filter->array + lowIndex);
     386:	ee07 3a90 	vmov	s15, r3
    return rpm / (double)filter->peaks_per_rotation;
     38a:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
}
     38e:	f85d 4b04 	ldr.w	r4, [sp], #4
    double low = (double) *(filter->array + lowIndex);
     392:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    period = period / 1000000; // convert us -> s
     396:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 3c8 <GetRpmBuffered(Filter*)+0x80>
    double period = (high - low) / (filter->size - 3);
     39a:	ee36 6b47 	vsub.f64	d6, d6, d7
     39e:	ee07 2a90 	vmov	s15, r2
     3a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    double rpm = 60 / period;
     3a6:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 3d0 <GetRpmBuffered(Filter*)+0x88>
    double period = (high - low) / (filter->size - 3);
     3aa:	ee86 2b07 	vdiv.f64	d2, d6, d7
    period = period / 1000000; // convert us -> s
     3ae:	ee82 6b03 	vdiv.f64	d6, d2, d3
    double rpm = 60 / period;
     3b2:	ee84 7b06 	vdiv.f64	d7, d4, d6
    return rpm / (double)filter->peaks_per_rotation;
     3b6:	ee87 0b05 	vdiv.f64	d0, d7, d5
}
     3ba:	4770      	bx	lr
        return -1;
     3bc:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
}
     3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
     3c4:	4770      	bx	lr
     3c6:	bf00      	nop
     3c8:	00000000 	.word	0x00000000
     3cc:	412e8480 	.word	0x412e8480
     3d0:	00000000 	.word	0x00000000
     3d4:	404e0000 	.word	0x404e0000

000003d8 <RPM_Interrupt()>:
        Serial.println("Try \"help\"");
    }
}

// Interrupt for measuring the RPM
void RPM_Interrupt () {
     3d8:	b508      	push	{r3, lr}
    int time = (int)micros();
     3da:	f003 fd49 	bl	3e70 <micros>
    Insert(rpm_filter, time);
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <RPM_Interrupt()+0x14>)
    int time = (int)micros();
     3e0:	4601      	mov	r1, r0
    Insert(rpm_filter, time);
     3e2:	6818      	ldr	r0, [r3, #0]
     3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Insert(rpm_filter, time);
     3e8:	f7ff bf9e 	b.w	328 <Insert(Filter*, int)>
     3ec:	20003d78 	.word	0x20003d78

000003f0 <setup>:
void setup () {
     3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     3f4:	4d71      	ldr	r5, [pc, #452]	; (5bc <setup+0x1cc>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     3f6:	f240 28ee 	movw	r8, #750	; 0x2ee
     3fa:	4c71      	ldr	r4, [pc, #452]	; (5c0 <setup+0x1d0>)
     3fc:	4f71      	ldr	r7, [pc, #452]	; (5c4 <setup+0x1d4>)
     3fe:	f8df 9210 	ldr.w	r9, [pc, #528]	; 610 <setup+0x220>
		uint32_t millis_begin = systick_millis_count;
     402:	682e      	ldr	r6, [r5, #0]
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     404:	f005 fb06 	bl	5a14 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     408:	7823      	ldrb	r3, [r4, #0]
     40a:	2b00      	cmp	r3, #0
     40c:	f000 8083 	beq.w	516 <setup+0x126>
     410:	783b      	ldrb	r3, [r7, #0]
     412:	07da      	lsls	r2, r3, #31
     414:	d57f      	bpl.n	516 <setup+0x126>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     416:	682b      	ldr	r3, [r5, #0]
     418:	f8d9 2000 	ldr.w	r2, [r9]
     41c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     41e:	2b0e      	cmp	r3, #14
     420:	d979      	bls.n	516 <setup+0x126>
		yield();
     422:	f005 faf7 	bl	5a14 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     426:	7823      	ldrb	r3, [r4, #0]
        delay(10);
     428:	200a      	movs	r0, #10
     42a:	2b00      	cmp	r3, #0
     42c:	d07e      	beq.n	52c <setup+0x13c>
     42e:	783b      	ldrb	r3, [r7, #0]
     430:	07db      	lsls	r3, r3, #31
     432:	d57b      	bpl.n	52c <setup+0x13c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     434:	682b      	ldr	r3, [r5, #0]
     436:	f8d9 2000 	ldr.w	r2, [r9]
     43a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     43c:	2b0e      	cmp	r3, #14
     43e:	d975      	bls.n	52c <setup+0x13c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     440:	210e      	movs	r1, #14
     442:	4861      	ldr	r0, [pc, #388]	; (5c8 <setup+0x1d8>)
     444:	f005 fa68 	bl	5918 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     448:	4860      	ldr	r0, [pc, #384]	; (5cc <setup+0x1dc>)
     44a:	f003 f8c5 	bl	35d8 <Print::println()>
    pinMode(Safety_Switch_Pin, INPUT);
     44e:	2100      	movs	r1, #0
     450:	200b      	movs	r0, #11
     452:	f003 fd73 	bl	3f3c <pinMode>
    myServo.begin(32);
     456:	2120      	movs	r1, #32
     458:	485d      	ldr	r0, [pc, #372]	; (5d0 <setup+0x1e0>)
     45a:	f001 f90d 	bl	1678 <PA12::begin(int)>
    delay(100);
     45e:	2064      	movs	r0, #100	; 0x64
     460:	f003 fcb2 	bl	3dc8 <delay>
    if (myServo.available()) {
     464:	485a      	ldr	r0, [pc, #360]	; (5d0 <setup+0x1e0>)
     466:	f001 f95d 	bl	1724 <PA12::available()>
     46a:	2800      	cmp	r0, #0
     46c:	d064      	beq.n	538 <setup+0x148>
        myServo.movingSpeed(LA_ID_NUM, 750);
     46e:	f240 22ee 	movw	r2, #750	; 0x2ee
     472:	2100      	movs	r1, #0
     474:	4856      	ldr	r0, [pc, #344]	; (5d0 <setup+0x1e0>)
     476:	f001 fb83 	bl	1b80 <PA12::movingSpeed(int, int)>
     47a:	2115      	movs	r1, #21
     47c:	4855      	ldr	r0, [pc, #340]	; (5d4 <setup+0x1e4>)
     47e:	f005 fa4b 	bl	5918 <usb_serial_write>
     482:	4852      	ldr	r0, [pc, #328]	; (5cc <setup+0x1dc>)
     484:	f003 f8a8 	bl	35d8 <Print::println()>
    ina260.begin(0x40);
     488:	4a53      	ldr	r2, [pc, #332]	; (5d8 <setup+0x1e8>)
     48a:	2140      	movs	r1, #64	; 0x40
     48c:	4853      	ldr	r0, [pc, #332]	; (5dc <setup+0x1ec>)
     48e:	f001 fc05 	bl	1c9c <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     492:	200a      	movs	r0, #10
     494:	f003 fc98 	bl	3dc8 <delay>
    if (ina260.conversionReady()) {
     498:	4850      	ldr	r0, [pc, #320]	; (5dc <setup+0x1ec>)
     49a:	f001 fcc7 	bl	1e2c <Adafruit_INA260::conversionReady()>
     49e:	2800      	cmp	r0, #0
     4a0:	d05d      	beq.n	55e <setup+0x16e>
     4a2:	210c      	movs	r1, #12
     4a4:	484e      	ldr	r0, [pc, #312]	; (5e0 <setup+0x1f0>)
     4a6:	f005 fa37 	bl	5918 <usb_serial_write>
     4aa:	4848      	ldr	r0, [pc, #288]	; (5cc <setup+0x1dc>)
     4ac:	f003 f894 	bl	35d8 <Print::println()>
    dac.begin(0x64);
     4b0:	2164      	movs	r1, #100	; 0x64
     4b2:	484c      	ldr	r0, [pc, #304]	; (5e4 <setup+0x1f4>)
     4b4:	f002 fa58 	bl	2968 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     4b8:	200a      	movs	r0, #10
     4ba:	f003 fc85 	bl	3dc8 <delay>
    dac.setVoltage(dacValue, false);
     4be:	4b4a      	ldr	r3, [pc, #296]	; (5e8 <setup+0x1f8>)
     4c0:	2200      	movs	r2, #0
     4c2:	4848      	ldr	r0, [pc, #288]	; (5e4 <setup+0x1f4>)
     4c4:	8819      	ldrh	r1, [r3, #0]
     4c6:	f002 fa57 	bl	2978 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     4ca:	2109      	movs	r1, #9
     4cc:	4847      	ldr	r0, [pc, #284]	; (5ec <setup+0x1fc>)
     4ce:	f005 fa23 	bl	5918 <usb_serial_write>
     4d2:	483e      	ldr	r0, [pc, #248]	; (5cc <setup+0x1dc>)
     4d4:	f003 f880 	bl	35d8 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     4d8:	2101      	movs	r1, #1
     4da:	2021      	movs	r0, #33	; 0x21
     4dc:	f003 fd2e 	bl	3f3c <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     4e0:	2203      	movs	r2, #3
     4e2:	4943      	ldr	r1, [pc, #268]	; (5f0 <setup+0x200>)
     4e4:	201d      	movs	r0, #29
     4e6:	f003 fd63 	bl	3fb0 <attachInterrupt>
     4ea:	210e      	movs	r1, #14
     4ec:	4841      	ldr	r0, [pc, #260]	; (5f4 <setup+0x204>)
     4ee:	f005 fa13 	bl	5918 <usb_serial_write>
     4f2:	4836      	ldr	r0, [pc, #216]	; (5cc <setup+0x1dc>)
     4f4:	f003 f870 	bl	35d8 <Print::println()>
     4f8:	2122      	movs	r1, #34	; 0x22
     4fa:	483f      	ldr	r0, [pc, #252]	; (5f8 <setup+0x208>)
     4fc:	f005 fa0c 	bl	5918 <usb_serial_write>
     500:	4832      	ldr	r0, [pc, #200]	; (5cc <setup+0x1dc>)
     502:	f003 f869 	bl	35d8 <Print::println()>
     506:	6828      	ldr	r0, [r5, #0]
    printTimer = millis();
     508:	493c      	ldr	r1, [pc, #240]	; (5fc <setup+0x20c>)
     50a:	682a      	ldr	r2, [r5, #0]
    resistanceTracingTimer = millis();
     50c:	4b3c      	ldr	r3, [pc, #240]	; (600 <setup+0x210>)
    printTimer = millis();
     50e:	6008      	str	r0, [r1, #0]
    resistanceTracingTimer = millis();
     510:	601a      	str	r2, [r3, #0]
}
     512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     516:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     518:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     51a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     51c:	b14a      	cbz	r2, 532 <setup+0x142>
				if (elapsed > 2000) break;
     51e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     522:	f63f af7e 	bhi.w	422 <setup+0x32>
			yield();
     526:	f005 fa75 	bl	5a14 <yield>
     52a:	e76b      	b.n	404 <setup+0x14>
        delay(10);
     52c:	f003 fc4c 	bl	3dc8 <delay>
     530:	e777      	b.n	422 <setup+0x32>
				if (elapsed > 750) break;
     532:	4543      	cmp	r3, r8
     534:	d9f7      	bls.n	526 <setup+0x136>
     536:	e774      	b.n	422 <setup+0x32>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     538:	2115      	movs	r1, #21
     53a:	4832      	ldr	r0, [pc, #200]	; (604 <setup+0x214>)
     53c:	f005 f9ec 	bl	5918 <usb_serial_write>
     540:	4822      	ldr	r0, [pc, #136]	; (5cc <setup+0x1dc>)
     542:	f003 f849 	bl	35d8 <Print::println()>
    ina260.begin(0x40);
     546:	4a24      	ldr	r2, [pc, #144]	; (5d8 <setup+0x1e8>)
     548:	2140      	movs	r1, #64	; 0x40
     54a:	4824      	ldr	r0, [pc, #144]	; (5dc <setup+0x1ec>)
     54c:	f001 fba6 	bl	1c9c <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     550:	200a      	movs	r0, #10
     552:	f003 fc39 	bl	3dc8 <delay>
    if (ina260.conversionReady()) {
     556:	4821      	ldr	r0, [pc, #132]	; (5dc <setup+0x1ec>)
     558:	f001 fc68 	bl	1e2c <Adafruit_INA260::conversionReady()>
     55c:	bb58      	cbnz	r0, 5b6 <setup+0x1c6>
     55e:	210c      	movs	r1, #12
     560:	4829      	ldr	r0, [pc, #164]	; (608 <setup+0x218>)
     562:	f005 f9d9 	bl	5918 <usb_serial_write>
     566:	4819      	ldr	r0, [pc, #100]	; (5cc <setup+0x1dc>)
     568:	f003 f836 	bl	35d8 <Print::println()>
    dac.begin(0x64);
     56c:	2164      	movs	r1, #100	; 0x64
     56e:	481d      	ldr	r0, [pc, #116]	; (5e4 <setup+0x1f4>)
     570:	f002 f9fa 	bl	2968 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     574:	200a      	movs	r0, #10
     576:	f003 fc27 	bl	3dc8 <delay>
    dac.setVoltage(dacValue, false);
     57a:	4b1b      	ldr	r3, [pc, #108]	; (5e8 <setup+0x1f8>)
     57c:	2200      	movs	r2, #0
     57e:	4819      	ldr	r0, [pc, #100]	; (5e4 <setup+0x1f4>)
     580:	8819      	ldrh	r1, [r3, #0]
     582:	f002 f9f9 	bl	2978 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     586:	2109      	movs	r1, #9
     588:	4818      	ldr	r0, [pc, #96]	; (5ec <setup+0x1fc>)
     58a:	f005 f9c5 	bl	5918 <usb_serial_write>
     58e:	480f      	ldr	r0, [pc, #60]	; (5cc <setup+0x1dc>)
     590:	f003 f822 	bl	35d8 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     594:	2101      	movs	r1, #1
     596:	2021      	movs	r0, #33	; 0x21
     598:	f003 fcd0 	bl	3f3c <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     59c:	2203      	movs	r2, #3
     59e:	4914      	ldr	r1, [pc, #80]	; (5f0 <setup+0x200>)
     5a0:	201d      	movs	r0, #29
     5a2:	f003 fd05 	bl	3fb0 <attachInterrupt>
     5a6:	210c      	movs	r1, #12
     5a8:	4818      	ldr	r0, [pc, #96]	; (60c <setup+0x21c>)
     5aa:	f005 f9b5 	bl	5918 <usb_serial_write>
     5ae:	4807      	ldr	r0, [pc, #28]	; (5cc <setup+0x1dc>)
     5b0:	f003 f812 	bl	35d8 <Print::println()>
     5b4:	e7a0      	b.n	4f8 <setup+0x108>
     5b6:	210c      	movs	r1, #12
     5b8:	4809      	ldr	r0, [pc, #36]	; (5e0 <setup+0x1f0>)
     5ba:	e7d2      	b.n	562 <setup+0x172>
     5bc:	20003dc4 	.word	0x20003dc4
     5c0:	20003df3 	.word	0x20003df3
     5c4:	20003df2 	.word	0x20003df2
     5c8:	20001058 	.word	0x20001058
     5cc:	20001308 	.word	0x20001308
     5d0:	20003308 	.word	0x20003308
     5d4:	20001068 	.word	0x20001068
     5d8:	20002878 	.word	0x20002878
     5dc:	200032f8 	.word	0x200032f8
     5e0:	200010e8 	.word	0x200010e8
     5e4:	200032d0 	.word	0x200032d0
     5e8:	20001de2 	.word	0x20001de2
     5ec:	20001090 	.word	0x20001090
     5f0:	000003d9 	.word	0x000003d9
     5f4:	200010f8 	.word	0x200010f8
     5f8:	200010c4 	.word	0x200010c4
     5fc:	20003d68 	.word	0x20003d68
     600:	20003d74 	.word	0x20003d74
     604:	2000109c 	.word	0x2000109c
     608:	20001080 	.word	0x20001080
     60c:	200010b4 	.word	0x200010b4
     610:	20003dd4 	.word	0x20003dd4

00000614 <PrintOutput()>:
void PrintOutput () {
     614:	b530      	push	{r4, r5, lr}
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     616:	2021      	movs	r0, #33	; 0x21
void PrintOutput () {
     618:	ed2d 8b02 	vpush	{d8}
     61c:	b0bd      	sub	sp, #244	; 0xf4
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     61e:	f003 fc7b 	bl	3f18 <digitalRead>
     622:	4bb6      	ldr	r3, [pc, #728]	; (8fc <PrintOutput()+0x2e8>)
     624:	4ab6      	ldr	r2, [pc, #728]	; (900 <PrintOutput()+0x2ec>)
     626:	4601      	mov	r1, r0
     628:	4668      	mov	r0, sp
     62a:	ac38      	add	r4, sp, #224	; 0xe0
     62c:	2900      	cmp	r1, #0
     62e:	bf14      	ite	ne
     630:	4611      	movne	r1, r2
     632:	4619      	moveq	r1, r3
     634:	f003 f89a 	bl	376c <String::String(char const*)>
    String turbineVoltage = digitalRead(30) ? "off" : "on";
     638:	201e      	movs	r0, #30
     63a:	f003 fc6d 	bl	3f18 <digitalRead>
     63e:	4ab1      	ldr	r2, [pc, #708]	; (904 <PrintOutput()+0x2f0>)
     640:	49b1      	ldr	r1, [pc, #708]	; (908 <PrintOutput()+0x2f4>)
     642:	2800      	cmp	r0, #0
     644:	bf18      	it	ne
     646:	4611      	movne	r1, r2
     648:	a804      	add	r0, sp, #16
     64a:	f003 f88f 	bl	376c <String::String(char const*)>
    String relayStateStr = PadString(relayState);
     64e:	4669      	mov	r1, sp
     650:	a834      	add	r0, sp, #208	; 0xd0
     652:	f003 f81b 	bl	368c <String::String(String const&)>
    while (str.length() < 8) {
     656:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     658:	2b07      	cmp	r3, #7
     65a:	d812      	bhi.n	682 <PrintOutput()+0x6e>
	StringSumHelper(const char *p) : String(p) {}
     65c:	4dab      	ldr	r5, [pc, #684]	; (90c <PrintOutput()+0x2f8>)
     65e:	4629      	mov	r1, r5
     660:	4620      	mov	r0, r4
     662:	f003 f883 	bl	376c <String::String(char const*)>
        str = " " + str;
     666:	a934      	add	r1, sp, #208	; 0xd0
     668:	4620      	mov	r0, r4
     66a:	f003 f971 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     66e:	4601      	mov	r1, r0
     670:	a834      	add	r0, sp, #208	; 0xd0
     672:	f003 f8db 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     676:	4620      	mov	r0, r4
     678:	f003 f83c 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     67c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     67e:	2b07      	cmp	r3, #7
     680:	d9ed      	bls.n	65e <PrintOutput()+0x4a>
    return str;
     682:	a934      	add	r1, sp, #208	; 0xd0
     684:	a808      	add	r0, sp, #32
     686:	f003 f81f 	bl	36c8 <String::String(String&&)>
     68a:	a834      	add	r0, sp, #208	; 0xd0
     68c:	f003 f832 	bl	36f4 <String::~String()>
    String safetySwitchStr = PadString(digitalRead(Safety_Switch_Pin) ? "open" : "closed"); // Should shutdown when closed
     690:	200b      	movs	r0, #11
     692:	f003 fc41 	bl	3f18 <digitalRead>
     696:	4a9e      	ldr	r2, [pc, #632]	; (910 <PrintOutput()+0x2fc>)
     698:	499e      	ldr	r1, [pc, #632]	; (914 <PrintOutput()+0x300>)
     69a:	2800      	cmp	r0, #0
     69c:	bf18      	it	ne
     69e:	4611      	movne	r1, r2
     6a0:	a834      	add	r0, sp, #208	; 0xd0
     6a2:	f003 f863 	bl	376c <String::String(char const*)>
    while (str.length() < 8) {
     6a6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     6a8:	2b07      	cmp	r3, #7
     6aa:	d812      	bhi.n	6d2 <PrintOutput()+0xbe>
	StringSumHelper(const char *p) : String(p) {}
     6ac:	4d97      	ldr	r5, [pc, #604]	; (90c <PrintOutput()+0x2f8>)
     6ae:	4629      	mov	r1, r5
     6b0:	4620      	mov	r0, r4
     6b2:	f003 f85b 	bl	376c <String::String(char const*)>
        str = " " + str;
     6b6:	a934      	add	r1, sp, #208	; 0xd0
     6b8:	4620      	mov	r0, r4
     6ba:	f003 f949 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     6be:	4601      	mov	r1, r0
     6c0:	a834      	add	r0, sp, #208	; 0xd0
     6c2:	f003 f8b3 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     6c6:	4620      	mov	r0, r4
     6c8:	f003 f814 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     6cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     6ce:	2b07      	cmp	r3, #7
     6d0:	d9ed      	bls.n	6ae <PrintOutput()+0x9a>
    return str;
     6d2:	a934      	add	r1, sp, #208	; 0xd0
     6d4:	a80c      	add	r0, sp, #48	; 0x30
     6d6:	f002 fff7 	bl	36c8 <String::String(String&&)>
     6da:	a834      	add	r0, sp, #208	; 0xd0
     6dc:	f003 f80a 	bl	36f4 <String::~String()>
    String turbineVoltageStr = PadString(turbineVoltage);
     6e0:	a904      	add	r1, sp, #16
     6e2:	a834      	add	r0, sp, #208	; 0xd0
     6e4:	f002 ffd2 	bl	368c <String::String(String const&)>
    while (str.length() < 8) {
     6e8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     6ea:	2b07      	cmp	r3, #7
     6ec:	d812      	bhi.n	714 <PrintOutput()+0x100>
	StringSumHelper(const char *p) : String(p) {}
     6ee:	4d87      	ldr	r5, [pc, #540]	; (90c <PrintOutput()+0x2f8>)
     6f0:	4629      	mov	r1, r5
     6f2:	4620      	mov	r0, r4
     6f4:	f003 f83a 	bl	376c <String::String(char const*)>
        str = " " + str;
     6f8:	a934      	add	r1, sp, #208	; 0xd0
     6fa:	4620      	mov	r0, r4
     6fc:	f003 f928 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     700:	4601      	mov	r1, r0
     702:	a834      	add	r0, sp, #208	; 0xd0
     704:	f003 f892 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     708:	4620      	mov	r0, r4
     70a:	f002 fff3 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     70e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     710:	2b07      	cmp	r3, #7
     712:	d9ed      	bls.n	6f0 <PrintOutput()+0xdc>
    return str;
     714:	a934      	add	r1, sp, #208	; 0xd0
     716:	a810      	add	r0, sp, #64	; 0x40
     718:	f002 ffd6 	bl	36c8 <String::String(String&&)>
     71c:	a834      	add	r0, sp, #208	; 0xd0
     71e:	f002 ffe9 	bl	36f4 <String::~String()>
    String laPosStr = PadString(String(myServo.presentPosition(LA_ID_NUM)));
     722:	2100      	movs	r1, #0
     724:	487c      	ldr	r0, [pc, #496]	; (918 <PrintOutput()+0x304>)
     726:	f001 fa45 	bl	1bb4 <PA12::presentPosition(int)>
     72a:	220a      	movs	r2, #10
     72c:	4601      	mov	r1, r0
     72e:	a834      	add	r0, sp, #208	; 0xd0
     730:	f003 f830 	bl	3794 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     734:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     736:	2b07      	cmp	r3, #7
     738:	d812      	bhi.n	760 <PrintOutput()+0x14c>
	StringSumHelper(const char *p) : String(p) {}
     73a:	4d74      	ldr	r5, [pc, #464]	; (90c <PrintOutput()+0x2f8>)
     73c:	4629      	mov	r1, r5
     73e:	4620      	mov	r0, r4
     740:	f003 f814 	bl	376c <String::String(char const*)>
        str = " " + str;
     744:	a934      	add	r1, sp, #208	; 0xd0
     746:	4620      	mov	r0, r4
     748:	f003 f902 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     74c:	4601      	mov	r1, r0
     74e:	a834      	add	r0, sp, #208	; 0xd0
     750:	f003 f86c 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     754:	4620      	mov	r0, r4
     756:	f002 ffcd 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     75a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     75c:	2b07      	cmp	r3, #7
     75e:	d9ed      	bls.n	73c <PrintOutput()+0x128>
    return str;
     760:	a934      	add	r1, sp, #208	; 0xd0
     762:	a814      	add	r0, sp, #80	; 0x50
     764:	f002 ffb0 	bl	36c8 <String::String(String&&)>
     768:	a834      	add	r0, sp, #208	; 0xd0
     76a:	f002 ffc3 	bl	36f4 <String::~String()>
    String dacValStr = PadString(String(dacValue));
     76e:	4b6b      	ldr	r3, [pc, #428]	; (91c <PrintOutput()+0x308>)
     770:	220a      	movs	r2, #10
     772:	a834      	add	r0, sp, #208	; 0xd0
     774:	8819      	ldrh	r1, [r3, #0]
     776:	f003 f80d 	bl	3794 <String::String(int, unsigned char)>
    while (str.length() < 8) {
     77a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     77c:	2b07      	cmp	r3, #7
     77e:	d812      	bhi.n	7a6 <PrintOutput()+0x192>
	StringSumHelper(const char *p) : String(p) {}
     780:	4d62      	ldr	r5, [pc, #392]	; (90c <PrintOutput()+0x2f8>)
     782:	4629      	mov	r1, r5
     784:	4620      	mov	r0, r4
     786:	f002 fff1 	bl	376c <String::String(char const*)>
        str = " " + str;
     78a:	a934      	add	r1, sp, #208	; 0xd0
     78c:	4620      	mov	r0, r4
     78e:	f003 f8df 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     792:	4601      	mov	r1, r0
     794:	a834      	add	r0, sp, #208	; 0xd0
     796:	f003 f849 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     79a:	4620      	mov	r0, r4
     79c:	f002 ffaa 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     7a0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     7a2:	2b07      	cmp	r3, #7
     7a4:	d9ed      	bls.n	782 <PrintOutput()+0x16e>
    return str;
     7a6:	a934      	add	r1, sp, #208	; 0xd0
     7a8:	a818      	add	r0, sp, #96	; 0x60
     7aa:	f002 ff8d 	bl	36c8 <String::String(String&&)>
     7ae:	a834      	add	r0, sp, #208	; 0xd0
     7b0:	f002 ffa0 	bl	36f4 <String::~String()>
    String resistanceStr = PadString(String(ina260.readBusVoltage() / ina260.readCurrent()));
     7b4:	485a      	ldr	r0, [pc, #360]	; (920 <PrintOutput()+0x30c>)
     7b6:	f001 fb07 	bl	1dc8 <Adafruit_INA260::readBusVoltage()>
     7ba:	eeb0 8a40 	vmov.f32	s16, s0
     7be:	4858      	ldr	r0, [pc, #352]	; (920 <PrintOutput()+0x30c>)
     7c0:	f001 fae6 	bl	1d90 <Adafruit_INA260::readCurrent()>
     7c4:	2102      	movs	r1, #2
     7c6:	ee88 0a00 	vdiv.f32	s0, s16, s0
     7ca:	a834      	add	r0, sp, #208	; 0xd0
     7cc:	f003 f812 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     7d0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     7d2:	2b07      	cmp	r3, #7
     7d4:	d812      	bhi.n	7fc <PrintOutput()+0x1e8>
	StringSumHelper(const char *p) : String(p) {}
     7d6:	4d4d      	ldr	r5, [pc, #308]	; (90c <PrintOutput()+0x2f8>)
     7d8:	4629      	mov	r1, r5
     7da:	4620      	mov	r0, r4
     7dc:	f002 ffc6 	bl	376c <String::String(char const*)>
        str = " " + str;
     7e0:	a934      	add	r1, sp, #208	; 0xd0
     7e2:	4620      	mov	r0, r4
     7e4:	f003 f8b4 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     7e8:	4601      	mov	r1, r0
     7ea:	a834      	add	r0, sp, #208	; 0xd0
     7ec:	f003 f81e 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     7f0:	4620      	mov	r0, r4
     7f2:	f002 ff7f 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     7f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     7f8:	2b07      	cmp	r3, #7
     7fa:	d9ed      	bls.n	7d8 <PrintOutput()+0x1c4>
    return str;
     7fc:	a934      	add	r1, sp, #208	; 0xd0
     7fe:	a81c      	add	r0, sp, #112	; 0x70
     800:	f002 ff62 	bl	36c8 <String::String(String&&)>
     804:	a834      	add	r0, sp, #208	; 0xd0
     806:	f002 ff75 	bl	36f4 <String::~String()>
    String currentStr = PadString(String(ina260.readCurrent()));
     80a:	4845      	ldr	r0, [pc, #276]	; (920 <PrintOutput()+0x30c>)
     80c:	f001 fac0 	bl	1d90 <Adafruit_INA260::readCurrent()>
     810:	2102      	movs	r1, #2
     812:	a834      	add	r0, sp, #208	; 0xd0
     814:	f002 ffee 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     818:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     81a:	2b07      	cmp	r3, #7
     81c:	d812      	bhi.n	844 <PrintOutput()+0x230>
	StringSumHelper(const char *p) : String(p) {}
     81e:	4d3b      	ldr	r5, [pc, #236]	; (90c <PrintOutput()+0x2f8>)
     820:	4629      	mov	r1, r5
     822:	4620      	mov	r0, r4
     824:	f002 ffa2 	bl	376c <String::String(char const*)>
        str = " " + str;
     828:	a934      	add	r1, sp, #208	; 0xd0
     82a:	4620      	mov	r0, r4
     82c:	f003 f890 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     830:	4601      	mov	r1, r0
     832:	a834      	add	r0, sp, #208	; 0xd0
     834:	f002 fffa 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     838:	4620      	mov	r0, r4
     83a:	f002 ff5b 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     83e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     840:	2b07      	cmp	r3, #7
     842:	d9ed      	bls.n	820 <PrintOutput()+0x20c>
    return str;
     844:	a934      	add	r1, sp, #208	; 0xd0
     846:	a820      	add	r0, sp, #128	; 0x80
     848:	f002 ff3e 	bl	36c8 <String::String(String&&)>
     84c:	a834      	add	r0, sp, #208	; 0xd0
     84e:	f002 ff51 	bl	36f4 <String::~String()>
    String voltStr = PadString(String(ina260.readBusVoltage()));
     852:	4833      	ldr	r0, [pc, #204]	; (920 <PrintOutput()+0x30c>)
     854:	f001 fab8 	bl	1dc8 <Adafruit_INA260::readBusVoltage()>
     858:	2102      	movs	r1, #2
     85a:	a834      	add	r0, sp, #208	; 0xd0
     85c:	f002 ffca 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     860:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     862:	2b07      	cmp	r3, #7
     864:	d812      	bhi.n	88c <PrintOutput()+0x278>
	StringSumHelper(const char *p) : String(p) {}
     866:	4d29      	ldr	r5, [pc, #164]	; (90c <PrintOutput()+0x2f8>)
     868:	4629      	mov	r1, r5
     86a:	4620      	mov	r0, r4
     86c:	f002 ff7e 	bl	376c <String::String(char const*)>
        str = " " + str;
     870:	a934      	add	r1, sp, #208	; 0xd0
     872:	4620      	mov	r0, r4
     874:	f003 f86c 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     878:	4601      	mov	r1, r0
     87a:	a834      	add	r0, sp, #208	; 0xd0
     87c:	f002 ffd6 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     880:	4620      	mov	r0, r4
     882:	f002 ff37 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     886:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     888:	2b07      	cmp	r3, #7
     88a:	d9ed      	bls.n	868 <PrintOutput()+0x254>
    return str;
     88c:	a934      	add	r1, sp, #208	; 0xd0
     88e:	a824      	add	r0, sp, #144	; 0x90
     890:	f002 ff1a 	bl	36c8 <String::String(String&&)>
     894:	a834      	add	r0, sp, #208	; 0xd0
     896:	f002 ff2d 	bl	36f4 <String::~String()>
    String powerStr = PadString(String(ina260.readPower()));
     89a:	4821      	ldr	r0, [pc, #132]	; (920 <PrintOutput()+0x30c>)
     89c:	f001 faae 	bl	1dfc <Adafruit_INA260::readPower()>
     8a0:	2102      	movs	r1, #2
     8a2:	a834      	add	r0, sp, #208	; 0xd0
     8a4:	f002 ffa6 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     8a8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     8aa:	2b07      	cmp	r3, #7
     8ac:	d812      	bhi.n	8d4 <PrintOutput()+0x2c0>
	StringSumHelper(const char *p) : String(p) {}
     8ae:	4d17      	ldr	r5, [pc, #92]	; (90c <PrintOutput()+0x2f8>)
     8b0:	4629      	mov	r1, r5
     8b2:	4620      	mov	r0, r4
     8b4:	f002 ff5a 	bl	376c <String::String(char const*)>
        str = " " + str;
     8b8:	a934      	add	r1, sp, #208	; 0xd0
     8ba:	4620      	mov	r0, r4
     8bc:	f003 f848 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     8c0:	4601      	mov	r1, r0
     8c2:	a834      	add	r0, sp, #208	; 0xd0
     8c4:	f002 ffb2 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     8c8:	4620      	mov	r0, r4
     8ca:	f002 ff13 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     8ce:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     8d0:	2b07      	cmp	r3, #7
     8d2:	d9ed      	bls.n	8b0 <PrintOutput()+0x29c>
    return str;
     8d4:	a934      	add	r1, sp, #208	; 0xd0
     8d6:	a828      	add	r0, sp, #160	; 0xa0
     8d8:	f002 fef6 	bl	36c8 <String::String(String&&)>
     8dc:	a834      	add	r0, sp, #208	; 0xd0
     8de:	f002 ff09 	bl	36f4 <String::~String()>
    String rpmStr = PadString(String(GetRpmBuffered(rpm_filter)));
     8e2:	4b10      	ldr	r3, [pc, #64]	; (924 <PrintOutput()+0x310>)
     8e4:	6818      	ldr	r0, [r3, #0]
     8e6:	f7ff fd2f 	bl	348 <GetRpmBuffered(Filter*)>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     8ea:	2102      	movs	r1, #2
     8ec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     8f0:	a834      	add	r0, sp, #208	; 0xd0
     8f2:	f002 ff7f 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     8f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     8f8:	e016      	b.n	928 <PrintOutput()+0x314>
     8fa:	bf00      	nop
     8fc:	200003b4 	.word	0x200003b4
     900:	200003ac 	.word	0x200003ac
     904:	200003b8 	.word	0x200003b8
     908:	200003bc 	.word	0x200003bc
     90c:	200003e8 	.word	0x200003e8
     910:	200003c0 	.word	0x200003c0
     914:	200003c8 	.word	0x200003c8
     918:	20003308 	.word	0x20003308
     91c:	20001de2 	.word	0x20001de2
     920:	200032f8 	.word	0x200032f8
     924:	20003d78 	.word	0x20003d78
     928:	2b07      	cmp	r3, #7
     92a:	d812      	bhi.n	952 <PrintOutput()+0x33e>
	StringSumHelper(const char *p) : String(p) {}
     92c:	4dbb      	ldr	r5, [pc, #748]	; (c1c <PrintOutput()+0x608>)
     92e:	4629      	mov	r1, r5
     930:	4620      	mov	r0, r4
     932:	f002 ff1b 	bl	376c <String::String(char const*)>
        str = " " + str;
     936:	a934      	add	r1, sp, #208	; 0xd0
     938:	4620      	mov	r0, r4
     93a:	f003 f809 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     93e:	4601      	mov	r1, r0
     940:	a834      	add	r0, sp, #208	; 0xd0
     942:	f002 ff73 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     946:	4620      	mov	r0, r4
     948:	f002 fed4 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     94c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
     94e:	2b07      	cmp	r3, #7
     950:	d9ed      	bls.n	92e <PrintOutput()+0x31a>
    return str;
     952:	a934      	add	r1, sp, #208	; 0xd0
     954:	a82c      	add	r0, sp, #176	; 0xb0
     956:	f002 feb7 	bl	36c8 <String::String(String&&)>
     95a:	a834      	add	r0, sp, #208	; 0xd0
     95c:	f002 feca 	bl	36f4 <String::~String()>
     960:	2103      	movs	r1, #3
     962:	48af      	ldr	r0, [pc, #700]	; (c20 <PrintOutput()+0x60c>)
     964:	f004 ffd8 	bl	5918 <usb_serial_write>
	StringSumHelper(const char *p) : String(p) {}
     968:	49ae      	ldr	r1, [pc, #696]	; (c24 <PrintOutput()+0x610>)
     96a:	a834      	add	r0, sp, #208	; 0xd0
     96c:	f002 fefe 	bl	376c <String::String(char const*)>
     970:	4bad      	ldr	r3, [pc, #692]	; (c28 <PrintOutput()+0x614>)
    Serial.println("Time:                " + PadString(String(millis())));
     972:	220a      	movs	r2, #10
     974:	a830      	add	r0, sp, #192	; 0xc0
     976:	6819      	ldr	r1, [r3, #0]
     978:	f002 ff24 	bl	37c4 <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     97c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
     97e:	2b07      	cmp	r3, #7
     980:	d812      	bhi.n	9a8 <PrintOutput()+0x394>
     982:	4da6      	ldr	r5, [pc, #664]	; (c1c <PrintOutput()+0x608>)
     984:	4629      	mov	r1, r5
     986:	4620      	mov	r0, r4
     988:	f002 fef0 	bl	376c <String::String(char const*)>
        str = " " + str;
     98c:	a930      	add	r1, sp, #192	; 0xc0
     98e:	4620      	mov	r0, r4
     990:	f002 ffde 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     994:	4601      	mov	r1, r0
     996:	a830      	add	r0, sp, #192	; 0xc0
     998:	f002 ff48 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     99c:	4620      	mov	r0, r4
     99e:	f002 fea9 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     9a2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
     9a4:	2b07      	cmp	r3, #7
     9a6:	d9ed      	bls.n	984 <PrintOutput()+0x370>
    return str;
     9a8:	a930      	add	r1, sp, #192	; 0xc0
     9aa:	4620      	mov	r0, r4
     9ac:	f002 fe8c 	bl	36c8 <String::String(String&&)>
    Serial.println("Time:                " + PadString(String(millis())));
     9b0:	4621      	mov	r1, r4
     9b2:	a834      	add	r0, sp, #208	; 0xd0
     9b4:	f002 ffcc 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     9b8:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     9ba:	489c      	ldr	r0, [pc, #624]	; (c2c <PrintOutput()+0x618>)
     9bc:	f002 fde6 	bl	358c <Print::print(String const&)>
     9c0:	489a      	ldr	r0, [pc, #616]	; (c2c <PrintOutput()+0x618>)
     9c2:	f002 fe09 	bl	35d8 <Print::println()>
     9c6:	4620      	mov	r0, r4
     9c8:	f002 fe94 	bl	36f4 <String::~String()>
     9cc:	a830      	add	r0, sp, #192	; 0xc0
     9ce:	f002 fe91 	bl	36f4 <String::~String()>
     9d2:	a834      	add	r0, sp, #208	; 0xd0
     9d4:	f002 fe8e 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     9d8:	4995      	ldr	r1, [pc, #596]	; (c30 <PrintOutput()+0x61c>)
     9da:	4620      	mov	r0, r4
     9dc:	f002 fec6 	bl	376c <String::String(char const*)>
    Serial.println("\tRelay State: " + relayStateStr);
     9e0:	a908      	add	r1, sp, #32
     9e2:	4620      	mov	r0, r4
     9e4:	f002 ffb4 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     9e8:	4601      	mov	r1, r0
     9ea:	4890      	ldr	r0, [pc, #576]	; (c2c <PrintOutput()+0x618>)
     9ec:	f002 fdce 	bl	358c <Print::print(String const&)>
     9f0:	488e      	ldr	r0, [pc, #568]	; (c2c <PrintOutput()+0x618>)
     9f2:	f002 fdf1 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     9f6:	4620      	mov	r0, r4
     9f8:	f002 fe7c 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     9fc:	498d      	ldr	r1, [pc, #564]	; (c34 <PrintOutput()+0x620>)
     9fe:	4620      	mov	r0, r4
     a00:	f002 feb4 	bl	376c <String::String(char const*)>
    Serial.println("\tSafety:      " + safetySwitchStr);
     a04:	a90c      	add	r1, sp, #48	; 0x30
     a06:	4620      	mov	r0, r4
     a08:	f002 ffa2 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     a0c:	4601      	mov	r1, r0
     a0e:	4887      	ldr	r0, [pc, #540]	; (c2c <PrintOutput()+0x618>)
     a10:	f002 fdbc 	bl	358c <Print::print(String const&)>
     a14:	4885      	ldr	r0, [pc, #532]	; (c2c <PrintOutput()+0x618>)
     a16:	f002 fddf 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     a1a:	4620      	mov	r0, r4
     a1c:	f002 fe6a 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     a20:	4985      	ldr	r1, [pc, #532]	; (c38 <PrintOutput()+0x624>)
     a22:	4620      	mov	r0, r4
     a24:	f002 fea2 	bl	376c <String::String(char const*)>
    Serial.println("\tT-Status:    " + turbineVoltageStr);
     a28:	a910      	add	r1, sp, #64	; 0x40
     a2a:	4620      	mov	r0, r4
     a2c:	f002 ff90 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     a30:	4601      	mov	r1, r0
     a32:	487e      	ldr	r0, [pc, #504]	; (c2c <PrintOutput()+0x618>)
     a34:	f002 fdaa 	bl	358c <Print::print(String const&)>
     a38:	487c      	ldr	r0, [pc, #496]	; (c2c <PrintOutput()+0x618>)
     a3a:	f002 fdcd 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     a3e:	4620      	mov	r0, r4
     a40:	f002 fe58 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     a44:	497d      	ldr	r1, [pc, #500]	; (c3c <PrintOutput()+0x628>)
     a46:	4620      	mov	r0, r4
     a48:	f002 fe90 	bl	376c <String::String(char const*)>
    Serial.println("\tLA Position: " + laPosStr);
     a4c:	a914      	add	r1, sp, #80	; 0x50
     a4e:	4620      	mov	r0, r4
     a50:	f002 ff7e 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     a54:	4601      	mov	r1, r0
     a56:	4875      	ldr	r0, [pc, #468]	; (c2c <PrintOutput()+0x618>)
     a58:	f002 fd98 	bl	358c <Print::print(String const&)>
     a5c:	4873      	ldr	r0, [pc, #460]	; (c2c <PrintOutput()+0x618>)
     a5e:	f002 fdbb 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     a62:	4620      	mov	r0, r4
     a64:	f002 fe46 	bl	36f4 <String::~String()>
    if (trackResistance) {
     a68:	4b75      	ldr	r3, [pc, #468]	; (c40 <PrintOutput()+0x62c>)
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	2b00      	cmp	r3, #0
     a6e:	f000 80cd 	beq.w	c0c <PrintOutput()+0x5f8>
	StringSumHelper(const char *p) : String(p) {}
     a72:	4974      	ldr	r1, [pc, #464]	; (c44 <PrintOutput()+0x630>)
     a74:	a834      	add	r0, sp, #208	; 0xd0
     a76:	f002 fe79 	bl	376c <String::String(char const*)>
        Serial.println("\tTarget Res:  " + PadString(String(targetResistance)));
     a7a:	4b73      	ldr	r3, [pc, #460]	; (c48 <PrintOutput()+0x634>)
     a7c:	2102      	movs	r1, #2
     a7e:	a830      	add	r0, sp, #192	; 0xc0
     a80:	ed93 0a00 	vldr	s0, [r3]
     a84:	f002 feb6 	bl	37f4 <String::String(float, unsigned char)>
    while (str.length() < 8) {
     a88:	9b32      	ldr	r3, [sp, #200]	; 0xc8
     a8a:	2b07      	cmp	r3, #7
     a8c:	d812      	bhi.n	ab4 <PrintOutput()+0x4a0>
     a8e:	4d63      	ldr	r5, [pc, #396]	; (c1c <PrintOutput()+0x608>)
     a90:	4629      	mov	r1, r5
     a92:	4620      	mov	r0, r4
     a94:	f002 fe6a 	bl	376c <String::String(char const*)>
        str = " " + str;
     a98:	a930      	add	r1, sp, #192	; 0xc0
     a9a:	4620      	mov	r0, r4
     a9c:	f002 ff58 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     aa0:	4601      	mov	r1, r0
     aa2:	a830      	add	r0, sp, #192	; 0xc0
     aa4:	f002 fec2 	bl	382c <String::operator=(String const&)>
class StringSumHelper : public String
     aa8:	4620      	mov	r0, r4
     aaa:	f002 fe23 	bl	36f4 <String::~String()>
    while (str.length() < 8) {
     aae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
     ab0:	2b07      	cmp	r3, #7
     ab2:	d9ed      	bls.n	a90 <PrintOutput()+0x47c>
    return str;
     ab4:	a930      	add	r1, sp, #192	; 0xc0
     ab6:	4620      	mov	r0, r4
     ab8:	f002 fe06 	bl	36c8 <String::String(String&&)>
        Serial.println("\tTarget Res:  " + PadString(String(targetResistance)));
     abc:	4621      	mov	r1, r4
     abe:	a834      	add	r0, sp, #208	; 0xd0
     ac0:	f002 ff46 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     ac4:	4601      	mov	r1, r0
     ac6:	4859      	ldr	r0, [pc, #356]	; (c2c <PrintOutput()+0x618>)
     ac8:	f002 fd60 	bl	358c <Print::print(String const&)>
     acc:	4857      	ldr	r0, [pc, #348]	; (c2c <PrintOutput()+0x618>)
     ace:	f002 fd83 	bl	35d8 <Print::println()>
     ad2:	4620      	mov	r0, r4
     ad4:	f002 fe0e 	bl	36f4 <String::~String()>
     ad8:	a830      	add	r0, sp, #192	; 0xc0
     ada:	f002 fe0b 	bl	36f4 <String::~String()>
     ade:	a834      	add	r0, sp, #208	; 0xd0
     ae0:	f002 fe08 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     ae4:	4959      	ldr	r1, [pc, #356]	; (c4c <PrintOutput()+0x638>)
     ae6:	4620      	mov	r0, r4
     ae8:	f002 fe40 	bl	376c <String::String(char const*)>
    Serial.println("\tDac:         " + dacValStr);
     aec:	a918      	add	r1, sp, #96	; 0x60
     aee:	4620      	mov	r0, r4
     af0:	f002 ff2e 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     af4:	4601      	mov	r1, r0
     af6:	484d      	ldr	r0, [pc, #308]	; (c2c <PrintOutput()+0x618>)
     af8:	f002 fd48 	bl	358c <Print::print(String const&)>
     afc:	484b      	ldr	r0, [pc, #300]	; (c2c <PrintOutput()+0x618>)
     afe:	f002 fd6b 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     b02:	4620      	mov	r0, r4
     b04:	f002 fdf6 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     b08:	4951      	ldr	r1, [pc, #324]	; (c50 <PrintOutput()+0x63c>)
     b0a:	4620      	mov	r0, r4
     b0c:	f002 fe2e 	bl	376c <String::String(char const*)>
    Serial.println("\tResistance:  " + resistanceStr);
     b10:	a91c      	add	r1, sp, #112	; 0x70
     b12:	4620      	mov	r0, r4
     b14:	f002 ff1c 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     b18:	4601      	mov	r1, r0
     b1a:	4844      	ldr	r0, [pc, #272]	; (c2c <PrintOutput()+0x618>)
     b1c:	f002 fd36 	bl	358c <Print::print(String const&)>
     b20:	4842      	ldr	r0, [pc, #264]	; (c2c <PrintOutput()+0x618>)
     b22:	f002 fd59 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     b26:	4620      	mov	r0, r4
     b28:	f002 fde4 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     b2c:	4949      	ldr	r1, [pc, #292]	; (c54 <PrintOutput()+0x640>)
     b2e:	4620      	mov	r0, r4
     b30:	f002 fe1c 	bl	376c <String::String(char const*)>
    Serial.println("\tCurrent:     " + currentStr);
     b34:	a920      	add	r1, sp, #128	; 0x80
     b36:	4620      	mov	r0, r4
     b38:	f002 ff0a 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     b3c:	4601      	mov	r1, r0
     b3e:	483b      	ldr	r0, [pc, #236]	; (c2c <PrintOutput()+0x618>)
     b40:	f002 fd24 	bl	358c <Print::print(String const&)>
     b44:	4839      	ldr	r0, [pc, #228]	; (c2c <PrintOutput()+0x618>)
     b46:	f002 fd47 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     b4a:	4620      	mov	r0, r4
     b4c:	f002 fdd2 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     b50:	4941      	ldr	r1, [pc, #260]	; (c58 <PrintOutput()+0x644>)
     b52:	4620      	mov	r0, r4
     b54:	f002 fe0a 	bl	376c <String::String(char const*)>
    Serial.println("\tVoltage:     " + voltStr);
     b58:	a924      	add	r1, sp, #144	; 0x90
     b5a:	4620      	mov	r0, r4
     b5c:	f002 fef8 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     b60:	4601      	mov	r1, r0
     b62:	4832      	ldr	r0, [pc, #200]	; (c2c <PrintOutput()+0x618>)
     b64:	f002 fd12 	bl	358c <Print::print(String const&)>
     b68:	4830      	ldr	r0, [pc, #192]	; (c2c <PrintOutput()+0x618>)
     b6a:	f002 fd35 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     b6e:	4620      	mov	r0, r4
     b70:	f002 fdc0 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     b74:	4939      	ldr	r1, [pc, #228]	; (c5c <PrintOutput()+0x648>)
     b76:	4620      	mov	r0, r4
     b78:	f002 fdf8 	bl	376c <String::String(char const*)>
    Serial.println("\tPower:       " + powerStr);
     b7c:	a928      	add	r1, sp, #160	; 0xa0
     b7e:	4620      	mov	r0, r4
     b80:	f002 fee6 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     b84:	4601      	mov	r1, r0
     b86:	4829      	ldr	r0, [pc, #164]	; (c2c <PrintOutput()+0x618>)
     b88:	f002 fd00 	bl	358c <Print::print(String const&)>
     b8c:	4827      	ldr	r0, [pc, #156]	; (c2c <PrintOutput()+0x618>)
     b8e:	f002 fd23 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     b92:	4620      	mov	r0, r4
     b94:	f002 fdae 	bl	36f4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     b98:	4931      	ldr	r1, [pc, #196]	; (c60 <PrintOutput()+0x64c>)
     b9a:	4620      	mov	r0, r4
     b9c:	f002 fde6 	bl	376c <String::String(char const*)>
    Serial.println("\tRPM:         " + rpmStr);
     ba0:	a92c      	add	r1, sp, #176	; 0xb0
     ba2:	4620      	mov	r0, r4
     ba4:	f002 fed4 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     ba8:	4601      	mov	r1, r0
     baa:	4820      	ldr	r0, [pc, #128]	; (c2c <PrintOutput()+0x618>)
     bac:	f002 fcee 	bl	358c <Print::print(String const&)>
     bb0:	481e      	ldr	r0, [pc, #120]	; (c2c <PrintOutput()+0x618>)
     bb2:	f002 fd11 	bl	35d8 <Print::println()>
class StringSumHelper : public String
     bb6:	4620      	mov	r0, r4
     bb8:	f002 fd9c 	bl	36f4 <String::~String()>
}
     bbc:	a82c      	add	r0, sp, #176	; 0xb0
     bbe:	f002 fd99 	bl	36f4 <String::~String()>
     bc2:	a828      	add	r0, sp, #160	; 0xa0
     bc4:	f002 fd96 	bl	36f4 <String::~String()>
     bc8:	a824      	add	r0, sp, #144	; 0x90
     bca:	f002 fd93 	bl	36f4 <String::~String()>
     bce:	a820      	add	r0, sp, #128	; 0x80
     bd0:	f002 fd90 	bl	36f4 <String::~String()>
     bd4:	a81c      	add	r0, sp, #112	; 0x70
     bd6:	f002 fd8d 	bl	36f4 <String::~String()>
     bda:	a818      	add	r0, sp, #96	; 0x60
     bdc:	f002 fd8a 	bl	36f4 <String::~String()>
     be0:	a814      	add	r0, sp, #80	; 0x50
     be2:	f002 fd87 	bl	36f4 <String::~String()>
     be6:	a810      	add	r0, sp, #64	; 0x40
     be8:	f002 fd84 	bl	36f4 <String::~String()>
     bec:	a80c      	add	r0, sp, #48	; 0x30
     bee:	f002 fd81 	bl	36f4 <String::~String()>
     bf2:	a808      	add	r0, sp, #32
     bf4:	f002 fd7e 	bl	36f4 <String::~String()>
     bf8:	a804      	add	r0, sp, #16
     bfa:	f002 fd7b 	bl	36f4 <String::~String()>
     bfe:	4668      	mov	r0, sp
     c00:	f002 fd78 	bl	36f4 <String::~String()>
     c04:	b03d      	add	sp, #244	; 0xf4
     c06:	ecbd 8b02 	vpop	{d8}
     c0a:	bd30      	pop	{r4, r5, pc}
     c0c:	2116      	movs	r1, #22
     c0e:	4815      	ldr	r0, [pc, #84]	; (c64 <PrintOutput()+0x650>)
     c10:	f004 fe82 	bl	5918 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     c14:	4805      	ldr	r0, [pc, #20]	; (c2c <PrintOutput()+0x618>)
     c16:	f002 fcdf 	bl	35d8 <Print::println()>
     c1a:	e763      	b.n	ae4 <PrintOutput()+0x4d0>
     c1c:	200003e8 	.word	0x200003e8
     c20:	200003d0 	.word	0x200003d0
     c24:	200003d4 	.word	0x200003d4
     c28:	20003dc4 	.word	0x20003dc4
     c2c:	20001308 	.word	0x20001308
     c30:	200003ec 	.word	0x200003ec
     c34:	200003fc 	.word	0x200003fc
     c38:	2000040c 	.word	0x2000040c
     c3c:	2000041c 	.word	0x2000041c
     c40:	20003dee 	.word	0x20003dee
     c44:	2000042c 	.word	0x2000042c
     c48:	20001dc8 	.word	0x20001dc8
     c4c:	20000454 	.word	0x20000454
     c50:	20000464 	.word	0x20000464
     c54:	20000474 	.word	0x20000474
     c58:	20000484 	.word	0x20000484
     c5c:	20000494 	.word	0x20000494
     c60:	200004a4 	.word	0x200004a4
     c64:	2000043c 	.word	0x2000043c

00000c68 <Set(String&)>:
void Set(String &command) {
     c68:	b530      	push	{r4, r5, lr}
     c6a:	4604      	mov	r4, r0
     c6c:	b08d      	sub	sp, #52	; 0x34
    String arg = NextArg(command).toLowerCase();
     c6e:	4621      	mov	r1, r4
     c70:	a808      	add	r0, sp, #32
     c72:	f7ff fa57 	bl	124 <NextArg(String&)>
     c76:	a808      	add	r0, sp, #32
     c78:	f002 ff0e 	bl	3a98 <String::toLowerCase()>
     c7c:	4601      	mov	r1, r0
     c7e:	4668      	mov	r0, sp
     c80:	f002 fd04 	bl	368c <String::String(String const&)>
     c84:	a808      	add	r0, sp, #32
     c86:	f002 fd35 	bl	36f4 <String::~String()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     c8a:	493f      	ldr	r1, [pc, #252]	; (d88 <Set(String&)+0x120>)
     c8c:	4668      	mov	r0, sp
     c8e:	f002 fe67 	bl	3960 <String::equals(char const*) const>
    if (arg == "dac") {
     c92:	2800      	cmp	r0, #0
     c94:	d030      	beq.n	cf8 <Set(String&)+0x90>
        dacValue = NextArg(command).toInt();
     c96:	4621      	mov	r1, r4
     c98:	a808      	add	r0, sp, #32
     c9a:	f7ff fa43 	bl	124 <NextArg(String&)>
     c9e:	a808      	add	r0, sp, #32
     ca0:	f002 ff0a 	bl	3ab8 <String::toInt() const>
     ca4:	4c39      	ldr	r4, [pc, #228]	; (d8c <Set(String&)+0x124>)
     ca6:	4603      	mov	r3, r0
     ca8:	a808      	add	r0, sp, #32
     caa:	8023      	strh	r3, [r4, #0]
     cac:	f002 fd22 	bl	36f4 <String::~String()>
        dac.setVoltage(dacValue, false);
     cb0:	2200      	movs	r2, #0
     cb2:	8821      	ldrh	r1, [r4, #0]
     cb4:	4836      	ldr	r0, [pc, #216]	; (d90 <Set(String&)+0x128>)
     cb6:	f001 fe5f 	bl	2978 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	StringSumHelper(const char *p) : String(p) {}
     cba:	4936      	ldr	r1, [pc, #216]	; (d94 <Set(String&)+0x12c>)
     cbc:	a808      	add	r0, sp, #32
     cbe:	f002 fd55 	bl	376c <String::String(char const*)>
        Serial.println("DAC set to " + String(dacValue));
     cc2:	220a      	movs	r2, #10
     cc4:	8821      	ldrh	r1, [r4, #0]
        Serial.println("Linear Actuator set to " + String(pos));
     cc6:	a804      	add	r0, sp, #16
     cc8:	f002 fd64 	bl	3794 <String::String(int, unsigned char)>
     ccc:	a904      	add	r1, sp, #16
     cce:	a808      	add	r0, sp, #32
     cd0:	f002 fe3e 	bl	3950 <operator+(StringSumHelper const&, String const&)>
     cd4:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     cd6:	4830      	ldr	r0, [pc, #192]	; (d98 <Set(String&)+0x130>)
     cd8:	f002 fc58 	bl	358c <Print::print(String const&)>
     cdc:	482e      	ldr	r0, [pc, #184]	; (d98 <Set(String&)+0x130>)
     cde:	f002 fc7b 	bl	35d8 <Print::println()>
     ce2:	a804      	add	r0, sp, #16
     ce4:	f002 fd06 	bl	36f4 <String::~String()>
class StringSumHelper : public String
     ce8:	a808      	add	r0, sp, #32
     cea:	f002 fd03 	bl	36f4 <String::~String()>
}
     cee:	4668      	mov	r0, sp
     cf0:	f002 fd00 	bl	36f4 <String::~String()>
     cf4:	b00d      	add	sp, #52	; 0x34
     cf6:	bd30      	pop	{r4, r5, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     cf8:	4605      	mov	r5, r0
     cfa:	4928      	ldr	r1, [pc, #160]	; (d9c <Set(String&)+0x134>)
     cfc:	4668      	mov	r0, sp
     cfe:	f002 fe2f 	bl	3960 <String::equals(char const*) const>
    } else if (arg == "la") {
     d02:	b1b0      	cbz	r0, d32 <Set(String&)+0xca>
        int pos = NextArg(command).toInt();
     d04:	4621      	mov	r1, r4
     d06:	a808      	add	r0, sp, #32
     d08:	f7ff fa0c 	bl	124 <NextArg(String&)>
     d0c:	a808      	add	r0, sp, #32
     d0e:	f002 fed3 	bl	3ab8 <String::toInt() const>
     d12:	4604      	mov	r4, r0
     d14:	a808      	add	r0, sp, #32
     d16:	f002 fced 	bl	36f4 <String::~String()>
        myServo.goalPosition(LA_ID_NUM, pos);
     d1a:	4622      	mov	r2, r4
     d1c:	4629      	mov	r1, r5
     d1e:	4820      	ldr	r0, [pc, #128]	; (da0 <Set(String&)+0x138>)
     d20:	f000 ff14 	bl	1b4c <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     d24:	491f      	ldr	r1, [pc, #124]	; (da4 <Set(String&)+0x13c>)
     d26:	a808      	add	r0, sp, #32
     d28:	f002 fd20 	bl	376c <String::String(char const*)>
        Serial.println("Linear Actuator set to " + String(pos));
     d2c:	220a      	movs	r2, #10
     d2e:	4621      	mov	r1, r4
     d30:	e7c9      	b.n	cc6 <Set(String&)+0x5e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     d32:	491d      	ldr	r1, [pc, #116]	; (da8 <Set(String&)+0x140>)
     d34:	4668      	mov	r0, sp
     d36:	f002 fe13 	bl	3960 <String::equals(char const*) const>
    } else if (arg == "res") {
     d3a:	b188      	cbz	r0, d60 <Set(String&)+0xf8>
        targetResistance = NextArg(command).toFloat();
     d3c:	4621      	mov	r1, r4
     d3e:	a808      	add	r0, sp, #32
     d40:	f7ff f9f0 	bl	124 <NextArg(String&)>
     d44:	a808      	add	r0, sp, #32
     d46:	f002 febd 	bl	3ac4 <String::toFloat() const>
     d4a:	4b18      	ldr	r3, [pc, #96]	; (dac <Set(String&)+0x144>)
     d4c:	a808      	add	r0, sp, #32
     d4e:	ed83 0a00 	vstr	s0, [r3]
     d52:	f002 fccf 	bl	36f4 <String::~String()>
}
     d56:	4668      	mov	r0, sp
     d58:	f002 fccc 	bl	36f4 <String::~String()>
     d5c:	b00d      	add	sp, #52	; 0x34
     d5e:	bd30      	pop	{r4, r5, pc}
     d60:	211a      	movs	r1, #26
     d62:	4813      	ldr	r0, [pc, #76]	; (db0 <Set(String&)+0x148>)
     d64:	f004 fdd8 	bl	5918 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     d68:	480b      	ldr	r0, [pc, #44]	; (d98 <Set(String&)+0x130>)
     d6a:	f002 fc35 	bl	35d8 <Print::println()>
     d6e:	210a      	movs	r1, #10
     d70:	4810      	ldr	r0, [pc, #64]	; (db4 <Set(String&)+0x14c>)
     d72:	f004 fdd1 	bl	5918 <usb_serial_write>
     d76:	4808      	ldr	r0, [pc, #32]	; (d98 <Set(String&)+0x130>)
     d78:	f002 fc2e 	bl	35d8 <Print::println()>
     d7c:	4668      	mov	r0, sp
     d7e:	f002 fcb9 	bl	36f4 <String::~String()>
     d82:	b00d      	add	sp, #52	; 0x34
     d84:	bd30      	pop	{r4, r5, pc}
     d86:	bf00      	nop
     d88:	200004fc 	.word	0x200004fc
     d8c:	20001de2 	.word	0x20001de2
     d90:	200032d0 	.word	0x200032d0
     d94:	20000500 	.word	0x20000500
     d98:	20001308 	.word	0x20001308
     d9c:	2000050c 	.word	0x2000050c
     da0:	20003308 	.word	0x20003308
     da4:	20000510 	.word	0x20000510
     da8:	20000528 	.word	0x20000528
     dac:	20001dc8 	.word	0x20001dc8
     db0:	2000052c 	.word	0x2000052c
     db4:	20000548 	.word	0x20000548

00000db8 <Toggle(String&)>:
void Toggle(String &command) {
     db8:	b500      	push	{lr}
     dba:	b089      	sub	sp, #36	; 0x24
     dbc:	4601      	mov	r1, r0
    String arg = NextArg(command).toLowerCase();
     dbe:	a804      	add	r0, sp, #16
     dc0:	f7ff f9b0 	bl	124 <NextArg(String&)>
     dc4:	a804      	add	r0, sp, #16
     dc6:	f002 fe67 	bl	3a98 <String::toLowerCase()>
     dca:	4601      	mov	r1, r0
     dcc:	4668      	mov	r0, sp
     dce:	f002 fc5d 	bl	368c <String::String(String const&)>
     dd2:	a804      	add	r0, sp, #16
     dd4:	f002 fc8e 	bl	36f4 <String::~String()>
     dd8:	4923      	ldr	r1, [pc, #140]	; (e68 <Toggle(String&)+0xb0>)
     dda:	4668      	mov	r0, sp
     ddc:	f002 fdc0 	bl	3960 <String::equals(char const*) const>
    if (arg == "pcc") {
     de0:	b1b0      	cbz	r0, e10 <Toggle(String&)+0x58>
        digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     de2:	2021      	movs	r0, #33	; 0x21
     de4:	f003 f898 	bl	3f18 <digitalRead>
     de8:	4601      	mov	r1, r0
     dea:	2021      	movs	r0, #33	; 0x21
     dec:	fab1 f181 	clz	r1, r1
     df0:	0949      	lsrs	r1, r1, #5
     df2:	f003 f867 	bl	3ec4 <digitalWrite>
     df6:	2104      	movs	r1, #4
     df8:	481c      	ldr	r0, [pc, #112]	; (e6c <Toggle(String&)+0xb4>)
     dfa:	f004 fd8d 	bl	5918 <usb_serial_write>
     dfe:	481c      	ldr	r0, [pc, #112]	; (e70 <Toggle(String&)+0xb8>)
     e00:	f002 fbea 	bl	35d8 <Print::println()>
}
     e04:	4668      	mov	r0, sp
     e06:	f002 fc75 	bl	36f4 <String::~String()>
     e0a:	b009      	add	sp, #36	; 0x24
     e0c:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if (arg = "res") {
     e10:	4918      	ldr	r1, [pc, #96]	; (e74 <Toggle(String&)+0xbc>)
     e12:	4668      	mov	r0, sp
     e14:	f002 fd28 	bl	3868 <String::operator=(char const*)>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
     e18:	6803      	ldr	r3, [r0, #0]
     e1a:	b153      	cbz	r3, e32 <Toggle(String&)+0x7a>
        trackResistance = !trackResistance;
     e1c:	4a16      	ldr	r2, [pc, #88]	; (e78 <Toggle(String&)+0xc0>)
}
     e1e:	4668      	mov	r0, sp
        trackResistance = !trackResistance;
     e20:	7813      	ldrb	r3, [r2, #0]
     e22:	f083 0301 	eor.w	r3, r3, #1
     e26:	7013      	strb	r3, [r2, #0]
}
     e28:	f002 fc64 	bl	36f4 <String::~String()>
     e2c:	b009      	add	sp, #36	; 0x24
     e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if (arg = "print") {
     e32:	4912      	ldr	r1, [pc, #72]	; (e7c <Toggle(String&)+0xc4>)
     e34:	4668      	mov	r0, sp
     e36:	f002 fd17 	bl	3868 <String::operator=(char const*)>
     e3a:	6803      	ldr	r3, [r0, #0]
     e3c:	b12b      	cbz	r3, e4a <Toggle(String&)+0x92>
        printOutput = !printOutput;
     e3e:	4a10      	ldr	r2, [pc, #64]	; (e80 <Toggle(String&)+0xc8>)
     e40:	7813      	ldrb	r3, [r2, #0]
     e42:	f083 0301 	eor.w	r3, r3, #1
     e46:	7013      	strb	r3, [r2, #0]
     e48:	e7dc      	b.n	e04 <Toggle(String&)+0x4c>
     e4a:	211d      	movs	r1, #29
     e4c:	480d      	ldr	r0, [pc, #52]	; (e84 <Toggle(String&)+0xcc>)
     e4e:	f004 fd63 	bl	5918 <usb_serial_write>
     e52:	4807      	ldr	r0, [pc, #28]	; (e70 <Toggle(String&)+0xb8>)
     e54:	f002 fbc0 	bl	35d8 <Print::println()>
     e58:	210a      	movs	r1, #10
     e5a:	480b      	ldr	r0, [pc, #44]	; (e88 <Toggle(String&)+0xd0>)
     e5c:	f004 fd5c 	bl	5918 <usb_serial_write>
     e60:	4803      	ldr	r0, [pc, #12]	; (e70 <Toggle(String&)+0xb8>)
     e62:	f002 fbb9 	bl	35d8 <Print::println()>
     e66:	e7cd      	b.n	e04 <Toggle(String&)+0x4c>
     e68:	2000063c 	.word	0x2000063c
     e6c:	200003ac 	.word	0x200003ac
     e70:	20001308 	.word	0x20001308
     e74:	20000528 	.word	0x20000528
     e78:	20003dee 	.word	0x20003dee
     e7c:	20000660 	.word	0x20000660
     e80:	20001de4 	.word	0x20001de4
     e84:	20000640 	.word	0x20000640
     e88:	20000548 	.word	0x20000548

00000e8c <ProcessCommand(String&)>:
void ProcessCommand (String &serialInput) {
     e8c:	b510      	push	{r4, lr}
     e8e:	b08c      	sub	sp, #48	; 0x30
     e90:	4601      	mov	r1, r0
    String command = serialInput;
     e92:	4668      	mov	r0, sp
     e94:	f002 fbfa 	bl	368c <String::String(String const&)>
    String cmd = NextArg(command);
     e98:	4669      	mov	r1, sp
     e9a:	a804      	add	r0, sp, #16
     e9c:	f7ff f942 	bl	124 <NextArg(String&)>
    switch (MatchCommand(cmd)) {
     ea0:	a904      	add	r1, sp, #16
     ea2:	a808      	add	r0, sp, #32
     ea4:	f002 fbf2 	bl	368c <String::String(String const&)>
     ea8:	a808      	add	r0, sp, #32
     eaa:	f7ff f96d 	bl	188 <MatchCommand(String)>
     eae:	4604      	mov	r4, r0
     eb0:	a808      	add	r0, sp, #32
     eb2:	f002 fc1f 	bl	36f4 <String::~String()>
     eb6:	2c03      	cmp	r4, #3
     eb8:	d828      	bhi.n	f0c <ProcessCommand(String&)+0x80>
     eba:	e8df f004 	tbb	[pc, r4]
     ebe:	111f      	.short	0x111f
     ec0:	020d      	.short	0x020d
            Toggle(command);
     ec2:	4668      	mov	r0, sp
     ec4:	f7ff ff78 	bl	db8 <Toggle(String&)>
}
     ec8:	a804      	add	r0, sp, #16
     eca:	f002 fc13 	bl	36f4 <String::~String()>
     ece:	4668      	mov	r0, sp
     ed0:	f002 fc10 	bl	36f4 <String::~String()>
     ed4:	b00c      	add	sp, #48	; 0x30
     ed6:	bd10      	pop	{r4, pc}
            Set(command);
     ed8:	4668      	mov	r0, sp
     eda:	f7ff fec5 	bl	c68 <Set(String&)>
            break;
     ede:	e7f3      	b.n	ec8 <ProcessCommand(String&)+0x3c>
            Serial.println(Help());
     ee0:	a808      	add	r0, sp, #32
     ee2:	f7ff f973 	bl	1cc <Help()>
	size_t println(const String &s)			{ return print(s) + println(); }
     ee6:	a908      	add	r1, sp, #32
     ee8:	480c      	ldr	r0, [pc, #48]	; (f1c <ProcessCommand(String&)+0x90>)
     eea:	f002 fb4f 	bl	358c <Print::print(String const&)>
     eee:	480b      	ldr	r0, [pc, #44]	; (f1c <ProcessCommand(String&)+0x90>)
     ef0:	f002 fb72 	bl	35d8 <Print::println()>
     ef4:	a808      	add	r0, sp, #32
     ef6:	f002 fbfd 	bl	36f4 <String::~String()>
            break;
     efa:	e7e5      	b.n	ec8 <ProcessCommand(String&)+0x3c>
     efc:	211b      	movs	r1, #27
     efe:	4808      	ldr	r0, [pc, #32]	; (f20 <ProcessCommand(String&)+0x94>)
     f00:	f004 fd0a 	bl	5918 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     f04:	4805      	ldr	r0, [pc, #20]	; (f1c <ProcessCommand(String&)+0x90>)
     f06:	f002 fb67 	bl	35d8 <Print::println()>
     f0a:	e7dd      	b.n	ec8 <ProcessCommand(String&)+0x3c>
     f0c:	2117      	movs	r1, #23
     f0e:	4805      	ldr	r0, [pc, #20]	; (f24 <ProcessCommand(String&)+0x98>)
     f10:	f004 fd02 	bl	5918 <usb_serial_write>
     f14:	4801      	ldr	r0, [pc, #4]	; (f1c <ProcessCommand(String&)+0x90>)
     f16:	f002 fb5f 	bl	35d8 <Print::println()>
     f1a:	e7d5      	b.n	ec8 <ProcessCommand(String&)+0x3c>
     f1c:	20001308 	.word	0x20001308
     f20:	200004c8 	.word	0x200004c8
     f24:	200004e4 	.word	0x200004e4

00000f28 <loop>:
void loop () {
     f28:	b510      	push	{r4, lr}
     f2a:	ed2d 8b02 	vpush	{d8}
     f2e:	b084      	sub	sp, #16
        virtual int available() { return usb_serial_available(); }
     f30:	f004 fc88 	bl	5844 <usb_serial_available>
    if (Serial.available() > 0) {
     f34:	2800      	cmp	r0, #0
     f36:	dd0d      	ble.n	f54 <loop+0x2c>
        String serialInput = Serial.readStringUntil('\n');
     f38:	2300      	movs	r3, #0
     f3a:	220a      	movs	r2, #10
     f3c:	492f      	ldr	r1, [pc, #188]	; (ffc <loop+0xd4>)
     f3e:	4668      	mov	r0, sp
     f40:	f002 fb68 	bl	3614 <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     f44:	4668      	mov	r0, sp
     f46:	f7ff ffa1 	bl	e8c <ProcessCommand(String&)>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     f4a:	f004 fd19 	bl	5980 <usb_serial_flush_output>
    }
     f4e:	4668      	mov	r0, sp
     f50:	f002 fbd0 	bl	36f4 <String::~String()>
     f54:	4c2a      	ldr	r4, [pc, #168]	; (1000 <loop+0xd8>)
    if (printTimer < millis() && printOutput) {
     f56:	4b2b      	ldr	r3, [pc, #172]	; (1004 <loop+0xdc>)
     f58:	6821      	ldr	r1, [r4, #0]
     f5a:	681a      	ldr	r2, [r3, #0]
     f5c:	428a      	cmp	r2, r1
     f5e:	d203      	bcs.n	f68 <loop+0x40>
     f60:	4929      	ldr	r1, [pc, #164]	; (1008 <loop+0xe0>)
     f62:	7809      	ldrb	r1, [r1, #0]
     f64:	2900      	cmp	r1, #0
     f66:	d136      	bne.n	fd6 <loop+0xae>
    if (resistanceTracingTimer < millis() && trackResistance) {
     f68:	4b28      	ldr	r3, [pc, #160]	; (100c <loop+0xe4>)
     f6a:	6821      	ldr	r1, [r4, #0]
     f6c:	681a      	ldr	r2, [r3, #0]
     f6e:	428a      	cmp	r2, r1
     f70:	d202      	bcs.n	f78 <loop+0x50>
     f72:	4927      	ldr	r1, [pc, #156]	; (1010 <loop+0xe8>)
     f74:	7809      	ldrb	r1, [r1, #0]
     f76:	b919      	cbnz	r1, f80 <loop+0x58>
}
     f78:	b004      	add	sp, #16
     f7a:	ecbd 8b02 	vpop	{d8}
     f7e:	bd10      	pop	{r4, pc}
        resistanceTracingTimer += resistanceTrackingInterval;
     f80:	4924      	ldr	r1, [pc, #144]	; (1014 <loop+0xec>)
        float voltage = ina260.readBusVoltage();
     f82:	4825      	ldr	r0, [pc, #148]	; (1018 <loop+0xf0>)
        resistanceTracingTimer += resistanceTrackingInterval;
     f84:	6809      	ldr	r1, [r1, #0]
     f86:	440a      	add	r2, r1
     f88:	601a      	str	r2, [r3, #0]
        float voltage = ina260.readBusVoltage();
     f8a:	f000 ff1d 	bl	1dc8 <Adafruit_INA260::readBusVoltage()>
     f8e:	eeb0 8a40 	vmov.f32	s16, s0
        float current = ina260.readCurrent();
     f92:	4821      	ldr	r0, [pc, #132]	; (1018 <loop+0xf0>)
     f94:	f000 fefc 	bl	1d90 <Adafruit_INA260::readCurrent()>
        float difference = resistance - targetResistance;
     f98:	4b20      	ldr	r3, [pc, #128]	; (101c <loop+0xf4>)
        float resistance = voltage / current;
     f9a:	eec8 7a00 	vdiv.f32	s15, s16, s0
        float difference = resistance - targetResistance;
     f9e:	ed93 7a00 	vldr	s14, [r3]
     fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (difference > 0) {
     fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fae:	dd1e      	ble.n	fee <loop+0xc6>
            dacValue += dacStepSize;
     fb0:	4a1b      	ldr	r2, [pc, #108]	; (1020 <loop+0xf8>)
     fb2:	4b1c      	ldr	r3, [pc, #112]	; (1024 <loop+0xfc>)
     fb4:	6811      	ldr	r1, [r2, #0]
     fb6:	881a      	ldrh	r2, [r3, #0]
     fb8:	4411      	add	r1, r2
     fba:	b289      	uxth	r1, r1
        if (dacValue > 4095) {
     fbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
     fc0:	d210      	bcs.n	fe4 <loop+0xbc>
     fc2:	8019      	strh	r1, [r3, #0]
        dac.setVoltage(dacValue, false);
     fc4:	2200      	movs	r2, #0
     fc6:	4818      	ldr	r0, [pc, #96]	; (1028 <loop+0x100>)
}
     fc8:	b004      	add	sp, #16
     fca:	ecbd 8b02 	vpop	{d8}
     fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dac.setVoltage(dacValue, false);
     fd2:	f001 bcd1 	b.w	2978 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
        printTimer += printTimerInterval;
     fd6:	4915      	ldr	r1, [pc, #84]	; (102c <loop+0x104>)
     fd8:	6809      	ldr	r1, [r1, #0]
     fda:	440a      	add	r2, r1
     fdc:	601a      	str	r2, [r3, #0]
        PrintOutput();
     fde:	f7ff fb19 	bl	614 <PrintOutput()>
     fe2:	e7c1      	b.n	f68 <loop+0x40>
            dacValue = 4095;
     fe4:	f640 72ff 	movw	r2, #4095	; 0xfff
     fe8:	4611      	mov	r1, r2
     fea:	801a      	strh	r2, [r3, #0]
     fec:	e7ea      	b.n	fc4 <loop+0x9c>
            dacValue -= dacStepSize;
     fee:	4b0d      	ldr	r3, [pc, #52]	; (1024 <loop+0xfc>)
     ff0:	4a0b      	ldr	r2, [pc, #44]	; (1020 <loop+0xf8>)
     ff2:	8819      	ldrh	r1, [r3, #0]
     ff4:	6812      	ldr	r2, [r2, #0]
     ff6:	1a89      	subs	r1, r1, r2
     ff8:	b289      	uxth	r1, r1
     ffa:	e7df      	b.n	fbc <loop+0x94>
     ffc:	20001308 	.word	0x20001308
    1000:	20003dc4 	.word	0x20003dc4
    1004:	20003d68 	.word	0x20003d68
    1008:	20001de4 	.word	0x20001de4
    100c:	20003d74 	.word	0x20003d74
    1010:	20003dee 	.word	0x20003dee
    1014:	20001dc4 	.word	0x20001dc4
    1018:	200032f8 	.word	0x200032f8
    101c:	20001dc8 	.word	0x20001dc8
    1020:	20001b6c 	.word	0x20001b6c
    1024:	20001de2 	.word	0x20001de2
    1028:	200032d0 	.word	0x200032d0
    102c:	20001dc0 	.word	0x20001dc0

00001030 <_GLOBAL__sub_I_myServo>:
    1030:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
    1032:	4c0c      	ldr	r4, [pc, #48]	; (1064 <_GLOBAL__sub_I_myServo+0x34>)
    1034:	2301      	movs	r3, #1
    1036:	2210      	movs	r2, #16
    1038:	490b      	ldr	r1, [pc, #44]	; (1068 <_GLOBAL__sub_I_myServo+0x38>)
    103a:	4620      	mov	r0, r4
    103c:	f000 fb0e 	bl	165c <PA12::PA12(HardwareSerial*, int, bool)>
    1040:	4a0a      	ldr	r2, [pc, #40]	; (106c <_GLOBAL__sub_I_myServo+0x3c>)
    1042:	490b      	ldr	r1, [pc, #44]	; (1070 <_GLOBAL__sub_I_myServo+0x40>)
    1044:	4620      	mov	r0, r4
    1046:	f004 fdd9 	bl	5bfc <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
    104a:	480a      	ldr	r0, [pc, #40]	; (1074 <_GLOBAL__sub_I_myServo+0x44>)
    104c:	f000 fe24 	bl	1c98 <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
    1050:	4809      	ldr	r0, [pc, #36]	; (1078 <_GLOBAL__sub_I_myServo+0x48>)
    1052:	f001 fc87 	bl	2964 <Adafruit_MCP4725::Adafruit_MCP4725()>
struct Filter* rpm_filter = CreateFilter(10, 8);
    1056:	2108      	movs	r1, #8
    1058:	200a      	movs	r0, #10
    105a:	f7ff f94d 	bl	2f8 <CreateFilter(unsigned int, int)>
    105e:	4b07      	ldr	r3, [pc, #28]	; (107c <_GLOBAL__sub_I_myServo+0x4c>)
    1060:	6018      	str	r0, [r3, #0]
    1062:	bd10      	pop	{r4, pc}
    1064:	20003308 	.word	0x20003308
    1068:	20002578 	.word	0x20002578
    106c:	200015dc 	.word	0x200015dc
    1070:	00001639 	.word	0x00001639
    1074:	200032f8 	.word	0x200032f8
    1078:	200032d0 	.word	0x200032d0
    107c:	20003d78 	.word	0x20003d78

00001080 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    1080:	2000      	movs	r0, #0
    1082:	4770      	bx	lr

00001084 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    1084:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1088:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    108c:	1a10      	subs	r0, r2, r0
    108e:	4770      	bx	lr

00001090 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1090:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1094:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1098:	429a      	cmp	r2, r3
    109a:	d905      	bls.n	10a8 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    109c:	1c5a      	adds	r2, r3, #1
    109e:	4403      	add	r3, r0
    10a0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    10a4:	7e98      	ldrb	r0, [r3, #26]
    10a6:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    10a8:	f04f 30ff 	mov.w	r0, #4294967295
	}
    10ac:	4770      	bx	lr
    10ae:	bf00      	nop

000010b0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    10b0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    10b4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    10b8:	429a      	cmp	r2, r3
    10ba:	d902      	bls.n	10c2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    10bc:	4418      	add	r0, r3
    10be:	7e80      	ldrb	r0, [r0, #26]
    10c0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    10c2:	f04f 30ff 	mov.w	r0, #4294967295
	}
    10c6:	4770      	bx	lr

000010c8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop

000010cc <TwoWire::write(unsigned char)>:
{
    10cc:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    10ce:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    10d2:	b178      	cbz	r0, 10f4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    10d4:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    10d8:	2a88      	cmp	r2, #136	; 0x88
    10da:	d903      	bls.n	10e4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    10dc:	2201      	movs	r2, #1
			return 0;
    10de:	2000      	movs	r0, #0
    10e0:	605a      	str	r2, [r3, #4]
    10e2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    10e4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    10e8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    10ea:	441a      	add	r2, r3
    10ec:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    10f0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    10f4:	4770      	bx	lr
    10f6:	bf00      	nop

000010f8 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    10f8:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    10fa:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    10fe:	b90c      	cbnz	r4, 1104 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    1100:	4620      	mov	r0, r4
    1102:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    1104:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    1108:	4605      	mov	r5, r0
    110a:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    110e:	42a2      	cmp	r2, r4
    1110:	d80d      	bhi.n	112e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    1112:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    1114:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    1118:	4622      	mov	r2, r4
    111a:	4418      	add	r0, r3
    111c:	f002 ffcc 	bl	40b8 <memcpy>
		txBufferLength += quantity;
    1120:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    1124:	4620      	mov	r0, r4
		txBufferLength += quantity;
    1126:	4423      	add	r3, r4
    1128:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    112c:	bd38      	pop	{r3, r4, r5, pc}
    112e:	2201      	movs	r2, #1
    1130:	6042      	str	r2, [r0, #4]
    1132:	e7ef      	b.n	1114 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00001134 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
    1134:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
    1136:	2500      	movs	r5, #0
    1138:	4613      	mov	r3, r2
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    113a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    113e:	4604      	mov	r4, r0
    1140:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
    1144:	4815      	ldr	r0, [pc, #84]	; (119c <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
    1146:	2288      	movs	r2, #136	; 0x88
    1148:	6121      	str	r1, [r4, #16]
    114a:	4629      	mov	r1, r5
    114c:	6020      	str	r0, [r4, #0]
    114e:	f104 001a 	add.w	r0, r4, #26
    1152:	6163      	str	r3, [r4, #20]
    1154:	7325      	strb	r5, [r4, #12]
    1156:	7625      	strb	r5, [r4, #24]
    1158:	7665      	strb	r5, [r4, #25]
    115a:	f006 fc79 	bl	7a50 <memset>
    115e:	2289      	movs	r2, #137	; 0x89
    1160:	4629      	mov	r1, r5
    1162:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
    1166:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
    116a:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
    116e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
    1172:	f006 fc6d 	bl	7a50 <memset>
	}
    1176:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
    1178:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
    117c:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
    1180:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
    1184:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
    1188:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
    118c:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
    1190:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    1194:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
    1198:	bd38      	pop	{r3, r4, r5, pc}
    119a:	bf00      	nop
    119c:	20000880 	.word	0x20000880

000011a0 <TwoWire::force_clock()>:
{
    11a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11a4:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    11a8:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11aa:	7e01      	ldrb	r1, [r0, #24]
{
    11ac:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    11ae:	7e43      	ldrb	r3, [r0, #25]
{
    11b0:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11b2:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    11b6:	4a38      	ldr	r2, [pc, #224]	; (1298 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    11b8:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    11bc:	4f37      	ldr	r7, [pc, #220]	; (129c <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    11be:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    11c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    11c4:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    11c8:	0109      	lsls	r1, r1, #4
    11ca:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    11cc:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    11d0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    11d4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    11d8:	011b      	lsls	r3, r3, #4
    11da:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    11dc:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    11de:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    11e2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    11e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    11ea:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    11ec:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    11ee:	492c      	ldr	r1, [pc, #176]	; (12a0 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    11f0:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    11f2:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    11f6:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    11f8:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    11fc:	686b      	ldr	r3, [r5, #4]
    11fe:	4333      	orrs	r3, r6
    1200:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1202:	4b28      	ldr	r3, [pc, #160]	; (12a4 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1204:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1206:	683a      	ldr	r2, [r7, #0]
    1208:	fba3 3202 	umull	r3, r2, r3, r2
    120c:	0c92      	lsrs	r2, r2, #18
    120e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1212:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1214:	684b      	ldr	r3, [r1, #4]
    1216:	1b1b      	subs	r3, r3, r4
    1218:	429a      	cmp	r2, r3
    121a:	d8fb      	bhi.n	1214 <TwoWire::force_clock()+0x74>
    121c:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    1220:	4a1f      	ldr	r2, [pc, #124]	; (12a0 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1222:	f8df e080 	ldr.w	lr, [pc, #128]	; 12a4 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    1226:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    122a:	4203      	tst	r3, r0
    122c:	d002      	beq.n	1234 <TwoWire::force_clock()+0x94>
    122e:	68ab      	ldr	r3, [r5, #8]
    1230:	4233      	tst	r3, r6
    1232:	d12f      	bne.n	1294 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    1234:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    1238:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    123a:	6839      	ldr	r1, [r7, #0]
    123c:	fbae 3101 	umull	r3, r1, lr, r1
    1240:	0c89      	lsrs	r1, r1, #18
    1242:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1246:	6853      	ldr	r3, [r2, #4]
    1248:	1b1b      	subs	r3, r3, r4
    124a:	4299      	cmp	r1, r3
    124c:	d8fb      	bhi.n	1246 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    124e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    1252:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1254:	6839      	ldr	r1, [r7, #0]
    1256:	fbae 3101 	umull	r3, r1, lr, r1
    125a:	0c89      	lsrs	r1, r1, #18
    125c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1260:	6853      	ldr	r3, [r2, #4]
    1262:	1b1b      	subs	r3, r3, r4
    1264:	4299      	cmp	r1, r3
    1266:	d8fb      	bhi.n	1260 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    1268:	f1bc 0c01 	subs.w	ip, ip, #1
    126c:	d1db      	bne.n	1226 <TwoWire::force_clock()+0x86>
	bool ret = false;
    126e:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1270:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1274:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    1276:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    127a:	68db      	ldr	r3, [r3, #12]
    127c:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    1280:	f899 3019 	ldrb.w	r3, [r9, #25]
    1284:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    1288:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    128c:	6013      	str	r3, [r2, #0]
}
    128e:	b003      	add	sp, #12
    1290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    1294:	2001      	movs	r0, #1
    1296:	e7eb      	b.n	1270 <TwoWire::force_clock()+0xd0>
    1298:	20000cac 	.word	0x20000cac
    129c:	20001304 	.word	0x20001304
    12a0:	e0001000 	.word	0xe0001000
    12a4:	431bde83 	.word	0x431bde83

000012a8 <TwoWire::wait_idle()>:
	return systick_millis_count;
    12a8:	4a0e      	ldr	r2, [pc, #56]	; (12e4 <TwoWire::wait_idle()+0x3c>)
{
    12aa:	b510      	push	{r4, lr}
    12ac:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
    12ae:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    12b0:	e005      	b.n	12be <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    12b2:	01db      	lsls	r3, r3, #7
    12b4:	d407      	bmi.n	12c6 <TwoWire::wait_idle()+0x1e>
    12b6:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    12b8:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    12ba:	2b10      	cmp	r3, #16
    12bc:	d808      	bhi.n	12d0 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    12be:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    12c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    12c4:	d1f5      	bne.n	12b2 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    12c6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    12ca:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    12cc:	6163      	str	r3, [r4, #20]
}
    12ce:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    12d0:	f7ff ff66 	bl	11a0 <TwoWire::force_clock()>
    12d4:	2800      	cmp	r0, #0
    12d6:	d0fa      	beq.n	12ce <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    12d8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    12dc:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    12de:	6163      	str	r3, [r4, #20]
	return true;
    12e0:	e7f5      	b.n	12ce <TwoWire::wait_idle()+0x26>
    12e2:	bf00      	nop
    12e4:	20003dc4 	.word	0x20003dc4

000012e8 <TwoWire::endTransmission(unsigned char)>:
{
    12e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    12ec:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
    12f0:	f1ba 0f00 	cmp.w	sl, #0
    12f4:	d058      	beq.n	13a8 <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
    12f6:	4681      	mov	r9, r0
    12f8:	4688      	mov	r8, r1
    12fa:	f7ff ffd5 	bl	12a8 <TwoWire::wait_idle()>
    12fe:	2800      	cmp	r0, #0
    1300:	d052      	beq.n	13a8 <TwoWire::endTransmission(unsigned char)+0xc0>
    1302:	4e37      	ldr	r6, [pc, #220]	; (13e0 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    1304:	2400      	movs	r4, #0
    1306:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    1308:	e016      	b.n	1338 <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
    130a:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    130c:	051a      	lsls	r2, r3, #20
    130e:	d444      	bmi.n	139a <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
    1310:	0558      	lsls	r0, r3, #21
    1312:	d458      	bmi.n	13c6 <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    1314:	0499      	lsls	r1, r3, #18
    1316:	d44c      	bmi.n	13b2 <TwoWire::endTransmission(unsigned char)+0xca>
    1318:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    131a:	1bd2      	subs	r2, r2, r7
    131c:	2a32      	cmp	r2, #50	; 0x32
    131e:	d848      	bhi.n	13b2 <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
    1320:	4554      	cmp	r4, sl
    1322:	d907      	bls.n	1334 <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1324:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    1326:	0752      	lsls	r2, r2, #29
    1328:	d104      	bne.n	1334 <TwoWire::endTransmission(unsigned char)+0x4c>
    132a:	059b      	lsls	r3, r3, #22
    132c:	d455      	bmi.n	13da <TwoWire::endTransmission(unsigned char)+0xf2>
    132e:	f1b8 0f00 	cmp.w	r8, #0
    1332:	d052      	beq.n	13da <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
    1334:	f004 fb6e 	bl	5a14 <yield>
		if (tx_index <= tx_len) {
    1338:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    133a:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
    133e:	d8e4      	bhi.n	130a <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1340:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    1342:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    1344:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    1348:	d4df      	bmi.n	130a <TwoWire::endTransmission(unsigned char)+0x22>
    134a:	e013      	b.n	1374 <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    134c:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    1350:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    1352:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    1354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    1358:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    135a:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    135c:	d027      	beq.n	13ae <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
    135e:	458a      	cmp	sl, r1
				fifo_used++;
    1360:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1364:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1368:	d90e      	bls.n	1388 <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    136a:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    136e:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1370:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    1372:	d0ca      	beq.n	130a <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
    1374:	2101      	movs	r1, #1
				if (tx_index == 0) {
    1376:	2c00      	cmp	r4, #0
    1378:	d0e8      	beq.n	134c <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    137a:	4621      	mov	r1, r4
				fifo_used++;
    137c:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    137e:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    1380:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    1382:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    1386:	d8f0      	bhi.n	136a <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    1388:	f1b8 0f00 	cmp.w	r8, #0
    138c:	d0bd      	beq.n	130a <TwoWire::endTransmission(unsigned char)+0x22>
    138e:	f44f 7300 	mov.w	r3, #512	; 0x200
    1392:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
    1394:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    1396:	051a      	lsls	r2, r3, #20
    1398:	d5ba      	bpl.n	1310 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    139a:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    139c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    139e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    13a2:	612b      	str	r3, [r5, #16]
}
    13a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
    13a8:	2004      	movs	r0, #4
}
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    13ae:	2401      	movs	r4, #1
    13b0:	e7ab      	b.n	130a <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13b2:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    13b4:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    13b8:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    13be:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    13c0:	662a      	str	r2, [r5, #96]	; 0x60
}
    13c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13c6:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    13c8:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    13cc:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    13ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    13d2:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    13d4:	662a      	str	r2, [r5, #96]	; 0x60
}
    13d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
    13da:	2000      	movs	r0, #0
    13dc:	e7e5      	b.n	13aa <TwoWire::endTransmission(unsigned char)+0xc2>
    13de:	bf00      	nop
    13e0:	20003dc4 	.word	0x20003dc4

000013e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    13e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13e8:	4682      	mov	sl, r0
    13ea:	460c      	mov	r4, r1
    13ec:	4615      	mov	r5, r2
    13ee:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
    13f0:	f7ff ff5a 	bl	12a8 <TwoWire::wait_idle()>
    13f4:	2800      	cmp	r0, #0
    13f6:	f000 808f 	beq.w	1518 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
    13fa:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
    13fc:	2100      	movs	r1, #0
    13fe:	2d01      	cmp	r5, #1
    1400:	f8df 811c 	ldr.w	r8, [pc, #284]	; 1520 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1404:	b2db      	uxtb	r3, r3
    1406:	f240 4601 	movw	r6, #1025	; 0x401
    140a:	bf38      	it	cc
    140c:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    140e:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1410:	431e      	orrs	r6, r3
    1412:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
    1416:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    141a:	e01e      	b.n	145a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
    141c:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    1420:	2b87      	cmp	r3, #135	; 0x87
    1422:	d93d      	bls.n	14a0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
    1424:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    1426:	050b      	lsls	r3, r1, #20
    1428:	d457      	bmi.n	14da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    142a:	f411 5f10 	tst.w	r1, #9216	; 0x2400
    142e:	d167      	bne.n	1500 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
    1430:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    1434:	eba3 0309 	sub.w	r3, r3, r9
    1438:	2b32      	cmp	r3, #50	; 0x32
    143a:	d861      	bhi.n	1500 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
    143c:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
    1440:	42ab      	cmp	r3, r5
    1442:	d308      	bcc.n	1456 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    1444:	2c02      	cmp	r4, #2
    1446:	d906      	bls.n	1456 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
    1448:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    144a:	0758      	lsls	r0, r3, #29
    144c:	d103      	bne.n	1456 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
    144e:	058b      	lsls	r3, r1, #22
    1450:	d447      	bmi.n	14e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
    1452:	2f00      	cmp	r7, #0
    1454:	d045      	beq.n	14e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
    1456:	f004 fadd 	bl	5a14 <yield>
		if (tx_state < 3) {
    145a:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    145c:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
    1460:	d8dc      	bhi.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1462:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
    1464:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    1466:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    146a:	d4d7      	bmi.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
    146c:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    146e:	1e6c      	subs	r4, r5, #1
    1470:	4408      	add	r0, r1
    1472:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
    1476:	b941      	cbnz	r1, 148a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    1478:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
    147a:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
    147c:	1a43      	subs	r3, r0, r1
    147e:	2b03      	cmp	r3, #3
    1480:	d801      	bhi.n	1486 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
    1482:	2902      	cmp	r1, #2
    1484:	d9f7      	bls.n	1476 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
    1486:	460c      	mov	r4, r1
    1488:	e7c8      	b.n	141c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
    148a:	2901      	cmp	r1, #1
    148c:	d031      	beq.n	14f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    148e:	b117      	cbz	r7, 1496 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
    1490:	f44f 7300 	mov.w	r3, #512	; 0x200
    1494:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    1496:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
    149a:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    149c:	2b87      	cmp	r3, #135	; 0x87
    149e:	d8c1      	bhi.n	1424 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    14a0:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    14a2:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    14a6:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    14aa:	d0bb      	beq.n	1424 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    14ac:	1c59      	adds	r1, r3, #1
    14ae:	449e      	add	lr, r3
    14b0:	3319      	adds	r3, #25
    14b2:	b2c9      	uxtb	r1, r1
    14b4:	fa5f fe8e 	uxtb.w	lr, lr
    14b8:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    14bc:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    14c0:	1c48      	adds	r0, r1, #1
    14c2:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
    14c4:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    14c8:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
    14ca:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    14ce:	d0a9      	beq.n	1424 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
    14d0:	2989      	cmp	r1, #137	; 0x89
    14d2:	d1f3      	bne.n	14bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
    14d4:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
    14d6:	050b      	lsls	r3, r1, #20
    14d8:	d5a7      	bpl.n	142a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    14da:	6913      	ldr	r3, [r2, #16]
    14dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    14e0:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    14e2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    14e4:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    14e8:	d105      	bne.n	14f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
    14ea:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
    14ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    14f2:	6614      	str	r4, [r2, #96]	; 0x60
    14f4:	e7c1      	b.n	147a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    14f6:	6913      	ldr	r3, [r2, #16]
    14f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    14fc:	6113      	str	r3, [r2, #16]
    14fe:	e7f4      	b.n	14ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1500:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    1502:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    1506:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    150a:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    150c:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    150e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    1510:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    1514:	d0e9      	beq.n	14ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    1516:	e7ee      	b.n	14f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
    1518:	2004      	movs	r0, #4
}
    151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    151e:	bf00      	nop
    1520:	20003dc4 	.word	0x20003dc4

00001524 <TwoWire::isr()>:
	uint32_t status = port->SSR;
    1524:	6903      	ldr	r3, [r0, #16]
{
    1526:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
    1528:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
    152c:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
    152e:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
    1532:	d001      	beq.n	1538 <TwoWire::isr()+0x14>
    1534:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    1538:	07ae      	lsls	r6, r5, #30
    153a:	d50b      	bpl.n	1554 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    153c:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
    1540:	0408      	lsls	r0, r1, #16
    1542:	d53e      	bpl.n	15c2 <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
    1544:	2200      	movs	r2, #0
    1546:	2001      	movs	r0, #1
    1548:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    154c:	4422      	add	r2, r4
    154e:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
    1552:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    1554:	07ea      	lsls	r2, r5, #31
    1556:	d510      	bpl.n	157a <TwoWire::isr()+0x56>
		if (!transmitting) {
    1558:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
    155c:	b1f6      	cbz	r6, 159c <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    155e:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
    1562:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    1566:	42b2      	cmp	r2, r6
    1568:	d927      	bls.n	15ba <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
    156a:	1c72      	adds	r2, r6, #1
    156c:	4426      	add	r6, r4
    156e:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
    1572:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
    1576:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    157a:	05ab      	lsls	r3, r5, #22
    157c:	d50d      	bpl.n	159a <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    157e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    1582:	b118      	cbz	r0, 158c <TwoWire::isr()+0x68>
    1584:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    1588:	b103      	cbz	r3, 158c <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    158a:	4798      	blx	r3
		rxBufferIndex = 0;
    158c:	2300      	movs	r3, #0
    158e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    1592:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    1596:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    159a:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    159c:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    15a0:	b10a      	cbz	r2, 15a6 <TwoWire::isr()+0x82>
				(*user_onRequest)();
    15a2:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    15a4:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    15a6:	2200      	movs	r2, #0
    15a8:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    15ac:	2201      	movs	r2, #1
    15ae:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    15b2:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    15b6:	42b2      	cmp	r2, r6
    15b8:	d8d7      	bhi.n	156a <TwoWire::isr()+0x46>
			port->STDR = 0;
    15ba:	2200      	movs	r2, #0
    15bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    15c0:	e7db      	b.n	157a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    15c2:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    15c6:	2a87      	cmp	r2, #135	; 0x87
    15c8:	d8c4      	bhi.n	1554 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    15ca:	1c50      	adds	r0, r2, #1
    15cc:	b2c0      	uxtb	r0, r0
    15ce:	e7bd      	b.n	154c <TwoWire::isr()+0x28>

000015d0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    15d0:	4801      	ldr	r0, [pc, #4]	; (15d8 <lpi2c1_isr()+0x8>)
    15d2:	f7ff bfa7 	b.w	1524 <TwoWire::isr()>
    15d6:	bf00      	nop
    15d8:	20002878 	.word	0x20002878

000015dc <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    15dc:	4801      	ldr	r0, [pc, #4]	; (15e4 <lpi2c3_isr()+0x8>)
    15de:	f7ff bfa1 	b.w	1524 <TwoWire::isr()>
    15e2:	bf00      	nop
    15e4:	200029b8 	.word	0x200029b8

000015e8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    15e8:	4801      	ldr	r0, [pc, #4]	; (15f0 <lpi2c4_isr()+0x8>)
    15ea:	f7ff bf9b 	b.w	1524 <TwoWire::isr()>
    15ee:	bf00      	nop
    15f0:	20002af8 	.word	0x20002af8

000015f4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    15f4:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    15f6:	4c09      	ldr	r4, [pc, #36]	; (161c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    15f8:	4909      	ldr	r1, [pc, #36]	; (1620 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    15fa:	4622      	mov	r2, r4
    15fc:	4809      	ldr	r0, [pc, #36]	; (1624 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    15fe:	f7ff fd99 	bl	1134 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    1602:	f104 0250 	add.w	r2, r4, #80	; 0x50
    1606:	4908      	ldr	r1, [pc, #32]	; (1628 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    1608:	4808      	ldr	r0, [pc, #32]	; (162c <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    160a:	f7ff fd93 	bl	1134 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    160e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    1612:	4907      	ldr	r1, [pc, #28]	; (1630 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    1614:	4807      	ldr	r0, [pc, #28]	; (1634 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    1616:	f7ff fd8d 	bl	1134 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    161a:	bd10      	pop	{r4, pc}
    161c:	60001ff8 	.word	0x60001ff8
    1620:	403f0000 	.word	0x403f0000
    1624:	20002878 	.word	0x20002878
    1628:	403f8000 	.word	0x403f8000
    162c:	200029b8 	.word	0x200029b8
    1630:	403fc000 	.word	0x403fc000
    1634:	20002af8 	.word	0x20002af8

00001638 <PA12::~PA12()>:
}
    1638:	4770      	bx	lr
    163a:	bf00      	nop

0000163c <PA12::~PA12()>:
PA12::~PA12() {
    163c:	b510      	push	{r4, lr}
    163e:	4604      	mov	r4, r0
}
    1640:	f640 2148 	movw	r1, #2632	; 0xa48
    1644:	f002 fdd4 	bl	41f0 <operator delete(void*, unsigned int)>
    1648:	4620      	mov	r0, r4
    164a:	bd10      	pop	{r4, pc}

0000164c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    164c:	f004 b8fa 	b.w	5844 <usb_serial_available>

00001650 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    1650:	f004 b93c 	b.w	58cc <usb_serial_getchar>

00001654 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    1654:	4608      	mov	r0, r1
    1656:	f004 b949 	b.w	58ec <usb_serial_putchar>
    165a:	bf00      	nop

0000165c <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
    165c:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
    165e:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
    1662:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
    1664:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
    1666:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
    1668:	4a02      	ldr	r2, [pc, #8]	; (1674 <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
    166a:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
    166c:	e9c0 2300 	strd	r2, r3, [r0]
}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	20000870 	.word	0x20000870

00001678 <PA12::begin(int)>:
void PA12::begin(int baud){
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	4604      	mov	r4, r0
    167c:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
    167e:	7b00      	ldrb	r0, [r0, #12]
    1680:	2101      	movs	r1, #1
    1682:	f002 fc5b 	bl	3f3c <pinMode>
	if(PA12_Serial_Type)
    1686:	6866      	ldr	r6, [r4, #4]
    1688:	b30e      	cbz	r6, 16ce <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    168a:	68a6      	ldr	r6, [r4, #8]
    168c:	4628      	mov	r0, r5
    168e:	f000 faaf 	bl	1bf0 <irp_get_baudrate>
    1692:	4601      	mov	r1, r0
    1694:	4630      	mov	r0, r6
    1696:	f000 fadb 	bl	1c50 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
    169a:	7c21      	ldrb	r1, [r4, #16]
    169c:	7b20      	ldrb	r0, [r4, #12]
    169e:	f002 fc11 	bl	3ec4 <digitalWrite>
	mIRPtxrxStatus = 0;
    16a2:	2100      	movs	r1, #0
	SmartDelayFlag=1;
    16a4:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
    16a6:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
    16a8:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
    16aa:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
    16ae:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
    16b2:	2104      	movs	r1, #4
	SmartDelayFlag=1;
    16b4:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
    16b8:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
    16bc:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
    16c0:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
    16c4:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
    16c8:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
    16cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    16ce:	68a7      	ldr	r7, [r4, #8]
    16d0:	4628      	mov	r0, r5
    16d2:	f000 fa8d 	bl	1bf0 <irp_get_baudrate>
    16d6:	4632      	mov	r2, r6
    16d8:	4601      	mov	r1, r0
    16da:	4638      	mov	r0, r7
    16dc:	f001 fac4 	bl	2c68 <HardwareSerial::begin(unsigned long, unsigned short)>
    16e0:	e7db      	b.n	169a <PA12::begin(int)+0x22>
    16e2:	bf00      	nop

000016e4 <PA12::readRaw()>:
int PA12::readRaw(void){
    16e4:	b510      	push	{r4, lr}
    16e6:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
    16e8:	6880      	ldr	r0, [r0, #8]
    16ea:	4a0c      	ldr	r2, [pc, #48]	; (171c <PA12::readRaw()+0x38>)
    16ec:	6803      	ldr	r3, [r0, #0]
    16ee:	691b      	ldr	r3, [r3, #16]
    16f0:	4293      	cmp	r3, r2
    16f2:	d10d      	bne.n	1710 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
    16f4:	f004 f8a6 	bl	5844 <usb_serial_available>
    16f8:	b148      	cbz	r0, 170e <PA12::readRaw()+0x2a>
    16fa:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
    16fc:	4a08      	ldr	r2, [pc, #32]	; (1720 <PA12::readRaw()+0x3c>)
    16fe:	6803      	ldr	r3, [r0, #0]
    1700:	695b      	ldr	r3, [r3, #20]
    1702:	4293      	cmp	r3, r2
    1704:	d106      	bne.n	1714 <PA12::readRaw()+0x30>
}
    1706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
    170a:	f004 b8df 	b.w	58cc <usb_serial_getchar>
    170e:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
    1710:	4798      	blx	r3
    1712:	e7f1      	b.n	16f8 <PA12::readRaw()+0x14>
}
    1714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
    1718:	4718      	bx	r3
    171a:	bf00      	nop
    171c:	0000164d 	.word	0x0000164d
    1720:	00001651 	.word	0x00001651

00001724 <PA12::available()>:
		return PA12_Serial->available();
    1724:	6880      	ldr	r0, [r0, #8]
    1726:	4a04      	ldr	r2, [pc, #16]	; (1738 <PA12::available()+0x14>)
    1728:	6803      	ldr	r3, [r0, #0]
    172a:	691b      	ldr	r3, [r3, #16]
    172c:	4293      	cmp	r3, r2
    172e:	d101      	bne.n	1734 <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
    1730:	f004 b888 	b.w	5844 <usb_serial_available>
    1734:	4718      	bx	r3
    1736:	bf00      	nop
    1738:	0000164d 	.word	0x0000164d

0000173c <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	4d0e      	ldr	r5, [pc, #56]	; (1778 <PA12::clearBuffer()+0x3c>)
    1740:	4604      	mov	r4, r0
    1742:	4e0e      	ldr	r6, [pc, #56]	; (177c <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
    1744:	68a0      	ldr	r0, [r4, #8]
    1746:	6803      	ldr	r3, [r0, #0]
    1748:	691b      	ldr	r3, [r3, #16]
    174a:	42ab      	cmp	r3, r5
    174c:	d10e      	bne.n	176c <PA12::clearBuffer()+0x30>
    174e:	f004 f879 	bl	5844 <usb_serial_available>
	while((this->available()))
    1752:	b170      	cbz	r0, 1772 <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
    1754:	68a0      	ldr	r0, [r4, #8]
    1756:	6803      	ldr	r3, [r0, #0]
    1758:	695b      	ldr	r3, [r3, #20]
    175a:	42b3      	cmp	r3, r6
    175c:	d10a      	bne.n	1774 <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
    175e:	f004 f8b5 	bl	58cc <usb_serial_getchar>
		return PA12_Serial->available();
    1762:	68a0      	ldr	r0, [r4, #8]
    1764:	6803      	ldr	r3, [r0, #0]
    1766:	691b      	ldr	r3, [r3, #16]
    1768:	42ab      	cmp	r3, r5
    176a:	d0f0      	beq.n	174e <PA12::clearBuffer()+0x12>
    176c:	4798      	blx	r3
	while((this->available()))
    176e:	2800      	cmp	r0, #0
    1770:	d1f0      	bne.n	1754 <PA12::clearBuffer()+0x18>
}
    1772:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
    1774:	4798      	blx	r3
    1776:	e7e5      	b.n	1744 <PA12::clearBuffer()+0x8>
    1778:	0000164d 	.word	0x0000164d
    177c:	00001651 	.word	0x00001651

00001780 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1784:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
    1786:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1788:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    178a:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
    178c:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
    178e:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
    1792:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1796:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
    1798:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
    179c:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
    17a0:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
    17a4:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    17a8:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
    17ac:	dd40      	ble.n	1830 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
    17ae:	f600 010c 	addw	r1, r0, #2060	; 0x80c
    17b2:	00aa      	lsls	r2, r5, #2
    17b4:	f500 6085 	add.w	r0, r0, #1064	; 0x428
    17b8:	f006 f8ce 	bl	7958 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    17bc:	1dab      	adds	r3, r5, #6
    17be:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    17c2:	2000      	movs	r0, #0
    17c4:	2203      	movs	r2, #3
    17c6:	e001      	b.n	17cc <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
    17c8:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    17cc:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
    17ce:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    17d0:	4293      	cmp	r3, r2
    17d2:	dcf9      	bgt.n	17c8 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    17d4:	43c0      	mvns	r0, r0
    17d6:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    17da:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    17dc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    17e0:	7b20      	ldrb	r0, [r4, #12]
    17e2:	f002 fb6f 	bl	3ec4 <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    17e6:	2e00      	cmp	r6, #0
    17e8:	dd17      	ble.n	181a <PA12::txPacket(int, int, int)+0x9a>
    17ea:	f204 480c 	addw	r8, r4, #1036	; 0x40c
    17ee:	2500      	movs	r5, #0
    17f0:	4f13      	ldr	r7, [pc, #76]	; (1840 <PA12::txPacket(int, int, int)+0xc0>)
    17f2:	e004      	b.n	17fe <PA12::txPacket(int, int, int)+0x7e>
    17f4:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    17f6:	f004 f879 	bl	58ec <usb_serial_putchar>
    17fa:	42ae      	cmp	r6, r5
    17fc:	d00d      	beq.n	181a <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
    17fe:	68a2      	ldr	r2, [r4, #8]
    1800:	f858 0f04 	ldr.w	r0, [r8, #4]!
    1804:	6813      	ldr	r3, [r2, #0]
    1806:	b2c0      	uxtb	r0, r0
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	42bb      	cmp	r3, r7
    180c:	d0f2      	beq.n	17f4 <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    180e:	3501      	adds	r5, #1
PA12_Serial->write(value);
    1810:	4601      	mov	r1, r0
    1812:	4610      	mov	r0, r2
    1814:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1816:	42ae      	cmp	r6, r5
    1818:	d1f1      	bne.n	17fe <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
    181a:	68a0      	ldr	r0, [r4, #8]
    181c:	6803      	ldr	r3, [r0, #0]
    181e:	68db      	ldr	r3, [r3, #12]
    1820:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
    1822:	7b20      	ldrb	r0, [r4, #12]
    1824:	7c61      	ldrb	r1, [r4, #17]
    1826:	f002 fb4d 	bl	3ec4 <digitalWrite>
}
    182a:	4630      	mov	r0, r6
    182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1830:	1dab      	adds	r3, r5, #6
    1832:	2b03      	cmp	r3, #3
    1834:	dcc3      	bgt.n	17be <PA12::txPacket(int, int, int)+0x3e>
    1836:	f04f 30ff 	mov.w	r0, #4294967295
    183a:	2303      	movs	r3, #3
    183c:	e7cb      	b.n	17d6 <PA12::txPacket(int, int, int)+0x56>
    183e:	bf00      	nop
    1840:	00001655 	.word	0x00001655

00001844 <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
    1844:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
    1846:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    184a:	4689      	mov	r9, r1
    184c:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
    184e:	d046      	beq.n	18de <PA12::rxPacket(int)+0x9a>
    1850:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1854:	4299      	cmp	r1, r3
    1856:	d042      	beq.n	18de <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
    1858:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
    185c:	f1b9 0f00 	cmp.w	r9, #0
    1860:	dd66      	ble.n	1930 <PA12::rxPacket(int)+0xec>
    1862:	f104 0a10 	add.w	sl, r4, #16
    1866:	3602      	adds	r6, #2
    1868:	2700      	movs	r7, #0
    186a:	4d5a      	ldr	r5, [pc, #360]	; (19d4 <PA12::rxPacket(int)+0x190>)
    186c:	46d0      	mov	r8, sl
		ulCounter = 0;
    186e:	f04f 0b00 	mov.w	fp, #0
    1872:	e007      	b.n	1884 <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
    1874:	f003 ffe6 	bl	5844 <usb_serial_available>
    1878:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    187a:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    187e:	b963      	cbnz	r3, 189a <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
    1880:	45b3      	cmp	fp, r6
    1882:	d02f      	beq.n	18e4 <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
    1884:	68a0      	ldr	r0, [r4, #8]
    1886:	6803      	ldr	r3, [r0, #0]
    1888:	691b      	ldr	r3, [r3, #16]
    188a:	42ab      	cmp	r3, r5
    188c:	d0f2      	beq.n	1874 <PA12::rxPacket(int)+0x30>
    188e:	4798      	blx	r3
    1890:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    1892:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    1896:	2b00      	cmp	r3, #0
    1898:	d0f2      	beq.n	1880 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
    189a:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
    189c:	4620      	mov	r0, r4
    189e:	f7ff ff21 	bl	16e4 <PA12::readRaw()>
    18a2:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
    18a6:	45b9      	cmp	r9, r7
    18a8:	d1e1      	bne.n	186e <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    18aa:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    18ae:	f502 7382 	add.w	r3, r2, #260	; 0x104
    18b2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    18b6:	29fe      	cmp	r1, #254	; 0xfe
    18b8:	d00e      	beq.n	18d8 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
    18ba:	2f03      	cmp	r7, #3
    18bc:	dd0c      	ble.n	18d8 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    18be:	6963      	ldr	r3, [r4, #20]
    18c0:	2bff      	cmp	r3, #255	; 0xff
    18c2:	d027      	beq.n	1914 <PA12::rxPacket(int)+0xd0>
    18c4:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    18c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
    18cc:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
    18ce:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
    18d2:	2700      	movs	r7, #0
				clearBuffer();
    18d4:	f7ff ff32 	bl	173c <PA12::clearBuffer()>
}
    18d8:	4638      	mov	r0, r7
    18da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
    18de:	f44f 3648 	mov.w	r6, #204800	; 0x32000
    18e2:	e7bb      	b.n	185c <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    18e4:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    18e8:	f502 7182 	add.w	r1, r2, #260	; 0x104
    18ec:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    18f0:	29fe      	cmp	r1, #254	; 0xfe
    18f2:	d0f1      	beq.n	18d8 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
    18f4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    18f8:	d0df      	beq.n	18ba <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    18fa:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
    18fe:	461f      	mov	r7, r3
			clearBuffer();			
    1900:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    1902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1906:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
    190a:	f7ff ff17 	bl	173c <PA12::clearBuffer()>
}
    190e:	4638      	mov	r0, r7
    1910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    1914:	69a3      	ldr	r3, [r4, #24]
    1916:	2bff      	cmp	r3, #255	; 0xff
    1918:	d1d4      	bne.n	18c4 <PA12::rxPacket(int)+0x80>
    191a:	69e3      	ldr	r3, [r4, #28]
    191c:	2bff      	cmp	r3, #255	; 0xff
    191e:	d009      	beq.n	1934 <PA12::rxPacket(int)+0xf0>
    1920:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
    1924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1928:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    192a:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
    192e:	e7cd      	b.n	18cc <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
    1930:	2700      	movs	r7, #0
    1932:	e7d1      	b.n	18d8 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1934:	3204      	adds	r2, #4
    1936:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    193a:	685b      	ldr	r3, [r3, #4]
    193c:	428b      	cmp	r3, r1
    193e:	d02c      	beq.n	199a <PA12::rxPacket(int)+0x156>
    1940:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1948:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
    194c:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
    194e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1952:	6852      	ldr	r2, [r2, #4]
    1954:	428a      	cmp	r2, r1
    1956:	d115      	bne.n	1984 <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
    1958:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
    195c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    1960:	6951      	ldr	r1, [r2, #20]
    1962:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
    1966:	1aba      	subs	r2, r7, r2
    1968:	4291      	cmp	r1, r2
    196a:	d10b      	bne.n	1984 <PA12::rxPacket(int)+0x140>
    196c:	f104 021c 	add.w	r2, r4, #28
    1970:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1974:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1978:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    197a:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    197c:	d1fa      	bne.n	1974 <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    197e:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    1980:	2bff      	cmp	r3, #255	; 0xff
    1982:	d0a9      	beq.n	18d8 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1984:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1988:	4620      	mov	r0, r4
				return 0;
    198a:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1990:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1994:	f7ff fed2 	bl	173c <PA12::clearBuffer()>
				return 0;
    1998:	e79e      	b.n	18d8 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    199a:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    199e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    19a2:	6958      	ldr	r0, [r3, #20]
    19a4:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    19a8:	1afb      	subs	r3, r7, r3
    19aa:	4298      	cmp	r0, r3
    19ac:	d1c8      	bne.n	1940 <PA12::rxPacket(int)+0xfc>
    19ae:	f104 001c 	add.w	r0, r4, #28
    19b2:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    19b6:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    19b8:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    19bc:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    19be:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    19c0:	d1fa      	bne.n	19b8 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    19c2:	2bff      	cmp	r3, #255	; 0xff
    19c4:	d0c3      	beq.n	194e <PA12::rxPacket(int)+0x10a>
    19c6:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    19ca:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    19ce:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    19d2:	e7bc      	b.n	194e <PA12::rxPacket(int)+0x10a>
    19d4:	0000164d 	.word	0x0000164d

000019d8 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    19d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    19dc:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    19de:	4698      	mov	r8, r3
    19e0:	4605      	mov	r5, r0
	mBusUsed = 1;
    19e2:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    19e4:	468a      	mov	sl, r1
    19e6:	4691      	mov	r9, r2
    19e8:	4e56      	ldr	r6, [pc, #344]	; (1b44 <PA12::txRxPacket(int, int, int)+0x16c>)
    19ea:	4f57      	ldr	r7, [pc, #348]	; (1b48 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    19ec:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    19f0:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    19f4:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    19f8:	68a8      	ldr	r0, [r5, #8]
    19fa:	6803      	ldr	r3, [r0, #0]
    19fc:	691c      	ldr	r4, [r3, #16]
    19fe:	42b4      	cmp	r4, r6
    1a00:	d10f      	bne.n	1a22 <PA12::txRxPacket(int, int, int)+0x4a>
    1a02:	f003 ff1f 	bl	5844 <usb_serial_available>
    1a06:	4604      	mov	r4, r0
		while((this->available())){
    1a08:	b17c      	cbz	r4, 1a2a <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    1a0a:	68a8      	ldr	r0, [r5, #8]
    1a0c:	6803      	ldr	r3, [r0, #0]
    1a0e:	695b      	ldr	r3, [r3, #20]
    1a10:	42bb      	cmp	r3, r7
    1a12:	d14a      	bne.n	1aaa <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    1a14:	f003 ff5a 	bl	58cc <usb_serial_getchar>
		return PA12_Serial->available();
    1a18:	68a8      	ldr	r0, [r5, #8]
    1a1a:	6803      	ldr	r3, [r0, #0]
    1a1c:	691c      	ldr	r4, [r3, #16]
    1a1e:	42b4      	cmp	r4, r6
    1a20:	d0ef      	beq.n	1a02 <PA12::txRxPacket(int, int, int)+0x2a>
    1a22:	47a0      	blx	r4
    1a24:	4604      	mov	r4, r0
		while((this->available())){
    1a26:	2c00      	cmp	r4, #0
    1a28:	d1ef      	bne.n	1a0a <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1a2a:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    1a2c:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    1a30:	464a      	mov	r2, r9
    1a32:	4651      	mov	r1, sl
    1a34:	4628      	mov	r0, r5
    1a36:	f7ff fea3 	bl	1780 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    1a3a:	4580      	cmp	r8, r0
    1a3c:	d102      	bne.n	1a44 <PA12::txRxPacket(int, int, int)+0x6c>
    1a3e:	2301      	movs	r3, #1
    1a40:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    1a44:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    1a48:	d043      	beq.n	1ad2 <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    1a4a:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    1a4e:	d02e      	beq.n	1aae <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    1a50:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1a54:	d065      	beq.n	1b22 <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    1a56:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    1a5a:	2b01      	cmp	r3, #1
    1a5c:	dd53      	ble.n	1b06 <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    1a5e:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    1a62:	2b01      	cmp	r3, #1
    1a64:	d038      	beq.n	1ad8 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    1a66:	230b      	movs	r3, #11
    1a68:	461e      	mov	r6, r3
    1a6a:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1a6e:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1a72:	2b01      	cmp	r3, #1
    1a74:	d038      	beq.n	1ae8 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    1a76:	4631      	mov	r1, r6
    1a78:	4628      	mov	r0, r5
    1a7a:	f7ff fee3 	bl	1844 <PA12::rxPacket(int)>
	mBusUsed = 0;
    1a7e:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1a80:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    1a82:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1a86:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1a8a:	d007      	beq.n	1a9c <PA12::txRxPacket(int, int, int)+0xc4>
    1a8c:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    1a90:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1a94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1a98:	2bfe      	cmp	r3, #254	; 0xfe
    1a9a:	d029      	beq.n	1af0 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1a9c:	2302      	movs	r3, #2
	return 1;
    1a9e:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1aa0:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    1aa4:	4620      	mov	r0, r4
    1aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    1aaa:	4798      	blx	r3
    1aac:	e7a4      	b.n	19f8 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    1aae:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    1ab2:	3607      	adds	r6, #7
    1ab4:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1ab8:	2e00      	cmp	r6, #0
    1aba:	d1d8      	bne.n	1a6e <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1abc:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    1ac0:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1ac4:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1ac8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1acc:	2bf1      	cmp	r3, #241	; 0xf1
    1ace:	d1e5      	bne.n	1a9c <PA12::txRxPacket(int, int, int)+0xc4>
    1ad0:	e7e8      	b.n	1aa4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1ad2:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    1ad6:	d02f      	beq.n	1b38 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1ad8:	2307      	movs	r3, #7
    1ada:	461e      	mov	r6, r3
    1adc:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1ae0:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    1ae4:	2b01      	cmp	r3, #1
    1ae6:	d1c6      	bne.n	1a76 <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1ae8:	2096      	movs	r0, #150	; 0x96
    1aea:	f002 f96d 	bl	3dc8 <delay>
    1aee:	e7c2      	b.n	1a76 <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1af0:	2800      	cmp	r0, #0
    1af2:	d1d3      	bne.n	1a9c <PA12::txRxPacket(int, int, int)+0xc4>
    1af4:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1af8:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1afc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1b00:	2bf1      	cmp	r3, #241	; 0xf1
    1b02:	d1cb      	bne.n	1a9c <PA12::txRxPacket(int, int, int)+0xc4>
    1b04:	e7ce      	b.n	1aa4 <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    1b06:	2300      	movs	r3, #0
    1b08:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1b0c:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1b10:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1b14:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1b18:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1b1c:	2bf1      	cmp	r3, #241	; 0xf1
    1b1e:	d1bd      	bne.n	1a9c <PA12::txRxPacket(int, int, int)+0xc4>
    1b20:	e7c0      	b.n	1aa4 <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    1b22:	f029 0910 	bic.w	r9, r9, #16
    1b26:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    1b2a:	d1ec      	bne.n	1b06 <PA12::txRxPacket(int, int, int)+0x12e>
    1b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b30:	461e      	mov	r6, r3
    1b32:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1b36:	e79a      	b.n	1a6e <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    1b38:	23ff      	movs	r3, #255	; 0xff
    1b3a:	461e      	mov	r6, r3
    1b3c:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1b40:	e795      	b.n	1a6e <PA12::txRxPacket(int, int, int)+0x96>
    1b42:	bf00      	nop
    1b44:	0000164d 	.word	0x0000164d
    1b48:	00001651 	.word	0x00001651

00001b4c <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    1b4c:	b530      	push	{r4, r5, lr}
    1b4e:	4615      	mov	r5, r2
    1b50:	b083      	sub	sp, #12
    1b52:	4604      	mov	r4, r0
    1b54:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1b56:	f7ff fdf1 	bl	173c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1b5a:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1b5c:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1b5e:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b62:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1b64:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b68:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1b6a:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b6e:	22f3      	movs	r2, #243	; 0xf3
    1b70:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1b72:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1b76:	b003      	add	sp, #12
    1b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b7c:	f7ff bf2c 	b.w	19d8 <PA12::txRxPacket(int, int, int)>

00001b80 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    1b80:	b530      	push	{r4, r5, lr}
    1b82:	4615      	mov	r5, r2
    1b84:	b083      	sub	sp, #12
    1b86:	4604      	mov	r4, r0
    1b88:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1b8a:	f7ff fdd7 	bl	173c <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1b8e:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1b90:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1b92:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b96:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1b98:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1b9c:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1b9e:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1ba2:	22f3      	movs	r2, #243	; 0xf3
    1ba4:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    1ba6:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1baa:	b003      	add	sp, #12
    1bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1bb0:	f7ff bf12 	b.w	19d8 <PA12::txRxPacket(int, int, int)>

00001bb4 <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    1bb4:	b510      	push	{r4, lr}
    1bb6:	b082      	sub	sp, #8
    1bb8:	4604      	mov	r4, r0
    1bba:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1bbc:	f7ff fdbe 	bl	173c <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    1bc0:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    1bc2:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1bc4:	22f2      	movs	r2, #242	; 0xf2
    1bc6:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1bc8:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1bcc:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    1bce:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1bd2:	f7ff ff01 	bl	19d8 <PA12::txRxPacket(int, int, int)>
    1bd6:	b138      	cbz	r0, 1be8 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1bd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1bda:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1bde:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    1be2:	b280      	uxth	r0, r0
}
    1be4:	b002      	add	sp, #8
    1be6:	bd10      	pop	{r4, pc}
		return 0xffff;
    1be8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1bec:	b002      	add	sp, #8
    1bee:	bd10      	pop	{r4, pc}

00001bf0 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1bf0:	2810      	cmp	r0, #16
    1bf2:	dc11      	bgt.n	1c18 <irp_get_baudrate+0x28>
    1bf4:	2801      	cmp	r0, #1
    1bf6:	dd0c      	ble.n	1c12 <irp_get_baudrate+0x22>
    1bf8:	3802      	subs	r0, #2
    1bfa:	280e      	cmp	r0, #14
    1bfc:	d809      	bhi.n	1c12 <irp_get_baudrate+0x22>
    1bfe:	e8df f000 	tbb	[pc, r0]
    1c02:	0819      	.short	0x0819
    1c04:	0808081b 	.word	0x0808081b
    1c08:	08080817 	.word	0x08080817
    1c0c:	08080808 	.word	0x08080808
    1c10:	1d          	.byte	0x1d
    1c11:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    1c12:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    1c16:	4770      	bx	lr
    switch(baudnum)
    1c18:	2840      	cmp	r0, #64	; 0x40
    1c1a:	d006      	beq.n	1c2a <irp_get_baudrate+0x3a>
        temp= 9600; break;
    1c1c:	2880      	cmp	r0, #128	; 0x80
    1c1e:	bf14      	ite	ne
    1c20:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    1c24:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    1c28:	4770      	bx	lr
    switch(baudnum)
    1c2a:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    1c2e:	4770      	bx	lr
        temp= 2000000; break;
    1c30:	4804      	ldr	r0, [pc, #16]	; (1c44 <irp_get_baudrate+0x54>)
    1c32:	4770      	bx	lr
        temp= 4000000; break;
    1c34:	4804      	ldr	r0, [pc, #16]	; (1c48 <irp_get_baudrate+0x58>)
    1c36:	4770      	bx	lr
        temp= 2500000; break;
    1c38:	4804      	ldr	r0, [pc, #16]	; (1c4c <irp_get_baudrate+0x5c>)
    1c3a:	4770      	bx	lr
        temp= 115200; break;
    1c3c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    1c40:	4770      	bx	lr
    1c42:	bf00      	nop
    1c44:	001e8480 	.word	0x001e8480
    1c48:	003d0900 	.word	0x003d0900
    1c4c:	002625a0 	.word	0x002625a0

00001c50 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    1c50:	b410      	push	{r4}
	if (port) {
    1c52:	6904      	ldr	r4, [r0, #16]
    1c54:	b12c      	cbz	r4, 1c62 <SoftwareSerial::begin(unsigned long)+0x12>
		port->begin(speed);
    1c56:	4620      	mov	r0, r4
    1c58:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    1c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    1c5e:	f001 b803 	b.w	2c68 <HardwareSerial::begin(unsigned long, unsigned short)>
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1c62:	460b      	mov	r3, r1
    1c64:	4a0a      	ldr	r2, [pc, #40]	; (1c90 <SoftwareSerial::begin(unsigned long)+0x40>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1c66:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    1c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    1c6e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    1c72:	fbb2 f3f3 	udiv	r3, r2, r3
    1c76:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1c78:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1c7c:	4a05      	ldr	r2, [pc, #20]	; (1c94 <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1c82:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1c86:	6813      	ldr	r3, [r2, #0]
    1c88:	f043 0301 	orr.w	r3, r3, #1
    1c8c:	6013      	str	r3, [r2, #0]
}
    1c8e:	4770      	bx	lr
    1c90:	23c34600 	.word	0x23c34600
    1c94:	e0001000 	.word	0xe0001000

00001c98 <Adafruit_INA260::Adafruit_INA260()>:
#include "Adafruit_INA260.h"

/*!
 *    @brief  Instantiates a new INA260 class
 */
Adafruit_INA260::Adafruit_INA260(void) {}
    1c98:	4770      	bx	lr
    1c9a:	bf00      	nop

00001c9c <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ca0:	b086      	sub	sp, #24
    1ca2:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1ca4:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1ca6:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1caa:	f002 fa9f 	bl	41ec <operator new(unsigned int)>
    1cae:	4604      	mov	r4, r0
    1cb0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    1cb4:	f000 f9ee 	bl	2094 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>

  if (!i2c_dev->begin()) {
    1cb8:	2101      	movs	r1, #1
    1cba:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1cbc:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    1cbe:	f000 f9f3 	bl	20a8 <Adafruit_I2CDevice::begin(bool)>
    1cc2:	b920      	cbnz	r0, 1cce <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    1cc4:	2400      	movs	r4, #0
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);

  reset();
  delay(2); // delay 2ms to give time for first measurement to finish
  return true;
}
    1cc6:	4620      	mov	r0, r4
    1cc8:	b006      	add	sp, #24
    1cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    1cce:	2601      	movs	r6, #1
    1cd0:	4604      	mov	r4, r0
    1cd2:	2018      	movs	r0, #24
    1cd4:	f002 fa8a 	bl	41ec <operator new(unsigned int)>
    1cd8:	2302      	movs	r3, #2
    1cda:	22ff      	movs	r2, #255	; 0xff
    1cdc:	4680      	mov	r8, r0
    1cde:	e9cd 6600 	strd	r6, r6, [sp]
    1ce2:	68e9      	ldr	r1, [r5, #12]
    1ce4:	f000 f8b4 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1ce8:	2018      	movs	r0, #24
    1cea:	f002 fa7f 	bl	41ec <operator new(unsigned int)>
    1cee:	2302      	movs	r3, #2
    1cf0:	22fe      	movs	r2, #254	; 0xfe
    1cf2:	4607      	mov	r7, r0
    1cf4:	e9cd 6600 	strd	r6, r6, [sp]
    1cf8:	68e9      	ldr	r1, [r5, #12]
    1cfa:	f000 f8a9 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    1cfe:	2008      	movs	r0, #8
    1d00:	f002 fa74 	bl	41ec <operator new(unsigned int)>
    1d04:	4641      	mov	r1, r8
    1d06:	2304      	movs	r3, #4
    1d08:	220c      	movs	r2, #12
    1d0a:	4680      	mov	r8, r0
    1d0c:	f000 f998 	bl	2040 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    1d10:	4638      	mov	r0, r7
    1d12:	f000 f973 	bl	1ffc <Adafruit_BusIO_Register::read()>
    1d16:	f245 4349 	movw	r3, #21577	; 0x5449
    1d1a:	4298      	cmp	r0, r3
    1d1c:	d1d2      	bne.n	1cc4 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    1d1e:	4640      	mov	r0, r8
    1d20:	f000 f992 	bl	2048 <Adafruit_BusIO_RegisterBits::read()>
    1d24:	f240 2327 	movw	r3, #551	; 0x227
    1d28:	4298      	cmp	r0, r3
    1d2a:	d1cb      	bne.n	1cc4 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    1d2c:	2018      	movs	r0, #24
    1d2e:	f002 fa5d 	bl	41ec <operator new(unsigned int)>
    1d32:	4607      	mov	r7, r0
    1d34:	2302      	movs	r3, #2
    1d36:	2200      	movs	r2, #0
    1d38:	e9cd 6600 	strd	r6, r6, [sp]
    1d3c:	68e9      	ldr	r1, [r5, #12]
    1d3e:	f000 f887 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    1d42:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    1d44:	2018      	movs	r0, #24
    1d46:	f002 fa51 	bl	41ec <operator new(unsigned int)>
    1d4a:	4607      	mov	r7, r0
    1d4c:	2302      	movs	r3, #2
    1d4e:	2206      	movs	r2, #6
    1d50:	e9cd 6600 	strd	r6, r6, [sp]
    1d54:	68e9      	ldr	r1, [r5, #12]
    1d56:	f000 f87b 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    1d5a:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    1d5c:	2018      	movs	r0, #24
    1d5e:	f002 fa45 	bl	41ec <operator new(unsigned int)>
    1d62:	4607      	mov	r7, r0
    1d64:	2302      	movs	r3, #2
    1d66:	2207      	movs	r2, #7
    1d68:	e9cd 6600 	strd	r6, r6, [sp]
    1d6c:	68e9      	ldr	r1, [r5, #12]
    1d6e:	f000 f86f 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    @brief Resets the harware. All registers are set to default values,
    the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_INA260::reset(void) {
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1d72:	230f      	movs	r3, #15
    1d74:	6829      	ldr	r1, [r5, #0]
    1d76:	4632      	mov	r2, r6
    1d78:	a804      	add	r0, sp, #16
  AlertLimit =
    1d7a:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1d7c:	f000 f960 	bl	2040 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    1d80:	4631      	mov	r1, r6
    1d82:	a804      	add	r0, sp, #16
    1d84:	f000 f96e 	bl	2064 <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    1d88:	2002      	movs	r0, #2
    1d8a:	f002 f81d 	bl	3dc8 <delay>
  return true;
    1d8e:	e79a      	b.n	1cc6 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

00001d90 <Adafruit_INA260::readCurrent()>:
/*!
    @brief Reads and scales the current value of the Current register.
    @return The current current measurement in mA
*/
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
    1d90:	b500      	push	{lr}
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1d92:	2201      	movs	r2, #1
float Adafruit_INA260::readCurrent(void) {
    1d94:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    1d96:	68c1      	ldr	r1, [r0, #12]
    1d98:	2302      	movs	r3, #2
    1d9a:	a802      	add	r0, sp, #8
    1d9c:	e9cd 2200 	strd	r2, r2, [sp]
    1da0:	f000 f856 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (int16_t)current.read() * 1.25;
    1da4:	a802      	add	r0, sp, #8
    1da6:	f000 f929 	bl	1ffc <Adafruit_BusIO_Register::read()>
    1daa:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1dae:	b203      	sxth	r3, r0
    1db0:	ee00 3a10 	vmov	s0, r3
    1db4:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    1db8:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1dbc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1dc0:	b009      	add	sp, #36	; 0x24
    1dc2:	f85d fb04 	ldr.w	pc, [sp], #4
    1dc6:	bf00      	nop

00001dc8 <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    1dc8:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1dca:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1dcc:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1dce:	2401      	movs	r4, #1
    1dd0:	68c1      	ldr	r1, [r0, #12]
    1dd2:	461a      	mov	r2, r3
    1dd4:	a802      	add	r0, sp, #8
    1dd6:	e9cd 4400 	strd	r4, r4, [sp]
    1dda:	f000 f839 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    1dde:	a802      	add	r0, sp, #8
    1de0:	f000 f90c 	bl	1ffc <Adafruit_BusIO_Register::read()>
    1de4:	ee06 0a90 	vmov	s13, r0
    1de8:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1dec:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    1df0:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1df4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1df8:	b008      	add	sp, #32
    1dfa:	bd10      	pop	{r4, pc}

00001dfc <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    1dfc:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1dfe:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    1e00:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1e02:	68c1      	ldr	r1, [r0, #12]
    1e04:	2302      	movs	r3, #2
    1e06:	2203      	movs	r2, #3
    1e08:	a802      	add	r0, sp, #8
    1e0a:	e9cd 4400 	strd	r4, r4, [sp]
    1e0e:	f000 f81f 	bl	1e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    1e12:	a802      	add	r0, sp, #8
    1e14:	f000 f8f2 	bl	1ffc <Adafruit_BusIO_Register::read()>
    1e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1e1c:	fa00 f304 	lsl.w	r3, r0, r4
    1e20:	ee00 3a10 	vmov	s0, r3
}
    1e24:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    1e28:	b008      	add	sp, #32
    1e2a:	bd10      	pop	{r4, pc}

00001e2c <Adafruit_INA260::conversionReady()>:
/*!
    @brief Checks if the most recent one shot measurement has completed
    @return true if the conversion has completed
*/
/**************************************************************************/
bool Adafruit_INA260::conversionReady(void) {
    1e2c:	b500      	push	{lr}
    1e2e:	b083      	sub	sp, #12
  Adafruit_I2CRegisterBits conversion_ready =
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    1e30:	6841      	ldr	r1, [r0, #4]
    1e32:	2303      	movs	r3, #3
    1e34:	2201      	movs	r2, #1
    1e36:	4668      	mov	r0, sp
    1e38:	f000 f902 	bl	2040 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    1e3c:	4668      	mov	r0, sp
    1e3e:	f000 f903 	bl	2048 <Adafruit_BusIO_RegisterBits::read()>
}
    1e42:	3800      	subs	r0, #0
    1e44:	bf18      	it	ne
    1e46:	2001      	movne	r0, #1
    1e48:	b003      	add	sp, #12
    1e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    1e4e:	bf00      	nop

00001e50 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    1e50:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    1e52:	2300      	movs	r3, #0
  _address = reg_addr;
    1e54:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    1e56:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1e58:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    1e5c:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    1e5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    1e62:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    1e64:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    1e66:	7343      	strb	r3, [r0, #13]
}
    1e68:	4770      	bx	lr
    1e6a:	bf00      	nop

00001e6c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1e6c:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1e70:	4603      	mov	r3, r0
  if (_i2cdevice) {
    1e72:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    1e74:	b570      	push	{r4, r5, r6, lr}
    1e76:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    1e78:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    1e7c:	b140      	cbz	r0, 1e90 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    1e7e:	7b5c      	ldrb	r4, [r3, #13]
    1e80:	ab03      	add	r3, sp, #12
    1e82:	e9cd 3400 	strd	r3, r4, [sp]
    1e86:	2301      	movs	r3, #1
    1e88:	f000 f92a 	bl	20e0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    1e8c:	b004      	add	sp, #16
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    1e90:	6858      	ldr	r0, [r3, #4]
    1e92:	2800      	cmp	r0, #0
    1e94:	d0fa      	beq.n	1e8c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1e96:	7a1e      	ldrb	r6, [r3, #8]
    1e98:	fa5f f58c 	uxtb.w	r5, ip
    1e9c:	2e03      	cmp	r6, #3
    1e9e:	d021      	beq.n	1ee4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1ea0:	460c      	mov	r4, r1
    1ea2:	4696      	mov	lr, r2
    1ea4:	b176      	cbz	r6, 1ec4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1ea6:	2e02      	cmp	r6, #2
    1ea8:	d111      	bne.n	1ece <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    1eaa:	f065 057f 	orn	r5, r5, #127	; 0x7f
    1eae:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    1eb2:	7b5d      	ldrb	r5, [r3, #13]
    1eb4:	4672      	mov	r2, lr
    1eb6:	ab03      	add	r3, sp, #12
    1eb8:	4621      	mov	r1, r4
    1eba:	9500      	str	r5, [sp, #0]
    1ebc:	f000 fb3c 	bl	2538 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    1ec0:	b004      	add	sp, #16
    1ec2:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    1ec4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    1ec8:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1ecc:	e7f1      	b.n	1eb2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    1ece:	2e01      	cmp	r6, #1
    1ed0:	d1ef      	bne.n	1eb2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    1ed2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1ed6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    1eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1ede:	f88d 200c 	strb.w	r2, [sp, #12]
    1ee2:	e7e6      	b.n	1eb2 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1ee4:	7b5c      	ldrb	r4, [r3, #13]
    1ee6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1eea:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1eec:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1ef0:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    1ef2:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1ef6:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    1ef8:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1efc:	f000 fb1c 	bl	2538 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    1f00:	e7c4      	b.n	1e8c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    1f02:	bf00      	nop

00001f04 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    1f04:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    1f06:	b962      	cbnz	r2, 1f22 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    1f08:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    1f0a:	2c04      	cmp	r4, #4
    1f0c:	d824      	bhi.n	1f58 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1f0e:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1f10:	b95c      	cbnz	r4, 1f2a <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    1f12:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    1f16:	4622      	mov	r2, r4
    1f18:	4671      	mov	r1, lr
}
    1f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    1f1e:	f7ff bfa5 	b.w	1e6c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    1f22:	2a04      	cmp	r2, #4
    1f24:	4614      	mov	r4, r2
    1f26:	d817      	bhi.n	1f58 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1f28:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    1f2a:	f100 0e0f 	add.w	lr, r0, #15
    1f2e:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    1f32:	7b85      	ldrb	r5, [r0, #14]
    1f34:	f100 020e 	add.w	r2, r0, #14
    1f38:	fa50 f383 	uxtab	r3, r0, r3
    1f3c:	46f4      	mov	ip, lr
    1f3e:	b94d      	cbnz	r5, 1f54 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    1f40:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    1f44:	3b01      	subs	r3, #1
    value >>= 8;
    1f46:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    1f48:	f10c 0c01 	add.w	ip, ip, #1
    1f4c:	4293      	cmp	r3, r2
    1f4e:	d0e2      	beq.n	1f16 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    1f50:	2d00      	cmp	r5, #0
    1f52:	d0f5      	beq.n	1f40 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    1f54:	7019      	strb	r1, [r3, #0]
    1f56:	e7f5      	b.n	1f44 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    1f58:	2000      	movs	r0, #0
}
    1f5a:	bd30      	pop	{r4, r5, pc}

00001f5c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1f5c:	b510      	push	{r4, lr}
    1f5e:	4684      	mov	ip, r0
    1f60:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    1f62:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    1f64:	4614      	mov	r4, r2
    1f66:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    1f68:	b2c2      	uxtb	r2, r0
    1f6a:	f8ad 000c 	strh.w	r0, [sp, #12]
    1f6e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    1f72:	f8dc 0000 	ldr.w	r0, [ip]
    1f76:	b148      	cbz	r0, 1f8c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1f78:	2100      	movs	r1, #0
    1f7a:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1f7e:	9400      	str	r4, [sp, #0]
    1f80:	9101      	str	r1, [sp, #4]
    1f82:	a903      	add	r1, sp, #12
    1f84:	f000 f918 	bl	21b8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    1f88:	b004      	add	sp, #16
    1f8a:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1f8c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    1f90:	2800      	cmp	r0, #0
    1f92:	d0f9      	beq.n	1f88 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1f94:	f89c 1008 	ldrb.w	r1, [ip, #8]
    1f98:	2903      	cmp	r1, #3
    1f9a:	d01e      	beq.n	1fda <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1f9c:	b179      	cbz	r1, 1fbe <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1f9e:	2902      	cmp	r1, #2
    1fa0:	d112      	bne.n	1fc8 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    1fa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1fa6:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1faa:	21ff      	movs	r1, #255	; 0xff
    1fac:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1fb0:	9400      	str	r4, [sp, #0]
    1fb2:	9101      	str	r1, [sp, #4]
    1fb4:	a903      	add	r1, sp, #12
    1fb6:	f000 fb1b 	bl	25f0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1fba:	b004      	add	sp, #16
    1fbc:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    1fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1fc2:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1fc6:	e7f0      	b.n	1faa <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1fc8:	2901      	cmp	r1, #1
    1fca:	d1ee      	bne.n	1faa <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1fcc:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1fd0:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1fd4:	f88d 200c 	strb.w	r2, [sp, #12]
    1fd8:	e7e7      	b.n	1faa <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1fda:	21ff      	movs	r1, #255	; 0xff
    1fdc:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1fde:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    1fe2:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1fe6:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1fea:	9101      	str	r1, [sp, #4]
    1fec:	a903      	add	r1, sp, #12
    1fee:	3201      	adds	r2, #1
      addrbuffer[0] =
    1ff0:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1ff4:	f000 fafc 	bl	25f0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    1ff8:	e7c6      	b.n	1f88 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    1ffa:	bf00      	nop

00001ffc <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1ffc:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    1ffe:	f100 050f 	add.w	r5, r0, #15
    2002:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    2004:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    2006:	4629      	mov	r1, r5
    2008:	f7ff ffa8 	bl	1f5c <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    200c:	b1a0      	cbz	r0, 2038 <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    200e:	7b20      	ldrb	r0, [r4, #12]
    2010:	b170      	cbz	r0, 2030 <Adafruit_BusIO_Register::read()+0x34>
    2012:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    2014:	7ba6      	ldrb	r6, [r4, #14]
    2016:	4629      	mov	r1, r5
    2018:	f104 020e 	add.w	r2, r4, #14
    201c:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    201e:	2000      	movs	r0, #0
    value <<= 8;
    2020:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    2022:	b936      	cbnz	r6, 2032 <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    2024:	781c      	ldrb	r4, [r3, #0]
    2026:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    2028:	3b01      	subs	r3, #1
    202a:	3101      	adds	r1, #1
    202c:	4293      	cmp	r3, r2
    202e:	d1f7      	bne.n	2020 <Adafruit_BusIO_Register::read()+0x24>
}
    2030:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    2032:	780c      	ldrb	r4, [r1, #0]
    2034:	4320      	orrs	r0, r4
    2036:	e7f7      	b.n	2028 <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    2038:	f04f 30ff 	mov.w	r0, #4294967295
}
    203c:	bd70      	pop	{r4, r5, r6, pc}
    203e:	bf00      	nop

00002040 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    2040:	6001      	str	r1, [r0, #0]
  _bits = bits;
    2042:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    2044:	7143      	strb	r3, [r0, #5]
}
    2046:	4770      	bx	lr

00002048 <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    2048:	b510      	push	{r4, lr}
    204a:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    204c:	6800      	ldr	r0, [r0, #0]
    204e:	f7ff ffd5 	bl	1ffc <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    2052:	2301      	movs	r3, #1
    2054:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    2056:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    2058:	408b      	lsls	r3, r1
  val >>= _shift;
    205a:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    205c:	3b01      	subs	r3, #1
}
    205e:	4018      	ands	r0, r3
    2060:	bd10      	pop	{r4, pc}
    2062:	bf00      	nop

00002064 <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    2064:	b538      	push	{r3, r4, r5, lr}
    2066:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    2068:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    206a:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    206c:	f7ff ffc6 	bl	1ffc <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    2070:	792a      	ldrb	r2, [r5, #4]
    2072:	2301      	movs	r3, #1
    2074:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    2076:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    2078:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    207a:	3b01      	subs	r3, #1
  data &= mask;
    207c:	401c      	ands	r4, r3
  mask <<= _shift;
    207e:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    2080:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    2082:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    2086:	7b2a      	ldrb	r2, [r5, #12]
    2088:	4628      	mov	r0, r5
    208a:	4321      	orrs	r1, r4
}
    208c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    2090:	f7ff bf38 	b.w	1f04 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

00002094 <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    2094:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    2098:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    209a:	2220      	movs	r2, #32
  _addr = addr;
    209c:	7001      	strb	r1, [r0, #0]
  _begun = false;
    209e:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    20a2:	60c2      	str	r2, [r0, #12]
}
    20a4:	4770      	bx	lr
    20a6:	bf00      	nop

000020a8 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    20a8:	b538      	push	{r3, r4, r5, lr}
    20aa:	4604      	mov	r4, r0
  _wire->begin();
    20ac:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    20ae:	460d      	mov	r5, r1
  _wire->begin();
    20b0:	f00a fdf2 	bl	cc98 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    20b4:	2101      	movs	r1, #1
    20b6:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    20b8:	b90d      	cbnz	r5, 20be <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    20ba:	4608      	mov	r0, r1
}
    20bc:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    20be:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    20c0:	6862      	ldr	r2, [r4, #4]
    20c2:	4088      	lsls	r0, r1
		transmitting = 1;
    20c4:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    20c8:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    20cc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    20d0:	6860      	ldr	r0, [r4, #4]
    20d2:	f7ff f909 	bl	12e8 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    20d6:	fab0 f080 	clz	r0, r0
    20da:	0940      	lsrs	r0, r0, #5
}
    20dc:	bd38      	pop	{r3, r4, r5, pc}
    20de:	bf00      	nop

000020e0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    20e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20e4:	9f07      	ldr	r7, [sp, #28]
    20e6:	4615      	mov	r5, r2
    20e8:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    20ea:	68c3      	ldr	r3, [r0, #12]
    20ec:	443a      	add	r2, r7
    20ee:	429a      	cmp	r2, r3
    20f0:	d816      	bhi.n	2120 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    20f2:	7802      	ldrb	r2, [r0, #0]
    20f4:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    20f6:	6843      	ldr	r3, [r0, #4]
    20f8:	460e      	mov	r6, r1
    20fa:	0052      	lsls	r2, r2, #1
    20fc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    2100:	2201      	movs	r2, #1
    2102:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    2106:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    210a:	b167      	cbz	r7, 2126 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    210c:	9b06      	ldr	r3, [sp, #24]
    210e:	b153      	cbz	r3, 2126 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    2110:	6840      	ldr	r0, [r0, #4]
    2112:	463a      	mov	r2, r7
    2114:	9906      	ldr	r1, [sp, #24]
    2116:	6803      	ldr	r3, [r0, #0]
    2118:	685b      	ldr	r3, [r3, #4]
    211a:	4798      	blx	r3
    211c:	4287      	cmp	r7, r0
    211e:	d002      	beq.n	2126 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    2120:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    2122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    2126:	6860      	ldr	r0, [r4, #4]
    2128:	4631      	mov	r1, r6
    212a:	462a      	mov	r2, r5
    212c:	6803      	ldr	r3, [r0, #0]
    212e:	685b      	ldr	r3, [r3, #4]
    2130:	4798      	blx	r3
    2132:	4285      	cmp	r5, r0
    2134:	d1f4      	bne.n	2120 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    2136:	4641      	mov	r1, r8
    2138:	6860      	ldr	r0, [r4, #4]
    213a:	f7ff f8d5 	bl	12e8 <TwoWire::endTransmission(unsigned char)>
    213e:	fab0 f080 	clz	r0, r0
    2142:	0940      	lsrs	r0, r0, #5
}
    2144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002148 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    2148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    214c:	4615      	mov	r5, r2
    214e:	4606      	mov	r6, r0
    2150:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    2152:	b2d2      	uxtb	r2, r2
    2154:	7801      	ldrb	r1, [r0, #0]
    2156:	6840      	ldr	r0, [r0, #4]
    2158:	f7ff f944 	bl	13e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    215c:	4285      	cmp	r5, r0
    215e:	d124      	bne.n	21aa <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    2160:	b305      	cbz	r5, 21a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    2162:	2400      	movs	r4, #0
    2164:	f8df 904c 	ldr.w	r9, [pc, #76]	; 21b4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    2168:	46a0      	mov	r8, r4
    216a:	e013      	b.n	2194 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    216c:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    2170:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2174:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    2176:	f10c 0201 	add.w	r2, ip, #1
    217a:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    217c:	d918      	bls.n	21b0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    217e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2182:	f89c 301a 	ldrb.w	r3, [ip, #26]
    2186:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    2188:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    218c:	b2a4      	uxth	r4, r4
    218e:	42a5      	cmp	r5, r4
    2190:	46a0      	mov	r8, r4
    2192:	d907      	bls.n	21a4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    2194:	6870      	ldr	r0, [r6, #4]
    2196:	6802      	ldr	r2, [r0, #0]
    2198:	6952      	ldr	r2, [r2, #20]
    219a:	454a      	cmp	r2, r9
    219c:	d0e6      	beq.n	216c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    219e:	4790      	blx	r2
    21a0:	b2c3      	uxtb	r3, r0
    21a2:	e7f0      	b.n	2186 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    21a4:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    21a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    21aa:	2000      	movs	r0, #0
}
    21ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21b0:	23ff      	movs	r3, #255	; 0xff
    21b2:	e7e8      	b.n	2186 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    21b4:	00001091 	.word	0x00001091

000021b8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    21b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    21bc:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    21be:	b082      	sub	sp, #8
    21c0:	461f      	mov	r7, r3
    21c2:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    21c4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    21c8:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    21ca:	e9cd 4400 	strd	r4, r4, [sp]
    21ce:	f7ff ff87 	bl	20e0 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    21d2:	b928      	cbnz	r0, 21e0 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    21d4:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    21d8:	4640      	mov	r0, r8
    21da:	b002      	add	sp, #8
    21dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    21e0:	4680      	mov	r8, r0
    21e2:	b915      	cbnz	r5, 21ea <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    21e4:	e7f8      	b.n	21d8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    21e6:	42a5      	cmp	r5, r4
    21e8:	d9f6      	bls.n	21d8 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    21ea:	1b2a      	subs	r2, r5, r4
    21ec:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    21ee:	1939      	adds	r1, r7, r4
    21f0:	4630      	mov	r0, r6
    21f2:	429a      	cmp	r2, r3
    21f4:	bf28      	it	cs
    21f6:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    21f8:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    21fa:	42a3      	cmp	r3, r4
    pos += read_len;
    21fc:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    21fe:	bf8c      	ite	hi
    2200:	2300      	movhi	r3, #0
    2202:	2301      	movls	r3, #1
    2204:	f7ff ffa0 	bl	2148 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    2208:	2800      	cmp	r0, #0
    220a:	d1ec      	bne.n	21e6 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    220c:	e7e2      	b.n	21d4 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    220e:	bf00      	nop

00002210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    2210:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    2212:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    2214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    2218:	bf0c      	ite	eq
    221a:	2301      	moveq	r3, #1
    221c:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    221e:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    2220:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2224:	4e63      	ldr	r6, [pc, #396]	; (23b4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    2226:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    222a:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    222c:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    222e:	bf0c      	ite	eq
    2230:	f04f 0a01 	moveq.w	sl, #1
    2234:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    2238:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    223c:	2a00      	cmp	r2, #0
    223e:	f000 80b6 	beq.w	23ae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    2242:	3a01      	subs	r2, #1
    2244:	4604      	mov	r4, r0
    2246:	b2f6      	uxtb	r6, r6
    2248:	4688      	mov	r8, r1
    224a:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    224c:	f8df b170 	ldr.w	fp, [pc, #368]	; 23c0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    2250:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    2252:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    2254:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    2256:	2e00      	cmp	r6, #0
    2258:	d141      	bne.n	22de <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    225a:	7b63      	ldrb	r3, [r4, #13]
    225c:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    2260:	d175      	bne.n	234e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    2262:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2266:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    226a:	bf14      	ite	ne
    226c:	2301      	movne	r3, #1
    226e:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2270:	1c42      	adds	r2, r0, #1
    2272:	d02f      	beq.n	22d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    2274:	4553      	cmp	r3, sl
    2276:	d02d      	beq.n	22d4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    2278:	4619      	mov	r1, r3
    227a:	b2c0      	uxtb	r0, r0
    227c:	9301      	str	r3, [sp, #4]
    227e:	f001 fe21 	bl	3ec4 <digitalWrite>
        towrite = send & b;
    2282:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    2284:	2101      	movs	r1, #1
    2286:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    2288:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    228a:	f001 fe1b 	bl	3ec4 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    228e:	f994 0011 	ldrsb.w	r0, [r4, #17]
    2292:	1c42      	adds	r2, r0, #1
    2294:	d004      	beq.n	22a0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    2296:	b2c0      	uxtb	r0, r0
    2298:	f001 fe3e 	bl	3f18 <digitalRead>
    229c:	b100      	cbz	r0, 22a0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    229e:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    22a0:	2100      	movs	r1, #0
    22a2:	7be0      	ldrb	r0, [r4, #15]
    22a4:	f001 fe0e 	bl	3ec4 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    22a8:	f994 3011 	ldrsb.w	r3, [r4, #17]
    22ac:	3301      	adds	r3, #1
        buffer[i] = reply;
    22ae:	bf18      	it	ne
    22b0:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    22b4:	7b23      	ldrb	r3, [r4, #12]
    22b6:	b94b      	cbnz	r3, 22cc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    22b8:	006d      	lsls	r5, r5, #1
    22ba:	b2ed      	uxtb	r5, r5
    22bc:	2d00      	cmp	r5, #0
    22be:	d1ca      	bne.n	2256 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    22c0:	9b03      	ldr	r3, [sp, #12]
    22c2:	4598      	cmp	r8, r3
    22c4:	d073      	beq.n	23ae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    22c6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    22ca:	e7c2      	b.n	2252 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    22cc:	086d      	lsrs	r5, r5, #1
    22ce:	2d00      	cmp	r5, #0
    22d0:	d1c1      	bne.n	2256 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    22d2:	e7f5      	b.n	22c0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    22d4:	2101      	movs	r1, #1
    22d6:	7be0      	ldrb	r0, [r4, #15]
    22d8:	f001 fdf4 	bl	3ec4 <digitalWrite>
        if (bitdelay_us) {
    22dc:	e7d7      	b.n	228e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    22de:	4b36      	ldr	r3, [pc, #216]	; (23b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    22e0:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    22e4:	681a      	ldr	r2, [r3, #0]
    22e6:	4b35      	ldr	r3, [pc, #212]	; (23bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    22e8:	fba3 3202 	umull	r3, r2, r3, r2
    22ec:	0c92      	lsrs	r2, r2, #18
    22ee:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    22f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    22f6:	1a5b      	subs	r3, r3, r1
    22f8:	429a      	cmp	r2, r3
    22fa:	d8fa      	bhi.n	22f2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    22fc:	7b63      	ldrb	r3, [r4, #13]
    22fe:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    2302:	d140      	bne.n	2386 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    2304:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2308:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    230c:	bf14      	ite	ne
    230e:	2101      	movne	r1, #1
    2310:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    2312:	1c43      	adds	r3, r0, #1
    2314:	d007      	beq.n	2326 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    2316:	4551      	cmp	r1, sl
    2318:	d005      	beq.n	2326 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    231a:	b2c0      	uxtb	r0, r0
    231c:	9101      	str	r1, [sp, #4]
    231e:	f001 fdd1 	bl	3ec4 <digitalWrite>
        towrite = send & b;
    2322:	9901      	ldr	r1, [sp, #4]
    2324:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    2326:	2101      	movs	r1, #1
    2328:	7be0      	ldrb	r0, [r4, #15]
    232a:	f001 fdcb 	bl	3ec4 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    232e:	4b22      	ldr	r3, [pc, #136]	; (23b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2330:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2334:	681a      	ldr	r2, [r3, #0]
    2336:	4b21      	ldr	r3, [pc, #132]	; (23bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    2338:	fba3 3202 	umull	r3, r2, r3, r2
    233c:	0c92      	lsrs	r2, r2, #18
    233e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    2342:	f8db 3004 	ldr.w	r3, [fp, #4]
    2346:	1a5b      	subs	r3, r3, r1
    2348:	429a      	cmp	r2, r3
    234a:	d8fa      	bhi.n	2342 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    234c:	e79f      	b.n	228e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    234e:	2101      	movs	r1, #1
    2350:	7be0      	ldrb	r0, [r4, #15]
    2352:	f001 fdb7 	bl	3ec4 <digitalWrite>
        if (_mosi != -1) {
    2356:	f994 0010 	ldrsb.w	r0, [r4, #16]
    235a:	1c43      	adds	r3, r0, #1
    235c:	d004      	beq.n	2368 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    235e:	b2c0      	uxtb	r0, r0
    2360:	ea09 0105 	and.w	r1, r9, r5
    2364:	f001 fdae 	bl	3ec4 <digitalWrite>
        digitalWrite(_sck, LOW);
    2368:	2100      	movs	r1, #0
    236a:	7be0      	ldrb	r0, [r4, #15]
    236c:	f001 fdaa 	bl	3ec4 <digitalWrite>
        if (_miso != -1) {
    2370:	f994 0011 	ldrsb.w	r0, [r4, #17]
    2374:	1c41      	adds	r1, r0, #1
    2376:	d09d      	beq.n	22b4 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    2378:	b2c0      	uxtb	r0, r0
    237a:	f001 fdcd 	bl	3f18 <digitalRead>
    237e:	2800      	cmp	r0, #0
    2380:	d092      	beq.n	22a8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    2382:	432f      	orrs	r7, r5
    2384:	e790      	b.n	22a8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    2386:	2101      	movs	r1, #1
    2388:	7be0      	ldrb	r0, [r4, #15]
    238a:	f001 fd9b 	bl	3ec4 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    238e:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    2390:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    2394:	681a      	ldr	r2, [r3, #0]
    2396:	4b09      	ldr	r3, [pc, #36]	; (23bc <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    2398:	fba3 3202 	umull	r3, r2, r3, r2
    239c:	0c92      	lsrs	r2, r2, #18
    239e:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    23a2:	f8db 3004 	ldr.w	r3, [fp, #4]
    23a6:	1a5b      	subs	r3, r3, r1
    23a8:	429a      	cmp	r2, r3
    23aa:	d8fa      	bhi.n	23a2 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    23ac:	e7d3      	b.n	2356 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    23ae:	b005      	add	sp, #20
    23b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23b4:	0007a120 	.word	0x0007a120
    23b8:	20001304 	.word	0x20001304
    23bc:	431bde83 	.word	0x431bde83
    23c0:	e0001000 	.word	0xe0001000

000023c4 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    23c4:	b430      	push	{r4, r5}
    23c6:	b082      	sub	sp, #8
    23c8:	460c      	mov	r4, r1
    23ca:	ab02      	add	r3, sp, #8
    23cc:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    23d0:	7cc3      	ldrb	r3, [r0, #19]
    23d2:	2b00      	cmp	r3, #0
    23d4:	d030      	beq.n	2438 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    23d6:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    23d8:	7cc3      	ldrb	r3, [r0, #19]
    23da:	07da      	lsls	r2, r3, #31
    23dc:	d508      	bpl.n	23f0 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    23de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    23e2:	6945      	ldr	r5, [r0, #20]
    23e4:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    23e8:	402a      	ands	r2, r5
    23ea:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    23ec:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			}
			if (interruptMasksUsed & 0x02) {
    23f0:	079d      	lsls	r5, r3, #30
    23f2:	d508      	bpl.n	2406 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    23f4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    23f8:	6985      	ldr	r5, [r0, #24]
    23fa:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    23fe:	402a      	ands	r2, r5
    2400:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    2402:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			}
			if (interruptMasksUsed & 0x04) {
    2406:	0759      	lsls	r1, r3, #29
    2408:	d508      	bpl.n	241c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    240a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    240e:	69c5      	ldr	r5, [r0, #28]
    2410:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    2414:	402a      	ands	r2, r5
    2416:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    2418:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			}
			if (interruptMasksUsed & 0x08) {
    241c:	071a      	lsls	r2, r3, #28
    241e:	d508      	bpl.n	2432 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    2420:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2424:	6a05      	ldr	r5, [r0, #32]
    2426:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    242a:	402a      	ands	r2, r5
    242c:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    242e:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			}
			if (interruptMasksUsed & 0x10) {
    2432:	06db      	lsls	r3, r3, #27
    2434:	d42f      	bmi.n	2496 <SPIClass::beginTransaction(SPISettings)+0xd2>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    2436:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    2438:	6883      	ldr	r3, [r0, #8]
    243a:	429c      	cmp	r4, r3
    243c:	d035      	beq.n	24aa <SPIClass::beginTransaction(SPISettings)+0xe6>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    243e:	4b22      	ldr	r3, [pc, #136]	; (24c8 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    2440:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    2442:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    2444:	4a21      	ldr	r2, [pc, #132]	; (24cc <SPIClass::beginTransaction(SPISettings)+0x108>)
    2446:	f3c3 1101 	ubfx	r1, r3, #4, #2
    244a:	f3c3 6382 	ubfx	r3, r3, #26, #3
    244e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2452:	3301      	adds	r3, #1
    2454:	fbb1 f2f3 	udiv	r2, r1, r3
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    2458:	b1cc      	cbz	r4, 248e <SPIClass::beginTransaction(SPISettings)+0xca>

			if (d && clkhz/d > _clock) d++;
    245a:	4294      	cmp	r4, r2
    245c:	d827      	bhi.n	24ae <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    245e:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    2462:	fbb2 f2f3 	udiv	r2, r2, r3
    2466:	4294      	cmp	r4, r2
    2468:	d32c      	bcc.n	24c4 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    246a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    246e:	d320      	bcc.n	24b2 <SPIClass::beginTransaction(SPISettings)+0xee>
    2470:	4c17      	ldr	r4, [pc, #92]	; (24d0 <SPIClass::beginTransaction(SPISettings)+0x10c>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    2472:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    2474:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    2476:	2203      	movs	r2, #3
		port().CR = 0;
    2478:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    247a:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    247c:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    247e:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    2480:	2201      	movs	r2, #1
		port().CCR = _ccr;
    2482:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    2484:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    2486:	611a      	str	r2, [r3, #16]
	}
    2488:	b002      	add	sp, #8
    248a:	bc30      	pop	{r4, r5}
    248c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    248e:	4299      	cmp	r1, r3
    2490:	d3ef      	bcc.n	2472 <SPIClass::beginTransaction(SPISettings)+0xae>
    2492:	1c53      	adds	r3, r2, #1
    2494:	e7e9      	b.n	246a <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    2496:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    249a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    249c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    24a0:	400b      	ands	r3, r1
    24a2:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    24a4:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    24a8:	e7c5      	b.n	2436 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    24aa:	68c4      	ldr	r4, [r0, #12]
    24ac:	e7e2      	b.n	2474 <SPIClass::beginTransaction(SPISettings)+0xb0>
    24ae:	2400      	movs	r4, #0
    24b0:	e7df      	b.n	2472 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    24b2:	2b02      	cmp	r3, #2
    24b4:	d9fb      	bls.n	24ae <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    24b6:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    24b8:	085a      	lsrs	r2, r3, #1
    24ba:	0214      	lsls	r4, r2, #8
    24bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    24c0:	431c      	orrs	r4, r3
    24c2:	e7d6      	b.n	2472 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    24c4:	461a      	mov	r2, r3
    24c6:	e7e4      	b.n	2492 <SPIClass::beginTransaction(SPISettings)+0xce>
    24c8:	400fc000 	.word	0x400fc000
    24cc:	2000089c 	.word	0x2000089c
    24d0:	007f7fff 	.word	0x007f7fff

000024d4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    24d4:	b510      	push	{r4, lr}
    24d6:	4604      	mov	r4, r0
  if (_cs != -1) {
    24d8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    24dc:	1c43      	adds	r3, r0, #1
    24de:	d003      	beq.n	24e8 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    24e0:	2101      	movs	r1, #1
    24e2:	b2c0      	uxtb	r0, r0
    24e4:	f001 fcee 	bl	3ec4 <digitalWrite>
  if (_spi) {
    24e8:	6823      	ldr	r3, [r4, #0]
    24ea:	b323      	cbz	r3, 2536 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    24ec:	7cda      	ldrb	r2, [r3, #19]
    24ee:	b312      	cbz	r2, 2536 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    24f0:	07d1      	lsls	r1, r2, #31
    24f2:	d504      	bpl.n	24fe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    24f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    24f6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    24fa:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    24fe:	0794      	lsls	r4, r2, #30
    2500:	d504      	bpl.n	250c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    2502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    2504:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2508:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    250c:	0750      	lsls	r0, r2, #29
    250e:	d504      	bpl.n	251a <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    2510:	6b18      	ldr	r0, [r3, #48]	; 0x30
    2512:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2516:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    251a:	0711      	lsls	r1, r2, #28
    251c:	d504      	bpl.n	2528 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    251e:	6b58      	ldr	r0, [r3, #52]	; 0x34
    2520:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2524:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    2528:	06d2      	lsls	r2, r2, #27
    252a:	d504      	bpl.n	2536 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    252c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    252e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2532:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    2536:	bd10      	pop	{r4, pc}

00002538 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    2538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    253c:	4604      	mov	r4, r0
    253e:	b082      	sub	sp, #8
  if (_spi) {
    2540:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    2542:	468a      	mov	sl, r1
    2544:	4690      	mov	r8, r2
    2546:	461e      	mov	r6, r3
    2548:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    254a:	b120      	cbz	r0, 2556 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    254c:	6863      	ldr	r3, [r4, #4]
    254e:	e893 0006 	ldmia.w	r3, {r1, r2}
    2552:	f7ff ff37 	bl	23c4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    2556:	f994 000e 	ldrsb.w	r0, [r4, #14]
    255a:	1c43      	adds	r3, r0, #1
    255c:	d142      	bne.n	25e4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    255e:	b1d5      	cbz	r5, 2596 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    2560:	3e01      	subs	r6, #1
    2562:	eb06 0905 	add.w	r9, r6, r5
    2566:	f10d 0507 	add.w	r5, sp, #7
    256a:	e003      	b.n	2574 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    256c:	f7ff fe50 	bl	2210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    2570:	454e      	cmp	r6, r9
    2572:	d010      	beq.n	2596 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    2574:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    2578:	2201      	movs	r2, #1
  if (_spi) {
    257a:	6827      	ldr	r7, [r4, #0]
    257c:	4629      	mov	r1, r5
    257e:	4620      	mov	r0, r4
  uint8_t data = send;
    2580:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2584:	2f00      	cmp	r7, #0
    2586:	d0f1      	beq.n	256c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    2588:	4613      	mov	r3, r2
    258a:	4638      	mov	r0, r7
    258c:	462a      	mov	r2, r5
    258e:	f000 f9c1 	bl	2914 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    2592:	454e      	cmp	r6, r9
    2594:	d1ee      	bne.n	2574 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    2596:	f1b8 0f00 	cmp.w	r8, #0
    259a:	d01c      	beq.n	25d6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    259c:	44d0      	add	r8, sl
    259e:	f10a 36ff 	add.w	r6, sl, #4294967295
    25a2:	f10d 0507 	add.w	r5, sp, #7
    25a6:	f108 38ff 	add.w	r8, r8, #4294967295
    25aa:	e003      	b.n	25b4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    25ac:	f7ff fe30 	bl	2210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    25b0:	45b0      	cmp	r8, r6
    25b2:	d010      	beq.n	25d6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    25b4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    25b8:	2201      	movs	r2, #1
  if (_spi) {
    25ba:	6827      	ldr	r7, [r4, #0]
    25bc:	4629      	mov	r1, r5
    25be:	4620      	mov	r0, r4
  uint8_t data = send;
    25c0:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    25c4:	2f00      	cmp	r7, #0
    25c6:	d0f1      	beq.n	25ac <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    25c8:	4613      	mov	r3, r2
    25ca:	4638      	mov	r0, r7
    25cc:	462a      	mov	r2, r5
    25ce:	f000 f9a1 	bl	2914 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    25d2:	45b0      	cmp	r8, r6
    25d4:	d1ee      	bne.n	25b4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    25d6:	4620      	mov	r0, r4
    25d8:	f7ff ff7c 	bl	24d4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    25dc:	2001      	movs	r0, #1
    25de:	b002      	add	sp, #8
    25e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    25e4:	b2c0      	uxtb	r0, r0
    25e6:	2100      	movs	r1, #0
    25e8:	f001 fc6c 	bl	3ec4 <digitalWrite>
    25ec:	e7b7      	b.n	255e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    25ee:	bf00      	nop

000025f0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    25f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25f4:	4604      	mov	r4, r0
    25f6:	b083      	sub	sp, #12
  if (_spi) {
    25f8:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    25fa:	460f      	mov	r7, r1
    25fc:	4615      	mov	r5, r2
    25fe:	469b      	mov	fp, r3
    2600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    2604:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    2608:	b120      	cbz	r0, 2614 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    260a:	6863      	ldr	r3, [r4, #4]
    260c:	e893 0006 	ldmia.w	r3, {r1, r2}
    2610:	f7ff fed8 	bl	23c4 <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    2614:	f994 000e 	ldrsb.w	r0, [r4, #14]
    2618:	1c43      	adds	r3, r0, #1
    261a:	d148      	bne.n	26ae <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    261c:	b1d5      	cbz	r5, 2654 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    261e:	3f01      	subs	r7, #1
    2620:	eb07 0905 	add.w	r9, r7, r5
    2624:	f10d 0507 	add.w	r5, sp, #7
    2628:	e003      	b.n	2632 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    262a:	f7ff fdf1 	bl	2210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    262e:	454f      	cmp	r7, r9
    2630:	d010      	beq.n	2654 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    2632:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    2636:	2201      	movs	r2, #1
  if (_spi) {
    2638:	6826      	ldr	r6, [r4, #0]
    263a:	4629      	mov	r1, r5
    263c:	4620      	mov	r0, r4
  uint8_t data = send;
    263e:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    2642:	2e00      	cmp	r6, #0
    2644:	d0f1      	beq.n	262a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    2646:	4613      	mov	r3, r2
    2648:	4630      	mov	r0, r6
    264a:	462a      	mov	r2, r5
    264c:	f000 f962 	bl	2914 <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    2650:	454f      	cmp	r7, r9
    2652:	d1ee      	bne.n	2632 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    2654:	f1ba 0f00 	cmp.w	sl, #0
    2658:	d022      	beq.n	26a0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    265a:	44da      	add	sl, fp
    265c:	f10b 36ff 	add.w	r6, fp, #4294967295
    2660:	f10d 0507 	add.w	r5, sp, #7
    2664:	f10a 3aff 	add.w	sl, sl, #4294967295
    2668:	e007      	b.n	267a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    266a:	f7ff fdd1 	bl	2210 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    266e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    2672:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    2676:	45b2      	cmp	sl, r6
    2678:	d012      	beq.n	26a0 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    267a:	6827      	ldr	r7, [r4, #0]
    267c:	2201      	movs	r2, #1
    267e:	4629      	mov	r1, r5
    2680:	4620      	mov	r0, r4
  uint8_t data = send;
    2682:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    2686:	2f00      	cmp	r7, #0
    2688:	d0ef      	beq.n	266a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    268a:	4613      	mov	r3, r2
    268c:	4638      	mov	r0, r7
    268e:	462a      	mov	r2, r5
    2690:	f000 f940 	bl	2914 <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    2694:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    2698:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    269c:	45b2      	cmp	sl, r6
    269e:	d1ec      	bne.n	267a <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    26a0:	4620      	mov	r0, r4
    26a2:	f7ff ff17 	bl	24d4 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    26a6:	2001      	movs	r0, #1
    26a8:	b003      	add	sp, #12
    26aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    26ae:	b2c0      	uxtb	r0, r0
    26b0:	2100      	movs	r1, #0
    26b2:	f001 fc07 	bl	3ec4 <digitalWrite>
    26b6:	e7b1      	b.n	261c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

000026b8 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    26b8:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    26bc:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    26be:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    26c2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    26c4:	d101      	bne.n	26ca <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    26c6:	6883      	ldr	r3, [r0, #8]
    26c8:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    26ca:	f000 b981 	b.w	29d0 <EventResponder::triggerEventNotImmediate()>
    26ce:	bf00      	nop

000026d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    26d0:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    26d2:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    26d4:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    26d8:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    26da:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    26dc:	b1a3      	cbz	r3, 2708 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    26de:	b321      	cbz	r1, 272a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    26e0:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    26e4:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    26e6:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    26e8:	6f25      	ldr	r5, [r4, #112]	; 0x70
    26ea:	07af      	lsls	r7, r5, #30
    26ec:	d407      	bmi.n	26fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    26ee:	4615      	mov	r5, r2
				count_read--;
    26f0:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    26f2:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    26f4:	b11a      	cbz	r2, 26fe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    26f6:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    26fa:	462a      	mov	r2, r5
    26fc:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    26fe:	6965      	ldr	r5, [r4, #20]
    2700:	07ed      	lsls	r5, r5, #31
    2702:	d5f1      	bpl.n	26e8 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    2704:	2b00      	cmp	r3, #0
    2706:	d1ea      	bne.n	26de <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2708:	b16e      	cbz	r6, 2726 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    270a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    270c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    270e:	0789      	lsls	r1, r1, #30
    2710:	d4fa      	bmi.n	2708 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    2712:	4611      	mov	r1, r2
			count_read--;
    2714:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    2716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    2718:	2a00      	cmp	r2, #0
    271a:	d0f5      	beq.n	2708 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    271c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    2720:	460a      	mov	r2, r1
	while (count_read) {
    2722:	2e00      	cmp	r6, #0
    2724:	d1f1      	bne.n	270a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    2726:	bcf0      	pop	{r4, r5, r6, r7}
    2728:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    272a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    272e:	e7d9      	b.n	26e4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

00002730 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2730:	4b32      	ldr	r3, [pc, #200]	; (27fc <_spi_dma_rxISR1()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2732:	4933      	ldr	r1, [pc, #204]	; (2800 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2734:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    2736:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    273a:	7920      	ldrb	r0, [r4, #4]
    273c:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    273e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    2740:	f895 c004 	ldrb.w	ip, [r5, #4]
    2744:	f881 c01c 	strb.w	ip, [r1, #28]
    2748:	7708      	strb	r0, [r1, #28]
    274a:	b152      	cbz	r2, 2762 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    274c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2750:	d323      	bcc.n	279a <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    2752:	492c      	ldr	r1, [pc, #176]	; (2804 <_spi_dma_rxISR1()+0xd4>)
    2754:	4411      	add	r1, r2
		DMA_SERQ = channel;
    2756:	4a2a      	ldr	r2, [pc, #168]	; (2800 <_spi_dma_rxISR1()+0xd0>)
    2758:	6419      	str	r1, [r3, #64]	; 0x40
    275a:	76d0      	strb	r0, [r2, #27]
    275c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2760:	bd30      	pop	{r4, r5, pc}
    2762:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2764:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2766:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2768:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    276a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    276e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2770:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    2772:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    2776:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2778:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    277a:	6804      	ldr	r4, [r0, #0]
    277c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    277e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    2782:	4b21      	ldr	r3, [pc, #132]	; (2808 <_spi_dma_rxISR1()+0xd8>)
    2784:	429c      	cmp	r4, r3
    2786:	d126      	bne.n	27d6 <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2788:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    278a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    278c:	2b02      	cmp	r3, #2
		_data = data;
    278e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2790:	d126      	bne.n	27e0 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    2792:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2798:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    279a:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    279c:	8be9      	ldrh	r1, [r5, #30]
    279e:	0409      	lsls	r1, r1, #16
    27a0:	d422      	bmi.n	27e8 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    27a2:	b292      	uxth	r2, r2
    27a4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    27a6:	6821      	ldr	r1, [r4, #0]
    27a8:	8bec      	ldrh	r4, [r5, #30]
    27aa:	b2a4      	uxth	r4, r4
    27ac:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    27ae:	8bcc      	ldrh	r4, [r1, #30]
    27b0:	0424      	lsls	r4, r4, #16
    27b2:	d505      	bpl.n	27c0 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    27b4:	8bcc      	ldrh	r4, [r1, #30]
    27b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    27ba:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    27be:	4322      	orrs	r2, r4
    27c0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    27c2:	8bca      	ldrh	r2, [r1, #30]
    27c4:	b292      	uxth	r2, r2
    27c6:	82ca      	strh	r2, [r1, #22]
    27c8:	2100      	movs	r1, #0
    27ca:	4a0d      	ldr	r2, [pc, #52]	; (2800 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    27cc:	6419      	str	r1, [r3, #64]	; 0x40
    27ce:	76d0      	strb	r0, [r2, #27]
    27d0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    27d4:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    27d6:	4623      	mov	r3, r4
    27d8:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    27da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    27de:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    27e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    27e4:	f000 b8f4 	b.w	29d0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    27e8:	8be9      	ldrh	r1, [r5, #30]
    27ea:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    27ee:	b292      	uxth	r2, r2
    27f0:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    27f4:	ea41 010e 	orr.w	r1, r1, lr
    27f8:	83e9      	strh	r1, [r5, #30]
    27fa:	e7d4      	b.n	27a6 <_spi_dma_rxISR1()+0x76>
    27fc:	200024d8 	.word	0x200024d8
    2800:	400e8000 	.word	0x400e8000
    2804:	ffff8001 	.word	0xffff8001
    2808:	000026b9 	.word	0x000026b9

0000280c <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    280c:	4b32      	ldr	r3, [pc, #200]	; (28d8 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    280e:	4933      	ldr	r1, [pc, #204]	; (28dc <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2810:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    2812:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    2816:	7920      	ldrb	r0, [r4, #4]
    2818:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    281a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    281c:	f895 c004 	ldrb.w	ip, [r5, #4]
    2820:	f881 c01c 	strb.w	ip, [r1, #28]
    2824:	7708      	strb	r0, [r1, #28]
    2826:	b152      	cbz	r2, 283e <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    2828:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    282c:	d323      	bcc.n	2876 <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    282e:	492c      	ldr	r1, [pc, #176]	; (28e0 <_spi_dma_rxISR0()+0xd4>)
    2830:	4411      	add	r1, r2
		DMA_SERQ = channel;
    2832:	4a2a      	ldr	r2, [pc, #168]	; (28dc <_spi_dma_rxISR0()+0xd0>)
    2834:	6419      	str	r1, [r3, #64]	; 0x40
    2836:	76d0      	strb	r0, [r2, #27]
    2838:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    283c:	bd30      	pop	{r4, r5, pc}
    283e:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2840:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    2842:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    2844:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    2846:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    284a:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    284c:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    284e:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    2852:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2854:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2856:	6804      	ldr	r4, [r0, #0]
    2858:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    285a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    285e:	4b21      	ldr	r3, [pc, #132]	; (28e4 <_spi_dma_rxISR0()+0xd8>)
    2860:	429c      	cmp	r4, r3
    2862:	d126      	bne.n	28b2 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    2864:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    2866:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2868:	2b02      	cmp	r3, #2
		_data = data;
    286a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    286c:	d126      	bne.n	28bc <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    286e:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2874:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2876:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2878:	8be9      	ldrh	r1, [r5, #30]
    287a:	0409      	lsls	r1, r1, #16
    287c:	d422      	bmi.n	28c4 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    287e:	b292      	uxth	r2, r2
    2880:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    2882:	6821      	ldr	r1, [r4, #0]
    2884:	8bec      	ldrh	r4, [r5, #30]
    2886:	b2a4      	uxth	r4, r4
    2888:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    288a:	8bcc      	ldrh	r4, [r1, #30]
    288c:	0424      	lsls	r4, r4, #16
    288e:	d505      	bpl.n	289c <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2890:	8bcc      	ldrh	r4, [r1, #30]
    2892:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2896:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    289a:	4322      	orrs	r2, r4
    289c:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    289e:	8bca      	ldrh	r2, [r1, #30]
    28a0:	b292      	uxth	r2, r2
    28a2:	82ca      	strh	r2, [r1, #22]
    28a4:	2100      	movs	r1, #0
    28a6:	4a0d      	ldr	r2, [pc, #52]	; (28dc <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    28a8:	6419      	str	r1, [r3, #64]	; 0x40
    28aa:	76d0      	strb	r0, [r2, #27]
    28ac:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    28b0:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    28b2:	4623      	mov	r3, r4
    28b4:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    28b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    28ba:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    28bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    28c0:	f000 b886 	b.w	29d0 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    28c4:	8be9      	ldrh	r1, [r5, #30]
    28c6:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    28ca:	b292      	uxth	r2, r2
    28cc:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    28d0:	ea41 010e 	orr.w	r1, r1, lr
    28d4:	83e9      	strh	r1, [r5, #30]
    28d6:	e7d4      	b.n	2882 <_spi_dma_rxISR0()+0x76>
    28d8:	20002488 	.word	0x20002488
    28dc:	400e8000 	.word	0x400e8000
    28e0:	ffff8001 	.word	0xffff8001
    28e4:	000026b9 	.word	0x000026b9

000028e8 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    28e8:	2300      	movs	r3, #0
    28ea:	e9c0 1200 	strd	r1, r2, [r0]
    28ee:	e9c0 3302 	strd	r3, r3, [r0, #8]
    28f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    28f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
    28fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
    28fe:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    2902:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    2906:	6383      	str	r3, [r0, #56]	; 0x38
    2908:	8783      	strh	r3, [r0, #60]	; 0x3c
    290a:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    290e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    2912:	4770      	bx	lr

00002914 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    2914:	b10b      	cbz	r3, 291a <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    2916:	f7ff bedb 	b.w	26d0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    291a:	4770      	bx	lr

0000291c <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    291c:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    291e:	4a08      	ldr	r2, [pc, #32]	; (2940 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    2920:	4908      	ldr	r1, [pc, #32]	; (2944 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    2922:	4809      	ldr	r0, [pc, #36]	; (2948 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    2924:	f7ff ffe0 	bl	28e8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    2928:	4a08      	ldr	r2, [pc, #32]	; (294c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    292a:	4909      	ldr	r1, [pc, #36]	; (2950 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    292c:	4809      	ldr	r0, [pc, #36]	; (2954 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    292e:	f7ff ffdb 	bl	28e8 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    2932:	4a09      	ldr	r2, [pc, #36]	; (2958 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    2934:	4909      	ldr	r1, [pc, #36]	; (295c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    2936:	480a      	ldr	r0, [pc, #40]	; (2960 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    2938:	f7ff ffd6 	bl	28e8 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    293c:	bd08      	pop	{r3, pc}
    293e:	bf00      	nop
    2940:	200007ac 	.word	0x200007ac
    2944:	403a0000 	.word	0x403a0000
    2948:	20002488 	.word	0x20002488
    294c:	2000073c 	.word	0x2000073c
    2950:	4039c000 	.word	0x4039c000
    2954:	200024d8 	.word	0x200024d8
    2958:	200006cc 	.word	0x200006cc
    295c:	40394000 	.word	0x40394000
    2960:	20002528 	.word	0x20002528

00002964 <Adafruit_MCP4725::Adafruit_MCP4725()>:
/*! 
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {
}
    2964:	4770      	bx	lr
    2966:	bf00      	nop

00002968 <Adafruit_MCP4725::begin(unsigned char)>:
/**************************************************************************/
/*! 
    @brief  Setups the HW
*/
/**************************************************************************/
void Adafruit_MCP4725::begin(uint8_t addr) {
    2968:	4603      	mov	r3, r0
  _i2caddr = addr;
  Wire.begin();
    296a:	4802      	ldr	r0, [pc, #8]	; (2974 <Adafruit_MCP4725::begin(unsigned char)+0xc>)
  _i2caddr = addr;
    296c:	7019      	strb	r1, [r3, #0]
  Wire.begin();
    296e:	f00a b993 	b.w	cc98 <___ZN7TwoWire5beginEv_veneer>
    2972:	bf00      	nop
    2974:	20002878 	.word	0x20002878

00002978 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>:
                that the DAC will retain the current voltage output
                after power-down or reset.
*/
/**************************************************************************/
void Adafruit_MCP4725::setVoltage( uint16_t output, bool writeEEPROM )
{
    2978:	b510      	push	{r4, lr}
		transmitting = 1;
    297a:	f04f 0c01 	mov.w	ip, #1
		txBuffer[0] = (address << 1);
    297e:	7800      	ldrb	r0, [r0, #0]
    2980:	4b12      	ldr	r3, [pc, #72]	; (29cc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    2982:	460c      	mov	r4, r1
    2984:	fa00 f00c 	lsl.w	r0, r0, ip
		transmitting = 1;
    2988:	f883 c130 	strb.w	ip, [r3, #304]	; 0x130
		txBufferLength = 1;
    298c:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    2990:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
#ifdef TWBR
  uint8_t twbrback = TWBR;
  TWBR = ((F_CPU / 400000L) - 16) / 2; // Set I2C frequency to 400kHz
#endif
  Wire.beginTransmission(_i2caddr);
  if (writeEEPROM)
    2994:	b1a2      	cbz	r2, 29c0 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x48>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    2996:	2160      	movs	r1, #96	; 0x60
    2998:	4618      	mov	r0, r3
    299a:	f7fe fb97 	bl	10cc <TwoWire::write(unsigned char)>
    299e:	f3c4 1107 	ubfx	r1, r4, #4, #8
    29a2:	480a      	ldr	r0, [pc, #40]	; (29cc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    29a4:	f7fe fb92 	bl	10cc <TwoWire::write(unsigned char)>
    29a8:	4808      	ldr	r0, [pc, #32]	; (29cc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  else
  {
    Wire.write(MCP4726_CMD_WRITEDAC);
  }
  Wire.write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4)
  Wire.write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x)
    29aa:	0121      	lsls	r1, r4, #4
    29ac:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    29b0:	f7fe fb8c 	bl	10cc <TwoWire::write(unsigned char)>
		return endTransmission(1);
    29b4:	2101      	movs	r1, #1
    29b6:	4805      	ldr	r0, [pc, #20]	; (29cc <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  Wire.endTransmission();
#ifdef TWBR
  TWBR = twbrback;
#endif
}
    29b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    29bc:	f7fe bc94 	b.w	12e8 <TwoWire::endTransmission(unsigned char)>
		return write((uint8_t)n);
    29c0:	2140      	movs	r1, #64	; 0x40
    29c2:	4618      	mov	r0, r3
    29c4:	f7fe fb82 	bl	10cc <TwoWire::write(unsigned char)>
    29c8:	e7e9      	b.n	299e <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x26>
    29ca:	bf00      	nop
    29cc:	20002878 	.word	0x20002878

000029d0 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    29d0:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    29d4:	b672      	cpsid	i
	if (_triggered == false) {
    29d6:	7f43      	ldrb	r3, [r0, #29]
    29d8:	b95b      	cbnz	r3, 29f2 <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    29da:	7f01      	ldrb	r1, [r0, #28]
    29dc:	2901      	cmp	r1, #1
{
    29de:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    29e0:	d00b      	beq.n	29fa <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    29e2:	2903      	cmp	r1, #3
    29e4:	d013      	beq.n	2a0e <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    29e6:	2301      	movs	r3, #1
    29e8:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    29ea:	b902      	cbnz	r2, 29ee <EventResponder::triggerEventNotImmediate()+0x1e>
    29ec:	b662      	cpsie	i
}
    29ee:	bc30      	pop	{r4, r5}
    29f0:	4770      	bx	lr
    29f2:	b90a      	cbnz	r2, 29f8 <EventResponder::triggerEventNotImmediate()+0x28>
    29f4:	b662      	cpsie	i
    29f6:	4770      	bx	lr
    29f8:	4770      	bx	lr
			if (firstYield == nullptr) {
    29fa:	4c12      	ldr	r4, [pc, #72]	; (2a44 <EventResponder::triggerEventNotImmediate()+0x74>)
    29fc:	6821      	ldr	r1, [r4, #0]
    29fe:	b1b1      	cbz	r1, 2a2e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    2a00:	4911      	ldr	r1, [pc, #68]	; (2a48 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    2a02:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    2a04:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    2a06:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    2a08:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2a0a:	6158      	str	r0, [r3, #20]
				lastYield = this;
    2a0c:	e7eb      	b.n	29e6 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    2a0e:	4d0f      	ldr	r5, [pc, #60]	; (2a4c <EventResponder::triggerEventNotImmediate()+0x7c>)
    2a10:	490f      	ldr	r1, [pc, #60]	; (2a50 <EventResponder::triggerEventNotImmediate()+0x80>)
    2a12:	682c      	ldr	r4, [r5, #0]
    2a14:	b18c      	cbz	r4, 2a3a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    2a16:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    2a18:	680b      	ldr	r3, [r1, #0]
    2a1a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2a1c:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2a1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2a22:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    2a26:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    2a28:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    2a2c:	e7db      	b.n	29e6 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    2a2e:	4b06      	ldr	r3, [pc, #24]	; (2a48 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    2a30:	6020      	str	r0, [r4, #0]
				lastYield = this;
    2a32:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    2a34:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    2a38:	e7d5      	b.n	29e6 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    2a3a:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    2a3e:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    2a40:	e7ed      	b.n	2a1e <EventResponder::triggerEventNotImmediate()+0x4e>
    2a42:	bf00      	nop
    2a44:	20002f90 	.word	0x20002f90
    2a48:	20002f9c 	.word	0x20002f9c
    2a4c:	20002f98 	.word	0x20002f98
    2a50:	20002f94 	.word	0x20002f94

00002a54 <EventResponder::runFromInterrupt()>:
{
    2a54:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2a56:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2a5a:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2a5c:	4c0c      	ldr	r4, [pc, #48]	; (2a90 <EventResponder::runFromInterrupt()+0x3c>)
    2a5e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2a60:	b180      	cbz	r0, 2a84 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    2a62:	4e0c      	ldr	r6, [pc, #48]	; (2a94 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    2a64:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    2a66:	6943      	ldr	r3, [r0, #20]
    2a68:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    2a6a:	b173      	cbz	r3, 2a8a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    2a6c:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    2a6e:	b902      	cbnz	r2, 2a72 <EventResponder::runFromInterrupt()+0x1e>
    2a70:	b662      	cpsie	i
			(*(first->_function))(*first);
    2a72:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    2a74:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    2a76:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2a78:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2a7c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2a7e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2a80:	2800      	cmp	r0, #0
    2a82:	d1f0      	bne.n	2a66 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    2a84:	b902      	cbnz	r2, 2a88 <EventResponder::runFromInterrupt()+0x34>
    2a86:	b662      	cpsie	i
}
    2a88:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2a8a:	6033      	str	r3, [r6, #0]
    2a8c:	e7ef      	b.n	2a6e <EventResponder::runFromInterrupt()+0x1a>
    2a8e:	bf00      	nop
    2a90:	20002f98 	.word	0x20002f98
    2a94:	20002f94 	.word	0x20002f94

00002a98 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2a98:	f7ff bfdc 	b.w	2a54 <EventResponder::runFromInterrupt()>

00002a9c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2a9c:	4904      	ldr	r1, [pc, #16]	; (2ab0 <systick_isr+0x14>)
	systick_millis_count++;
    2a9e:	4a05      	ldr	r2, [pc, #20]	; (2ab4 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2aa0:	6849      	ldr	r1, [r1, #4]
    2aa2:	4b05      	ldr	r3, [pc, #20]	; (2ab8 <systick_isr+0x1c>)
    2aa4:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    2aa6:	6813      	ldr	r3, [r2, #0]
    2aa8:	3301      	adds	r3, #1
    2aaa:	6013      	str	r3, [r2, #0]
}
    2aac:	4770      	bx	lr
    2aae:	bf00      	nop
    2ab0:	e0001000 	.word	0xe0001000
    2ab4:	20003dc4 	.word	0x20003dc4
    2ab8:	20003dc0 	.word	0x20003dc0

00002abc <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    2abc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    2ac0:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    2ac4:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    2ac6:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2ac8:	4293      	cmp	r3, r2
    2aca:	d202      	bcs.n	2ad2 <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    2acc:	3a01      	subs	r2, #1
    2ace:	1ad0      	subs	r0, r2, r3
}
    2ad0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2ad2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    2ad4:	3901      	subs	r1, #1
    2ad6:	440a      	add	r2, r1
    2ad8:	1ad0      	subs	r0, r2, r3
    2ada:	4770      	bx	lr

00002adc <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    2adc:	b672      	cpsid	i
	head = rx_buffer_head_;
    2ade:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    2ae2:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2ae6:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    2ae8:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    2aea:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    2aec:	bf3c      	itt	cc
    2aee:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    2af0:	1852      	addcc	r2, r2, r1
    2af2:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    2af4:	6902      	ldr	r2, [r0, #16]
    2af6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    2af8:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    2afa:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    2afe:	4418      	add	r0, r3
    2b00:	4770      	bx	lr
    2b02:	bf00      	nop

00002b04 <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    2b04:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2b08:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2b0a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2b0e:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2b10:	b29b      	uxth	r3, r3
	if (head == tail) {
    2b12:	4299      	cmp	r1, r3
    2b14:	d010      	beq.n	2b38 <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2b16:	3301      	adds	r3, #1
    2b18:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    2b1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2b1c:	4298      	cmp	r0, r3
    2b1e:	bf98      	it	ls
    2b20:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    2b22:	4299      	cmp	r1, r3
    2b24:	d903      	bls.n	2b2e <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    2b26:	6a12      	ldr	r2, [r2, #32]
    2b28:	5cd0      	ldrb	r0, [r2, r3]
    2b2a:	b2c0      	uxtb	r0, r0
    2b2c:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    2b2e:	1a5b      	subs	r3, r3, r1
    2b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
    2b32:	5cd0      	ldrb	r0, [r2, r3]
    2b34:	b2c0      	uxtb	r0, r0
	}
}
    2b36:	4770      	bx	lr
		__disable_irq();
    2b38:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2b3a:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    2b3e:	b280      	uxth	r0, r0
		if (head == tail) {
    2b40:	4281      	cmp	r1, r0
    2b42:	d001      	beq.n	2b48 <HardwareSerial::peek()+0x44>
		__enable_irq();
    2b44:	b662      	cpsie	i
    2b46:	e7e6      	b.n	2b16 <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    2b48:	6913      	ldr	r3, [r2, #16]
    2b4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    2b4c:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    2b50:	d103      	bne.n	2b5a <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    2b52:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2b56:	b662      	cpsie	i
			return c;
    2b58:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2b5a:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    2b5c:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    2b5e:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    2b62:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    2b64:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2b68:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    2b6c:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    2b6e:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    2b72:	704b      	strb	r3, [r1, #1]
    2b74:	e7ef      	b.n	2b56 <HardwareSerial::peek()+0x52>
    2b76:	bf00      	nop

00002b78 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    2b78:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2b7c:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2b7e:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2b82:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2b84:	b29b      	uxth	r3, r3
	if (head == tail) {
    2b86:	4299      	cmp	r1, r3
    2b88:	d026      	beq.n	2bd8 <HardwareSerial::read()+0x60>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2b8a:	3301      	adds	r3, #1
{
    2b8c:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2b8e:	6b94      	ldr	r4, [r2, #56]	; 0x38
    2b90:	429c      	cmp	r4, r3
    2b92:	d916      	bls.n	2bc2 <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    2b94:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    2b96:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    2b9a:	4298      	cmp	r0, r3
    2b9c:	d917      	bls.n	2bce <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    2b9e:	6a10      	ldr	r0, [r2, #32]
    2ba0:	5cc0      	ldrb	r0, [r0, r3]
    2ba2:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    2ba4:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    2ba6:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    2baa:	b145      	cbz	r5, 2bbe <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    2bac:	4299      	cmp	r1, r3
    2bae:	d31c      	bcc.n	2bea <HardwareSerial::read()+0x72>
    2bb0:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    2bb2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    2bb4:	4299      	cmp	r1, r3
    2bb6:	d302      	bcc.n	2bbe <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    2bb8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2bba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    2bbe:	bc30      	pop	{r4, r5}
    2bc0:	4770      	bx	lr
    2bc2:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    2bc6:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2bc8:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    2bca:	4298      	cmp	r0, r3
    2bcc:	d8e7      	bhi.n	2b9e <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    2bce:	1a18      	subs	r0, r3, r0
    2bd0:	6a55      	ldr	r5, [r2, #36]	; 0x24
    2bd2:	5c28      	ldrb	r0, [r5, r0]
    2bd4:	b2c0      	uxtb	r0, r0
    2bd6:	e7e5      	b.n	2ba4 <HardwareSerial::read()+0x2c>
    2bd8:	4608      	mov	r0, r1
		__disable_irq();
    2bda:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2bdc:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    2be0:	b289      	uxth	r1, r1
		if (head == tail) {
    2be2:	4288      	cmp	r0, r1
    2be4:	d004      	beq.n	2bf0 <HardwareSerial::read()+0x78>
		__enable_irq();
    2be6:	b662      	cpsie	i
    2be8:	e7cf      	b.n	2b8a <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    2bea:	440c      	add	r4, r1
    2bec:	1ae3      	subs	r3, r4, r3
    2bee:	e7e0      	b.n	2bb2 <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    2bf0:	6913      	ldr	r3, [r2, #16]
    2bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2bf4:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    2bf8:	d103      	bne.n	2c02 <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    2bfa:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2bfe:	b662      	cpsie	i
}	
    2c00:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2c02:	69d8      	ldr	r0, [r3, #28]
    2c04:	f3c0 0009 	ubfx	r0, r0, #0, #10
    2c08:	e7f9      	b.n	2bfe <HardwareSerial::read()+0x86>
    2c0a:	bf00      	nop

00002c0c <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    2c0c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    2c10:	b143      	cbz	r3, 2c24 <HardwareSerial::flush()+0x18>
{
    2c12:	b510      	push	{r4, lr}
    2c14:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    2c16:	f002 fefd 	bl	5a14 <yield>
    2c1a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    2c1e:	2b00      	cmp	r3, #0
    2c20:	d1f9      	bne.n	2c16 <HardwareSerial::flush()+0xa>
}
    2c22:	bd10      	pop	{r4, pc}
    2c24:	4770      	bx	lr
    2c26:	bf00      	nop

00002c28 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    2c28:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    2c2c:	b9b8      	cbnz	r0, 2c5e <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2c2e:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    2c32:	b94b      	cbnz	r3, 2c48 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2c34:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    2c38:	b93a      	cbnz	r2, 2c4a <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    2c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2c3e:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2c42:	b150      	cbz	r0, 2c5a <nvic_execution_priority()+0x32>
    2c44:	4298      	cmp	r0, r3
    2c46:	d208      	bcs.n	2c5a <nvic_execution_priority()+0x32>
}
    2c48:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    2c4a:	2a0f      	cmp	r2, #15
    2c4c:	d9f7      	bls.n	2c3e <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    2c4e:	4b05      	ldr	r3, [pc, #20]	; (2c64 <nvic_execution_priority()+0x3c>)
    2c50:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2c52:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2c56:	2800      	cmp	r0, #0
    2c58:	d1f4      	bne.n	2c44 <nvic_execution_priority()+0x1c>
    2c5a:	4618      	mov	r0, r3
	return priority;
    2c5c:	4770      	bx	lr
	if (faultmask) return -1;
    2c5e:	f04f 30ff 	mov.w	r0, #4294967295
    2c62:	e7f1      	b.n	2c48 <nvic_execution_priority()+0x20>
    2c64:	e000e3f0 	.word	0xe000e3f0

00002c68 <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    2c68:	ee07 1a90 	vmov	s15, r1
    2c6c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 2eb4 <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>
	for (int osr=4; osr <= 32; osr++) {
    2c70:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    2c72:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    2c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    2c7a:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 2eb8 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
    2c7e:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    2c82:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    2c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    2c8a:	468e      	mov	lr, r1
	int bestdiv = 1;
    2c8c:	2401      	movs	r4, #1
		float div = base / (float)osr;
    2c8e:	ee07 1a90 	vmov	s15, r1
    2c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2c96:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    2c9a:	ee77 7a05 	vadd.f32	s15, s14, s10
    2c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2ca2:	ee17 3a90 	vmov	r3, s15
    2ca6:	4563      	cmp	r3, ip
    2ca8:	bfa8      	it	ge
    2caa:	4663      	movge	r3, ip
    2cac:	2b01      	cmp	r3, #1
    2cae:	bfb8      	it	lt
    2cb0:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    2cb2:	ee07 3a90 	vmov	s15, r3
    2cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2cba:	ee76 6ac7 	vsub.f32	s13, s13, s14
    2cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    2cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cca:	bf48      	it	mi
    2ccc:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    2cd0:	eef4 7ac6 	vcmpe.f32	s15, s12
    2cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2cd8:	d803      	bhi.n	2ce2 <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    2cda:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    2cde:	468e      	mov	lr, r1
			bestdiv = divint;
    2ce0:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    2ce2:	3101      	adds	r1, #1
    2ce4:	2921      	cmp	r1, #33	; 0x21
    2ce6:	d1d2      	bne.n	2c8e <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    2ce8:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2cea:	6943      	ldr	r3, [r0, #20]
    2cec:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    2cf0:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2cf4:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2cf8:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    2cfa:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2cfe:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    2d02:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    2d06:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    2d0a:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2d0e:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    2d10:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2d12:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    2d16:	eba1 010c 	sub.w	r1, r1, ip
    2d1a:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    2d1e:	6831      	ldr	r1, [r6, #0]
    2d20:	695d      	ldr	r5, [r3, #20]
    2d22:	ea41 0105 	orr.w	r1, r1, r5
    2d26:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2d28:	bf14      	ite	ne
    2d2a:	2101      	movne	r1, #1
    2d2c:	2100      	moveq	r1, #0
    2d2e:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    2d30:	f040 8091 	bne.w	2e56 <HardwareSerial::begin(unsigned long, unsigned short)+0x1ee>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2d34:	7e05      	ldrb	r5, [r0, #24]
    2d36:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2ed0 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    2d3a:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    2d3e:	4e5f      	ldr	r6, [pc, #380]	; (2ebc <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
    2d40:	f89c 5018 	ldrb.w	r5, [ip, #24]
    2d44:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    2d48:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    2d4a:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    2d4c:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    2d4e:	f8dc 601c 	ldr.w	r6, [ip, #28]
    2d52:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    2d54:	f8dc 5020 	ldr.w	r5, [ip, #32]
    2d58:	b115      	cbz	r5, 2d60 <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    2d5a:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    2d5e:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2d60:	7e45      	ldrb	r5, [r0, #25]
    2d62:	27d9      	movs	r7, #217	; 0xd9
    2d64:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    2d68:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    2d6c:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    2d70:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2d72:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    2d74:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2d76:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    2d78:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    2d7a:	7e41      	ldrb	r1, [r0, #25]
    2d7c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2d80:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    2d82:	b10d      	cbz	r5, 2d88 <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    2d84:	6c49      	ldr	r1, [r1, #68]	; 0x44
    2d86:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2d88:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2d8c:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    2d90:	685d      	ldr	r5, [r3, #4]
	port->PINCFG = 0;
    2d92:	f04f 0600 	mov.w	r6, #0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2d96:	bfcc      	ite	gt
    2d98:	f04f 0e00 	movgt.w	lr, #0
    2d9c:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2da0:	0609      	lsls	r1, r1, #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2da2:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2da6:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2daa:	4321      	orrs	r1, r4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    2dac:	785c      	ldrb	r4, [r3, #1]
    2dae:	f104 0310 	add.w	r3, r4, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2db2:	6904      	ldr	r4, [r0, #16]
    2db4:	6121      	str	r1, [r4, #16]
    2db6:	4942      	ldr	r1, [pc, #264]	; (2ec0 <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	port->PINCFG = 0;
    2db8:	60e6      	str	r6, [r4, #12]
    2dba:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2dbe:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    2dc0:	f04f 0c01 	mov.w	ip, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2dc4:	493f      	ldr	r1, [pc, #252]	; (2ec4 <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2dc6:	f002 0503 	and.w	r5, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2dca:	785c      	ldrb	r4, [r3, #1]
    2dcc:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    2dd0:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    2dd2:	6944      	ldr	r4, [r0, #20]
    2dd4:	4b3c      	ldr	r3, [pc, #240]	; (2ec8 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>)
    2dd6:	7861      	ldrb	r1, [r4, #1]
    2dd8:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    2ddc:	f001 011f 	and.w	r1, r1, #31
    2de0:	009b      	lsls	r3, r3, #2
    2de2:	fa0c f101 	lsl.w	r1, ip, r1
    2de6:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    2de8:	f04f 1102 	mov.w	r1, #131074	; 0x20002
    2dec:	6903      	ldr	r3, [r0, #16]
    2dee:	62d9      	str	r1, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    2df0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2df2:	f041 0188 	orr.w	r1, r1, #136	; 0x88
    2df6:	6299      	str	r1, [r3, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2df8:	0751      	lsls	r1, r2, #29
    2dfa:	d429      	bmi.n	2e50 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2dfc:	f445 1170 	orr.w	r1, r5, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2e00:	f002 050f 	and.w	r5, r2, #15
    2e04:	2d04      	cmp	r5, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2e06:	7e85      	ldrb	r5, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2e08:	bf08      	it	eq
    2e0a:	f041 4180 	orreq.w	r1, r1, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    2e0e:	0697      	lsls	r7, r2, #26
    2e10:	bf48      	it	mi
    2e12:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    2e16:	b10d      	cbz	r5, 2e1c <HardwareSerial::begin(unsigned long, unsigned short)+0x1b4>
    2e18:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2e1c:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    2e1e:	6199      	str	r1, [r3, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    2e20:	d503      	bpl.n	2e2a <HardwareSerial::begin(unsigned long, unsigned short)+0x1c2>
    2e22:	6919      	ldr	r1, [r3, #16]
    2e24:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    2e28:	6119      	str	r1, [r3, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2e2a:	6959      	ldr	r1, [r3, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2e2c:	06d5      	lsls	r5, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    2e2e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    2e32:	bf48      	it	mi
    2e34:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2e38:	05d2      	lsls	r2, r2, #23
	port->STAT = c;
    2e3a:	6159      	str	r1, [r3, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    2e3c:	d503      	bpl.n	2e46 <HardwareSerial::begin(unsigned long, unsigned short)+0x1de>
    2e3e:	691a      	ldr	r2, [r3, #16]
    2e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    2e44:	611a      	str	r2, [r3, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    2e46:	68e3      	ldr	r3, [r4, #12]
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	b1a3      	cbz	r3, 2e76 <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
};
    2e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2e50:	491e      	ldr	r1, [pc, #120]	; (2ecc <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    2e52:	4329      	orrs	r1, r5
    2e54:	e7d4      	b.n	2e00 <HardwareSerial::begin(unsigned long, unsigned short)+0x198>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    2e56:	7e41      	ldrb	r1, [r0, #25]
    2e58:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    2e5c:	4d1c      	ldr	r5, [pc, #112]	; (2ed0 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    2e5e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2e62:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    2e66:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    2e6a:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2e6c:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    2e6e:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    2e70:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    2e72:	6029      	str	r1, [r5, #0]
    2e74:	e781      	b.n	2d7a <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2e76:	4e17      	ldr	r6, [pc, #92]	; (2ed4 <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    2e78:	7834      	ldrb	r4, [r6, #0]
    2e7a:	b1bc      	cbz	r4, 2eac <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
    2e7c:	1e61      	subs	r1, r4, #1
    2e7e:	4d16      	ldr	r5, [pc, #88]	; (2ed8 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2e80:	b2c9      	uxtb	r1, r1
    2e82:	1f2b      	subs	r3, r5, #4
    2e84:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    2e88:	f853 2f04 	ldr.w	r2, [r3, #4]!
    2e8c:	4290      	cmp	r0, r2
    2e8e:	d0dd      	beq.n	2e4c <HardwareSerial::begin(unsigned long, unsigned short)+0x1e4>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2e90:	4299      	cmp	r1, r3
    2e92:	d1f9      	bne.n	2e88 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2e94:	1c63      	adds	r3, r4, #1
    2e96:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2e98:	4a10      	ldr	r2, [pc, #64]	; (2edc <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2e9a:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2e9c:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2e9e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2ea2:	f043 0302 	orr.w	r3, r3, #2
    2ea6:	7013      	strb	r3, [r2, #0]
};
    2ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2eac:	2301      	movs	r3, #1
    2eae:	4d0a      	ldr	r5, [pc, #40]	; (2ed8 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2eb0:	e7f2      	b.n	2e98 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
    2eb2:	bf00      	nop
    2eb4:	4bb71b00 	.word	0x4bb71b00
    2eb8:	60ad78ec 	.word	0x60ad78ec
    2ebc:	0001f038 	.word	0x0001f038
    2ec0:	20002000 	.word	0x20002000
    2ec4:	e000e400 	.word	0xe000e400
    2ec8:	38003840 	.word	0x38003840
    2ecc:	003c0010 	.word	0x003c0010
    2ed0:	20000cac 	.word	0x20000cac
    2ed4:	20003de7 	.word	0x20003de7
    2ed8:	20002fa0 	.word	0x20002fa0
    2edc:	20001de5 	.word	0x20001de5

00002ee0 <HardwareSerial::write9bit(unsigned long)>:
{
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2ee2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    2ee4:	4604      	mov	r4, r0
    2ee6:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2ee8:	b113      	cbz	r3, 2ef0 <HardwareSerial::write9bit(unsigned long)+0x10>
    2eea:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    2ef0:	7ea3      	ldrb	r3, [r4, #26]
    2ef2:	b133      	cbz	r3, 2f02 <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    2ef4:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    2ef6:	6922      	ldr	r2, [r4, #16]
    2ef8:	6993      	ldr	r3, [r2, #24]
    2efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2efe:	6193      	str	r3, [r2, #24]
		__enable_irq();
    2f00:	b662      	cpsie	i
	head = tx_buffer_head_;
    2f02:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    2f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    2f08:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    2f0a:	3501      	adds	r5, #1
    2f0c:	42ab      	cmp	r3, r5
    2f0e:	d84c      	bhi.n	2faa <HardwareSerial::write9bit(unsigned long)+0xca>
    2f10:	2700      	movs	r7, #0
    2f12:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    2f14:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2f18:	b29b      	uxth	r3, r3
    2f1a:	429d      	cmp	r5, r3
    2f1c:	d01a      	beq.n	2f54 <HardwareSerial::write9bit(unsigned long)+0x74>
    2f1e:	e029      	b.n	2f74 <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    2f20:	6921      	ldr	r1, [r4, #16]
    2f22:	694b      	ldr	r3, [r1, #20]
    2f24:	021b      	lsls	r3, r3, #8
    2f26:	d510      	bpl.n	2f4a <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    2f28:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2f2c:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    2f2e:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2f30:	3301      	adds	r3, #1
    2f32:	429a      	cmp	r2, r3
    2f34:	d936      	bls.n	2fa4 <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    2f36:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    2f38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2f3a:	4298      	cmp	r0, r3
    2f3c:	d92d      	bls.n	2f9a <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    2f3e:	69e0      	ldr	r0, [r4, #28]
    2f40:	5cc3      	ldrb	r3, [r0, r3]
    2f42:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    2f44:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    2f46:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    2f4a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2f4e:	b29b      	uxth	r3, r3
    2f50:	42ab      	cmp	r3, r5
    2f52:	d10f      	bne.n	2f74 <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    2f54:	f7ff fe68 	bl	2c28 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    2f58:	6963      	ldr	r3, [r4, #20]
    2f5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    2f5e:	4283      	cmp	r3, r0
    2f60:	dade      	bge.n	2f20 <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    2f62:	28ff      	cmp	r0, #255	; 0xff
    2f64:	ddf1      	ble.n	2f4a <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    2f66:	f002 fd55 	bl	5a14 <yield>
	while (tx_buffer_tail_ == head) {
    2f6a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    2f6e:	b29b      	uxth	r3, r3
    2f70:	42ab      	cmp	r3, r5
    2f72:	d0ef      	beq.n	2f54 <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    2f74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2f76:	42ab      	cmp	r3, r5
    2f78:	d919      	bls.n	2fae <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    2f7a:	69e3      	ldr	r3, [r4, #28]
    2f7c:	b2f6      	uxtb	r6, r6
    2f7e:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    2f80:	b672      	cpsid	i
	transmitting_ = 1;
    2f82:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2f84:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    2f86:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    2f8a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2f8e:	6993      	ldr	r3, [r2, #24]
    2f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    2f94:	6193      	str	r3, [r2, #24]
	__enable_irq();
    2f96:	b662      	cpsie	i
}
    2f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    2f9a:	1a1b      	subs	r3, r3, r0
    2f9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2f9e:	5cc3      	ldrb	r3, [r0, r3]
    2fa0:	b2db      	uxtb	r3, r3
    2fa2:	e7cf      	b.n	2f44 <HardwareSerial::write9bit(unsigned long)+0x64>
    2fa4:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2fa6:	4613      	mov	r3, r2
    2fa8:	e7c6      	b.n	2f38 <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    2faa:	b2af      	uxth	r7, r5
    2fac:	e7b2      	b.n	2f14 <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    2fae:	1aed      	subs	r5, r5, r3
    2fb0:	b2f6      	uxtb	r6, r6
    2fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fb4:	555e      	strb	r6, [r3, r5]
    2fb6:	e7e3      	b.n	2f80 <HardwareSerial::write9bit(unsigned long)+0xa0>

00002fb8 <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    2fb8:	f7ff bf92 	b.w	2ee0 <HardwareSerial::write9bit(unsigned long)>

00002fbc <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2fbc:	6902      	ldr	r2, [r0, #16]
    2fbe:	6953      	ldr	r3, [r2, #20]
    2fc0:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    2fc4:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2fc6:	4615      	mov	r5, r2
    2fc8:	d047      	beq.n	305a <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2fca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    2fcc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2fd0:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    2fd4:	d03e      	beq.n	3054 <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    2fd6:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    2fda:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    2fde:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    2fe0:	b2ad      	uxth	r5, r5
    2fe2:	e008      	b.n	2ff6 <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    2fe4:	6a02      	ldr	r2, [r0, #32]
    2fe6:	f802 c003 	strb.w	ip, [r2, r3]
    2fea:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    2fec:	f10e 33ff 	add.w	r3, lr, #4294967295
    2ff0:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2ff4:	d01e      	beq.n	3034 <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2ff6:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    2ff8:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    2ffa:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2ffe:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    3000:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    3004:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    3008:	429e      	cmp	r6, r3
    300a:	bf98      	it	ls
    300c:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    300e:	459c      	cmp	ip, r3
    3010:	d0ec      	beq.n	2fec <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    3012:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    3014:	fa5f fc81 	uxtb.w	ip, r1
    3018:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    301a:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    301c:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    3020:	d8e0      	bhi.n	2fe4 <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    3022:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3024:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    3028:	f10e 33ff 	add.w	r3, lr, #4294967295
    302c:	6902      	ldr	r2, [r0, #16]
    302e:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    3032:	d1e0      	bne.n	2ff6 <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    3034:	b2a3      	uxth	r3, r4
    3036:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    303a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    303c:	2b00      	cmp	r3, #0
    303e:	d05a      	beq.n	30f6 <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    3040:	42ac      	cmp	r4, r5
    3042:	d35d      	bcc.n	3100 <HardwareSerial::IRQHandler()+0x144>
    3044:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    3046:	6c01      	ldr	r1, [r0, #64]	; 0x40
    3048:	42a1      	cmp	r1, r4
    304a:	d854      	bhi.n	30f6 <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    304c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    304e:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    3050:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    3054:	6953      	ldr	r3, [r2, #20]
    3056:	02dc      	lsls	r4, r3, #11
    3058:	d448      	bmi.n	30ec <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    305a:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    305c:	0231      	lsls	r1, r6, #8
    305e:	d529      	bpl.n	30b4 <HardwareSerial::IRQHandler()+0xf8>
    3060:	6953      	ldr	r3, [r2, #20]
    3062:	021b      	lsls	r3, r3, #8
    3064:	d526      	bpl.n	30b4 <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    3066:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    306a:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    306e:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    3072:	b29b      	uxth	r3, r3
    3074:	e006      	b.n	3084 <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    3076:	69c1      	ldr	r1, [r0, #28]
    3078:	5cc9      	ldrb	r1, [r1, r3]
    307a:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    307c:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    307e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    3080:	054c      	lsls	r4, r1, #21
    3082:	d412      	bmi.n	30aa <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    3084:	4563      	cmp	r3, ip
    3086:	d03f      	beq.n	3108 <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    3088:	6b44      	ldr	r4, [r0, #52]	; 0x34
    308a:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    308c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    308e:	429c      	cmp	r4, r3
    3090:	bf98      	it	ls
    3092:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    3094:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    3096:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    309a:	d8ec      	bhi.n	3076 <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    309c:	6a81      	ldr	r1, [r0, #40]	; 0x28
    309e:	5d09      	ldrb	r1, [r1, r4]
    30a0:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    30a2:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    30a4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    30a6:	054c      	lsls	r4, r1, #21
    30a8:	d5ec      	bpl.n	3084 <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    30aa:	b299      	uxth	r1, r3
		if (head == tail) {
    30ac:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    30ae:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    30b2:	d02c      	beq.n	310e <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    30b4:	0271      	lsls	r1, r6, #9
    30b6:	d518      	bpl.n	30ea <HardwareSerial::IRQHandler()+0x12e>
    30b8:	6953      	ldr	r3, [r2, #20]
    30ba:	025b      	lsls	r3, r3, #9
    30bc:	d515      	bpl.n	30ea <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    30be:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    30c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    30c2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    30c6:	b113      	cbz	r3, 30ce <HardwareSerial::IRQHandler()+0x112>
    30c8:	6d42      	ldr	r2, [r0, #84]	; 0x54
    30ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    30ce:	7e83      	ldrb	r3, [r0, #26]
    30d0:	b13b      	cbz	r3, 30e2 <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    30d2:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    30d4:	6902      	ldr	r2, [r0, #16]
    30d6:	6993      	ldr	r3, [r2, #24]
    30d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    30dc:	6193      	str	r3, [r2, #24]
			__enable_irq();
    30de:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    30e0:	6905      	ldr	r5, [r0, #16]
    30e2:	69ab      	ldr	r3, [r5, #24]
    30e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    30e8:	61ab      	str	r3, [r5, #24]
}
    30ea:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    30ec:	6953      	ldr	r3, [r2, #20]
    30ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    30f2:	6153      	str	r3, [r2, #20]
    30f4:	e7b1      	b.n	305a <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    30f6:	6953      	ldr	r3, [r2, #20]
    30f8:	4615      	mov	r5, r2
    30fa:	02dc      	lsls	r4, r3, #11
    30fc:	d5ad      	bpl.n	305a <HardwareSerial::IRQHandler()+0x9e>
    30fe:	e7f5      	b.n	30ec <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    3100:	6b81      	ldr	r1, [r0, #56]	; 0x38
    3102:	1b49      	subs	r1, r1, r5
    3104:	440c      	add	r4, r1
    3106:	e79e      	b.n	3046 <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    3108:	b29b      	uxth	r3, r3
    310a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    310e:	6993      	ldr	r3, [r2, #24]
    3110:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3114:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    3116:	6993      	ldr	r3, [r2, #24]
    3118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    311c:	6193      	str	r3, [r2, #24]
    311e:	e7c9      	b.n	30b4 <HardwareSerial::IRQHandler()+0xf8>

00003120 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    3120:	4801      	ldr	r0, [pc, #4]	; (3128 <IRQHandler_Serial1+0x8>)
    3122:	f7ff bf4b 	b.w	2fbc <HardwareSerial::IRQHandler()>
    3126:	bf00      	nop
    3128:	20002578 	.word	0x20002578

0000312c <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    312c:	b410      	push	{r4}
    312e:	4b16      	ldr	r3, [pc, #88]	; (3188 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    3130:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3134:	4815      	ldr	r0, [pc, #84]	; (318c <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    3136:	2200      	movs	r2, #0
    3138:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    313a:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    313c:	4c14      	ldr	r4, [pc, #80]	; (3190 <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    313e:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    3140:	4814      	ldr	r0, [pc, #80]	; (3194 <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    3142:	611c      	str	r4, [r3, #16]
    3144:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3146:	4c14      	ldr	r4, [pc, #80]	; (3198 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    3148:	4814      	ldr	r0, [pc, #80]	; (319c <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    314a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    314e:	731a      	strb	r2, [r3, #12]
    3150:	831a      	strh	r2, [r3, #24]
    3152:	769a      	strb	r2, [r3, #26]
    3154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3158:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    315a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    315e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3162:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    3166:	605a      	str	r2, [r3, #4]
    3168:	625a      	str	r2, [r3, #36]	; 0x24
    316a:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    316c:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    316e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3172:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3176:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    317a:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    317e:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3182:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3186:	4770      	bx	lr
    3188:	20002578 	.word	0x20002578
    318c:	20000824 	.word	0x20000824
    3190:	40198000 	.word	0x40198000
    3194:	20000668 	.word	0x20000668
    3198:	20002e38 	.word	0x20002e38
    319c:	20002c38 	.word	0x20002c38

000031a0 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    31a0:	4801      	ldr	r0, [pc, #4]	; (31a8 <IRQHandler_Serial2+0x8>)
    31a2:	f7ff bf0b 	b.w	2fbc <HardwareSerial::IRQHandler()>
    31a6:	bf00      	nop
    31a8:	200025d8 	.word	0x200025d8

000031ac <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    31ac:	b410      	push	{r4}
    31ae:	4b17      	ldr	r3, [pc, #92]	; (320c <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    31b0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    31b4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31b6:	2028      	movs	r0, #40	; 0x28
    31b8:	609c      	str	r4, [r3, #8]
    31ba:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31bc:	4c14      	ldr	r4, [pc, #80]	; (3210 <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    31be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    31c2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    31c4:	4c13      	ldr	r4, [pc, #76]	; (3214 <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    31c6:	731a      	strb	r2, [r3, #12]
    31c8:	611c      	str	r4, [r3, #16]
    31ca:	4c13      	ldr	r4, [pc, #76]	; (3218 <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31cc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    31ce:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31d0:	4c12      	ldr	r4, [pc, #72]	; (321c <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31d2:	769a      	strb	r2, [r3, #26]
    31d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31d8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    31de:	f85d 4b04 	ldr.w	r4, [sp], #4
    31e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    31e6:	605a      	str	r2, [r3, #4]
    31e8:	625a      	str	r2, [r3, #36]	; 0x24
    31ea:	641a      	str	r2, [r3, #64]	; 0x40
    31ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31f0:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31f4:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31f8:	4809      	ldr	r0, [pc, #36]	; (3220 <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    31fa:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    31fe:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3200:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3204:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3208:	4770      	bx	lr
    320a:	bf00      	nop
    320c:	200025d8 	.word	0x200025d8
    3210:	20000824 	.word	0x20000824
    3214:	40190000 	.word	0x40190000
    3218:	20001444 	.word	0x20001444
    321c:	20002e78 	.word	0x20002e78
    3220:	20002c78 	.word	0x20002c78

00003224 <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    3224:	4801      	ldr	r0, [pc, #4]	; (322c <IRQHandler_Serial3+0x8>)
    3226:	f7ff bec9 	b.w	2fbc <HardwareSerial::IRQHandler()>
    322a:	bf00      	nop
    322c:	20002638 	.word	0x20002638

00003230 <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    3230:	b410      	push	{r4}
    3232:	4b17      	ldr	r3, [pc, #92]	; (3290 <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    3234:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3238:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    323a:	2028      	movs	r0, #40	; 0x28
    323c:	609c      	str	r4, [r3, #8]
    323e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3240:	4c14      	ldr	r4, [pc, #80]	; (3294 <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    3242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    3246:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3248:	4c13      	ldr	r4, [pc, #76]	; (3298 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    324a:	731a      	strb	r2, [r3, #12]
    324c:	611c      	str	r4, [r3, #16]
    324e:	4c13      	ldr	r4, [pc, #76]	; (329c <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3250:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    3252:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3254:	4c12      	ldr	r4, [pc, #72]	; (32a0 <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3256:	769a      	strb	r2, [r3, #26]
    3258:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    325c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    325e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    3262:	f85d 4b04 	ldr.w	r4, [sp], #4
    3266:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    326a:	605a      	str	r2, [r3, #4]
    326c:	625a      	str	r2, [r3, #36]	; 0x24
    326e:	641a      	str	r2, [r3, #64]	; 0x40
    3270:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3274:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3278:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    327c:	4809      	ldr	r0, [pc, #36]	; (32a4 <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    327e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3282:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3284:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3288:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    328c:	4770      	bx	lr
    328e:	bf00      	nop
    3290:	20002638 	.word	0x20002638
    3294:	20000824 	.word	0x20000824
    3298:	40188000 	.word	0x40188000
    329c:	2000137c 	.word	0x2000137c
    32a0:	20002ea0 	.word	0x20002ea0
    32a4:	20002cb8 	.word	0x20002cb8

000032a8 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    32a8:	4801      	ldr	r0, [pc, #4]	; (32b0 <IRQHandler_Serial4+0x8>)
    32aa:	f7ff be87 	b.w	2fbc <HardwareSerial::IRQHandler()>
    32ae:	bf00      	nop
    32b0:	20002698 	.word	0x20002698

000032b4 <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    32b4:	b410      	push	{r4}
    32b6:	4b17      	ldr	r3, [pc, #92]	; (3314 <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    32b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    32bc:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32be:	2028      	movs	r0, #40	; 0x28
    32c0:	609c      	str	r4, [r3, #8]
    32c2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32c4:	4c14      	ldr	r4, [pc, #80]	; (3318 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    32c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    32ca:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    32cc:	4c13      	ldr	r4, [pc, #76]	; (331c <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    32ce:	731a      	strb	r2, [r3, #12]
    32d0:	611c      	str	r4, [r3, #16]
    32d2:	4c13      	ldr	r4, [pc, #76]	; (3320 <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32d4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    32d6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32d8:	4c12      	ldr	r4, [pc, #72]	; (3324 <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32da:	769a      	strb	r2, [r3, #26]
    32dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32e0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    32e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    32ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    32ee:	605a      	str	r2, [r3, #4]
    32f0:	625a      	str	r2, [r3, #36]	; 0x24
    32f2:	641a      	str	r2, [r3, #64]	; 0x40
    32f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    32f8:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    32fc:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3300:	4809      	ldr	r0, [pc, #36]	; (3328 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3302:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3306:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3308:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    330c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3310:	4770      	bx	lr
    3312:	bf00      	nop
    3314:	20002698 	.word	0x20002698
    3318:	20000824 	.word	0x20000824
    331c:	4018c000 	.word	0x4018c000
    3320:	200013e0 	.word	0x200013e0
    3324:	20002ec8 	.word	0x20002ec8
    3328:	20002cf8 	.word	0x20002cf8

0000332c <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    332c:	4801      	ldr	r0, [pc, #4]	; (3334 <IRQHandler_Serial5+0x8>)
    332e:	f7ff be45 	b.w	2fbc <HardwareSerial::IRQHandler()>
    3332:	bf00      	nop
    3334:	200026f8 	.word	0x200026f8

00003338 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    3338:	b410      	push	{r4}
    333a:	4b17      	ldr	r3, [pc, #92]	; (3398 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    333c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3340:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3342:	2028      	movs	r0, #40	; 0x28
    3344:	609c      	str	r4, [r3, #8]
    3346:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3348:	4c14      	ldr	r4, [pc, #80]	; (339c <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    334a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    334e:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3350:	4c13      	ldr	r4, [pc, #76]	; (33a0 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    3352:	731a      	strb	r2, [r3, #12]
    3354:	611c      	str	r4, [r3, #16]
    3356:	4c13      	ldr	r4, [pc, #76]	; (33a4 <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3358:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    335a:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    335c:	4c12      	ldr	r4, [pc, #72]	; (33a8 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    335e:	769a      	strb	r2, [r3, #26]
    3360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3364:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3366:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    336a:	f85d 4b04 	ldr.w	r4, [sp], #4
    336e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    3372:	605a      	str	r2, [r3, #4]
    3374:	625a      	str	r2, [r3, #36]	; 0x24
    3376:	641a      	str	r2, [r3, #64]	; 0x40
    3378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    337c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3380:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3384:	4809      	ldr	r0, [pc, #36]	; (33ac <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3386:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    338a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    338c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3390:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3394:	4770      	bx	lr
    3396:	bf00      	nop
    3398:	200026f8 	.word	0x200026f8
    339c:	20000824 	.word	0x20000824
    33a0:	401a0000 	.word	0x401a0000
    33a4:	20001570 	.word	0x20001570
    33a8:	20002ef0 	.word	0x20002ef0
    33ac:	20002d38 	.word	0x20002d38

000033b0 <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    33b0:	4801      	ldr	r0, [pc, #4]	; (33b8 <IRQHandler_Serial6+0x8>)
    33b2:	f7ff be03 	b.w	2fbc <HardwareSerial::IRQHandler()>
    33b6:	bf00      	nop
    33b8:	20002758 	.word	0x20002758

000033bc <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    33bc:	b410      	push	{r4}
    33be:	4b17      	ldr	r3, [pc, #92]	; (341c <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    33c0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    33c4:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33c6:	2028      	movs	r0, #40	; 0x28
    33c8:	609c      	str	r4, [r3, #8]
    33ca:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33cc:	4c14      	ldr	r4, [pc, #80]	; (3420 <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    33ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    33d2:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    33d4:	4c13      	ldr	r4, [pc, #76]	; (3424 <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    33d6:	731a      	strb	r2, [r3, #12]
    33d8:	611c      	str	r4, [r3, #16]
    33da:	4c13      	ldr	r4, [pc, #76]	; (3428 <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33dc:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    33de:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33e0:	4c12      	ldr	r4, [pc, #72]	; (342c <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33e2:	769a      	strb	r2, [r3, #26]
    33e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    33e8:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    33ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    33ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    33f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    33f6:	605a      	str	r2, [r3, #4]
    33f8:	625a      	str	r2, [r3, #36]	; 0x24
    33fa:	641a      	str	r2, [r3, #64]	; 0x40
    33fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3400:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3404:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3408:	4809      	ldr	r0, [pc, #36]	; (3430 <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    340a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    340e:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3410:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3414:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3418:	4770      	bx	lr
    341a:	bf00      	nop
    341c:	20002758 	.word	0x20002758
    3420:	20000824 	.word	0x20000824
    3424:	40184000 	.word	0x40184000
    3428:	20001318 	.word	0x20001318
    342c:	20002f18 	.word	0x20002f18
    3430:	20002d78 	.word	0x20002d78

00003434 <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    3434:	4801      	ldr	r0, [pc, #4]	; (343c <IRQHandler_Serial7+0x8>)
    3436:	f7ff bdc1 	b.w	2fbc <HardwareSerial::IRQHandler()>
    343a:	bf00      	nop
    343c:	200027b8 	.word	0x200027b8

00003440 <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    3440:	b410      	push	{r4}
    3442:	4b17      	ldr	r3, [pc, #92]	; (34a0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    3444:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3448:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    344a:	2028      	movs	r0, #40	; 0x28
    344c:	609c      	str	r4, [r3, #8]
    344e:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3450:	4c14      	ldr	r4, [pc, #80]	; (34a4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    3452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    3456:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    3458:	4c13      	ldr	r4, [pc, #76]	; (34a8 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    345a:	731a      	strb	r2, [r3, #12]
    345c:	611c      	str	r4, [r3, #16]
    345e:	4c13      	ldr	r4, [pc, #76]	; (34ac <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3460:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    3462:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3464:	4c12      	ldr	r4, [pc, #72]	; (34b0 <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3466:	769a      	strb	r2, [r3, #26]
    3468:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    346c:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    346e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    3472:	f85d 4b04 	ldr.w	r4, [sp], #4
    3476:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    347a:	605a      	str	r2, [r3, #4]
    347c:	625a      	str	r2, [r3, #36]	; 0x24
    347e:	641a      	str	r2, [r3, #64]	; 0x40
    3480:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3484:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3488:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    348c:	4809      	ldr	r0, [pc, #36]	; (34b4 <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    348e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3492:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3494:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    3498:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    349c:	4770      	bx	lr
    349e:	bf00      	nop
    34a0:	200027b8 	.word	0x200027b8
    34a4:	20000824 	.word	0x20000824
    34a8:	4019c000 	.word	0x4019c000
    34ac:	2000150c 	.word	0x2000150c
    34b0:	20002f40 	.word	0x20002f40
    34b4:	20002db8 	.word	0x20002db8

000034b8 <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    34b8:	4801      	ldr	r0, [pc, #4]	; (34c0 <IRQHandler_Serial8+0x8>)
    34ba:	f7ff bd7f 	b.w	2fbc <HardwareSerial::IRQHandler()>
    34be:	bf00      	nop
    34c0:	20002818 	.word	0x20002818

000034c4 <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    34c4:	b410      	push	{r4}
    34c6:	4b17      	ldr	r3, [pc, #92]	; (3524 <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
    34c8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    34cc:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    34ce:	2028      	movs	r0, #40	; 0x28
    34d0:	609c      	str	r4, [r3, #8]
    34d2:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    34d4:	4c14      	ldr	r4, [pc, #80]	; (3528 <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    34d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    34da:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    34dc:	4c13      	ldr	r4, [pc, #76]	; (352c <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    34de:	731a      	strb	r2, [r3, #12]
    34e0:	611c      	str	r4, [r3, #16]
    34e2:	4c13      	ldr	r4, [pc, #76]	; (3530 <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    34e4:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    34e6:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    34e8:	4c12      	ldr	r4, [pc, #72]	; (3534 <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    34ea:	769a      	strb	r2, [r3, #26]
    34ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    34f0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    34f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    34f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    34fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    34fe:	605a      	str	r2, [r3, #4]
    3500:	625a      	str	r2, [r3, #36]	; 0x24
    3502:	641a      	str	r2, [r3, #64]	; 0x40
    3504:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3508:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    350c:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3510:	4809      	ldr	r0, [pc, #36]	; (3538 <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3512:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    3516:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    3518:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    351c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	20002818 	.word	0x20002818
    3528:	20000824 	.word	0x20000824
    352c:	40194000 	.word	0x40194000
    3530:	200014a8 	.word	0x200014a8
    3534:	20002f68 	.word	0x20002f68
    3538:	20002df8 	.word	0x20002df8

0000353c <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    3540:	460c      	mov	r4, r1
    3542:	b1d1      	cbz	r1, 357a <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    3544:	b1ea      	cbz	r2, 3582 <Print::write(unsigned char const*, unsigned int)+0x46>
    3546:	4680      	mov	r8, r0
    3548:	188e      	adds	r6, r1, r2
	size_t count = 0;
    354a:	2500      	movs	r5, #0
    354c:	4f0e      	ldr	r7, [pc, #56]	; (3588 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    354e:	e004      	b.n	355a <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3550:	f002 f9cc 	bl	58ec <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    3554:	42b4      	cmp	r4, r6
    3556:	4405      	add	r5, r0
    3558:	d00c      	beq.n	3574 <Print::write(unsigned char const*, unsigned int)+0x38>
    355a:	f8d8 3000 	ldr.w	r3, [r8]
    355e:	f814 0b01 	ldrb.w	r0, [r4], #1
    3562:	681b      	ldr	r3, [r3, #0]
    3564:	42bb      	cmp	r3, r7
    3566:	d0f3      	beq.n	3550 <Print::write(unsigned char const*, unsigned int)+0x14>
    3568:	4601      	mov	r1, r0
    356a:	4640      	mov	r0, r8
    356c:	4798      	blx	r3
    356e:	42b4      	cmp	r4, r6
    3570:	4405      	add	r5, r0
    3572:	d1f2      	bne.n	355a <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    3574:	4628      	mov	r0, r5
    3576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    357a:	460d      	mov	r5, r1
}
    357c:	4628      	mov	r0, r5
    357e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    3582:	4615      	mov	r5, r2
    3584:	e7f6      	b.n	3574 <Print::write(unsigned char const*, unsigned int)+0x38>
    3586:	bf00      	nop
    3588:	00001655 	.word	0x00001655

0000358c <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    3590:	688c      	ldr	r4, [r1, #8]
    3592:	b08a      	sub	sp, #40	; 0x28
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    3594:	b1dc      	cbz	r4, 35ce <Print::print(String const&)+0x42>
	unsigned int index = 0;
    3596:	2500      	movs	r5, #0
    3598:	4688      	mov	r8, r1
    359a:	4606      	mov	r6, r0
	size_t count = 0;
    359c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    359e:	462b      	mov	r3, r5
    35a0:	2221      	movs	r2, #33	; 0x21
    35a2:	a901      	add	r1, sp, #4
    35a4:	4640      	mov	r0, r8
    35a6:	f000 f9f1 	bl	398c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    35aa:	2c20      	cmp	r4, #32
    35ac:	4622      	mov	r2, r4
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    35ae:	6833      	ldr	r3, [r6, #0]
    35b0:	bf28      	it	cs
    35b2:	2220      	movcs	r2, #32
    35b4:	a901      	add	r1, sp, #4
    35b6:	4630      	mov	r0, r6
    35b8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    35ba:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    35bc:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    35be:	4798      	blx	r3
    35c0:	4407      	add	r7, r0
	while (len > 0) {
    35c2:	2c00      	cmp	r4, #0
    35c4:	d1eb      	bne.n	359e <Print::print(String const&)+0x12>
	}
	return count;
}
    35c6:	4638      	mov	r0, r7
    35c8:	b00a      	add	sp, #40	; 0x28
    35ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    35ce:	4627      	mov	r7, r4
}
    35d0:	4638      	mov	r0, r7
    35d2:	b00a      	add	sp, #40	; 0x28
    35d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000035d8 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    35d8:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    35da:	6803      	ldr	r3, [r0, #0]
{
    35dc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    35de:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    35e2:	2202      	movs	r2, #2
    35e4:	a901      	add	r1, sp, #4
    35e6:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    35e8:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    35ec:	4798      	blx	r3
}
    35ee:	b003      	add	sp, #12
    35f0:	f85d fb04 	ldr.w	pc, [sp], #4

000035f4 <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    35f4:	4b05      	ldr	r3, [pc, #20]	; (360c <_write+0x18>)
    35f6:	2802      	cmp	r0, #2
    35f8:	bf88      	it	hi
    35fa:	4603      	movhi	r3, r0
{
    35fc:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    35fe:	681c      	ldr	r4, [r3, #0]
    3600:	4618      	mov	r0, r3
    3602:	6863      	ldr	r3, [r4, #4]
}
    3604:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3608:	4718      	bx	r3
    360a:	bf00      	nop
    360c:	20001308 	.word	0x20001308

00003610 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    3610:	f002 b8f6 	b.w	5800 <usb_serial_peekchar>

00003614 <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    3614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    3618:	2700      	movs	r7, #0
{
    361a:	468b      	mov	fp, r1
    361c:	4681      	mov	r9, r0
    361e:	4692      	mov	sl, r2
	String str;
    3620:	4639      	mov	r1, r7
    3622:	f103 38ff 	add.w	r8, r3, #4294967295
    3626:	4c17      	ldr	r4, [pc, #92]	; (3684 <Stream::readStringUntil(char, unsigned int)+0x70>)
    3628:	4e17      	ldr	r6, [pc, #92]	; (3688 <Stream::readStringUntil(char, unsigned int)+0x74>)
    362a:	f000 f89f 	bl	376c <String::String(char const*)>
	return systick_millis_count;
    362e:	6825      	ldr	r5, [r4, #0]
    3630:	e00b      	b.n	364a <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    3632:	f002 f94b 	bl	58cc <usb_serial_getchar>
    if (c >= 0) return c;
    3636:	2800      	cmp	r0, #0
    3638:	da10      	bge.n	365c <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    363a:	f002 f9eb 	bl	5a14 <yield>
    363e:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    3640:	f8db 2008 	ldr.w	r2, [fp, #8]
    3644:	1b5b      	subs	r3, r3, r5
    3646:	4293      	cmp	r3, r2
    3648:	d215      	bcs.n	3676 <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    364a:	f8db 3000 	ldr.w	r3, [fp]
    364e:	695b      	ldr	r3, [r3, #20]
    3650:	42b3      	cmp	r3, r6
    3652:	d0ee      	beq.n	3632 <Stream::readStringUntil(char, unsigned int)+0x1e>
    3654:	4658      	mov	r0, fp
    3656:	4798      	blx	r3
    if (c >= 0) return c;
    3658:	2800      	cmp	r0, #0
    365a:	dbee      	blt.n	363a <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    365c:	d008      	beq.n	3670 <Stream::readStringUntil(char, unsigned int)+0x5c>
    365e:	4582      	cmp	sl, r0
    3660:	d006      	beq.n	3670 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    3662:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    3664:	b2c1      	uxtb	r1, r0
    3666:	4648      	mov	r0, r9
    3668:	f000 f962 	bl	3930 <String::append(char)>
	while (length < max || !max) {
    366c:	4547      	cmp	r7, r8
    366e:	d9de      	bls.n	362e <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    3670:	4648      	mov	r0, r9
    3672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    3676:	2301      	movs	r3, #1
    3678:	4648      	mov	r0, r9
    367a:	f88b 300c 	strb.w	r3, [fp, #12]
    367e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3682:	bf00      	nop
    3684:	20003dc4 	.word	0x20003dc4
    3688:	00001651 	.word	0x00001651

0000368c <String::String(String const&)>:
String::String(const String &value)
    368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    368e:	4288      	cmp	r0, r1
	buffer = NULL;
    3690:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    3694:	4604      	mov	r4, r0
	len = 0;
    3696:	6085      	str	r5, [r0, #8]
	flags = 0;
    3698:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    369a:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    369e:	d002      	beq.n	36a6 <String::String(String const&)+0x1a>
    36a0:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    36a2:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    36a4:	b90e      	cbnz	r6, 36aa <String::String(String const&)+0x1e>
}
    36a6:	4620      	mov	r0, r4
    36a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    36aa:	1c70      	adds	r0, r6, #1
    36ac:	f002 fac6 	bl	5c3c <malloc>
	if (newbuffer) {
    36b0:	2800      	cmp	r0, #0
    36b2:	d0f8      	beq.n	36a6 <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    36b4:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    36b6:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    36b8:	6020      	str	r0, [r4, #0]
	len = length;
    36ba:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    36be:	f004 ff1d 	bl	84fc <strcpy>
}
    36c2:	4620      	mov	r0, r4
    36c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36c6:	bf00      	nop

000036c8 <String::String(String&&)>:
	buffer = NULL;
    36c8:	2300      	movs	r3, #0
	if (&rhs == this) return;
    36ca:	4288      	cmp	r0, r1
	capacity = 0;
    36cc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    36d0:	6083      	str	r3, [r0, #8]
	flags = 0;
    36d2:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    36d4:	d00c      	beq.n	36f0 <String::String(String&&)+0x28>
String::String(String &&rval)
    36d6:	b410      	push	{r4}
	capacity = rhs.capacity;
    36d8:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    36dc:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    36e0:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    36e4:	688a      	ldr	r2, [r1, #8]
}
    36e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    36ea:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    36ec:	6082      	str	r2, [r0, #8]
}
    36ee:	4770      	bx	lr
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop

000036f4 <String::~String()>:
String::~String()
    36f4:	b510      	push	{r4, lr}
    36f6:	4604      	mov	r4, r0
	free(buffer);
    36f8:	6800      	ldr	r0, [r0, #0]
    36fa:	f002 faa7 	bl	5c4c <free>
}
    36fe:	4620      	mov	r0, r4
    3700:	bd10      	pop	{r4, pc}
    3702:	bf00      	nop

00003704 <String::copy(char const*, unsigned int)>:
{
    3704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3706:	4604      	mov	r4, r0
	if (length == 0) {
    3708:	4615      	mov	r5, r2
    370a:	b932      	cbnz	r2, 371a <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    370c:	6803      	ldr	r3, [r0, #0]
    370e:	b103      	cbz	r3, 3712 <String::copy(char const*, unsigned int)+0xe>
    3710:	701a      	strb	r2, [r3, #0]
		len = 0;
    3712:	2300      	movs	r3, #0
}
    3714:	4620      	mov	r0, r4
		len = 0;
    3716:	60a3      	str	r3, [r4, #8]
}
    3718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    371a:	6843      	ldr	r3, [r0, #4]
    371c:	460e      	mov	r6, r1
    371e:	429a      	cmp	r2, r3
    3720:	d91c      	bls.n	375c <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3722:	1c51      	adds	r1, r2, #1
    3724:	6800      	ldr	r0, [r0, #0]
    3726:	f002 fd55 	bl	61d4 <realloc>
	if (newbuffer) {
    372a:	4607      	mov	r7, r0
    372c:	b160      	cbz	r0, 3748 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    372e:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    3730:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    3734:	b90b      	cbnz	r3, 373a <String::copy(char const*, unsigned int)+0x36>
    3736:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    3738:	6827      	ldr	r7, [r4, #0]
    373a:	4631      	mov	r1, r6
    373c:	4638      	mov	r0, r7
	len = length;
    373e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    3740:	f004 fedc 	bl	84fc <strcpy>
}
    3744:	4620      	mov	r0, r4
    3746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    3748:	6820      	ldr	r0, [r4, #0]
    374a:	b110      	cbz	r0, 3752 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    374c:	f002 fa7e 	bl	5c4c <free>
			buffer = NULL;
    3750:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    3752:	2300      	movs	r3, #0
}
    3754:	4620      	mov	r0, r4
		len = capacity = 0;
    3756:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    375c:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    375e:	4631      	mov	r1, r6
	len = length;
    3760:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    3762:	4638      	mov	r0, r7
    3764:	f004 feca 	bl	84fc <strcpy>
	return *this;
    3768:	e7ec      	b.n	3744 <String::copy(char const*, unsigned int)+0x40>
    376a:	bf00      	nop

0000376c <String::String(char const*)>:
String::String(const char *cstr)
    376c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    376e:	2300      	movs	r3, #0
String::String(const char *cstr)
    3770:	4604      	mov	r4, r0
	capacity = 0;
    3772:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    3776:	6083      	str	r3, [r0, #8]
	flags = 0;
    3778:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    377a:	b141      	cbz	r1, 378e <String::String(char const*)+0x22>
    377c:	460d      	mov	r5, r1
    377e:	4608      	mov	r0, r1
    3780:	f004 ff1e 	bl	85c0 <strlen>
    3784:	4602      	mov	r2, r0
    3786:	4629      	mov	r1, r5
    3788:	4620      	mov	r0, r4
    378a:	f7ff ffbb 	bl	3704 <String::copy(char const*, unsigned int)>
}
    378e:	4620      	mov	r0, r4
    3790:	bd38      	pop	{r3, r4, r5, pc}
    3792:	bf00      	nop

00003794 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    3794:	b510      	push	{r4, lr}
	buffer = NULL;
    3796:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    3798:	b08a      	sub	sp, #40	; 0x28
    379a:	4604      	mov	r4, r0
	itoa(value, buf, base);
    379c:	4608      	mov	r0, r1
    379e:	a901      	add	r1, sp, #4
	len = 0;
    37a0:	60a3      	str	r3, [r4, #8]
	flags = 0;
    37a2:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    37a4:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    37a8:	f002 fa32 	bl	5c10 <itoa>
		copy(cstr, strlen(cstr));
    37ac:	a801      	add	r0, sp, #4
    37ae:	f004 ff07 	bl	85c0 <strlen>
    37b2:	a901      	add	r1, sp, #4
    37b4:	4602      	mov	r2, r0
    37b6:	4620      	mov	r0, r4
    37b8:	f7ff ffa4 	bl	3704 <String::copy(char const*, unsigned int)>
}
    37bc:	4620      	mov	r0, r4
    37be:	b00a      	add	sp, #40	; 0x28
    37c0:	bd10      	pop	{r4, pc}
    37c2:	bf00      	nop

000037c4 <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    37c4:	b510      	push	{r4, lr}
	buffer = NULL;
    37c6:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    37c8:	b08a      	sub	sp, #40	; 0x28
    37ca:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    37cc:	4608      	mov	r0, r1
    37ce:	a901      	add	r1, sp, #4
	len = 0;
    37d0:	60a3      	str	r3, [r4, #8]
	flags = 0;
    37d2:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    37d4:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    37d8:	f000 fd0c 	bl	41f4 <ultoa>
		copy(cstr, strlen(cstr));
    37dc:	a801      	add	r0, sp, #4
    37de:	f004 feef 	bl	85c0 <strlen>
    37e2:	a901      	add	r1, sp, #4
    37e4:	4602      	mov	r2, r0
    37e6:	4620      	mov	r0, r4
    37e8:	f7ff ff8c 	bl	3704 <String::copy(char const*, unsigned int)>
}
    37ec:	4620      	mov	r0, r4
    37ee:	b00a      	add	sp, #40	; 0x28
    37f0:	bd10      	pop	{r4, pc}
    37f2:	bf00      	nop

000037f4 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    37f4:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    37f6:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    37f8:	4604      	mov	r4, r0
    37fa:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    37fc:	1c88      	adds	r0, r1, #2
	len = 0;
    37fe:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    3800:	466a      	mov	r2, sp
	flags = 0;
    3802:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    3804:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    3808:	f000 fd26 	bl	4258 <dtostrf>
	if (cstr) {
    380c:	4605      	mov	r5, r0
    380e:	b148      	cbz	r0, 3824 <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
    3810:	f004 fed6 	bl	85c0 <strlen>
    3814:	4629      	mov	r1, r5
    3816:	4602      	mov	r2, r0
    3818:	4620      	mov	r0, r4
    381a:	f7ff ff73 	bl	3704 <String::copy(char const*, unsigned int)>
}
    381e:	4620      	mov	r0, r4
    3820:	b00b      	add	sp, #44	; 0x2c
    3822:	bd30      	pop	{r4, r5, pc}
		len = 0;
    3824:	60a0      	str	r0, [r4, #8]
}
    3826:	4620      	mov	r0, r4
    3828:	b00b      	add	sp, #44	; 0x2c
    382a:	bd30      	pop	{r4, r5, pc}

0000382c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    382c:	4281      	cmp	r1, r0
    382e:	d003      	beq.n	3838 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    3830:	688a      	ldr	r2, [r1, #8]
    3832:	6809      	ldr	r1, [r1, #0]
    3834:	f7ff bf66 	b.w	3704 <String::copy(char const*, unsigned int)>
}
    3838:	4770      	bx	lr
    383a:	bf00      	nop

0000383c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    383c:	4288      	cmp	r0, r1
{
    383e:	b538      	push	{r3, r4, r5, lr}
    3840:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    3842:	d00e      	beq.n	3862 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    3844:	6800      	ldr	r0, [r0, #0]
    3846:	460c      	mov	r4, r1
    3848:	b108      	cbz	r0, 384e <String::operator=(String&&)+0x12>
    384a:	f002 f9ff 	bl	5c4c <free>
	len = rhs.len;
    384e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    3850:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    3852:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    3856:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    3858:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    385c:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    3860:	60a3      	str	r3, [r4, #8]
}
    3862:	4628      	mov	r0, r5
    3864:	bd38      	pop	{r3, r4, r5, pc}
    3866:	bf00      	nop

00003868 <String::operator=(char const*)>:
{
    3868:	b538      	push	{r3, r4, r5, lr}
    386a:	4605      	mov	r5, r0
	if (cstr) {
    386c:	460c      	mov	r4, r1
    386e:	b149      	cbz	r1, 3884 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    3870:	4608      	mov	r0, r1
    3872:	f004 fea5 	bl	85c0 <strlen>
    3876:	4621      	mov	r1, r4
    3878:	4602      	mov	r2, r0
    387a:	4628      	mov	r0, r5
    387c:	f7ff ff42 	bl	3704 <String::copy(char const*, unsigned int)>
}
    3880:	4628      	mov	r0, r5
    3882:	bd38      	pop	{r3, r4, r5, pc}
    3884:	4628      	mov	r0, r5
		len = 0;
    3886:	60a9      	str	r1, [r5, #8]
}
    3888:	bd38      	pop	{r3, r4, r5, pc}
    388a:	bf00      	nop

0000388c <String::append(char const*, unsigned int)>:
{
    388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3890:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    3892:	6800      	ldr	r0, [r0, #0]
{
    3894:	460d      	mov	r5, r1
    3896:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    3898:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    389a:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    389c:	d809      	bhi.n	38b2 <String::append(char const*, unsigned int)+0x26>
    389e:	18c2      	adds	r2, r0, r3
    38a0:	4291      	cmp	r1, r2
    38a2:	d206      	bcs.n	38b2 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    38a4:	1a0f      	subs	r7, r1, r0
		self = true;
    38a6:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    38aa:	b936      	cbnz	r6, 38ba <String::append(char const*, unsigned int)+0x2e>
}
    38ac:	4620      	mov	r0, r4
    38ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    38b2:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    38b6:	2e00      	cmp	r6, #0
    38b8:	d0f8      	beq.n	38ac <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    38ba:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    38be:	6862      	ldr	r2, [r4, #4]
    38c0:	4590      	cmp	r8, r2
    38c2:	d90c      	bls.n	38de <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    38c4:	f108 0101 	add.w	r1, r8, #1
    38c8:	f002 fc84 	bl	61d4 <realloc>
	if (newbuffer) {
    38cc:	2800      	cmp	r0, #0
    38ce:	d0ed      	beq.n	38ac <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    38d0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    38d2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    38d6:	b913      	cbnz	r3, 38de <String::append(char const*, unsigned int)+0x52>
    38d8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    38da:	6820      	ldr	r0, [r4, #0]
    38dc:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    38de:	f1b9 0f00 	cmp.w	r9, #0
    38e2:	d108      	bne.n	38f6 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    38e4:	4629      	mov	r1, r5
    38e6:	4418      	add	r0, r3
    38e8:	f004 fe08 	bl	84fc <strcpy>
}
    38ec:	4620      	mov	r0, r4
	len = newlen;
    38ee:	f8c4 8008 	str.w	r8, [r4, #8]
}
    38f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    38f6:	4632      	mov	r2, r6
    38f8:	19c1      	adds	r1, r0, r7
    38fa:	4418      	add	r0, r3
    38fc:	f000 fbdc 	bl	40b8 <memcpy>
		buffer[newlen] = 0;
    3900:	6823      	ldr	r3, [r4, #0]
    3902:	2200      	movs	r2, #0
    3904:	f803 2008 	strb.w	r2, [r3, r8]
    3908:	e7f0      	b.n	38ec <String::append(char const*, unsigned int)+0x60>
    390a:	bf00      	nop

0000390c <String::append(String const&)>:
	return append(s.buffer, s.len);
    390c:	688a      	ldr	r2, [r1, #8]
    390e:	6809      	ldr	r1, [r1, #0]
    3910:	f7ff bfbc 	b.w	388c <String::append(char const*, unsigned int)>

00003914 <String::append(char const*)>:
{
    3914:	b538      	push	{r3, r4, r5, lr}
    3916:	4605      	mov	r5, r0
	if (cstr) append(cstr, strlen(cstr));
    3918:	b141      	cbz	r1, 392c <String::append(char const*)+0x18>
    391a:	460c      	mov	r4, r1
    391c:	4608      	mov	r0, r1
    391e:	f004 fe4f 	bl	85c0 <strlen>
    3922:	4602      	mov	r2, r0
    3924:	4621      	mov	r1, r4
    3926:	4628      	mov	r0, r5
    3928:	f7ff ffb0 	bl	388c <String::append(char const*, unsigned int)>
}
    392c:	4628      	mov	r0, r5
    392e:	bd38      	pop	{r3, r4, r5, pc}

00003930 <String::append(char)>:
{
    3930:	b510      	push	{r4, lr}
    3932:	b082      	sub	sp, #8
	buf[1] = 0;
    3934:	2300      	movs	r3, #0
{
    3936:	4604      	mov	r4, r0
	append(buf, 1);
    3938:	2201      	movs	r2, #1
	buf[0] = c;
    393a:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    393e:	a901      	add	r1, sp, #4
	buf[1] = 0;
    3940:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    3944:	f7ff ffa2 	bl	388c <String::append(char const*, unsigned int)>
}
    3948:	4620      	mov	r0, r4
    394a:	b002      	add	sp, #8
    394c:	bd10      	pop	{r4, pc}
    394e:	bf00      	nop

00003950 <operator+(StringSumHelper const&, String const&)>:
{
    3950:	b510      	push	{r4, lr}
    3952:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    3954:	688a      	ldr	r2, [r1, #8]
    3956:	6809      	ldr	r1, [r1, #0]
    3958:	f7ff ff98 	bl	388c <String::append(char const*, unsigned int)>
}
    395c:	4620      	mov	r0, r4
    395e:	bd10      	pop	{r4, pc}

00003960 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3960:	6882      	ldr	r2, [r0, #8]
{
    3962:	b508      	push	{r3, lr}
    3964:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3966:	b13a      	cbz	r2, 3978 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    3968:	b161      	cbz	r1, 3984 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    396a:	6800      	ldr	r0, [r0, #0]
    396c:	f004 fc5c 	bl	8228 <strcmp>
    3970:	fab0 f080 	clz	r0, r0
    3974:	0940      	lsrs	r0, r0, #5
}
    3976:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3978:	b131      	cbz	r1, 3988 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    397a:	7818      	ldrb	r0, [r3, #0]
    397c:	fab0 f080 	clz	r0, r0
    3980:	0940      	lsrs	r0, r0, #5
}
    3982:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    3984:	6803      	ldr	r3, [r0, #0]
    3986:	e7f8      	b.n	397a <String::equals(char const*) const+0x1a>
    3988:	2001      	movs	r0, #1
}
    398a:	bd08      	pop	{r3, pc}

0000398c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    398c:	b1c2      	cbz	r2, 39c0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    398e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    3990:	fab1 f681 	clz	r6, r1
    3994:	460c      	mov	r4, r1
    3996:	0976      	lsrs	r6, r6, #5
    3998:	b119      	cbz	r1, 39a2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    399a:	6885      	ldr	r5, [r0, #8]
    399c:	429d      	cmp	r5, r3
    399e:	d801      	bhi.n	39a4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    39a0:	700e      	strb	r6, [r1, #0]
}
    39a2:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    39a4:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    39a6:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    39aa:	6801      	ldr	r1, [r0, #0]
    39ac:	4620      	mov	r0, r4
    39ae:	4565      	cmp	r5, ip
    39b0:	4419      	add	r1, r3
    39b2:	bf28      	it	cs
    39b4:	4665      	movcs	r5, ip
    39b6:	462a      	mov	r2, r5
    39b8:	f004 f948 	bl	7c4c <strncpy>
	buf[n] = 0;
    39bc:	5566      	strb	r6, [r4, r5]
}
    39be:	bd70      	pop	{r4, r5, r6, pc}
    39c0:	4770      	bx	lr
    39c2:	bf00      	nop

000039c4 <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    39c4:	6883      	ldr	r3, [r0, #8]
    39c6:	b143      	cbz	r3, 39da <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    39c8:	6809      	ldr	r1, [r1, #0]
{
    39ca:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    39cc:	6804      	ldr	r4, [r0, #0]
    39ce:	4620      	mov	r0, r4
    39d0:	f004 face 	bl	7f70 <strstr>
	if (found == NULL) return -1;
    39d4:	b120      	cbz	r0, 39e0 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    39d6:	1b00      	subs	r0, r0, r4
}
    39d8:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    39da:	f04f 30ff 	mov.w	r0, #4294967295
}
    39de:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    39e0:	f04f 30ff 	mov.w	r0, #4294967295
}
    39e4:	bd10      	pop	{r4, pc}
    39e6:	bf00      	nop

000039e8 <String::substring(unsigned int) const>:
{
    39e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    39ec:	688f      	ldr	r7, [r1, #8]
{
    39ee:	460e      	mov	r6, r1
    39f0:	4604      	mov	r4, r0
	if (left > right) {
    39f2:	4297      	cmp	r7, r2
    39f4:	d202      	bcs.n	39fc <String::substring(unsigned int) const+0x14>
    39f6:	4613      	mov	r3, r2
    39f8:	463a      	mov	r2, r7
    39fa:	461f      	mov	r7, r3
	buffer = NULL;
    39fc:	2300      	movs	r3, #0
	len = 0;
    39fe:	60a3      	str	r3, [r4, #8]
	flags = 0;
    3a00:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    3a02:	68b0      	ldr	r0, [r6, #8]
    3a04:	4290      	cmp	r0, r2
	capacity = 0;
    3a06:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    3a0a:	d314      	bcc.n	3a36 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    3a0c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    3a0e:	6831      	ldr	r1, [r6, #0]
    3a10:	bf28      	it	cs
    3a12:	4607      	movcs	r7, r0
    3a14:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    3a18:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    3a1a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    3a1c:	189d      	adds	r5, r3, r2
    3a1e:	d00d      	beq.n	3a3c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    3a20:	4628      	mov	r0, r5
    3a22:	f004 fdcd 	bl	85c0 <strlen>
    3a26:	4629      	mov	r1, r5
    3a28:	4602      	mov	r2, r0
    3a2a:	4620      	mov	r0, r4
    3a2c:	f7ff fe6a 	bl	3704 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3a30:	6833      	ldr	r3, [r6, #0]
    3a32:	f803 8007 	strb.w	r8, [r3, r7]
}
    3a36:	4620      	mov	r0, r4
    3a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    3a3c:	60a5      	str	r5, [r4, #8]
    3a3e:	e7f8      	b.n	3a32 <String::substring(unsigned int) const+0x4a>

00003a40 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    3a40:	429a      	cmp	r2, r3
{
    3a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a46:	4604      	mov	r4, r0
    3a48:	460e      	mov	r6, r1
	if (left > right) {
    3a4a:	d902      	bls.n	3a52 <String::substring(unsigned int, unsigned int) const+0x12>
    3a4c:	4611      	mov	r1, r2
    3a4e:	461a      	mov	r2, r3
    3a50:	460b      	mov	r3, r1
	buffer = NULL;
    3a52:	2000      	movs	r0, #0
	len = 0;
    3a54:	60a0      	str	r0, [r4, #8]
	flags = 0;
    3a56:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    3a58:	68b7      	ldr	r7, [r6, #8]
    3a5a:	4297      	cmp	r7, r2
	capacity = 0;
    3a5c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    3a60:	d314      	bcc.n	3a8c <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    3a62:	429f      	cmp	r7, r3
    3a64:	bf28      	it	cs
    3a66:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    3a68:	6833      	ldr	r3, [r6, #0]
    3a6a:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    3a6e:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    3a70:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    3a72:	189d      	adds	r5, r3, r2
    3a74:	d00d      	beq.n	3a92 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    3a76:	4628      	mov	r0, r5
    3a78:	f004 fda2 	bl	85c0 <strlen>
    3a7c:	4629      	mov	r1, r5
    3a7e:	4602      	mov	r2, r0
    3a80:	4620      	mov	r0, r4
    3a82:	f7ff fe3f 	bl	3704 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3a86:	6833      	ldr	r3, [r6, #0]
    3a88:	f803 8007 	strb.w	r8, [r3, r7]
}
    3a8c:	4620      	mov	r0, r4
    3a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    3a92:	60a5      	str	r5, [r4, #8]
    3a94:	e7f8      	b.n	3a88 <String::substring(unsigned int, unsigned int) const+0x48>
    3a96:	bf00      	nop

00003a98 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    3a98:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    3a9a:	6804      	ldr	r4, [r0, #0]
{
    3a9c:	4605      	mov	r5, r0
	if (!buffer) return *this;
    3a9e:	b144      	cbz	r4, 3ab2 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    3aa0:	7820      	ldrb	r0, [r4, #0]
    3aa2:	b130      	cbz	r0, 3ab2 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    3aa4:	f003 fe24 	bl	76f0 <tolower>
    3aa8:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    3aaa:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    3aae:	2800      	cmp	r0, #0
    3ab0:	d1f8      	bne.n	3aa4 <String::toLowerCase()+0xc>
	}
	return *this;
}
    3ab2:	4628      	mov	r0, r5
    3ab4:	bd38      	pop	{r3, r4, r5, pc}
    3ab6:	bf00      	nop

00003ab8 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    3ab8:	6800      	ldr	r0, [r0, #0]
    3aba:	b108      	cbz	r0, 3ac0 <String::toInt() const+0x8>
    3abc:	f002 b8a4 	b.w	5c08 <atol>
	return 0;
}
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop

00003ac4 <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    3ac4:	6800      	ldr	r0, [r0, #0]
    3ac6:	b110      	cbz	r0, 3ace <String::toFloat() const+0xa>
    3ac8:	2100      	movs	r1, #0
    3aca:	f003 bcb5 	b.w	7438 <strtof>
	return 0.0;
}
    3ace:	ed9f 0a01 	vldr	s0, [pc, #4]	; 3ad4 <String::toFloat() const+0x10>
    3ad2:	4770      	bx	lr
    3ad4:	00000000 	.word	0x00000000

00003ad8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3ad8:	49a2      	ldr	r1, [pc, #648]	; (3d64 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3ada:	4ba3      	ldr	r3, [pc, #652]	; (3d68 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    3adc:	4288      	cmp	r0, r1
{
    3ade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    3ae2:	4ca2      	ldr	r4, [pc, #648]	; (3d6c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3ae4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    3ae6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3ae8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    3aec:	d91b      	bls.n	3b26 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3aee:	4ba0      	ldr	r3, [pc, #640]	; (3d70 <set_arm_clock+0x298>)
    3af0:	4298      	cmp	r0, r3
    3af2:	f240 8102 	bls.w	3cfa <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3af6:	1ac3      	subs	r3, r0, r3
    3af8:	499e      	ldr	r1, [pc, #632]	; (3d74 <set_arm_clock+0x29c>)
    3afa:	0a1b      	lsrs	r3, r3, #8
    3afc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b00:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3b04:	09db      	lsrs	r3, r3, #7
    3b06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3b0e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b12:	428b      	cmp	r3, r1
    3b14:	bf28      	it	cs
    3b16:	460b      	movcs	r3, r1
    3b18:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    3b1c:	4b96      	ldr	r3, [pc, #600]	; (3d78 <set_arm_clock+0x2a0>)
    3b1e:	fba3 3707 	umull	r3, r7, r3, r7
    3b22:	08ff      	lsrs	r7, r7, #3
    3b24:	e004      	b.n	3b30 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3b26:	4f95      	ldr	r7, [pc, #596]	; (3d7c <set_arm_clock+0x2a4>)
    3b28:	42b8      	cmp	r0, r7
    3b2a:	bf8c      	ite	hi
    3b2c:	270e      	movhi	r7, #14
    3b2e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3b30:	498d      	ldr	r1, [pc, #564]	; (3d68 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b32:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3b36:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b3a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3b40:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b44:	d20c      	bcs.n	3b60 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3b46:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3b4a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3b4e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3b52:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3b56:	680b      	ldr	r3, [r1, #0]
    3b58:	2b00      	cmp	r3, #0
    3b5a:	dafc      	bge.n	3b56 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3b5c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3b60:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    3b64:	d124      	bne.n	3bb0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3b66:	4986      	ldr	r1, [pc, #536]	; (3d80 <set_arm_clock+0x2a8>)
    3b68:	690c      	ldr	r4, [r1, #16]
    3b6a:	4986      	ldr	r1, [pc, #536]	; (3d84 <set_arm_clock+0x2ac>)
    3b6c:	43a1      	bics	r1, r4
    3b6e:	f000 80ea 	beq.w	3d46 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3b72:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    3b76:	4634      	mov	r4, r6
    3b78:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3b7c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    3b80:	d004      	beq.n	3b8c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3b82:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3b86:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    3b88:	4b77      	ldr	r3, [pc, #476]	; (3d68 <set_arm_clock+0x290>)
    3b8a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3b8c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    3b90:	d007      	beq.n	3ba2 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    3b92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    3b96:	4974      	ldr	r1, [pc, #464]	; (3d68 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    3b98:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    3b9a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    3b9c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3b9e:	071a      	lsls	r2, r3, #28
    3ba0:	d4fc      	bmi.n	3b9c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    3ba2:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    3ba6:	4a70      	ldr	r2, [pc, #448]	; (3d68 <set_arm_clock+0x290>)
    3ba8:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3baa:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bac:	069b      	lsls	r3, r3, #26
    3bae:	d4fc      	bmi.n	3baa <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    3bb0:	4c75      	ldr	r4, [pc, #468]	; (3d88 <set_arm_clock+0x2b0>)
    3bb2:	42a0      	cmp	r0, r4
    3bb4:	f200 80ce 	bhi.w	3d54 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    3bb8:	f04f 0c01 	mov.w	ip, #1
    3bbc:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    3bbe:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3bc0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3bc4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3bc8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3bcc:	42a2      	cmp	r2, r4
    3bce:	d818      	bhi.n	3c02 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3bd0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3bd4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3bd8:	f040 808d 	bne.w	3cf6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    3bdc:	f1bc 0f04 	cmp.w	ip, #4
    3be0:	f200 8091 	bhi.w	3d06 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3be4:	180a      	adds	r2, r1, r0
    3be6:	42a2      	cmp	r2, r4
    3be8:	f200 80a4 	bhi.w	3d34 <set_arm_clock+0x25c>
    3bec:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3bf0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3bf2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3bf6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    3bfa:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3bfe:	42a2      	cmp	r2, r4
    3c00:	d9e6      	bls.n	3bd0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c02:	f10c 31ff 	add.w	r1, ip, #4294967295
    3c06:	028c      	lsls	r4, r1, #10
    3c08:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3c0c:	485f      	ldr	r0, [pc, #380]	; (3d8c <set_arm_clock+0x2b4>)
    3c0e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3c10:	4a5f      	ldr	r2, [pc, #380]	; (3d90 <set_arm_clock+0x2b8>)
    3c12:	4290      	cmp	r0, r2
    3c14:	d97f      	bls.n	3d16 <set_arm_clock+0x23e>
    3c16:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 3dbc <set_arm_clock+0x2e4>
    3c1a:	226c      	movs	r2, #108	; 0x6c
    3c1c:	485d      	ldr	r0, [pc, #372]	; (3d94 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3c1e:	4d58      	ldr	r5, [pc, #352]	; (3d80 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3c20:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3c24:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3c28:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3c2c:	f8df c190 	ldr.w	ip, [pc, #400]	; 3dc0 <set_arm_clock+0x2e8>
    3c30:	ea0e 0c0c 	and.w	ip, lr, ip
    3c34:	45d4      	cmp	ip, sl
    3c36:	d009      	beq.n	3c4c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    3c3c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3c40:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3c44:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3c46:	682a      	ldr	r2, [r5, #0]
    3c48:	2a00      	cmp	r2, #0
    3c4a:	dafc      	bge.n	3c46 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    3c4c:	4a46      	ldr	r2, [pc, #280]	; (3d68 <set_arm_clock+0x290>)
    3c4e:	6915      	ldr	r5, [r2, #16]
    3c50:	f005 0507 	and.w	r5, r5, #7
    3c54:	429d      	cmp	r5, r3
    3c56:	d003      	beq.n	3c60 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3c58:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    3c5a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3c5c:	03dd      	lsls	r5, r3, #15
    3c5e:	d4fc      	bmi.n	3c5a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3c60:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    3c64:	d009      	beq.n	3c7a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    3c66:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3c6a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    3c6e:	4a3e      	ldr	r2, [pc, #248]	; (3d68 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    3c70:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    3c72:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    3c74:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3c76:	0799      	lsls	r1, r3, #30
    3c78:	d4fc      	bmi.n	3c74 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3c7a:	4947      	ldr	r1, [pc, #284]	; (3d98 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    3c7c:	4a47      	ldr	r2, [pc, #284]	; (3d9c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3c7e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    3c80:	4291      	cmp	r1, r2
    3c82:	d83c      	bhi.n	3cfe <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    3c84:	4b46      	ldr	r3, [pc, #280]	; (3da0 <set_arm_clock+0x2c8>)
    3c86:	09c9      	lsrs	r1, r1, #7
    3c88:	fba3 3101 	umull	r3, r1, r3, r1
    3c8c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    3c8e:	1e4b      	subs	r3, r1, #1
    3c90:	021b      	lsls	r3, r3, #8
    3c92:	ea86 0203 	eor.w	r2, r6, r3
    3c96:	f412 7f40 	tst.w	r2, #768	; 0x300
    3c9a:	d006      	beq.n	3caa <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    3c9c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    3ca4:	4a30      	ldr	r2, [pc, #192]	; (3d68 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    3ca6:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    3ca8:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    3caa:	4a2f      	ldr	r2, [pc, #188]	; (3d68 <set_arm_clock+0x290>)
    3cac:	6953      	ldr	r3, [r2, #20]
    3cae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    3cb2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    3cb4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3cb6:	069b      	lsls	r3, r3, #26
    3cb8:	d4fc      	bmi.n	3cb4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3cba:	4b3a      	ldr	r3, [pc, #232]	; (3da4 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3cbc:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3cbe:	fba3 2300 	umull	r2, r3, r3, r0
    3cc2:	f04f 32ff 	mov.w	r2, #4294967295
    3cc6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    3cca:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3cce:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3cd2:	4a35      	ldr	r2, [pc, #212]	; (3da8 <set_arm_clock+0x2d0>)
    3cd4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3cd6:	4a35      	ldr	r2, [pc, #212]	; (3dac <set_arm_clock+0x2d4>)
    3cd8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    3cda:	4a35      	ldr	r2, [pc, #212]	; (3db0 <set_arm_clock+0x2d8>)
    3cdc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    3cde:	d208      	bcs.n	3cf2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3ce0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3ce4:	4a21      	ldr	r2, [pc, #132]	; (3d6c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3ce6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    3cea:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3cec:	6813      	ldr	r3, [r2, #0]
    3cee:	2b00      	cmp	r3, #0
    3cf0:	dafc      	bge.n	3cec <set_arm_clock+0x214>
	}

	return frequency;
}
    3cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3cf6:	4673      	mov	r3, lr
    3cf8:	e762      	b.n	3bc0 <set_arm_clock+0xe8>
    3cfa:	2712      	movs	r7, #18
    3cfc:	e718      	b.n	3b30 <set_arm_clock+0x58>
    3cfe:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3d02:	2104      	movs	r1, #4
    3d04:	e7c5      	b.n	3c92 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3d06:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3d0a:	4820      	ldr	r0, [pc, #128]	; (3d8c <set_arm_clock+0x2b4>)
    3d0c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3d0e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3d10:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3d12:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3d16:	4a27      	ldr	r2, [pc, #156]	; (3db4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3d18:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3dc4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3d1c:	fba2 2000 	umull	r2, r0, r2, r0
    3d20:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3d22:	4825      	ldr	r0, [pc, #148]	; (3db8 <set_arm_clock+0x2e0>)
    3d24:	2a36      	cmp	r2, #54	; 0x36
    3d26:	bf38      	it	cc
    3d28:	2236      	movcc	r2, #54	; 0x36
    3d2a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3d2e:	ea42 0a0a 	orr.w	sl, r2, sl
    3d32:	e774      	b.n	3c1e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3d34:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3d38:	2300      	movs	r3, #0
    3d3a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    3d3e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3d42:	46ac      	mov	ip, r5
    3d44:	e762      	b.n	3c0c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3d46:	461d      	mov	r5, r3
    3d48:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    3d4c:	4611      	mov	r1, r2
    3d4e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3d52:	e713      	b.n	3b7c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3d54:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3d56:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3d5a:	4602      	mov	r2, r0
    3d5c:	4631      	mov	r1, r6
    3d5e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    3d60:	46e6      	mov	lr, ip
    3d62:	e753      	b.n	3c0c <set_arm_clock+0x134>
    3d64:	1f78a400 	.word	0x1f78a400
    3d68:	400fc000 	.word	0x400fc000
    3d6c:	40080000 	.word	0x40080000
    3d70:	23c34600 	.word	0x23c34600
    3d74:	004cb223 	.word	0x004cb223
    3d78:	51eb851f 	.word	0x51eb851f
    3d7c:	016e3600 	.word	0x016e3600
    3d80:	400d8000 	.word	0x400d8000
    3d84:	80003040 	.word	0x80003040
    3d88:	269fb1ff 	.word	0x269fb1ff
    3d8c:	005b8d80 	.word	0x005b8d80
    3d90:	4df67eff 	.word	0x4df67eff
    3d94:	4d3f6400 	.word	0x4d3f6400
    3d98:	08f0d17f 	.word	0x08f0d17f
    3d9c:	2cb4177f 	.word	0x2cb4177f
    3da0:	00e5109f 	.word	0x00e5109f
    3da4:	431bde83 	.word	0x431bde83
    3da8:	20001304 	.word	0x20001304
    3dac:	20001300 	.word	0x20001300
    3db0:	20003dbc 	.word	0x20003dbc
    3db4:	165e9f81 	.word	0x165e9f81
    3db8:	00b71b00 	.word	0x00b71b00
    3dbc:	8000206c 	.word	0x8000206c
    3dc0:	8001307f 	.word	0x8001307f
    3dc4:	80002000 	.word	0x80002000

00003dc8 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3dc8:	b900      	cbnz	r0, 3dcc <delay+0x4>
    3dca:	4770      	bx	lr
{
    3dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3dd0:	2101      	movs	r1, #1
    3dd2:	4681      	mov	r9, r0
    3dd4:	4c21      	ldr	r4, [pc, #132]	; (3e5c <delay+0x94>)
    3dd6:	4d22      	ldr	r5, [pc, #136]	; (3e60 <delay+0x98>)
    3dd8:	4e22      	ldr	r6, [pc, #136]	; (3e64 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3dda:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3dde:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3de0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3de2:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3de6:	2b00      	cmp	r3, #0
    3de8:	d1f7      	bne.n	3dda <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3dea:	491f      	ldr	r1, [pc, #124]	; (3e68 <delay+0xa0>)
    3dec:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3dee:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3df2:	f8df a078 	ldr.w	sl, [pc, #120]	; 3e6c <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    3df6:	1a1b      	subs	r3, r3, r0
    3df8:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    3dfa:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3dfe:	f8da 2000 	ldr.w	r2, [sl]
    3e02:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    3e06:	455a      	cmp	r2, fp
    3e08:	bf94      	ite	ls
    3e0a:	4490      	addls	r8, r2
    3e0c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3e0e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3e12:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3e14:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3e16:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d1f7      	bne.n	3e0e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3e1e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e20:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3e24:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3e26:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e2a:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    3e2e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    3e32:	bf94      	ite	ls
    3e34:	4462      	addls	r2, ip
    3e36:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    3e3a:	eba2 0208 	sub.w	r2, r2, r8
    3e3e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    3e42:	d306      	bcc.n	3e52 <delay+0x8a>
			if (--msec == 0) return;
    3e44:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3e48:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3e4c:	d1df      	bne.n	3e0e <delay+0x46>
}
    3e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    3e52:	f001 fddf 	bl	5a14 <yield>
		while ((micros() - start) >= 1000) {
    3e56:	4904      	ldr	r1, [pc, #16]	; (3e68 <delay+0xa0>)
    3e58:	e7d9      	b.n	3e0e <delay+0x46>
    3e5a:	bf00      	nop
    3e5c:	20003dc8 	.word	0x20003dc8
    3e60:	20003dc4 	.word	0x20003dc4
    3e64:	20003dc0 	.word	0x20003dc0
    3e68:	e0001000 	.word	0xe0001000
    3e6c:	20003dbc 	.word	0x20003dbc

00003e70 <micros>:
{
    3e70:	b430      	push	{r4, r5}
    3e72:	4b0f      	ldr	r3, [pc, #60]	; (3eb0 <micros+0x40>)
    3e74:	f04f 0c01 	mov.w	ip, #1
    3e78:	4d0e      	ldr	r5, [pc, #56]	; (3eb4 <micros+0x44>)
    3e7a:	4c0f      	ldr	r4, [pc, #60]	; (3eb8 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3e7c:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    3e80:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    3e82:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3e84:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    3e88:	2a00      	cmp	r2, #0
    3e8a:	d1f7      	bne.n	3e7c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3e8c:	4b0b      	ldr	r3, [pc, #44]	; (3ebc <micros+0x4c>)
    3e8e:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e90:	4a0b      	ldr	r2, [pc, #44]	; (3ec0 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    3e92:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    3e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e98:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    3e9a:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3e9e:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    3ea2:	bc30      	pop	{r4, r5}
    3ea4:	428a      	cmp	r2, r1
    3ea6:	bf94      	ite	ls
    3ea8:	1880      	addls	r0, r0, r2
    3eaa:	1840      	addhi	r0, r0, r1
    3eac:	4770      	bx	lr
    3eae:	bf00      	nop
    3eb0:	20003dc8 	.word	0x20003dc8
    3eb4:	20003dc4 	.word	0x20003dc4
    3eb8:	20003dc0 	.word	0x20003dc0
    3ebc:	e0001000 	.word	0xe0001000
    3ec0:	20003dbc 	.word	0x20003dbc

00003ec4 <digitalWrite>:
    3ec4:	2836      	cmp	r0, #54	; 0x36
    3ec6:	d816      	bhi.n	3ef6 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3ec8:	0102      	lsls	r2, r0, #4
    3eca:	4b10      	ldr	r3, [pc, #64]	; (3f0c <digitalWrite+0x48>)
    3ecc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3ed0:	589b      	ldr	r3, [r3, r2]
{
    3ed2:	b410      	push	{r4}
	mask = p->mask;
    3ed4:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    3ed6:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3ed8:	4214      	tst	r4, r2
    3eda:	d005      	beq.n	3ee8 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    3edc:	b961      	cbnz	r1, 3ef8 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3ede:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    3ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    3ee6:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3ee8:	6883      	ldr	r3, [r0, #8]
		if (val) {
    3eea:	b151      	cbz	r1, 3f02 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3eec:	4a08      	ldr	r2, [pc, #32]	; (3f10 <digitalWrite+0x4c>)
}
    3eee:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3ef2:	601a      	str	r2, [r3, #0]
}
    3ef4:	4770      	bx	lr
    3ef6:	4770      	bx	lr
    3ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    3efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3f00:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3f02:	4a04      	ldr	r2, [pc, #16]	; (3f14 <digitalWrite+0x50>)
}
    3f04:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3f08:	601a      	str	r2, [r3, #0]
}
    3f0a:	4770      	bx	lr
    3f0c:	20000cac 	.word	0x20000cac
    3f10:	0001f038 	.word	0x0001f038
    3f14:	00013038 	.word	0x00013038

00003f18 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    3f18:	2836      	cmp	r0, #54	; 0x36
    3f1a:	d80b      	bhi.n	3f34 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    3f1c:	4b06      	ldr	r3, [pc, #24]	; (3f38 <digitalRead+0x20>)
    3f1e:	0102      	lsls	r2, r0, #4
    3f20:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    3f24:	589a      	ldr	r2, [r3, r2]
    3f26:	68c3      	ldr	r3, [r0, #12]
    3f28:	6892      	ldr	r2, [r2, #8]
    3f2a:	421a      	tst	r2, r3
    3f2c:	bf14      	ite	ne
    3f2e:	2001      	movne	r0, #1
    3f30:	2000      	moveq	r0, #0
    3f32:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3f34:	2000      	movs	r0, #0
}
    3f36:	4770      	bx	lr
    3f38:	20000cac 	.word	0x20000cac

00003f3c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3f3c:	2836      	cmp	r0, #54	; 0x36
    3f3e:	d829      	bhi.n	3f94 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    3f40:	4b16      	ldr	r3, [pc, #88]	; (3f9c <pinMode+0x60>)
    3f42:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3f44:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    3f46:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3f4a:	589a      	ldr	r2, [r3, r2]
{
    3f4c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3f4e:	6853      	ldr	r3, [r2, #4]
    3f50:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3f52:	d00e      	beq.n	3f72 <pinMode+0x36>
    3f54:	2904      	cmp	r1, #4
    3f56:	d00c      	beq.n	3f72 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3f58:	ea23 0304 	bic.w	r3, r3, r4
    3f5c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3f5e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    3f60:	b1a9      	cbz	r1, 3f8e <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    3f62:	2902      	cmp	r1, #2
    3f64:	d017      	beq.n	3f96 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3f66:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3f68:	bf0c      	ite	eq
    3f6a:	4a0d      	ldreq	r2, [pc, #52]	; (3fa0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3f6c:	4a0d      	ldrne	r2, [pc, #52]	; (3fa4 <pinMode+0x68>)
    3f6e:	601a      	str	r2, [r3, #0]
    3f70:	e007      	b.n	3f82 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3f72:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    3f74:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3f76:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3f78:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    3f7a:	d008      	beq.n	3f8e <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3f7c:	f640 0238 	movw	r2, #2104	; 0x838
    3f80:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3f82:	6843      	ldr	r3, [r0, #4]
    3f84:	2215      	movs	r2, #21
}
    3f86:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    3f8a:	601a      	str	r2, [r3, #0]
}
    3f8c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3f8e:	2238      	movs	r2, #56	; 0x38
    3f90:	601a      	str	r2, [r3, #0]
    3f92:	e7f6      	b.n	3f82 <pinMode+0x46>
    3f94:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3f96:	4a04      	ldr	r2, [pc, #16]	; (3fa8 <pinMode+0x6c>)
    3f98:	601a      	str	r2, [r3, #0]
    3f9a:	e7f2      	b.n	3f82 <pinMode+0x46>
    3f9c:	20000cac 	.word	0x20000cac
    3fa0:	00013038 	.word	0x00013038
    3fa4:	00010038 	.word	0x00010038
    3fa8:	0001f038 	.word	0x0001f038

00003fac <dummy_isr>:
static void dummy_isr() {};
    3fac:	4770      	bx	lr
    3fae:	bf00      	nop

00003fb0 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    3fb0:	2836      	cmp	r0, #54	; 0x36
    3fb2:	d852      	bhi.n	405a <attachInterrupt+0xaa>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    3fb4:	0100      	lsls	r0, r0, #4
{
    3fb6:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    3fb8:	4c31      	ldr	r4, [pc, #196]	; (4080 <attachInterrupt+0xd0>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    3fba:	4d32      	ldr	r5, [pc, #200]	; (4084 <attachInterrupt+0xd4>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    3fbc:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    3fbe:	42ab      	cmp	r3, r5
    3fc0:	d050      	beq.n	4064 <attachInterrupt+0xb4>
    3fc2:	d843      	bhi.n	404c <attachInterrupt+0x9c>
    3fc4:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    3fc8:	d045      	beq.n	4056 <attachInterrupt+0xa6>
    3fca:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    3fce:	42ab      	cmp	r3, r5
    3fd0:	d13a      	bne.n	4048 <attachInterrupt+0x98>
    3fd2:	4d2d      	ldr	r5, [pc, #180]	; (4088 <attachInterrupt+0xd8>)
	volatile uint32_t *mux = portConfigRegister(pin);
    3fd4:	4404      	add	r4, r0
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    3fd6:	4e2d      	ldr	r6, [pc, #180]	; (408c <attachInterrupt+0xdc>)
    3fd8:	482d      	ldr	r0, [pc, #180]	; (4090 <attachInterrupt+0xe0>)
    3fda:	6867      	ldr	r7, [r4, #4]
    3fdc:	f8c0 62b4 	str.w	r6, [r0, #692]	; 0x2b4
	uint32_t mask = digitalPinToBitMask(pin);
    3fe0:	68e0      	ldr	r0, [r4, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    3fe2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3fe6:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
    3fea:	2a04      	cmp	r2, #4
    3fec:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    3ff0:	d82a      	bhi.n	4048 <attachInterrupt+0x98>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3ff2:	695c      	ldr	r4, [r3, #20]
    3ff4:	ea24 0400 	bic.w	r4, r4, r0
    3ff8:	615c      	str	r4, [r3, #20]
	*mux = 5;		// pin is GPIO
    3ffa:	f04f 0405 	mov.w	r4, #5
    3ffe:	603c      	str	r4, [r7, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    4000:	685c      	ldr	r4, [r3, #4]
    4002:	ea24 0400 	bic.w	r4, r4, r0
    4006:	605c      	str	r4, [r3, #4]
    4008:	4c22      	ldr	r4, [pc, #136]	; (4094 <attachInterrupt+0xe4>)
    400a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    400e:	fa90 f2a0 	rbit	r2, r0
    4012:	fab2 f282 	clz	r2, r2
	table[index] = function;
    4016:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    401a:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    401e:	d01d      	beq.n	405c <attachInterrupt+0xac>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    4020:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    4022:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    4024:	ea01 0105 	and.w	r1, r1, r5
    4028:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    402a:	dc1d      	bgt.n	4068 <attachInterrupt+0xb8>
			uint32_t shift = index * 2;
    402c:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    402e:	2503      	movs	r5, #3
    4030:	68d9      	ldr	r1, [r3, #12]
    4032:	4094      	lsls	r4, r2
    4034:	fa05 f202 	lsl.w	r2, r5, r2
    4038:	ea21 0202 	bic.w	r2, r1, r2
    403c:	4322      	orrs	r2, r4
    403e:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    4040:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    4042:	695a      	ldr	r2, [r3, #20]
    4044:	4302      	orrs	r2, r0
    4046:	615a      	str	r2, [r3, #20]
}
    4048:	bcf0      	pop	{r4, r5, r6, r7}
    404a:	4770      	bx	lr
	switch((uint32_t)gpio) {
    404c:	4d12      	ldr	r5, [pc, #72]	; (4098 <attachInterrupt+0xe8>)
    404e:	42ab      	cmp	r3, r5
    4050:	d1fa      	bne.n	4048 <attachInterrupt+0x98>
			table = isr_table_gpio4;
    4052:	4d12      	ldr	r5, [pc, #72]	; (409c <attachInterrupt+0xec>)
    4054:	e7be      	b.n	3fd4 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    4056:	4d12      	ldr	r5, [pc, #72]	; (40a0 <attachInterrupt+0xf0>)
    4058:	e7bc      	b.n	3fd4 <attachInterrupt+0x24>
    405a:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    405c:	69da      	ldr	r2, [r3, #28]
    405e:	4302      	orrs	r2, r0
    4060:	61da      	str	r2, [r3, #28]
    4062:	e7ed      	b.n	4040 <attachInterrupt+0x90>
			table = isr_table_gpio3;
    4064:	4d0f      	ldr	r5, [pc, #60]	; (40a4 <attachInterrupt+0xf4>)
    4066:	e7b5      	b.n	3fd4 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    4068:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    406a:	2503      	movs	r5, #3
    406c:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    406e:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    4070:	4094      	lsls	r4, r2
    4072:	fa05 f202 	lsl.w	r2, r5, r2
    4076:	ea21 0202 	bic.w	r2, r1, r2
    407a:	4322      	orrs	r2, r4
    407c:	611a      	str	r2, [r3, #16]
    407e:	e7df      	b.n	4040 <attachInterrupt+0x90>
    4080:	20000cac 	.word	0x20000cac
    4084:	42008000 	.word	0x42008000
    4088:	20001c04 	.word	0x20001c04
    408c:	00000021 	.word	0x00000021
    4090:	20002000 	.word	0x20002000
    4094:	20000398 	.word	0x20000398
    4098:	4200c000 	.word	0x4200c000
    409c:	20001d04 	.word	0x20001d04
    40a0:	20001b84 	.word	0x20001b84
    40a4:	20001c84 	.word	0x20001c84

000040a8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    40a8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    40aa:	f7fc f9a1 	bl	3f0 <setup>
	while (1) {
		loop();
    40ae:	f7fc ff3b 	bl	f28 <loop>
		yield();
    40b2:	f001 fcaf 	bl	5a14 <yield>
	while (1) {
    40b6:	e7fa      	b.n	40ae <main+0x6>

000040b8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    40b8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    40ba:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    40be:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    40c2:	d16d      	bne.n	41a0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    40c4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    40c6:	d341      	bcc.n	414c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    40c8:	f851 3b04 	ldr.w	r3, [r1], #4
    40cc:	f840 3b04 	str.w	r3, [r0], #4
    40d0:	f851 3b04 	ldr.w	r3, [r1], #4
    40d4:	f840 3b04 	str.w	r3, [r0], #4
    40d8:	f851 3b04 	ldr.w	r3, [r1], #4
    40dc:	f840 3b04 	str.w	r3, [r0], #4
    40e0:	f851 3b04 	ldr.w	r3, [r1], #4
    40e4:	f840 3b04 	str.w	r3, [r0], #4
    40e8:	f851 3b04 	ldr.w	r3, [r1], #4
    40ec:	f840 3b04 	str.w	r3, [r0], #4
    40f0:	f851 3b04 	ldr.w	r3, [r1], #4
    40f4:	f840 3b04 	str.w	r3, [r0], #4
    40f8:	f851 3b04 	ldr.w	r3, [r1], #4
    40fc:	f840 3b04 	str.w	r3, [r0], #4
    4100:	f851 3b04 	ldr.w	r3, [r1], #4
    4104:	f840 3b04 	str.w	r3, [r0], #4
    4108:	f851 3b04 	ldr.w	r3, [r1], #4
    410c:	f840 3b04 	str.w	r3, [r0], #4
    4110:	f851 3b04 	ldr.w	r3, [r1], #4
    4114:	f840 3b04 	str.w	r3, [r0], #4
    4118:	f851 3b04 	ldr.w	r3, [r1], #4
    411c:	f840 3b04 	str.w	r3, [r0], #4
    4120:	f851 3b04 	ldr.w	r3, [r1], #4
    4124:	f840 3b04 	str.w	r3, [r0], #4
    4128:	f851 3b04 	ldr.w	r3, [r1], #4
    412c:	f840 3b04 	str.w	r3, [r0], #4
    4130:	f851 3b04 	ldr.w	r3, [r1], #4
    4134:	f840 3b04 	str.w	r3, [r0], #4
    4138:	f851 3b04 	ldr.w	r3, [r1], #4
    413c:	f840 3b04 	str.w	r3, [r0], #4
    4140:	f851 3b04 	ldr.w	r3, [r1], #4
    4144:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    4148:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    414a:	d2bd      	bcs.n	40c8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    414c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    414e:	d311      	bcc.n	4174 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    4150:	f851 3b04 	ldr.w	r3, [r1], #4
    4154:	f840 3b04 	str.w	r3, [r0], #4
    4158:	f851 3b04 	ldr.w	r3, [r1], #4
    415c:	f840 3b04 	str.w	r3, [r0], #4
    4160:	f851 3b04 	ldr.w	r3, [r1], #4
    4164:	f840 3b04 	str.w	r3, [r0], #4
    4168:	f851 3b04 	ldr.w	r3, [r1], #4
    416c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    4170:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    4172:	d2ed      	bcs.n	4150 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    4174:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    4176:	d305      	bcc.n	4184 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    4178:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    417c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    4180:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    4182:	d2f9      	bcs.n	4178 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    4184:	3204      	adds	r2, #4
	beq	.Ldone
    4186:	d008      	beq.n	419a <memcpy+0xe2>

	lsls	r2, r2, #31
    4188:	07d2      	lsls	r2, r2, #31
	itt ne
    418a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    418c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    4190:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    4194:	d301      	bcc.n	419a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    4196:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    4198:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    419a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    419c:	4770      	bx	lr
    419e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    41a0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    41a2:	d313      	bcc.n	41cc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    41a4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    41a6:	d08d      	beq.n	40c4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    41a8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    41ac:	d08a      	beq.n	40c4 <memcpy+0xc>

	rsb	r3, #4
    41ae:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    41b2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    41b4:	07db      	lsls	r3, r3, #31
	itt ne
    41b6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    41b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    41bc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    41c0:	d380      	bcc.n	40c4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    41c2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    41c6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    41ca:	e77b      	b.n	40c4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    41cc:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    41ce:	d3d9      	bcc.n	4184 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    41d0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    41d2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    41d6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    41da:	d2f9      	bcs.n	41d0 <memcpy+0x118>

	ldrb	r3, [r1]
    41dc:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    41de:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    41e0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    41e2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    41e4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    41e6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    41e8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    41ea:	4770      	bx	lr

000041ec <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    41ec:	f001 bd26 	b.w	5c3c <malloc>

000041f0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    41f0:	f001 bd2c 	b.w	5c4c <free>

000041f4 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    41f4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    41f8:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    41fa:	4666      	mov	r6, ip
	int i=0, j;
    41fc:	2400      	movs	r4, #0
    41fe:	e000      	b.n	4202 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4200:	3401      	adds	r4, #1
		digit = val % radix;
    4202:	fbb0 f5f2 	udiv	r5, r0, r2
    4206:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    420a:	2b09      	cmp	r3, #9
    420c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    4210:	f103 0330 	add.w	r3, r3, #48	; 0x30
    4214:	fa5f fe8e 	uxtb.w	lr, lr
    4218:	bf98      	it	ls
    421a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    421e:	4290      	cmp	r0, r2
		val /= radix;
    4220:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4222:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    4226:	d2eb      	bcs.n	4200 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    4228:	1c63      	adds	r3, r4, #1
    422a:	2200      	movs	r2, #0
    422c:	18c8      	adds	r0, r1, r3
    422e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    4230:	b17c      	cbz	r4, 4252 <ultoa+0x5e>
		t = buf[j];
    4232:	4662      	mov	r2, ip
    4234:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    4238:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    423c:	eba1 030c 	sub.w	r3, r1, ip
    4240:	3202      	adds	r2, #2
		buf[j] = buf[i];
    4242:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    4246:	3b01      	subs	r3, #1
    4248:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    424a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    424c:	4423      	add	r3, r4
    424e:	429a      	cmp	r2, r3
    4250:	dbef      	blt.n	4232 <ultoa+0x3e>
	}
	return buf;
}
    4252:	4608      	mov	r0, r1
    4254:	bd70      	pop	{r4, r5, r6, pc}
    4256:	bf00      	nop

00004258 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    4258:	eeb4 0a40 	vcmp.f32	s0, s0
{
    425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    4260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    4264:	4616      	mov	r6, r2
	int awidth = abs(width);
    4266:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    426a:	4607      	mov	r7, r0
    426c:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    4270:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    4274:	eeb0 8a40 	vmov.f32	s16, s0
    4278:	b085      	sub	sp, #20
	if (isnanf(val)) {
    427a:	f180 8148 	bvs.w	450e <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    427e:	eef0 7ac0 	vabs.f32	s15, s0
    4282:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 4598 <dtostrf+0x340>
    4286:	eef4 7a47 	vcmp.f32	s15, s14
    428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    428e:	dd29      	ble.n	42e4 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    4290:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4298:	f100 80ed 	bmi.w	4476 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    429c:	2a03      	cmp	r2, #3
    429e:	f340 8091 	ble.w	43c4 <dtostrf+0x16c>
    42a2:	2303      	movs	r3, #3
		if (width<0) {
    42a4:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    42a6:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    42aa:	f2c0 8085 	blt.w	43b8 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    42ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    42b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    42b6:	f100 816a 	bmi.w	458e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    42ba:	2149      	movs	r1, #73	; 0x49
    42bc:	234e      	movs	r3, #78	; 0x4e
    42be:	2046      	movs	r0, #70	; 0x46
    42c0:	1cf4      	adds	r4, r6, #3
    42c2:	7031      	strb	r1, [r6, #0]
    42c4:	70b0      	strb	r0, [r6, #2]
    42c6:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    42c8:	b122      	cbz	r2, 42d4 <dtostrf+0x7c>
			*buf++ = ' ';
    42ca:	4620      	mov	r0, r4
    42cc:	2120      	movs	r1, #32
    42ce:	4414      	add	r4, r2
    42d0:	f003 fbbe 	bl	7a50 <memset>
			awidth--;
		}
		*buf = 0;
    42d4:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    42d6:	4620      	mov	r0, r4
		*buf = 0;
    42d8:	7023      	strb	r3, [r4, #0]
}
    42da:	b005      	add	sp, #20
    42dc:	ecbd 8b02 	vpop	{d8}
    42e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    42e4:	4689      	mov	r9, r1
    42e6:	460d      	mov	r5, r1
    42e8:	aa02      	add	r2, sp, #8
    42ea:	a901      	add	r1, sp, #4
    42ec:	4648      	mov	r0, r9
    42ee:	f003 f9f9 	bl	76e4 <fcvtf>
	if (precision == 0 && decpt == 0) {
    42f2:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    42f6:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    42f8:	ea59 030a 	orrs.w	r3, r9, sl
    42fc:	d172      	bne.n	43e4 <dtostrf+0x18c>
		decpt++;
    42fe:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    4300:	7802      	ldrb	r2, [r0, #0]
    4302:	4ca6      	ldr	r4, [pc, #664]	; (459c <dtostrf+0x344>)
		decpt++;
    4304:	469a      	mov	sl, r3
    4306:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    4308:	4ba5      	ldr	r3, [pc, #660]	; (45a0 <dtostrf+0x348>)
		decpt++;
    430a:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    430c:	2a34      	cmp	r2, #52	; 0x34
    430e:	bf88      	it	hi
    4310:	461c      	movhi	r4, r3
	if (sign) reqd++;
    4312:	9b02      	ldr	r3, [sp, #8]
    4314:	2b00      	cmp	r3, #0
    4316:	d07d      	beq.n	4414 <dtostrf+0x1bc>
    4318:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    431c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    4320:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    4324:	f1bb 0f00 	cmp.w	fp, #0
    4328:	f340 80a1 	ble.w	446e <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    432c:	465a      	mov	r2, fp
    432e:	2120      	movs	r1, #32
    4330:	4630      	mov	r0, r6
		e += pad;
    4332:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    4334:	f003 fb8c 	bl	7a50 <memset>
    4338:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    433c:	222d      	movs	r2, #45	; 0x2d
    433e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    4342:	f1ba 0f00 	cmp.w	sl, #0
    4346:	d177      	bne.n	4438 <dtostrf+0x1e0>
    4348:	f1b9 0f00 	cmp.w	r9, #0
    434c:	d006      	beq.n	435c <dtostrf+0x104>
		*p++ = '0';
    434e:	461a      	mov	r2, r3
    4350:	2130      	movs	r1, #48	; 0x30
    4352:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    4356:	212e      	movs	r1, #46	; 0x2e
    4358:	7059      	strb	r1, [r3, #1]
    435a:	4613      	mov	r3, r2
	while (p < e) {
    435c:	42ab      	cmp	r3, r5
    435e:	d21f      	bcs.n	43a0 <dtostrf+0x148>
		*p++ = *s++;
    4360:	46a4      	mov	ip, r4
    4362:	4619      	mov	r1, r3
    4364:	f81c 2b01 	ldrb.w	r2, [ip], #1
    4368:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    436c:	42a9      	cmp	r1, r5
    436e:	d018      	beq.n	43a2 <dtostrf+0x14a>
    4370:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    4372:	202e      	movs	r0, #46	; 0x2e
    4374:	3c01      	subs	r4, #1
    4376:	e00b      	b.n	4390 <dtostrf+0x138>
    4378:	7058      	strb	r0, [r3, #1]
    437a:	3302      	adds	r3, #2
		if (p == e) break;
    437c:	3c01      	subs	r4, #1
	while (p < e) {
    437e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    4380:	4619      	mov	r1, r3
	while (p < e) {
    4382:	d20d      	bcs.n	43a0 <dtostrf+0x148>
		*p++ = *s++;
    4384:	f81c 2b01 	ldrb.w	r2, [ip], #1
    4388:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    438c:	42a9      	cmp	r1, r5
    438e:	d008      	beq.n	43a2 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    4390:	9401      	str	r4, [sp, #4]
    4392:	2c00      	cmp	r4, #0
    4394:	d0f0      	beq.n	4378 <dtostrf+0x120>
    4396:	460b      	mov	r3, r1
		if (p == e) break;
    4398:	3c01      	subs	r4, #1
	while (p < e) {
    439a:	42ab      	cmp	r3, r5
		*p++ = *s++;
    439c:	4619      	mov	r1, r3
	while (p < e) {
    439e:	d3f1      	bcc.n	4384 <dtostrf+0x12c>
    43a0:	461d      	mov	r5, r3
	if (width < 0) {
    43a2:	2f00      	cmp	r7, #0
    43a4:	db6b      	blt.n	447e <dtostrf+0x226>
	return buf;
    43a6:	4634      	mov	r4, r6
	*p = 0;
    43a8:	2300      	movs	r3, #0
}
    43aa:	4620      	mov	r0, r4
	*p = 0;
    43ac:	702b      	strb	r3, [r5, #0]
}
    43ae:	b005      	add	sp, #20
    43b0:	ecbd 8b02 	vpop	{d8}
    43b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    43b8:	b122      	cbz	r2, 43c4 <dtostrf+0x16c>
				*buf++ = ' ';
    43ba:	4630      	mov	r0, r6
    43bc:	2120      	movs	r1, #32
    43be:	4416      	add	r6, r2
    43c0:	f003 fb46 	bl	7a50 <memset>
		if (val<0) *buf++ = '-';
    43c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    43c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43cc:	f140 80bd 	bpl.w	454a <dtostrf+0x2f2>
    43d0:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    43d2:	2249      	movs	r2, #73	; 0x49
    43d4:	234e      	movs	r3, #78	; 0x4e
    43d6:	2046      	movs	r0, #70	; 0x46
    43d8:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    43da:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    43dc:	70f0      	strb	r0, [r6, #3]
    43de:	7072      	strb	r2, [r6, #1]
    43e0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    43e2:	e777      	b.n	42d4 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    43e4:	f1ca 0300 	rsb	r3, sl, #0
    43e8:	4599      	cmp	r9, r3
    43ea:	da57      	bge.n	449c <dtostrf+0x244>
		decpt = -precision;
    43ec:	f04f 0801 	mov.w	r8, #1
    43f0:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    43f4:	4c69      	ldr	r4, [pc, #420]	; (459c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    43f6:	45c2      	cmp	sl, r8
		decpt = -precision;
    43f8:	4640      	mov	r0, r8
    43fa:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    43fe:	bfb8      	it	lt
    4400:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    4404:	f1ba 0f00 	cmp.w	sl, #0
    4408:	d152      	bne.n	44b0 <dtostrf+0x258>
	if (sign) reqd++;
    440a:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    440c:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    4410:	2b00      	cmp	r3, #0
    4412:	d181      	bne.n	4318 <dtostrf+0xc0>
	pad = width - reqd;
    4414:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    4418:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    441c:	f1bb 0f00 	cmp.w	fp, #0
    4420:	dd27      	ble.n	4472 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    4422:	465a      	mov	r2, fp
    4424:	2120      	movs	r1, #32
    4426:	4630      	mov	r0, r6
		e += pad;
    4428:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    442a:	f003 fb11 	bl	7a50 <memset>
    442e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    4432:	f1ba 0f00 	cmp.w	sl, #0
    4436:	d087      	beq.n	4348 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    4438:	f1ba 0f00 	cmp.w	sl, #0
    443c:	da8e      	bge.n	435c <dtostrf+0x104>
    443e:	f1b9 0f00 	cmp.w	r9, #0
    4442:	d08b      	beq.n	435c <dtostrf+0x104>
		*p++ = '0';
    4444:	4618      	mov	r0, r3
		*p++ = '.';
    4446:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    4448:	2130      	movs	r1, #48	; 0x30
    444a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    444e:	705a      	strb	r2, [r3, #1]
    4450:	4602      	mov	r2, r0
    4452:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    4454:	3301      	adds	r3, #1
			*p++ = '0';
    4456:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    445a:	d1fb      	bne.n	4454 <dtostrf+0x1fc>
			*p++ = '0';
    445c:	f1ba 0f00 	cmp.w	sl, #0
    4460:	9301      	str	r3, [sp, #4]
    4462:	f1ca 0300 	rsb	r3, sl, #0
    4466:	bfa8      	it	ge
    4468:	2301      	movge	r3, #1
    446a:	4403      	add	r3, r0
    446c:	e776      	b.n	435c <dtostrf+0x104>
	if (pad > 0) {
    446e:	4633      	mov	r3, r6
    4470:	e764      	b.n	433c <dtostrf+0xe4>
    4472:	4633      	mov	r3, r6
    4474:	e765      	b.n	4342 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    4476:	2a04      	cmp	r2, #4
    4478:	ddaa      	ble.n	43d0 <dtostrf+0x178>
    447a:	2304      	movs	r3, #4
    447c:	e712      	b.n	42a4 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    447e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    4480:	f1b8 0f00 	cmp.w	r8, #0
    4484:	ea6f 0208 	mvn.w	r2, r8
    4488:	da8d      	bge.n	43a6 <dtostrf+0x14e>
    448a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    448e:	2120      	movs	r1, #32
    4490:	4628      	mov	r0, r5
    4492:	3201      	adds	r2, #1
    4494:	4415      	add	r5, r2
    4496:	f003 fadb 	bl	7a50 <memset>
    449a:	e784      	b.n	43a6 <dtostrf+0x14e>
	reqd = strlen(s);
    449c:	f004 f890 	bl	85c0 <strlen>
    44a0:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    44a2:	45c2      	cmp	sl, r8
    44a4:	bfb8      	it	lt
    44a6:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    44aa:	f1ba 0f00 	cmp.w	sl, #0
    44ae:	d0ac      	beq.n	440a <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    44b0:	f1ba 0f00 	cmp.w	sl, #0
    44b4:	f6bf af2d 	bge.w	4312 <dtostrf+0xba>
    44b8:	f1b9 0f00 	cmp.w	r9, #0
    44bc:	f43f af29 	beq.w	4312 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    44c0:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    44c4:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    44c8:	4283      	cmp	r3, r0
    44ca:	f4bf af22 	bcs.w	4312 <dtostrf+0xba>
			while (newPrecision > 0) {
    44ce:	f1b9 0f00 	cmp.w	r9, #0
    44d2:	dd05      	ble.n	44e0 <dtostrf+0x288>
				val *= 10.0f;
    44d4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    44d8:	3d01      	subs	r5, #1
				val *= 10.0f;
    44da:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    44de:	d1fb      	bne.n	44d8 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    44e0:	aa02      	add	r2, sp, #8
    44e2:	eeb0 0a48 	vmov.f32	s0, s16
    44e6:	4628      	mov	r0, r5
    44e8:	a903      	add	r1, sp, #12
    44ea:	f003 f8fb 	bl	76e4 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    44ee:	f8dd a004 	ldr.w	sl, [sp, #4]
    44f2:	9b03      	ldr	r3, [sp, #12]
    44f4:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    44f8:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    44fa:	eba3 030a 	sub.w	r3, r3, sl
    44fe:	4293      	cmp	r3, r2
    4500:	f47f af07 	bne.w	4312 <dtostrf+0xba>
    4504:	f10a 0a01 	add.w	sl, sl, #1
    4508:	f8cd a004 	str.w	sl, [sp, #4]
    450c:	e701      	b.n	4312 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    450e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4516:	bf4c      	ite	mi
    4518:	2304      	movmi	r3, #4
    451a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    451c:	4293      	cmp	r3, r2
    451e:	da22      	bge.n	4566 <dtostrf+0x30e>
		if (width<0) {
    4520:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    4522:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    4526:	db18      	blt.n	455a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    4528:	ee10 3a10 	vmov	r3, s0
    452c:	2b00      	cmp	r3, #0
    452e:	da02      	bge.n	4536 <dtostrf+0x2de>
    4530:	232d      	movs	r3, #45	; 0x2d
    4532:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    4536:	234e      	movs	r3, #78	; 0x4e
    4538:	2141      	movs	r1, #65	; 0x41
    453a:	1cf4      	adds	r4, r6, #3
    453c:	7033      	strb	r3, [r6, #0]
    453e:	7071      	strb	r1, [r6, #1]
    4540:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    4542:	2a00      	cmp	r2, #0
    4544:	f47f aec1 	bne.w	42ca <dtostrf+0x72>
    4548:	e6c4      	b.n	42d4 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    454a:	2149      	movs	r1, #73	; 0x49
    454c:	224e      	movs	r2, #78	; 0x4e
    454e:	2346      	movs	r3, #70	; 0x46
    4550:	1cf4      	adds	r4, r6, #3
    4552:	7031      	strb	r1, [r6, #0]
    4554:	7072      	strb	r2, [r6, #1]
    4556:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    4558:	e6bc      	b.n	42d4 <dtostrf+0x7c>
			while (awidth) {
    455a:	b122      	cbz	r2, 4566 <dtostrf+0x30e>
				*buf++ = ' ';
    455c:	4630      	mov	r0, r6
    455e:	2120      	movs	r1, #32
    4560:	4416      	add	r6, r2
    4562:	f003 fa75 	bl	7a50 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    4566:	ee18 3a10 	vmov	r3, s16
    456a:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    456c:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    4570:	db05      	blt.n	457e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    4572:	2241      	movs	r2, #65	; 0x41
    4574:	1cf4      	adds	r4, r6, #3
    4576:	7033      	strb	r3, [r6, #0]
    4578:	7072      	strb	r2, [r6, #1]
    457a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    457c:	e6aa      	b.n	42d4 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    457e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    4580:	2241      	movs	r2, #65	; 0x41
    4582:	1d34      	adds	r4, r6, #4
    4584:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    4586:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    4588:	70b2      	strb	r2, [r6, #2]
    458a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    458c:	e6a2      	b.n	42d4 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    458e:	232d      	movs	r3, #45	; 0x2d
    4590:	f806 3b01 	strb.w	r3, [r6], #1
    4594:	e691      	b.n	42ba <dtostrf+0x62>
    4596:	bf00      	nop
    4598:	7f7fffff 	.word	0x7f7fffff
    459c:	2000101c 	.word	0x2000101c
    45a0:	20001020 	.word	0x20001020

000045a4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    45a4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    45a6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    45a8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    45ac:	4619      	mov	r1, r3
{
    45ae:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    45b0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    45b4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    45b8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    45bc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    45c0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    45c4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    45c6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    45ca:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    45ce:	b29b      	uxth	r3, r3
    45d0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    45d4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    45d8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    45dc:	3101      	adds	r1, #1
    45de:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    45e2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    45e4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    45e6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    45ea:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    45ec:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    45ee:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    45f0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    45f2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    45f6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    45f8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    45fa:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    45fc:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    45fe:	d1eb      	bne.n	45d8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4600:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4604:	b29b      	uxth	r3, r3
    4606:	f043 030f 	orr.w	r3, r3, #15
    460a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    460e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4612:	b29b      	uxth	r3, r3
    4614:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    4618:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    461c:	bd10      	pop	{r4, pc}
    461e:	bf00      	nop

00004620 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4620:	4b37      	ldr	r3, [pc, #220]	; (4700 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4622:	4a38      	ldr	r2, [pc, #224]	; (4704 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4624:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    4626:	4838      	ldr	r0, [pc, #224]	; (4708 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4628:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    462c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    462e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4630:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4634:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4638:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    463c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4640:	430a      	orrs	r2, r1
    4642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    4646:	f7ff ffad 	bl	45a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    464a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    464e:	f7ff ffa9 	bl	45a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    4652:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4656:	f7ff ffa5 	bl	45a4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    465a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    465e:	f7ff ffa1 	bl	45a4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    4662:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4664:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4668:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    466c:	4611      	mov	r1, r2
    466e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4672:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4676:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4678:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    467a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    467c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    467e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4682:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4684:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4686:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    468a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    468c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    468e:	d1ee      	bne.n	466e <pwm_init+0x4e>
    4690:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    4692:	481e      	ldr	r0, [pc, #120]	; (470c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    4694:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4698:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    469c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    469e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    46a2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    46a6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    46aa:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    46ae:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    46b0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    46b2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    46b4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    46b6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    46ba:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    46bc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    46be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    46c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    46c4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    46c6:	d1ee      	bne.n	46a6 <pwm_init+0x86>
    46c8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    46ca:	4811      	ldr	r0, [pc, #68]	; (4710 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    46cc:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    46ce:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    46d2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    46d4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    46d8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    46dc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    46e0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    46e4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    46e6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    46e8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    46ea:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    46ec:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    46ee:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    46f0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    46f2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    46f6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    46f8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    46fc:	d1ee      	bne.n	46dc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    46fe:	bd70      	pop	{r4, r5, r6, pc}
    4700:	400fc000 	.word	0x400fc000
    4704:	fc030000 	.word	0xfc030000
    4708:	403dc000 	.word	0x403dc000
    470c:	401e0000 	.word	0x401e0000
    4710:	401e4000 	.word	0x401e4000

00004714 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    4714:	4770      	bx	lr
    4716:	bf00      	nop

00004718 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    4718:	4770      	bx	lr
    471a:	bf00      	nop

0000471c <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    471c:	4770      	bx	lr
    471e:	bf00      	nop

00004720 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    4720:	4770      	bx	lr
    4722:	bf00      	nop

00004724 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    4724:	4770      	bx	lr
    4726:	bf00      	nop

00004728 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    4728:	4770      	bx	lr
    472a:	bf00      	nop

0000472c <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    472c:	4770      	bx	lr
    472e:	bf00      	nop

00004730 <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    4730:	4770      	bx	lr
    4732:	bf00      	nop

00004734 <unused_interrupt_vector>:
	__disable_irq();
    4734:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    4736:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    473a:	4c4f      	ldr	r4, [pc, #316]	; (4878 <unused_interrupt_vector+0x144>)
    473c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    4740:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    4744:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    4748:	4e4c      	ldr	r6, [pc, #304]	; (487c <unused_interrupt_vector+0x148>)
	while (p < end) {
    474a:	4d4d      	ldr	r5, [pc, #308]	; (4880 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    474c:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    4750:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    4754:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    4758:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    475c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    4760:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    4764:	6993      	ldr	r3, [r2, #24]
    4766:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    476a:	69d3      	ldr	r3, [r2, #28]
    476c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    4770:	f000 f8d0 	bl	4914 <tempmonGetTemp>
    4774:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    4778:	f001 f9c4 	bl	5b04 <rtc_get>
	info->len = sizeof(*info) / 4;
    477c:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    477e:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    4782:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    4786:	460b      	mov	r3, r1
    4788:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    478c:	493d      	ldr	r1, [pc, #244]	; (4884 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    478e:	1d30      	adds	r0, r6, #4
    4790:	405a      	eors	r2, r3
    4792:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    4794:	f002 0301 	and.w	r3, r2, #1
    4798:	3c01      	subs	r4, #1
    479a:	fb01 f303 	mul.w	r3, r1, r3
    479e:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    47a2:	d1f7      	bne.n	4794 <unused_interrupt_vector+0x60>
	while (p < end) {
    47a4:	42a8      	cmp	r0, r5
    47a6:	d002      	beq.n	47ae <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    47a8:	6873      	ldr	r3, [r6, #4]
    47aa:	4606      	mov	r6, r0
    47ac:	e7ef      	b.n	478e <unused_interrupt_vector+0x5a>
	info->crc = crc;
    47ae:	4b32      	ldr	r3, [pc, #200]	; (4878 <unused_interrupt_vector+0x144>)
    47b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    47b4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    47b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    47bc:	492f      	ldr	r1, [pc, #188]	; (487c <unused_interrupt_vector+0x148>)
    47be:	4a32      	ldr	r2, [pc, #200]	; (4888 <unused_interrupt_vector+0x154>)
    47c0:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    47c4:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    47c8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    47cc:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    47d0:	4a2e      	ldr	r2, [pc, #184]	; (488c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    47d2:	2502      	movs	r5, #2
    47d4:	482e      	ldr	r0, [pc, #184]	; (4890 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    47d6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    47d8:	492e      	ldr	r1, [pc, #184]	; (4894 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    47da:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    47de:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    47e0:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    47e2:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    47e4:	482c      	ldr	r0, [pc, #176]	; (4898 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    47e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    47ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    47ee:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    47f0:	680b      	ldr	r3, [r1, #0]
    47f2:	4283      	cmp	r3, r0
    47f4:	d83d      	bhi.n	4872 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    47f6:	4d26      	ldr	r5, [pc, #152]	; (4890 <unused_interrupt_vector+0x15c>)
    47f8:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    47fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    47fe:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    4802:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    4804:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    4806:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    480a:	4924      	ldr	r1, [pc, #144]	; (489c <unused_interrupt_vector+0x168>)
    480c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    4810:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    4814:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    4818:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    481c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    4820:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    4824:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    4828:	e001      	b.n	482e <unused_interrupt_vector+0xfa>
		usb_isr();
    482a:	f000 f965 	bl	4af8 <usb_isr>
		if (PIT_TFLG0) {
    482e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    4832:	2b00      	cmp	r3, #0
    4834:	d0f9      	beq.n	482a <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    4836:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    4838:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    483c:	2c4f      	cmp	r4, #79	; 0x4f
    483e:	d9f4      	bls.n	482a <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    4840:	4b17      	ldr	r3, [pc, #92]	; (48a0 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    4842:	2002      	movs	r0, #2
    4844:	4917      	ldr	r1, [pc, #92]	; (48a4 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    4846:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    484a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    484e:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    4850:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    4854:	b93b      	cbnz	r3, 4866 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    4856:	4814      	ldr	r0, [pc, #80]	; (48a8 <unused_interrupt_vector+0x174>)
    4858:	4914      	ldr	r1, [pc, #80]	; (48ac <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    485a:	4a0d      	ldr	r2, [pc, #52]	; (4890 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    485c:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    485e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    4862:	2b00      	cmp	r3, #0
    4864:	d0fa      	beq.n	485c <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    4866:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    486a:	4a11      	ldr	r2, [pc, #68]	; (48b0 <unused_interrupt_vector+0x17c>)
    486c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    4870:	e7fe      	b.n	4870 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4872:	f7ff f931 	bl	3ad8 <set_arm_clock>
    4876:	e7be      	b.n	47f6 <unused_interrupt_vector+0xc2>
    4878:	2027ff00 	.word	0x2027ff00
    487c:	2027ff80 	.word	0x2027ff80
    4880:	2027ffa8 	.word	0x2027ffa8
    4884:	edb88320 	.word	0xedb88320
    4888:	2027ffa0 	.word	0x2027ffa0
    488c:	400fc000 	.word	0x400fc000
    4890:	40084000 	.word	0x40084000
    4894:	20001304 	.word	0x20001304
    4898:	0bcd3d80 	.word	0x0bcd3d80
    489c:	00249f00 	.word	0x00249f00
    48a0:	400d9000 	.word	0x400d9000
    48a4:	402e0000 	.word	0x402e0000
    48a8:	400f8000 	.word	0x400f8000
    48ac:	0bad00f1 	.word	0x0bad00f1
    48b0:	05fa0004 	.word	0x05fa0004

000048b4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    48b4:	490a      	ldr	r1, [pc, #40]	; (48e0 <_sbrk+0x2c>)
    48b6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    48b8:	b138      	cbz	r0, 48ca <_sbrk+0x16>
{
    48ba:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    48bc:	1813      	adds	r3, r2, r0
    48be:	4809      	ldr	r0, [pc, #36]	; (48e4 <_sbrk+0x30>)
    48c0:	4283      	cmp	r3, r0
    48c2:	d804      	bhi.n	48ce <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    48c4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    48c6:	600b      	str	r3, [r1, #0]
}
    48c8:	bd08      	pop	{r3, pc}
    48ca:	4610      	mov	r0, r2
    48cc:	4770      	bx	lr
                        errno = ENOMEM;
    48ce:	f003 fc6f 	bl	81b0 <__errno>
    48d2:	230c      	movs	r3, #12
                        return (void *)-1;
    48d4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    48d8:	6003      	str	r3, [r0, #0]
}
    48da:	4610      	mov	r0, r2
    48dc:	bd08      	pop	{r3, pc}
    48de:	bf00      	nop
    48e0:	200015d8 	.word	0x200015d8
    48e4:	20280000 	.word	0x20280000

000048e8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    48e8:	2000      	movs	r0, #0
    48ea:	4770      	bx	lr

000048ec <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    48ec:	f04f 30ff 	mov.w	r0, #4294967295
    48f0:	4770      	bx	lr
    48f2:	bf00      	nop

000048f4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    48f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    48f8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    48fa:	604b      	str	r3, [r1, #4]
}
    48fc:	4770      	bx	lr
    48fe:	bf00      	nop

00004900 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    4900:	2001      	movs	r0, #1
    4902:	4770      	bx	lr

00004904 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    4904:	f04f 30ff 	mov.w	r0, #4294967295
    4908:	4770      	bx	lr
    490a:	bf00      	nop

0000490c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    490c:	bf30      	wfi
    490e:	e7fd      	b.n	490c <abort>

00004910 <Panic_Temp_isr>:
  unused_interrupt_vector();
    4910:	f7ff bf10 	b.w	4734 <unused_interrupt_vector>

00004914 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    4914:	4a12      	ldr	r2, [pc, #72]	; (4960 <tempmonGetTemp+0x4c>)
    4916:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    491a:	075b      	lsls	r3, r3, #29
    491c:	d5fb      	bpl.n	4916 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    491e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4922:	4810      	ldr	r0, [pc, #64]	; (4964 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4924:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4928:	490f      	ldr	r1, [pc, #60]	; (4968 <tempmonGetTemp+0x54>)
    492a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    492e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4932:	ed91 6a00 	vldr	s12, [r1]
    4936:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    493a:	4a0c      	ldr	r2, [pc, #48]	; (496c <tempmonGetTemp+0x58>)
    493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4940:	4b0b      	ldr	r3, [pc, #44]	; (4970 <tempmonGetTemp+0x5c>)
    4942:	edd2 6a00 	vldr	s13, [r2]
    4946:	ee77 7ac7 	vsub.f32	s15, s15, s14
    494a:	ed93 7a00 	vldr	s14, [r3]
    494e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4952:	ee67 7a86 	vmul.f32	s15, s15, s12
    4956:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    495a:	ee37 0a40 	vsub.f32	s0, s14, s0
    495e:	4770      	bx	lr
    4960:	400d8100 	.word	0x400d8100
    4964:	20003dac 	.word	0x20003dac
    4968:	20003db4 	.word	0x20003db4
    496c:	20003db8 	.word	0x20003db8
    4970:	20003db0 	.word	0x20003db0

00004974 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    4974:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    4976:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    4978:	b11b      	cbz	r3, 4982 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    497a:	6853      	ldr	r3, [r2, #4]
    497c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    4980:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    4982:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    4984:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    4986:	b33c      	cbz	r4, 49d8 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    4988:	4b1a      	ldr	r3, [pc, #104]	; (49f4 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    498a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    498c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    4990:	420c      	tst	r4, r1
    4992:	d11d      	bne.n	49d0 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    4994:	4e18      	ldr	r6, [pc, #96]	; (49f8 <schedule_transfer+0x84>)
    4996:	6877      	ldr	r7, [r6, #4]
    4998:	e004      	b.n	49a4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    499a:	6874      	ldr	r4, [r6, #4]
    499c:	1be4      	subs	r4, r4, r7
    499e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    49a2:	d20b      	bcs.n	49bc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    49a4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    49a8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    49ac:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    49b0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    49b4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    49b8:	0464      	lsls	r4, r4, #17
    49ba:	d5ee      	bpl.n	499a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    49bc:	400d      	ands	r5, r1
    49be:	d107      	bne.n	49d0 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    49c0:	4c0c      	ldr	r4, [pc, #48]	; (49f4 <schedule_transfer+0x80>)
		endpoint->status = 0;
    49c2:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    49c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    49ca:	430b      	orrs	r3, r1
    49cc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    49d0:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    49d2:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    49d4:	bcf0      	pop	{r4, r5, r6, r7}
    49d6:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    49d8:	4d06      	ldr	r5, [pc, #24]	; (49f4 <schedule_transfer+0x80>)
	endpoint->status = 0;
    49da:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    49de:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    49e2:	430b      	orrs	r3, r1
    49e4:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    49e8:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    49ea:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    49ec:	b662      	cpsie	i
}
    49ee:	bcf0      	pop	{r4, r5, r6, r7}
    49f0:	4770      	bx	lr
    49f2:	bf00      	nop
    49f4:	402e0000 	.word	0x402e0000
    49f8:	e0001000 	.word	0xe0001000

000049fc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    49fc:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    49fe:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    4a00:	b19d      	cbz	r5, 4a2a <run_callbacks+0x2e>
    4a02:	4606      	mov	r6, r0
    4a04:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    4a06:	2400      	movs	r4, #0
    4a08:	e003      	b.n	4a12 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    4a0a:	6812      	ldr	r2, [r2, #0]
		count++;
    4a0c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    4a0e:	2a01      	cmp	r2, #1
    4a10:	d00c      	beq.n	4a2c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    4a12:	6853      	ldr	r3, [r2, #4]
    4a14:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4a18:	d0f7      	beq.n	4a0a <run_callbacks+0xe>
			ep->first_transfer = t;
    4a1a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4a1c:	b12c      	cbz	r4, 4a2a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    4a1e:	4628      	mov	r0, r5
		ep->callback_function(first);
    4a20:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    4a22:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    4a24:	4798      	blx	r3
	while (count) {
    4a26:	3c01      	subs	r4, #1
    4a28:	d1f9      	bne.n	4a1e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    4a2a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    4a2c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    4a30:	e7f4      	b.n	4a1c <run_callbacks+0x20>
    4a32:	bf00      	nop

00004a34 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    4a34:	b430      	push	{r4, r5}
	if (len > 0) {
    4a36:	b9d9      	cbnz	r1, 4a70 <endpoint0_transmit.constprop.0+0x3c>
    4a38:	4c1f      	ldr	r4, [pc, #124]	; (4ab8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    4a3a:	4b20      	ldr	r3, [pc, #128]	; (4abc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    4a3c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4a3e:	4a20      	ldr	r2, [pc, #128]	; (4ac0 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    4a40:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4a42:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    4a46:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4a48:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    4a4a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4a4e:	2480      	movs	r4, #128	; 0x80
    4a50:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4a52:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    4a56:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    4a5a:	481a      	ldr	r0, [pc, #104]	; (4ac4 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    4a5c:	432b      	orrs	r3, r5
    4a5e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    4a62:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    4a64:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d1fb      	bne.n	4a64 <endpoint0_transmit.constprop.0+0x30>
}
    4a6c:	bc30      	pop	{r4, r5}
    4a6e:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4a70:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    4a72:	4b15      	ldr	r3, [pc, #84]	; (4ac8 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4a74:	4c10      	ldr	r4, [pc, #64]	; (4ab8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    4a76:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4a78:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4a7c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    4a7e:	4a10      	ldr	r2, [pc, #64]	; (4ac0 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4a80:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4a82:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    4a86:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4a88:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4a8a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    4a8e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4a90:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4a92:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4a96:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4a9a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    4a9c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4a9e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    4aa0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    4aa2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4aaa:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    4aae:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    4ab2:	2b00      	cmp	r3, #0
    4ab4:	d1fb      	bne.n	4aae <endpoint0_transmit.constprop.0+0x7a>
    4ab6:	e7c0      	b.n	4a3a <endpoint0_transmit.constprop.0+0x6>
    4ab8:	20000000 	.word	0x20000000
    4abc:	200022c0 	.word	0x200022c0
    4ac0:	402e0000 	.word	0x402e0000
    4ac4:	200032dc 	.word	0x200032dc
    4ac8:	200022e0 	.word	0x200022e0

00004acc <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    4acc:	4908      	ldr	r1, [pc, #32]	; (4af0 <usb_stop_sof_interrupts+0x24>)
    4ace:	2201      	movs	r2, #1
    4ad0:	780b      	ldrb	r3, [r1, #0]
    4ad2:	fa02 f000 	lsl.w	r0, r2, r0
    4ad6:	ea23 0000 	bic.w	r0, r3, r0
    4ada:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    4adc:	b930      	cbnz	r0, 4aec <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    4ade:	4a05      	ldr	r2, [pc, #20]	; (4af4 <usb_stop_sof_interrupts+0x28>)
    4ae0:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    4ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4ae8:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    4aec:	4770      	bx	lr
    4aee:	bf00      	nop
    4af0:	20003ded 	.word	0x20003ded
    4af4:	402e0000 	.word	0x402e0000

00004af8 <usb_isr>:
{
    4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    4afc:	4c97      	ldr	r4, [pc, #604]	; (4d5c <usb_isr+0x264>)
{
    4afe:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    4b00:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4b04:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    4b06:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4b0a:	d553      	bpl.n	4bb4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4b0c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4b10:	2a00      	cmp	r2, #0
    4b12:	d04a      	beq.n	4baa <usb_isr+0xb2>
    4b14:	4e92      	ldr	r6, [pc, #584]	; (4d60 <usb_isr+0x268>)
    4b16:	f8df a260 	ldr.w	sl, [pc, #608]	; 4d78 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    4b1a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 4d90 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4b1e:	f8df b274 	ldr.w	fp, [pc, #628]	; 4d94 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4b22:	f8df 8274 	ldr.w	r8, [pc, #628]	; 4d98 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    4b26:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    4b2a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4b2e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4b32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4b36:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    4b3a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4b3e:	049d      	lsls	r5, r3, #18
    4b40:	d5f5      	bpl.n	4b2e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4b42:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4b4a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4b4e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4b52:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4b56:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    4b5a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    4b5e:	d1fa      	bne.n	4b56 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    4b60:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    4b62:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    4b64:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    4b68:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    4b6c:	f000 81cf 	beq.w	4f0e <usb_isr+0x416>
    4b70:	f200 80db 	bhi.w	4d2a <usb_isr+0x232>
    4b74:	f240 3102 	movw	r1, #770	; 0x302
    4b78:	428b      	cmp	r3, r1
    4b7a:	f000 81e7 	beq.w	4f4c <usb_isr+0x454>
    4b7e:	f200 809a 	bhi.w	4cb6 <usb_isr+0x1be>
    4b82:	2b82      	cmp	r3, #130	; 0x82
    4b84:	f000 81cb 	beq.w	4f1e <usb_isr+0x426>
    4b88:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    4b8c:	f040 808a 	bne.w	4ca4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    4b90:	f010 0f78 	tst.w	r0, #120	; 0x78
    4b94:	b283      	uxth	r3, r0
    4b96:	f000 8203 	beq.w	4fa0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    4b9a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4b9e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    4ba2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4ba6:	2a00      	cmp	r2, #0
    4ba8:	d1bd      	bne.n	4b26 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    4baa:	4a6c      	ldr	r2, [pc, #432]	; (4d5c <usb_isr+0x264>)
    4bac:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d142      	bne.n	4c3a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    4bb4:	067e      	lsls	r6, r7, #25
    4bb6:	d516      	bpl.n	4be6 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    4bb8:	4b68      	ldr	r3, [pc, #416]	; (4d5c <usb_isr+0x264>)
    4bba:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    4bbe:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4bc2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    4bc6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4bca:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    4bce:	2c00      	cmp	r4, #0
    4bd0:	d1fb      	bne.n	4bca <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    4bd2:	f04f 32ff 	mov.w	r2, #4294967295
    4bd6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    4bda:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    4bde:	f000 fd27 	bl	5630 <usb_serial_reset>
		endpointN_notify_mask = 0;
    4be2:	4b60      	ldr	r3, [pc, #384]	; (4d64 <usb_isr+0x26c>)
    4be4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    4be6:	01fc      	lsls	r4, r7, #7
    4be8:	d503      	bpl.n	4bf2 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    4bea:	4b5f      	ldr	r3, [pc, #380]	; (4d68 <usb_isr+0x270>)
    4bec:	681b      	ldr	r3, [r3, #0]
    4bee:	b103      	cbz	r3, 4bf2 <usb_isr+0xfa>
    4bf0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    4bf2:	01b8      	lsls	r0, r7, #6
    4bf4:	d503      	bpl.n	4bfe <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    4bf6:	4b5d      	ldr	r3, [pc, #372]	; (4d6c <usb_isr+0x274>)
    4bf8:	681b      	ldr	r3, [r3, #0]
    4bfa:	b103      	cbz	r3, 4bfe <usb_isr+0x106>
    4bfc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    4bfe:	0779      	lsls	r1, r7, #29
    4c00:	d508      	bpl.n	4c14 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    4c02:	4b56      	ldr	r3, [pc, #344]	; (4d5c <usb_isr+0x264>)
    4c04:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4c08:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    4c0c:	d047      	beq.n	4c9e <usb_isr+0x1a6>
			usb_high_speed = 1;
    4c0e:	4b58      	ldr	r3, [pc, #352]	; (4d70 <usb_isr+0x278>)
    4c10:	2201      	movs	r2, #1
    4c12:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    4c14:	4b51      	ldr	r3, [pc, #324]	; (4d5c <usb_isr+0x264>)
    4c16:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    4c1a:	061a      	lsls	r2, r3, #24
    4c1c:	d50a      	bpl.n	4c34 <usb_isr+0x13c>
    4c1e:	063b      	lsls	r3, r7, #24
    4c20:	d508      	bpl.n	4c34 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    4c22:	4a54      	ldr	r2, [pc, #336]	; (4d74 <usb_isr+0x27c>)
    4c24:	7813      	ldrb	r3, [r2, #0]
    4c26:	b12b      	cbz	r3, 4c34 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    4c28:	3b01      	subs	r3, #1
    4c2a:	b2db      	uxtb	r3, r3
    4c2c:	7013      	strb	r3, [r2, #0]
    4c2e:	2b00      	cmp	r3, #0
    4c30:	f000 8272 	beq.w	5118 <usb_isr+0x620>
}
    4c34:	b003      	add	sp, #12
    4c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    4c3a:	494f      	ldr	r1, [pc, #316]	; (4d78 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    4c3c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    4c40:	6808      	ldr	r0, [r1, #0]
    4c42:	4203      	tst	r3, r0
    4c44:	f040 81d1 	bne.w	4fea <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    4c48:	4a46      	ldr	r2, [pc, #280]	; (4d64 <usb_isr+0x26c>)
    4c4a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    4c4c:	401c      	ands	r4, r3
    4c4e:	d0b1      	beq.n	4bb4 <usb_isr+0xbc>
				while (tx) {
    4c50:	ea5f 4814 	movs.w	r8, r4, lsr #16
    4c54:	d010      	beq.n	4c78 <usb_isr+0x180>
    4c56:	4e42      	ldr	r6, [pc, #264]	; (4d60 <usb_isr+0x268>)
					tx &= ~(1<<p);
    4c58:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    4c5c:	fa98 f5a8 	rbit	r5, r8
    4c60:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4c64:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    4c68:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    4c6c:	3040      	adds	r0, #64	; 0x40
    4c6e:	f7ff fec5 	bl	49fc <run_callbacks>
				while (tx) {
    4c72:	ea38 0805 	bics.w	r8, r8, r5
    4c76:	d1f1      	bne.n	4c5c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    4c78:	b2a4      	uxth	r4, r4
				while(rx) {
    4c7a:	2c00      	cmp	r4, #0
    4c7c:	d09a      	beq.n	4bb4 <usb_isr+0xbc>
    4c7e:	4e38      	ldr	r6, [pc, #224]	; (4d60 <usb_isr+0x268>)
					rx &= ~(1<<p);
    4c80:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    4c84:	fa94 f5a4 	rbit	r5, r4
    4c88:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4c8c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    4c90:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    4c94:	f7ff feb2 	bl	49fc <run_callbacks>
				while(rx) {
    4c98:	43ac      	bics	r4, r5
    4c9a:	d1f3      	bne.n	4c84 <usb_isr+0x18c>
    4c9c:	e78a      	b.n	4bb4 <usb_isr+0xbc>
			usb_high_speed = 0;
    4c9e:	4a34      	ldr	r2, [pc, #208]	; (4d70 <usb_isr+0x278>)
    4ca0:	7013      	strb	r3, [r2, #0]
    4ca2:	e7b7      	b.n	4c14 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    4ca4:	2b80      	cmp	r3, #128	; 0x80
    4ca6:	f47f af78 	bne.w	4b9a <usb_isr+0xa2>
		reply_buffer[0] = 0;
    4caa:	4834      	ldr	r0, [pc, #208]	; (4d7c <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    4cac:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    4cae:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4cb0:	f7ff fec0 	bl	4a34 <endpoint0_transmit.constprop.0>
		return;
    4cb4:	e775      	b.n	4ba2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    4cb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    4cba:	f000 810b 	beq.w	4ed4 <usb_isr+0x3dc>
    4cbe:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    4cc2:	2b01      	cmp	r3, #1
    4cc4:	f63f af69 	bhi.w	4b9a <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4cc8:	4b2d      	ldr	r3, [pc, #180]	; (4d80 <usb_isr+0x288>)
    4cca:	685d      	ldr	r5, [r3, #4]
    4ccc:	2d00      	cmp	r5, #0
    4cce:	f43f af64 	beq.w	4b9a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4cd2:	fa1f fc8c 	uxth.w	ip, ip
    4cd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    4cda:	e004      	b.n	4ce6 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4cdc:	691d      	ldr	r5, [r3, #16]
    4cde:	330c      	adds	r3, #12
    4ce0:	2d00      	cmp	r5, #0
    4ce2:	f43f af5a 	beq.w	4b9a <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4ce6:	881a      	ldrh	r2, [r3, #0]
    4ce8:	4572      	cmp	r2, lr
    4cea:	d1f7      	bne.n	4cdc <usb_isr+0x1e4>
    4cec:	885a      	ldrh	r2, [r3, #2]
    4cee:	4562      	cmp	r2, ip
    4cf0:	d1f4      	bne.n	4cdc <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    4cf2:	ea4f 221e 	mov.w	r2, lr, lsr #8
    4cf6:	2a03      	cmp	r2, #3
    4cf8:	f000 81a5 	beq.w	5046 <usb_isr+0x54e>
					datalen = list->length;
    4cfc:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    4cfe:	0c00      	lsrs	r0, r0, #16
    4d00:	4282      	cmp	r2, r0
    4d02:	bf28      	it	cs
    4d04:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    4d06:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    4d0a:	f040 81a1 	bne.w	5050 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    4d0e:	4b18      	ldr	r3, [pc, #96]	; (4d70 <usb_isr+0x278>)
    4d10:	491c      	ldr	r1, [pc, #112]	; (4d84 <usb_isr+0x28c>)
    4d12:	7818      	ldrb	r0, [r3, #0]
    4d14:	4b1c      	ldr	r3, [pc, #112]	; (4d88 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4d16:	9201      	str	r2, [sp, #4]
    4d18:	2800      	cmp	r0, #0
    4d1a:	bf18      	it	ne
    4d1c:	4619      	movne	r1, r3
    4d1e:	481b      	ldr	r0, [pc, #108]	; (4d8c <usb_isr+0x294>)
    4d20:	f7ff f9ca 	bl	40b8 <memcpy>
    4d24:	4d19      	ldr	r5, [pc, #100]	; (4d8c <usb_isr+0x294>)
    4d26:	9a01      	ldr	r2, [sp, #4]
    4d28:	e1e1      	b.n	50ee <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    4d2a:	f242 2121 	movw	r1, #8737	; 0x2221
    4d2e:	428b      	cmp	r3, r1
    4d30:	d07c      	beq.n	4e2c <usb_isr+0x334>
    4d32:	d933      	bls.n	4d9c <usb_isr+0x2a4>
    4d34:	f242 3121 	movw	r1, #8993	; 0x2321
    4d38:	428b      	cmp	r3, r1
    4d3a:	f000 8081 	beq.w	4e40 <usb_isr+0x348>
    4d3e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    4d42:	428b      	cmp	r3, r1
    4d44:	f47f af29 	bne.w	4b9a <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    4d48:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    4d4c:	b283      	uxth	r3, r0
    4d4e:	f47f af24 	bne.w	4b9a <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    4d52:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    4d56:	f363 0c0f 	bfi	ip, r3, #0, #16
    4d5a:	e7b5      	b.n	4cc8 <usb_isr+0x1d0>
    4d5c:	402e0000 	.word	0x402e0000
    4d60:	20000000 	.word	0x20000000
    4d64:	200032e0 	.word	0x200032e0
    4d68:	20003dd8 	.word	0x20003dd8
    4d6c:	20003ddc 	.word	0x20003ddc
    4d70:	20003df4 	.word	0x20003df4
    4d74:	20003df5 	.word	0x20003df5
    4d78:	200032dc 	.word	0x200032dc
    4d7c:	20003d6c 	.word	0x20003d6c
    4d80:	2000114c 	.word	0x2000114c
    4d84:	60002128 	.word	0x60002128
    4d88:	6000218c 	.word	0x6000218c
    4d8c:	20200000 	.word	0x20200000
    4d90:	200032d4 	.word	0x200032d4
    4d94:	b8c6cf5d 	.word	0xb8c6cf5d
    4d98:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    4d9c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4da0:	d066      	beq.n	4e70 <usb_isr+0x378>
    4da2:	f242 0121 	movw	r1, #8225	; 0x2021
    4da6:	428b      	cmp	r3, r1
    4da8:	f47f aef7 	bne.w	4b9a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    4dac:	0c03      	lsrs	r3, r0, #16
    4dae:	2b07      	cmp	r3, #7
    4db0:	f47f aef3 	bne.w	4b9a <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    4db4:	4bb2      	ldr	r3, [pc, #712]	; (5080 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4db6:	49b3      	ldr	r1, [pc, #716]	; (5084 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    4db8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    4dba:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    4dbc:	49b2      	ldr	r1, [pc, #712]	; (5088 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    4dbe:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4dc0:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    4dc4:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    4dc8:	2201      	movs	r2, #1
    4dca:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4dcc:	4aaf      	ldr	r2, [pc, #700]	; (508c <usb_isr+0x594>)
    4dce:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4dd0:	4aaf      	ldr	r2, [pc, #700]	; (5090 <usb_isr+0x598>)
    4dd2:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    4dd4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    4dd8:	f041 0101 	orr.w	r1, r1, #1
    4ddc:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4de0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4de4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4de8:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4dea:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    4dec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4df0:	2b00      	cmp	r3, #0
    4df2:	d1fb      	bne.n	4dec <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    4df4:	4aa7      	ldr	r2, [pc, #668]	; (5094 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4df6:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4df8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    4dfa:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4dfc:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4dfe:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e00:	f248 0380 	movw	r3, #32896	; 0x8080
    4e04:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4e06:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4e0a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4e0e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4e16:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4e1e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    4e22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e26:	2b00      	cmp	r3, #0
    4e28:	d1fb      	bne.n	4e22 <usb_isr+0x32a>
    4e2a:	e6ba      	b.n	4ba2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4e2c:	b280      	uxth	r0, r0
    4e2e:	b938      	cbnz	r0, 4e40 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4e30:	4b99      	ldr	r3, [pc, #612]	; (5098 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    4e32:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4e36:	6819      	ldr	r1, [r3, #0]
    4e38:	4b98      	ldr	r3, [pc, #608]	; (509c <usb_isr+0x5a4>)
    4e3a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4e3c:	4b98      	ldr	r3, [pc, #608]	; (50a0 <usb_isr+0x5a8>)
    4e3e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    4e40:	4b94      	ldr	r3, [pc, #592]	; (5094 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    4e42:	2200      	movs	r2, #0
    4e44:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    4e46:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4e48:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4e4a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4e4c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e4e:	2280      	movs	r2, #128	; 0x80
    4e50:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4e52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4e56:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4e5a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4e62:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4e66:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d1fb      	bne.n	4e66 <usb_isr+0x36e>
    4e6e:	e698      	b.n	4ba2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    4e70:	f3c2 4207 	ubfx	r2, r2, #16, #8
    4e74:	4b8b      	ldr	r3, [pc, #556]	; (50a4 <usb_isr+0x5ac>)
    4e76:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    4e78:	4b8b      	ldr	r3, [pc, #556]	; (50a8 <usb_isr+0x5b0>)
    4e7a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    4e7e:	4b8b      	ldr	r3, [pc, #556]	; (50ac <usb_isr+0x5b4>)
    4e80:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    4e84:	4b8a      	ldr	r3, [pc, #552]	; (50b0 <usb_isr+0x5b8>)
    4e86:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    4e8a:	f000 fbd3 	bl	5634 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    4e8e:	2280      	movs	r2, #128	; 0x80
    4e90:	4629      	mov	r1, r5
    4e92:	4888      	ldr	r0, [pc, #544]	; (50b4 <usb_isr+0x5bc>)
    4e94:	f002 fddc 	bl	7a50 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4e98:	4b87      	ldr	r3, [pc, #540]	; (50b8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4e9a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4e9c:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    4ea0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    4ea4:	4b7b      	ldr	r3, [pc, #492]	; (5094 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4ea6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4ea8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    4eaa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4eac:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    4eae:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4eb0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4eb2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4eb6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4eba:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4ec2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4ec6:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    4eca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d1fb      	bne.n	4eca <usb_isr+0x3d2>
    4ed2:	e666      	b.n	4ba2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    4ed4:	4b6f      	ldr	r3, [pc, #444]	; (5094 <usb_isr+0x59c>)
    4ed6:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    4ed8:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4eda:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4edc:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    4ede:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4ee0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4ee2:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4ee4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4ee8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4eec:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4ef4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4ef8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4efc:	2b00      	cmp	r3, #0
    4efe:	d1fb      	bne.n	4ef8 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    4f00:	0c13      	lsrs	r3, r2, #16
    4f02:	065b      	lsls	r3, r3, #25
    4f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4f08:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    4f0c:	e649      	b.n	4ba2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    4f0e:	4b65      	ldr	r3, [pc, #404]	; (50a4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    4f10:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    4f12:	486a      	ldr	r0, [pc, #424]	; (50bc <usb_isr+0x5c4>)
    4f14:	781b      	ldrb	r3, [r3, #0]
    4f16:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4f18:	f7ff fd8c 	bl	4a34 <endpoint0_transmit.constprop.0>
		return;
    4f1c:	e641      	b.n	4ba2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4f1e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    4f20:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    4f24:	f47f ae39 	bne.w	4b9a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4f2c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    4f30:	4a62      	ldr	r2, [pc, #392]	; (50bc <usb_isr+0x5c4>)
    4f32:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4f34:	0618      	lsls	r0, r3, #24
    4f36:	f100 809e 	bmi.w	5076 <usb_isr+0x57e>
    4f3a:	07cb      	lsls	r3, r1, #31
    4f3c:	d501      	bpl.n	4f42 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    4f3e:	2301      	movs	r3, #1
    4f40:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4f42:	2102      	movs	r1, #2
    4f44:	485d      	ldr	r0, [pc, #372]	; (50bc <usb_isr+0x5c4>)
    4f46:	f7ff fd75 	bl	4a34 <endpoint0_transmit.constprop.0>
		return;
    4f4a:	e62a      	b.n	4ba2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    4f4c:	f010 0f78 	tst.w	r0, #120	; 0x78
    4f50:	b283      	uxth	r3, r0
    4f52:	f47f ae22 	bne.w	4b9a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4f5a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    4f5e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4f62:	bf14      	ite	ne
    4f64:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4f68:	f043 0301 	orreq.w	r3, r3, #1
    4f6c:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4f70:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4f72:	4b48      	ldr	r3, [pc, #288]	; (5094 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4f74:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4f76:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4f78:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4f7a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4f7c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4f7e:	2280      	movs	r2, #128	; 0x80
    4f80:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4f82:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4f86:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4f8a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4f92:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4f96:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d1fb      	bne.n	4f96 <usb_isr+0x49e>
    4f9e:	e600      	b.n	4ba2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4fa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4fa4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    4fa8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    4fac:	bf14      	ite	ne
    4fae:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    4fb2:	f023 0301 	biceq.w	r3, r3, #1
    4fb6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    4fba:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    4fbc:	4b35      	ldr	r3, [pc, #212]	; (5094 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4fbe:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4fc0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4fc2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4fc4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4fc6:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4fc8:	2280      	movs	r2, #128	; 0x80
    4fca:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4fcc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4fd0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4fd4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4fdc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4fe0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d1fb      	bne.n	4fe0 <usb_isr+0x4e8>
    4fe8:	e5db      	b.n	4ba2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    4fea:	2000      	movs	r0, #0
    4fec:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4fee:	4926      	ldr	r1, [pc, #152]	; (5088 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4ff0:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4ff2:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4ff4:	f242 0121 	movw	r1, #8225	; 0x2021
    4ff8:	428c      	cmp	r4, r1
    4ffa:	f47f ae25 	bne.w	4c48 <usb_isr+0x150>
    4ffe:	b280      	uxth	r0, r0
    5000:	2800      	cmp	r0, #0
    5002:	f47f ae21 	bne.w	4c48 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5006:	492e      	ldr	r1, [pc, #184]	; (50c0 <usb_isr+0x5c8>)
    5008:	4c2e      	ldr	r4, [pc, #184]	; (50c4 <usb_isr+0x5cc>)
    500a:	c903      	ldmia	r1, {r0, r1}
    500c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    500e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    5010:	ea4f 4111 	mov.w	r1, r1, lsr #16
    5014:	6020      	str	r0, [r4, #0]
    5016:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    5018:	f47f ae16 	bne.w	4c48 <usb_isr+0x150>
	__disable_irq();
    501c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    501e:	482a      	ldr	r0, [pc, #168]	; (50c8 <usb_isr+0x5d0>)
    5020:	7801      	ldrb	r1, [r0, #0]
    5022:	f041 0108 	orr.w	r1, r1, #8
    5026:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    5028:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    502c:	060d      	lsls	r5, r1, #24
    502e:	d405      	bmi.n	503c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    5030:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    5032:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    5034:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    5038:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    503c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    503e:	4a23      	ldr	r2, [pc, #140]	; (50cc <usb_isr+0x5d4>)
    5040:	2150      	movs	r1, #80	; 0x50
    5042:	7011      	strb	r1, [r2, #0]
    5044:	e600      	b.n	4c48 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    5046:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    5048:	782a      	ldrb	r2, [r5, #0]
    504a:	4282      	cmp	r2, r0
    504c:	bf28      	it	cs
    504e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    5050:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    5054:	d144      	bne.n	50e0 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    5056:	4b1e      	ldr	r3, [pc, #120]	; (50d0 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    5058:	4d1e      	ldr	r5, [pc, #120]	; (50d4 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    505a:	7818      	ldrb	r0, [r3, #0]
    505c:	491e      	ldr	r1, [pc, #120]	; (50d8 <usb_isr+0x5e0>)
    505e:	4b1f      	ldr	r3, [pc, #124]	; (50dc <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    5060:	9201      	str	r2, [sp, #4]
    5062:	2800      	cmp	r0, #0
    5064:	bf18      	it	ne
    5066:	4619      	movne	r1, r3
    5068:	4628      	mov	r0, r5
    506a:	f7ff f825 	bl	40b8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    506e:	2307      	movs	r3, #7
    5070:	706b      	strb	r3, [r5, #1]
    5072:	9a01      	ldr	r2, [sp, #4]
    5074:	e03b      	b.n	50ee <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    5076:	03c9      	lsls	r1, r1, #15
    5078:	f53f af61 	bmi.w	4f3e <usb_isr+0x446>
    507c:	e761      	b.n	4f42 <usb_isr+0x44a>
    507e:	bf00      	nop
    5080:	200022e0 	.word	0x200022e0
    5084:	200042d4 	.word	0x200042d4
    5088:	20002480 	.word	0x20002480
    508c:	00070080 	.word	0x00070080
    5090:	200052d4 	.word	0x200052d4
    5094:	200022c0 	.word	0x200022c0
    5098:	20003dc4 	.word	0x20003dc4
    509c:	20003dd4 	.word	0x20003dd4
    50a0:	20003df2 	.word	0x20003df2
    50a4:	20003df3 	.word	0x20003df3
    50a8:	00cc0002 	.word	0x00cc0002
    50ac:	000200c8 	.word	0x000200c8
    50b0:	00c80002 	.word	0x00c80002
    50b4:	20000080 	.word	0x20000080
    50b8:	74d59319 	.word	0x74d59319
    50bc:	20003d6c 	.word	0x20003d6c
    50c0:	200032d4 	.word	0x200032d4
    50c4:	20003dcc 	.word	0x20003dcc
    50c8:	20003ded 	.word	0x20003ded
    50cc:	20003df5 	.word	0x20003df5
    50d0:	20003df4 	.word	0x20003df4
    50d4:	20200000 	.word	0x20200000
    50d8:	6000218c 	.word	0x6000218c
    50dc:	60002128 	.word	0x60002128
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    50e0:	4629      	mov	r1, r5
    50e2:	4d10      	ldr	r5, [pc, #64]	; (5124 <usb_isr+0x62c>)
    50e4:	9201      	str	r2, [sp, #4]
    50e6:	4628      	mov	r0, r5
    50e8:	f7fe ffe6 	bl	40b8 <memcpy>
    50ec:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    50ee:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    50f2:	4415      	add	r5, r2
	asm("dsb");
    50f4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    50f8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    50fc:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    5100:	3320      	adds	r3, #32
	} while (location < end_addr);
    5102:	429d      	cmp	r5, r3
    5104:	d8fa      	bhi.n	50fc <usb_isr+0x604>
	asm("dsb");
    5106:	f3bf 8f4f 	dsb	sy
	asm("isb");
    510a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    510e:	4805      	ldr	r0, [pc, #20]	; (5124 <usb_isr+0x62c>)
    5110:	4611      	mov	r1, r2
    5112:	f7ff fc8f 	bl	4a34 <endpoint0_transmit.constprop.0>
				return;
    5116:	e544      	b.n	4ba2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    5118:	2003      	movs	r0, #3
    511a:	f7ff fcd7 	bl	4acc <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    511e:	f007 fdb7 	bl	cc90 <___reboot_Teensyduino__veneer>
    5122:	bf00      	nop
    5124:	20200000 	.word	0x20200000

00005128 <usb_config_rx>:
{
    5128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    512c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    512e:	1e83      	subs	r3, r0, #2
    5130:	2b02      	cmp	r3, #2
    5132:	d901      	bls.n	5138 <usb_config_rx+0x10>
}
    5134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5138:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5188 <usb_config_rx+0x60>
    513c:	4615      	mov	r5, r2
    513e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    5140:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5142:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    5146:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    5148:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    514c:	2100      	movs	r1, #0
    514e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5152:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    5154:	f002 fc7c 	bl	7a50 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    5158:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    515c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    515e:	0952      	lsrs	r2, r2, #5
    5160:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    5164:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    5168:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    516c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    5170:	2f00      	cmp	r7, #0
    5172:	d0df      	beq.n	5134 <usb_config_rx+0xc>
    5174:	4a03      	ldr	r2, [pc, #12]	; (5184 <usb_config_rx+0x5c>)
    5176:	40b3      	lsls	r3, r6
    5178:	6811      	ldr	r1, [r2, #0]
    517a:	430b      	orrs	r3, r1
    517c:	6013      	str	r3, [r2, #0]
}
    517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5182:	bf00      	nop
    5184:	200032e0 	.word	0x200032e0
    5188:	20000000 	.word	0x20000000

0000518c <usb_config_tx>:
{
    518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5190:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    5192:	1e81      	subs	r1, r0, #2
    5194:	2902      	cmp	r1, #2
    5196:	d901      	bls.n	519c <usb_config_tx+0x10>
}
    5198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    519c:	01c7      	lsls	r7, r0, #7
    519e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 51ec <usb_config_tx+0x60>
    51a2:	4692      	mov	sl, r2
    51a4:	4604      	mov	r4, r0
    51a6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    51a8:	223c      	movs	r2, #60	; 0x3c
    51aa:	2100      	movs	r1, #0
    51ac:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    51ae:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    51b2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    51b4:	f108 0004 	add.w	r0, r8, #4
    51b8:	f002 fc4a 	bl	7a50 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    51bc:	faba f28a 	clz	r2, sl
    51c0:	0952      	lsrs	r2, r2, #5
    51c2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    51c6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    51ca:	2201      	movs	r2, #1
	qh->callback_function = callback;
    51cc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    51d0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    51d4:	2e00      	cmp	r6, #0
    51d6:	d0df      	beq.n	5198 <usb_config_tx+0xc>
    51d8:	4b03      	ldr	r3, [pc, #12]	; (51e8 <usb_config_tx+0x5c>)
    51da:	3410      	adds	r4, #16
    51dc:	6819      	ldr	r1, [r3, #0]
    51de:	40a2      	lsls	r2, r4
    51e0:	430a      	orrs	r2, r1
    51e2:	601a      	str	r2, [r3, #0]
}
    51e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51e8:	200032e0 	.word	0x200032e0
    51ec:	20000000 	.word	0x20000000

000051f0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    51f0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    51f2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    51f4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    51f6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    51fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    51fe:	b410      	push	{r4}
	transfer->next = 1;
    5200:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    5202:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    5204:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    5208:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    520a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    520e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    5212:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    5214:	6181      	str	r1, [r0, #24]
}
    5216:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    521a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    521e:	4770      	bx	lr

00005220 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5220:	1e83      	subs	r3, r0, #2
{
    5222:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5224:	2b02      	cmp	r3, #2
    5226:	d900      	bls.n	522a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    5228:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    522a:	4b06      	ldr	r3, [pc, #24]	; (5244 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    522c:	f100 0110 	add.w	r1, r0, #16
    5230:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    5234:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    5238:	fa0c f101 	lsl.w	r1, ip, r1
    523c:	3040      	adds	r0, #64	; 0x40
    523e:	f7ff bb99 	b.w	4974 <schedule_transfer>
    5242:	bf00      	nop
    5244:	20000000 	.word	0x20000000

00005248 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    5248:	1e83      	subs	r3, r0, #2
{
    524a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    524c:	2b02      	cmp	r3, #2
    524e:	d900      	bls.n	5252 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    5250:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    5252:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    5254:	4b02      	ldr	r3, [pc, #8]	; (5260 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    5256:	4081      	lsls	r1, r0
    5258:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    525c:	f7ff bb8a 	b.w	4974 <schedule_transfer>
    5260:	20000000 	.word	0x20000000

00005264 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    5264:	6840      	ldr	r0, [r0, #4]
#endif
}
    5266:	4770      	bx	lr

00005268 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    5268:	4a12      	ldr	r2, [pc, #72]	; (52b4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    526a:	4b13      	ldr	r3, [pc, #76]	; (52b8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    526c:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    5270:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    5274:	4298      	cmp	r0, r3
{
    5276:	b510      	push	{r4, lr}
    5278:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    527a:	d202      	bcs.n	5282 <usb_init_serialnumber+0x1a>
    527c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5280:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    5282:	4c0e      	ldr	r4, [pc, #56]	; (52bc <usb_init_serialnumber+0x54>)
    5284:	a901      	add	r1, sp, #4
    5286:	220a      	movs	r2, #10
    5288:	f7fe ffb4 	bl	41f4 <ultoa>
	for (i=0; i<10; i++) {
    528c:	a901      	add	r1, sp, #4
    528e:	2300      	movs	r3, #0
    5290:	4620      	mov	r0, r4
		char c = buf[i];
    5292:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    5296:	3301      	adds	r3, #1
		if (!c) break;
    5298:	b13a      	cbz	r2, 52aa <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    529a:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    529c:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    52a0:	d1f7      	bne.n	5292 <usb_init_serialnumber+0x2a>
    52a2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    52a4:	7023      	strb	r3, [r4, #0]
}
    52a6:	b004      	add	sp, #16
    52a8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    52aa:	005b      	lsls	r3, r3, #1
    52ac:	b2db      	uxtb	r3, r3
    52ae:	7023      	strb	r3, [r4, #0]
}
    52b0:	b004      	add	sp, #16
    52b2:	bd10      	pop	{r4, pc}
    52b4:	401f4400 	.word	0x401f4400
    52b8:	00989680 	.word	0x00989680
    52bc:	20001dcc 	.word	0x20001dcc

000052c0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    52c0:	f000 bacc 	b.w	585c <usb_serial_flush_input>

000052c4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    52c4:	f000 bb5c 	b.w	5980 <usb_serial_flush_output>

000052c8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    52c8:	f000 bb32 	b.w	5930 <usb_serial_write_buffer_free>

000052cc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    52cc:	4608      	mov	r0, r1
    52ce:	4611      	mov	r1, r2
    52d0:	f000 bb22 	b.w	5918 <usb_serial_write>

000052d4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    52d6:	4c14      	ldr	r4, [pc, #80]	; (5328 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    52d8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    52dc:	4e13      	ldr	r6, [pc, #76]	; (532c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    52de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    52e2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    52e6:	4f12      	ldr	r7, [pc, #72]	; (5330 <rx_queue_transfer+0x5c>)
    52e8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    52ec:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    52ee:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    52f2:	4621      	mov	r1, r4
    52f4:	883a      	ldrh	r2, [r7, #0]
    52f6:	4630      	mov	r0, r6
    52f8:	f7ff ff7a 	bl	51f0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    52fc:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    52fe:	4423      	add	r3, r4
	asm("dsb");
    5300:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    5304:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    5308:	3420      	adds	r4, #32
	} while (location < end_addr);
    530a:	42a3      	cmp	r3, r4
    530c:	d8fa      	bhi.n	5304 <rx_queue_transfer+0x30>
	asm("dsb");
    530e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5312:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    5316:	2003      	movs	r0, #3
    5318:	4631      	mov	r1, r6
    531a:	f7ff ff95 	bl	5248 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    531e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    5322:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    5326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5328:	20200080 	.word	0x20200080
    532c:	20002300 	.word	0x20002300
    5330:	20003de0 	.word	0x20003de0

00005334 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5334:	4b24      	ldr	r3, [pc, #144]	; (53c8 <rx_event+0x94>)
{
    5336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    533a:	881c      	ldrh	r4, [r3, #0]
    533c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    533e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    5340:	f3c3 430e 	ubfx	r3, r3, #16, #15
    5344:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    5346:	2c00      	cmp	r4, #0
    5348:	dd24      	ble.n	5394 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    534a:	4920      	ldr	r1, [pc, #128]	; (53cc <rx_event+0x98>)
		if (head != rx_tail) {
    534c:	4820      	ldr	r0, [pc, #128]	; (53d0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    534e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    5350:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    5352:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    5354:	4e1f      	ldr	r6, [pc, #124]	; (53d4 <rx_event+0xa0>)
		if (head != rx_tail) {
    5356:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    5358:	481f      	ldr	r0, [pc, #124]	; (53d8 <rx_event+0xa4>)
		if (head != rx_tail) {
    535a:	d007      	beq.n	536c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    535c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    5360:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    5364:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    5368:	4294      	cmp	r4, r2
    536a:	d918      	bls.n	539e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    536c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    536e:	2200      	movs	r2, #0
		rx_count[i] = len;
    5370:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    5374:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    5376:	4e19      	ldr	r6, [pc, #100]	; (53dc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    5378:	bf88      	it	hi
    537a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    537c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    5380:	bf98      	it	ls
    5382:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    5384:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    5386:	4b16      	ldr	r3, [pc, #88]	; (53e0 <rx_event+0xac>)
		rx_head = head;
    5388:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    538a:	681a      	ldr	r2, [r3, #0]
    538c:	4414      	add	r4, r2
    538e:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    5390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    5394:	4628      	mov	r0, r5
}
    5396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    539a:	f7ff bf9b 	b.w	52d4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    539e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    53a2:	4910      	ldr	r1, [pc, #64]	; (53e4 <rx_event+0xb0>)
    53a4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    53a6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    53a8:	4408      	add	r0, r1
    53aa:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    53ae:	f7fe fe83 	bl	40b8 <memcpy>
				rx_available += len;
    53b2:	4a0b      	ldr	r2, [pc, #44]	; (53e0 <rx_event+0xac>)
				rx_queue_transfer(i);
    53b4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    53b6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    53ba:	6813      	ldr	r3, [r2, #0]
    53bc:	4423      	add	r3, r4
}
    53be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    53c2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    53c4:	f7ff bf86 	b.w	52d4 <rx_queue_transfer>
    53c8:	20003de0 	.word	0x20003de0
    53cc:	20003deb 	.word	0x20003deb
    53d0:	20003dec 	.word	0x20003dec
    53d4:	20003d80 	.word	0x20003d80
    53d8:	20003da0 	.word	0x20003da0
    53dc:	20003d90 	.word	0x20003d90
    53e0:	20003d7c 	.word	0x20003d7c
    53e4:	20200080 	.word	0x20200080

000053e8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    53e8:	4b1d      	ldr	r3, [pc, #116]	; (5460 <usb_serial_flush_callback+0x78>)
    53ea:	781a      	ldrb	r2, [r3, #0]
    53ec:	2a00      	cmp	r2, #0
    53ee:	d136      	bne.n	545e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    53f0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    53f4:	4a1b      	ldr	r2, [pc, #108]	; (5464 <usb_serial_flush_callback+0x7c>)
    53f6:	7812      	ldrb	r2, [r2, #0]
    53f8:	b38a      	cbz	r2, 545e <usb_serial_flush_callback+0x76>
{
    53fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    53fe:	4d1a      	ldr	r5, [pc, #104]	; (5468 <usb_serial_flush_callback+0x80>)
    5400:	882a      	ldrh	r2, [r5, #0]
    5402:	b352      	cbz	r2, 545a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    5404:	4e19      	ldr	r6, [pc, #100]	; (546c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    5406:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    540a:	4f19      	ldr	r7, [pc, #100]	; (5470 <usb_serial_flush_callback+0x88>)
    540c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    540e:	4c19      	ldr	r4, [pc, #100]	; (5474 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    5410:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5414:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    5418:	4642      	mov	r2, r8
    541a:	4638      	mov	r0, r7
    541c:	4621      	mov	r1, r4
    541e:	f7ff fee7 	bl	51f0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    5422:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    5426:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    542a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    542e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    5432:	3420      	adds	r4, #32
	} while (location < end_addr);
    5434:	42a2      	cmp	r2, r4
    5436:	d8fa      	bhi.n	542e <usb_serial_flush_callback+0x46>
	asm("dsb");
    5438:	f3bf 8f4f 	dsb	sy
	asm("isb");
    543c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5440:	2004      	movs	r0, #4
    5442:	4639      	mov	r1, r7
    5444:	f7ff feec 	bl	5220 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5448:	7833      	ldrb	r3, [r6, #0]
    544a:	3301      	adds	r3, #1
    544c:	b2db      	uxtb	r3, r3
    544e:	2b03      	cmp	r3, #3
    5450:	bf88      	it	hi
    5452:	2300      	movhi	r3, #0
    5454:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    5456:	2300      	movs	r3, #0
    5458:	802b      	strh	r3, [r5, #0]
}
    545a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    545e:	4770      	bx	lr
    5460:	20003df1 	.word	0x20003df1
    5464:	20003df3 	.word	0x20003df3
    5468:	20003de2 	.word	0x20003de2
    546c:	20003df0 	.word	0x20003df0
    5470:	20002400 	.word	0x20002400
    5474:	20201080 	.word	0x20201080

00005478 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    5478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    547c:	b085      	sub	sp, #20
	while (size > 0) {
    547e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    5482:	2900      	cmp	r1, #0
    5484:	f000 80bf 	beq.w	5606 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    5488:	2300      	movs	r3, #0
    548a:	4c60      	ldr	r4, [pc, #384]	; (560c <usb_serial_write.part.0+0x194>)
    548c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5628 <usb_serial_write.part.0+0x1b0>
    5490:	f8df a198 	ldr.w	sl, [pc, #408]	; 562c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    5494:	4f5e      	ldr	r7, [pc, #376]	; (5610 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    5496:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    5498:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    549a:	4a5e      	ldr	r2, [pc, #376]	; (5614 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    549c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    549e:	4b5e      	ldr	r3, [pc, #376]	; (5618 <usb_serial_write.part.0+0x1a0>)
    54a0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    54a2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    54a6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    54aa:	2b00      	cmp	r3, #0
    54ac:	f040 80a7 	bne.w	55fe <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    54b0:	461e      	mov	r6, r3
		int waiting=0;
    54b2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    54b4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    54b6:	4648      	mov	r0, r9
    54b8:	f7ff fed4 	bl	5264 <usb_transfer_status>
			if (!(status & 0x80)) {
    54bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    54c0:	f000 808c 	beq.w	55dc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    54c4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    54c8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    54cc:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    54d0:	b905      	cbnz	r5, 54d4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    54d2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    54d4:	2b00      	cmp	r3, #0
    54d6:	d17d      	bne.n	55d4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    54d8:	683b      	ldr	r3, [r7, #0]
    54da:	1b9b      	subs	r3, r3, r6
    54dc:	2b78      	cmp	r3, #120	; 0x78
    54de:	f200 8087 	bhi.w	55f0 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    54e2:	4b4e      	ldr	r3, [pc, #312]	; (561c <usb_serial_write.part.0+0x1a4>)
    54e4:	781b      	ldrb	r3, [r3, #0]
    54e6:	2b00      	cmp	r3, #0
    54e8:	d074      	beq.n	55d4 <usb_serial_write.part.0+0x15c>
			yield();
    54ea:	f000 fa93 	bl	5a14 <yield>
			tx_noautoflush = 1;
    54ee:	2201      	movs	r2, #1
		while (!tx_available) {
    54f0:	f8b8 3000 	ldrh.w	r3, [r8]
    54f4:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    54f6:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    54f8:	2b00      	cmp	r3, #0
    54fa:	d0dc      	beq.n	54b6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    54fc:	4a46      	ldr	r2, [pc, #280]	; (5618 <usb_serial_write.part.0+0x1a0>)
    54fe:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5502:	7811      	ldrb	r1, [r2, #0]
    5504:	461a      	mov	r2, r3
    5506:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    550a:	4d45      	ldr	r5, [pc, #276]	; (5620 <usb_serial_write.part.0+0x1a8>)
    550c:	02c9      	lsls	r1, r1, #11
    550e:	4428      	add	r0, r5
		if (size >= tx_available) {
    5510:	9d01      	ldr	r5, [sp, #4]
    5512:	4295      	cmp	r5, r2
    5514:	d217      	bcs.n	5546 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    5516:	9303      	str	r3, [sp, #12]
    5518:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    551c:	462a      	mov	r2, r5
    551e:	f7fe fdcb 	bl	40b8 <memcpy>
			tx_available -= size;
    5522:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    5524:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    5528:	1b5b      	subs	r3, r3, r5
    552a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    552e:	4b3d      	ldr	r3, [pc, #244]	; (5624 <usb_serial_write.part.0+0x1ac>)
    5530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    5534:	f3bf 8f4f 	dsb	sy
			sent += size;
    5538:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    553a:	2300      	movs	r3, #0
			sent += size;
    553c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    553e:	7023      	strb	r3, [r4, #0]
}
    5540:	b005      	add	sp, #20
    5542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    5546:	4b36      	ldr	r3, [pc, #216]	; (5620 <usb_serial_write.part.0+0x1a8>)
    5548:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    554a:	9902      	ldr	r1, [sp, #8]
    554c:	f7fe fdb4 	bl	40b8 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    5550:	2300      	movs	r3, #0
    5552:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5556:	4629      	mov	r1, r5
    5558:	4648      	mov	r0, r9
    555a:	f7ff fe49 	bl	51f0 <usb_prepare_transfer>
	asm("dsb");
    555e:	f3bf 8f4f 	dsb	sy
    5562:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    5566:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    556a:	4293      	cmp	r3, r2
    556c:	bf34      	ite	cc
    556e:	2301      	movcc	r3, #1
    5570:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    5572:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    5576:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    557a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    557e:	3520      	adds	r5, #32
	} while (location < end_addr);
    5580:	42ab      	cmp	r3, r5
    5582:	d1fa      	bne.n	557a <usb_serial_write.part.0+0x102>
	asm("dsb");
    5584:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5588:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    558c:	2004      	movs	r0, #4
    558e:	4649      	mov	r1, r9
    5590:	f7ff fe46 	bl	5220 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    5594:	4a20      	ldr	r2, [pc, #128]	; (5618 <usb_serial_write.part.0+0x1a0>)
    5596:	7813      	ldrb	r3, [r2, #0]
    5598:	3301      	adds	r3, #1
    559a:	b2db      	uxtb	r3, r3
    559c:	2b03      	cmp	r3, #3
    559e:	bf84      	itt	hi
    55a0:	2300      	movhi	r3, #0
    55a2:	4a1d      	ldrhi	r2, [pc, #116]	; (5618 <usb_serial_write.part.0+0x1a0>)
    55a4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    55a6:	f8b8 3000 	ldrh.w	r3, [r8]
    55aa:	9a01      	ldr	r2, [sp, #4]
    55ac:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    55ae:	9a00      	ldr	r2, [sp, #0]
    55b0:	441a      	add	r2, r3
			size -= tx_available;
    55b2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    55b4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    55b6:	9a02      	ldr	r2, [sp, #8]
    55b8:	441a      	add	r2, r3
			tx_available = 0;
    55ba:	2300      	movs	r3, #0
			data += tx_available;
    55bc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    55be:	4a19      	ldr	r2, [pc, #100]	; (5624 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    55c0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    55c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    55c8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    55cc:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    55ce:	2900      	cmp	r1, #0
    55d0:	f47f af62 	bne.w	5498 <usb_serial_write.part.0+0x20>
	return sent;
    55d4:	9800      	ldr	r0, [sp, #0]
}
    55d6:	b005      	add	sp, #20
    55d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    55dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    55e0:	4b0d      	ldr	r3, [pc, #52]	; (5618 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    55e2:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    55e6:	7819      	ldrb	r1, [r3, #0]
				break;
    55e8:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    55ea:	f8a8 2000 	strh.w	r2, [r8]
				break;
    55ee:	e78a      	b.n	5506 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    55f0:	2301      	movs	r3, #1
				return sent;
    55f2:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    55f4:	f88a 3000 	strb.w	r3, [sl]
}
    55f8:	b005      	add	sp, #20
    55fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    55fe:	461a      	mov	r2, r3
    5600:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5604:	e77f      	b.n	5506 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    5606:	9801      	ldr	r0, [sp, #4]
	return sent;
    5608:	e7e5      	b.n	55d6 <usb_serial_write.part.0+0x15e>
    560a:	bf00      	nop
    560c:	20003df1 	.word	0x20003df1
    5610:	20003dc4 	.word	0x20003dc4
    5614:	20002400 	.word	0x20002400
    5618:	20003df0 	.word	0x20003df0
    561c:	20003df3 	.word	0x20003df3
    5620:	20201080 	.word	0x20201080
    5624:	402e0000 	.word	0x402e0000
    5628:	20003de2 	.word	0x20003de2
    562c:	20003def 	.word	0x20003def

00005630 <usb_serial_reset>:
}
    5630:	4770      	bx	lr
    5632:	bf00      	nop

00005634 <usb_serial_configure>:
	if (usb_high_speed) {
    5634:	4b2a      	ldr	r3, [pc, #168]	; (56e0 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5636:	2100      	movs	r1, #0
    5638:	2280      	movs	r2, #128	; 0x80
    563a:	482a      	ldr	r0, [pc, #168]	; (56e4 <usb_serial_configure+0xb0>)
{
    563c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    563e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    5640:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    5642:	4d29      	ldr	r5, [pc, #164]	; (56e8 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    5644:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    5646:	4e29      	ldr	r6, [pc, #164]	; (56ec <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    5648:	bf0c      	ite	eq
    564a:	2340      	moveq	r3, #64	; 0x40
    564c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    5650:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    5652:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5654:	f002 f9fc 	bl	7a50 <memset>
	tx_head = 0;
    5658:	4a25      	ldr	r2, [pc, #148]	; (56f0 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    565a:	4621      	mov	r1, r4
	tx_available = 0;
    565c:	4b25      	ldr	r3, [pc, #148]	; (56f4 <usb_serial_configure+0xc0>)
	tx_head = 0;
    565e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5660:	f44f 7280 	mov.w	r2, #256	; 0x100
    5664:	4824      	ldr	r0, [pc, #144]	; (56f8 <usb_serial_configure+0xc4>)
	tx_available = 0;
    5666:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    5668:	f002 f9f2 	bl	7a50 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    566c:	4a23      	ldr	r2, [pc, #140]	; (56fc <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    566e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    5670:	4b23      	ldr	r3, [pc, #140]	; (5700 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5672:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    5674:	e9c2 4400 	strd	r4, r4, [r2]
    5678:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    567c:	4a21      	ldr	r2, [pc, #132]	; (5704 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    567e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    5682:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    5684:	4a20      	ldr	r2, [pc, #128]	; (5708 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    5686:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    568a:	4b20      	ldr	r3, [pc, #128]	; (570c <usb_serial_configure+0xd8>)
    568c:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    568e:	4623      	mov	r3, r4
	rx_available = 0;
    5690:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    5692:	4622      	mov	r2, r4
    5694:	f7ff fd7a 	bl	518c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    5698:	4622      	mov	r2, r4
    569a:	8831      	ldrh	r1, [r6, #0]
    569c:	2003      	movs	r0, #3
    569e:	4b1c      	ldr	r3, [pc, #112]	; (5710 <usb_serial_configure+0xdc>)
    56a0:	f7ff fd42 	bl	5128 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    56a4:	4623      	mov	r3, r4
    56a6:	2201      	movs	r2, #1
    56a8:	8829      	ldrh	r1, [r5, #0]
    56aa:	2004      	movs	r0, #4
    56ac:	f7ff fd6e 	bl	518c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    56b0:	4620      	mov	r0, r4
    56b2:	3401      	adds	r4, #1
    56b4:	f7ff fe0e 	bl	52d4 <rx_queue_transfer>
    56b8:	2c08      	cmp	r4, #8
    56ba:	d1f9      	bne.n	56b0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    56bc:	4b15      	ldr	r3, [pc, #84]	; (5714 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    56be:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    56c0:	4815      	ldr	r0, [pc, #84]	; (5718 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    56c2:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    56c4:	4c15      	ldr	r4, [pc, #84]	; (571c <usb_serial_configure+0xe8>)
    56c6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    56c8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    56cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    56d0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    56d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    56d8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    56dc:	bd70      	pop	{r4, r5, r6, pc}
    56de:	bf00      	nop
    56e0:	20003df4 	.word	0x20003df4
    56e4:	20002400 	.word	0x20002400
    56e8:	20003de4 	.word	0x20003de4
    56ec:	20003de0 	.word	0x20003de0
    56f0:	20003df0 	.word	0x20003df0
    56f4:	20003de2 	.word	0x20003de2
    56f8:	20002300 	.word	0x20002300
    56fc:	20003d80 	.word	0x20003d80
    5700:	20003d90 	.word	0x20003d90
    5704:	20003deb 	.word	0x20003deb
    5708:	20003d7c 	.word	0x20003d7c
    570c:	20003dec 	.word	0x20003dec
    5710:	00005335 	.word	0x00005335
    5714:	402e0000 	.word	0x402e0000
    5718:	20003dd8 	.word	0x20003dd8
    571c:	000053e9 	.word	0x000053e9

00005720 <usb_serial_read>:
{
    5720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5724:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5728:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    572c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 57f8 <usb_serial_read+0xd8>
{
    5730:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5732:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    5736:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    5738:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    573c:	2900      	cmp	r1, #0
    573e:	d04f      	beq.n	57e0 <usb_serial_read+0xc0>
    5740:	4680      	mov	r8, r0
    5742:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    5744:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    5746:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 57fc <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    574a:	4b26      	ldr	r3, [pc, #152]	; (57e4 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    574c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5750:	4925      	ldr	r1, [pc, #148]	; (57e8 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    5752:	781b      	ldrb	r3, [r3, #0]
    5754:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    5756:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    575a:	d03f      	beq.n	57dc <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    575c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    575e:	4b23      	ldr	r3, [pc, #140]	; (57ec <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5760:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    5762:	bf28      	it	cs
    5764:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    5766:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    5768:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    576c:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    5770:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    5772:	4b1f      	ldr	r3, [pc, #124]	; (57f0 <usb_serial_read+0xd0>)
    5774:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    5778:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    577c:	42aa      	cmp	r2, r5
    577e:	d21c      	bcs.n	57ba <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    5780:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    5784:	4918      	ldr	r1, [pc, #96]	; (57e8 <usb_serial_read+0xc8>)
			rx_available -= len;
    5786:	4c1b      	ldr	r4, [pc, #108]	; (57f4 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    5788:	4461      	add	r1, ip
    578a:	9201      	str	r2, [sp, #4]
    578c:	f7fe fc94 	bl	40b8 <memcpy>
			rx_available -= len;
    5790:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    5792:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    5796:	4658      	mov	r0, fp
			rx_index[i] += len;
    5798:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    579a:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    579e:	442a      	add	r2, r5
			rx_available -= len;
    57a0:	4439      	add	r1, r7
			rx_index[i] += len;
    57a2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    57a6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    57a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    57ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    57b0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    57b4:	b003      	add	sp, #12
    57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    57ba:	462a      	mov	r2, r5
			count += avail;
    57bc:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    57be:	f7fe fc7b 	bl	40b8 <memcpy>
			rx_available -= avail;
    57c2:	490c      	ldr	r1, [pc, #48]	; (57f4 <usb_serial_read+0xd4>)
			rx_tail = tail;
    57c4:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    57c6:	4630      	mov	r0, r6
			rx_available -= avail;
    57c8:	680a      	ldr	r2, [r1, #0]
			p += avail;
    57ca:	44a8      	add	r8, r5
			rx_available -= avail;
    57cc:	1b52      	subs	r2, r2, r5
    57ce:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    57d0:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    57d4:	f7ff fd7e 	bl	52d4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    57d8:	45bb      	cmp	fp, r7
    57da:	d8b6      	bhi.n	574a <usb_serial_read+0x2a>
	return count;
    57dc:	4638      	mov	r0, r7
    57de:	e7e3      	b.n	57a8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    57e0:	4608      	mov	r0, r1
    57e2:	e7e1      	b.n	57a8 <usb_serial_read+0x88>
    57e4:	20003deb 	.word	0x20003deb
    57e8:	20200080 	.word	0x20200080
    57ec:	20003da0 	.word	0x20003da0
    57f0:	20003d80 	.word	0x20003d80
    57f4:	20003d7c 	.word	0x20003d7c
    57f8:	20003dec 	.word	0x20003dec
    57fc:	20003d90 	.word	0x20003d90

00005800 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    5800:	4b0b      	ldr	r3, [pc, #44]	; (5830 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    5802:	4a0c      	ldr	r2, [pc, #48]	; (5834 <usb_serial_peekchar+0x34>)
    5804:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    5806:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    5808:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    580a:	428a      	cmp	r2, r1
    580c:	d00d      	beq.n	582a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    580e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    5810:	4809      	ldr	r0, [pc, #36]	; (5838 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5812:	4a0a      	ldr	r2, [pc, #40]	; (583c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    5814:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5816:	490a      	ldr	r1, [pc, #40]	; (5840 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    5818:	bf28      	it	cs
    581a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    581c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    581e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    5822:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    5826:	5c58      	ldrb	r0, [r3, r1]
    5828:	4770      	bx	lr
	if (tail == rx_head) return -1;
    582a:	f04f 30ff 	mov.w	r0, #4294967295
}
    582e:	4770      	bx	lr
    5830:	20003deb 	.word	0x20003deb
    5834:	20003dec 	.word	0x20003dec
    5838:	20003da0 	.word	0x20003da0
    583c:	20200080 	.word	0x20200080
    5840:	20003d90 	.word	0x20003d90

00005844 <usb_serial_available>:
	uint32_t n = rx_available;
    5844:	4b04      	ldr	r3, [pc, #16]	; (5858 <usb_serial_available+0x14>)
{
    5846:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    5848:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    584a:	b10c      	cbz	r4, 5850 <usb_serial_available+0xc>
}
    584c:	4620      	mov	r0, r4
    584e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    5850:	f000 f8e0 	bl	5a14 <yield>
}
    5854:	4620      	mov	r0, r4
    5856:	bd10      	pop	{r4, pc}
    5858:	20003d7c 	.word	0x20003d7c

0000585c <usb_serial_flush_input>:
{
    585c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    5860:	4e14      	ldr	r6, [pc, #80]	; (58b4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    5862:	4d15      	ldr	r5, [pc, #84]	; (58b8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    5864:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    5866:	782a      	ldrb	r2, [r5, #0]
    5868:	4293      	cmp	r3, r2
    586a:	d021      	beq.n	58b0 <usb_serial_flush_input+0x54>
    586c:	b2dc      	uxtb	r4, r3
    586e:	f8df 9050 	ldr.w	r9, [pc, #80]	; 58c0 <usb_serial_flush_input+0x64>
    5872:	f8df b050 	ldr.w	fp, [pc, #80]	; 58c4 <usb_serial_flush_input+0x68>
    5876:	f8df 8050 	ldr.w	r8, [pc, #80]	; 58c8 <usb_serial_flush_input+0x6c>
    587a:	4f10      	ldr	r7, [pc, #64]	; (58bc <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    587c:	3401      	adds	r4, #1
    587e:	2c08      	cmp	r4, #8
		rx_tail = tail;
    5880:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    5884:	d901      	bls.n	588a <usb_serial_flush_input+0x2e>
    5886:	2400      	movs	r4, #0
    5888:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    588a:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    588e:	f8db 3000 	ldr.w	r3, [fp]
    5892:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    5896:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    589a:	1a52      	subs	r2, r2, r1
    589c:	1a9b      	subs	r3, r3, r2
    589e:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    58a2:	f7ff fd17 	bl	52d4 <rx_queue_transfer>
		rx_tail = tail;
    58a6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    58aa:	782b      	ldrb	r3, [r5, #0]
    58ac:	42a3      	cmp	r3, r4
    58ae:	d1e5      	bne.n	587c <usb_serial_flush_input+0x20>
}
    58b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58b4:	20003dec 	.word	0x20003dec
    58b8:	20003deb 	.word	0x20003deb
    58bc:	20003d90 	.word	0x20003d90
    58c0:	20003da0 	.word	0x20003da0
    58c4:	20003d7c 	.word	0x20003d7c
    58c8:	20003d80 	.word	0x20003d80

000058cc <usb_serial_getchar>:
{
    58cc:	b500      	push	{lr}
    58ce:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    58d0:	2101      	movs	r1, #1
    58d2:	f10d 0007 	add.w	r0, sp, #7
    58d6:	f7ff ff23 	bl	5720 <usb_serial_read>
    58da:	b120      	cbz	r0, 58e6 <usb_serial_getchar+0x1a>
    58dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    58e0:	b003      	add	sp, #12
    58e2:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    58e6:	f04f 30ff 	mov.w	r0, #4294967295
    58ea:	e7f9      	b.n	58e0 <usb_serial_getchar+0x14>

000058ec <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    58ec:	4b09      	ldr	r3, [pc, #36]	; (5914 <usb_serial_putchar+0x28>)
{
    58ee:	b500      	push	{lr}
    58f0:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    58f2:	781b      	ldrb	r3, [r3, #0]
{
    58f4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    58f8:	b13b      	cbz	r3, 590a <usb_serial_putchar+0x1e>
    58fa:	2101      	movs	r1, #1
    58fc:	f10d 0007 	add.w	r0, sp, #7
    5900:	f7ff fdba 	bl	5478 <usb_serial_write.part.0>
}
    5904:	b003      	add	sp, #12
    5906:	f85d fb04 	ldr.w	pc, [sp], #4
    590a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    590e:	b003      	add	sp, #12
    5910:	f85d fb04 	ldr.w	pc, [sp], #4
    5914:	20003df3 	.word	0x20003df3

00005918 <usb_serial_write>:
	if (!usb_configuration) return 0;
    5918:	4b04      	ldr	r3, [pc, #16]	; (592c <usb_serial_write+0x14>)
    591a:	781b      	ldrb	r3, [r3, #0]
    591c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5920:	b10b      	cbz	r3, 5926 <usb_serial_write+0xe>
    5922:	f7ff bda9 	b.w	5478 <usb_serial_write.part.0>
}
    5926:	4610      	mov	r0, r2
    5928:	4770      	bx	lr
    592a:	bf00      	nop
    592c:	20003df3 	.word	0x20003df3

00005930 <usb_serial_write_buffer_free>:
{
    5930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    5934:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    5936:	f8df 8044 	ldr.w	r8, [pc, #68]	; 597c <usb_serial_write_buffer_free+0x4c>
    593a:	2301      	movs	r3, #1
    593c:	4d0d      	ldr	r5, [pc, #52]	; (5974 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    593e:	4627      	mov	r7, r4
    5940:	4e0d      	ldr	r6, [pc, #52]	; (5978 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    5942:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    5946:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5948:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    594a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    594c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    594e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    5952:	d005      	beq.n	5960 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5954:	f7ff fc86 	bl	5264 <usb_transfer_status>
    5958:	0603      	lsls	r3, r0, #24
    595a:	bf58      	it	pl
    595c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    5960:	2c04      	cmp	r4, #4
    5962:	d1f0      	bne.n	5946 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    5964:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    5968:	2300      	movs	r3, #0
}
    596a:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    596c:	f888 3000 	strb.w	r3, [r8]
}
    5970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5974:	20002400 	.word	0x20002400
    5978:	20003df0 	.word	0x20003df0
    597c:	20003df1 	.word	0x20003df1

00005980 <usb_serial_flush_output>:
{
    5980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    5984:	4b1d      	ldr	r3, [pc, #116]	; (59fc <usb_serial_flush_output+0x7c>)
    5986:	781b      	ldrb	r3, [r3, #0]
    5988:	b113      	cbz	r3, 5990 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    598a:	4d1d      	ldr	r5, [pc, #116]	; (5a00 <usb_serial_flush_output+0x80>)
    598c:	882a      	ldrh	r2, [r5, #0]
    598e:	b90a      	cbnz	r2, 5994 <usb_serial_flush_output+0x14>
}
    5990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    5994:	4e1b      	ldr	r6, [pc, #108]	; (5a04 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    5996:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    599a:	491b      	ldr	r1, [pc, #108]	; (5a08 <usb_serial_flush_output+0x88>)
    599c:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    599e:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    59a0:	4c1a      	ldr	r4, [pc, #104]	; (5a0c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    59a2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    59a6:	4f1a      	ldr	r7, [pc, #104]	; (5a10 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    59a8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    59ac:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    59ae:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    59b0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    59b2:	4621      	mov	r1, r4
    59b4:	2300      	movs	r3, #0
    59b6:	f7ff fc1b 	bl	51f0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    59ba:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    59be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    59c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    59c6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    59ca:	3420      	adds	r4, #32
	} while (location < end_addr);
    59cc:	42a2      	cmp	r2, r4
    59ce:	d8fa      	bhi.n	59c6 <usb_serial_flush_output+0x46>
	asm("dsb");
    59d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    59d4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    59d8:	2004      	movs	r0, #4
    59da:	4641      	mov	r1, r8
    59dc:	f7ff fc20 	bl	5220 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    59e0:	7833      	ldrb	r3, [r6, #0]
    59e2:	3301      	adds	r3, #1
    59e4:	b2db      	uxtb	r3, r3
    59e6:	2b03      	cmp	r3, #3
    59e8:	bf88      	it	hi
    59ea:	2300      	movhi	r3, #0
    59ec:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    59ee:	2300      	movs	r3, #0
    59f0:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    59f2:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    59f6:	703b      	strb	r3, [r7, #0]
}
    59f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    59fc:	20003df3 	.word	0x20003df3
    5a00:	20003de2 	.word	0x20003de2
    5a04:	20003df0 	.word	0x20003df0
    5a08:	20002400 	.word	0x20002400
    5a0c:	20201080 	.word	0x20201080
    5a10:	20003df1 	.word	0x20003df1

00005a14 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    5a18:	4e32      	ldr	r6, [pc, #200]	; (5ae4 <yield+0xd0>)
    5a1a:	7833      	ldrb	r3, [r6, #0]
    5a1c:	b163      	cbz	r3, 5a38 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    5a1e:	4f32      	ldr	r7, [pc, #200]	; (5ae8 <yield+0xd4>)
    5a20:	783a      	ldrb	r2, [r7, #0]
    5a22:	b94a      	cbnz	r2, 5a38 <yield+0x24>
	running = 1;
    5a24:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5a26:	07d9      	lsls	r1, r3, #31
	running = 1;
    5a28:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5a2a:	d444      	bmi.n	5ab6 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    5a2c:	079a      	lsls	r2, r3, #30
    5a2e:	d426      	bmi.n	5a7e <yield+0x6a>

	running = 0;
    5a30:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5a32:	075b      	lsls	r3, r3, #29
	running = 0;
    5a34:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5a36:	d401      	bmi.n	5a3c <yield+0x28>
	
};
    5a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    5a3c:	4b2b      	ldr	r3, [pc, #172]	; (5aec <yield+0xd8>)
    5a3e:	681a      	ldr	r2, [r3, #0]
    5a40:	2a00      	cmp	r2, #0
    5a42:	d0f9      	beq.n	5a38 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5a44:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    5a48:	2a00      	cmp	r2, #0
    5a4a:	d1f5      	bne.n	5a38 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5a4c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    5a50:	b672      	cpsid	i
		EventResponder *first = firstYield;
    5a52:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5a54:	2800      	cmp	r0, #0
    5a56:	d03b      	beq.n	5ad0 <yield+0xbc>
		if (runningFromYield) {
    5a58:	4c25      	ldr	r4, [pc, #148]	; (5af0 <yield+0xdc>)
    5a5a:	7821      	ldrb	r1, [r4, #0]
    5a5c:	2900      	cmp	r1, #0
    5a5e:	d137      	bne.n	5ad0 <yield+0xbc>
		runningFromYield = true;
    5a60:	2201      	movs	r2, #1
    5a62:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    5a64:	6942      	ldr	r2, [r0, #20]
    5a66:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    5a68:	2a00      	cmp	r2, #0
    5a6a:	d038      	beq.n	5ade <yield+0xca>
			firstYield->_prev = nullptr;
    5a6c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    5a6e:	b905      	cbnz	r5, 5a72 <yield+0x5e>
    5a70:	b662      	cpsie	i
		first->_triggered = false;
    5a72:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    5a74:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    5a76:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5a78:	4798      	blx	r3
		runningFromYield = false;
    5a7a:	7025      	strb	r5, [r4, #0]
    5a7c:	e7dc      	b.n	5a38 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5a7e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5afc <yield+0xe8>
    5a82:	f898 2000 	ldrb.w	r2, [r8]
    5a86:	2a00      	cmp	r2, #0
    5a88:	d0d2      	beq.n	5a30 <yield+0x1c>
    5a8a:	2500      	movs	r5, #0
    5a8c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5b00 <yield+0xec>
    5a90:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    5a92:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5a96:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    5a98:	6823      	ldr	r3, [r4, #0]
    5a9a:	4620      	mov	r0, r4
    5a9c:	691b      	ldr	r3, [r3, #16]
    5a9e:	4798      	blx	r3
    5aa0:	b110      	cbz	r0, 5aa8 <yield+0x94>
    5aa2:	6963      	ldr	r3, [r4, #20]
    5aa4:	689b      	ldr	r3, [r3, #8]
    5aa6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    5aa8:	f898 2000 	ldrb.w	r2, [r8]
    5aac:	b2eb      	uxtb	r3, r5
    5aae:	429a      	cmp	r2, r3
    5ab0:	d8ef      	bhi.n	5a92 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5ab2:	7833      	ldrb	r3, [r6, #0]
    5ab4:	e7bc      	b.n	5a30 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    5ab6:	f7ff fec5 	bl	5844 <usb_serial_available>
		if (Serial.available()) serialEvent();
    5aba:	b968      	cbnz	r0, 5ad8 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    5abc:	4b0d      	ldr	r3, [pc, #52]	; (5af4 <yield+0xe0>)
    5abe:	781b      	ldrb	r3, [r3, #0]
    5ac0:	b90b      	cbnz	r3, 5ac6 <yield+0xb2>
    5ac2:	7833      	ldrb	r3, [r6, #0]
    5ac4:	e7b2      	b.n	5a2c <yield+0x18>
    5ac6:	7833      	ldrb	r3, [r6, #0]
    5ac8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5acc:	7033      	strb	r3, [r6, #0]
    5ace:	e7ad      	b.n	5a2c <yield+0x18>
		if (doit) __enable_irq();
    5ad0:	2d00      	cmp	r5, #0
    5ad2:	d1b1      	bne.n	5a38 <yield+0x24>
    5ad4:	b662      	cpsie	i
    5ad6:	e7af      	b.n	5a38 <yield+0x24>
		if (Serial.available()) serialEvent();
    5ad8:	f000 f826 	bl	5b28 <serialEvent()>
    5adc:	e7ee      	b.n	5abc <yield+0xa8>
			lastYield = nullptr;
    5ade:	4b06      	ldr	r3, [pc, #24]	; (5af8 <yield+0xe4>)
    5ae0:	601a      	str	r2, [r3, #0]
    5ae2:	e7c4      	b.n	5a6e <yield+0x5a>
    5ae4:	20001de5 	.word	0x20001de5
    5ae8:	20003de8 	.word	0x20003de8
    5aec:	20002f90 	.word	0x20002f90
    5af0:	20003de6 	.word	0x20003de6
    5af4:	600020ea 	.word	0x600020ea
    5af8:	20002f9c 	.word	0x20002f9c
    5afc:	20003de7 	.word	0x20003de7
    5b00:	20002fa0 	.word	0x20002fa0

00005b04 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    5b04:	4a07      	ldr	r2, [pc, #28]	; (5b24 <rtc_get+0x20>)
    5b06:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    5b08:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    5b0a:	4619      	mov	r1, r3
    5b0c:	4684      	mov	ip, r0
    5b0e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    5b10:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    5b12:	4299      	cmp	r1, r3
    5b14:	d1f9      	bne.n	5b0a <rtc_get+0x6>
    5b16:	4584      	cmp	ip, r0
    5b18:	d1f7      	bne.n	5b0a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    5b1a:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    5b1c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    5b20:	4770      	bx	lr
    5b22:	bf00      	nop
    5b24:	400d4000 	.word	0x400d4000

00005b28 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop

00005b2c <sm_align_pool>:
{
    5b2c:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    5b2e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    5b32:	b15b      	cbz	r3, 5b4c <sm_align_pool+0x20>
    5b34:	b1ba      	cbz	r2, 5b66 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    5b36:	4b0f      	ldr	r3, [pc, #60]	; (5b74 <sm_align_pool+0x48>)
    5b38:	fba3 1302 	umull	r1, r3, r3, r2
    5b3c:	08db      	lsrs	r3, r3, #3
    5b3e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5b42:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5b46:	d10a      	bne.n	5b5e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    5b48:	2001      	movs	r0, #1
}
    5b4a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    5b4c:	4b09      	ldr	r3, [pc, #36]	; (5b74 <sm_align_pool+0x48>)
    5b4e:	fba3 1302 	umull	r1, r3, r3, r2
    5b52:	08db      	lsrs	r3, r3, #3
    5b54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    5b58:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5b5c:	d001      	beq.n	5b62 <sm_align_pool+0x36>
    5b5e:	1ad2      	subs	r2, r2, r3
    5b60:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    5b62:	2af0      	cmp	r2, #240	; 0xf0
    5b64:	d8f0      	bhi.n	5b48 <sm_align_pool+0x1c>
		errno = ENOSPC;
    5b66:	f002 fb23 	bl	81b0 <__errno>
    5b6a:	221c      	movs	r2, #28
    5b6c:	4603      	mov	r3, r0
    5b6e:	2000      	movs	r0, #0
    5b70:	601a      	str	r2, [r3, #0]
}
    5b72:	bd08      	pop	{r3, pc}
    5b74:	aaaaaaab 	.word	0xaaaaaaab

00005b78 <sm_set_pool>:
{
    5b78:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    5b7a:	4604      	mov	r4, r0
    5b7c:	b338      	cbz	r0, 5bce <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    5b7e:	b119      	cbz	r1, 5b88 <sm_set_pool+0x10>
    5b80:	fab2 f682 	clz	r6, r2
    5b84:	0976      	lsrs	r6, r6, #5
    5b86:	b9a2      	cbnz	r2, 5bb2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    5b88:	6820      	ldr	r0, [r4, #0]
    5b8a:	b300      	cbz	r0, 5bce <sm_set_pool+0x56>
    5b8c:	6862      	ldr	r2, [r4, #4]
    5b8e:	b1f2      	cbz	r2, 5bce <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    5b90:	4b18      	ldr	r3, [pc, #96]	; (5bf4 <sm_set_pool+0x7c>)
    5b92:	4919      	ldr	r1, [pc, #100]	; (5bf8 <sm_set_pool+0x80>)
    5b94:	fb02 f303 	mul.w	r3, r2, r3
    5b98:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    5b9c:	d317      	bcc.n	5bce <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5b9e:	68a3      	ldr	r3, [r4, #8]
    5ba0:	b9e3      	cbnz	r3, 5bdc <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    5ba2:	2200      	movs	r2, #0
			return 1;
    5ba4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    5ba6:	6022      	str	r2, [r4, #0]
    5ba8:	6062      	str	r2, [r4, #4]
    5baa:	60a2      	str	r2, [r4, #8]
    5bac:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    5bae:	4618      	mov	r0, r3
    5bb0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    5bb2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    5bb4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    5bb6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    5bba:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    5bbc:	f7ff ffb6 	bl	5b2c <sm_align_pool>
    5bc0:	4603      	mov	r3, r0
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d0f3      	beq.n	5bae <sm_set_pool+0x36>
	if (do_zero) {
    5bc6:	b96d      	cbnz	r5, 5be4 <sm_set_pool+0x6c>
	return 1;
    5bc8:	2301      	movs	r3, #1
}
    5bca:	4618      	mov	r0, r3
    5bcc:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    5bce:	f002 faef 	bl	81b0 <__errno>
    5bd2:	2216      	movs	r2, #22
		return 0;
    5bd4:	2300      	movs	r3, #0
		errno = EINVAL;
    5bd6:	6002      	str	r2, [r0, #0]
}
    5bd8:	4618      	mov	r0, r3
    5bda:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    5bdc:	2100      	movs	r1, #0
    5bde:	f001 ff37 	bl	7a50 <memset>
    5be2:	e7de      	b.n	5ba2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    5be4:	6862      	ldr	r2, [r4, #4]
    5be6:	4631      	mov	r1, r6
    5be8:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    5bea:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    5bec:	f001 ff30 	bl	7a50 <memset>
	return 1;
    5bf0:	2301      	movs	r3, #1
    5bf2:	e7dc      	b.n	5bae <sm_set_pool+0x36>
    5bf4:	aaaaaaab 	.word	0xaaaaaaab
    5bf8:	15555555 	.word	0x15555555

00005bfc <__aeabi_atexit>:
    5bfc:	4603      	mov	r3, r0
    5bfe:	4608      	mov	r0, r1
    5c00:	4619      	mov	r1, r3
    5c02:	f001 bd69 	b.w	76d8 <__cxa_atexit>
    5c06:	bf00      	nop

00005c08 <atol>:
    5c08:	220a      	movs	r2, #10
    5c0a:	2100      	movs	r1, #0
    5c0c:	f001 bd08 	b.w	7620 <strtol>

00005c10 <itoa>:
    5c10:	1e93      	subs	r3, r2, #2
    5c12:	2b22      	cmp	r3, #34	; 0x22
    5c14:	b510      	push	{r4, lr}
    5c16:	460c      	mov	r4, r1
    5c18:	d80c      	bhi.n	5c34 <itoa+0x24>
    5c1a:	2a0a      	cmp	r2, #10
    5c1c:	d003      	beq.n	5c26 <itoa+0x16>
    5c1e:	f001 fd0d 	bl	763c <__utoa>
    5c22:	4620      	mov	r0, r4
    5c24:	bd10      	pop	{r4, pc}
    5c26:	2800      	cmp	r0, #0
    5c28:	daf9      	bge.n	5c1e <itoa+0xe>
    5c2a:	232d      	movs	r3, #45	; 0x2d
    5c2c:	f801 3b01 	strb.w	r3, [r1], #1
    5c30:	4240      	negs	r0, r0
    5c32:	e7f4      	b.n	5c1e <itoa+0xe>
    5c34:	2300      	movs	r3, #0
    5c36:	700b      	strb	r3, [r1, #0]
    5c38:	4618      	mov	r0, r3
    5c3a:	bd10      	pop	{r4, pc}

00005c3c <malloc>:
    5c3c:	4b02      	ldr	r3, [pc, #8]	; (5c48 <malloc+0xc>)
    5c3e:	4601      	mov	r1, r0
    5c40:	6818      	ldr	r0, [r3, #0]
    5c42:	f000 b80b 	b.w	5c5c <_malloc_r>
    5c46:	bf00      	nop
    5c48:	20001b68 	.word	0x20001b68

00005c4c <free>:
    5c4c:	4b02      	ldr	r3, [pc, #8]	; (5c58 <free+0xc>)
    5c4e:	4601      	mov	r1, r0
    5c50:	6818      	ldr	r0, [r3, #0]
    5c52:	f002 bdc7 	b.w	87e4 <_free_r>
    5c56:	bf00      	nop
    5c58:	20001b68 	.word	0x20001b68

00005c5c <_malloc_r>:
    5c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c60:	f101 060b 	add.w	r6, r1, #11
    5c64:	2e16      	cmp	r6, #22
    5c66:	b083      	sub	sp, #12
    5c68:	4604      	mov	r4, r0
    5c6a:	d824      	bhi.n	5cb6 <_malloc_r+0x5a>
    5c6c:	2910      	cmp	r1, #16
    5c6e:	f200 80ba 	bhi.w	5de6 <_malloc_r+0x18a>
    5c72:	f000 faa3 	bl	61bc <__malloc_lock>
    5c76:	2610      	movs	r6, #16
    5c78:	2218      	movs	r2, #24
    5c7a:	2002      	movs	r0, #2
    5c7c:	4fb5      	ldr	r7, [pc, #724]	; (5f54 <_malloc_r+0x2f8>)
    5c7e:	443a      	add	r2, r7
    5c80:	f1a2 0108 	sub.w	r1, r2, #8
    5c84:	6853      	ldr	r3, [r2, #4]
    5c86:	428b      	cmp	r3, r1
    5c88:	f000 80ba 	beq.w	5e00 <_malloc_r+0x1a4>
    5c8c:	685a      	ldr	r2, [r3, #4]
    5c8e:	68d9      	ldr	r1, [r3, #12]
    5c90:	f022 0203 	bic.w	r2, r2, #3
    5c94:	441a      	add	r2, r3
    5c96:	689d      	ldr	r5, [r3, #8]
    5c98:	60e9      	str	r1, [r5, #12]
    5c9a:	608d      	str	r5, [r1, #8]
    5c9c:	6851      	ldr	r1, [r2, #4]
    5c9e:	f041 0101 	orr.w	r1, r1, #1
    5ca2:	4620      	mov	r0, r4
    5ca4:	6051      	str	r1, [r2, #4]
    5ca6:	f103 0508 	add.w	r5, r3, #8
    5caa:	f000 fa8d 	bl	61c8 <__malloc_unlock>
    5cae:	4628      	mov	r0, r5
    5cb0:	b003      	add	sp, #12
    5cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5cb6:	f036 0607 	bics.w	r6, r6, #7
    5cba:	f100 8094 	bmi.w	5de6 <_malloc_r+0x18a>
    5cbe:	42b1      	cmp	r1, r6
    5cc0:	f200 8091 	bhi.w	5de6 <_malloc_r+0x18a>
    5cc4:	f000 fa7a 	bl	61bc <__malloc_lock>
    5cc8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    5ccc:	f0c0 819a 	bcc.w	6004 <_malloc_r+0x3a8>
    5cd0:	0a73      	lsrs	r3, r6, #9
    5cd2:	f000 808f 	beq.w	5df4 <_malloc_r+0x198>
    5cd6:	2b04      	cmp	r3, #4
    5cd8:	f200 816f 	bhi.w	5fba <_malloc_r+0x35e>
    5cdc:	09b3      	lsrs	r3, r6, #6
    5cde:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5ce2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    5ce6:	00c3      	lsls	r3, r0, #3
    5ce8:	4f9a      	ldr	r7, [pc, #616]	; (5f54 <_malloc_r+0x2f8>)
    5cea:	443b      	add	r3, r7
    5cec:	f1a3 0508 	sub.w	r5, r3, #8
    5cf0:	685b      	ldr	r3, [r3, #4]
    5cf2:	429d      	cmp	r5, r3
    5cf4:	d106      	bne.n	5d04 <_malloc_r+0xa8>
    5cf6:	e00c      	b.n	5d12 <_malloc_r+0xb6>
    5cf8:	2900      	cmp	r1, #0
    5cfa:	f280 8127 	bge.w	5f4c <_malloc_r+0x2f0>
    5cfe:	68db      	ldr	r3, [r3, #12]
    5d00:	429d      	cmp	r5, r3
    5d02:	d006      	beq.n	5d12 <_malloc_r+0xb6>
    5d04:	685a      	ldr	r2, [r3, #4]
    5d06:	f022 0203 	bic.w	r2, r2, #3
    5d0a:	1b91      	subs	r1, r2, r6
    5d0c:	290f      	cmp	r1, #15
    5d0e:	ddf3      	ble.n	5cf8 <_malloc_r+0x9c>
    5d10:	4660      	mov	r0, ip
    5d12:	693d      	ldr	r5, [r7, #16]
    5d14:	f8df c250 	ldr.w	ip, [pc, #592]	; 5f68 <_malloc_r+0x30c>
    5d18:	4565      	cmp	r5, ip
    5d1a:	d07c      	beq.n	5e16 <_malloc_r+0x1ba>
    5d1c:	686a      	ldr	r2, [r5, #4]
    5d1e:	f022 0203 	bic.w	r2, r2, #3
    5d22:	1b93      	subs	r3, r2, r6
    5d24:	2b0f      	cmp	r3, #15
    5d26:	f300 817b 	bgt.w	6020 <_malloc_r+0x3c4>
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    5d30:	f280 816c 	bge.w	600c <_malloc_r+0x3b0>
    5d34:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5d38:	f080 811a 	bcs.w	5f70 <_malloc_r+0x314>
    5d3c:	08d3      	lsrs	r3, r2, #3
    5d3e:	6879      	ldr	r1, [r7, #4]
    5d40:	3301      	adds	r3, #1
    5d42:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    5d46:	2201      	movs	r2, #1
    5d48:	fa02 f20e 	lsl.w	r2, r2, lr
    5d4c:	430a      	orrs	r2, r1
    5d4e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    5d52:	f8c5 e008 	str.w	lr, [r5, #8]
    5d56:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    5d5a:	3908      	subs	r1, #8
    5d5c:	60e9      	str	r1, [r5, #12]
    5d5e:	607a      	str	r2, [r7, #4]
    5d60:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    5d64:	f8ce 500c 	str.w	r5, [lr, #12]
    5d68:	1083      	asrs	r3, r0, #2
    5d6a:	2101      	movs	r1, #1
    5d6c:	4099      	lsls	r1, r3
    5d6e:	4291      	cmp	r1, r2
    5d70:	d857      	bhi.n	5e22 <_malloc_r+0x1c6>
    5d72:	4211      	tst	r1, r2
    5d74:	d106      	bne.n	5d84 <_malloc_r+0x128>
    5d76:	f020 0003 	bic.w	r0, r0, #3
    5d7a:	0049      	lsls	r1, r1, #1
    5d7c:	4211      	tst	r1, r2
    5d7e:	f100 0004 	add.w	r0, r0, #4
    5d82:	d0fa      	beq.n	5d7a <_malloc_r+0x11e>
    5d84:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    5d88:	464d      	mov	r5, r9
    5d8a:	4686      	mov	lr, r0
    5d8c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5d90:	4545      	cmp	r5, r8
    5d92:	d108      	bne.n	5da6 <_malloc_r+0x14a>
    5d94:	e11d      	b.n	5fd2 <_malloc_r+0x376>
    5d96:	2b00      	cmp	r3, #0
    5d98:	f280 8124 	bge.w	5fe4 <_malloc_r+0x388>
    5d9c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    5da0:	4545      	cmp	r5, r8
    5da2:	f000 8116 	beq.w	5fd2 <_malloc_r+0x376>
    5da6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5daa:	f022 0203 	bic.w	r2, r2, #3
    5dae:	1b93      	subs	r3, r2, r6
    5db0:	2b0f      	cmp	r3, #15
    5db2:	ddf0      	ble.n	5d96 <_malloc_r+0x13a>
    5db4:	4620      	mov	r0, r4
    5db6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    5dba:	eb08 0106 	add.w	r1, r8, r6
    5dbe:	f046 0601 	orr.w	r6, r6, #1
    5dc2:	f8c8 6004 	str.w	r6, [r8, #4]
    5dc6:	60ec      	str	r4, [r5, #12]
    5dc8:	60a5      	str	r5, [r4, #8]
    5dca:	f043 0401 	orr.w	r4, r3, #1
    5dce:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5dd2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5dd6:	604c      	str	r4, [r1, #4]
    5dd8:	f848 3002 	str.w	r3, [r8, r2]
    5ddc:	f000 f9f4 	bl	61c8 <__malloc_unlock>
    5de0:	f108 0508 	add.w	r5, r8, #8
    5de4:	e002      	b.n	5dec <_malloc_r+0x190>
    5de6:	230c      	movs	r3, #12
    5de8:	6023      	str	r3, [r4, #0]
    5dea:	2500      	movs	r5, #0
    5dec:	4628      	mov	r0, r5
    5dee:	b003      	add	sp, #12
    5df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5df4:	f44f 7300 	mov.w	r3, #512	; 0x200
    5df8:	2040      	movs	r0, #64	; 0x40
    5dfa:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    5dfe:	e773      	b.n	5ce8 <_malloc_r+0x8c>
    5e00:	68d3      	ldr	r3, [r2, #12]
    5e02:	429a      	cmp	r2, r3
    5e04:	bf08      	it	eq
    5e06:	3002      	addeq	r0, #2
    5e08:	f47f af40 	bne.w	5c8c <_malloc_r+0x30>
    5e0c:	693d      	ldr	r5, [r7, #16]
    5e0e:	f8df c158 	ldr.w	ip, [pc, #344]	; 5f68 <_malloc_r+0x30c>
    5e12:	4565      	cmp	r5, ip
    5e14:	d182      	bne.n	5d1c <_malloc_r+0xc0>
    5e16:	687a      	ldr	r2, [r7, #4]
    5e18:	1083      	asrs	r3, r0, #2
    5e1a:	2101      	movs	r1, #1
    5e1c:	4099      	lsls	r1, r3
    5e1e:	4291      	cmp	r1, r2
    5e20:	d9a7      	bls.n	5d72 <_malloc_r+0x116>
    5e22:	68bd      	ldr	r5, [r7, #8]
    5e24:	686b      	ldr	r3, [r5, #4]
    5e26:	f023 0903 	bic.w	r9, r3, #3
    5e2a:	454e      	cmp	r6, r9
    5e2c:	d803      	bhi.n	5e36 <_malloc_r+0x1da>
    5e2e:	eba9 0306 	sub.w	r3, r9, r6
    5e32:	2b0f      	cmp	r3, #15
    5e34:	dc7a      	bgt.n	5f2c <_malloc_r+0x2d0>
    5e36:	f8df b134 	ldr.w	fp, [pc, #308]	; 5f6c <_malloc_r+0x310>
    5e3a:	4b47      	ldr	r3, [pc, #284]	; (5f58 <_malloc_r+0x2fc>)
    5e3c:	f8db 2000 	ldr.w	r2, [fp]
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	3201      	adds	r2, #1
    5e44:	4433      	add	r3, r6
    5e46:	eb05 0a09 	add.w	sl, r5, r9
    5e4a:	f000 8133 	beq.w	60b4 <_malloc_r+0x458>
    5e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5e52:	330f      	adds	r3, #15
    5e54:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    5e58:	f028 080f 	bic.w	r8, r8, #15
    5e5c:	4641      	mov	r1, r8
    5e5e:	4620      	mov	r0, r4
    5e60:	f002 f97e 	bl	8160 <_sbrk_r>
    5e64:	1c41      	adds	r1, r0, #1
    5e66:	4602      	mov	r2, r0
    5e68:	f000 80f3 	beq.w	6052 <_malloc_r+0x3f6>
    5e6c:	4582      	cmp	sl, r0
    5e6e:	f200 80ee 	bhi.w	604e <_malloc_r+0x3f2>
    5e72:	4b3a      	ldr	r3, [pc, #232]	; (5f5c <_malloc_r+0x300>)
    5e74:	6819      	ldr	r1, [r3, #0]
    5e76:	4441      	add	r1, r8
    5e78:	6019      	str	r1, [r3, #0]
    5e7a:	4608      	mov	r0, r1
    5e7c:	f000 814e 	beq.w	611c <_malloc_r+0x4c0>
    5e80:	f8db 1000 	ldr.w	r1, [fp]
    5e84:	9301      	str	r3, [sp, #4]
    5e86:	3101      	adds	r1, #1
    5e88:	bf1b      	ittet	ne
    5e8a:	eba2 010a 	subne.w	r1, r2, sl
    5e8e:	1809      	addne	r1, r1, r0
    5e90:	f8cb 2000 	streq.w	r2, [fp]
    5e94:	6019      	strne	r1, [r3, #0]
    5e96:	f012 0b07 	ands.w	fp, r2, #7
    5e9a:	f000 8117 	beq.w	60cc <_malloc_r+0x470>
    5e9e:	f1cb 0108 	rsb	r1, fp, #8
    5ea2:	440a      	add	r2, r1
    5ea4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    5ea8:	4490      	add	r8, r2
    5eaa:	3108      	adds	r1, #8
    5eac:	eba1 0108 	sub.w	r1, r1, r8
    5eb0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5eb4:	4651      	mov	r1, sl
    5eb6:	4620      	mov	r0, r4
    5eb8:	9200      	str	r2, [sp, #0]
    5eba:	f002 f951 	bl	8160 <_sbrk_r>
    5ebe:	1c42      	adds	r2, r0, #1
    5ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
    5ec4:	f000 814f 	beq.w	6166 <_malloc_r+0x50a>
    5ec8:	1a80      	subs	r0, r0, r2
    5eca:	eb00 080a 	add.w	r8, r0, sl
    5ece:	6819      	ldr	r1, [r3, #0]
    5ed0:	60ba      	str	r2, [r7, #8]
    5ed2:	f048 0001 	orr.w	r0, r8, #1
    5ed6:	4451      	add	r1, sl
    5ed8:	42bd      	cmp	r5, r7
    5eda:	6050      	str	r0, [r2, #4]
    5edc:	6019      	str	r1, [r3, #0]
    5ede:	f000 8129 	beq.w	6134 <_malloc_r+0x4d8>
    5ee2:	f1b9 0f0f 	cmp.w	r9, #15
    5ee6:	f240 8127 	bls.w	6138 <_malloc_r+0x4dc>
    5eea:	6868      	ldr	r0, [r5, #4]
    5eec:	f1a9 0c0c 	sub.w	ip, r9, #12
    5ef0:	f02c 0c07 	bic.w	ip, ip, #7
    5ef4:	f000 0001 	and.w	r0, r0, #1
    5ef8:	ea40 000c 	orr.w	r0, r0, ip
    5efc:	6068      	str	r0, [r5, #4]
    5efe:	f04f 0e05 	mov.w	lr, #5
    5f02:	eb05 000c 	add.w	r0, r5, ip
    5f06:	f1bc 0f0f 	cmp.w	ip, #15
    5f0a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    5f0e:	f200 8132 	bhi.w	6176 <_malloc_r+0x51a>
    5f12:	6850      	ldr	r0, [r2, #4]
    5f14:	4615      	mov	r5, r2
    5f16:	4b12      	ldr	r3, [pc, #72]	; (5f60 <_malloc_r+0x304>)
    5f18:	681a      	ldr	r2, [r3, #0]
    5f1a:	428a      	cmp	r2, r1
    5f1c:	bf38      	it	cc
    5f1e:	6019      	strcc	r1, [r3, #0]
    5f20:	4b10      	ldr	r3, [pc, #64]	; (5f64 <_malloc_r+0x308>)
    5f22:	681a      	ldr	r2, [r3, #0]
    5f24:	428a      	cmp	r2, r1
    5f26:	bf38      	it	cc
    5f28:	6019      	strcc	r1, [r3, #0]
    5f2a:	e094      	b.n	6056 <_malloc_r+0x3fa>
    5f2c:	19aa      	adds	r2, r5, r6
    5f2e:	f043 0301 	orr.w	r3, r3, #1
    5f32:	f046 0601 	orr.w	r6, r6, #1
    5f36:	606e      	str	r6, [r5, #4]
    5f38:	4620      	mov	r0, r4
    5f3a:	60ba      	str	r2, [r7, #8]
    5f3c:	6053      	str	r3, [r2, #4]
    5f3e:	f000 f943 	bl	61c8 <__malloc_unlock>
    5f42:	3508      	adds	r5, #8
    5f44:	4628      	mov	r0, r5
    5f46:	b003      	add	sp, #12
    5f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f4c:	68d9      	ldr	r1, [r3, #12]
    5f4e:	441a      	add	r2, r3
    5f50:	e6a1      	b.n	5c96 <_malloc_r+0x3a>
    5f52:	bf00      	nop
    5f54:	2000174c 	.word	0x2000174c
    5f58:	20003190 	.word	0x20003190
    5f5c:	20003160 	.word	0x20003160
    5f60:	20003188 	.word	0x20003188
    5f64:	2000318c 	.word	0x2000318c
    5f68:	20001754 	.word	0x20001754
    5f6c:	20001b54 	.word	0x20001b54
    5f70:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    5f74:	ea4f 2352 	mov.w	r3, r2, lsr #9
    5f78:	d363      	bcc.n	6042 <_malloc_r+0x3e6>
    5f7a:	2b14      	cmp	r3, #20
    5f7c:	f200 80b7 	bhi.w	60ee <_malloc_r+0x492>
    5f80:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5f84:	00c9      	lsls	r1, r1, #3
    5f86:	335b      	adds	r3, #91	; 0x5b
    5f88:	eb07 0e01 	add.w	lr, r7, r1
    5f8c:	5879      	ldr	r1, [r7, r1]
    5f8e:	f1ae 0e08 	sub.w	lr, lr, #8
    5f92:	458e      	cmp	lr, r1
    5f94:	f000 8091 	beq.w	60ba <_malloc_r+0x45e>
    5f98:	684b      	ldr	r3, [r1, #4]
    5f9a:	f023 0303 	bic.w	r3, r3, #3
    5f9e:	4293      	cmp	r3, r2
    5fa0:	d902      	bls.n	5fa8 <_malloc_r+0x34c>
    5fa2:	6889      	ldr	r1, [r1, #8]
    5fa4:	458e      	cmp	lr, r1
    5fa6:	d1f7      	bne.n	5f98 <_malloc_r+0x33c>
    5fa8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    5fac:	687a      	ldr	r2, [r7, #4]
    5fae:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    5fb2:	f8ce 5008 	str.w	r5, [lr, #8]
    5fb6:	60cd      	str	r5, [r1, #12]
    5fb8:	e6d6      	b.n	5d68 <_malloc_r+0x10c>
    5fba:	2b14      	cmp	r3, #20
    5fbc:	d959      	bls.n	6072 <_malloc_r+0x416>
    5fbe:	2b54      	cmp	r3, #84	; 0x54
    5fc0:	f200 809d 	bhi.w	60fe <_malloc_r+0x4a2>
    5fc4:	0b33      	lsrs	r3, r6, #12
    5fc6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5fca:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    5fce:	00c3      	lsls	r3, r0, #3
    5fd0:	e68a      	b.n	5ce8 <_malloc_r+0x8c>
    5fd2:	f10e 0e01 	add.w	lr, lr, #1
    5fd6:	f01e 0f03 	tst.w	lr, #3
    5fda:	f105 0508 	add.w	r5, r5, #8
    5fde:	f47f aed5 	bne.w	5d8c <_malloc_r+0x130>
    5fe2:	e051      	b.n	6088 <_malloc_r+0x42c>
    5fe4:	4442      	add	r2, r8
    5fe6:	4645      	mov	r5, r8
    5fe8:	6853      	ldr	r3, [r2, #4]
    5fea:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5fee:	f043 0301 	orr.w	r3, r3, #1
    5ff2:	6053      	str	r3, [r2, #4]
    5ff4:	f855 3f08 	ldr.w	r3, [r5, #8]!
    5ff8:	4620      	mov	r0, r4
    5ffa:	60d9      	str	r1, [r3, #12]
    5ffc:	608b      	str	r3, [r1, #8]
    5ffe:	f000 f8e3 	bl	61c8 <__malloc_unlock>
    6002:	e6f3      	b.n	5dec <_malloc_r+0x190>
    6004:	08f0      	lsrs	r0, r6, #3
    6006:	f106 0208 	add.w	r2, r6, #8
    600a:	e637      	b.n	5c7c <_malloc_r+0x20>
    600c:	442a      	add	r2, r5
    600e:	4620      	mov	r0, r4
    6010:	6853      	ldr	r3, [r2, #4]
    6012:	f043 0301 	orr.w	r3, r3, #1
    6016:	6053      	str	r3, [r2, #4]
    6018:	3508      	adds	r5, #8
    601a:	f000 f8d5 	bl	61c8 <__malloc_unlock>
    601e:	e6e5      	b.n	5dec <_malloc_r+0x190>
    6020:	19a9      	adds	r1, r5, r6
    6022:	4620      	mov	r0, r4
    6024:	f046 0601 	orr.w	r6, r6, #1
    6028:	f043 0401 	orr.w	r4, r3, #1
    602c:	606e      	str	r6, [r5, #4]
    602e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    6032:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    6036:	604c      	str	r4, [r1, #4]
    6038:	50ab      	str	r3, [r5, r2]
    603a:	f000 f8c5 	bl	61c8 <__malloc_unlock>
    603e:	3508      	adds	r5, #8
    6040:	e6d4      	b.n	5dec <_malloc_r+0x190>
    6042:	0993      	lsrs	r3, r2, #6
    6044:	f103 0139 	add.w	r1, r3, #57	; 0x39
    6048:	00c9      	lsls	r1, r1, #3
    604a:	3338      	adds	r3, #56	; 0x38
    604c:	e79c      	b.n	5f88 <_malloc_r+0x32c>
    604e:	42bd      	cmp	r5, r7
    6050:	d05f      	beq.n	6112 <_malloc_r+0x4b6>
    6052:	68bd      	ldr	r5, [r7, #8]
    6054:	6868      	ldr	r0, [r5, #4]
    6056:	f020 0803 	bic.w	r8, r0, #3
    605a:	4546      	cmp	r6, r8
    605c:	eba8 0306 	sub.w	r3, r8, r6
    6060:	d802      	bhi.n	6068 <_malloc_r+0x40c>
    6062:	2b0f      	cmp	r3, #15
    6064:	f73f af62 	bgt.w	5f2c <_malloc_r+0x2d0>
    6068:	4620      	mov	r0, r4
    606a:	f000 f8ad 	bl	61c8 <__malloc_unlock>
    606e:	2500      	movs	r5, #0
    6070:	e6bc      	b.n	5dec <_malloc_r+0x190>
    6072:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    6076:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    607a:	00c3      	lsls	r3, r0, #3
    607c:	e634      	b.n	5ce8 <_malloc_r+0x8c>
    607e:	f859 3908 	ldr.w	r3, [r9], #-8
    6082:	454b      	cmp	r3, r9
    6084:	f040 8096 	bne.w	61b4 <_malloc_r+0x558>
    6088:	f010 0f03 	tst.w	r0, #3
    608c:	f100 30ff 	add.w	r0, r0, #4294967295
    6090:	d1f5      	bne.n	607e <_malloc_r+0x422>
    6092:	687b      	ldr	r3, [r7, #4]
    6094:	ea23 0301 	bic.w	r3, r3, r1
    6098:	607b      	str	r3, [r7, #4]
    609a:	0049      	lsls	r1, r1, #1
    609c:	4299      	cmp	r1, r3
    609e:	f63f aec0 	bhi.w	5e22 <_malloc_r+0x1c6>
    60a2:	b919      	cbnz	r1, 60ac <_malloc_r+0x450>
    60a4:	e6bd      	b.n	5e22 <_malloc_r+0x1c6>
    60a6:	0049      	lsls	r1, r1, #1
    60a8:	f10e 0e04 	add.w	lr, lr, #4
    60ac:	4219      	tst	r1, r3
    60ae:	d0fa      	beq.n	60a6 <_malloc_r+0x44a>
    60b0:	4670      	mov	r0, lr
    60b2:	e667      	b.n	5d84 <_malloc_r+0x128>
    60b4:	f103 0810 	add.w	r8, r3, #16
    60b8:	e6d0      	b.n	5e5c <_malloc_r+0x200>
    60ba:	109a      	asrs	r2, r3, #2
    60bc:	f04f 0801 	mov.w	r8, #1
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	fa08 f202 	lsl.w	r2, r8, r2
    60c6:	431a      	orrs	r2, r3
    60c8:	607a      	str	r2, [r7, #4]
    60ca:	e770      	b.n	5fae <_malloc_r+0x352>
    60cc:	eb02 0108 	add.w	r1, r2, r8
    60d0:	4249      	negs	r1, r1
    60d2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    60d6:	4651      	mov	r1, sl
    60d8:	4620      	mov	r0, r4
    60da:	9200      	str	r2, [sp, #0]
    60dc:	f002 f840 	bl	8160 <_sbrk_r>
    60e0:	1c43      	adds	r3, r0, #1
    60e2:	e9dd 2300 	ldrd	r2, r3, [sp]
    60e6:	f47f aeef 	bne.w	5ec8 <_malloc_r+0x26c>
    60ea:	46da      	mov	sl, fp
    60ec:	e6ef      	b.n	5ece <_malloc_r+0x272>
    60ee:	2b54      	cmp	r3, #84	; 0x54
    60f0:	d825      	bhi.n	613e <_malloc_r+0x4e2>
    60f2:	0b13      	lsrs	r3, r2, #12
    60f4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    60f8:	00c9      	lsls	r1, r1, #3
    60fa:	336e      	adds	r3, #110	; 0x6e
    60fc:	e744      	b.n	5f88 <_malloc_r+0x32c>
    60fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6102:	d825      	bhi.n	6150 <_malloc_r+0x4f4>
    6104:	0bf3      	lsrs	r3, r6, #15
    6106:	f103 0078 	add.w	r0, r3, #120	; 0x78
    610a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    610e:	00c3      	lsls	r3, r0, #3
    6110:	e5ea      	b.n	5ce8 <_malloc_r+0x8c>
    6112:	4b29      	ldr	r3, [pc, #164]	; (61b8 <_malloc_r+0x55c>)
    6114:	6818      	ldr	r0, [r3, #0]
    6116:	4440      	add	r0, r8
    6118:	6018      	str	r0, [r3, #0]
    611a:	e6b1      	b.n	5e80 <_malloc_r+0x224>
    611c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    6120:	f1bc 0f00 	cmp.w	ip, #0
    6124:	f47f aeac 	bne.w	5e80 <_malloc_r+0x224>
    6128:	68bd      	ldr	r5, [r7, #8]
    612a:	44c8      	add	r8, r9
    612c:	f048 0001 	orr.w	r0, r8, #1
    6130:	6068      	str	r0, [r5, #4]
    6132:	e6f0      	b.n	5f16 <_malloc_r+0x2ba>
    6134:	4615      	mov	r5, r2
    6136:	e6ee      	b.n	5f16 <_malloc_r+0x2ba>
    6138:	2301      	movs	r3, #1
    613a:	6053      	str	r3, [r2, #4]
    613c:	e794      	b.n	6068 <_malloc_r+0x40c>
    613e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    6142:	d823      	bhi.n	618c <_malloc_r+0x530>
    6144:	0bd3      	lsrs	r3, r2, #15
    6146:	f103 0178 	add.w	r1, r3, #120	; 0x78
    614a:	00c9      	lsls	r1, r1, #3
    614c:	3377      	adds	r3, #119	; 0x77
    614e:	e71b      	b.n	5f88 <_malloc_r+0x32c>
    6150:	f240 5254 	movw	r2, #1364	; 0x554
    6154:	4293      	cmp	r3, r2
    6156:	d823      	bhi.n	61a0 <_malloc_r+0x544>
    6158:	0cb3      	lsrs	r3, r6, #18
    615a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    615e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    6162:	00c3      	lsls	r3, r0, #3
    6164:	e5c0      	b.n	5ce8 <_malloc_r+0x8c>
    6166:	f1ab 0b08 	sub.w	fp, fp, #8
    616a:	44d8      	add	r8, fp
    616c:	eba8 0802 	sub.w	r8, r8, r2
    6170:	f04f 0a00 	mov.w	sl, #0
    6174:	e6ab      	b.n	5ece <_malloc_r+0x272>
    6176:	f105 0108 	add.w	r1, r5, #8
    617a:	4620      	mov	r0, r4
    617c:	9300      	str	r3, [sp, #0]
    617e:	f002 fb31 	bl	87e4 <_free_r>
    6182:	68bd      	ldr	r5, [r7, #8]
    6184:	9b00      	ldr	r3, [sp, #0]
    6186:	6868      	ldr	r0, [r5, #4]
    6188:	6819      	ldr	r1, [r3, #0]
    618a:	e6c4      	b.n	5f16 <_malloc_r+0x2ba>
    618c:	f240 5154 	movw	r1, #1364	; 0x554
    6190:	428b      	cmp	r3, r1
    6192:	d80b      	bhi.n	61ac <_malloc_r+0x550>
    6194:	0c93      	lsrs	r3, r2, #18
    6196:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    619a:	00c9      	lsls	r1, r1, #3
    619c:	337c      	adds	r3, #124	; 0x7c
    619e:	e6f3      	b.n	5f88 <_malloc_r+0x32c>
    61a0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    61a4:	207f      	movs	r0, #127	; 0x7f
    61a6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    61aa:	e59d      	b.n	5ce8 <_malloc_r+0x8c>
    61ac:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    61b0:	237e      	movs	r3, #126	; 0x7e
    61b2:	e6e9      	b.n	5f88 <_malloc_r+0x32c>
    61b4:	687b      	ldr	r3, [r7, #4]
    61b6:	e770      	b.n	609a <_malloc_r+0x43e>
    61b8:	20003160 	.word	0x20003160

000061bc <__malloc_lock>:
    61bc:	4801      	ldr	r0, [pc, #4]	; (61c4 <__malloc_lock+0x8>)
    61be:	f002 b825 	b.w	820c <__retarget_lock_acquire_recursive>
    61c2:	bf00      	nop
    61c4:	20003158 	.word	0x20003158

000061c8 <__malloc_unlock>:
    61c8:	4801      	ldr	r0, [pc, #4]	; (61d0 <__malloc_unlock+0x8>)
    61ca:	f002 b821 	b.w	8210 <__retarget_lock_release_recursive>
    61ce:	bf00      	nop
    61d0:	20003158 	.word	0x20003158

000061d4 <realloc>:
    61d4:	b410      	push	{r4}
    61d6:	4c04      	ldr	r4, [pc, #16]	; (61e8 <realloc+0x14>)
    61d8:	4603      	mov	r3, r0
    61da:	460a      	mov	r2, r1
    61dc:	6820      	ldr	r0, [r4, #0]
    61de:	f85d 4b04 	ldr.w	r4, [sp], #4
    61e2:	4619      	mov	r1, r3
    61e4:	f000 b802 	b.w	61ec <_realloc_r>
    61e8:	20001b68 	.word	0x20001b68

000061ec <_realloc_r>:
    61ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61f0:	4617      	mov	r7, r2
    61f2:	2900      	cmp	r1, #0
    61f4:	f000 8098 	beq.w	6328 <_realloc_r+0x13c>
    61f8:	460c      	mov	r4, r1
    61fa:	f107 050b 	add.w	r5, r7, #11
    61fe:	4680      	mov	r8, r0
    6200:	f7ff ffdc 	bl	61bc <__malloc_lock>
    6204:	2d16      	cmp	r5, #22
    6206:	f854 1c04 	ldr.w	r1, [r4, #-4]
    620a:	d85b      	bhi.n	62c4 <_realloc_r+0xd8>
    620c:	2510      	movs	r5, #16
    620e:	462a      	mov	r2, r5
    6210:	42af      	cmp	r7, r5
    6212:	d85c      	bhi.n	62ce <_realloc_r+0xe2>
    6214:	f021 0603 	bic.w	r6, r1, #3
    6218:	4296      	cmp	r6, r2
    621a:	f1a4 0908 	sub.w	r9, r4, #8
    621e:	da62      	bge.n	62e6 <_realloc_r+0xfa>
    6220:	4bbc      	ldr	r3, [pc, #752]	; (6514 <_realloc_r+0x328>)
    6222:	f8d3 c008 	ldr.w	ip, [r3, #8]
    6226:	eb09 0006 	add.w	r0, r9, r6
    622a:	4584      	cmp	ip, r0
    622c:	f000 8097 	beq.w	635e <_realloc_r+0x172>
    6230:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6234:	f02c 0301 	bic.w	r3, ip, #1
    6238:	4403      	add	r3, r0
    623a:	685b      	ldr	r3, [r3, #4]
    623c:	07db      	lsls	r3, r3, #31
    623e:	d468      	bmi.n	6312 <_realloc_r+0x126>
    6240:	f02c 0c03 	bic.w	ip, ip, #3
    6244:	eb06 030c 	add.w	r3, r6, ip
    6248:	4293      	cmp	r3, r2
    624a:	da47      	bge.n	62dc <_realloc_r+0xf0>
    624c:	07cb      	lsls	r3, r1, #31
    624e:	d410      	bmi.n	6272 <_realloc_r+0x86>
    6250:	f854 3c08 	ldr.w	r3, [r4, #-8]
    6254:	eba9 0a03 	sub.w	sl, r9, r3
    6258:	f8da 3004 	ldr.w	r3, [sl, #4]
    625c:	f023 0103 	bic.w	r1, r3, #3
    6260:	448c      	add	ip, r1
    6262:	44b4      	add	ip, r6
    6264:	4594      	cmp	ip, r2
    6266:	f280 8111 	bge.w	648c <_realloc_r+0x2a0>
    626a:	1873      	adds	r3, r6, r1
    626c:	4293      	cmp	r3, r2
    626e:	f280 80e8 	bge.w	6442 <_realloc_r+0x256>
    6272:	4639      	mov	r1, r7
    6274:	4640      	mov	r0, r8
    6276:	f7ff fcf1 	bl	5c5c <_malloc_r>
    627a:	4607      	mov	r7, r0
    627c:	b1e0      	cbz	r0, 62b8 <_realloc_r+0xcc>
    627e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6282:	f023 0301 	bic.w	r3, r3, #1
    6286:	444b      	add	r3, r9
    6288:	f1a0 0208 	sub.w	r2, r0, #8
    628c:	4293      	cmp	r3, r2
    628e:	f000 80d2 	beq.w	6436 <_realloc_r+0x24a>
    6292:	1f32      	subs	r2, r6, #4
    6294:	2a24      	cmp	r2, #36	; 0x24
    6296:	f200 80f5 	bhi.w	6484 <_realloc_r+0x298>
    629a:	2a13      	cmp	r2, #19
    629c:	f200 80ac 	bhi.w	63f8 <_realloc_r+0x20c>
    62a0:	4603      	mov	r3, r0
    62a2:	4622      	mov	r2, r4
    62a4:	6811      	ldr	r1, [r2, #0]
    62a6:	6019      	str	r1, [r3, #0]
    62a8:	6851      	ldr	r1, [r2, #4]
    62aa:	6059      	str	r1, [r3, #4]
    62ac:	6892      	ldr	r2, [r2, #8]
    62ae:	609a      	str	r2, [r3, #8]
    62b0:	4621      	mov	r1, r4
    62b2:	4640      	mov	r0, r8
    62b4:	f002 fa96 	bl	87e4 <_free_r>
    62b8:	4640      	mov	r0, r8
    62ba:	f7ff ff85 	bl	61c8 <__malloc_unlock>
    62be:	4638      	mov	r0, r7
    62c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62c4:	f025 0507 	bic.w	r5, r5, #7
    62c8:	2d00      	cmp	r5, #0
    62ca:	462a      	mov	r2, r5
    62cc:	daa0      	bge.n	6210 <_realloc_r+0x24>
    62ce:	230c      	movs	r3, #12
    62d0:	f8c8 3000 	str.w	r3, [r8]
    62d4:	2700      	movs	r7, #0
    62d6:	4638      	mov	r0, r7
    62d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    62dc:	461e      	mov	r6, r3
    62de:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    62e2:	60d3      	str	r3, [r2, #12]
    62e4:	609a      	str	r2, [r3, #8]
    62e6:	1b73      	subs	r3, r6, r5
    62e8:	2b0f      	cmp	r3, #15
    62ea:	d822      	bhi.n	6332 <_realloc_r+0x146>
    62ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
    62f0:	f003 0301 	and.w	r3, r3, #1
    62f4:	4333      	orrs	r3, r6
    62f6:	444e      	add	r6, r9
    62f8:	f8c9 3004 	str.w	r3, [r9, #4]
    62fc:	6873      	ldr	r3, [r6, #4]
    62fe:	f043 0301 	orr.w	r3, r3, #1
    6302:	6073      	str	r3, [r6, #4]
    6304:	4640      	mov	r0, r8
    6306:	4627      	mov	r7, r4
    6308:	f7ff ff5e 	bl	61c8 <__malloc_unlock>
    630c:	4638      	mov	r0, r7
    630e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6312:	07c9      	lsls	r1, r1, #31
    6314:	d4ad      	bmi.n	6272 <_realloc_r+0x86>
    6316:	f854 3c08 	ldr.w	r3, [r4, #-8]
    631a:	eba9 0a03 	sub.w	sl, r9, r3
    631e:	f8da 1004 	ldr.w	r1, [sl, #4]
    6322:	f021 0103 	bic.w	r1, r1, #3
    6326:	e7a0      	b.n	626a <_realloc_r+0x7e>
    6328:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    632c:	4611      	mov	r1, r2
    632e:	f7ff bc95 	b.w	5c5c <_malloc_r>
    6332:	f8d9 2004 	ldr.w	r2, [r9, #4]
    6336:	eb09 0105 	add.w	r1, r9, r5
    633a:	f002 0201 	and.w	r2, r2, #1
    633e:	444e      	add	r6, r9
    6340:	f043 0301 	orr.w	r3, r3, #1
    6344:	432a      	orrs	r2, r5
    6346:	f8c9 2004 	str.w	r2, [r9, #4]
    634a:	604b      	str	r3, [r1, #4]
    634c:	6873      	ldr	r3, [r6, #4]
    634e:	f043 0301 	orr.w	r3, r3, #1
    6352:	3108      	adds	r1, #8
    6354:	6073      	str	r3, [r6, #4]
    6356:	4640      	mov	r0, r8
    6358:	f002 fa44 	bl	87e4 <_free_r>
    635c:	e7d2      	b.n	6304 <_realloc_r+0x118>
    635e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    6362:	f020 0b03 	bic.w	fp, r0, #3
    6366:	eb06 0c0b 	add.w	ip, r6, fp
    636a:	f105 0010 	add.w	r0, r5, #16
    636e:	4584      	cmp	ip, r0
    6370:	da4d      	bge.n	640e <_realloc_r+0x222>
    6372:	07c9      	lsls	r1, r1, #31
    6374:	f53f af7d 	bmi.w	6272 <_realloc_r+0x86>
    6378:	f854 1c08 	ldr.w	r1, [r4, #-8]
    637c:	eba9 0a01 	sub.w	sl, r9, r1
    6380:	f8da 1004 	ldr.w	r1, [sl, #4]
    6384:	f021 0103 	bic.w	r1, r1, #3
    6388:	448b      	add	fp, r1
    638a:	44b3      	add	fp, r6
    638c:	4558      	cmp	r0, fp
    638e:	f73f af6c 	bgt.w	626a <_realloc_r+0x7e>
    6392:	4657      	mov	r7, sl
    6394:	f8da 100c 	ldr.w	r1, [sl, #12]
    6398:	f857 0f08 	ldr.w	r0, [r7, #8]!
    639c:	1f32      	subs	r2, r6, #4
    639e:	2a24      	cmp	r2, #36	; 0x24
    63a0:	60c1      	str	r1, [r0, #12]
    63a2:	6088      	str	r0, [r1, #8]
    63a4:	f200 80db 	bhi.w	655e <_realloc_r+0x372>
    63a8:	2a13      	cmp	r2, #19
    63aa:	f240 80d6 	bls.w	655a <_realloc_r+0x36e>
    63ae:	6821      	ldr	r1, [r4, #0]
    63b0:	f8ca 1008 	str.w	r1, [sl, #8]
    63b4:	6861      	ldr	r1, [r4, #4]
    63b6:	f8ca 100c 	str.w	r1, [sl, #12]
    63ba:	2a1b      	cmp	r2, #27
    63bc:	f200 80df 	bhi.w	657e <_realloc_r+0x392>
    63c0:	3408      	adds	r4, #8
    63c2:	f10a 0210 	add.w	r2, sl, #16
    63c6:	6821      	ldr	r1, [r4, #0]
    63c8:	6011      	str	r1, [r2, #0]
    63ca:	6861      	ldr	r1, [r4, #4]
    63cc:	6051      	str	r1, [r2, #4]
    63ce:	68a1      	ldr	r1, [r4, #8]
    63d0:	6091      	str	r1, [r2, #8]
    63d2:	eb0a 0105 	add.w	r1, sl, r5
    63d6:	ebab 0205 	sub.w	r2, fp, r5
    63da:	f042 0201 	orr.w	r2, r2, #1
    63de:	6099      	str	r1, [r3, #8]
    63e0:	604a      	str	r2, [r1, #4]
    63e2:	f8da 3004 	ldr.w	r3, [sl, #4]
    63e6:	f003 0301 	and.w	r3, r3, #1
    63ea:	432b      	orrs	r3, r5
    63ec:	4640      	mov	r0, r8
    63ee:	f8ca 3004 	str.w	r3, [sl, #4]
    63f2:	f7ff fee9 	bl	61c8 <__malloc_unlock>
    63f6:	e76e      	b.n	62d6 <_realloc_r+0xea>
    63f8:	6823      	ldr	r3, [r4, #0]
    63fa:	6003      	str	r3, [r0, #0]
    63fc:	6863      	ldr	r3, [r4, #4]
    63fe:	6043      	str	r3, [r0, #4]
    6400:	2a1b      	cmp	r2, #27
    6402:	d868      	bhi.n	64d6 <_realloc_r+0x2ea>
    6404:	f104 0208 	add.w	r2, r4, #8
    6408:	f100 0308 	add.w	r3, r0, #8
    640c:	e74a      	b.n	62a4 <_realloc_r+0xb8>
    640e:	eb09 0205 	add.w	r2, r9, r5
    6412:	609a      	str	r2, [r3, #8]
    6414:	ebac 0305 	sub.w	r3, ip, r5
    6418:	f043 0301 	orr.w	r3, r3, #1
    641c:	6053      	str	r3, [r2, #4]
    641e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6422:	f003 0301 	and.w	r3, r3, #1
    6426:	432b      	orrs	r3, r5
    6428:	4640      	mov	r0, r8
    642a:	f844 3c04 	str.w	r3, [r4, #-4]
    642e:	f7ff fecb 	bl	61c8 <__malloc_unlock>
    6432:	4627      	mov	r7, r4
    6434:	e74f      	b.n	62d6 <_realloc_r+0xea>
    6436:	f850 3c04 	ldr.w	r3, [r0, #-4]
    643a:	f023 0303 	bic.w	r3, r3, #3
    643e:	441e      	add	r6, r3
    6440:	e751      	b.n	62e6 <_realloc_r+0xfa>
    6442:	4657      	mov	r7, sl
    6444:	f8da 100c 	ldr.w	r1, [sl, #12]
    6448:	f857 0f08 	ldr.w	r0, [r7, #8]!
    644c:	1f32      	subs	r2, r6, #4
    644e:	2a24      	cmp	r2, #36	; 0x24
    6450:	60c1      	str	r1, [r0, #12]
    6452:	6088      	str	r0, [r1, #8]
    6454:	d84c      	bhi.n	64f0 <_realloc_r+0x304>
    6456:	2a13      	cmp	r2, #19
    6458:	d948      	bls.n	64ec <_realloc_r+0x300>
    645a:	6821      	ldr	r1, [r4, #0]
    645c:	f8ca 1008 	str.w	r1, [sl, #8]
    6460:	6861      	ldr	r1, [r4, #4]
    6462:	f8ca 100c 	str.w	r1, [sl, #12]
    6466:	2a1b      	cmp	r2, #27
    6468:	d856      	bhi.n	6518 <_realloc_r+0x32c>
    646a:	3408      	adds	r4, #8
    646c:	f10a 0210 	add.w	r2, sl, #16
    6470:	461e      	mov	r6, r3
    6472:	6823      	ldr	r3, [r4, #0]
    6474:	6013      	str	r3, [r2, #0]
    6476:	6863      	ldr	r3, [r4, #4]
    6478:	6053      	str	r3, [r2, #4]
    647a:	68a3      	ldr	r3, [r4, #8]
    647c:	6093      	str	r3, [r2, #8]
    647e:	46d1      	mov	r9, sl
    6480:	463c      	mov	r4, r7
    6482:	e730      	b.n	62e6 <_realloc_r+0xfa>
    6484:	4621      	mov	r1, r4
    6486:	f001 fa67 	bl	7958 <memmove>
    648a:	e711      	b.n	62b0 <_realloc_r+0xc4>
    648c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    6490:	4657      	mov	r7, sl
    6492:	60cb      	str	r3, [r1, #12]
    6494:	6099      	str	r1, [r3, #8]
    6496:	f857 1f08 	ldr.w	r1, [r7, #8]!
    649a:	f8da 300c 	ldr.w	r3, [sl, #12]
    649e:	60cb      	str	r3, [r1, #12]
    64a0:	1f32      	subs	r2, r6, #4
    64a2:	2a24      	cmp	r2, #36	; 0x24
    64a4:	6099      	str	r1, [r3, #8]
    64a6:	d82d      	bhi.n	6504 <_realloc_r+0x318>
    64a8:	2a13      	cmp	r2, #19
    64aa:	d929      	bls.n	6500 <_realloc_r+0x314>
    64ac:	6823      	ldr	r3, [r4, #0]
    64ae:	f8ca 3008 	str.w	r3, [sl, #8]
    64b2:	6863      	ldr	r3, [r4, #4]
    64b4:	f8ca 300c 	str.w	r3, [sl, #12]
    64b8:	2a1b      	cmp	r2, #27
    64ba:	d842      	bhi.n	6542 <_realloc_r+0x356>
    64bc:	3408      	adds	r4, #8
    64be:	f10a 0310 	add.w	r3, sl, #16
    64c2:	6822      	ldr	r2, [r4, #0]
    64c4:	601a      	str	r2, [r3, #0]
    64c6:	6862      	ldr	r2, [r4, #4]
    64c8:	605a      	str	r2, [r3, #4]
    64ca:	68a2      	ldr	r2, [r4, #8]
    64cc:	609a      	str	r2, [r3, #8]
    64ce:	4666      	mov	r6, ip
    64d0:	46d1      	mov	r9, sl
    64d2:	463c      	mov	r4, r7
    64d4:	e707      	b.n	62e6 <_realloc_r+0xfa>
    64d6:	68a3      	ldr	r3, [r4, #8]
    64d8:	6083      	str	r3, [r0, #8]
    64da:	68e3      	ldr	r3, [r4, #12]
    64dc:	60c3      	str	r3, [r0, #12]
    64de:	2a24      	cmp	r2, #36	; 0x24
    64e0:	d026      	beq.n	6530 <_realloc_r+0x344>
    64e2:	f104 0210 	add.w	r2, r4, #16
    64e6:	f100 0310 	add.w	r3, r0, #16
    64ea:	e6db      	b.n	62a4 <_realloc_r+0xb8>
    64ec:	463a      	mov	r2, r7
    64ee:	e7bf      	b.n	6470 <_realloc_r+0x284>
    64f0:	4621      	mov	r1, r4
    64f2:	4638      	mov	r0, r7
    64f4:	461e      	mov	r6, r3
    64f6:	46d1      	mov	r9, sl
    64f8:	f001 fa2e 	bl	7958 <memmove>
    64fc:	463c      	mov	r4, r7
    64fe:	e6f2      	b.n	62e6 <_realloc_r+0xfa>
    6500:	463b      	mov	r3, r7
    6502:	e7de      	b.n	64c2 <_realloc_r+0x2d6>
    6504:	4621      	mov	r1, r4
    6506:	4638      	mov	r0, r7
    6508:	4666      	mov	r6, ip
    650a:	46d1      	mov	r9, sl
    650c:	f001 fa24 	bl	7958 <memmove>
    6510:	463c      	mov	r4, r7
    6512:	e6e8      	b.n	62e6 <_realloc_r+0xfa>
    6514:	2000174c 	.word	0x2000174c
    6518:	68a1      	ldr	r1, [r4, #8]
    651a:	f8ca 1010 	str.w	r1, [sl, #16]
    651e:	68e1      	ldr	r1, [r4, #12]
    6520:	f8ca 1014 	str.w	r1, [sl, #20]
    6524:	2a24      	cmp	r2, #36	; 0x24
    6526:	d020      	beq.n	656a <_realloc_r+0x37e>
    6528:	3410      	adds	r4, #16
    652a:	f10a 0218 	add.w	r2, sl, #24
    652e:	e79f      	b.n	6470 <_realloc_r+0x284>
    6530:	6923      	ldr	r3, [r4, #16]
    6532:	6103      	str	r3, [r0, #16]
    6534:	6961      	ldr	r1, [r4, #20]
    6536:	6141      	str	r1, [r0, #20]
    6538:	f104 0218 	add.w	r2, r4, #24
    653c:	f100 0318 	add.w	r3, r0, #24
    6540:	e6b0      	b.n	62a4 <_realloc_r+0xb8>
    6542:	68a3      	ldr	r3, [r4, #8]
    6544:	f8ca 3010 	str.w	r3, [sl, #16]
    6548:	68e3      	ldr	r3, [r4, #12]
    654a:	f8ca 3014 	str.w	r3, [sl, #20]
    654e:	2a24      	cmp	r2, #36	; 0x24
    6550:	d021      	beq.n	6596 <_realloc_r+0x3aa>
    6552:	3410      	adds	r4, #16
    6554:	f10a 0318 	add.w	r3, sl, #24
    6558:	e7b3      	b.n	64c2 <_realloc_r+0x2d6>
    655a:	463a      	mov	r2, r7
    655c:	e733      	b.n	63c6 <_realloc_r+0x1da>
    655e:	4621      	mov	r1, r4
    6560:	4638      	mov	r0, r7
    6562:	f001 f9f9 	bl	7958 <memmove>
    6566:	4b16      	ldr	r3, [pc, #88]	; (65c0 <_realloc_r+0x3d4>)
    6568:	e733      	b.n	63d2 <_realloc_r+0x1e6>
    656a:	6922      	ldr	r2, [r4, #16]
    656c:	f8ca 2018 	str.w	r2, [sl, #24]
    6570:	6962      	ldr	r2, [r4, #20]
    6572:	f8ca 201c 	str.w	r2, [sl, #28]
    6576:	3418      	adds	r4, #24
    6578:	f10a 0220 	add.w	r2, sl, #32
    657c:	e778      	b.n	6470 <_realloc_r+0x284>
    657e:	68a1      	ldr	r1, [r4, #8]
    6580:	f8ca 1010 	str.w	r1, [sl, #16]
    6584:	68e1      	ldr	r1, [r4, #12]
    6586:	f8ca 1014 	str.w	r1, [sl, #20]
    658a:	2a24      	cmp	r2, #36	; 0x24
    658c:	d00d      	beq.n	65aa <_realloc_r+0x3be>
    658e:	3410      	adds	r4, #16
    6590:	f10a 0218 	add.w	r2, sl, #24
    6594:	e717      	b.n	63c6 <_realloc_r+0x1da>
    6596:	6923      	ldr	r3, [r4, #16]
    6598:	f8ca 3018 	str.w	r3, [sl, #24]
    659c:	6963      	ldr	r3, [r4, #20]
    659e:	f8ca 301c 	str.w	r3, [sl, #28]
    65a2:	3418      	adds	r4, #24
    65a4:	f10a 0320 	add.w	r3, sl, #32
    65a8:	e78b      	b.n	64c2 <_realloc_r+0x2d6>
    65aa:	6922      	ldr	r2, [r4, #16]
    65ac:	f8ca 2018 	str.w	r2, [sl, #24]
    65b0:	6962      	ldr	r2, [r4, #20]
    65b2:	f8ca 201c 	str.w	r2, [sl, #28]
    65b6:	3418      	adds	r4, #24
    65b8:	f10a 0220 	add.w	r2, sl, #32
    65bc:	e703      	b.n	63c6 <_realloc_r+0x1da>
    65be:	bf00      	nop
    65c0:	2000174c 	.word	0x2000174c
    65c4:	00000000 	.word	0x00000000

000065c8 <_strtod_l>:
    65c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65cc:	ed2d 8b10 	vpush	{d8-d15}
    65d0:	b097      	sub	sp, #92	; 0x5c
    65d2:	468a      	mov	sl, r1
    65d4:	2100      	movs	r1, #0
    65d6:	9207      	str	r2, [sp, #28]
    65d8:	9112      	str	r1, [sp, #72]	; 0x48
    65da:	2200      	movs	r2, #0
    65dc:	2100      	movs	r1, #0
    65de:	e9cd 1204 	strd	r1, r2, [sp, #16]
    65e2:	4680      	mov	r8, r0
    65e4:	4651      	mov	r1, sl
    65e6:	9111      	str	r1, [sp, #68]	; 0x44
    65e8:	460f      	mov	r7, r1
    65ea:	f811 2b01 	ldrb.w	r2, [r1], #1
    65ee:	2a2d      	cmp	r2, #45	; 0x2d
    65f0:	d85e      	bhi.n	66b0 <_strtod_l+0xe8>
    65f2:	a001      	add	r0, pc, #4	; (adr r0, 65f8 <_strtod_l+0x30>)
    65f4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    65f8:	00006799 	.word	0x00006799
    65fc:	000066b1 	.word	0x000066b1
    6600:	000066b1 	.word	0x000066b1
    6604:	000066b1 	.word	0x000066b1
    6608:	000066b1 	.word	0x000066b1
    660c:	000066b1 	.word	0x000066b1
    6610:	000066b1 	.word	0x000066b1
    6614:	000066b1 	.word	0x000066b1
    6618:	000066b1 	.word	0x000066b1
    661c:	000065e7 	.word	0x000065e7
    6620:	000065e7 	.word	0x000065e7
    6624:	000065e7 	.word	0x000065e7
    6628:	000065e7 	.word	0x000065e7
    662c:	000065e7 	.word	0x000065e7
    6630:	000066b1 	.word	0x000066b1
    6634:	000066b1 	.word	0x000066b1
    6638:	000066b1 	.word	0x000066b1
    663c:	000066b1 	.word	0x000066b1
    6640:	000066b1 	.word	0x000066b1
    6644:	000066b1 	.word	0x000066b1
    6648:	000066b1 	.word	0x000066b1
    664c:	000066b1 	.word	0x000066b1
    6650:	000066b1 	.word	0x000066b1
    6654:	000066b1 	.word	0x000066b1
    6658:	000066b1 	.word	0x000066b1
    665c:	000066b1 	.word	0x000066b1
    6660:	000066b1 	.word	0x000066b1
    6664:	000066b1 	.word	0x000066b1
    6668:	000066b1 	.word	0x000066b1
    666c:	000066b1 	.word	0x000066b1
    6670:	000066b1 	.word	0x000066b1
    6674:	000066b1 	.word	0x000066b1
    6678:	000065e7 	.word	0x000065e7
    667c:	000066b1 	.word	0x000066b1
    6680:	000066b1 	.word	0x000066b1
    6684:	000066b1 	.word	0x000066b1
    6688:	000066b1 	.word	0x000066b1
    668c:	000066b1 	.word	0x000066b1
    6690:	000066b1 	.word	0x000066b1
    6694:	000066b1 	.word	0x000066b1
    6698:	000066b1 	.word	0x000066b1
    669c:	000066b1 	.word	0x000066b1
    66a0:	000066b1 	.word	0x000066b1
    66a4:	00006dd3 	.word	0x00006dd3
    66a8:	000066b1 	.word	0x000066b1
    66ac:	00006dbf 	.word	0x00006dbf
    66b0:	2100      	movs	r1, #0
    66b2:	9109      	str	r1, [sp, #36]	; 0x24
    66b4:	2a30      	cmp	r2, #48	; 0x30
    66b6:	d07d      	beq.n	67b4 <_strtod_l+0x1ec>
    66b8:	2300      	movs	r3, #0
    66ba:	9308      	str	r3, [sp, #32]
    66bc:	2a2f      	cmp	r2, #47	; 0x2f
    66be:	4614      	mov	r4, r2
    66c0:	f240 84cd 	bls.w	705e <_strtod_l+0xa96>
    66c4:	f04f 0900 	mov.w	r9, #0
    66c8:	4638      	mov	r0, r7
    66ca:	464e      	mov	r6, r9
    66cc:	464d      	mov	r5, r9
    66ce:	e012      	b.n	66f6 <_strtod_l+0x12e>
    66d0:	3001      	adds	r0, #1
    66d2:	2d08      	cmp	r5, #8
    66d4:	9011      	str	r0, [sp, #68]	; 0x44
    66d6:	bfc8      	it	gt
    66d8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    66dc:	7804      	ldrb	r4, [r0, #0]
    66de:	bfc6      	itte	gt
    66e0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    66e4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    66e8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    66ec:	2c2f      	cmp	r4, #47	; 0x2f
    66ee:	f105 0501 	add.w	r5, r5, #1
    66f2:	4622      	mov	r2, r4
    66f4:	dd6f      	ble.n	67d6 <_strtod_l+0x20e>
    66f6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    66fa:	2c39      	cmp	r4, #57	; 0x39
    66fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6700:	dde6      	ble.n	66d0 <_strtod_l+0x108>
    6702:	499f      	ldr	r1, [pc, #636]	; (6980 <_strtod_l+0x3b8>)
    6704:	2201      	movs	r2, #1
    6706:	f001 fa5b 	bl	7bc0 <strncmp>
    670a:	2800      	cmp	r0, #0
    670c:	d137      	bne.n	677e <_strtod_l+0x1b6>
    670e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6710:	461a      	mov	r2, r3
    6712:	3301      	adds	r3, #1
    6714:	9311      	str	r3, [sp, #68]	; 0x44
    6716:	7854      	ldrb	r4, [r2, #1]
    6718:	2d00      	cmp	r5, #0
    671a:	f040 8543 	bne.w	71a4 <_strtod_l+0xbdc>
    671e:	2c30      	cmp	r4, #48	; 0x30
    6720:	f040 8524 	bne.w	716c <_strtod_l+0xba4>
    6724:	f1c3 0201 	rsb	r2, r3, #1
    6728:	1898      	adds	r0, r3, r2
    672a:	3301      	adds	r3, #1
    672c:	9311      	str	r3, [sp, #68]	; 0x44
    672e:	781c      	ldrb	r4, [r3, #0]
    6730:	2c30      	cmp	r4, #48	; 0x30
    6732:	d0f9      	beq.n	6728 <_strtod_l+0x160>
    6734:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    6738:	2b08      	cmp	r3, #8
    673a:	f200 8301 	bhi.w	6d40 <_strtod_l+0x778>
    673e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    6740:	1c43      	adds	r3, r0, #1
    6742:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    6746:	930b      	str	r3, [sp, #44]	; 0x2c
    6748:	2501      	movs	r5, #1
    674a:	46bc      	mov	ip, r7
    674c:	f04f 0e00 	mov.w	lr, #0
    6750:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6754:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    6758:	2000      	movs	r0, #0
    675a:	f10c 0301 	add.w	r3, ip, #1
    675e:	9311      	str	r3, [sp, #68]	; 0x44
    6760:	f89c 4001 	ldrb.w	r4, [ip, #1]
    6764:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    6768:	2909      	cmp	r1, #9
    676a:	f200 82bb 	bhi.w	6ce4 <_strtod_l+0x71c>
    676e:	3001      	adds	r0, #1
    6770:	468b      	mov	fp, r1
    6772:	2900      	cmp	r1, #0
    6774:	f040 844f 	bne.w	7016 <_strtod_l+0xa4e>
    6778:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    677c:	e7ed      	b.n	675a <_strtod_l+0x192>
    677e:	2000      	movs	r0, #0
    6780:	2c65      	cmp	r4, #101	; 0x65
    6782:	46ae      	mov	lr, r5
    6784:	900b      	str	r0, [sp, #44]	; 0x2c
    6786:	4684      	mov	ip, r0
    6788:	d001      	beq.n	678e <_strtod_l+0x1c6>
    678a:	2c45      	cmp	r4, #69	; 0x45
    678c:	d130      	bne.n	67f0 <_strtod_l+0x228>
    678e:	2d00      	cmp	r5, #0
    6790:	d16b      	bne.n	686a <_strtod_l+0x2a2>
    6792:	9b08      	ldr	r3, [sp, #32]
    6794:	4303      	orrs	r3, r0
    6796:	d167      	bne.n	6868 <_strtod_l+0x2a0>
    6798:	9b07      	ldr	r3, [sp, #28]
    679a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 6978 <_strtod_l+0x3b0>
    679e:	b113      	cbz	r3, 67a6 <_strtod_l+0x1de>
    67a0:	9b07      	ldr	r3, [sp, #28]
    67a2:	f8c3 a000 	str.w	sl, [r3]
    67a6:	eeb0 0b48 	vmov.f64	d0, d8
    67aa:	b017      	add	sp, #92	; 0x5c
    67ac:	ecbd 8b10 	vpop	{d8-d15}
    67b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67b4:	787a      	ldrb	r2, [r7, #1]
    67b6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    67ba:	2a58      	cmp	r2, #88	; 0x58
    67bc:	f000 840c 	beq.w	6fd8 <_strtod_l+0xa10>
    67c0:	3701      	adds	r7, #1
    67c2:	9711      	str	r7, [sp, #68]	; 0x44
    67c4:	783a      	ldrb	r2, [r7, #0]
    67c6:	2a30      	cmp	r2, #48	; 0x30
    67c8:	d0fa      	beq.n	67c0 <_strtod_l+0x1f8>
    67ca:	2a00      	cmp	r2, #0
    67cc:	f000 80b7 	beq.w	693e <_strtod_l+0x376>
    67d0:	2301      	movs	r3, #1
    67d2:	9308      	str	r3, [sp, #32]
    67d4:	e772      	b.n	66bc <_strtod_l+0xf4>
    67d6:	496a      	ldr	r1, [pc, #424]	; (6980 <_strtod_l+0x3b8>)
    67d8:	2201      	movs	r2, #1
    67da:	f001 f9f1 	bl	7bc0 <strncmp>
    67de:	2800      	cmp	r0, #0
    67e0:	f000 80c0 	beq.w	6964 <_strtod_l+0x39c>
    67e4:	46ae      	mov	lr, r5
    67e6:	f04f 0c00 	mov.w	ip, #0
    67ea:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    67ee:	4660      	mov	r0, ip
    67f0:	f04f 0b00 	mov.w	fp, #0
    67f4:	2d00      	cmp	r5, #0
    67f6:	d07e      	beq.n	68f6 <_strtod_l+0x32e>
    67f8:	ee07 6a90 	vmov	s15, r6
    67fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    6802:	ebab 0303 	sub.w	r3, fp, r3
    6806:	f1be 0f00 	cmp.w	lr, #0
    680a:	bf08      	it	eq
    680c:	46ae      	moveq	lr, r5
    680e:	2d10      	cmp	r5, #16
    6810:	930a      	str	r3, [sp, #40]	; 0x28
    6812:	462b      	mov	r3, r5
    6814:	bfa8      	it	ge
    6816:	2310      	movge	r3, #16
    6818:	2d09      	cmp	r5, #9
    681a:	ed8d 7b04 	vstr	d7, [sp, #16]
    681e:	dd0c      	ble.n	683a <_strtod_l+0x272>
    6820:	4a58      	ldr	r2, [pc, #352]	; (6984 <_strtod_l+0x3bc>)
    6822:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6826:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    682a:	ee06 9a90 	vmov	s13, r9
    682e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    6832:	eea7 6b05 	vfma.f64	d6, d7, d5
    6836:	ed8d 6b04 	vstr	d6, [sp, #16]
    683a:	2d0f      	cmp	r5, #15
    683c:	f300 80a8 	bgt.w	6990 <_strtod_l+0x3c8>
    6840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6842:	2a00      	cmp	r2, #0
    6844:	f000 83e4 	beq.w	7010 <_strtod_l+0xa48>
    6848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    684a:	f340 833c 	ble.w	6ec6 <_strtod_l+0x8fe>
    684e:	2a16      	cmp	r2, #22
    6850:	f340 8498 	ble.w	7184 <_strtod_l+0xbbc>
    6854:	990a      	ldr	r1, [sp, #40]	; 0x28
    6856:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    685a:	428a      	cmp	r2, r1
    685c:	f280 84a6 	bge.w	71ac <_strtod_l+0xbe4>
    6860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6862:	1aeb      	subs	r3, r5, r3
    6864:	4413      	add	r3, r2
    6866:	e099      	b.n	699c <_strtod_l+0x3d4>
    6868:	2500      	movs	r5, #0
    686a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    686e:	f10a 0301 	add.w	r3, sl, #1
    6872:	9311      	str	r3, [sp, #68]	; 0x44
    6874:	f89a 4001 	ldrb.w	r4, [sl, #1]
    6878:	2c2b      	cmp	r4, #43	; 0x2b
    687a:	f000 825e 	beq.w	6d3a <_strtod_l+0x772>
    687e:	2c2d      	cmp	r4, #45	; 0x2d
    6880:	f000 81f7 	beq.w	6c72 <_strtod_l+0x6aa>
    6884:	2300      	movs	r3, #0
    6886:	930a      	str	r3, [sp, #40]	; 0x28
    6888:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    688c:	2b09      	cmp	r3, #9
    688e:	f200 81eb 	bhi.w	6c68 <_strtod_l+0x6a0>
    6892:	2c30      	cmp	r4, #48	; 0x30
    6894:	d105      	bne.n	68a2 <_strtod_l+0x2da>
    6896:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6898:	3301      	adds	r3, #1
    689a:	9311      	str	r3, [sp, #68]	; 0x44
    689c:	781c      	ldrb	r4, [r3, #0]
    689e:	2c30      	cmp	r4, #48	; 0x30
    68a0:	d0fa      	beq.n	6898 <_strtod_l+0x2d0>
    68a2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    68a6:	2b08      	cmp	r3, #8
    68a8:	d8a2      	bhi.n	67f0 <_strtod_l+0x228>
    68aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    68ac:	920c      	str	r2, [sp, #48]	; 0x30
    68ae:	1c53      	adds	r3, r2, #1
    68b0:	9311      	str	r3, [sp, #68]	; 0x44
    68b2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    68b6:	7854      	ldrb	r4, [r2, #1]
    68b8:	2c2f      	cmp	r4, #47	; 0x2f
    68ba:	dc07      	bgt.n	68cc <_strtod_l+0x304>
    68bc:	e3de      	b.n	707c <_strtod_l+0xab4>
    68be:	3301      	adds	r3, #1
    68c0:	9311      	str	r3, [sp, #68]	; 0x44
    68c2:	784c      	ldrb	r4, [r1, #1]
    68c4:	2c2f      	cmp	r4, #47	; 0x2f
    68c6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    68ca:	dd06      	ble.n	68da <_strtod_l+0x312>
    68cc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    68d0:	2c39      	cmp	r4, #57	; 0x39
    68d2:	4619      	mov	r1, r3
    68d4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    68d8:	ddf1      	ble.n	68be <_strtod_l+0x2f6>
    68da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    68dc:	1a9b      	subs	r3, r3, r2
    68de:	2b08      	cmp	r3, #8
    68e0:	f340 83cc 	ble.w	707c <_strtod_l+0xab4>
    68e4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    68e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    68ea:	2b00      	cmp	r3, #0
    68ec:	d082      	beq.n	67f4 <_strtod_l+0x22c>
    68ee:	f1cb 0b00 	rsb	fp, fp, #0
    68f2:	2d00      	cmp	r5, #0
    68f4:	d180      	bne.n	67f8 <_strtod_l+0x230>
    68f6:	9b08      	ldr	r3, [sp, #32]
    68f8:	4303      	orrs	r3, r0
    68fa:	d120      	bne.n	693e <_strtod_l+0x376>
    68fc:	f1bc 0f00 	cmp.w	ip, #0
    6900:	f47f af4a 	bne.w	6798 <_strtod_l+0x1d0>
    6904:	2c69      	cmp	r4, #105	; 0x69
    6906:	f000 83cf 	beq.w	70a8 <_strtod_l+0xae0>
    690a:	f300 82f3 	bgt.w	6ef4 <_strtod_l+0x92c>
    690e:	2c49      	cmp	r4, #73	; 0x49
    6910:	f000 83ca 	beq.w	70a8 <_strtod_l+0xae0>
    6914:	2c4e      	cmp	r4, #78	; 0x4e
    6916:	f47f af3f 	bne.w	6798 <_strtod_l+0x1d0>
    691a:	491b      	ldr	r1, [pc, #108]	; (6988 <_strtod_l+0x3c0>)
    691c:	a811      	add	r0, sp, #68	; 0x44
    691e:	f002 fb83 	bl	9028 <__match>
    6922:	2800      	cmp	r0, #0
    6924:	f43f af38 	beq.w	6798 <_strtod_l+0x1d0>
    6928:	9b11      	ldr	r3, [sp, #68]	; 0x44
    692a:	781b      	ldrb	r3, [r3, #0]
    692c:	2b28      	cmp	r3, #40	; 0x28
    692e:	f000 84f2 	beq.w	7316 <_strtod_l+0xd4e>
    6932:	4816      	ldr	r0, [pc, #88]	; (698c <_strtod_l+0x3c4>)
    6934:	f001 feb4 	bl	86a0 <nan>
    6938:	eeb0 8b40 	vmov.f64	d8, d0
    693c:	e001      	b.n	6942 <_strtod_l+0x37a>
    693e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 6978 <_strtod_l+0x3b0>
    6942:	9a07      	ldr	r2, [sp, #28]
    6944:	b10a      	cbz	r2, 694a <_strtod_l+0x382>
    6946:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6948:	6013      	str	r3, [r2, #0]
    694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    694c:	2b00      	cmp	r3, #0
    694e:	f43f af2a 	beq.w	67a6 <_strtod_l+0x1de>
    6952:	eeb1 8b48 	vneg.f64	d8, d8
    6956:	eeb0 0b48 	vmov.f64	d0, d8
    695a:	b017      	add	sp, #92	; 0x5c
    695c:	ecbd 8b10 	vpop	{d8-d15}
    6960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6964:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6966:	900b      	str	r0, [sp, #44]	; 0x2c
    6968:	1c5a      	adds	r2, r3, #1
    696a:	9211      	str	r2, [sp, #68]	; 0x44
    696c:	785c      	ldrb	r4, [r3, #1]
    696e:	46ae      	mov	lr, r5
    6970:	e6f8      	b.n	6764 <_strtod_l+0x19c>
    6972:	bf00      	nop
    6974:	f3af 8000 	nop.w
	...
    6980:	20000c58 	.word	0x20000c58
    6984:	200002a8 	.word	0x200002a8
    6988:	20000c68 	.word	0x20000c68
    698c:	20000628 	.word	0x20000628
    6990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6992:	1aeb      	subs	r3, r5, r3
    6994:	4413      	add	r3, r2
    6996:	2b00      	cmp	r3, #0
    6998:	f340 82b0 	ble.w	6efc <_strtod_l+0x934>
    699c:	f013 010f 	ands.w	r1, r3, #15
    69a0:	d00a      	beq.n	69b8 <_strtod_l+0x3f0>
    69a2:	4ac3      	ldr	r2, [pc, #780]	; (6cb0 <_strtod_l+0x6e8>)
    69a4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    69a8:	ed9d 6b04 	vldr	d6, [sp, #16]
    69ac:	ed92 7b00 	vldr	d7, [r2]
    69b0:	ee27 7b06 	vmul.f64	d7, d7, d6
    69b4:	ed8d 7b04 	vstr	d7, [sp, #16]
    69b8:	f033 020f 	bics.w	r2, r3, #15
    69bc:	f040 8238 	bne.w	6e30 <_strtod_l+0x868>
    69c0:	2300      	movs	r3, #0
    69c2:	9308      	str	r3, [sp, #32]
    69c4:	9600      	str	r6, [sp, #0]
    69c6:	462b      	mov	r3, r5
    69c8:	4672      	mov	r2, lr
    69ca:	4639      	mov	r1, r7
    69cc:	4640      	mov	r0, r8
    69ce:	f002 fcb7 	bl	9340 <__s2b>
    69d2:	4681      	mov	r9, r0
    69d4:	2800      	cmp	r0, #0
    69d6:	f000 82e1 	beq.w	6f9c <_strtod_l+0x9d4>
    69da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    69dc:	eba3 0b0b 	sub.w	fp, r3, fp
    69e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    69e2:	ed9f eba9 	vldr	d14, [pc, #676]	; 6c88 <_strtod_l+0x6c0>
    69e6:	2b00      	cmp	r3, #0
    69e8:	ed9f cba9 	vldr	d12, [pc, #676]	; 6c90 <_strtod_l+0x6c8>
    69ec:	ed9f dbaa 	vldr	d13, [pc, #680]	; 6c98 <_strtod_l+0x6d0>
    69f0:	ed9f bbab 	vldr	d11, [pc, #684]	; 6ca0 <_strtod_l+0x6d8>
    69f4:	bfb4      	ite	lt
    69f6:	465a      	movlt	r2, fp
    69f8:	2200      	movge	r2, #0
    69fa:	f04f 0a00 	mov.w	sl, #0
    69fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6a02:	920b      	str	r2, [sp, #44]	; 0x2c
    6a04:	930c      	str	r3, [sp, #48]	; 0x30
    6a06:	4654      	mov	r4, sl
    6a08:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6a0c:	4640      	mov	r0, r8
    6a0e:	f002 fc15 	bl	923c <_Balloc>
    6a12:	4606      	mov	r6, r0
    6a14:	2800      	cmp	r0, #0
    6a16:	f000 810e 	beq.w	6c36 <_strtod_l+0x66e>
    6a1a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    6a1e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6a22:	3202      	adds	r2, #2
    6a24:	0092      	lsls	r2, r2, #2
    6a26:	f109 010c 	add.w	r1, r9, #12
    6a2a:	300c      	adds	r0, #12
    6a2c:	f7fd fb44 	bl	40b8 <memcpy>
    6a30:	eeb0 0b48 	vmov.f64	d0, d8
    6a34:	aa14      	add	r2, sp, #80	; 0x50
    6a36:	a913      	add	r1, sp, #76	; 0x4c
    6a38:	4640      	mov	r0, r8
    6a3a:	f003 f83d 	bl	9ab8 <__d2b>
    6a3e:	9012      	str	r0, [sp, #72]	; 0x48
    6a40:	2800      	cmp	r0, #0
    6a42:	f000 80e4 	beq.w	6c0e <_strtod_l+0x646>
    6a46:	2101      	movs	r1, #1
    6a48:	4640      	mov	r0, r8
    6a4a:	f002 fd21 	bl	9490 <__i2b>
    6a4e:	4604      	mov	r4, r0
    6a50:	2800      	cmp	r0, #0
    6a52:	f000 80f0 	beq.w	6c36 <_strtod_l+0x66e>
    6a56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6a58:	2a00      	cmp	r2, #0
    6a5a:	f2c0 80de 	blt.w	6c1a <_strtod_l+0x652>
    6a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6a62:	eb02 0b03 	add.w	fp, r2, r3
    6a66:	9b08      	ldr	r3, [sp, #32]
    6a68:	9d14      	ldr	r5, [sp, #80]	; 0x50
    6a6a:	1ad2      	subs	r2, r2, r3
    6a6c:	442a      	add	r2, r5
    6a6e:	4b91      	ldr	r3, [pc, #580]	; (6cb4 <_strtod_l+0x6ec>)
    6a70:	3a01      	subs	r2, #1
    6a72:	429a      	cmp	r2, r3
    6a74:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    6a78:	f280 8098 	bge.w	6bac <_strtod_l+0x5e4>
    6a7c:	1a99      	subs	r1, r3, r2
    6a7e:	291f      	cmp	r1, #31
    6a80:	eba5 0501 	sub.w	r5, r5, r1
    6a84:	f300 80e3 	bgt.w	6c4e <_strtod_l+0x686>
    6a88:	2201      	movs	r2, #1
    6a8a:	fa02 f301 	lsl.w	r3, r2, r1
    6a8e:	930d      	str	r3, [sp, #52]	; 0x34
    6a90:	2300      	movs	r3, #0
    6a92:	930e      	str	r3, [sp, #56]	; 0x38
    6a94:	442f      	add	r7, r5
    6a96:	9b08      	ldr	r3, [sp, #32]
    6a98:	445d      	add	r5, fp
    6a9a:	45ab      	cmp	fp, r5
    6a9c:	465a      	mov	r2, fp
    6a9e:	441f      	add	r7, r3
    6aa0:	bfa8      	it	ge
    6aa2:	462a      	movge	r2, r5
    6aa4:	42ba      	cmp	r2, r7
    6aa6:	bfa8      	it	ge
    6aa8:	463a      	movge	r2, r7
    6aaa:	2a00      	cmp	r2, #0
    6aac:	dd03      	ble.n	6ab6 <_strtod_l+0x4ee>
    6aae:	1aad      	subs	r5, r5, r2
    6ab0:	1abf      	subs	r7, r7, r2
    6ab2:	ebab 0b02 	sub.w	fp, fp, r2
    6ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ab8:	2b00      	cmp	r3, #0
    6aba:	f300 8088 	bgt.w	6bce <_strtod_l+0x606>
    6abe:	2d00      	cmp	r5, #0
    6ac0:	f300 809c 	bgt.w	6bfc <_strtod_l+0x634>
    6ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	f300 80b7 	bgt.w	6c3a <_strtod_l+0x672>
    6acc:	2f00      	cmp	r7, #0
    6ace:	f300 80a9 	bgt.w	6c24 <_strtod_l+0x65c>
    6ad2:	f1bb 0f00 	cmp.w	fp, #0
    6ad6:	dd08      	ble.n	6aea <_strtod_l+0x522>
    6ad8:	4621      	mov	r1, r4
    6ada:	465a      	mov	r2, fp
    6adc:	4640      	mov	r0, r8
    6ade:	f002 fe13 	bl	9708 <__lshift>
    6ae2:	4604      	mov	r4, r0
    6ae4:	2800      	cmp	r0, #0
    6ae6:	f000 80a6 	beq.w	6c36 <_strtod_l+0x66e>
    6aea:	9912      	ldr	r1, [sp, #72]	; 0x48
    6aec:	4632      	mov	r2, r6
    6aee:	4640      	mov	r0, r8
    6af0:	f002 fea4 	bl	983c <__mdiff>
    6af4:	4682      	mov	sl, r0
    6af6:	2800      	cmp	r0, #0
    6af8:	f000 809d 	beq.w	6c36 <_strtod_l+0x66e>
    6afc:	2300      	movs	r3, #0
    6afe:	68c5      	ldr	r5, [r0, #12]
    6b00:	60c3      	str	r3, [r0, #12]
    6b02:	4621      	mov	r1, r4
    6b04:	f002 fe78 	bl	97f8 <__mcmp>
    6b08:	2800      	cmp	r0, #0
    6b0a:	f2c0 83c7 	blt.w	729c <_strtod_l+0xcd4>
    6b0e:	f000 8361 	beq.w	71d4 <_strtod_l+0xc0c>
    6b12:	4621      	mov	r1, r4
    6b14:	4650      	mov	r0, sl
    6b16:	f003 f839 	bl	9b8c <__ratio>
    6b1a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    6b1e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b26:	d846      	bhi.n	6bb6 <_strtod_l+0x5ee>
    6b28:	2d00      	cmp	r5, #0
    6b2a:	f000 80cb 	beq.w	6cc4 <_strtod_l+0x6fc>
    6b2e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6b32:	9805      	ldr	r0, [sp, #20]
    6b34:	4b60      	ldr	r3, [pc, #384]	; (6cb8 <_strtod_l+0x6f0>)
    6b36:	2200      	movs	r2, #0
    6b38:	4960      	ldr	r1, [pc, #384]	; (6cbc <_strtod_l+0x6f4>)
    6b3a:	f8df c184 	ldr.w	ip, [pc, #388]	; 6cc0 <_strtod_l+0x6f8>
    6b3e:	ea00 0701 	and.w	r7, r0, r1
    6b42:	4567      	cmp	r7, ip
    6b44:	f000 80d4 	beq.w	6cf0 <_strtod_l+0x728>
    6b48:	9908      	ldr	r1, [sp, #32]
    6b4a:	b159      	cbz	r1, 6b64 <_strtod_l+0x59c>
    6b4c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    6b50:	d808      	bhi.n	6b64 <_strtod_l+0x59c>
    6b52:	eeb4 9bcb 	vcmpe.f64	d9, d11
    6b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6b5a:	f240 8156 	bls.w	6e0a <_strtod_l+0x842>
    6b5e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    6b62:	1bcb      	subs	r3, r1, r7
    6b64:	eeb0 0b48 	vmov.f64	d0, d8
    6b68:	ec43 2b1a 	vmov	d10, r2, r3
    6b6c:	f002 ff10 	bl	9990 <__ulp>
    6b70:	eeaa 8b00 	vfma.f64	d8, d10, d0
    6b74:	ed8d 8b04 	vstr	d8, [sp, #16]
    6b78:	ee18 3a90 	vmov	r3, s17
    6b7c:	9a08      	ldr	r2, [sp, #32]
    6b7e:	b922      	cbnz	r2, 6b8a <_strtod_l+0x5c2>
    6b80:	4a4e      	ldr	r2, [pc, #312]	; (6cbc <_strtod_l+0x6f4>)
    6b82:	401a      	ands	r2, r3
    6b84:	4297      	cmp	r7, r2
    6b86:	f000 80e4 	beq.w	6d52 <_strtod_l+0x78a>
    6b8a:	9912      	ldr	r1, [sp, #72]	; 0x48
    6b8c:	4640      	mov	r0, r8
    6b8e:	f002 fb7b 	bl	9288 <_Bfree>
    6b92:	4631      	mov	r1, r6
    6b94:	4640      	mov	r0, r8
    6b96:	f002 fb77 	bl	9288 <_Bfree>
    6b9a:	4621      	mov	r1, r4
    6b9c:	4640      	mov	r0, r8
    6b9e:	f002 fb73 	bl	9288 <_Bfree>
    6ba2:	4651      	mov	r1, sl
    6ba4:	4640      	mov	r0, r8
    6ba6:	f002 fb6f 	bl	9288 <_Bfree>
    6baa:	e72d      	b.n	6a08 <_strtod_l+0x440>
    6bac:	2301      	movs	r3, #1
    6bae:	2100      	movs	r1, #0
    6bb0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    6bb4:	e76e      	b.n	6a94 <_strtod_l+0x4cc>
    6bb6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6bba:	ee20 9b09 	vmul.f64	d9, d0, d9
    6bbe:	2d00      	cmp	r5, #0
    6bc0:	d15f      	bne.n	6c82 <_strtod_l+0x6ba>
    6bc2:	eeb1 7b49 	vneg.f64	d7, d9
    6bc6:	9805      	ldr	r0, [sp, #20]
    6bc8:	ec53 2b17 	vmov	r2, r3, d7
    6bcc:	e7b4      	b.n	6b38 <_strtod_l+0x570>
    6bce:	4621      	mov	r1, r4
    6bd0:	461a      	mov	r2, r3
    6bd2:	4640      	mov	r0, r8
    6bd4:	f002 fd38 	bl	9648 <__pow5mult>
    6bd8:	4604      	mov	r4, r0
    6bda:	b360      	cbz	r0, 6c36 <_strtod_l+0x66e>
    6bdc:	4601      	mov	r1, r0
    6bde:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6be0:	4640      	mov	r0, r8
    6be2:	f002 fc83 	bl	94ec <__multiply>
    6be6:	b330      	cbz	r0, 6c36 <_strtod_l+0x66e>
    6be8:	900f      	str	r0, [sp, #60]	; 0x3c
    6bea:	9912      	ldr	r1, [sp, #72]	; 0x48
    6bec:	4640      	mov	r0, r8
    6bee:	f002 fb4b 	bl	9288 <_Bfree>
    6bf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6bf4:	9212      	str	r2, [sp, #72]	; 0x48
    6bf6:	2d00      	cmp	r5, #0
    6bf8:	f77f af64 	ble.w	6ac4 <_strtod_l+0x4fc>
    6bfc:	9912      	ldr	r1, [sp, #72]	; 0x48
    6bfe:	462a      	mov	r2, r5
    6c00:	4640      	mov	r0, r8
    6c02:	f002 fd81 	bl	9708 <__lshift>
    6c06:	9012      	str	r0, [sp, #72]	; 0x48
    6c08:	2800      	cmp	r0, #0
    6c0a:	f47f af5b 	bne.w	6ac4 <_strtod_l+0x4fc>
    6c0e:	2322      	movs	r3, #34	; 0x22
    6c10:	ed9f 8b25 	vldr	d8, [pc, #148]	; 6ca8 <_strtod_l+0x6e0>
    6c14:	f8c8 3000 	str.w	r3, [r8]
    6c18:	e0bc      	b.n	6d94 <_strtod_l+0x7cc>
    6c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c1c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    6c20:	1a9f      	subs	r7, r3, r2
    6c22:	e720      	b.n	6a66 <_strtod_l+0x49e>
    6c24:	4631      	mov	r1, r6
    6c26:	463a      	mov	r2, r7
    6c28:	4640      	mov	r0, r8
    6c2a:	f002 fd6d 	bl	9708 <__lshift>
    6c2e:	4606      	mov	r6, r0
    6c30:	2800      	cmp	r0, #0
    6c32:	f47f af4e 	bne.w	6ad2 <_strtod_l+0x50a>
    6c36:	9812      	ldr	r0, [sp, #72]	; 0x48
    6c38:	e7e9      	b.n	6c0e <_strtod_l+0x646>
    6c3a:	4631      	mov	r1, r6
    6c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6c3e:	4640      	mov	r0, r8
    6c40:	f002 fd02 	bl	9648 <__pow5mult>
    6c44:	4606      	mov	r6, r0
    6c46:	2800      	cmp	r0, #0
    6c48:	f47f af40 	bne.w	6acc <_strtod_l+0x504>
    6c4c:	e7f3      	b.n	6c36 <_strtod_l+0x66e>
    6c4e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    6c52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    6c56:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    6c5a:	2101      	movs	r1, #1
    6c5c:	32e2      	adds	r2, #226	; 0xe2
    6c5e:	fa01 f302 	lsl.w	r3, r1, r2
    6c62:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    6c66:	e715      	b.n	6a94 <_strtod_l+0x4cc>
    6c68:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    6c6c:	f04f 0b00 	mov.w	fp, #0
    6c70:	e5c0      	b.n	67f4 <_strtod_l+0x22c>
    6c72:	2301      	movs	r3, #1
    6c74:	930a      	str	r3, [sp, #40]	; 0x28
    6c76:	f10a 0302 	add.w	r3, sl, #2
    6c7a:	9311      	str	r3, [sp, #68]	; 0x44
    6c7c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    6c80:	e602      	b.n	6888 <_strtod_l+0x2c0>
    6c82:	eeb0 7b49 	vmov.f64	d7, d9
    6c86:	e79e      	b.n	6bc6 <_strtod_l+0x5fe>
    6c88:	94a03595 	.word	0x94a03595
    6c8c:	3fcfffff 	.word	0x3fcfffff
    6c90:	94a03595 	.word	0x94a03595
    6c94:	3fdfffff 	.word	0x3fdfffff
    6c98:	35afe535 	.word	0x35afe535
    6c9c:	3fe00000 	.word	0x3fe00000
    6ca0:	ffc00000 	.word	0xffc00000
    6ca4:	41dfffff 	.word	0x41dfffff
    6ca8:	00000000 	.word	0x00000000
    6cac:	7ff00000 	.word	0x7ff00000
    6cb0:	200002a8 	.word	0x200002a8
    6cb4:	fffffc02 	.word	0xfffffc02
    6cb8:	3ff00000 	.word	0x3ff00000
    6cbc:	7ff00000 	.word	0x7ff00000
    6cc0:	7fe00000 	.word	0x7fe00000
    6cc4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6cc8:	2900      	cmp	r1, #0
    6cca:	f000 8085 	beq.w	6dd8 <_strtod_l+0x810>
    6cce:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6cd2:	2901      	cmp	r1, #1
    6cd4:	f000 81d8 	beq.w	7088 <_strtod_l+0xac0>
    6cd8:	4610      	mov	r0, r2
    6cda:	4bb7      	ldr	r3, [pc, #732]	; (6fb8 <_strtod_l+0x9f0>)
    6cdc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6ce0:	2200      	movs	r2, #0
    6ce2:	e729      	b.n	6b38 <_strtod_l+0x570>
    6ce4:	2c65      	cmp	r4, #101	; 0x65
    6ce6:	f04f 0c01 	mov.w	ip, #1
    6cea:	f43f adbe 	beq.w	686a <_strtod_l+0x2a2>
    6cee:	e54c      	b.n	678a <_strtod_l+0x1c2>
    6cf0:	ec43 2b1a 	vmov	d10, r2, r3
    6cf4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    6cf8:	9305      	str	r3, [sp, #20]
    6cfa:	ed9d fb04 	vldr	d15, [sp, #16]
    6cfe:	eeb0 0b4f 	vmov.f64	d0, d15
    6d02:	f002 fe45 	bl	9990 <__ulp>
    6d06:	49ad      	ldr	r1, [pc, #692]	; (6fbc <_strtod_l+0x9f4>)
    6d08:	eeaa fb00 	vfma.f64	d15, d10, d0
    6d0c:	ee1f 3a90 	vmov	r3, s31
    6d10:	4aab      	ldr	r2, [pc, #684]	; (6fc0 <_strtod_l+0x9f8>)
    6d12:	4019      	ands	r1, r3
    6d14:	4291      	cmp	r1, r2
    6d16:	ed8d fb04 	vstr	d15, [sp, #16]
    6d1a:	d972      	bls.n	6e02 <_strtod_l+0x83a>
    6d1c:	4ba9      	ldr	r3, [pc, #676]	; (6fc4 <_strtod_l+0x9fc>)
    6d1e:	ee18 2a90 	vmov	r2, s17
    6d22:	429a      	cmp	r2, r3
    6d24:	d103      	bne.n	6d2e <_strtod_l+0x766>
    6d26:	ee18 3a10 	vmov	r3, s16
    6d2a:	3301      	adds	r3, #1
    6d2c:	d083      	beq.n	6c36 <_strtod_l+0x66e>
    6d2e:	4aa5      	ldr	r2, [pc, #660]	; (6fc4 <_strtod_l+0x9fc>)
    6d30:	f04f 33ff 	mov.w	r3, #4294967295
    6d34:	e9cd 3204 	strd	r3, r2, [sp, #16]
    6d38:	e727      	b.n	6b8a <_strtod_l+0x5c2>
    6d3a:	2300      	movs	r3, #0
    6d3c:	930a      	str	r3, [sp, #40]	; 0x28
    6d3e:	e79a      	b.n	6c76 <_strtod_l+0x6ae>
    6d40:	2c65      	cmp	r4, #101	; 0x65
    6d42:	f000 80d0 	beq.w	6ee6 <_strtod_l+0x91e>
    6d46:	2c45      	cmp	r4, #69	; 0x45
    6d48:	f000 80cd 	beq.w	6ee6 <_strtod_l+0x91e>
    6d4c:	f04f 0c01 	mov.w	ip, #1
    6d50:	e5d1      	b.n	68f6 <_strtod_l+0x32e>
    6d52:	ec51 0b19 	vmov	r0, r1, d9
    6d56:	930d      	str	r3, [sp, #52]	; 0x34
    6d58:	f005 ff60 	bl	cc1c <__aeabi_d2lz>
    6d5c:	f005 ff30 	bl	cbc0 <__aeabi_l2d>
    6d60:	9b04      	ldr	r3, [sp, #16]
    6d62:	431d      	orrs	r5, r3
    6d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6d66:	ec41 0b17 	vmov	d7, r0, r1
    6d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6d6e:	431d      	orrs	r5, r3
    6d70:	ee39 9b47 	vsub.f64	d9, d9, d7
    6d74:	f000 80a0 	beq.w	6eb8 <_strtod_l+0x8f0>
    6d78:	eeb4 9bcc 	vcmpe.f64	d9, d12
    6d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d80:	d405      	bmi.n	6d8e <_strtod_l+0x7c6>
    6d82:	eeb4 9bcd 	vcmpe.f64	d9, d13
    6d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d8a:	f77f aefe 	ble.w	6b8a <_strtod_l+0x5c2>
    6d8e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6d92:	9812      	ldr	r0, [sp, #72]	; 0x48
    6d94:	4601      	mov	r1, r0
    6d96:	4640      	mov	r0, r8
    6d98:	f002 fa76 	bl	9288 <_Bfree>
    6d9c:	4631      	mov	r1, r6
    6d9e:	4640      	mov	r0, r8
    6da0:	f002 fa72 	bl	9288 <_Bfree>
    6da4:	4621      	mov	r1, r4
    6da6:	4640      	mov	r0, r8
    6da8:	f002 fa6e 	bl	9288 <_Bfree>
    6dac:	4649      	mov	r1, r9
    6dae:	4640      	mov	r0, r8
    6db0:	f002 fa6a 	bl	9288 <_Bfree>
    6db4:	4651      	mov	r1, sl
    6db6:	4640      	mov	r0, r8
    6db8:	f002 fa66 	bl	9288 <_Bfree>
    6dbc:	e5c1      	b.n	6942 <_strtod_l+0x37a>
    6dbe:	2201      	movs	r2, #1
    6dc0:	9209      	str	r2, [sp, #36]	; 0x24
    6dc2:	1c79      	adds	r1, r7, #1
    6dc4:	9111      	str	r1, [sp, #68]	; 0x44
    6dc6:	787a      	ldrb	r2, [r7, #1]
    6dc8:	2a00      	cmp	r2, #0
    6dca:	f43f ace5 	beq.w	6798 <_strtod_l+0x1d0>
    6dce:	460f      	mov	r7, r1
    6dd0:	e470      	b.n	66b4 <_strtod_l+0xec>
    6dd2:	2200      	movs	r2, #0
    6dd4:	9209      	str	r2, [sp, #36]	; 0x24
    6dd6:	e7f4      	b.n	6dc2 <_strtod_l+0x7fa>
    6dd8:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6ddc:	4610      	mov	r0, r2
    6dde:	2b00      	cmp	r3, #0
    6de0:	f47f af7b 	bne.w	6cda <_strtod_l+0x712>
    6de4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    6de8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6df0:	f100 81d3 	bmi.w	719a <_strtod_l+0xbd2>
    6df4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6df8:	ee20 9b09 	vmul.f64	d9, d0, d9
    6dfc:	eeb1 7b49 	vneg.f64	d7, d9
    6e00:	e6e2      	b.n	6bc8 <_strtod_l+0x600>
    6e02:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    6e06:	9305      	str	r3, [sp, #20]
    6e08:	e6b8      	b.n	6b7c <_strtod_l+0x5b4>
    6e0a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    6e0e:	ee19 3a10 	vmov	r3, s18
    6e12:	2b01      	cmp	r3, #1
    6e14:	bf38      	it	cc
    6e16:	2301      	movcc	r3, #1
    6e18:	ee09 3a10 	vmov	s18, r3
    6e1c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    6e20:	2d00      	cmp	r5, #0
    6e22:	f040 813e 	bne.w	70a2 <_strtod_l+0xada>
    6e26:	eeb1 7b49 	vneg.f64	d7, d9
    6e2a:	ec53 2b17 	vmov	r2, r3, d7
    6e2e:	e696      	b.n	6b5e <_strtod_l+0x596>
    6e30:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    6e34:	f300 80b2 	bgt.w	6f9c <_strtod_l+0x9d4>
    6e38:	2a10      	cmp	r2, #16
    6e3a:	ea4f 1322 	mov.w	r3, r2, asr #4
    6e3e:	f340 8286 	ble.w	734e <_strtod_l+0xd86>
    6e42:	4c61      	ldr	r4, [pc, #388]	; (6fc8 <_strtod_l+0xa00>)
    6e44:	ed9d 7b04 	vldr	d7, [sp, #16]
    6e48:	2000      	movs	r0, #0
    6e4a:	4622      	mov	r2, r4
    6e4c:	4601      	mov	r1, r0
    6e4e:	f013 0f01 	tst.w	r3, #1
    6e52:	f101 0101 	add.w	r1, r1, #1
    6e56:	ea4f 0363 	mov.w	r3, r3, asr #1
    6e5a:	d004      	beq.n	6e66 <_strtod_l+0x89e>
    6e5c:	ed92 6b00 	vldr	d6, [r2]
    6e60:	2001      	movs	r0, #1
    6e62:	ee27 7b06 	vmul.f64	d7, d7, d6
    6e66:	2b01      	cmp	r3, #1
    6e68:	f102 0208 	add.w	r2, r2, #8
    6e6c:	d1ef      	bne.n	6e4e <_strtod_l+0x886>
    6e6e:	b108      	cbz	r0, 6e74 <_strtod_l+0x8ac>
    6e70:	ed8d 7b04 	vstr	d7, [sp, #16]
    6e74:	9b05      	ldr	r3, [sp, #20]
    6e76:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    6e7a:	9305      	str	r3, [sp, #20]
    6e7c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    6e80:	ed9d 6b04 	vldr	d6, [sp, #16]
    6e84:	ed94 7b00 	vldr	d7, [r4]
    6e88:	4b4c      	ldr	r3, [pc, #304]	; (6fbc <_strtod_l+0x9f4>)
    6e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
    6e8e:	ee17 2a90 	vmov	r2, s15
    6e92:	494e      	ldr	r1, [pc, #312]	; (6fcc <_strtod_l+0xa04>)
    6e94:	4013      	ands	r3, r2
    6e96:	428b      	cmp	r3, r1
    6e98:	ed8d 7b04 	vstr	d7, [sp, #16]
    6e9c:	d87e      	bhi.n	6f9c <_strtod_l+0x9d4>
    6e9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    6ea2:	428b      	cmp	r3, r1
    6ea4:	f240 81d6 	bls.w	7254 <_strtod_l+0xc8c>
    6ea8:	4c46      	ldr	r4, [pc, #280]	; (6fc4 <_strtod_l+0x9fc>)
    6eaa:	f04f 33ff 	mov.w	r3, #4294967295
    6eae:	e9cd 3404 	strd	r3, r4, [sp, #16]
    6eb2:	2300      	movs	r3, #0
    6eb4:	9308      	str	r3, [sp, #32]
    6eb6:	e585      	b.n	69c4 <_strtod_l+0x3fc>
    6eb8:	eeb4 9bce 	vcmpe.f64	d9, d14
    6ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ec0:	f57f ae63 	bpl.w	6b8a <_strtod_l+0x5c2>
    6ec4:	e763      	b.n	6d8e <_strtod_l+0x7c6>
    6ec6:	3216      	adds	r2, #22
    6ec8:	f6ff ad62 	blt.w	6990 <_strtod_l+0x3c8>
    6ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ece:	eba3 0b0b 	sub.w	fp, r3, fp
    6ed2:	4b3f      	ldr	r3, [pc, #252]	; (6fd0 <_strtod_l+0xa08>)
    6ed4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    6ed8:	ed93 7b00 	vldr	d7, [r3]
    6edc:	ed9d 6b04 	vldr	d6, [sp, #16]
    6ee0:	ee86 8b07 	vdiv.f64	d8, d6, d7
    6ee4:	e52d      	b.n	6942 <_strtod_l+0x37a>
    6ee6:	f04f 0e00 	mov.w	lr, #0
    6eea:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    6eee:	f04f 0c01 	mov.w	ip, #1
    6ef2:	e44e      	b.n	6792 <_strtod_l+0x1ca>
    6ef4:	2c6e      	cmp	r4, #110	; 0x6e
    6ef6:	f43f ad10 	beq.w	691a <_strtod_l+0x352>
    6efa:	e44d      	b.n	6798 <_strtod_l+0x1d0>
    6efc:	f43f ad60 	beq.w	69c0 <_strtod_l+0x3f8>
    6f00:	425b      	negs	r3, r3
    6f02:	f013 010f 	ands.w	r1, r3, #15
    6f06:	d00a      	beq.n	6f1e <_strtod_l+0x956>
    6f08:	4a31      	ldr	r2, [pc, #196]	; (6fd0 <_strtod_l+0xa08>)
    6f0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    6f0e:	ed9d 6b04 	vldr	d6, [sp, #16]
    6f12:	ed92 7b00 	vldr	d7, [r2]
    6f16:	ee86 7b07 	vdiv.f64	d7, d6, d7
    6f1a:	ed8d 7b04 	vstr	d7, [sp, #16]
    6f1e:	111b      	asrs	r3, r3, #4
    6f20:	f43f ad4e 	beq.w	69c0 <_strtod_l+0x3f8>
    6f24:	2b1f      	cmp	r3, #31
    6f26:	dc33      	bgt.n	6f90 <_strtod_l+0x9c8>
    6f28:	f013 0210 	ands.w	r2, r3, #16
    6f2c:	bf18      	it	ne
    6f2e:	226a      	movne	r2, #106	; 0x6a
    6f30:	ed9d 7b04 	vldr	d7, [sp, #16]
    6f34:	9208      	str	r2, [sp, #32]
    6f36:	4a27      	ldr	r2, [pc, #156]	; (6fd4 <_strtod_l+0xa0c>)
    6f38:	2100      	movs	r1, #0
    6f3a:	07d8      	lsls	r0, r3, #31
    6f3c:	d504      	bpl.n	6f48 <_strtod_l+0x980>
    6f3e:	ed92 6b00 	vldr	d6, [r2]
    6f42:	2101      	movs	r1, #1
    6f44:	ee27 7b06 	vmul.f64	d7, d7, d6
    6f48:	105b      	asrs	r3, r3, #1
    6f4a:	f102 0208 	add.w	r2, r2, #8
    6f4e:	d1f4      	bne.n	6f3a <_strtod_l+0x972>
    6f50:	b109      	cbz	r1, 6f56 <_strtod_l+0x98e>
    6f52:	ed8d 7b04 	vstr	d7, [sp, #16]
    6f56:	9b08      	ldr	r3, [sp, #32]
    6f58:	b193      	cbz	r3, 6f80 <_strtod_l+0x9b8>
    6f5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6f5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    6f62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    6f66:	2b00      	cmp	r3, #0
    6f68:	dd0a      	ble.n	6f80 <_strtod_l+0x9b8>
    6f6a:	2b1f      	cmp	r3, #31
    6f6c:	f340 822f 	ble.w	73ce <_strtod_l+0xe06>
    6f70:	2000      	movs	r0, #0
    6f72:	2b34      	cmp	r3, #52	; 0x34
    6f74:	9004      	str	r0, [sp, #16]
    6f76:	f340 8240 	ble.w	73fa <_strtod_l+0xe32>
    6f7a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    6f7e:	9305      	str	r3, [sp, #20]
    6f80:	ed9d 7b04 	vldr	d7, [sp, #16]
    6f84:	eeb5 7b40 	vcmp.f64	d7, #0.0
    6f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f8c:	f47f ad1a 	bne.w	69c4 <_strtod_l+0x3fc>
    6f90:	2322      	movs	r3, #34	; 0x22
    6f92:	ed9f 8b05 	vldr	d8, [pc, #20]	; 6fa8 <_strtod_l+0x9e0>
    6f96:	f8c8 3000 	str.w	r3, [r8]
    6f9a:	e4d2      	b.n	6942 <_strtod_l+0x37a>
    6f9c:	2322      	movs	r3, #34	; 0x22
    6f9e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 6fb0 <_strtod_l+0x9e8>
    6fa2:	f8c8 3000 	str.w	r3, [r8]
    6fa6:	e4cc      	b.n	6942 <_strtod_l+0x37a>
	...
    6fb4:	7ff00000 	.word	0x7ff00000
    6fb8:	bff00000 	.word	0xbff00000
    6fbc:	7ff00000 	.word	0x7ff00000
    6fc0:	7c9fffff 	.word	0x7c9fffff
    6fc4:	7fefffff 	.word	0x7fefffff
    6fc8:	20000280 	.word	0x20000280
    6fcc:	7ca00000 	.word	0x7ca00000
    6fd0:	200002a8 	.word	0x200002a8
    6fd4:	20000370 	.word	0x20000370
    6fd8:	9302      	str	r3, [sp, #8]
    6fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6fdc:	9301      	str	r3, [sp, #4]
    6fde:	ab12      	add	r3, sp, #72	; 0x48
    6fe0:	9300      	str	r3, [sp, #0]
    6fe2:	4aa7      	ldr	r2, [pc, #668]	; (7280 <_strtod_l+0xcb8>)
    6fe4:	ab13      	add	r3, sp, #76	; 0x4c
    6fe6:	a911      	add	r1, sp, #68	; 0x44
    6fe8:	4640      	mov	r0, r8
    6fea:	f001 fd53 	bl	8a94 <__gethex>
    6fee:	f010 050f 	ands.w	r5, r0, #15
    6ff2:	4604      	mov	r4, r0
    6ff4:	f43f aca3 	beq.w	693e <_strtod_l+0x376>
    6ff8:	2d06      	cmp	r5, #6
    6ffa:	d174      	bne.n	70e6 <_strtod_l+0xb1e>
    6ffc:	9b07      	ldr	r3, [sp, #28]
    6ffe:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 7268 <_strtod_l+0xca0>
    7002:	3701      	adds	r7, #1
    7004:	2b00      	cmp	r3, #0
    7006:	f43f abce 	beq.w	67a6 <_strtod_l+0x1de>
    700a:	601f      	str	r7, [r3, #0]
    700c:	f7ff bbcb 	b.w	67a6 <_strtod_l+0x1de>
    7010:	ed9d 8b04 	vldr	d8, [sp, #16]
    7014:	e495      	b.n	6942 <_strtod_l+0x37a>
    7016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7018:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    701c:	4403      	add	r3, r0
    701e:	930b      	str	r3, [sp, #44]	; 0x2c
    7020:	2801      	cmp	r0, #1
    7022:	f105 0301 	add.w	r3, r5, #1
    7026:	461a      	mov	r2, r3
    7028:	d014      	beq.n	7054 <_strtod_l+0xa8c>
    702a:	4428      	add	r0, r5
    702c:	1e44      	subs	r4, r0, #1
    702e:	e003      	b.n	7038 <_strtod_l+0xa70>
    7030:	0046      	lsls	r6, r0, #1
    7032:	429c      	cmp	r4, r3
    7034:	d00d      	beq.n	7052 <_strtod_l+0xa8a>
    7036:	3301      	adds	r3, #1
    7038:	462a      	mov	r2, r5
    703a:	2a08      	cmp	r2, #8
    703c:	461d      	mov	r5, r3
    703e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    7042:	d9f5      	bls.n	7030 <_strtod_l+0xa68>
    7044:	2b10      	cmp	r3, #16
    7046:	bfdc      	itt	le
    7048:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    704c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    7050:	e7ef      	b.n	7032 <_strtod_l+0xa6a>
    7052:	3202      	adds	r2, #2
    7054:	2d08      	cmp	r5, #8
    7056:	dc3c      	bgt.n	70d2 <_strtod_l+0xb0a>
    7058:	4615      	mov	r5, r2
    705a:	f7ff bb79 	b.w	6750 <_strtod_l+0x188>
    705e:	4989      	ldr	r1, [pc, #548]	; (7284 <_strtod_l+0xcbc>)
    7060:	2201      	movs	r2, #1
    7062:	4638      	mov	r0, r7
    7064:	f000 fdac 	bl	7bc0 <strncmp>
    7068:	2800      	cmp	r0, #0
    706a:	f000 8082 	beq.w	7172 <_strtod_l+0xbaa>
    706e:	f04f 0e00 	mov.w	lr, #0
    7072:	46f1      	mov	r9, lr
    7074:	4676      	mov	r6, lr
    7076:	4675      	mov	r5, lr
    7078:	f7ff bbb5 	b.w	67e6 <_strtod_l+0x21e>
    707c:	f644 631f 	movw	r3, #19999	; 0x4e1f
    7080:	459b      	cmp	fp, r3
    7082:	bfa8      	it	ge
    7084:	469b      	movge	fp, r3
    7086:	e42f      	b.n	68e8 <_strtod_l+0x320>
    7088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    708c:	4618      	mov	r0, r3
    708e:	2b00      	cmp	r3, #0
    7090:	f47f ae23 	bne.w	6cda <_strtod_l+0x712>
    7094:	2322      	movs	r3, #34	; 0x22
    7096:	ed9f 8b74 	vldr	d8, [pc, #464]	; 7268 <_strtod_l+0xca0>
    709a:	9812      	ldr	r0, [sp, #72]	; 0x48
    709c:	f8c8 3000 	str.w	r3, [r8]
    70a0:	e678      	b.n	6d94 <_strtod_l+0x7cc>
    70a2:	eeb0 7b49 	vmov.f64	d7, d9
    70a6:	e6c0      	b.n	6e2a <_strtod_l+0x862>
    70a8:	4977      	ldr	r1, [pc, #476]	; (7288 <_strtod_l+0xcc0>)
    70aa:	a811      	add	r0, sp, #68	; 0x44
    70ac:	f001 ffbc 	bl	9028 <__match>
    70b0:	2800      	cmp	r0, #0
    70b2:	f43f ab71 	beq.w	6798 <_strtod_l+0x1d0>
    70b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70b8:	4974      	ldr	r1, [pc, #464]	; (728c <_strtod_l+0xcc4>)
    70ba:	3b01      	subs	r3, #1
    70bc:	a811      	add	r0, sp, #68	; 0x44
    70be:	9311      	str	r3, [sp, #68]	; 0x44
    70c0:	f001 ffb2 	bl	9028 <__match>
    70c4:	b910      	cbnz	r0, 70cc <_strtod_l+0xb04>
    70c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70c8:	3301      	adds	r3, #1
    70ca:	9311      	str	r3, [sp, #68]	; 0x44
    70cc:	ed9f 8b68 	vldr	d8, [pc, #416]	; 7270 <_strtod_l+0xca8>
    70d0:	e437      	b.n	6942 <_strtod_l+0x37a>
    70d2:	2a10      	cmp	r2, #16
    70d4:	bfdc      	itt	le
    70d6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    70da:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    70de:	4615      	mov	r5, r2
    70e0:	2000      	movs	r0, #0
    70e2:	f7ff bb3a 	b.w	675a <_strtod_l+0x192>
    70e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    70e8:	b13a      	cbz	r2, 70fa <_strtod_l+0xb32>
    70ea:	2135      	movs	r1, #53	; 0x35
    70ec:	a814      	add	r0, sp, #80	; 0x50
    70ee:	f002 fd7f 	bl	9bf0 <__copybits>
    70f2:	9912      	ldr	r1, [sp, #72]	; 0x48
    70f4:	4640      	mov	r0, r8
    70f6:	f002 f8c7 	bl	9288 <_Bfree>
    70fa:	3d01      	subs	r5, #1
    70fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    70fe:	2d04      	cmp	r5, #4
    7100:	f200 818f 	bhi.w	7422 <_strtod_l+0xe5a>
    7104:	e8df f005 	tbb	[pc, r5]
    7108:	1f2a2d03 	.word	0x1f2a2d03
    710c:	03          	.byte	0x03
    710d:	00          	.byte	0x00
    710e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    7110:	9204      	str	r2, [sp, #16]
    7112:	f203 4233 	addw	r2, r3, #1075	; 0x433
    7116:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7118:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    711c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    7120:	9305      	str	r3, [sp, #20]
    7122:	05e5      	lsls	r5, r4, #23
    7124:	d502      	bpl.n	712c <_strtod_l+0xb64>
    7126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    712a:	9305      	str	r3, [sp, #20]
    712c:	4a58      	ldr	r2, [pc, #352]	; (7290 <_strtod_l+0xcc8>)
    712e:	401a      	ands	r2, r3
    7130:	ed9d 8b04 	vldr	d8, [sp, #16]
    7134:	2a00      	cmp	r2, #0
    7136:	f47f ac04 	bne.w	6942 <_strtod_l+0x37a>
    713a:	f001 f839 	bl	81b0 <__errno>
    713e:	2322      	movs	r3, #34	; 0x22
    7140:	6003      	str	r3, [r0, #0]
    7142:	f7ff bbfe 	b.w	6942 <_strtod_l+0x37a>
    7146:	f04f 33ff 	mov.w	r3, #4294967295
    714a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    714e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    7152:	05e3      	lsls	r3, r4, #23
    7154:	f57f af5c 	bpl.w	7010 <_strtod_l+0xa48>
    7158:	9b05      	ldr	r3, [sp, #20]
    715a:	e7e4      	b.n	7126 <_strtod_l+0xb5e>
    715c:	4b4c      	ldr	r3, [pc, #304]	; (7290 <_strtod_l+0xcc8>)
    715e:	9305      	str	r3, [sp, #20]
    7160:	e7f7      	b.n	7152 <_strtod_l+0xb8a>
    7162:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7164:	9304      	str	r3, [sp, #16]
    7166:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7168:	9305      	str	r3, [sp, #20]
    716a:	e7da      	b.n	7122 <_strtod_l+0xb5a>
    716c:	2000      	movs	r0, #0
    716e:	f7ff bae1 	b.w	6734 <_strtod_l+0x16c>
    7172:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7174:	461a      	mov	r2, r3
    7176:	3301      	adds	r3, #1
    7178:	9311      	str	r3, [sp, #68]	; 0x44
    717a:	7854      	ldrb	r4, [r2, #1]
    717c:	4606      	mov	r6, r0
    717e:	4681      	mov	r9, r0
    7180:	f7ff bacd 	b.w	671e <_strtod_l+0x156>
    7184:	4b43      	ldr	r3, [pc, #268]	; (7294 <_strtod_l+0xccc>)
    7186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    718a:	ed93 8b00 	vldr	d8, [r3]
    718e:	ed9d 7b04 	vldr	d7, [sp, #16]
    7192:	ee28 8b07 	vmul.f64	d8, d8, d7
    7196:	f7ff bbd4 	b.w	6942 <_strtod_l+0x37a>
    719a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    719e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    71a2:	e511      	b.n	6bc8 <_strtod_l+0x600>
    71a4:	46ae      	mov	lr, r5
    71a6:	900b      	str	r0, [sp, #44]	; 0x2c
    71a8:	f7ff badc 	b.w	6764 <_strtod_l+0x19c>
    71ac:	4b39      	ldr	r3, [pc, #228]	; (7294 <_strtod_l+0xccc>)
    71ae:	f1c5 050f 	rsb	r5, r5, #15
    71b2:	1b4a      	subs	r2, r1, r5
    71b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    71b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    71bc:	ed95 8b00 	vldr	d8, [r5]
    71c0:	ed93 7b00 	vldr	d7, [r3]
    71c4:	ed9d 6b04 	vldr	d6, [sp, #16]
    71c8:	ee28 8b06 	vmul.f64	d8, d8, d6
    71cc:	ee28 8b07 	vmul.f64	d8, d8, d7
    71d0:	f7ff bbb7 	b.w	6942 <_strtod_l+0x37a>
    71d4:	2d00      	cmp	r5, #0
    71d6:	f000 8095 	beq.w	7304 <_strtod_l+0xd3c>
    71da:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    71de:	4b2e      	ldr	r3, [pc, #184]	; (7298 <_strtod_l+0xcd0>)
    71e0:	f3cc 0113 	ubfx	r1, ip, #0, #20
    71e4:	4299      	cmp	r1, r3
    71e6:	4662      	mov	r2, ip
    71e8:	f000 80d2 	beq.w	7390 <_strtod_l+0xdc8>
    71ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    71ee:	2b00      	cmp	r3, #0
    71f0:	f000 80a5 	beq.w	733e <_strtod_l+0xd76>
    71f4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    71f8:	4213      	tst	r3, r2
    71fa:	4617      	mov	r7, r2
    71fc:	d01a      	beq.n	7234 <_strtod_l+0xc6c>
    71fe:	eeb0 0b48 	vmov.f64	d0, d8
    7202:	2d00      	cmp	r5, #0
    7204:	f000 80a6 	beq.w	7354 <_strtod_l+0xd8c>
    7208:	f002 fbc2 	bl	9990 <__ulp>
    720c:	9b08      	ldr	r3, [sp, #32]
    720e:	b17b      	cbz	r3, 7230 <_strtod_l+0xc68>
    7210:	f3c7 530a 	ubfx	r3, r7, #20, #11
    7214:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    7218:	2b00      	cmp	r3, #0
    721a:	dd09      	ble.n	7230 <_strtod_l+0xc68>
    721c:	051b      	lsls	r3, r3, #20
    721e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    7222:	2000      	movs	r0, #0
    7224:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    7228:	ec41 0b17 	vmov	d7, r0, r1
    722c:	ee20 0b07 	vmul.f64	d0, d0, d7
    7230:	ee38 8b00 	vadd.f64	d8, d8, d0
    7234:	9b08      	ldr	r3, [sp, #32]
    7236:	b15b      	cbz	r3, 7250 <_strtod_l+0xc88>
    7238:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 7278 <_strtod_l+0xcb0>
    723c:	4b14      	ldr	r3, [pc, #80]	; (7290 <_strtod_l+0xcc8>)
    723e:	ee28 8b07 	vmul.f64	d8, d8, d7
    7242:	ee18 2a90 	vmov	r2, s17
    7246:	4013      	ands	r3, r2
    7248:	b913      	cbnz	r3, 7250 <_strtod_l+0xc88>
    724a:	2322      	movs	r3, #34	; 0x22
    724c:	f8c8 3000 	str.w	r3, [r8]
    7250:	9812      	ldr	r0, [sp, #72]	; 0x48
    7252:	e59f      	b.n	6d94 <_strtod_l+0x7cc>
    7254:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    7258:	9305      	str	r3, [sp, #20]
    725a:	2300      	movs	r3, #0
    725c:	9308      	str	r3, [sp, #32]
    725e:	f7ff bbb1 	b.w	69c4 <_strtod_l+0x3fc>
    7262:	bf00      	nop
    7264:	f3af 8000 	nop.w
	...
    7274:	7ff00000 	.word	0x7ff00000
    7278:	00000000 	.word	0x00000000
    727c:	39500000 	.word	0x39500000
    7280:	20001024 	.word	0x20001024
    7284:	20000c58 	.word	0x20000c58
    7288:	20000c5c 	.word	0x20000c5c
    728c:	20000c60 	.word	0x20000c60
    7290:	7ff00000 	.word	0x7ff00000
    7294:	200002a8 	.word	0x200002a8
    7298:	000fffff 	.word	0x000fffff
    729c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    72a0:	430d      	orrs	r5, r1
    72a2:	d1c7      	bne.n	7234 <_strtod_l+0xc6c>
    72a4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    72a8:	4617      	mov	r7, r2
    72aa:	2b00      	cmp	r3, #0
    72ac:	d1c2      	bne.n	7234 <_strtod_l+0xc6c>
    72ae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    72b2:	0d1b      	lsrs	r3, r3, #20
    72b4:	051b      	lsls	r3, r3, #20
    72b6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    72ba:	d9bb      	bls.n	7234 <_strtod_l+0xc6c>
    72bc:	f8da 3014 	ldr.w	r3, [sl, #20]
    72c0:	b91b      	cbnz	r3, 72ca <_strtod_l+0xd02>
    72c2:	f8da 3010 	ldr.w	r3, [sl, #16]
    72c6:	2b01      	cmp	r3, #1
    72c8:	ddb4      	ble.n	7234 <_strtod_l+0xc6c>
    72ca:	4651      	mov	r1, sl
    72cc:	2201      	movs	r2, #1
    72ce:	4640      	mov	r0, r8
    72d0:	f002 fa1a 	bl	9708 <__lshift>
    72d4:	4621      	mov	r1, r4
    72d6:	4682      	mov	sl, r0
    72d8:	f002 fa8e 	bl	97f8 <__mcmp>
    72dc:	2800      	cmp	r0, #0
    72de:	dda9      	ble.n	7234 <_strtod_l+0xc6c>
    72e0:	9b08      	ldr	r3, [sp, #32]
    72e2:	2b00      	cmp	r3, #0
    72e4:	d17e      	bne.n	73e4 <_strtod_l+0xe1c>
    72e6:	4b50      	ldr	r3, [pc, #320]	; (7428 <_strtod_l+0xe60>)
    72e8:	403b      	ands	r3, r7
    72ea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    72ee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    72f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    72f6:	9305      	str	r3, [sp, #20]
    72f8:	f04f 33ff 	mov.w	r3, #4294967295
    72fc:	9304      	str	r3, [sp, #16]
    72fe:	ed9d 8b04 	vldr	d8, [sp, #16]
    7302:	e797      	b.n	7234 <_strtod_l+0xc6c>
    7304:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    7308:	f3c2 0313 	ubfx	r3, r2, #0, #20
    730c:	430b      	orrs	r3, r1
    730e:	4617      	mov	r7, r2
    7310:	f47f af6c 	bne.w	71ec <_strtod_l+0xc24>
    7314:	e7e4      	b.n	72e0 <_strtod_l+0xd18>
    7316:	4945      	ldr	r1, [pc, #276]	; (742c <_strtod_l+0xe64>)
    7318:	a811      	add	r0, sp, #68	; 0x44
    731a:	aa14      	add	r2, sp, #80	; 0x50
    731c:	f001 fea0 	bl	9060 <__hexnan>
    7320:	2805      	cmp	r0, #5
    7322:	f47f ab06 	bne.w	6932 <_strtod_l+0x36a>
    7326:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7328:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    732c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    7330:	9305      	str	r3, [sp, #20]
    7332:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7334:	9304      	str	r3, [sp, #16]
    7336:	ed9d 8b04 	vldr	d8, [sp, #16]
    733a:	f7ff bb02 	b.w	6942 <_strtod_l+0x37a>
    733e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    7342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7344:	4203      	tst	r3, r0
    7346:	f43f af75 	beq.w	7234 <_strtod_l+0xc6c>
    734a:	460f      	mov	r7, r1
    734c:	e757      	b.n	71fe <_strtod_l+0xc36>
    734e:	4c38      	ldr	r4, [pc, #224]	; (7430 <_strtod_l+0xe68>)
    7350:	2100      	movs	r1, #0
    7352:	e58f      	b.n	6e74 <_strtod_l+0x8ac>
    7354:	f002 fb1c 	bl	9990 <__ulp>
    7358:	9b08      	ldr	r3, [sp, #32]
    735a:	2b00      	cmp	r3, #0
    735c:	d055      	beq.n	740a <_strtod_l+0xe42>
    735e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    7362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    7366:	2b00      	cmp	r3, #0
    7368:	dd09      	ble.n	737e <_strtod_l+0xdb6>
    736a:	051b      	lsls	r3, r3, #20
    736c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    7370:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    7374:	4628      	mov	r0, r5
    7376:	ec41 0b17 	vmov	d7, r0, r1
    737a:	ee20 0b07 	vmul.f64	d0, d0, d7
    737e:	ee38 8b40 	vsub.f64	d8, d8, d0
    7382:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    738a:	f47f af55 	bne.w	7238 <_strtod_l+0xc70>
    738e:	e681      	b.n	7094 <_strtod_l+0xacc>
    7390:	9b08      	ldr	r3, [sp, #32]
    7392:	9904      	ldr	r1, [sp, #16]
    7394:	b31b      	cbz	r3, 73de <_strtod_l+0xe16>
    7396:	4b24      	ldr	r3, [pc, #144]	; (7428 <_strtod_l+0xe60>)
    7398:	4013      	ands	r3, r2
    739a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    739e:	d81e      	bhi.n	73de <_strtod_l+0xe16>
    73a0:	0d1b      	lsrs	r3, r3, #20
    73a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    73a6:	f04f 30ff 	mov.w	r0, #4294967295
    73aa:	fa00 f303 	lsl.w	r3, r0, r3
    73ae:	4299      	cmp	r1, r3
    73b0:	f47f af1c 	bne.w	71ec <_strtod_l+0xc24>
    73b4:	4b1f      	ldr	r3, [pc, #124]	; (7434 <_strtod_l+0xe6c>)
    73b6:	429a      	cmp	r2, r3
    73b8:	d030      	beq.n	741c <_strtod_l+0xe54>
    73ba:	4b1b      	ldr	r3, [pc, #108]	; (7428 <_strtod_l+0xe60>)
    73bc:	4013      	ands	r3, r2
    73be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    73c2:	9305      	str	r3, [sp, #20]
    73c4:	2300      	movs	r3, #0
    73c6:	9304      	str	r3, [sp, #16]
    73c8:	ed9d 8b04 	vldr	d8, [sp, #16]
    73cc:	e732      	b.n	7234 <_strtod_l+0xc6c>
    73ce:	f04f 32ff 	mov.w	r2, #4294967295
    73d2:	fa02 f303 	lsl.w	r3, r2, r3
    73d6:	9a04      	ldr	r2, [sp, #16]
    73d8:	401a      	ands	r2, r3
    73da:	9204      	str	r2, [sp, #16]
    73dc:	e5d0      	b.n	6f80 <_strtod_l+0x9b8>
    73de:	f04f 33ff 	mov.w	r3, #4294967295
    73e2:	e7e4      	b.n	73ae <_strtod_l+0xde6>
    73e4:	4b10      	ldr	r3, [pc, #64]	; (7428 <_strtod_l+0xe60>)
    73e6:	403b      	ands	r3, r7
    73e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    73ec:	f73f af7d 	bgt.w	72ea <_strtod_l+0xd22>
    73f0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    73f4:	f73f af20 	bgt.w	7238 <_strtod_l+0xc70>
    73f8:	e64c      	b.n	7094 <_strtod_l+0xacc>
    73fa:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    73fe:	f04f 33ff 	mov.w	r3, #4294967295
    7402:	4093      	lsls	r3, r2
    7404:	400b      	ands	r3, r1
    7406:	9305      	str	r3, [sp, #20]
    7408:	e5ba      	b.n	6f80 <_strtod_l+0x9b8>
    740a:	ee38 8b40 	vsub.f64	d8, d8, d0
    740e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    7412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7416:	f47f af1b 	bne.w	7250 <_strtod_l+0xc88>
    741a:	e63b      	b.n	7094 <_strtod_l+0xacc>
    741c:	3101      	adds	r1, #1
    741e:	d1cc      	bne.n	73ba <_strtod_l+0xdf2>
    7420:	e409      	b.n	6c36 <_strtod_l+0x66e>
    7422:	2300      	movs	r3, #0
    7424:	e67d      	b.n	7122 <_strtod_l+0xb5a>
    7426:	bf00      	nop
    7428:	7ff00000 	.word	0x7ff00000
    742c:	20001038 	.word	0x20001038
    7430:	20000280 	.word	0x20000280
    7434:	7fefffff 	.word	0x7fefffff

00007438 <strtof>:
    7438:	b510      	push	{r4, lr}
    743a:	4c23      	ldr	r4, [pc, #140]	; (74c8 <strtof+0x90>)
    743c:	4b23      	ldr	r3, [pc, #140]	; (74cc <strtof+0x94>)
    743e:	4684      	mov	ip, r0
    7440:	460a      	mov	r2, r1
    7442:	6820      	ldr	r0, [r4, #0]
    7444:	4661      	mov	r1, ip
    7446:	f7ff f8bf 	bl	65c8 <_strtod_l>
    744a:	eeb4 0b40 	vcmp.f64	d0, d0
    744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7452:	d627      	bvs.n	74a4 <strtof+0x6c>
    7454:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    7458:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 74d0 <strtof+0x98>
    745c:	eef0 6ae7 	vabs.f32	s13, s15
    7460:	eef4 6a47 	vcmp.f32	s13, s14
    7464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7468:	dd0e      	ble.n	7488 <strtof+0x50>
    746a:	eeb0 5bc0 	vabs.f64	d5, d0
    746e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 74c0 <strtof+0x88>
    7472:	eeb4 5b46 	vcmp.f64	d5, d6
    7476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    747a:	dc05      	bgt.n	7488 <strtof+0x50>
    747c:	6823      	ldr	r3, [r4, #0]
    747e:	2222      	movs	r2, #34	; 0x22
    7480:	601a      	str	r2, [r3, #0]
    7482:	eeb0 0a67 	vmov.f32	s0, s15
    7486:	bd10      	pop	{r4, pc}
    7488:	ee17 3a90 	vmov	r3, s15
    748c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    7490:	d1f7      	bne.n	7482 <strtof+0x4a>
    7492:	4b10      	ldr	r3, [pc, #64]	; (74d4 <strtof+0x9c>)
    7494:	ee10 2a90 	vmov	r2, s1
    7498:	4013      	ands	r3, r2
    749a:	2b00      	cmp	r3, #0
    749c:	d1ee      	bne.n	747c <strtof+0x44>
    749e:	eeb0 0a67 	vmov.f32	s0, s15
    74a2:	bd10      	pop	{r4, pc}
    74a4:	ee10 3a90 	vmov	r3, s1
    74a8:	2b00      	cmp	r3, #0
    74aa:	480b      	ldr	r0, [pc, #44]	; (74d8 <strtof+0xa0>)
    74ac:	da04      	bge.n	74b8 <strtof+0x80>
    74ae:	f001 f8ff 	bl	86b0 <nanf>
    74b2:	eef1 7a40 	vneg.f32	s15, s0
    74b6:	e7e4      	b.n	7482 <strtof+0x4a>
    74b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74bc:	f001 b8f8 	b.w	86b0 <nanf>
    74c0:	ffffffff 	.word	0xffffffff
    74c4:	7fefffff 	.word	0x7fefffff
    74c8:	20001b68 	.word	0x20001b68
    74cc:	200015e0 	.word	0x200015e0
    74d0:	7f7fffff 	.word	0x7f7fffff
    74d4:	7ff00000 	.word	0x7ff00000
    74d8:	20000628 	.word	0x20000628

000074dc <_strtol_l.constprop.0>:
    74dc:	2b01      	cmp	r3, #1
    74de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74e2:	d040      	beq.n	7566 <_strtol_l.constprop.0+0x8a>
    74e4:	2b24      	cmp	r3, #36	; 0x24
    74e6:	4698      	mov	r8, r3
    74e8:	d83d      	bhi.n	7566 <_strtol_l.constprop.0+0x8a>
    74ea:	4d4c      	ldr	r5, [pc, #304]	; (761c <_strtol_l.constprop.0+0x140>)
    74ec:	468e      	mov	lr, r1
    74ee:	4676      	mov	r6, lr
    74f0:	f81e bb01 	ldrb.w	fp, [lr], #1
    74f4:	f815 400b 	ldrb.w	r4, [r5, fp]
    74f8:	f014 0408 	ands.w	r4, r4, #8
    74fc:	d1f7      	bne.n	74ee <_strtol_l.constprop.0+0x12>
    74fe:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    7502:	d072      	beq.n	75ea <_strtol_l.constprop.0+0x10e>
    7504:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    7508:	bf08      	it	eq
    750a:	f89e b000 	ldrbeq.w	fp, [lr]
    750e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    7512:	bf08      	it	eq
    7514:	f106 0e02 	addeq.w	lr, r6, #2
    7518:	2b00      	cmp	r3, #0
    751a:	d042      	beq.n	75a2 <_strtol_l.constprop.0+0xc6>
    751c:	2b10      	cmp	r3, #16
    751e:	d057      	beq.n	75d0 <_strtol_l.constprop.0+0xf4>
    7520:	fbb9 f7f8 	udiv	r7, r9, r8
    7524:	2500      	movs	r5, #0
    7526:	462e      	mov	r6, r5
    7528:	fb08 9a17 	mls	sl, r8, r7, r9
    752c:	e005      	b.n	753a <_strtol_l.constprop.0+0x5e>
    752e:	d033      	beq.n	7598 <_strtol_l.constprop.0+0xbc>
    7530:	fb08 c606 	mla	r6, r8, r6, ip
    7534:	2501      	movs	r5, #1
    7536:	f81e bb01 	ldrb.w	fp, [lr], #1
    753a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    753e:	f1bc 0f09 	cmp.w	ip, #9
    7542:	d906      	bls.n	7552 <_strtol_l.constprop.0+0x76>
    7544:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    7548:	f1bc 0f19 	cmp.w	ip, #25
    754c:	d812      	bhi.n	7574 <_strtol_l.constprop.0+0x98>
    754e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    7552:	4563      	cmp	r3, ip
    7554:	dd17      	ble.n	7586 <_strtol_l.constprop.0+0xaa>
    7556:	f1b5 3fff 	cmp.w	r5, #4294967295
    755a:	d0ec      	beq.n	7536 <_strtol_l.constprop.0+0x5a>
    755c:	42b7      	cmp	r7, r6
    755e:	d2e6      	bcs.n	752e <_strtol_l.constprop.0+0x52>
    7560:	f04f 35ff 	mov.w	r5, #4294967295
    7564:	e7e7      	b.n	7536 <_strtol_l.constprop.0+0x5a>
    7566:	f000 fe23 	bl	81b0 <__errno>
    756a:	2316      	movs	r3, #22
    756c:	6003      	str	r3, [r0, #0]
    756e:	2000      	movs	r0, #0
    7570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7574:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    7578:	f1bc 0f19 	cmp.w	ip, #25
    757c:	d803      	bhi.n	7586 <_strtol_l.constprop.0+0xaa>
    757e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    7582:	4563      	cmp	r3, ip
    7584:	dce7      	bgt.n	7556 <_strtol_l.constprop.0+0x7a>
    7586:	1c6b      	adds	r3, r5, #1
    7588:	d027      	beq.n	75da <_strtol_l.constprop.0+0xfe>
    758a:	b98c      	cbnz	r4, 75b0 <_strtol_l.constprop.0+0xd4>
    758c:	b10a      	cbz	r2, 7592 <_strtol_l.constprop.0+0xb6>
    758e:	bba5      	cbnz	r5, 75fa <_strtol_l.constprop.0+0x11e>
    7590:	6011      	str	r1, [r2, #0]
    7592:	4630      	mov	r0, r6
    7594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7598:	45e2      	cmp	sl, ip
    759a:	dac9      	bge.n	7530 <_strtol_l.constprop.0+0x54>
    759c:	f04f 35ff 	mov.w	r5, #4294967295
    75a0:	e7c9      	b.n	7536 <_strtol_l.constprop.0+0x5a>
    75a2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    75a6:	d005      	beq.n	75b4 <_strtol_l.constprop.0+0xd8>
    75a8:	f04f 080a 	mov.w	r8, #10
    75ac:	4643      	mov	r3, r8
    75ae:	e7b7      	b.n	7520 <_strtol_l.constprop.0+0x44>
    75b0:	4276      	negs	r6, r6
    75b2:	e7eb      	b.n	758c <_strtol_l.constprop.0+0xb0>
    75b4:	f89e 3000 	ldrb.w	r3, [lr]
    75b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    75bc:	2b58      	cmp	r3, #88	; 0x58
    75be:	d121      	bne.n	7604 <_strtol_l.constprop.0+0x128>
    75c0:	f04f 0810 	mov.w	r8, #16
    75c4:	f89e b001 	ldrb.w	fp, [lr, #1]
    75c8:	4643      	mov	r3, r8
    75ca:	f10e 0e02 	add.w	lr, lr, #2
    75ce:	e7a7      	b.n	7520 <_strtol_l.constprop.0+0x44>
    75d0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    75d4:	d01a      	beq.n	760c <_strtol_l.constprop.0+0x130>
    75d6:	4698      	mov	r8, r3
    75d8:	e7a2      	b.n	7520 <_strtol_l.constprop.0+0x44>
    75da:	2322      	movs	r3, #34	; 0x22
    75dc:	6003      	str	r3, [r0, #0]
    75de:	b172      	cbz	r2, 75fe <_strtol_l.constprop.0+0x122>
    75e0:	f10e 31ff 	add.w	r1, lr, #4294967295
    75e4:	464e      	mov	r6, r9
    75e6:	6011      	str	r1, [r2, #0]
    75e8:	e7d3      	b.n	7592 <_strtol_l.constprop.0+0xb6>
    75ea:	f89e b000 	ldrb.w	fp, [lr]
    75ee:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    75f2:	f106 0e02 	add.w	lr, r6, #2
    75f6:	2401      	movs	r4, #1
    75f8:	e78e      	b.n	7518 <_strtol_l.constprop.0+0x3c>
    75fa:	46b1      	mov	r9, r6
    75fc:	e7f0      	b.n	75e0 <_strtol_l.constprop.0+0x104>
    75fe:	464e      	mov	r6, r9
    7600:	4630      	mov	r0, r6
    7602:	e7c7      	b.n	7594 <_strtol_l.constprop.0+0xb8>
    7604:	f04f 0808 	mov.w	r8, #8
    7608:	4643      	mov	r3, r8
    760a:	e789      	b.n	7520 <_strtol_l.constprop.0+0x44>
    760c:	f89e 5000 	ldrb.w	r5, [lr]
    7610:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    7614:	2d58      	cmp	r5, #88	; 0x58
    7616:	d0d3      	beq.n	75c0 <_strtol_l.constprop.0+0xe4>
    7618:	4698      	mov	r8, r3
    761a:	e781      	b.n	7520 <_strtol_l.constprop.0+0x44>
    761c:	20000ae9 	.word	0x20000ae9

00007620 <strtol>:
    7620:	b410      	push	{r4}
    7622:	4c05      	ldr	r4, [pc, #20]	; (7638 <strtol+0x18>)
    7624:	4684      	mov	ip, r0
    7626:	4613      	mov	r3, r2
    7628:	6820      	ldr	r0, [r4, #0]
    762a:	f85d 4b04 	ldr.w	r4, [sp], #4
    762e:	460a      	mov	r2, r1
    7630:	4661      	mov	r1, ip
    7632:	f7ff bf53 	b.w	74dc <_strtol_l.constprop.0>
    7636:	bf00      	nop
    7638:	20001b68 	.word	0x20001b68

0000763c <__utoa>:
    763c:	b5f0      	push	{r4, r5, r6, r7, lr}
    763e:	4f25      	ldr	r7, [pc, #148]	; (76d4 <__utoa+0x98>)
    7640:	f1a2 0e02 	sub.w	lr, r2, #2
    7644:	4616      	mov	r6, r2
    7646:	4605      	mov	r5, r0
    7648:	460c      	mov	r4, r1
    764a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    764c:	b08b      	sub	sp, #44	; 0x2c
    764e:	46ec      	mov	ip, sp
    7650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7654:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    7656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    765a:	e897 0003 	ldmia.w	r7, {r0, r1}
    765e:	f84c 0b04 	str.w	r0, [ip], #4
    7662:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    7666:	f88c 1000 	strb.w	r1, [ip]
    766a:	d82e      	bhi.n	76ca <__utoa+0x8e>
    766c:	f104 3eff 	add.w	lr, r4, #4294967295
    7670:	4670      	mov	r0, lr
    7672:	f04f 0c00 	mov.w	ip, #0
    7676:	fbb5 f2f6 	udiv	r2, r5, r6
    767a:	fb06 5312 	mls	r3, r6, r2, r5
    767e:	3328      	adds	r3, #40	; 0x28
    7680:	446b      	add	r3, sp
    7682:	4661      	mov	r1, ip
    7684:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    7688:	f800 cf01 	strb.w	ip, [r0, #1]!
    768c:	462b      	mov	r3, r5
    768e:	429e      	cmp	r6, r3
    7690:	f101 0c01 	add.w	ip, r1, #1
    7694:	4615      	mov	r5, r2
    7696:	d9ee      	bls.n	7676 <__utoa+0x3a>
    7698:	2300      	movs	r3, #0
    769a:	f804 300c 	strb.w	r3, [r4, ip]
    769e:	b189      	cbz	r1, 76c4 <__utoa+0x88>
    76a0:	44a4      	add	ip, r4
    76a2:	4672      	mov	r2, lr
    76a4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    76a8:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    76ac:	f88e 5000 	strb.w	r5, [lr]
    76b0:	eba4 030e 	sub.w	r3, r4, lr
    76b4:	3202      	adds	r2, #2
    76b6:	3b01      	subs	r3, #1
    76b8:	1b12      	subs	r2, r2, r4
    76ba:	440b      	add	r3, r1
    76bc:	429a      	cmp	r2, r3
    76be:	f88c 0000 	strb.w	r0, [ip]
    76c2:	dbee      	blt.n	76a2 <__utoa+0x66>
    76c4:	4620      	mov	r0, r4
    76c6:	b00b      	add	sp, #44	; 0x2c
    76c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76ca:	2300      	movs	r3, #0
    76cc:	4618      	mov	r0, r3
    76ce:	7023      	strb	r3, [r4, #0]
    76d0:	b00b      	add	sp, #44	; 0x2c
    76d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76d4:	20000ac0 	.word	0x20000ac0

000076d8 <__cxa_atexit>:
    76d8:	4613      	mov	r3, r2
    76da:	460a      	mov	r2, r1
    76dc:	4601      	mov	r1, r0
    76de:	2002      	movs	r0, #2
    76e0:	f000 bfec 	b.w	86bc <__register_exitproc>

000076e4 <fcvtf>:
    76e4:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    76e8:	2300      	movs	r3, #0
    76ea:	f002 baef 	b.w	9ccc <fcvtbuf>
    76ee:	bf00      	nop

000076f0 <tolower>:
    76f0:	4b03      	ldr	r3, [pc, #12]	; (7700 <tolower+0x10>)
    76f2:	5c1b      	ldrb	r3, [r3, r0]
    76f4:	f003 0303 	and.w	r3, r3, #3
    76f8:	2b01      	cmp	r3, #1
    76fa:	bf08      	it	eq
    76fc:	3020      	addeq	r0, #32
    76fe:	4770      	bx	lr
    7700:	20000ae9 	.word	0x20000ae9

00007704 <stdio_exit_handler>:
    7704:	4a02      	ldr	r2, [pc, #8]	; (7710 <stdio_exit_handler+0xc>)
    7706:	4903      	ldr	r1, [pc, #12]	; (7714 <stdio_exit_handler+0x10>)
    7708:	4803      	ldr	r0, [pc, #12]	; (7718 <stdio_exit_handler+0x14>)
    770a:	f000 b8bb 	b.w	7884 <_fwalk_sglue>
    770e:	bf00      	nop
    7710:	20001b5c 	.word	0x20001b5c
    7714:	00009d71 	.word	0x00009d71
    7718:	200011e0 	.word	0x200011e0

0000771c <cleanup_stdio>:
    771c:	4b0c      	ldr	r3, [pc, #48]	; (7750 <cleanup_stdio+0x34>)
    771e:	6841      	ldr	r1, [r0, #4]
    7720:	4299      	cmp	r1, r3
    7722:	b510      	push	{r4, lr}
    7724:	4604      	mov	r4, r0
    7726:	d001      	beq.n	772c <cleanup_stdio+0x10>
    7728:	f002 fb22 	bl	9d70 <_fclose_r>
    772c:	68a1      	ldr	r1, [r4, #8]
    772e:	4b09      	ldr	r3, [pc, #36]	; (7754 <cleanup_stdio+0x38>)
    7730:	4299      	cmp	r1, r3
    7732:	d002      	beq.n	773a <cleanup_stdio+0x1e>
    7734:	4620      	mov	r0, r4
    7736:	f002 fb1b 	bl	9d70 <_fclose_r>
    773a:	68e1      	ldr	r1, [r4, #12]
    773c:	4b06      	ldr	r3, [pc, #24]	; (7758 <cleanup_stdio+0x3c>)
    773e:	4299      	cmp	r1, r3
    7740:	d004      	beq.n	774c <cleanup_stdio+0x30>
    7742:	4620      	mov	r0, r4
    7744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7748:	f002 bb12 	b.w	9d70 <_fclose_r>
    774c:	bd10      	pop	{r4, pc}
    774e:	bf00      	nop
    7750:	20003194 	.word	0x20003194
    7754:	200031fc 	.word	0x200031fc
    7758:	20003264 	.word	0x20003264

0000775c <global_stdio_init.part.0>:
    775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7760:	4c2a      	ldr	r4, [pc, #168]	; (780c <global_stdio_init.part.0+0xb0>)
    7762:	4b2b      	ldr	r3, [pc, #172]	; (7810 <global_stdio_init.part.0+0xb4>)
    7764:	482b      	ldr	r0, [pc, #172]	; (7814 <global_stdio_init.part.0+0xb8>)
    7766:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7828 <global_stdio_init.part.0+0xcc>
    776a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 782c <global_stdio_init.part.0+0xd0>
    776e:	4f2a      	ldr	r7, [pc, #168]	; (7818 <global_stdio_init.part.0+0xbc>)
    7770:	6018      	str	r0, [r3, #0]
    7772:	2500      	movs	r5, #0
    7774:	2304      	movs	r3, #4
    7776:	2208      	movs	r2, #8
    7778:	4629      	mov	r1, r5
    777a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    777e:	4e27      	ldr	r6, [pc, #156]	; (781c <global_stdio_init.part.0+0xc0>)
    7780:	6665      	str	r5, [r4, #100]	; 0x64
    7782:	e9c4 5302 	strd	r5, r3, [r4, #8]
    7786:	e9c4 5500 	strd	r5, r5, [r4]
    778a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    778e:	61a5      	str	r5, [r4, #24]
    7790:	f000 f95e 	bl	7a50 <memset>
    7794:	4b22      	ldr	r3, [pc, #136]	; (7820 <global_stdio_init.part.0+0xc4>)
    7796:	6763      	str	r3, [r4, #116]	; 0x74
    7798:	2208      	movs	r2, #8
    779a:	4629      	mov	r1, r5
    779c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    77a0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    77a4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    77a8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    77ac:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    77b0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    77b4:	6725      	str	r5, [r4, #112]	; 0x70
    77b6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    77ba:	62e6      	str	r6, [r4, #44]	; 0x2c
    77bc:	f000 f948 	bl	7a50 <memset>
    77c0:	4b18      	ldr	r3, [pc, #96]	; (7824 <global_stdio_init.part.0+0xc8>)
    77c2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    77c6:	4629      	mov	r1, r5
    77c8:	f104 0368 	add.w	r3, r4, #104	; 0x68
    77cc:	2208      	movs	r2, #8
    77ce:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    77d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    77d6:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    77da:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    77de:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    77e2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    77e6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    77ea:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    77ee:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    77f2:	f000 f92d 	bl	7a50 <memset>
    77f6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    77fa:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    77fe:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    7802:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    7806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    780a:	bf00      	nop
    780c:	20003194 	.word	0x20003194
    7810:	200032cc 	.word	0x200032cc
    7814:	00007705 	.word	0x00007705
    7818:	00007931 	.word	0x00007931
    781c:	00007951 	.word	0x00007951
    7820:	00010009 	.word	0x00010009
    7824:	00020012 	.word	0x00020012
    7828:	000078cd 	.word	0x000078cd
    782c:	000078f1 	.word	0x000078f1

00007830 <__sinit>:
    7830:	b510      	push	{r4, lr}
    7832:	4604      	mov	r4, r0
    7834:	480a      	ldr	r0, [pc, #40]	; (7860 <__sinit+0x30>)
    7836:	f000 fce9 	bl	820c <__retarget_lock_acquire_recursive>
    783a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    783c:	b923      	cbnz	r3, 7848 <__sinit+0x18>
    783e:	4b09      	ldr	r3, [pc, #36]	; (7864 <__sinit+0x34>)
    7840:	4a09      	ldr	r2, [pc, #36]	; (7868 <__sinit+0x38>)
    7842:	681b      	ldr	r3, [r3, #0]
    7844:	6362      	str	r2, [r4, #52]	; 0x34
    7846:	b123      	cbz	r3, 7852 <__sinit+0x22>
    7848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    784c:	4804      	ldr	r0, [pc, #16]	; (7860 <__sinit+0x30>)
    784e:	f000 bcdf 	b.w	8210 <__retarget_lock_release_recursive>
    7852:	f7ff ff83 	bl	775c <global_stdio_init.part.0>
    7856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    785a:	4801      	ldr	r0, [pc, #4]	; (7860 <__sinit+0x30>)
    785c:	f000 bcd8 	b.w	8210 <__retarget_lock_release_recursive>
    7860:	2000315c 	.word	0x2000315c
    7864:	200032cc 	.word	0x200032cc
    7868:	0000771d 	.word	0x0000771d

0000786c <__sfp_lock_acquire>:
    786c:	4801      	ldr	r0, [pc, #4]	; (7874 <__sfp_lock_acquire+0x8>)
    786e:	f000 bccd 	b.w	820c <__retarget_lock_acquire_recursive>
    7872:	bf00      	nop
    7874:	2000315c 	.word	0x2000315c

00007878 <__sfp_lock_release>:
    7878:	4801      	ldr	r0, [pc, #4]	; (7880 <__sfp_lock_release+0x8>)
    787a:	f000 bcc9 	b.w	8210 <__retarget_lock_release_recursive>
    787e:	bf00      	nop
    7880:	2000315c 	.word	0x2000315c

00007884 <_fwalk_sglue>:
    7884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7888:	4680      	mov	r8, r0
    788a:	460f      	mov	r7, r1
    788c:	4616      	mov	r6, r2
    788e:	f04f 0900 	mov.w	r9, #0
    7892:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    7896:	3d01      	subs	r5, #1
    7898:	d411      	bmi.n	78be <_fwalk_sglue+0x3a>
    789a:	89a3      	ldrh	r3, [r4, #12]
    789c:	2b01      	cmp	r3, #1
    789e:	f105 35ff 	add.w	r5, r5, #4294967295
    78a2:	d908      	bls.n	78b6 <_fwalk_sglue+0x32>
    78a4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    78a8:	3301      	adds	r3, #1
    78aa:	4621      	mov	r1, r4
    78ac:	d003      	beq.n	78b6 <_fwalk_sglue+0x32>
    78ae:	4640      	mov	r0, r8
    78b0:	47b8      	blx	r7
    78b2:	ea49 0900 	orr.w	r9, r9, r0
    78b6:	1c6b      	adds	r3, r5, #1
    78b8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    78bc:	d1ed      	bne.n	789a <_fwalk_sglue+0x16>
    78be:	6836      	ldr	r6, [r6, #0]
    78c0:	2e00      	cmp	r6, #0
    78c2:	d1e6      	bne.n	7892 <_fwalk_sglue+0xe>
    78c4:	4648      	mov	r0, r9
    78c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78ca:	bf00      	nop

000078cc <__sread>:
    78cc:	b510      	push	{r4, lr}
    78ce:	460c      	mov	r4, r1
    78d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    78d4:	f000 fc2e 	bl	8134 <_read_r>
    78d8:	2800      	cmp	r0, #0
    78da:	db03      	blt.n	78e4 <__sread+0x18>
    78dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    78de:	4403      	add	r3, r0
    78e0:	6523      	str	r3, [r4, #80]	; 0x50
    78e2:	bd10      	pop	{r4, pc}
    78e4:	89a3      	ldrh	r3, [r4, #12]
    78e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    78ea:	81a3      	strh	r3, [r4, #12]
    78ec:	bd10      	pop	{r4, pc}
    78ee:	bf00      	nop

000078f0 <__swrite>:
    78f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78f4:	460c      	mov	r4, r1
    78f6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    78fa:	461f      	mov	r7, r3
    78fc:	05cb      	lsls	r3, r1, #23
    78fe:	4605      	mov	r5, r0
    7900:	4616      	mov	r6, r2
    7902:	d40b      	bmi.n	791c <__swrite+0x2c>
    7904:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    7908:	81a1      	strh	r1, [r4, #12]
    790a:	463b      	mov	r3, r7
    790c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7910:	4632      	mov	r2, r6
    7912:	4628      	mov	r0, r5
    7914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7918:	f000 bc34 	b.w	8184 <_write_r>
    791c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7920:	2302      	movs	r3, #2
    7922:	2200      	movs	r2, #0
    7924:	f000 fbf0 	bl	8108 <_lseek_r>
    7928:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    792c:	e7ea      	b.n	7904 <__swrite+0x14>
    792e:	bf00      	nop

00007930 <__sseek>:
    7930:	b510      	push	{r4, lr}
    7932:	460c      	mov	r4, r1
    7934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7938:	f000 fbe6 	bl	8108 <_lseek_r>
    793c:	89a3      	ldrh	r3, [r4, #12]
    793e:	1c42      	adds	r2, r0, #1
    7940:	bf0e      	itee	eq
    7942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    794a:	6520      	strne	r0, [r4, #80]	; 0x50
    794c:	81a3      	strh	r3, [r4, #12]
    794e:	bd10      	pop	{r4, pc}

00007950 <__sclose>:
    7950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7954:	f000 bbc6 	b.w	80e4 <_close_r>

00007958 <memmove>:
    7958:	4288      	cmp	r0, r1
    795a:	d90d      	bls.n	7978 <memmove+0x20>
    795c:	188b      	adds	r3, r1, r2
    795e:	4283      	cmp	r3, r0
    7960:	d90a      	bls.n	7978 <memmove+0x20>
    7962:	eb00 0c02 	add.w	ip, r0, r2
    7966:	b1ba      	cbz	r2, 7998 <memmove+0x40>
    7968:	4662      	mov	r2, ip
    796a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    796e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    7972:	4299      	cmp	r1, r3
    7974:	d1f9      	bne.n	796a <memmove+0x12>
    7976:	4770      	bx	lr
    7978:	2a0f      	cmp	r2, #15
    797a:	d80e      	bhi.n	799a <memmove+0x42>
    797c:	4603      	mov	r3, r0
    797e:	f102 3cff 	add.w	ip, r2, #4294967295
    7982:	b14a      	cbz	r2, 7998 <memmove+0x40>
    7984:	f10c 0c01 	add.w	ip, ip, #1
    7988:	3b01      	subs	r3, #1
    798a:	448c      	add	ip, r1
    798c:	f811 2b01 	ldrb.w	r2, [r1], #1
    7990:	f803 2f01 	strb.w	r2, [r3, #1]!
    7994:	4561      	cmp	r1, ip
    7996:	d1f9      	bne.n	798c <memmove+0x34>
    7998:	4770      	bx	lr
    799a:	ea40 0301 	orr.w	r3, r0, r1
    799e:	079b      	lsls	r3, r3, #30
    79a0:	d150      	bne.n	7a44 <memmove+0xec>
    79a2:	f1a2 0310 	sub.w	r3, r2, #16
    79a6:	b570      	push	{r4, r5, r6, lr}
    79a8:	f101 0c20 	add.w	ip, r1, #32
    79ac:	f023 050f 	bic.w	r5, r3, #15
    79b0:	f101 0e10 	add.w	lr, r1, #16
    79b4:	f100 0410 	add.w	r4, r0, #16
    79b8:	44ac      	add	ip, r5
    79ba:	091b      	lsrs	r3, r3, #4
    79bc:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    79c0:	f844 5c10 	str.w	r5, [r4, #-16]
    79c4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    79c8:	f844 5c0c 	str.w	r5, [r4, #-12]
    79cc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    79d0:	f844 5c08 	str.w	r5, [r4, #-8]
    79d4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    79d8:	f844 5c04 	str.w	r5, [r4, #-4]
    79dc:	f10e 0e10 	add.w	lr, lr, #16
    79e0:	45e6      	cmp	lr, ip
    79e2:	f104 0410 	add.w	r4, r4, #16
    79e6:	d1e9      	bne.n	79bc <memmove+0x64>
    79e8:	3301      	adds	r3, #1
    79ea:	f012 0f0c 	tst.w	r2, #12
    79ee:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    79f2:	f002 040f 	and.w	r4, r2, #15
    79f6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    79fa:	d027      	beq.n	7a4c <memmove+0xf4>
    79fc:	3c04      	subs	r4, #4
    79fe:	f024 0603 	bic.w	r6, r4, #3
    7a02:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    7a06:	441e      	add	r6, r3
    7a08:	1f1c      	subs	r4, r3, #4
    7a0a:	468e      	mov	lr, r1
    7a0c:	f85e 5b04 	ldr.w	r5, [lr], #4
    7a10:	f844 5f04 	str.w	r5, [r4, #4]!
    7a14:	42b4      	cmp	r4, r6
    7a16:	d1f9      	bne.n	7a0c <memmove+0xb4>
    7a18:	f10c 0401 	add.w	r4, ip, #1
    7a1c:	f002 0203 	and.w	r2, r2, #3
    7a20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7a24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7a28:	f102 3cff 	add.w	ip, r2, #4294967295
    7a2c:	b14a      	cbz	r2, 7a42 <memmove+0xea>
    7a2e:	f10c 0c01 	add.w	ip, ip, #1
    7a32:	3b01      	subs	r3, #1
    7a34:	448c      	add	ip, r1
    7a36:	f811 2b01 	ldrb.w	r2, [r1], #1
    7a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
    7a3e:	4561      	cmp	r1, ip
    7a40:	d1f9      	bne.n	7a36 <memmove+0xde>
    7a42:	bd70      	pop	{r4, r5, r6, pc}
    7a44:	f102 3cff 	add.w	ip, r2, #4294967295
    7a48:	4603      	mov	r3, r0
    7a4a:	e79b      	b.n	7984 <memmove+0x2c>
    7a4c:	4622      	mov	r2, r4
    7a4e:	e7eb      	b.n	7a28 <memmove+0xd0>

00007a50 <memset>:
    7a50:	0783      	lsls	r3, r0, #30
    7a52:	b530      	push	{r4, r5, lr}
    7a54:	d048      	beq.n	7ae8 <memset+0x98>
    7a56:	1e54      	subs	r4, r2, #1
    7a58:	2a00      	cmp	r2, #0
    7a5a:	d03f      	beq.n	7adc <memset+0x8c>
    7a5c:	b2ca      	uxtb	r2, r1
    7a5e:	4603      	mov	r3, r0
    7a60:	e001      	b.n	7a66 <memset+0x16>
    7a62:	3c01      	subs	r4, #1
    7a64:	d33a      	bcc.n	7adc <memset+0x8c>
    7a66:	f803 2b01 	strb.w	r2, [r3], #1
    7a6a:	079d      	lsls	r5, r3, #30
    7a6c:	d1f9      	bne.n	7a62 <memset+0x12>
    7a6e:	2c03      	cmp	r4, #3
    7a70:	d92d      	bls.n	7ace <memset+0x7e>
    7a72:	b2cd      	uxtb	r5, r1
    7a74:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    7a78:	2c0f      	cmp	r4, #15
    7a7a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    7a7e:	d936      	bls.n	7aee <memset+0x9e>
    7a80:	f1a4 0210 	sub.w	r2, r4, #16
    7a84:	f022 0c0f 	bic.w	ip, r2, #15
    7a88:	f103 0e20 	add.w	lr, r3, #32
    7a8c:	44e6      	add	lr, ip
    7a8e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    7a92:	f103 0210 	add.w	r2, r3, #16
    7a96:	e942 5504 	strd	r5, r5, [r2, #-16]
    7a9a:	e942 5502 	strd	r5, r5, [r2, #-8]
    7a9e:	3210      	adds	r2, #16
    7aa0:	4572      	cmp	r2, lr
    7aa2:	d1f8      	bne.n	7a96 <memset+0x46>
    7aa4:	f10c 0201 	add.w	r2, ip, #1
    7aa8:	f014 0f0c 	tst.w	r4, #12
    7aac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    7ab0:	f004 0c0f 	and.w	ip, r4, #15
    7ab4:	d013      	beq.n	7ade <memset+0x8e>
    7ab6:	f1ac 0304 	sub.w	r3, ip, #4
    7aba:	f023 0303 	bic.w	r3, r3, #3
    7abe:	3304      	adds	r3, #4
    7ac0:	4413      	add	r3, r2
    7ac2:	f842 5b04 	str.w	r5, [r2], #4
    7ac6:	4293      	cmp	r3, r2
    7ac8:	d1fb      	bne.n	7ac2 <memset+0x72>
    7aca:	f00c 0403 	and.w	r4, ip, #3
    7ace:	b12c      	cbz	r4, 7adc <memset+0x8c>
    7ad0:	b2c9      	uxtb	r1, r1
    7ad2:	441c      	add	r4, r3
    7ad4:	f803 1b01 	strb.w	r1, [r3], #1
    7ad8:	429c      	cmp	r4, r3
    7ada:	d1fb      	bne.n	7ad4 <memset+0x84>
    7adc:	bd30      	pop	{r4, r5, pc}
    7ade:	4664      	mov	r4, ip
    7ae0:	4613      	mov	r3, r2
    7ae2:	2c00      	cmp	r4, #0
    7ae4:	d1f4      	bne.n	7ad0 <memset+0x80>
    7ae6:	e7f9      	b.n	7adc <memset+0x8c>
    7ae8:	4603      	mov	r3, r0
    7aea:	4614      	mov	r4, r2
    7aec:	e7bf      	b.n	7a6e <memset+0x1e>
    7aee:	461a      	mov	r2, r3
    7af0:	46a4      	mov	ip, r4
    7af2:	e7e0      	b.n	7ab6 <memset+0x66>

00007af4 <strchr>:
    7af4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7af8:	4603      	mov	r3, r0
    7afa:	d044      	beq.n	7b86 <strchr+0x92>
    7afc:	0782      	lsls	r2, r0, #30
    7afe:	d132      	bne.n	7b66 <strchr+0x72>
    7b00:	b510      	push	{r4, lr}
    7b02:	6804      	ldr	r4, [r0, #0]
    7b04:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    7b08:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    7b0c:	ea8e 0204 	eor.w	r2, lr, r4
    7b10:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7b14:	ea23 0302 	bic.w	r3, r3, r2
    7b18:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7b1c:	ea22 0204 	bic.w	r2, r2, r4
    7b20:	4313      	orrs	r3, r2
    7b22:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7b26:	d10f      	bne.n	7b48 <strchr+0x54>
    7b28:	f850 4f04 	ldr.w	r4, [r0, #4]!
    7b2c:	ea84 0c0e 	eor.w	ip, r4, lr
    7b30:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    7b34:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    7b38:	ea23 0304 	bic.w	r3, r3, r4
    7b3c:	ea22 020c 	bic.w	r2, r2, ip
    7b40:	4313      	orrs	r3, r2
    7b42:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7b46:	d0ef      	beq.n	7b28 <strchr+0x34>
    7b48:	7803      	ldrb	r3, [r0, #0]
    7b4a:	b923      	cbnz	r3, 7b56 <strchr+0x62>
    7b4c:	e036      	b.n	7bbc <strchr+0xc8>
    7b4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7b52:	2b00      	cmp	r3, #0
    7b54:	d032      	beq.n	7bbc <strchr+0xc8>
    7b56:	4299      	cmp	r1, r3
    7b58:	d1f9      	bne.n	7b4e <strchr+0x5a>
    7b5a:	bd10      	pop	{r4, pc}
    7b5c:	428a      	cmp	r2, r1
    7b5e:	d011      	beq.n	7b84 <strchr+0x90>
    7b60:	079a      	lsls	r2, r3, #30
    7b62:	4618      	mov	r0, r3
    7b64:	d0cc      	beq.n	7b00 <strchr+0xc>
    7b66:	4618      	mov	r0, r3
    7b68:	f813 2b01 	ldrb.w	r2, [r3], #1
    7b6c:	2a00      	cmp	r2, #0
    7b6e:	d1f5      	bne.n	7b5c <strchr+0x68>
    7b70:	4610      	mov	r0, r2
    7b72:	4770      	bx	lr
    7b74:	0799      	lsls	r1, r3, #30
    7b76:	4618      	mov	r0, r3
    7b78:	d007      	beq.n	7b8a <strchr+0x96>
    7b7a:	4618      	mov	r0, r3
    7b7c:	3301      	adds	r3, #1
    7b7e:	7802      	ldrb	r2, [r0, #0]
    7b80:	2a00      	cmp	r2, #0
    7b82:	d1f7      	bne.n	7b74 <strchr+0x80>
    7b84:	4770      	bx	lr
    7b86:	0782      	lsls	r2, r0, #30
    7b88:	d1f7      	bne.n	7b7a <strchr+0x86>
    7b8a:	6802      	ldr	r2, [r0, #0]
    7b8c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7b90:	ea23 0302 	bic.w	r3, r3, r2
    7b94:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7b98:	d108      	bne.n	7bac <strchr+0xb8>
    7b9a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    7b9e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7ba2:	ea23 0302 	bic.w	r3, r3, r2
    7ba6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7baa:	d0f6      	beq.n	7b9a <strchr+0xa6>
    7bac:	7803      	ldrb	r3, [r0, #0]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d0e8      	beq.n	7b84 <strchr+0x90>
    7bb2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d1fb      	bne.n	7bb2 <strchr+0xbe>
    7bba:	4770      	bx	lr
    7bbc:	4618      	mov	r0, r3
    7bbe:	bd10      	pop	{r4, pc}

00007bc0 <strncmp>:
    7bc0:	2a00      	cmp	r2, #0
    7bc2:	d03e      	beq.n	7c42 <strncmp+0x82>
    7bc4:	ea40 0301 	orr.w	r3, r0, r1
    7bc8:	079b      	lsls	r3, r3, #30
    7bca:	b530      	push	{r4, r5, lr}
    7bcc:	4684      	mov	ip, r0
    7bce:	d12f      	bne.n	7c30 <strncmp+0x70>
    7bd0:	2a03      	cmp	r2, #3
    7bd2:	d92d      	bls.n	7c30 <strncmp+0x70>
    7bd4:	460b      	mov	r3, r1
    7bd6:	e008      	b.n	7bea <strncmp+0x2a>
    7bd8:	3a04      	subs	r2, #4
    7bda:	4684      	mov	ip, r0
    7bdc:	4619      	mov	r1, r3
    7bde:	d025      	beq.n	7c2c <strncmp+0x6c>
    7be0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    7be4:	d122      	bne.n	7c2c <strncmp+0x6c>
    7be6:	2a03      	cmp	r2, #3
    7be8:	d922      	bls.n	7c30 <strncmp+0x70>
    7bea:	6804      	ldr	r4, [r0, #0]
    7bec:	4619      	mov	r1, r3
    7bee:	f853 5b04 	ldr.w	r5, [r3], #4
    7bf2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    7bf6:	42ac      	cmp	r4, r5
    7bf8:	4684      	mov	ip, r0
    7bfa:	ea2e 0e04 	bic.w	lr, lr, r4
    7bfe:	f100 0004 	add.w	r0, r0, #4
    7c02:	d0e9      	beq.n	7bd8 <strncmp+0x18>
    7c04:	f89c 0000 	ldrb.w	r0, [ip]
    7c08:	780c      	ldrb	r4, [r1, #0]
    7c0a:	42a0      	cmp	r0, r4
    7c0c:	d11b      	bne.n	7c46 <strncmp+0x86>
    7c0e:	46e6      	mov	lr, ip
    7c10:	b168      	cbz	r0, 7c2e <strncmp+0x6e>
    7c12:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    7c16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7c1a:	eba2 030e 	sub.w	r3, r2, lr
    7c1e:	42a0      	cmp	r0, r4
    7c20:	f103 33ff 	add.w	r3, r3, #4294967295
    7c24:	d10f      	bne.n	7c46 <strncmp+0x86>
    7c26:	eb1c 0303 	adds.w	r3, ip, r3
    7c2a:	d1f1      	bne.n	7c10 <strncmp+0x50>
    7c2c:	2000      	movs	r0, #0
    7c2e:	bd30      	pop	{r4, r5, pc}
    7c30:	f89c 0000 	ldrb.w	r0, [ip]
    7c34:	780c      	ldrb	r4, [r1, #0]
    7c36:	4284      	cmp	r4, r0
    7c38:	d105      	bne.n	7c46 <strncmp+0x86>
    7c3a:	2a01      	cmp	r2, #1
    7c3c:	d0f6      	beq.n	7c2c <strncmp+0x6c>
    7c3e:	46e6      	mov	lr, ip
    7c40:	e7e6      	b.n	7c10 <strncmp+0x50>
    7c42:	4610      	mov	r0, r2
    7c44:	4770      	bx	lr
    7c46:	1b00      	subs	r0, r0, r4
    7c48:	bd30      	pop	{r4, r5, pc}
    7c4a:	bf00      	nop

00007c4c <strncpy>:
    7c4c:	ea40 0301 	orr.w	r3, r0, r1
    7c50:	079b      	lsls	r3, r3, #30
    7c52:	b530      	push	{r4, r5, lr}
    7c54:	d101      	bne.n	7c5a <strncpy+0xe>
    7c56:	2a03      	cmp	r2, #3
    7c58:	d80f      	bhi.n	7c7a <strncpy+0x2e>
    7c5a:	4684      	mov	ip, r0
    7c5c:	f101 3eff 	add.w	lr, r1, #4294967295
    7c60:	e007      	b.n	7c72 <strncpy+0x26>
    7c62:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    7c66:	f803 1b01 	strb.w	r1, [r3], #1
    7c6a:	1e54      	subs	r4, r2, #1
    7c6c:	b1c1      	cbz	r1, 7ca0 <strncpy+0x54>
    7c6e:	469c      	mov	ip, r3
    7c70:	4622      	mov	r2, r4
    7c72:	4663      	mov	r3, ip
    7c74:	2a00      	cmp	r2, #0
    7c76:	d1f4      	bne.n	7c62 <strncpy+0x16>
    7c78:	bd30      	pop	{r4, r5, pc}
    7c7a:	460b      	mov	r3, r1
    7c7c:	4684      	mov	ip, r0
    7c7e:	4619      	mov	r1, r3
    7c80:	f853 5b04 	ldr.w	r5, [r3], #4
    7c84:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    7c88:	ea24 0405 	bic.w	r4, r4, r5
    7c8c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    7c90:	d1e4      	bne.n	7c5c <strncpy+0x10>
    7c92:	3a04      	subs	r2, #4
    7c94:	2a03      	cmp	r2, #3
    7c96:	f84c 5b04 	str.w	r5, [ip], #4
    7c9a:	4619      	mov	r1, r3
    7c9c:	d8ef      	bhi.n	7c7e <strncpy+0x32>
    7c9e:	e7dd      	b.n	7c5c <strncpy+0x10>
    7ca0:	4494      	add	ip, r2
    7ca2:	2c00      	cmp	r4, #0
    7ca4:	d0e8      	beq.n	7c78 <strncpy+0x2c>
    7ca6:	f803 1b01 	strb.w	r1, [r3], #1
    7caa:	4563      	cmp	r3, ip
    7cac:	d1fb      	bne.n	7ca6 <strncpy+0x5a>
    7cae:	bd30      	pop	{r4, r5, pc}

00007cb0 <critical_factorization>:
    7cb0:	2901      	cmp	r1, #1
    7cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cb6:	d95b      	bls.n	7d70 <critical_factorization+0xc0>
    7cb8:	f04f 0801 	mov.w	r8, #1
    7cbc:	46c6      	mov	lr, r8
    7cbe:	2400      	movs	r4, #0
    7cc0:	f04f 35ff 	mov.w	r5, #4294967295
    7cc4:	4643      	mov	r3, r8
    7cc6:	e008      	b.n	7cda <critical_factorization+0x2a>
    7cc8:	eba3 0805 	sub.w	r8, r3, r5
    7ccc:	461c      	mov	r4, r3
    7cce:	f04f 0e01 	mov.w	lr, #1
    7cd2:	eb04 030e 	add.w	r3, r4, lr
    7cd6:	428b      	cmp	r3, r1
    7cd8:	d210      	bcs.n	7cfc <critical_factorization+0x4c>
    7cda:	eb00 0c0e 	add.w	ip, r0, lr
    7cde:	5cc7      	ldrb	r7, [r0, r3]
    7ce0:	f81c 6005 	ldrb.w	r6, [ip, r5]
    7ce4:	42b7      	cmp	r7, r6
    7ce6:	d3ef      	bcc.n	7cc8 <critical_factorization+0x18>
    7ce8:	d032      	beq.n	7d50 <critical_factorization+0xa0>
    7cea:	f04f 0801 	mov.w	r8, #1
    7cee:	4625      	mov	r5, r4
    7cf0:	46c6      	mov	lr, r8
    7cf2:	4444      	add	r4, r8
    7cf4:	eb04 030e 	add.w	r3, r4, lr
    7cf8:	428b      	cmp	r3, r1
    7cfa:	d3ee      	bcc.n	7cda <critical_factorization+0x2a>
    7cfc:	2701      	movs	r7, #1
    7cfe:	f8c2 8000 	str.w	r8, [r2]
    7d02:	46be      	mov	lr, r7
    7d04:	2400      	movs	r4, #0
    7d06:	f04f 36ff 	mov.w	r6, #4294967295
    7d0a:	463b      	mov	r3, r7
    7d0c:	e007      	b.n	7d1e <critical_factorization+0x6e>
    7d0e:	1b9f      	subs	r7, r3, r6
    7d10:	461c      	mov	r4, r3
    7d12:	f04f 0e01 	mov.w	lr, #1
    7d16:	eb04 030e 	add.w	r3, r4, lr
    7d1a:	428b      	cmp	r3, r1
    7d1c:	d210      	bcs.n	7d40 <critical_factorization+0x90>
    7d1e:	eb00 0c06 	add.w	ip, r0, r6
    7d22:	f810 8003 	ldrb.w	r8, [r0, r3]
    7d26:	f81c c00e 	ldrb.w	ip, [ip, lr]
    7d2a:	45e0      	cmp	r8, ip
    7d2c:	d8ef      	bhi.n	7d0e <critical_factorization+0x5e>
    7d2e:	d017      	beq.n	7d60 <critical_factorization+0xb0>
    7d30:	2701      	movs	r7, #1
    7d32:	4626      	mov	r6, r4
    7d34:	46be      	mov	lr, r7
    7d36:	443c      	add	r4, r7
    7d38:	eb04 030e 	add.w	r3, r4, lr
    7d3c:	428b      	cmp	r3, r1
    7d3e:	d3ee      	bcc.n	7d1e <critical_factorization+0x6e>
    7d40:	3601      	adds	r6, #1
    7d42:	1c68      	adds	r0, r5, #1
    7d44:	4286      	cmp	r6, r0
    7d46:	d301      	bcc.n	7d4c <critical_factorization+0x9c>
    7d48:	6017      	str	r7, [r2, #0]
    7d4a:	4630      	mov	r0, r6
    7d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7d50:	45c6      	cmp	lr, r8
    7d52:	bf0a      	itet	eq
    7d54:	4474      	addeq	r4, lr
    7d56:	f10e 0e01 	addne.w	lr, lr, #1
    7d5a:	f04f 0e01 	moveq.w	lr, #1
    7d5e:	e7b8      	b.n	7cd2 <critical_factorization+0x22>
    7d60:	45be      	cmp	lr, r7
    7d62:	bf0a      	itet	eq
    7d64:	4474      	addeq	r4, lr
    7d66:	f10e 0e01 	addne.w	lr, lr, #1
    7d6a:	f04f 0e01 	moveq.w	lr, #1
    7d6e:	e7d2      	b.n	7d16 <critical_factorization+0x66>
    7d70:	2701      	movs	r7, #1
    7d72:	2600      	movs	r6, #0
    7d74:	e7e8      	b.n	7d48 <critical_factorization+0x98>
    7d76:	bf00      	nop

00007d78 <two_way_long_needle>:
    7d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d7c:	4692      	mov	sl, r2
    7d7e:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    7d82:	aa05      	add	r2, sp, #20
    7d84:	4681      	mov	r9, r0
    7d86:	460f      	mov	r7, r1
    7d88:	4650      	mov	r0, sl
    7d8a:	4619      	mov	r1, r3
    7d8c:	461d      	mov	r5, r3
    7d8e:	f7ff ff8f 	bl	7cb0 <critical_factorization>
    7d92:	4613      	mov	r3, r2
    7d94:	4683      	mov	fp, r0
    7d96:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    7d9a:	f843 5f04 	str.w	r5, [r3, #4]!
    7d9e:	4293      	cmp	r3, r2
    7da0:	d1fb      	bne.n	7d9a <two_way_long_needle+0x22>
    7da2:	2d00      	cmp	r5, #0
    7da4:	f000 80df 	beq.w	7f66 <two_way_long_needle+0x1ee>
    7da8:	1e6c      	subs	r4, r5, #1
    7daa:	ae06      	add	r6, sp, #24
    7dac:	f10a 32ff 	add.w	r2, sl, #4294967295
    7db0:	eb0a 0004 	add.w	r0, sl, r4
    7db4:	9600      	str	r6, [sp, #0]
    7db6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    7dba:	1aab      	subs	r3, r5, r2
    7dbc:	3b01      	subs	r3, #1
    7dbe:	4453      	add	r3, sl
    7dc0:	4282      	cmp	r2, r0
    7dc2:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    7dc6:	d1f6      	bne.n	7db6 <two_way_long_needle+0x3e>
    7dc8:	9905      	ldr	r1, [sp, #20]
    7dca:	465a      	mov	r2, fp
    7dcc:	4451      	add	r1, sl
    7dce:	4650      	mov	r0, sl
    7dd0:	f002 f8f4 	bl	9fbc <memcmp>
    7dd4:	2800      	cmp	r0, #0
    7dd6:	d16f      	bne.n	7eb8 <two_way_long_needle+0x140>
    7dd8:	f10b 33ff 	add.w	r3, fp, #4294967295
    7ddc:	9303      	str	r3, [sp, #12]
    7dde:	f1cb 0301 	rsb	r3, fp, #1
    7de2:	4680      	mov	r8, r0
    7de4:	4606      	mov	r6, r0
    7de6:	9301      	str	r3, [sp, #4]
    7de8:	eb09 0e06 	add.w	lr, r9, r6
    7dec:	9a00      	ldr	r2, [sp, #0]
    7dee:	f81e 3004 	ldrb.w	r3, [lr, r4]
    7df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df6:	b1db      	cbz	r3, 7e30 <two_way_long_needle+0xb8>
    7df8:	f1b8 0f00 	cmp.w	r8, #0
    7dfc:	d003      	beq.n	7e06 <two_way_long_needle+0x8e>
    7dfe:	9a05      	ldr	r2, [sp, #20]
    7e00:	429a      	cmp	r2, r3
    7e02:	d900      	bls.n	7e06 <two_way_long_needle+0x8e>
    7e04:	1aab      	subs	r3, r5, r2
    7e06:	441e      	add	r6, r3
    7e08:	f04f 0800 	mov.w	r8, #0
    7e0c:	1b7b      	subs	r3, r7, r5
    7e0e:	429e      	cmp	r6, r3
    7e10:	d9ea      	bls.n	7de8 <two_way_long_needle+0x70>
    7e12:	eb09 0007 	add.w	r0, r9, r7
    7e16:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    7e1a:	f002 f8ff 	bl	a01c <strnlen>
    7e1e:	4407      	add	r7, r0
    7e20:	1b7b      	subs	r3, r7, r5
    7e22:	429e      	cmp	r6, r3
    7e24:	d9e0      	bls.n	7de8 <two_way_long_needle+0x70>
    7e26:	2000      	movs	r0, #0
    7e28:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e30:	45c3      	cmp	fp, r8
    7e32:	465b      	mov	r3, fp
    7e34:	bf38      	it	cc
    7e36:	4643      	movcc	r3, r8
    7e38:	42a3      	cmp	r3, r4
    7e3a:	d210      	bcs.n	7e5e <two_way_long_needle+0xe6>
    7e3c:	1e59      	subs	r1, r3, #1
    7e3e:	18f2      	adds	r2, r6, r3
    7e40:	4451      	add	r1, sl
    7e42:	444a      	add	r2, r9
    7e44:	e002      	b.n	7e4c <two_way_long_needle+0xd4>
    7e46:	3301      	adds	r3, #1
    7e48:	42a3      	cmp	r3, r4
    7e4a:	d208      	bcs.n	7e5e <two_way_long_needle+0xe6>
    7e4c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7e50:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7e54:	4584      	cmp	ip, r0
    7e56:	d0f6      	beq.n	7e46 <two_way_long_needle+0xce>
    7e58:	9a01      	ldr	r2, [sp, #4]
    7e5a:	4416      	add	r6, r2
    7e5c:	e7d3      	b.n	7e06 <two_way_long_needle+0x8e>
    7e5e:	45c3      	cmp	fp, r8
    7e60:	9b03      	ldr	r3, [sp, #12]
    7e62:	d97e      	bls.n	7f62 <two_way_long_needle+0x1ea>
    7e64:	eb06 020b 	add.w	r2, r6, fp
    7e68:	444a      	add	r2, r9
    7e6a:	eb0a 010b 	add.w	r1, sl, fp
    7e6e:	9602      	str	r6, [sp, #8]
    7e70:	e002      	b.n	7e78 <two_way_long_needle+0x100>
    7e72:	4543      	cmp	r3, r8
    7e74:	d015      	beq.n	7ea2 <two_way_long_needle+0x12a>
    7e76:	4603      	mov	r3, r0
    7e78:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    7e7c:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    7e80:	4286      	cmp	r6, r0
    7e82:	f103 0c01 	add.w	ip, r3, #1
    7e86:	f103 30ff 	add.w	r0, r3, #4294967295
    7e8a:	d0f2      	beq.n	7e72 <two_way_long_needle+0xfa>
    7e8c:	9e02      	ldr	r6, [sp, #8]
    7e8e:	4663      	mov	r3, ip
    7e90:	f108 0801 	add.w	r8, r8, #1
    7e94:	4598      	cmp	r8, r3
    7e96:	d80a      	bhi.n	7eae <two_way_long_needle+0x136>
    7e98:	9b05      	ldr	r3, [sp, #20]
    7e9a:	441e      	add	r6, r3
    7e9c:	eba5 0803 	sub.w	r8, r5, r3
    7ea0:	e7b4      	b.n	7e0c <two_way_long_needle+0x94>
    7ea2:	4643      	mov	r3, r8
    7ea4:	f108 0801 	add.w	r8, r8, #1
    7ea8:	4598      	cmp	r8, r3
    7eaa:	9e02      	ldr	r6, [sp, #8]
    7eac:	d9f4      	bls.n	7e98 <two_way_long_needle+0x120>
    7eae:	4670      	mov	r0, lr
    7eb0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7eb8:	eba5 030b 	sub.w	r3, r5, fp
    7ebc:	455b      	cmp	r3, fp
    7ebe:	bf38      	it	cc
    7ec0:	465b      	movcc	r3, fp
    7ec2:	3301      	adds	r3, #1
    7ec4:	9305      	str	r3, [sp, #20]
    7ec6:	f10b 33ff 	add.w	r3, fp, #4294967295
    7eca:	9301      	str	r3, [sp, #4]
    7ecc:	f1cb 0301 	rsb	r3, fp, #1
    7ed0:	2600      	movs	r6, #0
    7ed2:	9302      	str	r3, [sp, #8]
    7ed4:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    7ed8:	eb09 0106 	add.w	r1, r9, r6
    7edc:	9a00      	ldr	r2, [sp, #0]
    7ede:	5d0b      	ldrb	r3, [r1, r4]
    7ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ee4:	b16b      	cbz	r3, 7f02 <two_way_long_needle+0x18a>
    7ee6:	441e      	add	r6, r3
    7ee8:	1b7b      	subs	r3, r7, r5
    7eea:	42b3      	cmp	r3, r6
    7eec:	d2f4      	bcs.n	7ed8 <two_way_long_needle+0x160>
    7eee:	eb09 0007 	add.w	r0, r9, r7
    7ef2:	4641      	mov	r1, r8
    7ef4:	f002 f892 	bl	a01c <strnlen>
    7ef8:	4407      	add	r7, r0
    7efa:	1b7b      	subs	r3, r7, r5
    7efc:	42b3      	cmp	r3, r6
    7efe:	d2eb      	bcs.n	7ed8 <two_way_long_needle+0x160>
    7f00:	e791      	b.n	7e26 <two_way_long_needle+0xae>
    7f02:	45a3      	cmp	fp, r4
    7f04:	d214      	bcs.n	7f30 <two_way_long_needle+0x1b8>
    7f06:	9b01      	ldr	r3, [sp, #4]
    7f08:	eb0b 0206 	add.w	r2, fp, r6
    7f0c:	eb0a 0c03 	add.w	ip, sl, r3
    7f10:	444a      	add	r2, r9
    7f12:	465b      	mov	r3, fp
    7f14:	e002      	b.n	7f1c <two_way_long_needle+0x1a4>
    7f16:	3301      	adds	r3, #1
    7f18:	42a3      	cmp	r3, r4
    7f1a:	d209      	bcs.n	7f30 <two_way_long_needle+0x1b8>
    7f1c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7f20:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    7f24:	4586      	cmp	lr, r0
    7f26:	d0f6      	beq.n	7f16 <two_way_long_needle+0x19e>
    7f28:	9a02      	ldr	r2, [sp, #8]
    7f2a:	4416      	add	r6, r2
    7f2c:	441e      	add	r6, r3
    7f2e:	e7db      	b.n	7ee8 <two_way_long_needle+0x170>
    7f30:	f1bb 0f00 	cmp.w	fp, #0
    7f34:	d010      	beq.n	7f58 <two_way_long_needle+0x1e0>
    7f36:	eb0b 0006 	add.w	r0, fp, r6
    7f3a:	4448      	add	r0, r9
    7f3c:	eb0a 020b 	add.w	r2, sl, fp
    7f40:	e001      	b.n	7f46 <two_way_long_needle+0x1ce>
    7f42:	4553      	cmp	r3, sl
    7f44:	d008      	beq.n	7f58 <two_way_long_needle+0x1e0>
    7f46:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    7f4a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    7f4e:	45e6      	cmp	lr, ip
    7f50:	4613      	mov	r3, r2
    7f52:	d0f6      	beq.n	7f42 <two_way_long_needle+0x1ca>
    7f54:	9b05      	ldr	r3, [sp, #20]
    7f56:	e7c6      	b.n	7ee6 <two_way_long_needle+0x16e>
    7f58:	4608      	mov	r0, r1
    7f5a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f62:	465b      	mov	r3, fp
    7f64:	e794      	b.n	7e90 <two_way_long_needle+0x118>
    7f66:	ab06      	add	r3, sp, #24
    7f68:	f04f 34ff 	mov.w	r4, #4294967295
    7f6c:	9300      	str	r3, [sp, #0]
    7f6e:	e72b      	b.n	7dc8 <two_way_long_needle+0x50>

00007f70 <strstr>:
    7f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f74:	460d      	mov	r5, r1
    7f76:	7809      	ldrb	r1, [r1, #0]
    7f78:	b090      	sub	sp, #64	; 0x40
    7f7a:	4604      	mov	r4, r0
    7f7c:	2900      	cmp	r1, #0
    7f7e:	d054      	beq.n	802a <strstr+0xba>
    7f80:	786a      	ldrb	r2, [r5, #1]
    7f82:	2a00      	cmp	r2, #0
    7f84:	f000 8083 	beq.w	808e <strstr+0x11e>
    7f88:	78ab      	ldrb	r3, [r5, #2]
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d051      	beq.n	8032 <strstr+0xc2>
    7f8e:	78e8      	ldrb	r0, [r5, #3]
    7f90:	682e      	ldr	r6, [r5, #0]
    7f92:	2800      	cmp	r0, #0
    7f94:	f000 8082 	beq.w	809c <strstr+0x12c>
    7f98:	792b      	ldrb	r3, [r5, #4]
    7f9a:	2b00      	cmp	r3, #0
    7f9c:	d057      	beq.n	804e <strstr+0xde>
    7f9e:	4628      	mov	r0, r5
    7fa0:	f000 fb0e 	bl	85c0 <strlen>
    7fa4:	4606      	mov	r6, r0
    7fa6:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    7faa:	4620      	mov	r0, r4
    7fac:	f002 f836 	bl	a01c <strnlen>
    7fb0:	4286      	cmp	r6, r0
    7fb2:	d85b      	bhi.n	806c <strstr+0xfc>
    7fb4:	2efe      	cmp	r6, #254	; 0xfe
    7fb6:	f200 8086 	bhi.w	80c6 <strstr+0x156>
    7fba:	1b80      	subs	r0, r0, r6
    7fbc:	1827      	adds	r7, r4, r0
    7fbe:	2240      	movs	r2, #64	; 0x40
    7fc0:	1c71      	adds	r1, r6, #1
    7fc2:	4668      	mov	r0, sp
    7fc4:	f7ff fd44 	bl	7a50 <memset>
    7fc8:	b17e      	cbz	r6, 7fea <strstr+0x7a>
    7fca:	1e6a      	subs	r2, r5, #1
    7fcc:	fa5f fc86 	uxtb.w	ip, r6
    7fd0:	1990      	adds	r0, r2, r6
    7fd2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    7fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fda:	3340      	adds	r3, #64	; 0x40
    7fdc:	446b      	add	r3, sp
    7fde:	1aa9      	subs	r1, r5, r2
    7fe0:	4461      	add	r1, ip
    7fe2:	4282      	cmp	r2, r0
    7fe4:	f803 1c40 	strb.w	r1, [r3, #-64]
    7fe8:	d1f3      	bne.n	7fd2 <strstr+0x62>
    7fea:	3c01      	subs	r4, #1
    7fec:	5da3      	ldrb	r3, [r4, r6]
    7fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7ff2:	3340      	adds	r3, #64	; 0x40
    7ff4:	446b      	add	r3, sp
    7ff6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    7ffa:	441c      	add	r4, r3
    7ffc:	42a7      	cmp	r7, r4
    7ffe:	d203      	bcs.n	8008 <strstr+0x98>
    8000:	e039      	b.n	8076 <strstr+0x106>
    8002:	4444      	add	r4, r8
    8004:	42a7      	cmp	r7, r4
    8006:	d336      	bcc.n	8076 <strstr+0x106>
    8008:	f814 c006 	ldrb.w	ip, [r4, r6]
    800c:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    8010:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    8014:	eb0d 0c03 	add.w	ip, sp, r3
    8018:	4620      	mov	r0, r4
    801a:	4632      	mov	r2, r6
    801c:	4629      	mov	r1, r5
    801e:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    8022:	f001 ffcb 	bl	9fbc <memcmp>
    8026:	2800      	cmp	r0, #0
    8028:	d1eb      	bne.n	8002 <strstr+0x92>
    802a:	4620      	mov	r0, r4
    802c:	b010      	add	sp, #64	; 0x40
    802e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8032:	7800      	ldrb	r0, [r0, #0]
    8034:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8038:	e000      	b.n	803c <strstr+0xcc>
    803a:	460c      	mov	r4, r1
    803c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8040:	1c61      	adds	r1, r4, #1
    8042:	b198      	cbz	r0, 806c <strstr+0xfc>
    8044:	429a      	cmp	r2, r3
    8046:	7860      	ldrb	r0, [r4, #1]
    8048:	d1f7      	bne.n	803a <strstr+0xca>
    804a:	3c01      	subs	r4, #1
    804c:	e7ed      	b.n	802a <strstr+0xba>
    804e:	7822      	ldrb	r2, [r4, #0]
    8050:	b162      	cbz	r2, 806c <strstr+0xfc>
    8052:	ba31      	rev	r1, r6
    8054:	e001      	b.n	805a <strstr+0xea>
    8056:	4299      	cmp	r1, r3
    8058:	d01e      	beq.n	8098 <strstr+0x128>
    805a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    805e:	4620      	mov	r0, r4
    8060:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    8064:	2a00      	cmp	r2, #0
    8066:	d1f6      	bne.n	8056 <strstr+0xe6>
    8068:	4299      	cmp	r1, r3
    806a:	d015      	beq.n	8098 <strstr+0x128>
    806c:	2400      	movs	r4, #0
    806e:	4620      	mov	r0, r4
    8070:	b010      	add	sp, #64	; 0x40
    8072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8076:	5dbb      	ldrb	r3, [r7, r6]
    8078:	19b8      	adds	r0, r7, r6
    807a:	2b00      	cmp	r3, #0
    807c:	d0f6      	beq.n	806c <strstr+0xfc>
    807e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8082:	f001 ffcb 	bl	a01c <strnlen>
    8086:	4407      	add	r7, r0
    8088:	42bc      	cmp	r4, r7
    808a:	d9ae      	bls.n	7fea <strstr+0x7a>
    808c:	e7ee      	b.n	806c <strstr+0xfc>
    808e:	b010      	add	sp, #64	; 0x40
    8090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8094:	f7ff bd2e 	b.w	7af4 <strchr>
    8098:	1ec4      	subs	r4, r0, #3
    809a:	e7c6      	b.n	802a <strstr+0xba>
    809c:	0412      	lsls	r2, r2, #16
    809e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    80a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    80a6:	7821      	ldrb	r1, [r4, #0]
    80a8:	4602      	mov	r2, r0
    80aa:	e000      	b.n	80ae <strstr+0x13e>
    80ac:	462c      	mov	r4, r5
    80ae:	ea41 0002 	orr.w	r0, r1, r2
    80b2:	1c65      	adds	r5, r4, #1
    80b4:	0202      	lsls	r2, r0, #8
    80b6:	2900      	cmp	r1, #0
    80b8:	d0d8      	beq.n	806c <strstr+0xfc>
    80ba:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    80be:	7861      	ldrb	r1, [r4, #1]
    80c0:	d1f4      	bne.n	80ac <strstr+0x13c>
    80c2:	3c02      	subs	r4, #2
    80c4:	e7b1      	b.n	802a <strstr+0xba>
    80c6:	4601      	mov	r1, r0
    80c8:	4633      	mov	r3, r6
    80ca:	462a      	mov	r2, r5
    80cc:	4620      	mov	r0, r4
    80ce:	b010      	add	sp, #64	; 0x40
    80d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    80d4:	f7ff be50 	b.w	7d78 <two_way_long_needle>

000080d8 <__locale_mb_cur_max>:
    80d8:	4b01      	ldr	r3, [pc, #4]	; (80e0 <__locale_mb_cur_max+0x8>)
    80da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    80de:	4770      	bx	lr
    80e0:	200015e0 	.word	0x200015e0

000080e4 <_close_r>:
    80e4:	b538      	push	{r3, r4, r5, lr}
    80e6:	4d07      	ldr	r5, [pc, #28]	; (8104 <_close_r+0x20>)
    80e8:	2200      	movs	r2, #0
    80ea:	4604      	mov	r4, r0
    80ec:	4608      	mov	r0, r1
    80ee:	602a      	str	r2, [r5, #0]
    80f0:	f7fc fbfc 	bl	48ec <_close>
    80f4:	1c43      	adds	r3, r0, #1
    80f6:	d000      	beq.n	80fa <_close_r+0x16>
    80f8:	bd38      	pop	{r3, r4, r5, pc}
    80fa:	682b      	ldr	r3, [r5, #0]
    80fc:	2b00      	cmp	r3, #0
    80fe:	d0fb      	beq.n	80f8 <_close_r+0x14>
    8100:	6023      	str	r3, [r4, #0]
    8102:	bd38      	pop	{r3, r4, r5, pc}
    8104:	200032e4 	.word	0x200032e4

00008108 <_lseek_r>:
    8108:	b538      	push	{r3, r4, r5, lr}
    810a:	460c      	mov	r4, r1
    810c:	4d08      	ldr	r5, [pc, #32]	; (8130 <_lseek_r+0x28>)
    810e:	4684      	mov	ip, r0
    8110:	4611      	mov	r1, r2
    8112:	4620      	mov	r0, r4
    8114:	461a      	mov	r2, r3
    8116:	2300      	movs	r3, #0
    8118:	602b      	str	r3, [r5, #0]
    811a:	4664      	mov	r4, ip
    811c:	f7fc fbf2 	bl	4904 <_lseek>
    8120:	1c43      	adds	r3, r0, #1
    8122:	d000      	beq.n	8126 <_lseek_r+0x1e>
    8124:	bd38      	pop	{r3, r4, r5, pc}
    8126:	682b      	ldr	r3, [r5, #0]
    8128:	2b00      	cmp	r3, #0
    812a:	d0fb      	beq.n	8124 <_lseek_r+0x1c>
    812c:	6023      	str	r3, [r4, #0]
    812e:	bd38      	pop	{r3, r4, r5, pc}
    8130:	200032e4 	.word	0x200032e4

00008134 <_read_r>:
    8134:	b538      	push	{r3, r4, r5, lr}
    8136:	460c      	mov	r4, r1
    8138:	4d08      	ldr	r5, [pc, #32]	; (815c <_read_r+0x28>)
    813a:	4684      	mov	ip, r0
    813c:	4611      	mov	r1, r2
    813e:	4620      	mov	r0, r4
    8140:	461a      	mov	r2, r3
    8142:	2300      	movs	r3, #0
    8144:	602b      	str	r3, [r5, #0]
    8146:	4664      	mov	r4, ip
    8148:	f7fc fbce 	bl	48e8 <_read>
    814c:	1c43      	adds	r3, r0, #1
    814e:	d000      	beq.n	8152 <_read_r+0x1e>
    8150:	bd38      	pop	{r3, r4, r5, pc}
    8152:	682b      	ldr	r3, [r5, #0]
    8154:	2b00      	cmp	r3, #0
    8156:	d0fb      	beq.n	8150 <_read_r+0x1c>
    8158:	6023      	str	r3, [r4, #0]
    815a:	bd38      	pop	{r3, r4, r5, pc}
    815c:	200032e4 	.word	0x200032e4

00008160 <_sbrk_r>:
    8160:	b538      	push	{r3, r4, r5, lr}
    8162:	4d07      	ldr	r5, [pc, #28]	; (8180 <_sbrk_r+0x20>)
    8164:	2200      	movs	r2, #0
    8166:	4604      	mov	r4, r0
    8168:	4608      	mov	r0, r1
    816a:	602a      	str	r2, [r5, #0]
    816c:	f7fc fba2 	bl	48b4 <_sbrk>
    8170:	1c43      	adds	r3, r0, #1
    8172:	d000      	beq.n	8176 <_sbrk_r+0x16>
    8174:	bd38      	pop	{r3, r4, r5, pc}
    8176:	682b      	ldr	r3, [r5, #0]
    8178:	2b00      	cmp	r3, #0
    817a:	d0fb      	beq.n	8174 <_sbrk_r+0x14>
    817c:	6023      	str	r3, [r4, #0]
    817e:	bd38      	pop	{r3, r4, r5, pc}
    8180:	200032e4 	.word	0x200032e4

00008184 <_write_r>:
    8184:	b538      	push	{r3, r4, r5, lr}
    8186:	460c      	mov	r4, r1
    8188:	4d08      	ldr	r5, [pc, #32]	; (81ac <_write_r+0x28>)
    818a:	4684      	mov	ip, r0
    818c:	4611      	mov	r1, r2
    818e:	4620      	mov	r0, r4
    8190:	461a      	mov	r2, r3
    8192:	2300      	movs	r3, #0
    8194:	602b      	str	r3, [r5, #0]
    8196:	4664      	mov	r4, ip
    8198:	f7fb fa2c 	bl	35f4 <_write>
    819c:	1c43      	adds	r3, r0, #1
    819e:	d000      	beq.n	81a2 <_write_r+0x1e>
    81a0:	bd38      	pop	{r3, r4, r5, pc}
    81a2:	682b      	ldr	r3, [r5, #0]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d0fb      	beq.n	81a0 <_write_r+0x1c>
    81a8:	6023      	str	r3, [r4, #0]
    81aa:	bd38      	pop	{r3, r4, r5, pc}
    81ac:	200032e4 	.word	0x200032e4

000081b0 <__errno>:
    81b0:	4b01      	ldr	r3, [pc, #4]	; (81b8 <__errno+0x8>)
    81b2:	6818      	ldr	r0, [r3, #0]
    81b4:	4770      	bx	lr
    81b6:	bf00      	nop
    81b8:	20001b68 	.word	0x20001b68

000081bc <__libc_init_array>:
    81bc:	b570      	push	{r4, r5, r6, lr}
    81be:	4e0d      	ldr	r6, [pc, #52]	; (81f4 <__libc_init_array+0x38>)
    81c0:	4d0d      	ldr	r5, [pc, #52]	; (81f8 <__libc_init_array+0x3c>)
    81c2:	1b76      	subs	r6, r6, r5
    81c4:	10b6      	asrs	r6, r6, #2
    81c6:	d006      	beq.n	81d6 <__libc_init_array+0x1a>
    81c8:	2400      	movs	r4, #0
    81ca:	f855 3b04 	ldr.w	r3, [r5], #4
    81ce:	3401      	adds	r4, #1
    81d0:	4798      	blx	r3
    81d2:	42a6      	cmp	r6, r4
    81d4:	d1f9      	bne.n	81ca <__libc_init_array+0xe>
    81d6:	4e09      	ldr	r6, [pc, #36]	; (81fc <__libc_init_array+0x40>)
    81d8:	4d09      	ldr	r5, [pc, #36]	; (8200 <__libc_init_array+0x44>)
    81da:	1b76      	subs	r6, r6, r5
    81dc:	f004 fd60 	bl	cca0 <___init_veneer>
    81e0:	10b6      	asrs	r6, r6, #2
    81e2:	d006      	beq.n	81f2 <__libc_init_array+0x36>
    81e4:	2400      	movs	r4, #0
    81e6:	f855 3b04 	ldr.w	r3, [r5], #4
    81ea:	3401      	adds	r4, #1
    81ec:	4798      	blx	r3
    81ee:	42a6      	cmp	r6, r4
    81f0:	d1f9      	bne.n	81e6 <__libc_init_array+0x2a>
    81f2:	bd70      	pop	{r4, r5, r6, pc}
    81f4:	60001fc8 	.word	0x60001fc8
    81f8:	60001fc8 	.word	0x60001fc8
    81fc:	60001ff8 	.word	0x60001ff8
    8200:	60001fc8 	.word	0x60001fc8

00008204 <__retarget_lock_init_recursive>:
    8204:	4770      	bx	lr
    8206:	bf00      	nop

00008208 <__retarget_lock_close_recursive>:
    8208:	4770      	bx	lr
    820a:	bf00      	nop

0000820c <__retarget_lock_acquire_recursive>:
    820c:	4770      	bx	lr
    820e:	bf00      	nop

00008210 <__retarget_lock_release_recursive>:
    8210:	4770      	bx	lr
    8212:	bf00      	nop
	...
    8220:	eba2 0003 	sub.w	r0, r2, r3
    8224:	4770      	bx	lr
    8226:	bf00      	nop

00008228 <strcmp>:
    8228:	7802      	ldrb	r2, [r0, #0]
    822a:	780b      	ldrb	r3, [r1, #0]
    822c:	2a01      	cmp	r2, #1
    822e:	bf28      	it	cs
    8230:	429a      	cmpcs	r2, r3
    8232:	d1f5      	bne.n	8220 <__retarget_lock_release_recursive+0x10>
    8234:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    8238:	ea40 0401 	orr.w	r4, r0, r1
    823c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    8240:	f06f 0c00 	mvn.w	ip, #0
    8244:	ea4f 7244 	mov.w	r2, r4, lsl #29
    8248:	b312      	cbz	r2, 8290 <strcmp+0x68>
    824a:	ea80 0401 	eor.w	r4, r0, r1
    824e:	f014 0f07 	tst.w	r4, #7
    8252:	d16a      	bne.n	832a <strcmp+0x102>
    8254:	f000 0407 	and.w	r4, r0, #7
    8258:	f020 0007 	bic.w	r0, r0, #7
    825c:	f004 0503 	and.w	r5, r4, #3
    8260:	f021 0107 	bic.w	r1, r1, #7
    8264:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    8268:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    826c:	f014 0f04 	tst.w	r4, #4
    8270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    8274:	fa0c f405 	lsl.w	r4, ip, r5
    8278:	ea62 0204 	orn	r2, r2, r4
    827c:	ea66 0604 	orn	r6, r6, r4
    8280:	d00a      	beq.n	8298 <strcmp+0x70>
    8282:	ea63 0304 	orn	r3, r3, r4
    8286:	4662      	mov	r2, ip
    8288:	ea67 0704 	orn	r7, r7, r4
    828c:	4666      	mov	r6, ip
    828e:	e003      	b.n	8298 <strcmp+0x70>
    8290:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    8294:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    8298:	fa82 f54c 	uadd8	r5, r2, ip
    829c:	ea82 0406 	eor.w	r4, r2, r6
    82a0:	faa4 f48c 	sel	r4, r4, ip
    82a4:	bb6c      	cbnz	r4, 8302 <strcmp+0xda>
    82a6:	fa83 f54c 	uadd8	r5, r3, ip
    82aa:	ea83 0507 	eor.w	r5, r3, r7
    82ae:	faa5 f58c 	sel	r5, r5, ip
    82b2:	b995      	cbnz	r5, 82da <strcmp+0xb2>
    82b4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    82b8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    82bc:	fa82 f54c 	uadd8	r5, r2, ip
    82c0:	ea82 0406 	eor.w	r4, r2, r6
    82c4:	faa4 f48c 	sel	r4, r4, ip
    82c8:	fa83 f54c 	uadd8	r5, r3, ip
    82cc:	ea83 0507 	eor.w	r5, r3, r7
    82d0:	faa5 f58c 	sel	r5, r5, ip
    82d4:	4325      	orrs	r5, r4
    82d6:	d0db      	beq.n	8290 <strcmp+0x68>
    82d8:	b99c      	cbnz	r4, 8302 <strcmp+0xda>
    82da:	ba2d      	rev	r5, r5
    82dc:	fab5 f485 	clz	r4, r5
    82e0:	f024 0407 	bic.w	r4, r4, #7
    82e4:	fa27 f104 	lsr.w	r1, r7, r4
    82e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    82ec:	fa23 f304 	lsr.w	r3, r3, r4
    82f0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    82f4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    82f8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    82fc:	eba0 0001 	sub.w	r0, r0, r1
    8300:	4770      	bx	lr
    8302:	ba24      	rev	r4, r4
    8304:	fab4 f484 	clz	r4, r4
    8308:	f024 0407 	bic.w	r4, r4, #7
    830c:	fa26 f104 	lsr.w	r1, r6, r4
    8310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    8314:	fa22 f204 	lsr.w	r2, r2, r4
    8318:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    831c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    8320:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8324:	eba0 0001 	sub.w	r0, r0, r1
    8328:	4770      	bx	lr
    832a:	f014 0f03 	tst.w	r4, #3
    832e:	d13c      	bne.n	83aa <strcmp+0x182>
    8330:	f010 0403 	ands.w	r4, r0, #3
    8334:	d128      	bne.n	8388 <strcmp+0x160>
    8336:	f850 2b08 	ldr.w	r2, [r0], #8
    833a:	f851 3b08 	ldr.w	r3, [r1], #8
    833e:	fa82 f54c 	uadd8	r5, r2, ip
    8342:	ea82 0503 	eor.w	r5, r2, r3
    8346:	faa5 f58c 	sel	r5, r5, ip
    834a:	b95d      	cbnz	r5, 8364 <strcmp+0x13c>
    834c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    8350:	f851 3c04 	ldr.w	r3, [r1, #-4]
    8354:	fa82 f54c 	uadd8	r5, r2, ip
    8358:	ea82 0503 	eor.w	r5, r2, r3
    835c:	faa5 f58c 	sel	r5, r5, ip
    8360:	2d00      	cmp	r5, #0
    8362:	d0e8      	beq.n	8336 <strcmp+0x10e>
    8364:	ba2d      	rev	r5, r5
    8366:	fab5 f485 	clz	r4, r5
    836a:	f024 0407 	bic.w	r4, r4, #7
    836e:	fa23 f104 	lsr.w	r1, r3, r4
    8372:	fa22 f204 	lsr.w	r2, r2, r4
    8376:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    837a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    837e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8382:	eba0 0001 	sub.w	r0, r0, r1
    8386:	4770      	bx	lr
    8388:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    838c:	f020 0003 	bic.w	r0, r0, #3
    8390:	f850 2b08 	ldr.w	r2, [r0], #8
    8394:	f021 0103 	bic.w	r1, r1, #3
    8398:	f851 3b08 	ldr.w	r3, [r1], #8
    839c:	fa0c f404 	lsl.w	r4, ip, r4
    83a0:	ea62 0204 	orn	r2, r2, r4
    83a4:	ea63 0304 	orn	r3, r3, r4
    83a8:	e7c9      	b.n	833e <strcmp+0x116>
    83aa:	f010 0403 	ands.w	r4, r0, #3
    83ae:	d01a      	beq.n	83e6 <strcmp+0x1be>
    83b0:	eba1 0104 	sub.w	r1, r1, r4
    83b4:	f020 0003 	bic.w	r0, r0, #3
    83b8:	07e4      	lsls	r4, r4, #31
    83ba:	f850 2b04 	ldr.w	r2, [r0], #4
    83be:	d006      	beq.n	83ce <strcmp+0x1a6>
    83c0:	d20f      	bcs.n	83e2 <strcmp+0x1ba>
    83c2:	788b      	ldrb	r3, [r1, #2]
    83c4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    83c8:	1ae4      	subs	r4, r4, r3
    83ca:	d106      	bne.n	83da <strcmp+0x1b2>
    83cc:	b12b      	cbz	r3, 83da <strcmp+0x1b2>
    83ce:	78cb      	ldrb	r3, [r1, #3]
    83d0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    83d4:	1ae4      	subs	r4, r4, r3
    83d6:	d100      	bne.n	83da <strcmp+0x1b2>
    83d8:	b91b      	cbnz	r3, 83e2 <strcmp+0x1ba>
    83da:	4620      	mov	r0, r4
    83dc:	f85d 4b10 	ldr.w	r4, [sp], #16
    83e0:	4770      	bx	lr
    83e2:	f101 0104 	add.w	r1, r1, #4
    83e6:	f850 2b04 	ldr.w	r2, [r0], #4
    83ea:	07cc      	lsls	r4, r1, #31
    83ec:	f021 0103 	bic.w	r1, r1, #3
    83f0:	f851 3b04 	ldr.w	r3, [r1], #4
    83f4:	d848      	bhi.n	8488 <strcmp+0x260>
    83f6:	d224      	bcs.n	8442 <strcmp+0x21a>
    83f8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    83fc:	fa82 f54c 	uadd8	r5, r2, ip
    8400:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    8404:	faa5 f58c 	sel	r5, r5, ip
    8408:	d10a      	bne.n	8420 <strcmp+0x1f8>
    840a:	b965      	cbnz	r5, 8426 <strcmp+0x1fe>
    840c:	f851 3b04 	ldr.w	r3, [r1], #4
    8410:	ea84 0402 	eor.w	r4, r4, r2
    8414:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    8418:	d10e      	bne.n	8438 <strcmp+0x210>
    841a:	f850 2b04 	ldr.w	r2, [r0], #4
    841e:	e7eb      	b.n	83f8 <strcmp+0x1d0>
    8420:	ea4f 2313 	mov.w	r3, r3, lsr #8
    8424:	e055      	b.n	84d2 <strcmp+0x2aa>
    8426:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    842a:	d14d      	bne.n	84c8 <strcmp+0x2a0>
    842c:	7808      	ldrb	r0, [r1, #0]
    842e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    8432:	f1c0 0000 	rsb	r0, r0, #0
    8436:	4770      	bx	lr
    8438:	ea4f 6212 	mov.w	r2, r2, lsr #24
    843c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    8440:	e047      	b.n	84d2 <strcmp+0x2aa>
    8442:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    8446:	fa82 f54c 	uadd8	r5, r2, ip
    844a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    844e:	faa5 f58c 	sel	r5, r5, ip
    8452:	d10a      	bne.n	846a <strcmp+0x242>
    8454:	b965      	cbnz	r5, 8470 <strcmp+0x248>
    8456:	f851 3b04 	ldr.w	r3, [r1], #4
    845a:	ea84 0402 	eor.w	r4, r4, r2
    845e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    8462:	d10c      	bne.n	847e <strcmp+0x256>
    8464:	f850 2b04 	ldr.w	r2, [r0], #4
    8468:	e7eb      	b.n	8442 <strcmp+0x21a>
    846a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    846e:	e030      	b.n	84d2 <strcmp+0x2aa>
    8470:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    8474:	d128      	bne.n	84c8 <strcmp+0x2a0>
    8476:	880b      	ldrh	r3, [r1, #0]
    8478:	ea4f 4212 	mov.w	r2, r2, lsr #16
    847c:	e029      	b.n	84d2 <strcmp+0x2aa>
    847e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    8482:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    8486:	e024      	b.n	84d2 <strcmp+0x2aa>
    8488:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    848c:	fa82 f54c 	uadd8	r5, r2, ip
    8490:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    8494:	faa5 f58c 	sel	r5, r5, ip
    8498:	d10a      	bne.n	84b0 <strcmp+0x288>
    849a:	b965      	cbnz	r5, 84b6 <strcmp+0x28e>
    849c:	f851 3b04 	ldr.w	r3, [r1], #4
    84a0:	ea84 0402 	eor.w	r4, r4, r2
    84a4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    84a8:	d109      	bne.n	84be <strcmp+0x296>
    84aa:	f850 2b04 	ldr.w	r2, [r0], #4
    84ae:	e7eb      	b.n	8488 <strcmp+0x260>
    84b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    84b4:	e00d      	b.n	84d2 <strcmp+0x2aa>
    84b6:	f015 0fff 	tst.w	r5, #255	; 0xff
    84ba:	d105      	bne.n	84c8 <strcmp+0x2a0>
    84bc:	680b      	ldr	r3, [r1, #0]
    84be:	ea4f 2212 	mov.w	r2, r2, lsr #8
    84c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    84c6:	e004      	b.n	84d2 <strcmp+0x2aa>
    84c8:	f04f 0000 	mov.w	r0, #0
    84cc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    84d0:	4770      	bx	lr
    84d2:	ba12      	rev	r2, r2
    84d4:	ba1b      	rev	r3, r3
    84d6:	fa82 f44c 	uadd8	r4, r2, ip
    84da:	ea82 0403 	eor.w	r4, r2, r3
    84de:	faa4 f58c 	sel	r5, r4, ip
    84e2:	fab5 f485 	clz	r4, r5
    84e6:	fa02 f204 	lsl.w	r2, r2, r4
    84ea:	fa03 f304 	lsl.w	r3, r3, r4
    84ee:	ea4f 6012 	mov.w	r0, r2, lsr #24
    84f2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    84f6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    84fa:	4770      	bx	lr

000084fc <strcpy>:
    84fc:	ea80 0201 	eor.w	r2, r0, r1
    8500:	4684      	mov	ip, r0
    8502:	f012 0f03 	tst.w	r2, #3
    8506:	d14f      	bne.n	85a8 <strcpy+0xac>
    8508:	f011 0f03 	tst.w	r1, #3
    850c:	d132      	bne.n	8574 <strcpy+0x78>
    850e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8512:	f011 0f04 	tst.w	r1, #4
    8516:	f851 3b04 	ldr.w	r3, [r1], #4
    851a:	d00b      	beq.n	8534 <strcpy+0x38>
    851c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8520:	439a      	bics	r2, r3
    8522:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8526:	bf04      	itt	eq
    8528:	f84c 3b04 	streq.w	r3, [ip], #4
    852c:	f851 3b04 	ldreq.w	r3, [r1], #4
    8530:	d116      	bne.n	8560 <strcpy+0x64>
    8532:	bf00      	nop
    8534:	f851 4b04 	ldr.w	r4, [r1], #4
    8538:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    853c:	439a      	bics	r2, r3
    853e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8542:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    8546:	d10b      	bne.n	8560 <strcpy+0x64>
    8548:	f84c 3b04 	str.w	r3, [ip], #4
    854c:	43a2      	bics	r2, r4
    854e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8552:	bf04      	itt	eq
    8554:	f851 3b04 	ldreq.w	r3, [r1], #4
    8558:	f84c 4b04 	streq.w	r4, [ip], #4
    855c:	d0ea      	beq.n	8534 <strcpy+0x38>
    855e:	4623      	mov	r3, r4
    8560:	f80c 3b01 	strb.w	r3, [ip], #1
    8564:	f013 0fff 	tst.w	r3, #255	; 0xff
    8568:	ea4f 2333 	mov.w	r3, r3, ror #8
    856c:	d1f8      	bne.n	8560 <strcpy+0x64>
    856e:	f85d 4b04 	ldr.w	r4, [sp], #4
    8572:	4770      	bx	lr
    8574:	f011 0f01 	tst.w	r1, #1
    8578:	d006      	beq.n	8588 <strcpy+0x8c>
    857a:	f811 2b01 	ldrb.w	r2, [r1], #1
    857e:	f80c 2b01 	strb.w	r2, [ip], #1
    8582:	2a00      	cmp	r2, #0
    8584:	bf08      	it	eq
    8586:	4770      	bxeq	lr
    8588:	f011 0f02 	tst.w	r1, #2
    858c:	d0bf      	beq.n	850e <strcpy+0x12>
    858e:	f831 2b02 	ldrh.w	r2, [r1], #2
    8592:	f012 0fff 	tst.w	r2, #255	; 0xff
    8596:	bf16      	itet	ne
    8598:	f82c 2b02 	strhne.w	r2, [ip], #2
    859c:	f88c 2000 	strbeq.w	r2, [ip]
    85a0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    85a4:	d1b3      	bne.n	850e <strcpy+0x12>
    85a6:	4770      	bx	lr
    85a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    85ac:	f80c 2b01 	strb.w	r2, [ip], #1
    85b0:	2a00      	cmp	r2, #0
    85b2:	d1f9      	bne.n	85a8 <strcpy+0xac>
    85b4:	4770      	bx	lr
    85b6:	bf00      	nop
	...

000085c0 <strlen>:
    85c0:	f890 f000 	pld	[r0]
    85c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    85c8:	f020 0107 	bic.w	r1, r0, #7
    85cc:	f06f 0c00 	mvn.w	ip, #0
    85d0:	f010 0407 	ands.w	r4, r0, #7
    85d4:	f891 f020 	pld	[r1, #32]
    85d8:	f040 8049 	bne.w	866e <strlen+0xae>
    85dc:	f04f 0400 	mov.w	r4, #0
    85e0:	f06f 0007 	mvn.w	r0, #7
    85e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    85e8:	f891 f040 	pld	[r1, #64]	; 0x40
    85ec:	f100 0008 	add.w	r0, r0, #8
    85f0:	fa82 f24c 	uadd8	r2, r2, ip
    85f4:	faa4 f28c 	sel	r2, r4, ip
    85f8:	fa83 f34c 	uadd8	r3, r3, ip
    85fc:	faa2 f38c 	sel	r3, r2, ip
    8600:	bb4b      	cbnz	r3, 8656 <strlen+0x96>
    8602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8606:	fa82 f24c 	uadd8	r2, r2, ip
    860a:	f100 0008 	add.w	r0, r0, #8
    860e:	faa4 f28c 	sel	r2, r4, ip
    8612:	fa83 f34c 	uadd8	r3, r3, ip
    8616:	faa2 f38c 	sel	r3, r2, ip
    861a:	b9e3      	cbnz	r3, 8656 <strlen+0x96>
    861c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8620:	fa82 f24c 	uadd8	r2, r2, ip
    8624:	f100 0008 	add.w	r0, r0, #8
    8628:	faa4 f28c 	sel	r2, r4, ip
    862c:	fa83 f34c 	uadd8	r3, r3, ip
    8630:	faa2 f38c 	sel	r3, r2, ip
    8634:	b97b      	cbnz	r3, 8656 <strlen+0x96>
    8636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    863a:	f101 0120 	add.w	r1, r1, #32
    863e:	fa82 f24c 	uadd8	r2, r2, ip
    8642:	f100 0008 	add.w	r0, r0, #8
    8646:	faa4 f28c 	sel	r2, r4, ip
    864a:	fa83 f34c 	uadd8	r3, r3, ip
    864e:	faa2 f38c 	sel	r3, r2, ip
    8652:	2b00      	cmp	r3, #0
    8654:	d0c6      	beq.n	85e4 <strlen+0x24>
    8656:	2a00      	cmp	r2, #0
    8658:	bf04      	itt	eq
    865a:	3004      	addeq	r0, #4
    865c:	461a      	moveq	r2, r3
    865e:	ba12      	rev	r2, r2
    8660:	fab2 f282 	clz	r2, r2
    8664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    8668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    866c:	4770      	bx	lr
    866e:	e9d1 2300 	ldrd	r2, r3, [r1]
    8672:	f004 0503 	and.w	r5, r4, #3
    8676:	f1c4 0000 	rsb	r0, r4, #0
    867a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    867e:	f014 0f04 	tst.w	r4, #4
    8682:	f891 f040 	pld	[r1, #64]	; 0x40
    8686:	fa0c f505 	lsl.w	r5, ip, r5
    868a:	ea62 0205 	orn	r2, r2, r5
    868e:	bf1c      	itt	ne
    8690:	ea63 0305 	ornne	r3, r3, r5
    8694:	4662      	movne	r2, ip
    8696:	f04f 0400 	mov.w	r4, #0
    869a:	e7a9      	b.n	85f0 <strlen+0x30>
    869c:	0000      	movs	r0, r0
	...

000086a0 <nan>:
    86a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 86a8 <nan+0x8>
    86a4:	4770      	bx	lr
    86a6:	bf00      	nop
    86a8:	00000000 	.word	0x00000000
    86ac:	7ff80000 	.word	0x7ff80000

000086b0 <nanf>:
    86b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 86b8 <nanf+0x8>
    86b4:	4770      	bx	lr
    86b6:	bf00      	nop
    86b8:	7fc00000 	.word	0x7fc00000

000086bc <__register_exitproc>:
    86bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8740 <__register_exitproc+0x84>
    86c4:	4606      	mov	r6, r0
    86c6:	f8da 0000 	ldr.w	r0, [sl]
    86ca:	4698      	mov	r8, r3
    86cc:	460f      	mov	r7, r1
    86ce:	4691      	mov	r9, r2
    86d0:	f7ff fd9c 	bl	820c <__retarget_lock_acquire_recursive>
    86d4:	4b18      	ldr	r3, [pc, #96]	; (8738 <__register_exitproc+0x7c>)
    86d6:	681c      	ldr	r4, [r3, #0]
    86d8:	b324      	cbz	r4, 8724 <__register_exitproc+0x68>
    86da:	6865      	ldr	r5, [r4, #4]
    86dc:	2d1f      	cmp	r5, #31
    86de:	dc24      	bgt.n	872a <__register_exitproc+0x6e>
    86e0:	b95e      	cbnz	r6, 86fa <__register_exitproc+0x3e>
    86e2:	1c6b      	adds	r3, r5, #1
    86e4:	3502      	adds	r5, #2
    86e6:	f8da 0000 	ldr.w	r0, [sl]
    86ea:	6063      	str	r3, [r4, #4]
    86ec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    86f0:	f7ff fd8e 	bl	8210 <__retarget_lock_release_recursive>
    86f4:	2000      	movs	r0, #0
    86f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    86fe:	2301      	movs	r3, #1
    8700:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8704:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8708:	40ab      	lsls	r3, r5
    870a:	431a      	orrs	r2, r3
    870c:	2e02      	cmp	r6, #2
    870e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8712:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8716:	d1e4      	bne.n	86e2 <__register_exitproc+0x26>
    8718:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    871c:	431a      	orrs	r2, r3
    871e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8722:	e7de      	b.n	86e2 <__register_exitproc+0x26>
    8724:	4c05      	ldr	r4, [pc, #20]	; (873c <__register_exitproc+0x80>)
    8726:	601c      	str	r4, [r3, #0]
    8728:	e7d7      	b.n	86da <__register_exitproc+0x1e>
    872a:	f8da 0000 	ldr.w	r0, [sl]
    872e:	f7ff fd6f 	bl	8210 <__retarget_lock_release_recursive>
    8732:	f04f 30ff 	mov.w	r0, #4294967295
    8736:	e7de      	b.n	86f6 <__register_exitproc+0x3a>
    8738:	20002fc0 	.word	0x20002fc0
    873c:	20002fc4 	.word	0x20002fc4
    8740:	200015d4 	.word	0x200015d4

00008744 <_malloc_trim_r>:
    8744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8746:	4f24      	ldr	r7, [pc, #144]	; (87d8 <_malloc_trim_r+0x94>)
    8748:	460c      	mov	r4, r1
    874a:	4606      	mov	r6, r0
    874c:	f7fd fd36 	bl	61bc <__malloc_lock>
    8750:	68bb      	ldr	r3, [r7, #8]
    8752:	685d      	ldr	r5, [r3, #4]
    8754:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    8758:	310f      	adds	r1, #15
    875a:	f025 0503 	bic.w	r5, r5, #3
    875e:	194b      	adds	r3, r1, r5
    8760:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    8764:	f023 030f 	bic.w	r3, r3, #15
    8768:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    876c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    8770:	db07      	blt.n	8782 <_malloc_trim_r+0x3e>
    8772:	2100      	movs	r1, #0
    8774:	4630      	mov	r0, r6
    8776:	f7ff fcf3 	bl	8160 <_sbrk_r>
    877a:	68bb      	ldr	r3, [r7, #8]
    877c:	442b      	add	r3, r5
    877e:	4298      	cmp	r0, r3
    8780:	d004      	beq.n	878c <_malloc_trim_r+0x48>
    8782:	4630      	mov	r0, r6
    8784:	f7fd fd20 	bl	61c8 <__malloc_unlock>
    8788:	2000      	movs	r0, #0
    878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    878c:	4261      	negs	r1, r4
    878e:	4630      	mov	r0, r6
    8790:	f7ff fce6 	bl	8160 <_sbrk_r>
    8794:	3001      	adds	r0, #1
    8796:	d00d      	beq.n	87b4 <_malloc_trim_r+0x70>
    8798:	4a10      	ldr	r2, [pc, #64]	; (87dc <_malloc_trim_r+0x98>)
    879a:	68bb      	ldr	r3, [r7, #8]
    879c:	1b2d      	subs	r5, r5, r4
    879e:	f045 0501 	orr.w	r5, r5, #1
    87a2:	605d      	str	r5, [r3, #4]
    87a4:	6813      	ldr	r3, [r2, #0]
    87a6:	4630      	mov	r0, r6
    87a8:	1b1b      	subs	r3, r3, r4
    87aa:	6013      	str	r3, [r2, #0]
    87ac:	f7fd fd0c 	bl	61c8 <__malloc_unlock>
    87b0:	2001      	movs	r0, #1
    87b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    87b4:	2100      	movs	r1, #0
    87b6:	4630      	mov	r0, r6
    87b8:	f7ff fcd2 	bl	8160 <_sbrk_r>
    87bc:	68ba      	ldr	r2, [r7, #8]
    87be:	1a83      	subs	r3, r0, r2
    87c0:	2b0f      	cmp	r3, #15
    87c2:	ddde      	ble.n	8782 <_malloc_trim_r+0x3e>
    87c4:	f043 0301 	orr.w	r3, r3, #1
    87c8:	6053      	str	r3, [r2, #4]
    87ca:	4b05      	ldr	r3, [pc, #20]	; (87e0 <_malloc_trim_r+0x9c>)
    87cc:	4903      	ldr	r1, [pc, #12]	; (87dc <_malloc_trim_r+0x98>)
    87ce:	681b      	ldr	r3, [r3, #0]
    87d0:	1ac0      	subs	r0, r0, r3
    87d2:	6008      	str	r0, [r1, #0]
    87d4:	e7d5      	b.n	8782 <_malloc_trim_r+0x3e>
    87d6:	bf00      	nop
    87d8:	2000174c 	.word	0x2000174c
    87dc:	20003160 	.word	0x20003160
    87e0:	20001b54 	.word	0x20001b54

000087e4 <_free_r>:
    87e4:	2900      	cmp	r1, #0
    87e6:	d061      	beq.n	88ac <_free_r+0xc8>
    87e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87ea:	460c      	mov	r4, r1
    87ec:	4606      	mov	r6, r0
    87ee:	f7fd fce5 	bl	61bc <__malloc_lock>
    87f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    87f6:	4f7b      	ldr	r7, [pc, #492]	; (89e4 <_free_r+0x200>)
    87f8:	f1a4 0508 	sub.w	r5, r4, #8
    87fc:	f022 0101 	bic.w	r1, r2, #1
    8800:	eb05 0c01 	add.w	ip, r5, r1
    8804:	68b8      	ldr	r0, [r7, #8]
    8806:	f8dc 3004 	ldr.w	r3, [ip, #4]
    880a:	4560      	cmp	r0, ip
    880c:	f023 0303 	bic.w	r3, r3, #3
    8810:	f000 808b 	beq.w	892a <_free_r+0x146>
    8814:	07d2      	lsls	r2, r2, #31
    8816:	f8cc 3004 	str.w	r3, [ip, #4]
    881a:	d432      	bmi.n	8882 <_free_r+0x9e>
    881c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8820:	1aad      	subs	r5, r5, r2
    8822:	4411      	add	r1, r2
    8824:	68aa      	ldr	r2, [r5, #8]
    8826:	f107 0008 	add.w	r0, r7, #8
    882a:	4282      	cmp	r2, r0
    882c:	d06a      	beq.n	8904 <_free_r+0x120>
    882e:	eb0c 0403 	add.w	r4, ip, r3
    8832:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8836:	68ec      	ldr	r4, [r5, #12]
    8838:	60d4      	str	r4, [r2, #12]
    883a:	f01e 0f01 	tst.w	lr, #1
    883e:	60a2      	str	r2, [r4, #8]
    8840:	f000 8097 	beq.w	8972 <_free_r+0x18e>
    8844:	f041 0301 	orr.w	r3, r1, #1
    8848:	606b      	str	r3, [r5, #4]
    884a:	f8cc 1000 	str.w	r1, [ip]
    884e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8852:	d235      	bcs.n	88c0 <_free_r+0xdc>
    8854:	6878      	ldr	r0, [r7, #4]
    8856:	08cb      	lsrs	r3, r1, #3
    8858:	2201      	movs	r2, #1
    885a:	0949      	lsrs	r1, r1, #5
    885c:	3301      	adds	r3, #1
    885e:	408a      	lsls	r2, r1
    8860:	4302      	orrs	r2, r0
    8862:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    8866:	607a      	str	r2, [r7, #4]
    8868:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    886c:	3a08      	subs	r2, #8
    886e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    8872:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    8876:	60cd      	str	r5, [r1, #12]
    8878:	4630      	mov	r0, r6
    887a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    887e:	f7fd bca3 	b.w	61c8 <__malloc_unlock>
    8882:	eb0c 0203 	add.w	r2, ip, r3
    8886:	6852      	ldr	r2, [r2, #4]
    8888:	07d0      	lsls	r0, r2, #31
    888a:	d410      	bmi.n	88ae <_free_r+0xca>
    888c:	4419      	add	r1, r3
    888e:	f107 0008 	add.w	r0, r7, #8
    8892:	f8dc 3008 	ldr.w	r3, [ip, #8]
    8896:	4283      	cmp	r3, r0
    8898:	d073      	beq.n	8982 <_free_r+0x19e>
    889a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    889e:	60da      	str	r2, [r3, #12]
    88a0:	6093      	str	r3, [r2, #8]
    88a2:	f041 0301 	orr.w	r3, r1, #1
    88a6:	606b      	str	r3, [r5, #4]
    88a8:	5069      	str	r1, [r5, r1]
    88aa:	e7d0      	b.n	884e <_free_r+0x6a>
    88ac:	4770      	bx	lr
    88ae:	f041 0301 	orr.w	r3, r1, #1
    88b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    88b6:	f844 3c04 	str.w	r3, [r4, #-4]
    88ba:	f8cc 1000 	str.w	r1, [ip]
    88be:	d3c9      	bcc.n	8854 <_free_r+0x70>
    88c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    88c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    88c8:	d248      	bcs.n	895c <_free_r+0x178>
    88ca:	098b      	lsrs	r3, r1, #6
    88cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
    88d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    88d4:	00c3      	lsls	r3, r0, #3
    88d6:	18f8      	adds	r0, r7, r3
    88d8:	58fb      	ldr	r3, [r7, r3]
    88da:	3808      	subs	r0, #8
    88dc:	4298      	cmp	r0, r3
    88de:	d059      	beq.n	8994 <_free_r+0x1b0>
    88e0:	685a      	ldr	r2, [r3, #4]
    88e2:	f022 0203 	bic.w	r2, r2, #3
    88e6:	428a      	cmp	r2, r1
    88e8:	d902      	bls.n	88f0 <_free_r+0x10c>
    88ea:	689b      	ldr	r3, [r3, #8]
    88ec:	4298      	cmp	r0, r3
    88ee:	d1f7      	bne.n	88e0 <_free_r+0xfc>
    88f0:	68d8      	ldr	r0, [r3, #12]
    88f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    88f6:	6085      	str	r5, [r0, #8]
    88f8:	60dd      	str	r5, [r3, #12]
    88fa:	4630      	mov	r0, r6
    88fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8900:	f7fd bc62 	b.w	61c8 <__malloc_unlock>
    8904:	eb0c 0203 	add.w	r2, ip, r3
    8908:	6852      	ldr	r2, [r2, #4]
    890a:	07d2      	lsls	r2, r2, #31
    890c:	d463      	bmi.n	89d6 <_free_r+0x1f2>
    890e:	440b      	add	r3, r1
    8910:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    8914:	60ca      	str	r2, [r1, #12]
    8916:	6091      	str	r1, [r2, #8]
    8918:	f043 0201 	orr.w	r2, r3, #1
    891c:	606a      	str	r2, [r5, #4]
    891e:	4630      	mov	r0, r6
    8920:	50eb      	str	r3, [r5, r3]
    8922:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8926:	f7fd bc4f 	b.w	61c8 <__malloc_unlock>
    892a:	440b      	add	r3, r1
    892c:	07d1      	lsls	r1, r2, #31
    892e:	d407      	bmi.n	8940 <_free_r+0x15c>
    8930:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8934:	1aad      	subs	r5, r5, r2
    8936:	4413      	add	r3, r2
    8938:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    893c:	60ca      	str	r2, [r1, #12]
    893e:	6091      	str	r1, [r2, #8]
    8940:	f043 0201 	orr.w	r2, r3, #1
    8944:	606a      	str	r2, [r5, #4]
    8946:	4a28      	ldr	r2, [pc, #160]	; (89e8 <_free_r+0x204>)
    8948:	60bd      	str	r5, [r7, #8]
    894a:	6812      	ldr	r2, [r2, #0]
    894c:	429a      	cmp	r2, r3
    894e:	d893      	bhi.n	8878 <_free_r+0x94>
    8950:	4b26      	ldr	r3, [pc, #152]	; (89ec <_free_r+0x208>)
    8952:	4630      	mov	r0, r6
    8954:	6819      	ldr	r1, [r3, #0]
    8956:	f7ff fef5 	bl	8744 <_malloc_trim_r>
    895a:	e78d      	b.n	8878 <_free_r+0x94>
    895c:	2b14      	cmp	r3, #20
    895e:	d90a      	bls.n	8976 <_free_r+0x192>
    8960:	2b54      	cmp	r3, #84	; 0x54
    8962:	d81f      	bhi.n	89a4 <_free_r+0x1c0>
    8964:	0b0b      	lsrs	r3, r1, #12
    8966:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    896a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    896e:	00c3      	lsls	r3, r0, #3
    8970:	e7b1      	b.n	88d6 <_free_r+0xf2>
    8972:	4419      	add	r1, r3
    8974:	e78d      	b.n	8892 <_free_r+0xae>
    8976:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    897a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    897e:	00c3      	lsls	r3, r0, #3
    8980:	e7a9      	b.n	88d6 <_free_r+0xf2>
    8982:	f041 0301 	orr.w	r3, r1, #1
    8986:	e9c7 5504 	strd	r5, r5, [r7, #16]
    898a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    898e:	606b      	str	r3, [r5, #4]
    8990:	5069      	str	r1, [r5, r1]
    8992:	e771      	b.n	8878 <_free_r+0x94>
    8994:	6879      	ldr	r1, [r7, #4]
    8996:	1092      	asrs	r2, r2, #2
    8998:	2401      	movs	r4, #1
    899a:	fa04 f202 	lsl.w	r2, r4, r2
    899e:	430a      	orrs	r2, r1
    89a0:	607a      	str	r2, [r7, #4]
    89a2:	e7a6      	b.n	88f2 <_free_r+0x10e>
    89a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    89a8:	d806      	bhi.n	89b8 <_free_r+0x1d4>
    89aa:	0bcb      	lsrs	r3, r1, #15
    89ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
    89b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    89b4:	00c3      	lsls	r3, r0, #3
    89b6:	e78e      	b.n	88d6 <_free_r+0xf2>
    89b8:	f240 5254 	movw	r2, #1364	; 0x554
    89bc:	4293      	cmp	r3, r2
    89be:	d806      	bhi.n	89ce <_free_r+0x1ea>
    89c0:	0c8b      	lsrs	r3, r1, #18
    89c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    89c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    89ca:	00c3      	lsls	r3, r0, #3
    89cc:	e783      	b.n	88d6 <_free_r+0xf2>
    89ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    89d2:	227e      	movs	r2, #126	; 0x7e
    89d4:	e77f      	b.n	88d6 <_free_r+0xf2>
    89d6:	f041 0301 	orr.w	r3, r1, #1
    89da:	606b      	str	r3, [r5, #4]
    89dc:	f8cc 1000 	str.w	r1, [ip]
    89e0:	e74a      	b.n	8878 <_free_r+0x94>
    89e2:	bf00      	nop
    89e4:	2000174c 	.word	0x2000174c
    89e8:	20001b58 	.word	0x20001b58
    89ec:	20003190 	.word	0x20003190

000089f0 <rshift>:
    89f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89f4:	6904      	ldr	r4, [r0, #16]
    89f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    89fa:	dd2f      	ble.n	8a5c <rshift+0x6c>
    89fc:	f100 0e14 	add.w	lr, r0, #20
    8a00:	114e      	asrs	r6, r1, #5
    8a02:	f011 0c1f 	ands.w	ip, r1, #31
    8a06:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    8a0a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    8a0e:	d02b      	beq.n	8a68 <rshift+0x78>
    8a10:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    8a14:	3304      	adds	r3, #4
    8a16:	429d      	cmp	r5, r3
    8a18:	fa21 f10c 	lsr.w	r1, r1, ip
    8a1c:	f1cc 0820 	rsb	r8, ip, #32
    8a20:	d918      	bls.n	8a54 <rshift+0x64>
    8a22:	4677      	mov	r7, lr
    8a24:	681a      	ldr	r2, [r3, #0]
    8a26:	fa02 f208 	lsl.w	r2, r2, r8
    8a2a:	430a      	orrs	r2, r1
    8a2c:	f847 2b04 	str.w	r2, [r7], #4
    8a30:	f853 1b04 	ldr.w	r1, [r3], #4
    8a34:	429d      	cmp	r5, r3
    8a36:	fa21 f10c 	lsr.w	r1, r1, ip
    8a3a:	d8f3      	bhi.n	8a24 <rshift+0x34>
    8a3c:	1ba3      	subs	r3, r4, r6
    8a3e:	009b      	lsls	r3, r3, #2
    8a40:	3b05      	subs	r3, #5
    8a42:	089b      	lsrs	r3, r3, #2
    8a44:	3301      	adds	r3, #1
    8a46:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    8a4a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    8a4e:	b1c9      	cbz	r1, 8a84 <rshift+0x94>
    8a50:	3404      	adds	r4, #4
    8a52:	e017      	b.n	8a84 <rshift+0x94>
    8a54:	6141      	str	r1, [r0, #20]
    8a56:	4674      	mov	r4, lr
    8a58:	2900      	cmp	r1, #0
    8a5a:	d1f9      	bne.n	8a50 <rshift+0x60>
    8a5c:	2300      	movs	r3, #0
    8a5e:	6103      	str	r3, [r0, #16]
    8a60:	2300      	movs	r3, #0
    8a62:	6143      	str	r3, [r0, #20]
    8a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a68:	429d      	cmp	r5, r3
    8a6a:	bf88      	it	hi
    8a6c:	f100 0210 	addhi.w	r2, r0, #16
    8a70:	d9f4      	bls.n	8a5c <rshift+0x6c>
    8a72:	f853 1b04 	ldr.w	r1, [r3], #4
    8a76:	f842 1f04 	str.w	r1, [r2, #4]!
    8a7a:	429d      	cmp	r5, r3
    8a7c:	d8f9      	bhi.n	8a72 <rshift+0x82>
    8a7e:	1ba4      	subs	r4, r4, r6
    8a80:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    8a84:	eba4 030e 	sub.w	r3, r4, lr
    8a88:	109b      	asrs	r3, r3, #2
    8a8a:	4574      	cmp	r4, lr
    8a8c:	6103      	str	r3, [r0, #16]
    8a8e:	d0e7      	beq.n	8a60 <rshift+0x70>
    8a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a94 <__gethex>:
    8a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a98:	ed2d 8b02 	vpush	{d8}
    8a9c:	680c      	ldr	r4, [r1, #0]
    8a9e:	468b      	mov	fp, r1
    8aa0:	78a1      	ldrb	r1, [r4, #2]
    8aa2:	b085      	sub	sp, #20
    8aa4:	2930      	cmp	r1, #48	; 0x30
    8aa6:	ee08 0a10 	vmov	s16, r0
    8aaa:	4692      	mov	sl, r2
    8aac:	9302      	str	r3, [sp, #8]
    8aae:	f040 81ce 	bne.w	8e4e <__gethex+0x3ba>
    8ab2:	f06f 0001 	mvn.w	r0, #1
    8ab6:	1b00      	subs	r0, r0, r4
    8ab8:	1ce2      	adds	r2, r4, #3
    8aba:	1883      	adds	r3, r0, r2
    8abc:	4614      	mov	r4, r2
    8abe:	f812 1b01 	ldrb.w	r1, [r2], #1
    8ac2:	2930      	cmp	r1, #48	; 0x30
    8ac4:	d0f9      	beq.n	8aba <__gethex+0x26>
    8ac6:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8dc8 <__gethex+0x334>
    8aca:	f818 2001 	ldrb.w	r2, [r8, r1]
    8ace:	2a00      	cmp	r2, #0
    8ad0:	f000 80e5 	beq.w	8c9e <__gethex+0x20a>
    8ad4:	7822      	ldrb	r2, [r4, #0]
    8ad6:	2700      	movs	r7, #0
    8ad8:	f818 2002 	ldrb.w	r2, [r8, r2]
    8adc:	463d      	mov	r5, r7
    8ade:	4626      	mov	r6, r4
    8ae0:	b12a      	cbz	r2, 8aee <__gethex+0x5a>
    8ae2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8ae6:	f818 2002 	ldrb.w	r2, [r8, r2]
    8aea:	2a00      	cmp	r2, #0
    8aec:	d1f9      	bne.n	8ae2 <__gethex+0x4e>
    8aee:	49b5      	ldr	r1, [pc, #724]	; (8dc4 <__gethex+0x330>)
    8af0:	9301      	str	r3, [sp, #4]
    8af2:	2201      	movs	r2, #1
    8af4:	4630      	mov	r0, r6
    8af6:	f7ff f863 	bl	7bc0 <strncmp>
    8afa:	9b01      	ldr	r3, [sp, #4]
    8afc:	4681      	mov	r9, r0
    8afe:	2800      	cmp	r0, #0
    8b00:	d04d      	beq.n	8b9e <__gethex+0x10a>
    8b02:	2d00      	cmp	r5, #0
    8b04:	d14e      	bne.n	8ba4 <__gethex+0x110>
    8b06:	7832      	ldrb	r2, [r6, #0]
    8b08:	46a9      	mov	r9, r5
    8b0a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8b0e:	2a50      	cmp	r2, #80	; 0x50
    8b10:	4635      	mov	r5, r6
    8b12:	d050      	beq.n	8bb6 <__gethex+0x122>
    8b14:	f8cb 6000 	str.w	r6, [fp]
    8b18:	2f00      	cmp	r7, #0
    8b1a:	d169      	bne.n	8bf0 <__gethex+0x15c>
    8b1c:	1b2b      	subs	r3, r5, r4
    8b1e:	3b01      	subs	r3, #1
    8b20:	2b07      	cmp	r3, #7
    8b22:	4639      	mov	r1, r7
    8b24:	dd04      	ble.n	8b30 <__gethex+0x9c>
    8b26:	105b      	asrs	r3, r3, #1
    8b28:	2b07      	cmp	r3, #7
    8b2a:	f101 0101 	add.w	r1, r1, #1
    8b2e:	dcfa      	bgt.n	8b26 <__gethex+0x92>
    8b30:	ee18 0a10 	vmov	r0, s16
    8b34:	f000 fb82 	bl	923c <_Balloc>
    8b38:	4683      	mov	fp, r0
    8b3a:	2800      	cmp	r0, #0
    8b3c:	f000 8266 	beq.w	900c <__gethex+0x578>
    8b40:	f100 0614 	add.w	r6, r0, #20
    8b44:	42ac      	cmp	r4, r5
    8b46:	9601      	str	r6, [sp, #4]
    8b48:	f080 81d2 	bcs.w	8ef0 <__gethex+0x45c>
    8b4c:	2700      	movs	r7, #0
    8b4e:	f8cd 900c 	str.w	r9, [sp, #12]
    8b52:	499c      	ldr	r1, [pc, #624]	; (8dc4 <__gethex+0x330>)
    8b54:	46a1      	mov	r9, r4
    8b56:	463c      	mov	r4, r7
    8b58:	e00c      	b.n	8b74 <__gethex+0xe0>
    8b5a:	2f20      	cmp	r7, #32
    8b5c:	d019      	beq.n	8b92 <__gethex+0xfe>
    8b5e:	4638      	mov	r0, r7
    8b60:	3704      	adds	r7, #4
    8b62:	782a      	ldrb	r2, [r5, #0]
    8b64:	f818 2002 	ldrb.w	r2, [r8, r2]
    8b68:	f002 020f 	and.w	r2, r2, #15
    8b6c:	4082      	lsls	r2, r0
    8b6e:	4314      	orrs	r4, r2
    8b70:	454d      	cmp	r5, r9
    8b72:	d047      	beq.n	8c04 <__gethex+0x170>
    8b74:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    8b78:	2a2e      	cmp	r2, #46	; 0x2e
    8b7a:	d1ee      	bne.n	8b5a <__gethex+0xc6>
    8b7c:	454d      	cmp	r5, r9
    8b7e:	d3ec      	bcc.n	8b5a <__gethex+0xc6>
    8b80:	2201      	movs	r2, #1
    8b82:	4628      	mov	r0, r5
    8b84:	f7ff f81c 	bl	7bc0 <strncmp>
    8b88:	498e      	ldr	r1, [pc, #568]	; (8dc4 <__gethex+0x330>)
    8b8a:	2800      	cmp	r0, #0
    8b8c:	d0f0      	beq.n	8b70 <__gethex+0xdc>
    8b8e:	2f20      	cmp	r7, #32
    8b90:	d1e5      	bne.n	8b5e <__gethex+0xca>
    8b92:	2000      	movs	r0, #0
    8b94:	f846 4b04 	str.w	r4, [r6], #4
    8b98:	2704      	movs	r7, #4
    8b9a:	4604      	mov	r4, r0
    8b9c:	e7e1      	b.n	8b62 <__gethex+0xce>
    8b9e:	2d00      	cmp	r5, #0
    8ba0:	f000 8142 	beq.w	8e28 <__gethex+0x394>
    8ba4:	7832      	ldrb	r2, [r6, #0]
    8ba6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8baa:	1bad      	subs	r5, r5, r6
    8bac:	2a50      	cmp	r2, #80	; 0x50
    8bae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    8bb2:	4635      	mov	r5, r6
    8bb4:	d1ae      	bne.n	8b14 <__gethex+0x80>
    8bb6:	786a      	ldrb	r2, [r5, #1]
    8bb8:	2a2b      	cmp	r2, #43	; 0x2b
    8bba:	f000 8125 	beq.w	8e08 <__gethex+0x374>
    8bbe:	2a2d      	cmp	r2, #45	; 0x2d
    8bc0:	f000 80a5 	beq.w	8d0e <__gethex+0x27a>
    8bc4:	1c6e      	adds	r6, r5, #1
    8bc6:	2000      	movs	r0, #0
    8bc8:	f818 1002 	ldrb.w	r1, [r8, r2]
    8bcc:	1e4a      	subs	r2, r1, #1
    8bce:	2a18      	cmp	r2, #24
    8bd0:	f200 809b 	bhi.w	8d0a <__gethex+0x276>
    8bd4:	7872      	ldrb	r2, [r6, #1]
    8bd6:	f818 2002 	ldrb.w	r2, [r8, r2]
    8bda:	3910      	subs	r1, #16
    8bdc:	3601      	adds	r6, #1
    8bde:	2a00      	cmp	r2, #0
    8be0:	d15a      	bne.n	8c98 <__gethex+0x204>
    8be2:	b100      	cbz	r0, 8be6 <__gethex+0x152>
    8be4:	4249      	negs	r1, r1
    8be6:	4489      	add	r9, r1
    8be8:	f8cb 6000 	str.w	r6, [fp]
    8bec:	2f00      	cmp	r7, #0
    8bee:	d095      	beq.n	8b1c <__gethex+0x88>
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	bf14      	ite	ne
    8bf4:	2500      	movne	r5, #0
    8bf6:	2506      	moveq	r5, #6
    8bf8:	4628      	mov	r0, r5
    8bfa:	b005      	add	sp, #20
    8bfc:	ecbd 8b02 	vpop	{d8}
    8c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c04:	f8dd 900c 	ldr.w	r9, [sp, #12]
    8c08:	4623      	mov	r3, r4
    8c0a:	f846 3b04 	str.w	r3, [r6], #4
    8c0e:	4618      	mov	r0, r3
    8c10:	9b01      	ldr	r3, [sp, #4]
    8c12:	1af6      	subs	r6, r6, r3
    8c14:	10b6      	asrs	r6, r6, #2
    8c16:	f8cb 6010 	str.w	r6, [fp, #16]
    8c1a:	f000 fbe9 	bl	93f0 <__hi0bits>
    8c1e:	0176      	lsls	r6, r6, #5
    8c20:	f8da 4000 	ldr.w	r4, [sl]
    8c24:	1a30      	subs	r0, r6, r0
    8c26:	42a0      	cmp	r0, r4
    8c28:	dc75      	bgt.n	8d16 <__gethex+0x282>
    8c2a:	f2c0 80ef 	blt.w	8e0c <__gethex+0x378>
    8c2e:	2700      	movs	r7, #0
    8c30:	f8da 3008 	ldr.w	r3, [sl, #8]
    8c34:	454b      	cmp	r3, r9
    8c36:	f2c0 8151 	blt.w	8edc <__gethex+0x448>
    8c3a:	f8da 3004 	ldr.w	r3, [sl, #4]
    8c3e:	454b      	cmp	r3, r9
    8c40:	dd4a      	ble.n	8cd8 <__gethex+0x244>
    8c42:	eba3 0909 	sub.w	r9, r3, r9
    8c46:	454c      	cmp	r4, r9
    8c48:	f300 8082 	bgt.w	8d50 <__gethex+0x2bc>
    8c4c:	f8da 200c 	ldr.w	r2, [sl, #12]
    8c50:	2a02      	cmp	r2, #2
    8c52:	f000 8165 	beq.w	8f20 <__gethex+0x48c>
    8c56:	2a03      	cmp	r2, #3
    8c58:	f000 8181 	beq.w	8f5e <__gethex+0x4ca>
    8c5c:	2a01      	cmp	r2, #1
    8c5e:	f000 816f 	beq.w	8f40 <__gethex+0x4ac>
    8c62:	ee18 0a10 	vmov	r0, s16
    8c66:	4659      	mov	r1, fp
    8c68:	f000 fb0e 	bl	9288 <_Bfree>
    8c6c:	2550      	movs	r5, #80	; 0x50
    8c6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8c70:	2300      	movs	r3, #0
    8c72:	4628      	mov	r0, r5
    8c74:	6013      	str	r3, [r2, #0]
    8c76:	b005      	add	sp, #20
    8c78:	ecbd 8b02 	vpop	{d8}
    8c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    8c84:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8c88:	f1a2 0110 	sub.w	r1, r2, #16
    8c8c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8c90:	f818 2002 	ldrb.w	r2, [r8, r2]
    8c94:	2a00      	cmp	r2, #0
    8c96:	d0a4      	beq.n	8be2 <__gethex+0x14e>
    8c98:	2a19      	cmp	r2, #25
    8c9a:	ddf1      	ble.n	8c80 <__gethex+0x1ec>
    8c9c:	e7a1      	b.n	8be2 <__gethex+0x14e>
    8c9e:	4949      	ldr	r1, [pc, #292]	; (8dc4 <__gethex+0x330>)
    8ca0:	9301      	str	r3, [sp, #4]
    8ca2:	2201      	movs	r2, #1
    8ca4:	4620      	mov	r0, r4
    8ca6:	f7fe ff8b 	bl	7bc0 <strncmp>
    8caa:	9b01      	ldr	r3, [sp, #4]
    8cac:	2800      	cmp	r0, #0
    8cae:	d16d      	bne.n	8d8c <__gethex+0x2f8>
    8cb0:	7861      	ldrb	r1, [r4, #1]
    8cb2:	f818 2001 	ldrb.w	r2, [r8, r1]
    8cb6:	1c65      	adds	r5, r4, #1
    8cb8:	2a00      	cmp	r2, #0
    8cba:	d069      	beq.n	8d90 <__gethex+0x2fc>
    8cbc:	2930      	cmp	r1, #48	; 0x30
    8cbe:	462c      	mov	r4, r5
    8cc0:	d105      	bne.n	8cce <__gethex+0x23a>
    8cc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8cc6:	2b30      	cmp	r3, #48	; 0x30
    8cc8:	d0fb      	beq.n	8cc2 <__gethex+0x22e>
    8cca:	f818 2003 	ldrb.w	r2, [r8, r3]
    8cce:	fab2 f782 	clz	r7, r2
    8cd2:	097f      	lsrs	r7, r7, #5
    8cd4:	2301      	movs	r3, #1
    8cd6:	e702      	b.n	8ade <__gethex+0x4a>
    8cd8:	2501      	movs	r5, #1
    8cda:	b157      	cbz	r7, 8cf2 <__gethex+0x25e>
    8cdc:	f8da 300c 	ldr.w	r3, [sl, #12]
    8ce0:	2b02      	cmp	r3, #2
    8ce2:	d05d      	beq.n	8da0 <__gethex+0x30c>
    8ce4:	2b03      	cmp	r3, #3
    8ce6:	d05f      	beq.n	8da8 <__gethex+0x314>
    8ce8:	2b01      	cmp	r3, #1
    8cea:	f000 8084 	beq.w	8df6 <__gethex+0x362>
    8cee:	f045 0510 	orr.w	r5, r5, #16
    8cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8cf4:	f8c3 b000 	str.w	fp, [r3]
    8cf8:	9b02      	ldr	r3, [sp, #8]
    8cfa:	4628      	mov	r0, r5
    8cfc:	f8c3 9000 	str.w	r9, [r3]
    8d00:	b005      	add	sp, #20
    8d02:	ecbd 8b02 	vpop	{d8}
    8d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d0a:	462e      	mov	r6, r5
    8d0c:	e702      	b.n	8b14 <__gethex+0x80>
    8d0e:	2001      	movs	r0, #1
    8d10:	78aa      	ldrb	r2, [r5, #2]
    8d12:	1cae      	adds	r6, r5, #2
    8d14:	e758      	b.n	8bc8 <__gethex+0x134>
    8d16:	1b06      	subs	r6, r0, r4
    8d18:	4631      	mov	r1, r6
    8d1a:	4658      	mov	r0, fp
    8d1c:	f000 ff96 	bl	9c4c <__any_on>
    8d20:	4607      	mov	r7, r0
    8d22:	b178      	cbz	r0, 8d44 <__gethex+0x2b0>
    8d24:	1e72      	subs	r2, r6, #1
    8d26:	1153      	asrs	r3, r2, #5
    8d28:	9901      	ldr	r1, [sp, #4]
    8d2a:	2701      	movs	r7, #1
    8d2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    8d30:	f002 031f 	and.w	r3, r2, #31
    8d34:	fa07 f303 	lsl.w	r3, r7, r3
    8d38:	420b      	tst	r3, r1
    8d3a:	d003      	beq.n	8d44 <__gethex+0x2b0>
    8d3c:	42ba      	cmp	r2, r7
    8d3e:	f300 80e2 	bgt.w	8f06 <__gethex+0x472>
    8d42:	2702      	movs	r7, #2
    8d44:	4631      	mov	r1, r6
    8d46:	4658      	mov	r0, fp
    8d48:	44b1      	add	r9, r6
    8d4a:	f7ff fe51 	bl	89f0 <rshift>
    8d4e:	e76f      	b.n	8c30 <__gethex+0x19c>
    8d50:	f109 35ff 	add.w	r5, r9, #4294967295
    8d54:	2f00      	cmp	r7, #0
    8d56:	f040 80ce 	bne.w	8ef6 <__gethex+0x462>
    8d5a:	2d00      	cmp	r5, #0
    8d5c:	f040 80cd 	bne.w	8efa <__gethex+0x466>
    8d60:	116b      	asrs	r3, r5, #5
    8d62:	9a01      	ldr	r2, [sp, #4]
    8d64:	f005 051f 	and.w	r5, r5, #31
    8d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    8d6c:	2301      	movs	r3, #1
    8d6e:	40ab      	lsls	r3, r5
    8d70:	4213      	tst	r3, r2
    8d72:	4649      	mov	r1, r9
    8d74:	4658      	mov	r0, fp
    8d76:	bf18      	it	ne
    8d78:	f047 0702 	orrne.w	r7, r7, #2
    8d7c:	eba4 0409 	sub.w	r4, r4, r9
    8d80:	f7ff fe36 	bl	89f0 <rshift>
    8d84:	2502      	movs	r5, #2
    8d86:	f8da 9004 	ldr.w	r9, [sl, #4]
    8d8a:	e7a6      	b.n	8cda <__gethex+0x246>
    8d8c:	7821      	ldrb	r1, [r4, #0]
    8d8e:	4625      	mov	r5, r4
    8d90:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    8d94:	2950      	cmp	r1, #80	; 0x50
    8d96:	f000 80bf 	beq.w	8f18 <__gethex+0x484>
    8d9a:	f8cb 5000 	str.w	r5, [fp]
    8d9e:	e727      	b.n	8bf0 <__gethex+0x15c>
    8da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8da2:	f1c3 0301 	rsb	r3, r3, #1
    8da6:	9311      	str	r3, [sp, #68]	; 0x44
    8da8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8daa:	2b00      	cmp	r3, #0
    8dac:	d09f      	beq.n	8cee <__gethex+0x25a>
    8dae:	f8db 7010 	ldr.w	r7, [fp, #16]
    8db2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    8db6:	00ba      	lsls	r2, r7, #2
    8db8:	4643      	mov	r3, r8
    8dba:	9201      	str	r2, [sp, #4]
    8dbc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    8dc0:	2100      	movs	r1, #0
    8dc2:	e007      	b.n	8dd4 <__gethex+0x340>
    8dc4:	20000c58 	.word	0x20000c58
    8dc8:	20000964 	.word	0x20000964
    8dcc:	4298      	cmp	r0, r3
    8dce:	f843 1c04 	str.w	r1, [r3, #-4]
    8dd2:	d93f      	bls.n	8e54 <__gethex+0x3c0>
    8dd4:	461e      	mov	r6, r3
    8dd6:	f853 2b04 	ldr.w	r2, [r3], #4
    8dda:	f1b2 3fff 	cmp.w	r2, #4294967295
    8dde:	d0f5      	beq.n	8dcc <__gethex+0x338>
    8de0:	3201      	adds	r2, #1
    8de2:	2d02      	cmp	r5, #2
    8de4:	6032      	str	r2, [r6, #0]
    8de6:	f000 80bf 	beq.w	8f68 <__gethex+0x4d4>
    8dea:	f014 041f 	ands.w	r4, r4, #31
    8dee:	f040 80e7 	bne.w	8fc0 <__gethex+0x52c>
    8df2:	2521      	movs	r5, #33	; 0x21
    8df4:	e77d      	b.n	8cf2 <__gethex+0x25e>
    8df6:	07ba      	lsls	r2, r7, #30
    8df8:	f57f af79 	bpl.w	8cee <__gethex+0x25a>
    8dfc:	9b01      	ldr	r3, [sp, #4]
    8dfe:	681b      	ldr	r3, [r3, #0]
    8e00:	431f      	orrs	r7, r3
    8e02:	07fb      	lsls	r3, r7, #31
    8e04:	d4d3      	bmi.n	8dae <__gethex+0x31a>
    8e06:	e772      	b.n	8cee <__gethex+0x25a>
    8e08:	2000      	movs	r0, #0
    8e0a:	e781      	b.n	8d10 <__gethex+0x27c>
    8e0c:	1a22      	subs	r2, r4, r0
    8e0e:	4659      	mov	r1, fp
    8e10:	ee18 0a10 	vmov	r0, s16
    8e14:	eba9 0902 	sub.w	r9, r9, r2
    8e18:	f000 fc76 	bl	9708 <__lshift>
    8e1c:	f100 0314 	add.w	r3, r0, #20
    8e20:	4683      	mov	fp, r0
    8e22:	9301      	str	r3, [sp, #4]
    8e24:	2700      	movs	r7, #0
    8e26:	e703      	b.n	8c30 <__gethex+0x19c>
    8e28:	7872      	ldrb	r2, [r6, #1]
    8e2a:	f818 0002 	ldrb.w	r0, [r8, r2]
    8e2e:	1c71      	adds	r1, r6, #1
    8e30:	2800      	cmp	r0, #0
    8e32:	f000 80a0 	beq.w	8f76 <__gethex+0x4e2>
    8e36:	460d      	mov	r5, r1
    8e38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8e3c:	f818 0002 	ldrb.w	r0, [r8, r2]
    8e40:	2800      	cmp	r0, #0
    8e42:	d1f8      	bne.n	8e36 <__gethex+0x3a2>
    8e44:	1b75      	subs	r5, r6, r5
    8e46:	ea4f 0985 	mov.w	r9, r5, lsl #2
    8e4a:	460e      	mov	r6, r1
    8e4c:	e65d      	b.n	8b0a <__gethex+0x76>
    8e4e:	3402      	adds	r4, #2
    8e50:	2300      	movs	r3, #0
    8e52:	e638      	b.n	8ac6 <__gethex+0x32>
    8e54:	f8db 3008 	ldr.w	r3, [fp, #8]
    8e58:	429f      	cmp	r7, r3
    8e5a:	f280 808e 	bge.w	8f7a <__gethex+0x4e6>
    8e5e:	463b      	mov	r3, r7
    8e60:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    8e64:	2101      	movs	r1, #1
    8e66:	3301      	adds	r3, #1
    8e68:	2d02      	cmp	r5, #2
    8e6a:	f8cb 3010 	str.w	r3, [fp, #16]
    8e6e:	6151      	str	r1, [r2, #20]
    8e70:	d07a      	beq.n	8f68 <__gethex+0x4d4>
    8e72:	429f      	cmp	r7, r3
    8e74:	dab9      	bge.n	8dea <__gethex+0x356>
    8e76:	2b00      	cmp	r3, #0
    8e78:	f340 809b 	ble.w	8fb2 <__gethex+0x51e>
    8e7c:	f8db 2014 	ldr.w	r2, [fp, #20]
    8e80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    8e84:	f10b 0018 	add.w	r0, fp, #24
    8e88:	4283      	cmp	r3, r0
    8e8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8e8e:	f240 80b1 	bls.w	8ff4 <__gethex+0x560>
    8e92:	4644      	mov	r4, r8
    8e94:	6801      	ldr	r1, [r0, #0]
    8e96:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    8e9a:	f844 2b04 	str.w	r2, [r4], #4
    8e9e:	f850 2b04 	ldr.w	r2, [r0], #4
    8ea2:	4283      	cmp	r3, r0
    8ea4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8ea8:	d8f4      	bhi.n	8e94 <__gethex+0x400>
    8eaa:	eba3 030b 	sub.w	r3, r3, fp
    8eae:	3b19      	subs	r3, #25
    8eb0:	089b      	lsrs	r3, r3, #2
    8eb2:	3301      	adds	r3, #1
    8eb4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    8eb8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    8ebc:	2a00      	cmp	r2, #0
    8ebe:	f040 809d 	bne.w	8ffc <__gethex+0x568>
    8ec2:	eba3 0208 	sub.w	r2, r3, r8
    8ec6:	1092      	asrs	r2, r2, #2
    8ec8:	4543      	cmp	r3, r8
    8eca:	f8cb 2010 	str.w	r2, [fp, #16]
    8ece:	d073      	beq.n	8fb8 <__gethex+0x524>
    8ed0:	f8da 3008 	ldr.w	r3, [sl, #8]
    8ed4:	f109 0901 	add.w	r9, r9, #1
    8ed8:	454b      	cmp	r3, r9
    8eda:	da8a      	bge.n	8df2 <__gethex+0x35e>
    8edc:	ee18 0a10 	vmov	r0, s16
    8ee0:	4659      	mov	r1, fp
    8ee2:	f000 f9d1 	bl	9288 <_Bfree>
    8ee6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8ee8:	2300      	movs	r3, #0
    8eea:	6013      	str	r3, [r2, #0]
    8eec:	25a3      	movs	r5, #163	; 0xa3
    8eee:	e683      	b.n	8bf8 <__gethex+0x164>
    8ef0:	9e01      	ldr	r6, [sp, #4]
    8ef2:	2300      	movs	r3, #0
    8ef4:	e689      	b.n	8c0a <__gethex+0x176>
    8ef6:	2701      	movs	r7, #1
    8ef8:	e732      	b.n	8d60 <__gethex+0x2cc>
    8efa:	4629      	mov	r1, r5
    8efc:	4658      	mov	r0, fp
    8efe:	f000 fea5 	bl	9c4c <__any_on>
    8f02:	4607      	mov	r7, r0
    8f04:	e72c      	b.n	8d60 <__gethex+0x2cc>
    8f06:	1eb1      	subs	r1, r6, #2
    8f08:	4658      	mov	r0, fp
    8f0a:	f000 fe9f 	bl	9c4c <__any_on>
    8f0e:	2800      	cmp	r0, #0
    8f10:	f43f af17 	beq.w	8d42 <__gethex+0x2ae>
    8f14:	2703      	movs	r7, #3
    8f16:	e715      	b.n	8d44 <__gethex+0x2b0>
    8f18:	f04f 0900 	mov.w	r9, #0
    8f1c:	2701      	movs	r7, #1
    8f1e:	e64a      	b.n	8bb6 <__gethex+0x122>
    8f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8f22:	2a00      	cmp	r2, #0
    8f24:	f47f ae9d 	bne.w	8c62 <__gethex+0x1ce>
    8f28:	9902      	ldr	r1, [sp, #8]
    8f2a:	600b      	str	r3, [r1, #0]
    8f2c:	9b01      	ldr	r3, [sp, #4]
    8f2e:	2201      	movs	r2, #1
    8f30:	f8cb 2010 	str.w	r2, [fp, #16]
    8f34:	601a      	str	r2, [r3, #0]
    8f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f38:	2562      	movs	r5, #98	; 0x62
    8f3a:	f8c3 b000 	str.w	fp, [r3]
    8f3e:	e65b      	b.n	8bf8 <__gethex+0x164>
    8f40:	454c      	cmp	r4, r9
    8f42:	f47f ae8e 	bne.w	8c62 <__gethex+0x1ce>
    8f46:	2c01      	cmp	r4, #1
    8f48:	d0ee      	beq.n	8f28 <__gethex+0x494>
    8f4a:	1e61      	subs	r1, r4, #1
    8f4c:	4658      	mov	r0, fp
    8f4e:	f000 fe7d 	bl	9c4c <__any_on>
    8f52:	2800      	cmp	r0, #0
    8f54:	f43f ae85 	beq.w	8c62 <__gethex+0x1ce>
    8f58:	f8da 3004 	ldr.w	r3, [sl, #4]
    8f5c:	e7e4      	b.n	8f28 <__gethex+0x494>
    8f5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8f60:	2a00      	cmp	r2, #0
    8f62:	f43f ae7e 	beq.w	8c62 <__gethex+0x1ce>
    8f66:	e7df      	b.n	8f28 <__gethex+0x494>
    8f68:	f8da 3000 	ldr.w	r3, [sl]
    8f6c:	3b01      	subs	r3, #1
    8f6e:	42a3      	cmp	r3, r4
    8f70:	d034      	beq.n	8fdc <__gethex+0x548>
    8f72:	2522      	movs	r5, #34	; 0x22
    8f74:	e6bd      	b.n	8cf2 <__gethex+0x25e>
    8f76:	460e      	mov	r6, r1
    8f78:	e5c7      	b.n	8b0a <__gethex+0x76>
    8f7a:	f8db 1004 	ldr.w	r1, [fp, #4]
    8f7e:	ee18 0a10 	vmov	r0, s16
    8f82:	3101      	adds	r1, #1
    8f84:	f000 f95a 	bl	923c <_Balloc>
    8f88:	4606      	mov	r6, r0
    8f8a:	b3c8      	cbz	r0, 9000 <__gethex+0x56c>
    8f8c:	f8db 3010 	ldr.w	r3, [fp, #16]
    8f90:	3302      	adds	r3, #2
    8f92:	009a      	lsls	r2, r3, #2
    8f94:	f10b 010c 	add.w	r1, fp, #12
    8f98:	300c      	adds	r0, #12
    8f9a:	f7fb f88d 	bl	40b8 <memcpy>
    8f9e:	4659      	mov	r1, fp
    8fa0:	ee18 0a10 	vmov	r0, s16
    8fa4:	f000 f970 	bl	9288 <_Bfree>
    8fa8:	f106 0814 	add.w	r8, r6, #20
    8fac:	6933      	ldr	r3, [r6, #16]
    8fae:	46b3      	mov	fp, r6
    8fb0:	e756      	b.n	8e60 <__gethex+0x3cc>
    8fb2:	2300      	movs	r3, #0
    8fb4:	f8cb 3010 	str.w	r3, [fp, #16]
    8fb8:	2300      	movs	r3, #0
    8fba:	f8cb 3014 	str.w	r3, [fp, #20]
    8fbe:	e787      	b.n	8ed0 <__gethex+0x43c>
    8fc0:	9b01      	ldr	r3, [sp, #4]
    8fc2:	4443      	add	r3, r8
    8fc4:	f1c4 0420 	rsb	r4, r4, #32
    8fc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
    8fcc:	f000 fa10 	bl	93f0 <__hi0bits>
    8fd0:	42a0      	cmp	r0, r4
    8fd2:	f6bf af0e 	bge.w	8df2 <__gethex+0x35e>
    8fd6:	f8db 3010 	ldr.w	r3, [fp, #16]
    8fda:	e74c      	b.n	8e76 <__gethex+0x3e2>
    8fdc:	1163      	asrs	r3, r4, #5
    8fde:	f004 041f 	and.w	r4, r4, #31
    8fe2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    8fe6:	2301      	movs	r3, #1
    8fe8:	40a3      	lsls	r3, r4
    8fea:	4213      	tst	r3, r2
    8fec:	bf0c      	ite	eq
    8fee:	2522      	moveq	r5, #34	; 0x22
    8ff0:	2521      	movne	r5, #33	; 0x21
    8ff2:	e67e      	b.n	8cf2 <__gethex+0x25e>
    8ff4:	f8c8 2000 	str.w	r2, [r8]
    8ff8:	4643      	mov	r3, r8
    8ffa:	b16a      	cbz	r2, 9018 <__gethex+0x584>
    8ffc:	3304      	adds	r3, #4
    8ffe:	e760      	b.n	8ec2 <__gethex+0x42e>
    9000:	4b07      	ldr	r3, [pc, #28]	; (9020 <__gethex+0x58c>)
    9002:	4808      	ldr	r0, [pc, #32]	; (9024 <__gethex+0x590>)
    9004:	4632      	mov	r2, r6
    9006:	2184      	movs	r1, #132	; 0x84
    9008:	f001 f872 	bl	a0f0 <__assert_func>
    900c:	4b04      	ldr	r3, [pc, #16]	; (9020 <__gethex+0x58c>)
    900e:	4805      	ldr	r0, [pc, #20]	; (9024 <__gethex+0x590>)
    9010:	465a      	mov	r2, fp
    9012:	21e4      	movs	r1, #228	; 0xe4
    9014:	f001 f86c 	bl	a0f0 <__assert_func>
    9018:	f8cb 2010 	str.w	r2, [fp, #16]
    901c:	e7cc      	b.n	8fb8 <__gethex+0x524>
    901e:	bf00      	nop
    9020:	200008ec 	.word	0x200008ec
    9024:	20000900 	.word	0x20000900

00009028 <__match>:
    9028:	b410      	push	{r4}
    902a:	6804      	ldr	r4, [r0, #0]
    902c:	e009      	b.n	9042 <__match+0x1a>
    902e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9032:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    9036:	f1bc 0f19 	cmp.w	ip, #25
    903a:	bf98      	it	ls
    903c:	3320      	addls	r3, #32
    903e:	4293      	cmp	r3, r2
    9040:	d109      	bne.n	9056 <__match+0x2e>
    9042:	f811 2b01 	ldrb.w	r2, [r1], #1
    9046:	2a00      	cmp	r2, #0
    9048:	d1f1      	bne.n	902e <__match+0x6>
    904a:	3401      	adds	r4, #1
    904c:	6004      	str	r4, [r0, #0]
    904e:	2001      	movs	r0, #1
    9050:	f85d 4b04 	ldr.w	r4, [sp], #4
    9054:	4770      	bx	lr
    9056:	2000      	movs	r0, #0
    9058:	f85d 4b04 	ldr.w	r4, [sp], #4
    905c:	4770      	bx	lr
    905e:	bf00      	nop

00009060 <__hexnan>:
    9060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9064:	6809      	ldr	r1, [r1, #0]
    9066:	b085      	sub	sp, #20
    9068:	114b      	asrs	r3, r1, #5
    906a:	f011 011f 	ands.w	r1, r1, #31
    906e:	9002      	str	r0, [sp, #8]
    9070:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9074:	9103      	str	r1, [sp, #12]
    9076:	f040 808f 	bne.w	9198 <__hexnan+0x138>
    907a:	1f1d      	subs	r5, r3, #4
    907c:	9301      	str	r3, [sp, #4]
    907e:	9b02      	ldr	r3, [sp, #8]
    9080:	9901      	ldr	r1, [sp, #4]
    9082:	681c      	ldr	r4, [r3, #0]
    9084:	2300      	movs	r3, #0
    9086:	f841 3c04 	str.w	r3, [r1, #-4]
    908a:	7861      	ldrb	r1, [r4, #1]
    908c:	3401      	adds	r4, #1
    908e:	2900      	cmp	r1, #0
    9090:	f000 8098 	beq.w	91c4 <__hexnan+0x164>
    9094:	f8df 9174 	ldr.w	r9, [pc, #372]	; 920c <__hexnan+0x1ac>
    9098:	46a8      	mov	r8, r5
    909a:	46ac      	mov	ip, r5
    909c:	469a      	mov	sl, r3
    909e:	461e      	mov	r6, r3
    90a0:	e00e      	b.n	90c0 <__hexnan+0x60>
    90a2:	2920      	cmp	r1, #32
    90a4:	f200 808c 	bhi.w	91c0 <__hexnan+0x160>
    90a8:	4556      	cmp	r6, sl
    90aa:	dd06      	ble.n	90ba <__hexnan+0x5a>
    90ac:	45c4      	cmp	ip, r8
    90ae:	d201      	bcs.n	90b4 <__hexnan+0x54>
    90b0:	2b07      	cmp	r3, #7
    90b2:	dd5b      	ble.n	916c <__hexnan+0x10c>
    90b4:	4562      	cmp	r2, ip
    90b6:	d351      	bcc.n	915c <__hexnan+0xfc>
    90b8:	2308      	movs	r3, #8
    90ba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    90be:	b1a1      	cbz	r1, 90ea <__hexnan+0x8a>
    90c0:	f819 0001 	ldrb.w	r0, [r9, r1]
    90c4:	2800      	cmp	r0, #0
    90c6:	d0ec      	beq.n	90a2 <__hexnan+0x42>
    90c8:	3301      	adds	r3, #1
    90ca:	2b08      	cmp	r3, #8
    90cc:	f106 0601 	add.w	r6, r6, #1
    90d0:	dc3a      	bgt.n	9148 <__hexnan+0xe8>
    90d2:	f8dc 1000 	ldr.w	r1, [ip]
    90d6:	0109      	lsls	r1, r1, #4
    90d8:	f000 000f 	and.w	r0, r0, #15
    90dc:	4308      	orrs	r0, r1
    90de:	f8cc 0000 	str.w	r0, [ip]
    90e2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    90e6:	2900      	cmp	r1, #0
    90e8:	d1ea      	bne.n	90c0 <__hexnan+0x60>
    90ea:	2e00      	cmp	r6, #0
    90ec:	d06a      	beq.n	91c4 <__hexnan+0x164>
    90ee:	45c4      	cmp	ip, r8
    90f0:	d201      	bcs.n	90f6 <__hexnan+0x96>
    90f2:	2b07      	cmp	r3, #7
    90f4:	dd74      	ble.n	91e0 <__hexnan+0x180>
    90f6:	4562      	cmp	r2, ip
    90f8:	d252      	bcs.n	91a0 <__hexnan+0x140>
    90fa:	1f11      	subs	r1, r2, #4
    90fc:	4663      	mov	r3, ip
    90fe:	f853 0b04 	ldr.w	r0, [r3], #4
    9102:	f841 0f04 	str.w	r0, [r1, #4]!
    9106:	42ab      	cmp	r3, r5
    9108:	d9f9      	bls.n	90fe <__hexnan+0x9e>
    910a:	eba5 030c 	sub.w	r3, r5, ip
    910e:	f023 0303 	bic.w	r3, r3, #3
    9112:	1c69      	adds	r1, r5, #1
    9114:	3304      	adds	r3, #4
    9116:	f10c 0c01 	add.w	ip, ip, #1
    911a:	4561      	cmp	r1, ip
    911c:	bf38      	it	cc
    911e:	2304      	movcc	r3, #4
    9120:	4413      	add	r3, r2
    9122:	2100      	movs	r1, #0
    9124:	f843 1b04 	str.w	r1, [r3], #4
    9128:	42ab      	cmp	r3, r5
    912a:	d9fb      	bls.n	9124 <__hexnan+0xc4>
    912c:	9b01      	ldr	r3, [sp, #4]
    912e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    9132:	b92b      	cbnz	r3, 9140 <__hexnan+0xe0>
    9134:	42aa      	cmp	r2, r5
    9136:	d049      	beq.n	91cc <__hexnan+0x16c>
    9138:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    913c:	2b00      	cmp	r3, #0
    913e:	d0f9      	beq.n	9134 <__hexnan+0xd4>
    9140:	2005      	movs	r0, #5
    9142:	b005      	add	sp, #20
    9144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9148:	4562      	cmp	r2, ip
    914a:	d2b6      	bcs.n	90ba <__hexnan+0x5a>
    914c:	2300      	movs	r3, #0
    914e:	f84c 3c04 	str.w	r3, [ip, #-4]
    9152:	4619      	mov	r1, r3
    9154:	f1ac 0c04 	sub.w	ip, ip, #4
    9158:	2301      	movs	r3, #1
    915a:	e7bd      	b.n	90d8 <__hexnan+0x78>
    915c:	2300      	movs	r3, #0
    915e:	f1ac 0804 	sub.w	r8, ip, #4
    9162:	f84c 3c04 	str.w	r3, [ip, #-4]
    9166:	46b2      	mov	sl, r6
    9168:	46c4      	mov	ip, r8
    916a:	e7a6      	b.n	90ba <__hexnan+0x5a>
    916c:	f1c3 0108 	rsb	r1, r3, #8
    9170:	f8dc 3000 	ldr.w	r3, [ip]
    9174:	0089      	lsls	r1, r1, #2
    9176:	f1c1 0e20 	rsb	lr, r1, #32
    917a:	4660      	mov	r0, ip
    917c:	469b      	mov	fp, r3
    917e:	6847      	ldr	r7, [r0, #4]
    9180:	fa07 f30e 	lsl.w	r3, r7, lr
    9184:	ea43 030b 	orr.w	r3, r3, fp
    9188:	fa27 fb01 	lsr.w	fp, r7, r1
    918c:	6003      	str	r3, [r0, #0]
    918e:	f840 bf04 	str.w	fp, [r0, #4]!
    9192:	4540      	cmp	r0, r8
    9194:	d3f3      	bcc.n	917e <__hexnan+0x11e>
    9196:	e78d      	b.n	90b4 <__hexnan+0x54>
    9198:	1d19      	adds	r1, r3, #4
    919a:	9101      	str	r1, [sp, #4]
    919c:	461d      	mov	r5, r3
    919e:	e76e      	b.n	907e <__hexnan+0x1e>
    91a0:	9b03      	ldr	r3, [sp, #12]
    91a2:	2b00      	cmp	r3, #0
    91a4:	d0c2      	beq.n	912c <__hexnan+0xcc>
    91a6:	9b03      	ldr	r3, [sp, #12]
    91a8:	9801      	ldr	r0, [sp, #4]
    91aa:	f1c3 0120 	rsb	r1, r3, #32
    91ae:	f04f 33ff 	mov.w	r3, #4294967295
    91b2:	40cb      	lsrs	r3, r1
    91b4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    91b8:	400b      	ands	r3, r1
    91ba:	f840 3c04 	str.w	r3, [r0, #-4]
    91be:	e7b8      	b.n	9132 <__hexnan+0xd2>
    91c0:	2929      	cmp	r1, #41	; 0x29
    91c2:	d009      	beq.n	91d8 <__hexnan+0x178>
    91c4:	2004      	movs	r0, #4
    91c6:	b005      	add	sp, #20
    91c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91cc:	2301      	movs	r3, #1
    91ce:	2005      	movs	r0, #5
    91d0:	602b      	str	r3, [r5, #0]
    91d2:	b005      	add	sp, #20
    91d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91d8:	9902      	ldr	r1, [sp, #8]
    91da:	3401      	adds	r4, #1
    91dc:	600c      	str	r4, [r1, #0]
    91de:	e784      	b.n	90ea <__hexnan+0x8a>
    91e0:	f8dc 1000 	ldr.w	r1, [ip]
    91e4:	f1c3 0308 	rsb	r3, r3, #8
    91e8:	009b      	lsls	r3, r3, #2
    91ea:	f1c3 0720 	rsb	r7, r3, #32
    91ee:	4664      	mov	r4, ip
    91f0:	4608      	mov	r0, r1
    91f2:	6866      	ldr	r6, [r4, #4]
    91f4:	fa06 f107 	lsl.w	r1, r6, r7
    91f8:	4301      	orrs	r1, r0
    91fa:	fa26 f003 	lsr.w	r0, r6, r3
    91fe:	6021      	str	r1, [r4, #0]
    9200:	f844 0f04 	str.w	r0, [r4, #4]!
    9204:	4544      	cmp	r4, r8
    9206:	d3f4      	bcc.n	91f2 <__hexnan+0x192>
    9208:	e775      	b.n	90f6 <__hexnan+0x96>
    920a:	bf00      	nop
    920c:	20000964 	.word	0x20000964

00009210 <__ascii_mbtowc>:
    9210:	b082      	sub	sp, #8
    9212:	b149      	cbz	r1, 9228 <__ascii_mbtowc+0x18>
    9214:	b15a      	cbz	r2, 922e <__ascii_mbtowc+0x1e>
    9216:	b16b      	cbz	r3, 9234 <__ascii_mbtowc+0x24>
    9218:	7813      	ldrb	r3, [r2, #0]
    921a:	600b      	str	r3, [r1, #0]
    921c:	7812      	ldrb	r2, [r2, #0]
    921e:	1e10      	subs	r0, r2, #0
    9220:	bf18      	it	ne
    9222:	2001      	movne	r0, #1
    9224:	b002      	add	sp, #8
    9226:	4770      	bx	lr
    9228:	a901      	add	r1, sp, #4
    922a:	2a00      	cmp	r2, #0
    922c:	d1f3      	bne.n	9216 <__ascii_mbtowc+0x6>
    922e:	4610      	mov	r0, r2
    9230:	b002      	add	sp, #8
    9232:	4770      	bx	lr
    9234:	f06f 0001 	mvn.w	r0, #1
    9238:	e7f4      	b.n	9224 <__ascii_mbtowc+0x14>
    923a:	bf00      	nop

0000923c <_Balloc>:
    923c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    923e:	b570      	push	{r4, r5, r6, lr}
    9240:	4605      	mov	r5, r0
    9242:	460c      	mov	r4, r1
    9244:	b14b      	cbz	r3, 925a <_Balloc+0x1e>
    9246:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    924a:	b180      	cbz	r0, 926e <_Balloc+0x32>
    924c:	6802      	ldr	r2, [r0, #0]
    924e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    9252:	2300      	movs	r3, #0
    9254:	e9c0 3303 	strd	r3, r3, [r0, #12]
    9258:	bd70      	pop	{r4, r5, r6, pc}
    925a:	2221      	movs	r2, #33	; 0x21
    925c:	2104      	movs	r1, #4
    925e:	f000 ff67 	bl	a130 <_calloc_r>
    9262:	4603      	mov	r3, r0
    9264:	6468      	str	r0, [r5, #68]	; 0x44
    9266:	2800      	cmp	r0, #0
    9268:	d1ed      	bne.n	9246 <_Balloc+0xa>
    926a:	2000      	movs	r0, #0
    926c:	bd70      	pop	{r4, r5, r6, pc}
    926e:	2101      	movs	r1, #1
    9270:	fa01 f604 	lsl.w	r6, r1, r4
    9274:	1d72      	adds	r2, r6, #5
    9276:	0092      	lsls	r2, r2, #2
    9278:	4628      	mov	r0, r5
    927a:	f000 ff59 	bl	a130 <_calloc_r>
    927e:	2800      	cmp	r0, #0
    9280:	d0f3      	beq.n	926a <_Balloc+0x2e>
    9282:	e9c0 4601 	strd	r4, r6, [r0, #4]
    9286:	e7e4      	b.n	9252 <_Balloc+0x16>

00009288 <_Bfree>:
    9288:	b131      	cbz	r1, 9298 <_Bfree+0x10>
    928a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    928c:	684a      	ldr	r2, [r1, #4]
    928e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9292:	6008      	str	r0, [r1, #0]
    9294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    9298:	4770      	bx	lr
    929a:	bf00      	nop

0000929c <__multadd>:
    929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92a0:	690e      	ldr	r6, [r1, #16]
    92a2:	4680      	mov	r8, r0
    92a4:	460f      	mov	r7, r1
    92a6:	461d      	mov	r5, r3
    92a8:	f101 0e14 	add.w	lr, r1, #20
    92ac:	2000      	movs	r0, #0
    92ae:	f8de 1000 	ldr.w	r1, [lr]
    92b2:	b28c      	uxth	r4, r1
    92b4:	fb02 5304 	mla	r3, r2, r4, r5
    92b8:	0c09      	lsrs	r1, r1, #16
    92ba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    92be:	fb02 cc01 	mla	ip, r2, r1, ip
    92c2:	3001      	adds	r0, #1
    92c4:	b29c      	uxth	r4, r3
    92c6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    92ca:	4286      	cmp	r6, r0
    92cc:	f84e 4b04 	str.w	r4, [lr], #4
    92d0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    92d4:	dceb      	bgt.n	92ae <__multadd+0x12>
    92d6:	b13d      	cbz	r5, 92e8 <__multadd+0x4c>
    92d8:	68bb      	ldr	r3, [r7, #8]
    92da:	42b3      	cmp	r3, r6
    92dc:	dd07      	ble.n	92ee <__multadd+0x52>
    92de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    92e2:	3601      	adds	r6, #1
    92e4:	615d      	str	r5, [r3, #20]
    92e6:	613e      	str	r6, [r7, #16]
    92e8:	4638      	mov	r0, r7
    92ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92ee:	6879      	ldr	r1, [r7, #4]
    92f0:	4640      	mov	r0, r8
    92f2:	3101      	adds	r1, #1
    92f4:	f7ff ffa2 	bl	923c <_Balloc>
    92f8:	4604      	mov	r4, r0
    92fa:	b1b0      	cbz	r0, 932a <__multadd+0x8e>
    92fc:	693a      	ldr	r2, [r7, #16]
    92fe:	3202      	adds	r2, #2
    9300:	f107 010c 	add.w	r1, r7, #12
    9304:	0092      	lsls	r2, r2, #2
    9306:	300c      	adds	r0, #12
    9308:	f7fa fed6 	bl	40b8 <memcpy>
    930c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    9310:	687a      	ldr	r2, [r7, #4]
    9312:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9316:	6039      	str	r1, [r7, #0]
    9318:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    931c:	4627      	mov	r7, r4
    931e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    9322:	3601      	adds	r6, #1
    9324:	615d      	str	r5, [r3, #20]
    9326:	613e      	str	r6, [r7, #16]
    9328:	e7de      	b.n	92e8 <__multadd+0x4c>
    932a:	4b03      	ldr	r3, [pc, #12]	; (9338 <__multadd+0x9c>)
    932c:	4803      	ldr	r0, [pc, #12]	; (933c <__multadd+0xa0>)
    932e:	4622      	mov	r2, r4
    9330:	21ba      	movs	r1, #186	; 0xba
    9332:	f000 fedd 	bl	a0f0 <__assert_func>
    9336:	bf00      	nop
    9338:	200008ec 	.word	0x200008ec
    933c:	20000a64 	.word	0x20000a64

00009340 <__s2b>:
    9340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9344:	4617      	mov	r7, r2
    9346:	4a27      	ldr	r2, [pc, #156]	; (93e4 <__s2b+0xa4>)
    9348:	461e      	mov	r6, r3
    934a:	3308      	adds	r3, #8
    934c:	460c      	mov	r4, r1
    934e:	2e09      	cmp	r6, #9
    9350:	fb82 1203 	smull	r1, r2, r2, r3
    9354:	ea4f 73e3 	mov.w	r3, r3, asr #31
    9358:	4605      	mov	r5, r0
    935a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    935e:	dd39      	ble.n	93d4 <__s2b+0x94>
    9360:	f04f 0c01 	mov.w	ip, #1
    9364:	2100      	movs	r1, #0
    9366:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    936a:	4563      	cmp	r3, ip
    936c:	f101 0101 	add.w	r1, r1, #1
    9370:	dcf9      	bgt.n	9366 <__s2b+0x26>
    9372:	4628      	mov	r0, r5
    9374:	f7ff ff62 	bl	923c <_Balloc>
    9378:	4601      	mov	r1, r0
    937a:	b368      	cbz	r0, 93d8 <__s2b+0x98>
    937c:	9b08      	ldr	r3, [sp, #32]
    937e:	6143      	str	r3, [r0, #20]
    9380:	2f09      	cmp	r7, #9
    9382:	f04f 0301 	mov.w	r3, #1
    9386:	6103      	str	r3, [r0, #16]
    9388:	dc12      	bgt.n	93b0 <__s2b+0x70>
    938a:	340a      	adds	r4, #10
    938c:	2709      	movs	r7, #9
    938e:	42be      	cmp	r6, r7
    9390:	dd0b      	ble.n	93aa <__s2b+0x6a>
    9392:	1bf2      	subs	r2, r6, r7
    9394:	18a6      	adds	r6, r4, r2
    9396:	f814 3b01 	ldrb.w	r3, [r4], #1
    939a:	220a      	movs	r2, #10
    939c:	3b30      	subs	r3, #48	; 0x30
    939e:	4628      	mov	r0, r5
    93a0:	f7ff ff7c 	bl	929c <__multadd>
    93a4:	42a6      	cmp	r6, r4
    93a6:	4601      	mov	r1, r0
    93a8:	d1f5      	bne.n	9396 <__s2b+0x56>
    93aa:	4608      	mov	r0, r1
    93ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    93b0:	f104 0909 	add.w	r9, r4, #9
    93b4:	46c8      	mov	r8, r9
    93b6:	443c      	add	r4, r7
    93b8:	f818 3b01 	ldrb.w	r3, [r8], #1
    93bc:	220a      	movs	r2, #10
    93be:	3b30      	subs	r3, #48	; 0x30
    93c0:	4628      	mov	r0, r5
    93c2:	f7ff ff6b 	bl	929c <__multadd>
    93c6:	45a0      	cmp	r8, r4
    93c8:	4601      	mov	r1, r0
    93ca:	d1f5      	bne.n	93b8 <__s2b+0x78>
    93cc:	f1a7 0408 	sub.w	r4, r7, #8
    93d0:	444c      	add	r4, r9
    93d2:	e7dc      	b.n	938e <__s2b+0x4e>
    93d4:	2100      	movs	r1, #0
    93d6:	e7cc      	b.n	9372 <__s2b+0x32>
    93d8:	460a      	mov	r2, r1
    93da:	4b03      	ldr	r3, [pc, #12]	; (93e8 <__s2b+0xa8>)
    93dc:	4803      	ldr	r0, [pc, #12]	; (93ec <__s2b+0xac>)
    93de:	21d3      	movs	r1, #211	; 0xd3
    93e0:	f000 fe86 	bl	a0f0 <__assert_func>
    93e4:	38e38e39 	.word	0x38e38e39
    93e8:	200008ec 	.word	0x200008ec
    93ec:	20000a64 	.word	0x20000a64

000093f0 <__hi0bits>:
    93f0:	0c03      	lsrs	r3, r0, #16
    93f2:	041b      	lsls	r3, r3, #16
    93f4:	b9d3      	cbnz	r3, 942c <__hi0bits+0x3c>
    93f6:	0400      	lsls	r0, r0, #16
    93f8:	2310      	movs	r3, #16
    93fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    93fe:	bf04      	itt	eq
    9400:	0200      	lsleq	r0, r0, #8
    9402:	3308      	addeq	r3, #8
    9404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    9408:	bf04      	itt	eq
    940a:	0100      	lsleq	r0, r0, #4
    940c:	3304      	addeq	r3, #4
    940e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    9412:	bf04      	itt	eq
    9414:	0080      	lsleq	r0, r0, #2
    9416:	3302      	addeq	r3, #2
    9418:	2800      	cmp	r0, #0
    941a:	db05      	blt.n	9428 <__hi0bits+0x38>
    941c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    9420:	f103 0301 	add.w	r3, r3, #1
    9424:	bf08      	it	eq
    9426:	2320      	moveq	r3, #32
    9428:	4618      	mov	r0, r3
    942a:	4770      	bx	lr
    942c:	2300      	movs	r3, #0
    942e:	e7e4      	b.n	93fa <__hi0bits+0xa>

00009430 <__lo0bits>:
    9430:	6803      	ldr	r3, [r0, #0]
    9432:	f013 0207 	ands.w	r2, r3, #7
    9436:	d008      	beq.n	944a <__lo0bits+0x1a>
    9438:	07d9      	lsls	r1, r3, #31
    943a:	d41f      	bmi.n	947c <__lo0bits+0x4c>
    943c:	079a      	lsls	r2, r3, #30
    943e:	d522      	bpl.n	9486 <__lo0bits+0x56>
    9440:	085b      	lsrs	r3, r3, #1
    9442:	6003      	str	r3, [r0, #0]
    9444:	2201      	movs	r2, #1
    9446:	4610      	mov	r0, r2
    9448:	4770      	bx	lr
    944a:	b299      	uxth	r1, r3
    944c:	b909      	cbnz	r1, 9452 <__lo0bits+0x22>
    944e:	0c1b      	lsrs	r3, r3, #16
    9450:	2210      	movs	r2, #16
    9452:	b2d9      	uxtb	r1, r3
    9454:	b909      	cbnz	r1, 945a <__lo0bits+0x2a>
    9456:	3208      	adds	r2, #8
    9458:	0a1b      	lsrs	r3, r3, #8
    945a:	0719      	lsls	r1, r3, #28
    945c:	bf04      	itt	eq
    945e:	091b      	lsreq	r3, r3, #4
    9460:	3204      	addeq	r2, #4
    9462:	0799      	lsls	r1, r3, #30
    9464:	bf04      	itt	eq
    9466:	089b      	lsreq	r3, r3, #2
    9468:	3202      	addeq	r2, #2
    946a:	07d9      	lsls	r1, r3, #31
    946c:	d403      	bmi.n	9476 <__lo0bits+0x46>
    946e:	085b      	lsrs	r3, r3, #1
    9470:	f102 0201 	add.w	r2, r2, #1
    9474:	d005      	beq.n	9482 <__lo0bits+0x52>
    9476:	6003      	str	r3, [r0, #0]
    9478:	4610      	mov	r0, r2
    947a:	4770      	bx	lr
    947c:	2200      	movs	r2, #0
    947e:	4610      	mov	r0, r2
    9480:	4770      	bx	lr
    9482:	2220      	movs	r2, #32
    9484:	e7df      	b.n	9446 <__lo0bits+0x16>
    9486:	089b      	lsrs	r3, r3, #2
    9488:	2202      	movs	r2, #2
    948a:	6003      	str	r3, [r0, #0]
    948c:	4610      	mov	r0, r2
    948e:	4770      	bx	lr

00009490 <__i2b>:
    9490:	b538      	push	{r3, r4, r5, lr}
    9492:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9494:	4604      	mov	r4, r0
    9496:	460d      	mov	r5, r1
    9498:	b14b      	cbz	r3, 94ae <__i2b+0x1e>
    949a:	6858      	ldr	r0, [r3, #4]
    949c:	b1b0      	cbz	r0, 94cc <__i2b+0x3c>
    949e:	6802      	ldr	r2, [r0, #0]
    94a0:	605a      	str	r2, [r3, #4]
    94a2:	2200      	movs	r2, #0
    94a4:	2301      	movs	r3, #1
    94a6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    94aa:	60c2      	str	r2, [r0, #12]
    94ac:	bd38      	pop	{r3, r4, r5, pc}
    94ae:	2221      	movs	r2, #33	; 0x21
    94b0:	2104      	movs	r1, #4
    94b2:	f000 fe3d 	bl	a130 <_calloc_r>
    94b6:	4603      	mov	r3, r0
    94b8:	6460      	str	r0, [r4, #68]	; 0x44
    94ba:	2800      	cmp	r0, #0
    94bc:	d1ed      	bne.n	949a <__i2b+0xa>
    94be:	4b09      	ldr	r3, [pc, #36]	; (94e4 <__i2b+0x54>)
    94c0:	4809      	ldr	r0, [pc, #36]	; (94e8 <__i2b+0x58>)
    94c2:	2200      	movs	r2, #0
    94c4:	f240 1145 	movw	r1, #325	; 0x145
    94c8:	f000 fe12 	bl	a0f0 <__assert_func>
    94cc:	221c      	movs	r2, #28
    94ce:	2101      	movs	r1, #1
    94d0:	4620      	mov	r0, r4
    94d2:	f000 fe2d 	bl	a130 <_calloc_r>
    94d6:	2800      	cmp	r0, #0
    94d8:	d0f1      	beq.n	94be <__i2b+0x2e>
    94da:	2201      	movs	r2, #1
    94dc:	2302      	movs	r3, #2
    94de:	e9c0 2301 	strd	r2, r3, [r0, #4]
    94e2:	e7de      	b.n	94a2 <__i2b+0x12>
    94e4:	200008ec 	.word	0x200008ec
    94e8:	20000a64 	.word	0x20000a64

000094ec <__multiply>:
    94ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94f0:	690e      	ldr	r6, [r1, #16]
    94f2:	6915      	ldr	r5, [r2, #16]
    94f4:	42ae      	cmp	r6, r5
    94f6:	b085      	sub	sp, #20
    94f8:	4688      	mov	r8, r1
    94fa:	4614      	mov	r4, r2
    94fc:	db05      	blt.n	950a <__multiply+0x1e>
    94fe:	462a      	mov	r2, r5
    9500:	4623      	mov	r3, r4
    9502:	4635      	mov	r5, r6
    9504:	460c      	mov	r4, r1
    9506:	4616      	mov	r6, r2
    9508:	4698      	mov	r8, r3
    950a:	68a3      	ldr	r3, [r4, #8]
    950c:	6861      	ldr	r1, [r4, #4]
    950e:	19af      	adds	r7, r5, r6
    9510:	42bb      	cmp	r3, r7
    9512:	bfb8      	it	lt
    9514:	3101      	addlt	r1, #1
    9516:	f7ff fe91 	bl	923c <_Balloc>
    951a:	9001      	str	r0, [sp, #4]
    951c:	2800      	cmp	r0, #0
    951e:	f000 8087 	beq.w	9630 <__multiply+0x144>
    9522:	9b01      	ldr	r3, [sp, #4]
    9524:	f103 0914 	add.w	r9, r3, #20
    9528:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    952c:	45d1      	cmp	r9, sl
    952e:	d205      	bcs.n	953c <__multiply+0x50>
    9530:	464b      	mov	r3, r9
    9532:	2200      	movs	r2, #0
    9534:	f843 2b04 	str.w	r2, [r3], #4
    9538:	459a      	cmp	sl, r3
    953a:	d8fb      	bhi.n	9534 <__multiply+0x48>
    953c:	f108 0814 	add.w	r8, r8, #20
    9540:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    9544:	f104 0314 	add.w	r3, r4, #20
    9548:	45d8      	cmp	r8, fp
    954a:	461a      	mov	r2, r3
    954c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9550:	d25f      	bcs.n	9612 <__multiply+0x126>
    9552:	1b2b      	subs	r3, r5, r4
    9554:	3b15      	subs	r3, #21
    9556:	f023 0303 	bic.w	r3, r3, #3
    955a:	3304      	adds	r3, #4
    955c:	3415      	adds	r4, #21
    955e:	42a5      	cmp	r5, r4
    9560:	bf38      	it	cc
    9562:	2304      	movcc	r3, #4
    9564:	e9cd a702 	strd	sl, r7, [sp, #8]
    9568:	46ac      	mov	ip, r5
    956a:	461f      	mov	r7, r3
    956c:	4692      	mov	sl, r2
    956e:	e005      	b.n	957c <__multiply+0x90>
    9570:	0c09      	lsrs	r1, r1, #16
    9572:	d129      	bne.n	95c8 <__multiply+0xdc>
    9574:	45c3      	cmp	fp, r8
    9576:	f109 0904 	add.w	r9, r9, #4
    957a:	d948      	bls.n	960e <__multiply+0x122>
    957c:	f858 1b04 	ldr.w	r1, [r8], #4
    9580:	b28d      	uxth	r5, r1
    9582:	2d00      	cmp	r5, #0
    9584:	d0f4      	beq.n	9570 <__multiply+0x84>
    9586:	4656      	mov	r6, sl
    9588:	464c      	mov	r4, r9
    958a:	2300      	movs	r3, #0
    958c:	f856 1b04 	ldr.w	r1, [r6], #4
    9590:	6822      	ldr	r2, [r4, #0]
    9592:	fa1f fe81 	uxth.w	lr, r1
    9596:	b290      	uxth	r0, r2
    9598:	0c09      	lsrs	r1, r1, #16
    959a:	fb05 000e 	mla	r0, r5, lr, r0
    959e:	0c12      	lsrs	r2, r2, #16
    95a0:	4403      	add	r3, r0
    95a2:	fb05 2201 	mla	r2, r5, r1, r2
    95a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    95aa:	b29b      	uxth	r3, r3
    95ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    95b0:	45b4      	cmp	ip, r6
    95b2:	f844 3b04 	str.w	r3, [r4], #4
    95b6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    95ba:	d8e7      	bhi.n	958c <__multiply+0xa0>
    95bc:	f849 3007 	str.w	r3, [r9, r7]
    95c0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    95c4:	0c09      	lsrs	r1, r1, #16
    95c6:	d0d5      	beq.n	9574 <__multiply+0x88>
    95c8:	f8d9 3000 	ldr.w	r3, [r9]
    95cc:	4650      	mov	r0, sl
    95ce:	461a      	mov	r2, r3
    95d0:	464c      	mov	r4, r9
    95d2:	2600      	movs	r6, #0
    95d4:	8805      	ldrh	r5, [r0, #0]
    95d6:	0c12      	lsrs	r2, r2, #16
    95d8:	fb01 2205 	mla	r2, r1, r5, r2
    95dc:	4416      	add	r6, r2
    95de:	b29b      	uxth	r3, r3
    95e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    95e4:	f844 3b04 	str.w	r3, [r4], #4
    95e8:	f850 5b04 	ldr.w	r5, [r0], #4
    95ec:	6822      	ldr	r2, [r4, #0]
    95ee:	0c2d      	lsrs	r5, r5, #16
    95f0:	b293      	uxth	r3, r2
    95f2:	fb01 3305 	mla	r3, r1, r5, r3
    95f6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    95fa:	4584      	cmp	ip, r0
    95fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
    9600:	d8e8      	bhi.n	95d4 <__multiply+0xe8>
    9602:	45c3      	cmp	fp, r8
    9604:	f849 3007 	str.w	r3, [r9, r7]
    9608:	f109 0904 	add.w	r9, r9, #4
    960c:	d8b6      	bhi.n	957c <__multiply+0x90>
    960e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    9612:	2f00      	cmp	r7, #0
    9614:	dc02      	bgt.n	961c <__multiply+0x130>
    9616:	e005      	b.n	9624 <__multiply+0x138>
    9618:	3f01      	subs	r7, #1
    961a:	d003      	beq.n	9624 <__multiply+0x138>
    961c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    9620:	2b00      	cmp	r3, #0
    9622:	d0f9      	beq.n	9618 <__multiply+0x12c>
    9624:	9b01      	ldr	r3, [sp, #4]
    9626:	4618      	mov	r0, r3
    9628:	611f      	str	r7, [r3, #16]
    962a:	b005      	add	sp, #20
    962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9630:	4b03      	ldr	r3, [pc, #12]	; (9640 <__multiply+0x154>)
    9632:	4804      	ldr	r0, [pc, #16]	; (9644 <__multiply+0x158>)
    9634:	9a01      	ldr	r2, [sp, #4]
    9636:	f44f 71b1 	mov.w	r1, #354	; 0x162
    963a:	f000 fd59 	bl	a0f0 <__assert_func>
    963e:	bf00      	nop
    9640:	200008ec 	.word	0x200008ec
    9644:	20000a64 	.word	0x20000a64

00009648 <__pow5mult>:
    9648:	f012 0303 	ands.w	r3, r2, #3
    964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9650:	4614      	mov	r4, r2
    9652:	4606      	mov	r6, r0
    9654:	d132      	bne.n	96bc <__pow5mult+0x74>
    9656:	460d      	mov	r5, r1
    9658:	10a4      	asrs	r4, r4, #2
    965a:	d020      	beq.n	969e <__pow5mult+0x56>
    965c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    9660:	f1b8 0f00 	cmp.w	r8, #0
    9664:	d033      	beq.n	96ce <__pow5mult+0x86>
    9666:	07e3      	lsls	r3, r4, #31
    9668:	f04f 0700 	mov.w	r7, #0
    966c:	d407      	bmi.n	967e <__pow5mult+0x36>
    966e:	1064      	asrs	r4, r4, #1
    9670:	d015      	beq.n	969e <__pow5mult+0x56>
    9672:	f8d8 0000 	ldr.w	r0, [r8]
    9676:	b1a8      	cbz	r0, 96a4 <__pow5mult+0x5c>
    9678:	4680      	mov	r8, r0
    967a:	07e3      	lsls	r3, r4, #31
    967c:	d5f7      	bpl.n	966e <__pow5mult+0x26>
    967e:	4642      	mov	r2, r8
    9680:	4629      	mov	r1, r5
    9682:	4630      	mov	r0, r6
    9684:	f7ff ff32 	bl	94ec <__multiply>
    9688:	b1b5      	cbz	r5, 96b8 <__pow5mult+0x70>
    968a:	6869      	ldr	r1, [r5, #4]
    968c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    968e:	1064      	asrs	r4, r4, #1
    9690:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    9694:	602a      	str	r2, [r5, #0]
    9696:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    969a:	4605      	mov	r5, r0
    969c:	d1e9      	bne.n	9672 <__pow5mult+0x2a>
    969e:	4628      	mov	r0, r5
    96a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    96a4:	4642      	mov	r2, r8
    96a6:	4641      	mov	r1, r8
    96a8:	4630      	mov	r0, r6
    96aa:	f7ff ff1f 	bl	94ec <__multiply>
    96ae:	f8c8 0000 	str.w	r0, [r8]
    96b2:	6007      	str	r7, [r0, #0]
    96b4:	4680      	mov	r8, r0
    96b6:	e7e0      	b.n	967a <__pow5mult+0x32>
    96b8:	4605      	mov	r5, r0
    96ba:	e7d8      	b.n	966e <__pow5mult+0x26>
    96bc:	3b01      	subs	r3, #1
    96be:	4a0f      	ldr	r2, [pc, #60]	; (96fc <__pow5mult+0xb4>)
    96c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    96c4:	2300      	movs	r3, #0
    96c6:	f7ff fde9 	bl	929c <__multadd>
    96ca:	4605      	mov	r5, r0
    96cc:	e7c4      	b.n	9658 <__pow5mult+0x10>
    96ce:	2101      	movs	r1, #1
    96d0:	4630      	mov	r0, r6
    96d2:	f7ff fdb3 	bl	923c <_Balloc>
    96d6:	4680      	mov	r8, r0
    96d8:	b140      	cbz	r0, 96ec <__pow5mult+0xa4>
    96da:	2301      	movs	r3, #1
    96dc:	f240 2271 	movw	r2, #625	; 0x271
    96e0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    96e4:	2300      	movs	r3, #0
    96e6:	6430      	str	r0, [r6, #64]	; 0x40
    96e8:	6003      	str	r3, [r0, #0]
    96ea:	e7bc      	b.n	9666 <__pow5mult+0x1e>
    96ec:	4b04      	ldr	r3, [pc, #16]	; (9700 <__pow5mult+0xb8>)
    96ee:	4805      	ldr	r0, [pc, #20]	; (9704 <__pow5mult+0xbc>)
    96f0:	4642      	mov	r2, r8
    96f2:	f240 1145 	movw	r1, #325	; 0x145
    96f6:	f000 fcfb 	bl	a0f0 <__assert_func>
    96fa:	bf00      	nop
    96fc:	2000104c 	.word	0x2000104c
    9700:	200008ec 	.word	0x200008ec
    9704:	20000a64 	.word	0x20000a64

00009708 <__lshift>:
    9708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    970c:	460d      	mov	r5, r1
    970e:	4614      	mov	r4, r2
    9710:	692f      	ldr	r7, [r5, #16]
    9712:	68ab      	ldr	r3, [r5, #8]
    9714:	6849      	ldr	r1, [r1, #4]
    9716:	eb07 1762 	add.w	r7, r7, r2, asr #5
    971a:	1c7e      	adds	r6, r7, #1
    971c:	429e      	cmp	r6, r3
    971e:	4680      	mov	r8, r0
    9720:	ea4f 1962 	mov.w	r9, r2, asr #5
    9724:	dd04      	ble.n	9730 <__lshift+0x28>
    9726:	005b      	lsls	r3, r3, #1
    9728:	429e      	cmp	r6, r3
    972a:	f101 0101 	add.w	r1, r1, #1
    972e:	dcfa      	bgt.n	9726 <__lshift+0x1e>
    9730:	4640      	mov	r0, r8
    9732:	f7ff fd83 	bl	923c <_Balloc>
    9736:	4684      	mov	ip, r0
    9738:	2800      	cmp	r0, #0
    973a:	d052      	beq.n	97e2 <__lshift+0xda>
    973c:	f1b9 0f00 	cmp.w	r9, #0
    9740:	f100 0214 	add.w	r2, r0, #20
    9744:	dd0e      	ble.n	9764 <__lshift+0x5c>
    9746:	f109 0105 	add.w	r1, r9, #5
    974a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    974e:	4613      	mov	r3, r2
    9750:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9754:	2000      	movs	r0, #0
    9756:	f843 0b04 	str.w	r0, [r3], #4
    975a:	428b      	cmp	r3, r1
    975c:	d1fb      	bne.n	9756 <__lshift+0x4e>
    975e:	f1ae 0314 	sub.w	r3, lr, #20
    9762:	441a      	add	r2, r3
    9764:	6929      	ldr	r1, [r5, #16]
    9766:	f105 0314 	add.w	r3, r5, #20
    976a:	f014 0e1f 	ands.w	lr, r4, #31
    976e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9772:	d02e      	beq.n	97d2 <__lshift+0xca>
    9774:	f1ce 0920 	rsb	r9, lr, #32
    9778:	4610      	mov	r0, r2
    977a:	f04f 0a00 	mov.w	sl, #0
    977e:	681c      	ldr	r4, [r3, #0]
    9780:	fa04 f40e 	lsl.w	r4, r4, lr
    9784:	ea44 040a 	orr.w	r4, r4, sl
    9788:	f840 4b04 	str.w	r4, [r0], #4
    978c:	f853 4b04 	ldr.w	r4, [r3], #4
    9790:	4299      	cmp	r1, r3
    9792:	fa24 fa09 	lsr.w	sl, r4, r9
    9796:	d8f2      	bhi.n	977e <__lshift+0x76>
    9798:	1b4b      	subs	r3, r1, r5
    979a:	3b15      	subs	r3, #21
    979c:	f023 0303 	bic.w	r3, r3, #3
    97a0:	3304      	adds	r3, #4
    97a2:	f105 0015 	add.w	r0, r5, #21
    97a6:	4281      	cmp	r1, r0
    97a8:	bf38      	it	cc
    97aa:	2304      	movcc	r3, #4
    97ac:	f1ba 0f00 	cmp.w	sl, #0
    97b0:	bf18      	it	ne
    97b2:	4637      	movne	r7, r6
    97b4:	f842 a003 	str.w	sl, [r2, r3]
    97b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    97bc:	686a      	ldr	r2, [r5, #4]
    97be:	f8cc 7010 	str.w	r7, [ip, #16]
    97c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    97c6:	6029      	str	r1, [r5, #0]
    97c8:	4660      	mov	r0, ip
    97ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    97ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    97d2:	3a04      	subs	r2, #4
    97d4:	f853 0b04 	ldr.w	r0, [r3], #4
    97d8:	f842 0f04 	str.w	r0, [r2, #4]!
    97dc:	4299      	cmp	r1, r3
    97de:	d8f9      	bhi.n	97d4 <__lshift+0xcc>
    97e0:	e7ea      	b.n	97b8 <__lshift+0xb0>
    97e2:	4b03      	ldr	r3, [pc, #12]	; (97f0 <__lshift+0xe8>)
    97e4:	4803      	ldr	r0, [pc, #12]	; (97f4 <__lshift+0xec>)
    97e6:	4662      	mov	r2, ip
    97e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    97ec:	f000 fc80 	bl	a0f0 <__assert_func>
    97f0:	200008ec 	.word	0x200008ec
    97f4:	20000a64 	.word	0x20000a64

000097f8 <__mcmp>:
    97f8:	690b      	ldr	r3, [r1, #16]
    97fa:	4684      	mov	ip, r0
    97fc:	6900      	ldr	r0, [r0, #16]
    97fe:	1ac0      	subs	r0, r0, r3
    9800:	d116      	bne.n	9830 <__mcmp+0x38>
    9802:	f10c 0c14 	add.w	ip, ip, #20
    9806:	3114      	adds	r1, #20
    9808:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    980c:	b410      	push	{r4}
    980e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9812:	e001      	b.n	9818 <__mcmp+0x20>
    9814:	4594      	cmp	ip, r2
    9816:	d208      	bcs.n	982a <__mcmp+0x32>
    9818:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    981c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9820:	428c      	cmp	r4, r1
    9822:	d0f7      	beq.n	9814 <__mcmp+0x1c>
    9824:	d205      	bcs.n	9832 <__mcmp+0x3a>
    9826:	f04f 30ff 	mov.w	r0, #4294967295
    982a:	f85d 4b04 	ldr.w	r4, [sp], #4
    982e:	4770      	bx	lr
    9830:	4770      	bx	lr
    9832:	2001      	movs	r0, #1
    9834:	f85d 4b04 	ldr.w	r4, [sp], #4
    9838:	4770      	bx	lr
    983a:	bf00      	nop

0000983c <__mdiff>:
    983c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9840:	690f      	ldr	r7, [r1, #16]
    9842:	6913      	ldr	r3, [r2, #16]
    9844:	1aff      	subs	r7, r7, r3
    9846:	2f00      	cmp	r7, #0
    9848:	460e      	mov	r6, r1
    984a:	4690      	mov	r8, r2
    984c:	d17f      	bne.n	994e <__mdiff+0x112>
    984e:	f101 0514 	add.w	r5, r1, #20
    9852:	3214      	adds	r2, #20
    9854:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9858:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    985c:	e001      	b.n	9862 <__mdiff+0x26>
    985e:	429d      	cmp	r5, r3
    9860:	d278      	bcs.n	9954 <__mdiff+0x118>
    9862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9866:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    986a:	42a1      	cmp	r1, r4
    986c:	d0f7      	beq.n	985e <__mdiff+0x22>
    986e:	d369      	bcc.n	9944 <__mdiff+0x108>
    9870:	6871      	ldr	r1, [r6, #4]
    9872:	f7ff fce3 	bl	923c <_Balloc>
    9876:	4681      	mov	r9, r0
    9878:	2800      	cmp	r0, #0
    987a:	d077      	beq.n	996c <__mdiff+0x130>
    987c:	6935      	ldr	r5, [r6, #16]
    987e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    9882:	60c7      	str	r7, [r0, #12]
    9884:	f108 0e14 	add.w	lr, r8, #20
    9888:	f106 0014 	add.w	r0, r6, #20
    988c:	f109 0a14 	add.w	sl, r9, #20
    9890:	f106 0110 	add.w	r1, r6, #16
    9894:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    9898:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    989c:	4656      	mov	r6, sl
    989e:	f04f 0c00 	mov.w	ip, #0
    98a2:	f85e 4b04 	ldr.w	r4, [lr], #4
    98a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    98aa:	b2a3      	uxth	r3, r4
    98ac:	fa1c fc8b 	uxtah	ip, ip, fp
    98b0:	ebac 0303 	sub.w	r3, ip, r3
    98b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    98b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    98bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    98c0:	b29b      	uxth	r3, r3
    98c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    98c6:	4572      	cmp	r2, lr
    98c8:	f846 3b04 	str.w	r3, [r6], #4
    98cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    98d0:	d8e7      	bhi.n	98a2 <__mdiff+0x66>
    98d2:	eba2 0108 	sub.w	r1, r2, r8
    98d6:	3915      	subs	r1, #21
    98d8:	f108 0815 	add.w	r8, r8, #21
    98dc:	4542      	cmp	r2, r8
    98de:	f021 0403 	bic.w	r4, r1, #3
    98e2:	f104 0404 	add.w	r4, r4, #4
    98e6:	bf38      	it	cc
    98e8:	2404      	movcc	r4, #4
    98ea:	4420      	add	r0, r4
    98ec:	f021 0203 	bic.w	r2, r1, #3
    98f0:	bf38      	it	cc
    98f2:	2200      	movcc	r2, #0
    98f4:	4287      	cmp	r7, r0
    98f6:	4452      	add	r2, sl
    98f8:	4454      	add	r4, sl
    98fa:	d918      	bls.n	992e <__mdiff+0xf2>
    98fc:	4626      	mov	r6, r4
    98fe:	4601      	mov	r1, r0
    9900:	f851 3b04 	ldr.w	r3, [r1], #4
    9904:	fa1c fc83 	uxtah	ip, ip, r3
    9908:	ea4f 422c 	mov.w	r2, ip, asr #16
    990c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9910:	fa1f fc8c 	uxth.w	ip, ip
    9914:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9918:	428f      	cmp	r7, r1
    991a:	f846 3b04 	str.w	r3, [r6], #4
    991e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9922:	d8ed      	bhi.n	9900 <__mdiff+0xc4>
    9924:	3f01      	subs	r7, #1
    9926:	1a3f      	subs	r7, r7, r0
    9928:	f027 0703 	bic.w	r7, r7, #3
    992c:	19e2      	adds	r2, r4, r7
    992e:	b923      	cbnz	r3, 993a <__mdiff+0xfe>
    9930:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    9934:	3d01      	subs	r5, #1
    9936:	2b00      	cmp	r3, #0
    9938:	d0fa      	beq.n	9930 <__mdiff+0xf4>
    993a:	f8c9 5010 	str.w	r5, [r9, #16]
    993e:	4648      	mov	r0, r9
    9940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9944:	4633      	mov	r3, r6
    9946:	2701      	movs	r7, #1
    9948:	4646      	mov	r6, r8
    994a:	4698      	mov	r8, r3
    994c:	e790      	b.n	9870 <__mdiff+0x34>
    994e:	dbf9      	blt.n	9944 <__mdiff+0x108>
    9950:	2700      	movs	r7, #0
    9952:	e78d      	b.n	9870 <__mdiff+0x34>
    9954:	2100      	movs	r1, #0
    9956:	f7ff fc71 	bl	923c <_Balloc>
    995a:	4681      	mov	r9, r0
    995c:	b168      	cbz	r0, 997a <__mdiff+0x13e>
    995e:	2201      	movs	r2, #1
    9960:	2300      	movs	r3, #0
    9962:	e9c9 2304 	strd	r2, r3, [r9, #16]
    9966:	4648      	mov	r0, r9
    9968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    996c:	4b06      	ldr	r3, [pc, #24]	; (9988 <__mdiff+0x14c>)
    996e:	4807      	ldr	r0, [pc, #28]	; (998c <__mdiff+0x150>)
    9970:	464a      	mov	r2, r9
    9972:	f240 2145 	movw	r1, #581	; 0x245
    9976:	f000 fbbb 	bl	a0f0 <__assert_func>
    997a:	4b03      	ldr	r3, [pc, #12]	; (9988 <__mdiff+0x14c>)
    997c:	4803      	ldr	r0, [pc, #12]	; (998c <__mdiff+0x150>)
    997e:	464a      	mov	r2, r9
    9980:	f240 2137 	movw	r1, #567	; 0x237
    9984:	f000 fbb4 	bl	a0f0 <__assert_func>
    9988:	200008ec 	.word	0x200008ec
    998c:	20000a64 	.word	0x20000a64

00009990 <__ulp>:
    9990:	b082      	sub	sp, #8
    9992:	ed8d 0b00 	vstr	d0, [sp]
    9996:	4b16      	ldr	r3, [pc, #88]	; (99f0 <__ulp+0x60>)
    9998:	9a01      	ldr	r2, [sp, #4]
    999a:	4013      	ands	r3, r2
    999c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    99a0:	2b00      	cmp	r3, #0
    99a2:	dd06      	ble.n	99b2 <__ulp+0x22>
    99a4:	2200      	movs	r2, #0
    99a6:	4619      	mov	r1, r3
    99a8:	4610      	mov	r0, r2
    99aa:	ec41 0b10 	vmov	d0, r0, r1
    99ae:	b002      	add	sp, #8
    99b0:	4770      	bx	lr
    99b2:	425b      	negs	r3, r3
    99b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    99b8:	ea4f 5223 	mov.w	r2, r3, asr #20
    99bc:	da09      	bge.n	99d2 <__ulp+0x42>
    99be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    99c2:	4113      	asrs	r3, r2
    99c4:	2200      	movs	r2, #0
    99c6:	4619      	mov	r1, r3
    99c8:	4610      	mov	r0, r2
    99ca:	ec41 0b10 	vmov	d0, r0, r1
    99ce:	b002      	add	sp, #8
    99d0:	4770      	bx	lr
    99d2:	f1a2 0314 	sub.w	r3, r2, #20
    99d6:	2b1e      	cmp	r3, #30
    99d8:	bfda      	itte	le
    99da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    99de:	40da      	lsrle	r2, r3
    99e0:	2201      	movgt	r2, #1
    99e2:	2300      	movs	r3, #0
    99e4:	4619      	mov	r1, r3
    99e6:	4610      	mov	r0, r2
    99e8:	ec41 0b10 	vmov	d0, r0, r1
    99ec:	b002      	add	sp, #8
    99ee:	4770      	bx	lr
    99f0:	7ff00000 	.word	0x7ff00000

000099f4 <__b2d>:
    99f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99f6:	6904      	ldr	r4, [r0, #16]
    99f8:	f100 0614 	add.w	r6, r0, #20
    99fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    9a00:	1f27      	subs	r7, r4, #4
    9a02:	f854 5c04 	ldr.w	r5, [r4, #-4]
    9a06:	4628      	mov	r0, r5
    9a08:	f7ff fcf2 	bl	93f0 <__hi0bits>
    9a0c:	f1c0 0320 	rsb	r3, r0, #32
    9a10:	280a      	cmp	r0, #10
    9a12:	600b      	str	r3, [r1, #0]
    9a14:	dd1b      	ble.n	9a4e <__b2d+0x5a>
    9a16:	42be      	cmp	r6, r7
    9a18:	d20b      	bcs.n	9a32 <__b2d+0x3e>
    9a1a:	380b      	subs	r0, #11
    9a1c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9a20:	d12e      	bne.n	9a80 <__b2d+0x8c>
    9a22:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    9a26:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a2a:	460a      	mov	r2, r1
    9a2c:	ec43 2b10 	vmov	d0, r2, r3
    9a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a32:	f1b0 010b 	subs.w	r1, r0, #11
    9a36:	d0f4      	beq.n	9a22 <__b2d+0x2e>
    9a38:	fa05 f101 	lsl.w	r1, r5, r1
    9a3c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    9a40:	2100      	movs	r1, #0
    9a42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a46:	460a      	mov	r2, r1
    9a48:	ec43 2b10 	vmov	d0, r2, r3
    9a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a4e:	f1c0 0c0b 	rsb	ip, r0, #11
    9a52:	fa25 f10c 	lsr.w	r1, r5, ip
    9a56:	42be      	cmp	r6, r7
    9a58:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    9a5c:	bf38      	it	cc
    9a5e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    9a62:	f100 0015 	add.w	r0, r0, #21
    9a66:	bf34      	ite	cc
    9a68:	fa21 f10c 	lsrcc.w	r1, r1, ip
    9a6c:	2100      	movcs	r1, #0
    9a6e:	fa05 f000 	lsl.w	r0, r5, r0
    9a72:	4301      	orrs	r1, r0
    9a74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9a78:	460a      	mov	r2, r1
    9a7a:	ec43 2b10 	vmov	d0, r2, r3
    9a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a80:	f1c0 0c20 	rsb	ip, r0, #32
    9a84:	4085      	lsls	r5, r0
    9a86:	fa21 f30c 	lsr.w	r3, r1, ip
    9a8a:	ea45 0703 	orr.w	r7, r5, r3
    9a8e:	f1a4 0508 	sub.w	r5, r4, #8
    9a92:	42ae      	cmp	r6, r5
    9a94:	fa01 f100 	lsl.w	r1, r1, r0
    9a98:	bf3c      	itt	cc
    9a9a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    9a9e:	fa20 f00c 	lsrcc.w	r0, r0, ip
    9aa2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    9aa6:	bf38      	it	cc
    9aa8:	4301      	orrcc	r1, r0
    9aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9aae:	460a      	mov	r2, r1
    9ab0:	ec43 2b10 	vmov	d0, r2, r3
    9ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ab6:	bf00      	nop

00009ab8 <__d2b>:
    9ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9abc:	4688      	mov	r8, r1
    9abe:	b083      	sub	sp, #12
    9ac0:	2101      	movs	r1, #1
    9ac2:	ec57 6b10 	vmov	r6, r7, d0
    9ac6:	4615      	mov	r5, r2
    9ac8:	f7ff fbb8 	bl	923c <_Balloc>
    9acc:	4604      	mov	r4, r0
    9ace:	2800      	cmp	r0, #0
    9ad0:	d051      	beq.n	9b76 <__d2b+0xbe>
    9ad2:	f3c7 590a 	ubfx	r9, r7, #20, #11
    9ad6:	f3c7 0313 	ubfx	r3, r7, #0, #20
    9ada:	f1b9 0f00 	cmp.w	r9, #0
    9ade:	d001      	beq.n	9ae4 <__d2b+0x2c>
    9ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9ae4:	2e00      	cmp	r6, #0
    9ae6:	9301      	str	r3, [sp, #4]
    9ae8:	d118      	bne.n	9b1c <__d2b+0x64>
    9aea:	a801      	add	r0, sp, #4
    9aec:	f7ff fca0 	bl	9430 <__lo0bits>
    9af0:	9a01      	ldr	r2, [sp, #4]
    9af2:	6162      	str	r2, [r4, #20]
    9af4:	2201      	movs	r2, #1
    9af6:	f100 0320 	add.w	r3, r0, #32
    9afa:	6122      	str	r2, [r4, #16]
    9afc:	f1b9 0f00 	cmp.w	r9, #0
    9b00:	d025      	beq.n	9b4e <__d2b+0x96>
    9b02:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    9b06:	eb09 0203 	add.w	r2, r9, r3
    9b0a:	4620      	mov	r0, r4
    9b0c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    9b10:	f8c8 2000 	str.w	r2, [r8]
    9b14:	602b      	str	r3, [r5, #0]
    9b16:	b003      	add	sp, #12
    9b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9b1c:	4668      	mov	r0, sp
    9b1e:	9600      	str	r6, [sp, #0]
    9b20:	f7ff fc86 	bl	9430 <__lo0bits>
    9b24:	4603      	mov	r3, r0
    9b26:	b310      	cbz	r0, 9b6e <__d2b+0xb6>
    9b28:	e9dd 0200 	ldrd	r0, r2, [sp]
    9b2c:	f1c3 0120 	rsb	r1, r3, #32
    9b30:	fa02 f101 	lsl.w	r1, r2, r1
    9b34:	4301      	orrs	r1, r0
    9b36:	40da      	lsrs	r2, r3
    9b38:	6161      	str	r1, [r4, #20]
    9b3a:	9201      	str	r2, [sp, #4]
    9b3c:	2a00      	cmp	r2, #0
    9b3e:	61a2      	str	r2, [r4, #24]
    9b40:	bf14      	ite	ne
    9b42:	2202      	movne	r2, #2
    9b44:	2201      	moveq	r2, #1
    9b46:	6122      	str	r2, [r4, #16]
    9b48:	f1b9 0f00 	cmp.w	r9, #0
    9b4c:	d1d9      	bne.n	9b02 <__d2b+0x4a>
    9b4e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    9b52:	f8c8 3000 	str.w	r3, [r8]
    9b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    9b5a:	6918      	ldr	r0, [r3, #16]
    9b5c:	f7ff fc48 	bl	93f0 <__hi0bits>
    9b60:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    9b64:	4620      	mov	r0, r4
    9b66:	602b      	str	r3, [r5, #0]
    9b68:	b003      	add	sp, #12
    9b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9b6e:	9a00      	ldr	r2, [sp, #0]
    9b70:	6162      	str	r2, [r4, #20]
    9b72:	9a01      	ldr	r2, [sp, #4]
    9b74:	e7e2      	b.n	9b3c <__d2b+0x84>
    9b76:	4b03      	ldr	r3, [pc, #12]	; (9b84 <__d2b+0xcc>)
    9b78:	4803      	ldr	r0, [pc, #12]	; (9b88 <__d2b+0xd0>)
    9b7a:	4622      	mov	r2, r4
    9b7c:	f240 310f 	movw	r1, #783	; 0x30f
    9b80:	f000 fab6 	bl	a0f0 <__assert_func>
    9b84:	200008ec 	.word	0x200008ec
    9b88:	20000a64 	.word	0x20000a64

00009b8c <__ratio>:
    9b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b8e:	b083      	sub	sp, #12
    9b90:	460e      	mov	r6, r1
    9b92:	4669      	mov	r1, sp
    9b94:	4607      	mov	r7, r0
    9b96:	f7ff ff2d 	bl	99f4 <__b2d>
    9b9a:	a901      	add	r1, sp, #4
    9b9c:	4630      	mov	r0, r6
    9b9e:	ec55 4b10 	vmov	r4, r5, d0
    9ba2:	eeb0 7b40 	vmov.f64	d7, d0
    9ba6:	f7ff ff25 	bl	99f4 <__b2d>
    9baa:	6933      	ldr	r3, [r6, #16]
    9bac:	693a      	ldr	r2, [r7, #16]
    9bae:	1ad2      	subs	r2, r2, r3
    9bb0:	e9dd 3100 	ldrd	r3, r1, [sp]
    9bb4:	1a5b      	subs	r3, r3, r1
    9bb6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    9bba:	2b00      	cmp	r3, #0
    9bbc:	dd09      	ble.n	9bd2 <__ratio+0x46>
    9bbe:	ee17 2a90 	vmov	r2, s15
    9bc2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    9bc6:	ec45 4b17 	vmov	d7, r4, r5
    9bca:	ee87 0b00 	vdiv.f64	d0, d7, d0
    9bce:	b003      	add	sp, #12
    9bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bd2:	ee10 2a90 	vmov	r2, s1
    9bd6:	ec51 0b10 	vmov	r0, r1, d0
    9bda:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    9bde:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    9be2:	ec41 0b10 	vmov	d0, r0, r1
    9be6:	ee87 0b00 	vdiv.f64	d0, d7, d0
    9bea:	b003      	add	sp, #12
    9bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bee:	bf00      	nop

00009bf0 <__copybits>:
    9bf0:	3901      	subs	r1, #1
    9bf2:	1149      	asrs	r1, r1, #5
    9bf4:	f101 0c01 	add.w	ip, r1, #1
    9bf8:	6911      	ldr	r1, [r2, #16]
    9bfa:	f102 0314 	add.w	r3, r2, #20
    9bfe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9c02:	428b      	cmp	r3, r1
    9c04:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    9c08:	d217      	bcs.n	9c3a <__copybits+0x4a>
    9c0a:	b510      	push	{r4, lr}
    9c0c:	f1a0 0e04 	sub.w	lr, r0, #4
    9c10:	f853 4b04 	ldr.w	r4, [r3], #4
    9c14:	f84e 4f04 	str.w	r4, [lr, #4]!
    9c18:	4299      	cmp	r1, r3
    9c1a:	d8f9      	bhi.n	9c10 <__copybits+0x20>
    9c1c:	1a8a      	subs	r2, r1, r2
    9c1e:	f1a2 0315 	sub.w	r3, r2, #21
    9c22:	f023 0303 	bic.w	r3, r3, #3
    9c26:	3304      	adds	r3, #4
    9c28:	4418      	add	r0, r3
    9c2a:	4584      	cmp	ip, r0
    9c2c:	d904      	bls.n	9c38 <__copybits+0x48>
    9c2e:	2300      	movs	r3, #0
    9c30:	f840 3b04 	str.w	r3, [r0], #4
    9c34:	4584      	cmp	ip, r0
    9c36:	d8fb      	bhi.n	9c30 <__copybits+0x40>
    9c38:	bd10      	pop	{r4, pc}
    9c3a:	4584      	cmp	ip, r0
    9c3c:	d905      	bls.n	9c4a <__copybits+0x5a>
    9c3e:	2300      	movs	r3, #0
    9c40:	f840 3b04 	str.w	r3, [r0], #4
    9c44:	4584      	cmp	ip, r0
    9c46:	d8fb      	bhi.n	9c40 <__copybits+0x50>
    9c48:	4770      	bx	lr
    9c4a:	4770      	bx	lr

00009c4c <__any_on>:
    9c4c:	6903      	ldr	r3, [r0, #16]
    9c4e:	114a      	asrs	r2, r1, #5
    9c50:	4293      	cmp	r3, r2
    9c52:	f100 0014 	add.w	r0, r0, #20
    9c56:	da09      	bge.n	9c6c <__any_on+0x20>
    9c58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    9c5c:	e002      	b.n	9c64 <__any_on+0x18>
    9c5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    9c62:	b9c2      	cbnz	r2, 9c96 <__any_on+0x4a>
    9c64:	4283      	cmp	r3, r0
    9c66:	d8fa      	bhi.n	9c5e <__any_on+0x12>
    9c68:	2000      	movs	r0, #0
    9c6a:	4770      	bx	lr
    9c6c:	dd10      	ble.n	9c90 <__any_on+0x44>
    9c6e:	f011 011f 	ands.w	r1, r1, #31
    9c72:	d00d      	beq.n	9c90 <__any_on+0x44>
    9c74:	b410      	push	{r4}
    9c76:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    9c7a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9c7e:	fa24 f201 	lsr.w	r2, r4, r1
    9c82:	408a      	lsls	r2, r1
    9c84:	4294      	cmp	r4, r2
    9c86:	d00c      	beq.n	9ca2 <__any_on+0x56>
    9c88:	2001      	movs	r0, #1
    9c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    9c8e:	4770      	bx	lr
    9c90:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    9c94:	e7e6      	b.n	9c64 <__any_on+0x18>
    9c96:	2001      	movs	r0, #1
    9c98:	4770      	bx	lr
    9c9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    9c9e:	2a00      	cmp	r2, #0
    9ca0:	d1f2      	bne.n	9c88 <__any_on+0x3c>
    9ca2:	4283      	cmp	r3, r0
    9ca4:	d8f9      	bhi.n	9c9a <__any_on+0x4e>
    9ca6:	2000      	movs	r0, #0
    9ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
    9cac:	4770      	bx	lr
    9cae:	bf00      	nop

00009cb0 <__ascii_wctomb>:
    9cb0:	b149      	cbz	r1, 9cc6 <__ascii_wctomb+0x16>
    9cb2:	2aff      	cmp	r2, #255	; 0xff
    9cb4:	d802      	bhi.n	9cbc <__ascii_wctomb+0xc>
    9cb6:	700a      	strb	r2, [r1, #0]
    9cb8:	2001      	movs	r0, #1
    9cba:	4770      	bx	lr
    9cbc:	238a      	movs	r3, #138	; 0x8a
    9cbe:	6003      	str	r3, [r0, #0]
    9cc0:	f04f 30ff 	mov.w	r0, #4294967295
    9cc4:	4770      	bx	lr
    9cc6:	4608      	mov	r0, r1
    9cc8:	4770      	bx	lr
    9cca:	bf00      	nop

00009ccc <fcvtbuf>:
    9ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9cd0:	460e      	mov	r6, r1
    9cd2:	4926      	ldr	r1, [pc, #152]	; (9d6c <fcvtbuf+0xa0>)
    9cd4:	b087      	sub	sp, #28
    9cd6:	680f      	ldr	r7, [r1, #0]
    9cd8:	4604      	mov	r4, r0
    9cda:	4690      	mov	r8, r2
    9cdc:	461d      	mov	r5, r3
    9cde:	b353      	cbz	r3, 9d36 <fcvtbuf+0x6a>
    9ce0:	aa05      	add	r2, sp, #20
    9ce2:	4633      	mov	r3, r6
    9ce4:	9201      	str	r2, [sp, #4]
    9ce6:	2103      	movs	r1, #3
    9ce8:	4622      	mov	r2, r4
    9cea:	f8cd 8000 	str.w	r8, [sp]
    9cee:	4638      	mov	r0, r7
    9cf0:	f000 faee 	bl	a2d0 <_dtoa_r>
    9cf4:	9b05      	ldr	r3, [sp, #20]
    9cf6:	6832      	ldr	r2, [r6, #0]
    9cf8:	4298      	cmp	r0, r3
    9cfa:	4684      	mov	ip, r0
    9cfc:	f1c2 0200 	rsb	r2, r2, #0
    9d00:	4629      	mov	r1, r5
    9d02:	d209      	bcs.n	9d18 <fcvtbuf+0x4c>
    9d04:	1a10      	subs	r0, r2, r0
    9d06:	f81c 3b01 	ldrb.w	r3, [ip], #1
    9d0a:	f801 3b01 	strb.w	r3, [r1], #1
    9d0e:	9b05      	ldr	r3, [sp, #20]
    9d10:	4563      	cmp	r3, ip
    9d12:	eb00 020c 	add.w	r2, r0, ip
    9d16:	d8f6      	bhi.n	9d06 <fcvtbuf+0x3a>
    9d18:	4294      	cmp	r4, r2
    9d1a:	dd24      	ble.n	9d66 <fcvtbuf+0x9a>
    9d1c:	1aa2      	subs	r2, r4, r2
    9d1e:	440a      	add	r2, r1
    9d20:	2330      	movs	r3, #48	; 0x30
    9d22:	f801 3b01 	strb.w	r3, [r1], #1
    9d26:	4291      	cmp	r1, r2
    9d28:	d1fb      	bne.n	9d22 <fcvtbuf+0x56>
    9d2a:	2300      	movs	r3, #0
    9d2c:	7013      	strb	r3, [r2, #0]
    9d2e:	4628      	mov	r0, r5
    9d30:	b007      	add	sp, #28
    9d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9d38:	f100 0323 	add.w	r3, r0, #35	; 0x23
    9d3c:	429a      	cmp	r2, r3
    9d3e:	dd01      	ble.n	9d44 <fcvtbuf+0x78>
    9d40:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    9d42:	e7cd      	b.n	9ce0 <fcvtbuf+0x14>
    9d44:	f100 0924 	add.w	r9, r0, #36	; 0x24
    9d48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    9d4a:	464a      	mov	r2, r9
    9d4c:	4638      	mov	r0, r7
    9d4e:	ed8d 0b02 	vstr	d0, [sp, #8]
    9d52:	f7fc fa4b 	bl	61ec <_realloc_r>
    9d56:	4605      	mov	r5, r0
    9d58:	2800      	cmp	r0, #0
    9d5a:	d0e8      	beq.n	9d2e <fcvtbuf+0x62>
    9d5c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    9d60:	ed9d 0b02 	vldr	d0, [sp, #8]
    9d64:	e7bc      	b.n	9ce0 <fcvtbuf+0x14>
    9d66:	460a      	mov	r2, r1
    9d68:	e7df      	b.n	9d2a <fcvtbuf+0x5e>
    9d6a:	bf00      	nop
    9d6c:	20001b68 	.word	0x20001b68

00009d70 <_fclose_r>:
    9d70:	b570      	push	{r4, r5, r6, lr}
    9d72:	2900      	cmp	r1, #0
    9d74:	d04b      	beq.n	9e0e <_fclose_r+0x9e>
    9d76:	4606      	mov	r6, r0
    9d78:	460c      	mov	r4, r1
    9d7a:	b110      	cbz	r0, 9d82 <_fclose_r+0x12>
    9d7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d048      	beq.n	9e14 <_fclose_r+0xa4>
    9d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9d84:	07d8      	lsls	r0, r3, #31
    9d86:	d534      	bpl.n	9df2 <_fclose_r+0x82>
    9d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9d8c:	2b00      	cmp	r3, #0
    9d8e:	d03e      	beq.n	9e0e <_fclose_r+0x9e>
    9d90:	4621      	mov	r1, r4
    9d92:	4630      	mov	r0, r6
    9d94:	f000 f850 	bl	9e38 <__sflush_r>
    9d98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9d9a:	4605      	mov	r5, r0
    9d9c:	b133      	cbz	r3, 9dac <_fclose_r+0x3c>
    9d9e:	69e1      	ldr	r1, [r4, #28]
    9da0:	4630      	mov	r0, r6
    9da2:	4798      	blx	r3
    9da4:	2800      	cmp	r0, #0
    9da6:	bfb8      	it	lt
    9da8:	f04f 35ff 	movlt.w	r5, #4294967295
    9dac:	89a3      	ldrh	r3, [r4, #12]
    9dae:	061a      	lsls	r2, r3, #24
    9db0:	d43c      	bmi.n	9e2c <_fclose_r+0xbc>
    9db2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9db4:	b141      	cbz	r1, 9dc8 <_fclose_r+0x58>
    9db6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9dba:	4299      	cmp	r1, r3
    9dbc:	d002      	beq.n	9dc4 <_fclose_r+0x54>
    9dbe:	4630      	mov	r0, r6
    9dc0:	f7fe fd10 	bl	87e4 <_free_r>
    9dc4:	2300      	movs	r3, #0
    9dc6:	6323      	str	r3, [r4, #48]	; 0x30
    9dc8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9dca:	b121      	cbz	r1, 9dd6 <_fclose_r+0x66>
    9dcc:	4630      	mov	r0, r6
    9dce:	f7fe fd09 	bl	87e4 <_free_r>
    9dd2:	2300      	movs	r3, #0
    9dd4:	6463      	str	r3, [r4, #68]	; 0x44
    9dd6:	f7fd fd49 	bl	786c <__sfp_lock_acquire>
    9dda:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9ddc:	2200      	movs	r2, #0
    9dde:	07db      	lsls	r3, r3, #31
    9de0:	81a2      	strh	r2, [r4, #12]
    9de2:	d51f      	bpl.n	9e24 <_fclose_r+0xb4>
    9de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9de6:	f7fe fa0f 	bl	8208 <__retarget_lock_close_recursive>
    9dea:	f7fd fd45 	bl	7878 <__sfp_lock_release>
    9dee:	4628      	mov	r0, r5
    9df0:	bd70      	pop	{r4, r5, r6, pc}
    9df2:	89a3      	ldrh	r3, [r4, #12]
    9df4:	0599      	lsls	r1, r3, #22
    9df6:	d4cb      	bmi.n	9d90 <_fclose_r+0x20>
    9df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9dfa:	f7fe fa07 	bl	820c <__retarget_lock_acquire_recursive>
    9dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9e02:	2b00      	cmp	r3, #0
    9e04:	d1c4      	bne.n	9d90 <_fclose_r+0x20>
    9e06:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9e08:	f015 0501 	ands.w	r5, r5, #1
    9e0c:	d005      	beq.n	9e1a <_fclose_r+0xaa>
    9e0e:	2500      	movs	r5, #0
    9e10:	4628      	mov	r0, r5
    9e12:	bd70      	pop	{r4, r5, r6, pc}
    9e14:	f7fd fd0c 	bl	7830 <__sinit>
    9e18:	e7b3      	b.n	9d82 <_fclose_r+0x12>
    9e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e1c:	f7fe f9f8 	bl	8210 <__retarget_lock_release_recursive>
    9e20:	4628      	mov	r0, r5
    9e22:	bd70      	pop	{r4, r5, r6, pc}
    9e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9e26:	f7fe f9f3 	bl	8210 <__retarget_lock_release_recursive>
    9e2a:	e7db      	b.n	9de4 <_fclose_r+0x74>
    9e2c:	6921      	ldr	r1, [r4, #16]
    9e2e:	4630      	mov	r0, r6
    9e30:	f7fe fcd8 	bl	87e4 <_free_r>
    9e34:	e7bd      	b.n	9db2 <_fclose_r+0x42>
    9e36:	bf00      	nop

00009e38 <__sflush_r>:
    9e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    9e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e40:	460c      	mov	r4, r1
    9e42:	0711      	lsls	r1, r2, #28
    9e44:	4680      	mov	r8, r0
    9e46:	d447      	bmi.n	9ed8 <__sflush_r+0xa0>
    9e48:	6863      	ldr	r3, [r4, #4]
    9e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    9e4e:	2b00      	cmp	r3, #0
    9e50:	81a2      	strh	r2, [r4, #12]
    9e52:	dd5e      	ble.n	9f12 <__sflush_r+0xda>
    9e54:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9e56:	2d00      	cmp	r5, #0
    9e58:	d058      	beq.n	9f0c <__sflush_r+0xd4>
    9e5a:	2300      	movs	r3, #0
    9e5c:	f8d8 6000 	ldr.w	r6, [r8]
    9e60:	f8c8 3000 	str.w	r3, [r8]
    9e64:	b293      	uxth	r3, r2
    9e66:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    9e6a:	d156      	bne.n	9f1a <__sflush_r+0xe2>
    9e6c:	2301      	movs	r3, #1
    9e6e:	69e1      	ldr	r1, [r4, #28]
    9e70:	4640      	mov	r0, r8
    9e72:	47a8      	blx	r5
    9e74:	1c43      	adds	r3, r0, #1
    9e76:	d067      	beq.n	9f48 <__sflush_r+0x110>
    9e78:	89a3      	ldrh	r3, [r4, #12]
    9e7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9e7c:	075f      	lsls	r7, r3, #29
    9e7e:	d505      	bpl.n	9e8c <__sflush_r+0x54>
    9e80:	6863      	ldr	r3, [r4, #4]
    9e82:	1ac0      	subs	r0, r0, r3
    9e84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9e86:	b10b      	cbz	r3, 9e8c <__sflush_r+0x54>
    9e88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9e8a:	1ac0      	subs	r0, r0, r3
    9e8c:	69e1      	ldr	r1, [r4, #28]
    9e8e:	4602      	mov	r2, r0
    9e90:	2300      	movs	r3, #0
    9e92:	4640      	mov	r0, r8
    9e94:	47a8      	blx	r5
    9e96:	1c41      	adds	r1, r0, #1
    9e98:	d141      	bne.n	9f1e <__sflush_r+0xe6>
    9e9a:	f8d8 3000 	ldr.w	r3, [r8]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d03d      	beq.n	9f1e <__sflush_r+0xe6>
    9ea2:	2b1d      	cmp	r3, #29
    9ea4:	d001      	beq.n	9eaa <__sflush_r+0x72>
    9ea6:	2b16      	cmp	r3, #22
    9ea8:	d156      	bne.n	9f58 <__sflush_r+0x120>
    9eaa:	89a3      	ldrh	r3, [r4, #12]
    9eac:	6922      	ldr	r2, [r4, #16]
    9eae:	6022      	str	r2, [r4, #0]
    9eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9eb4:	2100      	movs	r1, #0
    9eb6:	6061      	str	r1, [r4, #4]
    9eb8:	81a3      	strh	r3, [r4, #12]
    9eba:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9ebc:	f8c8 6000 	str.w	r6, [r8]
    9ec0:	b321      	cbz	r1, 9f0c <__sflush_r+0xd4>
    9ec2:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9ec6:	4299      	cmp	r1, r3
    9ec8:	d002      	beq.n	9ed0 <__sflush_r+0x98>
    9eca:	4640      	mov	r0, r8
    9ecc:	f7fe fc8a 	bl	87e4 <_free_r>
    9ed0:	2000      	movs	r0, #0
    9ed2:	6320      	str	r0, [r4, #48]	; 0x30
    9ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ed8:	6926      	ldr	r6, [r4, #16]
    9eda:	b1be      	cbz	r6, 9f0c <__sflush_r+0xd4>
    9edc:	b293      	uxth	r3, r2
    9ede:	6825      	ldr	r5, [r4, #0]
    9ee0:	6026      	str	r6, [r4, #0]
    9ee2:	079a      	lsls	r2, r3, #30
    9ee4:	bf0c      	ite	eq
    9ee6:	6963      	ldreq	r3, [r4, #20]
    9ee8:	2300      	movne	r3, #0
    9eea:	1bad      	subs	r5, r5, r6
    9eec:	60a3      	str	r3, [r4, #8]
    9eee:	e00b      	b.n	9f08 <__sflush_r+0xd0>
    9ef0:	462b      	mov	r3, r5
    9ef2:	4632      	mov	r2, r6
    9ef4:	69e1      	ldr	r1, [r4, #28]
    9ef6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9ef8:	4640      	mov	r0, r8
    9efa:	47b8      	blx	r7
    9efc:	f1b0 0c00 	subs.w	ip, r0, #0
    9f00:	eba5 050c 	sub.w	r5, r5, ip
    9f04:	4466      	add	r6, ip
    9f06:	dd17      	ble.n	9f38 <__sflush_r+0x100>
    9f08:	2d00      	cmp	r5, #0
    9f0a:	dcf1      	bgt.n	9ef0 <__sflush_r+0xb8>
    9f0c:	2000      	movs	r0, #0
    9f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9f14:	2b00      	cmp	r3, #0
    9f16:	dc9d      	bgt.n	9e54 <__sflush_r+0x1c>
    9f18:	e7f8      	b.n	9f0c <__sflush_r+0xd4>
    9f1a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    9f1c:	e7ae      	b.n	9e7c <__sflush_r+0x44>
    9f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9f22:	6922      	ldr	r2, [r4, #16]
    9f24:	6022      	str	r2, [r4, #0]
    9f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    9f2a:	81a3      	strh	r3, [r4, #12]
    9f2c:	2200      	movs	r2, #0
    9f2e:	04db      	lsls	r3, r3, #19
    9f30:	6062      	str	r2, [r4, #4]
    9f32:	d5c2      	bpl.n	9eba <__sflush_r+0x82>
    9f34:	6520      	str	r0, [r4, #80]	; 0x50
    9f36:	e7c0      	b.n	9eba <__sflush_r+0x82>
    9f38:	89a3      	ldrh	r3, [r4, #12]
    9f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f3e:	f04f 30ff 	mov.w	r0, #4294967295
    9f42:	81a3      	strh	r3, [r4, #12]
    9f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f48:	f8d8 3000 	ldr.w	r3, [r8]
    9f4c:	2b00      	cmp	r3, #0
    9f4e:	d093      	beq.n	9e78 <__sflush_r+0x40>
    9f50:	2b1d      	cmp	r3, #29
    9f52:	d006      	beq.n	9f62 <__sflush_r+0x12a>
    9f54:	2b16      	cmp	r3, #22
    9f56:	d004      	beq.n	9f62 <__sflush_r+0x12a>
    9f58:	89a3      	ldrh	r3, [r4, #12]
    9f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9f5e:	81a3      	strh	r3, [r4, #12]
    9f60:	e7d5      	b.n	9f0e <__sflush_r+0xd6>
    9f62:	f8c8 6000 	str.w	r6, [r8]
    9f66:	e7d1      	b.n	9f0c <__sflush_r+0xd4>

00009f68 <_fflush_r>:
    9f68:	b538      	push	{r3, r4, r5, lr}
    9f6a:	460c      	mov	r4, r1
    9f6c:	4605      	mov	r5, r0
    9f6e:	b108      	cbz	r0, 9f74 <_fflush_r+0xc>
    9f70:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9f72:	b303      	cbz	r3, 9fb6 <_fflush_r+0x4e>
    9f74:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    9f78:	b188      	cbz	r0, 9f9e <_fflush_r+0x36>
    9f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f7c:	07db      	lsls	r3, r3, #31
    9f7e:	d401      	bmi.n	9f84 <_fflush_r+0x1c>
    9f80:	0581      	lsls	r1, r0, #22
    9f82:	d50f      	bpl.n	9fa4 <_fflush_r+0x3c>
    9f84:	4628      	mov	r0, r5
    9f86:	4621      	mov	r1, r4
    9f88:	f7ff ff56 	bl	9e38 <__sflush_r>
    9f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    9f8e:	07da      	lsls	r2, r3, #31
    9f90:	4605      	mov	r5, r0
    9f92:	d402      	bmi.n	9f9a <_fflush_r+0x32>
    9f94:	89a3      	ldrh	r3, [r4, #12]
    9f96:	059b      	lsls	r3, r3, #22
    9f98:	d508      	bpl.n	9fac <_fflush_r+0x44>
    9f9a:	4628      	mov	r0, r5
    9f9c:	bd38      	pop	{r3, r4, r5, pc}
    9f9e:	4605      	mov	r5, r0
    9fa0:	4628      	mov	r0, r5
    9fa2:	bd38      	pop	{r3, r4, r5, pc}
    9fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9fa6:	f7fe f931 	bl	820c <__retarget_lock_acquire_recursive>
    9faa:	e7eb      	b.n	9f84 <_fflush_r+0x1c>
    9fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9fae:	f7fe f92f 	bl	8210 <__retarget_lock_release_recursive>
    9fb2:	4628      	mov	r0, r5
    9fb4:	bd38      	pop	{r3, r4, r5, pc}
    9fb6:	f7fd fc3b 	bl	7830 <__sinit>
    9fba:	e7db      	b.n	9f74 <_fflush_r+0xc>

00009fbc <memcmp>:
    9fbc:	2a03      	cmp	r2, #3
    9fbe:	b570      	push	{r4, r5, r6, lr}
    9fc0:	d914      	bls.n	9fec <memcmp+0x30>
    9fc2:	ea40 0301 	orr.w	r3, r0, r1
    9fc6:	079b      	lsls	r3, r3, #30
    9fc8:	d122      	bne.n	a010 <memcmp+0x54>
    9fca:	4604      	mov	r4, r0
    9fcc:	460b      	mov	r3, r1
    9fce:	4619      	mov	r1, r3
    9fd0:	4620      	mov	r0, r4
    9fd2:	680e      	ldr	r6, [r1, #0]
    9fd4:	6805      	ldr	r5, [r0, #0]
    9fd6:	42b5      	cmp	r5, r6
    9fd8:	f104 0404 	add.w	r4, r4, #4
    9fdc:	f103 0304 	add.w	r3, r3, #4
    9fe0:	d116      	bne.n	a010 <memcmp+0x54>
    9fe2:	3a04      	subs	r2, #4
    9fe4:	2a03      	cmp	r2, #3
    9fe6:	4620      	mov	r0, r4
    9fe8:	4619      	mov	r1, r3
    9fea:	d8f0      	bhi.n	9fce <memcmp+0x12>
    9fec:	1e54      	subs	r4, r2, #1
    9fee:	b19a      	cbz	r2, a018 <memcmp+0x5c>
    9ff0:	1e42      	subs	r2, r0, #1
    9ff2:	3901      	subs	r1, #1
    9ff4:	e001      	b.n	9ffa <memcmp+0x3e>
    9ff6:	18c3      	adds	r3, r0, r3
    9ff8:	d00c      	beq.n	a014 <memcmp+0x58>
    9ffa:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    9ffe:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    a002:	45e6      	cmp	lr, ip
    a004:	eba4 0302 	sub.w	r3, r4, r2
    a008:	d0f5      	beq.n	9ff6 <memcmp+0x3a>
    a00a:	ebae 000c 	sub.w	r0, lr, ip
    a00e:	bd70      	pop	{r4, r5, r6, pc}
    a010:	1e54      	subs	r4, r2, #1
    a012:	e7ed      	b.n	9ff0 <memcmp+0x34>
    a014:	4618      	mov	r0, r3
    a016:	bd70      	pop	{r4, r5, r6, pc}
    a018:	4610      	mov	r0, r2
    a01a:	bd70      	pop	{r4, r5, r6, pc}

0000a01c <strnlen>:
    a01c:	b171      	cbz	r1, a03c <strnlen+0x20>
    a01e:	4603      	mov	r3, r0
    a020:	eb00 0c01 	add.w	ip, r0, r1
    a024:	e001      	b.n	a02a <strnlen+0xe>
    a026:	4563      	cmp	r3, ip
    a028:	d006      	beq.n	a038 <strnlen+0x1c>
    a02a:	461a      	mov	r2, r3
    a02c:	3301      	adds	r3, #1
    a02e:	7811      	ldrb	r1, [r2, #0]
    a030:	2900      	cmp	r1, #0
    a032:	d1f8      	bne.n	a026 <strnlen+0xa>
    a034:	1a10      	subs	r0, r2, r0
    a036:	4770      	bx	lr
    a038:	1a18      	subs	r0, r3, r0
    a03a:	4770      	bx	lr
    a03c:	4608      	mov	r0, r1
    a03e:	4770      	bx	lr

0000a040 <_localeconv_r>:
    a040:	4800      	ldr	r0, [pc, #0]	; (a044 <_localeconv_r+0x4>)
    a042:	4770      	bx	lr
    a044:	200016d0 	.word	0x200016d0
	...

0000a050 <memchr>:
    a050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a054:	2a10      	cmp	r2, #16
    a056:	db2b      	blt.n	a0b0 <memchr+0x60>
    a058:	f010 0f07 	tst.w	r0, #7
    a05c:	d008      	beq.n	a070 <memchr+0x20>
    a05e:	f810 3b01 	ldrb.w	r3, [r0], #1
    a062:	3a01      	subs	r2, #1
    a064:	428b      	cmp	r3, r1
    a066:	d02d      	beq.n	a0c4 <memchr+0x74>
    a068:	f010 0f07 	tst.w	r0, #7
    a06c:	b342      	cbz	r2, a0c0 <memchr+0x70>
    a06e:	d1f6      	bne.n	a05e <memchr+0xe>
    a070:	b4f0      	push	{r4, r5, r6, r7}
    a072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    a076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    a07a:	f022 0407 	bic.w	r4, r2, #7
    a07e:	f07f 0700 	mvns.w	r7, #0
    a082:	2300      	movs	r3, #0
    a084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    a088:	3c08      	subs	r4, #8
    a08a:	ea85 0501 	eor.w	r5, r5, r1
    a08e:	ea86 0601 	eor.w	r6, r6, r1
    a092:	fa85 f547 	uadd8	r5, r5, r7
    a096:	faa3 f587 	sel	r5, r3, r7
    a09a:	fa86 f647 	uadd8	r6, r6, r7
    a09e:	faa5 f687 	sel	r6, r5, r7
    a0a2:	b98e      	cbnz	r6, a0c8 <memchr+0x78>
    a0a4:	d1ee      	bne.n	a084 <memchr+0x34>
    a0a6:	bcf0      	pop	{r4, r5, r6, r7}
    a0a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    a0ac:	f002 0207 	and.w	r2, r2, #7
    a0b0:	b132      	cbz	r2, a0c0 <memchr+0x70>
    a0b2:	f810 3b01 	ldrb.w	r3, [r0], #1
    a0b6:	3a01      	subs	r2, #1
    a0b8:	ea83 0301 	eor.w	r3, r3, r1
    a0bc:	b113      	cbz	r3, a0c4 <memchr+0x74>
    a0be:	d1f8      	bne.n	a0b2 <memchr+0x62>
    a0c0:	2000      	movs	r0, #0
    a0c2:	4770      	bx	lr
    a0c4:	3801      	subs	r0, #1
    a0c6:	4770      	bx	lr
    a0c8:	2d00      	cmp	r5, #0
    a0ca:	bf06      	itte	eq
    a0cc:	4635      	moveq	r5, r6
    a0ce:	3803      	subeq	r0, #3
    a0d0:	3807      	subne	r0, #7
    a0d2:	f015 0f01 	tst.w	r5, #1
    a0d6:	d107      	bne.n	a0e8 <memchr+0x98>
    a0d8:	3001      	adds	r0, #1
    a0da:	f415 7f80 	tst.w	r5, #256	; 0x100
    a0de:	bf02      	ittt	eq
    a0e0:	3001      	addeq	r0, #1
    a0e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    a0e6:	3001      	addeq	r0, #1
    a0e8:	bcf0      	pop	{r4, r5, r6, r7}
    a0ea:	3801      	subs	r0, #1
    a0ec:	4770      	bx	lr
    a0ee:	bf00      	nop

0000a0f0 <__assert_func>:
    a0f0:	b500      	push	{lr}
    a0f2:	4c0b      	ldr	r4, [pc, #44]	; (a120 <__assert_func+0x30>)
    a0f4:	6825      	ldr	r5, [r4, #0]
    a0f6:	4614      	mov	r4, r2
    a0f8:	68ee      	ldr	r6, [r5, #12]
    a0fa:	461a      	mov	r2, r3
    a0fc:	b085      	sub	sp, #20
    a0fe:	4603      	mov	r3, r0
    a100:	460d      	mov	r5, r1
    a102:	b14c      	cbz	r4, a118 <__assert_func+0x28>
    a104:	4907      	ldr	r1, [pc, #28]	; (a124 <__assert_func+0x34>)
    a106:	9500      	str	r5, [sp, #0]
    a108:	e9cd 1401 	strd	r1, r4, [sp, #4]
    a10c:	4630      	mov	r0, r6
    a10e:	4906      	ldr	r1, [pc, #24]	; (a128 <__assert_func+0x38>)
    a110:	f000 ff86 	bl	b020 <fiprintf>
    a114:	f7fa fbfa 	bl	490c <abort>
    a118:	4904      	ldr	r1, [pc, #16]	; (a12c <__assert_func+0x3c>)
    a11a:	460c      	mov	r4, r1
    a11c:	e7f3      	b.n	a106 <__assert_func+0x16>
    a11e:	bf00      	nop
    a120:	20001b68 	.word	0x20001b68
    a124:	200008ac 	.word	0x200008ac
    a128:	200008bc 	.word	0x200008bc
    a12c:	20000628 	.word	0x20000628

0000a130 <_calloc_r>:
    a130:	b538      	push	{r3, r4, r5, lr}
    a132:	fba1 1402 	umull	r1, r4, r1, r2
    a136:	bb8c      	cbnz	r4, a19c <_calloc_r+0x6c>
    a138:	f7fb fd90 	bl	5c5c <_malloc_r>
    a13c:	4605      	mov	r5, r0
    a13e:	b1e0      	cbz	r0, a17a <_calloc_r+0x4a>
    a140:	f850 2c04 	ldr.w	r2, [r0, #-4]
    a144:	f022 0203 	bic.w	r2, r2, #3
    a148:	3a04      	subs	r2, #4
    a14a:	2a24      	cmp	r2, #36	; 0x24
    a14c:	d817      	bhi.n	a17e <_calloc_r+0x4e>
    a14e:	2a13      	cmp	r2, #19
    a150:	d91a      	bls.n	a188 <_calloc_r+0x58>
    a152:	2a1b      	cmp	r2, #27
    a154:	e9c0 4400 	strd	r4, r4, [r0]
    a158:	d91d      	bls.n	a196 <_calloc_r+0x66>
    a15a:	2a24      	cmp	r2, #36	; 0x24
    a15c:	bf14      	ite	ne
    a15e:	f100 0210 	addne.w	r2, r0, #16
    a162:	f100 0218 	addeq.w	r2, r0, #24
    a166:	f04f 0300 	mov.w	r3, #0
    a16a:	e9c0 4402 	strd	r4, r4, [r0, #8]
    a16e:	bf04      	itt	eq
    a170:	6104      	streq	r4, [r0, #16]
    a172:	6144      	streq	r4, [r0, #20]
    a174:	e9c2 3300 	strd	r3, r3, [r2]
    a178:	6093      	str	r3, [r2, #8]
    a17a:	4628      	mov	r0, r5
    a17c:	bd38      	pop	{r3, r4, r5, pc}
    a17e:	4621      	mov	r1, r4
    a180:	f7fd fc66 	bl	7a50 <memset>
    a184:	4628      	mov	r0, r5
    a186:	bd38      	pop	{r3, r4, r5, pc}
    a188:	4602      	mov	r2, r0
    a18a:	2300      	movs	r3, #0
    a18c:	e9c2 3300 	strd	r3, r3, [r2]
    a190:	6093      	str	r3, [r2, #8]
    a192:	4628      	mov	r0, r5
    a194:	bd38      	pop	{r3, r4, r5, pc}
    a196:	f100 0208 	add.w	r2, r0, #8
    a19a:	e7f6      	b.n	a18a <_calloc_r+0x5a>
    a19c:	f7fe f808 	bl	81b0 <__errno>
    a1a0:	230c      	movs	r3, #12
    a1a2:	2500      	movs	r5, #0
    a1a4:	6003      	str	r3, [r0, #0]
    a1a6:	e7e8      	b.n	a17a <_calloc_r+0x4a>

0000a1a8 <quorem>:
    a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1ac:	6903      	ldr	r3, [r0, #16]
    a1ae:	690c      	ldr	r4, [r1, #16]
    a1b0:	42a3      	cmp	r3, r4
    a1b2:	b083      	sub	sp, #12
    a1b4:	f2c0 8087 	blt.w	a2c6 <quorem+0x11e>
    a1b8:	3c01      	subs	r4, #1
    a1ba:	f101 0514 	add.w	r5, r1, #20
    a1be:	00a3      	lsls	r3, r4, #2
    a1c0:	f100 0814 	add.w	r8, r0, #20
    a1c4:	9300      	str	r3, [sp, #0]
    a1c6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    a1ca:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a1ce:	3301      	adds	r3, #1
    a1d0:	4681      	mov	r9, r0
    a1d2:	429a      	cmp	r2, r3
    a1d4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    a1d8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    a1dc:	9001      	str	r0, [sp, #4]
    a1de:	fbb2 f6f3 	udiv	r6, r2, r3
    a1e2:	d33b      	bcc.n	a25c <quorem+0xb4>
    a1e4:	f04f 0c00 	mov.w	ip, #0
    a1e8:	46ae      	mov	lr, r5
    a1ea:	4640      	mov	r0, r8
    a1ec:	46e2      	mov	sl, ip
    a1ee:	4663      	mov	r3, ip
    a1f0:	f85e bb04 	ldr.w	fp, [lr], #4
    a1f4:	6802      	ldr	r2, [r0, #0]
    a1f6:	fa1f fc8b 	uxth.w	ip, fp
    a1fa:	fb06 330c 	mla	r3, r6, ip, r3
    a1fe:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a202:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    a206:	fb06 cc0b 	mla	ip, r6, fp, ip
    a20a:	b29b      	uxth	r3, r3
    a20c:	ebaa 0303 	sub.w	r3, sl, r3
    a210:	fa1f fa8c 	uxth.w	sl, ip
    a214:	fa13 f382 	uxtah	r3, r3, r2
    a218:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    a21c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    a220:	b29b      	uxth	r3, r3
    a222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a226:	4577      	cmp	r7, lr
    a228:	f840 3b04 	str.w	r3, [r0], #4
    a22c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    a230:	ea4f 431c 	mov.w	r3, ip, lsr #16
    a234:	d2dc      	bcs.n	a1f0 <quorem+0x48>
    a236:	9b00      	ldr	r3, [sp, #0]
    a238:	f858 3003 	ldr.w	r3, [r8, r3]
    a23c:	b973      	cbnz	r3, a25c <quorem+0xb4>
    a23e:	9b01      	ldr	r3, [sp, #4]
    a240:	3b04      	subs	r3, #4
    a242:	4598      	cmp	r8, r3
    a244:	d304      	bcc.n	a250 <quorem+0xa8>
    a246:	e007      	b.n	a258 <quorem+0xb0>
    a248:	4598      	cmp	r8, r3
    a24a:	f104 34ff 	add.w	r4, r4, #4294967295
    a24e:	d203      	bcs.n	a258 <quorem+0xb0>
    a250:	f853 2904 	ldr.w	r2, [r3], #-4
    a254:	2a00      	cmp	r2, #0
    a256:	d0f7      	beq.n	a248 <quorem+0xa0>
    a258:	f8c9 4010 	str.w	r4, [r9, #16]
    a25c:	4648      	mov	r0, r9
    a25e:	f7ff facb 	bl	97f8 <__mcmp>
    a262:	2800      	cmp	r0, #0
    a264:	db2b      	blt.n	a2be <quorem+0x116>
    a266:	3601      	adds	r6, #1
    a268:	4641      	mov	r1, r8
    a26a:	2300      	movs	r3, #0
    a26c:	f855 0b04 	ldr.w	r0, [r5], #4
    a270:	f8d1 c000 	ldr.w	ip, [r1]
    a274:	b282      	uxth	r2, r0
    a276:	1a9a      	subs	r2, r3, r2
    a278:	0c03      	lsrs	r3, r0, #16
    a27a:	fa12 f28c 	uxtah	r2, r2, ip
    a27e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    a282:	eb03 4322 	add.w	r3, r3, r2, asr #16
    a286:	b292      	uxth	r2, r2
    a288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a28c:	42af      	cmp	r7, r5
    a28e:	f841 2b04 	str.w	r2, [r1], #4
    a292:	ea4f 4323 	mov.w	r3, r3, asr #16
    a296:	d2e9      	bcs.n	a26c <quorem+0xc4>
    a298:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    a29c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    a2a0:	b96a      	cbnz	r2, a2be <quorem+0x116>
    a2a2:	3b04      	subs	r3, #4
    a2a4:	4598      	cmp	r8, r3
    a2a6:	d304      	bcc.n	a2b2 <quorem+0x10a>
    a2a8:	e007      	b.n	a2ba <quorem+0x112>
    a2aa:	4598      	cmp	r8, r3
    a2ac:	f104 34ff 	add.w	r4, r4, #4294967295
    a2b0:	d203      	bcs.n	a2ba <quorem+0x112>
    a2b2:	f853 2904 	ldr.w	r2, [r3], #-4
    a2b6:	2a00      	cmp	r2, #0
    a2b8:	d0f7      	beq.n	a2aa <quorem+0x102>
    a2ba:	f8c9 4010 	str.w	r4, [r9, #16]
    a2be:	4630      	mov	r0, r6
    a2c0:	b003      	add	sp, #12
    a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2c6:	2000      	movs	r0, #0
    a2c8:	b003      	add	sp, #12
    a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2ce:	bf00      	nop

0000a2d0 <_dtoa_r>:
    a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2d4:	ed2d 8b02 	vpush	{d8}
    a2d8:	b08f      	sub	sp, #60	; 0x3c
    a2da:	ed8d 0b02 	vstr	d0, [sp, #8]
    a2de:	9101      	str	r1, [sp, #4]
    a2e0:	6b81      	ldr	r1, [r0, #56]	; 0x38
    a2e2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    a2e4:	9305      	str	r3, [sp, #20]
    a2e6:	ec57 6b10 	vmov	r6, r7, d0
    a2ea:	4604      	mov	r4, r0
    a2ec:	4693      	mov	fp, r2
    a2ee:	b141      	cbz	r1, a302 <_dtoa_r+0x32>
    a2f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    a2f2:	604a      	str	r2, [r1, #4]
    a2f4:	2301      	movs	r3, #1
    a2f6:	4093      	lsls	r3, r2
    a2f8:	608b      	str	r3, [r1, #8]
    a2fa:	f7fe ffc5 	bl	9288 <_Bfree>
    a2fe:	2300      	movs	r3, #0
    a300:	63a3      	str	r3, [r4, #56]	; 0x38
    a302:	f1b7 0800 	subs.w	r8, r7, #0
    a306:	bfb4      	ite	lt
    a308:	2301      	movlt	r3, #1
    a30a:	2300      	movge	r3, #0
    a30c:	602b      	str	r3, [r5, #0]
    a30e:	4bbe      	ldr	r3, [pc, #760]	; (a608 <_dtoa_r+0x338>)
    a310:	bfbc      	itt	lt
    a312:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    a316:	f8cd 800c 	strlt.w	r8, [sp, #12]
    a31a:	ea33 0308 	bics.w	r3, r3, r8
    a31e:	f000 809f 	beq.w	a460 <_dtoa_r+0x190>
    a322:	ed9d 8b02 	vldr	d8, [sp, #8]
    a326:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a32e:	d111      	bne.n	a354 <_dtoa_r+0x84>
    a330:	9a05      	ldr	r2, [sp, #20]
    a332:	2301      	movs	r3, #1
    a334:	6013      	str	r3, [r2, #0]
    a336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a338:	2b00      	cmp	r3, #0
    a33a:	f000 823f 	beq.w	a7bc <_dtoa_r+0x4ec>
    a33e:	4bb3      	ldr	r3, [pc, #716]	; (a60c <_dtoa_r+0x33c>)
    a340:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a342:	6013      	str	r3, [r2, #0]
    a344:	3b01      	subs	r3, #1
    a346:	9300      	str	r3, [sp, #0]
    a348:	9800      	ldr	r0, [sp, #0]
    a34a:	b00f      	add	sp, #60	; 0x3c
    a34c:	ecbd 8b02 	vpop	{d8}
    a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a354:	aa0c      	add	r2, sp, #48	; 0x30
    a356:	a90d      	add	r1, sp, #52	; 0x34
    a358:	4620      	mov	r0, r4
    a35a:	eeb0 0b48 	vmov.f64	d0, d8
    a35e:	f7ff fbab 	bl	9ab8 <__d2b>
    a362:	ea5f 5318 	movs.w	r3, r8, lsr #20
    a366:	4605      	mov	r5, r0
    a368:	f040 8092 	bne.w	a490 <_dtoa_r+0x1c0>
    a36c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    a370:	440b      	add	r3, r1
    a372:	f203 4232 	addw	r2, r3, #1074	; 0x432
    a376:	2a20      	cmp	r2, #32
    a378:	f340 82fa 	ble.w	a970 <_dtoa_r+0x6a0>
    a37c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    a380:	fa08 f802 	lsl.w	r8, r8, r2
    a384:	f203 4212 	addw	r2, r3, #1042	; 0x412
    a388:	40d6      	lsrs	r6, r2
    a38a:	ea48 0206 	orr.w	r2, r8, r6
    a38e:	ee07 2a10 	vmov	s14, r2
    a392:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    a396:	1e58      	subs	r0, r3, #1
    a398:	ee17 6a90 	vmov	r6, s15
    a39c:	ec53 2b17 	vmov	r2, r3, d7
    a3a0:	f04f 0a01 	mov.w	sl, #1
    a3a4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    a3a8:	ed9f 3b91 	vldr	d3, [pc, #580]	; a5f0 <_dtoa_r+0x320>
    a3ac:	ed9f 7b92 	vldr	d7, [pc, #584]	; a5f8 <_dtoa_r+0x328>
    a3b0:	ed9f 5b93 	vldr	d5, [pc, #588]	; a600 <_dtoa_r+0x330>
    a3b4:	ee06 0a90 	vmov	s13, r0
    a3b8:	ec43 2b12 	vmov	d2, r2, r3
    a3bc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    a3c0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    a3c4:	ee32 6b46 	vsub.f64	d6, d2, d6
    a3c8:	eea6 7b03 	vfma.f64	d7, d6, d3
    a3cc:	eea4 7b05 	vfma.f64	d7, d4, d5
    a3d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a3d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3dc:	ee16 7a90 	vmov	r7, s13
    a3e0:	d508      	bpl.n	a3f4 <_dtoa_r+0x124>
    a3e2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    a3e6:	eeb4 6b47 	vcmp.f64	d6, d7
    a3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3ee:	bf18      	it	ne
    a3f0:	f107 37ff 	addne.w	r7, r7, #4294967295
    a3f4:	2f16      	cmp	r7, #22
    a3f6:	f200 8145 	bhi.w	a684 <_dtoa_r+0x3b4>
    a3fa:	4b85      	ldr	r3, [pc, #532]	; (a610 <_dtoa_r+0x340>)
    a3fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a400:	ed93 7b00 	vldr	d7, [r3]
    a404:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a40c:	d557      	bpl.n	a4be <_dtoa_r+0x1ee>
    a40e:	1a09      	subs	r1, r1, r0
    a410:	2300      	movs	r3, #0
    a412:	f1b1 0801 	subs.w	r8, r1, #1
    a416:	f107 37ff 	add.w	r7, r7, #4294967295
    a41a:	930a      	str	r3, [sp, #40]	; 0x28
    a41c:	f100 8139 	bmi.w	a692 <_dtoa_r+0x3c2>
    a420:	2300      	movs	r3, #0
    a422:	9306      	str	r3, [sp, #24]
    a424:	2f00      	cmp	r7, #0
    a426:	da52      	bge.n	a4ce <_dtoa_r+0x1fe>
    a428:	9b06      	ldr	r3, [sp, #24]
    a42a:	9704      	str	r7, [sp, #16]
    a42c:	1bdb      	subs	r3, r3, r7
    a42e:	9306      	str	r3, [sp, #24]
    a430:	427b      	negs	r3, r7
    a432:	9308      	str	r3, [sp, #32]
    a434:	9b01      	ldr	r3, [sp, #4]
    a436:	2b09      	cmp	r3, #9
    a438:	f04f 0700 	mov.w	r7, #0
    a43c:	d84e      	bhi.n	a4dc <_dtoa_r+0x20c>
    a43e:	2b05      	cmp	r3, #5
    a440:	f340 829d 	ble.w	a97e <_dtoa_r+0x6ae>
    a444:	3b04      	subs	r3, #4
    a446:	9301      	str	r3, [sp, #4]
    a448:	2600      	movs	r6, #0
    a44a:	9b01      	ldr	r3, [sp, #4]
    a44c:	1e9a      	subs	r2, r3, #2
    a44e:	2a03      	cmp	r2, #3
    a450:	f200 8125 	bhi.w	a69e <_dtoa_r+0x3ce>
    a454:	e8df f012 	tbh	[pc, r2, lsl #1]
    a458:	03a703aa 	.word	0x03a703aa
    a45c:	037e039d 	.word	0x037e039d
    a460:	9a05      	ldr	r2, [sp, #20]
    a462:	f3c8 0813 	ubfx	r8, r8, #0, #20
    a466:	f242 730f 	movw	r3, #9999	; 0x270f
    a46a:	ea58 0806 	orrs.w	r8, r8, r6
    a46e:	6013      	str	r3, [r2, #0]
    a470:	d11e      	bne.n	a4b0 <_dtoa_r+0x1e0>
    a472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a474:	2b00      	cmp	r3, #0
    a476:	f000 8591 	beq.w	af9c <_dtoa_r+0xccc>
    a47a:	4b66      	ldr	r3, [pc, #408]	; (a614 <_dtoa_r+0x344>)
    a47c:	9300      	str	r3, [sp, #0]
    a47e:	3308      	adds	r3, #8
    a480:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    a482:	9800      	ldr	r0, [sp, #0]
    a484:	6013      	str	r3, [r2, #0]
    a486:	b00f      	add	sp, #60	; 0x3c
    a488:	ecbd 8b02 	vpop	{d8}
    a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a490:	ee18 6a90 	vmov	r6, s17
    a494:	f3c6 0613 	ubfx	r6, r6, #0, #20
    a498:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    a49c:	ec53 2b18 	vmov	r2, r3, d8
    a4a0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    a4a4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a4a6:	f04f 0a00 	mov.w	sl, #0
    a4aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    a4ae:	e77b      	b.n	a3a8 <_dtoa_r+0xd8>
    a4b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	f040 833b 	bne.w	ab2e <_dtoa_r+0x85e>
    a4b8:	4b57      	ldr	r3, [pc, #348]	; (a618 <_dtoa_r+0x348>)
    a4ba:	9300      	str	r3, [sp, #0]
    a4bc:	e744      	b.n	a348 <_dtoa_r+0x78>
    a4be:	1a09      	subs	r1, r1, r0
    a4c0:	2300      	movs	r3, #0
    a4c2:	f1b1 0801 	subs.w	r8, r1, #1
    a4c6:	930a      	str	r3, [sp, #40]	; 0x28
    a4c8:	f100 80e3 	bmi.w	a692 <_dtoa_r+0x3c2>
    a4cc:	9306      	str	r3, [sp, #24]
    a4ce:	2300      	movs	r3, #0
    a4d0:	9308      	str	r3, [sp, #32]
    a4d2:	9b01      	ldr	r3, [sp, #4]
    a4d4:	9704      	str	r7, [sp, #16]
    a4d6:	2b09      	cmp	r3, #9
    a4d8:	44b8      	add	r8, r7
    a4da:	d9b0      	bls.n	a43e <_dtoa_r+0x16e>
    a4dc:	2300      	movs	r3, #0
    a4de:	2601      	movs	r6, #1
    a4e0:	9301      	str	r3, [sp, #4]
    a4e2:	9607      	str	r6, [sp, #28]
    a4e4:	f04f 39ff 	mov.w	r9, #4294967295
    a4e8:	469b      	mov	fp, r3
    a4ea:	2100      	movs	r1, #0
    a4ec:	63e1      	str	r1, [r4, #60]	; 0x3c
    a4ee:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    a4f2:	4620      	mov	r0, r4
    a4f4:	f7fe fea2 	bl	923c <_Balloc>
    a4f8:	9000      	str	r0, [sp, #0]
    a4fa:	2800      	cmp	r0, #0
    a4fc:	f000 8540 	beq.w	af80 <_dtoa_r+0xcb0>
    a500:	9b00      	ldr	r3, [sp, #0]
    a502:	63a3      	str	r3, [r4, #56]	; 0x38
    a504:	f1b9 0f0e 	cmp.w	r9, #14
    a508:	f200 80dc 	bhi.w	a6c4 <_dtoa_r+0x3f4>
    a50c:	2e00      	cmp	r6, #0
    a50e:	f000 80d9 	beq.w	a6c4 <_dtoa_r+0x3f4>
    a512:	9b04      	ldr	r3, [sp, #16]
    a514:	2b00      	cmp	r3, #0
    a516:	f340 83de 	ble.w	acd6 <_dtoa_r+0xa06>
    a51a:	4a3d      	ldr	r2, [pc, #244]	; (a610 <_dtoa_r+0x340>)
    a51c:	f003 010f 	and.w	r1, r3, #15
    a520:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    a524:	ed92 7b00 	vldr	d7, [r2]
    a528:	111a      	asrs	r2, r3, #4
    a52a:	05db      	lsls	r3, r3, #23
    a52c:	f140 8382 	bpl.w	ac34 <_dtoa_r+0x964>
    a530:	493a      	ldr	r1, [pc, #232]	; (a61c <_dtoa_r+0x34c>)
    a532:	ed91 6b08 	vldr	d6, [r1, #32]
    a536:	f002 020f 	and.w	r2, r2, #15
    a53a:	2003      	movs	r0, #3
    a53c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    a540:	b15a      	cbz	r2, a55a <_dtoa_r+0x28a>
    a542:	4936      	ldr	r1, [pc, #216]	; (a61c <_dtoa_r+0x34c>)
    a544:	07d6      	lsls	r6, r2, #31
    a546:	d504      	bpl.n	a552 <_dtoa_r+0x282>
    a548:	ed91 6b00 	vldr	d6, [r1]
    a54c:	3001      	adds	r0, #1
    a54e:	ee27 7b06 	vmul.f64	d7, d7, d6
    a552:	1052      	asrs	r2, r2, #1
    a554:	f101 0108 	add.w	r1, r1, #8
    a558:	d1f4      	bne.n	a544 <_dtoa_r+0x274>
    a55a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    a55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a560:	b13b      	cbz	r3, a572 <_dtoa_r+0x2a2>
    a562:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a566:	eeb4 6bc7 	vcmpe.f64	d6, d7
    a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a56e:	f100 84ae 	bmi.w	aece <_dtoa_r+0xbfe>
    a572:	ee07 0a90 	vmov	s15, r0
    a576:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    a57a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    a57e:	eea5 7b06 	vfma.f64	d7, d5, d6
    a582:	ee17 2a90 	vmov	r2, s15
    a586:	ec51 0b17 	vmov	r0, r1, d7
    a58a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    a58e:	f1b9 0f00 	cmp.w	r9, #0
    a592:	f000 8388 	beq.w	aca6 <_dtoa_r+0x9d6>
    a596:	9e04      	ldr	r6, [sp, #16]
    a598:	464a      	mov	r2, r9
    a59a:	9b07      	ldr	r3, [sp, #28]
    a59c:	2b00      	cmp	r3, #0
    a59e:	f000 8447 	beq.w	ae30 <_dtoa_r+0xb60>
    a5a2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    a5a6:	4b1a      	ldr	r3, [pc, #104]	; (a610 <_dtoa_r+0x340>)
    a5a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    a5ac:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    a5b0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    a5b4:	ee36 7b47 	vsub.f64	d7, d6, d7
    a5b8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    a5bc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    a5c0:	ec41 0b16 	vmov	d6, r0, r1
    a5c4:	ee14 0a90 	vmov	r0, s9
    a5c8:	ee35 5b46 	vsub.f64	d5, d5, d6
    a5cc:	9900      	ldr	r1, [sp, #0]
    a5ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a5d2:	3030      	adds	r0, #48	; 0x30
    a5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a5d8:	f801 0b01 	strb.w	r0, [r1], #1
    a5dc:	f300 84ac 	bgt.w	af38 <_dtoa_r+0xc68>
    a5e0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    a5e4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a5e8:	f04f 0c00 	mov.w	ip, #0
    a5ec:	e031      	b.n	a652 <_dtoa_r+0x382>
    a5ee:	bf00      	nop
    a5f0:	636f4361 	.word	0x636f4361
    a5f4:	3fd287a7 	.word	0x3fd287a7
    a5f8:	8b60c8b3 	.word	0x8b60c8b3
    a5fc:	3fc68a28 	.word	0x3fc68a28
    a600:	509f79fb 	.word	0x509f79fb
    a604:	3fd34413 	.word	0x3fd34413
    a608:	7ff00000 	.word	0x7ff00000
    a60c:	2000101d 	.word	0x2000101d
    a610:	200002a8 	.word	0x200002a8
    a614:	20000bec 	.word	0x20000bec
    a618:	20000bf8 	.word	0x20000bf8
    a61c:	20000280 	.word	0x20000280
    a620:	f10c 0c01 	add.w	ip, ip, #1
    a624:	4594      	cmp	ip, r2
    a626:	da4d      	bge.n	a6c4 <_dtoa_r+0x3f4>
    a628:	ee27 7b04 	vmul.f64	d7, d7, d4
    a62c:	ee25 5b04 	vmul.f64	d5, d5, d4
    a630:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a634:	ee16 3a90 	vmov	r3, s13
    a638:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    a63c:	3330      	adds	r3, #48	; 0x30
    a63e:	ee37 7b43 	vsub.f64	d7, d7, d3
    a642:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a64a:	f801 3b01 	strb.w	r3, [r1], #1
    a64e:	f100 8473 	bmi.w	af38 <_dtoa_r+0xc68>
    a652:	ee32 6b47 	vsub.f64	d6, d2, d7
    a656:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a65e:	d5df      	bpl.n	a620 <_dtoa_r+0x350>
    a660:	9a00      	ldr	r2, [sp, #0]
    a662:	9604      	str	r6, [sp, #16]
    a664:	e002      	b.n	a66c <_dtoa_r+0x39c>
    a666:	428a      	cmp	r2, r1
    a668:	f000 8450 	beq.w	af0c <_dtoa_r+0xc3c>
    a66c:	4689      	mov	r9, r1
    a66e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a672:	2b39      	cmp	r3, #57	; 0x39
    a674:	d0f7      	beq.n	a666 <_dtoa_r+0x396>
    a676:	3301      	adds	r3, #1
    a678:	b2db      	uxtb	r3, r3
    a67a:	700b      	strb	r3, [r1, #0]
    a67c:	9b04      	ldr	r3, [sp, #16]
    a67e:	3301      	adds	r3, #1
    a680:	9304      	str	r3, [sp, #16]
    a682:	e155      	b.n	a930 <_dtoa_r+0x660>
    a684:	1a09      	subs	r1, r1, r0
    a686:	2301      	movs	r3, #1
    a688:	f1b1 0801 	subs.w	r8, r1, #1
    a68c:	930a      	str	r3, [sp, #40]	; 0x28
    a68e:	f57f aec7 	bpl.w	a420 <_dtoa_r+0x150>
    a692:	f1c1 0301 	rsb	r3, r1, #1
    a696:	9306      	str	r3, [sp, #24]
    a698:	f04f 0800 	mov.w	r8, #0
    a69c:	e6c2      	b.n	a424 <_dtoa_r+0x154>
    a69e:	2600      	movs	r6, #0
    a6a0:	63e6      	str	r6, [r4, #60]	; 0x3c
    a6a2:	4631      	mov	r1, r6
    a6a4:	4620      	mov	r0, r4
    a6a6:	f7fe fdc9 	bl	923c <_Balloc>
    a6aa:	9000      	str	r0, [sp, #0]
    a6ac:	2800      	cmp	r0, #0
    a6ae:	f000 8467 	beq.w	af80 <_dtoa_r+0xcb0>
    a6b2:	9b00      	ldr	r3, [sp, #0]
    a6b4:	63a3      	str	r3, [r4, #56]	; 0x38
    a6b6:	f04f 33ff 	mov.w	r3, #4294967295
    a6ba:	930b      	str	r3, [sp, #44]	; 0x2c
    a6bc:	4699      	mov	r9, r3
    a6be:	2301      	movs	r3, #1
    a6c0:	46b3      	mov	fp, r6
    a6c2:	9307      	str	r3, [sp, #28]
    a6c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a6c6:	2a00      	cmp	r2, #0
    a6c8:	db55      	blt.n	a776 <_dtoa_r+0x4a6>
    a6ca:	9904      	ldr	r1, [sp, #16]
    a6cc:	290e      	cmp	r1, #14
    a6ce:	dc52      	bgt.n	a776 <_dtoa_r+0x4a6>
    a6d0:	4bb7      	ldr	r3, [pc, #732]	; (a9b0 <_dtoa_r+0x6e0>)
    a6d2:	f1bb 0f00 	cmp.w	fp, #0
    a6d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a6da:	ed93 6b00 	vldr	d6, [r3]
    a6de:	da15      	bge.n	a70c <_dtoa_r+0x43c>
    a6e0:	f1b9 0f00 	cmp.w	r9, #0
    a6e4:	dc12      	bgt.n	a70c <_dtoa_r+0x43c>
    a6e6:	f040 82f2 	bne.w	acce <_dtoa_r+0x9fe>
    a6ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a6ee:	ee26 7b07 	vmul.f64	d7, d6, d7
    a6f2:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6fa:	46ca      	mov	sl, r9
    a6fc:	464e      	mov	r6, r9
    a6fe:	f200 826d 	bhi.w	abdc <_dtoa_r+0x90c>
    a702:	f8dd 8000 	ldr.w	r8, [sp]
    a706:	ea6f 0b0b 	mvn.w	fp, fp
    a70a:	e270      	b.n	abee <_dtoa_r+0x91e>
    a70c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a710:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a714:	9900      	ldr	r1, [sp, #0]
    a716:	ee17 3a10 	vmov	r3, s14
    a71a:	f1b9 0f01 	cmp.w	r9, #1
    a71e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a722:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a726:	f801 3b01 	strb.w	r3, [r1], #1
    a72a:	eea5 8b46 	vfms.f64	d8, d5, d6
    a72e:	f000 8334 	beq.w	ad9a <_dtoa_r+0xaca>
    a732:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a736:	2301      	movs	r3, #1
    a738:	e011      	b.n	a75e <_dtoa_r+0x48e>
    a73a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a73e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a742:	3301      	adds	r3, #1
    a744:	ee17 2a10 	vmov	r2, s14
    a748:	454b      	cmp	r3, r9
    a74a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    a74e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a752:	f801 2b01 	strb.w	r2, [r1], #1
    a756:	eea5 8b46 	vfms.f64	d8, d5, d6
    a75a:	f000 831e 	beq.w	ad9a <_dtoa_r+0xaca>
    a75e:	ee28 8b04 	vmul.f64	d8, d8, d4
    a762:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a76a:	d1e6      	bne.n	a73a <_dtoa_r+0x46a>
    a76c:	9b04      	ldr	r3, [sp, #16]
    a76e:	3301      	adds	r3, #1
    a770:	9304      	str	r3, [sp, #16]
    a772:	4689      	mov	r9, r1
    a774:	e0dc      	b.n	a930 <_dtoa_r+0x660>
    a776:	9b07      	ldr	r3, [sp, #28]
    a778:	b343      	cbz	r3, a7cc <_dtoa_r+0x4fc>
    a77a:	9b01      	ldr	r3, [sp, #4]
    a77c:	2b01      	cmp	r3, #1
    a77e:	f340 8276 	ble.w	ac6e <_dtoa_r+0x99e>
    a782:	9b08      	ldr	r3, [sp, #32]
    a784:	f109 3aff 	add.w	sl, r9, #4294967295
    a788:	4553      	cmp	r3, sl
    a78a:	f280 823f 	bge.w	ac0c <_dtoa_r+0x93c>
    a78e:	9b08      	ldr	r3, [sp, #32]
    a790:	f8cd a020 	str.w	sl, [sp, #32]
    a794:	ebaa 0203 	sub.w	r2, sl, r3
    a798:	4417      	add	r7, r2
    a79a:	f04f 0a00 	mov.w	sl, #0
    a79e:	f1b9 0f00 	cmp.w	r9, #0
    a7a2:	f2c0 8325 	blt.w	adf0 <_dtoa_r+0xb20>
    a7a6:	9b06      	ldr	r3, [sp, #24]
    a7a8:	9309      	str	r3, [sp, #36]	; 0x24
    a7aa:	444b      	add	r3, r9
    a7ac:	44c8      	add	r8, r9
    a7ae:	9306      	str	r3, [sp, #24]
    a7b0:	2101      	movs	r1, #1
    a7b2:	4620      	mov	r0, r4
    a7b4:	f7fe fe6c 	bl	9490 <__i2b>
    a7b8:	4606      	mov	r6, r0
    a7ba:	e00c      	b.n	a7d6 <_dtoa_r+0x506>
    a7bc:	4b7d      	ldr	r3, [pc, #500]	; (a9b4 <_dtoa_r+0x6e4>)
    a7be:	9300      	str	r3, [sp, #0]
    a7c0:	9800      	ldr	r0, [sp, #0]
    a7c2:	b00f      	add	sp, #60	; 0x3c
    a7c4:	ecbd 8b02 	vpop	{d8}
    a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7cc:	9b06      	ldr	r3, [sp, #24]
    a7ce:	f8dd a020 	ldr.w	sl, [sp, #32]
    a7d2:	9e07      	ldr	r6, [sp, #28]
    a7d4:	9309      	str	r3, [sp, #36]	; 0x24
    a7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7d8:	b16b      	cbz	r3, a7f6 <_dtoa_r+0x526>
    a7da:	f1b8 0f00 	cmp.w	r8, #0
    a7de:	dd0a      	ble.n	a7f6 <_dtoa_r+0x526>
    a7e0:	4543      	cmp	r3, r8
    a7e2:	9906      	ldr	r1, [sp, #24]
    a7e4:	461a      	mov	r2, r3
    a7e6:	bfa8      	it	ge
    a7e8:	4642      	movge	r2, r8
    a7ea:	1a89      	subs	r1, r1, r2
    a7ec:	1a9b      	subs	r3, r3, r2
    a7ee:	9106      	str	r1, [sp, #24]
    a7f0:	9309      	str	r3, [sp, #36]	; 0x24
    a7f2:	eba8 0802 	sub.w	r8, r8, r2
    a7f6:	9b08      	ldr	r3, [sp, #32]
    a7f8:	b163      	cbz	r3, a814 <_dtoa_r+0x544>
    a7fa:	9b07      	ldr	r3, [sp, #28]
    a7fc:	2b00      	cmp	r3, #0
    a7fe:	f000 82a7 	beq.w	ad50 <_dtoa_r+0xa80>
    a802:	f1ba 0f00 	cmp.w	sl, #0
    a806:	f300 8204 	bgt.w	ac12 <_dtoa_r+0x942>
    a80a:	9b08      	ldr	r3, [sp, #32]
    a80c:	ebb3 020a 	subs.w	r2, r3, sl
    a810:	f040 82ff 	bne.w	ae12 <_dtoa_r+0xb42>
    a814:	2101      	movs	r1, #1
    a816:	4620      	mov	r0, r4
    a818:	f7fe fe3a 	bl	9490 <__i2b>
    a81c:	2f00      	cmp	r7, #0
    a81e:	4682      	mov	sl, r0
    a820:	f300 80af 	bgt.w	a982 <_dtoa_r+0x6b2>
    a824:	9b01      	ldr	r3, [sp, #4]
    a826:	2b01      	cmp	r3, #1
    a828:	f340 8187 	ble.w	ab3a <_dtoa_r+0x86a>
    a82c:	2300      	movs	r3, #0
    a82e:	9308      	str	r3, [sp, #32]
    a830:	2001      	movs	r0, #1
    a832:	2f00      	cmp	r7, #0
    a834:	f040 80b1 	bne.w	a99a <_dtoa_r+0x6ca>
    a838:	4440      	add	r0, r8
    a83a:	f010 001f 	ands.w	r0, r0, #31
    a83e:	f000 817a 	beq.w	ab36 <_dtoa_r+0x866>
    a842:	f1c0 0220 	rsb	r2, r0, #32
    a846:	2a04      	cmp	r2, #4
    a848:	f300 8088 	bgt.w	a95c <_dtoa_r+0x68c>
    a84c:	f040 81f6 	bne.w	ac3c <_dtoa_r+0x96c>
    a850:	9b06      	ldr	r3, [sp, #24]
    a852:	2b00      	cmp	r3, #0
    a854:	dd05      	ble.n	a862 <_dtoa_r+0x592>
    a856:	4629      	mov	r1, r5
    a858:	461a      	mov	r2, r3
    a85a:	4620      	mov	r0, r4
    a85c:	f7fe ff54 	bl	9708 <__lshift>
    a860:	4605      	mov	r5, r0
    a862:	f1b8 0f00 	cmp.w	r8, #0
    a866:	dd05      	ble.n	a874 <_dtoa_r+0x5a4>
    a868:	4651      	mov	r1, sl
    a86a:	4642      	mov	r2, r8
    a86c:	4620      	mov	r0, r4
    a86e:	f7fe ff4b 	bl	9708 <__lshift>
    a872:	4682      	mov	sl, r0
    a874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a876:	2b00      	cmp	r3, #0
    a878:	f040 813f 	bne.w	aafa <_dtoa_r+0x82a>
    a87c:	f1b9 0f00 	cmp.w	r9, #0
    a880:	f340 8125 	ble.w	aace <_dtoa_r+0x7fe>
    a884:	9b07      	ldr	r3, [sp, #28]
    a886:	2b00      	cmp	r3, #0
    a888:	f040 80a3 	bne.w	a9d2 <_dtoa_r+0x702>
    a88c:	9b04      	ldr	r3, [sp, #16]
    a88e:	3301      	adds	r3, #1
    a890:	9304      	str	r3, [sp, #16]
    a892:	f8dd 8000 	ldr.w	r8, [sp]
    a896:	2701      	movs	r7, #1
    a898:	e007      	b.n	a8aa <_dtoa_r+0x5da>
    a89a:	4629      	mov	r1, r5
    a89c:	2300      	movs	r3, #0
    a89e:	220a      	movs	r2, #10
    a8a0:	4620      	mov	r0, r4
    a8a2:	f7fe fcfb 	bl	929c <__multadd>
    a8a6:	3701      	adds	r7, #1
    a8a8:	4605      	mov	r5, r0
    a8aa:	4651      	mov	r1, sl
    a8ac:	4628      	mov	r0, r5
    a8ae:	f7ff fc7b 	bl	a1a8 <quorem>
    a8b2:	45b9      	cmp	r9, r7
    a8b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a8b8:	f808 0b01 	strb.w	r0, [r8], #1
    a8bc:	dced      	bgt.n	a89a <_dtoa_r+0x5ca>
    a8be:	f1b9 0f00 	cmp.w	r9, #0
    a8c2:	9a00      	ldr	r2, [sp, #0]
    a8c4:	bfcc      	ite	gt
    a8c6:	46cb      	movgt	fp, r9
    a8c8:	f04f 0b01 	movle.w	fp, #1
    a8cc:	4603      	mov	r3, r0
    a8ce:	4493      	add	fp, r2
    a8d0:	2700      	movs	r7, #0
    a8d2:	4629      	mov	r1, r5
    a8d4:	2201      	movs	r2, #1
    a8d6:	4620      	mov	r0, r4
    a8d8:	9301      	str	r3, [sp, #4]
    a8da:	f7fe ff15 	bl	9708 <__lshift>
    a8de:	4651      	mov	r1, sl
    a8e0:	4605      	mov	r5, r0
    a8e2:	f7fe ff89 	bl	97f8 <__mcmp>
    a8e6:	2800      	cmp	r0, #0
    a8e8:	f340 81af 	ble.w	ac4a <_dtoa_r+0x97a>
    a8ec:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    a8f0:	9a00      	ldr	r2, [sp, #0]
    a8f2:	f10b 3bff 	add.w	fp, fp, #4294967295
    a8f6:	e004      	b.n	a902 <_dtoa_r+0x632>
    a8f8:	455a      	cmp	r2, fp
    a8fa:	f000 81b1 	beq.w	ac60 <_dtoa_r+0x990>
    a8fe:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a902:	2b39      	cmp	r3, #57	; 0x39
    a904:	f10b 0901 	add.w	r9, fp, #1
    a908:	d0f6      	beq.n	a8f8 <_dtoa_r+0x628>
    a90a:	3301      	adds	r3, #1
    a90c:	f88b 3000 	strb.w	r3, [fp]
    a910:	4651      	mov	r1, sl
    a912:	4620      	mov	r0, r4
    a914:	f7fe fcb8 	bl	9288 <_Bfree>
    a918:	b156      	cbz	r6, a930 <_dtoa_r+0x660>
    a91a:	b12f      	cbz	r7, a928 <_dtoa_r+0x658>
    a91c:	42b7      	cmp	r7, r6
    a91e:	d003      	beq.n	a928 <_dtoa_r+0x658>
    a920:	4639      	mov	r1, r7
    a922:	4620      	mov	r0, r4
    a924:	f7fe fcb0 	bl	9288 <_Bfree>
    a928:	4631      	mov	r1, r6
    a92a:	4620      	mov	r0, r4
    a92c:	f7fe fcac 	bl	9288 <_Bfree>
    a930:	4629      	mov	r1, r5
    a932:	4620      	mov	r0, r4
    a934:	f7fe fca8 	bl	9288 <_Bfree>
    a938:	2300      	movs	r3, #0
    a93a:	f889 3000 	strb.w	r3, [r9]
    a93e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a942:	601a      	str	r2, [r3, #0]
    a944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a946:	2b00      	cmp	r3, #0
    a948:	f43f acfe 	beq.w	a348 <_dtoa_r+0x78>
    a94c:	9800      	ldr	r0, [sp, #0]
    a94e:	f8c3 9000 	str.w	r9, [r3]
    a952:	b00f      	add	sp, #60	; 0x3c
    a954:	ecbd 8b02 	vpop	{d8}
    a958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a95c:	f1c0 001c 	rsb	r0, r0, #28
    a960:	9b06      	ldr	r3, [sp, #24]
    a962:	4403      	add	r3, r0
    a964:	9306      	str	r3, [sp, #24]
    a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a968:	4403      	add	r3, r0
    a96a:	9309      	str	r3, [sp, #36]	; 0x24
    a96c:	4480      	add	r8, r0
    a96e:	e76f      	b.n	a850 <_dtoa_r+0x580>
    a970:	f1c2 0220 	rsb	r2, r2, #32
    a974:	fa06 f202 	lsl.w	r2, r6, r2
    a978:	ee07 2a10 	vmov	s14, r2
    a97c:	e509      	b.n	a392 <_dtoa_r+0xc2>
    a97e:	2601      	movs	r6, #1
    a980:	e563      	b.n	a44a <_dtoa_r+0x17a>
    a982:	4601      	mov	r1, r0
    a984:	463a      	mov	r2, r7
    a986:	4620      	mov	r0, r4
    a988:	f7fe fe5e 	bl	9648 <__pow5mult>
    a98c:	9b01      	ldr	r3, [sp, #4]
    a98e:	2b01      	cmp	r3, #1
    a990:	4682      	mov	sl, r0
    a992:	f340 81c5 	ble.w	ad20 <_dtoa_r+0xa50>
    a996:	2300      	movs	r3, #0
    a998:	9308      	str	r3, [sp, #32]
    a99a:	f8da 2010 	ldr.w	r2, [sl, #16]
    a99e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    a9a2:	6910      	ldr	r0, [r2, #16]
    a9a4:	f7fe fd24 	bl	93f0 <__hi0bits>
    a9a8:	f1c0 0020 	rsb	r0, r0, #32
    a9ac:	e744      	b.n	a838 <_dtoa_r+0x568>
    a9ae:	bf00      	nop
    a9b0:	200002a8 	.word	0x200002a8
    a9b4:	2000101c 	.word	0x2000101c
    a9b8:	4631      	mov	r1, r6
    a9ba:	2300      	movs	r3, #0
    a9bc:	220a      	movs	r2, #10
    a9be:	4620      	mov	r0, r4
    a9c0:	f7fe fc6c 	bl	929c <__multadd>
    a9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	4606      	mov	r6, r0
    a9ca:	f340 82ce 	ble.w	af6a <_dtoa_r+0xc9a>
    a9ce:	9704      	str	r7, [sp, #16]
    a9d0:	4699      	mov	r9, r3
    a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	dd05      	ble.n	a9e4 <_dtoa_r+0x714>
    a9d8:	4631      	mov	r1, r6
    a9da:	461a      	mov	r2, r3
    a9dc:	4620      	mov	r0, r4
    a9de:	f7fe fe93 	bl	9708 <__lshift>
    a9e2:	4606      	mov	r6, r0
    a9e4:	9b08      	ldr	r3, [sp, #32]
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	f040 81eb 	bne.w	adc2 <_dtoa_r+0xaf2>
    a9ec:	46b0      	mov	r8, r6
    a9ee:	9b02      	ldr	r3, [sp, #8]
    a9f0:	9f00      	ldr	r7, [sp, #0]
    a9f2:	f003 0201 	and.w	r2, r3, #1
    a9f6:	1e7b      	subs	r3, r7, #1
    a9f8:	444b      	add	r3, r9
    a9fa:	9308      	str	r3, [sp, #32]
    a9fc:	9b01      	ldr	r3, [sp, #4]
    a9fe:	920a      	str	r2, [sp, #40]	; 0x28
    aa00:	4313      	orrs	r3, r2
    aa02:	9309      	str	r3, [sp, #36]	; 0x24
    aa04:	4651      	mov	r1, sl
    aa06:	4628      	mov	r0, r5
    aa08:	f7ff fbce 	bl	a1a8 <quorem>
    aa0c:	4631      	mov	r1, r6
    aa0e:	4683      	mov	fp, r0
    aa10:	4628      	mov	r0, r5
    aa12:	f7fe fef1 	bl	97f8 <__mcmp>
    aa16:	4642      	mov	r2, r8
    aa18:	4651      	mov	r1, sl
    aa1a:	4681      	mov	r9, r0
    aa1c:	4620      	mov	r0, r4
    aa1e:	f7fe ff0d 	bl	983c <__mdiff>
    aa22:	68c2      	ldr	r2, [r0, #12]
    aa24:	4601      	mov	r1, r0
    aa26:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    aa2a:	2a00      	cmp	r2, #0
    aa2c:	d142      	bne.n	aab4 <_dtoa_r+0x7e4>
    aa2e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    aa32:	4628      	mov	r0, r5
    aa34:	f7fe fee0 	bl	97f8 <__mcmp>
    aa38:	9906      	ldr	r1, [sp, #24]
    aa3a:	9002      	str	r0, [sp, #8]
    aa3c:	4620      	mov	r0, r4
    aa3e:	f7fe fc23 	bl	9288 <_Bfree>
    aa42:	9a02      	ldr	r2, [sp, #8]
    aa44:	9b07      	ldr	r3, [sp, #28]
    aa46:	b91a      	cbnz	r2, aa50 <_dtoa_r+0x780>
    aa48:	9909      	ldr	r1, [sp, #36]	; 0x24
    aa4a:	2900      	cmp	r1, #0
    aa4c:	f000 827e 	beq.w	af4c <_dtoa_r+0xc7c>
    aa50:	f1b9 0f00 	cmp.w	r9, #0
    aa54:	f2c0 8183 	blt.w	ad5e <_dtoa_r+0xa8e>
    aa58:	9901      	ldr	r1, [sp, #4]
    aa5a:	ea49 0901 	orr.w	r9, r9, r1
    aa5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    aa60:	ea51 0909 	orrs.w	r9, r1, r9
    aa64:	f000 817b 	beq.w	ad5e <_dtoa_r+0xa8e>
    aa68:	2a00      	cmp	r2, #0
    aa6a:	f300 81c6 	bgt.w	adfa <_dtoa_r+0xb2a>
    aa6e:	9a08      	ldr	r2, [sp, #32]
    aa70:	703b      	strb	r3, [r7, #0]
    aa72:	f107 0901 	add.w	r9, r7, #1
    aa76:	4297      	cmp	r7, r2
    aa78:	46cb      	mov	fp, r9
    aa7a:	f000 81c4 	beq.w	ae06 <_dtoa_r+0xb36>
    aa7e:	4629      	mov	r1, r5
    aa80:	2300      	movs	r3, #0
    aa82:	220a      	movs	r2, #10
    aa84:	4620      	mov	r0, r4
    aa86:	f7fe fc09 	bl	929c <__multadd>
    aa8a:	4546      	cmp	r6, r8
    aa8c:	4605      	mov	r5, r0
    aa8e:	4631      	mov	r1, r6
    aa90:	f04f 0300 	mov.w	r3, #0
    aa94:	f04f 020a 	mov.w	r2, #10
    aa98:	4620      	mov	r0, r4
    aa9a:	d012      	beq.n	aac2 <_dtoa_r+0x7f2>
    aa9c:	f7fe fbfe 	bl	929c <__multadd>
    aaa0:	4641      	mov	r1, r8
    aaa2:	4606      	mov	r6, r0
    aaa4:	2300      	movs	r3, #0
    aaa6:	220a      	movs	r2, #10
    aaa8:	4620      	mov	r0, r4
    aaaa:	f7fe fbf7 	bl	929c <__multadd>
    aaae:	464f      	mov	r7, r9
    aab0:	4680      	mov	r8, r0
    aab2:	e7a7      	b.n	aa04 <_dtoa_r+0x734>
    aab4:	4620      	mov	r0, r4
    aab6:	9302      	str	r3, [sp, #8]
    aab8:	f7fe fbe6 	bl	9288 <_Bfree>
    aabc:	9b02      	ldr	r3, [sp, #8]
    aabe:	2201      	movs	r2, #1
    aac0:	e7c6      	b.n	aa50 <_dtoa_r+0x780>
    aac2:	f7fe fbeb 	bl	929c <__multadd>
    aac6:	464f      	mov	r7, r9
    aac8:	4606      	mov	r6, r0
    aaca:	4680      	mov	r8, r0
    aacc:	e79a      	b.n	aa04 <_dtoa_r+0x734>
    aace:	9b01      	ldr	r3, [sp, #4]
    aad0:	2b02      	cmp	r3, #2
    aad2:	dc71      	bgt.n	abb8 <_dtoa_r+0x8e8>
    aad4:	9b07      	ldr	r3, [sp, #28]
    aad6:	2b00      	cmp	r3, #0
    aad8:	f47f af7b 	bne.w	a9d2 <_dtoa_r+0x702>
    aadc:	9b04      	ldr	r3, [sp, #16]
    aade:	4651      	mov	r1, sl
    aae0:	3301      	adds	r3, #1
    aae2:	4628      	mov	r0, r5
    aae4:	9304      	str	r3, [sp, #16]
    aae6:	f7ff fb5f 	bl	a1a8 <quorem>
    aaea:	f8dd b000 	ldr.w	fp, [sp]
    aaee:	f100 0330 	add.w	r3, r0, #48	; 0x30
    aaf2:	f80b 3b01 	strb.w	r3, [fp], #1
    aaf6:	2700      	movs	r7, #0
    aaf8:	e6eb      	b.n	a8d2 <_dtoa_r+0x602>
    aafa:	4651      	mov	r1, sl
    aafc:	4628      	mov	r0, r5
    aafe:	f7fe fe7b 	bl	97f8 <__mcmp>
    ab02:	2800      	cmp	r0, #0
    ab04:	f6bf aeba 	bge.w	a87c <_dtoa_r+0x5ac>
    ab08:	4629      	mov	r1, r5
    ab0a:	2300      	movs	r3, #0
    ab0c:	220a      	movs	r2, #10
    ab0e:	4620      	mov	r0, r4
    ab10:	f7fe fbc4 	bl	929c <__multadd>
    ab14:	9b04      	ldr	r3, [sp, #16]
    ab16:	1e5f      	subs	r7, r3, #1
    ab18:	9b07      	ldr	r3, [sp, #28]
    ab1a:	4605      	mov	r5, r0
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	f47f af4b 	bne.w	a9b8 <_dtoa_r+0x6e8>
    ab22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ab24:	2b00      	cmp	r3, #0
    ab26:	f340 8218 	ble.w	af5a <_dtoa_r+0xc8a>
    ab2a:	4699      	mov	r9, r3
    ab2c:	e6b1      	b.n	a892 <_dtoa_r+0x5c2>
    ab2e:	4bbc      	ldr	r3, [pc, #752]	; (ae20 <_dtoa_r+0xb50>)
    ab30:	9300      	str	r3, [sp, #0]
    ab32:	3303      	adds	r3, #3
    ab34:	e4a4      	b.n	a480 <_dtoa_r+0x1b0>
    ab36:	201c      	movs	r0, #28
    ab38:	e712      	b.n	a960 <_dtoa_r+0x690>
    ab3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ab3e:	2800      	cmp	r0, #0
    ab40:	f47f ae74 	bne.w	a82c <_dtoa_r+0x55c>
    ab44:	f3c1 0213 	ubfx	r2, r1, #0, #20
    ab48:	2a00      	cmp	r2, #0
    ab4a:	f000 80f4 	beq.w	ad36 <_dtoa_r+0xa66>
    ab4e:	9b02      	ldr	r3, [sp, #8]
    ab50:	9308      	str	r3, [sp, #32]
    ab52:	e66d      	b.n	a830 <_dtoa_r+0x560>
    ab54:	2301      	movs	r3, #1
    ab56:	9307      	str	r3, [sp, #28]
    ab58:	9b04      	ldr	r3, [sp, #16]
    ab5a:	445b      	add	r3, fp
    ab5c:	f103 0901 	add.w	r9, r3, #1
    ab60:	f1b9 0f01 	cmp.w	r9, #1
    ab64:	46cc      	mov	ip, r9
    ab66:	930b      	str	r3, [sp, #44]	; 0x2c
    ab68:	bfb8      	it	lt
    ab6a:	f04f 0c01 	movlt.w	ip, #1
    ab6e:	2100      	movs	r1, #0
    ab70:	f1bc 0f17 	cmp.w	ip, #23
    ab74:	63e1      	str	r1, [r4, #60]	; 0x3c
    ab76:	f77f acbc 	ble.w	a4f2 <_dtoa_r+0x222>
    ab7a:	2001      	movs	r0, #1
    ab7c:	2204      	movs	r2, #4
    ab7e:	0052      	lsls	r2, r2, #1
    ab80:	f102 0314 	add.w	r3, r2, #20
    ab84:	4563      	cmp	r3, ip
    ab86:	4601      	mov	r1, r0
    ab88:	f100 0001 	add.w	r0, r0, #1
    ab8c:	d9f7      	bls.n	ab7e <_dtoa_r+0x8ae>
    ab8e:	63e1      	str	r1, [r4, #60]	; 0x3c
    ab90:	e4af      	b.n	a4f2 <_dtoa_r+0x222>
    ab92:	2301      	movs	r3, #1
    ab94:	9307      	str	r3, [sp, #28]
    ab96:	f1bb 0f00 	cmp.w	fp, #0
    ab9a:	dd52      	ble.n	ac42 <_dtoa_r+0x972>
    ab9c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    aba0:	46d9      	mov	r9, fp
    aba2:	46dc      	mov	ip, fp
    aba4:	e7e3      	b.n	ab6e <_dtoa_r+0x89e>
    aba6:	2300      	movs	r3, #0
    aba8:	9307      	str	r3, [sp, #28]
    abaa:	e7d5      	b.n	ab58 <_dtoa_r+0x888>
    abac:	2300      	movs	r3, #0
    abae:	9307      	str	r3, [sp, #28]
    abb0:	e7f1      	b.n	ab96 <_dtoa_r+0x8c6>
    abb2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    abb6:	9704      	str	r7, [sp, #16]
    abb8:	f1b9 0f00 	cmp.w	r9, #0
    abbc:	f47f ada1 	bne.w	a702 <_dtoa_r+0x432>
    abc0:	4651      	mov	r1, sl
    abc2:	464b      	mov	r3, r9
    abc4:	2205      	movs	r2, #5
    abc6:	4620      	mov	r0, r4
    abc8:	f7fe fb68 	bl	929c <__multadd>
    abcc:	4601      	mov	r1, r0
    abce:	4682      	mov	sl, r0
    abd0:	4628      	mov	r0, r5
    abd2:	f7fe fe11 	bl	97f8 <__mcmp>
    abd6:	2800      	cmp	r0, #0
    abd8:	f77f ad93 	ble.w	a702 <_dtoa_r+0x432>
    abdc:	9b04      	ldr	r3, [sp, #16]
    abde:	f103 0b01 	add.w	fp, r3, #1
    abe2:	9b00      	ldr	r3, [sp, #0]
    abe4:	2231      	movs	r2, #49	; 0x31
    abe6:	4698      	mov	r8, r3
    abe8:	f803 2b01 	strb.w	r2, [r3], #1
    abec:	9300      	str	r3, [sp, #0]
    abee:	4651      	mov	r1, sl
    abf0:	4620      	mov	r0, r4
    abf2:	f7fe fb49 	bl	9288 <_Bfree>
    abf6:	f10b 0301 	add.w	r3, fp, #1
    abfa:	f8dd 9000 	ldr.w	r9, [sp]
    abfe:	9304      	str	r3, [sp, #16]
    ac00:	f8cd 8000 	str.w	r8, [sp]
    ac04:	2e00      	cmp	r6, #0
    ac06:	f47f ae8f 	bne.w	a928 <_dtoa_r+0x658>
    ac0a:	e691      	b.n	a930 <_dtoa_r+0x660>
    ac0c:	eba3 0a0a 	sub.w	sl, r3, sl
    ac10:	e5c5      	b.n	a79e <_dtoa_r+0x4ce>
    ac12:	4631      	mov	r1, r6
    ac14:	4652      	mov	r2, sl
    ac16:	4620      	mov	r0, r4
    ac18:	f7fe fd16 	bl	9648 <__pow5mult>
    ac1c:	462a      	mov	r2, r5
    ac1e:	4601      	mov	r1, r0
    ac20:	4606      	mov	r6, r0
    ac22:	4620      	mov	r0, r4
    ac24:	f7fe fc62 	bl	94ec <__multiply>
    ac28:	4629      	mov	r1, r5
    ac2a:	4605      	mov	r5, r0
    ac2c:	4620      	mov	r0, r4
    ac2e:	f7fe fb2b 	bl	9288 <_Bfree>
    ac32:	e5ea      	b.n	a80a <_dtoa_r+0x53a>
    ac34:	2002      	movs	r0, #2
    ac36:	eeb0 5b48 	vmov.f64	d5, d8
    ac3a:	e481      	b.n	a540 <_dtoa_r+0x270>
    ac3c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    ac40:	e68e      	b.n	a960 <_dtoa_r+0x690>
    ac42:	f04f 0b01 	mov.w	fp, #1
    ac46:	46d9      	mov	r9, fp
    ac48:	e44f      	b.n	a4ea <_dtoa_r+0x21a>
    ac4a:	d103      	bne.n	ac54 <_dtoa_r+0x984>
    ac4c:	9b01      	ldr	r3, [sp, #4]
    ac4e:	07db      	lsls	r3, r3, #31
    ac50:	f53f ae4c 	bmi.w	a8ec <_dtoa_r+0x61c>
    ac54:	46d9      	mov	r9, fp
    ac56:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    ac5a:	2b30      	cmp	r3, #48	; 0x30
    ac5c:	d0fa      	beq.n	ac54 <_dtoa_r+0x984>
    ac5e:	e657      	b.n	a910 <_dtoa_r+0x640>
    ac60:	9b04      	ldr	r3, [sp, #16]
    ac62:	9a00      	ldr	r2, [sp, #0]
    ac64:	3301      	adds	r3, #1
    ac66:	9304      	str	r3, [sp, #16]
    ac68:	2331      	movs	r3, #49	; 0x31
    ac6a:	7013      	strb	r3, [r2, #0]
    ac6c:	e650      	b.n	a910 <_dtoa_r+0x640>
    ac6e:	f1ba 0f00 	cmp.w	sl, #0
    ac72:	f000 8123 	beq.w	aebc <_dtoa_r+0xbec>
    ac76:	f202 4233 	addw	r2, r2, #1075	; 0x433
    ac7a:	9b06      	ldr	r3, [sp, #24]
    ac7c:	9309      	str	r3, [sp, #36]	; 0x24
    ac7e:	4413      	add	r3, r2
    ac80:	f8dd a020 	ldr.w	sl, [sp, #32]
    ac84:	9306      	str	r3, [sp, #24]
    ac86:	4490      	add	r8, r2
    ac88:	e592      	b.n	a7b0 <_dtoa_r+0x4e0>
    ac8a:	ee07 0a90 	vmov	s15, r0
    ac8e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    ac92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    ac96:	eea6 5b07 	vfma.f64	d5, d6, d7
    ac9a:	ee15 2a90 	vmov	r2, s11
    ac9e:	ec51 0b15 	vmov	r0, r1, d5
    aca2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    aca6:	ec41 0b15 	vmov	d5, r0, r1
    acaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    acae:	ee36 7b47 	vsub.f64	d7, d6, d7
    acb2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acba:	f300 8137 	bgt.w	af2c <_dtoa_r+0xc5c>
    acbe:	eeb1 5b45 	vneg.f64	d5, d5
    acc2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    acc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    acca:	f57f acfb 	bpl.w	a6c4 <_dtoa_r+0x3f4>
    acce:	f04f 0a00 	mov.w	sl, #0
    acd2:	4656      	mov	r6, sl
    acd4:	e515      	b.n	a702 <_dtoa_r+0x432>
    acd6:	f000 80f5 	beq.w	aec4 <_dtoa_r+0xbf4>
    acda:	9b04      	ldr	r3, [sp, #16]
    acdc:	4951      	ldr	r1, [pc, #324]	; (ae24 <_dtoa_r+0xb54>)
    acde:	425a      	negs	r2, r3
    ace0:	f002 000f 	and.w	r0, r2, #15
    ace4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    ace8:	ed91 6b00 	vldr	d6, [r1]
    acec:	1112      	asrs	r2, r2, #4
    acee:	ee28 6b06 	vmul.f64	d6, d8, d6
    acf2:	f000 8142 	beq.w	af7a <_dtoa_r+0xcaa>
    acf6:	eeb0 7b46 	vmov.f64	d7, d6
    acfa:	494b      	ldr	r1, [pc, #300]	; (ae28 <_dtoa_r+0xb58>)
    acfc:	2600      	movs	r6, #0
    acfe:	2002      	movs	r0, #2
    ad00:	07d3      	lsls	r3, r2, #31
    ad02:	d505      	bpl.n	ad10 <_dtoa_r+0xa40>
    ad04:	ed91 5b00 	vldr	d5, [r1]
    ad08:	3001      	adds	r0, #1
    ad0a:	2601      	movs	r6, #1
    ad0c:	ee27 7b05 	vmul.f64	d7, d7, d5
    ad10:	1052      	asrs	r2, r2, #1
    ad12:	f101 0108 	add.w	r1, r1, #8
    ad16:	d1f3      	bne.n	ad00 <_dtoa_r+0xa30>
    ad18:	2e00      	cmp	r6, #0
    ad1a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    ad1e:	e41e      	b.n	a55e <_dtoa_r+0x28e>
    ad20:	9b02      	ldr	r3, [sp, #8]
    ad22:	2b00      	cmp	r3, #0
    ad24:	f47f ae37 	bne.w	a996 <_dtoa_r+0x6c6>
    ad28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ad2c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    ad30:	2a00      	cmp	r2, #0
    ad32:	f040 8137 	bne.w	afa4 <_dtoa_r+0xcd4>
    ad36:	4a3d      	ldr	r2, [pc, #244]	; (ae2c <_dtoa_r+0xb5c>)
    ad38:	400a      	ands	r2, r1
    ad3a:	2a00      	cmp	r2, #0
    ad3c:	f000 80fa 	beq.w	af34 <_dtoa_r+0xc64>
    ad40:	9b06      	ldr	r3, [sp, #24]
    ad42:	3301      	adds	r3, #1
    ad44:	9306      	str	r3, [sp, #24]
    ad46:	2301      	movs	r3, #1
    ad48:	f108 0801 	add.w	r8, r8, #1
    ad4c:	9308      	str	r3, [sp, #32]
    ad4e:	e56f      	b.n	a830 <_dtoa_r+0x560>
    ad50:	4629      	mov	r1, r5
    ad52:	9a08      	ldr	r2, [sp, #32]
    ad54:	4620      	mov	r0, r4
    ad56:	f7fe fc77 	bl	9648 <__pow5mult>
    ad5a:	4605      	mov	r5, r0
    ad5c:	e55a      	b.n	a814 <_dtoa_r+0x544>
    ad5e:	2a00      	cmp	r2, #0
    ad60:	dd12      	ble.n	ad88 <_dtoa_r+0xab8>
    ad62:	4629      	mov	r1, r5
    ad64:	2201      	movs	r2, #1
    ad66:	4620      	mov	r0, r4
    ad68:	9301      	str	r3, [sp, #4]
    ad6a:	f7fe fccd 	bl	9708 <__lshift>
    ad6e:	4651      	mov	r1, sl
    ad70:	4605      	mov	r5, r0
    ad72:	f7fe fd41 	bl	97f8 <__mcmp>
    ad76:	2800      	cmp	r0, #0
    ad78:	9b01      	ldr	r3, [sp, #4]
    ad7a:	f340 80e1 	ble.w	af40 <_dtoa_r+0xc70>
    ad7e:	2b39      	cmp	r3, #57	; 0x39
    ad80:	f000 80ca 	beq.w	af18 <_dtoa_r+0xc48>
    ad84:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    ad88:	46b9      	mov	r9, r7
    ad8a:	f809 3b01 	strb.w	r3, [r9], #1
    ad8e:	9b04      	ldr	r3, [sp, #16]
    ad90:	3301      	adds	r3, #1
    ad92:	4637      	mov	r7, r6
    ad94:	9304      	str	r3, [sp, #16]
    ad96:	4646      	mov	r6, r8
    ad98:	e5ba      	b.n	a910 <_dtoa_r+0x640>
    ad9a:	ee38 8b08 	vadd.f64	d8, d8, d8
    ad9e:	eeb4 8bc6 	vcmpe.f64	d8, d6
    ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ada6:	dc0a      	bgt.n	adbe <_dtoa_r+0xaee>
    ada8:	eeb4 8b46 	vcmp.f64	d8, d6
    adac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adb0:	f47f acdc 	bne.w	a76c <_dtoa_r+0x49c>
    adb4:	ee17 3a10 	vmov	r3, s14
    adb8:	07d8      	lsls	r0, r3, #31
    adba:	f57f acd7 	bpl.w	a76c <_dtoa_r+0x49c>
    adbe:	9a00      	ldr	r2, [sp, #0]
    adc0:	e454      	b.n	a66c <_dtoa_r+0x39c>
    adc2:	6871      	ldr	r1, [r6, #4]
    adc4:	4620      	mov	r0, r4
    adc6:	f7fe fa39 	bl	923c <_Balloc>
    adca:	4607      	mov	r7, r0
    adcc:	2800      	cmp	r0, #0
    adce:	f000 80de 	beq.w	af8e <_dtoa_r+0xcbe>
    add2:	6933      	ldr	r3, [r6, #16]
    add4:	3302      	adds	r3, #2
    add6:	009a      	lsls	r2, r3, #2
    add8:	f106 010c 	add.w	r1, r6, #12
    addc:	300c      	adds	r0, #12
    adde:	f7f9 f96b 	bl	40b8 <memcpy>
    ade2:	4639      	mov	r1, r7
    ade4:	2201      	movs	r2, #1
    ade6:	4620      	mov	r0, r4
    ade8:	f7fe fc8e 	bl	9708 <__lshift>
    adec:	4680      	mov	r8, r0
    adee:	e5fe      	b.n	a9ee <_dtoa_r+0x71e>
    adf0:	9b06      	ldr	r3, [sp, #24]
    adf2:	eba3 0309 	sub.w	r3, r3, r9
    adf6:	9309      	str	r3, [sp, #36]	; 0x24
    adf8:	e4da      	b.n	a7b0 <_dtoa_r+0x4e0>
    adfa:	2b39      	cmp	r3, #57	; 0x39
    adfc:	f000 808c 	beq.w	af18 <_dtoa_r+0xc48>
    ae00:	46b9      	mov	r9, r7
    ae02:	3301      	adds	r3, #1
    ae04:	e7c1      	b.n	ad8a <_dtoa_r+0xaba>
    ae06:	9a04      	ldr	r2, [sp, #16]
    ae08:	3201      	adds	r2, #1
    ae0a:	4637      	mov	r7, r6
    ae0c:	9204      	str	r2, [sp, #16]
    ae0e:	4646      	mov	r6, r8
    ae10:	e55f      	b.n	a8d2 <_dtoa_r+0x602>
    ae12:	4629      	mov	r1, r5
    ae14:	4620      	mov	r0, r4
    ae16:	f7fe fc17 	bl	9648 <__pow5mult>
    ae1a:	4605      	mov	r5, r0
    ae1c:	e4fa      	b.n	a814 <_dtoa_r+0x544>
    ae1e:	bf00      	nop
    ae20:	20000bf8 	.word	0x20000bf8
    ae24:	200002a8 	.word	0x200002a8
    ae28:	20000280 	.word	0x20000280
    ae2c:	7ff00000 	.word	0x7ff00000
    ae30:	4b5e      	ldr	r3, [pc, #376]	; (afac <_dtoa_r+0xcdc>)
    ae32:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    ae36:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    ae3a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    ae3e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    ae42:	ee36 7b47 	vsub.f64	d7, d6, d7
    ae46:	ec41 0b16 	vmov	d6, r0, r1
    ae4a:	ee15 1a90 	vmov	r1, s11
    ae4e:	ee23 3b06 	vmul.f64	d3, d3, d6
    ae52:	9800      	ldr	r0, [sp, #0]
    ae54:	3130      	adds	r1, #48	; 0x30
    ae56:	2a01      	cmp	r2, #1
    ae58:	f800 1b01 	strb.w	r1, [r0], #1
    ae5c:	f000 8083 	beq.w	af66 <_dtoa_r+0xc96>
    ae60:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    ae64:	9b00      	ldr	r3, [sp, #0]
    ae66:	1899      	adds	r1, r3, r2
    ae68:	ee27 7b04 	vmul.f64	d7, d7, d4
    ae6c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    ae70:	ee16 3a90 	vmov	r3, s13
    ae74:	3330      	adds	r3, #48	; 0x30
    ae76:	f800 3b01 	strb.w	r3, [r0], #1
    ae7a:	4281      	cmp	r1, r0
    ae7c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    ae80:	ee37 7b45 	vsub.f64	d7, d7, d5
    ae84:	d1f0      	bne.n	ae68 <_dtoa_r+0xb98>
    ae86:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ae8a:	ee33 5b06 	vadd.f64	d5, d3, d6
    ae8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ae92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ae96:	f53f abe3 	bmi.w	a660 <_dtoa_r+0x390>
    ae9a:	ee36 6b43 	vsub.f64	d6, d6, d3
    ae9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
    aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    aea6:	f77f ac0d 	ble.w	a6c4 <_dtoa_r+0x3f4>
    aeaa:	4689      	mov	r9, r1
    aeac:	3901      	subs	r1, #1
    aeae:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    aeb2:	2b30      	cmp	r3, #48	; 0x30
    aeb4:	d0f9      	beq.n	aeaa <_dtoa_r+0xbda>
    aeb6:	1c73      	adds	r3, r6, #1
    aeb8:	9304      	str	r3, [sp, #16]
    aeba:	e539      	b.n	a930 <_dtoa_r+0x660>
    aebc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    aebe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    aec2:	e6da      	b.n	ac7a <_dtoa_r+0x9aa>
    aec4:	2002      	movs	r0, #2
    aec6:	eeb0 6b48 	vmov.f64	d6, d8
    aeca:	f7ff bb48 	b.w	a55e <_dtoa_r+0x28e>
    aece:	f1b9 0f00 	cmp.w	r9, #0
    aed2:	f43f aeda 	beq.w	ac8a <_dtoa_r+0x9ba>
    aed6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aed8:	2a00      	cmp	r2, #0
    aeda:	f77f abf3 	ble.w	a6c4 <_dtoa_r+0x3f4>
    aede:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    aee2:	ee26 6b04 	vmul.f64	d6, d6, d4
    aee6:	3001      	adds	r0, #1
    aee8:	ee07 0a90 	vmov	s15, r0
    aeec:	9b04      	ldr	r3, [sp, #16]
    aeee:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    aef2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    aef6:	eea6 7b05 	vfma.f64	d7, d6, d5
    aefa:	ee17 ca90 	vmov	ip, s15
    aefe:	ec51 0b17 	vmov	r0, r1, d7
    af02:	1e5e      	subs	r6, r3, #1
    af04:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    af08:	f7ff bb47 	b.w	a59a <_dtoa_r+0x2ca>
    af0c:	9b04      	ldr	r3, [sp, #16]
    af0e:	3301      	adds	r3, #1
    af10:	9304      	str	r3, [sp, #16]
    af12:	2331      	movs	r3, #49	; 0x31
    af14:	f7ff bbb1 	b.w	a67a <_dtoa_r+0x3aa>
    af18:	9b04      	ldr	r3, [sp, #16]
    af1a:	46bb      	mov	fp, r7
    af1c:	3301      	adds	r3, #1
    af1e:	9304      	str	r3, [sp, #16]
    af20:	2339      	movs	r3, #57	; 0x39
    af22:	4637      	mov	r7, r6
    af24:	f80b 3b01 	strb.w	r3, [fp], #1
    af28:	4646      	mov	r6, r8
    af2a:	e4e1      	b.n	a8f0 <_dtoa_r+0x620>
    af2c:	f04f 0a00 	mov.w	sl, #0
    af30:	4656      	mov	r6, sl
    af32:	e653      	b.n	abdc <_dtoa_r+0x90c>
    af34:	9208      	str	r2, [sp, #32]
    af36:	e47b      	b.n	a830 <_dtoa_r+0x560>
    af38:	1c73      	adds	r3, r6, #1
    af3a:	9304      	str	r3, [sp, #16]
    af3c:	4689      	mov	r9, r1
    af3e:	e4f7      	b.n	a930 <_dtoa_r+0x660>
    af40:	f47f af22 	bne.w	ad88 <_dtoa_r+0xab8>
    af44:	07da      	lsls	r2, r3, #31
    af46:	f57f af1f 	bpl.w	ad88 <_dtoa_r+0xab8>
    af4a:	e718      	b.n	ad7e <_dtoa_r+0xaae>
    af4c:	2b39      	cmp	r3, #57	; 0x39
    af4e:	d0e3      	beq.n	af18 <_dtoa_r+0xc48>
    af50:	f1b9 0f00 	cmp.w	r9, #0
    af54:	f73f af16 	bgt.w	ad84 <_dtoa_r+0xab4>
    af58:	e716      	b.n	ad88 <_dtoa_r+0xab8>
    af5a:	9b01      	ldr	r3, [sp, #4]
    af5c:	2b02      	cmp	r3, #2
    af5e:	f73f ae28 	bgt.w	abb2 <_dtoa_r+0x8e2>
    af62:	9704      	str	r7, [sp, #16]
    af64:	e5ba      	b.n	aadc <_dtoa_r+0x80c>
    af66:	4601      	mov	r1, r0
    af68:	e78d      	b.n	ae86 <_dtoa_r+0xbb6>
    af6a:	9b01      	ldr	r3, [sp, #4]
    af6c:	2b02      	cmp	r3, #2
    af6e:	f73f ae20 	bgt.w	abb2 <_dtoa_r+0x8e2>
    af72:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    af76:	9704      	str	r7, [sp, #16]
    af78:	e52b      	b.n	a9d2 <_dtoa_r+0x702>
    af7a:	2002      	movs	r0, #2
    af7c:	f7ff baef 	b.w	a55e <_dtoa_r+0x28e>
    af80:	4b0b      	ldr	r3, [pc, #44]	; (afb0 <_dtoa_r+0xce0>)
    af82:	480c      	ldr	r0, [pc, #48]	; (afb4 <_dtoa_r+0xce4>)
    af84:	2200      	movs	r2, #0
    af86:	f240 11af 	movw	r1, #431	; 0x1af
    af8a:	f7ff f8b1 	bl	a0f0 <__assert_func>
    af8e:	4b08      	ldr	r3, [pc, #32]	; (afb0 <_dtoa_r+0xce0>)
    af90:	4808      	ldr	r0, [pc, #32]	; (afb4 <_dtoa_r+0xce4>)
    af92:	463a      	mov	r2, r7
    af94:	f240 21ef 	movw	r1, #751	; 0x2ef
    af98:	f7ff f8aa 	bl	a0f0 <__assert_func>
    af9c:	4b06      	ldr	r3, [pc, #24]	; (afb8 <_dtoa_r+0xce8>)
    af9e:	9300      	str	r3, [sp, #0]
    afa0:	f7ff b9d2 	b.w	a348 <_dtoa_r+0x78>
    afa4:	9b02      	ldr	r3, [sp, #8]
    afa6:	9308      	str	r3, [sp, #32]
    afa8:	e4f7      	b.n	a99a <_dtoa_r+0x6ca>
    afaa:	bf00      	nop
    afac:	200002a8 	.word	0x200002a8
    afb0:	200008ec 	.word	0x200008ec
    afb4:	20000bfc 	.word	0x20000bfc
    afb8:	20000bec 	.word	0x20000bec

0000afbc <_wcrtomb_r>:
    afbc:	b570      	push	{r4, r5, r6, lr}
    afbe:	4605      	mov	r5, r0
    afc0:	b084      	sub	sp, #16
    afc2:	b15b      	cbz	r3, afdc <_wcrtomb_r+0x20>
    afc4:	461c      	mov	r4, r3
    afc6:	b169      	cbz	r1, afe4 <_wcrtomb_r+0x28>
    afc8:	4b0e      	ldr	r3, [pc, #56]	; (b004 <_wcrtomb_r+0x48>)
    afca:	4628      	mov	r0, r5
    afcc:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    afd0:	4623      	mov	r3, r4
    afd2:	47b0      	blx	r6
    afd4:	1c43      	adds	r3, r0, #1
    afd6:	d00f      	beq.n	aff8 <_wcrtomb_r+0x3c>
    afd8:	b004      	add	sp, #16
    afda:	bd70      	pop	{r4, r5, r6, pc}
    afdc:	f500 7482 	add.w	r4, r0, #260	; 0x104
    afe0:	2900      	cmp	r1, #0
    afe2:	d1f1      	bne.n	afc8 <_wcrtomb_r+0xc>
    afe4:	4a07      	ldr	r2, [pc, #28]	; (b004 <_wcrtomb_r+0x48>)
    afe6:	4623      	mov	r3, r4
    afe8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    afec:	4628      	mov	r0, r5
    afee:	460a      	mov	r2, r1
    aff0:	a901      	add	r1, sp, #4
    aff2:	47b0      	blx	r6
    aff4:	1c43      	adds	r3, r0, #1
    aff6:	d1ef      	bne.n	afd8 <_wcrtomb_r+0x1c>
    aff8:	2200      	movs	r2, #0
    affa:	238a      	movs	r3, #138	; 0x8a
    affc:	6022      	str	r2, [r4, #0]
    affe:	602b      	str	r3, [r5, #0]
    b000:	b004      	add	sp, #16
    b002:	bd70      	pop	{r4, r5, r6, pc}
    b004:	200015e0 	.word	0x200015e0

0000b008 <_wcsrtombs_r>:
    b008:	b510      	push	{r4, lr}
    b00a:	b082      	sub	sp, #8
    b00c:	9c04      	ldr	r4, [sp, #16]
    b00e:	e9cd 3400 	strd	r3, r4, [sp]
    b012:	f04f 33ff 	mov.w	r3, #4294967295
    b016:	f001 fb47 	bl	c6a8 <_wcsnrtombs_r>
    b01a:	b002      	add	sp, #8
    b01c:	bd10      	pop	{r4, pc}
    b01e:	bf00      	nop

0000b020 <fiprintf>:
    b020:	b40e      	push	{r1, r2, r3}
    b022:	b510      	push	{r4, lr}
    b024:	b083      	sub	sp, #12
    b026:	ab05      	add	r3, sp, #20
    b028:	4c06      	ldr	r4, [pc, #24]	; (b044 <fiprintf+0x24>)
    b02a:	f853 2b04 	ldr.w	r2, [r3], #4
    b02e:	9301      	str	r3, [sp, #4]
    b030:	4601      	mov	r1, r0
    b032:	6820      	ldr	r0, [r4, #0]
    b034:	f000 f844 	bl	b0c0 <_vfiprintf_r>
    b038:	b003      	add	sp, #12
    b03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b03e:	b003      	add	sp, #12
    b040:	4770      	bx	lr
    b042:	bf00      	nop
    b044:	20001b68 	.word	0x20001b68

0000b048 <__sprint_r.part.0>:
    b048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b04c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b04e:	049c      	lsls	r4, r3, #18
    b050:	4690      	mov	r8, r2
    b052:	d52d      	bpl.n	b0b0 <__sprint_r.part.0+0x68>
    b054:	6893      	ldr	r3, [r2, #8]
    b056:	6812      	ldr	r2, [r2, #0]
    b058:	b343      	cbz	r3, b0ac <__sprint_r.part.0+0x64>
    b05a:	468b      	mov	fp, r1
    b05c:	4606      	mov	r6, r0
    b05e:	f102 0908 	add.w	r9, r2, #8
    b062:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    b066:	ea5f 079a 	movs.w	r7, sl, lsr #2
    b06a:	d015      	beq.n	b098 <__sprint_r.part.0+0x50>
    b06c:	3d04      	subs	r5, #4
    b06e:	2400      	movs	r4, #0
    b070:	e001      	b.n	b076 <__sprint_r.part.0+0x2e>
    b072:	42a7      	cmp	r7, r4
    b074:	d00e      	beq.n	b094 <__sprint_r.part.0+0x4c>
    b076:	f855 1f04 	ldr.w	r1, [r5, #4]!
    b07a:	465a      	mov	r2, fp
    b07c:	4630      	mov	r0, r6
    b07e:	f001 fa5b 	bl	c538 <_fputwc_r>
    b082:	1c43      	adds	r3, r0, #1
    b084:	f104 0401 	add.w	r4, r4, #1
    b088:	d1f3      	bne.n	b072 <__sprint_r.part.0+0x2a>
    b08a:	2300      	movs	r3, #0
    b08c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b094:	f8d8 3008 	ldr.w	r3, [r8, #8]
    b098:	f02a 0a03 	bic.w	sl, sl, #3
    b09c:	eba3 030a 	sub.w	r3, r3, sl
    b0a0:	f8c8 3008 	str.w	r3, [r8, #8]
    b0a4:	f109 0908 	add.w	r9, r9, #8
    b0a8:	2b00      	cmp	r3, #0
    b0aa:	d1da      	bne.n	b062 <__sprint_r.part.0+0x1a>
    b0ac:	2000      	movs	r0, #0
    b0ae:	e7ec      	b.n	b08a <__sprint_r.part.0+0x42>
    b0b0:	f001 f80c 	bl	c0cc <__sfvwrite_r>
    b0b4:	2300      	movs	r3, #0
    b0b6:	e9c8 3301 	strd	r3, r3, [r8, #4]
    b0ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0be:	bf00      	nop

0000b0c0 <_vfiprintf_r>:
    b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0c4:	ed2d 8b02 	vpush	{d8}
    b0c8:	b0c5      	sub	sp, #276	; 0x114
    b0ca:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    b0ce:	4683      	mov	fp, r0
    b0d0:	ee08 1a10 	vmov	s16, r1
    b0d4:	4616      	mov	r6, r2
    b0d6:	2100      	movs	r1, #0
    b0d8:	2208      	movs	r2, #8
    b0da:	4650      	mov	r0, sl
    b0dc:	461c      	mov	r4, r3
    b0de:	9307      	str	r3, [sp, #28]
    b0e0:	f7fc fcb6 	bl	7a50 <memset>
    b0e4:	f1bb 0f00 	cmp.w	fp, #0
    b0e8:	d004      	beq.n	b0f4 <_vfiprintf_r+0x34>
    b0ea:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    b0ee:	2b00      	cmp	r3, #0
    b0f0:	f000 86a0 	beq.w	be34 <_vfiprintf_r+0xd74>
    b0f4:	ee18 2a10 	vmov	r2, s16
    b0f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    b0fa:	07db      	lsls	r3, r3, #31
    b0fc:	f140 8513 	bpl.w	bb26 <_vfiprintf_r+0xa66>
    b100:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b104:	b28a      	uxth	r2, r1
    b106:	0495      	lsls	r5, r2, #18
    b108:	d40b      	bmi.n	b122 <_vfiprintf_r+0x62>
    b10a:	ee18 3a10 	vmov	r3, s16
    b10e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    b112:	8199      	strh	r1, [r3, #12]
    b114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b116:	b28a      	uxth	r2, r1
    b118:	ee18 1a10 	vmov	r1, s16
    b11c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b120:	664b      	str	r3, [r1, #100]	; 0x64
    b122:	0710      	lsls	r0, r2, #28
    b124:	f140 8105 	bpl.w	b332 <_vfiprintf_r+0x272>
    b128:	ee18 3a10 	vmov	r3, s16
    b12c:	691b      	ldr	r3, [r3, #16]
    b12e:	2b00      	cmp	r3, #0
    b130:	f000 80ff 	beq.w	b332 <_vfiprintf_r+0x272>
    b134:	f002 031a 	and.w	r3, r2, #26
    b138:	2b0a      	cmp	r3, #10
    b13a:	f000 810a 	beq.w	b352 <_vfiprintf_r+0x292>
    b13e:	2300      	movs	r3, #0
    b140:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    b144:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    b148:	aa1b      	add	r2, sp, #108	; 0x6c
    b14a:	930c      	str	r3, [sp, #48]	; 0x30
    b14c:	9218      	str	r2, [sp, #96]	; 0x60
    b14e:	4691      	mov	r9, r2
    b150:	930b      	str	r3, [sp, #44]	; 0x2c
    b152:	9305      	str	r3, [sp, #20]
    b154:	46b0      	mov	r8, r6
    b156:	4644      	mov	r4, r8
    b158:	4ba8      	ldr	r3, [pc, #672]	; (b3fc <_vfiprintf_r+0x33c>)
    b15a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    b15e:	f7fc ffbb 	bl	80d8 <__locale_mb_cur_max>
    b162:	4622      	mov	r2, r4
    b164:	4603      	mov	r3, r0
    b166:	a912      	add	r1, sp, #72	; 0x48
    b168:	f8cd a000 	str.w	sl, [sp]
    b16c:	4658      	mov	r0, fp
    b16e:	47a8      	blx	r5
    b170:	2800      	cmp	r0, #0
    b172:	f000 8145 	beq.w	b400 <_vfiprintf_r+0x340>
    b176:	f2c0 8139 	blt.w	b3ec <_vfiprintf_r+0x32c>
    b17a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b17c:	2a25      	cmp	r2, #37	; 0x25
    b17e:	4603      	mov	r3, r0
    b180:	d001      	beq.n	b186 <_vfiprintf_r+0xc6>
    b182:	441c      	add	r4, r3
    b184:	e7e8      	b.n	b158 <_vfiprintf_r+0x98>
    b186:	ebb4 0608 	subs.w	r6, r4, r8
    b18a:	4605      	mov	r5, r0
    b18c:	f040 813c 	bne.w	b408 <_vfiprintf_r+0x348>
    b190:	2300      	movs	r3, #0
    b192:	7861      	ldrb	r1, [r4, #1]
    b194:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b198:	f104 0801 	add.w	r8, r4, #1
    b19c:	9306      	str	r3, [sp, #24]
    b19e:	f04f 37ff 	mov.w	r7, #4294967295
    b1a2:	461e      	mov	r6, r3
    b1a4:	242b      	movs	r4, #43	; 0x2b
    b1a6:	f108 0801 	add.w	r8, r8, #1
    b1aa:	f1a1 0320 	sub.w	r3, r1, #32
    b1ae:	2b5a      	cmp	r3, #90	; 0x5a
    b1b0:	f200 8178 	bhi.w	b4a4 <_vfiprintf_r+0x3e4>
    b1b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    b1b8:	017602b5 	.word	0x017602b5
    b1bc:	02b00176 	.word	0x02b00176
    b1c0:	01760176 	.word	0x01760176
    b1c4:	006a0176 	.word	0x006a0176
    b1c8:	01760176 	.word	0x01760176
    b1cc:	028d027d 	.word	0x028d027d
    b1d0:	02880176 	.word	0x02880176
    b1d4:	01760297 	.word	0x01760297
    b1d8:	005b0292 	.word	0x005b0292
    b1dc:	005b005b 	.word	0x005b005b
    b1e0:	005b005b 	.word	0x005b005b
    b1e4:	005b005b 	.word	0x005b005b
    b1e8:	005b005b 	.word	0x005b005b
    b1ec:	01760176 	.word	0x01760176
    b1f0:	01760176 	.word	0x01760176
    b1f4:	01760176 	.word	0x01760176
    b1f8:	01760176 	.word	0x01760176
    b1fc:	025c0176 	.word	0x025c0176
    b200:	01760084 	.word	0x01760084
    b204:	01760176 	.word	0x01760176
    b208:	01760176 	.word	0x01760176
    b20c:	01760176 	.word	0x01760176
    b210:	01760176 	.word	0x01760176
    b214:	00e80176 	.word	0x00e80176
    b218:	01760176 	.word	0x01760176
    b21c:	02330176 	.word	0x02330176
    b220:	02da0176 	.word	0x02da0176
    b224:	01760176 	.word	0x01760176
    b228:	0176058b 	.word	0x0176058b
    b22c:	01760176 	.word	0x01760176
    b230:	01760176 	.word	0x01760176
    b234:	01760176 	.word	0x01760176
    b238:	01760176 	.word	0x01760176
    b23c:	025c0176 	.word	0x025c0176
    b240:	01760086 	.word	0x01760086
    b244:	01760176 	.word	0x01760176
    b248:	008602cd 	.word	0x008602cd
    b24c:	0176007f 	.word	0x0176007f
    b250:	017602c0 	.word	0x017602c0
    b254:	00ea02fd 	.word	0x00ea02fd
    b258:	007f02ed 	.word	0x007f02ed
    b25c:	02330176 	.word	0x02330176
    b260:	0569007c 	.word	0x0569007c
    b264:	01760176 	.word	0x01760176
    b268:	0176056b 	.word	0x0176056b
    b26c:	007c      	.short	0x007c
    b26e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b272:	2200      	movs	r2, #0
    b274:	f818 1b01 	ldrb.w	r1, [r8], #1
    b278:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b27c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    b280:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b284:	2b09      	cmp	r3, #9
    b286:	d9f5      	bls.n	b274 <_vfiprintf_r+0x1b4>
    b288:	9206      	str	r2, [sp, #24]
    b28a:	e78e      	b.n	b1aa <_vfiprintf_r+0xea>
    b28c:	4658      	mov	r0, fp
    b28e:	f7fe fed7 	bl	a040 <_localeconv_r>
    b292:	6843      	ldr	r3, [r0, #4]
    b294:	930d      	str	r3, [sp, #52]	; 0x34
    b296:	4618      	mov	r0, r3
    b298:	f7fd f992 	bl	85c0 <strlen>
    b29c:	900e      	str	r0, [sp, #56]	; 0x38
    b29e:	4605      	mov	r5, r0
    b2a0:	4658      	mov	r0, fp
    b2a2:	f7fe fecd 	bl	a040 <_localeconv_r>
    b2a6:	6883      	ldr	r3, [r0, #8]
    b2a8:	930b      	str	r3, [sp, #44]	; 0x2c
    b2aa:	2d00      	cmp	r5, #0
    b2ac:	f040 84d6 	bne.w	bc5c <_vfiprintf_r+0xb9c>
    b2b0:	f898 1000 	ldrb.w	r1, [r8]
    b2b4:	e777      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b2b6:	f898 1000 	ldrb.w	r1, [r8]
    b2ba:	f046 0620 	orr.w	r6, r6, #32
    b2be:	e772      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b2c0:	f046 0610 	orr.w	r6, r6, #16
    b2c4:	06b4      	lsls	r4, r6, #26
    b2c6:	f140 818e 	bpl.w	b5e6 <_vfiprintf_r+0x526>
    b2ca:	9b07      	ldr	r3, [sp, #28]
    b2cc:	3307      	adds	r3, #7
    b2ce:	f023 0307 	bic.w	r3, r3, #7
    b2d2:	461a      	mov	r2, r3
    b2d4:	6859      	ldr	r1, [r3, #4]
    b2d6:	f852 3b08 	ldr.w	r3, [r2], #8
    b2da:	9207      	str	r2, [sp, #28]
    b2dc:	460a      	mov	r2, r1
    b2de:	2900      	cmp	r1, #0
    b2e0:	f2c0 8470 	blt.w	bbc4 <_vfiprintf_r+0xb04>
    b2e4:	1c79      	adds	r1, r7, #1
    b2e6:	f000 85a2 	beq.w	be2e <_vfiprintf_r+0xd6e>
    b2ea:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    b2ee:	9103      	str	r1, [sp, #12]
    b2f0:	ea53 0102 	orrs.w	r1, r3, r2
    b2f4:	f000 843f 	beq.w	bb76 <_vfiprintf_r+0xab6>
    b2f8:	2b0a      	cmp	r3, #10
    b2fa:	f172 0100 	sbcs.w	r1, r2, #0
    b2fe:	f080 8541 	bcs.w	bd84 <_vfiprintf_r+0xcc4>
    b302:	3330      	adds	r3, #48	; 0x30
    b304:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b308:	9e03      	ldr	r6, [sp, #12]
    b30a:	2301      	movs	r3, #1
    b30c:	9304      	str	r3, [sp, #16]
    b30e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b312:	9b04      	ldr	r3, [sp, #16]
    b314:	42bb      	cmp	r3, r7
    b316:	bfb8      	it	lt
    b318:	463b      	movlt	r3, r7
    b31a:	9303      	str	r3, [sp, #12]
    b31c:	2300      	movs	r3, #0
    b31e:	9308      	str	r3, [sp, #32]
    b320:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b324:	2b00      	cmp	r3, #0
    b326:	f000 80cb 	beq.w	b4c0 <_vfiprintf_r+0x400>
    b32a:	9b03      	ldr	r3, [sp, #12]
    b32c:	3301      	adds	r3, #1
    b32e:	9303      	str	r3, [sp, #12]
    b330:	e0c6      	b.n	b4c0 <_vfiprintf_r+0x400>
    b332:	ee18 1a10 	vmov	r1, s16
    b336:	4658      	mov	r0, fp
    b338:	ee18 5a10 	vmov	r5, s16
    b33c:	f001 f840 	bl	c3c0 <__swsetup_r>
    b340:	2800      	cmp	r0, #0
    b342:	f040 8652 	bne.w	bfea <_vfiprintf_r+0xf2a>
    b346:	89aa      	ldrh	r2, [r5, #12]
    b348:	f002 031a 	and.w	r3, r2, #26
    b34c:	2b0a      	cmp	r3, #10
    b34e:	f47f aef6 	bne.w	b13e <_vfiprintf_r+0x7e>
    b352:	ee18 1a10 	vmov	r1, s16
    b356:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    b35a:	2b00      	cmp	r3, #0
    b35c:	f6ff aeef 	blt.w	b13e <_vfiprintf_r+0x7e>
    b360:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b362:	07db      	lsls	r3, r3, #31
    b364:	d402      	bmi.n	b36c <_vfiprintf_r+0x2ac>
    b366:	0597      	lsls	r7, r2, #22
    b368:	f140 8612 	bpl.w	bf90 <_vfiprintf_r+0xed0>
    b36c:	ee18 1a10 	vmov	r1, s16
    b370:	4623      	mov	r3, r4
    b372:	4632      	mov	r2, r6
    b374:	4658      	mov	r0, fp
    b376:	f000 fe69 	bl	c04c <__sbprintf>
    b37a:	9005      	str	r0, [sp, #20]
    b37c:	9805      	ldr	r0, [sp, #20]
    b37e:	b045      	add	sp, #276	; 0x114
    b380:	ecbd 8b02 	vpop	{d8}
    b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b388:	f046 0610 	orr.w	r6, r6, #16
    b38c:	f016 0220 	ands.w	r2, r6, #32
    b390:	f000 8136 	beq.w	b600 <_vfiprintf_r+0x540>
    b394:	9b07      	ldr	r3, [sp, #28]
    b396:	3307      	adds	r3, #7
    b398:	f023 0307 	bic.w	r3, r3, #7
    b39c:	4619      	mov	r1, r3
    b39e:	685a      	ldr	r2, [r3, #4]
    b3a0:	f851 3b08 	ldr.w	r3, [r1], #8
    b3a4:	9107      	str	r1, [sp, #28]
    b3a6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b3aa:	9103      	str	r1, [sp, #12]
    b3ac:	2100      	movs	r1, #0
    b3ae:	2000      	movs	r0, #0
    b3b0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    b3b4:	1c78      	adds	r0, r7, #1
    b3b6:	f000 8210 	beq.w	b7da <_vfiprintf_r+0x71a>
    b3ba:	9803      	ldr	r0, [sp, #12]
    b3bc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    b3c0:	ea53 0002 	orrs.w	r0, r3, r2
    b3c4:	f040 8208 	bne.w	b7d8 <_vfiprintf_r+0x718>
    b3c8:	2f00      	cmp	r7, #0
    b3ca:	f040 8538 	bne.w	be3e <_vfiprintf_r+0xd7e>
    b3ce:	2900      	cmp	r1, #0
    b3d0:	f040 83d5 	bne.w	bb7e <_vfiprintf_r+0xabe>
    b3d4:	9b03      	ldr	r3, [sp, #12]
    b3d6:	f013 0301 	ands.w	r3, r3, #1
    b3da:	9304      	str	r3, [sp, #16]
    b3dc:	f000 8411 	beq.w	bc02 <_vfiprintf_r+0xb42>
    b3e0:	2330      	movs	r3, #48	; 0x30
    b3e2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    b3e6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    b3ea:	e792      	b.n	b312 <_vfiprintf_r+0x252>
    b3ec:	2208      	movs	r2, #8
    b3ee:	2100      	movs	r1, #0
    b3f0:	4650      	mov	r0, sl
    b3f2:	f7fc fb2d 	bl	7a50 <memset>
    b3f6:	2301      	movs	r3, #1
    b3f8:	441c      	add	r4, r3
    b3fa:	e6ad      	b.n	b158 <_vfiprintf_r+0x98>
    b3fc:	200015e0 	.word	0x200015e0
    b400:	ebb4 0608 	subs.w	r6, r4, r8
    b404:	4605      	mov	r5, r0
    b406:	d01b      	beq.n	b440 <_vfiprintf_r+0x380>
    b408:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b40a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    b40c:	3301      	adds	r3, #1
    b40e:	4432      	add	r2, r6
    b410:	2b07      	cmp	r3, #7
    b412:	e9c9 8600 	strd	r8, r6, [r9]
    b416:	921a      	str	r2, [sp, #104]	; 0x68
    b418:	9319      	str	r3, [sp, #100]	; 0x64
    b41a:	dd1c      	ble.n	b456 <_vfiprintf_r+0x396>
    b41c:	2a00      	cmp	r2, #0
    b41e:	f000 83a6 	beq.w	bb6e <_vfiprintf_r+0xaae>
    b422:	ee18 1a10 	vmov	r1, s16
    b426:	aa18      	add	r2, sp, #96	; 0x60
    b428:	4658      	mov	r0, fp
    b42a:	f7ff fe0d 	bl	b048 <__sprint_r.part.0>
    b42e:	bb20      	cbnz	r0, b47a <_vfiprintf_r+0x3ba>
    b430:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b434:	9b05      	ldr	r3, [sp, #20]
    b436:	4433      	add	r3, r6
    b438:	9305      	str	r3, [sp, #20]
    b43a:	2d00      	cmp	r5, #0
    b43c:	f47f aea8 	bne.w	b190 <_vfiprintf_r+0xd0>
    b440:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b442:	2b00      	cmp	r3, #0
    b444:	f040 85c1 	bne.w	bfca <_vfiprintf_r+0xf0a>
    b448:	ee18 3a10 	vmov	r3, s16
    b44c:	2200      	movs	r2, #0
    b44e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b452:	9219      	str	r2, [sp, #100]	; 0x64
    b454:	e015      	b.n	b482 <_vfiprintf_r+0x3c2>
    b456:	f109 0908 	add.w	r9, r9, #8
    b45a:	e7eb      	b.n	b434 <_vfiprintf_r+0x374>
    b45c:	ee18 1a10 	vmov	r1, s16
    b460:	aa18      	add	r2, sp, #96	; 0x60
    b462:	4658      	mov	r0, fp
    b464:	f7ff fdf0 	bl	b048 <__sprint_r.part.0>
    b468:	2800      	cmp	r0, #0
    b46a:	f000 80a6 	beq.w	b5ba <_vfiprintf_r+0x4fa>
    b46e:	9b08      	ldr	r3, [sp, #32]
    b470:	b11b      	cbz	r3, b47a <_vfiprintf_r+0x3ba>
    b472:	9908      	ldr	r1, [sp, #32]
    b474:	4658      	mov	r0, fp
    b476:	f7fd f9b5 	bl	87e4 <_free_r>
    b47a:	ee18 3a10 	vmov	r3, s16
    b47e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    b482:	ee18 2a10 	vmov	r2, s16
    b486:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b488:	f012 0f01 	tst.w	r2, #1
    b48c:	b29a      	uxth	r2, r3
    b48e:	f000 80a0 	beq.w	b5d2 <_vfiprintf_r+0x512>
    b492:	0650      	lsls	r0, r2, #25
    b494:	f100 85b2 	bmi.w	bffc <_vfiprintf_r+0xf3c>
    b498:	9805      	ldr	r0, [sp, #20]
    b49a:	b045      	add	sp, #276	; 0x114
    b49c:	ecbd 8b02 	vpop	{d8}
    b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b4a4:	2900      	cmp	r1, #0
    b4a6:	d0cb      	beq.n	b440 <_vfiprintf_r+0x380>
    b4a8:	2300      	movs	r3, #0
    b4aa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b4ae:	2301      	movs	r3, #1
    b4b0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    b4b4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    b4b8:	ac2b      	add	r4, sp, #172	; 0xac
    b4ba:	2300      	movs	r3, #0
    b4bc:	9308      	str	r3, [sp, #32]
    b4be:	461f      	mov	r7, r3
    b4c0:	f016 0302 	ands.w	r3, r6, #2
    b4c4:	9309      	str	r3, [sp, #36]	; 0x24
    b4c6:	d002      	beq.n	b4ce <_vfiprintf_r+0x40e>
    b4c8:	9b03      	ldr	r3, [sp, #12]
    b4ca:	3302      	adds	r3, #2
    b4cc:	9303      	str	r3, [sp, #12]
    b4ce:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    b4d2:	930a      	str	r3, [sp, #40]	; 0x28
    b4d4:	d105      	bne.n	b4e2 <_vfiprintf_r+0x422>
    b4d6:	9b06      	ldr	r3, [sp, #24]
    b4d8:	9a03      	ldr	r2, [sp, #12]
    b4da:	1a9d      	subs	r5, r3, r2
    b4dc:	2d00      	cmp	r5, #0
    b4de:	f300 827b 	bgt.w	b9d8 <_vfiprintf_r+0x918>
    b4e2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b4e6:	1c41      	adds	r1, r0, #1
    b4e8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b4ec:	b182      	cbz	r2, b510 <_vfiprintf_r+0x450>
    b4ee:	2201      	movs	r2, #1
    b4f0:	3301      	adds	r3, #1
    b4f2:	f8c9 2004 	str.w	r2, [r9, #4]
    b4f6:	2907      	cmp	r1, #7
    b4f8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    b4fc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b500:	f8c9 2000 	str.w	r2, [r9]
    b504:	f300 824a 	bgt.w	b99c <_vfiprintf_r+0x8dc>
    b508:	4608      	mov	r0, r1
    b50a:	f109 0908 	add.w	r9, r9, #8
    b50e:	3101      	adds	r1, #1
    b510:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b512:	b1e2      	cbz	r2, b54e <_vfiprintf_r+0x48e>
    b514:	aa11      	add	r2, sp, #68	; 0x44
    b516:	3302      	adds	r3, #2
    b518:	f8c9 2000 	str.w	r2, [r9]
    b51c:	2907      	cmp	r1, #7
    b51e:	f04f 0202 	mov.w	r2, #2
    b522:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b526:	f8c9 2004 	str.w	r2, [r9, #4]
    b52a:	f340 8250 	ble.w	b9ce <_vfiprintf_r+0x90e>
    b52e:	2b00      	cmp	r3, #0
    b530:	f000 8343 	beq.w	bbba <_vfiprintf_r+0xafa>
    b534:	ee18 1a10 	vmov	r1, s16
    b538:	aa18      	add	r2, sp, #96	; 0x60
    b53a:	4658      	mov	r0, fp
    b53c:	f7ff fd84 	bl	b048 <__sprint_r.part.0>
    b540:	2800      	cmp	r0, #0
    b542:	d194      	bne.n	b46e <_vfiprintf_r+0x3ae>
    b544:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b548:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b54c:	1c41      	adds	r1, r0, #1
    b54e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b550:	2a80      	cmp	r2, #128	; 0x80
    b552:	f000 8184 	beq.w	b85e <_vfiprintf_r+0x79e>
    b556:	9a04      	ldr	r2, [sp, #16]
    b558:	1abd      	subs	r5, r7, r2
    b55a:	2d00      	cmp	r5, #0
    b55c:	f300 81d7 	bgt.w	b90e <_vfiprintf_r+0x84e>
    b560:	9a04      	ldr	r2, [sp, #16]
    b562:	f8c9 4000 	str.w	r4, [r9]
    b566:	4413      	add	r3, r2
    b568:	2907      	cmp	r1, #7
    b56a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b56e:	f8c9 2004 	str.w	r2, [r9, #4]
    b572:	f340 816e 	ble.w	b852 <_vfiprintf_r+0x792>
    b576:	2b00      	cmp	r3, #0
    b578:	f000 8275 	beq.w	ba66 <_vfiprintf_r+0x9a6>
    b57c:	ee18 1a10 	vmov	r1, s16
    b580:	aa18      	add	r2, sp, #96	; 0x60
    b582:	4658      	mov	r0, fp
    b584:	f7ff fd60 	bl	b048 <__sprint_r.part.0>
    b588:	2800      	cmp	r0, #0
    b58a:	f47f af70 	bne.w	b46e <_vfiprintf_r+0x3ae>
    b58e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b590:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b594:	0775      	lsls	r5, r6, #29
    b596:	d505      	bpl.n	b5a4 <_vfiprintf_r+0x4e4>
    b598:	9a06      	ldr	r2, [sp, #24]
    b59a:	9903      	ldr	r1, [sp, #12]
    b59c:	1a54      	subs	r4, r2, r1
    b59e:	2c00      	cmp	r4, #0
    b5a0:	f300 826b 	bgt.w	ba7a <_vfiprintf_r+0x9ba>
    b5a4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    b5a8:	9803      	ldr	r0, [sp, #12]
    b5aa:	4281      	cmp	r1, r0
    b5ac:	bfac      	ite	ge
    b5ae:	1852      	addge	r2, r2, r1
    b5b0:	1812      	addlt	r2, r2, r0
    b5b2:	9205      	str	r2, [sp, #20]
    b5b4:	2b00      	cmp	r3, #0
    b5b6:	f47f af51 	bne.w	b45c <_vfiprintf_r+0x39c>
    b5ba:	9908      	ldr	r1, [sp, #32]
    b5bc:	2300      	movs	r3, #0
    b5be:	9319      	str	r3, [sp, #100]	; 0x64
    b5c0:	2900      	cmp	r1, #0
    b5c2:	f000 8149 	beq.w	b858 <_vfiprintf_r+0x798>
    b5c6:	4658      	mov	r0, fp
    b5c8:	f7fd f90c 	bl	87e4 <_free_r>
    b5cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b5d0:	e5c1      	b.n	b156 <_vfiprintf_r+0x96>
    b5d2:	059c      	lsls	r4, r3, #22
    b5d4:	f53f af5d 	bmi.w	b492 <_vfiprintf_r+0x3d2>
    b5d8:	ee18 4a10 	vmov	r4, s16
    b5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b5de:	f7fc fe17 	bl	8210 <__retarget_lock_release_recursive>
    b5e2:	89a2      	ldrh	r2, [r4, #12]
    b5e4:	e755      	b.n	b492 <_vfiprintf_r+0x3d2>
    b5e6:	06f0      	lsls	r0, r6, #27
    b5e8:	9a07      	ldr	r2, [sp, #28]
    b5ea:	f100 831f 	bmi.w	bc2c <_vfiprintf_r+0xb6c>
    b5ee:	0671      	lsls	r1, r6, #25
    b5f0:	f140 8319 	bpl.w	bc26 <_vfiprintf_r+0xb66>
    b5f4:	f932 3b04 	ldrsh.w	r3, [r2], #4
    b5f8:	9207      	str	r2, [sp, #28]
    b5fa:	17da      	asrs	r2, r3, #31
    b5fc:	4611      	mov	r1, r2
    b5fe:	e66e      	b.n	b2de <_vfiprintf_r+0x21e>
    b600:	f016 0310 	ands.w	r3, r6, #16
    b604:	9907      	ldr	r1, [sp, #28]
    b606:	f040 8309 	bne.w	bc1c <_vfiprintf_r+0xb5c>
    b60a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    b60e:	f000 8301 	beq.w	bc14 <_vfiprintf_r+0xb54>
    b612:	461a      	mov	r2, r3
    b614:	f851 3b04 	ldr.w	r3, [r1], #4
    b618:	9107      	str	r1, [sp, #28]
    b61a:	b29b      	uxth	r3, r3
    b61c:	e6c3      	b.n	b3a6 <_vfiprintf_r+0x2e6>
    b61e:	9b07      	ldr	r3, [sp, #28]
    b620:	461a      	mov	r2, r3
    b622:	2300      	movs	r3, #0
    b624:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b628:	4613      	mov	r3, r2
    b62a:	f853 4b04 	ldr.w	r4, [r3], #4
    b62e:	9303      	str	r3, [sp, #12]
    b630:	2c00      	cmp	r4, #0
    b632:	f000 8412 	beq.w	be5a <_vfiprintf_r+0xd9a>
    b636:	2953      	cmp	r1, #83	; 0x53
    b638:	f000 8365 	beq.w	bd06 <_vfiprintf_r+0xc46>
    b63c:	f016 0510 	ands.w	r5, r6, #16
    b640:	f040 8361 	bne.w	bd06 <_vfiprintf_r+0xc46>
    b644:	1c7b      	adds	r3, r7, #1
    b646:	f000 84b3 	beq.w	bfb0 <_vfiprintf_r+0xef0>
    b64a:	463a      	mov	r2, r7
    b64c:	4629      	mov	r1, r5
    b64e:	4620      	mov	r0, r4
    b650:	f7fe fcfe 	bl	a050 <memchr>
    b654:	9008      	str	r0, [sp, #32]
    b656:	2800      	cmp	r0, #0
    b658:	f000 849f 	beq.w	bf9a <_vfiprintf_r+0xeda>
    b65c:	1b03      	subs	r3, r0, r4
    b65e:	9a03      	ldr	r2, [sp, #12]
    b660:	9304      	str	r3, [sp, #16]
    b662:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b666:	462f      	mov	r7, r5
    b668:	9207      	str	r2, [sp, #28]
    b66a:	9303      	str	r3, [sp, #12]
    b66c:	9508      	str	r5, [sp, #32]
    b66e:	e657      	b.n	b320 <_vfiprintf_r+0x260>
    b670:	2943      	cmp	r1, #67	; 0x43
    b672:	d002      	beq.n	b67a <_vfiprintf_r+0x5ba>
    b674:	06f5      	lsls	r5, r6, #27
    b676:	f140 832d 	bpl.w	bcd4 <_vfiprintf_r+0xc14>
    b67a:	9d07      	ldr	r5, [sp, #28]
    b67c:	2208      	movs	r2, #8
    b67e:	2100      	movs	r1, #0
    b680:	a816      	add	r0, sp, #88	; 0x58
    b682:	ac2b      	add	r4, sp, #172	; 0xac
    b684:	f7fc f9e4 	bl	7a50 <memset>
    b688:	ab16      	add	r3, sp, #88	; 0x58
    b68a:	f855 2b04 	ldr.w	r2, [r5], #4
    b68e:	4621      	mov	r1, r4
    b690:	4658      	mov	r0, fp
    b692:	f7ff fc93 	bl	afbc <_wcrtomb_r>
    b696:	4603      	mov	r3, r0
    b698:	3301      	adds	r3, #1
    b69a:	9004      	str	r0, [sp, #16]
    b69c:	f000 84b3 	beq.w	c006 <_vfiprintf_r+0xf46>
    b6a0:	9b04      	ldr	r3, [sp, #16]
    b6a2:	9507      	str	r5, [sp, #28]
    b6a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b6a8:	9303      	str	r3, [sp, #12]
    b6aa:	2300      	movs	r3, #0
    b6ac:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b6b0:	e703      	b.n	b4ba <_vfiprintf_r+0x3fa>
    b6b2:	9b07      	ldr	r3, [sp, #28]
    b6b4:	f853 2b04 	ldr.w	r2, [r3], #4
    b6b8:	9206      	str	r2, [sp, #24]
    b6ba:	2a00      	cmp	r2, #0
    b6bc:	f280 829c 	bge.w	bbf8 <_vfiprintf_r+0xb38>
    b6c0:	9a06      	ldr	r2, [sp, #24]
    b6c2:	4252      	negs	r2, r2
    b6c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b6c8:	f898 1000 	ldrb.w	r1, [r8]
    b6cc:	f046 0604 	orr.w	r6, r6, #4
    b6d0:	e569      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b6d2:	f898 1000 	ldrb.w	r1, [r8]
    b6d6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    b6da:	e564      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b6dc:	f898 1000 	ldrb.w	r1, [r8]
    b6e0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    b6e4:	e55f      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b6e6:	4642      	mov	r2, r8
    b6e8:	f812 1b01 	ldrb.w	r1, [r2], #1
    b6ec:	292a      	cmp	r1, #42	; 0x2a
    b6ee:	f000 8496 	beq.w	c01e <_vfiprintf_r+0xf5e>
    b6f2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b6f6:	2b09      	cmp	r3, #9
    b6f8:	4690      	mov	r8, r2
    b6fa:	f04f 0700 	mov.w	r7, #0
    b6fe:	f63f ad54 	bhi.w	b1aa <_vfiprintf_r+0xea>
    b702:	f818 1b01 	ldrb.w	r1, [r8], #1
    b706:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b70a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    b70e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b712:	2b09      	cmp	r3, #9
    b714:	d9f5      	bls.n	b702 <_vfiprintf_r+0x642>
    b716:	e548      	b.n	b1aa <_vfiprintf_r+0xea>
    b718:	f898 1000 	ldrb.w	r1, [r8]
    b71c:	f046 0601 	orr.w	r6, r6, #1
    b720:	e541      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b722:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b726:	2b00      	cmp	r3, #0
    b728:	f47f adc2 	bne.w	b2b0 <_vfiprintf_r+0x1f0>
    b72c:	2320      	movs	r3, #32
    b72e:	f898 1000 	ldrb.w	r1, [r8]
    b732:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b736:	e536      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b738:	f898 1000 	ldrb.w	r1, [r8]
    b73c:	296c      	cmp	r1, #108	; 0x6c
    b73e:	bf03      	ittte	eq
    b740:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b744:	f046 0620 	orreq.w	r6, r6, #32
    b748:	f108 0801 	addeq.w	r8, r8, #1
    b74c:	f046 0610 	orrne.w	r6, r6, #16
    b750:	e529      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b752:	f898 1000 	ldrb.w	r1, [r8]
    b756:	2968      	cmp	r1, #104	; 0x68
    b758:	bf03      	ittte	eq
    b75a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b75e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    b762:	f108 0801 	addeq.w	r8, r8, #1
    b766:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    b76a:	e51c      	b.n	b1a6 <_vfiprintf_r+0xe6>
    b76c:	f046 0310 	orr.w	r3, r6, #16
    b770:	9303      	str	r3, [sp, #12]
    b772:	9b03      	ldr	r3, [sp, #12]
    b774:	f013 0220 	ands.w	r2, r3, #32
    b778:	f000 8206 	beq.w	bb88 <_vfiprintf_r+0xac8>
    b77c:	9b07      	ldr	r3, [sp, #28]
    b77e:	3307      	adds	r3, #7
    b780:	f023 0307 	bic.w	r3, r3, #7
    b784:	4619      	mov	r1, r3
    b786:	685a      	ldr	r2, [r3, #4]
    b788:	f851 3b08 	ldr.w	r3, [r1], #8
    b78c:	9107      	str	r1, [sp, #28]
    b78e:	2101      	movs	r1, #1
    b790:	e60d      	b.n	b3ae <_vfiprintf_r+0x2ee>
    b792:	9a07      	ldr	r2, [sp, #28]
    b794:	f046 0302 	orr.w	r3, r6, #2
    b798:	9303      	str	r3, [sp, #12]
    b79a:	f852 3b04 	ldr.w	r3, [r2], #4
    b79e:	9207      	str	r2, [sp, #28]
    b7a0:	f647 0230 	movw	r2, #30768	; 0x7830
    b7a4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    b7a8:	4ab8      	ldr	r2, [pc, #736]	; (ba8c <_vfiprintf_r+0x9cc>)
    b7aa:	920c      	str	r2, [sp, #48]	; 0x30
    b7ac:	2102      	movs	r1, #2
    b7ae:	2200      	movs	r2, #0
    b7b0:	e5fd      	b.n	b3ae <_vfiprintf_r+0x2ee>
    b7b2:	06b7      	lsls	r7, r6, #26
    b7b4:	f100 8248 	bmi.w	bc48 <_vfiprintf_r+0xb88>
    b7b8:	06f5      	lsls	r5, r6, #27
    b7ba:	f100 8346 	bmi.w	be4a <_vfiprintf_r+0xd8a>
    b7be:	0674      	lsls	r4, r6, #25
    b7c0:	f100 83d5 	bmi.w	bf6e <_vfiprintf_r+0xeae>
    b7c4:	05b0      	lsls	r0, r6, #22
    b7c6:	f140 8340 	bpl.w	be4a <_vfiprintf_r+0xd8a>
    b7ca:	9b07      	ldr	r3, [sp, #28]
    b7cc:	9905      	ldr	r1, [sp, #20]
    b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
    b7d2:	9307      	str	r3, [sp, #28]
    b7d4:	7011      	strb	r1, [r2, #0]
    b7d6:	e4be      	b.n	b156 <_vfiprintf_r+0x96>
    b7d8:	9603      	str	r6, [sp, #12]
    b7da:	2901      	cmp	r1, #1
    b7dc:	f43f ad8c 	beq.w	b2f8 <_vfiprintf_r+0x238>
    b7e0:	2902      	cmp	r1, #2
    b7e2:	ac44      	add	r4, sp, #272	; 0x110
    b7e4:	d111      	bne.n	b80a <_vfiprintf_r+0x74a>
    b7e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    b7e8:	f003 010f 	and.w	r1, r3, #15
    b7ec:	091b      	lsrs	r3, r3, #4
    b7ee:	5c41      	ldrb	r1, [r0, r1]
    b7f0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b7f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    b7f8:	0912      	lsrs	r2, r2, #4
    b7fa:	ea53 0102 	orrs.w	r1, r3, r2
    b7fe:	d1f3      	bne.n	b7e8 <_vfiprintf_r+0x728>
    b800:	9e03      	ldr	r6, [sp, #12]
    b802:	ab44      	add	r3, sp, #272	; 0x110
    b804:	1b1b      	subs	r3, r3, r4
    b806:	9304      	str	r3, [sp, #16]
    b808:	e583      	b.n	b312 <_vfiprintf_r+0x252>
    b80a:	f003 0107 	and.w	r1, r3, #7
    b80e:	08db      	lsrs	r3, r3, #3
    b810:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    b814:	08d2      	lsrs	r2, r2, #3
    b816:	3130      	adds	r1, #48	; 0x30
    b818:	ea53 0502 	orrs.w	r5, r3, r2
    b81c:	4620      	mov	r0, r4
    b81e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b822:	d1f2      	bne.n	b80a <_vfiprintf_r+0x74a>
    b824:	9e03      	ldr	r6, [sp, #12]
    b826:	07f3      	lsls	r3, r6, #31
    b828:	d5eb      	bpl.n	b802 <_vfiprintf_r+0x742>
    b82a:	2930      	cmp	r1, #48	; 0x30
    b82c:	d0e8      	beq.n	b800 <_vfiprintf_r+0x740>
    b82e:	2330      	movs	r3, #48	; 0x30
    b830:	3802      	subs	r0, #2
    b832:	f804 3c01 	strb.w	r3, [r4, #-1]
    b836:	ab44      	add	r3, sp, #272	; 0x110
    b838:	1a1b      	subs	r3, r3, r0
    b83a:	9e03      	ldr	r6, [sp, #12]
    b83c:	9304      	str	r3, [sp, #16]
    b83e:	4604      	mov	r4, r0
    b840:	e567      	b.n	b312 <_vfiprintf_r+0x252>
    b842:	9b04      	ldr	r3, [sp, #16]
    b844:	941b      	str	r4, [sp, #108]	; 0x6c
    b846:	2201      	movs	r2, #1
    b848:	931c      	str	r3, [sp, #112]	; 0x70
    b84a:	931a      	str	r3, [sp, #104]	; 0x68
    b84c:	9219      	str	r2, [sp, #100]	; 0x64
    b84e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b852:	f109 0908 	add.w	r9, r9, #8
    b856:	e69d      	b.n	b594 <_vfiprintf_r+0x4d4>
    b858:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b85c:	e47b      	b.n	b156 <_vfiprintf_r+0x96>
    b85e:	9a06      	ldr	r2, [sp, #24]
    b860:	9d03      	ldr	r5, [sp, #12]
    b862:	1b55      	subs	r5, r2, r5
    b864:	2d00      	cmp	r5, #0
    b866:	f77f ae76 	ble.w	b556 <_vfiprintf_r+0x496>
    b86a:	2d10      	cmp	r5, #16
    b86c:	f340 83bb 	ble.w	bfe6 <_vfiprintf_r+0xf26>
    b870:	9409      	str	r4, [sp, #36]	; 0x24
    b872:	ee18 4a10 	vmov	r4, s16
    b876:	e007      	b.n	b888 <_vfiprintf_r+0x7c8>
    b878:	f100 0c02 	add.w	ip, r0, #2
    b87c:	f109 0908 	add.w	r9, r9, #8
    b880:	4610      	mov	r0, r2
    b882:	3d10      	subs	r5, #16
    b884:	2d10      	cmp	r5, #16
    b886:	dd1e      	ble.n	b8c6 <_vfiprintf_r+0x806>
    b888:	4981      	ldr	r1, [pc, #516]	; (ba90 <_vfiprintf_r+0x9d0>)
    b88a:	f8c9 1000 	str.w	r1, [r9]
    b88e:	1c42      	adds	r2, r0, #1
    b890:	3310      	adds	r3, #16
    b892:	2110      	movs	r1, #16
    b894:	2a07      	cmp	r2, #7
    b896:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b89a:	f8c9 1004 	str.w	r1, [r9, #4]
    b89e:	ddeb      	ble.n	b878 <_vfiprintf_r+0x7b8>
    b8a0:	aa18      	add	r2, sp, #96	; 0x60
    b8a2:	2b00      	cmp	r3, #0
    b8a4:	d074      	beq.n	b990 <_vfiprintf_r+0x8d0>
    b8a6:	4621      	mov	r1, r4
    b8a8:	4658      	mov	r0, fp
    b8aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b8ae:	f7ff fbcb 	bl	b048 <__sprint_r.part.0>
    b8b2:	2800      	cmp	r0, #0
    b8b4:	f47f addb 	bne.w	b46e <_vfiprintf_r+0x3ae>
    b8b8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b8bc:	3d10      	subs	r5, #16
    b8be:	2d10      	cmp	r5, #16
    b8c0:	f100 0c01 	add.w	ip, r0, #1
    b8c4:	dce0      	bgt.n	b888 <_vfiprintf_r+0x7c8>
    b8c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b8c8:	4a71      	ldr	r2, [pc, #452]	; (ba90 <_vfiprintf_r+0x9d0>)
    b8ca:	f8c9 5004 	str.w	r5, [r9, #4]
    b8ce:	442b      	add	r3, r5
    b8d0:	f1bc 0f07 	cmp.w	ip, #7
    b8d4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    b8d8:	f8c9 2000 	str.w	r2, [r9]
    b8dc:	f340 8194 	ble.w	bc08 <_vfiprintf_r+0xb48>
    b8e0:	2b00      	cmp	r3, #0
    b8e2:	f000 831f 	beq.w	bf24 <_vfiprintf_r+0xe64>
    b8e6:	ee18 1a10 	vmov	r1, s16
    b8ea:	aa18      	add	r2, sp, #96	; 0x60
    b8ec:	4658      	mov	r0, fp
    b8ee:	f7ff fbab 	bl	b048 <__sprint_r.part.0>
    b8f2:	2800      	cmp	r0, #0
    b8f4:	f47f adbb 	bne.w	b46e <_vfiprintf_r+0x3ae>
    b8f8:	9a04      	ldr	r2, [sp, #16]
    b8fa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b8fe:	1abd      	subs	r5, r7, r2
    b900:	2d00      	cmp	r5, #0
    b902:	f100 0101 	add.w	r1, r0, #1
    b906:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b90a:	f77f ae29 	ble.w	b560 <_vfiprintf_r+0x4a0>
    b90e:	2d10      	cmp	r5, #16
    b910:	dd29      	ble.n	b966 <_vfiprintf_r+0x8a6>
    b912:	9409      	str	r4, [sp, #36]	; 0x24
    b914:	2710      	movs	r7, #16
    b916:	ee18 4a10 	vmov	r4, s16
    b91a:	e007      	b.n	b92c <_vfiprintf_r+0x86c>
    b91c:	f100 0c02 	add.w	ip, r0, #2
    b920:	f109 0908 	add.w	r9, r9, #8
    b924:	4610      	mov	r0, r2
    b926:	3d10      	subs	r5, #16
    b928:	2d10      	cmp	r5, #16
    b92a:	dd1a      	ble.n	b962 <_vfiprintf_r+0x8a2>
    b92c:	1c42      	adds	r2, r0, #1
    b92e:	4958      	ldr	r1, [pc, #352]	; (ba90 <_vfiprintf_r+0x9d0>)
    b930:	3310      	adds	r3, #16
    b932:	2a07      	cmp	r2, #7
    b934:	e9c9 1700 	strd	r1, r7, [r9]
    b938:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b93c:	ddee      	ble.n	b91c <_vfiprintf_r+0x85c>
    b93e:	aa18      	add	r2, sp, #96	; 0x60
    b940:	b303      	cbz	r3, b984 <_vfiprintf_r+0x8c4>
    b942:	4621      	mov	r1, r4
    b944:	4658      	mov	r0, fp
    b946:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b94a:	f7ff fb7d 	bl	b048 <__sprint_r.part.0>
    b94e:	2800      	cmp	r0, #0
    b950:	f47f ad8d 	bne.w	b46e <_vfiprintf_r+0x3ae>
    b954:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b958:	3d10      	subs	r5, #16
    b95a:	2d10      	cmp	r5, #16
    b95c:	f100 0c01 	add.w	ip, r0, #1
    b960:	dce4      	bgt.n	b92c <_vfiprintf_r+0x86c>
    b962:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b964:	4661      	mov	r1, ip
    b966:	4a4a      	ldr	r2, [pc, #296]	; (ba90 <_vfiprintf_r+0x9d0>)
    b968:	f8c9 5004 	str.w	r5, [r9, #4]
    b96c:	442b      	add	r3, r5
    b96e:	2907      	cmp	r1, #7
    b970:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b974:	f8c9 2000 	str.w	r2, [r9]
    b978:	f300 80e7 	bgt.w	bb4a <_vfiprintf_r+0xa8a>
    b97c:	f109 0908 	add.w	r9, r9, #8
    b980:	3101      	adds	r1, #1
    b982:	e5ed      	b.n	b560 <_vfiprintf_r+0x4a0>
    b984:	f04f 0c01 	mov.w	ip, #1
    b988:	4618      	mov	r0, r3
    b98a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b98e:	e7ca      	b.n	b926 <_vfiprintf_r+0x866>
    b990:	f04f 0c01 	mov.w	ip, #1
    b994:	4618      	mov	r0, r3
    b996:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b99a:	e772      	b.n	b882 <_vfiprintf_r+0x7c2>
    b99c:	2b00      	cmp	r3, #0
    b99e:	f000 8104 	beq.w	bbaa <_vfiprintf_r+0xaea>
    b9a2:	ee18 1a10 	vmov	r1, s16
    b9a6:	aa18      	add	r2, sp, #96	; 0x60
    b9a8:	4658      	mov	r0, fp
    b9aa:	f7ff fb4d 	bl	b048 <__sprint_r.part.0>
    b9ae:	2800      	cmp	r0, #0
    b9b0:	f47f ad5d 	bne.w	b46e <_vfiprintf_r+0x3ae>
    b9b4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b9b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9bc:	1c41      	adds	r1, r0, #1
    b9be:	e5a7      	b.n	b510 <_vfiprintf_r+0x450>
    b9c0:	2302      	movs	r3, #2
    b9c2:	aa11      	add	r2, sp, #68	; 0x44
    b9c4:	931c      	str	r3, [sp, #112]	; 0x70
    b9c6:	921b      	str	r2, [sp, #108]	; 0x6c
    b9c8:	2101      	movs	r1, #1
    b9ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9ce:	4608      	mov	r0, r1
    b9d0:	f109 0908 	add.w	r9, r9, #8
    b9d4:	1c41      	adds	r1, r0, #1
    b9d6:	e5ba      	b.n	b54e <_vfiprintf_r+0x48e>
    b9d8:	2d10      	cmp	r5, #16
    b9da:	f340 82e5 	ble.w	bfa8 <_vfiprintf_r+0xee8>
    b9de:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b9e2:	940f      	str	r4, [sp, #60]	; 0x3c
    b9e4:	4608      	mov	r0, r1
    b9e6:	ee18 4a10 	vmov	r4, s16
    b9ea:	e007      	b.n	b9fc <_vfiprintf_r+0x93c>
    b9ec:	f100 0c02 	add.w	ip, r0, #2
    b9f0:	f109 0908 	add.w	r9, r9, #8
    b9f4:	4610      	mov	r0, r2
    b9f6:	3d10      	subs	r5, #16
    b9f8:	2d10      	cmp	r5, #16
    b9fa:	dd1d      	ble.n	ba38 <_vfiprintf_r+0x978>
    b9fc:	4925      	ldr	r1, [pc, #148]	; (ba94 <_vfiprintf_r+0x9d4>)
    b9fe:	f8c9 1000 	str.w	r1, [r9]
    ba02:	1c42      	adds	r2, r0, #1
    ba04:	3310      	adds	r3, #16
    ba06:	2110      	movs	r1, #16
    ba08:	2a07      	cmp	r2, #7
    ba0a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    ba0e:	f8c9 1004 	str.w	r1, [r9, #4]
    ba12:	ddeb      	ble.n	b9ec <_vfiprintf_r+0x92c>
    ba14:	aa18      	add	r2, sp, #96	; 0x60
    ba16:	b303      	cbz	r3, ba5a <_vfiprintf_r+0x99a>
    ba18:	4621      	mov	r1, r4
    ba1a:	4658      	mov	r0, fp
    ba1c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba20:	f7ff fb12 	bl	b048 <__sprint_r.part.0>
    ba24:	2800      	cmp	r0, #0
    ba26:	f47f ad22 	bne.w	b46e <_vfiprintf_r+0x3ae>
    ba2a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    ba2e:	3d10      	subs	r5, #16
    ba30:	2d10      	cmp	r5, #16
    ba32:	f100 0c01 	add.w	ip, r0, #1
    ba36:	dce1      	bgt.n	b9fc <_vfiprintf_r+0x93c>
    ba38:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ba3a:	4660      	mov	r0, ip
    ba3c:	4a15      	ldr	r2, [pc, #84]	; (ba94 <_vfiprintf_r+0x9d4>)
    ba3e:	f8c9 5004 	str.w	r5, [r9, #4]
    ba42:	442b      	add	r3, r5
    ba44:	2807      	cmp	r0, #7
    ba46:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    ba4a:	f8c9 2000 	str.w	r2, [r9]
    ba4e:	f300 80c1 	bgt.w	bbd4 <_vfiprintf_r+0xb14>
    ba52:	f109 0908 	add.w	r9, r9, #8
    ba56:	1c41      	adds	r1, r0, #1
    ba58:	e546      	b.n	b4e8 <_vfiprintf_r+0x428>
    ba5a:	4618      	mov	r0, r3
    ba5c:	f04f 0c01 	mov.w	ip, #1
    ba60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba64:	e7c7      	b.n	b9f6 <_vfiprintf_r+0x936>
    ba66:	0776      	lsls	r6, r6, #29
    ba68:	9319      	str	r3, [sp, #100]	; 0x64
    ba6a:	d553      	bpl.n	bb14 <_vfiprintf_r+0xa54>
    ba6c:	9a06      	ldr	r2, [sp, #24]
    ba6e:	9903      	ldr	r1, [sp, #12]
    ba70:	1a54      	subs	r4, r2, r1
    ba72:	2c00      	cmp	r4, #0
    ba74:	dd4e      	ble.n	bb14 <_vfiprintf_r+0xa54>
    ba76:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ba7a:	2c10      	cmp	r4, #16
    ba7c:	f340 82b0 	ble.w	bfe0 <_vfiprintf_r+0xf20>
    ba80:	9919      	ldr	r1, [sp, #100]	; 0x64
    ba82:	ee18 6a10 	vmov	r6, s16
    ba86:	2510      	movs	r5, #16
    ba88:	e00d      	b.n	baa6 <_vfiprintf_r+0x9e6>
    ba8a:	bf00      	nop
    ba8c:	20000c80 	.word	0x20000c80
    ba90:	200011d0 	.word	0x200011d0
    ba94:	20000c9c 	.word	0x20000c9c
    ba98:	1c88      	adds	r0, r1, #2
    ba9a:	f109 0908 	add.w	r9, r9, #8
    ba9e:	4611      	mov	r1, r2
    baa0:	3c10      	subs	r4, #16
    baa2:	2c10      	cmp	r4, #16
    baa4:	dd1a      	ble.n	badc <_vfiprintf_r+0xa1c>
    baa6:	1c4a      	adds	r2, r1, #1
    baa8:	48b3      	ldr	r0, [pc, #716]	; (bd78 <_vfiprintf_r+0xcb8>)
    baaa:	3310      	adds	r3, #16
    baac:	2a07      	cmp	r2, #7
    baae:	e9c9 0500 	strd	r0, r5, [r9]
    bab2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    bab6:	ddef      	ble.n	ba98 <_vfiprintf_r+0x9d8>
    bab8:	aa18      	add	r2, sp, #96	; 0x60
    baba:	b333      	cbz	r3, bb0a <_vfiprintf_r+0xa4a>
    babc:	4631      	mov	r1, r6
    babe:	4658      	mov	r0, fp
    bac0:	f7ff fac2 	bl	b048 <__sprint_r.part.0>
    bac4:	2800      	cmp	r0, #0
    bac6:	f47f acd2 	bne.w	b46e <_vfiprintf_r+0x3ae>
    baca:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    bace:	3c10      	subs	r4, #16
    bad0:	2c10      	cmp	r4, #16
    bad2:	f101 0001 	add.w	r0, r1, #1
    bad6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bada:	dce4      	bgt.n	baa6 <_vfiprintf_r+0x9e6>
    badc:	4aa6      	ldr	r2, [pc, #664]	; (bd78 <_vfiprintf_r+0xcb8>)
    bade:	f8c9 4004 	str.w	r4, [r9, #4]
    bae2:	4423      	add	r3, r4
    bae4:	2807      	cmp	r0, #7
    bae6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    baea:	f8c9 2000 	str.w	r2, [r9]
    baee:	f77f ad59 	ble.w	b5a4 <_vfiprintf_r+0x4e4>
    baf2:	b17b      	cbz	r3, bb14 <_vfiprintf_r+0xa54>
    baf4:	ee18 1a10 	vmov	r1, s16
    baf8:	aa18      	add	r2, sp, #96	; 0x60
    bafa:	4658      	mov	r0, fp
    bafc:	f7ff faa4 	bl	b048 <__sprint_r.part.0>
    bb00:	2800      	cmp	r0, #0
    bb02:	f47f acb4 	bne.w	b46e <_vfiprintf_r+0x3ae>
    bb06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bb08:	e54c      	b.n	b5a4 <_vfiprintf_r+0x4e4>
    bb0a:	2001      	movs	r0, #1
    bb0c:	4619      	mov	r1, r3
    bb0e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb12:	e7c5      	b.n	baa0 <_vfiprintf_r+0x9e0>
    bb14:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    bb18:	9903      	ldr	r1, [sp, #12]
    bb1a:	428a      	cmp	r2, r1
    bb1c:	bfac      	ite	ge
    bb1e:	189b      	addge	r3, r3, r2
    bb20:	185b      	addlt	r3, r3, r1
    bb22:	9305      	str	r3, [sp, #20]
    bb24:	e549      	b.n	b5ba <_vfiprintf_r+0x4fa>
    bb26:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    bb2a:	058f      	lsls	r7, r1, #22
    bb2c:	ee18 3a10 	vmov	r3, s16
    bb30:	b28a      	uxth	r2, r1
    bb32:	f53f aae8 	bmi.w	b106 <_vfiprintf_r+0x46>
    bb36:	ee18 5a10 	vmov	r5, s16
    bb3a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    bb3c:	f7fc fb66 	bl	820c <__retarget_lock_acquire_recursive>
    bb40:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    bb44:	b28a      	uxth	r2, r1
    bb46:	f7ff bade 	b.w	b106 <_vfiprintf_r+0x46>
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	f43f ae79 	beq.w	b842 <_vfiprintf_r+0x782>
    bb50:	ee18 1a10 	vmov	r1, s16
    bb54:	aa18      	add	r2, sp, #96	; 0x60
    bb56:	4658      	mov	r0, fp
    bb58:	f7ff fa76 	bl	b048 <__sprint_r.part.0>
    bb5c:	2800      	cmp	r0, #0
    bb5e:	f47f ac86 	bne.w	b46e <_vfiprintf_r+0x3ae>
    bb62:	9919      	ldr	r1, [sp, #100]	; 0x64
    bb64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bb66:	3101      	adds	r1, #1
    bb68:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb6c:	e4f8      	b.n	b560 <_vfiprintf_r+0x4a0>
    bb6e:	9219      	str	r2, [sp, #100]	; 0x64
    bb70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bb74:	e45e      	b.n	b434 <_vfiprintf_r+0x374>
    bb76:	2f00      	cmp	r7, #0
    bb78:	f47f abc3 	bne.w	b302 <_vfiprintf_r+0x242>
    bb7c:	9e03      	ldr	r6, [sp, #12]
    bb7e:	2700      	movs	r7, #0
    bb80:	9704      	str	r7, [sp, #16]
    bb82:	ac44      	add	r4, sp, #272	; 0x110
    bb84:	f7ff bbc5 	b.w	b312 <_vfiprintf_r+0x252>
    bb88:	9b03      	ldr	r3, [sp, #12]
    bb8a:	f013 0310 	ands.w	r3, r3, #16
    bb8e:	d154      	bne.n	bc3a <_vfiprintf_r+0xb7a>
    bb90:	9a03      	ldr	r2, [sp, #12]
    bb92:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    bb96:	f000 816b 	beq.w	be70 <_vfiprintf_r+0xdb0>
    bb9a:	9907      	ldr	r1, [sp, #28]
    bb9c:	461a      	mov	r2, r3
    bb9e:	f851 3b04 	ldr.w	r3, [r1], #4
    bba2:	9107      	str	r1, [sp, #28]
    bba4:	b29b      	uxth	r3, r3
    bba6:	2101      	movs	r1, #1
    bba8:	e401      	b.n	b3ae <_vfiprintf_r+0x2ee>
    bbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bbac:	2a00      	cmp	r2, #0
    bbae:	d164      	bne.n	bc7a <_vfiprintf_r+0xbba>
    bbb0:	4618      	mov	r0, r3
    bbb2:	2101      	movs	r1, #1
    bbb4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbb8:	e4c9      	b.n	b54e <_vfiprintf_r+0x48e>
    bbba:	2101      	movs	r1, #1
    bbbc:	4618      	mov	r0, r3
    bbbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbc2:	e4c4      	b.n	b54e <_vfiprintf_r+0x48e>
    bbc4:	425b      	negs	r3, r3
    bbc6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    bbca:	9603      	str	r6, [sp, #12]
    bbcc:	202d      	movs	r0, #45	; 0x2d
    bbce:	2101      	movs	r1, #1
    bbd0:	f7ff bbee 	b.w	b3b0 <_vfiprintf_r+0x2f0>
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	f000 8088 	beq.w	bcea <_vfiprintf_r+0xc2a>
    bbda:	ee18 1a10 	vmov	r1, s16
    bbde:	aa18      	add	r2, sp, #96	; 0x60
    bbe0:	4658      	mov	r0, fp
    bbe2:	f7ff fa31 	bl	b048 <__sprint_r.part.0>
    bbe6:	2800      	cmp	r0, #0
    bbe8:	f47f ac41 	bne.w	b46e <_vfiprintf_r+0x3ae>
    bbec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    bbf0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bbf4:	1c41      	adds	r1, r0, #1
    bbf6:	e477      	b.n	b4e8 <_vfiprintf_r+0x428>
    bbf8:	f898 1000 	ldrb.w	r1, [r8]
    bbfc:	9307      	str	r3, [sp, #28]
    bbfe:	f7ff bad2 	b.w	b1a6 <_vfiprintf_r+0xe6>
    bc02:	ac44      	add	r4, sp, #272	; 0x110
    bc04:	f7ff bb85 	b.w	b312 <_vfiprintf_r+0x252>
    bc08:	f109 0908 	add.w	r9, r9, #8
    bc0c:	f10c 0101 	add.w	r1, ip, #1
    bc10:	4660      	mov	r0, ip
    bc12:	e4a0      	b.n	b556 <_vfiprintf_r+0x496>
    bc14:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    bc18:	f040 8197 	bne.w	bf4a <_vfiprintf_r+0xe8a>
    bc1c:	f851 3b04 	ldr.w	r3, [r1], #4
    bc20:	9107      	str	r1, [sp, #28]
    bc22:	f7ff bbc0 	b.w	b3a6 <_vfiprintf_r+0x2e6>
    bc26:	05b3      	lsls	r3, r6, #22
    bc28:	f100 8188 	bmi.w	bf3c <_vfiprintf_r+0xe7c>
    bc2c:	f852 3b04 	ldr.w	r3, [r2], #4
    bc30:	9207      	str	r2, [sp, #28]
    bc32:	17da      	asrs	r2, r3, #31
    bc34:	4611      	mov	r1, r2
    bc36:	f7ff bb52 	b.w	b2de <_vfiprintf_r+0x21e>
    bc3a:	9907      	ldr	r1, [sp, #28]
    bc3c:	f851 3b04 	ldr.w	r3, [r1], #4
    bc40:	9107      	str	r1, [sp, #28]
    bc42:	2101      	movs	r1, #1
    bc44:	f7ff bbb3 	b.w	b3ae <_vfiprintf_r+0x2ee>
    bc48:	9b07      	ldr	r3, [sp, #28]
    bc4a:	9805      	ldr	r0, [sp, #20]
    bc4c:	f853 1b04 	ldr.w	r1, [r3], #4
    bc50:	9307      	str	r3, [sp, #28]
    bc52:	17c2      	asrs	r2, r0, #31
    bc54:	e9c1 0200 	strd	r0, r2, [r1]
    bc58:	f7ff ba7d 	b.w	b156 <_vfiprintf_r+0x96>
    bc5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc5e:	2b00      	cmp	r3, #0
    bc60:	f43f ab26 	beq.w	b2b0 <_vfiprintf_r+0x1f0>
    bc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc66:	781b      	ldrb	r3, [r3, #0]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	f43f ab21 	beq.w	b2b0 <_vfiprintf_r+0x1f0>
    bc6e:	f898 1000 	ldrb.w	r1, [r8]
    bc72:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    bc76:	f7ff ba96 	b.w	b1a6 <_vfiprintf_r+0xe6>
    bc7a:	2302      	movs	r3, #2
    bc7c:	aa11      	add	r2, sp, #68	; 0x44
    bc7e:	931c      	str	r3, [sp, #112]	; 0x70
    bc80:	921b      	str	r2, [sp, #108]	; 0x6c
    bc82:	2001      	movs	r0, #1
    bc84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bc88:	e6a2      	b.n	b9d0 <_vfiprintf_r+0x910>
    bc8a:	9603      	str	r6, [sp, #12]
    bc8c:	e571      	b.n	b772 <_vfiprintf_r+0x6b2>
    bc8e:	4b3b      	ldr	r3, [pc, #236]	; (bd7c <_vfiprintf_r+0xcbc>)
    bc90:	930c      	str	r3, [sp, #48]	; 0x30
    bc92:	f016 0220 	ands.w	r2, r6, #32
    bc96:	d059      	beq.n	bd4c <_vfiprintf_r+0xc8c>
    bc98:	9b07      	ldr	r3, [sp, #28]
    bc9a:	3307      	adds	r3, #7
    bc9c:	f023 0307 	bic.w	r3, r3, #7
    bca0:	4618      	mov	r0, r3
    bca2:	685a      	ldr	r2, [r3, #4]
    bca4:	f850 3b08 	ldr.w	r3, [r0], #8
    bca8:	9007      	str	r0, [sp, #28]
    bcaa:	07f4      	lsls	r4, r6, #31
    bcac:	d509      	bpl.n	bcc2 <_vfiprintf_r+0xc02>
    bcae:	ea53 0002 	orrs.w	r0, r3, r2
    bcb2:	d006      	beq.n	bcc2 <_vfiprintf_r+0xc02>
    bcb4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    bcb8:	2130      	movs	r1, #48	; 0x30
    bcba:	f046 0602 	orr.w	r6, r6, #2
    bcbe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    bcc2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    bcc6:	9103      	str	r1, [sp, #12]
    bcc8:	2102      	movs	r1, #2
    bcca:	f7ff bb70 	b.w	b3ae <_vfiprintf_r+0x2ee>
    bcce:	4b2c      	ldr	r3, [pc, #176]	; (bd80 <_vfiprintf_r+0xcc0>)
    bcd0:	930c      	str	r3, [sp, #48]	; 0x30
    bcd2:	e7de      	b.n	bc92 <_vfiprintf_r+0xbd2>
    bcd4:	9b07      	ldr	r3, [sp, #28]
    bcd6:	2101      	movs	r1, #1
    bcd8:	f853 2b04 	ldr.w	r2, [r3], #4
    bcdc:	9103      	str	r1, [sp, #12]
    bcde:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    bce2:	9307      	str	r3, [sp, #28]
    bce4:	9104      	str	r1, [sp, #16]
    bce6:	ac2b      	add	r4, sp, #172	; 0xac
    bce8:	e4df      	b.n	b6aa <_vfiprintf_r+0x5ea>
    bcea:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    bcee:	2a00      	cmp	r2, #0
    bcf0:	f040 8132 	bne.w	bf58 <_vfiprintf_r+0xe98>
    bcf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bcf6:	2a00      	cmp	r2, #0
    bcf8:	f47f ae62 	bne.w	b9c0 <_vfiprintf_r+0x900>
    bcfc:	4618      	mov	r0, r3
    bcfe:	2101      	movs	r1, #1
    bd00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bd04:	e427      	b.n	b556 <_vfiprintf_r+0x496>
    bd06:	2100      	movs	r1, #0
    bd08:	2208      	movs	r2, #8
    bd0a:	a816      	add	r0, sp, #88	; 0x58
    bd0c:	9413      	str	r4, [sp, #76]	; 0x4c
    bd0e:	f7fb fe9f 	bl	7a50 <memset>
    bd12:	1c79      	adds	r1, r7, #1
    bd14:	f000 80bc 	beq.w	be90 <_vfiprintf_r+0xdd0>
    bd18:	2500      	movs	r5, #0
    bd1a:	9407      	str	r4, [sp, #28]
    bd1c:	462c      	mov	r4, r5
    bd1e:	e00c      	b.n	bd3a <_vfiprintf_r+0xc7a>
    bd20:	a92b      	add	r1, sp, #172	; 0xac
    bd22:	4658      	mov	r0, fp
    bd24:	f7ff f94a 	bl	afbc <_wcrtomb_r>
    bd28:	1c42      	adds	r2, r0, #1
    bd2a:	4420      	add	r0, r4
    bd2c:	f000 816b 	beq.w	c006 <_vfiprintf_r+0xf46>
    bd30:	42b8      	cmp	r0, r7
    bd32:	dc08      	bgt.n	bd46 <_vfiprintf_r+0xc86>
    bd34:	f000 8170 	beq.w	c018 <_vfiprintf_r+0xf58>
    bd38:	4604      	mov	r4, r0
    bd3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bd3c:	5952      	ldr	r2, [r2, r5]
    bd3e:	ab16      	add	r3, sp, #88	; 0x58
    bd40:	3504      	adds	r5, #4
    bd42:	2a00      	cmp	r2, #0
    bd44:	d1ec      	bne.n	bd20 <_vfiprintf_r+0xc60>
    bd46:	9404      	str	r4, [sp, #16]
    bd48:	9c07      	ldr	r4, [sp, #28]
    bd4a:	e0af      	b.n	beac <_vfiprintf_r+0xdec>
    bd4c:	f016 0310 	ands.w	r3, r6, #16
    bd50:	9807      	ldr	r0, [sp, #28]
    bd52:	d10c      	bne.n	bd6e <_vfiprintf_r+0xcae>
    bd54:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    bd58:	d005      	beq.n	bd66 <_vfiprintf_r+0xca6>
    bd5a:	461a      	mov	r2, r3
    bd5c:	f850 3b04 	ldr.w	r3, [r0], #4
    bd60:	9007      	str	r0, [sp, #28]
    bd62:	b29b      	uxth	r3, r3
    bd64:	e7a1      	b.n	bcaa <_vfiprintf_r+0xbea>
    bd66:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    bd6a:	f040 80e1 	bne.w	bf30 <_vfiprintf_r+0xe70>
    bd6e:	f850 3b04 	ldr.w	r3, [r0], #4
    bd72:	9007      	str	r0, [sp, #28]
    bd74:	e799      	b.n	bcaa <_vfiprintf_r+0xbea>
    bd76:	bf00      	nop
    bd78:	20000c9c 	.word	0x20000c9c
    bd7c:	20000c80 	.word	0x20000c80
    bd80:	20000c6c 	.word	0x20000c6c
    bd84:	9903      	ldr	r1, [sp, #12]
    bd86:	9704      	str	r7, [sp, #16]
    bd88:	ac44      	add	r4, sp, #272	; 0x110
    bd8a:	469e      	mov	lr, r3
    bd8c:	ee08 ba90 	vmov	s17, fp
    bd90:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    bd94:	f04f 0c00 	mov.w	ip, #0
    bd98:	4623      	mov	r3, r4
    bd9a:	e006      	b.n	bdaa <_vfiprintf_r+0xcea>
    bd9c:	f1be 0f0a 	cmp.w	lr, #10
    bda0:	f172 0200 	sbcs.w	r2, r2, #0
    bda4:	d339      	bcc.n	be1a <_vfiprintf_r+0xd5a>
    bda6:	46a6      	mov	lr, r4
    bda8:	462a      	mov	r2, r5
    bdaa:	49a6      	ldr	r1, [pc, #664]	; (c044 <_vfiprintf_r+0xf84>)
    bdac:	eb1e 0002 	adds.w	r0, lr, r2
    bdb0:	f140 0000 	adc.w	r0, r0, #0
    bdb4:	460f      	mov	r7, r1
    bdb6:	fba1 1400 	umull	r1, r4, r1, r0
    bdba:	f024 0103 	bic.w	r1, r4, #3
    bdbe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    bdc2:	1a40      	subs	r0, r0, r1
    bdc4:	ebbe 0100 	subs.w	r1, lr, r0
    bdc8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    bdcc:	f162 0400 	sbc.w	r4, r2, #0
    bdd0:	fb05 f501 	mul.w	r5, r5, r1
    bdd4:	fb07 5504 	mla	r5, r7, r4, r5
    bdd8:	fba1 4107 	umull	r4, r1, r1, r7
    bddc:	440d      	add	r5, r1
    bdde:	2705      	movs	r7, #5
    bde0:	f004 0101 	and.w	r1, r4, #1
    bde4:	fba1 1b07 	umull	r1, fp, r1, r7
    bde8:	1809      	adds	r1, r1, r0
    bdea:	0864      	lsrs	r4, r4, #1
    bdec:	3130      	adds	r1, #48	; 0x30
    bdee:	f803 1c01 	strb.w	r1, [r3, #-1]
    bdf2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    bdf6:	f10c 0c01 	add.w	ip, ip, #1
    bdfa:	3b01      	subs	r3, #1
    bdfc:	086d      	lsrs	r5, r5, #1
    bdfe:	2e00      	cmp	r6, #0
    be00:	d0cc      	beq.n	bd9c <_vfiprintf_r+0xcdc>
    be02:	990b      	ldr	r1, [sp, #44]	; 0x2c
    be04:	7809      	ldrb	r1, [r1, #0]
    be06:	4561      	cmp	r1, ip
    be08:	d1c8      	bne.n	bd9c <_vfiprintf_r+0xcdc>
    be0a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    be0e:	d0c5      	beq.n	bd9c <_vfiprintf_r+0xcdc>
    be10:	f1be 0f0a 	cmp.w	lr, #10
    be14:	f172 0200 	sbcs.w	r2, r2, #0
    be18:	d26c      	bcs.n	bef4 <_vfiprintf_r+0xe34>
    be1a:	461c      	mov	r4, r3
    be1c:	ab44      	add	r3, sp, #272	; 0x110
    be1e:	1b1b      	subs	r3, r3, r4
    be20:	9f04      	ldr	r7, [sp, #16]
    be22:	9e03      	ldr	r6, [sp, #12]
    be24:	9304      	str	r3, [sp, #16]
    be26:	ee18 ba90 	vmov	fp, s17
    be2a:	f7ff ba72 	b.w	b312 <_vfiprintf_r+0x252>
    be2e:	9603      	str	r6, [sp, #12]
    be30:	f7ff ba62 	b.w	b2f8 <_vfiprintf_r+0x238>
    be34:	4658      	mov	r0, fp
    be36:	f7fb fcfb 	bl	7830 <__sinit>
    be3a:	f7ff b95b 	b.w	b0f4 <_vfiprintf_r+0x34>
    be3e:	2901      	cmp	r1, #1
    be40:	9603      	str	r6, [sp, #12]
    be42:	f47f accd 	bne.w	b7e0 <_vfiprintf_r+0x720>
    be46:	f7ff ba5c 	b.w	b302 <_vfiprintf_r+0x242>
    be4a:	9b07      	ldr	r3, [sp, #28]
    be4c:	9905      	ldr	r1, [sp, #20]
    be4e:	f853 2b04 	ldr.w	r2, [r3], #4
    be52:	6011      	str	r1, [r2, #0]
    be54:	9307      	str	r3, [sp, #28]
    be56:	f7ff b97e 	b.w	b156 <_vfiprintf_r+0x96>
    be5a:	2f06      	cmp	r7, #6
    be5c:	463b      	mov	r3, r7
    be5e:	9a03      	ldr	r2, [sp, #12]
    be60:	4c79      	ldr	r4, [pc, #484]	; (c048 <_vfiprintf_r+0xf88>)
    be62:	9207      	str	r2, [sp, #28]
    be64:	bf28      	it	cs
    be66:	2306      	movcs	r3, #6
    be68:	9304      	str	r3, [sp, #16]
    be6a:	9303      	str	r3, [sp, #12]
    be6c:	f7ff bb25 	b.w	b4ba <_vfiprintf_r+0x3fa>
    be70:	9b03      	ldr	r3, [sp, #12]
    be72:	9907      	ldr	r1, [sp, #28]
    be74:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    be78:	bf14      	ite	ne
    be7a:	f851 3b04 	ldrne.w	r3, [r1], #4
    be7e:	f851 3b04 	ldreq.w	r3, [r1], #4
    be82:	9107      	str	r1, [sp, #28]
    be84:	bf1c      	itt	ne
    be86:	4602      	movne	r2, r0
    be88:	b2db      	uxtbne	r3, r3
    be8a:	2101      	movs	r1, #1
    be8c:	f7ff ba8f 	b.w	b3ae <_vfiprintf_r+0x2ee>
    be90:	ab16      	add	r3, sp, #88	; 0x58
    be92:	9300      	str	r3, [sp, #0]
    be94:	2300      	movs	r3, #0
    be96:	4619      	mov	r1, r3
    be98:	aa13      	add	r2, sp, #76	; 0x4c
    be9a:	4658      	mov	r0, fp
    be9c:	f7ff f8b4 	bl	b008 <_wcsrtombs_r>
    bea0:	4603      	mov	r3, r0
    bea2:	3301      	adds	r3, #1
    bea4:	9004      	str	r0, [sp, #16]
    bea6:	f000 80ae 	beq.w	c006 <_vfiprintf_r+0xf46>
    beaa:	9413      	str	r4, [sp, #76]	; 0x4c
    beac:	9b04      	ldr	r3, [sp, #16]
    beae:	2b00      	cmp	r3, #0
    beb0:	d030      	beq.n	bf14 <_vfiprintf_r+0xe54>
    beb2:	2b63      	cmp	r3, #99	; 0x63
    beb4:	dc63      	bgt.n	bf7e <_vfiprintf_r+0xebe>
    beb6:	2300      	movs	r3, #0
    beb8:	9308      	str	r3, [sp, #32]
    beba:	ac2b      	add	r4, sp, #172	; 0xac
    bebc:	2208      	movs	r2, #8
    bebe:	2100      	movs	r1, #0
    bec0:	a816      	add	r0, sp, #88	; 0x58
    bec2:	f7fb fdc5 	bl	7a50 <memset>
    bec6:	9d04      	ldr	r5, [sp, #16]
    bec8:	ab16      	add	r3, sp, #88	; 0x58
    beca:	9300      	str	r3, [sp, #0]
    becc:	aa13      	add	r2, sp, #76	; 0x4c
    bece:	462b      	mov	r3, r5
    bed0:	4621      	mov	r1, r4
    bed2:	4658      	mov	r0, fp
    bed4:	f7ff f898 	bl	b008 <_wcsrtombs_r>
    bed8:	4285      	cmp	r5, r0
    beda:	f040 80ab 	bne.w	c034 <_vfiprintf_r+0xf74>
    bede:	9b03      	ldr	r3, [sp, #12]
    bee0:	9a04      	ldr	r2, [sp, #16]
    bee2:	9307      	str	r3, [sp, #28]
    bee4:	2300      	movs	r3, #0
    bee6:	54a3      	strb	r3, [r4, r2]
    bee8:	461f      	mov	r7, r3
    beea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    beee:	9303      	str	r3, [sp, #12]
    bef0:	f7ff ba16 	b.w	b320 <_vfiprintf_r+0x260>
    bef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bef6:	990d      	ldr	r1, [sp, #52]	; 0x34
    bef8:	1a9b      	subs	r3, r3, r2
    befa:	4618      	mov	r0, r3
    befc:	9308      	str	r3, [sp, #32]
    befe:	f7fb fea5 	bl	7c4c <strncpy>
    bf02:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bf04:	9b08      	ldr	r3, [sp, #32]
    bf06:	784a      	ldrb	r2, [r1, #1]
    bf08:	b10a      	cbz	r2, bf0e <_vfiprintf_r+0xe4e>
    bf0a:	3101      	adds	r1, #1
    bf0c:	910b      	str	r1, [sp, #44]	; 0x2c
    bf0e:	f04f 0c00 	mov.w	ip, #0
    bf12:	e748      	b.n	bda6 <_vfiprintf_r+0xce6>
    bf14:	9b03      	ldr	r3, [sp, #12]
    bf16:	9307      	str	r3, [sp, #28]
    bf18:	9b04      	ldr	r3, [sp, #16]
    bf1a:	9303      	str	r3, [sp, #12]
    bf1c:	461f      	mov	r7, r3
    bf1e:	9308      	str	r3, [sp, #32]
    bf20:	f7ff b9fe 	b.w	b320 <_vfiprintf_r+0x260>
    bf24:	2101      	movs	r1, #1
    bf26:	4618      	mov	r0, r3
    bf28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bf2c:	f7ff bb13 	b.w	b556 <_vfiprintf_r+0x496>
    bf30:	f850 3b04 	ldr.w	r3, [r0], #4
    bf34:	9007      	str	r0, [sp, #28]
    bf36:	4622      	mov	r2, r4
    bf38:	b2db      	uxtb	r3, r3
    bf3a:	e6b6      	b.n	bcaa <_vfiprintf_r+0xbea>
    bf3c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    bf40:	9207      	str	r2, [sp, #28]
    bf42:	17da      	asrs	r2, r3, #31
    bf44:	4611      	mov	r1, r2
    bf46:	f7ff b9ca 	b.w	b2de <_vfiprintf_r+0x21e>
    bf4a:	f851 3b04 	ldr.w	r3, [r1], #4
    bf4e:	9107      	str	r1, [sp, #28]
    bf50:	4602      	mov	r2, r0
    bf52:	b2db      	uxtb	r3, r3
    bf54:	f7ff ba27 	b.w	b3a6 <_vfiprintf_r+0x2e6>
    bf58:	2301      	movs	r3, #1
    bf5a:	931c      	str	r3, [sp, #112]	; 0x70
    bf5c:	2101      	movs	r1, #1
    bf5e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    bf62:	931b      	str	r3, [sp, #108]	; 0x6c
    bf64:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    bf68:	460b      	mov	r3, r1
    bf6a:	f7ff bacd 	b.w	b508 <_vfiprintf_r+0x448>
    bf6e:	9b07      	ldr	r3, [sp, #28]
    bf70:	9905      	ldr	r1, [sp, #20]
    bf72:	f853 2b04 	ldr.w	r2, [r3], #4
    bf76:	9307      	str	r3, [sp, #28]
    bf78:	8011      	strh	r1, [r2, #0]
    bf7a:	f7ff b8ec 	b.w	b156 <_vfiprintf_r+0x96>
    bf7e:	1c59      	adds	r1, r3, #1
    bf80:	4658      	mov	r0, fp
    bf82:	f7f9 fe6b 	bl	5c5c <_malloc_r>
    bf86:	4604      	mov	r4, r0
    bf88:	2800      	cmp	r0, #0
    bf8a:	d03c      	beq.n	c006 <_vfiprintf_r+0xf46>
    bf8c:	9008      	str	r0, [sp, #32]
    bf8e:	e795      	b.n	bebc <_vfiprintf_r+0xdfc>
    bf90:	6d88      	ldr	r0, [r1, #88]	; 0x58
    bf92:	f7fc f93d 	bl	8210 <__retarget_lock_release_recursive>
    bf96:	f7ff b9e9 	b.w	b36c <_vfiprintf_r+0x2ac>
    bf9a:	9b03      	ldr	r3, [sp, #12]
    bf9c:	9307      	str	r3, [sp, #28]
    bf9e:	e9cd 7703 	strd	r7, r7, [sp, #12]
    bfa2:	9f08      	ldr	r7, [sp, #32]
    bfa4:	f7ff b9bc 	b.w	b320 <_vfiprintf_r+0x260>
    bfa8:	9819      	ldr	r0, [sp, #100]	; 0x64
    bfaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    bfac:	3001      	adds	r0, #1
    bfae:	e545      	b.n	ba3c <_vfiprintf_r+0x97c>
    bfb0:	9b03      	ldr	r3, [sp, #12]
    bfb2:	9307      	str	r3, [sp, #28]
    bfb4:	4620      	mov	r0, r4
    bfb6:	f7fc fb03 	bl	85c0 <strlen>
    bfba:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    bfbe:	462f      	mov	r7, r5
    bfc0:	9004      	str	r0, [sp, #16]
    bfc2:	9303      	str	r3, [sp, #12]
    bfc4:	9508      	str	r5, [sp, #32]
    bfc6:	f7ff b9ab 	b.w	b320 <_vfiprintf_r+0x260>
    bfca:	ee18 1a10 	vmov	r1, s16
    bfce:	aa18      	add	r2, sp, #96	; 0x60
    bfd0:	4658      	mov	r0, fp
    bfd2:	f7ff f839 	bl	b048 <__sprint_r.part.0>
    bfd6:	2800      	cmp	r0, #0
    bfd8:	f43f aa36 	beq.w	b448 <_vfiprintf_r+0x388>
    bfdc:	f7ff ba4d 	b.w	b47a <_vfiprintf_r+0x3ba>
    bfe0:	9819      	ldr	r0, [sp, #100]	; 0x64
    bfe2:	3001      	adds	r0, #1
    bfe4:	e57a      	b.n	badc <_vfiprintf_r+0xa1c>
    bfe6:	468c      	mov	ip, r1
    bfe8:	e46e      	b.n	b8c8 <_vfiprintf_r+0x808>
    bfea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    bfec:	07d9      	lsls	r1, r3, #31
    bfee:	d405      	bmi.n	bffc <_vfiprintf_r+0xf3c>
    bff0:	89ab      	ldrh	r3, [r5, #12]
    bff2:	059a      	lsls	r2, r3, #22
    bff4:	d402      	bmi.n	bffc <_vfiprintf_r+0xf3c>
    bff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    bff8:	f7fc f90a 	bl	8210 <__retarget_lock_release_recursive>
    bffc:	f04f 33ff 	mov.w	r3, #4294967295
    c000:	9305      	str	r3, [sp, #20]
    c002:	f7ff ba49 	b.w	b498 <_vfiprintf_r+0x3d8>
    c006:	ee18 2a10 	vmov	r2, s16
    c00a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c012:	8193      	strh	r3, [r2, #12]
    c014:	f7ff ba35 	b.w	b482 <_vfiprintf_r+0x3c2>
    c018:	9c07      	ldr	r4, [sp, #28]
    c01a:	9704      	str	r7, [sp, #16]
    c01c:	e746      	b.n	beac <_vfiprintf_r+0xdec>
    c01e:	9b07      	ldr	r3, [sp, #28]
    c020:	f898 1001 	ldrb.w	r1, [r8, #1]
    c024:	f853 7b04 	ldr.w	r7, [r3], #4
    c028:	9307      	str	r3, [sp, #28]
    c02a:	4690      	mov	r8, r2
    c02c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    c030:	f7ff b8b9 	b.w	b1a6 <_vfiprintf_r+0xe6>
    c034:	ee18 2a10 	vmov	r2, s16
    c038:	8993      	ldrh	r3, [r2, #12]
    c03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c03e:	8193      	strh	r3, [r2, #12]
    c040:	f7ff ba15 	b.w	b46e <_vfiprintf_r+0x3ae>
    c044:	cccccccd 	.word	0xcccccccd
    c048:	20000c94 	.word	0x20000c94

0000c04c <__sbprintf>:
    c04c:	b570      	push	{r4, r5, r6, lr}
    c04e:	460c      	mov	r4, r1
    c050:	8989      	ldrh	r1, [r1, #12]
    c052:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    c056:	f021 0102 	bic.w	r1, r1, #2
    c05a:	f8ad 1014 	strh.w	r1, [sp, #20]
    c05e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    c060:	911b      	str	r1, [sp, #108]	; 0x6c
    c062:	89e1      	ldrh	r1, [r4, #14]
    c064:	f8ad 1016 	strh.w	r1, [sp, #22]
    c068:	69e1      	ldr	r1, [r4, #28]
    c06a:	9109      	str	r1, [sp, #36]	; 0x24
    c06c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c06e:	910b      	str	r1, [sp, #44]	; 0x2c
    c070:	a91c      	add	r1, sp, #112	; 0x70
    c072:	9102      	str	r1, [sp, #8]
    c074:	9106      	str	r1, [sp, #24]
    c076:	f44f 6180 	mov.w	r1, #1024	; 0x400
    c07a:	4606      	mov	r6, r0
    c07c:	9104      	str	r1, [sp, #16]
    c07e:	9107      	str	r1, [sp, #28]
    c080:	a818      	add	r0, sp, #96	; 0x60
    c082:	2100      	movs	r1, #0
    c084:	e9cd 3200 	strd	r3, r2, [sp]
    c088:	9108      	str	r1, [sp, #32]
    c08a:	f7fc f8bb 	bl	8204 <__retarget_lock_init_recursive>
    c08e:	e9dd 3200 	ldrd	r3, r2, [sp]
    c092:	a902      	add	r1, sp, #8
    c094:	4630      	mov	r0, r6
    c096:	f7ff f813 	bl	b0c0 <_vfiprintf_r>
    c09a:	1e05      	subs	r5, r0, #0
    c09c:	db07      	blt.n	c0ae <__sbprintf+0x62>
    c09e:	a902      	add	r1, sp, #8
    c0a0:	4630      	mov	r0, r6
    c0a2:	f7fd ff61 	bl	9f68 <_fflush_r>
    c0a6:	2800      	cmp	r0, #0
    c0a8:	bf18      	it	ne
    c0aa:	f04f 35ff 	movne.w	r5, #4294967295
    c0ae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c0b2:	065b      	lsls	r3, r3, #25
    c0b4:	d503      	bpl.n	c0be <__sbprintf+0x72>
    c0b6:	89a3      	ldrh	r3, [r4, #12]
    c0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c0bc:	81a3      	strh	r3, [r4, #12]
    c0be:	9818      	ldr	r0, [sp, #96]	; 0x60
    c0c0:	f7fc f8a2 	bl	8208 <__retarget_lock_close_recursive>
    c0c4:	4628      	mov	r0, r5
    c0c6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    c0ca:	bd70      	pop	{r4, r5, r6, pc}

0000c0cc <__sfvwrite_r>:
    c0cc:	6893      	ldr	r3, [r2, #8]
    c0ce:	2b00      	cmp	r3, #0
    c0d0:	f000 8085 	beq.w	c1de <__sfvwrite_r+0x112>
    c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    c0dc:	460c      	mov	r4, r1
    c0de:	0719      	lsls	r1, r3, #28
    c0e0:	4680      	mov	r8, r0
    c0e2:	b083      	sub	sp, #12
    c0e4:	4617      	mov	r7, r2
    c0e6:	b298      	uxth	r0, r3
    c0e8:	d525      	bpl.n	c136 <__sfvwrite_r+0x6a>
    c0ea:	6923      	ldr	r3, [r4, #16]
    c0ec:	b31b      	cbz	r3, c136 <__sfvwrite_r+0x6a>
    c0ee:	f010 0302 	ands.w	r3, r0, #2
    c0f2:	683d      	ldr	r5, [r7, #0]
    c0f4:	d02d      	beq.n	c152 <__sfvwrite_r+0x86>
    c0f6:	f04f 0a00 	mov.w	sl, #0
    c0fa:	f8df b2c0 	ldr.w	fp, [pc, #704]	; c3bc <__sfvwrite_r+0x2f0>
    c0fe:	4656      	mov	r6, sl
    c100:	46b9      	mov	r9, r7
    c102:	455e      	cmp	r6, fp
    c104:	4633      	mov	r3, r6
    c106:	4652      	mov	r2, sl
    c108:	bf28      	it	cs
    c10a:	465b      	movcs	r3, fp
    c10c:	4640      	mov	r0, r8
    c10e:	2e00      	cmp	r6, #0
    c110:	d052      	beq.n	c1b8 <__sfvwrite_r+0xec>
    c112:	69e1      	ldr	r1, [r4, #28]
    c114:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c116:	47b8      	blx	r7
    c118:	2800      	cmp	r0, #0
    c11a:	dd56      	ble.n	c1ca <__sfvwrite_r+0xfe>
    c11c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    c120:	1a1b      	subs	r3, r3, r0
    c122:	4482      	add	sl, r0
    c124:	1a36      	subs	r6, r6, r0
    c126:	f8c9 3008 	str.w	r3, [r9, #8]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d1e9      	bne.n	c102 <__sfvwrite_r+0x36>
    c12e:	2000      	movs	r0, #0
    c130:	b003      	add	sp, #12
    c132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c136:	4621      	mov	r1, r4
    c138:	4640      	mov	r0, r8
    c13a:	f000 f941 	bl	c3c0 <__swsetup_r>
    c13e:	2800      	cmp	r0, #0
    c140:	f040 8138 	bne.w	c3b4 <__sfvwrite_r+0x2e8>
    c144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c148:	683d      	ldr	r5, [r7, #0]
    c14a:	b298      	uxth	r0, r3
    c14c:	f010 0302 	ands.w	r3, r0, #2
    c150:	d1d1      	bne.n	c0f6 <__sfvwrite_r+0x2a>
    c152:	f010 0901 	ands.w	r9, r0, #1
    c156:	d144      	bne.n	c1e2 <__sfvwrite_r+0x116>
    c158:	464e      	mov	r6, r9
    c15a:	9700      	str	r7, [sp, #0]
    c15c:	b346      	cbz	r6, c1b0 <__sfvwrite_r+0xe4>
    c15e:	0582      	lsls	r2, r0, #22
    c160:	f8d4 b008 	ldr.w	fp, [r4, #8]
    c164:	f140 8085 	bpl.w	c272 <__sfvwrite_r+0x1a6>
    c168:	45b3      	cmp	fp, r6
    c16a:	465a      	mov	r2, fp
    c16c:	f200 80b4 	bhi.w	c2d8 <__sfvwrite_r+0x20c>
    c170:	f410 6f90 	tst.w	r0, #1152	; 0x480
    c174:	f040 80c1 	bne.w	c2fa <__sfvwrite_r+0x22e>
    c178:	6820      	ldr	r0, [r4, #0]
    c17a:	9201      	str	r2, [sp, #4]
    c17c:	4649      	mov	r1, r9
    c17e:	f7fb fbeb 	bl	7958 <memmove>
    c182:	68a3      	ldr	r3, [r4, #8]
    c184:	9a01      	ldr	r2, [sp, #4]
    c186:	eba3 010b 	sub.w	r1, r3, fp
    c18a:	6823      	ldr	r3, [r4, #0]
    c18c:	60a1      	str	r1, [r4, #8]
    c18e:	4413      	add	r3, r2
    c190:	46b2      	mov	sl, r6
    c192:	6023      	str	r3, [r4, #0]
    c194:	2600      	movs	r6, #0
    c196:	9a00      	ldr	r2, [sp, #0]
    c198:	6893      	ldr	r3, [r2, #8]
    c19a:	eba3 030a 	sub.w	r3, r3, sl
    c19e:	44d1      	add	r9, sl
    c1a0:	6093      	str	r3, [r2, #8]
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d0c3      	beq.n	c12e <__sfvwrite_r+0x62>
    c1a6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    c1aa:	b280      	uxth	r0, r0
    c1ac:	2e00      	cmp	r6, #0
    c1ae:	d1d6      	bne.n	c15e <__sfvwrite_r+0x92>
    c1b0:	e9d5 9600 	ldrd	r9, r6, [r5]
    c1b4:	3508      	adds	r5, #8
    c1b6:	e7d1      	b.n	c15c <__sfvwrite_r+0x90>
    c1b8:	e9d5 a600 	ldrd	sl, r6, [r5]
    c1bc:	3508      	adds	r5, #8
    c1be:	e7a0      	b.n	c102 <__sfvwrite_r+0x36>
    c1c0:	4621      	mov	r1, r4
    c1c2:	4640      	mov	r0, r8
    c1c4:	f7fd fed0 	bl	9f68 <_fflush_r>
    c1c8:	b388      	cbz	r0, c22e <__sfvwrite_r+0x162>
    c1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c1d2:	f04f 30ff 	mov.w	r0, #4294967295
    c1d6:	81a3      	strh	r3, [r4, #12]
    c1d8:	b003      	add	sp, #12
    c1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1de:	2000      	movs	r0, #0
    c1e0:	4770      	bx	lr
    c1e2:	461e      	mov	r6, r3
    c1e4:	46ba      	mov	sl, r7
    c1e6:	4699      	mov	r9, r3
    c1e8:	4618      	mov	r0, r3
    c1ea:	9500      	str	r5, [sp, #0]
    c1ec:	461f      	mov	r7, r3
    c1ee:	b366      	cbz	r6, c24a <__sfvwrite_r+0x17e>
    c1f0:	2800      	cmp	r0, #0
    c1f2:	d032      	beq.n	c25a <__sfvwrite_r+0x18e>
    c1f4:	464a      	mov	r2, r9
    c1f6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    c1fa:	6820      	ldr	r0, [r4, #0]
    c1fc:	68a5      	ldr	r5, [r4, #8]
    c1fe:	42b2      	cmp	r2, r6
    c200:	bf28      	it	cs
    c202:	4632      	movcs	r2, r6
    c204:	4288      	cmp	r0, r1
    c206:	d904      	bls.n	c212 <__sfvwrite_r+0x146>
    c208:	eb05 0b03 	add.w	fp, r5, r3
    c20c:	455a      	cmp	r2, fp
    c20e:	f300 80a7 	bgt.w	c360 <__sfvwrite_r+0x294>
    c212:	4293      	cmp	r3, r2
    c214:	dc64      	bgt.n	c2e0 <__sfvwrite_r+0x214>
    c216:	69e1      	ldr	r1, [r4, #28]
    c218:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c21a:	463a      	mov	r2, r7
    c21c:	4640      	mov	r0, r8
    c21e:	47a8      	blx	r5
    c220:	f1b0 0b00 	subs.w	fp, r0, #0
    c224:	ddd1      	ble.n	c1ca <__sfvwrite_r+0xfe>
    c226:	ebb9 090b 	subs.w	r9, r9, fp
    c22a:	d0c9      	beq.n	c1c0 <__sfvwrite_r+0xf4>
    c22c:	2001      	movs	r0, #1
    c22e:	f8da 3008 	ldr.w	r3, [sl, #8]
    c232:	eba3 030b 	sub.w	r3, r3, fp
    c236:	445f      	add	r7, fp
    c238:	eba6 060b 	sub.w	r6, r6, fp
    c23c:	f8ca 3008 	str.w	r3, [sl, #8]
    c240:	2b00      	cmp	r3, #0
    c242:	f43f af74 	beq.w	c12e <__sfvwrite_r+0x62>
    c246:	2e00      	cmp	r6, #0
    c248:	d1d2      	bne.n	c1f0 <__sfvwrite_r+0x124>
    c24a:	9a00      	ldr	r2, [sp, #0]
    c24c:	6856      	ldr	r6, [r2, #4]
    c24e:	4613      	mov	r3, r2
    c250:	3208      	adds	r2, #8
    c252:	9200      	str	r2, [sp, #0]
    c254:	2e00      	cmp	r6, #0
    c256:	d0f8      	beq.n	c24a <__sfvwrite_r+0x17e>
    c258:	681f      	ldr	r7, [r3, #0]
    c25a:	4632      	mov	r2, r6
    c25c:	210a      	movs	r1, #10
    c25e:	4638      	mov	r0, r7
    c260:	f7fd fef6 	bl	a050 <memchr>
    c264:	2800      	cmp	r0, #0
    c266:	f000 809c 	beq.w	c3a2 <__sfvwrite_r+0x2d6>
    c26a:	3001      	adds	r0, #1
    c26c:	eba0 0907 	sub.w	r9, r0, r7
    c270:	e7c0      	b.n	c1f4 <__sfvwrite_r+0x128>
    c272:	6820      	ldr	r0, [r4, #0]
    c274:	6923      	ldr	r3, [r4, #16]
    c276:	4298      	cmp	r0, r3
    c278:	d816      	bhi.n	c2a8 <__sfvwrite_r+0x1dc>
    c27a:	6962      	ldr	r2, [r4, #20]
    c27c:	42b2      	cmp	r2, r6
    c27e:	d813      	bhi.n	c2a8 <__sfvwrite_r+0x1dc>
    c280:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    c284:	42b3      	cmp	r3, r6
    c286:	bf28      	it	cs
    c288:	4633      	movcs	r3, r6
    c28a:	69e1      	ldr	r1, [r4, #28]
    c28c:	fb93 f3f2 	sdiv	r3, r3, r2
    c290:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c292:	fb02 f303 	mul.w	r3, r2, r3
    c296:	4640      	mov	r0, r8
    c298:	464a      	mov	r2, r9
    c29a:	47b8      	blx	r7
    c29c:	f1b0 0a00 	subs.w	sl, r0, #0
    c2a0:	dd93      	ble.n	c1ca <__sfvwrite_r+0xfe>
    c2a2:	eba6 060a 	sub.w	r6, r6, sl
    c2a6:	e776      	b.n	c196 <__sfvwrite_r+0xca>
    c2a8:	45b3      	cmp	fp, r6
    c2aa:	46da      	mov	sl, fp
    c2ac:	bf28      	it	cs
    c2ae:	46b2      	movcs	sl, r6
    c2b0:	4652      	mov	r2, sl
    c2b2:	4649      	mov	r1, r9
    c2b4:	f7fb fb50 	bl	7958 <memmove>
    c2b8:	68a3      	ldr	r3, [r4, #8]
    c2ba:	6822      	ldr	r2, [r4, #0]
    c2bc:	eba3 030a 	sub.w	r3, r3, sl
    c2c0:	4452      	add	r2, sl
    c2c2:	60a3      	str	r3, [r4, #8]
    c2c4:	6022      	str	r2, [r4, #0]
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d1eb      	bne.n	c2a2 <__sfvwrite_r+0x1d6>
    c2ca:	4621      	mov	r1, r4
    c2cc:	4640      	mov	r0, r8
    c2ce:	f7fd fe4b 	bl	9f68 <_fflush_r>
    c2d2:	2800      	cmp	r0, #0
    c2d4:	d0e5      	beq.n	c2a2 <__sfvwrite_r+0x1d6>
    c2d6:	e778      	b.n	c1ca <__sfvwrite_r+0xfe>
    c2d8:	6820      	ldr	r0, [r4, #0]
    c2da:	46b3      	mov	fp, r6
    c2dc:	4632      	mov	r2, r6
    c2de:	e74c      	b.n	c17a <__sfvwrite_r+0xae>
    c2e0:	4639      	mov	r1, r7
    c2e2:	9201      	str	r2, [sp, #4]
    c2e4:	f7fb fb38 	bl	7958 <memmove>
    c2e8:	9a01      	ldr	r2, [sp, #4]
    c2ea:	68a3      	ldr	r3, [r4, #8]
    c2ec:	1a9b      	subs	r3, r3, r2
    c2ee:	60a3      	str	r3, [r4, #8]
    c2f0:	6823      	ldr	r3, [r4, #0]
    c2f2:	4413      	add	r3, r2
    c2f4:	6023      	str	r3, [r4, #0]
    c2f6:	4693      	mov	fp, r2
    c2f8:	e795      	b.n	c226 <__sfvwrite_r+0x15a>
    c2fa:	6823      	ldr	r3, [r4, #0]
    c2fc:	6921      	ldr	r1, [r4, #16]
    c2fe:	eba3 0b01 	sub.w	fp, r3, r1
    c302:	6963      	ldr	r3, [r4, #20]
    c304:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    c308:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    c30c:	f10b 0301 	add.w	r3, fp, #1
    c310:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    c314:	4433      	add	r3, r6
    c316:	4553      	cmp	r3, sl
    c318:	4652      	mov	r2, sl
    c31a:	bf84      	itt	hi
    c31c:	469a      	movhi	sl, r3
    c31e:	4652      	movhi	r2, sl
    c320:	0543      	lsls	r3, r0, #21
    c322:	d52c      	bpl.n	c37e <__sfvwrite_r+0x2b2>
    c324:	4611      	mov	r1, r2
    c326:	4640      	mov	r0, r8
    c328:	f7f9 fc98 	bl	5c5c <_malloc_r>
    c32c:	2800      	cmp	r0, #0
    c32e:	d03b      	beq.n	c3a8 <__sfvwrite_r+0x2dc>
    c330:	465a      	mov	r2, fp
    c332:	6921      	ldr	r1, [r4, #16]
    c334:	9001      	str	r0, [sp, #4]
    c336:	f7f7 febf 	bl	40b8 <memcpy>
    c33a:	89a2      	ldrh	r2, [r4, #12]
    c33c:	9b01      	ldr	r3, [sp, #4]
    c33e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    c342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    c346:	81a2      	strh	r2, [r4, #12]
    c348:	eb03 000b 	add.w	r0, r3, fp
    c34c:	6123      	str	r3, [r4, #16]
    c34e:	ebaa 030b 	sub.w	r3, sl, fp
    c352:	f8c4 a014 	str.w	sl, [r4, #20]
    c356:	60a3      	str	r3, [r4, #8]
    c358:	6020      	str	r0, [r4, #0]
    c35a:	46b3      	mov	fp, r6
    c35c:	4632      	mov	r2, r6
    c35e:	e70c      	b.n	c17a <__sfvwrite_r+0xae>
    c360:	4639      	mov	r1, r7
    c362:	465a      	mov	r2, fp
    c364:	f7fb faf8 	bl	7958 <memmove>
    c368:	6823      	ldr	r3, [r4, #0]
    c36a:	445b      	add	r3, fp
    c36c:	6023      	str	r3, [r4, #0]
    c36e:	4621      	mov	r1, r4
    c370:	4640      	mov	r0, r8
    c372:	f7fd fdf9 	bl	9f68 <_fflush_r>
    c376:	2800      	cmp	r0, #0
    c378:	f43f af55 	beq.w	c226 <__sfvwrite_r+0x15a>
    c37c:	e725      	b.n	c1ca <__sfvwrite_r+0xfe>
    c37e:	4640      	mov	r0, r8
    c380:	f7f9 ff34 	bl	61ec <_realloc_r>
    c384:	4603      	mov	r3, r0
    c386:	2800      	cmp	r0, #0
    c388:	d1de      	bne.n	c348 <__sfvwrite_r+0x27c>
    c38a:	6921      	ldr	r1, [r4, #16]
    c38c:	4640      	mov	r0, r8
    c38e:	f7fc fa29 	bl	87e4 <_free_r>
    c392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c396:	220c      	movs	r2, #12
    c398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c39c:	f8c8 2000 	str.w	r2, [r8]
    c3a0:	e715      	b.n	c1ce <__sfvwrite_r+0x102>
    c3a2:	1c72      	adds	r2, r6, #1
    c3a4:	4691      	mov	r9, r2
    c3a6:	e726      	b.n	c1f6 <__sfvwrite_r+0x12a>
    c3a8:	220c      	movs	r2, #12
    c3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c3ae:	f8c8 2000 	str.w	r2, [r8]
    c3b2:	e70c      	b.n	c1ce <__sfvwrite_r+0x102>
    c3b4:	f04f 30ff 	mov.w	r0, #4294967295
    c3b8:	e6ba      	b.n	c130 <__sfvwrite_r+0x64>
    c3ba:	bf00      	nop
    c3bc:	7ffffc00 	.word	0x7ffffc00

0000c3c0 <__swsetup_r>:
    c3c0:	b538      	push	{r3, r4, r5, lr}
    c3c2:	4b31      	ldr	r3, [pc, #196]	; (c488 <__swsetup_r+0xc8>)
    c3c4:	681b      	ldr	r3, [r3, #0]
    c3c6:	4605      	mov	r5, r0
    c3c8:	460c      	mov	r4, r1
    c3ca:	b113      	cbz	r3, c3d2 <__swsetup_r+0x12>
    c3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    c3ce:	2a00      	cmp	r2, #0
    c3d0:	d04e      	beq.n	c470 <__swsetup_r+0xb0>
    c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c3d6:	0718      	lsls	r0, r3, #28
    c3d8:	b29a      	uxth	r2, r3
    c3da:	d51c      	bpl.n	c416 <__swsetup_r+0x56>
    c3dc:	6921      	ldr	r1, [r4, #16]
    c3de:	b329      	cbz	r1, c42c <__swsetup_r+0x6c>
    c3e0:	f012 0001 	ands.w	r0, r2, #1
    c3e4:	d007      	beq.n	c3f6 <__swsetup_r+0x36>
    c3e6:	2000      	movs	r0, #0
    c3e8:	60a0      	str	r0, [r4, #8]
    c3ea:	6960      	ldr	r0, [r4, #20]
    c3ec:	4240      	negs	r0, r0
    c3ee:	61a0      	str	r0, [r4, #24]
    c3f0:	b139      	cbz	r1, c402 <__swsetup_r+0x42>
    c3f2:	2000      	movs	r0, #0
    c3f4:	bd38      	pop	{r3, r4, r5, pc}
    c3f6:	0795      	lsls	r5, r2, #30
    c3f8:	bf58      	it	pl
    c3fa:	6960      	ldrpl	r0, [r4, #20]
    c3fc:	60a0      	str	r0, [r4, #8]
    c3fe:	2900      	cmp	r1, #0
    c400:	d1f7      	bne.n	c3f2 <__swsetup_r+0x32>
    c402:	0612      	lsls	r2, r2, #24
    c404:	bf58      	it	pl
    c406:	4608      	movpl	r0, r1
    c408:	d5f4      	bpl.n	c3f4 <__swsetup_r+0x34>
    c40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c40e:	81a3      	strh	r3, [r4, #12]
    c410:	f04f 30ff 	mov.w	r0, #4294967295
    c414:	bd38      	pop	{r3, r4, r5, pc}
    c416:	06d1      	lsls	r1, r2, #27
    c418:	d52e      	bpl.n	c478 <__swsetup_r+0xb8>
    c41a:	0752      	lsls	r2, r2, #29
    c41c:	d414      	bmi.n	c448 <__swsetup_r+0x88>
    c41e:	6921      	ldr	r1, [r4, #16]
    c420:	f043 0308 	orr.w	r3, r3, #8
    c424:	81a3      	strh	r3, [r4, #12]
    c426:	b29a      	uxth	r2, r3
    c428:	2900      	cmp	r1, #0
    c42a:	d1d9      	bne.n	c3e0 <__swsetup_r+0x20>
    c42c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    c430:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    c434:	d0d4      	beq.n	c3e0 <__swsetup_r+0x20>
    c436:	4621      	mov	r1, r4
    c438:	4628      	mov	r0, r5
    c43a:	f000 f947 	bl	c6cc <__smakebuf_r>
    c43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c442:	6921      	ldr	r1, [r4, #16]
    c444:	b29a      	uxth	r2, r3
    c446:	e7cb      	b.n	c3e0 <__swsetup_r+0x20>
    c448:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c44a:	b151      	cbz	r1, c462 <__swsetup_r+0xa2>
    c44c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c450:	4291      	cmp	r1, r2
    c452:	d004      	beq.n	c45e <__swsetup_r+0x9e>
    c454:	4628      	mov	r0, r5
    c456:	f7fc f9c5 	bl	87e4 <_free_r>
    c45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c45e:	2200      	movs	r2, #0
    c460:	6322      	str	r2, [r4, #48]	; 0x30
    c462:	6921      	ldr	r1, [r4, #16]
    c464:	2200      	movs	r2, #0
    c466:	e9c4 1200 	strd	r1, r2, [r4]
    c46a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c46e:	e7d7      	b.n	c420 <__swsetup_r+0x60>
    c470:	4618      	mov	r0, r3
    c472:	f7fb f9dd 	bl	7830 <__sinit>
    c476:	e7ac      	b.n	c3d2 <__swsetup_r+0x12>
    c478:	2209      	movs	r2, #9
    c47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c47e:	602a      	str	r2, [r5, #0]
    c480:	f04f 30ff 	mov.w	r0, #4294967295
    c484:	81a3      	strh	r3, [r4, #12]
    c486:	bd38      	pop	{r3, r4, r5, pc}
    c488:	20001b68 	.word	0x20001b68

0000c48c <__fputwc>:
    c48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c490:	b082      	sub	sp, #8
    c492:	4682      	mov	sl, r0
    c494:	4688      	mov	r8, r1
    c496:	4614      	mov	r4, r2
    c498:	f7fb fe1e 	bl	80d8 <__locale_mb_cur_max>
    c49c:	2801      	cmp	r0, #1
    c49e:	d103      	bne.n	c4a8 <__fputwc+0x1c>
    c4a0:	f108 33ff 	add.w	r3, r8, #4294967295
    c4a4:	2bfe      	cmp	r3, #254	; 0xfe
    c4a6:	d936      	bls.n	c516 <__fputwc+0x8a>
    c4a8:	f10d 0904 	add.w	r9, sp, #4
    c4ac:	4642      	mov	r2, r8
    c4ae:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    c4b2:	4649      	mov	r1, r9
    c4b4:	4650      	mov	r0, sl
    c4b6:	f7fe fd81 	bl	afbc <_wcrtomb_r>
    c4ba:	1c42      	adds	r2, r0, #1
    c4bc:	4606      	mov	r6, r0
    c4be:	d032      	beq.n	c526 <__fputwc+0x9a>
    c4c0:	b320      	cbz	r0, c50c <__fputwc+0x80>
    c4c2:	f89d c004 	ldrb.w	ip, [sp, #4]
    c4c6:	2500      	movs	r5, #0
    c4c8:	e009      	b.n	c4de <__fputwc+0x52>
    c4ca:	6823      	ldr	r3, [r4, #0]
    c4cc:	1c5a      	adds	r2, r3, #1
    c4ce:	6022      	str	r2, [r4, #0]
    c4d0:	f883 c000 	strb.w	ip, [r3]
    c4d4:	3501      	adds	r5, #1
    c4d6:	42b5      	cmp	r5, r6
    c4d8:	d218      	bcs.n	c50c <__fputwc+0x80>
    c4da:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    c4de:	68a3      	ldr	r3, [r4, #8]
    c4e0:	3b01      	subs	r3, #1
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	60a3      	str	r3, [r4, #8]
    c4e6:	daf0      	bge.n	c4ca <__fputwc+0x3e>
    c4e8:	69a7      	ldr	r7, [r4, #24]
    c4ea:	42bb      	cmp	r3, r7
    c4ec:	4661      	mov	r1, ip
    c4ee:	4622      	mov	r2, r4
    c4f0:	4650      	mov	r0, sl
    c4f2:	db02      	blt.n	c4fa <__fputwc+0x6e>
    c4f4:	f1bc 0f0a 	cmp.w	ip, #10
    c4f8:	d1e7      	bne.n	c4ca <__fputwc+0x3e>
    c4fa:	f000 f953 	bl	c7a4 <__swbuf_r>
    c4fe:	1c43      	adds	r3, r0, #1
    c500:	d1e8      	bne.n	c4d4 <__fputwc+0x48>
    c502:	4606      	mov	r6, r0
    c504:	4630      	mov	r0, r6
    c506:	b002      	add	sp, #8
    c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c50c:	4646      	mov	r6, r8
    c50e:	4630      	mov	r0, r6
    c510:	b002      	add	sp, #8
    c512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c516:	fa5f fc88 	uxtb.w	ip, r8
    c51a:	f88d c004 	strb.w	ip, [sp, #4]
    c51e:	4606      	mov	r6, r0
    c520:	f10d 0904 	add.w	r9, sp, #4
    c524:	e7cf      	b.n	c4c6 <__fputwc+0x3a>
    c526:	89a3      	ldrh	r3, [r4, #12]
    c528:	4630      	mov	r0, r6
    c52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c52e:	81a3      	strh	r3, [r4, #12]
    c530:	b002      	add	sp, #8
    c532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c536:	bf00      	nop

0000c538 <_fputwc_r>:
    c538:	b530      	push	{r4, r5, lr}
    c53a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    c53c:	f013 0f01 	tst.w	r3, #1
    c540:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c544:	4614      	mov	r4, r2
    c546:	b083      	sub	sp, #12
    c548:	4605      	mov	r5, r0
    c54a:	b29a      	uxth	r2, r3
    c54c:	d101      	bne.n	c552 <_fputwc_r+0x1a>
    c54e:	0598      	lsls	r0, r3, #22
    c550:	d51c      	bpl.n	c58c <_fputwc_r+0x54>
    c552:	0490      	lsls	r0, r2, #18
    c554:	d406      	bmi.n	c564 <_fputwc_r+0x2c>
    c556:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c558:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c55c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c560:	81a3      	strh	r3, [r4, #12]
    c562:	6662      	str	r2, [r4, #100]	; 0x64
    c564:	4622      	mov	r2, r4
    c566:	4628      	mov	r0, r5
    c568:	f7ff ff90 	bl	c48c <__fputwc>
    c56c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c56e:	07da      	lsls	r2, r3, #31
    c570:	4605      	mov	r5, r0
    c572:	d402      	bmi.n	c57a <_fputwc_r+0x42>
    c574:	89a3      	ldrh	r3, [r4, #12]
    c576:	059b      	lsls	r3, r3, #22
    c578:	d502      	bpl.n	c580 <_fputwc_r+0x48>
    c57a:	4628      	mov	r0, r5
    c57c:	b003      	add	sp, #12
    c57e:	bd30      	pop	{r4, r5, pc}
    c580:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c582:	f7fb fe45 	bl	8210 <__retarget_lock_release_recursive>
    c586:	4628      	mov	r0, r5
    c588:	b003      	add	sp, #12
    c58a:	bd30      	pop	{r4, r5, pc}
    c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c58e:	9101      	str	r1, [sp, #4]
    c590:	f7fb fe3c 	bl	820c <__retarget_lock_acquire_recursive>
    c594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c598:	9901      	ldr	r1, [sp, #4]
    c59a:	b29a      	uxth	r2, r3
    c59c:	e7d9      	b.n	c552 <_fputwc_r+0x1a>
    c59e:	bf00      	nop

0000c5a0 <_wcsnrtombs_l>:
    c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a4:	b08b      	sub	sp, #44	; 0x2c
    c5a6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    c5aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
    c5ac:	9103      	str	r1, [sp, #12]
    c5ae:	4681      	mov	r9, r0
    c5b0:	9205      	str	r2, [sp, #20]
    c5b2:	461e      	mov	r6, r3
    c5b4:	f1b8 0f00 	cmp.w	r8, #0
    c5b8:	d05c      	beq.n	c674 <_wcsnrtombs_l+0xd4>
    c5ba:	9b03      	ldr	r3, [sp, #12]
    c5bc:	2b00      	cmp	r3, #0
    c5be:	d05e      	beq.n	c67e <_wcsnrtombs_l+0xde>
    c5c0:	9b05      	ldr	r3, [sp, #20]
    c5c2:	681d      	ldr	r5, [r3, #0]
    c5c4:	2f00      	cmp	r7, #0
    c5c6:	d06a      	beq.n	c69e <_wcsnrtombs_l+0xfe>
    c5c8:	1e74      	subs	r4, r6, #1
    c5ca:	b34e      	cbz	r6, c620 <_wcsnrtombs_l+0x80>
    c5cc:	9b03      	ldr	r3, [sp, #12]
    c5ce:	9304      	str	r3, [sp, #16]
    c5d0:	3d04      	subs	r5, #4
    c5d2:	2600      	movs	r6, #0
    c5d4:	9501      	str	r5, [sp, #4]
    c5d6:	e00b      	b.n	c5f0 <_wcsnrtombs_l+0x50>
    c5d8:	9b03      	ldr	r3, [sp, #12]
    c5da:	bb2b      	cbnz	r3, c628 <_wcsnrtombs_l+0x88>
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	681a      	ldr	r2, [r3, #0]
    c5e0:	2a00      	cmp	r2, #0
    c5e2:	d03a      	beq.n	c65a <_wcsnrtombs_l+0xba>
    c5e4:	45bc      	cmp	ip, r7
    c5e6:	d25c      	bcs.n	c6a2 <_wcsnrtombs_l+0x102>
    c5e8:	3c01      	subs	r4, #1
    c5ea:	1c63      	adds	r3, r4, #1
    c5ec:	4666      	mov	r6, ip
    c5ee:	d017      	beq.n	c620 <_wcsnrtombs_l+0x80>
    c5f0:	f8d8 3000 	ldr.w	r3, [r8]
    c5f4:	9302      	str	r3, [sp, #8]
    c5f6:	9b01      	ldr	r3, [sp, #4]
    c5f8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    c5fc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c600:	9301      	str	r3, [sp, #4]
    c602:	a907      	add	r1, sp, #28
    c604:	4643      	mov	r3, r8
    c606:	4648      	mov	r0, r9
    c608:	f8d8 b004 	ldr.w	fp, [r8, #4]
    c60c:	47a8      	blx	r5
    c60e:	1c42      	adds	r2, r0, #1
    c610:	d03a      	beq.n	c688 <_wcsnrtombs_l+0xe8>
    c612:	eb00 0c06 	add.w	ip, r0, r6
    c616:	45bc      	cmp	ip, r7
    c618:	d9de      	bls.n	c5d8 <_wcsnrtombs_l+0x38>
    c61a:	9b02      	ldr	r3, [sp, #8]
    c61c:	e9c8 3b00 	strd	r3, fp, [r8]
    c620:	4630      	mov	r0, r6
    c622:	b00b      	add	sp, #44	; 0x2c
    c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c628:	2800      	cmp	r0, #0
    c62a:	dd0e      	ble.n	c64a <_wcsnrtombs_l+0xaa>
    c62c:	9b04      	ldr	r3, [sp, #16]
    c62e:	9d01      	ldr	r5, [sp, #4]
    c630:	4418      	add	r0, r3
    c632:	1e5a      	subs	r2, r3, #1
    c634:	a907      	add	r1, sp, #28
    c636:	f100 3eff 	add.w	lr, r0, #4294967295
    c63a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c63e:	f802 3f01 	strb.w	r3, [r2, #1]!
    c642:	4572      	cmp	r2, lr
    c644:	d1f9      	bne.n	c63a <_wcsnrtombs_l+0x9a>
    c646:	9501      	str	r5, [sp, #4]
    c648:	9004      	str	r0, [sp, #16]
    c64a:	9b05      	ldr	r3, [sp, #20]
    c64c:	681a      	ldr	r2, [r3, #0]
    c64e:	3204      	adds	r2, #4
    c650:	601a      	str	r2, [r3, #0]
    c652:	9b01      	ldr	r3, [sp, #4]
    c654:	681a      	ldr	r2, [r3, #0]
    c656:	2a00      	cmp	r2, #0
    c658:	d1c4      	bne.n	c5e4 <_wcsnrtombs_l+0x44>
    c65a:	9b03      	ldr	r3, [sp, #12]
    c65c:	b10b      	cbz	r3, c662 <_wcsnrtombs_l+0xc2>
    c65e:	9b05      	ldr	r3, [sp, #20]
    c660:	601a      	str	r2, [r3, #0]
    c662:	f10c 36ff 	add.w	r6, ip, #4294967295
    c666:	2200      	movs	r2, #0
    c668:	4630      	mov	r0, r6
    c66a:	f8c8 2000 	str.w	r2, [r8]
    c66e:	b00b      	add	sp, #44	; 0x2c
    c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c674:	9b03      	ldr	r3, [sp, #12]
    c676:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    c67a:	2b00      	cmp	r3, #0
    c67c:	d1a0      	bne.n	c5c0 <_wcsnrtombs_l+0x20>
    c67e:	9b05      	ldr	r3, [sp, #20]
    c680:	f04f 37ff 	mov.w	r7, #4294967295
    c684:	681d      	ldr	r5, [r3, #0]
    c686:	e79f      	b.n	c5c8 <_wcsnrtombs_l+0x28>
    c688:	4606      	mov	r6, r0
    c68a:	218a      	movs	r1, #138	; 0x8a
    c68c:	2200      	movs	r2, #0
    c68e:	4630      	mov	r0, r6
    c690:	f8c9 1000 	str.w	r1, [r9]
    c694:	f8c8 2000 	str.w	r2, [r8]
    c698:	b00b      	add	sp, #44	; 0x2c
    c69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c69e:	463e      	mov	r6, r7
    c6a0:	e7be      	b.n	c620 <_wcsnrtombs_l+0x80>
    c6a2:	4666      	mov	r6, ip
    c6a4:	e7bc      	b.n	c620 <_wcsnrtombs_l+0x80>
    c6a6:	bf00      	nop

0000c6a8 <_wcsnrtombs_r>:
    c6a8:	b510      	push	{r4, lr}
    c6aa:	b084      	sub	sp, #16
    c6ac:	4c05      	ldr	r4, [pc, #20]	; (c6c4 <_wcsnrtombs_r+0x1c>)
    c6ae:	9806      	ldr	r0, [sp, #24]
    c6b0:	9000      	str	r0, [sp, #0]
    c6b2:	9807      	ldr	r0, [sp, #28]
    c6b4:	9001      	str	r0, [sp, #4]
    c6b6:	4804      	ldr	r0, [pc, #16]	; (c6c8 <_wcsnrtombs_r+0x20>)
    c6b8:	6800      	ldr	r0, [r0, #0]
    c6ba:	9402      	str	r4, [sp, #8]
    c6bc:	f7ff ff70 	bl	c5a0 <_wcsnrtombs_l>
    c6c0:	b004      	add	sp, #16
    c6c2:	bd10      	pop	{r4, pc}
    c6c4:	200015e0 	.word	0x200015e0
    c6c8:	20001b68 	.word	0x20001b68

0000c6cc <__smakebuf_r>:
    c6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6d0:	898b      	ldrh	r3, [r1, #12]
    c6d2:	460c      	mov	r4, r1
    c6d4:	0799      	lsls	r1, r3, #30
    c6d6:	b096      	sub	sp, #88	; 0x58
    c6d8:	d508      	bpl.n	c6ec <__smakebuf_r+0x20>
    c6da:	f104 0343 	add.w	r3, r4, #67	; 0x43
    c6de:	2201      	movs	r2, #1
    c6e0:	e9c4 3204 	strd	r3, r2, [r4, #16]
    c6e4:	6023      	str	r3, [r4, #0]
    c6e6:	b016      	add	sp, #88	; 0x58
    c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c6f0:	2900      	cmp	r1, #0
    c6f2:	4606      	mov	r6, r0
    c6f4:	db25      	blt.n	c742 <__smakebuf_r+0x76>
    c6f6:	466a      	mov	r2, sp
    c6f8:	f000 f8ac 	bl	c854 <_fstat_r>
    c6fc:	2800      	cmp	r0, #0
    c6fe:	db1f      	blt.n	c740 <__smakebuf_r+0x74>
    c700:	9d01      	ldr	r5, [sp, #4]
    c702:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c706:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    c70a:	fab5 f585 	clz	r5, r5
    c70e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c712:	096d      	lsrs	r5, r5, #5
    c714:	f44f 6700 	mov.w	r7, #2048	; 0x800
    c718:	4641      	mov	r1, r8
    c71a:	4630      	mov	r0, r6
    c71c:	f7f9 fa9e 	bl	5c5c <_malloc_r>
    c720:	b1e0      	cbz	r0, c75c <__smakebuf_r+0x90>
    c722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c726:	f8c4 8014 	str.w	r8, [r4, #20]
    c72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c72e:	6020      	str	r0, [r4, #0]
    c730:	6120      	str	r0, [r4, #16]
    c732:	81a3      	strh	r3, [r4, #12]
    c734:	bb35      	cbnz	r5, c784 <__smakebuf_r+0xb8>
    c736:	433b      	orrs	r3, r7
    c738:	81a3      	strh	r3, [r4, #12]
    c73a:	b016      	add	sp, #88	; 0x58
    c73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c740:	89a3      	ldrh	r3, [r4, #12]
    c742:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    c746:	d019      	beq.n	c77c <__smakebuf_r+0xb0>
    c748:	f04f 0840 	mov.w	r8, #64	; 0x40
    c74c:	2500      	movs	r5, #0
    c74e:	4641      	mov	r1, r8
    c750:	4630      	mov	r0, r6
    c752:	462f      	mov	r7, r5
    c754:	f7f9 fa82 	bl	5c5c <_malloc_r>
    c758:	2800      	cmp	r0, #0
    c75a:	d1e2      	bne.n	c722 <__smakebuf_r+0x56>
    c75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c760:	059a      	lsls	r2, r3, #22
    c762:	d4c0      	bmi.n	c6e6 <__smakebuf_r+0x1a>
    c764:	f023 0303 	bic.w	r3, r3, #3
    c768:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c76c:	f043 0302 	orr.w	r3, r3, #2
    c770:	2101      	movs	r1, #1
    c772:	e9c4 2104 	strd	r2, r1, [r4, #16]
    c776:	81a3      	strh	r3, [r4, #12]
    c778:	6022      	str	r2, [r4, #0]
    c77a:	e7b4      	b.n	c6e6 <__smakebuf_r+0x1a>
    c77c:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c780:	462f      	mov	r7, r5
    c782:	e7c9      	b.n	c718 <__smakebuf_r+0x4c>
    c784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c788:	4630      	mov	r0, r6
    c78a:	f000 f879 	bl	c880 <_isatty_r>
    c78e:	b910      	cbnz	r0, c796 <__smakebuf_r+0xca>
    c790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c794:	e7cf      	b.n	c736 <__smakebuf_r+0x6a>
    c796:	89a3      	ldrh	r3, [r4, #12]
    c798:	f023 0303 	bic.w	r3, r3, #3
    c79c:	f043 0301 	orr.w	r3, r3, #1
    c7a0:	b21b      	sxth	r3, r3
    c7a2:	e7c8      	b.n	c736 <__smakebuf_r+0x6a>

0000c7a4 <__swbuf_r>:
    c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7a6:	460d      	mov	r5, r1
    c7a8:	4614      	mov	r4, r2
    c7aa:	4606      	mov	r6, r0
    c7ac:	b110      	cbz	r0, c7b4 <__swbuf_r+0x10>
    c7ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d04c      	beq.n	c84e <__swbuf_r+0xaa>
    c7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c7b8:	69a3      	ldr	r3, [r4, #24]
    c7ba:	60a3      	str	r3, [r4, #8]
    c7bc:	0717      	lsls	r7, r2, #28
    c7be:	b290      	uxth	r0, r2
    c7c0:	d51b      	bpl.n	c7fa <__swbuf_r+0x56>
    c7c2:	6923      	ldr	r3, [r4, #16]
    c7c4:	b1cb      	cbz	r3, c7fa <__swbuf_r+0x56>
    c7c6:	b2ed      	uxtb	r5, r5
    c7c8:	0481      	lsls	r1, r0, #18
    c7ca:	462f      	mov	r7, r5
    c7cc:	d522      	bpl.n	c814 <__swbuf_r+0x70>
    c7ce:	6822      	ldr	r2, [r4, #0]
    c7d0:	6961      	ldr	r1, [r4, #20]
    c7d2:	1ad3      	subs	r3, r2, r3
    c7d4:	4299      	cmp	r1, r3
    c7d6:	dd29      	ble.n	c82c <__swbuf_r+0x88>
    c7d8:	3301      	adds	r3, #1
    c7da:	68a1      	ldr	r1, [r4, #8]
    c7dc:	3901      	subs	r1, #1
    c7de:	60a1      	str	r1, [r4, #8]
    c7e0:	1c51      	adds	r1, r2, #1
    c7e2:	6021      	str	r1, [r4, #0]
    c7e4:	7015      	strb	r5, [r2, #0]
    c7e6:	6962      	ldr	r2, [r4, #20]
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d027      	beq.n	c83c <__swbuf_r+0x98>
    c7ec:	89a3      	ldrh	r3, [r4, #12]
    c7ee:	07db      	lsls	r3, r3, #31
    c7f0:	d501      	bpl.n	c7f6 <__swbuf_r+0x52>
    c7f2:	2d0a      	cmp	r5, #10
    c7f4:	d022      	beq.n	c83c <__swbuf_r+0x98>
    c7f6:	4638      	mov	r0, r7
    c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c7fa:	4621      	mov	r1, r4
    c7fc:	4630      	mov	r0, r6
    c7fe:	f7ff fddf 	bl	c3c0 <__swsetup_r>
    c802:	bb08      	cbnz	r0, c848 <__swbuf_r+0xa4>
    c804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c808:	6923      	ldr	r3, [r4, #16]
    c80a:	b290      	uxth	r0, r2
    c80c:	b2ed      	uxtb	r5, r5
    c80e:	0481      	lsls	r1, r0, #18
    c810:	462f      	mov	r7, r5
    c812:	d4dc      	bmi.n	c7ce <__swbuf_r+0x2a>
    c814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c818:	81a2      	strh	r2, [r4, #12]
    c81a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c81c:	6961      	ldr	r1, [r4, #20]
    c81e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    c822:	6662      	str	r2, [r4, #100]	; 0x64
    c824:	6822      	ldr	r2, [r4, #0]
    c826:	1ad3      	subs	r3, r2, r3
    c828:	4299      	cmp	r1, r3
    c82a:	dcd5      	bgt.n	c7d8 <__swbuf_r+0x34>
    c82c:	4621      	mov	r1, r4
    c82e:	4630      	mov	r0, r6
    c830:	f7fd fb9a 	bl	9f68 <_fflush_r>
    c834:	b940      	cbnz	r0, c848 <__swbuf_r+0xa4>
    c836:	6822      	ldr	r2, [r4, #0]
    c838:	2301      	movs	r3, #1
    c83a:	e7ce      	b.n	c7da <__swbuf_r+0x36>
    c83c:	4621      	mov	r1, r4
    c83e:	4630      	mov	r0, r6
    c840:	f7fd fb92 	bl	9f68 <_fflush_r>
    c844:	2800      	cmp	r0, #0
    c846:	d0d6      	beq.n	c7f6 <__swbuf_r+0x52>
    c848:	f04f 37ff 	mov.w	r7, #4294967295
    c84c:	e7d3      	b.n	c7f6 <__swbuf_r+0x52>
    c84e:	f7fa ffef 	bl	7830 <__sinit>
    c852:	e7af      	b.n	c7b4 <__swbuf_r+0x10>

0000c854 <_fstat_r>:
    c854:	b570      	push	{r4, r5, r6, lr}
    c856:	460c      	mov	r4, r1
    c858:	4d08      	ldr	r5, [pc, #32]	; (c87c <_fstat_r+0x28>)
    c85a:	4603      	mov	r3, r0
    c85c:	2600      	movs	r6, #0
    c85e:	4620      	mov	r0, r4
    c860:	4611      	mov	r1, r2
    c862:	461c      	mov	r4, r3
    c864:	602e      	str	r6, [r5, #0]
    c866:	f7f8 f845 	bl	48f4 <_fstat>
    c86a:	1c43      	adds	r3, r0, #1
    c86c:	d000      	beq.n	c870 <_fstat_r+0x1c>
    c86e:	bd70      	pop	{r4, r5, r6, pc}
    c870:	682b      	ldr	r3, [r5, #0]
    c872:	2b00      	cmp	r3, #0
    c874:	d0fb      	beq.n	c86e <_fstat_r+0x1a>
    c876:	6023      	str	r3, [r4, #0]
    c878:	bd70      	pop	{r4, r5, r6, pc}
    c87a:	bf00      	nop
    c87c:	200032e4 	.word	0x200032e4

0000c880 <_isatty_r>:
    c880:	b538      	push	{r3, r4, r5, lr}
    c882:	4d07      	ldr	r5, [pc, #28]	; (c8a0 <_isatty_r+0x20>)
    c884:	2200      	movs	r2, #0
    c886:	4604      	mov	r4, r0
    c888:	4608      	mov	r0, r1
    c88a:	602a      	str	r2, [r5, #0]
    c88c:	f7f8 f838 	bl	4900 <_isatty>
    c890:	1c43      	adds	r3, r0, #1
    c892:	d000      	beq.n	c896 <_isatty_r+0x16>
    c894:	bd38      	pop	{r3, r4, r5, pc}
    c896:	682b      	ldr	r3, [r5, #0]
    c898:	2b00      	cmp	r3, #0
    c89a:	d0fb      	beq.n	c894 <_isatty_r+0x14>
    c89c:	6023      	str	r3, [r4, #0]
    c89e:	bd38      	pop	{r3, r4, r5, pc}
    c8a0:	200032e4 	.word	0x200032e4

0000c8a4 <__aeabi_drsub>:
    c8a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c8a8:	e002      	b.n	c8b0 <__adddf3>
    c8aa:	bf00      	nop

0000c8ac <__aeabi_dsub>:
    c8ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c8b0 <__adddf3>:
    c8b0:	b530      	push	{r4, r5, lr}
    c8b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c8b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c8ba:	ea94 0f05 	teq	r4, r5
    c8be:	bf08      	it	eq
    c8c0:	ea90 0f02 	teqeq	r0, r2
    c8c4:	bf1f      	itttt	ne
    c8c6:	ea54 0c00 	orrsne.w	ip, r4, r0
    c8ca:	ea55 0c02 	orrsne.w	ip, r5, r2
    c8ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c8d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c8d6:	f000 80e2 	beq.w	ca9e <__adddf3+0x1ee>
    c8da:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c8de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c8e2:	bfb8      	it	lt
    c8e4:	426d      	neglt	r5, r5
    c8e6:	dd0c      	ble.n	c902 <__adddf3+0x52>
    c8e8:	442c      	add	r4, r5
    c8ea:	ea80 0202 	eor.w	r2, r0, r2
    c8ee:	ea81 0303 	eor.w	r3, r1, r3
    c8f2:	ea82 0000 	eor.w	r0, r2, r0
    c8f6:	ea83 0101 	eor.w	r1, r3, r1
    c8fa:	ea80 0202 	eor.w	r2, r0, r2
    c8fe:	ea81 0303 	eor.w	r3, r1, r3
    c902:	2d36      	cmp	r5, #54	; 0x36
    c904:	bf88      	it	hi
    c906:	bd30      	pophi	{r4, r5, pc}
    c908:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c90c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c910:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c914:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c918:	d002      	beq.n	c920 <__adddf3+0x70>
    c91a:	4240      	negs	r0, r0
    c91c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c920:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c924:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c928:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c92c:	d002      	beq.n	c934 <__adddf3+0x84>
    c92e:	4252      	negs	r2, r2
    c930:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c934:	ea94 0f05 	teq	r4, r5
    c938:	f000 80a7 	beq.w	ca8a <__adddf3+0x1da>
    c93c:	f1a4 0401 	sub.w	r4, r4, #1
    c940:	f1d5 0e20 	rsbs	lr, r5, #32
    c944:	db0d      	blt.n	c962 <__adddf3+0xb2>
    c946:	fa02 fc0e 	lsl.w	ip, r2, lr
    c94a:	fa22 f205 	lsr.w	r2, r2, r5
    c94e:	1880      	adds	r0, r0, r2
    c950:	f141 0100 	adc.w	r1, r1, #0
    c954:	fa03 f20e 	lsl.w	r2, r3, lr
    c958:	1880      	adds	r0, r0, r2
    c95a:	fa43 f305 	asr.w	r3, r3, r5
    c95e:	4159      	adcs	r1, r3
    c960:	e00e      	b.n	c980 <__adddf3+0xd0>
    c962:	f1a5 0520 	sub.w	r5, r5, #32
    c966:	f10e 0e20 	add.w	lr, lr, #32
    c96a:	2a01      	cmp	r2, #1
    c96c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c970:	bf28      	it	cs
    c972:	f04c 0c02 	orrcs.w	ip, ip, #2
    c976:	fa43 f305 	asr.w	r3, r3, r5
    c97a:	18c0      	adds	r0, r0, r3
    c97c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c980:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c984:	d507      	bpl.n	c996 <__adddf3+0xe6>
    c986:	f04f 0e00 	mov.w	lr, #0
    c98a:	f1dc 0c00 	rsbs	ip, ip, #0
    c98e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c992:	eb6e 0101 	sbc.w	r1, lr, r1
    c996:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c99a:	d31b      	bcc.n	c9d4 <__adddf3+0x124>
    c99c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c9a0:	d30c      	bcc.n	c9bc <__adddf3+0x10c>
    c9a2:	0849      	lsrs	r1, r1, #1
    c9a4:	ea5f 0030 	movs.w	r0, r0, rrx
    c9a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c9ac:	f104 0401 	add.w	r4, r4, #1
    c9b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c9b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c9b8:	f080 809a 	bcs.w	caf0 <__adddf3+0x240>
    c9bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c9c0:	bf08      	it	eq
    c9c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c9c6:	f150 0000 	adcs.w	r0, r0, #0
    c9ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c9ce:	ea41 0105 	orr.w	r1, r1, r5
    c9d2:	bd30      	pop	{r4, r5, pc}
    c9d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c9d8:	4140      	adcs	r0, r0
    c9da:	eb41 0101 	adc.w	r1, r1, r1
    c9de:	3c01      	subs	r4, #1
    c9e0:	bf28      	it	cs
    c9e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c9e6:	d2e9      	bcs.n	c9bc <__adddf3+0x10c>
    c9e8:	f091 0f00 	teq	r1, #0
    c9ec:	bf04      	itt	eq
    c9ee:	4601      	moveq	r1, r0
    c9f0:	2000      	moveq	r0, #0
    c9f2:	fab1 f381 	clz	r3, r1
    c9f6:	bf08      	it	eq
    c9f8:	3320      	addeq	r3, #32
    c9fa:	f1a3 030b 	sub.w	r3, r3, #11
    c9fe:	f1b3 0220 	subs.w	r2, r3, #32
    ca02:	da0c      	bge.n	ca1e <__adddf3+0x16e>
    ca04:	320c      	adds	r2, #12
    ca06:	dd08      	ble.n	ca1a <__adddf3+0x16a>
    ca08:	f102 0c14 	add.w	ip, r2, #20
    ca0c:	f1c2 020c 	rsb	r2, r2, #12
    ca10:	fa01 f00c 	lsl.w	r0, r1, ip
    ca14:	fa21 f102 	lsr.w	r1, r1, r2
    ca18:	e00c      	b.n	ca34 <__adddf3+0x184>
    ca1a:	f102 0214 	add.w	r2, r2, #20
    ca1e:	bfd8      	it	le
    ca20:	f1c2 0c20 	rsble	ip, r2, #32
    ca24:	fa01 f102 	lsl.w	r1, r1, r2
    ca28:	fa20 fc0c 	lsr.w	ip, r0, ip
    ca2c:	bfdc      	itt	le
    ca2e:	ea41 010c 	orrle.w	r1, r1, ip
    ca32:	4090      	lslle	r0, r2
    ca34:	1ae4      	subs	r4, r4, r3
    ca36:	bfa2      	ittt	ge
    ca38:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ca3c:	4329      	orrge	r1, r5
    ca3e:	bd30      	popge	{r4, r5, pc}
    ca40:	ea6f 0404 	mvn.w	r4, r4
    ca44:	3c1f      	subs	r4, #31
    ca46:	da1c      	bge.n	ca82 <__adddf3+0x1d2>
    ca48:	340c      	adds	r4, #12
    ca4a:	dc0e      	bgt.n	ca6a <__adddf3+0x1ba>
    ca4c:	f104 0414 	add.w	r4, r4, #20
    ca50:	f1c4 0220 	rsb	r2, r4, #32
    ca54:	fa20 f004 	lsr.w	r0, r0, r4
    ca58:	fa01 f302 	lsl.w	r3, r1, r2
    ca5c:	ea40 0003 	orr.w	r0, r0, r3
    ca60:	fa21 f304 	lsr.w	r3, r1, r4
    ca64:	ea45 0103 	orr.w	r1, r5, r3
    ca68:	bd30      	pop	{r4, r5, pc}
    ca6a:	f1c4 040c 	rsb	r4, r4, #12
    ca6e:	f1c4 0220 	rsb	r2, r4, #32
    ca72:	fa20 f002 	lsr.w	r0, r0, r2
    ca76:	fa01 f304 	lsl.w	r3, r1, r4
    ca7a:	ea40 0003 	orr.w	r0, r0, r3
    ca7e:	4629      	mov	r1, r5
    ca80:	bd30      	pop	{r4, r5, pc}
    ca82:	fa21 f004 	lsr.w	r0, r1, r4
    ca86:	4629      	mov	r1, r5
    ca88:	bd30      	pop	{r4, r5, pc}
    ca8a:	f094 0f00 	teq	r4, #0
    ca8e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ca92:	bf06      	itte	eq
    ca94:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ca98:	3401      	addeq	r4, #1
    ca9a:	3d01      	subne	r5, #1
    ca9c:	e74e      	b.n	c93c <__adddf3+0x8c>
    ca9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    caa2:	bf18      	it	ne
    caa4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    caa8:	d029      	beq.n	cafe <__adddf3+0x24e>
    caaa:	ea94 0f05 	teq	r4, r5
    caae:	bf08      	it	eq
    cab0:	ea90 0f02 	teqeq	r0, r2
    cab4:	d005      	beq.n	cac2 <__adddf3+0x212>
    cab6:	ea54 0c00 	orrs.w	ip, r4, r0
    caba:	bf04      	itt	eq
    cabc:	4619      	moveq	r1, r3
    cabe:	4610      	moveq	r0, r2
    cac0:	bd30      	pop	{r4, r5, pc}
    cac2:	ea91 0f03 	teq	r1, r3
    cac6:	bf1e      	ittt	ne
    cac8:	2100      	movne	r1, #0
    caca:	2000      	movne	r0, #0
    cacc:	bd30      	popne	{r4, r5, pc}
    cace:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    cad2:	d105      	bne.n	cae0 <__adddf3+0x230>
    cad4:	0040      	lsls	r0, r0, #1
    cad6:	4149      	adcs	r1, r1
    cad8:	bf28      	it	cs
    cada:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cade:	bd30      	pop	{r4, r5, pc}
    cae0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cae4:	bf3c      	itt	cc
    cae6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    caea:	bd30      	popcc	{r4, r5, pc}
    caec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    caf0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    caf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    caf8:	f04f 0000 	mov.w	r0, #0
    cafc:	bd30      	pop	{r4, r5, pc}
    cafe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cb02:	bf1a      	itte	ne
    cb04:	4619      	movne	r1, r3
    cb06:	4610      	movne	r0, r2
    cb08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cb0c:	bf1c      	itt	ne
    cb0e:	460b      	movne	r3, r1
    cb10:	4602      	movne	r2, r0
    cb12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cb16:	bf06      	itte	eq
    cb18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cb1c:	ea91 0f03 	teqeq	r1, r3
    cb20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cb24:	bd30      	pop	{r4, r5, pc}
    cb26:	bf00      	nop

0000cb28 <__aeabi_ui2d>:
    cb28:	f090 0f00 	teq	r0, #0
    cb2c:	bf04      	itt	eq
    cb2e:	2100      	moveq	r1, #0
    cb30:	4770      	bxeq	lr
    cb32:	b530      	push	{r4, r5, lr}
    cb34:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb38:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb3c:	f04f 0500 	mov.w	r5, #0
    cb40:	f04f 0100 	mov.w	r1, #0
    cb44:	e750      	b.n	c9e8 <__adddf3+0x138>
    cb46:	bf00      	nop

0000cb48 <__aeabi_i2d>:
    cb48:	f090 0f00 	teq	r0, #0
    cb4c:	bf04      	itt	eq
    cb4e:	2100      	moveq	r1, #0
    cb50:	4770      	bxeq	lr
    cb52:	b530      	push	{r4, r5, lr}
    cb54:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb58:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cb60:	bf48      	it	mi
    cb62:	4240      	negmi	r0, r0
    cb64:	f04f 0100 	mov.w	r1, #0
    cb68:	e73e      	b.n	c9e8 <__adddf3+0x138>
    cb6a:	bf00      	nop

0000cb6c <__aeabi_f2d>:
    cb6c:	0042      	lsls	r2, r0, #1
    cb6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cb72:	ea4f 0131 	mov.w	r1, r1, rrx
    cb76:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cb7a:	bf1f      	itttt	ne
    cb7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cb88:	4770      	bxne	lr
    cb8a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    cb8e:	bf08      	it	eq
    cb90:	4770      	bxeq	lr
    cb92:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    cb96:	bf04      	itt	eq
    cb98:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    cb9c:	4770      	bxeq	lr
    cb9e:	b530      	push	{r4, r5, lr}
    cba0:	f44f 7460 	mov.w	r4, #896	; 0x380
    cba4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cbac:	e71c      	b.n	c9e8 <__adddf3+0x138>
    cbae:	bf00      	nop

0000cbb0 <__aeabi_ul2d>:
    cbb0:	ea50 0201 	orrs.w	r2, r0, r1
    cbb4:	bf08      	it	eq
    cbb6:	4770      	bxeq	lr
    cbb8:	b530      	push	{r4, r5, lr}
    cbba:	f04f 0500 	mov.w	r5, #0
    cbbe:	e00a      	b.n	cbd6 <__aeabi_l2d+0x16>

0000cbc0 <__aeabi_l2d>:
    cbc0:	ea50 0201 	orrs.w	r2, r0, r1
    cbc4:	bf08      	it	eq
    cbc6:	4770      	bxeq	lr
    cbc8:	b530      	push	{r4, r5, lr}
    cbca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cbce:	d502      	bpl.n	cbd6 <__aeabi_l2d+0x16>
    cbd0:	4240      	negs	r0, r0
    cbd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cbda:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cbde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cbe2:	f43f aed8 	beq.w	c996 <__adddf3+0xe6>
    cbe6:	f04f 0203 	mov.w	r2, #3
    cbea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbee:	bf18      	it	ne
    cbf0:	3203      	addne	r2, #3
    cbf2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbf6:	bf18      	it	ne
    cbf8:	3203      	addne	r2, #3
    cbfa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cbfe:	f1c2 0320 	rsb	r3, r2, #32
    cc02:	fa00 fc03 	lsl.w	ip, r0, r3
    cc06:	fa20 f002 	lsr.w	r0, r0, r2
    cc0a:	fa01 fe03 	lsl.w	lr, r1, r3
    cc0e:	ea40 000e 	orr.w	r0, r0, lr
    cc12:	fa21 f102 	lsr.w	r1, r1, r2
    cc16:	4414      	add	r4, r2
    cc18:	e6bd      	b.n	c996 <__adddf3+0xe6>
    cc1a:	bf00      	nop

0000cc1c <__aeabi_d2lz>:
    cc1c:	b508      	push	{r3, lr}
    cc1e:	4602      	mov	r2, r0
    cc20:	460b      	mov	r3, r1
    cc22:	ec43 2b17 	vmov	d7, r2, r3
    cc26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc2e:	d403      	bmi.n	cc38 <__aeabi_d2lz+0x1c>
    cc30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cc34:	f000 b80c 	b.w	cc50 <__aeabi_d2ulz>
    cc38:	eeb1 7b47 	vneg.f64	d7, d7
    cc3c:	ec51 0b17 	vmov	r0, r1, d7
    cc40:	f000 f806 	bl	cc50 <__aeabi_d2ulz>
    cc44:	4240      	negs	r0, r0
    cc46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cc4a:	bd08      	pop	{r3, pc}
    cc4c:	0000      	movs	r0, r0
	...

0000cc50 <__aeabi_d2ulz>:
    cc50:	ed9f 6b0b 	vldr	d6, [pc, #44]	; cc80 <__aeabi_d2ulz+0x30>
    cc54:	ec41 0b17 	vmov	d7, r0, r1
    cc58:	ed9f 5b0b 	vldr	d5, [pc, #44]	; cc88 <__aeabi_d2ulz+0x38>
    cc5c:	ee27 6b06 	vmul.f64	d6, d7, d6
    cc60:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    cc64:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    cc68:	eea4 7b45 	vfms.f64	d7, d4, d5
    cc6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    cc70:	ee16 1a10 	vmov	r1, s12
    cc74:	ee17 0a90 	vmov	r0, s15
    cc78:	4770      	bx	lr
    cc7a:	bf00      	nop
    cc7c:	f3af 8000 	nop.w
    cc80:	00000000 	.word	0x00000000
    cc84:	3df00000 	.word	0x3df00000
    cc88:	00000000 	.word	0x00000000
    cc8c:	41f00000 	.word	0x41f00000

0000cc90 <___reboot_Teensyduino__veneer>:
    cc90:	f85f f000 	ldr.w	pc, [pc]	; cc94 <___reboot_Teensyduino__veneer+0x4>
    cc94:	60001ed1 	.word	0x60001ed1

0000cc98 <___ZN7TwoWire5beginEv_veneer>:
    cc98:	f85f f000 	ldr.w	pc, [pc]	; cc9c <___ZN7TwoWire5beginEv_veneer+0x4>
    cc9c:	60001769 	.word	0x60001769

0000cca0 <___init_veneer>:
    cca0:	f85f f000 	ldr.w	pc, [pc]	; cca4 <___init_veneer+0x4>
    cca4:	60001f79 	.word	0x60001f79
	...

Disassembly of section .fini:

0000ccb0 <_fini>:
    ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccb2:	bf00      	nop
