
C:\Users\Kent4\Projects\Wind_Power\WWP_2024_Turbine_Control_Code\build\src.ino.hex/src.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f9d0 	bl	600017d0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f97c 	bl	600017e0 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fb9e 	bl	60001c5c <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fd35 	bl	60001fa0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f9ac 	bl	600018d8 <configure_external_ram>
	analog_init();
60001580:	f000 fcd0 	bl	60001f24 <analog_init>
	pwm_init();
60001584:	f000 fd1c 	bl	60001fc0 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fb96 	bl	60001cb8 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f922 	bl	600017d4 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fc27 	bl	60001de8 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f91b 	bl	600017dc <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f917 	bl	600017d8 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fd01 	bl	60001fb0 <____libc_init_array_veneer>
	main();
600015ae:	f000 fd03 	bl	60001fb8 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000c6f8 	.word	0x0000c6f8
600015c0:	600021fc 	.word	0x600021fc
600015c4:	00000000 	.word	0x00000000
600015c8:	20001ec0 	.word	0x20001ec0
600015cc:	6000e8f8 	.word	0x6000e8f8
600015d0:	20000000 	.word	0x20000000
600015d4:	20003a20 	.word	0x20003a20
600015d8:	20001ec0 	.word	0x20001ec0
600015dc:	20001c00 	.word	0x20001c00
600015e0:	00004175 	.word	0x00004175
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00002521 	.word	0x00002521
600015f4:	200039c0 	.word	0x200039c0
600015f8:	00002525 	.word	0x00002525
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	200039c4 	.word	0x200039c4
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001654:	6943      	ldr	r3, [r0, #20]
60001656:	4a0a      	ldr	r2, [pc, #40]	; (60001680 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001658:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000165c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165e:	7a03      	ldrb	r3, [r0, #8]
60001660:	4c08      	ldr	r4, [pc, #32]	; (60001684 <TwoWire::configSDApin(unsigned char)+0x30>)
60001662:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001666:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000166c:	68c2      	ldr	r2, [r0, #12]
6000166e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001670:	6903      	ldr	r3, [r0, #16]
60001672:	b10b      	cbz	r3, 60001678 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001674:	6942      	ldr	r2, [r0, #20]
60001676:	601a      	str	r2, [r3, #0]
	}
}
60001678:	f85d 4b04 	ldr.w	r4, [sp], #4
6000167c:	4770      	bx	lr
6000167e:	bf00      	nop
60001680:	20000acc 	.word	0x20000acc
60001684:	0001f861 	.word	0x0001f861

60001688 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001688:	6943      	ldr	r3, [r0, #20]
6000168a:	7e02      	ldrb	r2, [r0, #24]
6000168c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001690:	f892 c008 	ldrb.w	ip, [r2, #8]
60001694:	458c      	cmp	ip, r1
60001696:	d01c      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001698:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000169a:	2aff      	cmp	r2, #255	; 0xff
6000169c:	d019      	beq.n	600016d2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
6000169e:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016a0:	b510      	push	{r4, lr}
600016a2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016a4:	d016      	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016a6:	7e1a      	ldrb	r2, [r3, #24]
600016a8:	2aff      	cmp	r2, #255	; 0xff
600016aa:	d006      	beq.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016ac:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
600016b2:	6812      	ldr	r2, [r2, #0]
600016b4:	421a      	tst	r2, r3
600016b6:	d101      	bne.n	600016bc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016b8:	7621      	strb	r1, [r4, #24]
}
600016ba:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016bc:	4b06      	ldr	r3, [pc, #24]	; (600016d8 <TwoWire::setSDA(unsigned char)+0x50>)
600016be:	2205      	movs	r2, #5
		configSDApin(newindex);
600016c0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016c6:	685b      	ldr	r3, [r3, #4]
600016c8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ca:	f7ff ffc3 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ce:	7621      	strb	r1, [r4, #24]
600016d0:	e7f3      	b.n	600016ba <TwoWire::setSDA(unsigned char)+0x32>
600016d2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016d4:	2100      	movs	r1, #0
600016d6:	e7ea      	b.n	600016ae <TwoWire::setSDA(unsigned char)+0x26>
600016d8:	20000acc 	.word	0x20000acc

600016dc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	4a0a      	ldr	r2, [pc, #40]	; (60001708 <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e0:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016e4:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
600016ea:	4c08      	ldr	r4, [pc, #32]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x30>)
600016ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f0:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016f4:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
600016f8:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
600016fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
600016fc:	b10b      	cbz	r3, 60001702 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
600016fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001700:	601a      	str	r2, [r3, #0]
	}
}
60001702:	f85d 4b04 	ldr.w	r4, [sp], #4
60001706:	4770      	bx	lr
60001708:	20000acc 	.word	0x20000acc
6000170c:	0001f861 	.word	0x0001f861

60001710 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001710:	6943      	ldr	r3, [r0, #20]
60001712:	7e42      	ldrb	r2, [r0, #25]
60001714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001718:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000171c:	458c      	cmp	ip, r1
6000171e:	d01e      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001720:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001724:	2aff      	cmp	r2, #255	; 0xff
60001726:	d01a      	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001728:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000172a:	b510      	push	{r4, lr}
6000172c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000172e:	d017      	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001734:	2aff      	cmp	r2, #255	; 0xff
60001736:	d006      	beq.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
60001738:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000173e:	6812      	ldr	r2, [r2, #0]
60001740:	421a      	tst	r2, r3
60001742:	d101      	bne.n	60001748 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001744:	7661      	strb	r1, [r4, #25]
}
60001746:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001748:	4b06      	ldr	r3, [pc, #24]	; (60001764 <TwoWire::setSCL(unsigned char)+0x54>)
6000174a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000174c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001752:	685b      	ldr	r3, [r3, #4]
60001754:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001756:	f7ff ffc1 	bl	600016dc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175a:	7661      	strb	r1, [r4, #25]
6000175c:	e7f3      	b.n	60001746 <TwoWire::setSCL(unsigned char)+0x36>
6000175e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001760:	2100      	movs	r1, #0
60001762:	e7ea      	b.n	6000173a <TwoWire::setSCL(unsigned char)+0x2a>
60001764:	20000acc 	.word	0x20000acc

60001768 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001768:	4916      	ldr	r1, [pc, #88]	; (600017c4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000176e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001776:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001778:	638b      	str	r3, [r1, #56]	; 0x38
{
6000177a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000177c:	4d12      	ldr	r5, [pc, #72]	; (600017c8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000177e:	e9d2 1300 	ldrd	r1, r3, [r2]
60001782:	680a      	ldr	r2, [r1, #0]
60001784:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
60001786:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001788:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
6000178a:	2202      	movs	r2, #2
	port->MCR = 0;
6000178c:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
6000178e:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001790:	4a0e      	ldr	r2, [pc, #56]	; (600017cc <TwoWire::begin()+0x64>)
	port->MCR = 0;
60001792:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
60001794:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
60001796:	2201      	movs	r2, #1
60001798:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179a:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
6000179c:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017a0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017a2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017a6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017a8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017aa:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017ac:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ae:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017b0:	7e01      	ldrb	r1, [r0, #24]
600017b2:	f7ff ff4f 	bl	60001654 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017b6:	7e61      	ldrb	r1, [r4, #25]
600017b8:	4620      	mov	r0, r4
}
600017ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017be:	f7ff bf8d 	b.w	600016dc <TwoWire::configSCLpin(unsigned char)>
600017c2:	bf00      	nop
600017c4:	400fc000 	.word	0x400fc000
600017c8:	05050bb8 	.word	0x05050bb8
600017cc:	1928373b 	.word	0x1928373b

600017d0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017d0:	4770      	bx	lr
600017d2:	bf00      	nop

600017d4 <startup_default_middle_hook>:
600017d4:	4770      	bx	lr
600017d6:	bf00      	nop

600017d8 <startup_default_late_hook>:
600017d8:	4770      	bx	lr
600017da:	bf00      	nop

600017dc <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017dc:	bf00      	nop
600017de:	4770      	bx	lr

600017e0 <configure_cache>:
{
600017e0:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600017e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600017e6:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017e8:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ea:	482b      	ldr	r0, [pc, #172]	; (60001898 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
600017ec:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f0:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017f4:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017f6:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017fa:	4828      	ldr	r0, [pc, #160]	; (6000189c <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017fc:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001800:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001802:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001806:	4826      	ldr	r0, [pc, #152]	; (600018a0 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001808:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000180c:	4a25      	ldr	r2, [pc, #148]	; (600018a4 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000180e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001812:	4c25      	ldr	r4, [pc, #148]	; (600018a8 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001814:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001818:	4824      	ldr	r0, [pc, #144]	; (600018ac <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000181e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001822:	4c23      	ldr	r4, [pc, #140]	; (600018b0 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001824:	4823      	ldr	r0, [pc, #140]	; (600018b4 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001826:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000182e:	4c22      	ldr	r4, [pc, #136]	; (600018b8 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001830:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001834:	4821      	ldr	r0, [pc, #132]	; (600018bc <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001836:	4a22      	ldr	r2, [pc, #136]	; (600018c0 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001838:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000183c:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001840:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001844:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001848:	4c1e      	ldr	r4, [pc, #120]	; (600018c4 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000184a:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
6000184c:	481e      	ldr	r0, [pc, #120]	; (600018c8 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000184e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001852:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001856:	4a1d      	ldr	r2, [pc, #116]	; (600018cc <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001858:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000185c:	4c1c      	ldr	r4, [pc, #112]	; (600018d0 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000185e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001862:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001864:	481b      	ldr	r0, [pc, #108]	; (600018d4 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001866:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000186a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000186e:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001872:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001876:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000187a:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000187e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001882:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001886:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000188a:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000188e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001892:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001896:	4770      	bx	lr
60001898:	1000003f 	.word	0x1000003f
6000189c:	03080025 	.word	0x03080025
600018a0:	00100009 	.word	0x00100009
600018a4:	20003a20 	.word	0x20003a20
600018a8:	00200013 	.word	0x00200013
600018ac:	07020021 	.word	0x07020021
600018b0:	20000014 	.word	0x20000014
600018b4:	13080025 	.word	0x13080025
600018b8:	10000009 	.word	0x10000009
600018bc:	20200016 	.word	0x20200016
600018c0:	130b0027 	.word	0x130b0027
600018c4:	40000017 	.word	0x40000017
600018c8:	60000018 	.word	0x60000018
600018cc:	070b002f 	.word	0x070b002f
600018d0:	70000019 	.word	0x70000019
600018d4:	130b002f 	.word	0x130b002f

600018d8 <configure_external_ram>:
{
600018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018da:	4bb8      	ldr	r3, [pc, #736]	; (60001bbc <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018dc:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018de:	4eb8      	ldr	r6, [pc, #736]	; (60001bc0 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e0:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018e2:	4fb8      	ldr	r7, [pc, #736]	; (60001bc4 <configure_external_ram+0x2ec>)
{
600018e4:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018e6:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018ea:	49b7      	ldr	r1, [pc, #732]	; (60001bc8 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018ec:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018f0:	4db6      	ldr	r5, [pc, #728]	; (60001bcc <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018f2:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018f6:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fa:	4cb5      	ldr	r4, [pc, #724]	; (60001bd0 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018fc:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001900:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001904:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001908:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000190c:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001910:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001914:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001916:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001918:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000191a:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000191c:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000191e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000192a:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000192e:	4aa9      	ldr	r2, [pc, #676]	; (60001bd4 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001930:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001934:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001938:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000193c:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001940:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001944:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001946:	4ba4      	ldr	r3, [pc, #656]	; (60001bd8 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001948:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000194a:	48a4      	ldr	r0, [pc, #656]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000194c:	49a4      	ldr	r1, [pc, #656]	; (60001be0 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000194e:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001950:	4aa4      	ldr	r2, [pc, #656]	; (60001be4 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001952:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001958:	f043 030c 	orr.w	r3, r3, #12
6000195c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001960:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001964:	6803      	ldr	r3, [r0, #0]
60001966:	f043 0302 	orr.w	r3, r3, #2
6000196a:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000196c:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000196e:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001970:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001974:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001976:	4b9c      	ldr	r3, [pc, #624]	; (60001be8 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001978:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
6000197a:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000197c:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000197e:	4c9b      	ldr	r4, [pc, #620]	; (60001bec <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001980:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001982:	4a9b      	ldr	r2, [pc, #620]	; (60001bf0 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001988:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000198a:	68c3      	ldr	r3, [r0, #12]
6000198c:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001990:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001992:	6a03      	ldr	r3, [r0, #32]
60001994:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001996:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001998:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000199a:	6a03      	ldr	r3, [r0, #32]
6000199c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000199e:	4a95      	ldr	r2, [pc, #596]	; (60001bf4 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019a0:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019a2:	4c95      	ldr	r4, [pc, #596]	; (60001bf8 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019a4:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019a6:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019a8:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600019aa:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600019b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019b4:	f043 0301 	orr.w	r3, r3, #1
600019b8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019bc:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019c0:	498e      	ldr	r1, [pc, #568]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600019c6:	f043 0301 	orr.w	r3, r3, #1
600019ca:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019ce:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
600019d2:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019d6:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
600019dc:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019de:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e0:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600019e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019e6:	6803      	ldr	r3, [r0, #0]
600019e8:	f023 0302 	bic.w	r3, r3, #2
600019ec:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ee:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f0:	4b83      	ldr	r3, [pc, #524]	; (60001c00 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f2:	4984      	ldr	r1, [pc, #528]	; (60001c04 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019f4:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019f6:	f843 2b04 	str.w	r2, [r3], #4
600019fa:	428b      	cmp	r3, r1
600019fc:	d1fb      	bne.n	600019f6 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019fe:	4a77      	ldr	r2, [pc, #476]	; (60001bdc <configure_external_ram+0x304>)
60001a00:	6813      	ldr	r3, [r2, #0]
60001a02:	f043 0301 	orr.w	r3, r3, #1
60001a06:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a08:	6813      	ldr	r3, [r2, #0]
60001a0a:	f013 0301 	ands.w	r3, r3, #1
60001a0e:	d1fb      	bne.n	60001a08 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a10:	487a      	ldr	r0, [pc, #488]	; (60001bfc <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a12:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a14:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a18:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a1a:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a1e:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a20:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a24:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a28:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a2c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a30:	4975      	ldr	r1, [pc, #468]	; (60001c08 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a32:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a36:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a3a:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a3e:	4873      	ldr	r0, [pc, #460]	; (60001c0c <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a40:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a44:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a48:	4c71      	ldr	r4, [pc, #452]	; (60001c10 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a4a:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a4e:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a52:	4970      	ldr	r1, [pc, #448]	; (60001c14 <configure_external_ram+0x33c>)
60001a54:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a58:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a5a:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a5e:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a62:	485e      	ldr	r0, [pc, #376]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001a64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a68:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a6c:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a70:	6943      	ldr	r3, [r0, #20]
60001a72:	07da      	lsls	r2, r3, #31
60001a74:	d5fc      	bpl.n	60001a70 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a78:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a7e:	4957      	ldr	r1, [pc, #348]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a80:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001a82:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a86:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a8e:	694b      	ldr	r3, [r1, #20]
60001a90:	07db      	lsls	r3, r3, #31
60001a92:	d5fc      	bpl.n	60001a8e <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a94:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001a96:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a98:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a9c:	4a4f      	ldr	r2, [pc, #316]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a9e:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001aa0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aa4:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001aa8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aac:	6953      	ldr	r3, [r2, #20]
60001aae:	07df      	lsls	r7, r3, #31
60001ab0:	d5fc      	bpl.n	60001aac <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ab2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001ab4:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ab6:	4858      	ldr	r0, [pc, #352]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ab8:	4948      	ldr	r1, [pc, #288]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001aba:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ac0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	694b      	ldr	r3, [r1, #20]
60001aca:	07de      	lsls	r6, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001ace:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001ad2:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ad6:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001ad8:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ada:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001adc:	4293      	cmp	r3, r2
60001ade:	d165      	bne.n	60001bac <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001ae0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ae2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ae6:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ae8:	483c      	ldr	r0, [pc, #240]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001aea:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001aee:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001af2:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001af6:	6943      	ldr	r3, [r0, #20]
60001af8:	07dd      	lsls	r5, r3, #31
60001afa:	d5fc      	bpl.n	60001af6 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001afc:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001afe:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b02:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b04:	4a35      	ldr	r2, [pc, #212]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b06:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b08:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b0c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b10:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b14:	6953      	ldr	r3, [r2, #20]
60001b16:	07dc      	lsls	r4, r3, #31
60001b18:	d5fc      	bpl.n	60001b14 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b1a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b1c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b24:	492d      	ldr	r1, [pc, #180]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b26:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b28:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2c:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b30:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b34:	694b      	ldr	r3, [r1, #20]
60001b36:	07d8      	lsls	r0, r3, #31
60001b38:	d5fc      	bpl.n	60001b34 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b3c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b44:	4a25      	ldr	r2, [pc, #148]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b46:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001b48:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b50:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b54:	6953      	ldr	r3, [r2, #20]
60001b56:	07d9      	lsls	r1, r3, #31
60001b58:	d5fc      	bpl.n	60001b54 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b5c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b60:	482d      	ldr	r0, [pc, #180]	; (60001c18 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b62:	491e      	ldr	r1, [pc, #120]	; (60001bdc <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b64:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001b66:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001b6a:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b6e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b72:	694b      	ldr	r3, [r1, #20]
60001b74:	07da      	lsls	r2, r3, #31
60001b76:	d5fc      	bpl.n	60001b72 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001b78:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b7c:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b80:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001b82:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001b84:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001b86:	4293      	cmp	r3, r2
60001b88:	d050      	beq.n	60001c2c <configure_external_ram+0x354>
60001b8a:	2508      	movs	r5, #8
60001b8c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001b90:	4922      	ldr	r1, [pc, #136]	; (60001c1c <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b92:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001b94:	4b22      	ldr	r3, [pc, #136]	; (60001c20 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001b96:	4a23      	ldr	r2, [pc, #140]	; (60001c24 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b98:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001b9a:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001b9c:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001b9e:	2301      	movs	r3, #1
60001ba0:	4821      	ldr	r0, [pc, #132]	; (60001c28 <configure_external_ram+0x350>)
60001ba2:	4422      	add	r2, r4
60001ba4:	f000 f9f4 	bl	60001f90 <__sm_set_pool_veneer>
}
60001ba8:	b003      	add	sp, #12
60001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001bac:	4b1e      	ldr	r3, [pc, #120]	; (60001c28 <configure_external_ram+0x350>)
60001bae:	2200      	movs	r2, #0
60001bb0:	e9c3 2200 	strd	r2, r2, [r3]
60001bb4:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001bb8:	b003      	add	sp, #12
60001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001bbc:	401f8000 	.word	0x401f8000
60001bc0:	0001b0f9 	.word	0x0001b0f9
60001bc4:	000110f9 	.word	0x000110f9
60001bc8:	401f8400 	.word	0x401f8400
60001bcc:	000170f9 	.word	0x000170f9
60001bd0:	400fc000 	.word	0x400fc000
60001bd4:	1ffffcff 	.word	0x1ffffcff
60001bd8:	a0000300 	.word	0xa0000300
60001bdc:	402a4000 	.word	0x402a4000
60001be0:	402a8000 	.word	0x402a8000
60001be4:	ffff0012 	.word	0xffff0012
60001be8:	00f737ff 	.word	0x00f737ff
60001bec:	80000040 	.word	0x80000040
60001bf0:	7cf0ff00 	.word	0x7cf0ff00
60001bf4:	830f00ff 	.word	0x830f00ff
60001bf8:	00020063 	.word	0x00020063
60001bfc:	5af05af0 	.word	0x5af05af0
60001c00:	402a4200 	.word	0x402a4200
60001c04:	402a4300 	.word	0x402a4300
60001c08:	3018049f 	.word	0x3018049f
60001c0c:	0a1806eb 	.word	0x0a1806eb
60001c10:	0a180638 	.word	0x0a180638
60001c14:	26013206 	.word	0x26013206
60001c18:	00030004 	.word	0x00030004
60001c1c:	70000000 	.word	0x70000000
60001c20:	70000000 	.word	0x70000000
60001c24:	200039ea 	.word	0x200039ea
60001c28:	20002ee8 	.word	0x20002ee8
	FLEXSPI2_IPCR0 = addr;
60001c2c:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c34:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c36:	4808      	ldr	r0, [pc, #32]	; (60001c58 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001c38:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c40:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c44:	6943      	ldr	r3, [r0, #20]
60001c46:	07db      	lsls	r3, r3, #31
60001c48:	d5fc      	bpl.n	60001c44 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c4a:	2301      	movs	r3, #1
60001c4c:	2510      	movs	r5, #16
60001c4e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001c52:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001c54:	e79c      	b.n	60001b90 <configure_external_ram+0x2b8>
60001c56:	bf00      	nop
60001c58:	402a4000 	.word	0x402a4000

60001c5c <usb_pll_start>:
{
60001c5c:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5e:	4a15      	ldr	r2, [pc, #84]	; (60001cb4 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c60:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c62:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c6a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c6e:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c72:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c76:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c78:	f013 0f02 	tst.w	r3, #2
60001c7c:	d10e      	bne.n	60001c9c <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c7e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001c82:	d00f      	beq.n	60001ca4 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001c88:	d00e      	beq.n	60001ca8 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c8a:	2b00      	cmp	r3, #0
60001c8c:	daf3      	bge.n	60001c76 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001c92:	d10b      	bne.n	60001cac <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c94:	065b      	lsls	r3, r3, #25
60001c96:	d50b      	bpl.n	60001cb0 <usb_pll_start+0x54>
}
60001c98:	bcf0      	pop	{r4, r5, r6, r7}
60001c9a:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c9c:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c9e:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ca0:	6190      	str	r0, [r2, #24]
			continue;
60001ca2:	e7e8      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ca4:	6155      	str	r5, [r2, #20]
			continue;
60001ca6:	e7e6      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001ca8:	6156      	str	r6, [r2, #20]
			continue;
60001caa:	e7e4      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cac:	6191      	str	r1, [r2, #24]
			continue;
60001cae:	e7e2      	b.n	60001c76 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cb0:	6157      	str	r7, [r2, #20]
			continue;
60001cb2:	e7e0      	b.n	60001c76 <usb_pll_start+0x1a>
60001cb4:	400d8000 	.word	0x400d8000

60001cb8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb8:	4a3f      	ldr	r2, [pc, #252]	; (60001db8 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cba:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cbc:	493f      	ldr	r1, [pc, #252]	; (60001dbc <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cbe:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cc2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc6:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cca:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001dc0 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cce:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001cd2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001dc4 <tempmon_init+0x10c>
{
60001cd6:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cdc:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001ce0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001ce4:	4d38      	ldr	r5, [pc, #224]	; (60001dc8 <tempmon_init+0x110>)
60001ce6:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce8:	4c38      	ldr	r4, [pc, #224]	; (60001dcc <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cea:	4839      	ldr	r0, [pc, #228]	; (60001dd0 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cee:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cf2:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf4:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001cfc:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d00:	ee07 1a10 	vmov	s14, r1
60001d04:	4b33      	ldr	r3, [pc, #204]	; (60001dd4 <tempmon_init+0x11c>)
60001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d0a:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d10:	4931      	ldr	r1, [pc, #196]	; (60001dd8 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d12:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d16:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d1a:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d22:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d26:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d2a:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d32:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d36:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d3a:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d3e:	4827      	ldr	r0, [pc, #156]	; (60001ddc <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d40:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d44:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d48:	ee75 5a87 	vadd.f32	s11, s11, s14
60001d4c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d50:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d54:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d58:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d5c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d60:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d68:	ee16 3a10 	vmov	r3, s12
60001d6c:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d74:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001d78:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d7a:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d7e:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001d86:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001d8a:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001d8c:	4914      	ldr	r1, [pc, #80]	; (60001de0 <tempmon_init+0x128>)
60001d8e:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d92:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001d96:	f043 0302 	orr.w	r3, r3, #2
60001d9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001d9e:	4b11      	ldr	r3, [pc, #68]	; (60001de4 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001da0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001da4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001da8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001dac:	2201      	movs	r2, #1
}
60001dae:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001db4:	4770      	bx	lr
60001db6:	bf00      	nop
60001db8:	400d8100 	.word	0x400d8100
60001dbc:	401f4400 	.word	0x401f4400
60001dc0:	42aa0000 	.word	0x42aa0000
60001dc4:	42b40000 	.word	0x42b40000
60001dc8:	200039b0 	.word	0x200039b0
60001dcc:	200039ac 	.word	0x200039ac
60001dd0:	200039b4 	.word	0x200039b4
60001dd4:	200039b8 	.word	0x200039b8
60001dd8:	0fff0000 	.word	0x0fff0000
60001ddc:	e000e400 	.word	0xe000e400
60001de0:	20001c00 	.word	0x20001c00
60001de4:	00004351 	.word	0x00004351

60001de8 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001de8:	4b31      	ldr	r3, [pc, #196]	; (60001eb0 <usb_init+0xc8>)
60001dea:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001dee:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001df4:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001df8:	f000 f8d6 	bl	60001fa8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001dfc:	4a2d      	ldr	r2, [pc, #180]	; (60001eb4 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001dfe:	492e      	ldr	r1, [pc, #184]	; (60001eb8 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e00:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e04:	482d      	ldr	r0, [pc, #180]	; (60001ebc <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001e06:	f043 0303 	orr.w	r3, r3, #3
60001e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e0e:	4b2c      	ldr	r3, [pc, #176]	; (60001ec0 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001e10:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001e14:	6802      	ldr	r2, [r0, #0]
60001e16:	421a      	tst	r2, r3
60001e18:	d103      	bne.n	60001e22 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001e1a:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001e1e:	079a      	lsls	r2, r3, #30
60001e20:	d01b      	beq.n	60001e5a <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e22:	4a25      	ldr	r2, [pc, #148]	; (60001eb8 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001e28:	4b24      	ldr	r3, [pc, #144]	; (60001ebc <usb_init+0xd4>)
60001e2a:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001e2c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e30:	f043 0302 	orr.w	r3, r3, #2
60001e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001e38:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001e3c:	079b      	lsls	r3, r3, #30
60001e3e:	d4fb      	bmi.n	60001e38 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001e44:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e48:	4b1c      	ldr	r3, [pc, #112]	; (60001ebc <usb_init+0xd4>)
60001e4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001e4e:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001e52:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001e54:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001e56:	f000 f89f 	bl	60001f98 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e5a:	4a18      	ldr	r2, [pc, #96]	; (60001ebc <usb_init+0xd4>)
60001e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e60:	4c15      	ldr	r4, [pc, #84]	; (60001eb8 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001e62:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001e64:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e66:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e68:	4b16      	ldr	r3, [pc, #88]	; (60001ec4 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001e6a:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e6c:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001e70:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e74:	4618      	mov	r0, r3
60001e76:	f000 f887 	bl	60001f88 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001e7a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001e7e:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e80:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e84:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001e88:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001e8a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001e8e:	641a      	str	r2, [r3, #64]	; 0x40
60001e90:	4b0d      	ldr	r3, [pc, #52]	; (60001ec8 <usb_init+0xe0>)
60001e92:	4a0e      	ldr	r2, [pc, #56]	; (60001ecc <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001e94:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001e9c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001ea0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001ea4:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001ea6:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001eaa:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001eae:	bd10      	pop	{r4, pc}
60001eb0:	400d8000 	.word	0x400d8000
60001eb4:	400fc000 	.word	0x400fc000
60001eb8:	402e0000 	.word	0x402e0000
60001ebc:	400d9000 	.word	0x400d9000
60001ec0:	001e1c00 	.word	0x001e1c00
60001ec4:	20000000 	.word	0x20000000
60001ec8:	20001c00 	.word	0x20001c00
60001ecc:	00004539 	.word	0x00004539

60001ed0 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001ed0:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001ed2:	4b0e      	ldr	r3, [pc, #56]	; (60001f0c <_reboot_Teensyduino_+0x3c>)
60001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ed6:	079b      	lsls	r3, r3, #30
60001ed8:	d400      	bmi.n	60001edc <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001eda:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001edc:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ede:	4b0c      	ldr	r3, [pc, #48]	; (60001f10 <_reboot_Teensyduino_+0x40>)
60001ee0:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ee2:	4a0c      	ldr	r2, [pc, #48]	; (60001f14 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001ee4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ee8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001eec:	490a      	ldr	r1, [pc, #40]	; (60001f18 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001eee:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ef2:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001ef4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001ef6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001efa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001efe:	4807      	ldr	r0, [pc, #28]	; (60001f1c <_reboot_Teensyduino_+0x4c>)
60001f00:	4a07      	ldr	r2, [pc, #28]	; (60001f20 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f02:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001f04:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001f06:	689b      	ldr	r3, [r3, #8]
60001f08:	4798      	blx	r3
	}
	__builtin_unreachable();
60001f0a:	bf00      	nop
60001f0c:	401f4400 	.word	0x401f4400
60001f10:	402e0000 	.word	0x402e0000
60001f14:	400ac000 	.word	0x400ac000
60001f18:	00200003 	.word	0x00200003
60001f1c:	20208000 	.word	0x20208000
60001f20:	eb120000 	.word	0xeb120000

60001f24 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f24:	4b10      	ldr	r3, [pc, #64]	; (60001f68 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f26:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f28:	4a10      	ldr	r2, [pc, #64]	; (60001f6c <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f2a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f2c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001f30:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001f32:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f34:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001f3a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001f3e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001f40:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001f42:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001f44:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f46:	061b      	lsls	r3, r3, #24
60001f48:	d4fc      	bmi.n	60001f44 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f4a:	4a09      	ldr	r2, [pc, #36]	; (60001f70 <analog_init+0x4c>)
60001f4c:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f50:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001f52:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001f54:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001f56:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001f58:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001f5c:	d1fb      	bne.n	60001f56 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001f5e:	4a05      	ldr	r2, [pc, #20]	; (60001f74 <analog_init+0x50>)
60001f60:	7013      	strb	r3, [r2, #0]
}
60001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
60001f66:	4770      	bx	lr
60001f68:	400fc000 	.word	0x400fc000
60001f6c:	400c4000 	.word	0x400c4000
60001f70:	400c8000 	.word	0x400c8000
60001f74:	200039e9 	.word	0x200039e9

60001f78 <_init>:
60001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001f7a:	bf00      	nop
60001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001f7e:	bc08      	pop	{r3}
60001f80:	469e      	mov	lr, r3
60001f82:	4770      	bx	lr
60001f84:	0000      	movs	r0, r0
	...

60001f88 <__memset_veneer>:
60001f88:	f85f f000 	ldr.w	pc, [pc]	; 60001f8c <__memset_veneer+0x4>
60001f8c:	00007491 	.word	0x00007491

60001f90 <__sm_set_pool_veneer>:
60001f90:	f85f f000 	ldr.w	pc, [pc]	; 60001f94 <__sm_set_pool_veneer+0x4>
60001f94:	000055b9 	.word	0x000055b9

60001f98 <__delay_veneer>:
60001f98:	f85f f000 	ldr.w	pc, [pc]	; 60001f9c <__delay_veneer+0x4>
60001f9c:	00003809 	.word	0x00003809

60001fa0 <__set_arm_clock_veneer>:
60001fa0:	f85f f000 	ldr.w	pc, [pc]	; 60001fa4 <__set_arm_clock_veneer+0x4>
60001fa4:	00003519 	.word	0x00003519

60001fa8 <__usb_init_serialnumber_veneer>:
60001fa8:	f85f f000 	ldr.w	pc, [pc]	; 60001fac <__usb_init_serialnumber_veneer+0x4>
60001fac:	00004ca9 	.word	0x00004ca9

60001fb0 <____libc_init_array_veneer>:
60001fb0:	f85f f000 	ldr.w	pc, [pc]	; 60001fb4 <____libc_init_array_veneer+0x4>
60001fb4:	00007bfd 	.word	0x00007bfd

60001fb8 <__main_veneer>:
60001fb8:	f85f f000 	ldr.w	pc, [pc]	; 60001fbc <__main_veneer+0x4>
60001fbc:	00003ae9 	.word	0x00003ae9

60001fc0 <__pwm_init_veneer>:
60001fc0:	f85f f000 	ldr.w	pc, [pc]	; 60001fc4 <__pwm_init_veneer+0x4>
60001fc4:	00004061 	.word	0x00004061

60001fc8 <__frame_dummy_init_array_entry>:
60001fc8:	00000101 00000ab9 0000107d 000023a5     ........}....#..
60001fd8:	00002bb5 00002c35 00002cb9 00002d3d     .+..5,...,..=-..
60001fe8:	00002dc1 00002e45 00002ec9 00002f4d     .-..E.......M/..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
  }

  if (_byteorder == LSBFIRST) {
    *value = _buffer[1];
    *value <<= 8;
    *value |= _buffer[0];
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *value = _buffer[0];
    *value <<= 8;
    *value |= _buffer[1];
  }
  return true;
}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    *value <<= 8;
      26:	699d      	ldr	r5, [r3, #24]
      28:	695a      	ldr	r2, [r3, #20]
    *value |= _buffer[1];
      2a:	4015      	ands	r5, r2
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f24      	ldr	r7, [pc, #144]	; (c0 <_teensy_model_identifier+0x9b>)
}
      30:	2601      	movs	r6, #1

void serial_phex(uint32_t n)
{
	serial_phex1(n >> 4);
	serial_phex1(n);
}
      32:	619d      	str	r5, [r3, #24]
      34:	fa95 f4a5 	rbit	r4, r5
	// Event Handler functions and data
	static uint8_t serial_event_handlers_active;

	using Print::write; 
	// Transmit a single byte
	size_t write(unsigned long n) { return write((uint8_t)n); }
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
String PadString (String str) {
    while (str.length() < 8) {
        str = " " + str;
    }
    return str;
}
      40:	fa06 f404 	lsl.w	r4, r6, r4
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
      4a:	4b1e      	ldr	r3, [pc, #120]	; (c4 <_teensy_model_identifier+0x9f>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
      50:	4015      	ands	r5, r2
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
            array_index -= (int)filter->size;
        }
        sum += (double) *(filter->array + array_index);
    }
    return sum / (double)(filter->size - 2);
}
      54:	4f1c      	ldr	r7, [pc, #112]	; (c8 <_teensy_model_identifier+0xa3>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
      5e:	fab4 f484 	clz	r4, r4
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
      // idle high on mode 2 or 3
      digitalWrite(_sck, HIGH);
    }
    if (_mosi != -1) {
      pinMode(_mosi, OUTPUT);
      digitalWrite(_mosi, HIGH);
      6c:	43a5      	bics	r5, r4
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
    }
    if (_miso != -1) {
      70:	4b16      	ldr	r3, [pc, #88]	; (cc <_teensy_model_identifier+0xa7>)
      72:	699d      	ldr	r5, [r3, #24]
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
}
      7a:	4f15      	ldr	r7, [pc, #84]	; (d0 <_teensy_model_identifier+0xab>)
      7c:	2601      	movs	r6, #1
      7e:	619d      	str	r5, [r3, #24]
      80:	fa95 f4a5 	rbit	r4, r5
      84:	fab4 f484 	clz	r4, r4
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
	mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
	
	if(bRxLenEx){

		/**************************************   Receive packet  ***************************************************/
		mRxLength = this->fast_rxPacket(bRxLenEx);
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b0f      	ldr	r3, [pc, #60]	; (d4 <_teensy_model_identifier+0xaf>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
}
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0d      	ldr	r7, [pc, #52]	; (d8 <_teensy_model_identifier+0xb3>)
      a2:	2601      	movs	r6, #1
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
      aa:	fab4 f484 	clz	r4, r4
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
			uint32_t index = __builtin_ctz(status);
			table[index]();
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
			status = status & ~(1 << index);
      b2:	fa06 f404 	lsl.w	r4, r6, r4
			table[index]();
      b6:	4798      	blx	r3
		while (status) {
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
}
      bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      be:	bf00      	nop
      c0:	20001984 	.word	0x20001984
      c4:	42004000 	.word	0x42004000
      c8:	20001a04 	.word	0x20001a04
      cc:	42008000 	.word	0x42008000
      d0:	20001a84 	.word	0x20001a84
      d4:	4200c000 	.word	0x4200c000
      d8:	20001b04 	.word	0x20001b04

000000dc <register_tm_clones>:
	pinMode(rxPin, INPUT_PULLUP);
	txpin = txPin;
	rxpin = rxPin;
	txreg = portOutputRegister(digitalPinToPort(txPin));
	rxreg = portInputRegister(digitalPinToPort(rxPin));
	cycles_per_bit = 0;
      dc:	4805      	ldr	r0, [pc, #20]	; (f4 <register_tm_clones+0x18>)
      de:	4b06      	ldr	r3, [pc, #24]	; (f8 <register_tm_clones+0x1c>)
      e0:	1a1b      	subs	r3, r3, r0
      e2:	0fd9      	lsrs	r1, r3, #31
      e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      e8:	1049      	asrs	r1, r1, #1
      ea:	d002      	beq.n	f2 <register_tm_clones+0x16>
      ec:	4b03      	ldr	r3, [pc, #12]	; (fc <register_tm_clones+0x20>)
      ee:	b103      	cbz	r3, f2 <register_tm_clones+0x16>
      f0:	4718      	bx	r3
      f2:	4770      	bx	lr
    value = -value;
  if(isFraction)
    return value * fraction;
  else
    return value;
}
      f4:	20001ec0 	.word	0x20001ec0
      f8:	20001ec0 	.word	0x20001ec0
      fc:	00000000 	.word	0x00000000

00000100 <frame_dummy>:
     100:	b508      	push	{r3, lr}
     102:	4b05      	ldr	r3, [pc, #20]	; (118 <frame_dummy+0x18>)
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	b11b      	cbz	r3, 10e <frame_dummy+0xe>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     106:	4905      	ldr	r1, [pc, #20]	; (11c <frame_dummy+0x1c>)
     108:	4805      	ldr	r0, [pc, #20]	; (120 <frame_dummy+0x20>)
     10a:	f3af 8000 	nop.w
     10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (newbuffer) {
     112:	f7ff bfe3 	b.w	dc <register_tm_clones>
		capacity = maxStrLen;
     116:	bf00      	nop
     118:	00000000 	.word	0x00000000
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	20003950 	.word	0x20003950
     120:	60011400 	.word	0x60011400

00000124 <NextArg(String*)>:
#include <Arduino.h>
#include "types.h"

// Get the next argument from a string and remove it
String NextArg(String* command) {
     124:	b570      	push	{r4, r5, r6, lr}
    String arg = (*command).substring(0, (*command).indexOf(" "));
     126:	4e17      	ldr	r6, [pc, #92]	; (184 <NextArg(String*)+0x60>)
String NextArg(String* command) {
     128:	b088      	sub	sp, #32
     12a:	460c      	mov	r4, r1
     12c:	4605      	mov	r5, r0
    String arg = (*command).substring(0, (*command).indexOf(" "));
     12e:	4631      	mov	r1, r6
     130:	a804      	add	r0, sp, #16
     132:	f003 f85f 	bl	31f4 <String::String(char const*)>
     136:	a904      	add	r1, sp, #16
     138:	4620      	mov	r0, r4
     13a:	f003 f963 	bl	3404 <String::indexOf(String const&) const>
     13e:	2200      	movs	r2, #0
     140:	4603      	mov	r3, r0
     142:	4621      	mov	r1, r4
     144:	4628      	mov	r0, r5
     146:	f003 f99b 	bl	3480 <String::substring(unsigned int, unsigned int) const>
     14a:	a804      	add	r0, sp, #16
     14c:	f003 f816 	bl	317c <String::~String()>
    *command = (*command).substring((*command).indexOf(" ") + 1);
     150:	4631      	mov	r1, r6
     152:	4668      	mov	r0, sp
     154:	f003 f84e 	bl	31f4 <String::String(char const*)>
     158:	4669      	mov	r1, sp
     15a:	4620      	mov	r0, r4
     15c:	f003 f952 	bl	3404 <String::indexOf(String const&) const>
     160:	4621      	mov	r1, r4
     162:	1c42      	adds	r2, r0, #1
     164:	a804      	add	r0, sp, #16
     166:	f003 f95f 	bl	3428 <String::substring(unsigned int) const>
     16a:	a904      	add	r1, sp, #16
     16c:	4620      	mov	r0, r4
     16e:	f003 f8a9 	bl	32c4 <String::operator=(String&&)>
     172:	a804      	add	r0, sp, #16
     174:	f003 f802 	bl	317c <String::~String()>
     178:	4668      	mov	r0, sp
     17a:	f002 ffff 	bl	317c <String::~String()>
    return arg;
}
     17e:	4628      	mov	r0, r5
     180:	b008      	add	sp, #32
     182:	bd70      	pop	{r4, r5, r6, pc}
     184:	20000408 	.word	0x20000408

00000188 <MatchCommand(String)>:

Command MatchCommand(String command) {
     188:	b510      	push	{r4, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     18a:	490d      	ldr	r1, [pc, #52]	; (1c0 <MatchCommand(String)+0x38>)
     18c:	4604      	mov	r4, r0
     18e:	f003 f907 	bl	33a0 <String::equals(char const*) const>
    if (command == "set") {
     192:	b990      	cbnz	r0, 1ba <MatchCommand(String)+0x32>
        return Command::SET;
    } else if (command.toLowerCase() == "switch") {
     194:	4620      	mov	r0, r4
     196:	f003 f99f 	bl	34d8 <String::toLowerCase()>
     19a:	490a      	ldr	r1, [pc, #40]	; (1c4 <MatchCommand(String)+0x3c>)
     19c:	f003 f900 	bl	33a0 <String::equals(char const*) const>
     1a0:	b948      	cbnz	r0, 1b6 <MatchCommand(String)+0x2e>
        return Command::SWITCH;
    } else if (command.toLowerCase() == "help") {
     1a2:	4620      	mov	r0, r4
     1a4:	f003 f998 	bl	34d8 <String::toLowerCase()>
     1a8:	4907      	ldr	r1, [pc, #28]	; (1c8 <MatchCommand(String)+0x40>)
     1aa:	f003 f8f9 	bl	33a0 <String::equals(char const*) const>
        return Command::SET;
     1ae:	3800      	subs	r0, #0
     1b0:	bf18      	it	ne
     1b2:	2001      	movne	r0, #1
        return Command::HELP;
    } else {
        return Command::INVALID;
    }
}
     1b4:	bd10      	pop	{r4, pc}
        return Command::SWITCH;
     1b6:	2003      	movs	r0, #3
}
     1b8:	bd10      	pop	{r4, pc}
        return Command::SET;
     1ba:	2002      	movs	r0, #2
}
     1bc:	bd10      	pop	{r4, pc}
     1be:	bf00      	nop
     1c0:	2000040c 	.word	0x2000040c
     1c4:	20000410 	.word	0x20000410
     1c8:	20000418 	.word	0x20000418

000001cc <Help()>:
    Serial.println("switch <traget>");
    Serial.println("    | pcc");
    Serial.println("    | res");
    */
    // TODO: Fill in commands
     1cc:	4770      	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
     1ce:	bf00      	nop

000001d0 <CreateFilter(unsigned int, int)>:
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     1d0:	b570      	push	{r4, r5, r6, lr}
     1d2:	4605      	mov	r5, r0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     1d4:	2018      	movs	r0, #24
struct Filter* CreateFilter(unsigned int size, int peaks_per_rotation) {
     1d6:	460e      	mov	r6, r1
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     1d8:	f005 fa50 	bl	567c <malloc>
    filter->oldestMoment = 0;
     1dc:	2300      	movs	r3, #0
    struct Filter* filter = (struct Filter*)malloc(sizeof(struct Filter));
     1de:	4604      	mov	r4, r0
    filter->size = size;
     1e0:	6005      	str	r5, [r0, #0]
    filter->errorThreshold = 0.25;
     1e2:	2200      	movs	r2, #0
    filter->oldestMoment = 0;
     1e4:	6063      	str	r3, [r4, #4]
    filter->array = (int*)malloc(sizeof(int) * size);
     1e6:	00a8      	lsls	r0, r5, #2
    filter->errorThreshold = 0.25;
     1e8:	4b04      	ldr	r3, [pc, #16]	; (1fc <CreateFilter(unsigned int, int)+0x2c>)
    filter->peaks_per_rotation = peaks_per_rotation;
     1ea:	6126      	str	r6, [r4, #16]
    filter->errorThreshold = 0.25;
     1ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
    filter->array = (int*)malloc(sizeof(int) * size);
     1f0:	f005 fa44 	bl	567c <malloc>
     1f4:	4603      	mov	r3, r0
}
     1f6:	4620      	mov	r0, r4
    filter->array = (int*)malloc(sizeof(int) * size);
     1f8:	6163      	str	r3, [r4, #20]
}
     1fa:	bd70      	pop	{r4, r5, r6, pc}
     1fc:	3fd00000 	.word	0x3fd00000

00000200 <Insert(Filter*, int)>:
    int index = filter->oldestMoment;
     200:	6842      	ldr	r2, [r0, #4]
    *(filter->array + index) = value;
     202:	6943      	ldr	r3, [r0, #20]
     204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    filter->oldestMoment++;
     208:	6843      	ldr	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     20a:	6802      	ldr	r2, [r0, #0]
    filter->oldestMoment++;
     20c:	3301      	adds	r3, #1
     20e:	6043      	str	r3, [r0, #4]
    if (filter->oldestMoment >= (int)filter->size) {
     210:	6843      	ldr	r3, [r0, #4]
     212:	4293      	cmp	r3, r2
     214:	db01      	blt.n	21a <Insert(Filter*, int)+0x1a>
        filter->oldestMoment = 0;
     216:	2300      	movs	r3, #0
     218:	6043      	str	r3, [r0, #4]
}
     21a:	4770      	bx	lr
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     21c:	0000      	movs	r0, r0
	...

00000220 <GetRpmBuffered(Filter*)>:

double GetRpmBuffered(struct Filter* filter) {
    int highIndex = filter->oldestMoment - 1;
     220:	6841      	ldr	r1, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
    int lowIndex = filter->oldestMoment + 1;
     222:	6843      	ldr	r3, [r0, #4]
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     224:	6802      	ldr	r2, [r0, #0]
     226:	3901      	subs	r1, #1
double GetRpmBuffered(struct Filter* filter) {
     228:	b410      	push	{r4}
    int lowIndex = filter->oldestMoment + 1;
     22a:	f103 0401 	add.w	r4, r3, #1
    if (highIndex < 0) { highIndex = (int)filter->size - 1; }
     22e:	bf48      	it	mi
     230:	f102 31ff 	addmi.w	r1, r2, #4294967295
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     234:	4294      	cmp	r4, r2
    lowIndex++;
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
    
    double high = (double) *(filter->array + highIndex);
     236:	6944      	ldr	r4, [r0, #20]
    lowIndex++;
     238:	bfb4      	ite	lt
     23a:	3302      	addlt	r3, #2
     23c:	2301      	movge	r3, #1
    double high = (double) *(filter->array + highIndex);
     23e:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    if (lowIndex >= (int)filter->size) { lowIndex = 0; }
     242:	429a      	cmp	r2, r3
    double low = (double) *(filter->array + lowIndex);
     244:	bfcc      	ite	gt
     246:	009b      	lslgt	r3, r3, #2
     248:	2300      	movle	r3, #0
     24a:	58e3      	ldr	r3, [r4, r3]
    
    if (high < low) {
     24c:	4299      	cmp	r1, r3
     24e:	db21      	blt.n	294 <GetRpmBuffered(Filter*)+0x74>
    double high = (double) *(filter->array + highIndex);
     250:	ee07 1a90 	vmov	s15, r1
        return -1;
    }
    
    double period = (high - low) / (filter->size - 3);
     254:	3a03      	subs	r2, #3
    period = period / 1000000; // convert us -> s
    double rpm = 60/ period;
    return rpm / (double)filter->peaks_per_rotation;
     256:	ed90 5a04 	vldr	s10, [r0, #16]
    double high = (double) *(filter->array + highIndex);
     25a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    double low = (double) *(filter->array + lowIndex);
     25e:	ee07 3a90 	vmov	s15, r3
    return rpm / (double)filter->peaks_per_rotation;
     262:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
}
     266:	f85d 4b04 	ldr.w	r4, [sp], #4
    double low = (double) *(filter->array + lowIndex);
     26a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    period = period / 1000000; // convert us -> s
     26e:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 2a0 <GetRpmBuffered(Filter*)+0x80>
    double period = (high - low) / (filter->size - 3);
     272:	ee36 6b47 	vsub.f64	d6, d6, d7
     276:	ee07 2a90 	vmov	s15, r2
     27a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    double rpm = 60/ period;
     27e:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 2a8 <GetRpmBuffered(Filter*)+0x88>
    double period = (high - low) / (filter->size - 3);
     282:	ee86 2b07 	vdiv.f64	d2, d6, d7
    period = period / 1000000; // convert us -> s
     286:	ee82 6b03 	vdiv.f64	d6, d2, d3
    double rpm = 60/ period;
     28a:	ee84 7b06 	vdiv.f64	d7, d4, d6
    return rpm / (double)filter->peaks_per_rotation;
     28e:	ee87 0b05 	vdiv.f64	d0, d7, d5
}
     292:	4770      	bx	lr
        return -1;
     294:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
}
     298:	f85d 4b04 	ldr.w	r4, [sp], #4
     29c:	4770      	bx	lr
     29e:	bf00      	nop
     2a0:	00000000 	.word	0x00000000
     2a4:	412e8480 	.word	0x412e8480
     2a8:	00000000 	.word	0x00000000
     2ac:	404e0000 	.word	0x404e0000

000002b0 <RPM_Interrupt()>:
        Serial.println("Relay set to " + digitalRead(PCC_Relay_Pin) ? "High" : "Low");
    }
}

// Interrupt for measuring the RPM
void RPM_Interrupt () {
     2b0:	b508      	push	{r3, lr}
    int time = (int)micros();
     2b2:	f003 fafd 	bl	38b0 <micros>
    Insert(rpm_filter, time);
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <RPM_Interrupt()+0x14>)
    int time = (int)micros();
     2b8:	4601      	mov	r1, r0
    Insert(rpm_filter, time);
     2ba:	6818      	ldr	r0, [r3, #0]
     2bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Insert(rpm_filter, time);
     2c0:	f7ff bf9e 	b.w	200 <Insert(Filter*, int)>
     2c4:	20003978 	.word	0x20003978

000002c8 <setup>:
void setup () {
     2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
     2cc:	4d64      	ldr	r5, [pc, #400]	; (460 <setup+0x198>)
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
     2ce:	f240 28ee 	movw	r8, #750	; 0x2ee
     2d2:	4c64      	ldr	r4, [pc, #400]	; (464 <setup+0x19c>)
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     2d4:	4f64      	ldr	r7, [pc, #400]	; (468 <setup+0x1a0>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     2d6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 4b0 <setup+0x1e8>
		uint32_t millis_begin = systick_millis_count;
     2da:	682e      	ldr	r6, [r5, #0]
		yield();
     2dc:	f005 f8ba 	bl	5454 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     2e0:	7823      	ldrb	r3, [r4, #0]
     2e2:	2b00      	cmp	r3, #0
     2e4:	d07b      	beq.n	3de <setup+0x116>
     2e6:	783b      	ldrb	r3, [r7, #0]
     2e8:	07db      	lsls	r3, r3, #31
     2ea:	d578      	bpl.n	3de <setup+0x116>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     2ec:	682b      	ldr	r3, [r5, #0]
     2ee:	f8d9 2000 	ldr.w	r2, [r9]
     2f2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     2f4:	2b0e      	cmp	r3, #14
     2f6:	d972      	bls.n	3de <setup+0x116>
    delay(1000); // Wait so serial monitor can be opened
     2f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     2fc:	f003 fa84 	bl	3808 <delay>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     300:	210e      	movs	r1, #14
     302:	485a      	ldr	r0, [pc, #360]	; (46c <setup+0x1a4>)
     304:	f005 f828 	bl	5358 <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     308:	4859      	ldr	r0, [pc, #356]	; (470 <setup+0x1a8>)
     30a:	f002 fea9 	bl	3060 <Print::println()>
     30e:	e001      	b.n	314 <setup+0x4c>
        delay(10);
     310:	f003 fa7a 	bl	3808 <delay>
        virtual int available() { return usb_serial_available(); }
     314:	f004 ffb6 	bl	5284 <usb_serial_available>
     318:	4603      	mov	r3, r0
     31a:	200a      	movs	r0, #10
    while (!Serial.available()) {
     31c:	2b00      	cmp	r3, #0
     31e:	d0f7      	beq.n	310 <setup+0x48>
    myServo.begin(32);
     320:	2120      	movs	r1, #32
     322:	4854      	ldr	r0, [pc, #336]	; (474 <setup+0x1ac>)
     324:	f000 feec 	bl	1100 <PA12::begin(int)>
    delay(100);
     328:	2064      	movs	r0, #100	; 0x64
     32a:	f003 fa6d 	bl	3808 <delay>
    if (myServo.available()) {
     32e:	4851      	ldr	r0, [pc, #324]	; (474 <setup+0x1ac>)
     330:	f000 ff3c 	bl	11ac <PA12::available()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     334:	2115      	movs	r1, #21
     336:	4603      	mov	r3, r0
     338:	2800      	cmp	r0, #0
     33a:	f000 8088 	beq.w	44e <setup+0x186>
     33e:	484e      	ldr	r0, [pc, #312]	; (478 <setup+0x1b0>)
    bool success = true;
     340:	2401      	movs	r4, #1
     342:	f005 f809 	bl	5358 <usb_serial_write>
     346:	484a      	ldr	r0, [pc, #296]	; (470 <setup+0x1a8>)
     348:	f002 fe8a 	bl	3060 <Print::println()>
    myServo.movingSpeed(LA_ID_NUM, 750);
     34c:	f240 22ee 	movw	r2, #750	; 0x2ee
     350:	2100      	movs	r1, #0
     352:	4848      	ldr	r0, [pc, #288]	; (474 <setup+0x1ac>)
     354:	f001 f958 	bl	1608 <PA12::movingSpeed(int, int)>
    ina260.begin(0x40);
     358:	2140      	movs	r1, #64	; 0x40
     35a:	4a48      	ldr	r2, [pc, #288]	; (47c <setup+0x1b4>)
     35c:	4848      	ldr	r0, [pc, #288]	; (480 <setup+0x1b8>)
     35e:	f001 f9e1 	bl	1724 <Adafruit_INA260::begin(unsigned char, TwoWire*)>
    delay(10);
     362:	200a      	movs	r0, #10
     364:	f003 fa50 	bl	3808 <delay>
    if (ina260.conversionReady()) {
     368:	4845      	ldr	r0, [pc, #276]	; (480 <setup+0x1b8>)
     36a:	f001 faa3 	bl	18b4 <Adafruit_INA260::conversionReady()>
     36e:	210c      	movs	r1, #12
     370:	4606      	mov	r6, r0
     372:	2800      	cmp	r0, #0
     374:	d040      	beq.n	3f8 <setup+0x130>
     376:	4843      	ldr	r0, [pc, #268]	; (484 <setup+0x1bc>)
     378:	f004 ffee 	bl	5358 <usb_serial_write>
     37c:	483c      	ldr	r0, [pc, #240]	; (470 <setup+0x1a8>)
     37e:	f002 fe6f 	bl	3060 <Print::println()>
    dac.begin(0x64);
     382:	2164      	movs	r1, #100	; 0x64
     384:	4840      	ldr	r0, [pc, #256]	; (488 <setup+0x1c0>)
     386:	f002 f833 	bl	23f0 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     38a:	200a      	movs	r0, #10
     38c:	f003 fa3c 	bl	3808 <delay>
    dac.setVoltage(dacValue, false);
     390:	4b3e      	ldr	r3, [pc, #248]	; (48c <setup+0x1c4>)
     392:	2200      	movs	r2, #0
     394:	483c      	ldr	r0, [pc, #240]	; (488 <setup+0x1c0>)
     396:	8819      	ldrh	r1, [r3, #0]
     398:	f002 f832 	bl	2400 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     39c:	2109      	movs	r1, #9
     39e:	483c      	ldr	r0, [pc, #240]	; (490 <setup+0x1c8>)
     3a0:	f004 ffda 	bl	5358 <usb_serial_write>
     3a4:	4832      	ldr	r0, [pc, #200]	; (470 <setup+0x1a8>)
     3a6:	f002 fe5b 	bl	3060 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     3aa:	2101      	movs	r1, #1
     3ac:	2021      	movs	r0, #33	; 0x21
     3ae:	f003 fae5 	bl	397c <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     3b2:	2203      	movs	r2, #3
     3b4:	4937      	ldr	r1, [pc, #220]	; (494 <setup+0x1cc>)
     3b6:	201d      	movs	r0, #29
     3b8:	f003 fb1a 	bl	39f0 <attachInterrupt>
    if (success) {
     3bc:	2c00      	cmp	r4, #0
     3be:	d03e      	beq.n	43e <setup+0x176>
     3c0:	210e      	movs	r1, #14
     3c2:	4835      	ldr	r0, [pc, #212]	; (498 <setup+0x1d0>)
     3c4:	f004 ffc8 	bl	5358 <usb_serial_write>
     3c8:	4829      	ldr	r0, [pc, #164]	; (470 <setup+0x1a8>)
     3ca:	f002 fe49 	bl	3060 <Print::println()>
     3ce:	6828      	ldr	r0, [r5, #0]
    printTimer = millis();
     3d0:	4932      	ldr	r1, [pc, #200]	; (49c <setup+0x1d4>)
     3d2:	682a      	ldr	r2, [r5, #0]
    resistanceTracingTimer = millis();
     3d4:	4b32      	ldr	r3, [pc, #200]	; (4a0 <setup+0x1d8>)
    printTimer = millis();
     3d6:	6008      	str	r0, [r1, #0]
    resistanceTracingTimer = millis();
     3d8:	601a      	str	r2, [r3, #0]
}
     3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     3de:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     3e0:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     3e2:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     3e4:	b12a      	cbz	r2, 3f2 <setup+0x12a>
				if (elapsed > 2000) break;
     3e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     3ea:	d885      	bhi.n	2f8 <setup+0x30>
			yield();
     3ec:	f005 f832 	bl	5454 <yield>
     3f0:	e774      	b.n	2dc <setup+0x14>
				if (elapsed > 750) break;
     3f2:	4543      	cmp	r3, r8
     3f4:	d9fa      	bls.n	3ec <setup+0x124>
     3f6:	e77f      	b.n	2f8 <setup+0x30>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3f8:	482a      	ldr	r0, [pc, #168]	; (4a4 <setup+0x1dc>)
     3fa:	f004 ffad 	bl	5358 <usb_serial_write>
     3fe:	481c      	ldr	r0, [pc, #112]	; (470 <setup+0x1a8>)
     400:	f002 fe2e 	bl	3060 <Print::println()>
    dac.begin(0x64);
     404:	2164      	movs	r1, #100	; 0x64
     406:	4820      	ldr	r0, [pc, #128]	; (488 <setup+0x1c0>)
     408:	f001 fff2 	bl	23f0 <Adafruit_MCP4725::begin(unsigned char)>
    delay(10);
     40c:	200a      	movs	r0, #10
     40e:	f003 f9fb 	bl	3808 <delay>
    dac.setVoltage(dacValue, false);
     412:	4b1e      	ldr	r3, [pc, #120]	; (48c <setup+0x1c4>)
     414:	4632      	mov	r2, r6
     416:	481c      	ldr	r0, [pc, #112]	; (488 <setup+0x1c0>)
     418:	8819      	ldrh	r1, [r3, #0]
     41a:	f001 fff1 	bl	2400 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
     41e:	2109      	movs	r1, #9
     420:	481b      	ldr	r0, [pc, #108]	; (490 <setup+0x1c8>)
     422:	f004 ff99 	bl	5358 <usb_serial_write>
     426:	4812      	ldr	r0, [pc, #72]	; (470 <setup+0x1a8>)
     428:	f002 fe1a 	bl	3060 <Print::println()>
    pinMode(PCC_Relay_Pin, OUTPUT);
     42c:	2101      	movs	r1, #1
     42e:	2021      	movs	r0, #33	; 0x21
     430:	f003 faa4 	bl	397c <pinMode>
    attachInterrupt(digitalPinToInterrupt(RPM_Pin), RPM_Interrupt, RISING);
     434:	2203      	movs	r2, #3
     436:	4917      	ldr	r1, [pc, #92]	; (494 <setup+0x1cc>)
     438:	201d      	movs	r0, #29
     43a:	f003 fad9 	bl	39f0 <attachInterrupt>
     43e:	210c      	movs	r1, #12
     440:	4819      	ldr	r0, [pc, #100]	; (4a8 <setup+0x1e0>)
     442:	f004 ff89 	bl	5358 <usb_serial_write>
     446:	480a      	ldr	r0, [pc, #40]	; (470 <setup+0x1a8>)
     448:	f002 fe0a 	bl	3060 <Print::println()>
     44c:	e7bf      	b.n	3ce <setup+0x106>
     44e:	4817      	ldr	r0, [pc, #92]	; (4ac <setup+0x1e4>)
        success = false;
     450:	461c      	mov	r4, r3
     452:	f004 ff81 	bl	5358 <usb_serial_write>
     456:	4806      	ldr	r0, [pc, #24]	; (470 <setup+0x1a8>)
     458:	f002 fe02 	bl	3060 <Print::println()>
     45c:	e776      	b.n	34c <setup+0x84>
     45e:	bf00      	nop
     460:	200039c4 	.word	0x200039c4
     464:	200039f3 	.word	0x200039f3
     468:	200039f2 	.word	0x200039f2
     46c:	20000e78 	.word	0x20000e78
     470:	20001108 	.word	0x20001108
     474:	20002f08 	.word	0x20002f08
     478:	20000e88 	.word	0x20000e88
     47c:	20002478 	.word	0x20002478
     480:	20002ef8 	.word	0x20002ef8
     484:	20000eb8 	.word	0x20000eb8
     488:	20002ed0 	.word	0x20002ed0
     48c:	20001be2 	.word	0x20001be2
     490:	20000ec8 	.word	0x20000ec8
     494:	000002b1 	.word	0x000002b1
     498:	20000ee4 	.word	0x20000ee4
     49c:	20003968 	.word	0x20003968
     4a0:	20003974 	.word	0x20003974
     4a4:	20000ed4 	.word	0x20000ed4
     4a8:	20000ef4 	.word	0x20000ef4
     4ac:	20000ea0 	.word	0x20000ea0
     4b0:	200039d4 	.word	0x200039d4

000004b4 <PrintOutput()>:
void PrintOutput () {
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	2100      	movs	r1, #0
     4b8:	b08d      	sub	sp, #52	; 0x34
     4ba:	48a7      	ldr	r0, [pc, #668]	; (758 <PrintOutput()+0x2a4>)
     4bc:	f004 ff4c 	bl	5358 <usb_serial_write>
     4c0:	48a6      	ldr	r0, [pc, #664]	; (75c <PrintOutput()+0x2a8>)
     4c2:	f002 fdcd 	bl	3060 <Print::println()>
     4c6:	2100      	movs	r1, #0
     4c8:	48a3      	ldr	r0, [pc, #652]	; (758 <PrintOutput()+0x2a4>)
     4ca:	ac08      	add	r4, sp, #32
     4cc:	f004 ff44 	bl	5358 <usb_serial_write>
     4d0:	48a2      	ldr	r0, [pc, #648]	; (75c <PrintOutput()+0x2a8>)
     4d2:	f002 fdc5 	bl	3060 <Print::println()>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     4d6:	49a2      	ldr	r1, [pc, #648]	; (760 <PrintOutput()+0x2ac>)
     4d8:	a804      	add	r0, sp, #16
     4da:	f002 fe8b 	bl	31f4 <String::String(char const*)>
     4de:	4ba1      	ldr	r3, [pc, #644]	; (764 <PrintOutput()+0x2b0>)
    Serial.println("Time: \t\t" + PadString(String(millis())));
     4e0:	220a      	movs	r2, #10
     4e2:	4668      	mov	r0, sp
     4e4:	6819      	ldr	r1, [r3, #0]
     4e6:	f002 feb1 	bl	324c <String::String(unsigned long, unsigned char)>
    while (str.length() < 8) {
     4ea:	9b02      	ldr	r3, [sp, #8]
     4ec:	2b07      	cmp	r3, #7
     4ee:	d812      	bhi.n	516 <PrintOutput()+0x62>
     4f0:	4d9d      	ldr	r5, [pc, #628]	; (768 <PrintOutput()+0x2b4>)
     4f2:	4629      	mov	r1, r5
     4f4:	4620      	mov	r0, r4
     4f6:	f002 fe7d 	bl	31f4 <String::String(char const*)>
        str = " " + str;
     4fa:	4669      	mov	r1, sp
     4fc:	4620      	mov	r0, r4
     4fe:	f002 ff47 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     502:	4601      	mov	r1, r0
     504:	4668      	mov	r0, sp
     506:	f002 fed5 	bl	32b4 <String::operator=(String const&)>
class StringSumHelper : public String
     50a:	4620      	mov	r0, r4
     50c:	f002 fe36 	bl	317c <String::~String()>
    while (str.length() < 8) {
     510:	9b02      	ldr	r3, [sp, #8]
     512:	2b07      	cmp	r3, #7
     514:	d9ed      	bls.n	4f2 <PrintOutput()+0x3e>
    return str;
     516:	4669      	mov	r1, sp
     518:	4620      	mov	r0, r4
     51a:	f002 fe19 	bl	3150 <String::String(String&&)>
    Serial.println("Time: \t\t" + PadString(String(millis())));
     51e:	4621      	mov	r1, r4
     520:	a804      	add	r0, sp, #16
     522:	f002 ff35 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     526:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
     528:	488c      	ldr	r0, [pc, #560]	; (75c <PrintOutput()+0x2a8>)
     52a:	f002 fd73 	bl	3014 <Print::print(String const&)>
     52e:	488b      	ldr	r0, [pc, #556]	; (75c <PrintOutput()+0x2a8>)
     530:	f002 fd96 	bl	3060 <Print::println()>
     534:	4620      	mov	r0, r4
     536:	f002 fe21 	bl	317c <String::~String()>
     53a:	4668      	mov	r0, sp
     53c:	f002 fe1e 	bl	317c <String::~String()>
     540:	a804      	add	r0, sp, #16
     542:	f002 fe1b 	bl	317c <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     546:	4989      	ldr	r1, [pc, #548]	; (76c <PrintOutput()+0x2b8>)
     548:	a804      	add	r0, sp, #16
     54a:	f002 fe53 	bl	31f4 <String::String(char const*)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     54e:	4b88      	ldr	r3, [pc, #544]	; (770 <PrintOutput()+0x2bc>)
     550:	220a      	movs	r2, #10
     552:	4668      	mov	r0, sp
     554:	8819      	ldrh	r1, [r3, #0]
     556:	f002 fe61 	bl	321c <String::String(int, unsigned char)>
    while (str.length() < 8) {
     55a:	9b02      	ldr	r3, [sp, #8]
     55c:	2b07      	cmp	r3, #7
     55e:	d812      	bhi.n	586 <PrintOutput()+0xd2>
     560:	4d81      	ldr	r5, [pc, #516]	; (768 <PrintOutput()+0x2b4>)
     562:	4629      	mov	r1, r5
     564:	4620      	mov	r0, r4
     566:	f002 fe45 	bl	31f4 <String::String(char const*)>
        str = " " + str;
     56a:	4669      	mov	r1, sp
     56c:	4620      	mov	r0, r4
     56e:	f002 ff0f 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     572:	4601      	mov	r1, r0
     574:	4668      	mov	r0, sp
     576:	f002 fe9d 	bl	32b4 <String::operator=(String const&)>
class StringSumHelper : public String
     57a:	4620      	mov	r0, r4
     57c:	f002 fdfe 	bl	317c <String::~String()>
    while (str.length() < 8) {
     580:	9b02      	ldr	r3, [sp, #8]
     582:	2b07      	cmp	r3, #7
     584:	d9ed      	bls.n	562 <PrintOutput()+0xae>
    return str;
     586:	4669      	mov	r1, sp
     588:	4620      	mov	r0, r4
     58a:	f002 fde1 	bl	3150 <String::String(String&&)>
    Serial.println("Dac: \t\t" + PadString(String(dacValue)));
     58e:	4621      	mov	r1, r4
     590:	a804      	add	r0, sp, #16
     592:	f002 fefd 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     596:	4601      	mov	r1, r0
     598:	4870      	ldr	r0, [pc, #448]	; (75c <PrintOutput()+0x2a8>)
     59a:	f002 fd3b 	bl	3014 <Print::print(String const&)>
     59e:	486f      	ldr	r0, [pc, #444]	; (75c <PrintOutput()+0x2a8>)
     5a0:	f002 fd5e 	bl	3060 <Print::println()>
     5a4:	4620      	mov	r0, r4
     5a6:	f002 fde9 	bl	317c <String::~String()>
     5aa:	4668      	mov	r0, sp
     5ac:	f002 fde6 	bl	317c <String::~String()>
     5b0:	a804      	add	r0, sp, #16
     5b2:	f002 fde3 	bl	317c <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     5b6:	496f      	ldr	r1, [pc, #444]	; (774 <PrintOutput()+0x2c0>)
     5b8:	a804      	add	r0, sp, #16
     5ba:	f002 fe1b 	bl	31f4 <String::String(char const*)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     5be:	486e      	ldr	r0, [pc, #440]	; (778 <PrintOutput()+0x2c4>)
     5c0:	f001 f960 	bl	1884 <Adafruit_INA260::readPower()>
     5c4:	2102      	movs	r1, #2
     5c6:	4668      	mov	r0, sp
     5c8:	f002 fe58 	bl	327c <String::String(float, unsigned char)>
    while (str.length() < 8) {
     5cc:	9b02      	ldr	r3, [sp, #8]
     5ce:	2b07      	cmp	r3, #7
     5d0:	d812      	bhi.n	5f8 <PrintOutput()+0x144>
     5d2:	4d65      	ldr	r5, [pc, #404]	; (768 <PrintOutput()+0x2b4>)
     5d4:	4629      	mov	r1, r5
     5d6:	4620      	mov	r0, r4
     5d8:	f002 fe0c 	bl	31f4 <String::String(char const*)>
        str = " " + str;
     5dc:	4669      	mov	r1, sp
     5de:	4620      	mov	r0, r4
     5e0:	f002 fed6 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     5e4:	4601      	mov	r1, r0
     5e6:	4668      	mov	r0, sp
     5e8:	f002 fe64 	bl	32b4 <String::operator=(String const&)>
class StringSumHelper : public String
     5ec:	4620      	mov	r0, r4
     5ee:	f002 fdc5 	bl	317c <String::~String()>
    while (str.length() < 8) {
     5f2:	9b02      	ldr	r3, [sp, #8]
     5f4:	2b07      	cmp	r3, #7
     5f6:	d9ed      	bls.n	5d4 <PrintOutput()+0x120>
    return str;
     5f8:	4669      	mov	r1, sp
     5fa:	4620      	mov	r0, r4
     5fc:	f002 fda8 	bl	3150 <String::String(String&&)>
    Serial.println("Power: \t\t" + PadString(String(ina260.readPower())));
     600:	4621      	mov	r1, r4
     602:	a804      	add	r0, sp, #16
     604:	f002 fec4 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     608:	4601      	mov	r1, r0
     60a:	4854      	ldr	r0, [pc, #336]	; (75c <PrintOutput()+0x2a8>)
     60c:	f002 fd02 	bl	3014 <Print::print(String const&)>
     610:	4852      	ldr	r0, [pc, #328]	; (75c <PrintOutput()+0x2a8>)
     612:	f002 fd25 	bl	3060 <Print::println()>
     616:	4620      	mov	r0, r4
     618:	f002 fdb0 	bl	317c <String::~String()>
     61c:	4668      	mov	r0, sp
     61e:	f002 fdad 	bl	317c <String::~String()>
     622:	a804      	add	r0, sp, #16
     624:	f002 fdaa 	bl	317c <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     628:	4954      	ldr	r1, [pc, #336]	; (77c <PrintOutput()+0x2c8>)
     62a:	a804      	add	r0, sp, #16
     62c:	f002 fde2 	bl	31f4 <String::String(char const*)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     630:	4851      	ldr	r0, [pc, #324]	; (778 <PrintOutput()+0x2c4>)
     632:	f001 f90d 	bl	1850 <Adafruit_INA260::readBusVoltage()>
     636:	2102      	movs	r1, #2
     638:	4668      	mov	r0, sp
     63a:	f002 fe1f 	bl	327c <String::String(float, unsigned char)>
    while (str.length() < 8) {
     63e:	9b02      	ldr	r3, [sp, #8]
     640:	2b07      	cmp	r3, #7
     642:	d812      	bhi.n	66a <PrintOutput()+0x1b6>
     644:	4d48      	ldr	r5, [pc, #288]	; (768 <PrintOutput()+0x2b4>)
     646:	4629      	mov	r1, r5
     648:	4620      	mov	r0, r4
     64a:	f002 fdd3 	bl	31f4 <String::String(char const*)>
        str = " " + str;
     64e:	4669      	mov	r1, sp
     650:	4620      	mov	r0, r4
     652:	f002 fe9d 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     656:	4601      	mov	r1, r0
     658:	4668      	mov	r0, sp
     65a:	f002 fe2b 	bl	32b4 <String::operator=(String const&)>
class StringSumHelper : public String
     65e:	4620      	mov	r0, r4
     660:	f002 fd8c 	bl	317c <String::~String()>
    while (str.length() < 8) {
     664:	9b02      	ldr	r3, [sp, #8]
     666:	2b07      	cmp	r3, #7
     668:	d9ed      	bls.n	646 <PrintOutput()+0x192>
    return str;
     66a:	4669      	mov	r1, sp
     66c:	4620      	mov	r0, r4
     66e:	f002 fd6f 	bl	3150 <String::String(String&&)>
    Serial.println("Voltage: \t" + PadString(String(ina260.readBusVoltage())));
     672:	4621      	mov	r1, r4
     674:	a804      	add	r0, sp, #16
     676:	f002 fe8b 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     67a:	4601      	mov	r1, r0
     67c:	4837      	ldr	r0, [pc, #220]	; (75c <PrintOutput()+0x2a8>)
     67e:	f002 fcc9 	bl	3014 <Print::print(String const&)>
     682:	4836      	ldr	r0, [pc, #216]	; (75c <PrintOutput()+0x2a8>)
     684:	f002 fcec 	bl	3060 <Print::println()>
     688:	4620      	mov	r0, r4
     68a:	f002 fd77 	bl	317c <String::~String()>
     68e:	4668      	mov	r0, sp
     690:	f002 fd74 	bl	317c <String::~String()>
     694:	a804      	add	r0, sp, #16
     696:	f002 fd71 	bl	317c <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     69a:	4939      	ldr	r1, [pc, #228]	; (780 <PrintOutput()+0x2cc>)
     69c:	4620      	mov	r0, r4
     69e:	f002 fda9 	bl	31f4 <String::String(char const*)>
    Serial.println("LA Position: \t" + String(myServo.presentPosition(LA_ID_NUM)));
     6a2:	2100      	movs	r1, #0
     6a4:	4837      	ldr	r0, [pc, #220]	; (784 <PrintOutput()+0x2d0>)
     6a6:	f000 ffc9 	bl	163c <PA12::presentPosition(int)>
     6aa:	220a      	movs	r2, #10
     6ac:	4601      	mov	r1, r0
     6ae:	a804      	add	r0, sp, #16
     6b0:	f002 fdb4 	bl	321c <String::String(int, unsigned char)>
     6b4:	a904      	add	r1, sp, #16
     6b6:	4620      	mov	r0, r4
     6b8:	f002 fe6a 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     6bc:	4601      	mov	r1, r0
     6be:	4827      	ldr	r0, [pc, #156]	; (75c <PrintOutput()+0x2a8>)
     6c0:	f002 fca8 	bl	3014 <Print::print(String const&)>
     6c4:	4825      	ldr	r0, [pc, #148]	; (75c <PrintOutput()+0x2a8>)
     6c6:	f002 fccb 	bl	3060 <Print::println()>
     6ca:	a804      	add	r0, sp, #16
     6cc:	f002 fd56 	bl	317c <String::~String()>
class StringSumHelper : public String
     6d0:	4620      	mov	r0, r4
     6d2:	f002 fd53 	bl	317c <String::~String()>
    String relayState = digitalRead(PCC_Relay_Pin) ? "High" : "Low";
     6d6:	2021      	movs	r0, #33	; 0x21
     6d8:	f003 f93e 	bl	3958 <digitalRead>
     6dc:	4a2a      	ldr	r2, [pc, #168]	; (788 <PrintOutput()+0x2d4>)
     6de:	492b      	ldr	r1, [pc, #172]	; (78c <PrintOutput()+0x2d8>)
     6e0:	2800      	cmp	r0, #0
     6e2:	bf18      	it	ne
     6e4:	4611      	movne	r1, r2
     6e6:	4668      	mov	r0, sp
     6e8:	f002 fd84 	bl	31f4 <String::String(char const*)>
	StringSumHelper(const char *p) : String(p) {}
     6ec:	4928      	ldr	r1, [pc, #160]	; (790 <PrintOutput()+0x2dc>)
     6ee:	4620      	mov	r0, r4
     6f0:	f002 fd80 	bl	31f4 <String::String(char const*)>
    Serial.println("Relay State: " + relayState);
     6f4:	4669      	mov	r1, sp
     6f6:	4620      	mov	r0, r4
     6f8:	f002 fe4a 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     6fc:	4601      	mov	r1, r0
     6fe:	4817      	ldr	r0, [pc, #92]	; (75c <PrintOutput()+0x2a8>)
     700:	f002 fc88 	bl	3014 <Print::print(String const&)>
     704:	4815      	ldr	r0, [pc, #84]	; (75c <PrintOutput()+0x2a8>)
     706:	f002 fcab 	bl	3060 <Print::println()>
class StringSumHelper : public String
     70a:	4620      	mov	r0, r4
     70c:	f002 fd36 	bl	317c <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
     710:	4920      	ldr	r1, [pc, #128]	; (794 <PrintOutput()+0x2e0>)
     712:	4620      	mov	r0, r4
     714:	f002 fd6e 	bl	31f4 <String::String(char const*)>
    Serial.println("RPM: " + String(GetRpmBuffered(rpm_filter)));
     718:	4b1f      	ldr	r3, [pc, #124]	; (798 <PrintOutput()+0x2e4>)
     71a:	6818      	ldr	r0, [r3, #0]
     71c:	f7ff fd80 	bl	220 <GetRpmBuffered(Filter*)>
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
     720:	a804      	add	r0, sp, #16
     722:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
     726:	2102      	movs	r1, #2
     728:	f002 fda8 	bl	327c <String::String(float, unsigned char)>
     72c:	a904      	add	r1, sp, #16
     72e:	4620      	mov	r0, r4
     730:	f002 fe2e 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     734:	4601      	mov	r1, r0
     736:	4809      	ldr	r0, [pc, #36]	; (75c <PrintOutput()+0x2a8>)
     738:	f002 fc6c 	bl	3014 <Print::print(String const&)>
     73c:	4807      	ldr	r0, [pc, #28]	; (75c <PrintOutput()+0x2a8>)
     73e:	f002 fc8f 	bl	3060 <Print::println()>
     742:	a804      	add	r0, sp, #16
     744:	f002 fd1a 	bl	317c <String::~String()>
class StringSumHelper : public String
     748:	4620      	mov	r0, r4
     74a:	f002 fd17 	bl	317c <String::~String()>
}
     74e:	4668      	mov	r0, sp
     750:	f002 fd14 	bl	317c <String::~String()>
     754:	b00d      	add	sp, #52	; 0x34
     756:	bd30      	pop	{r4, r5, pc}
     758:	200003c0 	.word	0x200003c0
     75c:	20001108 	.word	0x20001108
     760:	200003b8 	.word	0x200003b8
     764:	200039c4 	.word	0x200039c4
     768:	20000408 	.word	0x20000408
     76c:	200003c4 	.word	0x200003c4
     770:	20001be2 	.word	0x20001be2
     774:	200003cc 	.word	0x200003cc
     778:	20002ef8 	.word	0x20002ef8
     77c:	200003d8 	.word	0x200003d8
     780:	200003e4 	.word	0x200003e4
     784:	20002f08 	.word	0x20002f08
     788:	200003ac 	.word	0x200003ac
     78c:	200003b4 	.word	0x200003b4
     790:	200003f4 	.word	0x200003f4
     794:	20000404 	.word	0x20000404
     798:	20003978 	.word	0x20003978

0000079c <Set(String)>:
void Set(String command) {
     79c:	b530      	push	{r4, r5, lr}
     79e:	4604      	mov	r4, r0
     7a0:	b08d      	sub	sp, #52	; 0x34
    String arg = NextArg(&command);
     7a2:	4621      	mov	r1, r4
     7a4:	4668      	mov	r0, sp
     7a6:	f7ff fcbd 	bl	124 <NextArg(String*)>
    if (arg.toLowerCase() == "dac") {
     7aa:	4668      	mov	r0, sp
     7ac:	f002 fe94 	bl	34d8 <String::toLowerCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     7b0:	4935      	ldr	r1, [pc, #212]	; (888 <Set(String)+0xec>)
     7b2:	f002 fdf5 	bl	33a0 <String::equals(char const*) const>
     7b6:	2800      	cmp	r0, #0
     7b8:	d030      	beq.n	81c <Set(String)+0x80>
        dacValue = NextArg(&command).toInt();
     7ba:	4621      	mov	r1, r4
     7bc:	a808      	add	r0, sp, #32
     7be:	f7ff fcb1 	bl	124 <NextArg(String*)>
     7c2:	a808      	add	r0, sp, #32
     7c4:	f002 fe98 	bl	34f8 <String::toInt() const>
     7c8:	4c30      	ldr	r4, [pc, #192]	; (88c <Set(String)+0xf0>)
     7ca:	4603      	mov	r3, r0
     7cc:	a808      	add	r0, sp, #32
     7ce:	8023      	strh	r3, [r4, #0]
     7d0:	f002 fcd4 	bl	317c <String::~String()>
        dac.setVoltage(dacValue, false);
     7d4:	2200      	movs	r2, #0
     7d6:	8821      	ldrh	r1, [r4, #0]
     7d8:	482d      	ldr	r0, [pc, #180]	; (890 <Set(String)+0xf4>)
     7da:	f001 fe11 	bl	2400 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
	StringSumHelper(const char *p) : String(p) {}
     7de:	492d      	ldr	r1, [pc, #180]	; (894 <Set(String)+0xf8>)
     7e0:	a808      	add	r0, sp, #32
     7e2:	f002 fd07 	bl	31f4 <String::String(char const*)>
        Serial.println("DAC set to " + String(dacValue));
     7e6:	220a      	movs	r2, #10
     7e8:	8821      	ldrh	r1, [r4, #0]
        Serial.println("Linear Actuator set to " + String(pos));
     7ea:	a804      	add	r0, sp, #16
     7ec:	f002 fd16 	bl	321c <String::String(int, unsigned char)>
     7f0:	a904      	add	r1, sp, #16
     7f2:	a808      	add	r0, sp, #32
     7f4:	f002 fdcc 	bl	3390 <operator+(StringSumHelper const&, String const&)>
     7f8:	4601      	mov	r1, r0
     7fa:	4827      	ldr	r0, [pc, #156]	; (898 <Set(String)+0xfc>)
     7fc:	f002 fc0a 	bl	3014 <Print::print(String const&)>
     800:	4825      	ldr	r0, [pc, #148]	; (898 <Set(String)+0xfc>)
     802:	f002 fc2d 	bl	3060 <Print::println()>
     806:	a804      	add	r0, sp, #16
     808:	f002 fcb8 	bl	317c <String::~String()>
class StringSumHelper : public String
     80c:	a808      	add	r0, sp, #32
     80e:	f002 fcb5 	bl	317c <String::~String()>
}
     812:	4668      	mov	r0, sp
     814:	f002 fcb2 	bl	317c <String::~String()>
     818:	b00d      	add	sp, #52	; 0x34
     81a:	bd30      	pop	{r4, r5, pc}
    } else if (arg.toLowerCase() == "la") {
     81c:	4605      	mov	r5, r0
     81e:	4668      	mov	r0, sp
     820:	f002 fe5a 	bl	34d8 <String::toLowerCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     824:	491d      	ldr	r1, [pc, #116]	; (89c <Set(String)+0x100>)
     826:	f002 fdbb 	bl	33a0 <String::equals(char const*) const>
     82a:	b1b0      	cbz	r0, 85a <Set(String)+0xbe>
        int pos = NextArg(&command).toInt();
     82c:	4621      	mov	r1, r4
     82e:	a808      	add	r0, sp, #32
     830:	f7ff fc78 	bl	124 <NextArg(String*)>
     834:	a808      	add	r0, sp, #32
     836:	f002 fe5f 	bl	34f8 <String::toInt() const>
     83a:	4604      	mov	r4, r0
     83c:	a808      	add	r0, sp, #32
     83e:	f002 fc9d 	bl	317c <String::~String()>
        myServo.goalPosition(LA_ID_NUM, pos);
     842:	4622      	mov	r2, r4
     844:	4629      	mov	r1, r5
     846:	4816      	ldr	r0, [pc, #88]	; (8a0 <Set(String)+0x104>)
     848:	f000 fec4 	bl	15d4 <PA12::goalPosition(int, int)>
	StringSumHelper(const char *p) : String(p) {}
     84c:	4915      	ldr	r1, [pc, #84]	; (8a4 <Set(String)+0x108>)
     84e:	a808      	add	r0, sp, #32
     850:	f002 fcd0 	bl	31f4 <String::String(char const*)>
        Serial.println("Linear Actuator set to " + String(pos));
     854:	220a      	movs	r2, #10
     856:	4621      	mov	r1, r4
     858:	e7c7      	b.n	7ea <Set(String)+0x4e>
    } else if (arg.toLowerCase() == "res") {
     85a:	4668      	mov	r0, sp
     85c:	f002 fe3c 	bl	34d8 <String::toLowerCase()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
     860:	4911      	ldr	r1, [pc, #68]	; (8a8 <Set(String)+0x10c>)
     862:	f002 fd9d 	bl	33a0 <String::equals(char const*) const>
     866:	2800      	cmp	r0, #0
     868:	d0d3      	beq.n	812 <Set(String)+0x76>
        targetResistance = NextArg(&command).toFloat();
     86a:	4621      	mov	r1, r4
     86c:	a808      	add	r0, sp, #32
     86e:	f7ff fc59 	bl	124 <NextArg(String*)>
     872:	a808      	add	r0, sp, #32
     874:	f002 fe46 	bl	3504 <String::toFloat() const>
     878:	4b0c      	ldr	r3, [pc, #48]	; (8ac <Set(String)+0x110>)
     87a:	a808      	add	r0, sp, #32
     87c:	ed83 0a00 	vstr	s0, [r3]
     880:	f002 fc7c 	bl	317c <String::~String()>
     884:	e7c5      	b.n	812 <Set(String)+0x76>
     886:	bf00      	nop
     888:	20000454 	.word	0x20000454
     88c:	20001be2 	.word	0x20001be2
     890:	20002ed0 	.word	0x20002ed0
     894:	20000458 	.word	0x20000458
     898:	20001108 	.word	0x20001108
     89c:	20000464 	.word	0x20000464
     8a0:	20002f08 	.word	0x20002f08
     8a4:	20000468 	.word	0x20000468
     8a8:	20000480 	.word	0x20000480
     8ac:	20001bc8 	.word	0x20001bc8

000008b0 <Switch(String)>:
void Switch(String command) {
     8b0:	b500      	push	{lr}
     8b2:	b085      	sub	sp, #20
     8b4:	4601      	mov	r1, r0
    String arg = NextArg(&command);
     8b6:	4668      	mov	r0, sp
     8b8:	f7ff fc34 	bl	124 <NextArg(String*)>
    if (arg.toLowerCase() == "pcc") {
     8bc:	4668      	mov	r0, sp
     8be:	f002 fe0b 	bl	34d8 <String::toLowerCase()>
     8c2:	4910      	ldr	r1, [pc, #64]	; (904 <Switch(String)+0x54>)
     8c4:	f002 fd6c 	bl	33a0 <String::equals(char const*) const>
     8c8:	b928      	cbnz	r0, 8d6 <Switch(String)+0x26>
}
     8ca:	4668      	mov	r0, sp
     8cc:	f002 fc56 	bl	317c <String::~String()>
     8d0:	b005      	add	sp, #20
     8d2:	f85d fb04 	ldr.w	pc, [sp], #4
        digitalWrite(PCC_Relay_Pin, !digitalRead(PCC_Relay_Pin));
     8d6:	2021      	movs	r0, #33	; 0x21
     8d8:	f003 f83e 	bl	3958 <digitalRead>
     8dc:	4601      	mov	r1, r0
     8de:	2021      	movs	r0, #33	; 0x21
     8e0:	fab1 f181 	clz	r1, r1
     8e4:	0949      	lsrs	r1, r1, #5
     8e6:	f003 f80d 	bl	3904 <digitalWrite>
     8ea:	2104      	movs	r1, #4
     8ec:	4806      	ldr	r0, [pc, #24]	; (908 <Switch(String)+0x58>)
     8ee:	f004 fd33 	bl	5358 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8f2:	4806      	ldr	r0, [pc, #24]	; (90c <Switch(String)+0x5c>)
     8f4:	f002 fbb4 	bl	3060 <Print::println()>
}
     8f8:	4668      	mov	r0, sp
     8fa:	f002 fc3f 	bl	317c <String::~String()>
     8fe:	b005      	add	sp, #20
     900:	f85d fb04 	ldr.w	pc, [sp], #4
     904:	20000484 	.word	0x20000484
     908:	200003ac 	.word	0x200003ac
     90c:	20001108 	.word	0x20001108

00000910 <ProcessCommand(String)>:
void ProcessCommand (String serialInput) {
     910:	b510      	push	{r4, lr}
     912:	b088      	sub	sp, #32
     914:	4601      	mov	r1, r0
    String command = NextArg(&serialInput);
     916:	4668      	mov	r0, sp
     918:	f7ff fc04 	bl	124 <NextArg(String*)>
    switch (MatchCommand(command)) {
     91c:	4669      	mov	r1, sp
     91e:	a804      	add	r0, sp, #16
     920:	f002 fbf8 	bl	3114 <String::String(String const&)>
     924:	a804      	add	r0, sp, #16
     926:	f7ff fc2f 	bl	188 <MatchCommand(String)>
     92a:	4604      	mov	r4, r0
     92c:	a804      	add	r0, sp, #16
     92e:	f002 fc25 	bl	317c <String::~String()>
     932:	2c03      	cmp	r4, #3
     934:	d834      	bhi.n	9a0 <ProcessCommand(String)+0x90>
     936:	e8df f004 	tbb	[pc, r4]
     93a:	2027      	.short	0x2027
     93c:	0211      	.short	0x0211
            Switch(command);
     93e:	4669      	mov	r1, sp
     940:	a804      	add	r0, sp, #16
     942:	f002 fbe7 	bl	3114 <String::String(String const&)>
     946:	a804      	add	r0, sp, #16
     948:	f7ff ffb2 	bl	8b0 <Switch(String)>
     94c:	a804      	add	r0, sp, #16
     94e:	f002 fc15 	bl	317c <String::~String()>
}
     952:	4668      	mov	r0, sp
     954:	f002 fc12 	bl	317c <String::~String()>
     958:	b008      	add	sp, #32
     95a:	bd10      	pop	{r4, pc}
            Set(command);
     95c:	4669      	mov	r1, sp
     95e:	a804      	add	r0, sp, #16
     960:	f002 fbd8 	bl	3114 <String::String(String const&)>
     964:	a804      	add	r0, sp, #16
     966:	f7ff ff19 	bl	79c <Set(String)>
     96a:	a804      	add	r0, sp, #16
     96c:	f002 fc06 	bl	317c <String::~String()>
}
     970:	4668      	mov	r0, sp
     972:	f002 fc03 	bl	317c <String::~String()>
     976:	b008      	add	sp, #32
     978:	bd10      	pop	{r4, pc}
            Help();
     97a:	f7ff fc27 	bl	1cc <Help()>
}
     97e:	4668      	mov	r0, sp
     980:	f002 fbfc 	bl	317c <String::~String()>
     984:	b008      	add	sp, #32
     986:	bd10      	pop	{r4, pc}
     988:	211b      	movs	r1, #27
     98a:	4809      	ldr	r0, [pc, #36]	; (9b0 <ProcessCommand(String)+0xa0>)
     98c:	f004 fce4 	bl	5358 <usb_serial_write>
     990:	4808      	ldr	r0, [pc, #32]	; (9b4 <ProcessCommand(String)+0xa4>)
     992:	f002 fb65 	bl	3060 <Print::println()>
     996:	4668      	mov	r0, sp
     998:	f002 fbf0 	bl	317c <String::~String()>
     99c:	b008      	add	sp, #32
     99e:	bd10      	pop	{r4, pc}
     9a0:	2117      	movs	r1, #23
     9a2:	4805      	ldr	r0, [pc, #20]	; (9b8 <ProcessCommand(String)+0xa8>)
     9a4:	f004 fcd8 	bl	5358 <usb_serial_write>
     9a8:	4802      	ldr	r0, [pc, #8]	; (9b4 <ProcessCommand(String)+0xa4>)
     9aa:	f002 fb59 	bl	3060 <Print::println()>
     9ae:	e7d0      	b.n	952 <ProcessCommand(String)+0x42>
     9b0:	20000420 	.word	0x20000420
     9b4:	20001108 	.word	0x20001108
     9b8:	2000043c 	.word	0x2000043c

000009bc <loop>:
void loop () {
     9bc:	b510      	push	{r4, lr}
     9be:	ed2d 8b02 	vpush	{d8}
     9c2:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
     9c4:	f004 fc5e 	bl	5284 <usb_serial_available>
    if (Serial.available() > 0) {
     9c8:	2800      	cmp	r0, #0
     9ca:	dd14      	ble.n	9f6 <loop+0x3a>
        String serialInput = Serial.readStringUntil('\n');
     9cc:	2300      	movs	r3, #0
     9ce:	220a      	movs	r2, #10
     9d0:	492d      	ldr	r1, [pc, #180]	; (a88 <loop+0xcc>)
     9d2:	4668      	mov	r0, sp
     9d4:	f002 fb62 	bl	309c <Stream::readStringUntil(char, unsigned int)>
        ProcessCommand(serialInput);
     9d8:	4669      	mov	r1, sp
     9da:	a804      	add	r0, sp, #16
     9dc:	f002 fb9a 	bl	3114 <String::String(String const&)>
     9e0:	a804      	add	r0, sp, #16
     9e2:	f7ff ff95 	bl	910 <ProcessCommand(String)>
     9e6:	a804      	add	r0, sp, #16
     9e8:	f002 fbc8 	bl	317c <String::~String()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     9ec:	f004 fce8 	bl	53c0 <usb_serial_flush_output>
    }
     9f0:	4668      	mov	r0, sp
     9f2:	f002 fbc3 	bl	317c <String::~String()>
     9f6:	4c25      	ldr	r4, [pc, #148]	; (a8c <loop+0xd0>)
    if (printTimer < millis()) {
     9f8:	4b25      	ldr	r3, [pc, #148]	; (a90 <loop+0xd4>)
     9fa:	6821      	ldr	r1, [r4, #0]
     9fc:	681a      	ldr	r2, [r3, #0]
     9fe:	428a      	cmp	r2, r1
     a00:	d30b      	bcc.n	a1a <loop+0x5e>
    if (resistanceTracingTimer < millis() && trackResistance) {
     a02:	4b24      	ldr	r3, [pc, #144]	; (a94 <loop+0xd8>)
     a04:	6821      	ldr	r1, [r4, #0]
     a06:	681a      	ldr	r2, [r3, #0]
     a08:	428a      	cmp	r2, r1
     a0a:	d202      	bcs.n	a12 <loop+0x56>
     a0c:	4922      	ldr	r1, [pc, #136]	; (a98 <loop+0xdc>)
     a0e:	7809      	ldrb	r1, [r1, #0]
     a10:	b951      	cbnz	r1, a28 <loop+0x6c>
}
     a12:	b008      	add	sp, #32
     a14:	ecbd 8b02 	vpop	{d8}
     a18:	bd10      	pop	{r4, pc}
        printTimer += printTimerInterval;
     a1a:	4920      	ldr	r1, [pc, #128]	; (a9c <loop+0xe0>)
     a1c:	6809      	ldr	r1, [r1, #0]
     a1e:	440a      	add	r2, r1
     a20:	601a      	str	r2, [r3, #0]
        PrintOutput();
     a22:	f7ff fd47 	bl	4b4 <PrintOutput()>
     a26:	e7ec      	b.n	a02 <loop+0x46>
        resistanceTracingTimer += resistanceTrackingInterval;
     a28:	491d      	ldr	r1, [pc, #116]	; (aa0 <loop+0xe4>)
        float voltage = ina260.readBusVoltage();
     a2a:	481e      	ldr	r0, [pc, #120]	; (aa4 <loop+0xe8>)
        resistanceTracingTimer += resistanceTrackingInterval;
     a2c:	6809      	ldr	r1, [r1, #0]
     a2e:	440a      	add	r2, r1
     a30:	601a      	str	r2, [r3, #0]
        float voltage = ina260.readBusVoltage();
     a32:	f000 ff0d 	bl	1850 <Adafruit_INA260::readBusVoltage()>
     a36:	eeb0 8a40 	vmov.f32	s16, s0
        float current = ina260.readCurrent();
     a3a:	481a      	ldr	r0, [pc, #104]	; (aa4 <loop+0xe8>)
     a3c:	f000 feec 	bl	1818 <Adafruit_INA260::readCurrent()>
        float difference = resistance - targetResistance;
     a40:	4b19      	ldr	r3, [pc, #100]	; (aa8 <loop+0xec>)
        float resistance = voltage / current;
     a42:	eec8 7a00 	vdiv.f32	s15, s16, s0
        float difference = resistance - targetResistance;
     a46:	ed93 7a00 	vldr	s14, [r3]
     a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (difference > 0) {
     a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a56:	dd0f      	ble.n	a78 <loop+0xbc>
            dacValue += dacStepSize;
     a58:	4a14      	ldr	r2, [pc, #80]	; (aac <loop+0xf0>)
     a5a:	4b15      	ldr	r3, [pc, #84]	; (ab0 <loop+0xf4>)
     a5c:	6811      	ldr	r1, [r2, #0]
     a5e:	881a      	ldrh	r2, [r3, #0]
     a60:	4411      	add	r1, r2
     a62:	b289      	uxth	r1, r1
        dac.setVoltage(dacValue, false);
     a64:	2200      	movs	r2, #0
     a66:	4813      	ldr	r0, [pc, #76]	; (ab4 <loop+0xf8>)
     a68:	8019      	strh	r1, [r3, #0]
}
     a6a:	b008      	add	sp, #32
     a6c:	ecbd 8b02 	vpop	{d8}
     a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dac.setVoltage(dacValue, false);
     a74:	f001 bcc4 	b.w	2400 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>
            dacValue -= dacStepSize;
     a78:	4b0d      	ldr	r3, [pc, #52]	; (ab0 <loop+0xf4>)
     a7a:	4a0c      	ldr	r2, [pc, #48]	; (aac <loop+0xf0>)
     a7c:	8819      	ldrh	r1, [r3, #0]
     a7e:	6812      	ldr	r2, [r2, #0]
     a80:	1a89      	subs	r1, r1, r2
     a82:	b289      	uxth	r1, r1
     a84:	e7ee      	b.n	a64 <loop+0xa8>
     a86:	bf00      	nop
     a88:	20001108 	.word	0x20001108
     a8c:	200039c4 	.word	0x200039c4
     a90:	20003968 	.word	0x20003968
     a94:	20003974 	.word	0x20003974
     a98:	200039ee 	.word	0x200039ee
     a9c:	20001bc0 	.word	0x20001bc0
     aa0:	20001bc4 	.word	0x20001bc4
     aa4:	20002ef8 	.word	0x20002ef8
     aa8:	20001bc8 	.word	0x20001bc8
     aac:	2000196c 	.word	0x2000196c
     ab0:	20001be2 	.word	0x20001be2
     ab4:	20002ed0 	.word	0x20002ed0

00000ab8 <_GLOBAL__sub_I_myServo>:
     ab8:	b510      	push	{r4, lr}
PA12 myServo(&Serial1, 16, 1);
     aba:	4c0c      	ldr	r4, [pc, #48]	; (aec <_GLOBAL__sub_I_myServo+0x34>)
     abc:	2301      	movs	r3, #1
     abe:	2210      	movs	r2, #16
     ac0:	490b      	ldr	r1, [pc, #44]	; (af0 <_GLOBAL__sub_I_myServo+0x38>)
     ac2:	4620      	mov	r0, r4
     ac4:	f000 fb0e 	bl	10e4 <PA12::PA12(HardwareSerial*, int, bool)>
     ac8:	4a0a      	ldr	r2, [pc, #40]	; (af4 <_GLOBAL__sub_I_myServo+0x3c>)
     aca:	490b      	ldr	r1, [pc, #44]	; (af8 <_GLOBAL__sub_I_myServo+0x40>)
     acc:	4620      	mov	r0, r4
     ace:	f004 fdb5 	bl	563c <__aeabi_atexit>
Adafruit_INA260 ina260 = Adafruit_INA260();
     ad2:	480a      	ldr	r0, [pc, #40]	; (afc <_GLOBAL__sub_I_myServo+0x44>)
     ad4:	f000 fe24 	bl	1720 <Adafruit_INA260::Adafruit_INA260()>
Adafruit_MCP4725 dac;
     ad8:	4809      	ldr	r0, [pc, #36]	; (b00 <_GLOBAL__sub_I_myServo+0x48>)
     ada:	f001 fc87 	bl	23ec <Adafruit_MCP4725::Adafruit_MCP4725()>
struct Filter* rpm_filter = CreateFilter(10, 14);
     ade:	210e      	movs	r1, #14
     ae0:	200a      	movs	r0, #10
     ae2:	f7ff fb75 	bl	1d0 <CreateFilter(unsigned int, int)>
     ae6:	4b07      	ldr	r3, [pc, #28]	; (b04 <_GLOBAL__sub_I_myServo+0x4c>)
     ae8:	6018      	str	r0, [r3, #0]
     aea:	bd10      	pop	{r4, pc}
     aec:	20002f08 	.word	0x20002f08
     af0:	20002178 	.word	0x20002178
     af4:	200013dc 	.word	0x200013dc
     af8:	000010c1 	.word	0x000010c1
     afc:	20002ef8 	.word	0x20002ef8
     b00:	20002ed0 	.word	0x20002ed0
     b04:	20003978 	.word	0x20003978

00000b08 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     b08:	2000      	movs	r0, #0
     b0a:	4770      	bx	lr

00000b0c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
     b0c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     b10:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
     b14:	1a10      	subs	r0, r2, r0
     b16:	4770      	bx	lr

00000b18 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     b18:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     b1c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     b20:	429a      	cmp	r2, r3
     b22:	d905      	bls.n	b30 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
     b24:	1c5a      	adds	r2, r3, #1
     b26:	4403      	add	r3, r0
     b28:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
     b2c:	7e98      	ldrb	r0, [r3, #26]
     b2e:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     b30:	f04f 30ff 	mov.w	r0, #4294967295
	}
     b34:	4770      	bx	lr
     b36:	bf00      	nop

00000b38 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
     b38:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
     b3c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
     b40:	429a      	cmp	r2, r3
     b42:	d902      	bls.n	b4a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
     b44:	4418      	add	r0, r3
     b46:	7e80      	ldrb	r0, [r0, #26]
     b48:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
     b4a:	f04f 30ff 	mov.w	r0, #4294967295
	}
     b4e:	4770      	bx	lr

00000b50 <TwoWire::flush()>:
	virtual void flush(void) {
	}
     b50:	4770      	bx	lr
     b52:	bf00      	nop

00000b54 <TwoWire::write(unsigned char)>:
{
     b54:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
     b56:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
     b5a:	b178      	cbz	r0, b7c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
     b5c:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
     b60:	2a88      	cmp	r2, #136	; 0x88
     b62:	d903      	bls.n	b6c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
     b64:	2201      	movs	r2, #1
			return 0;
     b66:	2000      	movs	r0, #0
     b68:	605a      	str	r2, [r3, #4]
     b6a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
     b6c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
     b70:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
     b72:	441a      	add	r2, r3
     b74:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
     b78:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop

00000b80 <TwoWire::write(unsigned char const*, unsigned int)>:
{
     b80:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
     b82:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
     b86:	b90c      	cbnz	r4, b8c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
     b88:	4620      	mov	r0, r4
     b8a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
     b8c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
     b90:	4605      	mov	r5, r0
     b92:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
     b96:	42a2      	cmp	r2, r4
     b98:	d80d      	bhi.n	bb6 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     b9a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
     b9c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
     ba0:	4622      	mov	r2, r4
     ba2:	4418      	add	r0, r3
     ba4:	f002 ffa8 	bl	3af8 <memcpy>
		txBufferLength += quantity;
     ba8:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
     bac:	4620      	mov	r0, r4
		txBufferLength += quantity;
     bae:	4423      	add	r3, r4
     bb0:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
     bb4:	bd38      	pop	{r3, r4, r5, pc}
     bb6:	2201      	movs	r2, #1
     bb8:	6042      	str	r2, [r0, #4]
     bba:	e7ef      	b.n	b9c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

00000bbc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
     bbc:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
     bbe:	2500      	movs	r5, #0
     bc0:	4613      	mov	r3, r2
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bc6:	4604      	mov	r4, r0
     bc8:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
     bcc:	4815      	ldr	r0, [pc, #84]	; (c24 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
     bce:	2288      	movs	r2, #136	; 0x88
     bd0:	6121      	str	r1, [r4, #16]
     bd2:	4629      	mov	r1, r5
     bd4:	6020      	str	r0, [r4, #0]
     bd6:	f104 001a 	add.w	r0, r4, #26
     bda:	6163      	str	r3, [r4, #20]
     bdc:	7325      	strb	r5, [r4, #12]
     bde:	7625      	strb	r5, [r4, #24]
     be0:	7665      	strb	r5, [r4, #25]
     be2:	f006 fc55 	bl	7490 <memset>
     be6:	2289      	movs	r2, #137	; 0x89
     be8:	4629      	mov	r1, r5
     bea:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
     bee:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
     bf2:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
     bf6:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
     bfa:	f006 fc49 	bl	7490 <memset>
	}
     bfe:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
     c00:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
     c04:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
     c08:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
     c0c:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
     c10:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
     c14:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
     c18:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
     c1c:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
     c20:	bd38      	pop	{r3, r4, r5, pc}
     c22:	bf00      	nop
     c24:	200006a0 	.word	0x200006a0

00000c28 <TwoWire::force_clock()>:
{
     c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     c2c:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     c30:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     c32:	7e01      	ldrb	r1, [r0, #24]
{
     c34:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     c36:	7e43      	ldrb	r3, [r0, #25]
{
     c38:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     c3a:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     c3e:	4a38      	ldr	r2, [pc, #224]	; (d20 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     c40:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c44:	4f37      	ldr	r7, [pc, #220]	; (d24 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
     c46:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
     c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
     c4c:	eb02 1501 	add.w	r5, r2, r1, lsl #4
     c50:	0109      	lsls	r1, r1, #4
     c52:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
     c54:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     c58:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
     c5c:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
     c60:	011b      	lsls	r3, r3, #4
     c62:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
     c64:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
     c66:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
     c6a:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
     c6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     c72:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     c74:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
     c76:	492c      	ldr	r1, [pc, #176]	; (d28 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
     c78:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
     c7a:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
     c7e:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
     c80:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
     c84:	686b      	ldr	r3, [r5, #4]
     c86:	4333      	orrs	r3, r6
     c88:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c8a:	4b28      	ldr	r3, [pc, #160]	; (d2c <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
     c8c:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     c8e:	683a      	ldr	r2, [r7, #0]
     c90:	fba3 3202 	umull	r3, r2, r3, r2
     c94:	0c92      	lsrs	r2, r2, #18
     c96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     c9a:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     c9c:	684b      	ldr	r3, [r1, #4]
     c9e:	1b1b      	subs	r3, r3, r4
     ca0:	429a      	cmp	r2, r3
     ca2:	d8fb      	bhi.n	c9c <TwoWire::force_clock()+0x74>
     ca4:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
     ca8:	4a1f      	ldr	r2, [pc, #124]	; (d28 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     caa:	f8df e080 	ldr.w	lr, [pc, #128]	; d2c <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
     cae:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
     cb2:	4203      	tst	r3, r0
     cb4:	d002      	beq.n	cbc <TwoWire::force_clock()+0x94>
     cb6:	68ab      	ldr	r3, [r5, #8]
     cb8:	4233      	tst	r3, r6
     cba:	d12f      	bne.n	d1c <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
     cbc:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
     cc0:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     cc2:	6839      	ldr	r1, [r7, #0]
     cc4:	fbae 3101 	umull	r3, r1, lr, r1
     cc8:	0c89      	lsrs	r1, r1, #18
     cca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     cce:	6853      	ldr	r3, [r2, #4]
     cd0:	1b1b      	subs	r3, r3, r4
     cd2:	4299      	cmp	r1, r3
     cd4:	d8fb      	bhi.n	cce <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
     cd6:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
     cda:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     cdc:	6839      	ldr	r1, [r7, #0]
     cde:	fbae 3101 	umull	r3, r1, lr, r1
     ce2:	0c89      	lsrs	r1, r1, #18
     ce4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     ce8:	6853      	ldr	r3, [r2, #4]
     cea:	1b1b      	subs	r3, r3, r4
     cec:	4299      	cmp	r1, r3
     cee:	d8fb      	bhi.n	ce8 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
     cf0:	f1bc 0c01 	subs.w	ip, ip, #1
     cf4:	d1db      	bne.n	cae <TwoWire::force_clock()+0x86>
	bool ret = false;
     cf6:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     cf8:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     cfc:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
     cfe:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
     d02:	68db      	ldr	r3, [r3, #12]
     d04:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
     d08:	f899 3019 	ldrb.w	r3, [r9, #25]
     d0c:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
     d10:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
     d14:	6013      	str	r3, [r2, #0]
}
     d16:	b003      	add	sp, #12
     d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
     d1c:	2001      	movs	r0, #1
     d1e:	e7eb      	b.n	cf8 <TwoWire::force_clock()+0xd0>
     d20:	20000acc 	.word	0x20000acc
     d24:	20001104 	.word	0x20001104
     d28:	e0001000 	.word	0xe0001000
     d2c:	431bde83 	.word	0x431bde83

00000d30 <TwoWire::wait_idle()>:
	return systick_millis_count;
     d30:	4a0e      	ldr	r2, [pc, #56]	; (d6c <TwoWire::wait_idle()+0x3c>)
{
     d32:	b510      	push	{r4, lr}
     d34:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
     d36:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     d38:	e005      	b.n	d46 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
     d3a:	01db      	lsls	r3, r3, #7
     d3c:	d407      	bmi.n	d4e <TwoWire::wait_idle()+0x1e>
     d3e:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     d40:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
     d42:	2b10      	cmp	r3, #16
     d44:	d808      	bhi.n	d58 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
     d46:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
     d48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
     d4c:	d1f5      	bne.n	d3a <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
     d4e:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     d52:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     d54:	6163      	str	r3, [r4, #20]
}
     d56:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
     d58:	f7ff ff66 	bl	c28 <TwoWire::force_clock()>
     d5c:	2800      	cmp	r0, #0
     d5e:	d0fa      	beq.n	d56 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
     d60:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
     d64:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
     d66:	6163      	str	r3, [r4, #20]
	return true;
     d68:	e7f5      	b.n	d56 <TwoWire::wait_idle()+0x26>
     d6a:	bf00      	nop
     d6c:	200039c4 	.word	0x200039c4

00000d70 <TwoWire::endTransmission(unsigned char)>:
{
     d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
     d74:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
     d78:	f1ba 0f00 	cmp.w	sl, #0
     d7c:	d058      	beq.n	e30 <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
     d7e:	4681      	mov	r9, r0
     d80:	4688      	mov	r8, r1
     d82:	f7ff ffd5 	bl	d30 <TwoWire::wait_idle()>
     d86:	2800      	cmp	r0, #0
     d88:	d052      	beq.n	e30 <TwoWire::endTransmission(unsigned char)+0xc0>
     d8a:	4e37      	ldr	r6, [pc, #220]	; (e68 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
     d8c:	2400      	movs	r4, #0
     d8e:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     d90:	e016      	b.n	dc0 <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
     d92:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     d94:	051a      	lsls	r2, r3, #20
     d96:	d444      	bmi.n	e22 <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
     d98:	0558      	lsls	r0, r3, #21
     d9a:	d458      	bmi.n	e4e <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
     d9c:	0499      	lsls	r1, r3, #18
     d9e:	d44c      	bmi.n	e3a <TwoWire::endTransmission(unsigned char)+0xca>
     da0:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
     da2:	1bd2      	subs	r2, r2, r7
     da4:	2a32      	cmp	r2, #50	; 0x32
     da6:	d848      	bhi.n	e3a <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
     da8:	4554      	cmp	r4, sl
     daa:	d907      	bls.n	dbc <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
     dac:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     dae:	0752      	lsls	r2, r2, #29
     db0:	d104      	bne.n	dbc <TwoWire::endTransmission(unsigned char)+0x4c>
     db2:	059b      	lsls	r3, r3, #22
     db4:	d455      	bmi.n	e62 <TwoWire::endTransmission(unsigned char)+0xf2>
     db6:	f1b8 0f00 	cmp.w	r8, #0
     dba:	d052      	beq.n	e62 <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
     dbc:	f004 fb4a 	bl	5454 <yield>
		if (tx_index <= tx_len) {
     dc0:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     dc2:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
     dc6:	d8e4      	bhi.n	d92 <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     dc8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
     dca:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
     dcc:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
     dd0:	d4df      	bmi.n	d92 <TwoWire::endTransmission(unsigned char)+0x22>
     dd2:	e013      	b.n	dfc <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     dd4:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
     dd8:	3301      	adds	r3, #1
			while (fifo_used < 4) {
     dda:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
     de0:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
     de2:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     de4:	d027      	beq.n	e36 <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
     de6:	458a      	cmp	sl, r1
				fifo_used++;
     de8:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     dec:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     df0:	d90e      	bls.n	e10 <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     df2:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
     df6:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     df8:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
     dfa:	d0ca      	beq.n	d92 <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
     dfc:	2101      	movs	r1, #1
				if (tx_index == 0) {
     dfe:	2c00      	cmp	r4, #0
     e00:	d0e8      	beq.n	dd4 <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     e02:	4621      	mov	r1, r4
				fifo_used++;
     e04:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     e06:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
     e08:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
     e0a:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
     e0e:	d8f0      	bhi.n	df2 <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     e10:	f1b8 0f00 	cmp.w	r8, #0
     e14:	d0bd      	beq.n	d92 <TwoWire::endTransmission(unsigned char)+0x22>
     e16:	f44f 7300 	mov.w	r3, #512	; 0x200
     e1a:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
     e1c:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
     e1e:	051a      	lsls	r2, r3, #20
     e20:	d5ba      	bpl.n	d98 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e22:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
     e24:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     e2a:	612b      	str	r3, [r5, #16]
}
     e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
     e30:	2004      	movs	r0, #4
}
     e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
     e36:	2401      	movs	r4, #1
     e38:	e7ab      	b.n	d92 <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e3a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
     e40:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     e46:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     e48:	662a      	str	r2, [r5, #96]	; 0x60
}
     e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e4e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     e50:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
     e54:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     e56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     e5a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
     e5c:	662a      	str	r2, [r5, #96]	; 0x60
}
     e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
     e62:	2000      	movs	r0, #0
     e64:	e7e5      	b.n	e32 <TwoWire::endTransmission(unsigned char)+0xc2>
     e66:	bf00      	nop
     e68:	200039c4 	.word	0x200039c4

00000e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
     e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e70:	4682      	mov	sl, r0
     e72:	460c      	mov	r4, r1
     e74:	4615      	mov	r5, r2
     e76:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
     e78:	f7ff ff5a 	bl	d30 <TwoWire::wait_idle()>
     e7c:	2800      	cmp	r0, #0
     e7e:	f000 808f 	beq.w	fa0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
     e82:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
     e84:	2100      	movs	r1, #0
     e86:	2d01      	cmp	r5, #1
     e88:	f8df 811c 	ldr.w	r8, [pc, #284]	; fa8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     e8c:	b2db      	uxtb	r3, r3
     e8e:	f240 4601 	movw	r6, #1025	; 0x401
     e92:	bf38      	it	cc
     e94:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
     e96:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     e98:	431e      	orrs	r6, r3
     e9a:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
     e9e:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
     ea2:	e01e      	b.n	ee2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
     ea4:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     ea8:	2b87      	cmp	r3, #135	; 0x87
     eaa:	d93d      	bls.n	f28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
     eac:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     eae:	050b      	lsls	r3, r1, #20
     eb0:	d457      	bmi.n	f62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
     eb2:	f411 5f10 	tst.w	r1, #9216	; 0x2400
     eb6:	d167      	bne.n	f88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
     eb8:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
     ebc:	eba3 0309 	sub.w	r3, r3, r9
     ec0:	2b32      	cmp	r3, #50	; 0x32
     ec2:	d861      	bhi.n	f88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
     ec4:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
     ec8:	42ab      	cmp	r3, r5
     eca:	d308      	bcc.n	ede <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     ecc:	2c02      	cmp	r4, #2
     ece:	d906      	bls.n	ede <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
     ed0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
     ed2:	0758      	lsls	r0, r3, #29
     ed4:	d103      	bne.n	ede <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
     ed6:	058b      	lsls	r3, r1, #22
     ed8:	d447      	bmi.n	f6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
     eda:	2f00      	cmp	r7, #0
     edc:	d045      	beq.n	f6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
     ede:	f004 fab9 	bl	5454 <yield>
		if (tx_state < 3) {
     ee2:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     ee4:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
     ee8:	d8dc      	bhi.n	ea4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     eea:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
     eec:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
     eee:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
     ef2:	d4d7      	bmi.n	ea4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
     ef4:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     ef6:	1e6c      	subs	r4, r5, #1
     ef8:	4408      	add	r0, r1
     efa:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
     efe:	b941      	cbnz	r1, f12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
     f00:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
     f02:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
     f04:	1a43      	subs	r3, r0, r1
     f06:	2b03      	cmp	r3, #3
     f08:	d801      	bhi.n	f0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
     f0a:	2902      	cmp	r1, #2
     f0c:	d9f7      	bls.n	efe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
     f0e:	460c      	mov	r4, r1
     f10:	e7c8      	b.n	ea4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
     f12:	2901      	cmp	r1, #1
     f14:	d031      	beq.n	f7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     f16:	b117      	cbz	r7, f1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
     f18:	f44f 7300 	mov.w	r3, #512	; 0x200
     f1c:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
     f1e:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
     f22:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
     f24:	2b87      	cmp	r3, #135	; 0x87
     f26:	d8c1      	bhi.n	eac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     f28:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     f2a:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     f2e:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     f32:	d0bb      	beq.n	eac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     f34:	1c59      	adds	r1, r3, #1
     f36:	449e      	add	lr, r3
     f38:	3319      	adds	r3, #25
     f3a:	b2c9      	uxtb	r1, r1
     f3c:	fa5f fe8e 	uxtb.w	lr, lr
     f40:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
     f44:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     f48:	1c48      	adds	r0, r1, #1
     f4a:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
     f4c:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     f50:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
     f52:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
     f56:	d0a9      	beq.n	eac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
     f58:	2989      	cmp	r1, #137	; 0x89
     f5a:	d1f3      	bne.n	f44 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
     f5c:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
     f5e:	050b      	lsls	r3, r1, #20
     f60:	d5a7      	bpl.n	eb2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f62:	6913      	ldr	r3, [r2, #16]
     f64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f68:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     f6a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     f6c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     f70:	d105      	bne.n	f7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
     f72:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
     f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     f7a:	6614      	str	r4, [r2, #96]	; 0x60
     f7c:	e7c1      	b.n	f02 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     f7e:	6913      	ldr	r3, [r2, #16]
     f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     f84:	6113      	str	r3, [r2, #16]
     f86:	e7f4      	b.n	f72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f88:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     f8e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     f92:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
     f94:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
     f96:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
     f98:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
     f9c:	d0e9      	beq.n	f72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
     f9e:	e7ee      	b.n	f7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
     fa0:	2004      	movs	r0, #4
}
     fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     fa6:	bf00      	nop
     fa8:	200039c4 	.word	0x200039c4

00000fac <TwoWire::isr()>:
	uint32_t status = port->SSR;
     fac:	6903      	ldr	r3, [r0, #16]
{
     fae:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
     fb0:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
     fb4:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
     fb6:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
     fba:	d001      	beq.n	fc0 <TwoWire::isr()+0x14>
     fbc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
     fc0:	07ae      	lsls	r6, r5, #30
     fc2:	d50b      	bpl.n	fdc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
     fc4:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
     fc8:	0408      	lsls	r0, r1, #16
     fca:	d53e      	bpl.n	104a <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
     fcc:	2200      	movs	r2, #0
     fce:	2001      	movs	r0, #1
     fd0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
     fd4:	4422      	add	r2, r4
     fd6:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
     fda:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
     fdc:	07ea      	lsls	r2, r5, #31
     fde:	d510      	bpl.n	1002 <TwoWire::isr()+0x56>
		if (!transmitting) {
     fe0:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
     fe4:	b1f6      	cbz	r6, 1024 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
     fe6:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
     fea:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
     fee:	42b2      	cmp	r2, r6
     ff0:	d927      	bls.n	1042 <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
     ff2:	1c72      	adds	r2, r6, #1
     ff4:	4426      	add	r6, r4
     ff6:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
     ffa:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
     ffe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    1002:	05ab      	lsls	r3, r5, #22
    1004:	d50d      	bpl.n	1022 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    1006:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    100a:	b118      	cbz	r0, 1014 <TwoWire::isr()+0x68>
    100c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    1010:	b103      	cbz	r3, 1014 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    1012:	4798      	blx	r3
		rxBufferIndex = 0;
    1014:	2300      	movs	r3, #0
    1016:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    101a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    101e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    1022:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
    1024:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    1028:	b10a      	cbz	r2, 102e <TwoWire::isr()+0x82>
				(*user_onRequest)();
    102a:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
    102c:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
    102e:	2200      	movs	r2, #0
    1030:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
    1034:	2201      	movs	r2, #1
    1036:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    103a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
    103e:	42b2      	cmp	r2, r6
    1040:	d8d7      	bhi.n	ff2 <TwoWire::isr()+0x46>
			port->STDR = 0;
    1042:	2200      	movs	r2, #0
    1044:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    1048:	e7db      	b.n	1002 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    104a:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
    104e:	2a87      	cmp	r2, #135	; 0x87
    1050:	d8c4      	bhi.n	fdc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    1052:	1c50      	adds	r0, r2, #1
    1054:	b2c0      	uxtb	r0, r0
    1056:	e7bd      	b.n	fd4 <TwoWire::isr()+0x28>

00001058 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    1058:	4801      	ldr	r0, [pc, #4]	; (1060 <lpi2c1_isr()+0x8>)
    105a:	f7ff bfa7 	b.w	fac <TwoWire::isr()>
    105e:	bf00      	nop
    1060:	20002478 	.word	0x20002478

00001064 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    1064:	4801      	ldr	r0, [pc, #4]	; (106c <lpi2c3_isr()+0x8>)
    1066:	f7ff bfa1 	b.w	fac <TwoWire::isr()>
    106a:	bf00      	nop
    106c:	200025b8 	.word	0x200025b8

00001070 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    1070:	4801      	ldr	r0, [pc, #4]	; (1078 <lpi2c4_isr()+0x8>)
    1072:	f7ff bf9b 	b.w	fac <TwoWire::isr()>
    1076:	bf00      	nop
    1078:	200026f8 	.word	0x200026f8

0000107c <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
    107c:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
    107e:	4c09      	ldr	r4, [pc, #36]	; (10a4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
    1080:	4909      	ldr	r1, [pc, #36]	; (10a8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
    1082:	4622      	mov	r2, r4
    1084:	4809      	ldr	r0, [pc, #36]	; (10ac <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
    1086:	f7ff fd99 	bl	bbc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
    108a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    108e:	4908      	ldr	r1, [pc, #32]	; (10b0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
    1090:	4808      	ldr	r0, [pc, #32]	; (10b4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
    1092:	f7ff fd93 	bl	bbc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
    1096:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
    109a:	4907      	ldr	r1, [pc, #28]	; (10b8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
    109c:	4807      	ldr	r0, [pc, #28]	; (10bc <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
    109e:	f7ff fd8d 	bl	bbc <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
    10a2:	bd10      	pop	{r4, pc}
    10a4:	60001ff8 	.word	0x60001ff8
    10a8:	403f0000 	.word	0x403f0000
    10ac:	20002478 	.word	0x20002478
    10b0:	403f8000 	.word	0x403f8000
    10b4:	200025b8 	.word	0x200025b8
    10b8:	403fc000 	.word	0x403fc000
    10bc:	200026f8 	.word	0x200026f8

000010c0 <PA12::~PA12()>:
}
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop

000010c4 <PA12::~PA12()>:
PA12::~PA12() {
    10c4:	b510      	push	{r4, lr}
    10c6:	4604      	mov	r4, r0
}
    10c8:	f640 2148 	movw	r1, #2632	; 0xa48
    10cc:	f002 fdb0 	bl	3c30 <operator delete(void*, unsigned int)>
    10d0:	4620      	mov	r0, r4
    10d2:	bd10      	pop	{r4, pc}

000010d4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    10d4:	f004 b8d6 	b.w	5284 <usb_serial_available>

000010d8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    10d8:	f004 b918 	b.w	530c <usb_serial_getchar>

000010dc <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    10dc:	4608      	mov	r0, r1
    10de:	f004 b925 	b.w	532c <usb_serial_putchar>
    10e2:	bf00      	nop

000010e4 <PA12::PA12(HardwareSerial*, int, bool)>:
	PA12_Serial=dev_serial;
    10e4:	6081      	str	r1, [r0, #8]
	PA12_DirPin_Level_Rx = !TxLevel;
    10e6:	f083 0101 	eor.w	r1, r3, #1
	PA12_DirPin=DirectionPin;
    10ea:	60c2      	str	r2, [r0, #12]
	PA12_DirPin_Level_Tx = TxLevel;//tx
    10ec:	7403      	strb	r3, [r0, #16]
	PA12_Serial_Type=0;
    10ee:	2300      	movs	r3, #0
PA12::PA12(HardwareSerial  *dev_serial, int DirectionPin,bool TxLevel) {
    10f0:	4a02      	ldr	r2, [pc, #8]	; (10fc <PA12::PA12(HardwareSerial*, int, bool)+0x18>)
	PA12_DirPin_Level_Rx = !TxLevel;
    10f2:	7441      	strb	r1, [r0, #17]
	PA12_Serial_Type=0;
    10f4:	e9c0 2300 	strd	r2, r3, [r0]
}
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop
    10fc:	20000690 	.word	0x20000690

00001100 <PA12::begin(int)>:
void PA12::begin(int baud){
    1100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1102:	4604      	mov	r4, r0
    1104:	460d      	mov	r5, r1
	pinMode(PA12_DirPin, OUTPUT);
    1106:	7b00      	ldrb	r0, [r0, #12]
    1108:	2101      	movs	r1, #1
    110a:	f002 fc37 	bl	397c <pinMode>
	if(PA12_Serial_Type)
    110e:	6866      	ldr	r6, [r4, #4]
    1110:	b30e      	cbz	r6, 1156 <PA12::begin(int)+0x56>
	((SoftwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    1112:	68a6      	ldr	r6, [r4, #8]
    1114:	4628      	mov	r0, r5
    1116:	f000 faaf 	bl	1678 <irp_get_baudrate>
    111a:	4601      	mov	r1, r0
    111c:	4630      	mov	r0, r6
    111e:	f000 fadb 	bl	16d8 <SoftwareSerial::begin(unsigned long)>
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx);// TX Enable
    1122:	7c21      	ldrb	r1, [r4, #16]
    1124:	7b20      	ldrb	r0, [r4, #12]
    1126:	f002 fbed 	bl	3904 <digitalWrite>
	mIRPtxrxStatus = 0;
    112a:	2100      	movs	r1, #0
	SmartDelayFlag=1;
    112c:	2201      	movs	r2, #1
		mPktInstIndex = 5; //4;
    112e:	2305      	movs	r3, #5
		mPktIdIndex = 3; //2;
    1130:	2003      	movs	r0, #3
	mIRPtxrxStatus = 0;
    1132:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
	mBusUsed = 0;// only 1 when tx/rx is operated
    1136:	f8c4 1a0c 	str.w	r1, [r4, #2572]	; 0xa0c
		mPktLengthIndex = 4; //3;
    113a:	2104      	movs	r1, #4
	SmartDelayFlag=1;
    113c:	f8c4 2a44 	str.w	r2, [r4, #2628]	; 0xa44
	mPacketType = type;
    1140:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
		mPktIdIndex = 3; //2;
    1144:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
		mPktLengthIndex = 4; //3;
    1148:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
		mPktInstIndex = 5; //4;
    114c:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
		mPktErrorIndex = 5; //4;
    1150:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
}
    1154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	((HardwareSerial *)PA12_Serial)->begin(irp_get_baudrate(baud));
    1156:	68a7      	ldr	r7, [r4, #8]
    1158:	4628      	mov	r0, r5
    115a:	f000 fa8d 	bl	1678 <irp_get_baudrate>
    115e:	4632      	mov	r2, r6
    1160:	4601      	mov	r1, r0
    1162:	4638      	mov	r0, r7
    1164:	f001 fac4 	bl	26f0 <HardwareSerial::begin(unsigned long, unsigned short)>
    1168:	e7db      	b.n	1122 <PA12::begin(int)+0x22>
    116a:	bf00      	nop

0000116c <PA12::readRaw()>:
int PA12::readRaw(void){
    116c:	b510      	push	{r4, lr}
    116e:	4604      	mov	r4, r0
if (PA12_Serial->available()) {
    1170:	6880      	ldr	r0, [r0, #8]
    1172:	4a0c      	ldr	r2, [pc, #48]	; (11a4 <PA12::readRaw()+0x38>)
    1174:	6803      	ldr	r3, [r0, #0]
    1176:	691b      	ldr	r3, [r3, #16]
    1178:	4293      	cmp	r3, r2
    117a:	d10d      	bne.n	1198 <PA12::readRaw()+0x2c>
        virtual int available() { return usb_serial_available(); }
    117c:	f004 f882 	bl	5284 <usb_serial_available>
    1180:	b148      	cbz	r0, 1196 <PA12::readRaw()+0x2a>
    1182:	68a0      	ldr	r0, [r4, #8]
	temp = PA12_Serial->read();
    1184:	4a08      	ldr	r2, [pc, #32]	; (11a8 <PA12::readRaw()+0x3c>)
    1186:	6803      	ldr	r3, [r0, #0]
    1188:	695b      	ldr	r3, [r3, #20]
    118a:	4293      	cmp	r3, r2
    118c:	d106      	bne.n	119c <PA12::readRaw()+0x30>
}
    118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        virtual int read() { return usb_serial_getchar(); }
    1192:	f004 b8bb 	b.w	530c <usb_serial_getchar>
    1196:	bd10      	pop	{r4, pc}
if (PA12_Serial->available()) {
    1198:	4798      	blx	r3
    119a:	e7f1      	b.n	1180 <PA12::readRaw()+0x14>
}
    119c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	temp = PA12_Serial->read();
    11a0:	4718      	bx	r3
    11a2:	bf00      	nop
    11a4:	000010d5 	.word	0x000010d5
    11a8:	000010d9 	.word	0x000010d9

000011ac <PA12::available()>:
		return PA12_Serial->available();
    11ac:	6880      	ldr	r0, [r0, #8]
    11ae:	4a04      	ldr	r2, [pc, #16]	; (11c0 <PA12::available()+0x14>)
    11b0:	6803      	ldr	r3, [r0, #0]
    11b2:	691b      	ldr	r3, [r3, #16]
    11b4:	4293      	cmp	r3, r2
    11b6:	d101      	bne.n	11bc <PA12::available()+0x10>
        virtual int available() { return usb_serial_available(); }
    11b8:	f004 b864 	b.w	5284 <usb_serial_available>
    11bc:	4718      	bx	r3
    11be:	bf00      	nop
    11c0:	000010d5 	.word	0x000010d5

000011c4 <PA12::clearBuffer()>:
void PA12::clearBuffer(void){
    11c4:	b570      	push	{r4, r5, r6, lr}
    11c6:	4d0e      	ldr	r5, [pc, #56]	; (1200 <PA12::clearBuffer()+0x3c>)
    11c8:	4604      	mov	r4, r0
    11ca:	4e0e      	ldr	r6, [pc, #56]	; (1204 <PA12::clearBuffer()+0x40>)
		return PA12_Serial->available();
    11cc:	68a0      	ldr	r0, [r4, #8]
    11ce:	6803      	ldr	r3, [r0, #0]
    11d0:	691b      	ldr	r3, [r3, #16]
    11d2:	42ab      	cmp	r3, r5
    11d4:	d10e      	bne.n	11f4 <PA12::clearBuffer()+0x30>
    11d6:	f004 f855 	bl	5284 <usb_serial_available>
	while((this->available()))
    11da:	b170      	cbz	r0, 11fa <PA12::clearBuffer()+0x36>
		PA12_Serial->read();
    11dc:	68a0      	ldr	r0, [r4, #8]
    11de:	6803      	ldr	r3, [r0, #0]
    11e0:	695b      	ldr	r3, [r3, #20]
    11e2:	42b3      	cmp	r3, r6
    11e4:	d10a      	bne.n	11fc <PA12::clearBuffer()+0x38>
        virtual int read() { return usb_serial_getchar(); }
    11e6:	f004 f891 	bl	530c <usb_serial_getchar>
		return PA12_Serial->available();
    11ea:	68a0      	ldr	r0, [r4, #8]
    11ec:	6803      	ldr	r3, [r0, #0]
    11ee:	691b      	ldr	r3, [r3, #16]
    11f0:	42ab      	cmp	r3, r5
    11f2:	d0f0      	beq.n	11d6 <PA12::clearBuffer()+0x12>
    11f4:	4798      	blx	r3
	while((this->available()))
    11f6:	2800      	cmp	r0, #0
    11f8:	d1f0      	bne.n	11dc <PA12::clearBuffer()+0x18>
}
    11fa:	bd70      	pop	{r4, r5, r6, pc}
		PA12_Serial->read();
    11fc:	4798      	blx	r3
    11fe:	e7e5      	b.n	11cc <PA12::clearBuffer()+0x8>
    1200:	000010d5 	.word	0x000010d5
    1204:	000010d9 	.word	0x000010d9

00001208 <PA12::txPacket(int, int, int)>:
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    120c:	461d      	mov	r5, r3
	mTxBuffer[0] = 0xff;
    120e:	26ff      	movs	r6, #255	; 0xff
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1210:	3302      	adds	r3, #2
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    1212:	4604      	mov	r4, r0
    for(bCount = 0; bCount < bParameterLength; bCount++)
    1214:	2d00      	cmp	r5, #0
	mTxBuffer[0] = 0xff;
    1216:	f8c0 6410 	str.w	r6, [r0, #1040]	; 0x410
	mTxBuffer[1] = 0xff;
    121a:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    121e:	460f      	mov	r7, r1
	mTxBuffer[2] = 0xff; //
    1220:	f8c0 6418 	str.w	r6, [r0, #1048]	; 0x418
	bPacketLength = bParameterLength+3+4; //+2+4;
    1224:	f105 0607 	add.w	r6, r5, #7
	mTxBuffer[5] = bInstruction; //[4]
    1228:	f8c0 2424 	str.w	r2, [r0, #1060]	; 0x424
	mTxBuffer[3] = bID;  //[2]
    122c:	f8c0 141c 	str.w	r1, [r0, #1052]	; 0x41c
	mTxBuffer[4] = bParameterLength+2; //[3] //2(int) <- instruction(1int) + checksum(1int) 
    1230:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
    for(bCount = 0; bCount < bParameterLength; bCount++)
    1234:	dd40      	ble.n	12b8 <PA12::txPacket(int, int, int)+0xb0>
    	mTxBuffer[bCount+offsetParamIndex] = mParamBuffer[bCount];
    1236:	f600 010c 	addw	r1, r0, #2060	; 0x80c
    123a:	00aa      	lsls	r2, r5, #2
    123c:	f500 6085 	add.w	r0, r0, #1064	; 0x428
    1240:	f006 f8aa 	bl	7398 <memmove>
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1244:	1dab      	adds	r3, r5, #6
    1246:	f204 411c 	addw	r1, r4, #1052	; 0x41c
int PA12::txPacket(int bID, int bInstruction, int bParameterLength){
    124a:	2000      	movs	r0, #0
    124c:	2203      	movs	r2, #3
    124e:	e001      	b.n	1254 <PA12::txPacket(int, int, int)+0x4c>
		bCheckSum += mTxBuffer[bCount];
    1250:	f851 7f04 	ldr.w	r7, [r1, #4]!
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1254:	3201      	adds	r2, #1
		bCheckSum += mTxBuffer[bCount];
    1256:	4438      	add	r0, r7
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    1258:	4293      	cmp	r3, r2
    125a:	dcf9      	bgt.n	1250 <PA12::txPacket(int, int, int)+0x48>
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    125c:	43c0      	mvns	r0, r0
    125e:	f503 7382 	add.w	r3, r3, #260	; 0x104
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    1262:	7c21      	ldrb	r1, [r4, #16]
    mTxBuffer[bCount] = ~bCheckSum; //Writing Checksum with Bit Inversion
    1264:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Tx );// RX Disable
    1268:	7b20      	ldrb	r0, [r4, #12]
    126a:	f002 fb4b 	bl	3904 <digitalWrite>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    126e:	2e00      	cmp	r6, #0
    1270:	dd17      	ble.n	12a2 <PA12::txPacket(int, int, int)+0x9a>
    1272:	f204 480c 	addw	r8, r4, #1036	; 0x40c
    1276:	2500      	movs	r5, #0
    1278:	4f13      	ldr	r7, [pc, #76]	; (12c8 <PA12::txPacket(int, int, int)+0xc0>)
    127a:	e004      	b.n	1286 <PA12::txPacket(int, int, int)+0x7e>
    127c:	3501      	adds	r5, #1
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    127e:	f004 f855 	bl	532c <usb_serial_putchar>
    1282:	42ae      	cmp	r6, r5
    1284:	d00d      	beq.n	12a2 <PA12::txPacket(int, int, int)+0x9a>
PA12_Serial->write(value);
    1286:	68a2      	ldr	r2, [r4, #8]
    1288:	f858 0f04 	ldr.w	r0, [r8, #4]!
    128c:	6813      	ldr	r3, [r2, #0]
    128e:	b2c0      	uxtb	r0, r0
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	42bb      	cmp	r3, r7
    1294:	d0f2      	beq.n	127c <PA12::txPacket(int, int, int)+0x74>
    for(bCount = 0; bCount < bPacketLength; bCount++)
    1296:	3501      	adds	r5, #1
PA12_Serial->write(value);
    1298:	4601      	mov	r1, r0
    129a:	4610      	mov	r0, r2
    129c:	4798      	blx	r3
    for(bCount = 0; bCount < bPacketLength; bCount++)
    129e:	42ae      	cmp	r6, r5
    12a0:	d1f1      	bne.n	1286 <PA12::txPacket(int, int, int)+0x7e>
 * */
int PA12::flushPacket(void){

	//TxDString("\r\n");
	//TxD_Dec_U8(gbLengthForPacketMaking);
	PA12_Serial->flush();             // Waiting to transmit packet
    12a2:	68a0      	ldr	r0, [r4, #8]
    12a4:	6803      	ldr	r3, [r0, #0]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	4798      	blx	r3
	digitalWrite( PA12_DirPin, PA12_DirPin_Level_Rx );// RX Enable
    12aa:	7b20      	ldrb	r0, [r4, #12]
    12ac:	7c61      	ldrb	r1, [r4, #17]
    12ae:	f002 fb29 	bl	3904 <digitalWrite>
}
    12b2:	4630      	mov	r0, r6
    12b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(bCount = 3; bCount < bPacketLength-1; bCount++){ //except 0xff,checksum //bCount = 2;
    12b8:	1dab      	adds	r3, r5, #6
    12ba:	2b03      	cmp	r3, #3
    12bc:	dcc3      	bgt.n	1246 <PA12::txPacket(int, int, int)+0x3e>
    12be:	f04f 30ff 	mov.w	r0, #4294967295
    12c2:	2303      	movs	r3, #3
    12c4:	e7cb      	b.n	125e <PA12::txPacket(int, int, int)+0x56>
    12c6:	bf00      	nop
    12c8:	000010dd 	.word	0x000010dd

000012cc <PA12::rxPacket(int)>:
	if(bRxLength == 255 || bRxLength == 0xffff) 
    12cc:	29ff      	cmp	r1, #255	; 0xff
int PA12::rxPacket(int bRxLength){
    12ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12d2:	4689      	mov	r9, r1
    12d4:	4604      	mov	r4, r0
	if(bRxLength == 255 || bRxLength == 0xffff) 
    12d6:	d046      	beq.n	1366 <PA12::rxPacket(int)+0x9a>
    12d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    12dc:	4299      	cmp	r1, r3
    12de:	d042      	beq.n	1366 <PA12::rxPacket(int)+0x9a>
		ulTimeLimit = RX_TIMEOUT_COUNT2;
    12e0:	f44f 66c8 	mov.w	r6, #1600	; 0x640
	for(bCount = 0; bCount < bRxLength; bCount++)
    12e4:	f1b9 0f00 	cmp.w	r9, #0
    12e8:	dd66      	ble.n	13b8 <PA12::rxPacket(int)+0xec>
    12ea:	f104 0a10 	add.w	sl, r4, #16
    12ee:	3602      	adds	r6, #2
    12f0:	2700      	movs	r7, #0
    12f2:	4d5a      	ldr	r5, [pc, #360]	; (145c <PA12::rxPacket(int)+0x190>)
    12f4:	46d0      	mov	r8, sl
		ulCounter = 0;
    12f6:	f04f 0b00 	mov.w	fp, #0
    12fa:	e007      	b.n	130c <PA12::rxPacket(int)+0x40>
        virtual int available() { return usb_serial_available(); }
    12fc:	f003 ffc2 	bl	5284 <usb_serial_available>
    1300:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    1302:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    1306:	b963      	cbnz	r3, 1322 <PA12::rxPacket(int)+0x56>
			if(ulCounter++ > ulTimeLimit)
    1308:	45b3      	cmp	fp, r6
    130a:	d02f      	beq.n	136c <PA12::rxPacket(int)+0xa0>
		while(!( PA12_Serial->available()))
    130c:	68a0      	ldr	r0, [r4, #8]
    130e:	6803      	ldr	r3, [r0, #0]
    1310:	691b      	ldr	r3, [r3, #16]
    1312:	42ab      	cmp	r3, r5
    1314:	d0f2      	beq.n	12fc <PA12::rxPacket(int)+0x30>
    1316:	4798      	blx	r3
    1318:	4603      	mov	r3, r0
			if(ulCounter++ > ulTimeLimit)
    131a:	f10b 0b01 	add.w	fp, fp, #1
		while(!( PA12_Serial->available()))
    131e:	2b00      	cmp	r3, #0
    1320:	d0f2      	beq.n	1308 <PA12::rxPacket(int)+0x3c>
	for(bCount = 0; bCount < bRxLength; bCount++)
    1322:	3701      	adds	r7, #1
		mRxBuffer[bCount] = this->readRaw(); // PA12_Serial->read(); // get packet data from USART device
    1324:	4620      	mov	r0, r4
    1326:	f7ff ff21 	bl	116c <PA12::readRaw()>
    132a:	f848 0f04 	str.w	r0, [r8, #4]!
	for(bCount = 0; bCount < bRxLength; bCount++)
    132e:	45b9      	cmp	r9, r7
    1330:	d1e1      	bne.n	12f6 <PA12::rxPacket(int)+0x2a>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    1332:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    1336:	f502 7382 	add.w	r3, r2, #260	; 0x104
    133a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    133e:	29fe      	cmp	r1, #254	; 0xfe
    1340:	d00e      	beq.n	1360 <PA12::rxPacket(int)+0x94>
		if(bLength > 3) //checking available length.
    1342:	2f03      	cmp	r7, #3
    1344:	dd0c      	ble.n	1360 <PA12::rxPacket(int)+0x94>
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    1346:	6963      	ldr	r3, [r4, #20]
    1348:	2bff      	cmp	r3, #255	; 0xff
    134a:	d027      	beq.n	139c <PA12::rxPacket(int)+0xd0>
    134c:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    1350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
				clearBuffer();
    1354:	4620      	mov	r0, r4
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER);
    1356:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				return 0;
    135a:	2700      	movs	r7, #0
				clearBuffer();
    135c:	f7ff ff32 	bl	11c4 <PA12::clearBuffer()>
}
    1360:	4638      	mov	r0, r7
    1362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ulTimeLimit = RX_TIMEOUT_COUNT1;
    1366:	f44f 3648 	mov.w	r6, #204800	; 0x32000
    136a:	e7bb      	b.n	12e4 <PA12::rxPacket(int)+0x18>
	if( mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID )
    136c:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    1370:	f502 7182 	add.w	r1, r2, #260	; 0x104
    1374:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    1378:	29fe      	cmp	r1, #254	; 0xfe
    137a:	d0f1      	beq.n	1360 <PA12::rxPacket(int)+0x94>
		if(bTimeout && bRxLength != 255)
    137c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    1380:	d0df      	beq.n	1342 <PA12::rxPacket(int)+0x76>
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    1382:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
			return 0;
    1386:	461f      	mov	r7, r3
			clearBuffer();			
    1388:	4620      	mov	r0, r4
			mIRPtxrxStatus |= (1<<COMM_RXTIMEOUT);
    138a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    138e:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			clearBuffer();			
    1392:	f7ff ff17 	bl	11c4 <PA12::clearBuffer()>
}
    1396:	4638      	mov	r0, r7
    1398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    139c:	69a3      	ldr	r3, [r4, #24]
    139e:	2bff      	cmp	r3, #255	; 0xff
    13a0:	d1d4      	bne.n	134c <PA12::rxPacket(int)+0x80>
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	2bff      	cmp	r3, #255	; 0xff
    13a6:	d009      	beq.n	13bc <PA12::rxPacket(int)+0xf0>
    13a8:	f8d4 2a14 	ldr.w	r2, [r4, #2580]	; 0xa14
    13ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    13b0:	4613      	mov	r3, r2
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXHEADER); //|| mRxBuffer[2] != 0xff
    13b2:	f8c4 2a14 	str.w	r2, [r4, #2580]	; 0xa14
			if(mRxBuffer[0] != 0xff || mRxBuffer[1] != 0xff || mRxBuffer[2] != 0xff ){ //|| mRxBuffer[2] != 0xff			
    13b6:	e7cd      	b.n	1354 <PA12::rxPacket(int)+0x88>
	for(bCount = 0; bCount < bRxLength; bCount++)
    13b8:	2700      	movs	r7, #0
    13ba:	e7d1      	b.n	1360 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] ) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    13bc:	3204      	adds	r2, #4
    13be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    13c2:	685b      	ldr	r3, [r3, #4]
    13c4:	428b      	cmp	r3, r1
    13c6:	d02c      	beq.n	1422 <PA12::rxPacket(int)+0x156>
    13c8:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
    13cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    13d0:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
	bChecksum = 0;
    13d4:	2300      	movs	r3, #0
			if(mRxBuffer[mPktIdIndex] != mTxBuffer[mPktIdIndex] )  //id check
    13d6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    13da:	6852      	ldr	r2, [r2, #4]
    13dc:	428a      	cmp	r2, r1
    13de:	d115      	bne.n	140c <PA12::rxPacket(int)+0x140>
			if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) // status packet length check
    13e0:	f8d4 2a28 	ldr.w	r2, [r4, #2600]	; 0xa28
    13e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    13e8:	6951      	ldr	r1, [r2, #20]
    13ea:	f8d4 2a2c 	ldr.w	r2, [r4, #2604]	; 0xa2c
    13ee:	1aba      	subs	r2, r7, r2
    13f0:	4291      	cmp	r1, r2
    13f2:	d10b      	bne.n	140c <PA12::rxPacket(int)+0x140>
    13f4:	f104 021c 	add.w	r2, r4, #28
    13f8:	eb0a 0a87 	add.w	sl, sl, r7, lsl #2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    13fc:	f852 1f04 	ldr.w	r1, [r2, #4]!
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1400:	4592      	cmp	sl, r2
				bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1402:	440b      	add	r3, r1
			for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1404:	d1fa      	bne.n	13fc <PA12::rxPacket(int)+0x130>
			bChecksum &= 0xff;
    1406:	b2db      	uxtb	r3, r3
			if(bChecksum != 0xff)
    1408:	2bff      	cmp	r3, #255	; 0xff
    140a:	d0a9      	beq.n	1360 <PA12::rxPacket(int)+0x94>
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    140c:	f8d4 3a14 	ldr.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    1410:	4620      	mov	r0, r4
				return 0;
    1412:	2700      	movs	r7, #0
				mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXID);
    1414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1418:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
				clearBuffer();
    141c:	f7ff fed2 	bl	11c4 <PA12::clearBuffer()>
				return 0;
    1420:	e79e      	b.n	1360 <PA12::rxPacket(int)+0x94>
			else if(mRxBuffer[mPktLengthIndex] != bLength-mPktInstIndex) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXLENGTH);
    1422:	f8d4 3a28 	ldr.w	r3, [r4, #2600]	; 0xa28
    1426:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    142a:	6958      	ldr	r0, [r3, #20]
    142c:	f8d4 3a2c 	ldr.w	r3, [r4, #2604]	; 0xa2c
    1430:	1afb      	subs	r3, r7, r3
    1432:	4298      	cmp	r0, r3
    1434:	d1c8      	bne.n	13c8 <PA12::rxPacket(int)+0xfc>
    1436:	f104 001c 	add.w	r0, r4, #28
    143a:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
	bChecksum = 0;
    143e:	2300      	movs	r3, #0
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1440:	f850 6f04 	ldr.w	r6, [r0, #4]!
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1444:	42a8      	cmp	r0, r5
					bChecksum += mRxBuffer[bCount]; //Calculate checksum of received data for compare
    1446:	4433      	add	r3, r6
				for(bCount = 3; bCount < bLength; bCount++){ //bCount = 2
    1448:	d1fa      	bne.n	1440 <PA12::rxPacket(int)+0x174>
				if(bChecksum != 0xff) mIRPtxrxStatus |= (1<<COMM_RXCORRUPT);//RXCHECKSUM);
    144a:	2bff      	cmp	r3, #255	; 0xff
    144c:	d0c3      	beq.n	13d6 <PA12::rxPacket(int)+0x10a>
    144e:	f8d4 0a14 	ldr.w	r0, [r4, #2580]	; 0xa14
    1452:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    1456:	f8c4 0a14 	str.w	r0, [r4, #2580]	; 0xa14
    145a:	e7bc      	b.n	13d6 <PA12::rxPacket(int)+0x10a>
    145c:	000010d5 	.word	0x000010d5

00001460 <PA12::txRxPacket(int, int, int)>:
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	mIRPtxrxStatus = 0;
    1464:	2400      	movs	r4, #0
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    1466:	4698      	mov	r8, r3
    1468:	4605      	mov	r5, r0
	mBusUsed = 1;
    146a:	2301      	movs	r3, #1
int PA12::txRxPacket(int bID, int bInst, int bTxParaLen){
    146c:	468a      	mov	sl, r1
    146e:	4691      	mov	r9, r2
    1470:	4e56      	ldr	r6, [pc, #344]	; (15cc <PA12::txRxPacket(int, int, int)+0x16c>)
    1472:	4f57      	ldr	r7, [pc, #348]	; (15d0 <PA12::txRxPacket(int, int, int)+0x170>)
	mIRPtxrxStatus = 0;
    1474:	f8c0 4a14 	str.w	r4, [r0, #2580]	; 0xa14
	mRxLength = bRxLenEx = bTxLen = 0;
    1478:	f8c0 4a10 	str.w	r4, [r0, #2576]	; 0xa10
	mBusUsed = 1;
    147c:	f8c0 3a0c 	str.w	r3, [r0, #2572]	; 0xa0c
		return PA12_Serial->available();
    1480:	68a8      	ldr	r0, [r5, #8]
    1482:	6803      	ldr	r3, [r0, #0]
    1484:	691c      	ldr	r4, [r3, #16]
    1486:	42b4      	cmp	r4, r6
    1488:	d10f      	bne.n	14aa <PA12::txRxPacket(int, int, int)+0x4a>
    148a:	f003 fefb 	bl	5284 <usb_serial_available>
    148e:	4604      	mov	r4, r0
		while((this->available())){
    1490:	b17c      	cbz	r4, 14b2 <PA12::txRxPacket(int, int, int)+0x52>
			PA12_Serial->read();
    1492:	68a8      	ldr	r0, [r5, #8]
    1494:	6803      	ldr	r3, [r0, #0]
    1496:	695b      	ldr	r3, [r3, #20]
    1498:	42bb      	cmp	r3, r7
    149a:	d14a      	bne.n	1532 <PA12::txRxPacket(int, int, int)+0xd2>
        virtual int read() { return usb_serial_getchar(); }
    149c:	f003 ff36 	bl	530c <usb_serial_getchar>
		return PA12_Serial->available();
    14a0:	68a8      	ldr	r0, [r5, #8]
    14a2:	6803      	ldr	r3, [r0, #0]
    14a4:	691c      	ldr	r4, [r3, #16]
    14a6:	42b4      	cmp	r4, r6
    14a8:	d0ef      	beq.n	148a <PA12::txRxPacket(int, int, int)+0x2a>
    14aa:	47a0      	blx	r4
    14ac:	4604      	mov	r4, r0
		while((this->available())){
    14ae:	2c00      	cmp	r4, #0
    14b0:	d1ef      	bne.n	1492 <PA12::txRxPacket(int, int, int)+0x32>
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    14b2:	4643      	mov	r3, r8
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    14b4:	f108 0807 	add.w	r8, r8, #7
		bTxLen = this->txPacket(bID, bInst, bTxParaLen);
    14b8:	464a      	mov	r2, r9
    14ba:	4651      	mov	r1, sl
    14bc:	4628      	mov	r0, r5
    14be:	f7ff fea3 	bl	1208 <PA12::txPacket(int, int, int)>
		if (bTxLen == (bTxParaLen+4+3))	mIRPtxrxStatus = (1<<COMM_TXSUCCESS); //+4+2
    14c2:	4580      	cmp	r8, r0
    14c4:	d102      	bne.n	14cc <PA12::txRxPacket(int, int, int)+0x6c>
    14c6:	2301      	movs	r3, #1
    14c8:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
		if(bInst == CMD_PING){		
    14cc:	f1b9 0ff1 	cmp.w	r9, #241	; 0xf1
    14d0:	d043      	beq.n	155a <PA12::txRxPacket(int, int, int)+0xfa>
		else if(bInst == CMD_READ){
    14d2:	f1b9 0ff2 	cmp.w	r9, #242	; 0xf2
    14d6:	d02e      	beq.n	1536 <PA12::txRxPacket(int, int, int)+0xd6>
		else if( bID == IRP_BROADCAST_ID ){
    14d8:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    14dc:	d065      	beq.n	15aa <PA12::txRxPacket(int, int, int)+0x14a>
			if (gbIRPStatusReturnLevel>1){
    14de:	f8d5 3a18 	ldr.w	r3, [r5, #2584]	; 0xa18
    14e2:	2b01      	cmp	r3, #1
    14e4:	dd53      	ble.n	158e <PA12::txRxPacket(int, int, int)+0x12e>
				if(mPacketType == IRP_PACKET_TYPE1) mRxLength = bRxLenEx = 7; //6 //+mParamBuffer[1];
    14e6:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
    14ea:	2b01      	cmp	r3, #1
    14ec:	d038      	beq.n	1560 <PA12::txRxPacket(int, int, int)+0x100>
				else mRxLength = bRxLenEx = 11;
    14ee:	230b      	movs	r3, #11
    14f0:	461e      	mov	r6, r3
    14f2:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    14f6:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    14fa:	2b01      	cmp	r3, #1
    14fc:	d038      	beq.n	1570 <PA12::txRxPacket(int, int, int)+0x110>
			mRxLength = this->rxPacket(bRxLenEx);
    14fe:	4631      	mov	r1, r6
    1500:	4628      	mov	r0, r5
    1502:	f7ff fee3 	bl	12cc <PA12::rxPacket(int)>
	mBusUsed = 0;
    1506:	2300      	movs	r3, #0
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1508:	42b0      	cmp	r0, r6
			mRxLength = this->rxPacket(bRxLenEx);
    150a:	f8c5 0a10 	str.w	r0, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    150e:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	if((mRxLength != bRxLenEx) && (mTxBuffer[mPktIdIndex] != IRP_BROADCAST_ID))
    1512:	d007      	beq.n	1524 <PA12::txRxPacket(int, int, int)+0xc4>
    1514:	f8d5 3a24 	ldr.w	r3, [r5, #2596]	; 0xa24
    1518:	f503 7382 	add.w	r3, r3, #260	; 0x104
    151c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1520:	2bfe      	cmp	r3, #254	; 0xfe
    1522:	d029      	beq.n	1578 <PA12::txRxPacket(int, int, int)+0x118>
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1524:	2302      	movs	r3, #2
	return 1;
    1526:	2401      	movs	r4, #1
	mIRPtxrxStatus = (1<<COMM_RXSUCCESS);
    1528:	f8c5 3a14 	str.w	r3, [r5, #2580]	; 0xa14
}
    152c:	4620      	mov	r0, r4
    152e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			PA12_Serial->read();
    1532:	4798      	blx	r3
    1534:	e7a4      	b.n	1480 <PA12::txRxPacket(int, int, int)+0x20>
			mRxLength = bRxLenEx = 7+mParamBuffer[1]; //6+
    1536:	f8d5 6810 	ldr.w	r6, [r5, #2064]	; 0x810
    153a:	3607      	adds	r6, #7
    153c:	f8c5 6a10 	str.w	r6, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    1540:	2e00      	cmp	r6, #0
    1542:	d1d8      	bne.n	14f6 <PA12::txRxPacket(int, int, int)+0x96>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1544:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
	mBusUsed = 0;
    1548:	f8c5 6a0c 	str.w	r6, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    154c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1550:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1554:	2bf1      	cmp	r3, #241	; 0xf1
    1556:	d1e5      	bne.n	1524 <PA12::txRxPacket(int, int, int)+0xc4>
    1558:	e7e8      	b.n	152c <PA12::txRxPacket(int, int, int)+0xcc>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    155a:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
    155e:	d02f      	beq.n	15c0 <PA12::txRxPacket(int, int, int)+0x160>
			else mRxLength = bRxLenEx = 7; //6; // basic response packet length			
    1560:	2307      	movs	r3, #7
    1562:	461e      	mov	r6, r3
    1564:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
			if(SmartDelayFlag == 1)
    1568:	f8d5 3a44 	ldr.w	r3, [r5, #2628]	; 0xa44
    156c:	2b01      	cmp	r3, #1
    156e:	d1c6      	bne.n	14fe <PA12::txRxPacket(int, int, int)+0x9e>
				delay(150);
    1570:	2096      	movs	r0, #150	; 0x96
    1572:	f002 f949 	bl	3808 <delay>
    1576:	e7c2      	b.n	14fe <PA12::txRxPacket(int, int, int)+0x9e>
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1578:	2800      	cmp	r0, #0
    157a:	d1d3      	bne.n	1524 <PA12::txRxPacket(int, int, int)+0xc4>
    157c:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    1580:	f503 7382 	add.w	r3, r3, #260	; 0x104
    1584:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    1588:	2bf1      	cmp	r3, #241	; 0xf1
    158a:	d1cb      	bne.n	1524 <PA12::txRxPacket(int, int, int)+0xc4>
    158c:	e7ce      	b.n	152c <PA12::txRxPacket(int, int, int)+0xcc>
			else mRxLength = bRxLenEx = 0; // no response packet
    158e:	2300      	movs	r3, #0
    1590:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
	mBusUsed = 0;
    1594:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	}else if((mRxLength == 0) && (mTxBuffer[mPktInstIndex] == CMD_PING)){ 
    1598:	f8d5 3a2c 	ldr.w	r3, [r5, #2604]	; 0xa2c
    159c:	f503 7382 	add.w	r3, r3, #260	; 0x104
    15a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    15a4:	2bf1      	cmp	r3, #241	; 0xf1
    15a6:	d1bd      	bne.n	1524 <PA12::txRxPacket(int, int, int)+0xc4>
    15a8:	e7c0      	b.n	152c <PA12::txRxPacket(int, int, int)+0xcc>
			if(bInst == CMD_SYNC_READ || bInst == CMD_BULK_READ) mRxLength = bRxLenEx = 0xffff; //only 2.0 case
    15aa:	f029 0910 	bic.w	r9, r9, #16
    15ae:	f1b9 0f82 	cmp.w	r9, #130	; 0x82
    15b2:	d1ec      	bne.n	158e <PA12::txRxPacket(int, int, int)+0x12e>
    15b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    15b8:	461e      	mov	r6, r3
    15ba:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    15be:	e79a      	b.n	14f6 <PA12::txRxPacket(int, int, int)+0x96>
			if(bID == IRP_BROADCAST_ID)	mRxLength = bRxLenEx = 0xff;
    15c0:	23ff      	movs	r3, #255	; 0xff
    15c2:	461e      	mov	r6, r3
    15c4:	f8c5 3a10 	str.w	r3, [r5, #2576]	; 0xa10
		if(bRxLenEx){
    15c8:	e795      	b.n	14f6 <PA12::txRxPacket(int, int, int)+0x96>
    15ca:	bf00      	nop
    15cc:	000010d5 	.word	0x000010d5
    15d0:	000010d9 	.word	0x000010d9

000015d4 <PA12::goalPosition(int, int)>:
void PA12::goalPosition(int bID,int value){	
    15d4:	b530      	push	{r4, r5, lr}
    15d6:	4615      	mov	r5, r2
    15d8:	b083      	sub	sp, #12
    15da:	4604      	mov	r4, r0
    15dc:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    15de:	f7ff fdf1 	bl	11c4 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    15e2:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    15e4:	2286      	movs	r2, #134	; 0x86
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    15e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    15ea:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    15ec:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    15f0:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    15f2:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    15f6:	22f3      	movs	r2, #243	; 0xf3
    15f8:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    15fa:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    15fe:	b003      	add	sp, #12
    1600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1604:	f7ff bf2c 	b.w	1460 <PA12::txRxPacket(int, int, int)>

00001608 <PA12::movingSpeed(int, int)>:
void PA12::movingSpeed(int bID,int value){	
    1608:	b530      	push	{r4, r5, lr}
    160a:	4615      	mov	r5, r2
    160c:	b083      	sub	sp, #12
    160e:	4604      	mov	r4, r0
    1610:	9101      	str	r1, [sp, #4]
    this->clearBuffer();
    1612:	f7ff fdd7 	bl	11c4 <PA12::clearBuffer()>
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1616:	b2eb      	uxtb	r3, r5
	mParamBuffer[0] = bAddress;
    1618:	2288      	movs	r2, #136	; 0x88
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    161a:	f3c5 2507 	ubfx	r5, r5, #8, #8
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    161e:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1620:	f8c4 280c 	str.w	r2, [r4, #2060]	; 0x80c
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1624:	4620      	mov	r0, r4
	mParamBuffer[1] = IRP_LOBYTE(wData);//(int)(wData&0xff);
    1626:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    162a:	22f3      	movs	r2, #243	; 0xf3
    162c:	2303      	movs	r3, #3
	mParamBuffer[2] = IRP_HIBYTE(wData);//(int)((wData>>8)&0xff);
    162e:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
}
    1632:	b003      	add	sp, #12
    1634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return this->txRxPacket(bID, CMD_WRITE, param_length);
    1638:	f7ff bf12 	b.w	1460 <PA12::txRxPacket(int, int, int)>

0000163c <PA12::presentPosition(int)>:
int PA12::presentPosition(int bID){	
    163c:	b510      	push	{r4, lr}
    163e:	b082      	sub	sp, #8
    1640:	4604      	mov	r4, r0
    1642:	9101      	str	r1, [sp, #4]
	this->clearBuffer();
    1644:	f7ff fdbe 	bl	11c4 <PA12::clearBuffer()>
	mParamBuffer[0] = bAddress;
    1648:	208c      	movs	r0, #140	; 0x8c
	mParamBuffer[1] = 2;
    164a:	2302      	movs	r3, #2
	if(this->txRxPacket(bID, CMD_READ, 2)){
    164c:	22f2      	movs	r2, #242	; 0xf2
    164e:	9901      	ldr	r1, [sp, #4]
	mParamBuffer[0] = bAddress;
    1650:	f8c4 080c 	str.w	r0, [r4, #2060]	; 0x80c
	if(this->txRxPacket(bID, CMD_READ, 2)){
    1654:	4620      	mov	r0, r4
	mParamBuffer[1] = 2;
    1656:	f8c4 3810 	str.w	r3, [r4, #2064]	; 0x810
	if(this->txRxPacket(bID, CMD_READ, 2)){
    165a:	f7ff ff01 	bl	1460 <PA12::txRxPacket(int, int, int)>
    165e:	b138      	cbz	r0, 1670 <PA12::presentPosition(int)+0x34>
		return IRP_MAKEint(mRxBuffer[6],mRxBuffer[7]);//( (((int)mRxBuffer[6])<<8)+ mRxBuffer[5] );
    1660:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1662:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1666:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    166a:	b280      	uxth	r0, r0
}
    166c:	b002      	add	sp, #8
    166e:	bd10      	pop	{r4, pc}
		return 0xffff;
    1670:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    1674:	b002      	add	sp, #8
    1676:	bd10      	pop	{r4, pc}

00001678 <irp_get_baudrate>:
unsigned long irp_get_baudrate(int baudnum)
{
  //  if(baudnum >= 9600)
  //      return baudnum;
  unsigned long temp;
    switch(baudnum)
    1678:	2810      	cmp	r0, #16
    167a:	dc11      	bgt.n	16a0 <irp_get_baudrate+0x28>
    167c:	2801      	cmp	r0, #1
    167e:	dd0c      	ble.n	169a <irp_get_baudrate+0x22>
    1680:	3802      	subs	r0, #2
    1682:	280e      	cmp	r0, #14
    1684:	d809      	bhi.n	169a <irp_get_baudrate+0x22>
    1686:	e8df f000 	tbb	[pc, r0]
    168a:	0819      	.short	0x0819
    168c:	0808081b 	.word	0x0808081b
    1690:	08080817 	.word	0x08080817
    1694:	08080808 	.word	0x08080808
    1698:	1d          	.byte	0x1d
    1699:	00          	.byte	0x00
        temp= 9600; break;
    case 64:
        temp= 19200; break;
    
    case 32:
        temp= 57600; break;
    169a:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    169e:	4770      	bx	lr
    switch(baudnum)
    16a0:	2840      	cmp	r0, #64	; 0x40
    16a2:	d006      	beq.n	16b2 <irp_get_baudrate+0x3a>
        temp= 9600; break;
    16a4:	2880      	cmp	r0, #128	; 0x80
    16a6:	bf14      	ite	ne
    16a8:	f44f 4061 	movne.w	r0, #57600	; 0xe100
    16ac:	f44f 5016 	moveq.w	r0, #9600	; 0x2580
    16b0:	4770      	bx	lr
    switch(baudnum)
    16b2:	f44f 4096 	mov.w	r0, #19200	; 0x4b00
   //     return 10500000;
    default:
        temp= 57600;
    };
	return temp;
}
    16b6:	4770      	bx	lr
        temp= 2000000; break;
    16b8:	4804      	ldr	r0, [pc, #16]	; (16cc <irp_get_baudrate+0x54>)
    16ba:	4770      	bx	lr
        temp= 4000000; break;
    16bc:	4804      	ldr	r0, [pc, #16]	; (16d0 <irp_get_baudrate+0x58>)
    16be:	4770      	bx	lr
        temp= 2500000; break;
    16c0:	4804      	ldr	r0, [pc, #16]	; (16d4 <irp_get_baudrate+0x5c>)
    16c2:	4770      	bx	lr
        temp= 115200; break;
    16c4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop
    16cc:	001e8480 	.word	0x001e8480
    16d0:	003d0900 	.word	0x003d0900
    16d4:	002625a0 	.word	0x002625a0

000016d8 <SoftwareSerial::begin(unsigned long)>:
}

void SoftwareSerial::begin(unsigned long speed)
{
    16d8:	b410      	push	{r4}
	if (port) {
    16da:	6904      	ldr	r4, [r0, #16]
    16dc:	b12c      	cbz	r4, 16ea <SoftwareSerial::begin(unsigned long)+0x12>
		port->begin(speed);
    16de:	4620      	mov	r0, r4
    16e0:	2200      	movs	r2, #0
	} else {
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	}
}
    16e2:	f85d 4b04 	ldr.w	r4, [sp], #4
		port->begin(speed);
    16e6:	f001 b803 	b.w	26f0 <HardwareSerial::begin(unsigned long, unsigned short)>
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    16ea:	460b      	mov	r3, r1
    16ec:	4a0a      	ldr	r2, [pc, #40]	; (1718 <SoftwareSerial::begin(unsigned long)+0x40>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    16ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
}
    16f2:	f85d 4b04 	ldr.w	r4, [sp], #4
		cycles_per_bit = (uint32_t)(F_CPU + speed / 2) / speed;
    16f6:	eb02 0253 	add.w	r2, r2, r3, lsr #1
    16fa:	fbb2 f3f3 	udiv	r3, r2, r3
    16fe:	6143      	str	r3, [r0, #20]
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1700:	f8d1 3dfc 	ldr.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    1704:	4a05      	ldr	r2, [pc, #20]	; (171c <SoftwareSerial::begin(unsigned long)+0x44>)
		ARM_DEMCR |= ARM_DEMCR_TRCENA;
    1706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    170a:	f8c1 3dfc 	str.w	r3, [r1, #3580]	; 0xdfc
		ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    170e:	6813      	ldr	r3, [r2, #0]
    1710:	f043 0301 	orr.w	r3, r3, #1
    1714:	6013      	str	r3, [r2, #0]
}
    1716:	4770      	bx	lr
    1718:	23c34600 	.word	0x23c34600
    171c:	e0001000 	.word	0xe0001000

00001720 <Adafruit_INA260::Adafruit_INA260()>:
#include "Adafruit_INA260.h"

/*!
 *    @brief  Instantiates a new INA260 class
 */
Adafruit_INA260::Adafruit_INA260(void) {}
    1720:	4770      	bx	lr
    1722:	bf00      	nop

00001724 <Adafruit_INA260::begin(unsigned char, TwoWire*)>:
 *            The I2C address to be used.
 *    @param  theWire
 *            The Wire object to be used for I2C connections.
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    1724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1728:	b086      	sub	sp, #24
    172a:	4605      	mov	r5, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    172c:	2010      	movs	r0, #16
bool Adafruit_INA260::begin(uint8_t i2c_address, TwoWire *theWire) {
    172e:	e9cd 2102 	strd	r2, r1, [sp, #8]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1732:	f002 fa7b 	bl	3c2c <operator new(unsigned int)>
    1736:	4604      	mov	r4, r0
    1738:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    173c:	f000 f9ee 	bl	1b1c <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>

  if (!i2c_dev->begin()) {
    1740:	2101      	movs	r1, #1
    1742:	4620      	mov	r0, r4
  i2c_dev = new Adafruit_I2CDevice(i2c_address, theWire);
    1744:	60ec      	str	r4, [r5, #12]
  if (!i2c_dev->begin()) {
    1746:	f000 f9f3 	bl	1b30 <Adafruit_I2CDevice::begin(bool)>
    174a:	b920      	cbnz	r0, 1756 <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x32>
    return false;
    174c:	2400      	movs	r4, #0
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);

  reset();
  delay(2); // delay 2ms to give time for first measurement to finish
  return true;
}
    174e:	4620      	mov	r0, r4
    1750:	b006      	add	sp, #24
    1752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_DIE_UID, 2, MSBFIRST);
    1756:	2601      	movs	r6, #1
    1758:	4604      	mov	r4, r0
    175a:	2018      	movs	r0, #24
    175c:	f002 fa66 	bl	3c2c <operator new(unsigned int)>
    1760:	2302      	movs	r3, #2
    1762:	22ff      	movs	r2, #255	; 0xff
    1764:	4680      	mov	r8, r0
    1766:	e9cd 6600 	strd	r6, r6, [sp]
    176a:	68e9      	ldr	r1, [r5, #12]
    176c:	f000 f8b4 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MFG_UID, 2, MSBFIRST);
    1770:	2018      	movs	r0, #24
    1772:	f002 fa5b 	bl	3c2c <operator new(unsigned int)>
    1776:	2302      	movs	r3, #2
    1778:	22fe      	movs	r2, #254	; 0xfe
    177a:	4607      	mov	r7, r0
    177c:	e9cd 6600 	strd	r6, r6, [sp]
    1780:	68e9      	ldr	r1, [r5, #12]
    1782:	f000 f8a9 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
      new Adafruit_I2CRegisterBits(die_register, 12, 4);
    1786:	2008      	movs	r0, #8
    1788:	f002 fa50 	bl	3c2c <operator new(unsigned int)>
    178c:	4641      	mov	r1, r8
    178e:	2304      	movs	r3, #4
    1790:	220c      	movs	r2, #12
    1792:	4680      	mov	r8, r0
    1794:	f000 f998 	bl	1ac8 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  if ((mfg_register->read() != 0x5449) || (device_id->read() != 0x227)) {
    1798:	4638      	mov	r0, r7
    179a:	f000 f973 	bl	1a84 <Adafruit_BusIO_Register::read()>
    179e:	f245 4349 	movw	r3, #21577	; 0x5449
    17a2:	4298      	cmp	r0, r3
    17a4:	d1d2      	bne.n	174c <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
    17a6:	4640      	mov	r0, r8
    17a8:	f000 f992 	bl	1ad0 <Adafruit_BusIO_RegisterBits::read()>
    17ac:	f240 2327 	movw	r3, #551	; 0x227
    17b0:	4298      	cmp	r0, r3
    17b2:	d1cb      	bne.n	174c <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x28>
  Config = new Adafruit_I2CRegister(i2c_dev, INA260_REG_CONFIG, 2, MSBFIRST);
    17b4:	2018      	movs	r0, #24
    17b6:	f002 fa39 	bl	3c2c <operator new(unsigned int)>
    17ba:	4607      	mov	r7, r0
    17bc:	2302      	movs	r3, #2
    17be:	2200      	movs	r2, #0
    17c0:	e9cd 6600 	strd	r6, r6, [sp]
    17c4:	68e9      	ldr	r1, [r5, #12]
    17c6:	f000 f887 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    17ca:	602f      	str	r7, [r5, #0]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_MASK_ENABLE, 2, MSBFIRST);
    17cc:	2018      	movs	r0, #24
    17ce:	f002 fa2d 	bl	3c2c <operator new(unsigned int)>
    17d2:	4607      	mov	r7, r0
    17d4:	2302      	movs	r3, #2
    17d6:	2206      	movs	r2, #6
    17d8:	e9cd 6600 	strd	r6, r6, [sp]
    17dc:	68e9      	ldr	r1, [r5, #12]
    17de:	f000 f87b 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  MaskEnable =
    17e2:	606f      	str	r7, [r5, #4]
      new Adafruit_I2CRegister(i2c_dev, INA260_REG_ALERT_LIMIT, 2, MSBFIRST);
    17e4:	2018      	movs	r0, #24
    17e6:	f002 fa21 	bl	3c2c <operator new(unsigned int)>
    17ea:	4607      	mov	r7, r0
    17ec:	2302      	movs	r3, #2
    17ee:	2207      	movs	r2, #7
    17f0:	e9cd 6600 	strd	r6, r6, [sp]
    17f4:	68e9      	ldr	r1, [r5, #12]
    17f6:	f000 f86f 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
    @brief Resets the harware. All registers are set to default values,
    the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_INA260::reset(void) {
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    17fa:	230f      	movs	r3, #15
    17fc:	6829      	ldr	r1, [r5, #0]
    17fe:	4632      	mov	r2, r6
    1800:	a804      	add	r0, sp, #16
  AlertLimit =
    1802:	60af      	str	r7, [r5, #8]
  Adafruit_I2CRegisterBits reset = Adafruit_I2CRegisterBits(Config, 1, 15);
    1804:	f000 f960 	bl	1ac8 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  reset.write(1);
    1808:	4631      	mov	r1, r6
    180a:	a804      	add	r0, sp, #16
    180c:	f000 f96e 	bl	1aec <Adafruit_BusIO_RegisterBits::write(unsigned long)>
  delay(2); // delay 2ms to give time for first measurement to finish
    1810:	2002      	movs	r0, #2
    1812:	f001 fff9 	bl	3808 <delay>
  return true;
    1816:	e79a      	b.n	174e <Adafruit_INA260::begin(unsigned char, TwoWire*)+0x2a>

00001818 <Adafruit_INA260::readCurrent()>:
/*!
    @brief Reads and scales the current value of the Current register.
    @return The current current measurement in mA
*/
/**************************************************************************/
float Adafruit_INA260::readCurrent(void) {
    1818:	b500      	push	{lr}
  Adafruit_I2CRegister current =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    181a:	2201      	movs	r2, #1
float Adafruit_INA260::readCurrent(void) {
    181c:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, INA260_REG_CURRENT, 2, MSBFIRST);
    181e:	68c1      	ldr	r1, [r0, #12]
    1820:	2302      	movs	r3, #2
    1822:	a802      	add	r0, sp, #8
    1824:	e9cd 2200 	strd	r2, r2, [sp]
    1828:	f000 f856 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return (int16_t)current.read() * 1.25;
    182c:	a802      	add	r0, sp, #8
    182e:	f000 f929 	bl	1a84 <Adafruit_BusIO_Register::read()>
    1832:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1836:	b203      	sxth	r3, r0
    1838:	ee00 3a10 	vmov	s0, r3
    183c:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    1840:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    1844:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1848:	b009      	add	sp, #36	; 0x24
    184a:	f85d fb04 	ldr.w	pc, [sp], #4
    184e:	bf00      	nop

00001850 <Adafruit_INA260::readBusVoltage()>:
/*!
    @brief Reads and scales the current value of the Bus Voltage register.
    @return The current bus voltage measurement in mV
*/
/**************************************************************************/
float Adafruit_INA260::readBusVoltage(void) {
    1850:	b510      	push	{r4, lr}
  Adafruit_I2CRegister bus_voltage =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1852:	2302      	movs	r3, #2
float Adafruit_INA260::readBusVoltage(void) {
    1854:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_BUSVOLTAGE, 2, MSBFIRST);
    1856:	2401      	movs	r4, #1
    1858:	68c1      	ldr	r1, [r0, #12]
    185a:	461a      	mov	r2, r3
    185c:	a802      	add	r0, sp, #8
    185e:	e9cd 4400 	strd	r4, r4, [sp]
    1862:	f000 f839 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return bus_voltage.read() * 1.25;
    1866:	a802      	add	r0, sp, #8
    1868:	f000 f90c 	bl	1a84 <Adafruit_BusIO_Register::read()>
    186c:	ee06 0a90 	vmov	s13, r0
    1870:	eeb7 7b04 	vmov.f64	d7, #116	; 0x3fa00000  1.250
    1874:	eeb8 0b66 	vcvt.f64.u32	d0, s13
    1878:	ee20 0b07 	vmul.f64	d0, d0, d7
}
    187c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1880:	b008      	add	sp, #32
    1882:	bd10      	pop	{r4, pc}

00001884 <Adafruit_INA260::readPower()>:
/*!
    @brief Reads and scales the current value of the Power register.
    @return The current Power calculation in mW
*/
/**************************************************************************/
float Adafruit_INA260::readPower(void) {
    1884:	b510      	push	{r4, lr}
  Adafruit_I2CRegister power =
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    1886:	2401      	movs	r4, #1
float Adafruit_INA260::readPower(void) {
    1888:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, INA260_REG_POWER, 2, MSBFIRST);
    188a:	68c1      	ldr	r1, [r0, #12]
    188c:	2302      	movs	r3, #2
    188e:	2203      	movs	r2, #3
    1890:	a802      	add	r0, sp, #8
    1892:	e9cd 4400 	strd	r4, r4, [sp]
    1896:	f000 f81f 	bl	18d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>
  return power.read() * 10;
    189a:	a802      	add	r0, sp, #8
    189c:	f000 f8f2 	bl	1a84 <Adafruit_BusIO_Register::read()>
    18a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    18a4:	fa00 f304 	lsl.w	r3, r0, r4
    18a8:	ee00 3a10 	vmov	s0, r3
}
    18ac:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    18b0:	b008      	add	sp, #32
    18b2:	bd10      	pop	{r4, pc}

000018b4 <Adafruit_INA260::conversionReady()>:
/*!
    @brief Checks if the most recent one shot measurement has completed
    @return true if the conversion has completed
*/
/**************************************************************************/
bool Adafruit_INA260::conversionReady(void) {
    18b4:	b500      	push	{lr}
    18b6:	b083      	sub	sp, #12
  Adafruit_I2CRegisterBits conversion_ready =
      Adafruit_I2CRegisterBits(MaskEnable, 1, 3);
    18b8:	6841      	ldr	r1, [r0, #4]
    18ba:	2303      	movs	r3, #3
    18bc:	2201      	movs	r2, #1
    18be:	4668      	mov	r0, sp
    18c0:	f000 f902 	bl	1ac8 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>
  return conversion_ready.read();
    18c4:	4668      	mov	r0, sp
    18c6:	f000 f903 	bl	1ad0 <Adafruit_BusIO_RegisterBits::read()>
}
    18ca:	3800      	subs	r0, #0
    18cc:	bf18      	it	ne
    18ce:	2001      	movne	r0, #1
    18d0:	b003      	add	sp, #12
    18d2:	f85d fb04 	ldr.w	pc, [sp], #4
    18d6:	bf00      	nop

000018d8 <Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice*, unsigned short, unsigned char, unsigned char, unsigned char)>:
  _width = width;
    18d8:	7303      	strb	r3, [r0, #12]
                                                 uint8_t address_width) {
    18da:	2300      	movs	r3, #0
  _address = reg_addr;
    18dc:	8142      	strh	r2, [r0, #10]
                                                 uint8_t address_width) {
    18de:	6143      	str	r3, [r0, #20]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    18e0:	f89d 2000 	ldrb.w	r2, [sp]
  _spidevice = nullptr;
    18e4:	6043      	str	r3, [r0, #4]
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
    18e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  _i2cdevice = i2cdevice;
    18ea:	6001      	str	r1, [r0, #0]
  _byteorder = byteorder;
    18ec:	7382      	strb	r2, [r0, #14]
  _addrwidth = address_width;
    18ee:	7343      	strb	r3, [r0, #13]
}
    18f0:	4770      	bx	lr
    18f2:	bf00      	nop

000018f4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>:
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    18f4:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    18f8:	4603      	mov	r3, r0
  if (_i2cdevice) {
    18fa:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
    18fc:	b570      	push	{r4, r5, r6, lr}
    18fe:	b084      	sub	sp, #16
                           (uint8_t)(_address >> 8)};
    1900:	f8ad c00c 	strh.w	ip, [sp, #12]
  if (_i2cdevice) {
    1904:	b140      	cbz	r0, 1918 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x24>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
    1906:	7b5c      	ldrb	r4, [r3, #13]
    1908:	ab03      	add	r3, sp, #12
    190a:	e9cd 3400 	strd	r3, r4, [sp]
    190e:	2301      	movs	r3, #1
    1910:	f000 f92a 	bl	1b68 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
}
    1914:	b004      	add	sp, #16
    1916:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
    1918:	6858      	ldr	r0, [r3, #4]
    191a:	2800      	cmp	r0, #0
    191c:	d0fa      	beq.n	1914 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    191e:	7a1e      	ldrb	r6, [r3, #8]
    1920:	fa5f f58c 	uxtb.w	r5, ip
    1924:	2e03      	cmp	r6, #3
    1926:	d021      	beq.n	196c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x78>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1928:	460c      	mov	r4, r1
    192a:	4696      	mov	lr, r2
    192c:	b176      	cbz	r6, 194c <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x58>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    192e:	2e02      	cmp	r6, #2
    1930:	d111      	bne.n	1956 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x62>
      addrbuffer[0] |= 0x80;
    1932:	f065 057f 	orn	r5, r5, #127	; 0x7f
    1936:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
    193a:	7b5d      	ldrb	r5, [r3, #13]
    193c:	4672      	mov	r2, lr
    193e:	ab03      	add	r3, sp, #12
    1940:	4621      	mov	r1, r4
    1942:	9500      	str	r5, [sp, #0]
    1944:	f000 fb3c 	bl	1fc0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
}
    1948:	b004      	add	sp, #16
    194a:	bd70      	pop	{r4, r5, r6, pc}
      addrbuffer[0] &= ~0x80;
    194c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    1950:	f88d 500c 	strb.w	r5, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1954:	e7f1      	b.n	193a <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
    1956:	2e01      	cmp	r6, #1
    1958:	d1ef      	bne.n	193a <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      addrbuffer[0] &= ~0x80;
    195a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    195e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
      addrbuffer[0] |= 0x40;
    1962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1966:	f88d 200c 	strb.w	r2, [sp, #12]
    196a:	e7e6      	b.n	193a <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x46>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    196c:	7b5c      	ldrb	r4, [r3, #13]
    196e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
    1972:	ab03      	add	r3, sp, #12
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1974:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1978:	3401      	adds	r4, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
    197a:	f02c 0c01 	bic.w	ip, ip, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    197e:	9400      	str	r4, [sp, #0]
      addrbuffer[0] =
    1980:	f88d c00c 	strb.w	ip, [sp, #12]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
    1984:	f000 fb1c 	bl	1fc0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>
    1988:	e7c4      	b.n	1914 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)+0x20>
    198a:	bf00      	nop

0000198c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>:
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
    198c:	b530      	push	{r4, r5, lr}
  if (numbytes == 0) {
    198e:	b962      	cbnz	r2, 19aa <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x1e>
    numbytes = _width;
    1990:	7b04      	ldrb	r4, [r0, #12]
  if (numbytes > 4) {
    1992:	2c04      	cmp	r4, #4
    1994:	d824      	bhi.n	19e0 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    1996:	6141      	str	r1, [r0, #20]
  for (int i = 0; i < numbytes; i++) {
    1998:	b95c      	cbnz	r4, 19b2 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x26>
    199a:	f100 0e0f 	add.w	lr, r0, #15
  return write(_buffer, numbytes);
    199e:	4622      	mov	r2, r4
    19a0:	4671      	mov	r1, lr
}
    19a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return write(_buffer, numbytes);
    19a6:	f7ff bfa5 	b.w	18f4 <Adafruit_BusIO_Register::write(unsigned char*, unsigned char)>
  if (numbytes > 4) {
    19aa:	2a04      	cmp	r2, #4
    19ac:	4614      	mov	r4, r2
    19ae:	d817      	bhi.n	19e0 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x54>
  _cached = value;
    19b0:	6141      	str	r1, [r0, #20]
      _buffer[numbytes - i - 1] = value & 0xFF;
    19b2:	f100 0e0f 	add.w	lr, r0, #15
    19b6:	f104 030e 	add.w	r3, r4, #14
    if (_byteorder == LSBFIRST) {
    19ba:	7b85      	ldrb	r5, [r0, #14]
    19bc:	f100 020e 	add.w	r2, r0, #14
    19c0:	fa50 f383 	uxtab	r3, r0, r3
    19c4:	46f4      	mov	ip, lr
    19c6:	b94d      	cbnz	r5, 19dc <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x50>
      _buffer[i] = value & 0xFF;
    19c8:	f88c 1000 	strb.w	r1, [ip]
  for (int i = 0; i < numbytes; i++) {
    19cc:	3b01      	subs	r3, #1
    value >>= 8;
    19ce:	0a09      	lsrs	r1, r1, #8
  for (int i = 0; i < numbytes; i++) {
    19d0:	f10c 0c01 	add.w	ip, ip, #1
    19d4:	4293      	cmp	r3, r2
    19d6:	d0e2      	beq.n	199e <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x12>
    if (_byteorder == LSBFIRST) {
    19d8:	2d00      	cmp	r5, #0
    19da:	d0f5      	beq.n	19c8 <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x3c>
      _buffer[numbytes - i - 1] = value & 0xFF;
    19dc:	7019      	strb	r1, [r3, #0]
    19de:	e7f5      	b.n	19cc <Adafruit_BusIO_Register::write(unsigned long, unsigned char)+0x40>
    return false;
    19e0:	2000      	movs	r0, #0
}
    19e2:	bd30      	pop	{r4, r5, pc}

000019e4 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>:
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    19e4:	b510      	push	{r4, lr}
    19e6:	4684      	mov	ip, r0
    19e8:	b084      	sub	sp, #16
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
    19ea:	8940      	ldrh	r0, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
    19ec:	4614      	mov	r4, r2
    19ee:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
    19f0:	b2c2      	uxtb	r2, r0
    19f2:	f8ad 000c 	strh.w	r0, [sp, #12]
    19f6:	ea4f 2e10 	mov.w	lr, r0, lsr #8
  if (_i2cdevice) {
    19fa:	f8dc 0000 	ldr.w	r0, [ip]
    19fe:	b148      	cbz	r0, 1a14 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x30>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1a00:	2100      	movs	r1, #0
    1a02:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1a06:	9400      	str	r4, [sp, #0]
    1a08:	9101      	str	r1, [sp, #4]
    1a0a:	a903      	add	r1, sp, #12
    1a0c:	f000 f918 	bl	1c40 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>
}
    1a10:	b004      	add	sp, #16
    1a12:	bd10      	pop	{r4, pc}
  if (_spidevice) {
    1a14:	f8dc 0004 	ldr.w	r0, [ip, #4]
    1a18:	2800      	cmp	r0, #0
    1a1a:	d0f9      	beq.n	1a10 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
    1a1c:	f89c 1008 	ldrb.w	r1, [ip, #8]
    1a20:	2903      	cmp	r1, #3
    1a22:	d01e      	beq.n	1a62 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x7e>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
    1a24:	b179      	cbz	r1, 1a46 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x62>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
    1a26:	2902      	cmp	r1, #2
    1a28:	d112      	bne.n	1a50 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x6c>
      addrbuffer[0] &= ~0x80;
    1a2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1a2e:	f88d 200c 	strb.w	r2, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
    1a32:	21ff      	movs	r1, #255	; 0xff
    1a34:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1a38:	9400      	str	r4, [sp, #0]
    1a3a:	9101      	str	r1, [sp, #4]
    1a3c:	a903      	add	r1, sp, #12
    1a3e:	f000 fb1b 	bl	2078 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
}
    1a42:	b004      	add	sp, #16
    1a44:	bd10      	pop	{r4, pc}
      addrbuffer[0] |= 0x80;
    1a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1a4a:	f88d 200c 	strb.w	r2, [sp, #12]
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
    1a4e:	e7f0      	b.n	1a32 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
    1a50:	2901      	cmp	r1, #1
    1a52:	d1ee      	bne.n	1a32 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      addrbuffer[0] |= 0x80 | 0x40;
    1a54:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1a58:	f062 023f 	orn	r2, r2, #63	; 0x3f
    1a5c:	f88d 200c 	strb.w	r2, [sp, #12]
    1a60:	e7e7      	b.n	1a32 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x4e>
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1a62:	21ff      	movs	r1, #255	; 0xff
    1a64:	9400      	str	r4, [sp, #0]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
    1a66:	f88d 200d 	strb.w	r2, [sp, #13]
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
    1a6a:	f04e 0e01 	orr.w	lr, lr, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1a6e:	f89c 200d 	ldrb.w	r2, [ip, #13]
    1a72:	9101      	str	r1, [sp, #4]
    1a74:	a903      	add	r1, sp, #12
    1a76:	3201      	adds	r2, #1
      addrbuffer[0] =
    1a78:	f88d e00c 	strb.w	lr, [sp, #12]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
    1a7c:	f000 fafc 	bl	2078 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>
                                         len);
    1a80:	e7c6      	b.n	1a10 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)+0x2c>
    1a82:	bf00      	nop

00001a84 <Adafruit_BusIO_Register::read()>:
uint32_t Adafruit_BusIO_Register::read(void) {
    1a84:	b570      	push	{r4, r5, r6, lr}
  if (!read(_buffer, _width)) {
    1a86:	f100 050f 	add.w	r5, r0, #15
    1a8a:	7b02      	ldrb	r2, [r0, #12]
uint32_t Adafruit_BusIO_Register::read(void) {
    1a8c:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
    1a8e:	4629      	mov	r1, r5
    1a90:	f7ff ffa8 	bl	19e4 <Adafruit_BusIO_Register::read(unsigned char*, unsigned char)>
    1a94:	b1a0      	cbz	r0, 1ac0 <Adafruit_BusIO_Register::read()+0x3c>
  for (int i = 0; i < _width; i++) {
    1a96:	7b20      	ldrb	r0, [r4, #12]
    1a98:	b170      	cbz	r0, 1ab8 <Adafruit_BusIO_Register::read()+0x34>
    1a9a:	300e      	adds	r0, #14
    if (_byteorder == LSBFIRST) {
    1a9c:	7ba6      	ldrb	r6, [r4, #14]
    1a9e:	4629      	mov	r1, r5
    1aa0:	f104 020e 	add.w	r2, r4, #14
    1aa4:	1823      	adds	r3, r4, r0
  uint32_t value = 0;
    1aa6:	2000      	movs	r0, #0
    value <<= 8;
    1aa8:	0200      	lsls	r0, r0, #8
    if (_byteorder == LSBFIRST) {
    1aaa:	b936      	cbnz	r6, 1aba <Adafruit_BusIO_Register::read()+0x36>
      value |= _buffer[_width - i - 1];
    1aac:	781c      	ldrb	r4, [r3, #0]
    1aae:	4320      	orrs	r0, r4
  for (int i = 0; i < _width; i++) {
    1ab0:	3b01      	subs	r3, #1
    1ab2:	3101      	adds	r1, #1
    1ab4:	4293      	cmp	r3, r2
    1ab6:	d1f7      	bne.n	1aa8 <Adafruit_BusIO_Register::read()+0x24>
}
    1ab8:	bd70      	pop	{r4, r5, r6, pc}
      value |= _buffer[i];
    1aba:	780c      	ldrb	r4, [r1, #0]
    1abc:	4320      	orrs	r0, r4
    1abe:	e7f7      	b.n	1ab0 <Adafruit_BusIO_Register::read()+0x2c>
    return -1;
    1ac0:	f04f 30ff 	mov.w	r0, #4294967295
}
    1ac4:	bd70      	pop	{r4, r5, r6, pc}
    1ac6:	bf00      	nop

00001ac8 <Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(Adafruit_BusIO_Register*, unsigned char, unsigned char)>:
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
    1ac8:	6001      	str	r1, [r0, #0]
  _bits = bits;
    1aca:	7102      	strb	r2, [r0, #4]
  _shift = shift;
    1acc:	7143      	strb	r3, [r0, #5]
}
    1ace:	4770      	bx	lr

00001ad0 <Adafruit_BusIO_RegisterBits::read()>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
    1ad0:	b510      	push	{r4, lr}
    1ad2:	4604      	mov	r4, r0
  uint32_t val = _register->read();
    1ad4:	6800      	ldr	r0, [r0, #0]
    1ad6:	f7ff ffd5 	bl	1a84 <Adafruit_BusIO_Register::read()>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
    1ada:	2301      	movs	r3, #1
    1adc:	7921      	ldrb	r1, [r4, #4]
  val >>= _shift;
    1ade:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
    1ae0:	408b      	lsls	r3, r1
  val >>= _shift;
    1ae2:	40d0      	lsrs	r0, r2
  return val & ((1 << (_bits)) - 1);
    1ae4:	3b01      	subs	r3, #1
}
    1ae6:	4018      	ands	r0, r3
    1ae8:	bd10      	pop	{r4, pc}
    1aea:	bf00      	nop

00001aec <Adafruit_BusIO_RegisterBits::write(unsigned long)>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1aec:	b538      	push	{r3, r4, r5, lr}
    1aee:	4605      	mov	r5, r0
  uint32_t val = _register->read();
    1af0:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
    1af2:	460c      	mov	r4, r1
  uint32_t val = _register->read();
    1af4:	f7ff ffc6 	bl	1a84 <Adafruit_BusIO_Register::read()>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
    1af8:	792a      	ldrb	r2, [r5, #4]
    1afa:	2301      	movs	r3, #1
    1afc:	4093      	lsls	r3, r2
  data &= mask;

  mask <<= _shift;
    1afe:	796a      	ldrb	r2, [r5, #5]
  val &= ~mask;          // remove the current data at that spot
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
    1b00:	682d      	ldr	r5, [r5, #0]
  uint32_t mask = (1 << (_bits)) - 1;
    1b02:	3b01      	subs	r3, #1
  data &= mask;
    1b04:	401c      	ands	r4, r3
  mask <<= _shift;
    1b06:	4093      	lsls	r3, r2
  val |= data << _shift; // and add in the new data
    1b08:	4094      	lsls	r4, r2
  val &= ~mask;          // remove the current data at that spot
    1b0a:	ea20 0103 	bic.w	r1, r0, r3
  return _register->write(val, _register->width());
    1b0e:	7b2a      	ldrb	r2, [r5, #12]
    1b10:	4628      	mov	r0, r5
    1b12:	4321      	orrs	r1, r4
}
    1b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return _register->write(val, _register->width());
    1b18:	f7ff bf38 	b.w	198c <Adafruit_BusIO_Register::write(unsigned long, unsigned char)>

00001b1c <Adafruit_I2CDevice::Adafruit_I2CDevice(unsigned char, TwoWire*)>:
  _begun = false;
    1b1c:	f04f 0c00 	mov.w	ip, #0
  _wire = theWire;
    1b20:	6042      	str	r2, [r0, #4]
  _maxBufferSize = 32;
    1b22:	2220      	movs	r2, #32
  _addr = addr;
    1b24:	7001      	strb	r1, [r0, #0]
  _begun = false;
    1b26:	f880 c008 	strb.w	ip, [r0, #8]
  _maxBufferSize = 32;
    1b2a:	60c2      	str	r2, [r0, #12]
}
    1b2c:	4770      	bx	lr
    1b2e:	bf00      	nop

00001b30 <Adafruit_I2CDevice::begin(bool)>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1b30:	b538      	push	{r3, r4, r5, lr}
    1b32:	4604      	mov	r4, r0
  _wire->begin();
    1b34:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
    1b36:	460d      	mov	r5, r1
  _wire->begin();
    1b38:	f00a fdca 	bl	c6d0 <___ZN7TwoWire5beginEv_veneer>
  _begun = true;
    1b3c:	2101      	movs	r1, #1
    1b3e:	7221      	strb	r1, [r4, #8]
  if (addr_detect) {
    1b40:	b90d      	cbnz	r5, 1b46 <Adafruit_I2CDevice::begin(bool)+0x16>
  return true;
    1b42:	4608      	mov	r0, r1
}
    1b44:	bd38      	pop	{r3, r4, r5, pc}
		txBuffer[0] = (address << 1);
    1b46:	7820      	ldrb	r0, [r4, #0]
  _wire->beginTransmission(_addr);
    1b48:	6862      	ldr	r2, [r4, #4]
    1b4a:	4088      	lsls	r0, r1
		transmitting = 1;
    1b4c:	f882 1130 	strb.w	r1, [r2, #304]	; 0x130
		txBufferLength = 1;
    1b50:	f882 112f 	strb.w	r1, [r2, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1b54:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
		return endTransmission(1);
    1b58:	6860      	ldr	r0, [r4, #4]
    1b5a:	f7ff f909 	bl	d70 <TwoWire::endTransmission(unsigned char)>
  if (_wire->endTransmission() == 0) {
    1b5e:	fab0 f080 	clz	r0, r0
    1b62:	0940      	lsrs	r0, r0, #5
}
    1b64:	bd38      	pop	{r3, r4, r5, pc}
    1b66:	bf00      	nop

00001b68 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b6c:	9f07      	ldr	r7, [sp, #28]
    1b6e:	4615      	mov	r5, r2
    1b70:	4698      	mov	r8, r3
  if ((len + prefix_len) > maxBufferSize()) {
    1b72:	68c3      	ldr	r3, [r0, #12]
    1b74:	443a      	add	r2, r7
    1b76:	429a      	cmp	r2, r3
    1b78:	d816      	bhi.n	1ba8 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
		txBuffer[0] = (address << 1);
    1b7a:	7802      	ldrb	r2, [r0, #0]
    1b7c:	4604      	mov	r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
  }

  _wire->beginTransmission(_addr);
    1b7e:	6843      	ldr	r3, [r0, #4]
    1b80:	460e      	mov	r6, r1
    1b82:	0052      	lsls	r2, r2, #1
    1b84:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    1b88:	2201      	movs	r2, #1
    1b8a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1b8e:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
    1b92:	b167      	cbz	r7, 1bae <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    1b94:	9b06      	ldr	r3, [sp, #24]
    1b96:	b153      	cbz	r3, 1bae <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
    1b98:	6840      	ldr	r0, [r0, #4]
    1b9a:	463a      	mov	r2, r7
    1b9c:	9906      	ldr	r1, [sp, #24]
    1b9e:	6803      	ldr	r3, [r0, #0]
    1ba0:	685b      	ldr	r3, [r3, #4]
    1ba2:	4798      	blx	r3
    1ba4:	4287      	cmp	r7, r0
    1ba6:	d002      	beq.n	1bae <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x46>
    return false;
    1ba8:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
    1baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (_wire->write(buffer, len) != len) {
    1bae:	6860      	ldr	r0, [r4, #4]
    1bb0:	4631      	mov	r1, r6
    1bb2:	462a      	mov	r2, r5
    1bb4:	6803      	ldr	r3, [r0, #0]
    1bb6:	685b      	ldr	r3, [r3, #4]
    1bb8:	4798      	blx	r3
    1bba:	4285      	cmp	r5, r0
    1bbc:	d1f4      	bne.n	1ba8 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)+0x40>
  if (_wire->endTransmission(stop) == 0) {
    1bbe:	4641      	mov	r1, r8
    1bc0:	6860      	ldr	r0, [r4, #4]
    1bc2:	f7ff f8d5 	bl	d70 <TwoWire::endTransmission(unsigned char)>
    1bc6:	fab0 f080 	clz	r0, r0
    1bca:	0940      	lsrs	r0, r0, #5
}
    1bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001bd0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
    1bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1bd4:	4615      	mov	r5, r2
    1bd6:	4606      	mov	r6, r0
    1bd8:	460f      	mov	r7, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
    1bda:	b2d2      	uxtb	r2, r2
    1bdc:	7801      	ldrb	r1, [r0, #0]
    1bde:	6840      	ldr	r0, [r0, #4]
    1be0:	f7ff f944 	bl	e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
#endif

  if (recv != len) {
    1be4:	4285      	cmp	r5, r0
    1be6:	d124      	bne.n	1c32 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x62>
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
    1be8:	b305      	cbz	r5, 1c2c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    1bea:	2400      	movs	r4, #0
    1bec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1c3c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x6c>
    1bf0:	46a0      	mov	r8, r4
    1bf2:	e013      	b.n	1c1c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x4c>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1bf4:	f890 c0a2 	ldrb.w	ip, [r0, #162]	; 0xa2
    1bf8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1bfc:	4562      	cmp	r2, ip
		return rxBuffer[rxBufferIndex++];
    1bfe:	f10c 0201 	add.w	r2, ip, #1
    1c02:	4484      	add	ip, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    1c04:	d918      	bls.n	1c38 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x68>
		return rxBuffer[rxBufferIndex++];
    1c06:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1c0a:	f89c 301a 	ldrb.w	r3, [ip, #26]
    1c0e:	3401      	adds	r4, #1
    buffer[i] = _wire->read();
    1c10:	f807 3008 	strb.w	r3, [r7, r8]
  for (uint16_t i = 0; i < len; i++) {
    1c14:	b2a4      	uxth	r4, r4
    1c16:	42a5      	cmp	r5, r4
    1c18:	46a0      	mov	r8, r4
    1c1a:	d907      	bls.n	1c2c <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x5c>
    buffer[i] = _wire->read();
    1c1c:	6870      	ldr	r0, [r6, #4]
    1c1e:	6802      	ldr	r2, [r0, #0]
    1c20:	6952      	ldr	r2, [r2, #20]
    1c22:	454a      	cmp	r2, r9
    1c24:	d0e6      	beq.n	1bf4 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x24>
    1c26:	4790      	blx	r2
    1c28:	b2c3      	uxtb	r3, r0
    1c2a:	e7f0      	b.n	1c0e <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    return false;
    1c2c:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    1c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return false;
    1c32:	2000      	movs	r0, #0
}
    1c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c38:	23ff      	movs	r3, #255	; 0xff
    1c3a:	e7e8      	b.n	1c0e <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)+0x3e>
    1c3c:	00000b19 	.word	0x00000b19

00001c40 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
    1c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!write(write_buffer, write_len, stop)) {
    1c44:	2400      	movs	r4, #0
                                         size_t read_len, bool stop) {
    1c46:	b082      	sub	sp, #8
    1c48:	461f      	mov	r7, r3
    1c4a:	4606      	mov	r6, r0
  if (!write(write_buffer, write_len, stop)) {
    1c4c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                                         size_t read_len, bool stop) {
    1c50:	9d08      	ldr	r5, [sp, #32]
  if (!write(write_buffer, write_len, stop)) {
    1c52:	e9cd 4400 	strd	r4, r4, [sp]
    1c56:	f7ff ff87 	bl	1b68 <Adafruit_I2CDevice::write(unsigned char const*, unsigned int, bool, unsigned char const*, unsigned int)>
    1c5a:	b928      	cbnz	r0, 1c68 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x28>
    return false;
    1c5c:	f04f 0800 	mov.w	r8, #0
  }

  return read(read_buffer, read_len);
}
    1c60:	4640      	mov	r0, r8
    1c62:	b002      	add	sp, #8
    1c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while (pos < len) {
    1c68:	4680      	mov	r8, r0
    1c6a:	b915      	cbnz	r5, 1c72 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x32>
    1c6c:	e7f8      	b.n	1c60 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
    1c6e:	42a5      	cmp	r5, r4
    1c70:	d9f6      	bls.n	1c60 <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x20>
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
    1c72:	1b2a      	subs	r2, r5, r4
    1c74:	68f3      	ldr	r3, [r6, #12]
    if (!_read(buffer + pos, read_len, read_stop))
    1c76:	1939      	adds	r1, r7, r4
    1c78:	4630      	mov	r0, r6
    1c7a:	429a      	cmp	r2, r3
    1c7c:	bf28      	it	cs
    1c7e:	461a      	movcs	r2, r3
    bool read_stop = (pos < (len - read_len)) ? false : stop;
    1c80:	1aab      	subs	r3, r5, r2
    if (!_read(buffer + pos, read_len, read_stop))
    1c82:	42a3      	cmp	r3, r4
    pos += read_len;
    1c84:	4414      	add	r4, r2
    if (!_read(buffer + pos, read_len, read_stop))
    1c86:	bf8c      	ite	hi
    1c88:	2300      	movhi	r3, #0
    1c8a:	2301      	movls	r3, #1
    1c8c:	f7ff ffa0 	bl	1bd0 <Adafruit_I2CDevice::_read(unsigned char*, unsigned int, bool)>
    1c90:	2800      	cmp	r0, #0
    1c92:	d1ec      	bne.n	1c6e <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x2e>
    1c94:	e7e2      	b.n	1c5c <Adafruit_I2CDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, bool)+0x1c>
    1c96:	bf00      	nop

00001c98 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>:

  //
  // SOFTWARE SPI
  //
  uint8_t startbit;
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
    1c98:	7b03      	ldrb	r3, [r0, #12]
    startbit = 0x1;
  } else {
    startbit = 0x80;
    1c9a:	2b00      	cmp	r3, #0
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startbit = 0x80;
    1ca0:	bf0c      	ite	eq
    1ca2:	2301      	moveq	r3, #1
    1ca4:	2380      	movne	r3, #128	; 0x80
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
    1ca6:	b085      	sub	sp, #20
  }

  bool towrite, lastmosi = !(buffer[0] & startbit);
    1ca8:	f891 9000 	ldrb.w	r9, [r1]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1cac:	4e63      	ldr	r6, [pc, #396]	; (1e3c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a4>)
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1cae:	ea19 0f03 	tst.w	r9, r3
    startbit = 0x80;
    1cb2:	9302      	str	r3, [sp, #8]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1cb4:	6883      	ldr	r3, [r0, #8]
  bool towrite, lastmosi = !(buffer[0] & startbit);
    1cb6:	bf0c      	ite	eq
    1cb8:	f04f 0a01 	moveq.w	sl, #1
    1cbc:	f04f 0a00 	movne.w	sl, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
    1cc0:	fbb6 f6f3 	udiv	r6, r6, r3

  for (size_t i = 0; i < len; i++) {
    1cc4:	2a00      	cmp	r2, #0
    1cc6:	f000 80b6 	beq.w	1e36 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    1cca:	3a01      	subs	r2, #1
    1ccc:	4604      	mov	r4, r0
    1cce:	b2f6      	uxtb	r6, r6
    1cd0:	4688      	mov	r8, r1
    1cd2:	188b      	adds	r3, r1, r2
	uint32_t begin = ARM_DWT_CYCCNT;
    1cd4:	f8df b170 	ldr.w	fp, [pc, #368]	; 1e48 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1b0>
    1cd8:	9303      	str	r3, [sp, #12]
    Serial.print(send, HEX);
    Serial.print(" -> 0x");
    */

    // Serial.print(send, HEX);
    for (uint8_t b = startbit; b != 0;
    1cda:	9d02      	ldr	r5, [sp, #8]
    uint8_t reply = 0;
    1cdc:	2700      	movs	r7, #0
         b = (_dataOrder == SPI_BITORDER_LSBFIRST) ? b << 1 : b >> 1) {

      if (bitdelay_us) {
    1cde:	2e00      	cmp	r6, #0
    1ce0:	d141      	bne.n	1d66 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xce>
        delayMicroseconds(bitdelay_us);
      }

      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1ce2:	7b63      	ldrb	r3, [r4, #13]
    1ce4:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1ce8:	d175      	bne.n	1dd6 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x13e>
        towrite = send & b;
    1cea:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1cee:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    1cf2:	bf14      	ite	ne
    1cf4:	2301      	movne	r3, #1
    1cf6:	2300      	moveq	r3, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1cf8:	1c42      	adds	r2, r0, #1
    1cfa:	d02f      	beq.n	1d5c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
    1cfc:	4553      	cmp	r3, sl
    1cfe:	d02d      	beq.n	1d5c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xc4>
          if (towrite)
            *mosiPort = *mosiPort | mosiPinMask;
          else
            *mosiPort = *mosiPort & ~mosiPinMask;
#else
          digitalWrite(_mosi, towrite);
    1d00:	4619      	mov	r1, r3
    1d02:	b2c0      	uxtb	r0, r0
    1d04:	9301      	str	r3, [sp, #4]
    1d06:	f001 fdfd 	bl	3904 <digitalWrite>
        towrite = send & b;
    1d0a:	9b01      	ldr	r3, [sp, #4]
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort | clkPinMask; // Clock high
#else
        digitalWrite(_sck, HIGH);
    1d0c:	2101      	movs	r1, #1
    1d0e:	7be0      	ldrb	r0, [r4, #15]
        towrite = send & b;
    1d10:	469a      	mov	sl, r3
        digitalWrite(_sck, HIGH);
    1d12:	f001 fdf7 	bl	3904 <digitalWrite>

        if (bitdelay_us) {
          delayMicroseconds(bitdelay_us);
        }

        if (_miso != -1) {
    1d16:	f994 0011 	ldrsb.w	r0, [r4, #17]
    1d1a:	1c42      	adds	r2, r0, #1
    1d1c:	d004      	beq.n	1d28 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#ifdef BUSIO_USE_FAST_PINIO
          if (*misoPort & misoPinMask) {
#else
          if (digitalRead(_miso)) {
    1d1e:	b2c0      	uxtb	r0, r0
    1d20:	f001 fe1a 	bl	3958 <digitalRead>
    1d24:	b100      	cbz	r0, 1d28 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x90>
#endif
            reply |= b;
    1d26:	432f      	orrs	r7, r5
        }

#ifdef BUSIO_USE_FAST_PINIO
        *clkPort = *clkPort & ~clkPinMask; // Clock low
#else
        digitalWrite(_sck, LOW);
    1d28:	2100      	movs	r1, #0
    1d2a:	7be0      	ldrb	r0, [r4, #15]
    1d2c:	f001 fdea 	bl	3904 <digitalWrite>
#endif
            reply |= b;
          }
        }
      }
      if (_miso != -1) {
    1d30:	f994 3011 	ldrsb.w	r3, [r4, #17]
    1d34:	3301      	adds	r3, #1
        buffer[i] = reply;
    1d36:	bf18      	it	ne
    1d38:	f888 7000 	strbne.w	r7, [r8]
    for (uint8_t b = startbit; b != 0;
    1d3c:	7b23      	ldrb	r3, [r4, #12]
    1d3e:	b94b      	cbnz	r3, 1d54 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xbc>
    1d40:	006d      	lsls	r5, r5, #1
    1d42:	b2ed      	uxtb	r5, r5
    1d44:	2d00      	cmp	r5, #0
    1d46:	d1ca      	bne.n	1cde <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
  for (size_t i = 0; i < len; i++) {
    1d48:	9b03      	ldr	r3, [sp, #12]
    1d4a:	4598      	cmp	r8, r3
    1d4c:	d073      	beq.n	1e36 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x19e>
    uint8_t send = buffer[i];
    1d4e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
    1d52:	e7c2      	b.n	1cda <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x42>
    for (uint8_t b = startbit; b != 0;
    1d54:	086d      	lsrs	r5, r5, #1
    1d56:	2d00      	cmp	r5, #0
    1d58:	d1c1      	bne.n	1cde <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x46>
    1d5a:	e7f5      	b.n	1d48 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xb0>
        digitalWrite(_sck, HIGH);
    1d5c:	2101      	movs	r1, #1
    1d5e:	7be0      	ldrb	r0, [r4, #15]
    1d60:	f001 fdd0 	bl	3904 <digitalWrite>
        if (bitdelay_us) {
    1d64:	e7d7      	b.n	1d16 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1d66:	4b36      	ldr	r3, [pc, #216]	; (1e40 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1d68:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1d6c:	681a      	ldr	r2, [r3, #0]
    1d6e:	4b35      	ldr	r3, [pc, #212]	; (1e44 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1d70:	fba3 3202 	umull	r3, r2, r3, r2
    1d74:	0c92      	lsrs	r2, r2, #18
    1d76:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1d7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    1d7e:	1a5b      	subs	r3, r3, r1
    1d80:	429a      	cmp	r2, r3
    1d82:	d8fa      	bhi.n	1d7a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xe2>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
    1d84:	7b63      	ldrb	r3, [r4, #13]
    1d86:	f013 0ff7 	tst.w	r3, #247	; 0xf7
    1d8a:	d140      	bne.n	1e0e <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x176>
        towrite = send & b;
    1d8c:	ea19 0f05 	tst.w	r9, r5
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1d90:	f994 0010 	ldrsb.w	r0, [r4, #16]
        towrite = send & b;
    1d94:	bf14      	ite	ne
    1d96:	2101      	movne	r1, #1
    1d98:	2100      	moveq	r1, #0
        if ((_mosi != -1) && (lastmosi != towrite)) {
    1d9a:	1c43      	adds	r3, r0, #1
    1d9c:	d007      	beq.n	1dae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
    1d9e:	4551      	cmp	r1, sl
    1da0:	d005      	beq.n	1dae <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x116>
          digitalWrite(_mosi, towrite);
    1da2:	b2c0      	uxtb	r0, r0
    1da4:	9101      	str	r1, [sp, #4]
    1da6:	f001 fdad 	bl	3904 <digitalWrite>
        towrite = send & b;
    1daa:	9901      	ldr	r1, [sp, #4]
    1dac:	468a      	mov	sl, r1
        digitalWrite(_sck, HIGH);
    1dae:	2101      	movs	r1, #1
    1db0:	7be0      	ldrb	r0, [r4, #15]
    1db2:	f001 fda7 	bl	3904 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1db6:	4b22      	ldr	r3, [pc, #136]	; (1e40 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1db8:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1dbc:	681a      	ldr	r2, [r3, #0]
    1dbe:	4b21      	ldr	r3, [pc, #132]	; (1e44 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1dc0:	fba3 3202 	umull	r3, r2, r3, r2
    1dc4:	0c92      	lsrs	r2, r2, #18
    1dc6:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1dca:	f8db 3004 	ldr.w	r3, [fp, #4]
    1dce:	1a5b      	subs	r3, r3, r1
    1dd0:	429a      	cmp	r2, r3
    1dd2:	d8fa      	bhi.n	1dca <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x132>
    1dd4:	e79f      	b.n	1d16 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x7e>
        digitalWrite(_sck, HIGH);
    1dd6:	2101      	movs	r1, #1
    1dd8:	7be0      	ldrb	r0, [r4, #15]
    1dda:	f001 fd93 	bl	3904 <digitalWrite>
        if (_mosi != -1) {
    1dde:	f994 0010 	ldrsb.w	r0, [r4, #16]
    1de2:	1c43      	adds	r3, r0, #1
    1de4:	d004      	beq.n	1df0 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x158>
          digitalWrite(_mosi, send & b);
    1de6:	b2c0      	uxtb	r0, r0
    1de8:	ea09 0105 	and.w	r1, r9, r5
    1dec:	f001 fd8a 	bl	3904 <digitalWrite>
        digitalWrite(_sck, LOW);
    1df0:	2100      	movs	r1, #0
    1df2:	7be0      	ldrb	r0, [r4, #15]
    1df4:	f001 fd86 	bl	3904 <digitalWrite>
        if (_miso != -1) {
    1df8:	f994 0011 	ldrsb.w	r0, [r4, #17]
    1dfc:	1c41      	adds	r1, r0, #1
    1dfe:	d09d      	beq.n	1d3c <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0xa4>
          if (digitalRead(_miso)) {
    1e00:	b2c0      	uxtb	r0, r0
    1e02:	f001 fda9 	bl	3958 <digitalRead>
    1e06:	2800      	cmp	r0, #0
    1e08:	d092      	beq.n	1d30 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
            reply |= b;
    1e0a:	432f      	orrs	r7, r5
    1e0c:	e790      	b.n	1d30 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x98>
        digitalWrite(_sck, HIGH);
    1e0e:	2101      	movs	r1, #1
    1e10:	7be0      	ldrb	r0, [r4, #15]
    1e12:	f001 fd77 	bl	3904 <digitalWrite>
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1e16:	4b0a      	ldr	r3, [pc, #40]	; (1e40 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1a8>)
	uint32_t begin = ARM_DWT_CYCCNT;
    1e18:	f8db 1004 	ldr.w	r1, [fp, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    1e1c:	681a      	ldr	r2, [r3, #0]
    1e1e:	4b09      	ldr	r3, [pc, #36]	; (1e44 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x1ac>)
    1e20:	fba3 3202 	umull	r3, r2, r3, r2
    1e24:	0c92      	lsrs	r2, r2, #18
    1e26:	fb06 f202 	mul.w	r2, r6, r2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    1e2a:	f8db 3004 	ldr.w	r3, [fp, #4]
    1e2e:	1a5b      	subs	r3, r3, r1
    1e30:	429a      	cmp	r2, r3
    1e32:	d8fa      	bhi.n	1e2a <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x192>
    1e34:	e7d3      	b.n	1dde <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]+0x146>
      }
    }
  }
  return;
}
    1e36:	b005      	add	sp, #20
    1e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e3c:	0007a120 	.word	0x0007a120
    1e40:	20001104 	.word	0x20001104
    1e44:	431bde83 	.word	0x431bde83
    1e48:	e0001000 	.word	0xe0001000

00001e4c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    1e4c:	b430      	push	{r4, r5}
    1e4e:	b082      	sub	sp, #8
    1e50:	460c      	mov	r4, r1
    1e52:	ab02      	add	r3, sp, #8
    1e54:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    1e58:	7cc3      	ldrb	r3, [r0, #19]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d030      	beq.n	1ec0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    1e5e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1e60:	7cc3      	ldrb	r3, [r0, #19]
    1e62:	07da      	lsls	r2, r3, #31
    1e64:	d508      	bpl.n	1e78 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1e66:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1e6a:	6945      	ldr	r5, [r0, #20]
    1e6c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    1e70:	402a      	ands	r2, r5
    1e72:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    1e74:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    1e78:	079d      	lsls	r5, r3, #30
    1e7a:	d508      	bpl.n	1e8e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1e7c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1e80:	6985      	ldr	r5, [r0, #24]
    1e82:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    1e86:	402a      	ands	r2, r5
    1e88:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    1e8a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    1e8e:	0759      	lsls	r1, r3, #29
    1e90:	d508      	bpl.n	1ea4 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1e92:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1e96:	69c5      	ldr	r5, [r0, #28]
    1e98:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    1e9c:	402a      	ands	r2, r5
    1e9e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    1ea0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    1ea4:	071a      	lsls	r2, r3, #28
    1ea6:	d508      	bpl.n	1eba <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    1ea8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1eac:	6a05      	ldr	r5, [r0, #32]
    1eae:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    1eb2:	402a      	ands	r2, r5
    1eb4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    1eb6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    1eba:	06db      	lsls	r3, r3, #27
    1ebc:	d42f      	bmi.n	1f1e <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    1ebe:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    1ec0:	6883      	ldr	r3, [r0, #8]
    1ec2:	429c      	cmp	r4, r3
    1ec4:	d035      	beq.n	1f32 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    1ec6:	4b22      	ldr	r3, [pc, #136]	; (1f50 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    1ec8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    1eca:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    1ecc:	4a21      	ldr	r2, [pc, #132]	; (1f54 <SPIClass::beginTransaction(SPISettings)+0x108>)
    1ece:	f3c3 1101 	ubfx	r1, r3, #4, #2
    1ed2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    1ed6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1eda:	3301      	adds	r3, #1
    1edc:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    1ee0:	b1cc      	cbz	r4, 1f16 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    1ee2:	4294      	cmp	r4, r2
    1ee4:	d827      	bhi.n	1f36 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    1ee6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    1eea:	fbb2 f2f3 	udiv	r2, r2, r3
    1eee:	4294      	cmp	r4, r2
    1ef0:	d32c      	bcc.n	1f4c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    1ef2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    1ef6:	d320      	bcc.n	1f3a <SPIClass::beginTransaction(SPISettings)+0xee>
    1ef8:	4c17      	ldr	r4, [pc, #92]	; (1f58 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1efa:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    1efc:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1efe:	2203      	movs	r2, #3
		port().CR = 0;
    1f00:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    1f02:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    1f04:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    1f06:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    1f08:	2201      	movs	r2, #1
		port().CCR = _ccr;
    1f0a:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    1f0c:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    1f0e:	611a      	str	r2, [r3, #16]
	}
    1f10:	b002      	add	sp, #8
    1f12:	bc30      	pop	{r4, r5}
    1f14:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    1f16:	4299      	cmp	r1, r3
    1f18:	d3ef      	bcc.n	1efa <SPIClass::beginTransaction(SPISettings)+0xae>
    1f1a:	1c53      	adds	r3, r2, #1
    1f1c:	e7e9      	b.n	1ef2 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    1f1e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    1f22:	6a41      	ldr	r1, [r0, #36]	; 0x24
    1f24:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    1f28:	400b      	ands	r3, r1
    1f2a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    1f2c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    1f30:	e7c5      	b.n	1ebe <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    1f32:	68c4      	ldr	r4, [r0, #12]
    1f34:	e7e2      	b.n	1efc <SPIClass::beginTransaction(SPISettings)+0xb0>
    1f36:	2400      	movs	r4, #0
    1f38:	e7df      	b.n	1efa <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    1f3a:	2b02      	cmp	r3, #2
    1f3c:	d9fb      	bls.n	1f36 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    1f3e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    1f40:	085a      	lsrs	r2, r3, #1
    1f42:	0214      	lsls	r4, r2, #8
    1f44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    1f48:	431c      	orrs	r4, r3
    1f4a:	e7d6      	b.n	1efa <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    1f4c:	461a      	mov	r2, r3
    1f4e:	e7e4      	b.n	1f1a <SPIClass::beginTransaction(SPISettings)+0xce>
    1f50:	400fc000 	.word	0x400fc000
    1f54:	200006bc 	.word	0x200006bc
    1f58:	007f7fff 	.word	0x007f7fff

00001f5c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
    1f5c:	b510      	push	{r4, lr}
    1f5e:	4604      	mov	r4, r0
  if (_cs != -1) {
    1f60:	f990 000e 	ldrsb.w	r0, [r0, #14]
    1f64:	1c43      	adds	r3, r0, #1
    1f66:	d003      	beq.n	1f70 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x14>
    digitalWrite(_cs, value);
    1f68:	2101      	movs	r1, #1
    1f6a:	b2c0      	uxtb	r0, r0
    1f6c:	f001 fcca 	bl	3904 <digitalWrite>
  if (_spi) {
    1f70:	6823      	ldr	r3, [r4, #0]
    1f72:	b323      	cbz	r3, 1fbe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
		if (interruptMasksUsed) {
    1f74:	7cda      	ldrb	r2, [r3, #19]
    1f76:	b312      	cbz	r2, 1fbe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    1f78:	07d1      	lsls	r1, r2, #31
    1f7a:	d504      	bpl.n	1f86 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x2a>
    1f7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1f7e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1f82:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    1f86:	0794      	lsls	r4, r2, #30
    1f88:	d504      	bpl.n	1f94 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x38>
    1f8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1f8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1f90:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    1f94:	0750      	lsls	r0, r2, #29
    1f96:	d504      	bpl.n	1fa2 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x46>
    1f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
    1f9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1f9e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    1fa2:	0711      	lsls	r1, r2, #28
    1fa4:	d504      	bpl.n	1fb0 <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x54>
    1fa6:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1fa8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1fac:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    1fb0:	06d2      	lsls	r2, r2, #27
    1fb2:	d504      	bpl.n	1fbe <Adafruit_SPIDevice::endTransactionWithDeassertingCS()+0x62>
    1fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1fb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1fba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  setChipSelect(HIGH);
  endTransaction();
}
    1fbe:	bd10      	pop	{r4, pc}

00001fc0 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
    1fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1fc4:	4604      	mov	r4, r0
    1fc6:	b082      	sub	sp, #8
  if (_spi) {
    1fc8:	6800      	ldr	r0, [r0, #0]
                               size_t prefix_len) {
    1fca:	468a      	mov	sl, r1
    1fcc:	4690      	mov	r8, r2
    1fce:	461e      	mov	r6, r3
    1fd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (_spi) {
    1fd2:	b120      	cbz	r0, 1fde <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x1e>
    _spi->beginTransaction(*_spiSetting);
    1fd4:	6863      	ldr	r3, [r4, #4]
    1fd6:	e893 0006 	ldmia.w	r3, {r1, r2}
    1fda:	f7ff ff37 	bl	1e4c <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    1fde:	f994 000e 	ldrsb.w	r0, [r4, #14]
    1fe2:	1c43      	adds	r3, r0, #1
    1fe4:	d142      	bne.n	206c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0xac>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
    1fe6:	b1d5      	cbz	r5, 201e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
    1fe8:	3e01      	subs	r6, #1
    1fea:	eb06 0905 	add.w	r9, r6, r5
    1fee:	f10d 0507 	add.w	r5, sp, #7
    1ff2:	e003      	b.n	1ffc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
    1ff4:	f7ff fe50 	bl	1c98 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    1ff8:	454e      	cmp	r6, r9
    1ffa:	d010      	beq.n	201e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x5e>
  uint8_t data = send;
    1ffc:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    2000:	2201      	movs	r2, #1
  if (_spi) {
    2002:	6827      	ldr	r7, [r4, #0]
    2004:	4629      	mov	r1, r5
    2006:	4620      	mov	r0, r4
  uint8_t data = send;
    2008:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    200c:	2f00      	cmp	r7, #0
    200e:	d0f1      	beq.n	1ff4 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x34>
		transfer(buf, buf, count);
    2010:	4613      	mov	r3, r2
    2012:	4638      	mov	r0, r7
    2014:	462a      	mov	r2, r5
    2016:	f000 f9c1 	bl	239c <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < prefix_len; i++) {
    201a:	454e      	cmp	r6, r9
    201c:	d1ee      	bne.n	1ffc <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x3c>
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
    201e:	f1b8 0f00 	cmp.w	r8, #0
    2022:	d01c      	beq.n	205e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
    2024:	44d0      	add	r8, sl
    2026:	f10a 36ff 	add.w	r6, sl, #4294967295
    202a:	f10d 0507 	add.w	r5, sp, #7
    202e:	f108 38ff 	add.w	r8, r8, #4294967295
    2032:	e003      	b.n	203c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
    2034:	f7ff fe30 	bl	1c98 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    2038:	45b0      	cmp	r8, r6
    203a:	d010      	beq.n	205e <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x9e>
  uint8_t data = send;
    203c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    2040:	2201      	movs	r2, #1
  if (_spi) {
    2042:	6827      	ldr	r7, [r4, #0]
    2044:	4629      	mov	r1, r5
    2046:	4620      	mov	r0, r4
  uint8_t data = send;
    2048:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    204c:	2f00      	cmp	r7, #0
    204e:	d0f1      	beq.n	2034 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x74>
    2050:	4613      	mov	r3, r2
    2052:	4638      	mov	r0, r7
    2054:	462a      	mov	r2, r5
    2056:	f000 f9a1 	bl	239c <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < len; i++) {
    205a:	45b0      	cmp	r8, r6
    205c:	d1ee      	bne.n	203c <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x7c>
      transfer(buffer[i]);
    }
  }
  endTransactionWithDeassertingCS();
    205e:	4620      	mov	r0, r4
    2060:	f7ff ff7c 	bl	1f5c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
    2064:	2001      	movs	r0, #1
    2066:	b002      	add	sp, #8
    2068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    digitalWrite(_cs, value);
    206c:	b2c0      	uxtb	r0, r0
    206e:	2100      	movs	r1, #0
    2070:	f001 fc48 	bl	3904 <digitalWrite>
    2074:	e7b7      	b.n	1fe6 <Adafruit_SPIDevice::write(unsigned char const*, unsigned int, unsigned char const*, unsigned int)+0x26>
    2076:	bf00      	nop

00002078 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
    2078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    207c:	4604      	mov	r4, r0
    207e:	b083      	sub	sp, #12
  if (_spi) {
    2080:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
    2082:	460f      	mov	r7, r1
    2084:	4615      	mov	r5, r2
    2086:	469b      	mov	fp, r3
    2088:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    208c:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
  if (_spi) {
    2090:	b120      	cbz	r0, 209c <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x24>
    _spi->beginTransaction(*_spiSetting);
    2092:	6863      	ldr	r3, [r4, #4]
    2094:	e893 0006 	ldmia.w	r3, {r1, r2}
    2098:	f7ff fed8 	bl	1e4c <SPIClass::beginTransaction(SPISettings)>
  if (_cs != -1) {
    209c:	f994 000e 	ldrsb.w	r0, [r4, #14]
    20a0:	1c43      	adds	r3, r0, #1
    20a2:	d148      	bne.n	2136 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xbe>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
    20a4:	b1d5      	cbz	r5, 20dc <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
    20a6:	3f01      	subs	r7, #1
    20a8:	eb07 0905 	add.w	r9, r7, r5
    20ac:	f10d 0507 	add.w	r5, sp, #7
    20b0:	e003      	b.n	20ba <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
    20b2:	f7ff fdf1 	bl	1c98 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
    20b6:	454f      	cmp	r7, r9
    20b8:	d010      	beq.n	20dc <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x64>
  uint8_t data = send;
    20ba:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    20be:	2201      	movs	r2, #1
  if (_spi) {
    20c0:	6826      	ldr	r6, [r4, #0]
    20c2:	4629      	mov	r1, r5
    20c4:	4620      	mov	r0, r4
  uint8_t data = send;
    20c6:	f88d 3007 	strb.w	r3, [sp, #7]
  if (_spi) {
    20ca:	2e00      	cmp	r6, #0
    20cc:	d0f1      	beq.n	20b2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x3a>
    20ce:	4613      	mov	r3, r2
    20d0:	4630      	mov	r0, r6
    20d2:	462a      	mov	r2, r5
    20d4:	f000 f962 	bl	239c <SPIClass::transfer(void const*, void*, unsigned int)>
    for (size_t i = 0; i < write_len; i++) {
    20d8:	454f      	cmp	r7, r9
    20da:	d1ee      	bne.n	20ba <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x42>
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
    20dc:	f1ba 0f00 	cmp.w	sl, #0
    20e0:	d022      	beq.n	2128 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
    20e2:	44da      	add	sl, fp
    20e4:	f10b 36ff 	add.w	r6, fp, #4294967295
    20e8:	f10d 0507 	add.w	r5, sp, #7
    20ec:	f10a 3aff 	add.w	sl, sl, #4294967295
    20f0:	e007      	b.n	2102 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    20f2:	f7ff fdd1 	bl	1c98 <Adafruit_SPIDevice::transfer(unsigned char*, unsigned int) [clone .part.0]>
  return data;
    20f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    20fa:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    20fe:	45b2      	cmp	sl, r6
    2100:	d012      	beq.n	2128 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0xb0>
  if (_spi) {
    2102:	6827      	ldr	r7, [r4, #0]
    2104:	2201      	movs	r2, #1
    2106:	4629      	mov	r1, r5
    2108:	4620      	mov	r0, r4
  uint8_t data = send;
    210a:	f88d 8007 	strb.w	r8, [sp, #7]
  if (_spi) {
    210e:	2f00      	cmp	r7, #0
    2110:	d0ef      	beq.n	20f2 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x7a>
    2112:	4613      	mov	r3, r2
    2114:	4638      	mov	r0, r7
    2116:	462a      	mov	r2, r5
    2118:	f000 f940 	bl	239c <SPIClass::transfer(void const*, void*, unsigned int)>
  return data;
    211c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    read_buffer[i] = transfer(sendvalue);
    2120:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (size_t i = 0; i < read_len; i++) {
    2124:	45b2      	cmp	sl, r6
    2126:	d1ec      	bne.n	2102 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x8a>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
    2128:	4620      	mov	r0, r4
    212a:	f7ff ff17 	bl	1f5c <Adafruit_SPIDevice::endTransactionWithDeassertingCS()>

  return true;
}
    212e:	2001      	movs	r0, #1
    2130:	b003      	add	sp, #12
    2132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    digitalWrite(_cs, value);
    2136:	b2c0      	uxtb	r0, r0
    2138:	2100      	movs	r1, #0
    213a:	f001 fbe3 	bl	3904 <digitalWrite>
    213e:	e7b1      	b.n	20a4 <Adafruit_SPIDevice::write_then_read(unsigned char const*, unsigned int, unsigned char*, unsigned int, unsigned char)+0x2c>

00002140 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2140:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    2144:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    2146:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    214a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    214c:	d101      	bne.n	2152 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    214e:	6883      	ldr	r3, [r0, #8]
    2150:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    2152:	f000 b981 	b.w	2458 <EventResponder::triggerEventNotImmediate()>
    2156:	bf00      	nop

00002158 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    2158:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    215a:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    215c:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    2160:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    2162:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    2164:	b1a3      	cbz	r3, 2190 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    2166:	b321      	cbz	r1, 21b2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    2168:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    216c:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    216e:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2170:	6f25      	ldr	r5, [r4, #112]	; 0x70
    2172:	07af      	lsls	r7, r5, #30
    2174:	d407      	bmi.n	2186 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    2176:	4615      	mov	r5, r2
				count_read--;
    2178:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    217a:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    217c:	b11a      	cbz	r2, 2186 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    217e:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    2182:	462a      	mov	r2, r5
    2184:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    2186:	6965      	ldr	r5, [r4, #20]
    2188:	07ed      	lsls	r5, r5, #31
    218a:	d5f1      	bpl.n	2170 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    218c:	2b00      	cmp	r3, #0
    218e:	d1ea      	bne.n	2166 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    2190:	b16e      	cbz	r6, 21ae <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    2192:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    2194:	6f19      	ldr	r1, [r3, #112]	; 0x70
    2196:	0789      	lsls	r1, r1, #30
    2198:	d4fa      	bmi.n	2190 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    219a:	4611      	mov	r1, r2
			count_read--;
    219c:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    21a0:	2a00      	cmp	r2, #0
    21a2:	d0f5      	beq.n	2190 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    21a4:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    21a8:	460a      	mov	r2, r1
	while (count_read) {
    21aa:	2e00      	cmp	r6, #0
    21ac:	d1f1      	bne.n	2192 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    21ae:	bcf0      	pop	{r4, r5, r6, r7}
    21b0:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    21b2:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    21b6:	e7d9      	b.n	216c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

000021b8 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    21b8:	4b32      	ldr	r3, [pc, #200]	; (2284 <_spi_dma_rxISR1()+0xcc>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    21ba:	4933      	ldr	r1, [pc, #204]	; (2288 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21bc:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    21be:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    21c2:	7920      	ldrb	r0, [r4, #4]
    21c4:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    21c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    21c8:	f895 c004 	ldrb.w	ip, [r5, #4]
    21cc:	f881 c01c 	strb.w	ip, [r1, #28]
    21d0:	7708      	strb	r0, [r1, #28]
    21d2:	b152      	cbz	r2, 21ea <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    21d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    21d8:	d323      	bcc.n	2222 <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    21da:	492c      	ldr	r1, [pc, #176]	; (228c <_spi_dma_rxISR1()+0xd4>)
    21dc:	4411      	add	r1, r2
		DMA_SERQ = channel;
    21de:	4a2a      	ldr	r2, [pc, #168]	; (2288 <_spi_dma_rxISR1()+0xd0>)
    21e0:	6419      	str	r1, [r3, #64]	; 0x40
    21e2:	76d0      	strb	r0, [r2, #27]
    21e4:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    21e8:	bd30      	pop	{r4, r5, pc}
    21ea:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    21ec:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    21ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    21f0:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    21f2:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    21f6:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    21f8:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    21fa:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    21fe:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2200:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    2202:	6804      	ldr	r4, [r0, #0]
    2204:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2206:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    220a:	4b21      	ldr	r3, [pc, #132]	; (2290 <_spi_dma_rxISR1()+0xd8>)
    220c:	429c      	cmp	r4, r3
    220e:	d126      	bne.n	225e <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    2210:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    2212:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    2214:	2b02      	cmp	r3, #2
		_data = data;
    2216:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2218:	d126      	bne.n	2268 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    221a:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    221c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2220:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    2222:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2224:	8be9      	ldrh	r1, [r5, #30]
    2226:	0409      	lsls	r1, r1, #16
    2228:	d422      	bmi.n	2270 <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    222a:	b292      	uxth	r2, r2
    222c:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    222e:	6821      	ldr	r1, [r4, #0]
    2230:	8bec      	ldrh	r4, [r5, #30]
    2232:	b2a4      	uxth	r4, r4
    2234:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2236:	8bcc      	ldrh	r4, [r1, #30]
    2238:	0424      	lsls	r4, r4, #16
    223a:	d505      	bpl.n	2248 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    223c:	8bcc      	ldrh	r4, [r1, #30]
    223e:	f3c2 0208 	ubfx	r2, r2, #0, #9
    2242:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2246:	4322      	orrs	r2, r4
    2248:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    224a:	8bca      	ldrh	r2, [r1, #30]
    224c:	b292      	uxth	r2, r2
    224e:	82ca      	strh	r2, [r1, #22]
    2250:	2100      	movs	r1, #0
    2252:	4a0d      	ldr	r2, [pc, #52]	; (2288 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2254:	6419      	str	r1, [r3, #64]	; 0x40
    2256:	76d0      	strb	r0, [r2, #27]
    2258:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    225c:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    225e:	4623      	mov	r3, r4
    2260:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2266:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    2268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    226c:	f000 b8f4 	b.w	2458 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2270:	8be9      	ldrh	r1, [r5, #30]
    2272:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    2276:	b292      	uxth	r2, r2
    2278:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    227c:	ea41 010e 	orr.w	r1, r1, lr
    2280:	83e9      	strh	r1, [r5, #30]
    2282:	e7d4      	b.n	222e <_spi_dma_rxISR1()+0x76>
    2284:	200020d8 	.word	0x200020d8
    2288:	400e8000 	.word	0x400e8000
    228c:	ffff8001 	.word	0xffff8001
    2290:	00002141 	.word	0x00002141

00002294 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    2294:	4b32      	ldr	r3, [pc, #200]	; (2360 <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    2296:	4933      	ldr	r1, [pc, #204]	; (2364 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2298:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    229a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    229e:	7920      	ldrb	r0, [r4, #4]
    22a0:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    22a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    22a4:	f895 c004 	ldrb.w	ip, [r5, #4]
    22a8:	f881 c01c 	strb.w	ip, [r1, #28]
    22ac:	7708      	strb	r0, [r1, #28]
    22ae:	b152      	cbz	r2, 22c6 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    22b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    22b4:	d323      	bcc.n	22fe <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    22b6:	492c      	ldr	r1, [pc, #176]	; (2368 <_spi_dma_rxISR0()+0xd4>)
    22b8:	4411      	add	r1, r2
		DMA_SERQ = channel;
    22ba:	4a2a      	ldr	r2, [pc, #168]	; (2364 <_spi_dma_rxISR0()+0xd0>)
    22bc:	6419      	str	r1, [r3, #64]	; 0x40
    22be:	76d0      	strb	r0, [r2, #27]
    22c0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22c4:	bd30      	pop	{r4, r5, pc}
    22c6:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    22c8:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    22ca:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    22cc:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    22ce:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    22d2:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    22d4:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    22d6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    22da:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    22dc:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    22de:	6804      	ldr	r4, [r0, #0]
    22e0:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    22e2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    22e6:	4b21      	ldr	r3, [pc, #132]	; (236c <_spi_dma_rxISR0()+0xd8>)
    22e8:	429c      	cmp	r4, r3
    22ea:	d126      	bne.n	233a <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    22ec:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    22ee:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    22f0:	2b02      	cmp	r3, #2
		_data = data;
    22f2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    22f4:	d126      	bne.n	2344 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    22f6:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    22f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    22fc:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    22fe:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2300:	8be9      	ldrh	r1, [r5, #30]
    2302:	0409      	lsls	r1, r1, #16
    2304:	d422      	bmi.n	234c <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    2306:	b292      	uxth	r2, r2
    2308:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    230a:	6821      	ldr	r1, [r4, #0]
    230c:	8bec      	ldrh	r4, [r5, #30]
    230e:	b2a4      	uxth	r4, r4
    2310:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    2312:	8bcc      	ldrh	r4, [r1, #30]
    2314:	0424      	lsls	r4, r4, #16
    2316:	d505      	bpl.n	2324 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2318:	8bcc      	ldrh	r4, [r1, #30]
    231a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    231e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    2322:	4322      	orrs	r2, r4
    2324:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    2326:	8bca      	ldrh	r2, [r1, #30]
    2328:	b292      	uxth	r2, r2
    232a:	82ca      	strh	r2, [r1, #22]
    232c:	2100      	movs	r1, #0
    232e:	4a0d      	ldr	r2, [pc, #52]	; (2364 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    2330:	6419      	str	r1, [r3, #64]	; 0x40
    2332:	76d0      	strb	r0, [r2, #27]
    2334:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2338:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    233a:	4623      	mov	r3, r4
    233c:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    233e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    2342:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    2348:	f000 b886 	b.w	2458 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    234c:	8be9      	ldrh	r1, [r5, #30]
    234e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    2352:	b292      	uxth	r2, r2
    2354:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    2358:	ea41 010e 	orr.w	r1, r1, lr
    235c:	83e9      	strh	r1, [r5, #30]
    235e:	e7d4      	b.n	230a <_spi_dma_rxISR0()+0x76>
    2360:	20002088 	.word	0x20002088
    2364:	400e8000 	.word	0x400e8000
    2368:	ffff8001 	.word	0xffff8001
    236c:	00002141 	.word	0x00002141

00002370 <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    2370:	2300      	movs	r3, #0
    2372:	e9c0 1200 	strd	r1, r2, [r0]
    2376:	e9c0 3302 	strd	r3, r3, [r0, #8]
    237a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    237e:	e9c0 3306 	strd	r3, r3, [r0, #24]
    2382:	e9c0 3308 	strd	r3, r3, [r0, #32]
    2386:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    238a:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    238e:	6383      	str	r3, [r0, #56]	; 0x38
    2390:	8783      	strh	r3, [r0, #60]	; 0x3c
    2392:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    2396:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    239a:	4770      	bx	lr

0000239c <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    239c:	b10b      	cbz	r3, 23a2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    239e:	f7ff bedb 	b.w	2158 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    23a2:	4770      	bx	lr

000023a4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    23a4:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    23a6:	4a08      	ldr	r2, [pc, #32]	; (23c8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    23a8:	4908      	ldr	r1, [pc, #32]	; (23cc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    23aa:	4809      	ldr	r0, [pc, #36]	; (23d0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    23ac:	f7ff ffe0 	bl	2370 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    23b0:	4a08      	ldr	r2, [pc, #32]	; (23d4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    23b2:	4909      	ldr	r1, [pc, #36]	; (23d8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    23b4:	4809      	ldr	r0, [pc, #36]	; (23dc <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    23b6:	f7ff ffdb 	bl	2370 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    23ba:	4a09      	ldr	r2, [pc, #36]	; (23e0 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    23bc:	4909      	ldr	r1, [pc, #36]	; (23e4 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    23be:	480a      	ldr	r0, [pc, #40]	; (23e8 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    23c0:	f7ff ffd6 	bl	2370 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    23c4:	bd08      	pop	{r3, pc}
    23c6:	bf00      	nop
    23c8:	200005cc 	.word	0x200005cc
    23cc:	403a0000 	.word	0x403a0000
    23d0:	20002088 	.word	0x20002088
    23d4:	2000055c 	.word	0x2000055c
    23d8:	4039c000 	.word	0x4039c000
    23dc:	200020d8 	.word	0x200020d8
    23e0:	200004ec 	.word	0x200004ec
    23e4:	40394000 	.word	0x40394000
    23e8:	20002128 	.word	0x20002128

000023ec <Adafruit_MCP4725::Adafruit_MCP4725()>:
/*! 
    @brief  Instantiates a new MCP4725 class
*/
/**************************************************************************/
Adafruit_MCP4725::Adafruit_MCP4725() {
}
    23ec:	4770      	bx	lr
    23ee:	bf00      	nop

000023f0 <Adafruit_MCP4725::begin(unsigned char)>:
/**************************************************************************/
/*! 
    @brief  Setups the HW
*/
/**************************************************************************/
void Adafruit_MCP4725::begin(uint8_t addr) {
    23f0:	4603      	mov	r3, r0
  _i2caddr = addr;
  Wire.begin();
    23f2:	4802      	ldr	r0, [pc, #8]	; (23fc <Adafruit_MCP4725::begin(unsigned char)+0xc>)
  _i2caddr = addr;
    23f4:	7019      	strb	r1, [r3, #0]
  Wire.begin();
    23f6:	f00a b96b 	b.w	c6d0 <___ZN7TwoWire5beginEv_veneer>
    23fa:	bf00      	nop
    23fc:	20002478 	.word	0x20002478

00002400 <Adafruit_MCP4725::setVoltage(unsigned short, bool)>:
                that the DAC will retain the current voltage output
                after power-down or reset.
*/
/**************************************************************************/
void Adafruit_MCP4725::setVoltage( uint16_t output, bool writeEEPROM )
{
    2400:	b510      	push	{r4, lr}
		transmitting = 1;
    2402:	f04f 0c01 	mov.w	ip, #1
		txBuffer[0] = (address << 1);
    2406:	7800      	ldrb	r0, [r0, #0]
    2408:	4b12      	ldr	r3, [pc, #72]	; (2454 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    240a:	460c      	mov	r4, r1
    240c:	fa00 f00c 	lsl.w	r0, r0, ip
		transmitting = 1;
    2410:	f883 c130 	strb.w	ip, [r3, #304]	; 0x130
		txBufferLength = 1;
    2414:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    2418:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
#ifdef TWBR
  uint8_t twbrback = TWBR;
  TWBR = ((F_CPU / 400000L) - 16) / 2; // Set I2C frequency to 400kHz
#endif
  Wire.beginTransmission(_i2caddr);
  if (writeEEPROM)
    241c:	b1a2      	cbz	r2, 2448 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x48>
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
	}
	size_t write(int n) {
		return write((uint8_t)n);
    241e:	2160      	movs	r1, #96	; 0x60
    2420:	4618      	mov	r0, r3
    2422:	f7fe fb97 	bl	b54 <TwoWire::write(unsigned char)>
    2426:	f3c4 1107 	ubfx	r1, r4, #4, #8
    242a:	480a      	ldr	r0, [pc, #40]	; (2454 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
    242c:	f7fe fb92 	bl	b54 <TwoWire::write(unsigned char)>
    2430:	4808      	ldr	r0, [pc, #32]	; (2454 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  else
  {
    Wire.write(MCP4726_CMD_WRITEDAC);
  }
  Wire.write(output / 16);                   // Upper data bits          (D11.D10.D9.D8.D7.D6.D5.D4)
  Wire.write((output % 16) << 4);            // Lower data bits          (D3.D2.D1.D0.x.x.x.x)
    2432:	0121      	lsls	r1, r4, #4
    2434:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    2438:	f7fe fb8c 	bl	b54 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    243c:	2101      	movs	r1, #1
    243e:	4805      	ldr	r0, [pc, #20]	; (2454 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x54>)
  Wire.endTransmission();
#ifdef TWBR
  TWBR = twbrback;
#endif
}
    2440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2444:	f7fe bc94 	b.w	d70 <TwoWire::endTransmission(unsigned char)>
		return write((uint8_t)n);
    2448:	2140      	movs	r1, #64	; 0x40
    244a:	4618      	mov	r0, r3
    244c:	f7fe fb82 	bl	b54 <TwoWire::write(unsigned char)>
    2450:	e7e9      	b.n	2426 <Adafruit_MCP4725::setVoltage(unsigned short, bool)+0x26>
    2452:	bf00      	nop
    2454:	20002478 	.word	0x20002478

00002458 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2458:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    245c:	b672      	cpsid	i
	if (_triggered == false) {
    245e:	7f43      	ldrb	r3, [r0, #29]
    2460:	b95b      	cbnz	r3, 247a <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
    2462:	7f01      	ldrb	r1, [r0, #28]
    2464:	2901      	cmp	r1, #1
{
    2466:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    2468:	d00b      	beq.n	2482 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
    246a:	2903      	cmp	r1, #3
    246c:	d013      	beq.n	2496 <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
    246e:	2301      	movs	r3, #1
    2470:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    2472:	b902      	cbnz	r2, 2476 <EventResponder::triggerEventNotImmediate()+0x1e>
    2474:	b662      	cpsie	i
}
    2476:	bc30      	pop	{r4, r5}
    2478:	4770      	bx	lr
    247a:	b90a      	cbnz	r2, 2480 <EventResponder::triggerEventNotImmediate()+0x28>
    247c:	b662      	cpsie	i
    247e:	4770      	bx	lr
    2480:	4770      	bx	lr
			if (firstYield == nullptr) {
    2482:	4c12      	ldr	r4, [pc, #72]	; (24cc <EventResponder::triggerEventNotImmediate()+0x74>)
    2484:	6821      	ldr	r1, [r4, #0]
    2486:	b1b1      	cbz	r1, 24b6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    2488:	4911      	ldr	r1, [pc, #68]	; (24d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    248a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    248c:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
    248e:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
    2490:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    2492:	6158      	str	r0, [r3, #20]
				lastYield = this;
    2494:	e7eb      	b.n	246e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    2496:	4d0f      	ldr	r5, [pc, #60]	; (24d4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    2498:	490f      	ldr	r1, [pc, #60]	; (24d8 <EventResponder::triggerEventNotImmediate()+0x80>)
    249a:	682c      	ldr	r4, [r5, #0]
    249c:	b18c      	cbz	r4, 24c2 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    249e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    24a0:	680b      	ldr	r3, [r1, #0]
    24a2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    24a4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    24a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    24aa:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    24ae:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    24b0:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    24b4:	e7db      	b.n	246e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    24b6:	4b06      	ldr	r3, [pc, #24]	; (24d0 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
    24b8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    24ba:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
    24bc:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
    24c0:	e7d5      	b.n	246e <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
    24c2:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
    24c6:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    24c8:	e7ed      	b.n	24a6 <EventResponder::triggerEventNotImmediate()+0x4e>
    24ca:	bf00      	nop
    24cc:	20002b90 	.word	0x20002b90
    24d0:	20002b9c 	.word	0x20002b9c
    24d4:	20002b98 	.word	0x20002b98
    24d8:	20002b94 	.word	0x20002b94

000024dc <EventResponder::runFromInterrupt()>:
{
    24dc:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    24de:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    24e2:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    24e4:	4c0c      	ldr	r4, [pc, #48]	; (2518 <EventResponder::runFromInterrupt()+0x3c>)
    24e6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    24e8:	b180      	cbz	r0, 250c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    24ea:	4e0c      	ldr	r6, [pc, #48]	; (251c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    24ec:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    24ee:	6943      	ldr	r3, [r0, #20]
    24f0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    24f2:	b173      	cbz	r3, 2512 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    24f4:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    24f6:	b902      	cbnz	r2, 24fa <EventResponder::runFromInterrupt()+0x1e>
    24f8:	b662      	cpsie	i
			(*(first->_function))(*first);
    24fa:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    24fc:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    24fe:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2500:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    2504:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    2506:	6820      	ldr	r0, [r4, #0]
		if (first) {
    2508:	2800      	cmp	r0, #0
    250a:	d1f0      	bne.n	24ee <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    250c:	b902      	cbnz	r2, 2510 <EventResponder::runFromInterrupt()+0x34>
    250e:	b662      	cpsie	i
}
    2510:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    2512:	6033      	str	r3, [r6, #0]
    2514:	e7ef      	b.n	24f6 <EventResponder::runFromInterrupt()+0x1a>
    2516:	bf00      	nop
    2518:	20002b98 	.word	0x20002b98
    251c:	20002b94 	.word	0x20002b94

00002520 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    2520:	f7ff bfdc 	b.w	24dc <EventResponder::runFromInterrupt()>

00002524 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    2524:	4904      	ldr	r1, [pc, #16]	; (2538 <systick_isr+0x14>)
	systick_millis_count++;
    2526:	4a05      	ldr	r2, [pc, #20]	; (253c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    2528:	6849      	ldr	r1, [r1, #4]
    252a:	4b05      	ldr	r3, [pc, #20]	; (2540 <systick_isr+0x1c>)
    252c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    252e:	6813      	ldr	r3, [r2, #0]
    2530:	3301      	adds	r3, #1
    2532:	6013      	str	r3, [r2, #0]
}
    2534:	4770      	bx	lr
    2536:	bf00      	nop
    2538:	e0001000 	.word	0xe0001000
    253c:	200039c4 	.word	0x200039c4
    2540:	200039c0 	.word	0x200039c0

00002544 <HardwareSerial::availableForWrite()>:

int HardwareSerial::availableForWrite(void)
{
	uint32_t head, tail;

	head = tx_buffer_head_;
    2544:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	tail = tx_buffer_tail_;
    2548:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
	head = tx_buffer_head_;
    254c:	b29b      	uxth	r3, r3
	tail = tx_buffer_tail_;
    254e:	b292      	uxth	r2, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    2550:	4293      	cmp	r3, r2
    2552:	d202      	bcs.n	255a <HardwareSerial::availableForWrite()+0x16>
	return tail - head - 1;
    2554:	3a01      	subs	r2, #1
    2556:	1ad0      	subs	r0, r2, r3
}
    2558:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    255a:	6b41      	ldr	r1, [r0, #52]	; 0x34
    255c:	3901      	subs	r1, #1
    255e:	440a      	add	r2, r1
    2560:	1ad0      	subs	r0, r2, r3
    2562:	4770      	bx	lr

00002564 <HardwareSerial::available()>:
int HardwareSerial::available(void)
{
	uint32_t head, tail;

	// WATER> 0 so IDLE involved may want to check if port has already has RX data to retrieve
	__disable_irq();
    2564:	b672      	cpsid	i
	head = rx_buffer_head_;
    2566:	f8b0 204a 	ldrh.w	r2, [r0, #74]	; 0x4a
	tail = rx_buffer_tail_;
    256a:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    256e:	b292      	uxth	r2, r2
	tail = rx_buffer_tail_;
    2570:	b29b      	uxth	r3, r3
	int avail;
	if (head >= tail) avail = head - tail;
    2572:	429a      	cmp	r2, r3
	else avail = rx_buffer_total_size_ + head - tail;	
    2574:	bf3c      	itt	cc
    2576:	6b81      	ldrcc	r1, [r0, #56]	; 0x38
    2578:	1852      	addcc	r2, r2, r1
    257a:	1ad3      	subs	r3, r2, r3
	avail += (port->WATER >> 24) & 0x7;
    257c:	6902      	ldr	r2, [r0, #16]
    257e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
	__enable_irq();
    2580:	b662      	cpsie	i
	avail += (port->WATER >> 24) & 0x7;
    2582:	f3c0 6002 	ubfx	r0, r0, #24, #3
	return avail;
}
    2586:	4418      	add	r0, r3
    2588:	4770      	bx	lr
    258a:	bf00      	nop

0000258c <HardwareSerial::peek()>:

int HardwareSerial::peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head_;
    258c:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2590:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2592:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    2596:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    2598:	b29b      	uxth	r3, r3
	if (head == tail) {
    259a:	4299      	cmp	r1, r3
    259c:	d010      	beq.n	25c0 <HardwareSerial::peek()+0x34>
			return c;
		}
		__enable_irq();

	} 
	if (++tail >= rx_buffer_total_size_) tail = 0;
    259e:	3301      	adds	r3, #1
    25a0:	6b90      	ldr	r0, [r2, #56]	; 0x38
	if (tail < rx_buffer_size_) {
    25a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    25a4:	4298      	cmp	r0, r3
    25a6:	bf98      	it	ls
    25a8:	2300      	movls	r3, #0
	if (tail < rx_buffer_size_) {
    25aa:	4299      	cmp	r1, r3
    25ac:	d903      	bls.n	25b6 <HardwareSerial::peek()+0x2a>
		return rx_buffer_[tail];
    25ae:	6a12      	ldr	r2, [r2, #32]
    25b0:	5cd0      	ldrb	r0, [r2, r3]
    25b2:	b2c0      	uxtb	r0, r0
    25b4:	4770      	bx	lr
	} else {
		return rx_buffer_storage_[tail-rx_buffer_size_];
    25b6:	1a5b      	subs	r3, r3, r1
    25b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    25ba:	5cd0      	ldrb	r0, [r2, r3]
    25bc:	b2c0      	uxtb	r0, r0
	}
}
    25be:	4770      	bx	lr
		__disable_irq();
    25c0:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    25c2:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    25c6:	b280      	uxth	r0, r0
		if (head == tail) {
    25c8:	4281      	cmp	r1, r0
    25ca:	d001      	beq.n	25d0 <HardwareSerial::peek()+0x44>
		__enable_irq();
    25cc:	b662      	cpsie	i
    25ce:	e7e6      	b.n	259e <HardwareSerial::peek()+0x12>
			if (port->WATER & 0x7000000) {
    25d0:	6913      	ldr	r3, [r2, #16]
    25d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    25d4:	f011 6fe0 	tst.w	r1, #117440512	; 0x7000000
    25d8:	d103      	bne.n	25e2 <HardwareSerial::peek()+0x56>
			int c = -1;	// assume nothing to return
    25da:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    25de:	b662      	cpsie	i
			return c;
    25e0:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    25e2:	69db      	ldr	r3, [r3, #28]
				rx_buffer_head_ = 1;
    25e4:	2001      	movs	r0, #1
				rx_buffer_tail_ = 0; 
    25e6:	f04f 0c00 	mov.w	ip, #0
				rx_buffer_[1] = c;
    25ea:	6a11      	ldr	r1, [r2, #32]
				rx_buffer_head_ = 1;
    25ec:	f8a2 004a 	strh.w	r0, [r2, #74]	; 0x4a
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    25f0:	f3c3 0009 	ubfx	r0, r3, #0, #10
				rx_buffer_[1] = c;
    25f4:	b2db      	uxtb	r3, r3
				rx_buffer_tail_ = 0; 
    25f6:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
				rx_buffer_[1] = c;
    25fa:	704b      	strb	r3, [r1, #1]
    25fc:	e7ef      	b.n	25de <HardwareSerial::peek()+0x52>
    25fe:	bf00      	nop

00002600 <HardwareSerial::read()>:
int HardwareSerial::read(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head_;
    2600:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
{
    2604:	4602      	mov	r2, r0
	tail = rx_buffer_tail_;
    2606:	f8b0 304c 	ldrh.w	r3, [r0, #76]	; 0x4c
	head = rx_buffer_head_;
    260a:	b289      	uxth	r1, r1
	tail = rx_buffer_tail_;
    260c:	b29b      	uxth	r3, r3
	if (head == tail) {
    260e:	4299      	cmp	r1, r3
    2610:	d026      	beq.n	2660 <HardwareSerial::read()+0x60>
			return c;
		}
		__enable_irq();

	}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2612:	3301      	adds	r3, #1
{
    2614:	b430      	push	{r4, r5}
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2616:	6b94      	ldr	r4, [r2, #56]	; 0x38
    2618:	429c      	cmp	r4, r3
    261a:	d916      	bls.n	264a <HardwareSerial::read()+0x4a>
	if (tail < rx_buffer_size_) {
    261c:	6b10      	ldr	r0, [r2, #48]	; 0x30
		c = rx_buffer_[tail];
	} else {
		c = rx_buffer_storage_[tail-rx_buffer_size_];
	}
	rx_buffer_tail_ = tail;
    261e:	fa1f fc83 	uxth.w	ip, r3
	if (tail < rx_buffer_size_) {
    2622:	4298      	cmp	r0, r3
    2624:	d917      	bls.n	2656 <HardwareSerial::read()+0x56>
		c = rx_buffer_[tail];
    2626:	6a10      	ldr	r0, [r2, #32]
    2628:	5cc0      	ldrb	r0, [r0, r3]
    262a:	b2c0      	uxtb	r0, r0
	if (rts_pin_baseReg_) {
    262c:	6d95      	ldr	r5, [r2, #88]	; 0x58
	rx_buffer_tail_ = tail;
    262e:	f8a2 c04c 	strh.w	ip, [r2, #76]	; 0x4c
	if (rts_pin_baseReg_) {
    2632:	b145      	cbz	r5, 2646 <HardwareSerial::read()+0x46>
		uint32_t avail;
		if (head >= tail) avail = head - tail;
    2634:	4299      	cmp	r1, r3
    2636:	d31c      	bcc.n	2672 <HardwareSerial::read()+0x72>
    2638:	1acb      	subs	r3, r1, r3
		else avail = rx_buffer_total_size_ + head - tail;

		if (avail <= rts_low_watermark_) rts_assert();
    263a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    263c:	4299      	cmp	r1, r3
    263e:	d302      	bcc.n	2646 <HardwareSerial::read()+0x46>
	DIRECT_WRITE_LOW(rts_pin_baseReg_, rts_pin_bitmask_);
    2640:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    2642:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	}
	return c;
}	
    2646:	bc30      	pop	{r4, r5}
    2648:	4770      	bx	lr
    264a:	f04f 0c00 	mov.w	ip, #0
	if (tail < rx_buffer_size_) {
    264e:	6b10      	ldr	r0, [r2, #48]	; 0x30
	if (++tail >= rx_buffer_total_size_) tail = 0;
    2650:	4663      	mov	r3, ip
	if (tail < rx_buffer_size_) {
    2652:	4298      	cmp	r0, r3
    2654:	d8e7      	bhi.n	2626 <HardwareSerial::read()+0x26>
		c = rx_buffer_storage_[tail-rx_buffer_size_];
    2656:	1a18      	subs	r0, r3, r0
    2658:	6a55      	ldr	r5, [r2, #36]	; 0x24
    265a:	5c28      	ldrb	r0, [r5, r0]
    265c:	b2c0      	uxtb	r0, r0
    265e:	e7e5      	b.n	262c <HardwareSerial::read()+0x2c>
    2660:	4608      	mov	r0, r1
		__disable_irq();
    2662:	b672      	cpsid	i
		head = rx_buffer_head_;  // reread head to make sure no ISR happened
    2664:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
    2668:	b289      	uxth	r1, r1
		if (head == tail) {
    266a:	4288      	cmp	r0, r1
    266c:	d004      	beq.n	2678 <HardwareSerial::read()+0x78>
		__enable_irq();
    266e:	b662      	cpsie	i
    2670:	e7cf      	b.n	2612 <HardwareSerial::read()+0x12>
		else avail = rx_buffer_total_size_ + head - tail;
    2672:	440c      	add	r4, r1
    2674:	1ae3      	subs	r3, r4, r3
    2676:	e7e0      	b.n	263a <HardwareSerial::read()+0x3a>
			if (port->WATER & 0x7000000) {
    2678:	6913      	ldr	r3, [r2, #16]
    267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    267c:	f012 6fe0 	tst.w	r2, #117440512	; 0x7000000
    2680:	d103      	bne.n	268a <HardwareSerial::read()+0x8a>
			c = -1;	// assume nothing to return
    2682:	f04f 30ff 	mov.w	r0, #4294967295
			__enable_irq();
    2686:	b662      	cpsie	i
}	
    2688:	4770      	bx	lr
				c = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    268a:	69d8      	ldr	r0, [r3, #28]
    268c:	f3c0 0009 	ubfx	r0, r0, #0, #10
    2690:	e7f9      	b.n	2686 <HardwareSerial::read()+0x86>
    2692:	bf00      	nop

00002694 <HardwareSerial::flush()>:

void HardwareSerial::flush(void)
{
	while (transmitting_) yield(); // wait
    2694:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    2698:	b143      	cbz	r3, 26ac <HardwareSerial::flush()+0x18>
{
    269a:	b510      	push	{r4, lr}
    269c:	4604      	mov	r4, r0
	while (transmitting_) yield(); // wait
    269e:	f002 fed9 	bl	5454 <yield>
    26a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    26a6:	2b00      	cmp	r3, #0
    26a8:	d1f9      	bne.n	269e <HardwareSerial::flush()+0xa>
}
    26aa:	bd10      	pop	{r4, pc}
    26ac:	4770      	bx	lr
    26ae:	bf00      	nop

000026b0 <nvic_execution_priority()>:
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    26b0:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    26b4:	b9b8      	cbnz	r0, 26e6 <nvic_execution_priority()+0x36>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    26b6:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    26ba:	b94b      	cbnz	r3, 26d0 <nvic_execution_priority()+0x20>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    26bc:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    26c0:	b93a      	cbnz	r2, 26d2 <nvic_execution_priority()+0x22>
	uint32_t priority=256;
    26c2:	f44f 7380 	mov.w	r3, #256	; 0x100
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    26c6:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    26ca:	b150      	cbz	r0, 26e2 <nvic_execution_priority()+0x32>
    26cc:	4298      	cmp	r0, r3
    26ce:	d208      	bcs.n	26e2 <nvic_execution_priority()+0x32>
}
    26d0:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    26d2:	2a0f      	cmp	r2, #15
    26d4:	d9f7      	bls.n	26c6 <nvic_execution_priority()+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    26d6:	4b05      	ldr	r3, [pc, #20]	; (26ec <nvic_execution_priority()+0x3c>)
    26d8:	5c9b      	ldrb	r3, [r3, r2]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    26da:	f3ef 8011 	mrs	r0, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    26de:	2800      	cmp	r0, #0
    26e0:	d1f4      	bne.n	26cc <nvic_execution_priority()+0x1c>
    26e2:	4618      	mov	r0, r3
	return priority;
    26e4:	4770      	bx	lr
	if (faultmask) return -1;
    26e6:	f04f 30ff 	mov.w	r0, #4294967295
    26ea:	e7f1      	b.n	26d0 <nvic_execution_priority()+0x20>
    26ec:	e000e3f0 	.word	0xe000e3f0

000026f0 <HardwareSerial::begin(unsigned long, unsigned short)>:
	float base = (float)UART_CLOCK / (float)baud;
    26f0:	ee07 1a90 	vmov	s15, r1
    26f4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 293c <HardwareSerial::begin(unsigned long, unsigned short)+0x24c>
	for (int osr=4; osr <= 32; osr++) {
    26f8:	2104      	movs	r1, #4
		int divint = (int)(div + 0.5f);
    26fa:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
	float base = (float)UART_CLOCK / (float)baud;
    26fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
	float besterr = 1e20;
    2702:	ed9f 6a8f 	vldr	s12, [pc, #572]	; 2940 <HardwareSerial::begin(unsigned long, unsigned short)+0x250>
    2706:	f641 7cff 	movw	ip, #8191	; 0x1fff
	float base = (float)UART_CLOCK / (float)baud;
    270a:	eec7 5a27 	vdiv.f32	s11, s14, s15
{
    270e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int bestosr = 4;
    2712:	468e      	mov	lr, r1
	int bestdiv = 1;
    2714:	2401      	movs	r4, #1
		float div = base / (float)osr;
    2716:	ee07 1a90 	vmov	s15, r1
    271a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    271e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
		int divint = (int)(div + 0.5f);
    2722:	ee77 7a05 	vadd.f32	s15, s14, s10
    2726:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    272a:	ee17 3a90 	vmov	r3, s15
    272e:	4563      	cmp	r3, ip
    2730:	bfa8      	it	ge
    2732:	4663      	movge	r3, ip
    2734:	2b01      	cmp	r3, #1
    2736:	bfb8      	it	lt
    2738:	2301      	movlt	r3, #1
		float err = ((float)divint - div) / div;
    273a:	ee07 3a90 	vmov	s15, r3
    273e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    2742:	ee76 6ac7 	vsub.f32	s13, s13, s14
    2746:	eec6 7a87 	vdiv.f32	s15, s13, s14
		if (err < 0.0f) err = -err;
    274a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2752:	bf48      	it	mi
    2754:	eef1 7a67 	vnegmi.f32	s15, s15
		if (err <= besterr) {
    2758:	eef4 7ac6 	vcmpe.f32	s15, s12
    275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2760:	d803      	bhi.n	276a <HardwareSerial::begin(unsigned long, unsigned short)+0x7a>
			besterr = err;
    2762:	eeb0 6a67 	vmov.f32	s12, s15
		if (err <= besterr) {
    2766:	468e      	mov	lr, r1
			bestdiv = divint;
    2768:	461c      	mov	r4, r3
	for (int osr=4; osr <= 32; osr++) {
    276a:	3101      	adds	r1, #1
    276c:	2921      	cmp	r1, #33	; 0x21
    276e:	d1d2      	bne.n	2716 <HardwareSerial::begin(unsigned long, unsigned short)+0x26>
	rx_buffer_head_ = 0;
    2770:	2100      	movs	r1, #0
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2772:	6943      	ldr	r3, [r0, #20]
    2774:	f402 7500 	and.w	r5, r2, #512	; 0x200
	rx_buffer_head_ = 0;
    2778:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    277c:	f8b3 c05e 	ldrh.w	ip, [r3, #94]	; 0x5e
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    2780:	428d      	cmp	r5, r1
	rx_buffer_tail_ = 0;
    2782:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2786:	f8b3 505c 	ldrh.w	r5, [r3, #92]	; 0x5c
	tx_buffer_head_ = 0;
    278a:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
	tx_buffer_tail_ = 0;
    278e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
	transmitting_ = 0;
    2792:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    2796:	6b81      	ldr	r1, [r0, #56]	; 0x38
	hardware->ccm_register |= hardware->ccm_value;
    2798:	691e      	ldr	r6, [r3, #16]
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
    279a:	eba1 0505 	sub.w	r5, r1, r5
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
    279e:	eba1 010c 	sub.w	r1, r1, ip
    27a2:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
	hardware->ccm_register |= hardware->ccm_value;
    27a6:	6831      	ldr	r1, [r6, #0]
    27a8:	695d      	ldr	r5, [r3, #20]
    27aa:	ea41 0105 	orr.w	r1, r1, r5
    27ae:	6031      	str	r1, [r6, #0]
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
    27b0:	bf14      	ite	ne
    27b2:	2101      	movne	r1, #1
    27b4:	2100      	moveq	r1, #0
    27b6:	7681      	strb	r1, [r0, #26]
	if (!half_duplex_mode_)  {
    27b8:	f040 8091 	bne.w	28de <HardwareSerial::begin(unsigned long, unsigned short)+0x1ee>
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    27bc:	7e05      	ldrb	r5, [r0, #24]
    27be:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2958 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>
    27c2:	eb03 1c05 	add.w	ip, r3, r5, lsl #4
    27c6:	4e5f      	ldr	r6, [pc, #380]	; (2944 <HardwareSerial::begin(unsigned long, unsigned short)+0x254>)
    27c8:	f89c 5018 	ldrb.w	r5, [ip, #24]
    27cc:	eb08 1505 	add.w	r5, r8, r5, lsl #4
    27d0:	68a9      	ldr	r1, [r5, #8]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    27d2:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    27d4:	600e      	str	r6, [r1, #0]
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
    27d6:	f8dc 601c 	ldr.w	r6, [ip, #28]
    27da:	602e      	str	r6, [r5, #0]
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
    27dc:	f8dc 5020 	ldr.w	r5, [ip, #32]
    27e0:	b115      	cbz	r5, 27e8 <HardwareSerial::begin(unsigned long, unsigned short)+0xf8>
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
    27e2:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24
    27e6:	602e      	str	r6, [r5, #0]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    27e8:	7e45      	ldrb	r5, [r0, #25]
    27ea:	27d9      	movs	r7, #217	; 0xd9
    27ec:	eb03 1505 	add.w	r5, r3, r5, lsl #4
    27f0:	f895 6038 	ldrb.w	r6, [r5, #56]	; 0x38
    27f4:	eb08 1106 	add.w	r1, r8, r6, lsl #4
    27f8:	688e      	ldr	r6, [r1, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    27fa:	6849      	ldr	r1, [r1, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    27fc:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    27fe:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    2800:	600d      	str	r5, [r1, #0]
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
    2802:	7e41      	ldrb	r1, [r0, #25]
    2804:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    2808:	6c0d      	ldr	r5, [r1, #64]	; 0x40
    280a:	b10d      	cbz	r5, 2810 <HardwareSerial::begin(unsigned long, unsigned short)+0x120>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
    280c:	6c49      	ldr	r1, [r1, #68]	; 0x44
    280e:	6029      	str	r1, [r5, #0]
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2810:	f10e 31ff 	add.w	r1, lr, #4294967295
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2814:	f1be 0f08 	cmp.w	lr, #8
	attachInterruptVector(hardware->irq, hardware->irq_handler);
    2818:	685d      	ldr	r5, [r3, #4]
	port->PINCFG = 0;
    281a:	f04f 0600 	mov.w	r6, #0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    281e:	bfcc      	ite	gt
    2820:	f04f 0e00 	movgt.w	lr, #0
    2824:	f04f 0e01 	movle.w	lr, #1
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    2828:	0609      	lsls	r1, r1, #24
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    282a:	ea44 444e 	orr.w	r4, r4, lr, lsl #17
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    282e:	f001 51f8 	and.w	r1, r1, #520093696	; 0x1f000000
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
    2832:	4321      	orrs	r1, r4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    2834:	785c      	ldrb	r4, [r3, #1]
    2836:	f104 0310 	add.w	r3, r4, #16
	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
    283a:	6904      	ldr	r4, [r0, #16]
    283c:	6121      	str	r1, [r4, #16]
    283e:	4942      	ldr	r1, [pc, #264]	; (2948 <HardwareSerial::begin(unsigned long, unsigned short)+0x258>)
	port->PINCFG = 0;
    2840:	60e6      	str	r6, [r4, #12]
    2842:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2846:	6943      	ldr	r3, [r0, #20]
	NVIC_ENABLE_IRQ(hardware->irq);
    2848:	f04f 0c01 	mov.w	ip, #1
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    284c:	493f      	ldr	r1, [pc, #252]	; (294c <HardwareSerial::begin(unsigned long, unsigned short)+0x25c>)
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    284e:	f002 0503 	and.w	r5, r2, #3
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
    2852:	785c      	ldrb	r4, [r3, #1]
    2854:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
    2858:	5463      	strb	r3, [r4, r1]
	NVIC_ENABLE_IRQ(hardware->irq);
    285a:	6944      	ldr	r4, [r0, #20]
    285c:	4b3c      	ldr	r3, [pc, #240]	; (2950 <HardwareSerial::begin(unsigned long, unsigned short)+0x260>)
    285e:	7861      	ldrb	r1, [r4, #1]
    2860:	eb03 1351 	add.w	r3, r3, r1, lsr #5
    2864:	f001 011f 	and.w	r1, r1, #31
    2868:	009b      	lsls	r3, r3, #2
    286a:	fa0c f101 	lsl.w	r1, ip, r1
    286e:	6019      	str	r1, [r3, #0]
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
    2870:	f04f 1102 	mov.w	r1, #131074	; 0x20002
    2874:	6903      	ldr	r3, [r0, #16]
    2876:	62d9      	str	r1, [r3, #44]	; 0x2c
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
    2878:	6a99      	ldr	r1, [r3, #40]	; 0x28
    287a:	f041 0188 	orr.w	r1, r1, #136	; 0x88
    287e:	6299      	str	r1, [r3, #40]	; 0x28
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    2880:	0751      	lsls	r1, r2, #29
    2882:	d429      	bmi.n	28d8 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e8>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
    2884:	f445 1170 	orr.w	r1, r5, #3932160	; 0x3c0000
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2888:	f002 050f 	and.w	r5, r2, #15
    288c:	2d04      	cmp	r5, #4
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    288e:	7e85      	ldrb	r5, [r0, #26]
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
    2890:	bf08      	it	eq
    2892:	f041 4180 	orreq.w	r1, r1, #1073741824	; 0x40000000
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
    2896:	0697      	lsls	r7, r2, #26
    2898:	bf48      	it	mi
    289a:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
    289e:	b10d      	cbz	r5, 28a4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1b4>
    28a0:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    28a4:	0716      	lsls	r6, r2, #28
	port->CTRL = ctrl;
    28a6:	6199      	str	r1, [r3, #24]
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
    28a8:	d503      	bpl.n	28b2 <HardwareSerial::begin(unsigned long, unsigned short)+0x1c2>
    28aa:	6919      	ldr	r1, [r3, #16]
    28ac:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    28b0:	6119      	str	r1, [r3, #16]
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    28b2:	6959      	ldr	r1, [r3, #20]
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    28b4:	06d5      	lsls	r5, r2, #27
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
    28b6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
    28ba:	bf48      	it	mi
    28bc:	f041 5180 	orrmi.w	r1, r1, #268435456	; 0x10000000
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    28c0:	05d2      	lsls	r2, r2, #23
	port->STAT = c;
    28c2:	6159      	str	r1, [r3, #20]
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
    28c4:	d503      	bpl.n	28ce <HardwareSerial::begin(unsigned long, unsigned short)+0x1de>
    28c6:	691a      	ldr	r2, [r3, #16]
    28c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    28cc:	611a      	str	r2, [r3, #16]
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
    28ce:	68e3      	ldr	r3, [r4, #12]
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	b1a3      	cbz	r3, 28fe <HardwareSerial::begin(unsigned long, unsigned short)+0x20e>
};
    28d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
    28d8:	491e      	ldr	r1, [pc, #120]	; (2954 <HardwareSerial::begin(unsigned long, unsigned short)+0x264>)
    28da:	4329      	orrs	r1, r5
    28dc:	e7d4      	b.n	2888 <HardwareSerial::begin(unsigned long, unsigned short)+0x198>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    28de:	7e41      	ldrb	r1, [r0, #25]
    28e0:	f24f 07d9 	movw	r7, #61657	; 0xf0d9
    28e4:	4d1c      	ldr	r5, [pc, #112]	; (2958 <HardwareSerial::begin(unsigned long, unsigned short)+0x268>)
    28e6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    28ea:	f891 6038 	ldrb.w	r6, [r1, #56]	; 0x38
    28ee:	eb05 1506 	add.w	r5, r5, r6, lsl #4
    28f2:	68ae      	ldr	r6, [r5, #8]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    28f4:	686d      	ldr	r5, [r5, #4]
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
    28f6:	6037      	str	r7, [r6, #0]
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
    28f8:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    28fa:	6029      	str	r1, [r5, #0]
    28fc:	e781      	b.n	2802 <HardwareSerial::begin(unsigned long, unsigned short)+0x112>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    28fe:	4e17      	ldr	r6, [pc, #92]	; (295c <HardwareSerial::begin(unsigned long, unsigned short)+0x26c>)
    2900:	7834      	ldrb	r4, [r6, #0]
    2902:	b1bc      	cbz	r4, 2934 <HardwareSerial::begin(unsigned long, unsigned short)+0x244>
    2904:	1e61      	subs	r1, r4, #1
    2906:	4d16      	ldr	r5, [pc, #88]	; (2960 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2908:	b2c9      	uxtb	r1, r1
    290a:	1f2b      	subs	r3, r5, #4
    290c:	eb05 0181 	add.w	r1, r5, r1, lsl #2
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    2910:	f853 2f04 	ldr.w	r2, [r3, #4]!
    2914:	4290      	cmp	r0, r2
    2916:	d0dd      	beq.n	28d4 <HardwareSerial::begin(unsigned long, unsigned short)+0x1e4>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2918:	4299      	cmp	r1, r3
    291a:	d1f9      	bne.n	2910 <HardwareSerial::begin(unsigned long, unsigned short)+0x220>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    291c:	1c63      	adds	r3, r4, #1
    291e:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2920:	4a10      	ldr	r2, [pc, #64]	; (2964 <HardwareSerial::begin(unsigned long, unsigned short)+0x274>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2922:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    2924:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    2926:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    292a:	f043 0302 	orr.w	r3, r3, #2
    292e:	7013      	strb	r3, [r2, #0]
};
    2930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    2934:	2301      	movs	r3, #1
    2936:	4d0a      	ldr	r5, [pc, #40]	; (2960 <HardwareSerial::begin(unsigned long, unsigned short)+0x270>)
    2938:	e7f2      	b.n	2920 <HardwareSerial::begin(unsigned long, unsigned short)+0x230>
    293a:	bf00      	nop
    293c:	4bb71b00 	.word	0x4bb71b00
    2940:	60ad78ec 	.word	0x60ad78ec
    2944:	0001f038 	.word	0x0001f038
    2948:	20001c00 	.word	0x20001c00
    294c:	e000e400 	.word	0xe000e400
    2950:	38003840 	.word	0x38003840
    2954:	003c0010 	.word	0x003c0010
    2958:	20000acc 	.word	0x20000acc
    295c:	200039e7 	.word	0x200039e7
    2960:	20002ba0 	.word	0x20002ba0
    2964:	20001be4 	.word	0x20001be4

00002968 <HardwareSerial::write9bit(unsigned long)>:
{
    2968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    296a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    296c:	4604      	mov	r4, r0
    296e:	460e      	mov	r6, r1
	if (transmit_pin_baseReg_) DIRECT_WRITE_HIGH(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2970:	b113      	cbz	r3, 2978 <HardwareSerial::write9bit(unsigned long)+0x10>
    2972:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	if(half_duplex_mode_) {		
    2978:	7ea3      	ldrb	r3, [r4, #26]
    297a:	b133      	cbz	r3, 298a <HardwareSerial::write9bit(unsigned long)+0x22>
		__disable_irq();
    297c:	b672      	cpsid	i
	    port->CTRL |= LPUART_CTRL_TXDIR;
    297e:	6922      	ldr	r2, [r4, #16]
    2980:	6993      	ldr	r3, [r2, #24]
    2982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2986:	6193      	str	r3, [r2, #24]
		__enable_irq();
    2988:	b662      	cpsie	i
	head = tx_buffer_head_;
    298a:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
	if (++head >= tx_buffer_total_size_) head = 0;
    298e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	head = tx_buffer_head_;
    2990:	b2ad      	uxth	r5, r5
	if (++head >= tx_buffer_total_size_) head = 0;
    2992:	3501      	adds	r5, #1
    2994:	42ab      	cmp	r3, r5
    2996:	d84c      	bhi.n	2a32 <HardwareSerial::write9bit(unsigned long)+0xca>
    2998:	2700      	movs	r7, #0
    299a:	463d      	mov	r5, r7
	while (tx_buffer_tail_ == head) {
    299c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    29a0:	b29b      	uxth	r3, r3
    29a2:	429d      	cmp	r5, r3
    29a4:	d01a      	beq.n	29dc <HardwareSerial::write9bit(unsigned long)+0x74>
    29a6:	e029      	b.n	29fc <HardwareSerial::write9bit(unsigned long)+0x94>
			if ((port->STAT & LPUART_STAT_TDRE)) {
    29a8:	6921      	ldr	r1, [r4, #16]
    29aa:	694b      	ldr	r3, [r1, #20]
    29ac:	021b      	lsls	r3, r3, #8
    29ae:	d510      	bpl.n	29d2 <HardwareSerial::write9bit(unsigned long)+0x6a>
				uint32_t tail = tx_buffer_tail_;
    29b0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
				if (++tail >= tx_buffer_total_size_) tail = 0;
    29b4:	6b62      	ldr	r2, [r4, #52]	; 0x34
				uint32_t tail = tx_buffer_tail_;
    29b6:	b29b      	uxth	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    29b8:	3301      	adds	r3, #1
    29ba:	429a      	cmp	r2, r3
    29bc:	d936      	bls.n	2a2c <HardwareSerial::write9bit(unsigned long)+0xc4>
				tx_buffer_tail_ = tail;
    29be:	b29a      	uxth	r2, r3
				if (tail < tx_buffer_size_) {
    29c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    29c2:	4298      	cmp	r0, r3
    29c4:	d92d      	bls.n	2a22 <HardwareSerial::write9bit(unsigned long)+0xba>
					n = tx_buffer_[tail];
    29c6:	69e0      	ldr	r0, [r4, #28]
    29c8:	5cc3      	ldrb	r3, [r0, r3]
    29ca:	b2db      	uxtb	r3, r3
				port->DATA  = n;
    29cc:	61cb      	str	r3, [r1, #28]
				tx_buffer_tail_ = tail;
    29ce:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
	while (tx_buffer_tail_ == head) {
    29d2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    29d6:	b29b      	uxth	r3, r3
    29d8:	42ab      	cmp	r3, r5
    29da:	d10f      	bne.n	29fc <HardwareSerial::write9bit(unsigned long)+0x94>
		int priority = nvic_execution_priority();
    29dc:	f7ff fe68 	bl	26b0 <nvic_execution_priority()>
		if (priority <= hardware->irq_priority) {
    29e0:	6963      	ldr	r3, [r4, #20]
    29e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
    29e6:	4283      	cmp	r3, r0
    29e8:	dade      	bge.n	29a8 <HardwareSerial::write9bit(unsigned long)+0x40>
		} else if (priority >= 256) 
    29ea:	28ff      	cmp	r0, #255	; 0xff
    29ec:	ddf1      	ble.n	29d2 <HardwareSerial::write9bit(unsigned long)+0x6a>
			yield(); // wait
    29ee:	f002 fd31 	bl	5454 <yield>
	while (tx_buffer_tail_ == head) {
    29f2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    29f6:	b29b      	uxth	r3, r3
    29f8:	42ab      	cmp	r3, r5
    29fa:	d0ef      	beq.n	29dc <HardwareSerial::write9bit(unsigned long)+0x74>
	if (head < tx_buffer_size_) {
    29fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    29fe:	42ab      	cmp	r3, r5
    2a00:	d919      	bls.n	2a36 <HardwareSerial::write9bit(unsigned long)+0xce>
		tx_buffer_[head] = c;
    2a02:	69e3      	ldr	r3, [r4, #28]
    2a04:	b2f6      	uxtb	r6, r6
    2a06:	555e      	strb	r6, [r3, r5]
	__disable_irq();
    2a08:	b672      	cpsid	i
	transmitting_ = 1;
    2a0a:	2001      	movs	r0, #1
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2a0c:	6922      	ldr	r2, [r4, #16]
	transmitting_ = 1;
    2a0e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	tx_buffer_head_ = head;
    2a12:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
	port->CTRL |= LPUART_CTRL_TIE; // (may need to handle this issue)BITBAND_SET_BIT(LPUART0_CTRL, TIE_BIT);
    2a16:	6993      	ldr	r3, [r2, #24]
    2a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    2a1c:	6193      	str	r3, [r2, #24]
	__enable_irq();
    2a1e:	b662      	cpsie	i
}
    2a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					n = tx_buffer_storage_[tail-tx_buffer_size_];
    2a22:	1a1b      	subs	r3, r3, r0
    2a24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2a26:	5cc3      	ldrb	r3, [r0, r3]
    2a28:	b2db      	uxtb	r3, r3
    2a2a:	e7cf      	b.n	29cc <HardwareSerial::write9bit(unsigned long)+0x64>
    2a2c:	2200      	movs	r2, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    2a2e:	4613      	mov	r3, r2
    2a30:	e7c6      	b.n	29c0 <HardwareSerial::write9bit(unsigned long)+0x58>
	tx_buffer_head_ = head;
    2a32:	b2af      	uxth	r7, r5
    2a34:	e7b2      	b.n	299c <HardwareSerial::write9bit(unsigned long)+0x34>
		tx_buffer_storage_[head - tx_buffer_size_] = c;
    2a36:	1aed      	subs	r5, r5, r3
    2a38:	b2f6      	uxtb	r6, r6
    2a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a3c:	555e      	strb	r6, [r3, r5]
    2a3e:	e7e3      	b.n	2a08 <HardwareSerial::write9bit(unsigned long)+0xa0>

00002a40 <HardwareSerial::write(unsigned char)>:
	return write9bit(c);
    2a40:	f7ff bf92 	b.w	2968 <HardwareSerial::write9bit(unsigned long)>

00002a44 <HardwareSerial::IRQHandler()>:
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2a44:	6902      	ldr	r2, [r0, #16]
    2a46:	6953      	ldr	r3, [r2, #20]
    2a48:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
{
    2a4c:	b570      	push	{r4, r5, r6, lr}
	if (port->STAT & (LPUART_STAT_RDRF | LPUART_STAT_IDLE)) {
    2a4e:	4615      	mov	r5, r2
    2a50:	d047      	beq.n	2ae2 <HardwareSerial::IRQHandler()+0x9e>
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2a52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		if (avail) {
    2a54:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
		uint8_t avail = (port->WATER >> 24) & 0x7;
    2a58:	f3c3 6e02 	ubfx	lr, r3, #24, #3
		if (avail) {
    2a5c:	d03e      	beq.n	2adc <HardwareSerial::IRQHandler()+0x98>
			head = rx_buffer_head_;
    2a5e:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
			tail = rx_buffer_tail_;
    2a62:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
			head = rx_buffer_head_;
    2a66:	b2a4      	uxth	r4, r4
			tail = rx_buffer_tail_;
    2a68:	b2ad      	uxth	r5, r5
    2a6a:	e008      	b.n	2a7e <HardwareSerial::IRQHandler()+0x3a>
						rx_buffer_[head] = n;
    2a6c:	6a02      	ldr	r2, [r0, #32]
    2a6e:	f802 c003 	strb.w	ip, [r2, r3]
    2a72:	6902      	ldr	r2, [r0, #16]
			} while (--avail > 0) ;
    2a74:	f10e 33ff 	add.w	r3, lr, #4294967295
    2a78:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2a7c:	d01e      	beq.n	2abc <HardwareSerial::IRQHandler()+0x78>
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2a7e:	69d1      	ldr	r1, [r2, #28]
				newhead = head + 1;
    2a80:	1c63      	adds	r3, r4, #1
				if (newhead != rx_buffer_tail_) {
    2a82:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2a86:	6b86      	ldr	r6, [r0, #56]	; 0x38
				n = port->DATA & 0x3ff;		// Use only up to 10 bits of data
    2a88:	f3c1 0109 	ubfx	r1, r1, #0, #10
				if (newhead != rx_buffer_tail_) {
    2a8c:	fa1f fc8c 	uxth.w	ip, ip
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    2a90:	429e      	cmp	r6, r3
    2a92:	bf98      	it	ls
    2a94:	2300      	movls	r3, #0
				if (newhead != rx_buffer_tail_) {
    2a96:	459c      	cmp	ip, r3
    2a98:	d0ec      	beq.n	2a74 <HardwareSerial::IRQHandler()+0x30>
					if (newhead < rx_buffer_size_) {
    2a9a:	6b02      	ldr	r2, [r0, #48]	; 0x30
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2a9c:	fa5f fc81 	uxtb.w	ip, r1
    2aa0:	461c      	mov	r4, r3
					if (newhead < rx_buffer_size_) {
    2aa2:	429a      	cmp	r2, r3
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2aa4:	eba3 0602 	sub.w	r6, r3, r2
					if (newhead < rx_buffer_size_) {
    2aa8:	d8e0      	bhi.n	2a6c <HardwareSerial::IRQHandler()+0x28>
						rx_buffer_storage_[head-rx_buffer_size_] = n;
    2aaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2aac:	f803 c006 	strb.w	ip, [r3, r6]
			} while (--avail > 0) ;
    2ab0:	f10e 33ff 	add.w	r3, lr, #4294967295
    2ab4:	6902      	ldr	r2, [r0, #16]
    2ab6:	f013 0eff 	ands.w	lr, r3, #255	; 0xff
    2aba:	d1e0      	bne.n	2a7e <HardwareSerial::IRQHandler()+0x3a>
			rx_buffer_head_ = head;
    2abc:	b2a3      	uxth	r3, r4
    2abe:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
			if (rts_pin_baseReg_) {
    2ac2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d05a      	beq.n	2b7e <HardwareSerial::IRQHandler()+0x13a>
				if (head >= tail) avail = head - tail;
    2ac8:	42ac      	cmp	r4, r5
    2aca:	d35d      	bcc.n	2b88 <HardwareSerial::IRQHandler()+0x144>
    2acc:	1b64      	subs	r4, r4, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    2ace:	6c01      	ldr	r1, [r0, #64]	; 0x40
    2ad0:	42a1      	cmp	r1, r4
    2ad2:	d854      	bhi.n	2b7e <HardwareSerial::IRQHandler()+0x13a>
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2ad4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
		if (port->STAT & LPUART_STAT_IDLE) {
    2ad6:	4615      	mov	r5, r2
	DIRECT_WRITE_HIGH(rts_pin_baseReg_, rts_pin_bitmask_);
    2ad8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
		if (port->STAT & LPUART_STAT_IDLE) {
    2adc:	6953      	ldr	r3, [r2, #20]
    2ade:	02dc      	lsls	r4, r3, #11
    2ae0:	d448      	bmi.n	2b74 <HardwareSerial::IRQHandler()+0x130>
	ctrl = port->CTRL;
    2ae2:	6996      	ldr	r6, [r2, #24]
	if ((ctrl & LPUART_CTRL_TIE) && (port->STAT & LPUART_STAT_TDRE))
    2ae4:	0231      	lsls	r1, r6, #8
    2ae6:	d529      	bpl.n	2b3c <HardwareSerial::IRQHandler()+0xf8>
    2ae8:	6953      	ldr	r3, [r2, #20]
    2aea:	021b      	lsls	r3, r3, #8
    2aec:	d526      	bpl.n	2b3c <HardwareSerial::IRQHandler()+0xf8>
		head = tx_buffer_head_;
    2aee:	f8b0 c046 	ldrh.w	ip, [r0, #70]	; 0x46
		tail = tx_buffer_tail_;
    2af2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
		head = tx_buffer_head_;
    2af6:	fa1f fc8c 	uxth.w	ip, ip
		tail = tx_buffer_tail_;
    2afa:	b29b      	uxth	r3, r3
    2afc:	e006      	b.n	2b0c <HardwareSerial::IRQHandler()+0xc8>
				n = tx_buffer_[tail];
    2afe:	69c1      	ldr	r1, [r0, #28]
    2b00:	5cc9      	ldrb	r1, [r1, r3]
    2b02:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    2b04:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2b06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2b08:	054c      	lsls	r4, r1, #21
    2b0a:	d412      	bmi.n	2b32 <HardwareSerial::IRQHandler()+0xee>
			if (head == tail) break;
    2b0c:	4563      	cmp	r3, ip
    2b0e:	d03f      	beq.n	2b90 <HardwareSerial::IRQHandler()+0x14c>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    2b10:	6b44      	ldr	r4, [r0, #52]	; 0x34
    2b12:	3301      	adds	r3, #1
			if (tail < tx_buffer_size_) {
    2b14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			if (++tail >= tx_buffer_total_size_) tail = 0;
    2b16:	429c      	cmp	r4, r3
    2b18:	bf98      	it	ls
    2b1a:	2300      	movls	r3, #0
			if (tail < tx_buffer_size_) {
    2b1c:	4299      	cmp	r1, r3
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    2b1e:	eba3 0401 	sub.w	r4, r3, r1
			if (tail < tx_buffer_size_) {
    2b22:	d8ec      	bhi.n	2afe <HardwareSerial::IRQHandler()+0xba>
				n = tx_buffer_storage_[tail-tx_buffer_size_];
    2b24:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2b26:	5d09      	ldrb	r1, [r1, r4]
    2b28:	b2c9      	uxtb	r1, r1
			port->DATA = n;
    2b2a:	61d1      	str	r1, [r2, #28]
		} while (((port->WATER >> 8) & 0x7) < 4); 	// need to computer properly
    2b2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2b2e:	054c      	lsls	r4, r1, #21
    2b30:	d5ec      	bpl.n	2b0c <HardwareSerial::IRQHandler()+0xc8>
		tx_buffer_tail_ = tail;
    2b32:	b299      	uxth	r1, r3
		if (head == tail) {
    2b34:	4563      	cmp	r3, ip
		tx_buffer_tail_ = tail;
    2b36:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
		if (head == tail) {
    2b3a:	d02c      	beq.n	2b96 <HardwareSerial::IRQHandler()+0x152>
	if ((ctrl & LPUART_CTRL_TCIE) && (port->STAT & LPUART_STAT_TC))
    2b3c:	0271      	lsls	r1, r6, #9
    2b3e:	d518      	bpl.n	2b72 <HardwareSerial::IRQHandler()+0x12e>
    2b40:	6953      	ldr	r3, [r2, #20]
    2b42:	025b      	lsls	r3, r3, #9
    2b44:	d515      	bpl.n	2b72 <HardwareSerial::IRQHandler()+0x12e>
		transmitting_ = 0;
    2b46:	2200      	movs	r2, #0
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2b48:	6d03      	ldr	r3, [r0, #80]	; 0x50
		transmitting_ = 0;
    2b4a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
		if (transmit_pin_baseReg_) DIRECT_WRITE_LOW(transmit_pin_baseReg_, transmit_pin_bitmask_);
    2b4e:	b113      	cbz	r3, 2b56 <HardwareSerial::IRQHandler()+0x112>
    2b50:	6d42      	ldr	r2, [r0, #84]	; 0x54
    2b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		if(half_duplex_mode_) {		
    2b56:	7e83      	ldrb	r3, [r0, #26]
    2b58:	b13b      	cbz	r3, 2b6a <HardwareSerial::IRQHandler()+0x126>
			__disable_irq();
    2b5a:	b672      	cpsid	i
		    port->CTRL &= ~LPUART_CTRL_TXDIR;
    2b5c:	6902      	ldr	r2, [r0, #16]
    2b5e:	6993      	ldr	r3, [r2, #24]
    2b60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    2b64:	6193      	str	r3, [r2, #24]
			__enable_irq();
    2b66:	b662      	cpsie	i
		port->CTRL &= ~LPUART_CTRL_TCIE;
    2b68:	6905      	ldr	r5, [r0, #16]
    2b6a:	69ab      	ldr	r3, [r5, #24]
    2b6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
    2b70:	61ab      	str	r3, [r5, #24]
}
    2b72:	bd70      	pop	{r4, r5, r6, pc}
			port->STAT |= LPUART_STAT_IDLE;	// writing a 1 to idle should clear it. 
    2b74:	6953      	ldr	r3, [r2, #20]
    2b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    2b7a:	6153      	str	r3, [r2, #20]
    2b7c:	e7b1      	b.n	2ae2 <HardwareSerial::IRQHandler()+0x9e>
		if (port->STAT & LPUART_STAT_IDLE) {
    2b7e:	6953      	ldr	r3, [r2, #20]
    2b80:	4615      	mov	r5, r2
    2b82:	02dc      	lsls	r4, r3, #11
    2b84:	d5ad      	bpl.n	2ae2 <HardwareSerial::IRQHandler()+0x9e>
    2b86:	e7f5      	b.n	2b74 <HardwareSerial::IRQHandler()+0x130>
				else avail = rx_buffer_total_size_ + head - tail;
    2b88:	6b81      	ldr	r1, [r0, #56]	; 0x38
    2b8a:	1b49      	subs	r1, r1, r5
    2b8c:	440c      	add	r4, r1
    2b8e:	e79e      	b.n	2ace <HardwareSerial::IRQHandler()+0x8a>
		tx_buffer_tail_ = tail;
    2b90:	b29b      	uxth	r3, r3
    2b92:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
			port->CTRL &= ~LPUART_CTRL_TIE; 
    2b96:	6993      	ldr	r3, [r2, #24]
    2b98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b9c:	6193      	str	r3, [r2, #24]
  			port->CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
    2b9e:	6993      	ldr	r3, [r2, #24]
    2ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    2ba4:	6193      	str	r3, [r2, #24]
    2ba6:	e7c9      	b.n	2b3c <HardwareSerial::IRQHandler()+0xf8>

00002ba8 <IRQHandler_Serial1>:
	Serial1.IRQHandler();
    2ba8:	4801      	ldr	r0, [pc, #4]	; (2bb0 <IRQHandler_Serial1+0x8>)
    2baa:	f7ff bf4b 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2bae:	bf00      	nop
    2bb0:	20002178 	.word	0x20002178

00002bb4 <_GLOBAL__sub_I_IRQHandler_Serial1>:
{
	serial_phex(n >> 24);
	serial_phex(n >> 16);
	serial_phex(n >> 8);
	serial_phex(n);
}
    2bb4:	b410      	push	{r4}
    2bb6:	4b16      	ldr	r3, [pc, #88]	; (2c10 <_GLOBAL__sub_I_IRQHandler_Serial1+0x5c>)
    2bb8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2bbc:	4815      	ldr	r0, [pc, #84]	; (2c14 <_GLOBAL__sub_I_IRQHandler_Serial1+0x60>)
    2bbe:	2200      	movs	r2, #0
    2bc0:	609c      	str	r4, [r3, #8]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2bc2:	2140      	movs	r1, #64	; 0x40
		port(myport), hardware(myhardware),
    2bc4:	4c14      	ldr	r4, [pc, #80]	; (2c18 <_GLOBAL__sub_I_IRQHandler_Serial1+0x64>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2bc6:	6018      	str	r0, [r3, #0]
		port(myport), hardware(myhardware),
    2bc8:	4814      	ldr	r0, [pc, #80]	; (2c1c <_GLOBAL__sub_I_IRQHandler_Serial1+0x68>)
    2bca:	611c      	str	r4, [r3, #16]
    2bcc:	6158      	str	r0, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2bce:	4c14      	ldr	r4, [pc, #80]	; (2c20 <_GLOBAL__sub_I_IRQHandler_Serial1+0x6c>)
    2bd0:	4814      	ldr	r0, [pc, #80]	; (2c24 <_GLOBAL__sub_I_IRQHandler_Serial1+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2bd6:	731a      	strb	r2, [r3, #12]
    2bd8:	831a      	strh	r2, [r3, #24]
    2bda:	769a      	strb	r2, [r3, #26]
    2bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2be0:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2be6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2bea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2bee:	605a      	str	r2, [r3, #4]
    2bf0:	625a      	str	r2, [r3, #36]	; 0x24
    2bf2:	629a      	str	r2, [r3, #40]	; 0x28
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2bf4:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2bf6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2bfa:	e9c3 110b 	strd	r1, r1, [r3, #44]	; 0x2c
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2bfe:	e9c3 110d 	strd	r1, r1, [r3, #52]	; 0x34
    2c02:	e9c3 220f 	strd	r2, r2, [r3, #60]	; 0x3c
    2c06:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2c0a:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2c0e:	4770      	bx	lr
    2c10:	20002178 	.word	0x20002178
    2c14:	20000644 	.word	0x20000644
    2c18:	40198000 	.word	0x40198000
    2c1c:	20000488 	.word	0x20000488
    2c20:	20002a38 	.word	0x20002a38
    2c24:	20002838 	.word	0x20002838

00002c28 <IRQHandler_Serial2>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial2()
{
	Serial2.IRQHandler();
    2c28:	4801      	ldr	r0, [pc, #4]	; (2c30 <IRQHandler_Serial2+0x8>)
    2c2a:	f7ff bf0b 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2c2e:	bf00      	nop
    2c30:	200021d8 	.word	0x200021d8

00002c34 <_GLOBAL__sub_I_IRQHandler_Serial2>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART4_TRG_INPUT
};
HardwareSerial Serial2(&IMXRT_LPUART4, &UART4_Hardware, tx_buffer2, SERIAL2_TX_BUFFER_SIZE, 
	rx_buffer2,  SERIAL2_RX_BUFFER_SIZE);
    2c34:	b410      	push	{r4}
    2c36:	4b17      	ldr	r3, [pc, #92]	; (2c94 <_GLOBAL__sub_I_IRQHandler_Serial2+0x60>)
    2c38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2c3c:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c3e:	2028      	movs	r0, #40	; 0x28
    2c40:	609c      	str	r4, [r3, #8]
    2c42:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c44:	4c14      	ldr	r4, [pc, #80]	; (2c98 <_GLOBAL__sub_I_IRQHandler_Serial2+0x64>)
    2c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2c4a:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2c4c:	4c13      	ldr	r4, [pc, #76]	; (2c9c <_GLOBAL__sub_I_IRQHandler_Serial2+0x68>)
    2c4e:	731a      	strb	r2, [r3, #12]
    2c50:	611c      	str	r4, [r3, #16]
    2c52:	4c13      	ldr	r4, [pc, #76]	; (2ca0 <_GLOBAL__sub_I_IRQHandler_Serial2+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c54:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2c56:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c58:	4c12      	ldr	r4, [pc, #72]	; (2ca4 <_GLOBAL__sub_I_IRQHandler_Serial2+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c5a:	769a      	strb	r2, [r3, #26]
    2c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c60:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2c66:	f85d 4b04 	ldr.w	r4, [sp], #4
    2c6a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2c6e:	605a      	str	r2, [r3, #4]
    2c70:	625a      	str	r2, [r3, #36]	; 0x24
    2c72:	641a      	str	r2, [r3, #64]	; 0x40
    2c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c78:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c7c:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c80:	4809      	ldr	r0, [pc, #36]	; (2ca8 <_GLOBAL__sub_I_IRQHandler_Serial2+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c82:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2c86:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2c88:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2c8c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2c90:	4770      	bx	lr
    2c92:	bf00      	nop
    2c94:	200021d8 	.word	0x200021d8
    2c98:	20000644 	.word	0x20000644
    2c9c:	40190000 	.word	0x40190000
    2ca0:	20001244 	.word	0x20001244
    2ca4:	20002a78 	.word	0x20002a78
    2ca8:	20002878 	.word	0x20002878

00002cac <IRQHandler_Serial3>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial3()
{
	Serial3.IRQHandler();
    2cac:	4801      	ldr	r0, [pc, #4]	; (2cb4 <IRQHandler_Serial3+0x8>)
    2cae:	f7ff bec9 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2cb2:	bf00      	nop
    2cb4:	20002238 	.word	0x20002238

00002cb8 <_GLOBAL__sub_I_IRQHandler_Serial3>:
	2, // page 473 
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART2_TRG_INPUT
};
HardwareSerial Serial3(&IMXRT_LPUART2, &UART2_Hardware,tx_buffer3, SERIAL3_TX_BUFFER_SIZE,
	rx_buffer3,  SERIAL3_RX_BUFFER_SIZE);
    2cb8:	b410      	push	{r4}
    2cba:	4b17      	ldr	r3, [pc, #92]	; (2d18 <_GLOBAL__sub_I_IRQHandler_Serial3+0x60>)
    2cbc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2cc0:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2cc2:	2028      	movs	r0, #40	; 0x28
    2cc4:	609c      	str	r4, [r3, #8]
    2cc6:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2cc8:	4c14      	ldr	r4, [pc, #80]	; (2d1c <_GLOBAL__sub_I_IRQHandler_Serial3+0x64>)
    2cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2cce:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2cd0:	4c13      	ldr	r4, [pc, #76]	; (2d20 <_GLOBAL__sub_I_IRQHandler_Serial3+0x68>)
    2cd2:	731a      	strb	r2, [r3, #12]
    2cd4:	611c      	str	r4, [r3, #16]
    2cd6:	4c13      	ldr	r4, [pc, #76]	; (2d24 <_GLOBAL__sub_I_IRQHandler_Serial3+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2cd8:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2cda:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2cdc:	4c12      	ldr	r4, [pc, #72]	; (2d28 <_GLOBAL__sub_I_IRQHandler_Serial3+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2cde:	769a      	strb	r2, [r3, #26]
    2ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ce4:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ce6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2cea:	f85d 4b04 	ldr.w	r4, [sp], #4
    2cee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2cf2:	605a      	str	r2, [r3, #4]
    2cf4:	625a      	str	r2, [r3, #36]	; 0x24
    2cf6:	641a      	str	r2, [r3, #64]	; 0x40
    2cf8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2cfc:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d00:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d04:	4809      	ldr	r0, [pc, #36]	; (2d2c <_GLOBAL__sub_I_IRQHandler_Serial3+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d06:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d0a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d0c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2d10:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2d14:	4770      	bx	lr
    2d16:	bf00      	nop
    2d18:	20002238 	.word	0x20002238
    2d1c:	20000644 	.word	0x20000644
    2d20:	40188000 	.word	0x40188000
    2d24:	2000117c 	.word	0x2000117c
    2d28:	20002aa0 	.word	0x20002aa0
    2d2c:	200028b8 	.word	0x200028b8

00002d30 <IRQHandler_Serial4>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial4()
{
	Serial4.IRQHandler();
    2d30:	4801      	ldr	r0, [pc, #4]	; (2d38 <IRQHandler_Serial4+0x8>)
    2d32:	f7ff be87 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2d36:	bf00      	nop
    2d38:	20002298 	.word	0x20002298

00002d3c <_GLOBAL__sub_I_IRQHandler_Serial4>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART3_TRG_INPUT
};
HardwareSerial Serial4(&IMXRT_LPUART3, &UART3_Hardware, tx_buffer4, SERIAL4_TX_BUFFER_SIZE,
	rx_buffer4,  SERIAL4_RX_BUFFER_SIZE);
    2d3c:	b410      	push	{r4}
    2d3e:	4b17      	ldr	r3, [pc, #92]	; (2d9c <_GLOBAL__sub_I_IRQHandler_Serial4+0x60>)
    2d40:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2d44:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d46:	2028      	movs	r0, #40	; 0x28
    2d48:	609c      	str	r4, [r3, #8]
    2d4a:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d4c:	4c14      	ldr	r4, [pc, #80]	; (2da0 <_GLOBAL__sub_I_IRQHandler_Serial4+0x64>)
    2d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2d52:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2d54:	4c13      	ldr	r4, [pc, #76]	; (2da4 <_GLOBAL__sub_I_IRQHandler_Serial4+0x68>)
    2d56:	731a      	strb	r2, [r3, #12]
    2d58:	611c      	str	r4, [r3, #16]
    2d5a:	4c13      	ldr	r4, [pc, #76]	; (2da8 <_GLOBAL__sub_I_IRQHandler_Serial4+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d5c:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2d5e:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d60:	4c12      	ldr	r4, [pc, #72]	; (2dac <_GLOBAL__sub_I_IRQHandler_Serial4+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d62:	769a      	strb	r2, [r3, #26]
    2d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d68:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2d72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2d76:	605a      	str	r2, [r3, #4]
    2d78:	625a      	str	r2, [r3, #36]	; 0x24
    2d7a:	641a      	str	r2, [r3, #64]	; 0x40
    2d7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d80:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d84:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d88:	4809      	ldr	r0, [pc, #36]	; (2db0 <_GLOBAL__sub_I_IRQHandler_Serial4+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d8a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2d8e:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2d90:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2d94:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	20002298 	.word	0x20002298
    2da0:	20000644 	.word	0x20000644
    2da4:	4018c000 	.word	0x4018c000
    2da8:	200011e0 	.word	0x200011e0
    2dac:	20002ac8 	.word	0x20002ac8
    2db0:	200028f8 	.word	0x200028f8

00002db4 <IRQHandler_Serial5>:
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest


void IRQHandler_Serial5()
{
	Serial5.IRQHandler();
    2db4:	4801      	ldr	r0, [pc, #4]	; (2dbc <IRQHandler_Serial5+0x8>)
    2db6:	f7ff be45 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2dba:	bf00      	nop
    2dbc:	200022f8 	.word	0x200022f8

00002dc0 <_GLOBAL__sub_I_IRQHandler_Serial5>:
	#endif
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART8_TRG_INPUT
};
HardwareSerial Serial5(&IMXRT_LPUART8, &UART8_Hardware, tx_buffer5, SERIAL5_TX_BUFFER_SIZE,
	rx_buffer5,  SERIAL5_RX_BUFFER_SIZE);
    2dc0:	b410      	push	{r4}
    2dc2:	4b17      	ldr	r3, [pc, #92]	; (2e20 <_GLOBAL__sub_I_IRQHandler_Serial5+0x60>)
    2dc4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2dc8:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2dca:	2028      	movs	r0, #40	; 0x28
    2dcc:	609c      	str	r4, [r3, #8]
    2dce:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2dd0:	4c14      	ldr	r4, [pc, #80]	; (2e24 <_GLOBAL__sub_I_IRQHandler_Serial5+0x64>)
    2dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2dd6:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2dd8:	4c13      	ldr	r4, [pc, #76]	; (2e28 <_GLOBAL__sub_I_IRQHandler_Serial5+0x68>)
    2dda:	731a      	strb	r2, [r3, #12]
    2ddc:	611c      	str	r4, [r3, #16]
    2dde:	4c13      	ldr	r4, [pc, #76]	; (2e2c <_GLOBAL__sub_I_IRQHandler_Serial5+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2de0:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2de2:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2de4:	4c12      	ldr	r4, [pc, #72]	; (2e30 <_GLOBAL__sub_I_IRQHandler_Serial5+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2de6:	769a      	strb	r2, [r3, #26]
    2de8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2dec:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2dee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2df2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2df6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2dfa:	605a      	str	r2, [r3, #4]
    2dfc:	625a      	str	r2, [r3, #36]	; 0x24
    2dfe:	641a      	str	r2, [r3, #64]	; 0x40
    2e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e04:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e08:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e0c:	4809      	ldr	r0, [pc, #36]	; (2e34 <_GLOBAL__sub_I_IRQHandler_Serial5+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e0e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e12:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e14:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2e18:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2e1c:	4770      	bx	lr
    2e1e:	bf00      	nop
    2e20:	200022f8 	.word	0x200022f8
    2e24:	20000644 	.word	0x20000644
    2e28:	401a0000 	.word	0x401a0000
    2e2c:	20001370 	.word	0x20001370
    2e30:	20002af0 	.word	0x20002af0
    2e34:	20002938 	.word	0x20002938

00002e38 <IRQHandler_Serial6>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial6()
{
	Serial6.IRQHandler();
    2e38:	4801      	ldr	r0, [pc, #4]	; (2e40 <IRQHandler_Serial6+0x8>)
    2e3a:	f7ff be03 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2e3e:	bf00      	nop
    2e40:	20002358 	.word	0x20002358

00002e44 <_GLOBAL__sub_I_IRQHandler_Serial6>:
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART1_TRG_INPUT
};

HardwareSerial Serial6(&IMXRT_LPUART1, &UART1_Hardware, tx_buffer6, SERIAL6_TX_BUFFER_SIZE,
	rx_buffer6,  SERIAL6_RX_BUFFER_SIZE);
    2e44:	b410      	push	{r4}
    2e46:	4b17      	ldr	r3, [pc, #92]	; (2ea4 <_GLOBAL__sub_I_IRQHandler_Serial6+0x60>)
    2e48:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2e4c:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e4e:	2028      	movs	r0, #40	; 0x28
    2e50:	609c      	str	r4, [r3, #8]
    2e52:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e54:	4c14      	ldr	r4, [pc, #80]	; (2ea8 <_GLOBAL__sub_I_IRQHandler_Serial6+0x64>)
    2e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2e5a:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2e5c:	4c13      	ldr	r4, [pc, #76]	; (2eac <_GLOBAL__sub_I_IRQHandler_Serial6+0x68>)
    2e5e:	731a      	strb	r2, [r3, #12]
    2e60:	611c      	str	r4, [r3, #16]
    2e62:	4c13      	ldr	r4, [pc, #76]	; (2eb0 <_GLOBAL__sub_I_IRQHandler_Serial6+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e64:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2e66:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e68:	4c12      	ldr	r4, [pc, #72]	; (2eb4 <_GLOBAL__sub_I_IRQHandler_Serial6+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e6a:	769a      	strb	r2, [r3, #26]
    2e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e70:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2e76:	f85d 4b04 	ldr.w	r4, [sp], #4
    2e7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2e7e:	605a      	str	r2, [r3, #4]
    2e80:	625a      	str	r2, [r3, #36]	; 0x24
    2e82:	641a      	str	r2, [r3, #64]	; 0x40
    2e84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e88:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e8c:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e90:	4809      	ldr	r0, [pc, #36]	; (2eb8 <_GLOBAL__sub_I_IRQHandler_Serial6+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e92:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2e96:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2e98:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2e9c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2ea0:	4770      	bx	lr
    2ea2:	bf00      	nop
    2ea4:	20002358 	.word	0x20002358
    2ea8:	20000644 	.word	0x20000644
    2eac:	40184000 	.word	0x40184000
    2eb0:	20001118 	.word	0x20001118
    2eb4:	20002b18 	.word	0x20002b18
    2eb8:	20002978 	.word	0x20002978

00002ebc <IRQHandler_Serial7>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial7()
{
	Serial7.IRQHandler();
    2ebc:	4801      	ldr	r0, [pc, #4]	; (2ec4 <IRQHandler_Serial7+0x8>)
    2ebe:	f7ff bdc1 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2ec2:	bf00      	nop
    2ec4:	200023b8 	.word	0x200023b8

00002ec8 <_GLOBAL__sub_I_IRQHandler_Serial7>:
	0, // No CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART7_TRG_INPUT
};
HardwareSerial Serial7(&IMXRT_LPUART7, &UART7_Hardware, tx_buffer7, SERIAL7_TX_BUFFER_SIZE,
	rx_buffer7,  SERIAL7_RX_BUFFER_SIZE);
    2ec8:	b410      	push	{r4}
    2eca:	4b17      	ldr	r3, [pc, #92]	; (2f28 <_GLOBAL__sub_I_IRQHandler_Serial7+0x60>)
    2ecc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2ed0:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ed2:	2028      	movs	r0, #40	; 0x28
    2ed4:	609c      	str	r4, [r3, #8]
    2ed6:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ed8:	4c14      	ldr	r4, [pc, #80]	; (2f2c <_GLOBAL__sub_I_IRQHandler_Serial7+0x64>)
    2eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2ede:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2ee0:	4c13      	ldr	r4, [pc, #76]	; (2f30 <_GLOBAL__sub_I_IRQHandler_Serial7+0x68>)
    2ee2:	731a      	strb	r2, [r3, #12]
    2ee4:	611c      	str	r4, [r3, #16]
    2ee6:	4c13      	ldr	r4, [pc, #76]	; (2f34 <_GLOBAL__sub_I_IRQHandler_Serial7+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ee8:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2eea:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2eec:	4c12      	ldr	r4, [pc, #72]	; (2f38 <_GLOBAL__sub_I_IRQHandler_Serial7+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2eee:	769a      	strb	r2, [r3, #26]
    2ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2ef4:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2efa:	f85d 4b04 	ldr.w	r4, [sp], #4
    2efe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2f02:	605a      	str	r2, [r3, #4]
    2f04:	625a      	str	r2, [r3, #36]	; 0x24
    2f06:	641a      	str	r2, [r3, #64]	; 0x40
    2f08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f0c:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f10:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f14:	4809      	ldr	r0, [pc, #36]	; (2f3c <_GLOBAL__sub_I_IRQHandler_Serial7+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f16:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f1a:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f1c:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2f20:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2f24:	4770      	bx	lr
    2f26:	bf00      	nop
    2f28:	200023b8 	.word	0x200023b8
    2f2c:	20000644 	.word	0x20000644
    2f30:	4019c000 	.word	0x4019c000
    2f34:	2000130c 	.word	0x2000130c
    2f38:	20002b40 	.word	0x20002b40
    2f3c:	200029b8 	.word	0x200029b8

00002f40 <IRQHandler_Serial8>:
#endif
#define IRQ_PRIORITY  64  // 0 = highest priority, 255 = lowest

void IRQHandler_Serial8()
{
	Serial8.IRQHandler();
    2f40:	4801      	ldr	r0, [pc, #4]	; (2f48 <IRQHandler_Serial8+0x8>)
    2f42:	f7ff bd7f 	b.w	2a44 <HardwareSerial::IRQHandler()>
    2f46:	bf00      	nop
    2f48:	20002418 	.word	0x20002418

00002f4c <_GLOBAL__sub_I_IRQHandler_Serial8>:
	2, //  CTS
	IRQ_PRIORITY, 38, 24, // IRQ, rts_low_watermark, rts_high_watermark
	XBARA1_OUT_LPUART5_TRG_INPUT
};
HardwareSerial Serial8(&IMXRT_LPUART5, &UART5_Hardware, tx_buffer8, SERIAL8_TX_BUFFER_SIZE,
	rx_buffer8,  SERIAL8_RX_BUFFER_SIZE);
    2f4c:	b410      	push	{r4}
    2f4e:	4b17      	ldr	r3, [pc, #92]	; (2fac <_GLOBAL__sub_I_IRQHandler_Serial8+0x60>)
    2f50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    2f54:	2200      	movs	r2, #0
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f56:	2028      	movs	r0, #40	; 0x28
    2f58:	609c      	str	r4, [r3, #8]
    2f5a:	2140      	movs	r1, #64	; 0x40
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f5c:	4c14      	ldr	r4, [pc, #80]	; (2fb0 <_GLOBAL__sub_I_IRQHandler_Serial8+0x64>)
    2f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    2f62:	601c      	str	r4, [r3, #0]
		port(myport), hardware(myhardware),
    2f64:	4c13      	ldr	r4, [pc, #76]	; (2fb4 <_GLOBAL__sub_I_IRQHandler_Serial8+0x68>)
    2f66:	731a      	strb	r2, [r3, #12]
    2f68:	611c      	str	r4, [r3, #16]
    2f6a:	4c13      	ldr	r4, [pc, #76]	; (2fb8 <_GLOBAL__sub_I_IRQHandler_Serial8+0x6c>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f6c:	831a      	strh	r2, [r3, #24]
		port(myport), hardware(myhardware),
    2f6e:	615c      	str	r4, [r3, #20]
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f70:	4c12      	ldr	r4, [pc, #72]	; (2fbc <_GLOBAL__sub_I_IRQHandler_Serial8+0x70>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f72:	769a      	strb	r2, [r3, #26]
    2f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f78:	61dc      	str	r4, [r3, #28]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    2f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    2f86:	605a      	str	r2, [r3, #4]
    2f88:	625a      	str	r2, [r3, #36]	; 0x24
    2f8a:	641a      	str	r2, [r3, #64]	; 0x40
    2f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f90:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f94:	e9c3 100c 	strd	r1, r0, [r3, #48]	; 0x30
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f98:	4809      	ldr	r0, [pc, #36]	; (2fc0 <_GLOBAL__sub_I_IRQHandler_Serial8+0x74>)
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2f9a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
		tx_buffer_(_tx_buffer), rx_buffer_(_rx_buffer), tx_buffer_size_(_tx_buffer_size),  rx_buffer_size_(_rx_buffer_size),
    2f9e:	6218      	str	r0, [r3, #32]
		tx_buffer_total_size_(_tx_buffer_size), rx_buffer_total_size_(_rx_buffer_size) {
    2fa0:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
    2fa4:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
    2fa8:	4770      	bx	lr
    2faa:	bf00      	nop
    2fac:	20002418 	.word	0x20002418
    2fb0:	20000644 	.word	0x20000644
    2fb4:	40194000 	.word	0x40194000
    2fb8:	200012a8 	.word	0x200012a8
    2fbc:	20002b68 	.word	0x20002b68
    2fc0:	200029f8 	.word	0x200029f8

00002fc4 <Print::write(unsigned char const*, unsigned int)>:

#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
    2fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
    2fc8:	460c      	mov	r4, r1
    2fca:	b1d1      	cbz	r1, 3002 <Print::write(unsigned char const*, unsigned int)+0x3e>
	size_t count = 0;
	while (size--) count += write(*buffer++);
    2fcc:	b1ea      	cbz	r2, 300a <Print::write(unsigned char const*, unsigned int)+0x46>
    2fce:	4680      	mov	r8, r0
    2fd0:	188e      	adds	r6, r1, r2
	size_t count = 0;
    2fd2:	2500      	movs	r5, #0
    2fd4:	4f0e      	ldr	r7, [pc, #56]	; (3010 <Print::write(unsigned char const*, unsigned int)+0x4c>)
    2fd6:	e004      	b.n	2fe2 <Print::write(unsigned char const*, unsigned int)+0x1e>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2fd8:	f002 f9a8 	bl	532c <usb_serial_putchar>
	while (size--) count += write(*buffer++);
    2fdc:	42b4      	cmp	r4, r6
    2fde:	4405      	add	r5, r0
    2fe0:	d00c      	beq.n	2ffc <Print::write(unsigned char const*, unsigned int)+0x38>
    2fe2:	f8d8 3000 	ldr.w	r3, [r8]
    2fe6:	f814 0b01 	ldrb.w	r0, [r4], #1
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	42bb      	cmp	r3, r7
    2fee:	d0f3      	beq.n	2fd8 <Print::write(unsigned char const*, unsigned int)+0x14>
    2ff0:	4601      	mov	r1, r0
    2ff2:	4640      	mov	r0, r8
    2ff4:	4798      	blx	r3
    2ff6:	42b4      	cmp	r4, r6
    2ff8:	4405      	add	r5, r0
    2ffa:	d1f2      	bne.n	2fe2 <Print::write(unsigned char const*, unsigned int)+0x1e>
	return count;
}
    2ffc:	4628      	mov	r0, r5
    2ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    3002:	460d      	mov	r5, r1
}
    3004:	4628      	mov	r0, r5
    3006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
    300a:	4615      	mov	r5, r2
    300c:	e7f6      	b.n	2ffc <Print::write(unsigned char const*, unsigned int)+0x38>
    300e:	bf00      	nop
    3010:	000010dd 	.word	0x000010dd

00003014 <Print::print(String const&)>:


size_t Print::print(const String &s)
{
    3014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    3018:	688c      	ldr	r4, [r1, #8]
    301a:	b08a      	sub	sp, #40	; 0x28
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    301c:	b1dc      	cbz	r4, 3056 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    301e:	2500      	movs	r5, #0
    3020:	4688      	mov	r8, r1
    3022:	4606      	mov	r6, r0
	size_t count = 0;
    3024:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    3026:	462b      	mov	r3, r5
    3028:	2221      	movs	r2, #33	; 0x21
    302a:	a901      	add	r1, sp, #4
    302c:	4640      	mov	r0, r8
    302e:	f000 f9cd 	bl	33cc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    3032:	2c20      	cmp	r4, #32
    3034:	4622      	mov	r2, r4
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    3036:	6833      	ldr	r3, [r6, #0]
    3038:	bf28      	it	cs
    303a:	2220      	movcs	r2, #32
    303c:	a901      	add	r1, sp, #4
    303e:	4630      	mov	r0, r6
    3040:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    3042:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    3044:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    3046:	4798      	blx	r3
    3048:	4407      	add	r7, r0
	while (len > 0) {
    304a:	2c00      	cmp	r4, #0
    304c:	d1eb      	bne.n	3026 <Print::print(String const&)+0x12>
	}
	return count;
}
    304e:	4638      	mov	r0, r7
    3050:	b00a      	add	sp, #40	; 0x28
    3052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    3056:	4627      	mov	r7, r4
}
    3058:	4638      	mov	r0, r7
    305a:	b00a      	add	sp, #40	; 0x28
    305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003060 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    3060:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3062:	6803      	ldr	r3, [r0, #0]
{
    3064:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3066:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    306a:	2202      	movs	r2, #2
    306c:	a901      	add	r1, sp, #4
    306e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    3070:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    3074:	4798      	blx	r3
}
    3076:	b003      	add	sp, #12
    3078:	f85d fb04 	ldr.w	pc, [sp], #4

0000307c <_write>:
extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	if (file >= 0 && file <= 2) file = (int)&Serial;
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    307c:	4b05      	ldr	r3, [pc, #20]	; (3094 <_write+0x18>)
    307e:	2802      	cmp	r0, #2
    3080:	bf88      	it	hi
    3082:	4603      	movhi	r3, r0
{
    3084:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3086:	681c      	ldr	r4, [r3, #0]
    3088:	4618      	mov	r0, r3
    308a:	6863      	ldr	r3, [r4, #4]
}
    308c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    3090:	4718      	bx	r3
    3092:	bf00      	nop
    3094:	20001108 	.word	0x20001108

00003098 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    3098:	f002 b8d2 	b.w	5240 <usb_serial_peekchar>

0000309c <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    309c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	String str;
	size_t length = 0;
    30a0:	2700      	movs	r7, #0
{
    30a2:	468b      	mov	fp, r1
    30a4:	4681      	mov	r9, r0
    30a6:	4692      	mov	sl, r2
	String str;
    30a8:	4639      	mov	r1, r7
    30aa:	f103 38ff 	add.w	r8, r3, #4294967295
    30ae:	4c17      	ldr	r4, [pc, #92]	; (310c <Stream::readStringUntil(char, unsigned int)+0x70>)
    30b0:	4e17      	ldr	r6, [pc, #92]	; (3110 <Stream::readStringUntil(char, unsigned int)+0x74>)
    30b2:	f000 f89f 	bl	31f4 <String::String(char const*)>
	return systick_millis_count;
    30b6:	6825      	ldr	r5, [r4, #0]
    30b8:	e00b      	b.n	30d2 <Stream::readStringUntil(char, unsigned int)+0x36>
        virtual int read() { return usb_serial_getchar(); }
    30ba:	f002 f927 	bl	530c <usb_serial_getchar>
    if (c >= 0) return c;
    30be:	2800      	cmp	r0, #0
    30c0:	da10      	bge.n	30e4 <Stream::readStringUntil(char, unsigned int)+0x48>
    yield();
    30c2:	f002 f9c7 	bl	5454 <yield>
    30c6:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    30c8:	f8db 2008 	ldr.w	r2, [fp, #8]
    30cc:	1b5b      	subs	r3, r3, r5
    30ce:	4293      	cmp	r3, r2
    30d0:	d215      	bcs.n	30fe <Stream::readStringUntil(char, unsigned int)+0x62>
    c = read();
    30d2:	f8db 3000 	ldr.w	r3, [fp]
    30d6:	695b      	ldr	r3, [r3, #20]
    30d8:	42b3      	cmp	r3, r6
    30da:	d0ee      	beq.n	30ba <Stream::readStringUntil(char, unsigned int)+0x1e>
    30dc:	4658      	mov	r0, fp
    30de:	4798      	blx	r3
    if (c >= 0) return c;
    30e0:	2800      	cmp	r0, #0
    30e2:	dbee      	blt.n	30c2 <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    30e4:	d008      	beq.n	30f8 <Stream::readStringUntil(char, unsigned int)+0x5c>
    30e6:	4582      	cmp	sl, r0
    30e8:	d006      	beq.n	30f8 <Stream::readStringUntil(char, unsigned int)+0x5c>
		str += (char)c;
		length++;
    30ea:	3701      	adds	r7, #1
	String & operator += (char c)			{return append(c);}
    30ec:	b2c1      	uxtb	r1, r0
    30ee:	4648      	mov	r0, r9
    30f0:	f000 f93e 	bl	3370 <String::append(char)>
	while (length < max || !max) {
    30f4:	4547      	cmp	r7, r8
    30f6:	d9de      	bls.n	30b6 <Stream::readStringUntil(char, unsigned int)+0x1a>
	}
	return str;
}
    30f8:	4648      	mov	r0, r9
    30fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    30fe:	2301      	movs	r3, #1
    3100:	4648      	mov	r0, r9
    3102:	f88b 300c 	strb.w	r3, [fp, #12]
    3106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    310a:	bf00      	nop
    310c:	200039c4 	.word	0x200039c4
    3110:	000010d9 	.word	0x000010d9

00003114 <String::String(String const&)>:
String::String(const String &value)
    3114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    3116:	4288      	cmp	r0, r1
	buffer = NULL;
    3118:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    311c:	4604      	mov	r4, r0
	len = 0;
    311e:	6085      	str	r5, [r0, #8]
	flags = 0;
    3120:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    3122:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    3126:	d002      	beq.n	312e <String::String(String const&)+0x1a>
    3128:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    312a:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    312c:	b90e      	cbnz	r6, 3132 <String::String(String const&)+0x1e>
}
    312e:	4620      	mov	r0, r4
    3130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3132:	1c70      	adds	r0, r6, #1
    3134:	f002 faa2 	bl	567c <malloc>
	if (newbuffer) {
    3138:	2800      	cmp	r0, #0
    313a:	d0f8      	beq.n	312e <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    313c:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    313e:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    3140:	6020      	str	r0, [r4, #0]
	len = length;
    3142:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    3146:	f004 fef9 	bl	7f3c <strcpy>
}
    314a:	4620      	mov	r0, r4
    314c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    314e:	bf00      	nop

00003150 <String::String(String&&)>:
	buffer = NULL;
    3150:	2300      	movs	r3, #0
	if (&rhs == this) return;
    3152:	4288      	cmp	r0, r1
	capacity = 0;
    3154:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    3158:	6083      	str	r3, [r0, #8]
	flags = 0;
    315a:	7303      	strb	r3, [r0, #12]
	if (&rhs == this) return;
    315c:	d00c      	beq.n	3178 <String::String(String&&)+0x28>
String::String(String &&rval)
    315e:	b410      	push	{r4}
	capacity = rhs.capacity;
    3160:	e9d1 4200 	ldrd	r4, r2, [r1]
	rhs.capacity = 0;
    3164:	e9c1 3300 	strd	r3, r3, [r1]
	capacity = rhs.capacity;
    3168:	e9c0 4200 	strd	r4, r2, [r0]
	len = rhs.len;
    316c:	688a      	ldr	r2, [r1, #8]
}
    316e:	f85d 4b04 	ldr.w	r4, [sp], #4
	rhs.len = 0;
    3172:	608b      	str	r3, [r1, #8]
	len = rhs.len;
    3174:	6082      	str	r2, [r0, #8]
}
    3176:	4770      	bx	lr
    3178:	4770      	bx	lr
    317a:	bf00      	nop

0000317c <String::~String()>:
String::~String()
    317c:	b510      	push	{r4, lr}
    317e:	4604      	mov	r4, r0
	free(buffer);
    3180:	6800      	ldr	r0, [r0, #0]
    3182:	f002 fa83 	bl	568c <free>
}
    3186:	4620      	mov	r0, r4
    3188:	bd10      	pop	{r4, pc}
    318a:	bf00      	nop

0000318c <String::copy(char const*, unsigned int)>:
{
    318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    318e:	4604      	mov	r4, r0
	if (length == 0) {
    3190:	4615      	mov	r5, r2
    3192:	b932      	cbnz	r2, 31a2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    3194:	6803      	ldr	r3, [r0, #0]
    3196:	b103      	cbz	r3, 319a <String::copy(char const*, unsigned int)+0xe>
    3198:	701a      	strb	r2, [r3, #0]
		len = 0;
    319a:	2300      	movs	r3, #0
}
    319c:	4620      	mov	r0, r4
		len = 0;
    319e:	60a3      	str	r3, [r4, #8]
}
    31a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    31a2:	6843      	ldr	r3, [r0, #4]
    31a4:	460e      	mov	r6, r1
    31a6:	429a      	cmp	r2, r3
    31a8:	d91c      	bls.n	31e4 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    31aa:	1c51      	adds	r1, r2, #1
    31ac:	6800      	ldr	r0, [r0, #0]
    31ae:	f002 fd31 	bl	5c14 <realloc>
	if (newbuffer) {
    31b2:	4607      	mov	r7, r0
    31b4:	b160      	cbz	r0, 31d0 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    31b6:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    31b8:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    31bc:	b90b      	cbnz	r3, 31c2 <String::copy(char const*, unsigned int)+0x36>
    31be:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    31c0:	6827      	ldr	r7, [r4, #0]
    31c2:	4631      	mov	r1, r6
    31c4:	4638      	mov	r0, r7
	len = length;
    31c6:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    31c8:	f004 feb8 	bl	7f3c <strcpy>
}
    31cc:	4620      	mov	r0, r4
    31ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    31d0:	6820      	ldr	r0, [r4, #0]
    31d2:	b110      	cbz	r0, 31da <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    31d4:	f002 fa5a 	bl	568c <free>
			buffer = NULL;
    31d8:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    31da:	2300      	movs	r3, #0
}
    31dc:	4620      	mov	r0, r4
		len = capacity = 0;
    31de:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    31e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    31e4:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    31e6:	4631      	mov	r1, r6
	len = length;
    31e8:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    31ea:	4638      	mov	r0, r7
    31ec:	f004 fea6 	bl	7f3c <strcpy>
	return *this;
    31f0:	e7ec      	b.n	31cc <String::copy(char const*, unsigned int)+0x40>
    31f2:	bf00      	nop

000031f4 <String::String(char const*)>:
String::String(const char *cstr)
    31f4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    31f6:	2300      	movs	r3, #0
String::String(const char *cstr)
    31f8:	4604      	mov	r4, r0
	capacity = 0;
    31fa:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    31fe:	6083      	str	r3, [r0, #8]
	flags = 0;
    3200:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    3202:	b141      	cbz	r1, 3216 <String::String(char const*)+0x22>
    3204:	460d      	mov	r5, r1
    3206:	4608      	mov	r0, r1
    3208:	f004 fefa 	bl	8000 <strlen>
    320c:	4602      	mov	r2, r0
    320e:	4629      	mov	r1, r5
    3210:	4620      	mov	r0, r4
    3212:	f7ff ffbb 	bl	318c <String::copy(char const*, unsigned int)>
}
    3216:	4620      	mov	r0, r4
    3218:	bd38      	pop	{r3, r4, r5, pc}
    321a:	bf00      	nop

0000321c <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
    321c:	b510      	push	{r4, lr}
	buffer = NULL;
    321e:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
    3220:	b08a      	sub	sp, #40	; 0x28
    3222:	4604      	mov	r4, r0
	itoa(value, buf, base);
    3224:	4608      	mov	r0, r1
    3226:	a901      	add	r1, sp, #4
	len = 0;
    3228:	60a3      	str	r3, [r4, #8]
	flags = 0;
    322a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    322c:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
    3230:	f002 fa0e 	bl	5650 <itoa>
		copy(cstr, strlen(cstr));
    3234:	a801      	add	r0, sp, #4
    3236:	f004 fee3 	bl	8000 <strlen>
    323a:	a901      	add	r1, sp, #4
    323c:	4602      	mov	r2, r0
    323e:	4620      	mov	r0, r4
    3240:	f7ff ffa4 	bl	318c <String::copy(char const*, unsigned int)>
}
    3244:	4620      	mov	r0, r4
    3246:	b00a      	add	sp, #40	; 0x28
    3248:	bd10      	pop	{r4, pc}
    324a:	bf00      	nop

0000324c <String::String(unsigned long, unsigned char)>:
String::String(unsigned long value, unsigned char base)
    324c:	b510      	push	{r4, lr}
	buffer = NULL;
    324e:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
    3250:	b08a      	sub	sp, #40	; 0x28
    3252:	4604      	mov	r4, r0
	ultoa(value, buf, base);
    3254:	4608      	mov	r0, r1
    3256:	a901      	add	r1, sp, #4
	len = 0;
    3258:	60a3      	str	r3, [r4, #8]
	flags = 0;
    325a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    325c:	e9c4 3300 	strd	r3, r3, [r4]
	ultoa(value, buf, base);
    3260:	f000 fce8 	bl	3c34 <ultoa>
		copy(cstr, strlen(cstr));
    3264:	a801      	add	r0, sp, #4
    3266:	f004 fecb 	bl	8000 <strlen>
    326a:	a901      	add	r1, sp, #4
    326c:	4602      	mov	r2, r0
    326e:	4620      	mov	r0, r4
    3270:	f7ff ff8c 	bl	318c <String::copy(char const*, unsigned int)>
}
    3274:	4620      	mov	r0, r4
    3276:	b00a      	add	sp, #40	; 0x28
    3278:	bd10      	pop	{r4, pc}
    327a:	bf00      	nop

0000327c <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
    327c:	b530      	push	{r4, r5, lr}
	buffer = NULL;
    327e:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
    3280:	4604      	mov	r4, r0
    3282:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
    3284:	1c88      	adds	r0, r1, #2
	len = 0;
    3286:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
    3288:	466a      	mov	r2, sp
	flags = 0;
    328a:	7323      	strb	r3, [r4, #12]
	capacity = 0;
    328c:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
    3290:	f000 fd02 	bl	3c98 <dtostrf>
	if (cstr) {
    3294:	4605      	mov	r5, r0
    3296:	b148      	cbz	r0, 32ac <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
    3298:	f004 feb2 	bl	8000 <strlen>
    329c:	4629      	mov	r1, r5
    329e:	4602      	mov	r2, r0
    32a0:	4620      	mov	r0, r4
    32a2:	f7ff ff73 	bl	318c <String::copy(char const*, unsigned int)>
}
    32a6:	4620      	mov	r0, r4
    32a8:	b00b      	add	sp, #44	; 0x2c
    32aa:	bd30      	pop	{r4, r5, pc}
		len = 0;
    32ac:	60a0      	str	r0, [r4, #8]
}
    32ae:	4620      	mov	r0, r4
    32b0:	b00b      	add	sp, #44	; 0x2c
    32b2:	bd30      	pop	{r4, r5, pc}

000032b4 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    32b4:	4281      	cmp	r1, r0
    32b6:	d003      	beq.n	32c0 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    32b8:	688a      	ldr	r2, [r1, #8]
    32ba:	6809      	ldr	r1, [r1, #0]
    32bc:	f7ff bf66 	b.w	318c <String::copy(char const*, unsigned int)>
}
    32c0:	4770      	bx	lr
    32c2:	bf00      	nop

000032c4 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    32c4:	4288      	cmp	r0, r1
{
    32c6:	b538      	push	{r3, r4, r5, lr}
    32c8:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    32ca:	d00e      	beq.n	32ea <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    32cc:	6800      	ldr	r0, [r0, #0]
    32ce:	460c      	mov	r4, r1
    32d0:	b108      	cbz	r0, 32d6 <String::operator=(String&&)+0x12>
    32d2:	f002 f9db 	bl	568c <free>
	len = rhs.len;
    32d6:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    32d8:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    32da:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    32de:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    32e0:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    32e4:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    32e8:	60a3      	str	r3, [r4, #8]
}
    32ea:	4628      	mov	r0, r5
    32ec:	bd38      	pop	{r3, r4, r5, pc}
    32ee:	bf00      	nop

000032f0 <String::append(char const*, unsigned int)>:
{
    32f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    32f4:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    32f6:	6800      	ldr	r0, [r0, #0]
{
    32f8:	460d      	mov	r5, r1
    32fa:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    32fc:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    32fe:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    3300:	d809      	bhi.n	3316 <String::append(char const*, unsigned int)+0x26>
    3302:	18c2      	adds	r2, r0, r3
    3304:	4291      	cmp	r1, r2
    3306:	d206      	bcs.n	3316 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    3308:	1a0f      	subs	r7, r1, r0
		self = true;
    330a:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    330e:	b936      	cbnz	r6, 331e <String::append(char const*, unsigned int)+0x2e>
}
    3310:	4620      	mov	r0, r4
    3312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    3316:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    331a:	2e00      	cmp	r6, #0
    331c:	d0f8      	beq.n	3310 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    331e:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    3322:	6862      	ldr	r2, [r4, #4]
    3324:	4590      	cmp	r8, r2
    3326:	d90c      	bls.n	3342 <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3328:	f108 0101 	add.w	r1, r8, #1
    332c:	f002 fc72 	bl	5c14 <realloc>
	if (newbuffer) {
    3330:	2800      	cmp	r0, #0
    3332:	d0ed      	beq.n	3310 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    3334:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    3336:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    333a:	b913      	cbnz	r3, 3342 <String::append(char const*, unsigned int)+0x52>
    333c:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    333e:	6820      	ldr	r0, [r4, #0]
    3340:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    3342:	f1b9 0f00 	cmp.w	r9, #0
    3346:	d108      	bne.n	335a <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    3348:	4629      	mov	r1, r5
    334a:	4418      	add	r0, r3
    334c:	f004 fdf6 	bl	7f3c <strcpy>
}
    3350:	4620      	mov	r0, r4
	len = newlen;
    3352:	f8c4 8008 	str.w	r8, [r4, #8]
}
    3356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    335a:	4632      	mov	r2, r6
    335c:	19c1      	adds	r1, r0, r7
    335e:	4418      	add	r0, r3
    3360:	f000 fbca 	bl	3af8 <memcpy>
		buffer[newlen] = 0;
    3364:	6823      	ldr	r3, [r4, #0]
    3366:	2200      	movs	r2, #0
    3368:	f803 2008 	strb.w	r2, [r3, r8]
    336c:	e7f0      	b.n	3350 <String::append(char const*, unsigned int)+0x60>
    336e:	bf00      	nop

00003370 <String::append(char)>:
{
    3370:	b510      	push	{r4, lr}
    3372:	b082      	sub	sp, #8
	buf[1] = 0;
    3374:	2300      	movs	r3, #0
{
    3376:	4604      	mov	r4, r0
	append(buf, 1);
    3378:	2201      	movs	r2, #1
	buf[0] = c;
    337a:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    337e:	a901      	add	r1, sp, #4
	buf[1] = 0;
    3380:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    3384:	f7ff ffb4 	bl	32f0 <String::append(char const*, unsigned int)>
}
    3388:	4620      	mov	r0, r4
    338a:	b002      	add	sp, #8
    338c:	bd10      	pop	{r4, pc}
    338e:	bf00      	nop

00003390 <operator+(StringSumHelper const&, String const&)>:
{
    3390:	b510      	push	{r4, lr}
    3392:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    3394:	688a      	ldr	r2, [r1, #8]
    3396:	6809      	ldr	r1, [r1, #0]
    3398:	f7ff ffaa 	bl	32f0 <String::append(char const*, unsigned int)>
}
    339c:	4620      	mov	r0, r4
    339e:	bd10      	pop	{r4, pc}

000033a0 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    33a0:	6882      	ldr	r2, [r0, #8]
{
    33a2:	b508      	push	{r3, lr}
    33a4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    33a6:	b13a      	cbz	r2, 33b8 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    33a8:	b161      	cbz	r1, 33c4 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    33aa:	6800      	ldr	r0, [r0, #0]
    33ac:	f004 fc5c 	bl	7c68 <strcmp>
    33b0:	fab0 f080 	clz	r0, r0
    33b4:	0940      	lsrs	r0, r0, #5
}
    33b6:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    33b8:	b131      	cbz	r1, 33c8 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    33ba:	7818      	ldrb	r0, [r3, #0]
    33bc:	fab0 f080 	clz	r0, r0
    33c0:	0940      	lsrs	r0, r0, #5
}
    33c2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    33c4:	6803      	ldr	r3, [r0, #0]
    33c6:	e7f8      	b.n	33ba <String::equals(char const*) const+0x1a>
    33c8:	2001      	movs	r0, #1
}
    33ca:	bd08      	pop	{r3, pc}

000033cc <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    33cc:	b1c2      	cbz	r2, 3400 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    33ce:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    33d0:	fab1 f681 	clz	r6, r1
    33d4:	460c      	mov	r4, r1
    33d6:	0976      	lsrs	r6, r6, #5
    33d8:	b119      	cbz	r1, 33e2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    33da:	6885      	ldr	r5, [r0, #8]
    33dc:	429d      	cmp	r5, r3
    33de:	d801      	bhi.n	33e4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    33e0:	700e      	strb	r6, [r1, #0]
}
    33e2:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    33e4:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    33e6:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    33ea:	6801      	ldr	r1, [r0, #0]
    33ec:	4620      	mov	r0, r4
    33ee:	4565      	cmp	r5, ip
    33f0:	4419      	add	r1, r3
    33f2:	bf28      	it	cs
    33f4:	4665      	movcs	r5, ip
    33f6:	462a      	mov	r2, r5
    33f8:	f004 f948 	bl	768c <strncpy>
	buf[n] = 0;
    33fc:	5566      	strb	r6, [r4, r5]
}
    33fe:	bd70      	pop	{r4, r5, r6, pc}
    3400:	4770      	bx	lr
    3402:	bf00      	nop

00003404 <String::indexOf(String const&) const>:
	if (fromIndex >= len) return -1;
    3404:	6883      	ldr	r3, [r0, #8]
    3406:	b143      	cbz	r3, 341a <String::indexOf(String const&) const+0x16>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3408:	6809      	ldr	r1, [r1, #0]
{
    340a:	b510      	push	{r4, lr}
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    340c:	6804      	ldr	r4, [r0, #0]
    340e:	4620      	mov	r0, r4
    3410:	f004 face 	bl	79b0 <strstr>
	if (found == NULL) return -1;
    3414:	b120      	cbz	r0, 3420 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    3416:	1b00      	subs	r0, r0, r4
}
    3418:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    341a:	f04f 30ff 	mov.w	r0, #4294967295
}
    341e:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    3420:	f04f 30ff 	mov.w	r0, #4294967295
}
    3424:	bd10      	pop	{r4, pc}
    3426:	bf00      	nop

00003428 <String::substring(unsigned int) const>:
{
    3428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    342c:	688f      	ldr	r7, [r1, #8]
{
    342e:	460e      	mov	r6, r1
    3430:	4604      	mov	r4, r0
	if (left > right) {
    3432:	4297      	cmp	r7, r2
    3434:	d202      	bcs.n	343c <String::substring(unsigned int) const+0x14>
    3436:	4613      	mov	r3, r2
    3438:	463a      	mov	r2, r7
    343a:	461f      	mov	r7, r3
	buffer = NULL;
    343c:	2300      	movs	r3, #0
	len = 0;
    343e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    3440:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    3442:	68b0      	ldr	r0, [r6, #8]
    3444:	4290      	cmp	r0, r2
	capacity = 0;
    3446:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    344a:	d314      	bcc.n	3476 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    344c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    344e:	6831      	ldr	r1, [r6, #0]
    3450:	bf28      	it	cs
    3452:	4607      	movcs	r7, r0
    3454:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    3458:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    345a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    345c:	189d      	adds	r5, r3, r2
    345e:	d00d      	beq.n	347c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    3460:	4628      	mov	r0, r5
    3462:	f004 fdcd 	bl	8000 <strlen>
    3466:	4629      	mov	r1, r5
    3468:	4602      	mov	r2, r0
    346a:	4620      	mov	r0, r4
    346c:	f7ff fe8e 	bl	318c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    3470:	6833      	ldr	r3, [r6, #0]
    3472:	f803 8007 	strb.w	r8, [r3, r7]
}
    3476:	4620      	mov	r0, r4
    3478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    347c:	60a5      	str	r5, [r4, #8]
    347e:	e7f8      	b.n	3472 <String::substring(unsigned int) const+0x4a>

00003480 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    3480:	429a      	cmp	r2, r3
{
    3482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3486:	4604      	mov	r4, r0
    3488:	460e      	mov	r6, r1
	if (left > right) {
    348a:	d902      	bls.n	3492 <String::substring(unsigned int, unsigned int) const+0x12>
    348c:	4611      	mov	r1, r2
    348e:	461a      	mov	r2, r3
    3490:	460b      	mov	r3, r1
	buffer = NULL;
    3492:	2000      	movs	r0, #0
	len = 0;
    3494:	60a0      	str	r0, [r4, #8]
	flags = 0;
    3496:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    3498:	68b7      	ldr	r7, [r6, #8]
    349a:	4297      	cmp	r7, r2
	capacity = 0;
    349c:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    34a0:	d314      	bcc.n	34cc <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    34a2:	429f      	cmp	r7, r3
    34a4:	bf28      	it	cs
    34a6:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    34a8:	6833      	ldr	r3, [r6, #0]
    34aa:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    34ae:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    34b0:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    34b2:	189d      	adds	r5, r3, r2
    34b4:	d00d      	beq.n	34d2 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    34b6:	4628      	mov	r0, r5
    34b8:	f004 fda2 	bl	8000 <strlen>
    34bc:	4629      	mov	r1, r5
    34be:	4602      	mov	r2, r0
    34c0:	4620      	mov	r0, r4
    34c2:	f7ff fe63 	bl	318c <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    34c6:	6833      	ldr	r3, [r6, #0]
    34c8:	f803 8007 	strb.w	r8, [r3, r7]
}
    34cc:	4620      	mov	r0, r4
    34ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    34d2:	60a5      	str	r5, [r4, #8]
    34d4:	e7f8      	b.n	34c8 <String::substring(unsigned int, unsigned int) const+0x48>
    34d6:	bf00      	nop

000034d8 <String::toLowerCase()>:
	}
	return *this;
}

String & String::toLowerCase(void)
{
    34d8:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    34da:	6804      	ldr	r4, [r0, #0]
{
    34dc:	4605      	mov	r5, r0
	if (!buffer) return *this;
    34de:	b144      	cbz	r4, 34f2 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    34e0:	7820      	ldrb	r0, [r4, #0]
    34e2:	b130      	cbz	r0, 34f2 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    34e4:	f003 fe24 	bl	7130 <tolower>
    34e8:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    34ea:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    34ee:	2800      	cmp	r0, #0
    34f0:	d1f8      	bne.n	34e4 <String::toLowerCase()+0xc>
	}
	return *this;
}
    34f2:	4628      	mov	r0, r5
    34f4:	bd38      	pop	{r3, r4, r5, pc}
    34f6:	bf00      	nop

000034f8 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    34f8:	6800      	ldr	r0, [r0, #0]
    34fa:	b108      	cbz	r0, 3500 <String::toInt() const+0x8>
    34fc:	f002 b8a4 	b.w	5648 <atol>
	return 0;
}
    3500:	4770      	bx	lr
    3502:	bf00      	nop

00003504 <String::toFloat() const>:

float String::toFloat(void) const
{
	if (buffer) return strtof(buffer, (char **)NULL);
    3504:	6800      	ldr	r0, [r0, #0]
    3506:	b110      	cbz	r0, 350e <String::toFloat() const+0xa>
    3508:	2100      	movs	r1, #0
    350a:	f003 bcb5 	b.w	6e78 <strtof>
	return 0.0;
}
    350e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 3514 <String::toFloat() const+0x10>
    3512:	4770      	bx	lr
    3514:	00000000 	.word	0x00000000

00003518 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3518:	49a2      	ldr	r1, [pc, #648]	; (37a4 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    351a:	4ba3      	ldr	r3, [pc, #652]	; (37a8 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    351c:	4288      	cmp	r0, r1
{
    351e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    3522:	4ca2      	ldr	r4, [pc, #648]	; (37ac <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3524:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    3526:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3528:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    352c:	d91b      	bls.n	3566 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    352e:	4ba0      	ldr	r3, [pc, #640]	; (37b0 <set_arm_clock+0x298>)
    3530:	4298      	cmp	r0, r3
    3532:	f240 8102 	bls.w	373a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3536:	1ac3      	subs	r3, r0, r3
    3538:	499e      	ldr	r1, [pc, #632]	; (37b4 <set_arm_clock+0x29c>)
    353a:	0a1b      	lsrs	r3, r3, #8
    353c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3540:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3544:	09db      	lsrs	r3, r3, #7
    3546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    354a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    354e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3552:	428b      	cmp	r3, r1
    3554:	bf28      	it	cs
    3556:	460b      	movcs	r3, r1
    3558:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    355c:	4b96      	ldr	r3, [pc, #600]	; (37b8 <set_arm_clock+0x2a0>)
    355e:	fba3 3707 	umull	r3, r7, r3, r7
    3562:	08ff      	lsrs	r7, r7, #3
    3564:	e004      	b.n	3570 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    3566:	4f95      	ldr	r7, [pc, #596]	; (37bc <set_arm_clock+0x2a4>)
    3568:	42b8      	cmp	r0, r7
    356a:	bf8c      	ite	hi
    356c:	270e      	movhi	r7, #14
    356e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3570:	498d      	ldr	r1, [pc, #564]	; (37a8 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3572:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3576:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    357a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    357c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    3580:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3584:	d20c      	bcs.n	35a0 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3586:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    358a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    358e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    3592:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3596:	680b      	ldr	r3, [r1, #0]
    3598:	2b00      	cmp	r3, #0
    359a:	dafc      	bge.n	3596 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    359c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    35a0:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    35a4:	d124      	bne.n	35f0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    35a6:	4986      	ldr	r1, [pc, #536]	; (37c0 <set_arm_clock+0x2a8>)
    35a8:	690c      	ldr	r4, [r1, #16]
    35aa:	4986      	ldr	r1, [pc, #536]	; (37c4 <set_arm_clock+0x2ac>)
    35ac:	43a1      	bics	r1, r4
    35ae:	f000 80ea 	beq.w	3786 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    35b2:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    35b6:	4634      	mov	r4, r6
    35b8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    35bc:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    35c0:	d004      	beq.n	35cc <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    35c2:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    35c6:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    35c8:	4b77      	ldr	r3, [pc, #476]	; (37a8 <set_arm_clock+0x290>)
    35ca:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    35cc:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    35d0:	d007      	beq.n	35e2 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    35d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    35d6:	4974      	ldr	r1, [pc, #464]	; (37a8 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    35d8:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    35da:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    35dc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    35de:	071a      	lsls	r2, r3, #28
    35e0:	d4fc      	bmi.n	35dc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    35e2:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    35e6:	4a70      	ldr	r2, [pc, #448]	; (37a8 <set_arm_clock+0x290>)
    35e8:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    35ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
    35ec:	069b      	lsls	r3, r3, #26
    35ee:	d4fc      	bmi.n	35ea <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    35f0:	4c75      	ldr	r4, [pc, #468]	; (37c8 <set_arm_clock+0x2b0>)
    35f2:	42a0      	cmp	r0, r4
    35f4:	f200 80ce 	bhi.w	3794 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    35f8:	f04f 0c01 	mov.w	ip, #1
    35fc:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    35fe:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    3600:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    3604:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    3608:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    360c:	42a2      	cmp	r2, r4
    360e:	d818      	bhi.n	3642 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    3610:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    3614:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    3618:	f040 808d 	bne.w	3736 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    361c:	f1bc 0f04 	cmp.w	ip, #4
    3620:	f200 8091 	bhi.w	3746 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    3624:	180a      	adds	r2, r1, r0
    3626:	42a2      	cmp	r2, r4
    3628:	f200 80a4 	bhi.w	3774 <set_arm_clock+0x25c>
    362c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    3630:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    3632:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    3636:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    363a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    363e:	42a2      	cmp	r2, r4
    3640:	d9e6      	bls.n	3610 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3642:	f10c 31ff 	add.w	r1, ip, #4294967295
    3646:	028c      	lsls	r4, r1, #10
    3648:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    364c:	485f      	ldr	r0, [pc, #380]	; (37cc <set_arm_clock+0x2b4>)
    364e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    3650:	4a5f      	ldr	r2, [pc, #380]	; (37d0 <set_arm_clock+0x2b8>)
    3652:	4290      	cmp	r0, r2
    3654:	d97f      	bls.n	3756 <set_arm_clock+0x23e>
    3656:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 37fc <set_arm_clock+0x2e4>
    365a:	226c      	movs	r2, #108	; 0x6c
    365c:	485d      	ldr	r0, [pc, #372]	; (37d4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    365e:	4d58      	ldr	r5, [pc, #352]	; (37c0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    3660:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    3664:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    3668:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    366c:	f8df c190 	ldr.w	ip, [pc, #400]	; 3800 <set_arm_clock+0x2e8>
    3670:	ea0e 0c0c 	and.w	ip, lr, ip
    3674:	45d4      	cmp	ip, sl
    3676:	d009      	beq.n	368c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    3678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    367c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    3680:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    3684:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    3686:	682a      	ldr	r2, [r5, #0]
    3688:	2a00      	cmp	r2, #0
    368a:	dafc      	bge.n	3686 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    368c:	4a46      	ldr	r2, [pc, #280]	; (37a8 <set_arm_clock+0x290>)
    368e:	6915      	ldr	r5, [r2, #16]
    3690:	f005 0507 	and.w	r5, r5, #7
    3694:	429d      	cmp	r5, r3
    3696:	d003      	beq.n	36a0 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    3698:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    369a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    369c:	03dd      	lsls	r5, r3, #15
    369e:	d4fc      	bmi.n	369a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    36a0:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    36a4:	d009      	beq.n	36ba <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    36a6:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36aa:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    36ae:	4a3e      	ldr	r2, [pc, #248]	; (37a8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    36b0:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    36b2:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    36b4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    36b6:	0799      	lsls	r1, r3, #30
    36b8:	d4fc      	bmi.n	36b4 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    36ba:	4947      	ldr	r1, [pc, #284]	; (37d8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    36bc:	4a47      	ldr	r2, [pc, #284]	; (37dc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    36be:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    36c0:	4291      	cmp	r1, r2
    36c2:	d83c      	bhi.n	373e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    36c4:	4b46      	ldr	r3, [pc, #280]	; (37e0 <set_arm_clock+0x2c8>)
    36c6:	09c9      	lsrs	r1, r1, #7
    36c8:	fba3 3101 	umull	r3, r1, r3, r1
    36cc:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    36ce:	1e4b      	subs	r3, r1, #1
    36d0:	021b      	lsls	r3, r3, #8
    36d2:	ea86 0203 	eor.w	r2, r6, r3
    36d6:	f412 7f40 	tst.w	r2, #768	; 0x300
    36da:	d006      	beq.n	36ea <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    36dc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    36e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    36e4:	4a30      	ldr	r2, [pc, #192]	; (37a8 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    36e6:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    36e8:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    36ea:	4a2f      	ldr	r2, [pc, #188]	; (37a8 <set_arm_clock+0x290>)
    36ec:	6953      	ldr	r3, [r2, #20]
    36ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    36f2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    36f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
    36f6:	069b      	lsls	r3, r3, #26
    36f8:	d4fc      	bmi.n	36f4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    36fa:	4b3a      	ldr	r3, [pc, #232]	; (37e4 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    36fc:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    36fe:	fba3 2300 	umull	r2, r3, r3, r0
    3702:	f04f 32ff 	mov.w	r2, #4294967295
    3706:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    370a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    370e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    3712:	4a35      	ldr	r2, [pc, #212]	; (37e8 <set_arm_clock+0x2d0>)
    3714:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    3716:	4a35      	ldr	r2, [pc, #212]	; (37ec <set_arm_clock+0x2d4>)
    3718:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    371a:	4a35      	ldr	r2, [pc, #212]	; (37f0 <set_arm_clock+0x2d8>)
    371c:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    371e:	d208      	bcs.n	3732 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3720:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3724:	4a21      	ldr	r2, [pc, #132]	; (37ac <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3726:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    372a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    372c:	6813      	ldr	r3, [r2, #0]
    372e:	2b00      	cmp	r3, #0
    3730:	dafc      	bge.n	372c <set_arm_clock+0x214>
	}

	return frequency;
}
    3732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3736:	4673      	mov	r3, lr
    3738:	e762      	b.n	3600 <set_arm_clock+0xe8>
    373a:	2712      	movs	r7, #18
    373c:	e718      	b.n	3570 <set_arm_clock+0x58>
    373e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    3742:	2104      	movs	r1, #4
    3744:	e7c5      	b.n	36d2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3746:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    374a:	4820      	ldr	r0, [pc, #128]	; (37cc <set_arm_clock+0x2b4>)
    374c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    374e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3750:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3752:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    3756:	4a27      	ldr	r2, [pc, #156]	; (37f4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    3758:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3804 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    375c:	fba2 2000 	umull	r2, r0, r2, r0
    3760:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    3762:	4825      	ldr	r0, [pc, #148]	; (37f8 <set_arm_clock+0x2e0>)
    3764:	2a36      	cmp	r2, #54	; 0x36
    3766:	bf38      	it	cc
    3768:	2236      	movcc	r2, #54	; 0x36
    376a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    376e:	ea42 0a0a 	orr.w	sl, r2, sl
    3772:	e774      	b.n	365e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    3774:	ea4f 248c 	mov.w	r4, ip, lsl #10
    3778:	2300      	movs	r3, #0
    377a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    377e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    3782:	46ac      	mov	ip, r5
    3784:	e762      	b.n	364c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3786:	461d      	mov	r5, r3
    3788:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    378c:	4611      	mov	r1, r2
    378e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    3792:	e713      	b.n	35bc <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    3794:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    3796:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    379a:	4602      	mov	r2, r0
    379c:	4631      	mov	r1, r6
    379e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    37a0:	46e6      	mov	lr, ip
    37a2:	e753      	b.n	364c <set_arm_clock+0x134>
    37a4:	1f78a400 	.word	0x1f78a400
    37a8:	400fc000 	.word	0x400fc000
    37ac:	40080000 	.word	0x40080000
    37b0:	23c34600 	.word	0x23c34600
    37b4:	004cb223 	.word	0x004cb223
    37b8:	51eb851f 	.word	0x51eb851f
    37bc:	016e3600 	.word	0x016e3600
    37c0:	400d8000 	.word	0x400d8000
    37c4:	80003040 	.word	0x80003040
    37c8:	269fb1ff 	.word	0x269fb1ff
    37cc:	005b8d80 	.word	0x005b8d80
    37d0:	4df67eff 	.word	0x4df67eff
    37d4:	4d3f6400 	.word	0x4d3f6400
    37d8:	08f0d17f 	.word	0x08f0d17f
    37dc:	2cb4177f 	.word	0x2cb4177f
    37e0:	00e5109f 	.word	0x00e5109f
    37e4:	431bde83 	.word	0x431bde83
    37e8:	20001104 	.word	0x20001104
    37ec:	20001100 	.word	0x20001100
    37f0:	200039bc 	.word	0x200039bc
    37f4:	165e9f81 	.word	0x165e9f81
    37f8:	00b71b00 	.word	0x00b71b00
    37fc:	8000206c 	.word	0x8000206c
    3800:	8001307f 	.word	0x8001307f
    3804:	80002000 	.word	0x80002000

00003808 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    3808:	b900      	cbnz	r0, 380c <delay+0x4>
    380a:	4770      	bx	lr
{
    380c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3810:	2101      	movs	r1, #1
    3812:	4681      	mov	r9, r0
    3814:	4c21      	ldr	r4, [pc, #132]	; (389c <delay+0x94>)
    3816:	4d22      	ldr	r5, [pc, #136]	; (38a0 <delay+0x98>)
    3818:	4e22      	ldr	r6, [pc, #136]	; (38a4 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    381a:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    381e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3820:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3822:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3826:	2b00      	cmp	r3, #0
    3828:	d1f7      	bne.n	381a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    382a:	491f      	ldr	r1, [pc, #124]	; (38a8 <delay+0xa0>)
    382c:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    382e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3832:	f8df a078 	ldr.w	sl, [pc, #120]	; 38ac <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    3836:	1a1b      	subs	r3, r3, r0
    3838:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    383a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    383e:	f8da 2000 	ldr.w	r2, [sl]
    3842:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    3846:	455a      	cmp	r2, fp
    3848:	bf94      	ite	ls
    384a:	4490      	addls	r8, r2
    384c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    384e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3852:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3854:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3856:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    385a:	2b00      	cmp	r3, #0
    385c:	d1f7      	bne.n	384e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    385e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3860:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3864:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3866:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    386a:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    386e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    3872:	bf94      	ite	ls
    3874:	4462      	addls	r2, ip
    3876:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    387a:	eba2 0208 	sub.w	r2, r2, r8
    387e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    3882:	d306      	bcc.n	3892 <delay+0x8a>
			if (--msec == 0) return;
    3884:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3888:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    388c:	d1df      	bne.n	384e <delay+0x46>
}
    388e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    3892:	f001 fddf 	bl	5454 <yield>
		while ((micros() - start) >= 1000) {
    3896:	4904      	ldr	r1, [pc, #16]	; (38a8 <delay+0xa0>)
    3898:	e7d9      	b.n	384e <delay+0x46>
    389a:	bf00      	nop
    389c:	200039c8 	.word	0x200039c8
    38a0:	200039c4 	.word	0x200039c4
    38a4:	200039c0 	.word	0x200039c0
    38a8:	e0001000 	.word	0xe0001000
    38ac:	200039bc 	.word	0x200039bc

000038b0 <micros>:
{
    38b0:	b430      	push	{r4, r5}
    38b2:	4b0f      	ldr	r3, [pc, #60]	; (38f0 <micros+0x40>)
    38b4:	f04f 0c01 	mov.w	ip, #1
    38b8:	4d0e      	ldr	r5, [pc, #56]	; (38f4 <micros+0x44>)
    38ba:	4c0f      	ldr	r4, [pc, #60]	; (38f8 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    38bc:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    38c0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    38c2:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    38c4:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    38c8:	2a00      	cmp	r2, #0
    38ca:	d1f7      	bne.n	38bc <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    38cc:	4b0b      	ldr	r3, [pc, #44]	; (38fc <micros+0x4c>)
    38ce:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    38d0:	4a0b      	ldr	r2, [pc, #44]	; (3900 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    38d2:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    38d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    38d8:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    38da:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    38de:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    38e2:	bc30      	pop	{r4, r5}
    38e4:	428a      	cmp	r2, r1
    38e6:	bf94      	ite	ls
    38e8:	1880      	addls	r0, r0, r2
    38ea:	1840      	addhi	r0, r0, r1
    38ec:	4770      	bx	lr
    38ee:	bf00      	nop
    38f0:	200039c8 	.word	0x200039c8
    38f4:	200039c4 	.word	0x200039c4
    38f8:	200039c0 	.word	0x200039c0
    38fc:	e0001000 	.word	0xe0001000
    3900:	200039bc 	.word	0x200039bc

00003904 <digitalWrite>:
    3904:	2836      	cmp	r0, #54	; 0x36
    3906:	d816      	bhi.n	3936 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3908:	0102      	lsls	r2, r0, #4
    390a:	4b10      	ldr	r3, [pc, #64]	; (394c <digitalWrite+0x48>)
    390c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3910:	589b      	ldr	r3, [r3, r2]
{
    3912:	b410      	push	{r4}
	mask = p->mask;
    3914:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    3916:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3918:	4214      	tst	r4, r2
    391a:	d005      	beq.n	3928 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    391c:	b961      	cbnz	r1, 3938 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    391e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    3922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    3926:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3928:	6883      	ldr	r3, [r0, #8]
		if (val) {
    392a:	b151      	cbz	r1, 3942 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    392c:	4a08      	ldr	r2, [pc, #32]	; (3950 <digitalWrite+0x4c>)
}
    392e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3932:	601a      	str	r2, [r3, #0]
}
    3934:	4770      	bx	lr
    3936:	4770      	bx	lr
    3938:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    393c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3940:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3942:	4a04      	ldr	r2, [pc, #16]	; (3954 <digitalWrite+0x50>)
}
    3944:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3948:	601a      	str	r2, [r3, #0]
}
    394a:	4770      	bx	lr
    394c:	20000acc 	.word	0x20000acc
    3950:	0001f038 	.word	0x0001f038
    3954:	00013038 	.word	0x00013038

00003958 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    3958:	2836      	cmp	r0, #54	; 0x36
    395a:	d80b      	bhi.n	3974 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
    395c:	4b06      	ldr	r3, [pc, #24]	; (3978 <digitalRead+0x20>)
    395e:	0102      	lsls	r2, r0, #4
    3960:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    3964:	589a      	ldr	r2, [r3, r2]
    3966:	68c3      	ldr	r3, [r0, #12]
    3968:	6892      	ldr	r2, [r2, #8]
    396a:	421a      	tst	r2, r3
    396c:	bf14      	ite	ne
    396e:	2001      	movne	r0, #1
    3970:	2000      	moveq	r0, #0
    3972:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    3974:	2000      	movs	r0, #0
}
    3976:	4770      	bx	lr
    3978:	20000acc 	.word	0x20000acc

0000397c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    397c:	2836      	cmp	r0, #54	; 0x36
    397e:	d829      	bhi.n	39d4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    3980:	4b16      	ldr	r3, [pc, #88]	; (39dc <pinMode+0x60>)
    3982:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3984:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    3986:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    398a:	589a      	ldr	r2, [r3, r2]
{
    398c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    398e:	6853      	ldr	r3, [r2, #4]
    3990:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3992:	d00e      	beq.n	39b2 <pinMode+0x36>
    3994:	2904      	cmp	r1, #4
    3996:	d00c      	beq.n	39b2 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3998:	ea23 0304 	bic.w	r3, r3, r4
    399c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    399e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    39a0:	b1a9      	cbz	r1, 39ce <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    39a2:	2902      	cmp	r1, #2
    39a4:	d017      	beq.n	39d6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    39a6:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    39a8:	bf0c      	ite	eq
    39aa:	4a0d      	ldreq	r2, [pc, #52]	; (39e0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    39ac:	4a0d      	ldrne	r2, [pc, #52]	; (39e4 <pinMode+0x68>)
    39ae:	601a      	str	r2, [r3, #0]
    39b0:	e007      	b.n	39c2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    39b2:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    39b4:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    39b6:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    39b8:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    39ba:	d008      	beq.n	39ce <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    39bc:	f640 0238 	movw	r2, #2104	; 0x838
    39c0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    39c2:	6843      	ldr	r3, [r0, #4]
    39c4:	2215      	movs	r2, #21
}
    39c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    39ca:	601a      	str	r2, [r3, #0]
}
    39cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    39ce:	2238      	movs	r2, #56	; 0x38
    39d0:	601a      	str	r2, [r3, #0]
    39d2:	e7f6      	b.n	39c2 <pinMode+0x46>
    39d4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    39d6:	4a04      	ldr	r2, [pc, #16]	; (39e8 <pinMode+0x6c>)
    39d8:	601a      	str	r2, [r3, #0]
    39da:	e7f2      	b.n	39c2 <pinMode+0x46>
    39dc:	20000acc 	.word	0x20000acc
    39e0:	00013038 	.word	0x00013038
    39e4:	00010038 	.word	0x00010038
    39e8:	0001f038 	.word	0x0001f038

000039ec <dummy_isr>:
static void dummy_isr() {};
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop

000039f0 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    39f0:	2836      	cmp	r0, #54	; 0x36
    39f2:	d852      	bhi.n	3a9a <attachInterrupt+0xaa>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
    39f4:	0100      	lsls	r0, r0, #4
{
    39f6:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
    39f8:	4c31      	ldr	r4, [pc, #196]	; (3ac0 <attachInterrupt+0xd0>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
    39fa:	4d32      	ldr	r5, [pc, #200]	; (3ac4 <attachInterrupt+0xd4>)
	volatile uint32_t *gpio = portOutputRegister(pin);
    39fc:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
    39fe:	42ab      	cmp	r3, r5
    3a00:	d050      	beq.n	3aa4 <attachInterrupt+0xb4>
    3a02:	d843      	bhi.n	3a8c <attachInterrupt+0x9c>
    3a04:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
    3a08:	d045      	beq.n	3a96 <attachInterrupt+0xa6>
    3a0a:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
    3a0e:	42ab      	cmp	r3, r5
    3a10:	d13a      	bne.n	3a88 <attachInterrupt+0x98>
    3a12:	4d2d      	ldr	r5, [pc, #180]	; (3ac8 <attachInterrupt+0xd8>)
	volatile uint32_t *mux = portConfigRegister(pin);
    3a14:	4404      	add	r4, r0
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    3a16:	4e2d      	ldr	r6, [pc, #180]	; (3acc <attachInterrupt+0xdc>)
    3a18:	482d      	ldr	r0, [pc, #180]	; (3ad0 <attachInterrupt+0xe0>)
    3a1a:	6867      	ldr	r7, [r4, #4]
    3a1c:	f8c0 62b4 	str.w	r6, [r0, #692]	; 0x2b4
	uint32_t mask = digitalPinToBitMask(pin);
    3a20:	68e0      	ldr	r0, [r4, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
    3a22:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3a26:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
    3a2a:	2a04      	cmp	r2, #4
    3a2c:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
    3a30:	d82a      	bhi.n	3a88 <attachInterrupt+0x98>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3a32:	695c      	ldr	r4, [r3, #20]
    3a34:	ea24 0400 	bic.w	r4, r4, r0
    3a38:	615c      	str	r4, [r3, #20]
	*mux = 5;		// pin is GPIO
    3a3a:	f04f 0405 	mov.w	r4, #5
    3a3e:	603c      	str	r4, [r7, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
    3a40:	685c      	ldr	r4, [r3, #4]
    3a42:	ea24 0400 	bic.w	r4, r4, r0
    3a46:	605c      	str	r4, [r3, #4]
    3a48:	4c22      	ldr	r4, [pc, #136]	; (3ad4 <attachInterrupt+0xe4>)
    3a4a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
    3a4e:	fa90 f2a0 	rbit	r2, r0
    3a52:	fab2 f282 	clz	r2, r2
	table[index] = function;
    3a56:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
    3a5a:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
    3a5e:	d01d      	beq.n	3a9c <attachInterrupt+0xac>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
    3a60:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
    3a62:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
    3a64:	ea01 0105 	and.w	r1, r1, r5
    3a68:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
    3a6a:	dc1d      	bgt.n	3aa8 <attachInterrupt+0xb8>
			uint32_t shift = index * 2;
    3a6c:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
    3a6e:	2503      	movs	r5, #3
    3a70:	68d9      	ldr	r1, [r3, #12]
    3a72:	4094      	lsls	r4, r2
    3a74:	fa05 f202 	lsl.w	r2, r5, r2
    3a78:	ea21 0202 	bic.w	r2, r1, r2
    3a7c:	4322      	orrs	r2, r4
    3a7e:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
    3a80:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
    3a82:	695a      	ldr	r2, [r3, #20]
    3a84:	4302      	orrs	r2, r0
    3a86:	615a      	str	r2, [r3, #20]
}
    3a88:	bcf0      	pop	{r4, r5, r6, r7}
    3a8a:	4770      	bx	lr
	switch((uint32_t)gpio) {
    3a8c:	4d12      	ldr	r5, [pc, #72]	; (3ad8 <attachInterrupt+0xe8>)
    3a8e:	42ab      	cmp	r3, r5
    3a90:	d1fa      	bne.n	3a88 <attachInterrupt+0x98>
			table = isr_table_gpio4;
    3a92:	4d12      	ldr	r5, [pc, #72]	; (3adc <attachInterrupt+0xec>)
    3a94:	e7be      	b.n	3a14 <attachInterrupt+0x24>
			table = isr_table_gpio1;
    3a96:	4d12      	ldr	r5, [pc, #72]	; (3ae0 <attachInterrupt+0xf0>)
    3a98:	e7bc      	b.n	3a14 <attachInterrupt+0x24>
    3a9a:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
    3a9c:	69da      	ldr	r2, [r3, #28]
    3a9e:	4302      	orrs	r2, r0
    3aa0:	61da      	str	r2, [r3, #28]
    3aa2:	e7ed      	b.n	3a80 <attachInterrupt+0x90>
			table = isr_table_gpio3;
    3aa4:	4d0f      	ldr	r5, [pc, #60]	; (3ae4 <attachInterrupt+0xf4>)
    3aa6:	e7b5      	b.n	3a14 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
    3aa8:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3aaa:	2503      	movs	r5, #3
    3aac:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
    3aae:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
    3ab0:	4094      	lsls	r4, r2
    3ab2:	fa05 f202 	lsl.w	r2, r5, r2
    3ab6:	ea21 0202 	bic.w	r2, r1, r2
    3aba:	4322      	orrs	r2, r4
    3abc:	611a      	str	r2, [r3, #16]
    3abe:	e7df      	b.n	3a80 <attachInterrupt+0x90>
    3ac0:	20000acc 	.word	0x20000acc
    3ac4:	42008000 	.word	0x42008000
    3ac8:	20001a04 	.word	0x20001a04
    3acc:	00000021 	.word	0x00000021
    3ad0:	20001c00 	.word	0x20001c00
    3ad4:	20000398 	.word	0x20000398
    3ad8:	4200c000 	.word	0x4200c000
    3adc:	20001b04 	.word	0x20001b04
    3ae0:	20001984 	.word	0x20001984
    3ae4:	20001a84 	.word	0x20001a84

00003ae8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3ae8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3aea:	f7fc fbed 	bl	2c8 <setup>
	while (1) {
		loop();
    3aee:	f7fc ff65 	bl	9bc <loop>
		yield();
    3af2:	f001 fcaf 	bl	5454 <yield>
	while (1) {
    3af6:	e7fa      	b.n	3aee <main+0x6>

00003af8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3af8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3afa:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3afe:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3b02:	d16d      	bne.n	3be0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3b04:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3b06:	d341      	bcc.n	3b8c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3b08:	f851 3b04 	ldr.w	r3, [r1], #4
    3b0c:	f840 3b04 	str.w	r3, [r0], #4
    3b10:	f851 3b04 	ldr.w	r3, [r1], #4
    3b14:	f840 3b04 	str.w	r3, [r0], #4
    3b18:	f851 3b04 	ldr.w	r3, [r1], #4
    3b1c:	f840 3b04 	str.w	r3, [r0], #4
    3b20:	f851 3b04 	ldr.w	r3, [r1], #4
    3b24:	f840 3b04 	str.w	r3, [r0], #4
    3b28:	f851 3b04 	ldr.w	r3, [r1], #4
    3b2c:	f840 3b04 	str.w	r3, [r0], #4
    3b30:	f851 3b04 	ldr.w	r3, [r1], #4
    3b34:	f840 3b04 	str.w	r3, [r0], #4
    3b38:	f851 3b04 	ldr.w	r3, [r1], #4
    3b3c:	f840 3b04 	str.w	r3, [r0], #4
    3b40:	f851 3b04 	ldr.w	r3, [r1], #4
    3b44:	f840 3b04 	str.w	r3, [r0], #4
    3b48:	f851 3b04 	ldr.w	r3, [r1], #4
    3b4c:	f840 3b04 	str.w	r3, [r0], #4
    3b50:	f851 3b04 	ldr.w	r3, [r1], #4
    3b54:	f840 3b04 	str.w	r3, [r0], #4
    3b58:	f851 3b04 	ldr.w	r3, [r1], #4
    3b5c:	f840 3b04 	str.w	r3, [r0], #4
    3b60:	f851 3b04 	ldr.w	r3, [r1], #4
    3b64:	f840 3b04 	str.w	r3, [r0], #4
    3b68:	f851 3b04 	ldr.w	r3, [r1], #4
    3b6c:	f840 3b04 	str.w	r3, [r0], #4
    3b70:	f851 3b04 	ldr.w	r3, [r1], #4
    3b74:	f840 3b04 	str.w	r3, [r0], #4
    3b78:	f851 3b04 	ldr.w	r3, [r1], #4
    3b7c:	f840 3b04 	str.w	r3, [r0], #4
    3b80:	f851 3b04 	ldr.w	r3, [r1], #4
    3b84:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3b88:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3b8a:	d2bd      	bcs.n	3b08 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3b8c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3b8e:	d311      	bcc.n	3bb4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3b90:	f851 3b04 	ldr.w	r3, [r1], #4
    3b94:	f840 3b04 	str.w	r3, [r0], #4
    3b98:	f851 3b04 	ldr.w	r3, [r1], #4
    3b9c:	f840 3b04 	str.w	r3, [r0], #4
    3ba0:	f851 3b04 	ldr.w	r3, [r1], #4
    3ba4:	f840 3b04 	str.w	r3, [r0], #4
    3ba8:	f851 3b04 	ldr.w	r3, [r1], #4
    3bac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3bb0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3bb2:	d2ed      	bcs.n	3b90 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3bb4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3bb6:	d305      	bcc.n	3bc4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3bb8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3bbc:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3bc0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3bc2:	d2f9      	bcs.n	3bb8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3bc4:	3204      	adds	r2, #4
	beq	.Ldone
    3bc6:	d008      	beq.n	3bda <memcpy+0xe2>

	lsls	r2, r2, #31
    3bc8:	07d2      	lsls	r2, r2, #31
	itt ne
    3bca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3bcc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3bd0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3bd4:	d301      	bcc.n	3bda <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3bd6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3bd8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3bda:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3be0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3be2:	d313      	bcc.n	3c0c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3be4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3be6:	d08d      	beq.n	3b04 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3be8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3bec:	d08a      	beq.n	3b04 <memcpy+0xc>

	rsb	r3, #4
    3bee:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3bf2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3bf4:	07db      	lsls	r3, r3, #31
	itt ne
    3bf6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3bf8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3bfc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3c00:	d380      	bcc.n	3b04 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3c02:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3c06:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3c0a:	e77b      	b.n	3b04 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3c0c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3c0e:	d3d9      	bcc.n	3bc4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3c10:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3c12:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3c16:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3c1a:	d2f9      	bcs.n	3c10 <memcpy+0x118>

	ldrb	r3, [r1]
    3c1c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3c1e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3c20:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3c22:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3c24:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3c26:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3c28:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3c2a:	4770      	bx	lr

00003c2c <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
    3c2c:	f001 bd26 	b.w	567c <malloc>

00003c30 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    3c30:	f001 bd2c 	b.w	568c <free>

00003c34 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    3c34:	f101 3cff 	add.w	ip, r1, #4294967295
{
    3c38:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    3c3a:	4666      	mov	r6, ip
	int i=0, j;
    3c3c:	2400      	movs	r4, #0
    3c3e:	e000      	b.n	3c42 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3c40:	3401      	adds	r4, #1
		digit = val % radix;
    3c42:	fbb0 f5f2 	udiv	r5, r0, r2
    3c46:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c4a:	2b09      	cmp	r3, #9
    3c4c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    3c50:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3c54:	fa5f fe8e 	uxtb.w	lr, lr
    3c58:	bf98      	it	ls
    3c5a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    3c5e:	4290      	cmp	r0, r2
		val /= radix;
    3c60:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3c62:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    3c66:	d2eb      	bcs.n	3c40 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    3c68:	1c63      	adds	r3, r4, #1
    3c6a:	2200      	movs	r2, #0
    3c6c:	18c8      	adds	r0, r1, r3
    3c6e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    3c70:	b17c      	cbz	r4, 3c92 <ultoa+0x5e>
		t = buf[j];
    3c72:	4662      	mov	r2, ip
    3c74:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    3c78:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    3c7c:	eba1 030c 	sub.w	r3, r1, ip
    3c80:	3202      	adds	r2, #2
		buf[j] = buf[i];
    3c82:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    3c86:	3b01      	subs	r3, #1
    3c88:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    3c8a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    3c8c:	4423      	add	r3, r4
    3c8e:	429a      	cmp	r2, r3
    3c90:	dbef      	blt.n	3c72 <ultoa+0x3e>
	}
	return buf;
}
    3c92:	4608      	mov	r0, r1
    3c94:	bd70      	pop	{r4, r5, r6, pc}
    3c96:	bf00      	nop

00003c98 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    3c98:	eeb4 0a40 	vcmp.f32	s0, s0
{
    3c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    3ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    3ca4:	4616      	mov	r6, r2
	int awidth = abs(width);
    3ca6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    3caa:	4607      	mov	r7, r0
    3cac:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    3cb0:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    3cb4:	eeb0 8a40 	vmov.f32	s16, s0
    3cb8:	b085      	sub	sp, #20
	if (isnanf(val)) {
    3cba:	f180 8148 	bvs.w	3f4e <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    3cbe:	eef0 7ac0 	vabs.f32	s15, s0
    3cc2:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 3fd8 <dtostrf+0x340>
    3cc6:	eef4 7a47 	vcmp.f32	s15, s14
    3cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cce:	dd29      	ble.n	3d24 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    3cd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cd8:	f100 80ed 	bmi.w	3eb6 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3cdc:	2a03      	cmp	r2, #3
    3cde:	f340 8091 	ble.w	3e04 <dtostrf+0x16c>
    3ce2:	2303      	movs	r3, #3
		if (width<0) {
    3ce4:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3ce6:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    3cea:	f2c0 8085 	blt.w	3df8 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    3cee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    3cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cf6:	f100 816a 	bmi.w	3fce <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3cfa:	2149      	movs	r1, #73	; 0x49
    3cfc:	234e      	movs	r3, #78	; 0x4e
    3cfe:	2046      	movs	r0, #70	; 0x46
    3d00:	1cf4      	adds	r4, r6, #3
    3d02:	7031      	strb	r1, [r6, #0]
    3d04:	70b0      	strb	r0, [r6, #2]
    3d06:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    3d08:	b122      	cbz	r2, 3d14 <dtostrf+0x7c>
			*buf++ = ' ';
    3d0a:	4620      	mov	r0, r4
    3d0c:	2120      	movs	r1, #32
    3d0e:	4414      	add	r4, r2
    3d10:	f003 fbbe 	bl	7490 <memset>
			awidth--;
		}
		*buf = 0;
    3d14:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    3d16:	4620      	mov	r0, r4
		*buf = 0;
    3d18:	7023      	strb	r3, [r4, #0]
}
    3d1a:	b005      	add	sp, #20
    3d1c:	ecbd 8b02 	vpop	{d8}
    3d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    3d24:	4689      	mov	r9, r1
    3d26:	460d      	mov	r5, r1
    3d28:	aa02      	add	r2, sp, #8
    3d2a:	a901      	add	r1, sp, #4
    3d2c:	4648      	mov	r0, r9
    3d2e:	f003 f9f9 	bl	7124 <fcvtf>
	if (precision == 0 && decpt == 0) {
    3d32:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    3d36:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    3d38:	ea59 030a 	orrs.w	r3, r9, sl
    3d3c:	d172      	bne.n	3e24 <dtostrf+0x18c>
		decpt++;
    3d3e:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    3d40:	7802      	ldrb	r2, [r0, #0]
    3d42:	4ca6      	ldr	r4, [pc, #664]	; (3fdc <dtostrf+0x344>)
		decpt++;
    3d44:	469a      	mov	sl, r3
    3d46:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    3d48:	4ba5      	ldr	r3, [pc, #660]	; (3fe0 <dtostrf+0x348>)
		decpt++;
    3d4a:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    3d4c:	2a34      	cmp	r2, #52	; 0x34
    3d4e:	bf88      	it	hi
    3d50:	461c      	movhi	r4, r3
	if (sign) reqd++;
    3d52:	9b02      	ldr	r3, [sp, #8]
    3d54:	2b00      	cmp	r3, #0
    3d56:	d07d      	beq.n	3e54 <dtostrf+0x1bc>
    3d58:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    3d5c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    3d60:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    3d64:	f1bb 0f00 	cmp.w	fp, #0
    3d68:	f340 80a1 	ble.w	3eae <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    3d6c:	465a      	mov	r2, fp
    3d6e:	2120      	movs	r1, #32
    3d70:	4630      	mov	r0, r6
		e += pad;
    3d72:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    3d74:	f003 fb8c 	bl	7490 <memset>
    3d78:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    3d7c:	222d      	movs	r2, #45	; 0x2d
    3d7e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    3d82:	f1ba 0f00 	cmp.w	sl, #0
    3d86:	d177      	bne.n	3e78 <dtostrf+0x1e0>
    3d88:	f1b9 0f00 	cmp.w	r9, #0
    3d8c:	d006      	beq.n	3d9c <dtostrf+0x104>
		*p++ = '0';
    3d8e:	461a      	mov	r2, r3
    3d90:	2130      	movs	r1, #48	; 0x30
    3d92:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    3d96:	212e      	movs	r1, #46	; 0x2e
    3d98:	7059      	strb	r1, [r3, #1]
    3d9a:	4613      	mov	r3, r2
	while (p < e) {
    3d9c:	42ab      	cmp	r3, r5
    3d9e:	d21f      	bcs.n	3de0 <dtostrf+0x148>
		*p++ = *s++;
    3da0:	46a4      	mov	ip, r4
    3da2:	4619      	mov	r1, r3
    3da4:	f81c 2b01 	ldrb.w	r2, [ip], #1
    3da8:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3dac:	42a9      	cmp	r1, r5
    3dae:	d018      	beq.n	3de2 <dtostrf+0x14a>
    3db0:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    3db2:	202e      	movs	r0, #46	; 0x2e
    3db4:	3c01      	subs	r4, #1
    3db6:	e00b      	b.n	3dd0 <dtostrf+0x138>
    3db8:	7058      	strb	r0, [r3, #1]
    3dba:	3302      	adds	r3, #2
		if (p == e) break;
    3dbc:	3c01      	subs	r4, #1
	while (p < e) {
    3dbe:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3dc0:	4619      	mov	r1, r3
	while (p < e) {
    3dc2:	d20d      	bcs.n	3de0 <dtostrf+0x148>
		*p++ = *s++;
    3dc4:	f81c 2b01 	ldrb.w	r2, [ip], #1
    3dc8:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    3dcc:	42a9      	cmp	r1, r5
    3dce:	d008      	beq.n	3de2 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    3dd0:	9401      	str	r4, [sp, #4]
    3dd2:	2c00      	cmp	r4, #0
    3dd4:	d0f0      	beq.n	3db8 <dtostrf+0x120>
    3dd6:	460b      	mov	r3, r1
		if (p == e) break;
    3dd8:	3c01      	subs	r4, #1
	while (p < e) {
    3dda:	42ab      	cmp	r3, r5
		*p++ = *s++;
    3ddc:	4619      	mov	r1, r3
	while (p < e) {
    3dde:	d3f1      	bcc.n	3dc4 <dtostrf+0x12c>
    3de0:	461d      	mov	r5, r3
	if (width < 0) {
    3de2:	2f00      	cmp	r7, #0
    3de4:	db6b      	blt.n	3ebe <dtostrf+0x226>
	return buf;
    3de6:	4634      	mov	r4, r6
	*p = 0;
    3de8:	2300      	movs	r3, #0
}
    3dea:	4620      	mov	r0, r4
	*p = 0;
    3dec:	702b      	strb	r3, [r5, #0]
}
    3dee:	b005      	add	sp, #20
    3df0:	ecbd 8b02 	vpop	{d8}
    3df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    3df8:	b122      	cbz	r2, 3e04 <dtostrf+0x16c>
				*buf++ = ' ';
    3dfa:	4630      	mov	r0, r6
    3dfc:	2120      	movs	r1, #32
    3dfe:	4416      	add	r6, r2
    3e00:	f003 fb46 	bl	7490 <memset>
		if (val<0) *buf++ = '-';
    3e04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    3e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e0c:	f140 80bd 	bpl.w	3f8a <dtostrf+0x2f2>
    3e10:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3e12:	2249      	movs	r2, #73	; 0x49
    3e14:	234e      	movs	r3, #78	; 0x4e
    3e16:	2046      	movs	r0, #70	; 0x46
    3e18:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    3e1a:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3e1c:	70f0      	strb	r0, [r6, #3]
    3e1e:	7072      	strb	r2, [r6, #1]
    3e20:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3e22:	e777      	b.n	3d14 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    3e24:	f1ca 0300 	rsb	r3, sl, #0
    3e28:	4599      	cmp	r9, r3
    3e2a:	da57      	bge.n	3edc <dtostrf+0x244>
		decpt = -precision;
    3e2c:	f04f 0801 	mov.w	r8, #1
    3e30:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    3e34:	4c69      	ldr	r4, [pc, #420]	; (3fdc <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    3e36:	45c2      	cmp	sl, r8
		decpt = -precision;
    3e38:	4640      	mov	r0, r8
    3e3a:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    3e3e:	bfb8      	it	lt
    3e40:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    3e44:	f1ba 0f00 	cmp.w	sl, #0
    3e48:	d152      	bne.n	3ef0 <dtostrf+0x258>
	if (sign) reqd++;
    3e4a:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    3e4c:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    3e50:	2b00      	cmp	r3, #0
    3e52:	d181      	bne.n	3d58 <dtostrf+0xc0>
	pad = width - reqd;
    3e54:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    3e58:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    3e5c:	f1bb 0f00 	cmp.w	fp, #0
    3e60:	dd27      	ble.n	3eb2 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    3e62:	465a      	mov	r2, fp
    3e64:	2120      	movs	r1, #32
    3e66:	4630      	mov	r0, r6
		e += pad;
    3e68:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    3e6a:	f003 fb11 	bl	7490 <memset>
    3e6e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    3e72:	f1ba 0f00 	cmp.w	sl, #0
    3e76:	d087      	beq.n	3d88 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    3e78:	f1ba 0f00 	cmp.w	sl, #0
    3e7c:	da8e      	bge.n	3d9c <dtostrf+0x104>
    3e7e:	f1b9 0f00 	cmp.w	r9, #0
    3e82:	d08b      	beq.n	3d9c <dtostrf+0x104>
		*p++ = '0';
    3e84:	4618      	mov	r0, r3
		*p++ = '.';
    3e86:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    3e88:	2130      	movs	r1, #48	; 0x30
    3e8a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    3e8e:	705a      	strb	r2, [r3, #1]
    3e90:	4602      	mov	r2, r0
    3e92:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    3e94:	3301      	adds	r3, #1
			*p++ = '0';
    3e96:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    3e9a:	d1fb      	bne.n	3e94 <dtostrf+0x1fc>
			*p++ = '0';
    3e9c:	f1ba 0f00 	cmp.w	sl, #0
    3ea0:	9301      	str	r3, [sp, #4]
    3ea2:	f1ca 0300 	rsb	r3, sl, #0
    3ea6:	bfa8      	it	ge
    3ea8:	2301      	movge	r3, #1
    3eaa:	4403      	add	r3, r0
    3eac:	e776      	b.n	3d9c <dtostrf+0x104>
	if (pad > 0) {
    3eae:	4633      	mov	r3, r6
    3eb0:	e764      	b.n	3d7c <dtostrf+0xe4>
    3eb2:	4633      	mov	r3, r6
    3eb4:	e765      	b.n	3d82 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3eb6:	2a04      	cmp	r2, #4
    3eb8:	ddaa      	ble.n	3e10 <dtostrf+0x178>
    3eba:	2304      	movs	r3, #4
    3ebc:	e712      	b.n	3ce4 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    3ebe:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    3ec0:	f1b8 0f00 	cmp.w	r8, #0
    3ec4:	ea6f 0208 	mvn.w	r2, r8
    3ec8:	da8d      	bge.n	3de6 <dtostrf+0x14e>
    3eca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    3ece:	2120      	movs	r1, #32
    3ed0:	4628      	mov	r0, r5
    3ed2:	3201      	adds	r2, #1
    3ed4:	4415      	add	r5, r2
    3ed6:	f003 fadb 	bl	7490 <memset>
    3eda:	e784      	b.n	3de6 <dtostrf+0x14e>
	reqd = strlen(s);
    3edc:	f004 f890 	bl	8000 <strlen>
    3ee0:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    3ee2:	45c2      	cmp	sl, r8
    3ee4:	bfb8      	it	lt
    3ee6:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    3eea:	f1ba 0f00 	cmp.w	sl, #0
    3eee:	d0ac      	beq.n	3e4a <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    3ef0:	f1ba 0f00 	cmp.w	sl, #0
    3ef4:	f6bf af2d 	bge.w	3d52 <dtostrf+0xba>
    3ef8:	f1b9 0f00 	cmp.w	r9, #0
    3efc:	f43f af29 	beq.w	3d52 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    3f00:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    3f04:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    3f08:	4283      	cmp	r3, r0
    3f0a:	f4bf af22 	bcs.w	3d52 <dtostrf+0xba>
			while (newPrecision > 0) {
    3f0e:	f1b9 0f00 	cmp.w	r9, #0
    3f12:	dd05      	ble.n	3f20 <dtostrf+0x288>
				val *= 10.0f;
    3f14:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    3f18:	3d01      	subs	r5, #1
				val *= 10.0f;
    3f1a:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    3f1e:	d1fb      	bne.n	3f18 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    3f20:	aa02      	add	r2, sp, #8
    3f22:	eeb0 0a48 	vmov.f32	s0, s16
    3f26:	4628      	mov	r0, r5
    3f28:	a903      	add	r1, sp, #12
    3f2a:	f003 f8fb 	bl	7124 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    3f2e:	f8dd a004 	ldr.w	sl, [sp, #4]
    3f32:	9b03      	ldr	r3, [sp, #12]
    3f34:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    3f38:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    3f3a:	eba3 030a 	sub.w	r3, r3, sl
    3f3e:	4293      	cmp	r3, r2
    3f40:	f47f af07 	bne.w	3d52 <dtostrf+0xba>
    3f44:	f10a 0a01 	add.w	sl, sl, #1
    3f48:	f8cd a004 	str.w	sl, [sp, #4]
    3f4c:	e701      	b.n	3d52 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    3f4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f56:	bf4c      	ite	mi
    3f58:	2304      	movmi	r3, #4
    3f5a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3f5c:	4293      	cmp	r3, r2
    3f5e:	da22      	bge.n	3fa6 <dtostrf+0x30e>
		if (width<0) {
    3f60:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    3f62:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    3f66:	db18      	blt.n	3f9a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3f68:	ee10 3a10 	vmov	r3, s0
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	da02      	bge.n	3f76 <dtostrf+0x2de>
    3f70:	232d      	movs	r3, #45	; 0x2d
    3f72:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3f76:	234e      	movs	r3, #78	; 0x4e
    3f78:	2141      	movs	r1, #65	; 0x41
    3f7a:	1cf4      	adds	r4, r6, #3
    3f7c:	7033      	strb	r3, [r6, #0]
    3f7e:	7071      	strb	r1, [r6, #1]
    3f80:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3f82:	2a00      	cmp	r2, #0
    3f84:	f47f aec1 	bne.w	3d0a <dtostrf+0x72>
    3f88:	e6c4      	b.n	3d14 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    3f8a:	2149      	movs	r1, #73	; 0x49
    3f8c:	224e      	movs	r2, #78	; 0x4e
    3f8e:	2346      	movs	r3, #70	; 0x46
    3f90:	1cf4      	adds	r4, r6, #3
    3f92:	7031      	strb	r1, [r6, #0]
    3f94:	7072      	strb	r2, [r6, #1]
    3f96:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3f98:	e6bc      	b.n	3d14 <dtostrf+0x7c>
			while (awidth) {
    3f9a:	b122      	cbz	r2, 3fa6 <dtostrf+0x30e>
				*buf++ = ' ';
    3f9c:	4630      	mov	r0, r6
    3f9e:	2120      	movs	r1, #32
    3fa0:	4416      	add	r6, r2
    3fa2:	f003 fa75 	bl	7490 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3fa6:	ee18 3a10 	vmov	r3, s16
    3faa:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3fac:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3fb0:	db05      	blt.n	3fbe <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3fb2:	2241      	movs	r2, #65	; 0x41
    3fb4:	1cf4      	adds	r4, r6, #3
    3fb6:	7033      	strb	r3, [r6, #0]
    3fb8:	7072      	strb	r2, [r6, #1]
    3fba:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    3fbc:	e6aa      	b.n	3d14 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3fbe:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3fc0:	2241      	movs	r2, #65	; 0x41
    3fc2:	1d34      	adds	r4, r6, #4
    3fc4:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    3fc6:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    3fc8:	70b2      	strb	r2, [r6, #2]
    3fca:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    3fcc:	e6a2      	b.n	3d14 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    3fce:	232d      	movs	r3, #45	; 0x2d
    3fd0:	f806 3b01 	strb.w	r3, [r6], #1
    3fd4:	e691      	b.n	3cfa <dtostrf+0x62>
    3fd6:	bf00      	nop
    3fd8:	7f7fffff 	.word	0x7f7fffff
    3fdc:	20000e3c 	.word	0x20000e3c
    3fe0:	20000e40 	.word	0x20000e40

00003fe4 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3fe4:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    3fe6:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3fe8:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    3fec:	4619      	mov	r1, r3
{
    3fee:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3ff0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3ff4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3ff8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3ffc:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    4000:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    4004:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    4006:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    400a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    400e:	b29b      	uxth	r3, r3
    4010:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    4014:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4018:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    401c:	3101      	adds	r1, #1
    401e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    4022:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    4024:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    4026:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    402a:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    402c:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    402e:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    4030:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    4032:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    4036:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    4038:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    403a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    403c:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    403e:	d1eb      	bne.n	4018 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    4040:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4044:	b29b      	uxth	r3, r3
    4046:	f043 030f 	orr.w	r3, r3, #15
    404a:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    404e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    4052:	b29b      	uxth	r3, r3
    4054:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    4058:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    405c:	bd10      	pop	{r4, pc}
    405e:	bf00      	nop

00004060 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4060:	4b37      	ldr	r3, [pc, #220]	; (4140 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4062:	4a38      	ldr	r2, [pc, #224]	; (4144 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4064:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    4066:	4838      	ldr	r0, [pc, #224]	; (4148 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    4068:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    406c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    406e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    4070:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4074:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4078:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    407c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    4080:	430a      	orrs	r2, r1
    4082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    4086:	f7ff ffad 	bl	3fe4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    408a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    408e:	f7ff ffa9 	bl	3fe4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    4092:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    4096:	f7ff ffa5 	bl	3fe4 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    409a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    409e:	f7ff ffa1 	bl	3fe4 <flexpwm_init>
	for (i=0; i < 4; i++) {
    40a2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    40a4:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    40a8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    40ac:	4611      	mov	r1, r2
    40ae:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    40b2:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    40b6:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    40b8:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    40ba:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    40bc:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    40be:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    40c2:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    40c4:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    40c6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    40ca:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    40cc:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    40ce:	d1ee      	bne.n	40ae <pwm_init+0x4e>
    40d0:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    40d2:	481e      	ldr	r0, [pc, #120]	; (414c <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    40d4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    40d8:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    40dc:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    40de:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    40e2:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    40e6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    40ea:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    40ee:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    40f0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    40f2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    40f4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    40f6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    40fa:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    40fc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    40fe:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    4102:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4104:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    4106:	d1ee      	bne.n	40e6 <pwm_init+0x86>
    4108:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    410a:	4811      	ldr	r0, [pc, #68]	; (4150 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    410c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    410e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    4112:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4114:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4118:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    411c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    4120:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    4124:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    4126:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    4128:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    412a:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    412c:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    412e:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    4130:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    4132:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    4136:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    4138:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    413c:	d1ee      	bne.n	411c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    413e:	bd70      	pop	{r4, r5, r6, pc}
    4140:	400fc000 	.word	0x400fc000
    4144:	fc030000 	.word	0xfc030000
    4148:	403dc000 	.word	0x403dc000
    414c:	401e0000 	.word	0x401e0000
    4150:	401e4000 	.word	0x401e4000

00004154 <serialEvent1()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent1() __attribute__((weak));
void serialEvent1() {}		// No use calling this so disable if called...
    4154:	4770      	bx	lr
    4156:	bf00      	nop

00004158 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    4158:	4770      	bx	lr
    415a:	bf00      	nop

0000415c <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    415c:	4770      	bx	lr
    415e:	bf00      	nop

00004160 <serialEvent4()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent4() __attribute__((weak));
void serialEvent4() {}		// No use calling this so disable if called...
    4160:	4770      	bx	lr
    4162:	bf00      	nop

00004164 <serialEvent5()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent5() __attribute__((weak));
void serialEvent5() {}		// No use calling this so disable if called...
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <serialEvent6()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent6() __attribute__((weak));
void serialEvent6() {}		// No use calling this so disable if called...
    4168:	4770      	bx	lr
    416a:	bf00      	nop

0000416c <serialEvent7()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent7() __attribute__((weak));
void serialEvent7() {}		// No use calling this so disable if called...
    416c:	4770      	bx	lr
    416e:	bf00      	nop

00004170 <serialEvent8()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent8() __attribute__((weak));
void serialEvent8() {}		// No use calling this so disable if called...
    4170:	4770      	bx	lr
    4172:	bf00      	nop

00004174 <unused_interrupt_vector>:
	__disable_irq();
    4174:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    4176:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    417a:	4c4f      	ldr	r4, [pc, #316]	; (42b8 <unused_interrupt_vector+0x144>)
    417c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    4180:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    4184:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    4188:	4e4c      	ldr	r6, [pc, #304]	; (42bc <unused_interrupt_vector+0x148>)
	while (p < end) {
    418a:	4d4d      	ldr	r5, [pc, #308]	; (42c0 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    418c:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    4190:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    4194:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    4198:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    419c:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    41a0:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    41a4:	6993      	ldr	r3, [r2, #24]
    41a6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    41aa:	69d3      	ldr	r3, [r2, #28]
    41ac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    41b0:	f000 f8d0 	bl	4354 <tempmonGetTemp>
    41b4:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    41b8:	f001 f9c4 	bl	5544 <rtc_get>
	info->len = sizeof(*info) / 4;
    41bc:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    41be:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    41c2:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    41c6:	460b      	mov	r3, r1
    41c8:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    41cc:	493d      	ldr	r1, [pc, #244]	; (42c4 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    41ce:	1d30      	adds	r0, r6, #4
    41d0:	405a      	eors	r2, r3
    41d2:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    41d4:	f002 0301 	and.w	r3, r2, #1
    41d8:	3c01      	subs	r4, #1
    41da:	fb01 f303 	mul.w	r3, r1, r3
    41de:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    41e2:	d1f7      	bne.n	41d4 <unused_interrupt_vector+0x60>
	while (p < end) {
    41e4:	42a8      	cmp	r0, r5
    41e6:	d002      	beq.n	41ee <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    41e8:	6873      	ldr	r3, [r6, #4]
    41ea:	4606      	mov	r6, r0
    41ec:	e7ef      	b.n	41ce <unused_interrupt_vector+0x5a>
	info->crc = crc;
    41ee:	4b32      	ldr	r3, [pc, #200]	; (42b8 <unused_interrupt_vector+0x144>)
    41f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    41f4:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    41f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41fc:	492f      	ldr	r1, [pc, #188]	; (42bc <unused_interrupt_vector+0x148>)
    41fe:	4a32      	ldr	r2, [pc, #200]	; (42c8 <unused_interrupt_vector+0x154>)
    4200:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    4204:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    4208:	f3bf 8f4f 	dsb	sy
	asm("isb");
    420c:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4210:	4a2e      	ldr	r2, [pc, #184]	; (42cc <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    4212:	2502      	movs	r5, #2
    4214:	482e      	ldr	r0, [pc, #184]	; (42d0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    4216:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4218:	492e      	ldr	r1, [pc, #184]	; (42d4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    421a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    421e:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    4220:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    4222:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4224:	482c      	ldr	r0, [pc, #176]	; (42d8 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    4226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    422a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    422e:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4230:	680b      	ldr	r3, [r1, #0]
    4232:	4283      	cmp	r3, r0
    4234:	d83d      	bhi.n	42b2 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    4236:	4d26      	ldr	r5, [pc, #152]	; (42d0 <unused_interrupt_vector+0x15c>)
    4238:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    423a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    423e:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    4242:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    4244:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    4246:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    424a:	4924      	ldr	r1, [pc, #144]	; (42dc <unused_interrupt_vector+0x168>)
    424c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    4250:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    4254:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    4258:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    425c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    4260:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    4264:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    4268:	e001      	b.n	426e <unused_interrupt_vector+0xfa>
		usb_isr();
    426a:	f000 f965 	bl	4538 <usb_isr>
		if (PIT_TFLG0) {
    426e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    4272:	2b00      	cmp	r3, #0
    4274:	d0f9      	beq.n	426a <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    4276:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    4278:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    427c:	2c4f      	cmp	r4, #79	; 0x4f
    427e:	d9f4      	bls.n	426a <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    4280:	4b17      	ldr	r3, [pc, #92]	; (42e0 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    4282:	2002      	movs	r0, #2
    4284:	4917      	ldr	r1, [pc, #92]	; (42e4 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    4286:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    428a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    428e:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    4290:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    4294:	b93b      	cbnz	r3, 42a6 <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    4296:	4814      	ldr	r0, [pc, #80]	; (42e8 <unused_interrupt_vector+0x174>)
    4298:	4914      	ldr	r1, [pc, #80]	; (42ec <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    429a:	4a0d      	ldr	r2, [pc, #52]	; (42d0 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    429c:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    429e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    42a2:	2b00      	cmp	r3, #0
    42a4:	d0fa      	beq.n	429c <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    42a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    42aa:	4a11      	ldr	r2, [pc, #68]	; (42f0 <unused_interrupt_vector+0x17c>)
    42ac:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    42b0:	e7fe      	b.n	42b0 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    42b2:	f7ff f931 	bl	3518 <set_arm_clock>
    42b6:	e7be      	b.n	4236 <unused_interrupt_vector+0xc2>
    42b8:	2027ff00 	.word	0x2027ff00
    42bc:	2027ff80 	.word	0x2027ff80
    42c0:	2027ffa8 	.word	0x2027ffa8
    42c4:	edb88320 	.word	0xedb88320
    42c8:	2027ffa0 	.word	0x2027ffa0
    42cc:	400fc000 	.word	0x400fc000
    42d0:	40084000 	.word	0x40084000
    42d4:	20001104 	.word	0x20001104
    42d8:	0bcd3d80 	.word	0x0bcd3d80
    42dc:	00249f00 	.word	0x00249f00
    42e0:	400d9000 	.word	0x400d9000
    42e4:	402e0000 	.word	0x402e0000
    42e8:	400f8000 	.word	0x400f8000
    42ec:	0bad00f1 	.word	0x0bad00f1
    42f0:	05fa0004 	.word	0x05fa0004

000042f4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    42f4:	490a      	ldr	r1, [pc, #40]	; (4320 <_sbrk+0x2c>)
    42f6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    42f8:	b138      	cbz	r0, 430a <_sbrk+0x16>
{
    42fa:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    42fc:	1813      	adds	r3, r2, r0
    42fe:	4809      	ldr	r0, [pc, #36]	; (4324 <_sbrk+0x30>)
    4300:	4283      	cmp	r3, r0
    4302:	d804      	bhi.n	430e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    4304:	4610      	mov	r0, r2
                __brkval = prev + incr;
    4306:	600b      	str	r3, [r1, #0]
}
    4308:	bd08      	pop	{r3, pc}
    430a:	4610      	mov	r0, r2
    430c:	4770      	bx	lr
                        errno = ENOMEM;
    430e:	f003 fc6f 	bl	7bf0 <__errno>
    4312:	230c      	movs	r3, #12
                        return (void *)-1;
    4314:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    4318:	6003      	str	r3, [r0, #0]
}
    431a:	4610      	mov	r0, r2
    431c:	bd08      	pop	{r3, pc}
    431e:	bf00      	nop
    4320:	200013d8 	.word	0x200013d8
    4324:	20280000 	.word	0x20280000

00004328 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    4328:	2000      	movs	r0, #0
    432a:	4770      	bx	lr

0000432c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    432c:	f04f 30ff 	mov.w	r0, #4294967295
    4330:	4770      	bx	lr
    4332:	bf00      	nop

00004334 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    4334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    4338:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    433a:	604b      	str	r3, [r1, #4]
}
    433c:	4770      	bx	lr
    433e:	bf00      	nop

00004340 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    4340:	2001      	movs	r0, #1
    4342:	4770      	bx	lr

00004344 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    4344:	f04f 30ff 	mov.w	r0, #4294967295
    4348:	4770      	bx	lr
    434a:	bf00      	nop

0000434c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    434c:	bf30      	wfi
    434e:	e7fd      	b.n	434c <abort>

00004350 <Panic_Temp_isr>:
  unused_interrupt_vector();
    4350:	f7ff bf10 	b.w	4174 <unused_interrupt_vector>

00004354 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    4354:	4a12      	ldr	r2, [pc, #72]	; (43a0 <tempmonGetTemp+0x4c>)
    4356:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    435a:	075b      	lsls	r3, r3, #29
    435c:	d5fb      	bpl.n	4356 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    435e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4362:	4810      	ldr	r0, [pc, #64]	; (43a4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4364:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4368:	490f      	ldr	r1, [pc, #60]	; (43a8 <tempmonGetTemp+0x54>)
    436a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    436e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4372:	ed91 6a00 	vldr	s12, [r1]
    4376:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    437a:	4a0c      	ldr	r2, [pc, #48]	; (43ac <tempmonGetTemp+0x58>)
    437c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4380:	4b0b      	ldr	r3, [pc, #44]	; (43b0 <tempmonGetTemp+0x5c>)
    4382:	edd2 6a00 	vldr	s13, [r2]
    4386:	ee77 7ac7 	vsub.f32	s15, s15, s14
    438a:	ed93 7a00 	vldr	s14, [r3]
    438e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4392:	ee67 7a86 	vmul.f32	s15, s15, s12
    4396:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    439a:	ee37 0a40 	vsub.f32	s0, s14, s0
    439e:	4770      	bx	lr
    43a0:	400d8100 	.word	0x400d8100
    43a4:	200039ac 	.word	0x200039ac
    43a8:	200039b4 	.word	0x200039b4
    43ac:	200039b8 	.word	0x200039b8
    43b0:	200039b0 	.word	0x200039b0

000043b4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    43b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    43b6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    43b8:	b11b      	cbz	r3, 43c2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    43ba:	6853      	ldr	r3, [r2, #4]
    43bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    43c0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    43c2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    43c4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    43c6:	b33c      	cbz	r4, 4418 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    43c8:	4b1a      	ldr	r3, [pc, #104]	; (4434 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    43ca:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    43cc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    43d0:	420c      	tst	r4, r1
    43d2:	d11d      	bne.n	4410 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    43d4:	4e18      	ldr	r6, [pc, #96]	; (4438 <schedule_transfer+0x84>)
    43d6:	6877      	ldr	r7, [r6, #4]
    43d8:	e004      	b.n	43e4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    43da:	6874      	ldr	r4, [r6, #4]
    43dc:	1be4      	subs	r4, r4, r7
    43de:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    43e2:	d20b      	bcs.n	43fc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    43e4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    43e8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    43ec:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    43f0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    43f4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    43f8:	0464      	lsls	r4, r4, #17
    43fa:	d5ee      	bpl.n	43da <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    43fc:	400d      	ands	r5, r1
    43fe:	d107      	bne.n	4410 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    4400:	4c0c      	ldr	r4, [pc, #48]	; (4434 <schedule_transfer+0x80>)
		endpoint->status = 0;
    4402:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    4406:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    440a:	430b      	orrs	r3, r1
    440c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    4410:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    4412:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    4414:	bcf0      	pop	{r4, r5, r6, r7}
    4416:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    4418:	4d06      	ldr	r5, [pc, #24]	; (4434 <schedule_transfer+0x80>)
	endpoint->status = 0;
    441a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    441e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    4422:	430b      	orrs	r3, r1
    4424:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    4428:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    442a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    442c:	b662      	cpsie	i
}
    442e:	bcf0      	pop	{r4, r5, r6, r7}
    4430:	4770      	bx	lr
    4432:	bf00      	nop
    4434:	402e0000 	.word	0x402e0000
    4438:	e0001000 	.word	0xe0001000

0000443c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    443c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    443e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    4440:	b19d      	cbz	r5, 446a <run_callbacks+0x2e>
    4442:	4606      	mov	r6, r0
    4444:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    4446:	2400      	movs	r4, #0
    4448:	e003      	b.n	4452 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    444a:	6812      	ldr	r2, [r2, #0]
		count++;
    444c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    444e:	2a01      	cmp	r2, #1
    4450:	d00c      	beq.n	446c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    4452:	6853      	ldr	r3, [r2, #4]
    4454:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4458:	d0f7      	beq.n	444a <run_callbacks+0xe>
			ep->first_transfer = t;
    445a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    445c:	b12c      	cbz	r4, 446a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    445e:	4628      	mov	r0, r5
		ep->callback_function(first);
    4460:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    4462:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    4464:	4798      	blx	r3
	while (count) {
    4466:	3c01      	subs	r4, #1
    4468:	d1f9      	bne.n	445e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    446a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    446c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    4470:	e7f4      	b.n	445c <run_callbacks+0x20>
    4472:	bf00      	nop

00004474 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    4474:	b430      	push	{r4, r5}
	if (len > 0) {
    4476:	b9d9      	cbnz	r1, 44b0 <endpoint0_transmit.constprop.0+0x3c>
    4478:	4c1f      	ldr	r4, [pc, #124]	; (44f8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    447a:	4b20      	ldr	r3, [pc, #128]	; (44fc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    447c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    447e:	4a20      	ldr	r2, [pc, #128]	; (4500 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    4480:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4482:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    4486:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4488:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    448a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    448e:	2480      	movs	r4, #128	; 0x80
    4490:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4492:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    4496:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    449a:	481a      	ldr	r0, [pc, #104]	; (4504 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    449c:	432b      	orrs	r3, r5
    449e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    44a2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    44a4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    44a8:	2b00      	cmp	r3, #0
    44aa:	d1fb      	bne.n	44a4 <endpoint0_transmit.constprop.0+0x30>
}
    44ac:	bc30      	pop	{r4, r5}
    44ae:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    44b0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    44b2:	4b15      	ldr	r3, [pc, #84]	; (4508 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    44b4:	4c10      	ldr	r4, [pc, #64]	; (44f8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    44b6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    44b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    44bc:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    44be:	4a10      	ldr	r2, [pc, #64]	; (4500 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    44c0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    44c2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    44c6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    44c8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    44ca:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    44ce:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    44d0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    44d2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    44d6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    44da:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    44dc:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    44de:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    44e0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    44e2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    44e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    44ea:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    44ee:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    44f2:	2b00      	cmp	r3, #0
    44f4:	d1fb      	bne.n	44ee <endpoint0_transmit.constprop.0+0x7a>
    44f6:	e7c0      	b.n	447a <endpoint0_transmit.constprop.0+0x6>
    44f8:	20000000 	.word	0x20000000
    44fc:	20001ec0 	.word	0x20001ec0
    4500:	402e0000 	.word	0x402e0000
    4504:	20002edc 	.word	0x20002edc
    4508:	20001ee0 	.word	0x20001ee0

0000450c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    450c:	4908      	ldr	r1, [pc, #32]	; (4530 <usb_stop_sof_interrupts+0x24>)
    450e:	2201      	movs	r2, #1
    4510:	780b      	ldrb	r3, [r1, #0]
    4512:	fa02 f000 	lsl.w	r0, r2, r0
    4516:	ea23 0000 	bic.w	r0, r3, r0
    451a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    451c:	b930      	cbnz	r0, 452c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    451e:	4a05      	ldr	r2, [pc, #20]	; (4534 <usb_stop_sof_interrupts+0x28>)
    4520:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    4524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4528:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    452c:	4770      	bx	lr
    452e:	bf00      	nop
    4530:	200039ed 	.word	0x200039ed
    4534:	402e0000 	.word	0x402e0000

00004538 <usb_isr>:
{
    4538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    453c:	4c97      	ldr	r4, [pc, #604]	; (479c <usb_isr+0x264>)
{
    453e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    4540:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4544:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    4546:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    454a:	d553      	bpl.n	45f4 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    454c:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4550:	2a00      	cmp	r2, #0
    4552:	d04a      	beq.n	45ea <usb_isr+0xb2>
    4554:	4e92      	ldr	r6, [pc, #584]	; (47a0 <usb_isr+0x268>)
    4556:	f8df a260 	ldr.w	sl, [pc, #608]	; 47b8 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    455a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 47d0 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    455e:	f8df b274 	ldr.w	fp, [pc, #628]	; 47d4 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    4562:	f8df 8274 	ldr.w	r8, [pc, #628]	; 47d8 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    4566:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    456a:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    456e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    4576:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    457a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    457e:	049d      	lsls	r5, r3, #18
    4580:	d5f5      	bpl.n	456e <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    4582:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    458a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    458e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4592:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    4596:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    459a:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    459e:	d1fa      	bne.n	4596 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    45a0:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    45a2:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    45a4:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    45a8:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    45ac:	f000 81cf 	beq.w	494e <usb_isr+0x416>
    45b0:	f200 80db 	bhi.w	476a <usb_isr+0x232>
    45b4:	f240 3102 	movw	r1, #770	; 0x302
    45b8:	428b      	cmp	r3, r1
    45ba:	f000 81e7 	beq.w	498c <usb_isr+0x454>
    45be:	f200 809a 	bhi.w	46f6 <usb_isr+0x1be>
    45c2:	2b82      	cmp	r3, #130	; 0x82
    45c4:	f000 81cb 	beq.w	495e <usb_isr+0x426>
    45c8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    45cc:	f040 808a 	bne.w	46e4 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    45d0:	f010 0f78 	tst.w	r0, #120	; 0x78
    45d4:	b283      	uxth	r3, r0
    45d6:	f000 8203 	beq.w	49e0 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    45da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    45de:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    45e2:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    45e6:	2a00      	cmp	r2, #0
    45e8:	d1bd      	bne.n	4566 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    45ea:	4a6c      	ldr	r2, [pc, #432]	; (479c <usb_isr+0x264>)
    45ec:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    45f0:	2b00      	cmp	r3, #0
    45f2:	d142      	bne.n	467a <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    45f4:	067e      	lsls	r6, r7, #25
    45f6:	d516      	bpl.n	4626 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    45f8:	4b68      	ldr	r3, [pc, #416]	; (479c <usb_isr+0x264>)
    45fa:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    45fe:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    4602:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    4606:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    460a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    460e:	2c00      	cmp	r4, #0
    4610:	d1fb      	bne.n	460a <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    4612:	f04f 32ff 	mov.w	r2, #4294967295
    4616:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    461a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    461e:	f000 fd27 	bl	5070 <usb_serial_reset>
		endpointN_notify_mask = 0;
    4622:	4b60      	ldr	r3, [pc, #384]	; (47a4 <usb_isr+0x26c>)
    4624:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    4626:	01fc      	lsls	r4, r7, #7
    4628:	d503      	bpl.n	4632 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    462a:	4b5f      	ldr	r3, [pc, #380]	; (47a8 <usb_isr+0x270>)
    462c:	681b      	ldr	r3, [r3, #0]
    462e:	b103      	cbz	r3, 4632 <usb_isr+0xfa>
    4630:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    4632:	01b8      	lsls	r0, r7, #6
    4634:	d503      	bpl.n	463e <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    4636:	4b5d      	ldr	r3, [pc, #372]	; (47ac <usb_isr+0x274>)
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	b103      	cbz	r3, 463e <usb_isr+0x106>
    463c:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    463e:	0779      	lsls	r1, r7, #29
    4640:	d508      	bpl.n	4654 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    4642:	4b56      	ldr	r3, [pc, #344]	; (479c <usb_isr+0x264>)
    4644:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4648:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    464c:	d047      	beq.n	46de <usb_isr+0x1a6>
			usb_high_speed = 1;
    464e:	4b58      	ldr	r3, [pc, #352]	; (47b0 <usb_isr+0x278>)
    4650:	2201      	movs	r2, #1
    4652:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    4654:	4b51      	ldr	r3, [pc, #324]	; (479c <usb_isr+0x264>)
    4656:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    465a:	061a      	lsls	r2, r3, #24
    465c:	d50a      	bpl.n	4674 <usb_isr+0x13c>
    465e:	063b      	lsls	r3, r7, #24
    4660:	d508      	bpl.n	4674 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    4662:	4a54      	ldr	r2, [pc, #336]	; (47b4 <usb_isr+0x27c>)
    4664:	7813      	ldrb	r3, [r2, #0]
    4666:	b12b      	cbz	r3, 4674 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    4668:	3b01      	subs	r3, #1
    466a:	b2db      	uxtb	r3, r3
    466c:	7013      	strb	r3, [r2, #0]
    466e:	2b00      	cmp	r3, #0
    4670:	f000 8272 	beq.w	4b58 <usb_isr+0x620>
}
    4674:	b003      	add	sp, #12
    4676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    467a:	494f      	ldr	r1, [pc, #316]	; (47b8 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    467c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    4680:	6808      	ldr	r0, [r1, #0]
    4682:	4203      	tst	r3, r0
    4684:	f040 81d1 	bne.w	4a2a <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    4688:	4a46      	ldr	r2, [pc, #280]	; (47a4 <usb_isr+0x26c>)
    468a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    468c:	401c      	ands	r4, r3
    468e:	d0b1      	beq.n	45f4 <usb_isr+0xbc>
				while (tx) {
    4690:	ea5f 4814 	movs.w	r8, r4, lsr #16
    4694:	d010      	beq.n	46b8 <usb_isr+0x180>
    4696:	4e42      	ldr	r6, [pc, #264]	; (47a0 <usb_isr+0x268>)
					tx &= ~(1<<p);
    4698:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    469c:	fa98 f5a8 	rbit	r5, r8
    46a0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    46a4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    46a8:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    46ac:	3040      	adds	r0, #64	; 0x40
    46ae:	f7ff fec5 	bl	443c <run_callbacks>
				while (tx) {
    46b2:	ea38 0805 	bics.w	r8, r8, r5
    46b6:	d1f1      	bne.n	469c <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    46b8:	b2a4      	uxth	r4, r4
				while(rx) {
    46ba:	2c00      	cmp	r4, #0
    46bc:	d09a      	beq.n	45f4 <usb_isr+0xbc>
    46be:	4e38      	ldr	r6, [pc, #224]	; (47a0 <usb_isr+0x268>)
					rx &= ~(1<<p);
    46c0:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    46c4:	fa94 f5a4 	rbit	r5, r4
    46c8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    46cc:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    46d0:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    46d4:	f7ff feb2 	bl	443c <run_callbacks>
				while(rx) {
    46d8:	43ac      	bics	r4, r5
    46da:	d1f3      	bne.n	46c4 <usb_isr+0x18c>
    46dc:	e78a      	b.n	45f4 <usb_isr+0xbc>
			usb_high_speed = 0;
    46de:	4a34      	ldr	r2, [pc, #208]	; (47b0 <usb_isr+0x278>)
    46e0:	7013      	strb	r3, [r2, #0]
    46e2:	e7b7      	b.n	4654 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    46e4:	2b80      	cmp	r3, #128	; 0x80
    46e6:	f47f af78 	bne.w	45da <usb_isr+0xa2>
		reply_buffer[0] = 0;
    46ea:	4834      	ldr	r0, [pc, #208]	; (47bc <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    46ec:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    46ee:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    46f0:	f7ff fec0 	bl	4474 <endpoint0_transmit.constprop.0>
		return;
    46f4:	e775      	b.n	45e2 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    46f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    46fa:	f000 810b 	beq.w	4914 <usb_isr+0x3dc>
    46fe:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    4702:	2b01      	cmp	r3, #1
    4704:	f63f af69 	bhi.w	45da <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4708:	4b2d      	ldr	r3, [pc, #180]	; (47c0 <usb_isr+0x288>)
    470a:	685d      	ldr	r5, [r3, #4]
    470c:	2d00      	cmp	r5, #0
    470e:	f43f af64 	beq.w	45da <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4712:	fa1f fc8c 	uxth.w	ip, ip
    4716:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    471a:	e004      	b.n	4726 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    471c:	691d      	ldr	r5, [r3, #16]
    471e:	330c      	adds	r3, #12
    4720:	2d00      	cmp	r5, #0
    4722:	f43f af5a 	beq.w	45da <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    4726:	881a      	ldrh	r2, [r3, #0]
    4728:	4572      	cmp	r2, lr
    472a:	d1f7      	bne.n	471c <usb_isr+0x1e4>
    472c:	885a      	ldrh	r2, [r3, #2]
    472e:	4562      	cmp	r2, ip
    4730:	d1f4      	bne.n	471c <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    4732:	ea4f 221e 	mov.w	r2, lr, lsr #8
    4736:	2a03      	cmp	r2, #3
    4738:	f000 81a5 	beq.w	4a86 <usb_isr+0x54e>
					datalen = list->length;
    473c:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    473e:	0c00      	lsrs	r0, r0, #16
    4740:	4282      	cmp	r2, r0
    4742:	bf28      	it	cs
    4744:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    4746:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    474a:	f040 81a1 	bne.w	4a90 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    474e:	4b18      	ldr	r3, [pc, #96]	; (47b0 <usb_isr+0x278>)
    4750:	491c      	ldr	r1, [pc, #112]	; (47c4 <usb_isr+0x28c>)
    4752:	7818      	ldrb	r0, [r3, #0]
    4754:	4b1c      	ldr	r3, [pc, #112]	; (47c8 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4756:	9201      	str	r2, [sp, #4]
    4758:	2800      	cmp	r0, #0
    475a:	bf18      	it	ne
    475c:	4619      	movne	r1, r3
    475e:	481b      	ldr	r0, [pc, #108]	; (47cc <usb_isr+0x294>)
    4760:	f7ff f9ca 	bl	3af8 <memcpy>
    4764:	4d19      	ldr	r5, [pc, #100]	; (47cc <usb_isr+0x294>)
    4766:	9a01      	ldr	r2, [sp, #4]
    4768:	e1e1      	b.n	4b2e <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    476a:	f242 2121 	movw	r1, #8737	; 0x2221
    476e:	428b      	cmp	r3, r1
    4770:	d07c      	beq.n	486c <usb_isr+0x334>
    4772:	d933      	bls.n	47dc <usb_isr+0x2a4>
    4774:	f242 3121 	movw	r1, #8993	; 0x2321
    4778:	428b      	cmp	r3, r1
    477a:	f000 8081 	beq.w	4880 <usb_isr+0x348>
    477e:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    4782:	428b      	cmp	r3, r1
    4784:	f47f af29 	bne.w	45da <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    4788:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    478c:	b283      	uxth	r3, r0
    478e:	f47f af24 	bne.w	45da <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    4792:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    4796:	f363 0c0f 	bfi	ip, r3, #0, #16
    479a:	e7b5      	b.n	4708 <usb_isr+0x1d0>
    479c:	402e0000 	.word	0x402e0000
    47a0:	20000000 	.word	0x20000000
    47a4:	20002ee0 	.word	0x20002ee0
    47a8:	200039d8 	.word	0x200039d8
    47ac:	200039dc 	.word	0x200039dc
    47b0:	200039f4 	.word	0x200039f4
    47b4:	200039f5 	.word	0x200039f5
    47b8:	20002edc 	.word	0x20002edc
    47bc:	2000396c 	.word	0x2000396c
    47c0:	20000f48 	.word	0x20000f48
    47c4:	60002128 	.word	0x60002128
    47c8:	6000218c 	.word	0x6000218c
    47cc:	20200000 	.word	0x20200000
    47d0:	20002ed4 	.word	0x20002ed4
    47d4:	b8c6cf5d 	.word	0xb8c6cf5d
    47d8:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    47dc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    47e0:	d066      	beq.n	48b0 <usb_isr+0x378>
    47e2:	f242 0121 	movw	r1, #8225	; 0x2021
    47e6:	428b      	cmp	r3, r1
    47e8:	f47f aef7 	bne.w	45da <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    47ec:	0c03      	lsrs	r3, r0, #16
    47ee:	2b07      	cmp	r3, #7
    47f0:	f47f aef3 	bne.w	45da <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    47f4:	4bb2      	ldr	r3, [pc, #712]	; (4ac0 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    47f6:	49b3      	ldr	r1, [pc, #716]	; (4ac4 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    47f8:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    47fa:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    47fc:	49b2      	ldr	r1, [pc, #712]	; (4ac8 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    47fe:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    4800:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    4804:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    4808:	2201      	movs	r2, #1
    480a:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    480c:	4aaf      	ldr	r2, [pc, #700]	; (4acc <usb_isr+0x594>)
    480e:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4810:	4aaf      	ldr	r2, [pc, #700]	; (4ad0 <usb_isr+0x598>)
    4812:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    4814:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    4818:	f041 0101 	orr.w	r1, r1, #1
    481c:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4820:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4824:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4828:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    482a:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    482c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4830:	2b00      	cmp	r3, #0
    4832:	d1fb      	bne.n	482c <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    4834:	4aa7      	ldr	r2, [pc, #668]	; (4ad4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    4836:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4838:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    483a:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    483c:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    483e:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4840:	f248 0380 	movw	r3, #32896	; 0x8080
    4844:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4846:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    484a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    484e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4856:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    485a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    485e:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    4862:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4866:	2b00      	cmp	r3, #0
    4868:	d1fb      	bne.n	4862 <usb_isr+0x32a>
    486a:	e6ba      	b.n	45e2 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    486c:	b280      	uxth	r0, r0
    486e:	b938      	cbnz	r0, 4880 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4870:	4b99      	ldr	r3, [pc, #612]	; (4ad8 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    4872:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4876:	6819      	ldr	r1, [r3, #0]
    4878:	4b98      	ldr	r3, [pc, #608]	; (4adc <usb_isr+0x5a4>)
    487a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    487c:	4b98      	ldr	r3, [pc, #608]	; (4ae0 <usb_isr+0x5a8>)
    487e:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    4880:	4b94      	ldr	r3, [pc, #592]	; (4ad4 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    4882:	2200      	movs	r2, #0
    4884:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    4886:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4888:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    488a:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    488c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    488e:	2280      	movs	r2, #128	; 0x80
    4890:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4892:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4896:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    489a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    489e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    48a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    48a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    48aa:	2b00      	cmp	r3, #0
    48ac:	d1fb      	bne.n	48a6 <usb_isr+0x36e>
    48ae:	e698      	b.n	45e2 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    48b0:	f3c2 4207 	ubfx	r2, r2, #16, #8
    48b4:	4b8b      	ldr	r3, [pc, #556]	; (4ae4 <usb_isr+0x5ac>)
    48b6:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    48b8:	4b8b      	ldr	r3, [pc, #556]	; (4ae8 <usb_isr+0x5b0>)
    48ba:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    48be:	4b8b      	ldr	r3, [pc, #556]	; (4aec <usb_isr+0x5b4>)
    48c0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    48c4:	4b8a      	ldr	r3, [pc, #552]	; (4af0 <usb_isr+0x5b8>)
    48c6:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    48ca:	f000 fbd3 	bl	5074 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    48ce:	2280      	movs	r2, #128	; 0x80
    48d0:	4629      	mov	r1, r5
    48d2:	4888      	ldr	r0, [pc, #544]	; (4af4 <usb_isr+0x5bc>)
    48d4:	f002 fddc 	bl	7490 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    48d8:	4b87      	ldr	r3, [pc, #540]	; (4af8 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    48da:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    48dc:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    48e0:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    48e4:	4b7b      	ldr	r3, [pc, #492]	; (4ad4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    48e6:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    48e8:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    48ea:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    48ec:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    48ee:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    48f0:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    48f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    48f6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    48fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    48fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4902:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4906:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    490a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    490e:	2b00      	cmp	r3, #0
    4910:	d1fb      	bne.n	490a <usb_isr+0x3d2>
    4912:	e666      	b.n	45e2 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    4914:	4b6f      	ldr	r3, [pc, #444]	; (4ad4 <usb_isr+0x59c>)
    4916:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    4918:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    491a:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    491c:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    491e:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4920:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4922:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4924:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4928:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    492c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4934:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4938:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    493c:	2b00      	cmp	r3, #0
    493e:	d1fb      	bne.n	4938 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    4940:	0c13      	lsrs	r3, r2, #16
    4942:	065b      	lsls	r3, r3, #25
    4944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4948:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    494c:	e649      	b.n	45e2 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    494e:	4b65      	ldr	r3, [pc, #404]	; (4ae4 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    4950:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    4952:	486a      	ldr	r0, [pc, #424]	; (4afc <usb_isr+0x5c4>)
    4954:	781b      	ldrb	r3, [r3, #0]
    4956:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4958:	f7ff fd8c 	bl	4474 <endpoint0_transmit.constprop.0>
		return;
    495c:	e641      	b.n	45e2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    495e:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    4960:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    4964:	f47f ae39 	bne.w	45da <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    496c:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    4970:	4a62      	ldr	r2, [pc, #392]	; (4afc <usb_isr+0x5c4>)
    4972:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4974:	0618      	lsls	r0, r3, #24
    4976:	f100 809e 	bmi.w	4ab6 <usb_isr+0x57e>
    497a:	07cb      	lsls	r3, r1, #31
    497c:	d501      	bpl.n	4982 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    497e:	2301      	movs	r3, #1
    4980:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    4982:	2102      	movs	r1, #2
    4984:	485d      	ldr	r0, [pc, #372]	; (4afc <usb_isr+0x5c4>)
    4986:	f7ff fd75 	bl	4474 <endpoint0_transmit.constprop.0>
		return;
    498a:	e62a      	b.n	45e2 <usb_isr+0xaa>
		if (endpoint > 7) break;
    498c:	f010 0f78 	tst.w	r0, #120	; 0x78
    4990:	b283      	uxth	r3, r0
    4992:	f47f ae22 	bne.w	45da <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    499a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    499e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    49a2:	bf14      	ite	ne
    49a4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    49a8:	f043 0301 	orreq.w	r3, r3, #1
    49ac:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    49b0:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    49b2:	4b48      	ldr	r3, [pc, #288]	; (4ad4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    49b4:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    49b6:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    49b8:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    49ba:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    49bc:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    49be:	2280      	movs	r2, #128	; 0x80
    49c0:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    49c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    49c6:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    49ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    49ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    49d2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    49d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    49da:	2b00      	cmp	r3, #0
    49dc:	d1fb      	bne.n	49d6 <usb_isr+0x49e>
    49de:	e600      	b.n	45e2 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    49e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    49e4:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    49e8:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    49ec:	bf14      	ite	ne
    49ee:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    49f2:	f023 0301 	biceq.w	r3, r3, #1
    49f6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    49fa:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    49fc:	4b35      	ldr	r3, [pc, #212]	; (4ad4 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    49fe:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4a00:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4a02:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4a04:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4a06:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4a08:	2280      	movs	r2, #128	; 0x80
    4a0a:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4a0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4a10:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4a14:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4a1c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4a20:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4a24:	2b00      	cmp	r3, #0
    4a26:	d1fb      	bne.n	4a20 <usb_isr+0x4e8>
    4a28:	e5db      	b.n	45e2 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    4a2a:	2000      	movs	r0, #0
    4a2c:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4a2e:	4926      	ldr	r1, [pc, #152]	; (4ac8 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4a30:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4a32:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4a34:	f242 0121 	movw	r1, #8225	; 0x2021
    4a38:	428c      	cmp	r4, r1
    4a3a:	f47f ae25 	bne.w	4688 <usb_isr+0x150>
    4a3e:	b280      	uxth	r0, r0
    4a40:	2800      	cmp	r0, #0
    4a42:	f47f ae21 	bne.w	4688 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4a46:	492e      	ldr	r1, [pc, #184]	; (4b00 <usb_isr+0x5c8>)
    4a48:	4c2e      	ldr	r4, [pc, #184]	; (4b04 <usb_isr+0x5cc>)
    4a4a:	c903      	ldmia	r1, {r0, r1}
    4a4c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    4a4e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4a50:	ea4f 4111 	mov.w	r1, r1, lsr #16
    4a54:	6020      	str	r0, [r4, #0]
    4a56:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    4a58:	f47f ae16 	bne.w	4688 <usb_isr+0x150>
	__disable_irq();
    4a5c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    4a5e:	482a      	ldr	r0, [pc, #168]	; (4b08 <usb_isr+0x5d0>)
    4a60:	7801      	ldrb	r1, [r0, #0]
    4a62:	f041 0108 	orr.w	r1, r1, #8
    4a66:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    4a68:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    4a6c:	060d      	lsls	r5, r1, #24
    4a6e:	d405      	bmi.n	4a7c <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4a70:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4a72:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4a74:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4a78:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    4a7c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4a7e:	4a23      	ldr	r2, [pc, #140]	; (4b0c <usb_isr+0x5d4>)
    4a80:	2150      	movs	r1, #80	; 0x50
    4a82:	7011      	strb	r1, [r2, #0]
    4a84:	e600      	b.n	4688 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    4a86:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    4a88:	782a      	ldrb	r2, [r5, #0]
    4a8a:	4282      	cmp	r2, r0
    4a8c:	bf28      	it	cs
    4a8e:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    4a90:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    4a94:	d144      	bne.n	4b20 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    4a96:	4b1e      	ldr	r3, [pc, #120]	; (4b10 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4a98:	4d1e      	ldr	r5, [pc, #120]	; (4b14 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    4a9a:	7818      	ldrb	r0, [r3, #0]
    4a9c:	491e      	ldr	r1, [pc, #120]	; (4b18 <usb_isr+0x5e0>)
    4a9e:	4b1f      	ldr	r3, [pc, #124]	; (4b1c <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4aa0:	9201      	str	r2, [sp, #4]
    4aa2:	2800      	cmp	r0, #0
    4aa4:	bf18      	it	ne
    4aa6:	4619      	movne	r1, r3
    4aa8:	4628      	mov	r0, r5
    4aaa:	f7ff f825 	bl	3af8 <memcpy>
					usb_descriptor_buffer[1] = 7;
    4aae:	2307      	movs	r3, #7
    4ab0:	706b      	strb	r3, [r5, #1]
    4ab2:	9a01      	ldr	r2, [sp, #4]
    4ab4:	e03b      	b.n	4b2e <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    4ab6:	03c9      	lsls	r1, r1, #15
    4ab8:	f53f af61 	bmi.w	497e <usb_isr+0x446>
    4abc:	e761      	b.n	4982 <usb_isr+0x44a>
    4abe:	bf00      	nop
    4ac0:	20001ee0 	.word	0x20001ee0
    4ac4:	20003ed4 	.word	0x20003ed4
    4ac8:	20002080 	.word	0x20002080
    4acc:	00070080 	.word	0x00070080
    4ad0:	20004ed4 	.word	0x20004ed4
    4ad4:	20001ec0 	.word	0x20001ec0
    4ad8:	200039c4 	.word	0x200039c4
    4adc:	200039d4 	.word	0x200039d4
    4ae0:	200039f2 	.word	0x200039f2
    4ae4:	200039f3 	.word	0x200039f3
    4ae8:	00cc0002 	.word	0x00cc0002
    4aec:	000200c8 	.word	0x000200c8
    4af0:	00c80002 	.word	0x00c80002
    4af4:	20000080 	.word	0x20000080
    4af8:	74d59319 	.word	0x74d59319
    4afc:	2000396c 	.word	0x2000396c
    4b00:	20002ed4 	.word	0x20002ed4
    4b04:	200039cc 	.word	0x200039cc
    4b08:	200039ed 	.word	0x200039ed
    4b0c:	200039f5 	.word	0x200039f5
    4b10:	200039f4 	.word	0x200039f4
    4b14:	20200000 	.word	0x20200000
    4b18:	6000218c 	.word	0x6000218c
    4b1c:	60002128 	.word	0x60002128
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    4b20:	4629      	mov	r1, r5
    4b22:	4d10      	ldr	r5, [pc, #64]	; (4b64 <usb_isr+0x62c>)
    4b24:	9201      	str	r2, [sp, #4]
    4b26:	4628      	mov	r0, r5
    4b28:	f7fe ffe6 	bl	3af8 <memcpy>
    4b2c:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4b2e:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    4b32:	4415      	add	r5, r2
	asm("dsb");
    4b34:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4b38:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4b3c:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    4b40:	3320      	adds	r3, #32
	} while (location < end_addr);
    4b42:	429d      	cmp	r5, r3
    4b44:	d8fa      	bhi.n	4b3c <usb_isr+0x604>
	asm("dsb");
    4b46:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4b4a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    4b4e:	4805      	ldr	r0, [pc, #20]	; (4b64 <usb_isr+0x62c>)
    4b50:	4611      	mov	r1, r2
    4b52:	f7ff fc8f 	bl	4474 <endpoint0_transmit.constprop.0>
				return;
    4b56:	e544      	b.n	45e2 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    4b58:	2003      	movs	r0, #3
    4b5a:	f7ff fcd7 	bl	450c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    4b5e:	f007 fdbf 	bl	c6e0 <___reboot_Teensyduino__veneer>
    4b62:	bf00      	nop
    4b64:	20200000 	.word	0x20200000

00004b68 <usb_config_rx>:
{
    4b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b6c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4b6e:	1e83      	subs	r3, r0, #2
    4b70:	2b02      	cmp	r3, #2
    4b72:	d901      	bls.n	4b78 <usb_config_rx+0x10>
}
    4b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4b78:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4bc8 <usb_config_rx+0x60>
    4b7c:	4615      	mov	r5, r2
    4b7e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    4b80:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4b82:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    4b86:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4b88:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    4b8c:	2100      	movs	r1, #0
    4b8e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4b92:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    4b94:	f002 fc7c 	bl	7490 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4b98:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    4b9c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4b9e:	0952      	lsrs	r2, r2, #5
    4ba0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    4ba4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    4ba8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4bac:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    4bb0:	2f00      	cmp	r7, #0
    4bb2:	d0df      	beq.n	4b74 <usb_config_rx+0xc>
    4bb4:	4a03      	ldr	r2, [pc, #12]	; (4bc4 <usb_config_rx+0x5c>)
    4bb6:	40b3      	lsls	r3, r6
    4bb8:	6811      	ldr	r1, [r2, #0]
    4bba:	430b      	orrs	r3, r1
    4bbc:	6013      	str	r3, [r2, #0]
}
    4bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bc2:	bf00      	nop
    4bc4:	20002ee0 	.word	0x20002ee0
    4bc8:	20000000 	.word	0x20000000

00004bcc <usb_config_tx>:
{
    4bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bd0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4bd2:	1e81      	subs	r1, r0, #2
    4bd4:	2902      	cmp	r1, #2
    4bd6:	d901      	bls.n	4bdc <usb_config_tx+0x10>
}
    4bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4bdc:	01c7      	lsls	r7, r0, #7
    4bde:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4c2c <usb_config_tx+0x60>
    4be2:	4692      	mov	sl, r2
    4be4:	4604      	mov	r4, r0
    4be6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    4be8:	223c      	movs	r2, #60	; 0x3c
    4bea:	2100      	movs	r1, #0
    4bec:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    4bee:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4bf2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    4bf4:	f108 0004 	add.w	r0, r8, #4
    4bf8:	f002 fc4a 	bl	7490 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4bfc:	faba f28a 	clz	r2, sl
    4c00:	0952      	lsrs	r2, r2, #5
    4c02:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    4c06:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    4c0a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    4c0c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4c10:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    4c14:	2e00      	cmp	r6, #0
    4c16:	d0df      	beq.n	4bd8 <usb_config_tx+0xc>
    4c18:	4b03      	ldr	r3, [pc, #12]	; (4c28 <usb_config_tx+0x5c>)
    4c1a:	3410      	adds	r4, #16
    4c1c:	6819      	ldr	r1, [r3, #0]
    4c1e:	40a2      	lsls	r2, r4
    4c20:	430a      	orrs	r2, r1
    4c22:	601a      	str	r2, [r3, #0]
}
    4c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c28:	20002ee0 	.word	0x20002ee0
    4c2c:	20000000 	.word	0x20000000

00004c30 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    4c30:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    4c32:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    4c34:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    4c36:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    4c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    4c3e:	b410      	push	{r4}
	transfer->next = 1;
    4c40:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    4c42:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    4c44:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    4c48:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    4c4a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    4c4e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    4c52:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    4c54:	6181      	str	r1, [r0, #24]
}
    4c56:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    4c5a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    4c5e:	4770      	bx	lr

00004c60 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4c60:	1e83      	subs	r3, r0, #2
{
    4c62:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4c64:	2b02      	cmp	r3, #2
    4c66:	d900      	bls.n	4c6a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    4c68:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4c6a:	4b06      	ldr	r3, [pc, #24]	; (4c84 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    4c6c:	f100 0110 	add.w	r1, r0, #16
    4c70:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4c74:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    4c78:	fa0c f101 	lsl.w	r1, ip, r1
    4c7c:	3040      	adds	r0, #64	; 0x40
    4c7e:	f7ff bb99 	b.w	43b4 <schedule_transfer>
    4c82:	bf00      	nop
    4c84:	20000000 	.word	0x20000000

00004c88 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4c88:	1e83      	subs	r3, r0, #2
{
    4c8a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4c8c:	2b02      	cmp	r3, #2
    4c8e:	d900      	bls.n	4c92 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    4c90:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    4c92:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    4c94:	4b02      	ldr	r3, [pc, #8]	; (4ca0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    4c96:	4081      	lsls	r1, r0
    4c98:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    4c9c:	f7ff bb8a 	b.w	43b4 <schedule_transfer>
    4ca0:	20000000 	.word	0x20000000

00004ca4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    4ca4:	6840      	ldr	r0, [r0, #4]
#endif
}
    4ca6:	4770      	bx	lr

00004ca8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4ca8:	4a12      	ldr	r2, [pc, #72]	; (4cf4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    4caa:	4b13      	ldr	r3, [pc, #76]	; (4cf8 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    4cac:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    4cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    4cb4:	4298      	cmp	r0, r3
{
    4cb6:	b510      	push	{r4, lr}
    4cb8:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    4cba:	d202      	bcs.n	4cc2 <usb_init_serialnumber+0x1a>
    4cbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4cc0:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    4cc2:	4c0e      	ldr	r4, [pc, #56]	; (4cfc <usb_init_serialnumber+0x54>)
    4cc4:	a901      	add	r1, sp, #4
    4cc6:	220a      	movs	r2, #10
    4cc8:	f7fe ffb4 	bl	3c34 <ultoa>
	for (i=0; i<10; i++) {
    4ccc:	a901      	add	r1, sp, #4
    4cce:	2300      	movs	r3, #0
    4cd0:	4620      	mov	r0, r4
		char c = buf[i];
    4cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    4cd6:	3301      	adds	r3, #1
		if (!c) break;
    4cd8:	b13a      	cbz	r2, 4cea <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    4cda:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    4cdc:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    4ce0:	d1f7      	bne.n	4cd2 <usb_init_serialnumber+0x2a>
    4ce2:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4ce4:	7023      	strb	r3, [r4, #0]
}
    4ce6:	b004      	add	sp, #16
    4ce8:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    4cea:	005b      	lsls	r3, r3, #1
    4cec:	b2db      	uxtb	r3, r3
    4cee:	7023      	strb	r3, [r4, #0]
}
    4cf0:	b004      	add	sp, #16
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	401f4400 	.word	0x401f4400
    4cf8:	00989680 	.word	0x00989680
    4cfc:	20001bcc 	.word	0x20001bcc

00004d00 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    4d00:	f000 bacc 	b.w	529c <usb_serial_flush_input>

00004d04 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4d04:	f000 bb5c 	b.w	53c0 <usb_serial_flush_output>

00004d08 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4d08:	f000 bb32 	b.w	5370 <usb_serial_write_buffer_free>

00004d0c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4d0c:	4608      	mov	r0, r1
    4d0e:	4611      	mov	r1, r2
    4d10:	f000 bb22 	b.w	5358 <usb_serial_write>

00004d14 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4d16:	4c14      	ldr	r4, [pc, #80]	; (4d68 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4d18:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4d1c:	4e13      	ldr	r6, [pc, #76]	; (4d6c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4d22:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4d26:	4f12      	ldr	r7, [pc, #72]	; (4d70 <rx_queue_transfer+0x5c>)
    4d28:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    4d2c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4d2e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4d32:	4621      	mov	r1, r4
    4d34:	883a      	ldrh	r2, [r7, #0]
    4d36:	4630      	mov	r0, r6
    4d38:	f7ff ff7a 	bl	4c30 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    4d3c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    4d3e:	4423      	add	r3, r4
	asm("dsb");
    4d40:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    4d44:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    4d48:	3420      	adds	r4, #32
	} while (location < end_addr);
    4d4a:	42a3      	cmp	r3, r4
    4d4c:	d8fa      	bhi.n	4d44 <rx_queue_transfer+0x30>
	asm("dsb");
    4d4e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4d52:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    4d56:	2003      	movs	r0, #3
    4d58:	4631      	mov	r1, r6
    4d5a:	f7ff ff95 	bl	4c88 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    4d62:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    4d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d68:	20200080 	.word	0x20200080
    4d6c:	20001f00 	.word	0x20001f00
    4d70:	200039e0 	.word	0x200039e0

00004d74 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4d74:	4b24      	ldr	r3, [pc, #144]	; (4e08 <rx_event+0x94>)
{
    4d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4d7a:	881c      	ldrh	r4, [r3, #0]
    4d7c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    4d7e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4d80:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4d84:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    4d86:	2c00      	cmp	r4, #0
    4d88:	dd24      	ble.n	4dd4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    4d8a:	4920      	ldr	r1, [pc, #128]	; (4e0c <rx_event+0x98>)
		if (head != rx_tail) {
    4d8c:	4820      	ldr	r0, [pc, #128]	; (4e10 <rx_event+0x9c>)
		uint32_t head = rx_head;
    4d8e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    4d90:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    4d92:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    4d94:	4e1f      	ldr	r6, [pc, #124]	; (4e14 <rx_event+0xa0>)
		if (head != rx_tail) {
    4d96:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    4d98:	481f      	ldr	r0, [pc, #124]	; (4e18 <rx_event+0xa4>)
		if (head != rx_tail) {
    4d9a:	d007      	beq.n	4dac <rx_event+0x38>
			uint32_t ii = rx_list[head];
    4d9c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    4da0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    4da4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    4da8:	4294      	cmp	r4, r2
    4daa:	d918      	bls.n	4dde <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4dac:	3301      	adds	r3, #1
		rx_index[i] = 0;
    4dae:	2200      	movs	r2, #0
		rx_count[i] = len;
    4db0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    4db4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    4db6:	4e19      	ldr	r6, [pc, #100]	; (4e1c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    4db8:	bf88      	it	hi
    4dba:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    4dbc:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    4dc0:	bf98      	it	ls
    4dc2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    4dc4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    4dc6:	4b16      	ldr	r3, [pc, #88]	; (4e20 <rx_event+0xac>)
		rx_head = head;
    4dc8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    4dca:	681a      	ldr	r2, [r3, #0]
    4dcc:	4414      	add	r4, r2
    4dce:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    4dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    4dd4:	4628      	mov	r0, r5
}
    4dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    4dda:	f7ff bf9b 	b.w	4d14 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4dde:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    4de2:	4910      	ldr	r1, [pc, #64]	; (4e24 <rx_event+0xb0>)
    4de4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    4de6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4de8:	4408      	add	r0, r1
    4dea:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    4dee:	f7fe fe83 	bl	3af8 <memcpy>
				rx_available += len;
    4df2:	4a0b      	ldr	r2, [pc, #44]	; (4e20 <rx_event+0xac>)
				rx_queue_transfer(i);
    4df4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    4df6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    4dfa:	6813      	ldr	r3, [r2, #0]
    4dfc:	4423      	add	r3, r4
}
    4dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    4e02:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    4e04:	f7ff bf86 	b.w	4d14 <rx_queue_transfer>
    4e08:	200039e0 	.word	0x200039e0
    4e0c:	200039eb 	.word	0x200039eb
    4e10:	200039ec 	.word	0x200039ec
    4e14:	20003980 	.word	0x20003980
    4e18:	200039a0 	.word	0x200039a0
    4e1c:	20003990 	.word	0x20003990
    4e20:	2000397c 	.word	0x2000397c
    4e24:	20200080 	.word	0x20200080

00004e28 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    4e28:	4b1d      	ldr	r3, [pc, #116]	; (4ea0 <usb_serial_flush_callback+0x78>)
    4e2a:	781a      	ldrb	r2, [r3, #0]
    4e2c:	2a00      	cmp	r2, #0
    4e2e:	d136      	bne.n	4e9e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    4e30:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4e34:	4a1b      	ldr	r2, [pc, #108]	; (4ea4 <usb_serial_flush_callback+0x7c>)
    4e36:	7812      	ldrb	r2, [r2, #0]
    4e38:	b38a      	cbz	r2, 4e9e <usb_serial_flush_callback+0x76>
{
    4e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    4e3e:	4d1a      	ldr	r5, [pc, #104]	; (4ea8 <usb_serial_flush_callback+0x80>)
    4e40:	882a      	ldrh	r2, [r5, #0]
    4e42:	b352      	cbz	r2, 4e9a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4e44:	4e19      	ldr	r6, [pc, #100]	; (4eac <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4e46:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    4e4a:	4f19      	ldr	r7, [pc, #100]	; (4eb0 <usb_serial_flush_callback+0x88>)
    4e4c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e4e:	4c19      	ldr	r4, [pc, #100]	; (4eb4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4e50:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4e54:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4e58:	4642      	mov	r2, r8
    4e5a:	4638      	mov	r0, r7
    4e5c:	4621      	mov	r1, r4
    4e5e:	f7ff fee7 	bl	4c30 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    4e62:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    4e66:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4e6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e6e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4e72:	3420      	adds	r4, #32
	} while (location < end_addr);
    4e74:	42a2      	cmp	r2, r4
    4e76:	d8fa      	bhi.n	4e6e <usb_serial_flush_callback+0x46>
	asm("dsb");
    4e78:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4e7c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4e80:	2004      	movs	r0, #4
    4e82:	4639      	mov	r1, r7
    4e84:	f7ff feec 	bl	4c60 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4e88:	7833      	ldrb	r3, [r6, #0]
    4e8a:	3301      	adds	r3, #1
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	2b03      	cmp	r3, #3
    4e90:	bf88      	it	hi
    4e92:	2300      	movhi	r3, #0
    4e94:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4e96:	2300      	movs	r3, #0
    4e98:	802b      	strh	r3, [r5, #0]
}
    4e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e9e:	4770      	bx	lr
    4ea0:	200039f1 	.word	0x200039f1
    4ea4:	200039f3 	.word	0x200039f3
    4ea8:	200039e2 	.word	0x200039e2
    4eac:	200039f0 	.word	0x200039f0
    4eb0:	20002000 	.word	0x20002000
    4eb4:	20201080 	.word	0x20201080

00004eb8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    4eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ebc:	b085      	sub	sp, #20
	while (size > 0) {
    4ebe:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4ec2:	2900      	cmp	r1, #0
    4ec4:	f000 80bf 	beq.w	5046 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    4ec8:	2300      	movs	r3, #0
    4eca:	4c60      	ldr	r4, [pc, #384]	; (504c <usb_serial_write.part.0+0x194>)
    4ecc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5068 <usb_serial_write.part.0+0x1b0>
    4ed0:	f8df a198 	ldr.w	sl, [pc, #408]	; 506c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    4ed4:	4f5e      	ldr	r7, [pc, #376]	; (5050 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    4ed6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    4ed8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    4eda:	4a5e      	ldr	r2, [pc, #376]	; (5054 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    4edc:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    4ede:	4b5e      	ldr	r3, [pc, #376]	; (5058 <usb_serial_write.part.0+0x1a0>)
    4ee0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    4ee2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    4ee6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    4eea:	2b00      	cmp	r3, #0
    4eec:	f040 80a7 	bne.w	503e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    4ef0:	461e      	mov	r6, r3
		int waiting=0;
    4ef2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    4ef4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    4ef6:	4648      	mov	r0, r9
    4ef8:	f7ff fed4 	bl	4ca4 <usb_transfer_status>
			if (!(status & 0x80)) {
    4efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    4f00:	f000 808c 	beq.w	501c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    4f04:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    4f08:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    4f0c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    4f10:	b905      	cbnz	r5, 4f14 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    4f12:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    4f14:	2b00      	cmp	r3, #0
    4f16:	d17d      	bne.n	5014 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    4f18:	683b      	ldr	r3, [r7, #0]
    4f1a:	1b9b      	subs	r3, r3, r6
    4f1c:	2b78      	cmp	r3, #120	; 0x78
    4f1e:	f200 8087 	bhi.w	5030 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    4f22:	4b4e      	ldr	r3, [pc, #312]	; (505c <usb_serial_write.part.0+0x1a4>)
    4f24:	781b      	ldrb	r3, [r3, #0]
    4f26:	2b00      	cmp	r3, #0
    4f28:	d074      	beq.n	5014 <usb_serial_write.part.0+0x15c>
			yield();
    4f2a:	f000 fa93 	bl	5454 <yield>
			tx_noautoflush = 1;
    4f2e:	2201      	movs	r2, #1
		while (!tx_available) {
    4f30:	f8b8 3000 	ldrh.w	r3, [r8]
    4f34:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    4f36:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    4f38:	2b00      	cmp	r3, #0
    4f3a:	d0dc      	beq.n	4ef6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4f3c:	4a46      	ldr	r2, [pc, #280]	; (5058 <usb_serial_write.part.0+0x1a0>)
    4f3e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4f42:	7811      	ldrb	r1, [r2, #0]
    4f44:	461a      	mov	r2, r3
    4f46:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    4f4a:	4d45      	ldr	r5, [pc, #276]	; (5060 <usb_serial_write.part.0+0x1a8>)
    4f4c:	02c9      	lsls	r1, r1, #11
    4f4e:	4428      	add	r0, r5
		if (size >= tx_available) {
    4f50:	9d01      	ldr	r5, [sp, #4]
    4f52:	4295      	cmp	r5, r2
    4f54:	d217      	bcs.n	4f86 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    4f56:	9303      	str	r3, [sp, #12]
    4f58:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    4f5c:	462a      	mov	r2, r5
    4f5e:	f7fe fdcb 	bl	3af8 <memcpy>
			tx_available -= size;
    4f62:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4f64:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    4f68:	1b5b      	subs	r3, r3, r5
    4f6a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4f6e:	4b3d      	ldr	r3, [pc, #244]	; (5064 <usb_serial_write.part.0+0x1ac>)
    4f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    4f74:	f3bf 8f4f 	dsb	sy
			sent += size;
    4f78:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    4f7a:	2300      	movs	r3, #0
			sent += size;
    4f7c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    4f7e:	7023      	strb	r3, [r4, #0]
}
    4f80:	b005      	add	sp, #20
    4f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4f86:	4b36      	ldr	r3, [pc, #216]	; (5060 <usb_serial_write.part.0+0x1a8>)
    4f88:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    4f8a:	9902      	ldr	r1, [sp, #8]
    4f8c:	f7fe fdb4 	bl	3af8 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4f90:	2300      	movs	r3, #0
    4f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4f96:	4629      	mov	r1, r5
    4f98:	4648      	mov	r0, r9
    4f9a:	f7ff fe49 	bl	4c30 <usb_prepare_transfer>
	asm("dsb");
    4f9e:	f3bf 8f4f 	dsb	sy
    4fa2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    4fa6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    4faa:	4293      	cmp	r3, r2
    4fac:	bf34      	ite	cc
    4fae:	2301      	movcc	r3, #1
    4fb0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    4fb2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4fb6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    4fba:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    4fbe:	3520      	adds	r5, #32
	} while (location < end_addr);
    4fc0:	42ab      	cmp	r3, r5
    4fc2:	d1fa      	bne.n	4fba <usb_serial_write.part.0+0x102>
	asm("dsb");
    4fc4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4fc8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4fcc:	2004      	movs	r0, #4
    4fce:	4649      	mov	r1, r9
    4fd0:	f7ff fe46 	bl	4c60 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4fd4:	4a20      	ldr	r2, [pc, #128]	; (5058 <usb_serial_write.part.0+0x1a0>)
    4fd6:	7813      	ldrb	r3, [r2, #0]
    4fd8:	3301      	adds	r3, #1
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	2b03      	cmp	r3, #3
    4fde:	bf84      	itt	hi
    4fe0:	2300      	movhi	r3, #0
    4fe2:	4a1d      	ldrhi	r2, [pc, #116]	; (5058 <usb_serial_write.part.0+0x1a0>)
    4fe4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4fe6:	f8b8 3000 	ldrh.w	r3, [r8]
    4fea:	9a01      	ldr	r2, [sp, #4]
    4fec:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    4fee:	9a00      	ldr	r2, [sp, #0]
    4ff0:	441a      	add	r2, r3
			size -= tx_available;
    4ff2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    4ff4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    4ff6:	9a02      	ldr	r2, [sp, #8]
    4ff8:	441a      	add	r2, r3
			tx_available = 0;
    4ffa:	2300      	movs	r3, #0
			data += tx_available;
    4ffc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    4ffe:	4a19      	ldr	r2, [pc, #100]	; (5064 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    5000:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    5004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    5008:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    500c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    500e:	2900      	cmp	r1, #0
    5010:	f47f af62 	bne.w	4ed8 <usb_serial_write.part.0+0x20>
	return sent;
    5014:	9800      	ldr	r0, [sp, #0]
}
    5016:	b005      	add	sp, #20
    5018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    501c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5020:	4b0d      	ldr	r3, [pc, #52]	; (5058 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    5022:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    5026:	7819      	ldrb	r1, [r3, #0]
				break;
    5028:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    502a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    502e:	e78a      	b.n	4f46 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    5030:	2301      	movs	r3, #1
				return sent;
    5032:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    5034:	f88a 3000 	strb.w	r3, [sl]
}
    5038:	b005      	add	sp, #20
    503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    503e:	461a      	mov	r2, r3
    5040:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    5044:	e77f      	b.n	4f46 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    5046:	9801      	ldr	r0, [sp, #4]
	return sent;
    5048:	e7e5      	b.n	5016 <usb_serial_write.part.0+0x15e>
    504a:	bf00      	nop
    504c:	200039f1 	.word	0x200039f1
    5050:	200039c4 	.word	0x200039c4
    5054:	20002000 	.word	0x20002000
    5058:	200039f0 	.word	0x200039f0
    505c:	200039f3 	.word	0x200039f3
    5060:	20201080 	.word	0x20201080
    5064:	402e0000 	.word	0x402e0000
    5068:	200039e2 	.word	0x200039e2
    506c:	200039ef 	.word	0x200039ef

00005070 <usb_serial_reset>:
}
    5070:	4770      	bx	lr
    5072:	bf00      	nop

00005074 <usb_serial_configure>:
	if (usb_high_speed) {
    5074:	4b2a      	ldr	r3, [pc, #168]	; (5120 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5076:	2100      	movs	r1, #0
    5078:	2280      	movs	r2, #128	; 0x80
    507a:	482a      	ldr	r0, [pc, #168]	; (5124 <usb_serial_configure+0xb0>)
{
    507c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    507e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    5080:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    5082:	4d29      	ldr	r5, [pc, #164]	; (5128 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    5084:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    5086:	4e29      	ldr	r6, [pc, #164]	; (512c <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    5088:	bf0c      	ite	eq
    508a:	2340      	moveq	r3, #64	; 0x40
    508c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    5090:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    5092:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    5094:	f002 f9fc 	bl	7490 <memset>
	tx_head = 0;
    5098:	4a25      	ldr	r2, [pc, #148]	; (5130 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    509a:	4621      	mov	r1, r4
	tx_available = 0;
    509c:	4b25      	ldr	r3, [pc, #148]	; (5134 <usb_serial_configure+0xc0>)
	tx_head = 0;
    509e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    50a0:	f44f 7280 	mov.w	r2, #256	; 0x100
    50a4:	4824      	ldr	r0, [pc, #144]	; (5138 <usb_serial_configure+0xc4>)
	tx_available = 0;
    50a6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    50a8:	f002 f9f2 	bl	7490 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    50ac:	4a23      	ldr	r2, [pc, #140]	; (513c <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    50ae:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    50b0:	4b23      	ldr	r3, [pc, #140]	; (5140 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    50b2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    50b4:	e9c2 4400 	strd	r4, r4, [r2]
    50b8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    50bc:	4a21      	ldr	r2, [pc, #132]	; (5144 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    50be:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    50c2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    50c4:	4a20      	ldr	r2, [pc, #128]	; (5148 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    50c6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    50ca:	4b20      	ldr	r3, [pc, #128]	; (514c <usb_serial_configure+0xd8>)
    50cc:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    50ce:	4623      	mov	r3, r4
	rx_available = 0;
    50d0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    50d2:	4622      	mov	r2, r4
    50d4:	f7ff fd7a 	bl	4bcc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    50d8:	4622      	mov	r2, r4
    50da:	8831      	ldrh	r1, [r6, #0]
    50dc:	2003      	movs	r0, #3
    50de:	4b1c      	ldr	r3, [pc, #112]	; (5150 <usb_serial_configure+0xdc>)
    50e0:	f7ff fd42 	bl	4b68 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    50e4:	4623      	mov	r3, r4
    50e6:	2201      	movs	r2, #1
    50e8:	8829      	ldrh	r1, [r5, #0]
    50ea:	2004      	movs	r0, #4
    50ec:	f7ff fd6e 	bl	4bcc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    50f0:	4620      	mov	r0, r4
    50f2:	3401      	adds	r4, #1
    50f4:	f7ff fe0e 	bl	4d14 <rx_queue_transfer>
    50f8:	2c08      	cmp	r4, #8
    50fa:	d1f9      	bne.n	50f0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    50fc:	4b15      	ldr	r3, [pc, #84]	; (5154 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    50fe:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    5100:	4815      	ldr	r0, [pc, #84]	; (5158 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    5102:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    5104:	4c15      	ldr	r4, [pc, #84]	; (515c <usb_serial_configure+0xe8>)
    5106:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    5108:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    510c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    5110:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    5114:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    5118:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    511c:	bd70      	pop	{r4, r5, r6, pc}
    511e:	bf00      	nop
    5120:	200039f4 	.word	0x200039f4
    5124:	20002000 	.word	0x20002000
    5128:	200039e4 	.word	0x200039e4
    512c:	200039e0 	.word	0x200039e0
    5130:	200039f0 	.word	0x200039f0
    5134:	200039e2 	.word	0x200039e2
    5138:	20001f00 	.word	0x20001f00
    513c:	20003980 	.word	0x20003980
    5140:	20003990 	.word	0x20003990
    5144:	200039eb 	.word	0x200039eb
    5148:	2000397c 	.word	0x2000397c
    514c:	200039ec 	.word	0x200039ec
    5150:	00004d75 	.word	0x00004d75
    5154:	402e0000 	.word	0x402e0000
    5158:	200039d8 	.word	0x200039d8
    515c:	00004e29 	.word	0x00004e29

00005160 <usb_serial_read>:
{
    5160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5164:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5168:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    516c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 5238 <usb_serial_read+0xd8>
{
    5170:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    5172:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    5176:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    5178:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    517c:	2900      	cmp	r1, #0
    517e:	d04f      	beq.n	5220 <usb_serial_read+0xc0>
    5180:	4680      	mov	r8, r0
    5182:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    5184:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    5186:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 523c <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    518a:	4b26      	ldr	r3, [pc, #152]	; (5224 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    518c:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    5190:	4925      	ldr	r1, [pc, #148]	; (5228 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    5196:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    519a:	d03f      	beq.n	521c <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    519c:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    519e:	4b23      	ldr	r3, [pc, #140]	; (522c <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    51a0:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    51a2:	bf28      	it	cs
    51a4:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    51a6:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    51a8:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    51ac:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    51b0:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    51b2:	4b1f      	ldr	r3, [pc, #124]	; (5230 <usb_serial_read+0xd0>)
    51b4:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    51b8:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    51bc:	42aa      	cmp	r2, r5
    51be:	d21c      	bcs.n	51fa <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    51c0:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    51c4:	4918      	ldr	r1, [pc, #96]	; (5228 <usb_serial_read+0xc8>)
			rx_available -= len;
    51c6:	4c1b      	ldr	r4, [pc, #108]	; (5234 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    51c8:	4461      	add	r1, ip
    51ca:	9201      	str	r2, [sp, #4]
    51cc:	f7fe fc94 	bl	3af8 <memcpy>
			rx_available -= len;
    51d0:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    51d2:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    51d6:	4658      	mov	r0, fp
			rx_index[i] += len;
    51d8:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    51da:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    51de:	442a      	add	r2, r5
			rx_available -= len;
    51e0:	4439      	add	r1, r7
			rx_index[i] += len;
    51e2:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    51e6:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    51e8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    51ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    51f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    51f4:	b003      	add	sp, #12
    51f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    51fa:	462a      	mov	r2, r5
			count += avail;
    51fc:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    51fe:	f7fe fc7b 	bl	3af8 <memcpy>
			rx_available -= avail;
    5202:	490c      	ldr	r1, [pc, #48]	; (5234 <usb_serial_read+0xd4>)
			rx_tail = tail;
    5204:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    5206:	4630      	mov	r0, r6
			rx_available -= avail;
    5208:	680a      	ldr	r2, [r1, #0]
			p += avail;
    520a:	44a8      	add	r8, r5
			rx_available -= avail;
    520c:	1b52      	subs	r2, r2, r5
    520e:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    5210:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    5214:	f7ff fd7e 	bl	4d14 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    5218:	45bb      	cmp	fp, r7
    521a:	d8b6      	bhi.n	518a <usb_serial_read+0x2a>
	return count;
    521c:	4638      	mov	r0, r7
    521e:	e7e3      	b.n	51e8 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    5220:	4608      	mov	r0, r1
    5222:	e7e1      	b.n	51e8 <usb_serial_read+0x88>
    5224:	200039eb 	.word	0x200039eb
    5228:	20200080 	.word	0x20200080
    522c:	200039a0 	.word	0x200039a0
    5230:	20003980 	.word	0x20003980
    5234:	2000397c 	.word	0x2000397c
    5238:	200039ec 	.word	0x200039ec
    523c:	20003990 	.word	0x20003990

00005240 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    5240:	4b0b      	ldr	r3, [pc, #44]	; (5270 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    5242:	4a0c      	ldr	r2, [pc, #48]	; (5274 <usb_serial_peekchar+0x34>)
    5244:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    5246:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    5248:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    524a:	428a      	cmp	r2, r1
    524c:	d00d      	beq.n	526a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    524e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    5250:	4809      	ldr	r0, [pc, #36]	; (5278 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5252:	4a0a      	ldr	r2, [pc, #40]	; (527c <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    5254:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    5256:	490a      	ldr	r1, [pc, #40]	; (5280 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    5258:	bf28      	it	cs
    525a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    525c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    525e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    5262:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    5266:	5c58      	ldrb	r0, [r3, r1]
    5268:	4770      	bx	lr
	if (tail == rx_head) return -1;
    526a:	f04f 30ff 	mov.w	r0, #4294967295
}
    526e:	4770      	bx	lr
    5270:	200039eb 	.word	0x200039eb
    5274:	200039ec 	.word	0x200039ec
    5278:	200039a0 	.word	0x200039a0
    527c:	20200080 	.word	0x20200080
    5280:	20003990 	.word	0x20003990

00005284 <usb_serial_available>:
	uint32_t n = rx_available;
    5284:	4b04      	ldr	r3, [pc, #16]	; (5298 <usb_serial_available+0x14>)
{
    5286:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    5288:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    528a:	b10c      	cbz	r4, 5290 <usb_serial_available+0xc>
}
    528c:	4620      	mov	r0, r4
    528e:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    5290:	f000 f8e0 	bl	5454 <yield>
}
    5294:	4620      	mov	r0, r4
    5296:	bd10      	pop	{r4, pc}
    5298:	2000397c 	.word	0x2000397c

0000529c <usb_serial_flush_input>:
{
    529c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    52a0:	4e14      	ldr	r6, [pc, #80]	; (52f4 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    52a2:	4d15      	ldr	r5, [pc, #84]	; (52f8 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    52a4:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    52a6:	782a      	ldrb	r2, [r5, #0]
    52a8:	4293      	cmp	r3, r2
    52aa:	d021      	beq.n	52f0 <usb_serial_flush_input+0x54>
    52ac:	b2dc      	uxtb	r4, r3
    52ae:	f8df 9050 	ldr.w	r9, [pc, #80]	; 5300 <usb_serial_flush_input+0x64>
    52b2:	f8df b050 	ldr.w	fp, [pc, #80]	; 5304 <usb_serial_flush_input+0x68>
    52b6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 5308 <usb_serial_flush_input+0x6c>
    52ba:	4f10      	ldr	r7, [pc, #64]	; (52fc <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    52bc:	3401      	adds	r4, #1
    52be:	2c08      	cmp	r4, #8
		rx_tail = tail;
    52c0:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    52c4:	d901      	bls.n	52ca <usb_serial_flush_input+0x2e>
    52c6:	2400      	movs	r4, #0
    52c8:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    52ca:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    52ce:	f8db 3000 	ldr.w	r3, [fp]
    52d2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    52d6:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    52da:	1a52      	subs	r2, r2, r1
    52dc:	1a9b      	subs	r3, r3, r2
    52de:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    52e2:	f7ff fd17 	bl	4d14 <rx_queue_transfer>
		rx_tail = tail;
    52e6:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    52ea:	782b      	ldrb	r3, [r5, #0]
    52ec:	42a3      	cmp	r3, r4
    52ee:	d1e5      	bne.n	52bc <usb_serial_flush_input+0x20>
}
    52f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52f4:	200039ec 	.word	0x200039ec
    52f8:	200039eb 	.word	0x200039eb
    52fc:	20003990 	.word	0x20003990
    5300:	200039a0 	.word	0x200039a0
    5304:	2000397c 	.word	0x2000397c
    5308:	20003980 	.word	0x20003980

0000530c <usb_serial_getchar>:
{
    530c:	b500      	push	{lr}
    530e:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    5310:	2101      	movs	r1, #1
    5312:	f10d 0007 	add.w	r0, sp, #7
    5316:	f7ff ff23 	bl	5160 <usb_serial_read>
    531a:	b120      	cbz	r0, 5326 <usb_serial_getchar+0x1a>
    531c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    5320:	b003      	add	sp, #12
    5322:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    5326:	f04f 30ff 	mov.w	r0, #4294967295
    532a:	e7f9      	b.n	5320 <usb_serial_getchar+0x14>

0000532c <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    532c:	4b09      	ldr	r3, [pc, #36]	; (5354 <usb_serial_putchar+0x28>)
{
    532e:	b500      	push	{lr}
    5330:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    5332:	781b      	ldrb	r3, [r3, #0]
{
    5334:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    5338:	b13b      	cbz	r3, 534a <usb_serial_putchar+0x1e>
    533a:	2101      	movs	r1, #1
    533c:	f10d 0007 	add.w	r0, sp, #7
    5340:	f7ff fdba 	bl	4eb8 <usb_serial_write.part.0>
}
    5344:	b003      	add	sp, #12
    5346:	f85d fb04 	ldr.w	pc, [sp], #4
    534a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    534e:	b003      	add	sp, #12
    5350:	f85d fb04 	ldr.w	pc, [sp], #4
    5354:	200039f3 	.word	0x200039f3

00005358 <usb_serial_write>:
	if (!usb_configuration) return 0;
    5358:	4b04      	ldr	r3, [pc, #16]	; (536c <usb_serial_write+0x14>)
    535a:	781b      	ldrb	r3, [r3, #0]
    535c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5360:	b10b      	cbz	r3, 5366 <usb_serial_write+0xe>
    5362:	f7ff bda9 	b.w	4eb8 <usb_serial_write.part.0>
}
    5366:	4610      	mov	r0, r2
    5368:	4770      	bx	lr
    536a:	bf00      	nop
    536c:	200039f3 	.word	0x200039f3

00005370 <usb_serial_write_buffer_free>:
{
    5370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    5374:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    5376:	f8df 8044 	ldr.w	r8, [pc, #68]	; 53bc <usb_serial_write_buffer_free+0x4c>
    537a:	2301      	movs	r3, #1
    537c:	4d0d      	ldr	r5, [pc, #52]	; (53b4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    537e:	4627      	mov	r7, r4
    5380:	4e0d      	ldr	r6, [pc, #52]	; (53b8 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    5382:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    5386:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5388:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    538a:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    538c:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    538e:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    5392:	d005      	beq.n	53a0 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5394:	f7ff fc86 	bl	4ca4 <usb_transfer_status>
    5398:	0603      	lsls	r3, r0, #24
    539a:	bf58      	it	pl
    539c:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    53a0:	2c04      	cmp	r4, #4
    53a2:	d1f0      	bne.n	5386 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    53a4:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    53a8:	2300      	movs	r3, #0
}
    53aa:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    53ac:	f888 3000 	strb.w	r3, [r8]
}
    53b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53b4:	20002000 	.word	0x20002000
    53b8:	200039f0 	.word	0x200039f0
    53bc:	200039f1 	.word	0x200039f1

000053c0 <usb_serial_flush_output>:
{
    53c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    53c4:	4b1d      	ldr	r3, [pc, #116]	; (543c <usb_serial_flush_output+0x7c>)
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	b113      	cbz	r3, 53d0 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    53ca:	4d1d      	ldr	r5, [pc, #116]	; (5440 <usb_serial_flush_output+0x80>)
    53cc:	882a      	ldrh	r2, [r5, #0]
    53ce:	b90a      	cbnz	r2, 53d4 <usb_serial_flush_output+0x14>
}
    53d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    53d4:	4e1b      	ldr	r6, [pc, #108]	; (5444 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    53d6:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    53da:	491b      	ldr	r1, [pc, #108]	; (5448 <usb_serial_flush_output+0x88>)
    53dc:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    53de:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    53e0:	4c1a      	ldr	r4, [pc, #104]	; (544c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    53e2:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    53e6:	4f1a      	ldr	r7, [pc, #104]	; (5450 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    53e8:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    53ec:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    53ee:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    53f0:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    53f2:	4621      	mov	r1, r4
    53f4:	2300      	movs	r3, #0
    53f6:	f7ff fc1b 	bl	4c30 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    53fa:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    53fe:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5406:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    540a:	3420      	adds	r4, #32
	} while (location < end_addr);
    540c:	42a2      	cmp	r2, r4
    540e:	d8fa      	bhi.n	5406 <usb_serial_flush_output+0x46>
	asm("dsb");
    5410:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5414:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    5418:	2004      	movs	r0, #4
    541a:	4641      	mov	r1, r8
    541c:	f7ff fc20 	bl	4c60 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5420:	7833      	ldrb	r3, [r6, #0]
    5422:	3301      	adds	r3, #1
    5424:	b2db      	uxtb	r3, r3
    5426:	2b03      	cmp	r3, #3
    5428:	bf88      	it	hi
    542a:	2300      	movhi	r3, #0
    542c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    542e:	2300      	movs	r3, #0
    5430:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    5432:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    5436:	703b      	strb	r3, [r7, #0]
}
    5438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    543c:	200039f3 	.word	0x200039f3
    5440:	200039e2 	.word	0x200039e2
    5444:	200039f0 	.word	0x200039f0
    5448:	20002000 	.word	0x20002000
    544c:	20201080 	.word	0x20201080
    5450:	200039f1 	.word	0x200039f1

00005454 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    5458:	4e32      	ldr	r6, [pc, #200]	; (5524 <yield+0xd0>)
    545a:	7833      	ldrb	r3, [r6, #0]
    545c:	b163      	cbz	r3, 5478 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    545e:	4f32      	ldr	r7, [pc, #200]	; (5528 <yield+0xd4>)
    5460:	783a      	ldrb	r2, [r7, #0]
    5462:	b94a      	cbnz	r2, 5478 <yield+0x24>
	running = 1;
    5464:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    5466:	07d9      	lsls	r1, r3, #31
	running = 1;
    5468:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    546a:	d444      	bmi.n	54f6 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    546c:	079a      	lsls	r2, r3, #30
    546e:	d426      	bmi.n	54be <yield+0x6a>

	running = 0;
    5470:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5472:	075b      	lsls	r3, r3, #29
	running = 0;
    5474:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5476:	d401      	bmi.n	547c <yield+0x28>
	
};
    5478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    547c:	4b2b      	ldr	r3, [pc, #172]	; (552c <yield+0xd8>)
    547e:	681a      	ldr	r2, [r3, #0]
    5480:	2a00      	cmp	r2, #0
    5482:	d0f9      	beq.n	5478 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5484:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    5488:	2a00      	cmp	r2, #0
    548a:	d1f5      	bne.n	5478 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    548c:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    5490:	b672      	cpsid	i
		EventResponder *first = firstYield;
    5492:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5494:	2800      	cmp	r0, #0
    5496:	d03b      	beq.n	5510 <yield+0xbc>
		if (runningFromYield) {
    5498:	4c25      	ldr	r4, [pc, #148]	; (5530 <yield+0xdc>)
    549a:	7821      	ldrb	r1, [r4, #0]
    549c:	2900      	cmp	r1, #0
    549e:	d137      	bne.n	5510 <yield+0xbc>
		runningFromYield = true;
    54a0:	2201      	movs	r2, #1
    54a2:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    54a4:	6942      	ldr	r2, [r0, #20]
    54a6:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    54a8:	2a00      	cmp	r2, #0
    54aa:	d038      	beq.n	551e <yield+0xca>
			firstYield->_prev = nullptr;
    54ac:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    54ae:	b905      	cbnz	r5, 54b2 <yield+0x5e>
    54b0:	b662      	cpsie	i
		first->_triggered = false;
    54b2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    54b4:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    54b6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    54b8:	4798      	blx	r3
		runningFromYield = false;
    54ba:	7025      	strb	r5, [r4, #0]
    54bc:	e7dc      	b.n	5478 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    54be:	f8df 807c 	ldr.w	r8, [pc, #124]	; 553c <yield+0xe8>
    54c2:	f898 2000 	ldrb.w	r2, [r8]
    54c6:	2a00      	cmp	r2, #0
    54c8:	d0d2      	beq.n	5470 <yield+0x1c>
    54ca:	2500      	movs	r5, #0
    54cc:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5540 <yield+0xec>
    54d0:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    54d2:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    54d6:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    54d8:	6823      	ldr	r3, [r4, #0]
    54da:	4620      	mov	r0, r4
    54dc:	691b      	ldr	r3, [r3, #16]
    54de:	4798      	blx	r3
    54e0:	b110      	cbz	r0, 54e8 <yield+0x94>
    54e2:	6963      	ldr	r3, [r4, #20]
    54e4:	689b      	ldr	r3, [r3, #8]
    54e6:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    54e8:	f898 2000 	ldrb.w	r2, [r8]
    54ec:	b2eb      	uxtb	r3, r5
    54ee:	429a      	cmp	r2, r3
    54f0:	d8ef      	bhi.n	54d2 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    54f2:	7833      	ldrb	r3, [r6, #0]
    54f4:	e7bc      	b.n	5470 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    54f6:	f7ff fec5 	bl	5284 <usb_serial_available>
		if (Serial.available()) serialEvent();
    54fa:	b968      	cbnz	r0, 5518 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    54fc:	4b0d      	ldr	r3, [pc, #52]	; (5534 <yield+0xe0>)
    54fe:	781b      	ldrb	r3, [r3, #0]
    5500:	b90b      	cbnz	r3, 5506 <yield+0xb2>
    5502:	7833      	ldrb	r3, [r6, #0]
    5504:	e7b2      	b.n	546c <yield+0x18>
    5506:	7833      	ldrb	r3, [r6, #0]
    5508:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    550c:	7033      	strb	r3, [r6, #0]
    550e:	e7ad      	b.n	546c <yield+0x18>
		if (doit) __enable_irq();
    5510:	2d00      	cmp	r5, #0
    5512:	d1b1      	bne.n	5478 <yield+0x24>
    5514:	b662      	cpsie	i
    5516:	e7af      	b.n	5478 <yield+0x24>
		if (Serial.available()) serialEvent();
    5518:	f000 f826 	bl	5568 <serialEvent()>
    551c:	e7ee      	b.n	54fc <yield+0xa8>
			lastYield = nullptr;
    551e:	4b06      	ldr	r3, [pc, #24]	; (5538 <yield+0xe4>)
    5520:	601a      	str	r2, [r3, #0]
    5522:	e7c4      	b.n	54ae <yield+0x5a>
    5524:	20001be4 	.word	0x20001be4
    5528:	200039e8 	.word	0x200039e8
    552c:	20002b90 	.word	0x20002b90
    5530:	200039e6 	.word	0x200039e6
    5534:	600020ea 	.word	0x600020ea
    5538:	20002b9c 	.word	0x20002b9c
    553c:	200039e7 	.word	0x200039e7
    5540:	20002ba0 	.word	0x20002ba0

00005544 <rtc_get>:
#include "debug/printf.h"
#include <sys/time.h> // for struct timeval

unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    5544:	4a07      	ldr	r2, [pc, #28]	; (5564 <rtc_get+0x20>)
    5546:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    5548:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    554a:	4619      	mov	r1, r3
    554c:	4684      	mov	ip, r0
    554e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    5550:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    5552:	4299      	cmp	r1, r3
    5554:	d1f9      	bne.n	554a <rtc_get+0x6>
    5556:	4584      	cmp	ip, r0
    5558:	d1f7      	bne.n	554a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    555a:	0bdb      	lsrs	r3, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    555c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    5560:	4770      	bx	lr
    5562:	bf00      	nop
    5564:	400d4000 	.word	0x400d4000

00005568 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    5568:	4770      	bx	lr
    556a:	bf00      	nop

0000556c <sm_align_pool>:
{
    556c:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    556e:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    5572:	b15b      	cbz	r3, 558c <sm_align_pool+0x20>
    5574:	b1ba      	cbz	r2, 55a6 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    5576:	4b0f      	ldr	r3, [pc, #60]	; (55b4 <sm_align_pool+0x48>)
    5578:	fba3 1302 	umull	r1, r3, r3, r2
    557c:	08db      	lsrs	r3, r3, #3
    557e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5582:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5586:	d10a      	bne.n	559e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    5588:	2001      	movs	r0, #1
}
    558a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    558c:	4b09      	ldr	r3, [pc, #36]	; (55b4 <sm_align_pool+0x48>)
    558e:	fba3 1302 	umull	r1, r3, r3, r2
    5592:	08db      	lsrs	r3, r3, #3
    5594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    5598:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    559c:	d001      	beq.n	55a2 <sm_align_pool+0x36>
    559e:	1ad2      	subs	r2, r2, r3
    55a0:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    55a2:	2af0      	cmp	r2, #240	; 0xf0
    55a4:	d8f0      	bhi.n	5588 <sm_align_pool+0x1c>
		errno = ENOSPC;
    55a6:	f002 fb23 	bl	7bf0 <__errno>
    55aa:	221c      	movs	r2, #28
    55ac:	4603      	mov	r3, r0
    55ae:	2000      	movs	r0, #0
    55b0:	601a      	str	r2, [r3, #0]
}
    55b2:	bd08      	pop	{r3, pc}
    55b4:	aaaaaaab 	.word	0xaaaaaaab

000055b8 <sm_set_pool>:
{
    55b8:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    55ba:	4604      	mov	r4, r0
    55bc:	b338      	cbz	r0, 560e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    55be:	b119      	cbz	r1, 55c8 <sm_set_pool+0x10>
    55c0:	fab2 f682 	clz	r6, r2
    55c4:	0976      	lsrs	r6, r6, #5
    55c6:	b9a2      	cbnz	r2, 55f2 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    55c8:	6820      	ldr	r0, [r4, #0]
    55ca:	b300      	cbz	r0, 560e <sm_set_pool+0x56>
    55cc:	6862      	ldr	r2, [r4, #4]
    55ce:	b1f2      	cbz	r2, 560e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    55d0:	4b18      	ldr	r3, [pc, #96]	; (5634 <sm_set_pool+0x7c>)
    55d2:	4919      	ldr	r1, [pc, #100]	; (5638 <sm_set_pool+0x80>)
    55d4:	fb02 f303 	mul.w	r3, r2, r3
    55d8:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    55dc:	d317      	bcc.n	560e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    55de:	68a3      	ldr	r3, [r4, #8]
    55e0:	b9e3      	cbnz	r3, 561c <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    55e2:	2200      	movs	r2, #0
			return 1;
    55e4:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    55e6:	6022      	str	r2, [r4, #0]
    55e8:	6062      	str	r2, [r4, #4]
    55ea:	60a2      	str	r2, [r4, #8]
    55ec:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    55ee:	4618      	mov	r0, r3
    55f0:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    55f2:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    55f4:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    55f6:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    55fa:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    55fc:	f7ff ffb6 	bl	556c <sm_align_pool>
    5600:	4603      	mov	r3, r0
    5602:	2800      	cmp	r0, #0
    5604:	d0f3      	beq.n	55ee <sm_set_pool+0x36>
	if (do_zero) {
    5606:	b96d      	cbnz	r5, 5624 <sm_set_pool+0x6c>
	return 1;
    5608:	2301      	movs	r3, #1
}
    560a:	4618      	mov	r0, r3
    560c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    560e:	f002 faef 	bl	7bf0 <__errno>
    5612:	2216      	movs	r2, #22
		return 0;
    5614:	2300      	movs	r3, #0
		errno = EINVAL;
    5616:	6002      	str	r2, [r0, #0]
}
    5618:	4618      	mov	r0, r3
    561a:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    561c:	2100      	movs	r1, #0
    561e:	f001 ff37 	bl	7490 <memset>
    5622:	e7de      	b.n	55e2 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    5624:	6862      	ldr	r2, [r4, #4]
    5626:	4631      	mov	r1, r6
    5628:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    562a:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    562c:	f001 ff30 	bl	7490 <memset>
	return 1;
    5630:	2301      	movs	r3, #1
    5632:	e7dc      	b.n	55ee <sm_set_pool+0x36>
    5634:	aaaaaaab 	.word	0xaaaaaaab
    5638:	15555555 	.word	0x15555555

0000563c <__aeabi_atexit>:
    563c:	4603      	mov	r3, r0
    563e:	4608      	mov	r0, r1
    5640:	4619      	mov	r1, r3
    5642:	f001 bd69 	b.w	7118 <__cxa_atexit>
    5646:	bf00      	nop

00005648 <atol>:
    5648:	220a      	movs	r2, #10
    564a:	2100      	movs	r1, #0
    564c:	f001 bd08 	b.w	7060 <strtol>

00005650 <itoa>:
    5650:	1e93      	subs	r3, r2, #2
    5652:	2b22      	cmp	r3, #34	; 0x22
    5654:	b510      	push	{r4, lr}
    5656:	460c      	mov	r4, r1
    5658:	d80c      	bhi.n	5674 <itoa+0x24>
    565a:	2a0a      	cmp	r2, #10
    565c:	d003      	beq.n	5666 <itoa+0x16>
    565e:	f001 fd0d 	bl	707c <__utoa>
    5662:	4620      	mov	r0, r4
    5664:	bd10      	pop	{r4, pc}
    5666:	2800      	cmp	r0, #0
    5668:	daf9      	bge.n	565e <itoa+0xe>
    566a:	232d      	movs	r3, #45	; 0x2d
    566c:	f801 3b01 	strb.w	r3, [r1], #1
    5670:	4240      	negs	r0, r0
    5672:	e7f4      	b.n	565e <itoa+0xe>
    5674:	2300      	movs	r3, #0
    5676:	700b      	strb	r3, [r1, #0]
    5678:	4618      	mov	r0, r3
    567a:	bd10      	pop	{r4, pc}

0000567c <malloc>:
    567c:	4b02      	ldr	r3, [pc, #8]	; (5688 <malloc+0xc>)
    567e:	4601      	mov	r1, r0
    5680:	6818      	ldr	r0, [r3, #0]
    5682:	f000 b80b 	b.w	569c <_malloc_r>
    5686:	bf00      	nop
    5688:	20001968 	.word	0x20001968

0000568c <free>:
    568c:	4b02      	ldr	r3, [pc, #8]	; (5698 <free+0xc>)
    568e:	4601      	mov	r1, r0
    5690:	6818      	ldr	r0, [r3, #0]
    5692:	f002 bdc7 	b.w	8224 <_free_r>
    5696:	bf00      	nop
    5698:	20001968 	.word	0x20001968

0000569c <_malloc_r>:
    569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56a0:	f101 060b 	add.w	r6, r1, #11
    56a4:	2e16      	cmp	r6, #22
    56a6:	b083      	sub	sp, #12
    56a8:	4604      	mov	r4, r0
    56aa:	d824      	bhi.n	56f6 <_malloc_r+0x5a>
    56ac:	2910      	cmp	r1, #16
    56ae:	f200 80ba 	bhi.w	5826 <_malloc_r+0x18a>
    56b2:	f000 faa3 	bl	5bfc <__malloc_lock>
    56b6:	2610      	movs	r6, #16
    56b8:	2218      	movs	r2, #24
    56ba:	2002      	movs	r0, #2
    56bc:	4fb5      	ldr	r7, [pc, #724]	; (5994 <_malloc_r+0x2f8>)
    56be:	443a      	add	r2, r7
    56c0:	f1a2 0108 	sub.w	r1, r2, #8
    56c4:	6853      	ldr	r3, [r2, #4]
    56c6:	428b      	cmp	r3, r1
    56c8:	f000 80ba 	beq.w	5840 <_malloc_r+0x1a4>
    56cc:	685a      	ldr	r2, [r3, #4]
    56ce:	68d9      	ldr	r1, [r3, #12]
    56d0:	f022 0203 	bic.w	r2, r2, #3
    56d4:	441a      	add	r2, r3
    56d6:	689d      	ldr	r5, [r3, #8]
    56d8:	60e9      	str	r1, [r5, #12]
    56da:	608d      	str	r5, [r1, #8]
    56dc:	6851      	ldr	r1, [r2, #4]
    56de:	f041 0101 	orr.w	r1, r1, #1
    56e2:	4620      	mov	r0, r4
    56e4:	6051      	str	r1, [r2, #4]
    56e6:	f103 0508 	add.w	r5, r3, #8
    56ea:	f000 fa8d 	bl	5c08 <__malloc_unlock>
    56ee:	4628      	mov	r0, r5
    56f0:	b003      	add	sp, #12
    56f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56f6:	f036 0607 	bics.w	r6, r6, #7
    56fa:	f100 8094 	bmi.w	5826 <_malloc_r+0x18a>
    56fe:	42b1      	cmp	r1, r6
    5700:	f200 8091 	bhi.w	5826 <_malloc_r+0x18a>
    5704:	f000 fa7a 	bl	5bfc <__malloc_lock>
    5708:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    570c:	f0c0 819a 	bcc.w	5a44 <_malloc_r+0x3a8>
    5710:	0a73      	lsrs	r3, r6, #9
    5712:	f000 808f 	beq.w	5834 <_malloc_r+0x198>
    5716:	2b04      	cmp	r3, #4
    5718:	f200 816f 	bhi.w	59fa <_malloc_r+0x35e>
    571c:	09b3      	lsrs	r3, r6, #6
    571e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    5722:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    5726:	00c3      	lsls	r3, r0, #3
    5728:	4f9a      	ldr	r7, [pc, #616]	; (5994 <_malloc_r+0x2f8>)
    572a:	443b      	add	r3, r7
    572c:	f1a3 0508 	sub.w	r5, r3, #8
    5730:	685b      	ldr	r3, [r3, #4]
    5732:	429d      	cmp	r5, r3
    5734:	d106      	bne.n	5744 <_malloc_r+0xa8>
    5736:	e00c      	b.n	5752 <_malloc_r+0xb6>
    5738:	2900      	cmp	r1, #0
    573a:	f280 8127 	bge.w	598c <_malloc_r+0x2f0>
    573e:	68db      	ldr	r3, [r3, #12]
    5740:	429d      	cmp	r5, r3
    5742:	d006      	beq.n	5752 <_malloc_r+0xb6>
    5744:	685a      	ldr	r2, [r3, #4]
    5746:	f022 0203 	bic.w	r2, r2, #3
    574a:	1b91      	subs	r1, r2, r6
    574c:	290f      	cmp	r1, #15
    574e:	ddf3      	ble.n	5738 <_malloc_r+0x9c>
    5750:	4660      	mov	r0, ip
    5752:	693d      	ldr	r5, [r7, #16]
    5754:	f8df c250 	ldr.w	ip, [pc, #592]	; 59a8 <_malloc_r+0x30c>
    5758:	4565      	cmp	r5, ip
    575a:	d07c      	beq.n	5856 <_malloc_r+0x1ba>
    575c:	686a      	ldr	r2, [r5, #4]
    575e:	f022 0203 	bic.w	r2, r2, #3
    5762:	1b93      	subs	r3, r2, r6
    5764:	2b0f      	cmp	r3, #15
    5766:	f300 817b 	bgt.w	5a60 <_malloc_r+0x3c4>
    576a:	2b00      	cmp	r3, #0
    576c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    5770:	f280 816c 	bge.w	5a4c <_malloc_r+0x3b0>
    5774:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    5778:	f080 811a 	bcs.w	59b0 <_malloc_r+0x314>
    577c:	08d3      	lsrs	r3, r2, #3
    577e:	6879      	ldr	r1, [r7, #4]
    5780:	3301      	adds	r3, #1
    5782:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    5786:	2201      	movs	r2, #1
    5788:	fa02 f20e 	lsl.w	r2, r2, lr
    578c:	430a      	orrs	r2, r1
    578e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    5792:	f8c5 e008 	str.w	lr, [r5, #8]
    5796:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    579a:	3908      	subs	r1, #8
    579c:	60e9      	str	r1, [r5, #12]
    579e:	607a      	str	r2, [r7, #4]
    57a0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    57a4:	f8ce 500c 	str.w	r5, [lr, #12]
    57a8:	1083      	asrs	r3, r0, #2
    57aa:	2101      	movs	r1, #1
    57ac:	4099      	lsls	r1, r3
    57ae:	4291      	cmp	r1, r2
    57b0:	d857      	bhi.n	5862 <_malloc_r+0x1c6>
    57b2:	4211      	tst	r1, r2
    57b4:	d106      	bne.n	57c4 <_malloc_r+0x128>
    57b6:	f020 0003 	bic.w	r0, r0, #3
    57ba:	0049      	lsls	r1, r1, #1
    57bc:	4211      	tst	r1, r2
    57be:	f100 0004 	add.w	r0, r0, #4
    57c2:	d0fa      	beq.n	57ba <_malloc_r+0x11e>
    57c4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    57c8:	464d      	mov	r5, r9
    57ca:	4686      	mov	lr, r0
    57cc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    57d0:	4545      	cmp	r5, r8
    57d2:	d108      	bne.n	57e6 <_malloc_r+0x14a>
    57d4:	e11d      	b.n	5a12 <_malloc_r+0x376>
    57d6:	2b00      	cmp	r3, #0
    57d8:	f280 8124 	bge.w	5a24 <_malloc_r+0x388>
    57dc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    57e0:	4545      	cmp	r5, r8
    57e2:	f000 8116 	beq.w	5a12 <_malloc_r+0x376>
    57e6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    57ea:	f022 0203 	bic.w	r2, r2, #3
    57ee:	1b93      	subs	r3, r2, r6
    57f0:	2b0f      	cmp	r3, #15
    57f2:	ddf0      	ble.n	57d6 <_malloc_r+0x13a>
    57f4:	4620      	mov	r0, r4
    57f6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    57fa:	eb08 0106 	add.w	r1, r8, r6
    57fe:	f046 0601 	orr.w	r6, r6, #1
    5802:	f8c8 6004 	str.w	r6, [r8, #4]
    5806:	60ec      	str	r4, [r5, #12]
    5808:	60a5      	str	r5, [r4, #8]
    580a:	f043 0401 	orr.w	r4, r3, #1
    580e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5812:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5816:	604c      	str	r4, [r1, #4]
    5818:	f848 3002 	str.w	r3, [r8, r2]
    581c:	f000 f9f4 	bl	5c08 <__malloc_unlock>
    5820:	f108 0508 	add.w	r5, r8, #8
    5824:	e002      	b.n	582c <_malloc_r+0x190>
    5826:	230c      	movs	r3, #12
    5828:	6023      	str	r3, [r4, #0]
    582a:	2500      	movs	r5, #0
    582c:	4628      	mov	r0, r5
    582e:	b003      	add	sp, #12
    5830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5834:	f44f 7300 	mov.w	r3, #512	; 0x200
    5838:	2040      	movs	r0, #64	; 0x40
    583a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    583e:	e773      	b.n	5728 <_malloc_r+0x8c>
    5840:	68d3      	ldr	r3, [r2, #12]
    5842:	429a      	cmp	r2, r3
    5844:	bf08      	it	eq
    5846:	3002      	addeq	r0, #2
    5848:	f47f af40 	bne.w	56cc <_malloc_r+0x30>
    584c:	693d      	ldr	r5, [r7, #16]
    584e:	f8df c158 	ldr.w	ip, [pc, #344]	; 59a8 <_malloc_r+0x30c>
    5852:	4565      	cmp	r5, ip
    5854:	d182      	bne.n	575c <_malloc_r+0xc0>
    5856:	687a      	ldr	r2, [r7, #4]
    5858:	1083      	asrs	r3, r0, #2
    585a:	2101      	movs	r1, #1
    585c:	4099      	lsls	r1, r3
    585e:	4291      	cmp	r1, r2
    5860:	d9a7      	bls.n	57b2 <_malloc_r+0x116>
    5862:	68bd      	ldr	r5, [r7, #8]
    5864:	686b      	ldr	r3, [r5, #4]
    5866:	f023 0903 	bic.w	r9, r3, #3
    586a:	454e      	cmp	r6, r9
    586c:	d803      	bhi.n	5876 <_malloc_r+0x1da>
    586e:	eba9 0306 	sub.w	r3, r9, r6
    5872:	2b0f      	cmp	r3, #15
    5874:	dc7a      	bgt.n	596c <_malloc_r+0x2d0>
    5876:	f8df b134 	ldr.w	fp, [pc, #308]	; 59ac <_malloc_r+0x310>
    587a:	4b47      	ldr	r3, [pc, #284]	; (5998 <_malloc_r+0x2fc>)
    587c:	f8db 2000 	ldr.w	r2, [fp]
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	3201      	adds	r2, #1
    5884:	4433      	add	r3, r6
    5886:	eb05 0a09 	add.w	sl, r5, r9
    588a:	f000 8133 	beq.w	5af4 <_malloc_r+0x458>
    588e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    5892:	330f      	adds	r3, #15
    5894:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    5898:	f028 080f 	bic.w	r8, r8, #15
    589c:	4641      	mov	r1, r8
    589e:	4620      	mov	r0, r4
    58a0:	f002 f97e 	bl	7ba0 <_sbrk_r>
    58a4:	1c41      	adds	r1, r0, #1
    58a6:	4602      	mov	r2, r0
    58a8:	f000 80f3 	beq.w	5a92 <_malloc_r+0x3f6>
    58ac:	4582      	cmp	sl, r0
    58ae:	f200 80ee 	bhi.w	5a8e <_malloc_r+0x3f2>
    58b2:	4b3a      	ldr	r3, [pc, #232]	; (599c <_malloc_r+0x300>)
    58b4:	6819      	ldr	r1, [r3, #0]
    58b6:	4441      	add	r1, r8
    58b8:	6019      	str	r1, [r3, #0]
    58ba:	4608      	mov	r0, r1
    58bc:	f000 814e 	beq.w	5b5c <_malloc_r+0x4c0>
    58c0:	f8db 1000 	ldr.w	r1, [fp]
    58c4:	9301      	str	r3, [sp, #4]
    58c6:	3101      	adds	r1, #1
    58c8:	bf1b      	ittet	ne
    58ca:	eba2 010a 	subne.w	r1, r2, sl
    58ce:	1809      	addne	r1, r1, r0
    58d0:	f8cb 2000 	streq.w	r2, [fp]
    58d4:	6019      	strne	r1, [r3, #0]
    58d6:	f012 0b07 	ands.w	fp, r2, #7
    58da:	f000 8117 	beq.w	5b0c <_malloc_r+0x470>
    58de:	f1cb 0108 	rsb	r1, fp, #8
    58e2:	440a      	add	r2, r1
    58e4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    58e8:	4490      	add	r8, r2
    58ea:	3108      	adds	r1, #8
    58ec:	eba1 0108 	sub.w	r1, r1, r8
    58f0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    58f4:	4651      	mov	r1, sl
    58f6:	4620      	mov	r0, r4
    58f8:	9200      	str	r2, [sp, #0]
    58fa:	f002 f951 	bl	7ba0 <_sbrk_r>
    58fe:	1c42      	adds	r2, r0, #1
    5900:	e9dd 2300 	ldrd	r2, r3, [sp]
    5904:	f000 814f 	beq.w	5ba6 <_malloc_r+0x50a>
    5908:	1a80      	subs	r0, r0, r2
    590a:	eb00 080a 	add.w	r8, r0, sl
    590e:	6819      	ldr	r1, [r3, #0]
    5910:	60ba      	str	r2, [r7, #8]
    5912:	f048 0001 	orr.w	r0, r8, #1
    5916:	4451      	add	r1, sl
    5918:	42bd      	cmp	r5, r7
    591a:	6050      	str	r0, [r2, #4]
    591c:	6019      	str	r1, [r3, #0]
    591e:	f000 8129 	beq.w	5b74 <_malloc_r+0x4d8>
    5922:	f1b9 0f0f 	cmp.w	r9, #15
    5926:	f240 8127 	bls.w	5b78 <_malloc_r+0x4dc>
    592a:	6868      	ldr	r0, [r5, #4]
    592c:	f1a9 0c0c 	sub.w	ip, r9, #12
    5930:	f02c 0c07 	bic.w	ip, ip, #7
    5934:	f000 0001 	and.w	r0, r0, #1
    5938:	ea40 000c 	orr.w	r0, r0, ip
    593c:	6068      	str	r0, [r5, #4]
    593e:	f04f 0e05 	mov.w	lr, #5
    5942:	eb05 000c 	add.w	r0, r5, ip
    5946:	f1bc 0f0f 	cmp.w	ip, #15
    594a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    594e:	f200 8132 	bhi.w	5bb6 <_malloc_r+0x51a>
    5952:	6850      	ldr	r0, [r2, #4]
    5954:	4615      	mov	r5, r2
    5956:	4b12      	ldr	r3, [pc, #72]	; (59a0 <_malloc_r+0x304>)
    5958:	681a      	ldr	r2, [r3, #0]
    595a:	428a      	cmp	r2, r1
    595c:	bf38      	it	cc
    595e:	6019      	strcc	r1, [r3, #0]
    5960:	4b10      	ldr	r3, [pc, #64]	; (59a4 <_malloc_r+0x308>)
    5962:	681a      	ldr	r2, [r3, #0]
    5964:	428a      	cmp	r2, r1
    5966:	bf38      	it	cc
    5968:	6019      	strcc	r1, [r3, #0]
    596a:	e094      	b.n	5a96 <_malloc_r+0x3fa>
    596c:	19aa      	adds	r2, r5, r6
    596e:	f043 0301 	orr.w	r3, r3, #1
    5972:	f046 0601 	orr.w	r6, r6, #1
    5976:	606e      	str	r6, [r5, #4]
    5978:	4620      	mov	r0, r4
    597a:	60ba      	str	r2, [r7, #8]
    597c:	6053      	str	r3, [r2, #4]
    597e:	f000 f943 	bl	5c08 <__malloc_unlock>
    5982:	3508      	adds	r5, #8
    5984:	4628      	mov	r0, r5
    5986:	b003      	add	sp, #12
    5988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    598c:	68d9      	ldr	r1, [r3, #12]
    598e:	441a      	add	r2, r3
    5990:	e6a1      	b.n	56d6 <_malloc_r+0x3a>
    5992:	bf00      	nop
    5994:	2000154c 	.word	0x2000154c
    5998:	20002d90 	.word	0x20002d90
    599c:	20002d60 	.word	0x20002d60
    59a0:	20002d88 	.word	0x20002d88
    59a4:	20002d8c 	.word	0x20002d8c
    59a8:	20001554 	.word	0x20001554
    59ac:	20001954 	.word	0x20001954
    59b0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    59b4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    59b8:	d363      	bcc.n	5a82 <_malloc_r+0x3e6>
    59ba:	2b14      	cmp	r3, #20
    59bc:	f200 80b7 	bhi.w	5b2e <_malloc_r+0x492>
    59c0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    59c4:	00c9      	lsls	r1, r1, #3
    59c6:	335b      	adds	r3, #91	; 0x5b
    59c8:	eb07 0e01 	add.w	lr, r7, r1
    59cc:	5879      	ldr	r1, [r7, r1]
    59ce:	f1ae 0e08 	sub.w	lr, lr, #8
    59d2:	458e      	cmp	lr, r1
    59d4:	f000 8091 	beq.w	5afa <_malloc_r+0x45e>
    59d8:	684b      	ldr	r3, [r1, #4]
    59da:	f023 0303 	bic.w	r3, r3, #3
    59de:	4293      	cmp	r3, r2
    59e0:	d902      	bls.n	59e8 <_malloc_r+0x34c>
    59e2:	6889      	ldr	r1, [r1, #8]
    59e4:	458e      	cmp	lr, r1
    59e6:	d1f7      	bne.n	59d8 <_malloc_r+0x33c>
    59e8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    59ec:	687a      	ldr	r2, [r7, #4]
    59ee:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    59f2:	f8ce 5008 	str.w	r5, [lr, #8]
    59f6:	60cd      	str	r5, [r1, #12]
    59f8:	e6d6      	b.n	57a8 <_malloc_r+0x10c>
    59fa:	2b14      	cmp	r3, #20
    59fc:	d959      	bls.n	5ab2 <_malloc_r+0x416>
    59fe:	2b54      	cmp	r3, #84	; 0x54
    5a00:	f200 809d 	bhi.w	5b3e <_malloc_r+0x4a2>
    5a04:	0b33      	lsrs	r3, r6, #12
    5a06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    5a0a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    5a0e:	00c3      	lsls	r3, r0, #3
    5a10:	e68a      	b.n	5728 <_malloc_r+0x8c>
    5a12:	f10e 0e01 	add.w	lr, lr, #1
    5a16:	f01e 0f03 	tst.w	lr, #3
    5a1a:	f105 0508 	add.w	r5, r5, #8
    5a1e:	f47f aed5 	bne.w	57cc <_malloc_r+0x130>
    5a22:	e051      	b.n	5ac8 <_malloc_r+0x42c>
    5a24:	4442      	add	r2, r8
    5a26:	4645      	mov	r5, r8
    5a28:	6853      	ldr	r3, [r2, #4]
    5a2a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    5a2e:	f043 0301 	orr.w	r3, r3, #1
    5a32:	6053      	str	r3, [r2, #4]
    5a34:	f855 3f08 	ldr.w	r3, [r5, #8]!
    5a38:	4620      	mov	r0, r4
    5a3a:	60d9      	str	r1, [r3, #12]
    5a3c:	608b      	str	r3, [r1, #8]
    5a3e:	f000 f8e3 	bl	5c08 <__malloc_unlock>
    5a42:	e6f3      	b.n	582c <_malloc_r+0x190>
    5a44:	08f0      	lsrs	r0, r6, #3
    5a46:	f106 0208 	add.w	r2, r6, #8
    5a4a:	e637      	b.n	56bc <_malloc_r+0x20>
    5a4c:	442a      	add	r2, r5
    5a4e:	4620      	mov	r0, r4
    5a50:	6853      	ldr	r3, [r2, #4]
    5a52:	f043 0301 	orr.w	r3, r3, #1
    5a56:	6053      	str	r3, [r2, #4]
    5a58:	3508      	adds	r5, #8
    5a5a:	f000 f8d5 	bl	5c08 <__malloc_unlock>
    5a5e:	e6e5      	b.n	582c <_malloc_r+0x190>
    5a60:	19a9      	adds	r1, r5, r6
    5a62:	4620      	mov	r0, r4
    5a64:	f046 0601 	orr.w	r6, r6, #1
    5a68:	f043 0401 	orr.w	r4, r3, #1
    5a6c:	606e      	str	r6, [r5, #4]
    5a6e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    5a72:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    5a76:	604c      	str	r4, [r1, #4]
    5a78:	50ab      	str	r3, [r5, r2]
    5a7a:	f000 f8c5 	bl	5c08 <__malloc_unlock>
    5a7e:	3508      	adds	r5, #8
    5a80:	e6d4      	b.n	582c <_malloc_r+0x190>
    5a82:	0993      	lsrs	r3, r2, #6
    5a84:	f103 0139 	add.w	r1, r3, #57	; 0x39
    5a88:	00c9      	lsls	r1, r1, #3
    5a8a:	3338      	adds	r3, #56	; 0x38
    5a8c:	e79c      	b.n	59c8 <_malloc_r+0x32c>
    5a8e:	42bd      	cmp	r5, r7
    5a90:	d05f      	beq.n	5b52 <_malloc_r+0x4b6>
    5a92:	68bd      	ldr	r5, [r7, #8]
    5a94:	6868      	ldr	r0, [r5, #4]
    5a96:	f020 0803 	bic.w	r8, r0, #3
    5a9a:	4546      	cmp	r6, r8
    5a9c:	eba8 0306 	sub.w	r3, r8, r6
    5aa0:	d802      	bhi.n	5aa8 <_malloc_r+0x40c>
    5aa2:	2b0f      	cmp	r3, #15
    5aa4:	f73f af62 	bgt.w	596c <_malloc_r+0x2d0>
    5aa8:	4620      	mov	r0, r4
    5aaa:	f000 f8ad 	bl	5c08 <__malloc_unlock>
    5aae:	2500      	movs	r5, #0
    5ab0:	e6bc      	b.n	582c <_malloc_r+0x190>
    5ab2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    5ab6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    5aba:	00c3      	lsls	r3, r0, #3
    5abc:	e634      	b.n	5728 <_malloc_r+0x8c>
    5abe:	f859 3908 	ldr.w	r3, [r9], #-8
    5ac2:	454b      	cmp	r3, r9
    5ac4:	f040 8096 	bne.w	5bf4 <_malloc_r+0x558>
    5ac8:	f010 0f03 	tst.w	r0, #3
    5acc:	f100 30ff 	add.w	r0, r0, #4294967295
    5ad0:	d1f5      	bne.n	5abe <_malloc_r+0x422>
    5ad2:	687b      	ldr	r3, [r7, #4]
    5ad4:	ea23 0301 	bic.w	r3, r3, r1
    5ad8:	607b      	str	r3, [r7, #4]
    5ada:	0049      	lsls	r1, r1, #1
    5adc:	4299      	cmp	r1, r3
    5ade:	f63f aec0 	bhi.w	5862 <_malloc_r+0x1c6>
    5ae2:	b919      	cbnz	r1, 5aec <_malloc_r+0x450>
    5ae4:	e6bd      	b.n	5862 <_malloc_r+0x1c6>
    5ae6:	0049      	lsls	r1, r1, #1
    5ae8:	f10e 0e04 	add.w	lr, lr, #4
    5aec:	4219      	tst	r1, r3
    5aee:	d0fa      	beq.n	5ae6 <_malloc_r+0x44a>
    5af0:	4670      	mov	r0, lr
    5af2:	e667      	b.n	57c4 <_malloc_r+0x128>
    5af4:	f103 0810 	add.w	r8, r3, #16
    5af8:	e6d0      	b.n	589c <_malloc_r+0x200>
    5afa:	109a      	asrs	r2, r3, #2
    5afc:	f04f 0801 	mov.w	r8, #1
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	fa08 f202 	lsl.w	r2, r8, r2
    5b06:	431a      	orrs	r2, r3
    5b08:	607a      	str	r2, [r7, #4]
    5b0a:	e770      	b.n	59ee <_malloc_r+0x352>
    5b0c:	eb02 0108 	add.w	r1, r2, r8
    5b10:	4249      	negs	r1, r1
    5b12:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    5b16:	4651      	mov	r1, sl
    5b18:	4620      	mov	r0, r4
    5b1a:	9200      	str	r2, [sp, #0]
    5b1c:	f002 f840 	bl	7ba0 <_sbrk_r>
    5b20:	1c43      	adds	r3, r0, #1
    5b22:	e9dd 2300 	ldrd	r2, r3, [sp]
    5b26:	f47f aeef 	bne.w	5908 <_malloc_r+0x26c>
    5b2a:	46da      	mov	sl, fp
    5b2c:	e6ef      	b.n	590e <_malloc_r+0x272>
    5b2e:	2b54      	cmp	r3, #84	; 0x54
    5b30:	d825      	bhi.n	5b7e <_malloc_r+0x4e2>
    5b32:	0b13      	lsrs	r3, r2, #12
    5b34:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    5b38:	00c9      	lsls	r1, r1, #3
    5b3a:	336e      	adds	r3, #110	; 0x6e
    5b3c:	e744      	b.n	59c8 <_malloc_r+0x32c>
    5b3e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5b42:	d825      	bhi.n	5b90 <_malloc_r+0x4f4>
    5b44:	0bf3      	lsrs	r3, r6, #15
    5b46:	f103 0078 	add.w	r0, r3, #120	; 0x78
    5b4a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    5b4e:	00c3      	lsls	r3, r0, #3
    5b50:	e5ea      	b.n	5728 <_malloc_r+0x8c>
    5b52:	4b29      	ldr	r3, [pc, #164]	; (5bf8 <_malloc_r+0x55c>)
    5b54:	6818      	ldr	r0, [r3, #0]
    5b56:	4440      	add	r0, r8
    5b58:	6018      	str	r0, [r3, #0]
    5b5a:	e6b1      	b.n	58c0 <_malloc_r+0x224>
    5b5c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    5b60:	f1bc 0f00 	cmp.w	ip, #0
    5b64:	f47f aeac 	bne.w	58c0 <_malloc_r+0x224>
    5b68:	68bd      	ldr	r5, [r7, #8]
    5b6a:	44c8      	add	r8, r9
    5b6c:	f048 0001 	orr.w	r0, r8, #1
    5b70:	6068      	str	r0, [r5, #4]
    5b72:	e6f0      	b.n	5956 <_malloc_r+0x2ba>
    5b74:	4615      	mov	r5, r2
    5b76:	e6ee      	b.n	5956 <_malloc_r+0x2ba>
    5b78:	2301      	movs	r3, #1
    5b7a:	6053      	str	r3, [r2, #4]
    5b7c:	e794      	b.n	5aa8 <_malloc_r+0x40c>
    5b7e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    5b82:	d823      	bhi.n	5bcc <_malloc_r+0x530>
    5b84:	0bd3      	lsrs	r3, r2, #15
    5b86:	f103 0178 	add.w	r1, r3, #120	; 0x78
    5b8a:	00c9      	lsls	r1, r1, #3
    5b8c:	3377      	adds	r3, #119	; 0x77
    5b8e:	e71b      	b.n	59c8 <_malloc_r+0x32c>
    5b90:	f240 5254 	movw	r2, #1364	; 0x554
    5b94:	4293      	cmp	r3, r2
    5b96:	d823      	bhi.n	5be0 <_malloc_r+0x544>
    5b98:	0cb3      	lsrs	r3, r6, #18
    5b9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    5b9e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    5ba2:	00c3      	lsls	r3, r0, #3
    5ba4:	e5c0      	b.n	5728 <_malloc_r+0x8c>
    5ba6:	f1ab 0b08 	sub.w	fp, fp, #8
    5baa:	44d8      	add	r8, fp
    5bac:	eba8 0802 	sub.w	r8, r8, r2
    5bb0:	f04f 0a00 	mov.w	sl, #0
    5bb4:	e6ab      	b.n	590e <_malloc_r+0x272>
    5bb6:	f105 0108 	add.w	r1, r5, #8
    5bba:	4620      	mov	r0, r4
    5bbc:	9300      	str	r3, [sp, #0]
    5bbe:	f002 fb31 	bl	8224 <_free_r>
    5bc2:	68bd      	ldr	r5, [r7, #8]
    5bc4:	9b00      	ldr	r3, [sp, #0]
    5bc6:	6868      	ldr	r0, [r5, #4]
    5bc8:	6819      	ldr	r1, [r3, #0]
    5bca:	e6c4      	b.n	5956 <_malloc_r+0x2ba>
    5bcc:	f240 5154 	movw	r1, #1364	; 0x554
    5bd0:	428b      	cmp	r3, r1
    5bd2:	d80b      	bhi.n	5bec <_malloc_r+0x550>
    5bd4:	0c93      	lsrs	r3, r2, #18
    5bd6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    5bda:	00c9      	lsls	r1, r1, #3
    5bdc:	337c      	adds	r3, #124	; 0x7c
    5bde:	e6f3      	b.n	59c8 <_malloc_r+0x32c>
    5be0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    5be4:	207f      	movs	r0, #127	; 0x7f
    5be6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    5bea:	e59d      	b.n	5728 <_malloc_r+0x8c>
    5bec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    5bf0:	237e      	movs	r3, #126	; 0x7e
    5bf2:	e6e9      	b.n	59c8 <_malloc_r+0x32c>
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	e770      	b.n	5ada <_malloc_r+0x43e>
    5bf8:	20002d60 	.word	0x20002d60

00005bfc <__malloc_lock>:
    5bfc:	4801      	ldr	r0, [pc, #4]	; (5c04 <__malloc_lock+0x8>)
    5bfe:	f002 b825 	b.w	7c4c <__retarget_lock_acquire_recursive>
    5c02:	bf00      	nop
    5c04:	20002d58 	.word	0x20002d58

00005c08 <__malloc_unlock>:
    5c08:	4801      	ldr	r0, [pc, #4]	; (5c10 <__malloc_unlock+0x8>)
    5c0a:	f002 b821 	b.w	7c50 <__retarget_lock_release_recursive>
    5c0e:	bf00      	nop
    5c10:	20002d58 	.word	0x20002d58

00005c14 <realloc>:
    5c14:	b410      	push	{r4}
    5c16:	4c04      	ldr	r4, [pc, #16]	; (5c28 <realloc+0x14>)
    5c18:	4603      	mov	r3, r0
    5c1a:	460a      	mov	r2, r1
    5c1c:	6820      	ldr	r0, [r4, #0]
    5c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
    5c22:	4619      	mov	r1, r3
    5c24:	f000 b802 	b.w	5c2c <_realloc_r>
    5c28:	20001968 	.word	0x20001968

00005c2c <_realloc_r>:
    5c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c30:	4617      	mov	r7, r2
    5c32:	2900      	cmp	r1, #0
    5c34:	f000 8098 	beq.w	5d68 <_realloc_r+0x13c>
    5c38:	460c      	mov	r4, r1
    5c3a:	f107 050b 	add.w	r5, r7, #11
    5c3e:	4680      	mov	r8, r0
    5c40:	f7ff ffdc 	bl	5bfc <__malloc_lock>
    5c44:	2d16      	cmp	r5, #22
    5c46:	f854 1c04 	ldr.w	r1, [r4, #-4]
    5c4a:	d85b      	bhi.n	5d04 <_realloc_r+0xd8>
    5c4c:	2510      	movs	r5, #16
    5c4e:	462a      	mov	r2, r5
    5c50:	42af      	cmp	r7, r5
    5c52:	d85c      	bhi.n	5d0e <_realloc_r+0xe2>
    5c54:	f021 0603 	bic.w	r6, r1, #3
    5c58:	4296      	cmp	r6, r2
    5c5a:	f1a4 0908 	sub.w	r9, r4, #8
    5c5e:	da62      	bge.n	5d26 <_realloc_r+0xfa>
    5c60:	4bbc      	ldr	r3, [pc, #752]	; (5f54 <_realloc_r+0x328>)
    5c62:	f8d3 c008 	ldr.w	ip, [r3, #8]
    5c66:	eb09 0006 	add.w	r0, r9, r6
    5c6a:	4584      	cmp	ip, r0
    5c6c:	f000 8097 	beq.w	5d9e <_realloc_r+0x172>
    5c70:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5c74:	f02c 0301 	bic.w	r3, ip, #1
    5c78:	4403      	add	r3, r0
    5c7a:	685b      	ldr	r3, [r3, #4]
    5c7c:	07db      	lsls	r3, r3, #31
    5c7e:	d468      	bmi.n	5d52 <_realloc_r+0x126>
    5c80:	f02c 0c03 	bic.w	ip, ip, #3
    5c84:	eb06 030c 	add.w	r3, r6, ip
    5c88:	4293      	cmp	r3, r2
    5c8a:	da47      	bge.n	5d1c <_realloc_r+0xf0>
    5c8c:	07cb      	lsls	r3, r1, #31
    5c8e:	d410      	bmi.n	5cb2 <_realloc_r+0x86>
    5c90:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5c94:	eba9 0a03 	sub.w	sl, r9, r3
    5c98:	f8da 3004 	ldr.w	r3, [sl, #4]
    5c9c:	f023 0103 	bic.w	r1, r3, #3
    5ca0:	448c      	add	ip, r1
    5ca2:	44b4      	add	ip, r6
    5ca4:	4594      	cmp	ip, r2
    5ca6:	f280 8111 	bge.w	5ecc <_realloc_r+0x2a0>
    5caa:	1873      	adds	r3, r6, r1
    5cac:	4293      	cmp	r3, r2
    5cae:	f280 80e8 	bge.w	5e82 <_realloc_r+0x256>
    5cb2:	4639      	mov	r1, r7
    5cb4:	4640      	mov	r0, r8
    5cb6:	f7ff fcf1 	bl	569c <_malloc_r>
    5cba:	4607      	mov	r7, r0
    5cbc:	b1e0      	cbz	r0, 5cf8 <_realloc_r+0xcc>
    5cbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5cc2:	f023 0301 	bic.w	r3, r3, #1
    5cc6:	444b      	add	r3, r9
    5cc8:	f1a0 0208 	sub.w	r2, r0, #8
    5ccc:	4293      	cmp	r3, r2
    5cce:	f000 80d2 	beq.w	5e76 <_realloc_r+0x24a>
    5cd2:	1f32      	subs	r2, r6, #4
    5cd4:	2a24      	cmp	r2, #36	; 0x24
    5cd6:	f200 80f5 	bhi.w	5ec4 <_realloc_r+0x298>
    5cda:	2a13      	cmp	r2, #19
    5cdc:	f200 80ac 	bhi.w	5e38 <_realloc_r+0x20c>
    5ce0:	4603      	mov	r3, r0
    5ce2:	4622      	mov	r2, r4
    5ce4:	6811      	ldr	r1, [r2, #0]
    5ce6:	6019      	str	r1, [r3, #0]
    5ce8:	6851      	ldr	r1, [r2, #4]
    5cea:	6059      	str	r1, [r3, #4]
    5cec:	6892      	ldr	r2, [r2, #8]
    5cee:	609a      	str	r2, [r3, #8]
    5cf0:	4621      	mov	r1, r4
    5cf2:	4640      	mov	r0, r8
    5cf4:	f002 fa96 	bl	8224 <_free_r>
    5cf8:	4640      	mov	r0, r8
    5cfa:	f7ff ff85 	bl	5c08 <__malloc_unlock>
    5cfe:	4638      	mov	r0, r7
    5d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d04:	f025 0507 	bic.w	r5, r5, #7
    5d08:	2d00      	cmp	r5, #0
    5d0a:	462a      	mov	r2, r5
    5d0c:	daa0      	bge.n	5c50 <_realloc_r+0x24>
    5d0e:	230c      	movs	r3, #12
    5d10:	f8c8 3000 	str.w	r3, [r8]
    5d14:	2700      	movs	r7, #0
    5d16:	4638      	mov	r0, r7
    5d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d1c:	461e      	mov	r6, r3
    5d1e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    5d22:	60d3      	str	r3, [r2, #12]
    5d24:	609a      	str	r2, [r3, #8]
    5d26:	1b73      	subs	r3, r6, r5
    5d28:	2b0f      	cmp	r3, #15
    5d2a:	d822      	bhi.n	5d72 <_realloc_r+0x146>
    5d2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    5d30:	f003 0301 	and.w	r3, r3, #1
    5d34:	4333      	orrs	r3, r6
    5d36:	444e      	add	r6, r9
    5d38:	f8c9 3004 	str.w	r3, [r9, #4]
    5d3c:	6873      	ldr	r3, [r6, #4]
    5d3e:	f043 0301 	orr.w	r3, r3, #1
    5d42:	6073      	str	r3, [r6, #4]
    5d44:	4640      	mov	r0, r8
    5d46:	4627      	mov	r7, r4
    5d48:	f7ff ff5e 	bl	5c08 <__malloc_unlock>
    5d4c:	4638      	mov	r0, r7
    5d4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d52:	07c9      	lsls	r1, r1, #31
    5d54:	d4ad      	bmi.n	5cb2 <_realloc_r+0x86>
    5d56:	f854 3c08 	ldr.w	r3, [r4, #-8]
    5d5a:	eba9 0a03 	sub.w	sl, r9, r3
    5d5e:	f8da 1004 	ldr.w	r1, [sl, #4]
    5d62:	f021 0103 	bic.w	r1, r1, #3
    5d66:	e7a0      	b.n	5caa <_realloc_r+0x7e>
    5d68:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d6c:	4611      	mov	r1, r2
    5d6e:	f7ff bc95 	b.w	569c <_malloc_r>
    5d72:	f8d9 2004 	ldr.w	r2, [r9, #4]
    5d76:	eb09 0105 	add.w	r1, r9, r5
    5d7a:	f002 0201 	and.w	r2, r2, #1
    5d7e:	444e      	add	r6, r9
    5d80:	f043 0301 	orr.w	r3, r3, #1
    5d84:	432a      	orrs	r2, r5
    5d86:	f8c9 2004 	str.w	r2, [r9, #4]
    5d8a:	604b      	str	r3, [r1, #4]
    5d8c:	6873      	ldr	r3, [r6, #4]
    5d8e:	f043 0301 	orr.w	r3, r3, #1
    5d92:	3108      	adds	r1, #8
    5d94:	6073      	str	r3, [r6, #4]
    5d96:	4640      	mov	r0, r8
    5d98:	f002 fa44 	bl	8224 <_free_r>
    5d9c:	e7d2      	b.n	5d44 <_realloc_r+0x118>
    5d9e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    5da2:	f020 0b03 	bic.w	fp, r0, #3
    5da6:	eb06 0c0b 	add.w	ip, r6, fp
    5daa:	f105 0010 	add.w	r0, r5, #16
    5dae:	4584      	cmp	ip, r0
    5db0:	da4d      	bge.n	5e4e <_realloc_r+0x222>
    5db2:	07c9      	lsls	r1, r1, #31
    5db4:	f53f af7d 	bmi.w	5cb2 <_realloc_r+0x86>
    5db8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    5dbc:	eba9 0a01 	sub.w	sl, r9, r1
    5dc0:	f8da 1004 	ldr.w	r1, [sl, #4]
    5dc4:	f021 0103 	bic.w	r1, r1, #3
    5dc8:	448b      	add	fp, r1
    5dca:	44b3      	add	fp, r6
    5dcc:	4558      	cmp	r0, fp
    5dce:	f73f af6c 	bgt.w	5caa <_realloc_r+0x7e>
    5dd2:	4657      	mov	r7, sl
    5dd4:	f8da 100c 	ldr.w	r1, [sl, #12]
    5dd8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5ddc:	1f32      	subs	r2, r6, #4
    5dde:	2a24      	cmp	r2, #36	; 0x24
    5de0:	60c1      	str	r1, [r0, #12]
    5de2:	6088      	str	r0, [r1, #8]
    5de4:	f200 80db 	bhi.w	5f9e <_realloc_r+0x372>
    5de8:	2a13      	cmp	r2, #19
    5dea:	f240 80d6 	bls.w	5f9a <_realloc_r+0x36e>
    5dee:	6821      	ldr	r1, [r4, #0]
    5df0:	f8ca 1008 	str.w	r1, [sl, #8]
    5df4:	6861      	ldr	r1, [r4, #4]
    5df6:	f8ca 100c 	str.w	r1, [sl, #12]
    5dfa:	2a1b      	cmp	r2, #27
    5dfc:	f200 80df 	bhi.w	5fbe <_realloc_r+0x392>
    5e00:	3408      	adds	r4, #8
    5e02:	f10a 0210 	add.w	r2, sl, #16
    5e06:	6821      	ldr	r1, [r4, #0]
    5e08:	6011      	str	r1, [r2, #0]
    5e0a:	6861      	ldr	r1, [r4, #4]
    5e0c:	6051      	str	r1, [r2, #4]
    5e0e:	68a1      	ldr	r1, [r4, #8]
    5e10:	6091      	str	r1, [r2, #8]
    5e12:	eb0a 0105 	add.w	r1, sl, r5
    5e16:	ebab 0205 	sub.w	r2, fp, r5
    5e1a:	f042 0201 	orr.w	r2, r2, #1
    5e1e:	6099      	str	r1, [r3, #8]
    5e20:	604a      	str	r2, [r1, #4]
    5e22:	f8da 3004 	ldr.w	r3, [sl, #4]
    5e26:	f003 0301 	and.w	r3, r3, #1
    5e2a:	432b      	orrs	r3, r5
    5e2c:	4640      	mov	r0, r8
    5e2e:	f8ca 3004 	str.w	r3, [sl, #4]
    5e32:	f7ff fee9 	bl	5c08 <__malloc_unlock>
    5e36:	e76e      	b.n	5d16 <_realloc_r+0xea>
    5e38:	6823      	ldr	r3, [r4, #0]
    5e3a:	6003      	str	r3, [r0, #0]
    5e3c:	6863      	ldr	r3, [r4, #4]
    5e3e:	6043      	str	r3, [r0, #4]
    5e40:	2a1b      	cmp	r2, #27
    5e42:	d868      	bhi.n	5f16 <_realloc_r+0x2ea>
    5e44:	f104 0208 	add.w	r2, r4, #8
    5e48:	f100 0308 	add.w	r3, r0, #8
    5e4c:	e74a      	b.n	5ce4 <_realloc_r+0xb8>
    5e4e:	eb09 0205 	add.w	r2, r9, r5
    5e52:	609a      	str	r2, [r3, #8]
    5e54:	ebac 0305 	sub.w	r3, ip, r5
    5e58:	f043 0301 	orr.w	r3, r3, #1
    5e5c:	6053      	str	r3, [r2, #4]
    5e5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5e62:	f003 0301 	and.w	r3, r3, #1
    5e66:	432b      	orrs	r3, r5
    5e68:	4640      	mov	r0, r8
    5e6a:	f844 3c04 	str.w	r3, [r4, #-4]
    5e6e:	f7ff fecb 	bl	5c08 <__malloc_unlock>
    5e72:	4627      	mov	r7, r4
    5e74:	e74f      	b.n	5d16 <_realloc_r+0xea>
    5e76:	f850 3c04 	ldr.w	r3, [r0, #-4]
    5e7a:	f023 0303 	bic.w	r3, r3, #3
    5e7e:	441e      	add	r6, r3
    5e80:	e751      	b.n	5d26 <_realloc_r+0xfa>
    5e82:	4657      	mov	r7, sl
    5e84:	f8da 100c 	ldr.w	r1, [sl, #12]
    5e88:	f857 0f08 	ldr.w	r0, [r7, #8]!
    5e8c:	1f32      	subs	r2, r6, #4
    5e8e:	2a24      	cmp	r2, #36	; 0x24
    5e90:	60c1      	str	r1, [r0, #12]
    5e92:	6088      	str	r0, [r1, #8]
    5e94:	d84c      	bhi.n	5f30 <_realloc_r+0x304>
    5e96:	2a13      	cmp	r2, #19
    5e98:	d948      	bls.n	5f2c <_realloc_r+0x300>
    5e9a:	6821      	ldr	r1, [r4, #0]
    5e9c:	f8ca 1008 	str.w	r1, [sl, #8]
    5ea0:	6861      	ldr	r1, [r4, #4]
    5ea2:	f8ca 100c 	str.w	r1, [sl, #12]
    5ea6:	2a1b      	cmp	r2, #27
    5ea8:	d856      	bhi.n	5f58 <_realloc_r+0x32c>
    5eaa:	3408      	adds	r4, #8
    5eac:	f10a 0210 	add.w	r2, sl, #16
    5eb0:	461e      	mov	r6, r3
    5eb2:	6823      	ldr	r3, [r4, #0]
    5eb4:	6013      	str	r3, [r2, #0]
    5eb6:	6863      	ldr	r3, [r4, #4]
    5eb8:	6053      	str	r3, [r2, #4]
    5eba:	68a3      	ldr	r3, [r4, #8]
    5ebc:	6093      	str	r3, [r2, #8]
    5ebe:	46d1      	mov	r9, sl
    5ec0:	463c      	mov	r4, r7
    5ec2:	e730      	b.n	5d26 <_realloc_r+0xfa>
    5ec4:	4621      	mov	r1, r4
    5ec6:	f001 fa67 	bl	7398 <memmove>
    5eca:	e711      	b.n	5cf0 <_realloc_r+0xc4>
    5ecc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    5ed0:	4657      	mov	r7, sl
    5ed2:	60cb      	str	r3, [r1, #12]
    5ed4:	6099      	str	r1, [r3, #8]
    5ed6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    5eda:	f8da 300c 	ldr.w	r3, [sl, #12]
    5ede:	60cb      	str	r3, [r1, #12]
    5ee0:	1f32      	subs	r2, r6, #4
    5ee2:	2a24      	cmp	r2, #36	; 0x24
    5ee4:	6099      	str	r1, [r3, #8]
    5ee6:	d82d      	bhi.n	5f44 <_realloc_r+0x318>
    5ee8:	2a13      	cmp	r2, #19
    5eea:	d929      	bls.n	5f40 <_realloc_r+0x314>
    5eec:	6823      	ldr	r3, [r4, #0]
    5eee:	f8ca 3008 	str.w	r3, [sl, #8]
    5ef2:	6863      	ldr	r3, [r4, #4]
    5ef4:	f8ca 300c 	str.w	r3, [sl, #12]
    5ef8:	2a1b      	cmp	r2, #27
    5efa:	d842      	bhi.n	5f82 <_realloc_r+0x356>
    5efc:	3408      	adds	r4, #8
    5efe:	f10a 0310 	add.w	r3, sl, #16
    5f02:	6822      	ldr	r2, [r4, #0]
    5f04:	601a      	str	r2, [r3, #0]
    5f06:	6862      	ldr	r2, [r4, #4]
    5f08:	605a      	str	r2, [r3, #4]
    5f0a:	68a2      	ldr	r2, [r4, #8]
    5f0c:	609a      	str	r2, [r3, #8]
    5f0e:	4666      	mov	r6, ip
    5f10:	46d1      	mov	r9, sl
    5f12:	463c      	mov	r4, r7
    5f14:	e707      	b.n	5d26 <_realloc_r+0xfa>
    5f16:	68a3      	ldr	r3, [r4, #8]
    5f18:	6083      	str	r3, [r0, #8]
    5f1a:	68e3      	ldr	r3, [r4, #12]
    5f1c:	60c3      	str	r3, [r0, #12]
    5f1e:	2a24      	cmp	r2, #36	; 0x24
    5f20:	d026      	beq.n	5f70 <_realloc_r+0x344>
    5f22:	f104 0210 	add.w	r2, r4, #16
    5f26:	f100 0310 	add.w	r3, r0, #16
    5f2a:	e6db      	b.n	5ce4 <_realloc_r+0xb8>
    5f2c:	463a      	mov	r2, r7
    5f2e:	e7bf      	b.n	5eb0 <_realloc_r+0x284>
    5f30:	4621      	mov	r1, r4
    5f32:	4638      	mov	r0, r7
    5f34:	461e      	mov	r6, r3
    5f36:	46d1      	mov	r9, sl
    5f38:	f001 fa2e 	bl	7398 <memmove>
    5f3c:	463c      	mov	r4, r7
    5f3e:	e6f2      	b.n	5d26 <_realloc_r+0xfa>
    5f40:	463b      	mov	r3, r7
    5f42:	e7de      	b.n	5f02 <_realloc_r+0x2d6>
    5f44:	4621      	mov	r1, r4
    5f46:	4638      	mov	r0, r7
    5f48:	4666      	mov	r6, ip
    5f4a:	46d1      	mov	r9, sl
    5f4c:	f001 fa24 	bl	7398 <memmove>
    5f50:	463c      	mov	r4, r7
    5f52:	e6e8      	b.n	5d26 <_realloc_r+0xfa>
    5f54:	2000154c 	.word	0x2000154c
    5f58:	68a1      	ldr	r1, [r4, #8]
    5f5a:	f8ca 1010 	str.w	r1, [sl, #16]
    5f5e:	68e1      	ldr	r1, [r4, #12]
    5f60:	f8ca 1014 	str.w	r1, [sl, #20]
    5f64:	2a24      	cmp	r2, #36	; 0x24
    5f66:	d020      	beq.n	5faa <_realloc_r+0x37e>
    5f68:	3410      	adds	r4, #16
    5f6a:	f10a 0218 	add.w	r2, sl, #24
    5f6e:	e79f      	b.n	5eb0 <_realloc_r+0x284>
    5f70:	6923      	ldr	r3, [r4, #16]
    5f72:	6103      	str	r3, [r0, #16]
    5f74:	6961      	ldr	r1, [r4, #20]
    5f76:	6141      	str	r1, [r0, #20]
    5f78:	f104 0218 	add.w	r2, r4, #24
    5f7c:	f100 0318 	add.w	r3, r0, #24
    5f80:	e6b0      	b.n	5ce4 <_realloc_r+0xb8>
    5f82:	68a3      	ldr	r3, [r4, #8]
    5f84:	f8ca 3010 	str.w	r3, [sl, #16]
    5f88:	68e3      	ldr	r3, [r4, #12]
    5f8a:	f8ca 3014 	str.w	r3, [sl, #20]
    5f8e:	2a24      	cmp	r2, #36	; 0x24
    5f90:	d021      	beq.n	5fd6 <_realloc_r+0x3aa>
    5f92:	3410      	adds	r4, #16
    5f94:	f10a 0318 	add.w	r3, sl, #24
    5f98:	e7b3      	b.n	5f02 <_realloc_r+0x2d6>
    5f9a:	463a      	mov	r2, r7
    5f9c:	e733      	b.n	5e06 <_realloc_r+0x1da>
    5f9e:	4621      	mov	r1, r4
    5fa0:	4638      	mov	r0, r7
    5fa2:	f001 f9f9 	bl	7398 <memmove>
    5fa6:	4b16      	ldr	r3, [pc, #88]	; (6000 <_realloc_r+0x3d4>)
    5fa8:	e733      	b.n	5e12 <_realloc_r+0x1e6>
    5faa:	6922      	ldr	r2, [r4, #16]
    5fac:	f8ca 2018 	str.w	r2, [sl, #24]
    5fb0:	6962      	ldr	r2, [r4, #20]
    5fb2:	f8ca 201c 	str.w	r2, [sl, #28]
    5fb6:	3418      	adds	r4, #24
    5fb8:	f10a 0220 	add.w	r2, sl, #32
    5fbc:	e778      	b.n	5eb0 <_realloc_r+0x284>
    5fbe:	68a1      	ldr	r1, [r4, #8]
    5fc0:	f8ca 1010 	str.w	r1, [sl, #16]
    5fc4:	68e1      	ldr	r1, [r4, #12]
    5fc6:	f8ca 1014 	str.w	r1, [sl, #20]
    5fca:	2a24      	cmp	r2, #36	; 0x24
    5fcc:	d00d      	beq.n	5fea <_realloc_r+0x3be>
    5fce:	3410      	adds	r4, #16
    5fd0:	f10a 0218 	add.w	r2, sl, #24
    5fd4:	e717      	b.n	5e06 <_realloc_r+0x1da>
    5fd6:	6923      	ldr	r3, [r4, #16]
    5fd8:	f8ca 3018 	str.w	r3, [sl, #24]
    5fdc:	6963      	ldr	r3, [r4, #20]
    5fde:	f8ca 301c 	str.w	r3, [sl, #28]
    5fe2:	3418      	adds	r4, #24
    5fe4:	f10a 0320 	add.w	r3, sl, #32
    5fe8:	e78b      	b.n	5f02 <_realloc_r+0x2d6>
    5fea:	6922      	ldr	r2, [r4, #16]
    5fec:	f8ca 2018 	str.w	r2, [sl, #24]
    5ff0:	6962      	ldr	r2, [r4, #20]
    5ff2:	f8ca 201c 	str.w	r2, [sl, #28]
    5ff6:	3418      	adds	r4, #24
    5ff8:	f10a 0220 	add.w	r2, sl, #32
    5ffc:	e703      	b.n	5e06 <_realloc_r+0x1da>
    5ffe:	bf00      	nop
    6000:	2000154c 	.word	0x2000154c
    6004:	00000000 	.word	0x00000000

00006008 <_strtod_l>:
    6008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    600c:	ed2d 8b10 	vpush	{d8-d15}
    6010:	b097      	sub	sp, #92	; 0x5c
    6012:	468a      	mov	sl, r1
    6014:	2100      	movs	r1, #0
    6016:	9207      	str	r2, [sp, #28]
    6018:	9112      	str	r1, [sp, #72]	; 0x48
    601a:	2200      	movs	r2, #0
    601c:	2100      	movs	r1, #0
    601e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    6022:	4680      	mov	r8, r0
    6024:	4651      	mov	r1, sl
    6026:	9111      	str	r1, [sp, #68]	; 0x44
    6028:	460f      	mov	r7, r1
    602a:	f811 2b01 	ldrb.w	r2, [r1], #1
    602e:	2a2d      	cmp	r2, #45	; 0x2d
    6030:	d85e      	bhi.n	60f0 <_strtod_l+0xe8>
    6032:	a001      	add	r0, pc, #4	; (adr r0, 6038 <_strtod_l+0x30>)
    6034:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    6038:	000061d9 	.word	0x000061d9
    603c:	000060f1 	.word	0x000060f1
    6040:	000060f1 	.word	0x000060f1
    6044:	000060f1 	.word	0x000060f1
    6048:	000060f1 	.word	0x000060f1
    604c:	000060f1 	.word	0x000060f1
    6050:	000060f1 	.word	0x000060f1
    6054:	000060f1 	.word	0x000060f1
    6058:	000060f1 	.word	0x000060f1
    605c:	00006027 	.word	0x00006027
    6060:	00006027 	.word	0x00006027
    6064:	00006027 	.word	0x00006027
    6068:	00006027 	.word	0x00006027
    606c:	00006027 	.word	0x00006027
    6070:	000060f1 	.word	0x000060f1
    6074:	000060f1 	.word	0x000060f1
    6078:	000060f1 	.word	0x000060f1
    607c:	000060f1 	.word	0x000060f1
    6080:	000060f1 	.word	0x000060f1
    6084:	000060f1 	.word	0x000060f1
    6088:	000060f1 	.word	0x000060f1
    608c:	000060f1 	.word	0x000060f1
    6090:	000060f1 	.word	0x000060f1
    6094:	000060f1 	.word	0x000060f1
    6098:	000060f1 	.word	0x000060f1
    609c:	000060f1 	.word	0x000060f1
    60a0:	000060f1 	.word	0x000060f1
    60a4:	000060f1 	.word	0x000060f1
    60a8:	000060f1 	.word	0x000060f1
    60ac:	000060f1 	.word	0x000060f1
    60b0:	000060f1 	.word	0x000060f1
    60b4:	000060f1 	.word	0x000060f1
    60b8:	00006027 	.word	0x00006027
    60bc:	000060f1 	.word	0x000060f1
    60c0:	000060f1 	.word	0x000060f1
    60c4:	000060f1 	.word	0x000060f1
    60c8:	000060f1 	.word	0x000060f1
    60cc:	000060f1 	.word	0x000060f1
    60d0:	000060f1 	.word	0x000060f1
    60d4:	000060f1 	.word	0x000060f1
    60d8:	000060f1 	.word	0x000060f1
    60dc:	000060f1 	.word	0x000060f1
    60e0:	000060f1 	.word	0x000060f1
    60e4:	00006813 	.word	0x00006813
    60e8:	000060f1 	.word	0x000060f1
    60ec:	000067ff 	.word	0x000067ff
    60f0:	2100      	movs	r1, #0
    60f2:	9109      	str	r1, [sp, #36]	; 0x24
    60f4:	2a30      	cmp	r2, #48	; 0x30
    60f6:	d07d      	beq.n	61f4 <_strtod_l+0x1ec>
    60f8:	2300      	movs	r3, #0
    60fa:	9308      	str	r3, [sp, #32]
    60fc:	2a2f      	cmp	r2, #47	; 0x2f
    60fe:	4614      	mov	r4, r2
    6100:	f240 84cd 	bls.w	6a9e <_strtod_l+0xa96>
    6104:	f04f 0900 	mov.w	r9, #0
    6108:	4638      	mov	r0, r7
    610a:	464e      	mov	r6, r9
    610c:	464d      	mov	r5, r9
    610e:	e012      	b.n	6136 <_strtod_l+0x12e>
    6110:	3001      	adds	r0, #1
    6112:	2d08      	cmp	r5, #8
    6114:	9011      	str	r0, [sp, #68]	; 0x44
    6116:	bfc8      	it	gt
    6118:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    611c:	7804      	ldrb	r4, [r0, #0]
    611e:	bfc6      	itte	gt
    6120:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    6124:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    6128:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    612c:	2c2f      	cmp	r4, #47	; 0x2f
    612e:	f105 0501 	add.w	r5, r5, #1
    6132:	4622      	mov	r2, r4
    6134:	dd6f      	ble.n	6216 <_strtod_l+0x20e>
    6136:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    613a:	2c39      	cmp	r4, #57	; 0x39
    613c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6140:	dde6      	ble.n	6110 <_strtod_l+0x108>
    6142:	499f      	ldr	r1, [pc, #636]	; (63c0 <_strtod_l+0x3b8>)
    6144:	2201      	movs	r2, #1
    6146:	f001 fa5b 	bl	7600 <strncmp>
    614a:	2800      	cmp	r0, #0
    614c:	d137      	bne.n	61be <_strtod_l+0x1b6>
    614e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6150:	461a      	mov	r2, r3
    6152:	3301      	adds	r3, #1
    6154:	9311      	str	r3, [sp, #68]	; 0x44
    6156:	7854      	ldrb	r4, [r2, #1]
    6158:	2d00      	cmp	r5, #0
    615a:	f040 8543 	bne.w	6be4 <_strtod_l+0xbdc>
    615e:	2c30      	cmp	r4, #48	; 0x30
    6160:	f040 8524 	bne.w	6bac <_strtod_l+0xba4>
    6164:	f1c3 0201 	rsb	r2, r3, #1
    6168:	1898      	adds	r0, r3, r2
    616a:	3301      	adds	r3, #1
    616c:	9311      	str	r3, [sp, #68]	; 0x44
    616e:	781c      	ldrb	r4, [r3, #0]
    6170:	2c30      	cmp	r4, #48	; 0x30
    6172:	d0f9      	beq.n	6168 <_strtod_l+0x160>
    6174:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    6178:	2b08      	cmp	r3, #8
    617a:	f200 8301 	bhi.w	6780 <_strtod_l+0x778>
    617e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    6180:	1c43      	adds	r3, r0, #1
    6182:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    6186:	930b      	str	r3, [sp, #44]	; 0x2c
    6188:	2501      	movs	r5, #1
    618a:	46bc      	mov	ip, r7
    618c:	f04f 0e00 	mov.w	lr, #0
    6190:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6194:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    6198:	2000      	movs	r0, #0
    619a:	f10c 0301 	add.w	r3, ip, #1
    619e:	9311      	str	r3, [sp, #68]	; 0x44
    61a0:	f89c 4001 	ldrb.w	r4, [ip, #1]
    61a4:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    61a8:	2909      	cmp	r1, #9
    61aa:	f200 82bb 	bhi.w	6724 <_strtod_l+0x71c>
    61ae:	3001      	adds	r0, #1
    61b0:	468b      	mov	fp, r1
    61b2:	2900      	cmp	r1, #0
    61b4:	f040 844f 	bne.w	6a56 <_strtod_l+0xa4e>
    61b8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    61bc:	e7ed      	b.n	619a <_strtod_l+0x192>
    61be:	2000      	movs	r0, #0
    61c0:	2c65      	cmp	r4, #101	; 0x65
    61c2:	46ae      	mov	lr, r5
    61c4:	900b      	str	r0, [sp, #44]	; 0x2c
    61c6:	4684      	mov	ip, r0
    61c8:	d001      	beq.n	61ce <_strtod_l+0x1c6>
    61ca:	2c45      	cmp	r4, #69	; 0x45
    61cc:	d130      	bne.n	6230 <_strtod_l+0x228>
    61ce:	2d00      	cmp	r5, #0
    61d0:	d16b      	bne.n	62aa <_strtod_l+0x2a2>
    61d2:	9b08      	ldr	r3, [sp, #32]
    61d4:	4303      	orrs	r3, r0
    61d6:	d167      	bne.n	62a8 <_strtod_l+0x2a0>
    61d8:	9b07      	ldr	r3, [sp, #28]
    61da:	ed9f 8b77 	vldr	d8, [pc, #476]	; 63b8 <_strtod_l+0x3b0>
    61de:	b113      	cbz	r3, 61e6 <_strtod_l+0x1de>
    61e0:	9b07      	ldr	r3, [sp, #28]
    61e2:	f8c3 a000 	str.w	sl, [r3]
    61e6:	eeb0 0b48 	vmov.f64	d0, d8
    61ea:	b017      	add	sp, #92	; 0x5c
    61ec:	ecbd 8b10 	vpop	{d8-d15}
    61f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61f4:	787a      	ldrb	r2, [r7, #1]
    61f6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    61fa:	2a58      	cmp	r2, #88	; 0x58
    61fc:	f000 840c 	beq.w	6a18 <_strtod_l+0xa10>
    6200:	3701      	adds	r7, #1
    6202:	9711      	str	r7, [sp, #68]	; 0x44
    6204:	783a      	ldrb	r2, [r7, #0]
    6206:	2a30      	cmp	r2, #48	; 0x30
    6208:	d0fa      	beq.n	6200 <_strtod_l+0x1f8>
    620a:	2a00      	cmp	r2, #0
    620c:	f000 80b7 	beq.w	637e <_strtod_l+0x376>
    6210:	2301      	movs	r3, #1
    6212:	9308      	str	r3, [sp, #32]
    6214:	e772      	b.n	60fc <_strtod_l+0xf4>
    6216:	496a      	ldr	r1, [pc, #424]	; (63c0 <_strtod_l+0x3b8>)
    6218:	2201      	movs	r2, #1
    621a:	f001 f9f1 	bl	7600 <strncmp>
    621e:	2800      	cmp	r0, #0
    6220:	f000 80c0 	beq.w	63a4 <_strtod_l+0x39c>
    6224:	46ae      	mov	lr, r5
    6226:	f04f 0c00 	mov.w	ip, #0
    622a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    622e:	4660      	mov	r0, ip
    6230:	f04f 0b00 	mov.w	fp, #0
    6234:	2d00      	cmp	r5, #0
    6236:	d07e      	beq.n	6336 <_strtod_l+0x32e>
    6238:	ee07 6a90 	vmov	s15, r6
    623c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    623e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    6242:	ebab 0303 	sub.w	r3, fp, r3
    6246:	f1be 0f00 	cmp.w	lr, #0
    624a:	bf08      	it	eq
    624c:	46ae      	moveq	lr, r5
    624e:	2d10      	cmp	r5, #16
    6250:	930a      	str	r3, [sp, #40]	; 0x28
    6252:	462b      	mov	r3, r5
    6254:	bfa8      	it	ge
    6256:	2310      	movge	r3, #16
    6258:	2d09      	cmp	r5, #9
    625a:	ed8d 7b04 	vstr	d7, [sp, #16]
    625e:	dd0c      	ble.n	627a <_strtod_l+0x272>
    6260:	4a58      	ldr	r2, [pc, #352]	; (63c4 <_strtod_l+0x3bc>)
    6262:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6266:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    626a:	ee06 9a90 	vmov	s13, r9
    626e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    6272:	eea7 6b05 	vfma.f64	d6, d7, d5
    6276:	ed8d 6b04 	vstr	d6, [sp, #16]
    627a:	2d0f      	cmp	r5, #15
    627c:	f300 80a8 	bgt.w	63d0 <_strtod_l+0x3c8>
    6280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6282:	2a00      	cmp	r2, #0
    6284:	f000 83e4 	beq.w	6a50 <_strtod_l+0xa48>
    6288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    628a:	f340 833c 	ble.w	6906 <_strtod_l+0x8fe>
    628e:	2a16      	cmp	r2, #22
    6290:	f340 8498 	ble.w	6bc4 <_strtod_l+0xbbc>
    6294:	990a      	ldr	r1, [sp, #40]	; 0x28
    6296:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    629a:	428a      	cmp	r2, r1
    629c:	f280 84a6 	bge.w	6bec <_strtod_l+0xbe4>
    62a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    62a2:	1aeb      	subs	r3, r5, r3
    62a4:	4413      	add	r3, r2
    62a6:	e099      	b.n	63dc <_strtod_l+0x3d4>
    62a8:	2500      	movs	r5, #0
    62aa:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    62ae:	f10a 0301 	add.w	r3, sl, #1
    62b2:	9311      	str	r3, [sp, #68]	; 0x44
    62b4:	f89a 4001 	ldrb.w	r4, [sl, #1]
    62b8:	2c2b      	cmp	r4, #43	; 0x2b
    62ba:	f000 825e 	beq.w	677a <_strtod_l+0x772>
    62be:	2c2d      	cmp	r4, #45	; 0x2d
    62c0:	f000 81f7 	beq.w	66b2 <_strtod_l+0x6aa>
    62c4:	2300      	movs	r3, #0
    62c6:	930a      	str	r3, [sp, #40]	; 0x28
    62c8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    62cc:	2b09      	cmp	r3, #9
    62ce:	f200 81eb 	bhi.w	66a8 <_strtod_l+0x6a0>
    62d2:	2c30      	cmp	r4, #48	; 0x30
    62d4:	d105      	bne.n	62e2 <_strtod_l+0x2da>
    62d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    62d8:	3301      	adds	r3, #1
    62da:	9311      	str	r3, [sp, #68]	; 0x44
    62dc:	781c      	ldrb	r4, [r3, #0]
    62de:	2c30      	cmp	r4, #48	; 0x30
    62e0:	d0fa      	beq.n	62d8 <_strtod_l+0x2d0>
    62e2:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    62e6:	2b08      	cmp	r3, #8
    62e8:	d8a2      	bhi.n	6230 <_strtod_l+0x228>
    62ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
    62ec:	920c      	str	r2, [sp, #48]	; 0x30
    62ee:	1c53      	adds	r3, r2, #1
    62f0:	9311      	str	r3, [sp, #68]	; 0x44
    62f2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    62f6:	7854      	ldrb	r4, [r2, #1]
    62f8:	2c2f      	cmp	r4, #47	; 0x2f
    62fa:	dc07      	bgt.n	630c <_strtod_l+0x304>
    62fc:	e3de      	b.n	6abc <_strtod_l+0xab4>
    62fe:	3301      	adds	r3, #1
    6300:	9311      	str	r3, [sp, #68]	; 0x44
    6302:	784c      	ldrb	r4, [r1, #1]
    6304:	2c2f      	cmp	r4, #47	; 0x2f
    6306:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    630a:	dd06      	ble.n	631a <_strtod_l+0x312>
    630c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    6310:	2c39      	cmp	r4, #57	; 0x39
    6312:	4619      	mov	r1, r3
    6314:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6318:	ddf1      	ble.n	62fe <_strtod_l+0x2f6>
    631a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    631c:	1a9b      	subs	r3, r3, r2
    631e:	2b08      	cmp	r3, #8
    6320:	f340 83cc 	ble.w	6abc <_strtod_l+0xab4>
    6324:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    6328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    632a:	2b00      	cmp	r3, #0
    632c:	d082      	beq.n	6234 <_strtod_l+0x22c>
    632e:	f1cb 0b00 	rsb	fp, fp, #0
    6332:	2d00      	cmp	r5, #0
    6334:	d180      	bne.n	6238 <_strtod_l+0x230>
    6336:	9b08      	ldr	r3, [sp, #32]
    6338:	4303      	orrs	r3, r0
    633a:	d120      	bne.n	637e <_strtod_l+0x376>
    633c:	f1bc 0f00 	cmp.w	ip, #0
    6340:	f47f af4a 	bne.w	61d8 <_strtod_l+0x1d0>
    6344:	2c69      	cmp	r4, #105	; 0x69
    6346:	f000 83cf 	beq.w	6ae8 <_strtod_l+0xae0>
    634a:	f300 82f3 	bgt.w	6934 <_strtod_l+0x92c>
    634e:	2c49      	cmp	r4, #73	; 0x49
    6350:	f000 83ca 	beq.w	6ae8 <_strtod_l+0xae0>
    6354:	2c4e      	cmp	r4, #78	; 0x4e
    6356:	f47f af3f 	bne.w	61d8 <_strtod_l+0x1d0>
    635a:	491b      	ldr	r1, [pc, #108]	; (63c8 <_strtod_l+0x3c0>)
    635c:	a811      	add	r0, sp, #68	; 0x44
    635e:	f002 fb83 	bl	8a68 <__match>
    6362:	2800      	cmp	r0, #0
    6364:	f43f af38 	beq.w	61d8 <_strtod_l+0x1d0>
    6368:	9b11      	ldr	r3, [sp, #68]	; 0x44
    636a:	781b      	ldrb	r3, [r3, #0]
    636c:	2b28      	cmp	r3, #40	; 0x28
    636e:	f000 84f2 	beq.w	6d56 <_strtod_l+0xd4e>
    6372:	4816      	ldr	r0, [pc, #88]	; (63cc <_strtod_l+0x3c4>)
    6374:	f001 feb4 	bl	80e0 <nan>
    6378:	eeb0 8b40 	vmov.f64	d8, d0
    637c:	e001      	b.n	6382 <_strtod_l+0x37a>
    637e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 63b8 <_strtod_l+0x3b0>
    6382:	9a07      	ldr	r2, [sp, #28]
    6384:	b10a      	cbz	r2, 638a <_strtod_l+0x382>
    6386:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6388:	6013      	str	r3, [r2, #0]
    638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    638c:	2b00      	cmp	r3, #0
    638e:	f43f af2a 	beq.w	61e6 <_strtod_l+0x1de>
    6392:	eeb1 8b48 	vneg.f64	d8, d8
    6396:	eeb0 0b48 	vmov.f64	d0, d8
    639a:	b017      	add	sp, #92	; 0x5c
    639c:	ecbd 8b10 	vpop	{d8-d15}
    63a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    63a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    63a6:	900b      	str	r0, [sp, #44]	; 0x2c
    63a8:	1c5a      	adds	r2, r3, #1
    63aa:	9211      	str	r2, [sp, #68]	; 0x44
    63ac:	785c      	ldrb	r4, [r3, #1]
    63ae:	46ae      	mov	lr, r5
    63b0:	e6f8      	b.n	61a4 <_strtod_l+0x19c>
    63b2:	bf00      	nop
    63b4:	f3af 8000 	nop.w
	...
    63c0:	20000a78 	.word	0x20000a78
    63c4:	200002a8 	.word	0x200002a8
    63c8:	20000a88 	.word	0x20000a88
    63cc:	200003c0 	.word	0x200003c0
    63d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    63d2:	1aeb      	subs	r3, r5, r3
    63d4:	4413      	add	r3, r2
    63d6:	2b00      	cmp	r3, #0
    63d8:	f340 82b0 	ble.w	693c <_strtod_l+0x934>
    63dc:	f013 010f 	ands.w	r1, r3, #15
    63e0:	d00a      	beq.n	63f8 <_strtod_l+0x3f0>
    63e2:	4ac3      	ldr	r2, [pc, #780]	; (66f0 <_strtod_l+0x6e8>)
    63e4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    63e8:	ed9d 6b04 	vldr	d6, [sp, #16]
    63ec:	ed92 7b00 	vldr	d7, [r2]
    63f0:	ee27 7b06 	vmul.f64	d7, d7, d6
    63f4:	ed8d 7b04 	vstr	d7, [sp, #16]
    63f8:	f033 020f 	bics.w	r2, r3, #15
    63fc:	f040 8238 	bne.w	6870 <_strtod_l+0x868>
    6400:	2300      	movs	r3, #0
    6402:	9308      	str	r3, [sp, #32]
    6404:	9600      	str	r6, [sp, #0]
    6406:	462b      	mov	r3, r5
    6408:	4672      	mov	r2, lr
    640a:	4639      	mov	r1, r7
    640c:	4640      	mov	r0, r8
    640e:	f002 fcb7 	bl	8d80 <__s2b>
    6412:	4681      	mov	r9, r0
    6414:	2800      	cmp	r0, #0
    6416:	f000 82e1 	beq.w	69dc <_strtod_l+0x9d4>
    641a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    641c:	eba3 0b0b 	sub.w	fp, r3, fp
    6420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6422:	ed9f eba9 	vldr	d14, [pc, #676]	; 66c8 <_strtod_l+0x6c0>
    6426:	2b00      	cmp	r3, #0
    6428:	ed9f cba9 	vldr	d12, [pc, #676]	; 66d0 <_strtod_l+0x6c8>
    642c:	ed9f dbaa 	vldr	d13, [pc, #680]	; 66d8 <_strtod_l+0x6d0>
    6430:	ed9f bbab 	vldr	d11, [pc, #684]	; 66e0 <_strtod_l+0x6d8>
    6434:	bfb4      	ite	lt
    6436:	465a      	movlt	r2, fp
    6438:	2200      	movge	r2, #0
    643a:	f04f 0a00 	mov.w	sl, #0
    643e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6442:	920b      	str	r2, [sp, #44]	; 0x2c
    6444:	930c      	str	r3, [sp, #48]	; 0x30
    6446:	4654      	mov	r4, sl
    6448:	f8d9 1004 	ldr.w	r1, [r9, #4]
    644c:	4640      	mov	r0, r8
    644e:	f002 fc15 	bl	8c7c <_Balloc>
    6452:	4606      	mov	r6, r0
    6454:	2800      	cmp	r0, #0
    6456:	f000 810e 	beq.w	6676 <_strtod_l+0x66e>
    645a:	f8d9 2010 	ldr.w	r2, [r9, #16]
    645e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6462:	3202      	adds	r2, #2
    6464:	0092      	lsls	r2, r2, #2
    6466:	f109 010c 	add.w	r1, r9, #12
    646a:	300c      	adds	r0, #12
    646c:	f7fd fb44 	bl	3af8 <memcpy>
    6470:	eeb0 0b48 	vmov.f64	d0, d8
    6474:	aa14      	add	r2, sp, #80	; 0x50
    6476:	a913      	add	r1, sp, #76	; 0x4c
    6478:	4640      	mov	r0, r8
    647a:	f003 f83d 	bl	94f8 <__d2b>
    647e:	9012      	str	r0, [sp, #72]	; 0x48
    6480:	2800      	cmp	r0, #0
    6482:	f000 80e4 	beq.w	664e <_strtod_l+0x646>
    6486:	2101      	movs	r1, #1
    6488:	4640      	mov	r0, r8
    648a:	f002 fd21 	bl	8ed0 <__i2b>
    648e:	4604      	mov	r4, r0
    6490:	2800      	cmp	r0, #0
    6492:	f000 80f0 	beq.w	6676 <_strtod_l+0x66e>
    6496:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6498:	2a00      	cmp	r2, #0
    649a:	f2c0 80de 	blt.w	665a <_strtod_l+0x652>
    649e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64a0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    64a2:	eb02 0b03 	add.w	fp, r2, r3
    64a6:	9b08      	ldr	r3, [sp, #32]
    64a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    64aa:	1ad2      	subs	r2, r2, r3
    64ac:	442a      	add	r2, r5
    64ae:	4b91      	ldr	r3, [pc, #580]	; (66f4 <_strtod_l+0x6ec>)
    64b0:	3a01      	subs	r2, #1
    64b2:	429a      	cmp	r2, r3
    64b4:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    64b8:	f280 8098 	bge.w	65ec <_strtod_l+0x5e4>
    64bc:	1a99      	subs	r1, r3, r2
    64be:	291f      	cmp	r1, #31
    64c0:	eba5 0501 	sub.w	r5, r5, r1
    64c4:	f300 80e3 	bgt.w	668e <_strtod_l+0x686>
    64c8:	2201      	movs	r2, #1
    64ca:	fa02 f301 	lsl.w	r3, r2, r1
    64ce:	930d      	str	r3, [sp, #52]	; 0x34
    64d0:	2300      	movs	r3, #0
    64d2:	930e      	str	r3, [sp, #56]	; 0x38
    64d4:	442f      	add	r7, r5
    64d6:	9b08      	ldr	r3, [sp, #32]
    64d8:	445d      	add	r5, fp
    64da:	45ab      	cmp	fp, r5
    64dc:	465a      	mov	r2, fp
    64de:	441f      	add	r7, r3
    64e0:	bfa8      	it	ge
    64e2:	462a      	movge	r2, r5
    64e4:	42ba      	cmp	r2, r7
    64e6:	bfa8      	it	ge
    64e8:	463a      	movge	r2, r7
    64ea:	2a00      	cmp	r2, #0
    64ec:	dd03      	ble.n	64f6 <_strtod_l+0x4ee>
    64ee:	1aad      	subs	r5, r5, r2
    64f0:	1abf      	subs	r7, r7, r2
    64f2:	ebab 0b02 	sub.w	fp, fp, r2
    64f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    64f8:	2b00      	cmp	r3, #0
    64fa:	f300 8088 	bgt.w	660e <_strtod_l+0x606>
    64fe:	2d00      	cmp	r5, #0
    6500:	f300 809c 	bgt.w	663c <_strtod_l+0x634>
    6504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6506:	2b00      	cmp	r3, #0
    6508:	f300 80b7 	bgt.w	667a <_strtod_l+0x672>
    650c:	2f00      	cmp	r7, #0
    650e:	f300 80a9 	bgt.w	6664 <_strtod_l+0x65c>
    6512:	f1bb 0f00 	cmp.w	fp, #0
    6516:	dd08      	ble.n	652a <_strtod_l+0x522>
    6518:	4621      	mov	r1, r4
    651a:	465a      	mov	r2, fp
    651c:	4640      	mov	r0, r8
    651e:	f002 fe13 	bl	9148 <__lshift>
    6522:	4604      	mov	r4, r0
    6524:	2800      	cmp	r0, #0
    6526:	f000 80a6 	beq.w	6676 <_strtod_l+0x66e>
    652a:	9912      	ldr	r1, [sp, #72]	; 0x48
    652c:	4632      	mov	r2, r6
    652e:	4640      	mov	r0, r8
    6530:	f002 fea4 	bl	927c <__mdiff>
    6534:	4682      	mov	sl, r0
    6536:	2800      	cmp	r0, #0
    6538:	f000 809d 	beq.w	6676 <_strtod_l+0x66e>
    653c:	2300      	movs	r3, #0
    653e:	68c5      	ldr	r5, [r0, #12]
    6540:	60c3      	str	r3, [r0, #12]
    6542:	4621      	mov	r1, r4
    6544:	f002 fe78 	bl	9238 <__mcmp>
    6548:	2800      	cmp	r0, #0
    654a:	f2c0 83c7 	blt.w	6cdc <_strtod_l+0xcd4>
    654e:	f000 8361 	beq.w	6c14 <_strtod_l+0xc0c>
    6552:	4621      	mov	r1, r4
    6554:	4650      	mov	r0, sl
    6556:	f003 f839 	bl	95cc <__ratio>
    655a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    655e:	eeb4 0bc7 	vcmpe.f64	d0, d7
    6562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6566:	d846      	bhi.n	65f6 <_strtod_l+0x5ee>
    6568:	2d00      	cmp	r5, #0
    656a:	f000 80cb 	beq.w	6704 <_strtod_l+0x6fc>
    656e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6572:	9805      	ldr	r0, [sp, #20]
    6574:	4b60      	ldr	r3, [pc, #384]	; (66f8 <_strtod_l+0x6f0>)
    6576:	2200      	movs	r2, #0
    6578:	4960      	ldr	r1, [pc, #384]	; (66fc <_strtod_l+0x6f4>)
    657a:	f8df c184 	ldr.w	ip, [pc, #388]	; 6700 <_strtod_l+0x6f8>
    657e:	ea00 0701 	and.w	r7, r0, r1
    6582:	4567      	cmp	r7, ip
    6584:	f000 80d4 	beq.w	6730 <_strtod_l+0x728>
    6588:	9908      	ldr	r1, [sp, #32]
    658a:	b159      	cbz	r1, 65a4 <_strtod_l+0x59c>
    658c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    6590:	d808      	bhi.n	65a4 <_strtod_l+0x59c>
    6592:	eeb4 9bcb 	vcmpe.f64	d9, d11
    6596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    659a:	f240 8156 	bls.w	684a <_strtod_l+0x842>
    659e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    65a2:	1bcb      	subs	r3, r1, r7
    65a4:	eeb0 0b48 	vmov.f64	d0, d8
    65a8:	ec43 2b1a 	vmov	d10, r2, r3
    65ac:	f002 ff10 	bl	93d0 <__ulp>
    65b0:	eeaa 8b00 	vfma.f64	d8, d10, d0
    65b4:	ed8d 8b04 	vstr	d8, [sp, #16]
    65b8:	ee18 3a90 	vmov	r3, s17
    65bc:	9a08      	ldr	r2, [sp, #32]
    65be:	b922      	cbnz	r2, 65ca <_strtod_l+0x5c2>
    65c0:	4a4e      	ldr	r2, [pc, #312]	; (66fc <_strtod_l+0x6f4>)
    65c2:	401a      	ands	r2, r3
    65c4:	4297      	cmp	r7, r2
    65c6:	f000 80e4 	beq.w	6792 <_strtod_l+0x78a>
    65ca:	9912      	ldr	r1, [sp, #72]	; 0x48
    65cc:	4640      	mov	r0, r8
    65ce:	f002 fb7b 	bl	8cc8 <_Bfree>
    65d2:	4631      	mov	r1, r6
    65d4:	4640      	mov	r0, r8
    65d6:	f002 fb77 	bl	8cc8 <_Bfree>
    65da:	4621      	mov	r1, r4
    65dc:	4640      	mov	r0, r8
    65de:	f002 fb73 	bl	8cc8 <_Bfree>
    65e2:	4651      	mov	r1, sl
    65e4:	4640      	mov	r0, r8
    65e6:	f002 fb6f 	bl	8cc8 <_Bfree>
    65ea:	e72d      	b.n	6448 <_strtod_l+0x440>
    65ec:	2301      	movs	r3, #1
    65ee:	2100      	movs	r1, #0
    65f0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    65f4:	e76e      	b.n	64d4 <_strtod_l+0x4cc>
    65f6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    65fa:	ee20 9b09 	vmul.f64	d9, d0, d9
    65fe:	2d00      	cmp	r5, #0
    6600:	d15f      	bne.n	66c2 <_strtod_l+0x6ba>
    6602:	eeb1 7b49 	vneg.f64	d7, d9
    6606:	9805      	ldr	r0, [sp, #20]
    6608:	ec53 2b17 	vmov	r2, r3, d7
    660c:	e7b4      	b.n	6578 <_strtod_l+0x570>
    660e:	4621      	mov	r1, r4
    6610:	461a      	mov	r2, r3
    6612:	4640      	mov	r0, r8
    6614:	f002 fd38 	bl	9088 <__pow5mult>
    6618:	4604      	mov	r4, r0
    661a:	b360      	cbz	r0, 6676 <_strtod_l+0x66e>
    661c:	4601      	mov	r1, r0
    661e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6620:	4640      	mov	r0, r8
    6622:	f002 fc83 	bl	8f2c <__multiply>
    6626:	b330      	cbz	r0, 6676 <_strtod_l+0x66e>
    6628:	900f      	str	r0, [sp, #60]	; 0x3c
    662a:	9912      	ldr	r1, [sp, #72]	; 0x48
    662c:	4640      	mov	r0, r8
    662e:	f002 fb4b 	bl	8cc8 <_Bfree>
    6632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6634:	9212      	str	r2, [sp, #72]	; 0x48
    6636:	2d00      	cmp	r5, #0
    6638:	f77f af64 	ble.w	6504 <_strtod_l+0x4fc>
    663c:	9912      	ldr	r1, [sp, #72]	; 0x48
    663e:	462a      	mov	r2, r5
    6640:	4640      	mov	r0, r8
    6642:	f002 fd81 	bl	9148 <__lshift>
    6646:	9012      	str	r0, [sp, #72]	; 0x48
    6648:	2800      	cmp	r0, #0
    664a:	f47f af5b 	bne.w	6504 <_strtod_l+0x4fc>
    664e:	2322      	movs	r3, #34	; 0x22
    6650:	ed9f 8b25 	vldr	d8, [pc, #148]	; 66e8 <_strtod_l+0x6e0>
    6654:	f8c8 3000 	str.w	r3, [r8]
    6658:	e0bc      	b.n	67d4 <_strtod_l+0x7cc>
    665a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    665c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    6660:	1a9f      	subs	r7, r3, r2
    6662:	e720      	b.n	64a6 <_strtod_l+0x49e>
    6664:	4631      	mov	r1, r6
    6666:	463a      	mov	r2, r7
    6668:	4640      	mov	r0, r8
    666a:	f002 fd6d 	bl	9148 <__lshift>
    666e:	4606      	mov	r6, r0
    6670:	2800      	cmp	r0, #0
    6672:	f47f af4e 	bne.w	6512 <_strtod_l+0x50a>
    6676:	9812      	ldr	r0, [sp, #72]	; 0x48
    6678:	e7e9      	b.n	664e <_strtod_l+0x646>
    667a:	4631      	mov	r1, r6
    667c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    667e:	4640      	mov	r0, r8
    6680:	f002 fd02 	bl	9088 <__pow5mult>
    6684:	4606      	mov	r6, r0
    6686:	2800      	cmp	r0, #0
    6688:	f47f af40 	bne.w	650c <_strtod_l+0x504>
    668c:	e7f3      	b.n	6676 <_strtod_l+0x66e>
    668e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    6692:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    6696:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    669a:	2101      	movs	r1, #1
    669c:	32e2      	adds	r2, #226	; 0xe2
    669e:	fa01 f302 	lsl.w	r3, r1, r2
    66a2:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    66a6:	e715      	b.n	64d4 <_strtod_l+0x4cc>
    66a8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    66ac:	f04f 0b00 	mov.w	fp, #0
    66b0:	e5c0      	b.n	6234 <_strtod_l+0x22c>
    66b2:	2301      	movs	r3, #1
    66b4:	930a      	str	r3, [sp, #40]	; 0x28
    66b6:	f10a 0302 	add.w	r3, sl, #2
    66ba:	9311      	str	r3, [sp, #68]	; 0x44
    66bc:	f89a 4002 	ldrb.w	r4, [sl, #2]
    66c0:	e602      	b.n	62c8 <_strtod_l+0x2c0>
    66c2:	eeb0 7b49 	vmov.f64	d7, d9
    66c6:	e79e      	b.n	6606 <_strtod_l+0x5fe>
    66c8:	94a03595 	.word	0x94a03595
    66cc:	3fcfffff 	.word	0x3fcfffff
    66d0:	94a03595 	.word	0x94a03595
    66d4:	3fdfffff 	.word	0x3fdfffff
    66d8:	35afe535 	.word	0x35afe535
    66dc:	3fe00000 	.word	0x3fe00000
    66e0:	ffc00000 	.word	0xffc00000
    66e4:	41dfffff 	.word	0x41dfffff
    66e8:	00000000 	.word	0x00000000
    66ec:	7ff00000 	.word	0x7ff00000
    66f0:	200002a8 	.word	0x200002a8
    66f4:	fffffc02 	.word	0xfffffc02
    66f8:	3ff00000 	.word	0x3ff00000
    66fc:	7ff00000 	.word	0x7ff00000
    6700:	7fe00000 	.word	0x7fe00000
    6704:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6708:	2900      	cmp	r1, #0
    670a:	f000 8085 	beq.w	6818 <_strtod_l+0x810>
    670e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6712:	2901      	cmp	r1, #1
    6714:	f000 81d8 	beq.w	6ac8 <_strtod_l+0xac0>
    6718:	4610      	mov	r0, r2
    671a:	4bb7      	ldr	r3, [pc, #732]	; (69f8 <_strtod_l+0x9f0>)
    671c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    6720:	2200      	movs	r2, #0
    6722:	e729      	b.n	6578 <_strtod_l+0x570>
    6724:	2c65      	cmp	r4, #101	; 0x65
    6726:	f04f 0c01 	mov.w	ip, #1
    672a:	f43f adbe 	beq.w	62aa <_strtod_l+0x2a2>
    672e:	e54c      	b.n	61ca <_strtod_l+0x1c2>
    6730:	ec43 2b1a 	vmov	d10, r2, r3
    6734:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    6738:	9305      	str	r3, [sp, #20]
    673a:	ed9d fb04 	vldr	d15, [sp, #16]
    673e:	eeb0 0b4f 	vmov.f64	d0, d15
    6742:	f002 fe45 	bl	93d0 <__ulp>
    6746:	49ad      	ldr	r1, [pc, #692]	; (69fc <_strtod_l+0x9f4>)
    6748:	eeaa fb00 	vfma.f64	d15, d10, d0
    674c:	ee1f 3a90 	vmov	r3, s31
    6750:	4aab      	ldr	r2, [pc, #684]	; (6a00 <_strtod_l+0x9f8>)
    6752:	4019      	ands	r1, r3
    6754:	4291      	cmp	r1, r2
    6756:	ed8d fb04 	vstr	d15, [sp, #16]
    675a:	d972      	bls.n	6842 <_strtod_l+0x83a>
    675c:	4ba9      	ldr	r3, [pc, #676]	; (6a04 <_strtod_l+0x9fc>)
    675e:	ee18 2a90 	vmov	r2, s17
    6762:	429a      	cmp	r2, r3
    6764:	d103      	bne.n	676e <_strtod_l+0x766>
    6766:	ee18 3a10 	vmov	r3, s16
    676a:	3301      	adds	r3, #1
    676c:	d083      	beq.n	6676 <_strtod_l+0x66e>
    676e:	4aa5      	ldr	r2, [pc, #660]	; (6a04 <_strtod_l+0x9fc>)
    6770:	f04f 33ff 	mov.w	r3, #4294967295
    6774:	e9cd 3204 	strd	r3, r2, [sp, #16]
    6778:	e727      	b.n	65ca <_strtod_l+0x5c2>
    677a:	2300      	movs	r3, #0
    677c:	930a      	str	r3, [sp, #40]	; 0x28
    677e:	e79a      	b.n	66b6 <_strtod_l+0x6ae>
    6780:	2c65      	cmp	r4, #101	; 0x65
    6782:	f000 80d0 	beq.w	6926 <_strtod_l+0x91e>
    6786:	2c45      	cmp	r4, #69	; 0x45
    6788:	f000 80cd 	beq.w	6926 <_strtod_l+0x91e>
    678c:	f04f 0c01 	mov.w	ip, #1
    6790:	e5d1      	b.n	6336 <_strtod_l+0x32e>
    6792:	ec51 0b19 	vmov	r0, r1, d9
    6796:	930d      	str	r3, [sp, #52]	; 0x34
    6798:	f005 ff60 	bl	c65c <__aeabi_d2lz>
    679c:	f005 ff30 	bl	c600 <__aeabi_l2d>
    67a0:	9b04      	ldr	r3, [sp, #16]
    67a2:	431d      	orrs	r5, r3
    67a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    67a6:	ec41 0b17 	vmov	d7, r0, r1
    67aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    67ae:	431d      	orrs	r5, r3
    67b0:	ee39 9b47 	vsub.f64	d9, d9, d7
    67b4:	f000 80a0 	beq.w	68f8 <_strtod_l+0x8f0>
    67b8:	eeb4 9bcc 	vcmpe.f64	d9, d12
    67bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    67c0:	d405      	bmi.n	67ce <_strtod_l+0x7c6>
    67c2:	eeb4 9bcd 	vcmpe.f64	d9, d13
    67c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    67ca:	f77f aefe 	ble.w	65ca <_strtod_l+0x5c2>
    67ce:	ed9d 8b04 	vldr	d8, [sp, #16]
    67d2:	9812      	ldr	r0, [sp, #72]	; 0x48
    67d4:	4601      	mov	r1, r0
    67d6:	4640      	mov	r0, r8
    67d8:	f002 fa76 	bl	8cc8 <_Bfree>
    67dc:	4631      	mov	r1, r6
    67de:	4640      	mov	r0, r8
    67e0:	f002 fa72 	bl	8cc8 <_Bfree>
    67e4:	4621      	mov	r1, r4
    67e6:	4640      	mov	r0, r8
    67e8:	f002 fa6e 	bl	8cc8 <_Bfree>
    67ec:	4649      	mov	r1, r9
    67ee:	4640      	mov	r0, r8
    67f0:	f002 fa6a 	bl	8cc8 <_Bfree>
    67f4:	4651      	mov	r1, sl
    67f6:	4640      	mov	r0, r8
    67f8:	f002 fa66 	bl	8cc8 <_Bfree>
    67fc:	e5c1      	b.n	6382 <_strtod_l+0x37a>
    67fe:	2201      	movs	r2, #1
    6800:	9209      	str	r2, [sp, #36]	; 0x24
    6802:	1c79      	adds	r1, r7, #1
    6804:	9111      	str	r1, [sp, #68]	; 0x44
    6806:	787a      	ldrb	r2, [r7, #1]
    6808:	2a00      	cmp	r2, #0
    680a:	f43f ace5 	beq.w	61d8 <_strtod_l+0x1d0>
    680e:	460f      	mov	r7, r1
    6810:	e470      	b.n	60f4 <_strtod_l+0xec>
    6812:	2200      	movs	r2, #0
    6814:	9209      	str	r2, [sp, #36]	; 0x24
    6816:	e7f4      	b.n	6802 <_strtod_l+0x7fa>
    6818:	f3c2 0313 	ubfx	r3, r2, #0, #20
    681c:	4610      	mov	r0, r2
    681e:	2b00      	cmp	r3, #0
    6820:	f47f af7b 	bne.w	671a <_strtod_l+0x712>
    6824:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    6828:	eeb4 0bc7 	vcmpe.f64	d0, d7
    682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6830:	f100 81d3 	bmi.w	6bda <_strtod_l+0xbd2>
    6834:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6838:	ee20 9b09 	vmul.f64	d9, d0, d9
    683c:	eeb1 7b49 	vneg.f64	d7, d9
    6840:	e6e2      	b.n	6608 <_strtod_l+0x600>
    6842:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    6846:	9305      	str	r3, [sp, #20]
    6848:	e6b8      	b.n	65bc <_strtod_l+0x5b4>
    684a:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    684e:	ee19 3a10 	vmov	r3, s18
    6852:	2b01      	cmp	r3, #1
    6854:	bf38      	it	cc
    6856:	2301      	movcc	r3, #1
    6858:	ee09 3a10 	vmov	s18, r3
    685c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    6860:	2d00      	cmp	r5, #0
    6862:	f040 813e 	bne.w	6ae2 <_strtod_l+0xada>
    6866:	eeb1 7b49 	vneg.f64	d7, d9
    686a:	ec53 2b17 	vmov	r2, r3, d7
    686e:	e696      	b.n	659e <_strtod_l+0x596>
    6870:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    6874:	f300 80b2 	bgt.w	69dc <_strtod_l+0x9d4>
    6878:	2a10      	cmp	r2, #16
    687a:	ea4f 1322 	mov.w	r3, r2, asr #4
    687e:	f340 8286 	ble.w	6d8e <_strtod_l+0xd86>
    6882:	4c61      	ldr	r4, [pc, #388]	; (6a08 <_strtod_l+0xa00>)
    6884:	ed9d 7b04 	vldr	d7, [sp, #16]
    6888:	2000      	movs	r0, #0
    688a:	4622      	mov	r2, r4
    688c:	4601      	mov	r1, r0
    688e:	f013 0f01 	tst.w	r3, #1
    6892:	f101 0101 	add.w	r1, r1, #1
    6896:	ea4f 0363 	mov.w	r3, r3, asr #1
    689a:	d004      	beq.n	68a6 <_strtod_l+0x89e>
    689c:	ed92 6b00 	vldr	d6, [r2]
    68a0:	2001      	movs	r0, #1
    68a2:	ee27 7b06 	vmul.f64	d7, d7, d6
    68a6:	2b01      	cmp	r3, #1
    68a8:	f102 0208 	add.w	r2, r2, #8
    68ac:	d1ef      	bne.n	688e <_strtod_l+0x886>
    68ae:	b108      	cbz	r0, 68b4 <_strtod_l+0x8ac>
    68b0:	ed8d 7b04 	vstr	d7, [sp, #16]
    68b4:	9b05      	ldr	r3, [sp, #20]
    68b6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    68ba:	9305      	str	r3, [sp, #20]
    68bc:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    68c0:	ed9d 6b04 	vldr	d6, [sp, #16]
    68c4:	ed94 7b00 	vldr	d7, [r4]
    68c8:	4b4c      	ldr	r3, [pc, #304]	; (69fc <_strtod_l+0x9f4>)
    68ca:	ee27 7b06 	vmul.f64	d7, d7, d6
    68ce:	ee17 2a90 	vmov	r2, s15
    68d2:	494e      	ldr	r1, [pc, #312]	; (6a0c <_strtod_l+0xa04>)
    68d4:	4013      	ands	r3, r2
    68d6:	428b      	cmp	r3, r1
    68d8:	ed8d 7b04 	vstr	d7, [sp, #16]
    68dc:	d87e      	bhi.n	69dc <_strtod_l+0x9d4>
    68de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    68e2:	428b      	cmp	r3, r1
    68e4:	f240 81d6 	bls.w	6c94 <_strtod_l+0xc8c>
    68e8:	4c46      	ldr	r4, [pc, #280]	; (6a04 <_strtod_l+0x9fc>)
    68ea:	f04f 33ff 	mov.w	r3, #4294967295
    68ee:	e9cd 3404 	strd	r3, r4, [sp, #16]
    68f2:	2300      	movs	r3, #0
    68f4:	9308      	str	r3, [sp, #32]
    68f6:	e585      	b.n	6404 <_strtod_l+0x3fc>
    68f8:	eeb4 9bce 	vcmpe.f64	d9, d14
    68fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6900:	f57f ae63 	bpl.w	65ca <_strtod_l+0x5c2>
    6904:	e763      	b.n	67ce <_strtod_l+0x7c6>
    6906:	3216      	adds	r2, #22
    6908:	f6ff ad62 	blt.w	63d0 <_strtod_l+0x3c8>
    690c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    690e:	eba3 0b0b 	sub.w	fp, r3, fp
    6912:	4b3f      	ldr	r3, [pc, #252]	; (6a10 <_strtod_l+0xa08>)
    6914:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    6918:	ed93 7b00 	vldr	d7, [r3]
    691c:	ed9d 6b04 	vldr	d6, [sp, #16]
    6920:	ee86 8b07 	vdiv.f64	d8, d6, d7
    6924:	e52d      	b.n	6382 <_strtod_l+0x37a>
    6926:	f04f 0e00 	mov.w	lr, #0
    692a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    692e:	f04f 0c01 	mov.w	ip, #1
    6932:	e44e      	b.n	61d2 <_strtod_l+0x1ca>
    6934:	2c6e      	cmp	r4, #110	; 0x6e
    6936:	f43f ad10 	beq.w	635a <_strtod_l+0x352>
    693a:	e44d      	b.n	61d8 <_strtod_l+0x1d0>
    693c:	f43f ad60 	beq.w	6400 <_strtod_l+0x3f8>
    6940:	425b      	negs	r3, r3
    6942:	f013 010f 	ands.w	r1, r3, #15
    6946:	d00a      	beq.n	695e <_strtod_l+0x956>
    6948:	4a31      	ldr	r2, [pc, #196]	; (6a10 <_strtod_l+0xa08>)
    694a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    694e:	ed9d 6b04 	vldr	d6, [sp, #16]
    6952:	ed92 7b00 	vldr	d7, [r2]
    6956:	ee86 7b07 	vdiv.f64	d7, d6, d7
    695a:	ed8d 7b04 	vstr	d7, [sp, #16]
    695e:	111b      	asrs	r3, r3, #4
    6960:	f43f ad4e 	beq.w	6400 <_strtod_l+0x3f8>
    6964:	2b1f      	cmp	r3, #31
    6966:	dc33      	bgt.n	69d0 <_strtod_l+0x9c8>
    6968:	f013 0210 	ands.w	r2, r3, #16
    696c:	bf18      	it	ne
    696e:	226a      	movne	r2, #106	; 0x6a
    6970:	ed9d 7b04 	vldr	d7, [sp, #16]
    6974:	9208      	str	r2, [sp, #32]
    6976:	4a27      	ldr	r2, [pc, #156]	; (6a14 <_strtod_l+0xa0c>)
    6978:	2100      	movs	r1, #0
    697a:	07d8      	lsls	r0, r3, #31
    697c:	d504      	bpl.n	6988 <_strtod_l+0x980>
    697e:	ed92 6b00 	vldr	d6, [r2]
    6982:	2101      	movs	r1, #1
    6984:	ee27 7b06 	vmul.f64	d7, d7, d6
    6988:	105b      	asrs	r3, r3, #1
    698a:	f102 0208 	add.w	r2, r2, #8
    698e:	d1f4      	bne.n	697a <_strtod_l+0x972>
    6990:	b109      	cbz	r1, 6996 <_strtod_l+0x98e>
    6992:	ed8d 7b04 	vstr	d7, [sp, #16]
    6996:	9b08      	ldr	r3, [sp, #32]
    6998:	b193      	cbz	r3, 69c0 <_strtod_l+0x9b8>
    699a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    699e:	f3c1 520a 	ubfx	r2, r1, #20, #11
    69a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
    69a6:	2b00      	cmp	r3, #0
    69a8:	dd0a      	ble.n	69c0 <_strtod_l+0x9b8>
    69aa:	2b1f      	cmp	r3, #31
    69ac:	f340 822f 	ble.w	6e0e <_strtod_l+0xe06>
    69b0:	2000      	movs	r0, #0
    69b2:	2b34      	cmp	r3, #52	; 0x34
    69b4:	9004      	str	r0, [sp, #16]
    69b6:	f340 8240 	ble.w	6e3a <_strtod_l+0xe32>
    69ba:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
    69be:	9305      	str	r3, [sp, #20]
    69c0:	ed9d 7b04 	vldr	d7, [sp, #16]
    69c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
    69c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69cc:	f47f ad1a 	bne.w	6404 <_strtod_l+0x3fc>
    69d0:	2322      	movs	r3, #34	; 0x22
    69d2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 69e8 <_strtod_l+0x9e0>
    69d6:	f8c8 3000 	str.w	r3, [r8]
    69da:	e4d2      	b.n	6382 <_strtod_l+0x37a>
    69dc:	2322      	movs	r3, #34	; 0x22
    69de:	ed9f 8b04 	vldr	d8, [pc, #16]	; 69f0 <_strtod_l+0x9e8>
    69e2:	f8c8 3000 	str.w	r3, [r8]
    69e6:	e4cc      	b.n	6382 <_strtod_l+0x37a>
	...
    69f4:	7ff00000 	.word	0x7ff00000
    69f8:	bff00000 	.word	0xbff00000
    69fc:	7ff00000 	.word	0x7ff00000
    6a00:	7c9fffff 	.word	0x7c9fffff
    6a04:	7fefffff 	.word	0x7fefffff
    6a08:	20000280 	.word	0x20000280
    6a0c:	7ca00000 	.word	0x7ca00000
    6a10:	200002a8 	.word	0x200002a8
    6a14:	20000370 	.word	0x20000370
    6a18:	9302      	str	r3, [sp, #8]
    6a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a1c:	9301      	str	r3, [sp, #4]
    6a1e:	ab12      	add	r3, sp, #72	; 0x48
    6a20:	9300      	str	r3, [sp, #0]
    6a22:	4aa7      	ldr	r2, [pc, #668]	; (6cc0 <_strtod_l+0xcb8>)
    6a24:	ab13      	add	r3, sp, #76	; 0x4c
    6a26:	a911      	add	r1, sp, #68	; 0x44
    6a28:	4640      	mov	r0, r8
    6a2a:	f001 fd53 	bl	84d4 <__gethex>
    6a2e:	f010 050f 	ands.w	r5, r0, #15
    6a32:	4604      	mov	r4, r0
    6a34:	f43f aca3 	beq.w	637e <_strtod_l+0x376>
    6a38:	2d06      	cmp	r5, #6
    6a3a:	d174      	bne.n	6b26 <_strtod_l+0xb1e>
    6a3c:	9b07      	ldr	r3, [sp, #28]
    6a3e:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 6ca8 <_strtod_l+0xca0>
    6a42:	3701      	adds	r7, #1
    6a44:	2b00      	cmp	r3, #0
    6a46:	f43f abce 	beq.w	61e6 <_strtod_l+0x1de>
    6a4a:	601f      	str	r7, [r3, #0]
    6a4c:	f7ff bbcb 	b.w	61e6 <_strtod_l+0x1de>
    6a50:	ed9d 8b04 	vldr	d8, [sp, #16]
    6a54:	e495      	b.n	6382 <_strtod_l+0x37a>
    6a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a58:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    6a5c:	4403      	add	r3, r0
    6a5e:	930b      	str	r3, [sp, #44]	; 0x2c
    6a60:	2801      	cmp	r0, #1
    6a62:	f105 0301 	add.w	r3, r5, #1
    6a66:	461a      	mov	r2, r3
    6a68:	d014      	beq.n	6a94 <_strtod_l+0xa8c>
    6a6a:	4428      	add	r0, r5
    6a6c:	1e44      	subs	r4, r0, #1
    6a6e:	e003      	b.n	6a78 <_strtod_l+0xa70>
    6a70:	0046      	lsls	r6, r0, #1
    6a72:	429c      	cmp	r4, r3
    6a74:	d00d      	beq.n	6a92 <_strtod_l+0xa8a>
    6a76:	3301      	adds	r3, #1
    6a78:	462a      	mov	r2, r5
    6a7a:	2a08      	cmp	r2, #8
    6a7c:	461d      	mov	r5, r3
    6a7e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    6a82:	d9f5      	bls.n	6a70 <_strtod_l+0xa68>
    6a84:	2b10      	cmp	r3, #16
    6a86:	bfdc      	itt	le
    6a88:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    6a8c:	ea4f 0949 	movle.w	r9, r9, lsl #1
    6a90:	e7ef      	b.n	6a72 <_strtod_l+0xa6a>
    6a92:	3202      	adds	r2, #2
    6a94:	2d08      	cmp	r5, #8
    6a96:	dc3c      	bgt.n	6b12 <_strtod_l+0xb0a>
    6a98:	4615      	mov	r5, r2
    6a9a:	f7ff bb79 	b.w	6190 <_strtod_l+0x188>
    6a9e:	4989      	ldr	r1, [pc, #548]	; (6cc4 <_strtod_l+0xcbc>)
    6aa0:	2201      	movs	r2, #1
    6aa2:	4638      	mov	r0, r7
    6aa4:	f000 fdac 	bl	7600 <strncmp>
    6aa8:	2800      	cmp	r0, #0
    6aaa:	f000 8082 	beq.w	6bb2 <_strtod_l+0xbaa>
    6aae:	f04f 0e00 	mov.w	lr, #0
    6ab2:	46f1      	mov	r9, lr
    6ab4:	4676      	mov	r6, lr
    6ab6:	4675      	mov	r5, lr
    6ab8:	f7ff bbb5 	b.w	6226 <_strtod_l+0x21e>
    6abc:	f644 631f 	movw	r3, #19999	; 0x4e1f
    6ac0:	459b      	cmp	fp, r3
    6ac2:	bfa8      	it	ge
    6ac4:	469b      	movge	fp, r3
    6ac6:	e42f      	b.n	6328 <_strtod_l+0x320>
    6ac8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6acc:	4618      	mov	r0, r3
    6ace:	2b00      	cmp	r3, #0
    6ad0:	f47f ae23 	bne.w	671a <_strtod_l+0x712>
    6ad4:	2322      	movs	r3, #34	; 0x22
    6ad6:	ed9f 8b74 	vldr	d8, [pc, #464]	; 6ca8 <_strtod_l+0xca0>
    6ada:	9812      	ldr	r0, [sp, #72]	; 0x48
    6adc:	f8c8 3000 	str.w	r3, [r8]
    6ae0:	e678      	b.n	67d4 <_strtod_l+0x7cc>
    6ae2:	eeb0 7b49 	vmov.f64	d7, d9
    6ae6:	e6c0      	b.n	686a <_strtod_l+0x862>
    6ae8:	4977      	ldr	r1, [pc, #476]	; (6cc8 <_strtod_l+0xcc0>)
    6aea:	a811      	add	r0, sp, #68	; 0x44
    6aec:	f001 ffbc 	bl	8a68 <__match>
    6af0:	2800      	cmp	r0, #0
    6af2:	f43f ab71 	beq.w	61d8 <_strtod_l+0x1d0>
    6af6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6af8:	4974      	ldr	r1, [pc, #464]	; (6ccc <_strtod_l+0xcc4>)
    6afa:	3b01      	subs	r3, #1
    6afc:	a811      	add	r0, sp, #68	; 0x44
    6afe:	9311      	str	r3, [sp, #68]	; 0x44
    6b00:	f001 ffb2 	bl	8a68 <__match>
    6b04:	b910      	cbnz	r0, 6b0c <_strtod_l+0xb04>
    6b06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6b08:	3301      	adds	r3, #1
    6b0a:	9311      	str	r3, [sp, #68]	; 0x44
    6b0c:	ed9f 8b68 	vldr	d8, [pc, #416]	; 6cb0 <_strtod_l+0xca8>
    6b10:	e437      	b.n	6382 <_strtod_l+0x37a>
    6b12:	2a10      	cmp	r2, #16
    6b14:	bfdc      	itt	le
    6b16:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
    6b1a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
    6b1e:	4615      	mov	r5, r2
    6b20:	2000      	movs	r0, #0
    6b22:	f7ff bb3a 	b.w	619a <_strtod_l+0x192>
    6b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6b28:	b13a      	cbz	r2, 6b3a <_strtod_l+0xb32>
    6b2a:	2135      	movs	r1, #53	; 0x35
    6b2c:	a814      	add	r0, sp, #80	; 0x50
    6b2e:	f002 fd7f 	bl	9630 <__copybits>
    6b32:	9912      	ldr	r1, [sp, #72]	; 0x48
    6b34:	4640      	mov	r0, r8
    6b36:	f002 f8c7 	bl	8cc8 <_Bfree>
    6b3a:	3d01      	subs	r5, #1
    6b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6b3e:	2d04      	cmp	r5, #4
    6b40:	f200 818f 	bhi.w	6e62 <_strtod_l+0xe5a>
    6b44:	e8df f005 	tbb	[pc, r5]
    6b48:	1f2a2d03 	.word	0x1f2a2d03
    6b4c:	03          	.byte	0x03
    6b4d:	00          	.byte	0x00
    6b4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6b50:	9204      	str	r2, [sp, #16]
    6b52:	f203 4233 	addw	r2, r3, #1075	; 0x433
    6b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6b58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    6b5c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    6b60:	9305      	str	r3, [sp, #20]
    6b62:	05e5      	lsls	r5, r4, #23
    6b64:	d502      	bpl.n	6b6c <_strtod_l+0xb64>
    6b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    6b6a:	9305      	str	r3, [sp, #20]
    6b6c:	4a58      	ldr	r2, [pc, #352]	; (6cd0 <_strtod_l+0xcc8>)
    6b6e:	401a      	ands	r2, r3
    6b70:	ed9d 8b04 	vldr	d8, [sp, #16]
    6b74:	2a00      	cmp	r2, #0
    6b76:	f47f ac04 	bne.w	6382 <_strtod_l+0x37a>
    6b7a:	f001 f839 	bl	7bf0 <__errno>
    6b7e:	2322      	movs	r3, #34	; 0x22
    6b80:	6003      	str	r3, [r0, #0]
    6b82:	f7ff bbfe 	b.w	6382 <_strtod_l+0x37a>
    6b86:	f04f 33ff 	mov.w	r3, #4294967295
    6b8a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    6b8e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    6b92:	05e3      	lsls	r3, r4, #23
    6b94:	f57f af5c 	bpl.w	6a50 <_strtod_l+0xa48>
    6b98:	9b05      	ldr	r3, [sp, #20]
    6b9a:	e7e4      	b.n	6b66 <_strtod_l+0xb5e>
    6b9c:	4b4c      	ldr	r3, [pc, #304]	; (6cd0 <_strtod_l+0xcc8>)
    6b9e:	9305      	str	r3, [sp, #20]
    6ba0:	e7f7      	b.n	6b92 <_strtod_l+0xb8a>
    6ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6ba4:	9304      	str	r3, [sp, #16]
    6ba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6ba8:	9305      	str	r3, [sp, #20]
    6baa:	e7da      	b.n	6b62 <_strtod_l+0xb5a>
    6bac:	2000      	movs	r0, #0
    6bae:	f7ff bae1 	b.w	6174 <_strtod_l+0x16c>
    6bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6bb4:	461a      	mov	r2, r3
    6bb6:	3301      	adds	r3, #1
    6bb8:	9311      	str	r3, [sp, #68]	; 0x44
    6bba:	7854      	ldrb	r4, [r2, #1]
    6bbc:	4606      	mov	r6, r0
    6bbe:	4681      	mov	r9, r0
    6bc0:	f7ff bacd 	b.w	615e <_strtod_l+0x156>
    6bc4:	4b43      	ldr	r3, [pc, #268]	; (6cd4 <_strtod_l+0xccc>)
    6bc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6bca:	ed93 8b00 	vldr	d8, [r3]
    6bce:	ed9d 7b04 	vldr	d7, [sp, #16]
    6bd2:	ee28 8b07 	vmul.f64	d8, d8, d7
    6bd6:	f7ff bbd4 	b.w	6382 <_strtod_l+0x37a>
    6bda:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
    6bde:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    6be2:	e511      	b.n	6608 <_strtod_l+0x600>
    6be4:	46ae      	mov	lr, r5
    6be6:	900b      	str	r0, [sp, #44]	; 0x2c
    6be8:	f7ff badc 	b.w	61a4 <_strtod_l+0x19c>
    6bec:	4b39      	ldr	r3, [pc, #228]	; (6cd4 <_strtod_l+0xccc>)
    6bee:	f1c5 050f 	rsb	r5, r5, #15
    6bf2:	1b4a      	subs	r2, r1, r5
    6bf4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    6bf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6bfc:	ed95 8b00 	vldr	d8, [r5]
    6c00:	ed93 7b00 	vldr	d7, [r3]
    6c04:	ed9d 6b04 	vldr	d6, [sp, #16]
    6c08:	ee28 8b06 	vmul.f64	d8, d8, d6
    6c0c:	ee28 8b07 	vmul.f64	d8, d8, d7
    6c10:	f7ff bbb7 	b.w	6382 <_strtod_l+0x37a>
    6c14:	2d00      	cmp	r5, #0
    6c16:	f000 8095 	beq.w	6d44 <_strtod_l+0xd3c>
    6c1a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
    6c1e:	4b2e      	ldr	r3, [pc, #184]	; (6cd8 <_strtod_l+0xcd0>)
    6c20:	f3cc 0113 	ubfx	r1, ip, #0, #20
    6c24:	4299      	cmp	r1, r3
    6c26:	4662      	mov	r2, ip
    6c28:	f000 80d2 	beq.w	6dd0 <_strtod_l+0xdc8>
    6c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6c2e:	2b00      	cmp	r3, #0
    6c30:	f000 80a5 	beq.w	6d7e <_strtod_l+0xd76>
    6c34:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6c38:	4213      	tst	r3, r2
    6c3a:	4617      	mov	r7, r2
    6c3c:	d01a      	beq.n	6c74 <_strtod_l+0xc6c>
    6c3e:	eeb0 0b48 	vmov.f64	d0, d8
    6c42:	2d00      	cmp	r5, #0
    6c44:	f000 80a6 	beq.w	6d94 <_strtod_l+0xd8c>
    6c48:	f002 fbc2 	bl	93d0 <__ulp>
    6c4c:	9b08      	ldr	r3, [sp, #32]
    6c4e:	b17b      	cbz	r3, 6c70 <_strtod_l+0xc68>
    6c50:	f3c7 530a 	ubfx	r3, r7, #20, #11
    6c54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6c58:	2b00      	cmp	r3, #0
    6c5a:	dd09      	ble.n	6c70 <_strtod_l+0xc68>
    6c5c:	051b      	lsls	r3, r3, #20
    6c5e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    6c62:	2000      	movs	r0, #0
    6c64:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    6c68:	ec41 0b17 	vmov	d7, r0, r1
    6c6c:	ee20 0b07 	vmul.f64	d0, d0, d7
    6c70:	ee38 8b00 	vadd.f64	d8, d8, d0
    6c74:	9b08      	ldr	r3, [sp, #32]
    6c76:	b15b      	cbz	r3, 6c90 <_strtod_l+0xc88>
    6c78:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 6cb8 <_strtod_l+0xcb0>
    6c7c:	4b14      	ldr	r3, [pc, #80]	; (6cd0 <_strtod_l+0xcc8>)
    6c7e:	ee28 8b07 	vmul.f64	d8, d8, d7
    6c82:	ee18 2a90 	vmov	r2, s17
    6c86:	4013      	ands	r3, r2
    6c88:	b913      	cbnz	r3, 6c90 <_strtod_l+0xc88>
    6c8a:	2322      	movs	r3, #34	; 0x22
    6c8c:	f8c8 3000 	str.w	r3, [r8]
    6c90:	9812      	ldr	r0, [sp, #72]	; 0x48
    6c92:	e59f      	b.n	67d4 <_strtod_l+0x7cc>
    6c94:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
    6c98:	9305      	str	r3, [sp, #20]
    6c9a:	2300      	movs	r3, #0
    6c9c:	9308      	str	r3, [sp, #32]
    6c9e:	f7ff bbb1 	b.w	6404 <_strtod_l+0x3fc>
    6ca2:	bf00      	nop
    6ca4:	f3af 8000 	nop.w
	...
    6cb4:	7ff00000 	.word	0x7ff00000
    6cb8:	00000000 	.word	0x00000000
    6cbc:	39500000 	.word	0x39500000
    6cc0:	20000e44 	.word	0x20000e44
    6cc4:	20000a78 	.word	0x20000a78
    6cc8:	20000a7c 	.word	0x20000a7c
    6ccc:	20000a80 	.word	0x20000a80
    6cd0:	7ff00000 	.word	0x7ff00000
    6cd4:	200002a8 	.word	0x200002a8
    6cd8:	000fffff 	.word	0x000fffff
    6cdc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6ce0:	430d      	orrs	r5, r1
    6ce2:	d1c7      	bne.n	6c74 <_strtod_l+0xc6c>
    6ce4:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6ce8:	4617      	mov	r7, r2
    6cea:	2b00      	cmp	r3, #0
    6cec:	d1c2      	bne.n	6c74 <_strtod_l+0xc6c>
    6cee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    6cf2:	0d1b      	lsrs	r3, r3, #20
    6cf4:	051b      	lsls	r3, r3, #20
    6cf6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    6cfa:	d9bb      	bls.n	6c74 <_strtod_l+0xc6c>
    6cfc:	f8da 3014 	ldr.w	r3, [sl, #20]
    6d00:	b91b      	cbnz	r3, 6d0a <_strtod_l+0xd02>
    6d02:	f8da 3010 	ldr.w	r3, [sl, #16]
    6d06:	2b01      	cmp	r3, #1
    6d08:	ddb4      	ble.n	6c74 <_strtod_l+0xc6c>
    6d0a:	4651      	mov	r1, sl
    6d0c:	2201      	movs	r2, #1
    6d0e:	4640      	mov	r0, r8
    6d10:	f002 fa1a 	bl	9148 <__lshift>
    6d14:	4621      	mov	r1, r4
    6d16:	4682      	mov	sl, r0
    6d18:	f002 fa8e 	bl	9238 <__mcmp>
    6d1c:	2800      	cmp	r0, #0
    6d1e:	dda9      	ble.n	6c74 <_strtod_l+0xc6c>
    6d20:	9b08      	ldr	r3, [sp, #32]
    6d22:	2b00      	cmp	r3, #0
    6d24:	d17e      	bne.n	6e24 <_strtod_l+0xe1c>
    6d26:	4b50      	ldr	r3, [pc, #320]	; (6e68 <_strtod_l+0xe60>)
    6d28:	403b      	ands	r3, r7
    6d2a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
    6d2e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
    6d32:	ea6f 5303 	mvn.w	r3, r3, lsl #20
    6d36:	9305      	str	r3, [sp, #20]
    6d38:	f04f 33ff 	mov.w	r3, #4294967295
    6d3c:	9304      	str	r3, [sp, #16]
    6d3e:	ed9d 8b04 	vldr	d8, [sp, #16]
    6d42:	e797      	b.n	6c74 <_strtod_l+0xc6c>
    6d44:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    6d48:	f3c2 0313 	ubfx	r3, r2, #0, #20
    6d4c:	430b      	orrs	r3, r1
    6d4e:	4617      	mov	r7, r2
    6d50:	f47f af6c 	bne.w	6c2c <_strtod_l+0xc24>
    6d54:	e7e4      	b.n	6d20 <_strtod_l+0xd18>
    6d56:	4945      	ldr	r1, [pc, #276]	; (6e6c <_strtod_l+0xe64>)
    6d58:	a811      	add	r0, sp, #68	; 0x44
    6d5a:	aa14      	add	r2, sp, #80	; 0x50
    6d5c:	f001 fea0 	bl	8aa0 <__hexnan>
    6d60:	2805      	cmp	r0, #5
    6d62:	f47f ab06 	bne.w	6372 <_strtod_l+0x36a>
    6d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6d68:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
    6d6c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    6d70:	9305      	str	r3, [sp, #20]
    6d72:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6d74:	9304      	str	r3, [sp, #16]
    6d76:	ed9d 8b04 	vldr	d8, [sp, #16]
    6d7a:	f7ff bb02 	b.w	6382 <_strtod_l+0x37a>
    6d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    6d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6d84:	4203      	tst	r3, r0
    6d86:	f43f af75 	beq.w	6c74 <_strtod_l+0xc6c>
    6d8a:	460f      	mov	r7, r1
    6d8c:	e757      	b.n	6c3e <_strtod_l+0xc36>
    6d8e:	4c38      	ldr	r4, [pc, #224]	; (6e70 <_strtod_l+0xe68>)
    6d90:	2100      	movs	r1, #0
    6d92:	e58f      	b.n	68b4 <_strtod_l+0x8ac>
    6d94:	f002 fb1c 	bl	93d0 <__ulp>
    6d98:	9b08      	ldr	r3, [sp, #32]
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d055      	beq.n	6e4a <_strtod_l+0xe42>
    6d9e:	f3c7 530a 	ubfx	r3, r7, #20, #11
    6da2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6da6:	2b00      	cmp	r3, #0
    6da8:	dd09      	ble.n	6dbe <_strtod_l+0xdb6>
    6daa:	051b      	lsls	r3, r3, #20
    6dac:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
    6db0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
    6db4:	4628      	mov	r0, r5
    6db6:	ec41 0b17 	vmov	d7, r0, r1
    6dba:	ee20 0b07 	vmul.f64	d0, d0, d7
    6dbe:	ee38 8b40 	vsub.f64	d8, d8, d0
    6dc2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6dca:	f47f af55 	bne.w	6c78 <_strtod_l+0xc70>
    6dce:	e681      	b.n	6ad4 <_strtod_l+0xacc>
    6dd0:	9b08      	ldr	r3, [sp, #32]
    6dd2:	9904      	ldr	r1, [sp, #16]
    6dd4:	b31b      	cbz	r3, 6e1e <_strtod_l+0xe16>
    6dd6:	4b24      	ldr	r3, [pc, #144]	; (6e68 <_strtod_l+0xe60>)
    6dd8:	4013      	ands	r3, r2
    6dda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
    6dde:	d81e      	bhi.n	6e1e <_strtod_l+0xe16>
    6de0:	0d1b      	lsrs	r3, r3, #20
    6de2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
    6de6:	f04f 30ff 	mov.w	r0, #4294967295
    6dea:	fa00 f303 	lsl.w	r3, r0, r3
    6dee:	4299      	cmp	r1, r3
    6df0:	f47f af1c 	bne.w	6c2c <_strtod_l+0xc24>
    6df4:	4b1f      	ldr	r3, [pc, #124]	; (6e74 <_strtod_l+0xe6c>)
    6df6:	429a      	cmp	r2, r3
    6df8:	d030      	beq.n	6e5c <_strtod_l+0xe54>
    6dfa:	4b1b      	ldr	r3, [pc, #108]	; (6e68 <_strtod_l+0xe60>)
    6dfc:	4013      	ands	r3, r2
    6dfe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    6e02:	9305      	str	r3, [sp, #20]
    6e04:	2300      	movs	r3, #0
    6e06:	9304      	str	r3, [sp, #16]
    6e08:	ed9d 8b04 	vldr	d8, [sp, #16]
    6e0c:	e732      	b.n	6c74 <_strtod_l+0xc6c>
    6e0e:	f04f 32ff 	mov.w	r2, #4294967295
    6e12:	fa02 f303 	lsl.w	r3, r2, r3
    6e16:	9a04      	ldr	r2, [sp, #16]
    6e18:	401a      	ands	r2, r3
    6e1a:	9204      	str	r2, [sp, #16]
    6e1c:	e5d0      	b.n	69c0 <_strtod_l+0x9b8>
    6e1e:	f04f 33ff 	mov.w	r3, #4294967295
    6e22:	e7e4      	b.n	6dee <_strtod_l+0xde6>
    6e24:	4b10      	ldr	r3, [pc, #64]	; (6e68 <_strtod_l+0xe60>)
    6e26:	403b      	ands	r3, r7
    6e28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
    6e2c:	f73f af7d 	bgt.w	6d2a <_strtod_l+0xd22>
    6e30:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
    6e34:	f73f af20 	bgt.w	6c78 <_strtod_l+0xc70>
    6e38:	e64c      	b.n	6ad4 <_strtod_l+0xacc>
    6e3a:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
    6e3e:	f04f 33ff 	mov.w	r3, #4294967295
    6e42:	4093      	lsls	r3, r2
    6e44:	400b      	ands	r3, r1
    6e46:	9305      	str	r3, [sp, #20]
    6e48:	e5ba      	b.n	69c0 <_strtod_l+0x9b8>
    6e4a:	ee38 8b40 	vsub.f64	d8, d8, d0
    6e4e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    6e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e56:	f47f af1b 	bne.w	6c90 <_strtod_l+0xc88>
    6e5a:	e63b      	b.n	6ad4 <_strtod_l+0xacc>
    6e5c:	3101      	adds	r1, #1
    6e5e:	d1cc      	bne.n	6dfa <_strtod_l+0xdf2>
    6e60:	e409      	b.n	6676 <_strtod_l+0x66e>
    6e62:	2300      	movs	r3, #0
    6e64:	e67d      	b.n	6b62 <_strtod_l+0xb5a>
    6e66:	bf00      	nop
    6e68:	7ff00000 	.word	0x7ff00000
    6e6c:	20000e58 	.word	0x20000e58
    6e70:	20000280 	.word	0x20000280
    6e74:	7fefffff 	.word	0x7fefffff

00006e78 <strtof>:
    6e78:	b510      	push	{r4, lr}
    6e7a:	4c23      	ldr	r4, [pc, #140]	; (6f08 <strtof+0x90>)
    6e7c:	4b23      	ldr	r3, [pc, #140]	; (6f0c <strtof+0x94>)
    6e7e:	4684      	mov	ip, r0
    6e80:	460a      	mov	r2, r1
    6e82:	6820      	ldr	r0, [r4, #0]
    6e84:	4661      	mov	r1, ip
    6e86:	f7ff f8bf 	bl	6008 <_strtod_l>
    6e8a:	eeb4 0b40 	vcmp.f64	d0, d0
    6e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e92:	d627      	bvs.n	6ee4 <strtof+0x6c>
    6e94:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    6e98:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 6f10 <strtof+0x98>
    6e9c:	eef0 6ae7 	vabs.f32	s13, s15
    6ea0:	eef4 6a47 	vcmp.f32	s13, s14
    6ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6ea8:	dd0e      	ble.n	6ec8 <strtof+0x50>
    6eaa:	eeb0 5bc0 	vabs.f64	d5, d0
    6eae:	ed9f 6b14 	vldr	d6, [pc, #80]	; 6f00 <strtof+0x88>
    6eb2:	eeb4 5b46 	vcmp.f64	d5, d6
    6eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6eba:	dc05      	bgt.n	6ec8 <strtof+0x50>
    6ebc:	6823      	ldr	r3, [r4, #0]
    6ebe:	2222      	movs	r2, #34	; 0x22
    6ec0:	601a      	str	r2, [r3, #0]
    6ec2:	eeb0 0a67 	vmov.f32	s0, s15
    6ec6:	bd10      	pop	{r4, pc}
    6ec8:	ee17 3a90 	vmov	r3, s15
    6ecc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
    6ed0:	d1f7      	bne.n	6ec2 <strtof+0x4a>
    6ed2:	4b10      	ldr	r3, [pc, #64]	; (6f14 <strtof+0x9c>)
    6ed4:	ee10 2a90 	vmov	r2, s1
    6ed8:	4013      	ands	r3, r2
    6eda:	2b00      	cmp	r3, #0
    6edc:	d1ee      	bne.n	6ebc <strtof+0x44>
    6ede:	eeb0 0a67 	vmov.f32	s0, s15
    6ee2:	bd10      	pop	{r4, pc}
    6ee4:	ee10 3a90 	vmov	r3, s1
    6ee8:	2b00      	cmp	r3, #0
    6eea:	480b      	ldr	r0, [pc, #44]	; (6f18 <strtof+0xa0>)
    6eec:	da04      	bge.n	6ef8 <strtof+0x80>
    6eee:	f001 f8ff 	bl	80f0 <nanf>
    6ef2:	eef1 7a40 	vneg.f32	s15, s0
    6ef6:	e7e4      	b.n	6ec2 <strtof+0x4a>
    6ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6efc:	f001 b8f8 	b.w	80f0 <nanf>
    6f00:	ffffffff 	.word	0xffffffff
    6f04:	7fefffff 	.word	0x7fefffff
    6f08:	20001968 	.word	0x20001968
    6f0c:	200013e0 	.word	0x200013e0
    6f10:	7f7fffff 	.word	0x7f7fffff
    6f14:	7ff00000 	.word	0x7ff00000
    6f18:	200003c0 	.word	0x200003c0

00006f1c <_strtol_l.constprop.0>:
    6f1c:	2b01      	cmp	r3, #1
    6f1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f22:	d040      	beq.n	6fa6 <_strtol_l.constprop.0+0x8a>
    6f24:	2b24      	cmp	r3, #36	; 0x24
    6f26:	4698      	mov	r8, r3
    6f28:	d83d      	bhi.n	6fa6 <_strtol_l.constprop.0+0x8a>
    6f2a:	4d4c      	ldr	r5, [pc, #304]	; (705c <_strtol_l.constprop.0+0x140>)
    6f2c:	468e      	mov	lr, r1
    6f2e:	4676      	mov	r6, lr
    6f30:	f81e bb01 	ldrb.w	fp, [lr], #1
    6f34:	f815 400b 	ldrb.w	r4, [r5, fp]
    6f38:	f014 0408 	ands.w	r4, r4, #8
    6f3c:	d1f7      	bne.n	6f2e <_strtol_l.constprop.0+0x12>
    6f3e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    6f42:	d072      	beq.n	702a <_strtol_l.constprop.0+0x10e>
    6f44:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    6f48:	bf08      	it	eq
    6f4a:	f89e b000 	ldrbeq.w	fp, [lr]
    6f4e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    6f52:	bf08      	it	eq
    6f54:	f106 0e02 	addeq.w	lr, r6, #2
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d042      	beq.n	6fe2 <_strtol_l.constprop.0+0xc6>
    6f5c:	2b10      	cmp	r3, #16
    6f5e:	d057      	beq.n	7010 <_strtol_l.constprop.0+0xf4>
    6f60:	fbb9 f7f8 	udiv	r7, r9, r8
    6f64:	2500      	movs	r5, #0
    6f66:	462e      	mov	r6, r5
    6f68:	fb08 9a17 	mls	sl, r8, r7, r9
    6f6c:	e005      	b.n	6f7a <_strtol_l.constprop.0+0x5e>
    6f6e:	d033      	beq.n	6fd8 <_strtol_l.constprop.0+0xbc>
    6f70:	fb08 c606 	mla	r6, r8, r6, ip
    6f74:	2501      	movs	r5, #1
    6f76:	f81e bb01 	ldrb.w	fp, [lr], #1
    6f7a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    6f7e:	f1bc 0f09 	cmp.w	ip, #9
    6f82:	d906      	bls.n	6f92 <_strtol_l.constprop.0+0x76>
    6f84:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    6f88:	f1bc 0f19 	cmp.w	ip, #25
    6f8c:	d812      	bhi.n	6fb4 <_strtol_l.constprop.0+0x98>
    6f8e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    6f92:	4563      	cmp	r3, ip
    6f94:	dd17      	ble.n	6fc6 <_strtol_l.constprop.0+0xaa>
    6f96:	f1b5 3fff 	cmp.w	r5, #4294967295
    6f9a:	d0ec      	beq.n	6f76 <_strtol_l.constprop.0+0x5a>
    6f9c:	42b7      	cmp	r7, r6
    6f9e:	d2e6      	bcs.n	6f6e <_strtol_l.constprop.0+0x52>
    6fa0:	f04f 35ff 	mov.w	r5, #4294967295
    6fa4:	e7e7      	b.n	6f76 <_strtol_l.constprop.0+0x5a>
    6fa6:	f000 fe23 	bl	7bf0 <__errno>
    6faa:	2316      	movs	r3, #22
    6fac:	6003      	str	r3, [r0, #0]
    6fae:	2000      	movs	r0, #0
    6fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fb4:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    6fb8:	f1bc 0f19 	cmp.w	ip, #25
    6fbc:	d803      	bhi.n	6fc6 <_strtol_l.constprop.0+0xaa>
    6fbe:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    6fc2:	4563      	cmp	r3, ip
    6fc4:	dce7      	bgt.n	6f96 <_strtol_l.constprop.0+0x7a>
    6fc6:	1c6b      	adds	r3, r5, #1
    6fc8:	d027      	beq.n	701a <_strtol_l.constprop.0+0xfe>
    6fca:	b98c      	cbnz	r4, 6ff0 <_strtol_l.constprop.0+0xd4>
    6fcc:	b10a      	cbz	r2, 6fd2 <_strtol_l.constprop.0+0xb6>
    6fce:	bba5      	cbnz	r5, 703a <_strtol_l.constprop.0+0x11e>
    6fd0:	6011      	str	r1, [r2, #0]
    6fd2:	4630      	mov	r0, r6
    6fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fd8:	45e2      	cmp	sl, ip
    6fda:	dac9      	bge.n	6f70 <_strtol_l.constprop.0+0x54>
    6fdc:	f04f 35ff 	mov.w	r5, #4294967295
    6fe0:	e7c9      	b.n	6f76 <_strtol_l.constprop.0+0x5a>
    6fe2:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    6fe6:	d005      	beq.n	6ff4 <_strtol_l.constprop.0+0xd8>
    6fe8:	f04f 080a 	mov.w	r8, #10
    6fec:	4643      	mov	r3, r8
    6fee:	e7b7      	b.n	6f60 <_strtol_l.constprop.0+0x44>
    6ff0:	4276      	negs	r6, r6
    6ff2:	e7eb      	b.n	6fcc <_strtol_l.constprop.0+0xb0>
    6ff4:	f89e 3000 	ldrb.w	r3, [lr]
    6ff8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6ffc:	2b58      	cmp	r3, #88	; 0x58
    6ffe:	d121      	bne.n	7044 <_strtol_l.constprop.0+0x128>
    7000:	f04f 0810 	mov.w	r8, #16
    7004:	f89e b001 	ldrb.w	fp, [lr, #1]
    7008:	4643      	mov	r3, r8
    700a:	f10e 0e02 	add.w	lr, lr, #2
    700e:	e7a7      	b.n	6f60 <_strtol_l.constprop.0+0x44>
    7010:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    7014:	d01a      	beq.n	704c <_strtol_l.constprop.0+0x130>
    7016:	4698      	mov	r8, r3
    7018:	e7a2      	b.n	6f60 <_strtol_l.constprop.0+0x44>
    701a:	2322      	movs	r3, #34	; 0x22
    701c:	6003      	str	r3, [r0, #0]
    701e:	b172      	cbz	r2, 703e <_strtol_l.constprop.0+0x122>
    7020:	f10e 31ff 	add.w	r1, lr, #4294967295
    7024:	464e      	mov	r6, r9
    7026:	6011      	str	r1, [r2, #0]
    7028:	e7d3      	b.n	6fd2 <_strtol_l.constprop.0+0xb6>
    702a:	f89e b000 	ldrb.w	fp, [lr]
    702e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    7032:	f106 0e02 	add.w	lr, r6, #2
    7036:	2401      	movs	r4, #1
    7038:	e78e      	b.n	6f58 <_strtol_l.constprop.0+0x3c>
    703a:	46b1      	mov	r9, r6
    703c:	e7f0      	b.n	7020 <_strtol_l.constprop.0+0x104>
    703e:	464e      	mov	r6, r9
    7040:	4630      	mov	r0, r6
    7042:	e7c7      	b.n	6fd4 <_strtol_l.constprop.0+0xb8>
    7044:	f04f 0808 	mov.w	r8, #8
    7048:	4643      	mov	r3, r8
    704a:	e789      	b.n	6f60 <_strtol_l.constprop.0+0x44>
    704c:	f89e 5000 	ldrb.w	r5, [lr]
    7050:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    7054:	2d58      	cmp	r5, #88	; 0x58
    7056:	d0d3      	beq.n	7000 <_strtol_l.constprop.0+0xe4>
    7058:	4698      	mov	r8, r3
    705a:	e781      	b.n	6f60 <_strtol_l.constprop.0+0x44>
    705c:	20000909 	.word	0x20000909

00007060 <strtol>:
    7060:	b410      	push	{r4}
    7062:	4c05      	ldr	r4, [pc, #20]	; (7078 <strtol+0x18>)
    7064:	4684      	mov	ip, r0
    7066:	4613      	mov	r3, r2
    7068:	6820      	ldr	r0, [r4, #0]
    706a:	f85d 4b04 	ldr.w	r4, [sp], #4
    706e:	460a      	mov	r2, r1
    7070:	4661      	mov	r1, ip
    7072:	f7ff bf53 	b.w	6f1c <_strtol_l.constprop.0>
    7076:	bf00      	nop
    7078:	20001968 	.word	0x20001968

0000707c <__utoa>:
    707c:	b5f0      	push	{r4, r5, r6, r7, lr}
    707e:	4f25      	ldr	r7, [pc, #148]	; (7114 <__utoa+0x98>)
    7080:	f1a2 0e02 	sub.w	lr, r2, #2
    7084:	4616      	mov	r6, r2
    7086:	4605      	mov	r5, r0
    7088:	460c      	mov	r4, r1
    708a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    708c:	b08b      	sub	sp, #44	; 0x2c
    708e:	46ec      	mov	ip, sp
    7090:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7094:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    7096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    709a:	e897 0003 	ldmia.w	r7, {r0, r1}
    709e:	f84c 0b04 	str.w	r0, [ip], #4
    70a2:	f1be 0f22 	cmp.w	lr, #34	; 0x22
    70a6:	f88c 1000 	strb.w	r1, [ip]
    70aa:	d82e      	bhi.n	710a <__utoa+0x8e>
    70ac:	f104 3eff 	add.w	lr, r4, #4294967295
    70b0:	4670      	mov	r0, lr
    70b2:	f04f 0c00 	mov.w	ip, #0
    70b6:	fbb5 f2f6 	udiv	r2, r5, r6
    70ba:	fb06 5312 	mls	r3, r6, r2, r5
    70be:	3328      	adds	r3, #40	; 0x28
    70c0:	446b      	add	r3, sp
    70c2:	4661      	mov	r1, ip
    70c4:	f813 cc28 	ldrb.w	ip, [r3, #-40]
    70c8:	f800 cf01 	strb.w	ip, [r0, #1]!
    70cc:	462b      	mov	r3, r5
    70ce:	429e      	cmp	r6, r3
    70d0:	f101 0c01 	add.w	ip, r1, #1
    70d4:	4615      	mov	r5, r2
    70d6:	d9ee      	bls.n	70b6 <__utoa+0x3a>
    70d8:	2300      	movs	r3, #0
    70da:	f804 300c 	strb.w	r3, [r4, ip]
    70de:	b189      	cbz	r1, 7104 <__utoa+0x88>
    70e0:	44a4      	add	ip, r4
    70e2:	4672      	mov	r2, lr
    70e4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    70e8:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
    70ec:	f88e 5000 	strb.w	r5, [lr]
    70f0:	eba4 030e 	sub.w	r3, r4, lr
    70f4:	3202      	adds	r2, #2
    70f6:	3b01      	subs	r3, #1
    70f8:	1b12      	subs	r2, r2, r4
    70fa:	440b      	add	r3, r1
    70fc:	429a      	cmp	r2, r3
    70fe:	f88c 0000 	strb.w	r0, [ip]
    7102:	dbee      	blt.n	70e2 <__utoa+0x66>
    7104:	4620      	mov	r0, r4
    7106:	b00b      	add	sp, #44	; 0x2c
    7108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    710a:	2300      	movs	r3, #0
    710c:	4618      	mov	r0, r3
    710e:	7023      	strb	r3, [r4, #0]
    7110:	b00b      	add	sp, #44	; 0x2c
    7112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7114:	200008e0 	.word	0x200008e0

00007118 <__cxa_atexit>:
    7118:	4613      	mov	r3, r2
    711a:	460a      	mov	r2, r1
    711c:	4601      	mov	r1, r0
    711e:	2002      	movs	r0, #2
    7120:	f000 bfec 	b.w	80fc <__register_exitproc>

00007124 <fcvtf>:
    7124:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    7128:	2300      	movs	r3, #0
    712a:	f002 baef 	b.w	970c <fcvtbuf>
    712e:	bf00      	nop

00007130 <tolower>:
    7130:	4b03      	ldr	r3, [pc, #12]	; (7140 <tolower+0x10>)
    7132:	5c1b      	ldrb	r3, [r3, r0]
    7134:	f003 0303 	and.w	r3, r3, #3
    7138:	2b01      	cmp	r3, #1
    713a:	bf08      	it	eq
    713c:	3020      	addeq	r0, #32
    713e:	4770      	bx	lr
    7140:	20000909 	.word	0x20000909

00007144 <stdio_exit_handler>:
    7144:	4a02      	ldr	r2, [pc, #8]	; (7150 <stdio_exit_handler+0xc>)
    7146:	4903      	ldr	r1, [pc, #12]	; (7154 <stdio_exit_handler+0x10>)
    7148:	4803      	ldr	r0, [pc, #12]	; (7158 <stdio_exit_handler+0x14>)
    714a:	f000 b8bb 	b.w	72c4 <_fwalk_sglue>
    714e:	bf00      	nop
    7150:	2000195c 	.word	0x2000195c
    7154:	000097b1 	.word	0x000097b1
    7158:	20000fe0 	.word	0x20000fe0

0000715c <cleanup_stdio>:
    715c:	4b0c      	ldr	r3, [pc, #48]	; (7190 <cleanup_stdio+0x34>)
    715e:	6841      	ldr	r1, [r0, #4]
    7160:	4299      	cmp	r1, r3
    7162:	b510      	push	{r4, lr}
    7164:	4604      	mov	r4, r0
    7166:	d001      	beq.n	716c <cleanup_stdio+0x10>
    7168:	f002 fb22 	bl	97b0 <_fclose_r>
    716c:	68a1      	ldr	r1, [r4, #8]
    716e:	4b09      	ldr	r3, [pc, #36]	; (7194 <cleanup_stdio+0x38>)
    7170:	4299      	cmp	r1, r3
    7172:	d002      	beq.n	717a <cleanup_stdio+0x1e>
    7174:	4620      	mov	r0, r4
    7176:	f002 fb1b 	bl	97b0 <_fclose_r>
    717a:	68e1      	ldr	r1, [r4, #12]
    717c:	4b06      	ldr	r3, [pc, #24]	; (7198 <cleanup_stdio+0x3c>)
    717e:	4299      	cmp	r1, r3
    7180:	d004      	beq.n	718c <cleanup_stdio+0x30>
    7182:	4620      	mov	r0, r4
    7184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7188:	f002 bb12 	b.w	97b0 <_fclose_r>
    718c:	bd10      	pop	{r4, pc}
    718e:	bf00      	nop
    7190:	20002d94 	.word	0x20002d94
    7194:	20002dfc 	.word	0x20002dfc
    7198:	20002e64 	.word	0x20002e64

0000719c <global_stdio_init.part.0>:
    719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    71a0:	4c2a      	ldr	r4, [pc, #168]	; (724c <global_stdio_init.part.0+0xb0>)
    71a2:	4b2b      	ldr	r3, [pc, #172]	; (7250 <global_stdio_init.part.0+0xb4>)
    71a4:	482b      	ldr	r0, [pc, #172]	; (7254 <global_stdio_init.part.0+0xb8>)
    71a6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7268 <global_stdio_init.part.0+0xcc>
    71aa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 726c <global_stdio_init.part.0+0xd0>
    71ae:	4f2a      	ldr	r7, [pc, #168]	; (7258 <global_stdio_init.part.0+0xbc>)
    71b0:	6018      	str	r0, [r3, #0]
    71b2:	2500      	movs	r5, #0
    71b4:	2304      	movs	r3, #4
    71b6:	2208      	movs	r2, #8
    71b8:	4629      	mov	r1, r5
    71ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    71be:	4e27      	ldr	r6, [pc, #156]	; (725c <global_stdio_init.part.0+0xc0>)
    71c0:	6665      	str	r5, [r4, #100]	; 0x64
    71c2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    71c6:	e9c4 5500 	strd	r5, r5, [r4]
    71ca:	e9c4 5504 	strd	r5, r5, [r4, #16]
    71ce:	61a5      	str	r5, [r4, #24]
    71d0:	f000 f95e 	bl	7490 <memset>
    71d4:	4b22      	ldr	r3, [pc, #136]	; (7260 <global_stdio_init.part.0+0xc4>)
    71d6:	6763      	str	r3, [r4, #116]	; 0x74
    71d8:	2208      	movs	r2, #8
    71da:	4629      	mov	r1, r5
    71dc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    71e0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    71e4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    71e8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    71ec:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    71f0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    71f4:	6725      	str	r5, [r4, #112]	; 0x70
    71f6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    71fa:	62e6      	str	r6, [r4, #44]	; 0x2c
    71fc:	f000 f948 	bl	7490 <memset>
    7200:	4b18      	ldr	r3, [pc, #96]	; (7264 <global_stdio_init.part.0+0xc8>)
    7202:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    7206:	4629      	mov	r1, r5
    7208:	f104 0368 	add.w	r3, r4, #104	; 0x68
    720c:	2208      	movs	r2, #8
    720e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    7212:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    7216:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    721a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    721e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    7222:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    7226:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    722a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    722e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    7232:	f000 f92d 	bl	7490 <memset>
    7236:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    723a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    723e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    7242:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    7246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    724a:	bf00      	nop
    724c:	20002d94 	.word	0x20002d94
    7250:	20002ecc 	.word	0x20002ecc
    7254:	00007145 	.word	0x00007145
    7258:	00007371 	.word	0x00007371
    725c:	00007391 	.word	0x00007391
    7260:	00010009 	.word	0x00010009
    7264:	00020012 	.word	0x00020012
    7268:	0000730d 	.word	0x0000730d
    726c:	00007331 	.word	0x00007331

00007270 <__sinit>:
    7270:	b510      	push	{r4, lr}
    7272:	4604      	mov	r4, r0
    7274:	480a      	ldr	r0, [pc, #40]	; (72a0 <__sinit+0x30>)
    7276:	f000 fce9 	bl	7c4c <__retarget_lock_acquire_recursive>
    727a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    727c:	b923      	cbnz	r3, 7288 <__sinit+0x18>
    727e:	4b09      	ldr	r3, [pc, #36]	; (72a4 <__sinit+0x34>)
    7280:	4a09      	ldr	r2, [pc, #36]	; (72a8 <__sinit+0x38>)
    7282:	681b      	ldr	r3, [r3, #0]
    7284:	6362      	str	r2, [r4, #52]	; 0x34
    7286:	b123      	cbz	r3, 7292 <__sinit+0x22>
    7288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    728c:	4804      	ldr	r0, [pc, #16]	; (72a0 <__sinit+0x30>)
    728e:	f000 bcdf 	b.w	7c50 <__retarget_lock_release_recursive>
    7292:	f7ff ff83 	bl	719c <global_stdio_init.part.0>
    7296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    729a:	4801      	ldr	r0, [pc, #4]	; (72a0 <__sinit+0x30>)
    729c:	f000 bcd8 	b.w	7c50 <__retarget_lock_release_recursive>
    72a0:	20002d5c 	.word	0x20002d5c
    72a4:	20002ecc 	.word	0x20002ecc
    72a8:	0000715d 	.word	0x0000715d

000072ac <__sfp_lock_acquire>:
    72ac:	4801      	ldr	r0, [pc, #4]	; (72b4 <__sfp_lock_acquire+0x8>)
    72ae:	f000 bccd 	b.w	7c4c <__retarget_lock_acquire_recursive>
    72b2:	bf00      	nop
    72b4:	20002d5c 	.word	0x20002d5c

000072b8 <__sfp_lock_release>:
    72b8:	4801      	ldr	r0, [pc, #4]	; (72c0 <__sfp_lock_release+0x8>)
    72ba:	f000 bcc9 	b.w	7c50 <__retarget_lock_release_recursive>
    72be:	bf00      	nop
    72c0:	20002d5c 	.word	0x20002d5c

000072c4 <_fwalk_sglue>:
    72c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    72c8:	4680      	mov	r8, r0
    72ca:	460f      	mov	r7, r1
    72cc:	4616      	mov	r6, r2
    72ce:	f04f 0900 	mov.w	r9, #0
    72d2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    72d6:	3d01      	subs	r5, #1
    72d8:	d411      	bmi.n	72fe <_fwalk_sglue+0x3a>
    72da:	89a3      	ldrh	r3, [r4, #12]
    72dc:	2b01      	cmp	r3, #1
    72de:	f105 35ff 	add.w	r5, r5, #4294967295
    72e2:	d908      	bls.n	72f6 <_fwalk_sglue+0x32>
    72e4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    72e8:	3301      	adds	r3, #1
    72ea:	4621      	mov	r1, r4
    72ec:	d003      	beq.n	72f6 <_fwalk_sglue+0x32>
    72ee:	4640      	mov	r0, r8
    72f0:	47b8      	blx	r7
    72f2:	ea49 0900 	orr.w	r9, r9, r0
    72f6:	1c6b      	adds	r3, r5, #1
    72f8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    72fc:	d1ed      	bne.n	72da <_fwalk_sglue+0x16>
    72fe:	6836      	ldr	r6, [r6, #0]
    7300:	2e00      	cmp	r6, #0
    7302:	d1e6      	bne.n	72d2 <_fwalk_sglue+0xe>
    7304:	4648      	mov	r0, r9
    7306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    730a:	bf00      	nop

0000730c <__sread>:
    730c:	b510      	push	{r4, lr}
    730e:	460c      	mov	r4, r1
    7310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7314:	f000 fc2e 	bl	7b74 <_read_r>
    7318:	2800      	cmp	r0, #0
    731a:	db03      	blt.n	7324 <__sread+0x18>
    731c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    731e:	4403      	add	r3, r0
    7320:	6523      	str	r3, [r4, #80]	; 0x50
    7322:	bd10      	pop	{r4, pc}
    7324:	89a3      	ldrh	r3, [r4, #12]
    7326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    732a:	81a3      	strh	r3, [r4, #12]
    732c:	bd10      	pop	{r4, pc}
    732e:	bf00      	nop

00007330 <__swrite>:
    7330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7334:	460c      	mov	r4, r1
    7336:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    733a:	461f      	mov	r7, r3
    733c:	05cb      	lsls	r3, r1, #23
    733e:	4605      	mov	r5, r0
    7340:	4616      	mov	r6, r2
    7342:	d40b      	bmi.n	735c <__swrite+0x2c>
    7344:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    7348:	81a1      	strh	r1, [r4, #12]
    734a:	463b      	mov	r3, r7
    734c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7350:	4632      	mov	r2, r6
    7352:	4628      	mov	r0, r5
    7354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7358:	f000 bc34 	b.w	7bc4 <_write_r>
    735c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    7360:	2302      	movs	r3, #2
    7362:	2200      	movs	r2, #0
    7364:	f000 fbf0 	bl	7b48 <_lseek_r>
    7368:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    736c:	e7ea      	b.n	7344 <__swrite+0x14>
    736e:	bf00      	nop

00007370 <__sseek>:
    7370:	b510      	push	{r4, lr}
    7372:	460c      	mov	r4, r1
    7374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7378:	f000 fbe6 	bl	7b48 <_lseek_r>
    737c:	89a3      	ldrh	r3, [r4, #12]
    737e:	1c42      	adds	r2, r0, #1
    7380:	bf0e      	itee	eq
    7382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    7386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    738a:	6520      	strne	r0, [r4, #80]	; 0x50
    738c:	81a3      	strh	r3, [r4, #12]
    738e:	bd10      	pop	{r4, pc}

00007390 <__sclose>:
    7390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    7394:	f000 bbc6 	b.w	7b24 <_close_r>

00007398 <memmove>:
    7398:	4288      	cmp	r0, r1
    739a:	d90d      	bls.n	73b8 <memmove+0x20>
    739c:	188b      	adds	r3, r1, r2
    739e:	4283      	cmp	r3, r0
    73a0:	d90a      	bls.n	73b8 <memmove+0x20>
    73a2:	eb00 0c02 	add.w	ip, r0, r2
    73a6:	b1ba      	cbz	r2, 73d8 <memmove+0x40>
    73a8:	4662      	mov	r2, ip
    73aa:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    73ae:	f802 cd01 	strb.w	ip, [r2, #-1]!
    73b2:	4299      	cmp	r1, r3
    73b4:	d1f9      	bne.n	73aa <memmove+0x12>
    73b6:	4770      	bx	lr
    73b8:	2a0f      	cmp	r2, #15
    73ba:	d80e      	bhi.n	73da <memmove+0x42>
    73bc:	4603      	mov	r3, r0
    73be:	f102 3cff 	add.w	ip, r2, #4294967295
    73c2:	b14a      	cbz	r2, 73d8 <memmove+0x40>
    73c4:	f10c 0c01 	add.w	ip, ip, #1
    73c8:	3b01      	subs	r3, #1
    73ca:	448c      	add	ip, r1
    73cc:	f811 2b01 	ldrb.w	r2, [r1], #1
    73d0:	f803 2f01 	strb.w	r2, [r3, #1]!
    73d4:	4561      	cmp	r1, ip
    73d6:	d1f9      	bne.n	73cc <memmove+0x34>
    73d8:	4770      	bx	lr
    73da:	ea40 0301 	orr.w	r3, r0, r1
    73de:	079b      	lsls	r3, r3, #30
    73e0:	d150      	bne.n	7484 <memmove+0xec>
    73e2:	f1a2 0310 	sub.w	r3, r2, #16
    73e6:	b570      	push	{r4, r5, r6, lr}
    73e8:	f101 0c20 	add.w	ip, r1, #32
    73ec:	f023 050f 	bic.w	r5, r3, #15
    73f0:	f101 0e10 	add.w	lr, r1, #16
    73f4:	f100 0410 	add.w	r4, r0, #16
    73f8:	44ac      	add	ip, r5
    73fa:	091b      	lsrs	r3, r3, #4
    73fc:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    7400:	f844 5c10 	str.w	r5, [r4, #-16]
    7404:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    7408:	f844 5c0c 	str.w	r5, [r4, #-12]
    740c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    7410:	f844 5c08 	str.w	r5, [r4, #-8]
    7414:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    7418:	f844 5c04 	str.w	r5, [r4, #-4]
    741c:	f10e 0e10 	add.w	lr, lr, #16
    7420:	45e6      	cmp	lr, ip
    7422:	f104 0410 	add.w	r4, r4, #16
    7426:	d1e9      	bne.n	73fc <memmove+0x64>
    7428:	3301      	adds	r3, #1
    742a:	f012 0f0c 	tst.w	r2, #12
    742e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    7432:	f002 040f 	and.w	r4, r2, #15
    7436:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    743a:	d027      	beq.n	748c <memmove+0xf4>
    743c:	3c04      	subs	r4, #4
    743e:	f024 0603 	bic.w	r6, r4, #3
    7442:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    7446:	441e      	add	r6, r3
    7448:	1f1c      	subs	r4, r3, #4
    744a:	468e      	mov	lr, r1
    744c:	f85e 5b04 	ldr.w	r5, [lr], #4
    7450:	f844 5f04 	str.w	r5, [r4, #4]!
    7454:	42b4      	cmp	r4, r6
    7456:	d1f9      	bne.n	744c <memmove+0xb4>
    7458:	f10c 0401 	add.w	r4, ip, #1
    745c:	f002 0203 	and.w	r2, r2, #3
    7460:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7464:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    7468:	f102 3cff 	add.w	ip, r2, #4294967295
    746c:	b14a      	cbz	r2, 7482 <memmove+0xea>
    746e:	f10c 0c01 	add.w	ip, ip, #1
    7472:	3b01      	subs	r3, #1
    7474:	448c      	add	ip, r1
    7476:	f811 2b01 	ldrb.w	r2, [r1], #1
    747a:	f803 2f01 	strb.w	r2, [r3, #1]!
    747e:	4561      	cmp	r1, ip
    7480:	d1f9      	bne.n	7476 <memmove+0xde>
    7482:	bd70      	pop	{r4, r5, r6, pc}
    7484:	f102 3cff 	add.w	ip, r2, #4294967295
    7488:	4603      	mov	r3, r0
    748a:	e79b      	b.n	73c4 <memmove+0x2c>
    748c:	4622      	mov	r2, r4
    748e:	e7eb      	b.n	7468 <memmove+0xd0>

00007490 <memset>:
    7490:	0783      	lsls	r3, r0, #30
    7492:	b530      	push	{r4, r5, lr}
    7494:	d048      	beq.n	7528 <memset+0x98>
    7496:	1e54      	subs	r4, r2, #1
    7498:	2a00      	cmp	r2, #0
    749a:	d03f      	beq.n	751c <memset+0x8c>
    749c:	b2ca      	uxtb	r2, r1
    749e:	4603      	mov	r3, r0
    74a0:	e001      	b.n	74a6 <memset+0x16>
    74a2:	3c01      	subs	r4, #1
    74a4:	d33a      	bcc.n	751c <memset+0x8c>
    74a6:	f803 2b01 	strb.w	r2, [r3], #1
    74aa:	079d      	lsls	r5, r3, #30
    74ac:	d1f9      	bne.n	74a2 <memset+0x12>
    74ae:	2c03      	cmp	r4, #3
    74b0:	d92d      	bls.n	750e <memset+0x7e>
    74b2:	b2cd      	uxtb	r5, r1
    74b4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    74b8:	2c0f      	cmp	r4, #15
    74ba:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    74be:	d936      	bls.n	752e <memset+0x9e>
    74c0:	f1a4 0210 	sub.w	r2, r4, #16
    74c4:	f022 0c0f 	bic.w	ip, r2, #15
    74c8:	f103 0e20 	add.w	lr, r3, #32
    74cc:	44e6      	add	lr, ip
    74ce:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    74d2:	f103 0210 	add.w	r2, r3, #16
    74d6:	e942 5504 	strd	r5, r5, [r2, #-16]
    74da:	e942 5502 	strd	r5, r5, [r2, #-8]
    74de:	3210      	adds	r2, #16
    74e0:	4572      	cmp	r2, lr
    74e2:	d1f8      	bne.n	74d6 <memset+0x46>
    74e4:	f10c 0201 	add.w	r2, ip, #1
    74e8:	f014 0f0c 	tst.w	r4, #12
    74ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    74f0:	f004 0c0f 	and.w	ip, r4, #15
    74f4:	d013      	beq.n	751e <memset+0x8e>
    74f6:	f1ac 0304 	sub.w	r3, ip, #4
    74fa:	f023 0303 	bic.w	r3, r3, #3
    74fe:	3304      	adds	r3, #4
    7500:	4413      	add	r3, r2
    7502:	f842 5b04 	str.w	r5, [r2], #4
    7506:	4293      	cmp	r3, r2
    7508:	d1fb      	bne.n	7502 <memset+0x72>
    750a:	f00c 0403 	and.w	r4, ip, #3
    750e:	b12c      	cbz	r4, 751c <memset+0x8c>
    7510:	b2c9      	uxtb	r1, r1
    7512:	441c      	add	r4, r3
    7514:	f803 1b01 	strb.w	r1, [r3], #1
    7518:	429c      	cmp	r4, r3
    751a:	d1fb      	bne.n	7514 <memset+0x84>
    751c:	bd30      	pop	{r4, r5, pc}
    751e:	4664      	mov	r4, ip
    7520:	4613      	mov	r3, r2
    7522:	2c00      	cmp	r4, #0
    7524:	d1f4      	bne.n	7510 <memset+0x80>
    7526:	e7f9      	b.n	751c <memset+0x8c>
    7528:	4603      	mov	r3, r0
    752a:	4614      	mov	r4, r2
    752c:	e7bf      	b.n	74ae <memset+0x1e>
    752e:	461a      	mov	r2, r3
    7530:	46a4      	mov	ip, r4
    7532:	e7e0      	b.n	74f6 <memset+0x66>

00007534 <strchr>:
    7534:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    7538:	4603      	mov	r3, r0
    753a:	d044      	beq.n	75c6 <strchr+0x92>
    753c:	0782      	lsls	r2, r0, #30
    753e:	d132      	bne.n	75a6 <strchr+0x72>
    7540:	b510      	push	{r4, lr}
    7542:	6804      	ldr	r4, [r0, #0]
    7544:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    7548:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    754c:	ea8e 0204 	eor.w	r2, lr, r4
    7550:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    7554:	ea23 0302 	bic.w	r3, r3, r2
    7558:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    755c:	ea22 0204 	bic.w	r2, r2, r4
    7560:	4313      	orrs	r3, r2
    7562:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7566:	d10f      	bne.n	7588 <strchr+0x54>
    7568:	f850 4f04 	ldr.w	r4, [r0, #4]!
    756c:	ea84 0c0e 	eor.w	ip, r4, lr
    7570:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    7574:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    7578:	ea23 0304 	bic.w	r3, r3, r4
    757c:	ea22 020c 	bic.w	r2, r2, ip
    7580:	4313      	orrs	r3, r2
    7582:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    7586:	d0ef      	beq.n	7568 <strchr+0x34>
    7588:	7803      	ldrb	r3, [r0, #0]
    758a:	b923      	cbnz	r3, 7596 <strchr+0x62>
    758c:	e036      	b.n	75fc <strchr+0xc8>
    758e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    7592:	2b00      	cmp	r3, #0
    7594:	d032      	beq.n	75fc <strchr+0xc8>
    7596:	4299      	cmp	r1, r3
    7598:	d1f9      	bne.n	758e <strchr+0x5a>
    759a:	bd10      	pop	{r4, pc}
    759c:	428a      	cmp	r2, r1
    759e:	d011      	beq.n	75c4 <strchr+0x90>
    75a0:	079a      	lsls	r2, r3, #30
    75a2:	4618      	mov	r0, r3
    75a4:	d0cc      	beq.n	7540 <strchr+0xc>
    75a6:	4618      	mov	r0, r3
    75a8:	f813 2b01 	ldrb.w	r2, [r3], #1
    75ac:	2a00      	cmp	r2, #0
    75ae:	d1f5      	bne.n	759c <strchr+0x68>
    75b0:	4610      	mov	r0, r2
    75b2:	4770      	bx	lr
    75b4:	0799      	lsls	r1, r3, #30
    75b6:	4618      	mov	r0, r3
    75b8:	d007      	beq.n	75ca <strchr+0x96>
    75ba:	4618      	mov	r0, r3
    75bc:	3301      	adds	r3, #1
    75be:	7802      	ldrb	r2, [r0, #0]
    75c0:	2a00      	cmp	r2, #0
    75c2:	d1f7      	bne.n	75b4 <strchr+0x80>
    75c4:	4770      	bx	lr
    75c6:	0782      	lsls	r2, r0, #30
    75c8:	d1f7      	bne.n	75ba <strchr+0x86>
    75ca:	6802      	ldr	r2, [r0, #0]
    75cc:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    75d0:	ea23 0302 	bic.w	r3, r3, r2
    75d4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    75d8:	d108      	bne.n	75ec <strchr+0xb8>
    75da:	f850 2f04 	ldr.w	r2, [r0, #4]!
    75de:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    75e2:	ea23 0302 	bic.w	r3, r3, r2
    75e6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    75ea:	d0f6      	beq.n	75da <strchr+0xa6>
    75ec:	7803      	ldrb	r3, [r0, #0]
    75ee:	2b00      	cmp	r3, #0
    75f0:	d0e8      	beq.n	75c4 <strchr+0x90>
    75f2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    75f6:	2b00      	cmp	r3, #0
    75f8:	d1fb      	bne.n	75f2 <strchr+0xbe>
    75fa:	4770      	bx	lr
    75fc:	4618      	mov	r0, r3
    75fe:	bd10      	pop	{r4, pc}

00007600 <strncmp>:
    7600:	2a00      	cmp	r2, #0
    7602:	d03e      	beq.n	7682 <strncmp+0x82>
    7604:	ea40 0301 	orr.w	r3, r0, r1
    7608:	079b      	lsls	r3, r3, #30
    760a:	b530      	push	{r4, r5, lr}
    760c:	4684      	mov	ip, r0
    760e:	d12f      	bne.n	7670 <strncmp+0x70>
    7610:	2a03      	cmp	r2, #3
    7612:	d92d      	bls.n	7670 <strncmp+0x70>
    7614:	460b      	mov	r3, r1
    7616:	e008      	b.n	762a <strncmp+0x2a>
    7618:	3a04      	subs	r2, #4
    761a:	4684      	mov	ip, r0
    761c:	4619      	mov	r1, r3
    761e:	d025      	beq.n	766c <strncmp+0x6c>
    7620:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
    7624:	d122      	bne.n	766c <strncmp+0x6c>
    7626:	2a03      	cmp	r2, #3
    7628:	d922      	bls.n	7670 <strncmp+0x70>
    762a:	6804      	ldr	r4, [r0, #0]
    762c:	4619      	mov	r1, r3
    762e:	f853 5b04 	ldr.w	r5, [r3], #4
    7632:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
    7636:	42ac      	cmp	r4, r5
    7638:	4684      	mov	ip, r0
    763a:	ea2e 0e04 	bic.w	lr, lr, r4
    763e:	f100 0004 	add.w	r0, r0, #4
    7642:	d0e9      	beq.n	7618 <strncmp+0x18>
    7644:	f89c 0000 	ldrb.w	r0, [ip]
    7648:	780c      	ldrb	r4, [r1, #0]
    764a:	42a0      	cmp	r0, r4
    764c:	d11b      	bne.n	7686 <strncmp+0x86>
    764e:	46e6      	mov	lr, ip
    7650:	b168      	cbz	r0, 766e <strncmp+0x6e>
    7652:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
    7656:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    765a:	eba2 030e 	sub.w	r3, r2, lr
    765e:	42a0      	cmp	r0, r4
    7660:	f103 33ff 	add.w	r3, r3, #4294967295
    7664:	d10f      	bne.n	7686 <strncmp+0x86>
    7666:	eb1c 0303 	adds.w	r3, ip, r3
    766a:	d1f1      	bne.n	7650 <strncmp+0x50>
    766c:	2000      	movs	r0, #0
    766e:	bd30      	pop	{r4, r5, pc}
    7670:	f89c 0000 	ldrb.w	r0, [ip]
    7674:	780c      	ldrb	r4, [r1, #0]
    7676:	4284      	cmp	r4, r0
    7678:	d105      	bne.n	7686 <strncmp+0x86>
    767a:	2a01      	cmp	r2, #1
    767c:	d0f6      	beq.n	766c <strncmp+0x6c>
    767e:	46e6      	mov	lr, ip
    7680:	e7e6      	b.n	7650 <strncmp+0x50>
    7682:	4610      	mov	r0, r2
    7684:	4770      	bx	lr
    7686:	1b00      	subs	r0, r0, r4
    7688:	bd30      	pop	{r4, r5, pc}
    768a:	bf00      	nop

0000768c <strncpy>:
    768c:	ea40 0301 	orr.w	r3, r0, r1
    7690:	079b      	lsls	r3, r3, #30
    7692:	b530      	push	{r4, r5, lr}
    7694:	d101      	bne.n	769a <strncpy+0xe>
    7696:	2a03      	cmp	r2, #3
    7698:	d80f      	bhi.n	76ba <strncpy+0x2e>
    769a:	4684      	mov	ip, r0
    769c:	f101 3eff 	add.w	lr, r1, #4294967295
    76a0:	e007      	b.n	76b2 <strncpy+0x26>
    76a2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    76a6:	f803 1b01 	strb.w	r1, [r3], #1
    76aa:	1e54      	subs	r4, r2, #1
    76ac:	b1c1      	cbz	r1, 76e0 <strncpy+0x54>
    76ae:	469c      	mov	ip, r3
    76b0:	4622      	mov	r2, r4
    76b2:	4663      	mov	r3, ip
    76b4:	2a00      	cmp	r2, #0
    76b6:	d1f4      	bne.n	76a2 <strncpy+0x16>
    76b8:	bd30      	pop	{r4, r5, pc}
    76ba:	460b      	mov	r3, r1
    76bc:	4684      	mov	ip, r0
    76be:	4619      	mov	r1, r3
    76c0:	f853 5b04 	ldr.w	r5, [r3], #4
    76c4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    76c8:	ea24 0405 	bic.w	r4, r4, r5
    76cc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    76d0:	d1e4      	bne.n	769c <strncpy+0x10>
    76d2:	3a04      	subs	r2, #4
    76d4:	2a03      	cmp	r2, #3
    76d6:	f84c 5b04 	str.w	r5, [ip], #4
    76da:	4619      	mov	r1, r3
    76dc:	d8ef      	bhi.n	76be <strncpy+0x32>
    76de:	e7dd      	b.n	769c <strncpy+0x10>
    76e0:	4494      	add	ip, r2
    76e2:	2c00      	cmp	r4, #0
    76e4:	d0e8      	beq.n	76b8 <strncpy+0x2c>
    76e6:	f803 1b01 	strb.w	r1, [r3], #1
    76ea:	4563      	cmp	r3, ip
    76ec:	d1fb      	bne.n	76e6 <strncpy+0x5a>
    76ee:	bd30      	pop	{r4, r5, pc}

000076f0 <critical_factorization>:
    76f0:	2901      	cmp	r1, #1
    76f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76f6:	d95b      	bls.n	77b0 <critical_factorization+0xc0>
    76f8:	f04f 0801 	mov.w	r8, #1
    76fc:	46c6      	mov	lr, r8
    76fe:	2400      	movs	r4, #0
    7700:	f04f 35ff 	mov.w	r5, #4294967295
    7704:	4643      	mov	r3, r8
    7706:	e008      	b.n	771a <critical_factorization+0x2a>
    7708:	eba3 0805 	sub.w	r8, r3, r5
    770c:	461c      	mov	r4, r3
    770e:	f04f 0e01 	mov.w	lr, #1
    7712:	eb04 030e 	add.w	r3, r4, lr
    7716:	428b      	cmp	r3, r1
    7718:	d210      	bcs.n	773c <critical_factorization+0x4c>
    771a:	eb00 0c0e 	add.w	ip, r0, lr
    771e:	5cc7      	ldrb	r7, [r0, r3]
    7720:	f81c 6005 	ldrb.w	r6, [ip, r5]
    7724:	42b7      	cmp	r7, r6
    7726:	d3ef      	bcc.n	7708 <critical_factorization+0x18>
    7728:	d032      	beq.n	7790 <critical_factorization+0xa0>
    772a:	f04f 0801 	mov.w	r8, #1
    772e:	4625      	mov	r5, r4
    7730:	46c6      	mov	lr, r8
    7732:	4444      	add	r4, r8
    7734:	eb04 030e 	add.w	r3, r4, lr
    7738:	428b      	cmp	r3, r1
    773a:	d3ee      	bcc.n	771a <critical_factorization+0x2a>
    773c:	2701      	movs	r7, #1
    773e:	f8c2 8000 	str.w	r8, [r2]
    7742:	46be      	mov	lr, r7
    7744:	2400      	movs	r4, #0
    7746:	f04f 36ff 	mov.w	r6, #4294967295
    774a:	463b      	mov	r3, r7
    774c:	e007      	b.n	775e <critical_factorization+0x6e>
    774e:	1b9f      	subs	r7, r3, r6
    7750:	461c      	mov	r4, r3
    7752:	f04f 0e01 	mov.w	lr, #1
    7756:	eb04 030e 	add.w	r3, r4, lr
    775a:	428b      	cmp	r3, r1
    775c:	d210      	bcs.n	7780 <critical_factorization+0x90>
    775e:	eb00 0c06 	add.w	ip, r0, r6
    7762:	f810 8003 	ldrb.w	r8, [r0, r3]
    7766:	f81c c00e 	ldrb.w	ip, [ip, lr]
    776a:	45e0      	cmp	r8, ip
    776c:	d8ef      	bhi.n	774e <critical_factorization+0x5e>
    776e:	d017      	beq.n	77a0 <critical_factorization+0xb0>
    7770:	2701      	movs	r7, #1
    7772:	4626      	mov	r6, r4
    7774:	46be      	mov	lr, r7
    7776:	443c      	add	r4, r7
    7778:	eb04 030e 	add.w	r3, r4, lr
    777c:	428b      	cmp	r3, r1
    777e:	d3ee      	bcc.n	775e <critical_factorization+0x6e>
    7780:	3601      	adds	r6, #1
    7782:	1c68      	adds	r0, r5, #1
    7784:	4286      	cmp	r6, r0
    7786:	d301      	bcc.n	778c <critical_factorization+0x9c>
    7788:	6017      	str	r7, [r2, #0]
    778a:	4630      	mov	r0, r6
    778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7790:	45c6      	cmp	lr, r8
    7792:	bf0a      	itet	eq
    7794:	4474      	addeq	r4, lr
    7796:	f10e 0e01 	addne.w	lr, lr, #1
    779a:	f04f 0e01 	moveq.w	lr, #1
    779e:	e7b8      	b.n	7712 <critical_factorization+0x22>
    77a0:	45be      	cmp	lr, r7
    77a2:	bf0a      	itet	eq
    77a4:	4474      	addeq	r4, lr
    77a6:	f10e 0e01 	addne.w	lr, lr, #1
    77aa:	f04f 0e01 	moveq.w	lr, #1
    77ae:	e7d2      	b.n	7756 <critical_factorization+0x66>
    77b0:	2701      	movs	r7, #1
    77b2:	2600      	movs	r6, #0
    77b4:	e7e8      	b.n	7788 <critical_factorization+0x98>
    77b6:	bf00      	nop

000077b8 <two_way_long_needle>:
    77b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77bc:	4692      	mov	sl, r2
    77be:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    77c2:	aa05      	add	r2, sp, #20
    77c4:	4681      	mov	r9, r0
    77c6:	460f      	mov	r7, r1
    77c8:	4650      	mov	r0, sl
    77ca:	4619      	mov	r1, r3
    77cc:	461d      	mov	r5, r3
    77ce:	f7ff ff8f 	bl	76f0 <critical_factorization>
    77d2:	4613      	mov	r3, r2
    77d4:	4683      	mov	fp, r0
    77d6:	f20d 4214 	addw	r2, sp, #1044	; 0x414
    77da:	f843 5f04 	str.w	r5, [r3, #4]!
    77de:	4293      	cmp	r3, r2
    77e0:	d1fb      	bne.n	77da <two_way_long_needle+0x22>
    77e2:	2d00      	cmp	r5, #0
    77e4:	f000 80df 	beq.w	79a6 <two_way_long_needle+0x1ee>
    77e8:	1e6c      	subs	r4, r5, #1
    77ea:	ae06      	add	r6, sp, #24
    77ec:	f10a 32ff 	add.w	r2, sl, #4294967295
    77f0:	eb0a 0004 	add.w	r0, sl, r4
    77f4:	9600      	str	r6, [sp, #0]
    77f6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    77fa:	1aab      	subs	r3, r5, r2
    77fc:	3b01      	subs	r3, #1
    77fe:	4453      	add	r3, sl
    7800:	4282      	cmp	r2, r0
    7802:	f846 3021 	str.w	r3, [r6, r1, lsl #2]
    7806:	d1f6      	bne.n	77f6 <two_way_long_needle+0x3e>
    7808:	9905      	ldr	r1, [sp, #20]
    780a:	465a      	mov	r2, fp
    780c:	4451      	add	r1, sl
    780e:	4650      	mov	r0, sl
    7810:	f002 f8f4 	bl	99fc <memcmp>
    7814:	2800      	cmp	r0, #0
    7816:	d16f      	bne.n	78f8 <two_way_long_needle+0x140>
    7818:	f10b 33ff 	add.w	r3, fp, #4294967295
    781c:	9303      	str	r3, [sp, #12]
    781e:	f1cb 0301 	rsb	r3, fp, #1
    7822:	4680      	mov	r8, r0
    7824:	4606      	mov	r6, r0
    7826:	9301      	str	r3, [sp, #4]
    7828:	eb09 0e06 	add.w	lr, r9, r6
    782c:	9a00      	ldr	r2, [sp, #0]
    782e:	f81e 3004 	ldrb.w	r3, [lr, r4]
    7832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7836:	b1db      	cbz	r3, 7870 <two_way_long_needle+0xb8>
    7838:	f1b8 0f00 	cmp.w	r8, #0
    783c:	d003      	beq.n	7846 <two_way_long_needle+0x8e>
    783e:	9a05      	ldr	r2, [sp, #20]
    7840:	429a      	cmp	r2, r3
    7842:	d900      	bls.n	7846 <two_way_long_needle+0x8e>
    7844:	1aab      	subs	r3, r5, r2
    7846:	441e      	add	r6, r3
    7848:	f04f 0800 	mov.w	r8, #0
    784c:	1b7b      	subs	r3, r7, r5
    784e:	429e      	cmp	r6, r3
    7850:	d9ea      	bls.n	7828 <two_way_long_needle+0x70>
    7852:	eb09 0007 	add.w	r0, r9, r7
    7856:	f445 6100 	orr.w	r1, r5, #2048	; 0x800
    785a:	f002 f8ff 	bl	9a5c <strnlen>
    785e:	4407      	add	r7, r0
    7860:	1b7b      	subs	r3, r7, r5
    7862:	429e      	cmp	r6, r3
    7864:	d9e0      	bls.n	7828 <two_way_long_needle+0x70>
    7866:	2000      	movs	r0, #0
    7868:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7870:	45c3      	cmp	fp, r8
    7872:	465b      	mov	r3, fp
    7874:	bf38      	it	cc
    7876:	4643      	movcc	r3, r8
    7878:	42a3      	cmp	r3, r4
    787a:	d210      	bcs.n	789e <two_way_long_needle+0xe6>
    787c:	1e59      	subs	r1, r3, #1
    787e:	18f2      	adds	r2, r6, r3
    7880:	4451      	add	r1, sl
    7882:	444a      	add	r2, r9
    7884:	e002      	b.n	788c <two_way_long_needle+0xd4>
    7886:	3301      	adds	r3, #1
    7888:	42a3      	cmp	r3, r4
    788a:	d208      	bcs.n	789e <two_way_long_needle+0xe6>
    788c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7890:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    7894:	4584      	cmp	ip, r0
    7896:	d0f6      	beq.n	7886 <two_way_long_needle+0xce>
    7898:	9a01      	ldr	r2, [sp, #4]
    789a:	4416      	add	r6, r2
    789c:	e7d3      	b.n	7846 <two_way_long_needle+0x8e>
    789e:	45c3      	cmp	fp, r8
    78a0:	9b03      	ldr	r3, [sp, #12]
    78a2:	d97e      	bls.n	79a2 <two_way_long_needle+0x1ea>
    78a4:	eb06 020b 	add.w	r2, r6, fp
    78a8:	444a      	add	r2, r9
    78aa:	eb0a 010b 	add.w	r1, sl, fp
    78ae:	9602      	str	r6, [sp, #8]
    78b0:	e002      	b.n	78b8 <two_way_long_needle+0x100>
    78b2:	4543      	cmp	r3, r8
    78b4:	d015      	beq.n	78e2 <two_way_long_needle+0x12a>
    78b6:	4603      	mov	r3, r0
    78b8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    78bc:	f811 6d01 	ldrb.w	r6, [r1, #-1]!
    78c0:	4286      	cmp	r6, r0
    78c2:	f103 0c01 	add.w	ip, r3, #1
    78c6:	f103 30ff 	add.w	r0, r3, #4294967295
    78ca:	d0f2      	beq.n	78b2 <two_way_long_needle+0xfa>
    78cc:	9e02      	ldr	r6, [sp, #8]
    78ce:	4663      	mov	r3, ip
    78d0:	f108 0801 	add.w	r8, r8, #1
    78d4:	4598      	cmp	r8, r3
    78d6:	d80a      	bhi.n	78ee <two_way_long_needle+0x136>
    78d8:	9b05      	ldr	r3, [sp, #20]
    78da:	441e      	add	r6, r3
    78dc:	eba5 0803 	sub.w	r8, r5, r3
    78e0:	e7b4      	b.n	784c <two_way_long_needle+0x94>
    78e2:	4643      	mov	r3, r8
    78e4:	f108 0801 	add.w	r8, r8, #1
    78e8:	4598      	cmp	r8, r3
    78ea:	9e02      	ldr	r6, [sp, #8]
    78ec:	d9f4      	bls.n	78d8 <two_way_long_needle+0x120>
    78ee:	4670      	mov	r0, lr
    78f0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    78f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78f8:	eba5 030b 	sub.w	r3, r5, fp
    78fc:	455b      	cmp	r3, fp
    78fe:	bf38      	it	cc
    7900:	465b      	movcc	r3, fp
    7902:	3301      	adds	r3, #1
    7904:	9305      	str	r3, [sp, #20]
    7906:	f10b 33ff 	add.w	r3, fp, #4294967295
    790a:	9301      	str	r3, [sp, #4]
    790c:	f1cb 0301 	rsb	r3, fp, #1
    7910:	2600      	movs	r6, #0
    7912:	9302      	str	r3, [sp, #8]
    7914:	f445 6800 	orr.w	r8, r5, #2048	; 0x800
    7918:	eb09 0106 	add.w	r1, r9, r6
    791c:	9a00      	ldr	r2, [sp, #0]
    791e:	5d0b      	ldrb	r3, [r1, r4]
    7920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7924:	b16b      	cbz	r3, 7942 <two_way_long_needle+0x18a>
    7926:	441e      	add	r6, r3
    7928:	1b7b      	subs	r3, r7, r5
    792a:	42b3      	cmp	r3, r6
    792c:	d2f4      	bcs.n	7918 <two_way_long_needle+0x160>
    792e:	eb09 0007 	add.w	r0, r9, r7
    7932:	4641      	mov	r1, r8
    7934:	f002 f892 	bl	9a5c <strnlen>
    7938:	4407      	add	r7, r0
    793a:	1b7b      	subs	r3, r7, r5
    793c:	42b3      	cmp	r3, r6
    793e:	d2eb      	bcs.n	7918 <two_way_long_needle+0x160>
    7940:	e791      	b.n	7866 <two_way_long_needle+0xae>
    7942:	45a3      	cmp	fp, r4
    7944:	d214      	bcs.n	7970 <two_way_long_needle+0x1b8>
    7946:	9b01      	ldr	r3, [sp, #4]
    7948:	eb0b 0206 	add.w	r2, fp, r6
    794c:	eb0a 0c03 	add.w	ip, sl, r3
    7950:	444a      	add	r2, r9
    7952:	465b      	mov	r3, fp
    7954:	e002      	b.n	795c <two_way_long_needle+0x1a4>
    7956:	3301      	adds	r3, #1
    7958:	42a3      	cmp	r3, r4
    795a:	d209      	bcs.n	7970 <two_way_long_needle+0x1b8>
    795c:	f812 0b01 	ldrb.w	r0, [r2], #1
    7960:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    7964:	4586      	cmp	lr, r0
    7966:	d0f6      	beq.n	7956 <two_way_long_needle+0x19e>
    7968:	9a02      	ldr	r2, [sp, #8]
    796a:	4416      	add	r6, r2
    796c:	441e      	add	r6, r3
    796e:	e7db      	b.n	7928 <two_way_long_needle+0x170>
    7970:	f1bb 0f00 	cmp.w	fp, #0
    7974:	d010      	beq.n	7998 <two_way_long_needle+0x1e0>
    7976:	eb0b 0006 	add.w	r0, fp, r6
    797a:	4448      	add	r0, r9
    797c:	eb0a 020b 	add.w	r2, sl, fp
    7980:	e001      	b.n	7986 <two_way_long_needle+0x1ce>
    7982:	4553      	cmp	r3, sl
    7984:	d008      	beq.n	7998 <two_way_long_needle+0x1e0>
    7986:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
    798a:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
    798e:	45e6      	cmp	lr, ip
    7990:	4613      	mov	r3, r2
    7992:	d0f6      	beq.n	7982 <two_way_long_needle+0x1ca>
    7994:	9b05      	ldr	r3, [sp, #20]
    7996:	e7c6      	b.n	7926 <two_way_long_needle+0x16e>
    7998:	4608      	mov	r0, r1
    799a:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79a2:	465b      	mov	r3, fp
    79a4:	e794      	b.n	78d0 <two_way_long_needle+0x118>
    79a6:	ab06      	add	r3, sp, #24
    79a8:	f04f 34ff 	mov.w	r4, #4294967295
    79ac:	9300      	str	r3, [sp, #0]
    79ae:	e72b      	b.n	7808 <two_way_long_needle+0x50>

000079b0 <strstr>:
    79b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79b4:	460d      	mov	r5, r1
    79b6:	7809      	ldrb	r1, [r1, #0]
    79b8:	b090      	sub	sp, #64	; 0x40
    79ba:	4604      	mov	r4, r0
    79bc:	2900      	cmp	r1, #0
    79be:	d054      	beq.n	7a6a <strstr+0xba>
    79c0:	786a      	ldrb	r2, [r5, #1]
    79c2:	2a00      	cmp	r2, #0
    79c4:	f000 8083 	beq.w	7ace <strstr+0x11e>
    79c8:	78ab      	ldrb	r3, [r5, #2]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d051      	beq.n	7a72 <strstr+0xc2>
    79ce:	78e8      	ldrb	r0, [r5, #3]
    79d0:	682e      	ldr	r6, [r5, #0]
    79d2:	2800      	cmp	r0, #0
    79d4:	f000 8082 	beq.w	7adc <strstr+0x12c>
    79d8:	792b      	ldrb	r3, [r5, #4]
    79da:	2b00      	cmp	r3, #0
    79dc:	d057      	beq.n	7a8e <strstr+0xde>
    79de:	4628      	mov	r0, r5
    79e0:	f000 fb0e 	bl	8000 <strlen>
    79e4:	4606      	mov	r6, r0
    79e6:	f440 7100 	orr.w	r1, r0, #512	; 0x200
    79ea:	4620      	mov	r0, r4
    79ec:	f002 f836 	bl	9a5c <strnlen>
    79f0:	4286      	cmp	r6, r0
    79f2:	d85b      	bhi.n	7aac <strstr+0xfc>
    79f4:	2efe      	cmp	r6, #254	; 0xfe
    79f6:	f200 8086 	bhi.w	7b06 <strstr+0x156>
    79fa:	1b80      	subs	r0, r0, r6
    79fc:	1827      	adds	r7, r4, r0
    79fe:	2240      	movs	r2, #64	; 0x40
    7a00:	1c71      	adds	r1, r6, #1
    7a02:	4668      	mov	r0, sp
    7a04:	f7ff fd44 	bl	7490 <memset>
    7a08:	b17e      	cbz	r6, 7a2a <strstr+0x7a>
    7a0a:	1e6a      	subs	r2, r5, #1
    7a0c:	fa5f fc86 	uxtb.w	ip, r6
    7a10:	1990      	adds	r0, r2, r6
    7a12:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    7a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a1a:	3340      	adds	r3, #64	; 0x40
    7a1c:	446b      	add	r3, sp
    7a1e:	1aa9      	subs	r1, r5, r2
    7a20:	4461      	add	r1, ip
    7a22:	4282      	cmp	r2, r0
    7a24:	f803 1c40 	strb.w	r1, [r3, #-64]
    7a28:	d1f3      	bne.n	7a12 <strstr+0x62>
    7a2a:	3c01      	subs	r4, #1
    7a2c:	5da3      	ldrb	r3, [r4, r6]
    7a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7a32:	3340      	adds	r3, #64	; 0x40
    7a34:	446b      	add	r3, sp
    7a36:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    7a3a:	441c      	add	r4, r3
    7a3c:	42a7      	cmp	r7, r4
    7a3e:	d203      	bcs.n	7a48 <strstr+0x98>
    7a40:	e039      	b.n	7ab6 <strstr+0x106>
    7a42:	4444      	add	r4, r8
    7a44:	42a7      	cmp	r7, r4
    7a46:	d336      	bcc.n	7ab6 <strstr+0x106>
    7a48:	f814 c006 	ldrb.w	ip, [r4, r6]
    7a4c:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    7a50:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    7a54:	eb0d 0c03 	add.w	ip, sp, r3
    7a58:	4620      	mov	r0, r4
    7a5a:	4632      	mov	r2, r6
    7a5c:	4629      	mov	r1, r5
    7a5e:	f81c 8c40 	ldrb.w	r8, [ip, #-64]
    7a62:	f001 ffcb 	bl	99fc <memcmp>
    7a66:	2800      	cmp	r0, #0
    7a68:	d1eb      	bne.n	7a42 <strstr+0x92>
    7a6a:	4620      	mov	r0, r4
    7a6c:	b010      	add	sp, #64	; 0x40
    7a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a72:	7800      	ldrb	r0, [r0, #0]
    7a74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    7a78:	e000      	b.n	7a7c <strstr+0xcc>
    7a7a:	460c      	mov	r4, r1
    7a7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    7a80:	1c61      	adds	r1, r4, #1
    7a82:	b198      	cbz	r0, 7aac <strstr+0xfc>
    7a84:	429a      	cmp	r2, r3
    7a86:	7860      	ldrb	r0, [r4, #1]
    7a88:	d1f7      	bne.n	7a7a <strstr+0xca>
    7a8a:	3c01      	subs	r4, #1
    7a8c:	e7ed      	b.n	7a6a <strstr+0xba>
    7a8e:	7822      	ldrb	r2, [r4, #0]
    7a90:	b162      	cbz	r2, 7aac <strstr+0xfc>
    7a92:	ba31      	rev	r1, r6
    7a94:	e001      	b.n	7a9a <strstr+0xea>
    7a96:	4299      	cmp	r1, r3
    7a98:	d01e      	beq.n	7ad8 <strstr+0x128>
    7a9a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7a9e:	4620      	mov	r0, r4
    7aa0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    7aa4:	2a00      	cmp	r2, #0
    7aa6:	d1f6      	bne.n	7a96 <strstr+0xe6>
    7aa8:	4299      	cmp	r1, r3
    7aaa:	d015      	beq.n	7ad8 <strstr+0x128>
    7aac:	2400      	movs	r4, #0
    7aae:	4620      	mov	r0, r4
    7ab0:	b010      	add	sp, #64	; 0x40
    7ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ab6:	5dbb      	ldrb	r3, [r7, r6]
    7ab8:	19b8      	adds	r0, r7, r6
    7aba:	2b00      	cmp	r3, #0
    7abc:	d0f6      	beq.n	7aac <strstr+0xfc>
    7abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
    7ac2:	f001 ffcb 	bl	9a5c <strnlen>
    7ac6:	4407      	add	r7, r0
    7ac8:	42bc      	cmp	r4, r7
    7aca:	d9ae      	bls.n	7a2a <strstr+0x7a>
    7acc:	e7ee      	b.n	7aac <strstr+0xfc>
    7ace:	b010      	add	sp, #64	; 0x40
    7ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ad4:	f7ff bd2e 	b.w	7534 <strchr>
    7ad8:	1ec4      	subs	r4, r0, #3
    7ada:	e7c6      	b.n	7a6a <strstr+0xba>
    7adc:	0412      	lsls	r2, r2, #16
    7ade:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    7ae2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7ae6:	7821      	ldrb	r1, [r4, #0]
    7ae8:	4602      	mov	r2, r0
    7aea:	e000      	b.n	7aee <strstr+0x13e>
    7aec:	462c      	mov	r4, r5
    7aee:	ea41 0002 	orr.w	r0, r1, r2
    7af2:	1c65      	adds	r5, r4, #1
    7af4:	0202      	lsls	r2, r0, #8
    7af6:	2900      	cmp	r1, #0
    7af8:	d0d8      	beq.n	7aac <strstr+0xfc>
    7afa:	ebb3 2f00 	cmp.w	r3, r0, lsl #8
    7afe:	7861      	ldrb	r1, [r4, #1]
    7b00:	d1f4      	bne.n	7aec <strstr+0x13c>
    7b02:	3c02      	subs	r4, #2
    7b04:	e7b1      	b.n	7a6a <strstr+0xba>
    7b06:	4601      	mov	r1, r0
    7b08:	4633      	mov	r3, r6
    7b0a:	462a      	mov	r2, r5
    7b0c:	4620      	mov	r0, r4
    7b0e:	b010      	add	sp, #64	; 0x40
    7b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b14:	f7ff be50 	b.w	77b8 <two_way_long_needle>

00007b18 <__locale_mb_cur_max>:
    7b18:	4b01      	ldr	r3, [pc, #4]	; (7b20 <__locale_mb_cur_max+0x8>)
    7b1a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    7b1e:	4770      	bx	lr
    7b20:	200013e0 	.word	0x200013e0

00007b24 <_close_r>:
    7b24:	b538      	push	{r3, r4, r5, lr}
    7b26:	4d07      	ldr	r5, [pc, #28]	; (7b44 <_close_r+0x20>)
    7b28:	2200      	movs	r2, #0
    7b2a:	4604      	mov	r4, r0
    7b2c:	4608      	mov	r0, r1
    7b2e:	602a      	str	r2, [r5, #0]
    7b30:	f7fc fbfc 	bl	432c <_close>
    7b34:	1c43      	adds	r3, r0, #1
    7b36:	d000      	beq.n	7b3a <_close_r+0x16>
    7b38:	bd38      	pop	{r3, r4, r5, pc}
    7b3a:	682b      	ldr	r3, [r5, #0]
    7b3c:	2b00      	cmp	r3, #0
    7b3e:	d0fb      	beq.n	7b38 <_close_r+0x14>
    7b40:	6023      	str	r3, [r4, #0]
    7b42:	bd38      	pop	{r3, r4, r5, pc}
    7b44:	20002ee4 	.word	0x20002ee4

00007b48 <_lseek_r>:
    7b48:	b538      	push	{r3, r4, r5, lr}
    7b4a:	460c      	mov	r4, r1
    7b4c:	4d08      	ldr	r5, [pc, #32]	; (7b70 <_lseek_r+0x28>)
    7b4e:	4684      	mov	ip, r0
    7b50:	4611      	mov	r1, r2
    7b52:	4620      	mov	r0, r4
    7b54:	461a      	mov	r2, r3
    7b56:	2300      	movs	r3, #0
    7b58:	602b      	str	r3, [r5, #0]
    7b5a:	4664      	mov	r4, ip
    7b5c:	f7fc fbf2 	bl	4344 <_lseek>
    7b60:	1c43      	adds	r3, r0, #1
    7b62:	d000      	beq.n	7b66 <_lseek_r+0x1e>
    7b64:	bd38      	pop	{r3, r4, r5, pc}
    7b66:	682b      	ldr	r3, [r5, #0]
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d0fb      	beq.n	7b64 <_lseek_r+0x1c>
    7b6c:	6023      	str	r3, [r4, #0]
    7b6e:	bd38      	pop	{r3, r4, r5, pc}
    7b70:	20002ee4 	.word	0x20002ee4

00007b74 <_read_r>:
    7b74:	b538      	push	{r3, r4, r5, lr}
    7b76:	460c      	mov	r4, r1
    7b78:	4d08      	ldr	r5, [pc, #32]	; (7b9c <_read_r+0x28>)
    7b7a:	4684      	mov	ip, r0
    7b7c:	4611      	mov	r1, r2
    7b7e:	4620      	mov	r0, r4
    7b80:	461a      	mov	r2, r3
    7b82:	2300      	movs	r3, #0
    7b84:	602b      	str	r3, [r5, #0]
    7b86:	4664      	mov	r4, ip
    7b88:	f7fc fbce 	bl	4328 <_read>
    7b8c:	1c43      	adds	r3, r0, #1
    7b8e:	d000      	beq.n	7b92 <_read_r+0x1e>
    7b90:	bd38      	pop	{r3, r4, r5, pc}
    7b92:	682b      	ldr	r3, [r5, #0]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d0fb      	beq.n	7b90 <_read_r+0x1c>
    7b98:	6023      	str	r3, [r4, #0]
    7b9a:	bd38      	pop	{r3, r4, r5, pc}
    7b9c:	20002ee4 	.word	0x20002ee4

00007ba0 <_sbrk_r>:
    7ba0:	b538      	push	{r3, r4, r5, lr}
    7ba2:	4d07      	ldr	r5, [pc, #28]	; (7bc0 <_sbrk_r+0x20>)
    7ba4:	2200      	movs	r2, #0
    7ba6:	4604      	mov	r4, r0
    7ba8:	4608      	mov	r0, r1
    7baa:	602a      	str	r2, [r5, #0]
    7bac:	f7fc fba2 	bl	42f4 <_sbrk>
    7bb0:	1c43      	adds	r3, r0, #1
    7bb2:	d000      	beq.n	7bb6 <_sbrk_r+0x16>
    7bb4:	bd38      	pop	{r3, r4, r5, pc}
    7bb6:	682b      	ldr	r3, [r5, #0]
    7bb8:	2b00      	cmp	r3, #0
    7bba:	d0fb      	beq.n	7bb4 <_sbrk_r+0x14>
    7bbc:	6023      	str	r3, [r4, #0]
    7bbe:	bd38      	pop	{r3, r4, r5, pc}
    7bc0:	20002ee4 	.word	0x20002ee4

00007bc4 <_write_r>:
    7bc4:	b538      	push	{r3, r4, r5, lr}
    7bc6:	460c      	mov	r4, r1
    7bc8:	4d08      	ldr	r5, [pc, #32]	; (7bec <_write_r+0x28>)
    7bca:	4684      	mov	ip, r0
    7bcc:	4611      	mov	r1, r2
    7bce:	4620      	mov	r0, r4
    7bd0:	461a      	mov	r2, r3
    7bd2:	2300      	movs	r3, #0
    7bd4:	602b      	str	r3, [r5, #0]
    7bd6:	4664      	mov	r4, ip
    7bd8:	f7fb fa50 	bl	307c <_write>
    7bdc:	1c43      	adds	r3, r0, #1
    7bde:	d000      	beq.n	7be2 <_write_r+0x1e>
    7be0:	bd38      	pop	{r3, r4, r5, pc}
    7be2:	682b      	ldr	r3, [r5, #0]
    7be4:	2b00      	cmp	r3, #0
    7be6:	d0fb      	beq.n	7be0 <_write_r+0x1c>
    7be8:	6023      	str	r3, [r4, #0]
    7bea:	bd38      	pop	{r3, r4, r5, pc}
    7bec:	20002ee4 	.word	0x20002ee4

00007bf0 <__errno>:
    7bf0:	4b01      	ldr	r3, [pc, #4]	; (7bf8 <__errno+0x8>)
    7bf2:	6818      	ldr	r0, [r3, #0]
    7bf4:	4770      	bx	lr
    7bf6:	bf00      	nop
    7bf8:	20001968 	.word	0x20001968

00007bfc <__libc_init_array>:
    7bfc:	b570      	push	{r4, r5, r6, lr}
    7bfe:	4e0d      	ldr	r6, [pc, #52]	; (7c34 <__libc_init_array+0x38>)
    7c00:	4d0d      	ldr	r5, [pc, #52]	; (7c38 <__libc_init_array+0x3c>)
    7c02:	1b76      	subs	r6, r6, r5
    7c04:	10b6      	asrs	r6, r6, #2
    7c06:	d006      	beq.n	7c16 <__libc_init_array+0x1a>
    7c08:	2400      	movs	r4, #0
    7c0a:	f855 3b04 	ldr.w	r3, [r5], #4
    7c0e:	3401      	adds	r4, #1
    7c10:	4798      	blx	r3
    7c12:	42a6      	cmp	r6, r4
    7c14:	d1f9      	bne.n	7c0a <__libc_init_array+0xe>
    7c16:	4e09      	ldr	r6, [pc, #36]	; (7c3c <__libc_init_array+0x40>)
    7c18:	4d09      	ldr	r5, [pc, #36]	; (7c40 <__libc_init_array+0x44>)
    7c1a:	1b76      	subs	r6, r6, r5
    7c1c:	f004 fd5c 	bl	c6d8 <___init_veneer>
    7c20:	10b6      	asrs	r6, r6, #2
    7c22:	d006      	beq.n	7c32 <__libc_init_array+0x36>
    7c24:	2400      	movs	r4, #0
    7c26:	f855 3b04 	ldr.w	r3, [r5], #4
    7c2a:	3401      	adds	r4, #1
    7c2c:	4798      	blx	r3
    7c2e:	42a6      	cmp	r6, r4
    7c30:	d1f9      	bne.n	7c26 <__libc_init_array+0x2a>
    7c32:	bd70      	pop	{r4, r5, r6, pc}
    7c34:	60001fc8 	.word	0x60001fc8
    7c38:	60001fc8 	.word	0x60001fc8
    7c3c:	60001ff8 	.word	0x60001ff8
    7c40:	60001fc8 	.word	0x60001fc8

00007c44 <__retarget_lock_init_recursive>:
    7c44:	4770      	bx	lr
    7c46:	bf00      	nop

00007c48 <__retarget_lock_close_recursive>:
    7c48:	4770      	bx	lr
    7c4a:	bf00      	nop

00007c4c <__retarget_lock_acquire_recursive>:
    7c4c:	4770      	bx	lr
    7c4e:	bf00      	nop

00007c50 <__retarget_lock_release_recursive>:
    7c50:	4770      	bx	lr
    7c52:	bf00      	nop
	...
    7c60:	eba2 0003 	sub.w	r0, r2, r3
    7c64:	4770      	bx	lr
    7c66:	bf00      	nop

00007c68 <strcmp>:
    7c68:	7802      	ldrb	r2, [r0, #0]
    7c6a:	780b      	ldrb	r3, [r1, #0]
    7c6c:	2a01      	cmp	r2, #1
    7c6e:	bf28      	it	cs
    7c70:	429a      	cmpcs	r2, r3
    7c72:	d1f5      	bne.n	7c60 <__retarget_lock_release_recursive+0x10>
    7c74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    7c78:	ea40 0401 	orr.w	r4, r0, r1
    7c7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    7c80:	f06f 0c00 	mvn.w	ip, #0
    7c84:	ea4f 7244 	mov.w	r2, r4, lsl #29
    7c88:	b312      	cbz	r2, 7cd0 <strcmp+0x68>
    7c8a:	ea80 0401 	eor.w	r4, r0, r1
    7c8e:	f014 0f07 	tst.w	r4, #7
    7c92:	d16a      	bne.n	7d6a <strcmp+0x102>
    7c94:	f000 0407 	and.w	r4, r0, #7
    7c98:	f020 0007 	bic.w	r0, r0, #7
    7c9c:	f004 0503 	and.w	r5, r4, #3
    7ca0:	f021 0107 	bic.w	r1, r1, #7
    7ca4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    7ca8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    7cac:	f014 0f04 	tst.w	r4, #4
    7cb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7cb4:	fa0c f405 	lsl.w	r4, ip, r5
    7cb8:	ea62 0204 	orn	r2, r2, r4
    7cbc:	ea66 0604 	orn	r6, r6, r4
    7cc0:	d00a      	beq.n	7cd8 <strcmp+0x70>
    7cc2:	ea63 0304 	orn	r3, r3, r4
    7cc6:	4662      	mov	r2, ip
    7cc8:	ea67 0704 	orn	r7, r7, r4
    7ccc:	4666      	mov	r6, ip
    7cce:	e003      	b.n	7cd8 <strcmp+0x70>
    7cd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    7cd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    7cd8:	fa82 f54c 	uadd8	r5, r2, ip
    7cdc:	ea82 0406 	eor.w	r4, r2, r6
    7ce0:	faa4 f48c 	sel	r4, r4, ip
    7ce4:	bb6c      	cbnz	r4, 7d42 <strcmp+0xda>
    7ce6:	fa83 f54c 	uadd8	r5, r3, ip
    7cea:	ea83 0507 	eor.w	r5, r3, r7
    7cee:	faa5 f58c 	sel	r5, r5, ip
    7cf2:	b995      	cbnz	r5, 7d1a <strcmp+0xb2>
    7cf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    7cf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    7cfc:	fa82 f54c 	uadd8	r5, r2, ip
    7d00:	ea82 0406 	eor.w	r4, r2, r6
    7d04:	faa4 f48c 	sel	r4, r4, ip
    7d08:	fa83 f54c 	uadd8	r5, r3, ip
    7d0c:	ea83 0507 	eor.w	r5, r3, r7
    7d10:	faa5 f58c 	sel	r5, r5, ip
    7d14:	4325      	orrs	r5, r4
    7d16:	d0db      	beq.n	7cd0 <strcmp+0x68>
    7d18:	b99c      	cbnz	r4, 7d42 <strcmp+0xda>
    7d1a:	ba2d      	rev	r5, r5
    7d1c:	fab5 f485 	clz	r4, r5
    7d20:	f024 0407 	bic.w	r4, r4, #7
    7d24:	fa27 f104 	lsr.w	r1, r7, r4
    7d28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7d2c:	fa23 f304 	lsr.w	r3, r3, r4
    7d30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    7d34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7d38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7d3c:	eba0 0001 	sub.w	r0, r0, r1
    7d40:	4770      	bx	lr
    7d42:	ba24      	rev	r4, r4
    7d44:	fab4 f484 	clz	r4, r4
    7d48:	f024 0407 	bic.w	r4, r4, #7
    7d4c:	fa26 f104 	lsr.w	r1, r6, r4
    7d50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    7d54:	fa22 f204 	lsr.w	r2, r2, r4
    7d58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7d5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7d60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7d64:	eba0 0001 	sub.w	r0, r0, r1
    7d68:	4770      	bx	lr
    7d6a:	f014 0f03 	tst.w	r4, #3
    7d6e:	d13c      	bne.n	7dea <strcmp+0x182>
    7d70:	f010 0403 	ands.w	r4, r0, #3
    7d74:	d128      	bne.n	7dc8 <strcmp+0x160>
    7d76:	f850 2b08 	ldr.w	r2, [r0], #8
    7d7a:	f851 3b08 	ldr.w	r3, [r1], #8
    7d7e:	fa82 f54c 	uadd8	r5, r2, ip
    7d82:	ea82 0503 	eor.w	r5, r2, r3
    7d86:	faa5 f58c 	sel	r5, r5, ip
    7d8a:	b95d      	cbnz	r5, 7da4 <strcmp+0x13c>
    7d8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    7d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7d94:	fa82 f54c 	uadd8	r5, r2, ip
    7d98:	ea82 0503 	eor.w	r5, r2, r3
    7d9c:	faa5 f58c 	sel	r5, r5, ip
    7da0:	2d00      	cmp	r5, #0
    7da2:	d0e8      	beq.n	7d76 <strcmp+0x10e>
    7da4:	ba2d      	rev	r5, r5
    7da6:	fab5 f485 	clz	r4, r5
    7daa:	f024 0407 	bic.w	r4, r4, #7
    7dae:	fa23 f104 	lsr.w	r1, r3, r4
    7db2:	fa22 f204 	lsr.w	r2, r2, r4
    7db6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7dba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7dbe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7dc2:	eba0 0001 	sub.w	r0, r0, r1
    7dc6:	4770      	bx	lr
    7dc8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    7dcc:	f020 0003 	bic.w	r0, r0, #3
    7dd0:	f850 2b08 	ldr.w	r2, [r0], #8
    7dd4:	f021 0103 	bic.w	r1, r1, #3
    7dd8:	f851 3b08 	ldr.w	r3, [r1], #8
    7ddc:	fa0c f404 	lsl.w	r4, ip, r4
    7de0:	ea62 0204 	orn	r2, r2, r4
    7de4:	ea63 0304 	orn	r3, r3, r4
    7de8:	e7c9      	b.n	7d7e <strcmp+0x116>
    7dea:	f010 0403 	ands.w	r4, r0, #3
    7dee:	d01a      	beq.n	7e26 <strcmp+0x1be>
    7df0:	eba1 0104 	sub.w	r1, r1, r4
    7df4:	f020 0003 	bic.w	r0, r0, #3
    7df8:	07e4      	lsls	r4, r4, #31
    7dfa:	f850 2b04 	ldr.w	r2, [r0], #4
    7dfe:	d006      	beq.n	7e0e <strcmp+0x1a6>
    7e00:	d20f      	bcs.n	7e22 <strcmp+0x1ba>
    7e02:	788b      	ldrb	r3, [r1, #2]
    7e04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    7e08:	1ae4      	subs	r4, r4, r3
    7e0a:	d106      	bne.n	7e1a <strcmp+0x1b2>
    7e0c:	b12b      	cbz	r3, 7e1a <strcmp+0x1b2>
    7e0e:	78cb      	ldrb	r3, [r1, #3]
    7e10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    7e14:	1ae4      	subs	r4, r4, r3
    7e16:	d100      	bne.n	7e1a <strcmp+0x1b2>
    7e18:	b91b      	cbnz	r3, 7e22 <strcmp+0x1ba>
    7e1a:	4620      	mov	r0, r4
    7e1c:	f85d 4b10 	ldr.w	r4, [sp], #16
    7e20:	4770      	bx	lr
    7e22:	f101 0104 	add.w	r1, r1, #4
    7e26:	f850 2b04 	ldr.w	r2, [r0], #4
    7e2a:	07cc      	lsls	r4, r1, #31
    7e2c:	f021 0103 	bic.w	r1, r1, #3
    7e30:	f851 3b04 	ldr.w	r3, [r1], #4
    7e34:	d848      	bhi.n	7ec8 <strcmp+0x260>
    7e36:	d224      	bcs.n	7e82 <strcmp+0x21a>
    7e38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    7e3c:	fa82 f54c 	uadd8	r5, r2, ip
    7e40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    7e44:	faa5 f58c 	sel	r5, r5, ip
    7e48:	d10a      	bne.n	7e60 <strcmp+0x1f8>
    7e4a:	b965      	cbnz	r5, 7e66 <strcmp+0x1fe>
    7e4c:	f851 3b04 	ldr.w	r3, [r1], #4
    7e50:	ea84 0402 	eor.w	r4, r4, r2
    7e54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    7e58:	d10e      	bne.n	7e78 <strcmp+0x210>
    7e5a:	f850 2b04 	ldr.w	r2, [r0], #4
    7e5e:	e7eb      	b.n	7e38 <strcmp+0x1d0>
    7e60:	ea4f 2313 	mov.w	r3, r3, lsr #8
    7e64:	e055      	b.n	7f12 <strcmp+0x2aa>
    7e66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    7e6a:	d14d      	bne.n	7f08 <strcmp+0x2a0>
    7e6c:	7808      	ldrb	r0, [r1, #0]
    7e6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7e72:	f1c0 0000 	rsb	r0, r0, #0
    7e76:	4770      	bx	lr
    7e78:	ea4f 6212 	mov.w	r2, r2, lsr #24
    7e7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    7e80:	e047      	b.n	7f12 <strcmp+0x2aa>
    7e82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    7e86:	fa82 f54c 	uadd8	r5, r2, ip
    7e8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    7e8e:	faa5 f58c 	sel	r5, r5, ip
    7e92:	d10a      	bne.n	7eaa <strcmp+0x242>
    7e94:	b965      	cbnz	r5, 7eb0 <strcmp+0x248>
    7e96:	f851 3b04 	ldr.w	r3, [r1], #4
    7e9a:	ea84 0402 	eor.w	r4, r4, r2
    7e9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    7ea2:	d10c      	bne.n	7ebe <strcmp+0x256>
    7ea4:	f850 2b04 	ldr.w	r2, [r0], #4
    7ea8:	e7eb      	b.n	7e82 <strcmp+0x21a>
    7eaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
    7eae:	e030      	b.n	7f12 <strcmp+0x2aa>
    7eb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    7eb4:	d128      	bne.n	7f08 <strcmp+0x2a0>
    7eb6:	880b      	ldrh	r3, [r1, #0]
    7eb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7ebc:	e029      	b.n	7f12 <strcmp+0x2aa>
    7ebe:	ea4f 4212 	mov.w	r2, r2, lsr #16
    7ec2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    7ec6:	e024      	b.n	7f12 <strcmp+0x2aa>
    7ec8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    7ecc:	fa82 f54c 	uadd8	r5, r2, ip
    7ed0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    7ed4:	faa5 f58c 	sel	r5, r5, ip
    7ed8:	d10a      	bne.n	7ef0 <strcmp+0x288>
    7eda:	b965      	cbnz	r5, 7ef6 <strcmp+0x28e>
    7edc:	f851 3b04 	ldr.w	r3, [r1], #4
    7ee0:	ea84 0402 	eor.w	r4, r4, r2
    7ee4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    7ee8:	d109      	bne.n	7efe <strcmp+0x296>
    7eea:	f850 2b04 	ldr.w	r2, [r0], #4
    7eee:	e7eb      	b.n	7ec8 <strcmp+0x260>
    7ef0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    7ef4:	e00d      	b.n	7f12 <strcmp+0x2aa>
    7ef6:	f015 0fff 	tst.w	r5, #255	; 0xff
    7efa:	d105      	bne.n	7f08 <strcmp+0x2a0>
    7efc:	680b      	ldr	r3, [r1, #0]
    7efe:	ea4f 2212 	mov.w	r2, r2, lsr #8
    7f02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7f06:	e004      	b.n	7f12 <strcmp+0x2aa>
    7f08:	f04f 0000 	mov.w	r0, #0
    7f0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7f10:	4770      	bx	lr
    7f12:	ba12      	rev	r2, r2
    7f14:	ba1b      	rev	r3, r3
    7f16:	fa82 f44c 	uadd8	r4, r2, ip
    7f1a:	ea82 0403 	eor.w	r4, r2, r3
    7f1e:	faa4 f58c 	sel	r5, r4, ip
    7f22:	fab5 f485 	clz	r4, r5
    7f26:	fa02 f204 	lsl.w	r2, r2, r4
    7f2a:	fa03 f304 	lsl.w	r3, r3, r4
    7f2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    7f32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    7f36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    7f3a:	4770      	bx	lr

00007f3c <strcpy>:
    7f3c:	ea80 0201 	eor.w	r2, r0, r1
    7f40:	4684      	mov	ip, r0
    7f42:	f012 0f03 	tst.w	r2, #3
    7f46:	d14f      	bne.n	7fe8 <strcpy+0xac>
    7f48:	f011 0f03 	tst.w	r1, #3
    7f4c:	d132      	bne.n	7fb4 <strcpy+0x78>
    7f4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    7f52:	f011 0f04 	tst.w	r1, #4
    7f56:	f851 3b04 	ldr.w	r3, [r1], #4
    7f5a:	d00b      	beq.n	7f74 <strcpy+0x38>
    7f5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7f60:	439a      	bics	r2, r3
    7f62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7f66:	bf04      	itt	eq
    7f68:	f84c 3b04 	streq.w	r3, [ip], #4
    7f6c:	f851 3b04 	ldreq.w	r3, [r1], #4
    7f70:	d116      	bne.n	7fa0 <strcpy+0x64>
    7f72:	bf00      	nop
    7f74:	f851 4b04 	ldr.w	r4, [r1], #4
    7f78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    7f7c:	439a      	bics	r2, r3
    7f7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7f82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    7f86:	d10b      	bne.n	7fa0 <strcpy+0x64>
    7f88:	f84c 3b04 	str.w	r3, [ip], #4
    7f8c:	43a2      	bics	r2, r4
    7f8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    7f92:	bf04      	itt	eq
    7f94:	f851 3b04 	ldreq.w	r3, [r1], #4
    7f98:	f84c 4b04 	streq.w	r4, [ip], #4
    7f9c:	d0ea      	beq.n	7f74 <strcpy+0x38>
    7f9e:	4623      	mov	r3, r4
    7fa0:	f80c 3b01 	strb.w	r3, [ip], #1
    7fa4:	f013 0fff 	tst.w	r3, #255	; 0xff
    7fa8:	ea4f 2333 	mov.w	r3, r3, ror #8
    7fac:	d1f8      	bne.n	7fa0 <strcpy+0x64>
    7fae:	f85d 4b04 	ldr.w	r4, [sp], #4
    7fb2:	4770      	bx	lr
    7fb4:	f011 0f01 	tst.w	r1, #1
    7fb8:	d006      	beq.n	7fc8 <strcpy+0x8c>
    7fba:	f811 2b01 	ldrb.w	r2, [r1], #1
    7fbe:	f80c 2b01 	strb.w	r2, [ip], #1
    7fc2:	2a00      	cmp	r2, #0
    7fc4:	bf08      	it	eq
    7fc6:	4770      	bxeq	lr
    7fc8:	f011 0f02 	tst.w	r1, #2
    7fcc:	d0bf      	beq.n	7f4e <strcpy+0x12>
    7fce:	f831 2b02 	ldrh.w	r2, [r1], #2
    7fd2:	f012 0fff 	tst.w	r2, #255	; 0xff
    7fd6:	bf16      	itet	ne
    7fd8:	f82c 2b02 	strhne.w	r2, [ip], #2
    7fdc:	f88c 2000 	strbeq.w	r2, [ip]
    7fe0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    7fe4:	d1b3      	bne.n	7f4e <strcpy+0x12>
    7fe6:	4770      	bx	lr
    7fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
    7fec:	f80c 2b01 	strb.w	r2, [ip], #1
    7ff0:	2a00      	cmp	r2, #0
    7ff2:	d1f9      	bne.n	7fe8 <strcpy+0xac>
    7ff4:	4770      	bx	lr
    7ff6:	bf00      	nop
	...

00008000 <strlen>:
    8000:	f890 f000 	pld	[r0]
    8004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    8008:	f020 0107 	bic.w	r1, r0, #7
    800c:	f06f 0c00 	mvn.w	ip, #0
    8010:	f010 0407 	ands.w	r4, r0, #7
    8014:	f891 f020 	pld	[r1, #32]
    8018:	f040 8049 	bne.w	80ae <strlen+0xae>
    801c:	f04f 0400 	mov.w	r4, #0
    8020:	f06f 0007 	mvn.w	r0, #7
    8024:	e9d1 2300 	ldrd	r2, r3, [r1]
    8028:	f891 f040 	pld	[r1, #64]	; 0x40
    802c:	f100 0008 	add.w	r0, r0, #8
    8030:	fa82 f24c 	uadd8	r2, r2, ip
    8034:	faa4 f28c 	sel	r2, r4, ip
    8038:	fa83 f34c 	uadd8	r3, r3, ip
    803c:	faa2 f38c 	sel	r3, r2, ip
    8040:	bb4b      	cbnz	r3, 8096 <strlen+0x96>
    8042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8046:	fa82 f24c 	uadd8	r2, r2, ip
    804a:	f100 0008 	add.w	r0, r0, #8
    804e:	faa4 f28c 	sel	r2, r4, ip
    8052:	fa83 f34c 	uadd8	r3, r3, ip
    8056:	faa2 f38c 	sel	r3, r2, ip
    805a:	b9e3      	cbnz	r3, 8096 <strlen+0x96>
    805c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    8060:	fa82 f24c 	uadd8	r2, r2, ip
    8064:	f100 0008 	add.w	r0, r0, #8
    8068:	faa4 f28c 	sel	r2, r4, ip
    806c:	fa83 f34c 	uadd8	r3, r3, ip
    8070:	faa2 f38c 	sel	r3, r2, ip
    8074:	b97b      	cbnz	r3, 8096 <strlen+0x96>
    8076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    807a:	f101 0120 	add.w	r1, r1, #32
    807e:	fa82 f24c 	uadd8	r2, r2, ip
    8082:	f100 0008 	add.w	r0, r0, #8
    8086:	faa4 f28c 	sel	r2, r4, ip
    808a:	fa83 f34c 	uadd8	r3, r3, ip
    808e:	faa2 f38c 	sel	r3, r2, ip
    8092:	2b00      	cmp	r3, #0
    8094:	d0c6      	beq.n	8024 <strlen+0x24>
    8096:	2a00      	cmp	r2, #0
    8098:	bf04      	itt	eq
    809a:	3004      	addeq	r0, #4
    809c:	461a      	moveq	r2, r3
    809e:	ba12      	rev	r2, r2
    80a0:	fab2 f282 	clz	r2, r2
    80a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    80a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    80ac:	4770      	bx	lr
    80ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    80b2:	f004 0503 	and.w	r5, r4, #3
    80b6:	f1c4 0000 	rsb	r0, r4, #0
    80ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    80be:	f014 0f04 	tst.w	r4, #4
    80c2:	f891 f040 	pld	[r1, #64]	; 0x40
    80c6:	fa0c f505 	lsl.w	r5, ip, r5
    80ca:	ea62 0205 	orn	r2, r2, r5
    80ce:	bf1c      	itt	ne
    80d0:	ea63 0305 	ornne	r3, r3, r5
    80d4:	4662      	movne	r2, ip
    80d6:	f04f 0400 	mov.w	r4, #0
    80da:	e7a9      	b.n	8030 <strlen+0x30>
    80dc:	0000      	movs	r0, r0
	...

000080e0 <nan>:
    80e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80e8 <nan+0x8>
    80e4:	4770      	bx	lr
    80e6:	bf00      	nop
    80e8:	00000000 	.word	0x00000000
    80ec:	7ff80000 	.word	0x7ff80000

000080f0 <nanf>:
    80f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80f8 <nanf+0x8>
    80f4:	4770      	bx	lr
    80f6:	bf00      	nop
    80f8:	7fc00000 	.word	0x7fc00000

000080fc <__register_exitproc>:
    80fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8100:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8180 <__register_exitproc+0x84>
    8104:	4606      	mov	r6, r0
    8106:	f8da 0000 	ldr.w	r0, [sl]
    810a:	4698      	mov	r8, r3
    810c:	460f      	mov	r7, r1
    810e:	4691      	mov	r9, r2
    8110:	f7ff fd9c 	bl	7c4c <__retarget_lock_acquire_recursive>
    8114:	4b18      	ldr	r3, [pc, #96]	; (8178 <__register_exitproc+0x7c>)
    8116:	681c      	ldr	r4, [r3, #0]
    8118:	b324      	cbz	r4, 8164 <__register_exitproc+0x68>
    811a:	6865      	ldr	r5, [r4, #4]
    811c:	2d1f      	cmp	r5, #31
    811e:	dc24      	bgt.n	816a <__register_exitproc+0x6e>
    8120:	b95e      	cbnz	r6, 813a <__register_exitproc+0x3e>
    8122:	1c6b      	adds	r3, r5, #1
    8124:	3502      	adds	r5, #2
    8126:	f8da 0000 	ldr.w	r0, [sl]
    812a:	6063      	str	r3, [r4, #4]
    812c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    8130:	f7ff fd8e 	bl	7c50 <__retarget_lock_release_recursive>
    8134:	2000      	movs	r0, #0
    8136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    813e:	2301      	movs	r3, #1
    8140:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    8144:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    8148:	40ab      	lsls	r3, r5
    814a:	431a      	orrs	r2, r3
    814c:	2e02      	cmp	r6, #2
    814e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    8152:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    8156:	d1e4      	bne.n	8122 <__register_exitproc+0x26>
    8158:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    815c:	431a      	orrs	r2, r3
    815e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    8162:	e7de      	b.n	8122 <__register_exitproc+0x26>
    8164:	4c05      	ldr	r4, [pc, #20]	; (817c <__register_exitproc+0x80>)
    8166:	601c      	str	r4, [r3, #0]
    8168:	e7d7      	b.n	811a <__register_exitproc+0x1e>
    816a:	f8da 0000 	ldr.w	r0, [sl]
    816e:	f7ff fd6f 	bl	7c50 <__retarget_lock_release_recursive>
    8172:	f04f 30ff 	mov.w	r0, #4294967295
    8176:	e7de      	b.n	8136 <__register_exitproc+0x3a>
    8178:	20002bc0 	.word	0x20002bc0
    817c:	20002bc4 	.word	0x20002bc4
    8180:	200013d4 	.word	0x200013d4

00008184 <_malloc_trim_r>:
    8184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8186:	4f24      	ldr	r7, [pc, #144]	; (8218 <_malloc_trim_r+0x94>)
    8188:	460c      	mov	r4, r1
    818a:	4606      	mov	r6, r0
    818c:	f7fd fd36 	bl	5bfc <__malloc_lock>
    8190:	68bb      	ldr	r3, [r7, #8]
    8192:	685d      	ldr	r5, [r3, #4]
    8194:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    8198:	310f      	adds	r1, #15
    819a:	f025 0503 	bic.w	r5, r5, #3
    819e:	194b      	adds	r3, r1, r5
    81a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    81a4:	f023 030f 	bic.w	r3, r3, #15
    81a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    81ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    81b0:	db07      	blt.n	81c2 <_malloc_trim_r+0x3e>
    81b2:	2100      	movs	r1, #0
    81b4:	4630      	mov	r0, r6
    81b6:	f7ff fcf3 	bl	7ba0 <_sbrk_r>
    81ba:	68bb      	ldr	r3, [r7, #8]
    81bc:	442b      	add	r3, r5
    81be:	4298      	cmp	r0, r3
    81c0:	d004      	beq.n	81cc <_malloc_trim_r+0x48>
    81c2:	4630      	mov	r0, r6
    81c4:	f7fd fd20 	bl	5c08 <__malloc_unlock>
    81c8:	2000      	movs	r0, #0
    81ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81cc:	4261      	negs	r1, r4
    81ce:	4630      	mov	r0, r6
    81d0:	f7ff fce6 	bl	7ba0 <_sbrk_r>
    81d4:	3001      	adds	r0, #1
    81d6:	d00d      	beq.n	81f4 <_malloc_trim_r+0x70>
    81d8:	4a10      	ldr	r2, [pc, #64]	; (821c <_malloc_trim_r+0x98>)
    81da:	68bb      	ldr	r3, [r7, #8]
    81dc:	1b2d      	subs	r5, r5, r4
    81de:	f045 0501 	orr.w	r5, r5, #1
    81e2:	605d      	str	r5, [r3, #4]
    81e4:	6813      	ldr	r3, [r2, #0]
    81e6:	4630      	mov	r0, r6
    81e8:	1b1b      	subs	r3, r3, r4
    81ea:	6013      	str	r3, [r2, #0]
    81ec:	f7fd fd0c 	bl	5c08 <__malloc_unlock>
    81f0:	2001      	movs	r0, #1
    81f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    81f4:	2100      	movs	r1, #0
    81f6:	4630      	mov	r0, r6
    81f8:	f7ff fcd2 	bl	7ba0 <_sbrk_r>
    81fc:	68ba      	ldr	r2, [r7, #8]
    81fe:	1a83      	subs	r3, r0, r2
    8200:	2b0f      	cmp	r3, #15
    8202:	ddde      	ble.n	81c2 <_malloc_trim_r+0x3e>
    8204:	f043 0301 	orr.w	r3, r3, #1
    8208:	6053      	str	r3, [r2, #4]
    820a:	4b05      	ldr	r3, [pc, #20]	; (8220 <_malloc_trim_r+0x9c>)
    820c:	4903      	ldr	r1, [pc, #12]	; (821c <_malloc_trim_r+0x98>)
    820e:	681b      	ldr	r3, [r3, #0]
    8210:	1ac0      	subs	r0, r0, r3
    8212:	6008      	str	r0, [r1, #0]
    8214:	e7d5      	b.n	81c2 <_malloc_trim_r+0x3e>
    8216:	bf00      	nop
    8218:	2000154c 	.word	0x2000154c
    821c:	20002d60 	.word	0x20002d60
    8220:	20001954 	.word	0x20001954

00008224 <_free_r>:
    8224:	2900      	cmp	r1, #0
    8226:	d061      	beq.n	82ec <_free_r+0xc8>
    8228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    822a:	460c      	mov	r4, r1
    822c:	4606      	mov	r6, r0
    822e:	f7fd fce5 	bl	5bfc <__malloc_lock>
    8232:	f854 2c04 	ldr.w	r2, [r4, #-4]
    8236:	4f7b      	ldr	r7, [pc, #492]	; (8424 <_free_r+0x200>)
    8238:	f1a4 0508 	sub.w	r5, r4, #8
    823c:	f022 0101 	bic.w	r1, r2, #1
    8240:	eb05 0c01 	add.w	ip, r5, r1
    8244:	68b8      	ldr	r0, [r7, #8]
    8246:	f8dc 3004 	ldr.w	r3, [ip, #4]
    824a:	4560      	cmp	r0, ip
    824c:	f023 0303 	bic.w	r3, r3, #3
    8250:	f000 808b 	beq.w	836a <_free_r+0x146>
    8254:	07d2      	lsls	r2, r2, #31
    8256:	f8cc 3004 	str.w	r3, [ip, #4]
    825a:	d432      	bmi.n	82c2 <_free_r+0x9e>
    825c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8260:	1aad      	subs	r5, r5, r2
    8262:	4411      	add	r1, r2
    8264:	68aa      	ldr	r2, [r5, #8]
    8266:	f107 0008 	add.w	r0, r7, #8
    826a:	4282      	cmp	r2, r0
    826c:	d06a      	beq.n	8344 <_free_r+0x120>
    826e:	eb0c 0403 	add.w	r4, ip, r3
    8272:	f8d4 e004 	ldr.w	lr, [r4, #4]
    8276:	68ec      	ldr	r4, [r5, #12]
    8278:	60d4      	str	r4, [r2, #12]
    827a:	f01e 0f01 	tst.w	lr, #1
    827e:	60a2      	str	r2, [r4, #8]
    8280:	f000 8097 	beq.w	83b2 <_free_r+0x18e>
    8284:	f041 0301 	orr.w	r3, r1, #1
    8288:	606b      	str	r3, [r5, #4]
    828a:	f8cc 1000 	str.w	r1, [ip]
    828e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    8292:	d235      	bcs.n	8300 <_free_r+0xdc>
    8294:	6878      	ldr	r0, [r7, #4]
    8296:	08cb      	lsrs	r3, r1, #3
    8298:	2201      	movs	r2, #1
    829a:	0949      	lsrs	r1, r1, #5
    829c:	3301      	adds	r3, #1
    829e:	408a      	lsls	r2, r1
    82a0:	4302      	orrs	r2, r0
    82a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    82a6:	607a      	str	r2, [r7, #4]
    82a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    82ac:	3a08      	subs	r2, #8
    82ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    82b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    82b6:	60cd      	str	r5, [r1, #12]
    82b8:	4630      	mov	r0, r6
    82ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    82be:	f7fd bca3 	b.w	5c08 <__malloc_unlock>
    82c2:	eb0c 0203 	add.w	r2, ip, r3
    82c6:	6852      	ldr	r2, [r2, #4]
    82c8:	07d0      	lsls	r0, r2, #31
    82ca:	d410      	bmi.n	82ee <_free_r+0xca>
    82cc:	4419      	add	r1, r3
    82ce:	f107 0008 	add.w	r0, r7, #8
    82d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    82d6:	4283      	cmp	r3, r0
    82d8:	d073      	beq.n	83c2 <_free_r+0x19e>
    82da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    82de:	60da      	str	r2, [r3, #12]
    82e0:	6093      	str	r3, [r2, #8]
    82e2:	f041 0301 	orr.w	r3, r1, #1
    82e6:	606b      	str	r3, [r5, #4]
    82e8:	5069      	str	r1, [r5, r1]
    82ea:	e7d0      	b.n	828e <_free_r+0x6a>
    82ec:	4770      	bx	lr
    82ee:	f041 0301 	orr.w	r3, r1, #1
    82f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    82f6:	f844 3c04 	str.w	r3, [r4, #-4]
    82fa:	f8cc 1000 	str.w	r1, [ip]
    82fe:	d3c9      	bcc.n	8294 <_free_r+0x70>
    8300:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    8304:	ea4f 2351 	mov.w	r3, r1, lsr #9
    8308:	d248      	bcs.n	839c <_free_r+0x178>
    830a:	098b      	lsrs	r3, r1, #6
    830c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    8310:	f103 0238 	add.w	r2, r3, #56	; 0x38
    8314:	00c3      	lsls	r3, r0, #3
    8316:	18f8      	adds	r0, r7, r3
    8318:	58fb      	ldr	r3, [r7, r3]
    831a:	3808      	subs	r0, #8
    831c:	4298      	cmp	r0, r3
    831e:	d059      	beq.n	83d4 <_free_r+0x1b0>
    8320:	685a      	ldr	r2, [r3, #4]
    8322:	f022 0203 	bic.w	r2, r2, #3
    8326:	428a      	cmp	r2, r1
    8328:	d902      	bls.n	8330 <_free_r+0x10c>
    832a:	689b      	ldr	r3, [r3, #8]
    832c:	4298      	cmp	r0, r3
    832e:	d1f7      	bne.n	8320 <_free_r+0xfc>
    8330:	68d8      	ldr	r0, [r3, #12]
    8332:	e9c5 3002 	strd	r3, r0, [r5, #8]
    8336:	6085      	str	r5, [r0, #8]
    8338:	60dd      	str	r5, [r3, #12]
    833a:	4630      	mov	r0, r6
    833c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8340:	f7fd bc62 	b.w	5c08 <__malloc_unlock>
    8344:	eb0c 0203 	add.w	r2, ip, r3
    8348:	6852      	ldr	r2, [r2, #4]
    834a:	07d2      	lsls	r2, r2, #31
    834c:	d463      	bmi.n	8416 <_free_r+0x1f2>
    834e:	440b      	add	r3, r1
    8350:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    8354:	60ca      	str	r2, [r1, #12]
    8356:	6091      	str	r1, [r2, #8]
    8358:	f043 0201 	orr.w	r2, r3, #1
    835c:	606a      	str	r2, [r5, #4]
    835e:	4630      	mov	r0, r6
    8360:	50eb      	str	r3, [r5, r3]
    8362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8366:	f7fd bc4f 	b.w	5c08 <__malloc_unlock>
    836a:	440b      	add	r3, r1
    836c:	07d1      	lsls	r1, r2, #31
    836e:	d407      	bmi.n	8380 <_free_r+0x15c>
    8370:	f854 2c08 	ldr.w	r2, [r4, #-8]
    8374:	1aad      	subs	r5, r5, r2
    8376:	4413      	add	r3, r2
    8378:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    837c:	60ca      	str	r2, [r1, #12]
    837e:	6091      	str	r1, [r2, #8]
    8380:	f043 0201 	orr.w	r2, r3, #1
    8384:	606a      	str	r2, [r5, #4]
    8386:	4a28      	ldr	r2, [pc, #160]	; (8428 <_free_r+0x204>)
    8388:	60bd      	str	r5, [r7, #8]
    838a:	6812      	ldr	r2, [r2, #0]
    838c:	429a      	cmp	r2, r3
    838e:	d893      	bhi.n	82b8 <_free_r+0x94>
    8390:	4b26      	ldr	r3, [pc, #152]	; (842c <_free_r+0x208>)
    8392:	4630      	mov	r0, r6
    8394:	6819      	ldr	r1, [r3, #0]
    8396:	f7ff fef5 	bl	8184 <_malloc_trim_r>
    839a:	e78d      	b.n	82b8 <_free_r+0x94>
    839c:	2b14      	cmp	r3, #20
    839e:	d90a      	bls.n	83b6 <_free_r+0x192>
    83a0:	2b54      	cmp	r3, #84	; 0x54
    83a2:	d81f      	bhi.n	83e4 <_free_r+0x1c0>
    83a4:	0b0b      	lsrs	r3, r1, #12
    83a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    83aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    83ae:	00c3      	lsls	r3, r0, #3
    83b0:	e7b1      	b.n	8316 <_free_r+0xf2>
    83b2:	4419      	add	r1, r3
    83b4:	e78d      	b.n	82d2 <_free_r+0xae>
    83b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    83ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    83be:	00c3      	lsls	r3, r0, #3
    83c0:	e7a9      	b.n	8316 <_free_r+0xf2>
    83c2:	f041 0301 	orr.w	r3, r1, #1
    83c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    83ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    83ce:	606b      	str	r3, [r5, #4]
    83d0:	5069      	str	r1, [r5, r1]
    83d2:	e771      	b.n	82b8 <_free_r+0x94>
    83d4:	6879      	ldr	r1, [r7, #4]
    83d6:	1092      	asrs	r2, r2, #2
    83d8:	2401      	movs	r4, #1
    83da:	fa04 f202 	lsl.w	r2, r4, r2
    83de:	430a      	orrs	r2, r1
    83e0:	607a      	str	r2, [r7, #4]
    83e2:	e7a6      	b.n	8332 <_free_r+0x10e>
    83e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    83e8:	d806      	bhi.n	83f8 <_free_r+0x1d4>
    83ea:	0bcb      	lsrs	r3, r1, #15
    83ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    83f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    83f4:	00c3      	lsls	r3, r0, #3
    83f6:	e78e      	b.n	8316 <_free_r+0xf2>
    83f8:	f240 5254 	movw	r2, #1364	; 0x554
    83fc:	4293      	cmp	r3, r2
    83fe:	d806      	bhi.n	840e <_free_r+0x1ea>
    8400:	0c8b      	lsrs	r3, r1, #18
    8402:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    8406:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    840a:	00c3      	lsls	r3, r0, #3
    840c:	e783      	b.n	8316 <_free_r+0xf2>
    840e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    8412:	227e      	movs	r2, #126	; 0x7e
    8414:	e77f      	b.n	8316 <_free_r+0xf2>
    8416:	f041 0301 	orr.w	r3, r1, #1
    841a:	606b      	str	r3, [r5, #4]
    841c:	f8cc 1000 	str.w	r1, [ip]
    8420:	e74a      	b.n	82b8 <_free_r+0x94>
    8422:	bf00      	nop
    8424:	2000154c 	.word	0x2000154c
    8428:	20001958 	.word	0x20001958
    842c:	20002d90 	.word	0x20002d90

00008430 <rshift>:
    8430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8434:	6904      	ldr	r4, [r0, #16]
    8436:	ebb4 1f61 	cmp.w	r4, r1, asr #5
    843a:	dd2f      	ble.n	849c <rshift+0x6c>
    843c:	f100 0e14 	add.w	lr, r0, #20
    8440:	114e      	asrs	r6, r1, #5
    8442:	f011 0c1f 	ands.w	ip, r1, #31
    8446:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
    844a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
    844e:	d02b      	beq.n	84a8 <rshift+0x78>
    8450:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
    8454:	3304      	adds	r3, #4
    8456:	429d      	cmp	r5, r3
    8458:	fa21 f10c 	lsr.w	r1, r1, ip
    845c:	f1cc 0820 	rsb	r8, ip, #32
    8460:	d918      	bls.n	8494 <rshift+0x64>
    8462:	4677      	mov	r7, lr
    8464:	681a      	ldr	r2, [r3, #0]
    8466:	fa02 f208 	lsl.w	r2, r2, r8
    846a:	430a      	orrs	r2, r1
    846c:	f847 2b04 	str.w	r2, [r7], #4
    8470:	f853 1b04 	ldr.w	r1, [r3], #4
    8474:	429d      	cmp	r5, r3
    8476:	fa21 f10c 	lsr.w	r1, r1, ip
    847a:	d8f3      	bhi.n	8464 <rshift+0x34>
    847c:	1ba3      	subs	r3, r4, r6
    847e:	009b      	lsls	r3, r3, #2
    8480:	3b05      	subs	r3, #5
    8482:	089b      	lsrs	r3, r3, #2
    8484:	3301      	adds	r3, #1
    8486:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
    848a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
    848e:	b1c9      	cbz	r1, 84c4 <rshift+0x94>
    8490:	3404      	adds	r4, #4
    8492:	e017      	b.n	84c4 <rshift+0x94>
    8494:	6141      	str	r1, [r0, #20]
    8496:	4674      	mov	r4, lr
    8498:	2900      	cmp	r1, #0
    849a:	d1f9      	bne.n	8490 <rshift+0x60>
    849c:	2300      	movs	r3, #0
    849e:	6103      	str	r3, [r0, #16]
    84a0:	2300      	movs	r3, #0
    84a2:	6143      	str	r3, [r0, #20]
    84a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84a8:	429d      	cmp	r5, r3
    84aa:	bf88      	it	hi
    84ac:	f100 0210 	addhi.w	r2, r0, #16
    84b0:	d9f4      	bls.n	849c <rshift+0x6c>
    84b2:	f853 1b04 	ldr.w	r1, [r3], #4
    84b6:	f842 1f04 	str.w	r1, [r2, #4]!
    84ba:	429d      	cmp	r5, r3
    84bc:	d8f9      	bhi.n	84b2 <rshift+0x82>
    84be:	1ba4      	subs	r4, r4, r6
    84c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
    84c4:	eba4 030e 	sub.w	r3, r4, lr
    84c8:	109b      	asrs	r3, r3, #2
    84ca:	4574      	cmp	r4, lr
    84cc:	6103      	str	r3, [r0, #16]
    84ce:	d0e7      	beq.n	84a0 <rshift+0x70>
    84d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000084d4 <__gethex>:
    84d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84d8:	ed2d 8b02 	vpush	{d8}
    84dc:	680c      	ldr	r4, [r1, #0]
    84de:	468b      	mov	fp, r1
    84e0:	78a1      	ldrb	r1, [r4, #2]
    84e2:	b085      	sub	sp, #20
    84e4:	2930      	cmp	r1, #48	; 0x30
    84e6:	ee08 0a10 	vmov	s16, r0
    84ea:	4692      	mov	sl, r2
    84ec:	9302      	str	r3, [sp, #8]
    84ee:	f040 81ce 	bne.w	888e <__gethex+0x3ba>
    84f2:	f06f 0001 	mvn.w	r0, #1
    84f6:	1b00      	subs	r0, r0, r4
    84f8:	1ce2      	adds	r2, r4, #3
    84fa:	1883      	adds	r3, r0, r2
    84fc:	4614      	mov	r4, r2
    84fe:	f812 1b01 	ldrb.w	r1, [r2], #1
    8502:	2930      	cmp	r1, #48	; 0x30
    8504:	d0f9      	beq.n	84fa <__gethex+0x26>
    8506:	f8df 8300 	ldr.w	r8, [pc, #768]	; 8808 <__gethex+0x334>
    850a:	f818 2001 	ldrb.w	r2, [r8, r1]
    850e:	2a00      	cmp	r2, #0
    8510:	f000 80e5 	beq.w	86de <__gethex+0x20a>
    8514:	7822      	ldrb	r2, [r4, #0]
    8516:	2700      	movs	r7, #0
    8518:	f818 2002 	ldrb.w	r2, [r8, r2]
    851c:	463d      	mov	r5, r7
    851e:	4626      	mov	r6, r4
    8520:	b12a      	cbz	r2, 852e <__gethex+0x5a>
    8522:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    8526:	f818 2002 	ldrb.w	r2, [r8, r2]
    852a:	2a00      	cmp	r2, #0
    852c:	d1f9      	bne.n	8522 <__gethex+0x4e>
    852e:	49b5      	ldr	r1, [pc, #724]	; (8804 <__gethex+0x330>)
    8530:	9301      	str	r3, [sp, #4]
    8532:	2201      	movs	r2, #1
    8534:	4630      	mov	r0, r6
    8536:	f7ff f863 	bl	7600 <strncmp>
    853a:	9b01      	ldr	r3, [sp, #4]
    853c:	4681      	mov	r9, r0
    853e:	2800      	cmp	r0, #0
    8540:	d04d      	beq.n	85de <__gethex+0x10a>
    8542:	2d00      	cmp	r5, #0
    8544:	d14e      	bne.n	85e4 <__gethex+0x110>
    8546:	7832      	ldrb	r2, [r6, #0]
    8548:	46a9      	mov	r9, r5
    854a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    854e:	2a50      	cmp	r2, #80	; 0x50
    8550:	4635      	mov	r5, r6
    8552:	d050      	beq.n	85f6 <__gethex+0x122>
    8554:	f8cb 6000 	str.w	r6, [fp]
    8558:	2f00      	cmp	r7, #0
    855a:	d169      	bne.n	8630 <__gethex+0x15c>
    855c:	1b2b      	subs	r3, r5, r4
    855e:	3b01      	subs	r3, #1
    8560:	2b07      	cmp	r3, #7
    8562:	4639      	mov	r1, r7
    8564:	dd04      	ble.n	8570 <__gethex+0x9c>
    8566:	105b      	asrs	r3, r3, #1
    8568:	2b07      	cmp	r3, #7
    856a:	f101 0101 	add.w	r1, r1, #1
    856e:	dcfa      	bgt.n	8566 <__gethex+0x92>
    8570:	ee18 0a10 	vmov	r0, s16
    8574:	f000 fb82 	bl	8c7c <_Balloc>
    8578:	4683      	mov	fp, r0
    857a:	2800      	cmp	r0, #0
    857c:	f000 8266 	beq.w	8a4c <__gethex+0x578>
    8580:	f100 0614 	add.w	r6, r0, #20
    8584:	42ac      	cmp	r4, r5
    8586:	9601      	str	r6, [sp, #4]
    8588:	f080 81d2 	bcs.w	8930 <__gethex+0x45c>
    858c:	2700      	movs	r7, #0
    858e:	f8cd 900c 	str.w	r9, [sp, #12]
    8592:	499c      	ldr	r1, [pc, #624]	; (8804 <__gethex+0x330>)
    8594:	46a1      	mov	r9, r4
    8596:	463c      	mov	r4, r7
    8598:	e00c      	b.n	85b4 <__gethex+0xe0>
    859a:	2f20      	cmp	r7, #32
    859c:	d019      	beq.n	85d2 <__gethex+0xfe>
    859e:	4638      	mov	r0, r7
    85a0:	3704      	adds	r7, #4
    85a2:	782a      	ldrb	r2, [r5, #0]
    85a4:	f818 2002 	ldrb.w	r2, [r8, r2]
    85a8:	f002 020f 	and.w	r2, r2, #15
    85ac:	4082      	lsls	r2, r0
    85ae:	4314      	orrs	r4, r2
    85b0:	454d      	cmp	r5, r9
    85b2:	d047      	beq.n	8644 <__gethex+0x170>
    85b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
    85b8:	2a2e      	cmp	r2, #46	; 0x2e
    85ba:	d1ee      	bne.n	859a <__gethex+0xc6>
    85bc:	454d      	cmp	r5, r9
    85be:	d3ec      	bcc.n	859a <__gethex+0xc6>
    85c0:	2201      	movs	r2, #1
    85c2:	4628      	mov	r0, r5
    85c4:	f7ff f81c 	bl	7600 <strncmp>
    85c8:	498e      	ldr	r1, [pc, #568]	; (8804 <__gethex+0x330>)
    85ca:	2800      	cmp	r0, #0
    85cc:	d0f0      	beq.n	85b0 <__gethex+0xdc>
    85ce:	2f20      	cmp	r7, #32
    85d0:	d1e5      	bne.n	859e <__gethex+0xca>
    85d2:	2000      	movs	r0, #0
    85d4:	f846 4b04 	str.w	r4, [r6], #4
    85d8:	2704      	movs	r7, #4
    85da:	4604      	mov	r4, r0
    85dc:	e7e1      	b.n	85a2 <__gethex+0xce>
    85de:	2d00      	cmp	r5, #0
    85e0:	f000 8142 	beq.w	8868 <__gethex+0x394>
    85e4:	7832      	ldrb	r2, [r6, #0]
    85e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    85ea:	1bad      	subs	r5, r5, r6
    85ec:	2a50      	cmp	r2, #80	; 0x50
    85ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
    85f2:	4635      	mov	r5, r6
    85f4:	d1ae      	bne.n	8554 <__gethex+0x80>
    85f6:	786a      	ldrb	r2, [r5, #1]
    85f8:	2a2b      	cmp	r2, #43	; 0x2b
    85fa:	f000 8125 	beq.w	8848 <__gethex+0x374>
    85fe:	2a2d      	cmp	r2, #45	; 0x2d
    8600:	f000 80a5 	beq.w	874e <__gethex+0x27a>
    8604:	1c6e      	adds	r6, r5, #1
    8606:	2000      	movs	r0, #0
    8608:	f818 1002 	ldrb.w	r1, [r8, r2]
    860c:	1e4a      	subs	r2, r1, #1
    860e:	2a18      	cmp	r2, #24
    8610:	f200 809b 	bhi.w	874a <__gethex+0x276>
    8614:	7872      	ldrb	r2, [r6, #1]
    8616:	f818 2002 	ldrb.w	r2, [r8, r2]
    861a:	3910      	subs	r1, #16
    861c:	3601      	adds	r6, #1
    861e:	2a00      	cmp	r2, #0
    8620:	d15a      	bne.n	86d8 <__gethex+0x204>
    8622:	b100      	cbz	r0, 8626 <__gethex+0x152>
    8624:	4249      	negs	r1, r1
    8626:	4489      	add	r9, r1
    8628:	f8cb 6000 	str.w	r6, [fp]
    862c:	2f00      	cmp	r7, #0
    862e:	d095      	beq.n	855c <__gethex+0x88>
    8630:	2b00      	cmp	r3, #0
    8632:	bf14      	ite	ne
    8634:	2500      	movne	r5, #0
    8636:	2506      	moveq	r5, #6
    8638:	4628      	mov	r0, r5
    863a:	b005      	add	sp, #20
    863c:	ecbd 8b02 	vpop	{d8}
    8640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8644:	f8dd 900c 	ldr.w	r9, [sp, #12]
    8648:	4623      	mov	r3, r4
    864a:	f846 3b04 	str.w	r3, [r6], #4
    864e:	4618      	mov	r0, r3
    8650:	9b01      	ldr	r3, [sp, #4]
    8652:	1af6      	subs	r6, r6, r3
    8654:	10b6      	asrs	r6, r6, #2
    8656:	f8cb 6010 	str.w	r6, [fp, #16]
    865a:	f000 fbe9 	bl	8e30 <__hi0bits>
    865e:	0176      	lsls	r6, r6, #5
    8660:	f8da 4000 	ldr.w	r4, [sl]
    8664:	1a30      	subs	r0, r6, r0
    8666:	42a0      	cmp	r0, r4
    8668:	dc75      	bgt.n	8756 <__gethex+0x282>
    866a:	f2c0 80ef 	blt.w	884c <__gethex+0x378>
    866e:	2700      	movs	r7, #0
    8670:	f8da 3008 	ldr.w	r3, [sl, #8]
    8674:	454b      	cmp	r3, r9
    8676:	f2c0 8151 	blt.w	891c <__gethex+0x448>
    867a:	f8da 3004 	ldr.w	r3, [sl, #4]
    867e:	454b      	cmp	r3, r9
    8680:	dd4a      	ble.n	8718 <__gethex+0x244>
    8682:	eba3 0909 	sub.w	r9, r3, r9
    8686:	454c      	cmp	r4, r9
    8688:	f300 8082 	bgt.w	8790 <__gethex+0x2bc>
    868c:	f8da 200c 	ldr.w	r2, [sl, #12]
    8690:	2a02      	cmp	r2, #2
    8692:	f000 8165 	beq.w	8960 <__gethex+0x48c>
    8696:	2a03      	cmp	r2, #3
    8698:	f000 8181 	beq.w	899e <__gethex+0x4ca>
    869c:	2a01      	cmp	r2, #1
    869e:	f000 816f 	beq.w	8980 <__gethex+0x4ac>
    86a2:	ee18 0a10 	vmov	r0, s16
    86a6:	4659      	mov	r1, fp
    86a8:	f000 fb0e 	bl	8cc8 <_Bfree>
    86ac:	2550      	movs	r5, #80	; 0x50
    86ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    86b0:	2300      	movs	r3, #0
    86b2:	4628      	mov	r0, r5
    86b4:	6013      	str	r3, [r2, #0]
    86b6:	b005      	add	sp, #20
    86b8:	ecbd 8b02 	vpop	{d8}
    86bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    86c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    86c8:	f1a2 0110 	sub.w	r1, r2, #16
    86cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    86d0:	f818 2002 	ldrb.w	r2, [r8, r2]
    86d4:	2a00      	cmp	r2, #0
    86d6:	d0a4      	beq.n	8622 <__gethex+0x14e>
    86d8:	2a19      	cmp	r2, #25
    86da:	ddf1      	ble.n	86c0 <__gethex+0x1ec>
    86dc:	e7a1      	b.n	8622 <__gethex+0x14e>
    86de:	4949      	ldr	r1, [pc, #292]	; (8804 <__gethex+0x330>)
    86e0:	9301      	str	r3, [sp, #4]
    86e2:	2201      	movs	r2, #1
    86e4:	4620      	mov	r0, r4
    86e6:	f7fe ff8b 	bl	7600 <strncmp>
    86ea:	9b01      	ldr	r3, [sp, #4]
    86ec:	2800      	cmp	r0, #0
    86ee:	d16d      	bne.n	87cc <__gethex+0x2f8>
    86f0:	7861      	ldrb	r1, [r4, #1]
    86f2:	f818 2001 	ldrb.w	r2, [r8, r1]
    86f6:	1c65      	adds	r5, r4, #1
    86f8:	2a00      	cmp	r2, #0
    86fa:	d069      	beq.n	87d0 <__gethex+0x2fc>
    86fc:	2930      	cmp	r1, #48	; 0x30
    86fe:	462c      	mov	r4, r5
    8700:	d105      	bne.n	870e <__gethex+0x23a>
    8702:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8706:	2b30      	cmp	r3, #48	; 0x30
    8708:	d0fb      	beq.n	8702 <__gethex+0x22e>
    870a:	f818 2003 	ldrb.w	r2, [r8, r3]
    870e:	fab2 f782 	clz	r7, r2
    8712:	097f      	lsrs	r7, r7, #5
    8714:	2301      	movs	r3, #1
    8716:	e702      	b.n	851e <__gethex+0x4a>
    8718:	2501      	movs	r5, #1
    871a:	b157      	cbz	r7, 8732 <__gethex+0x25e>
    871c:	f8da 300c 	ldr.w	r3, [sl, #12]
    8720:	2b02      	cmp	r3, #2
    8722:	d05d      	beq.n	87e0 <__gethex+0x30c>
    8724:	2b03      	cmp	r3, #3
    8726:	d05f      	beq.n	87e8 <__gethex+0x314>
    8728:	2b01      	cmp	r3, #1
    872a:	f000 8084 	beq.w	8836 <__gethex+0x362>
    872e:	f045 0510 	orr.w	r5, r5, #16
    8732:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8734:	f8c3 b000 	str.w	fp, [r3]
    8738:	9b02      	ldr	r3, [sp, #8]
    873a:	4628      	mov	r0, r5
    873c:	f8c3 9000 	str.w	r9, [r3]
    8740:	b005      	add	sp, #20
    8742:	ecbd 8b02 	vpop	{d8}
    8746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    874a:	462e      	mov	r6, r5
    874c:	e702      	b.n	8554 <__gethex+0x80>
    874e:	2001      	movs	r0, #1
    8750:	78aa      	ldrb	r2, [r5, #2]
    8752:	1cae      	adds	r6, r5, #2
    8754:	e758      	b.n	8608 <__gethex+0x134>
    8756:	1b06      	subs	r6, r0, r4
    8758:	4631      	mov	r1, r6
    875a:	4658      	mov	r0, fp
    875c:	f000 ff96 	bl	968c <__any_on>
    8760:	4607      	mov	r7, r0
    8762:	b178      	cbz	r0, 8784 <__gethex+0x2b0>
    8764:	1e72      	subs	r2, r6, #1
    8766:	1153      	asrs	r3, r2, #5
    8768:	9901      	ldr	r1, [sp, #4]
    876a:	2701      	movs	r7, #1
    876c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    8770:	f002 031f 	and.w	r3, r2, #31
    8774:	fa07 f303 	lsl.w	r3, r7, r3
    8778:	420b      	tst	r3, r1
    877a:	d003      	beq.n	8784 <__gethex+0x2b0>
    877c:	42ba      	cmp	r2, r7
    877e:	f300 80e2 	bgt.w	8946 <__gethex+0x472>
    8782:	2702      	movs	r7, #2
    8784:	4631      	mov	r1, r6
    8786:	4658      	mov	r0, fp
    8788:	44b1      	add	r9, r6
    878a:	f7ff fe51 	bl	8430 <rshift>
    878e:	e76f      	b.n	8670 <__gethex+0x19c>
    8790:	f109 35ff 	add.w	r5, r9, #4294967295
    8794:	2f00      	cmp	r7, #0
    8796:	f040 80ce 	bne.w	8936 <__gethex+0x462>
    879a:	2d00      	cmp	r5, #0
    879c:	f040 80cd 	bne.w	893a <__gethex+0x466>
    87a0:	116b      	asrs	r3, r5, #5
    87a2:	9a01      	ldr	r2, [sp, #4]
    87a4:	f005 051f 	and.w	r5, r5, #31
    87a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    87ac:	2301      	movs	r3, #1
    87ae:	40ab      	lsls	r3, r5
    87b0:	4213      	tst	r3, r2
    87b2:	4649      	mov	r1, r9
    87b4:	4658      	mov	r0, fp
    87b6:	bf18      	it	ne
    87b8:	f047 0702 	orrne.w	r7, r7, #2
    87bc:	eba4 0409 	sub.w	r4, r4, r9
    87c0:	f7ff fe36 	bl	8430 <rshift>
    87c4:	2502      	movs	r5, #2
    87c6:	f8da 9004 	ldr.w	r9, [sl, #4]
    87ca:	e7a6      	b.n	871a <__gethex+0x246>
    87cc:	7821      	ldrb	r1, [r4, #0]
    87ce:	4625      	mov	r5, r4
    87d0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
    87d4:	2950      	cmp	r1, #80	; 0x50
    87d6:	f000 80bf 	beq.w	8958 <__gethex+0x484>
    87da:	f8cb 5000 	str.w	r5, [fp]
    87de:	e727      	b.n	8630 <__gethex+0x15c>
    87e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    87e2:	f1c3 0301 	rsb	r3, r3, #1
    87e6:	9311      	str	r3, [sp, #68]	; 0x44
    87e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    87ea:	2b00      	cmp	r3, #0
    87ec:	d09f      	beq.n	872e <__gethex+0x25a>
    87ee:	f8db 7010 	ldr.w	r7, [fp, #16]
    87f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    87f6:	00ba      	lsls	r2, r7, #2
    87f8:	4643      	mov	r3, r8
    87fa:	9201      	str	r2, [sp, #4]
    87fc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
    8800:	2100      	movs	r1, #0
    8802:	e007      	b.n	8814 <__gethex+0x340>
    8804:	20000a78 	.word	0x20000a78
    8808:	20000784 	.word	0x20000784
    880c:	4298      	cmp	r0, r3
    880e:	f843 1c04 	str.w	r1, [r3, #-4]
    8812:	d93f      	bls.n	8894 <__gethex+0x3c0>
    8814:	461e      	mov	r6, r3
    8816:	f853 2b04 	ldr.w	r2, [r3], #4
    881a:	f1b2 3fff 	cmp.w	r2, #4294967295
    881e:	d0f5      	beq.n	880c <__gethex+0x338>
    8820:	3201      	adds	r2, #1
    8822:	2d02      	cmp	r5, #2
    8824:	6032      	str	r2, [r6, #0]
    8826:	f000 80bf 	beq.w	89a8 <__gethex+0x4d4>
    882a:	f014 041f 	ands.w	r4, r4, #31
    882e:	f040 80e7 	bne.w	8a00 <__gethex+0x52c>
    8832:	2521      	movs	r5, #33	; 0x21
    8834:	e77d      	b.n	8732 <__gethex+0x25e>
    8836:	07ba      	lsls	r2, r7, #30
    8838:	f57f af79 	bpl.w	872e <__gethex+0x25a>
    883c:	9b01      	ldr	r3, [sp, #4]
    883e:	681b      	ldr	r3, [r3, #0]
    8840:	431f      	orrs	r7, r3
    8842:	07fb      	lsls	r3, r7, #31
    8844:	d4d3      	bmi.n	87ee <__gethex+0x31a>
    8846:	e772      	b.n	872e <__gethex+0x25a>
    8848:	2000      	movs	r0, #0
    884a:	e781      	b.n	8750 <__gethex+0x27c>
    884c:	1a22      	subs	r2, r4, r0
    884e:	4659      	mov	r1, fp
    8850:	ee18 0a10 	vmov	r0, s16
    8854:	eba9 0902 	sub.w	r9, r9, r2
    8858:	f000 fc76 	bl	9148 <__lshift>
    885c:	f100 0314 	add.w	r3, r0, #20
    8860:	4683      	mov	fp, r0
    8862:	9301      	str	r3, [sp, #4]
    8864:	2700      	movs	r7, #0
    8866:	e703      	b.n	8670 <__gethex+0x19c>
    8868:	7872      	ldrb	r2, [r6, #1]
    886a:	f818 0002 	ldrb.w	r0, [r8, r2]
    886e:	1c71      	adds	r1, r6, #1
    8870:	2800      	cmp	r0, #0
    8872:	f000 80a0 	beq.w	89b6 <__gethex+0x4e2>
    8876:	460d      	mov	r5, r1
    8878:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    887c:	f818 0002 	ldrb.w	r0, [r8, r2]
    8880:	2800      	cmp	r0, #0
    8882:	d1f8      	bne.n	8876 <__gethex+0x3a2>
    8884:	1b75      	subs	r5, r6, r5
    8886:	ea4f 0985 	mov.w	r9, r5, lsl #2
    888a:	460e      	mov	r6, r1
    888c:	e65d      	b.n	854a <__gethex+0x76>
    888e:	3402      	adds	r4, #2
    8890:	2300      	movs	r3, #0
    8892:	e638      	b.n	8506 <__gethex+0x32>
    8894:	f8db 3008 	ldr.w	r3, [fp, #8]
    8898:	429f      	cmp	r7, r3
    889a:	f280 808e 	bge.w	89ba <__gethex+0x4e6>
    889e:	463b      	mov	r3, r7
    88a0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
    88a4:	2101      	movs	r1, #1
    88a6:	3301      	adds	r3, #1
    88a8:	2d02      	cmp	r5, #2
    88aa:	f8cb 3010 	str.w	r3, [fp, #16]
    88ae:	6151      	str	r1, [r2, #20]
    88b0:	d07a      	beq.n	89a8 <__gethex+0x4d4>
    88b2:	429f      	cmp	r7, r3
    88b4:	dab9      	bge.n	882a <__gethex+0x356>
    88b6:	2b00      	cmp	r3, #0
    88b8:	f340 809b 	ble.w	89f2 <__gethex+0x51e>
    88bc:	f8db 2014 	ldr.w	r2, [fp, #20]
    88c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    88c4:	f10b 0018 	add.w	r0, fp, #24
    88c8:	4283      	cmp	r3, r0
    88ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
    88ce:	f240 80b1 	bls.w	8a34 <__gethex+0x560>
    88d2:	4644      	mov	r4, r8
    88d4:	6801      	ldr	r1, [r0, #0]
    88d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
    88da:	f844 2b04 	str.w	r2, [r4], #4
    88de:	f850 2b04 	ldr.w	r2, [r0], #4
    88e2:	4283      	cmp	r3, r0
    88e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    88e8:	d8f4      	bhi.n	88d4 <__gethex+0x400>
    88ea:	eba3 030b 	sub.w	r3, r3, fp
    88ee:	3b19      	subs	r3, #25
    88f0:	089b      	lsrs	r3, r3, #2
    88f2:	3301      	adds	r3, #1
    88f4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
    88f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    88fc:	2a00      	cmp	r2, #0
    88fe:	f040 809d 	bne.w	8a3c <__gethex+0x568>
    8902:	eba3 0208 	sub.w	r2, r3, r8
    8906:	1092      	asrs	r2, r2, #2
    8908:	4543      	cmp	r3, r8
    890a:	f8cb 2010 	str.w	r2, [fp, #16]
    890e:	d073      	beq.n	89f8 <__gethex+0x524>
    8910:	f8da 3008 	ldr.w	r3, [sl, #8]
    8914:	f109 0901 	add.w	r9, r9, #1
    8918:	454b      	cmp	r3, r9
    891a:	da8a      	bge.n	8832 <__gethex+0x35e>
    891c:	ee18 0a10 	vmov	r0, s16
    8920:	4659      	mov	r1, fp
    8922:	f000 f9d1 	bl	8cc8 <_Bfree>
    8926:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8928:	2300      	movs	r3, #0
    892a:	6013      	str	r3, [r2, #0]
    892c:	25a3      	movs	r5, #163	; 0xa3
    892e:	e683      	b.n	8638 <__gethex+0x164>
    8930:	9e01      	ldr	r6, [sp, #4]
    8932:	2300      	movs	r3, #0
    8934:	e689      	b.n	864a <__gethex+0x176>
    8936:	2701      	movs	r7, #1
    8938:	e732      	b.n	87a0 <__gethex+0x2cc>
    893a:	4629      	mov	r1, r5
    893c:	4658      	mov	r0, fp
    893e:	f000 fea5 	bl	968c <__any_on>
    8942:	4607      	mov	r7, r0
    8944:	e72c      	b.n	87a0 <__gethex+0x2cc>
    8946:	1eb1      	subs	r1, r6, #2
    8948:	4658      	mov	r0, fp
    894a:	f000 fe9f 	bl	968c <__any_on>
    894e:	2800      	cmp	r0, #0
    8950:	f43f af17 	beq.w	8782 <__gethex+0x2ae>
    8954:	2703      	movs	r7, #3
    8956:	e715      	b.n	8784 <__gethex+0x2b0>
    8958:	f04f 0900 	mov.w	r9, #0
    895c:	2701      	movs	r7, #1
    895e:	e64a      	b.n	85f6 <__gethex+0x122>
    8960:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8962:	2a00      	cmp	r2, #0
    8964:	f47f ae9d 	bne.w	86a2 <__gethex+0x1ce>
    8968:	9902      	ldr	r1, [sp, #8]
    896a:	600b      	str	r3, [r1, #0]
    896c:	9b01      	ldr	r3, [sp, #4]
    896e:	2201      	movs	r2, #1
    8970:	f8cb 2010 	str.w	r2, [fp, #16]
    8974:	601a      	str	r2, [r3, #0]
    8976:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8978:	2562      	movs	r5, #98	; 0x62
    897a:	f8c3 b000 	str.w	fp, [r3]
    897e:	e65b      	b.n	8638 <__gethex+0x164>
    8980:	454c      	cmp	r4, r9
    8982:	f47f ae8e 	bne.w	86a2 <__gethex+0x1ce>
    8986:	2c01      	cmp	r4, #1
    8988:	d0ee      	beq.n	8968 <__gethex+0x494>
    898a:	1e61      	subs	r1, r4, #1
    898c:	4658      	mov	r0, fp
    898e:	f000 fe7d 	bl	968c <__any_on>
    8992:	2800      	cmp	r0, #0
    8994:	f43f ae85 	beq.w	86a2 <__gethex+0x1ce>
    8998:	f8da 3004 	ldr.w	r3, [sl, #4]
    899c:	e7e4      	b.n	8968 <__gethex+0x494>
    899e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    89a0:	2a00      	cmp	r2, #0
    89a2:	f43f ae7e 	beq.w	86a2 <__gethex+0x1ce>
    89a6:	e7df      	b.n	8968 <__gethex+0x494>
    89a8:	f8da 3000 	ldr.w	r3, [sl]
    89ac:	3b01      	subs	r3, #1
    89ae:	42a3      	cmp	r3, r4
    89b0:	d034      	beq.n	8a1c <__gethex+0x548>
    89b2:	2522      	movs	r5, #34	; 0x22
    89b4:	e6bd      	b.n	8732 <__gethex+0x25e>
    89b6:	460e      	mov	r6, r1
    89b8:	e5c7      	b.n	854a <__gethex+0x76>
    89ba:	f8db 1004 	ldr.w	r1, [fp, #4]
    89be:	ee18 0a10 	vmov	r0, s16
    89c2:	3101      	adds	r1, #1
    89c4:	f000 f95a 	bl	8c7c <_Balloc>
    89c8:	4606      	mov	r6, r0
    89ca:	b3c8      	cbz	r0, 8a40 <__gethex+0x56c>
    89cc:	f8db 3010 	ldr.w	r3, [fp, #16]
    89d0:	3302      	adds	r3, #2
    89d2:	009a      	lsls	r2, r3, #2
    89d4:	f10b 010c 	add.w	r1, fp, #12
    89d8:	300c      	adds	r0, #12
    89da:	f7fb f88d 	bl	3af8 <memcpy>
    89de:	4659      	mov	r1, fp
    89e0:	ee18 0a10 	vmov	r0, s16
    89e4:	f000 f970 	bl	8cc8 <_Bfree>
    89e8:	f106 0814 	add.w	r8, r6, #20
    89ec:	6933      	ldr	r3, [r6, #16]
    89ee:	46b3      	mov	fp, r6
    89f0:	e756      	b.n	88a0 <__gethex+0x3cc>
    89f2:	2300      	movs	r3, #0
    89f4:	f8cb 3010 	str.w	r3, [fp, #16]
    89f8:	2300      	movs	r3, #0
    89fa:	f8cb 3014 	str.w	r3, [fp, #20]
    89fe:	e787      	b.n	8910 <__gethex+0x43c>
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	4443      	add	r3, r8
    8a04:	f1c4 0420 	rsb	r4, r4, #32
    8a08:	f853 0c04 	ldr.w	r0, [r3, #-4]
    8a0c:	f000 fa10 	bl	8e30 <__hi0bits>
    8a10:	42a0      	cmp	r0, r4
    8a12:	f6bf af0e 	bge.w	8832 <__gethex+0x35e>
    8a16:	f8db 3010 	ldr.w	r3, [fp, #16]
    8a1a:	e74c      	b.n	88b6 <__gethex+0x3e2>
    8a1c:	1163      	asrs	r3, r4, #5
    8a1e:	f004 041f 	and.w	r4, r4, #31
    8a22:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
    8a26:	2301      	movs	r3, #1
    8a28:	40a3      	lsls	r3, r4
    8a2a:	4213      	tst	r3, r2
    8a2c:	bf0c      	ite	eq
    8a2e:	2522      	moveq	r5, #34	; 0x22
    8a30:	2521      	movne	r5, #33	; 0x21
    8a32:	e67e      	b.n	8732 <__gethex+0x25e>
    8a34:	f8c8 2000 	str.w	r2, [r8]
    8a38:	4643      	mov	r3, r8
    8a3a:	b16a      	cbz	r2, 8a58 <__gethex+0x584>
    8a3c:	3304      	adds	r3, #4
    8a3e:	e760      	b.n	8902 <__gethex+0x42e>
    8a40:	4b07      	ldr	r3, [pc, #28]	; (8a60 <__gethex+0x58c>)
    8a42:	4808      	ldr	r0, [pc, #32]	; (8a64 <__gethex+0x590>)
    8a44:	4632      	mov	r2, r6
    8a46:	2184      	movs	r1, #132	; 0x84
    8a48:	f001 f872 	bl	9b30 <__assert_func>
    8a4c:	4b04      	ldr	r3, [pc, #16]	; (8a60 <__gethex+0x58c>)
    8a4e:	4805      	ldr	r0, [pc, #20]	; (8a64 <__gethex+0x590>)
    8a50:	465a      	mov	r2, fp
    8a52:	21e4      	movs	r1, #228	; 0xe4
    8a54:	f001 f86c 	bl	9b30 <__assert_func>
    8a58:	f8cb 2010 	str.w	r2, [fp, #16]
    8a5c:	e7cc      	b.n	89f8 <__gethex+0x524>
    8a5e:	bf00      	nop
    8a60:	2000070c 	.word	0x2000070c
    8a64:	20000720 	.word	0x20000720

00008a68 <__match>:
    8a68:	b410      	push	{r4}
    8a6a:	6804      	ldr	r4, [r0, #0]
    8a6c:	e009      	b.n	8a82 <__match+0x1a>
    8a6e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8a72:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
    8a76:	f1bc 0f19 	cmp.w	ip, #25
    8a7a:	bf98      	it	ls
    8a7c:	3320      	addls	r3, #32
    8a7e:	4293      	cmp	r3, r2
    8a80:	d109      	bne.n	8a96 <__match+0x2e>
    8a82:	f811 2b01 	ldrb.w	r2, [r1], #1
    8a86:	2a00      	cmp	r2, #0
    8a88:	d1f1      	bne.n	8a6e <__match+0x6>
    8a8a:	3401      	adds	r4, #1
    8a8c:	6004      	str	r4, [r0, #0]
    8a8e:	2001      	movs	r0, #1
    8a90:	f85d 4b04 	ldr.w	r4, [sp], #4
    8a94:	4770      	bx	lr
    8a96:	2000      	movs	r0, #0
    8a98:	f85d 4b04 	ldr.w	r4, [sp], #4
    8a9c:	4770      	bx	lr
    8a9e:	bf00      	nop

00008aa0 <__hexnan>:
    8aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8aa4:	6809      	ldr	r1, [r1, #0]
    8aa6:	b085      	sub	sp, #20
    8aa8:	114b      	asrs	r3, r1, #5
    8aaa:	f011 011f 	ands.w	r1, r1, #31
    8aae:	9002      	str	r0, [sp, #8]
    8ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8ab4:	9103      	str	r1, [sp, #12]
    8ab6:	f040 808f 	bne.w	8bd8 <__hexnan+0x138>
    8aba:	1f1d      	subs	r5, r3, #4
    8abc:	9301      	str	r3, [sp, #4]
    8abe:	9b02      	ldr	r3, [sp, #8]
    8ac0:	9901      	ldr	r1, [sp, #4]
    8ac2:	681c      	ldr	r4, [r3, #0]
    8ac4:	2300      	movs	r3, #0
    8ac6:	f841 3c04 	str.w	r3, [r1, #-4]
    8aca:	7861      	ldrb	r1, [r4, #1]
    8acc:	3401      	adds	r4, #1
    8ace:	2900      	cmp	r1, #0
    8ad0:	f000 8098 	beq.w	8c04 <__hexnan+0x164>
    8ad4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8c4c <__hexnan+0x1ac>
    8ad8:	46a8      	mov	r8, r5
    8ada:	46ac      	mov	ip, r5
    8adc:	469a      	mov	sl, r3
    8ade:	461e      	mov	r6, r3
    8ae0:	e00e      	b.n	8b00 <__hexnan+0x60>
    8ae2:	2920      	cmp	r1, #32
    8ae4:	f200 808c 	bhi.w	8c00 <__hexnan+0x160>
    8ae8:	4556      	cmp	r6, sl
    8aea:	dd06      	ble.n	8afa <__hexnan+0x5a>
    8aec:	45c4      	cmp	ip, r8
    8aee:	d201      	bcs.n	8af4 <__hexnan+0x54>
    8af0:	2b07      	cmp	r3, #7
    8af2:	dd5b      	ble.n	8bac <__hexnan+0x10c>
    8af4:	4562      	cmp	r2, ip
    8af6:	d351      	bcc.n	8b9c <__hexnan+0xfc>
    8af8:	2308      	movs	r3, #8
    8afa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8afe:	b1a1      	cbz	r1, 8b2a <__hexnan+0x8a>
    8b00:	f819 0001 	ldrb.w	r0, [r9, r1]
    8b04:	2800      	cmp	r0, #0
    8b06:	d0ec      	beq.n	8ae2 <__hexnan+0x42>
    8b08:	3301      	adds	r3, #1
    8b0a:	2b08      	cmp	r3, #8
    8b0c:	f106 0601 	add.w	r6, r6, #1
    8b10:	dc3a      	bgt.n	8b88 <__hexnan+0xe8>
    8b12:	f8dc 1000 	ldr.w	r1, [ip]
    8b16:	0109      	lsls	r1, r1, #4
    8b18:	f000 000f 	and.w	r0, r0, #15
    8b1c:	4308      	orrs	r0, r1
    8b1e:	f8cc 0000 	str.w	r0, [ip]
    8b22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8b26:	2900      	cmp	r1, #0
    8b28:	d1ea      	bne.n	8b00 <__hexnan+0x60>
    8b2a:	2e00      	cmp	r6, #0
    8b2c:	d06a      	beq.n	8c04 <__hexnan+0x164>
    8b2e:	45c4      	cmp	ip, r8
    8b30:	d201      	bcs.n	8b36 <__hexnan+0x96>
    8b32:	2b07      	cmp	r3, #7
    8b34:	dd74      	ble.n	8c20 <__hexnan+0x180>
    8b36:	4562      	cmp	r2, ip
    8b38:	d252      	bcs.n	8be0 <__hexnan+0x140>
    8b3a:	1f11      	subs	r1, r2, #4
    8b3c:	4663      	mov	r3, ip
    8b3e:	f853 0b04 	ldr.w	r0, [r3], #4
    8b42:	f841 0f04 	str.w	r0, [r1, #4]!
    8b46:	42ab      	cmp	r3, r5
    8b48:	d9f9      	bls.n	8b3e <__hexnan+0x9e>
    8b4a:	eba5 030c 	sub.w	r3, r5, ip
    8b4e:	f023 0303 	bic.w	r3, r3, #3
    8b52:	1c69      	adds	r1, r5, #1
    8b54:	3304      	adds	r3, #4
    8b56:	f10c 0c01 	add.w	ip, ip, #1
    8b5a:	4561      	cmp	r1, ip
    8b5c:	bf38      	it	cc
    8b5e:	2304      	movcc	r3, #4
    8b60:	4413      	add	r3, r2
    8b62:	2100      	movs	r1, #0
    8b64:	f843 1b04 	str.w	r1, [r3], #4
    8b68:	42ab      	cmp	r3, r5
    8b6a:	d9fb      	bls.n	8b64 <__hexnan+0xc4>
    8b6c:	9b01      	ldr	r3, [sp, #4]
    8b6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    8b72:	b92b      	cbnz	r3, 8b80 <__hexnan+0xe0>
    8b74:	42aa      	cmp	r2, r5
    8b76:	d049      	beq.n	8c0c <__hexnan+0x16c>
    8b78:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    8b7c:	2b00      	cmp	r3, #0
    8b7e:	d0f9      	beq.n	8b74 <__hexnan+0xd4>
    8b80:	2005      	movs	r0, #5
    8b82:	b005      	add	sp, #20
    8b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b88:	4562      	cmp	r2, ip
    8b8a:	d2b6      	bcs.n	8afa <__hexnan+0x5a>
    8b8c:	2300      	movs	r3, #0
    8b8e:	f84c 3c04 	str.w	r3, [ip, #-4]
    8b92:	4619      	mov	r1, r3
    8b94:	f1ac 0c04 	sub.w	ip, ip, #4
    8b98:	2301      	movs	r3, #1
    8b9a:	e7bd      	b.n	8b18 <__hexnan+0x78>
    8b9c:	2300      	movs	r3, #0
    8b9e:	f1ac 0804 	sub.w	r8, ip, #4
    8ba2:	f84c 3c04 	str.w	r3, [ip, #-4]
    8ba6:	46b2      	mov	sl, r6
    8ba8:	46c4      	mov	ip, r8
    8baa:	e7a6      	b.n	8afa <__hexnan+0x5a>
    8bac:	f1c3 0108 	rsb	r1, r3, #8
    8bb0:	f8dc 3000 	ldr.w	r3, [ip]
    8bb4:	0089      	lsls	r1, r1, #2
    8bb6:	f1c1 0e20 	rsb	lr, r1, #32
    8bba:	4660      	mov	r0, ip
    8bbc:	469b      	mov	fp, r3
    8bbe:	6847      	ldr	r7, [r0, #4]
    8bc0:	fa07 f30e 	lsl.w	r3, r7, lr
    8bc4:	ea43 030b 	orr.w	r3, r3, fp
    8bc8:	fa27 fb01 	lsr.w	fp, r7, r1
    8bcc:	6003      	str	r3, [r0, #0]
    8bce:	f840 bf04 	str.w	fp, [r0, #4]!
    8bd2:	4540      	cmp	r0, r8
    8bd4:	d3f3      	bcc.n	8bbe <__hexnan+0x11e>
    8bd6:	e78d      	b.n	8af4 <__hexnan+0x54>
    8bd8:	1d19      	adds	r1, r3, #4
    8bda:	9101      	str	r1, [sp, #4]
    8bdc:	461d      	mov	r5, r3
    8bde:	e76e      	b.n	8abe <__hexnan+0x1e>
    8be0:	9b03      	ldr	r3, [sp, #12]
    8be2:	2b00      	cmp	r3, #0
    8be4:	d0c2      	beq.n	8b6c <__hexnan+0xcc>
    8be6:	9b03      	ldr	r3, [sp, #12]
    8be8:	9801      	ldr	r0, [sp, #4]
    8bea:	f1c3 0120 	rsb	r1, r3, #32
    8bee:	f04f 33ff 	mov.w	r3, #4294967295
    8bf2:	40cb      	lsrs	r3, r1
    8bf4:	f850 1c04 	ldr.w	r1, [r0, #-4]
    8bf8:	400b      	ands	r3, r1
    8bfa:	f840 3c04 	str.w	r3, [r0, #-4]
    8bfe:	e7b8      	b.n	8b72 <__hexnan+0xd2>
    8c00:	2929      	cmp	r1, #41	; 0x29
    8c02:	d009      	beq.n	8c18 <__hexnan+0x178>
    8c04:	2004      	movs	r0, #4
    8c06:	b005      	add	sp, #20
    8c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c0c:	2301      	movs	r3, #1
    8c0e:	2005      	movs	r0, #5
    8c10:	602b      	str	r3, [r5, #0]
    8c12:	b005      	add	sp, #20
    8c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c18:	9902      	ldr	r1, [sp, #8]
    8c1a:	3401      	adds	r4, #1
    8c1c:	600c      	str	r4, [r1, #0]
    8c1e:	e784      	b.n	8b2a <__hexnan+0x8a>
    8c20:	f8dc 1000 	ldr.w	r1, [ip]
    8c24:	f1c3 0308 	rsb	r3, r3, #8
    8c28:	009b      	lsls	r3, r3, #2
    8c2a:	f1c3 0720 	rsb	r7, r3, #32
    8c2e:	4664      	mov	r4, ip
    8c30:	4608      	mov	r0, r1
    8c32:	6866      	ldr	r6, [r4, #4]
    8c34:	fa06 f107 	lsl.w	r1, r6, r7
    8c38:	4301      	orrs	r1, r0
    8c3a:	fa26 f003 	lsr.w	r0, r6, r3
    8c3e:	6021      	str	r1, [r4, #0]
    8c40:	f844 0f04 	str.w	r0, [r4, #4]!
    8c44:	4544      	cmp	r4, r8
    8c46:	d3f4      	bcc.n	8c32 <__hexnan+0x192>
    8c48:	e775      	b.n	8b36 <__hexnan+0x96>
    8c4a:	bf00      	nop
    8c4c:	20000784 	.word	0x20000784

00008c50 <__ascii_mbtowc>:
    8c50:	b082      	sub	sp, #8
    8c52:	b149      	cbz	r1, 8c68 <__ascii_mbtowc+0x18>
    8c54:	b15a      	cbz	r2, 8c6e <__ascii_mbtowc+0x1e>
    8c56:	b16b      	cbz	r3, 8c74 <__ascii_mbtowc+0x24>
    8c58:	7813      	ldrb	r3, [r2, #0]
    8c5a:	600b      	str	r3, [r1, #0]
    8c5c:	7812      	ldrb	r2, [r2, #0]
    8c5e:	1e10      	subs	r0, r2, #0
    8c60:	bf18      	it	ne
    8c62:	2001      	movne	r0, #1
    8c64:	b002      	add	sp, #8
    8c66:	4770      	bx	lr
    8c68:	a901      	add	r1, sp, #4
    8c6a:	2a00      	cmp	r2, #0
    8c6c:	d1f3      	bne.n	8c56 <__ascii_mbtowc+0x6>
    8c6e:	4610      	mov	r0, r2
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr
    8c74:	f06f 0001 	mvn.w	r0, #1
    8c78:	e7f4      	b.n	8c64 <__ascii_mbtowc+0x14>
    8c7a:	bf00      	nop

00008c7c <_Balloc>:
    8c7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8c7e:	b570      	push	{r4, r5, r6, lr}
    8c80:	4605      	mov	r5, r0
    8c82:	460c      	mov	r4, r1
    8c84:	b14b      	cbz	r3, 8c9a <_Balloc+0x1e>
    8c86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    8c8a:	b180      	cbz	r0, 8cae <_Balloc+0x32>
    8c8c:	6802      	ldr	r2, [r0, #0]
    8c8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    8c92:	2300      	movs	r3, #0
    8c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
    8c98:	bd70      	pop	{r4, r5, r6, pc}
    8c9a:	2221      	movs	r2, #33	; 0x21
    8c9c:	2104      	movs	r1, #4
    8c9e:	f000 ff67 	bl	9b70 <_calloc_r>
    8ca2:	4603      	mov	r3, r0
    8ca4:	6468      	str	r0, [r5, #68]	; 0x44
    8ca6:	2800      	cmp	r0, #0
    8ca8:	d1ed      	bne.n	8c86 <_Balloc+0xa>
    8caa:	2000      	movs	r0, #0
    8cac:	bd70      	pop	{r4, r5, r6, pc}
    8cae:	2101      	movs	r1, #1
    8cb0:	fa01 f604 	lsl.w	r6, r1, r4
    8cb4:	1d72      	adds	r2, r6, #5
    8cb6:	0092      	lsls	r2, r2, #2
    8cb8:	4628      	mov	r0, r5
    8cba:	f000 ff59 	bl	9b70 <_calloc_r>
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d0f3      	beq.n	8caa <_Balloc+0x2e>
    8cc2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    8cc6:	e7e4      	b.n	8c92 <_Balloc+0x16>

00008cc8 <_Bfree>:
    8cc8:	b131      	cbz	r1, 8cd8 <_Bfree+0x10>
    8cca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8ccc:	684a      	ldr	r2, [r1, #4]
    8cce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    8cd2:	6008      	str	r0, [r1, #0]
    8cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    8cd8:	4770      	bx	lr
    8cda:	bf00      	nop

00008cdc <__multadd>:
    8cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ce0:	690e      	ldr	r6, [r1, #16]
    8ce2:	4680      	mov	r8, r0
    8ce4:	460f      	mov	r7, r1
    8ce6:	461d      	mov	r5, r3
    8ce8:	f101 0e14 	add.w	lr, r1, #20
    8cec:	2000      	movs	r0, #0
    8cee:	f8de 1000 	ldr.w	r1, [lr]
    8cf2:	b28c      	uxth	r4, r1
    8cf4:	fb02 5304 	mla	r3, r2, r4, r5
    8cf8:	0c09      	lsrs	r1, r1, #16
    8cfa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    8cfe:	fb02 cc01 	mla	ip, r2, r1, ip
    8d02:	3001      	adds	r0, #1
    8d04:	b29c      	uxth	r4, r3
    8d06:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    8d0a:	4286      	cmp	r6, r0
    8d0c:	f84e 4b04 	str.w	r4, [lr], #4
    8d10:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8d14:	dceb      	bgt.n	8cee <__multadd+0x12>
    8d16:	b13d      	cbz	r5, 8d28 <__multadd+0x4c>
    8d18:	68bb      	ldr	r3, [r7, #8]
    8d1a:	42b3      	cmp	r3, r6
    8d1c:	dd07      	ble.n	8d2e <__multadd+0x52>
    8d1e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8d22:	3601      	adds	r6, #1
    8d24:	615d      	str	r5, [r3, #20]
    8d26:	613e      	str	r6, [r7, #16]
    8d28:	4638      	mov	r0, r7
    8d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d2e:	6879      	ldr	r1, [r7, #4]
    8d30:	4640      	mov	r0, r8
    8d32:	3101      	adds	r1, #1
    8d34:	f7ff ffa2 	bl	8c7c <_Balloc>
    8d38:	4604      	mov	r4, r0
    8d3a:	b1b0      	cbz	r0, 8d6a <__multadd+0x8e>
    8d3c:	693a      	ldr	r2, [r7, #16]
    8d3e:	3202      	adds	r2, #2
    8d40:	f107 010c 	add.w	r1, r7, #12
    8d44:	0092      	lsls	r2, r2, #2
    8d46:	300c      	adds	r0, #12
    8d48:	f7fa fed6 	bl	3af8 <memcpy>
    8d4c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    8d50:	687a      	ldr	r2, [r7, #4]
    8d52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8d56:	6039      	str	r1, [r7, #0]
    8d58:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    8d5c:	4627      	mov	r7, r4
    8d5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    8d62:	3601      	adds	r6, #1
    8d64:	615d      	str	r5, [r3, #20]
    8d66:	613e      	str	r6, [r7, #16]
    8d68:	e7de      	b.n	8d28 <__multadd+0x4c>
    8d6a:	4b03      	ldr	r3, [pc, #12]	; (8d78 <__multadd+0x9c>)
    8d6c:	4803      	ldr	r0, [pc, #12]	; (8d7c <__multadd+0xa0>)
    8d6e:	4622      	mov	r2, r4
    8d70:	21ba      	movs	r1, #186	; 0xba
    8d72:	f000 fedd 	bl	9b30 <__assert_func>
    8d76:	bf00      	nop
    8d78:	2000070c 	.word	0x2000070c
    8d7c:	20000884 	.word	0x20000884

00008d80 <__s2b>:
    8d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d84:	4617      	mov	r7, r2
    8d86:	4a27      	ldr	r2, [pc, #156]	; (8e24 <__s2b+0xa4>)
    8d88:	461e      	mov	r6, r3
    8d8a:	3308      	adds	r3, #8
    8d8c:	460c      	mov	r4, r1
    8d8e:	2e09      	cmp	r6, #9
    8d90:	fb82 1203 	smull	r1, r2, r2, r3
    8d94:	ea4f 73e3 	mov.w	r3, r3, asr #31
    8d98:	4605      	mov	r5, r0
    8d9a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    8d9e:	dd39      	ble.n	8e14 <__s2b+0x94>
    8da0:	f04f 0c01 	mov.w	ip, #1
    8da4:	2100      	movs	r1, #0
    8da6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    8daa:	4563      	cmp	r3, ip
    8dac:	f101 0101 	add.w	r1, r1, #1
    8db0:	dcf9      	bgt.n	8da6 <__s2b+0x26>
    8db2:	4628      	mov	r0, r5
    8db4:	f7ff ff62 	bl	8c7c <_Balloc>
    8db8:	4601      	mov	r1, r0
    8dba:	b368      	cbz	r0, 8e18 <__s2b+0x98>
    8dbc:	9b08      	ldr	r3, [sp, #32]
    8dbe:	6143      	str	r3, [r0, #20]
    8dc0:	2f09      	cmp	r7, #9
    8dc2:	f04f 0301 	mov.w	r3, #1
    8dc6:	6103      	str	r3, [r0, #16]
    8dc8:	dc12      	bgt.n	8df0 <__s2b+0x70>
    8dca:	340a      	adds	r4, #10
    8dcc:	2709      	movs	r7, #9
    8dce:	42be      	cmp	r6, r7
    8dd0:	dd0b      	ble.n	8dea <__s2b+0x6a>
    8dd2:	1bf2      	subs	r2, r6, r7
    8dd4:	18a6      	adds	r6, r4, r2
    8dd6:	f814 3b01 	ldrb.w	r3, [r4], #1
    8dda:	220a      	movs	r2, #10
    8ddc:	3b30      	subs	r3, #48	; 0x30
    8dde:	4628      	mov	r0, r5
    8de0:	f7ff ff7c 	bl	8cdc <__multadd>
    8de4:	42a6      	cmp	r6, r4
    8de6:	4601      	mov	r1, r0
    8de8:	d1f5      	bne.n	8dd6 <__s2b+0x56>
    8dea:	4608      	mov	r0, r1
    8dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8df0:	f104 0909 	add.w	r9, r4, #9
    8df4:	46c8      	mov	r8, r9
    8df6:	443c      	add	r4, r7
    8df8:	f818 3b01 	ldrb.w	r3, [r8], #1
    8dfc:	220a      	movs	r2, #10
    8dfe:	3b30      	subs	r3, #48	; 0x30
    8e00:	4628      	mov	r0, r5
    8e02:	f7ff ff6b 	bl	8cdc <__multadd>
    8e06:	45a0      	cmp	r8, r4
    8e08:	4601      	mov	r1, r0
    8e0a:	d1f5      	bne.n	8df8 <__s2b+0x78>
    8e0c:	f1a7 0408 	sub.w	r4, r7, #8
    8e10:	444c      	add	r4, r9
    8e12:	e7dc      	b.n	8dce <__s2b+0x4e>
    8e14:	2100      	movs	r1, #0
    8e16:	e7cc      	b.n	8db2 <__s2b+0x32>
    8e18:	460a      	mov	r2, r1
    8e1a:	4b03      	ldr	r3, [pc, #12]	; (8e28 <__s2b+0xa8>)
    8e1c:	4803      	ldr	r0, [pc, #12]	; (8e2c <__s2b+0xac>)
    8e1e:	21d3      	movs	r1, #211	; 0xd3
    8e20:	f000 fe86 	bl	9b30 <__assert_func>
    8e24:	38e38e39 	.word	0x38e38e39
    8e28:	2000070c 	.word	0x2000070c
    8e2c:	20000884 	.word	0x20000884

00008e30 <__hi0bits>:
    8e30:	0c03      	lsrs	r3, r0, #16
    8e32:	041b      	lsls	r3, r3, #16
    8e34:	b9d3      	cbnz	r3, 8e6c <__hi0bits+0x3c>
    8e36:	0400      	lsls	r0, r0, #16
    8e38:	2310      	movs	r3, #16
    8e3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    8e3e:	bf04      	itt	eq
    8e40:	0200      	lsleq	r0, r0, #8
    8e42:	3308      	addeq	r3, #8
    8e44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    8e48:	bf04      	itt	eq
    8e4a:	0100      	lsleq	r0, r0, #4
    8e4c:	3304      	addeq	r3, #4
    8e4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    8e52:	bf04      	itt	eq
    8e54:	0080      	lsleq	r0, r0, #2
    8e56:	3302      	addeq	r3, #2
    8e58:	2800      	cmp	r0, #0
    8e5a:	db05      	blt.n	8e68 <__hi0bits+0x38>
    8e5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    8e60:	f103 0301 	add.w	r3, r3, #1
    8e64:	bf08      	it	eq
    8e66:	2320      	moveq	r3, #32
    8e68:	4618      	mov	r0, r3
    8e6a:	4770      	bx	lr
    8e6c:	2300      	movs	r3, #0
    8e6e:	e7e4      	b.n	8e3a <__hi0bits+0xa>

00008e70 <__lo0bits>:
    8e70:	6803      	ldr	r3, [r0, #0]
    8e72:	f013 0207 	ands.w	r2, r3, #7
    8e76:	d008      	beq.n	8e8a <__lo0bits+0x1a>
    8e78:	07d9      	lsls	r1, r3, #31
    8e7a:	d41f      	bmi.n	8ebc <__lo0bits+0x4c>
    8e7c:	079a      	lsls	r2, r3, #30
    8e7e:	d522      	bpl.n	8ec6 <__lo0bits+0x56>
    8e80:	085b      	lsrs	r3, r3, #1
    8e82:	6003      	str	r3, [r0, #0]
    8e84:	2201      	movs	r2, #1
    8e86:	4610      	mov	r0, r2
    8e88:	4770      	bx	lr
    8e8a:	b299      	uxth	r1, r3
    8e8c:	b909      	cbnz	r1, 8e92 <__lo0bits+0x22>
    8e8e:	0c1b      	lsrs	r3, r3, #16
    8e90:	2210      	movs	r2, #16
    8e92:	b2d9      	uxtb	r1, r3
    8e94:	b909      	cbnz	r1, 8e9a <__lo0bits+0x2a>
    8e96:	3208      	adds	r2, #8
    8e98:	0a1b      	lsrs	r3, r3, #8
    8e9a:	0719      	lsls	r1, r3, #28
    8e9c:	bf04      	itt	eq
    8e9e:	091b      	lsreq	r3, r3, #4
    8ea0:	3204      	addeq	r2, #4
    8ea2:	0799      	lsls	r1, r3, #30
    8ea4:	bf04      	itt	eq
    8ea6:	089b      	lsreq	r3, r3, #2
    8ea8:	3202      	addeq	r2, #2
    8eaa:	07d9      	lsls	r1, r3, #31
    8eac:	d403      	bmi.n	8eb6 <__lo0bits+0x46>
    8eae:	085b      	lsrs	r3, r3, #1
    8eb0:	f102 0201 	add.w	r2, r2, #1
    8eb4:	d005      	beq.n	8ec2 <__lo0bits+0x52>
    8eb6:	6003      	str	r3, [r0, #0]
    8eb8:	4610      	mov	r0, r2
    8eba:	4770      	bx	lr
    8ebc:	2200      	movs	r2, #0
    8ebe:	4610      	mov	r0, r2
    8ec0:	4770      	bx	lr
    8ec2:	2220      	movs	r2, #32
    8ec4:	e7df      	b.n	8e86 <__lo0bits+0x16>
    8ec6:	089b      	lsrs	r3, r3, #2
    8ec8:	2202      	movs	r2, #2
    8eca:	6003      	str	r3, [r0, #0]
    8ecc:	4610      	mov	r0, r2
    8ece:	4770      	bx	lr

00008ed0 <__i2b>:
    8ed0:	b538      	push	{r3, r4, r5, lr}
    8ed2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8ed4:	4604      	mov	r4, r0
    8ed6:	460d      	mov	r5, r1
    8ed8:	b14b      	cbz	r3, 8eee <__i2b+0x1e>
    8eda:	6858      	ldr	r0, [r3, #4]
    8edc:	b1b0      	cbz	r0, 8f0c <__i2b+0x3c>
    8ede:	6802      	ldr	r2, [r0, #0]
    8ee0:	605a      	str	r2, [r3, #4]
    8ee2:	2200      	movs	r2, #0
    8ee4:	2301      	movs	r3, #1
    8ee6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    8eea:	60c2      	str	r2, [r0, #12]
    8eec:	bd38      	pop	{r3, r4, r5, pc}
    8eee:	2221      	movs	r2, #33	; 0x21
    8ef0:	2104      	movs	r1, #4
    8ef2:	f000 fe3d 	bl	9b70 <_calloc_r>
    8ef6:	4603      	mov	r3, r0
    8ef8:	6460      	str	r0, [r4, #68]	; 0x44
    8efa:	2800      	cmp	r0, #0
    8efc:	d1ed      	bne.n	8eda <__i2b+0xa>
    8efe:	4b09      	ldr	r3, [pc, #36]	; (8f24 <__i2b+0x54>)
    8f00:	4809      	ldr	r0, [pc, #36]	; (8f28 <__i2b+0x58>)
    8f02:	2200      	movs	r2, #0
    8f04:	f240 1145 	movw	r1, #325	; 0x145
    8f08:	f000 fe12 	bl	9b30 <__assert_func>
    8f0c:	221c      	movs	r2, #28
    8f0e:	2101      	movs	r1, #1
    8f10:	4620      	mov	r0, r4
    8f12:	f000 fe2d 	bl	9b70 <_calloc_r>
    8f16:	2800      	cmp	r0, #0
    8f18:	d0f1      	beq.n	8efe <__i2b+0x2e>
    8f1a:	2201      	movs	r2, #1
    8f1c:	2302      	movs	r3, #2
    8f1e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    8f22:	e7de      	b.n	8ee2 <__i2b+0x12>
    8f24:	2000070c 	.word	0x2000070c
    8f28:	20000884 	.word	0x20000884

00008f2c <__multiply>:
    8f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f30:	690e      	ldr	r6, [r1, #16]
    8f32:	6915      	ldr	r5, [r2, #16]
    8f34:	42ae      	cmp	r6, r5
    8f36:	b085      	sub	sp, #20
    8f38:	4688      	mov	r8, r1
    8f3a:	4614      	mov	r4, r2
    8f3c:	db05      	blt.n	8f4a <__multiply+0x1e>
    8f3e:	462a      	mov	r2, r5
    8f40:	4623      	mov	r3, r4
    8f42:	4635      	mov	r5, r6
    8f44:	460c      	mov	r4, r1
    8f46:	4616      	mov	r6, r2
    8f48:	4698      	mov	r8, r3
    8f4a:	68a3      	ldr	r3, [r4, #8]
    8f4c:	6861      	ldr	r1, [r4, #4]
    8f4e:	19af      	adds	r7, r5, r6
    8f50:	42bb      	cmp	r3, r7
    8f52:	bfb8      	it	lt
    8f54:	3101      	addlt	r1, #1
    8f56:	f7ff fe91 	bl	8c7c <_Balloc>
    8f5a:	9001      	str	r0, [sp, #4]
    8f5c:	2800      	cmp	r0, #0
    8f5e:	f000 8087 	beq.w	9070 <__multiply+0x144>
    8f62:	9b01      	ldr	r3, [sp, #4]
    8f64:	f103 0914 	add.w	r9, r3, #20
    8f68:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    8f6c:	45d1      	cmp	r9, sl
    8f6e:	d205      	bcs.n	8f7c <__multiply+0x50>
    8f70:	464b      	mov	r3, r9
    8f72:	2200      	movs	r2, #0
    8f74:	f843 2b04 	str.w	r2, [r3], #4
    8f78:	459a      	cmp	sl, r3
    8f7a:	d8fb      	bhi.n	8f74 <__multiply+0x48>
    8f7c:	f108 0814 	add.w	r8, r8, #20
    8f80:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    8f84:	f104 0314 	add.w	r3, r4, #20
    8f88:	45d8      	cmp	r8, fp
    8f8a:	461a      	mov	r2, r3
    8f8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8f90:	d25f      	bcs.n	9052 <__multiply+0x126>
    8f92:	1b2b      	subs	r3, r5, r4
    8f94:	3b15      	subs	r3, #21
    8f96:	f023 0303 	bic.w	r3, r3, #3
    8f9a:	3304      	adds	r3, #4
    8f9c:	3415      	adds	r4, #21
    8f9e:	42a5      	cmp	r5, r4
    8fa0:	bf38      	it	cc
    8fa2:	2304      	movcc	r3, #4
    8fa4:	e9cd a702 	strd	sl, r7, [sp, #8]
    8fa8:	46ac      	mov	ip, r5
    8faa:	461f      	mov	r7, r3
    8fac:	4692      	mov	sl, r2
    8fae:	e005      	b.n	8fbc <__multiply+0x90>
    8fb0:	0c09      	lsrs	r1, r1, #16
    8fb2:	d129      	bne.n	9008 <__multiply+0xdc>
    8fb4:	45c3      	cmp	fp, r8
    8fb6:	f109 0904 	add.w	r9, r9, #4
    8fba:	d948      	bls.n	904e <__multiply+0x122>
    8fbc:	f858 1b04 	ldr.w	r1, [r8], #4
    8fc0:	b28d      	uxth	r5, r1
    8fc2:	2d00      	cmp	r5, #0
    8fc4:	d0f4      	beq.n	8fb0 <__multiply+0x84>
    8fc6:	4656      	mov	r6, sl
    8fc8:	464c      	mov	r4, r9
    8fca:	2300      	movs	r3, #0
    8fcc:	f856 1b04 	ldr.w	r1, [r6], #4
    8fd0:	6822      	ldr	r2, [r4, #0]
    8fd2:	fa1f fe81 	uxth.w	lr, r1
    8fd6:	b290      	uxth	r0, r2
    8fd8:	0c09      	lsrs	r1, r1, #16
    8fda:	fb05 000e 	mla	r0, r5, lr, r0
    8fde:	0c12      	lsrs	r2, r2, #16
    8fe0:	4403      	add	r3, r0
    8fe2:	fb05 2201 	mla	r2, r5, r1, r2
    8fe6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    8fea:	b29b      	uxth	r3, r3
    8fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    8ff0:	45b4      	cmp	ip, r6
    8ff2:	f844 3b04 	str.w	r3, [r4], #4
    8ff6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    8ffa:	d8e7      	bhi.n	8fcc <__multiply+0xa0>
    8ffc:	f849 3007 	str.w	r3, [r9, r7]
    9000:	f858 1c04 	ldr.w	r1, [r8, #-4]
    9004:	0c09      	lsrs	r1, r1, #16
    9006:	d0d5      	beq.n	8fb4 <__multiply+0x88>
    9008:	f8d9 3000 	ldr.w	r3, [r9]
    900c:	4650      	mov	r0, sl
    900e:	461a      	mov	r2, r3
    9010:	464c      	mov	r4, r9
    9012:	2600      	movs	r6, #0
    9014:	8805      	ldrh	r5, [r0, #0]
    9016:	0c12      	lsrs	r2, r2, #16
    9018:	fb01 2205 	mla	r2, r1, r5, r2
    901c:	4416      	add	r6, r2
    901e:	b29b      	uxth	r3, r3
    9020:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    9024:	f844 3b04 	str.w	r3, [r4], #4
    9028:	f850 5b04 	ldr.w	r5, [r0], #4
    902c:	6822      	ldr	r2, [r4, #0]
    902e:	0c2d      	lsrs	r5, r5, #16
    9030:	b293      	uxth	r3, r2
    9032:	fb01 3305 	mla	r3, r1, r5, r3
    9036:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    903a:	4584      	cmp	ip, r0
    903c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    9040:	d8e8      	bhi.n	9014 <__multiply+0xe8>
    9042:	45c3      	cmp	fp, r8
    9044:	f849 3007 	str.w	r3, [r9, r7]
    9048:	f109 0904 	add.w	r9, r9, #4
    904c:	d8b6      	bhi.n	8fbc <__multiply+0x90>
    904e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    9052:	2f00      	cmp	r7, #0
    9054:	dc02      	bgt.n	905c <__multiply+0x130>
    9056:	e005      	b.n	9064 <__multiply+0x138>
    9058:	3f01      	subs	r7, #1
    905a:	d003      	beq.n	9064 <__multiply+0x138>
    905c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    9060:	2b00      	cmp	r3, #0
    9062:	d0f9      	beq.n	9058 <__multiply+0x12c>
    9064:	9b01      	ldr	r3, [sp, #4]
    9066:	4618      	mov	r0, r3
    9068:	611f      	str	r7, [r3, #16]
    906a:	b005      	add	sp, #20
    906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9070:	4b03      	ldr	r3, [pc, #12]	; (9080 <__multiply+0x154>)
    9072:	4804      	ldr	r0, [pc, #16]	; (9084 <__multiply+0x158>)
    9074:	9a01      	ldr	r2, [sp, #4]
    9076:	f44f 71b1 	mov.w	r1, #354	; 0x162
    907a:	f000 fd59 	bl	9b30 <__assert_func>
    907e:	bf00      	nop
    9080:	2000070c 	.word	0x2000070c
    9084:	20000884 	.word	0x20000884

00009088 <__pow5mult>:
    9088:	f012 0303 	ands.w	r3, r2, #3
    908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9090:	4614      	mov	r4, r2
    9092:	4606      	mov	r6, r0
    9094:	d132      	bne.n	90fc <__pow5mult+0x74>
    9096:	460d      	mov	r5, r1
    9098:	10a4      	asrs	r4, r4, #2
    909a:	d020      	beq.n	90de <__pow5mult+0x56>
    909c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    90a0:	f1b8 0f00 	cmp.w	r8, #0
    90a4:	d033      	beq.n	910e <__pow5mult+0x86>
    90a6:	07e3      	lsls	r3, r4, #31
    90a8:	f04f 0700 	mov.w	r7, #0
    90ac:	d407      	bmi.n	90be <__pow5mult+0x36>
    90ae:	1064      	asrs	r4, r4, #1
    90b0:	d015      	beq.n	90de <__pow5mult+0x56>
    90b2:	f8d8 0000 	ldr.w	r0, [r8]
    90b6:	b1a8      	cbz	r0, 90e4 <__pow5mult+0x5c>
    90b8:	4680      	mov	r8, r0
    90ba:	07e3      	lsls	r3, r4, #31
    90bc:	d5f7      	bpl.n	90ae <__pow5mult+0x26>
    90be:	4642      	mov	r2, r8
    90c0:	4629      	mov	r1, r5
    90c2:	4630      	mov	r0, r6
    90c4:	f7ff ff32 	bl	8f2c <__multiply>
    90c8:	b1b5      	cbz	r5, 90f8 <__pow5mult+0x70>
    90ca:	6869      	ldr	r1, [r5, #4]
    90cc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    90ce:	1064      	asrs	r4, r4, #1
    90d0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    90d4:	602a      	str	r2, [r5, #0]
    90d6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    90da:	4605      	mov	r5, r0
    90dc:	d1e9      	bne.n	90b2 <__pow5mult+0x2a>
    90de:	4628      	mov	r0, r5
    90e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90e4:	4642      	mov	r2, r8
    90e6:	4641      	mov	r1, r8
    90e8:	4630      	mov	r0, r6
    90ea:	f7ff ff1f 	bl	8f2c <__multiply>
    90ee:	f8c8 0000 	str.w	r0, [r8]
    90f2:	6007      	str	r7, [r0, #0]
    90f4:	4680      	mov	r8, r0
    90f6:	e7e0      	b.n	90ba <__pow5mult+0x32>
    90f8:	4605      	mov	r5, r0
    90fa:	e7d8      	b.n	90ae <__pow5mult+0x26>
    90fc:	3b01      	subs	r3, #1
    90fe:	4a0f      	ldr	r2, [pc, #60]	; (913c <__pow5mult+0xb4>)
    9100:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9104:	2300      	movs	r3, #0
    9106:	f7ff fde9 	bl	8cdc <__multadd>
    910a:	4605      	mov	r5, r0
    910c:	e7c4      	b.n	9098 <__pow5mult+0x10>
    910e:	2101      	movs	r1, #1
    9110:	4630      	mov	r0, r6
    9112:	f7ff fdb3 	bl	8c7c <_Balloc>
    9116:	4680      	mov	r8, r0
    9118:	b140      	cbz	r0, 912c <__pow5mult+0xa4>
    911a:	2301      	movs	r3, #1
    911c:	f240 2271 	movw	r2, #625	; 0x271
    9120:	e9c0 3204 	strd	r3, r2, [r0, #16]
    9124:	2300      	movs	r3, #0
    9126:	6430      	str	r0, [r6, #64]	; 0x40
    9128:	6003      	str	r3, [r0, #0]
    912a:	e7bc      	b.n	90a6 <__pow5mult+0x1e>
    912c:	4b04      	ldr	r3, [pc, #16]	; (9140 <__pow5mult+0xb8>)
    912e:	4805      	ldr	r0, [pc, #20]	; (9144 <__pow5mult+0xbc>)
    9130:	4642      	mov	r2, r8
    9132:	f240 1145 	movw	r1, #325	; 0x145
    9136:	f000 fcfb 	bl	9b30 <__assert_func>
    913a:	bf00      	nop
    913c:	20000e6c 	.word	0x20000e6c
    9140:	2000070c 	.word	0x2000070c
    9144:	20000884 	.word	0x20000884

00009148 <__lshift>:
    9148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    914c:	460d      	mov	r5, r1
    914e:	4614      	mov	r4, r2
    9150:	692f      	ldr	r7, [r5, #16]
    9152:	68ab      	ldr	r3, [r5, #8]
    9154:	6849      	ldr	r1, [r1, #4]
    9156:	eb07 1762 	add.w	r7, r7, r2, asr #5
    915a:	1c7e      	adds	r6, r7, #1
    915c:	429e      	cmp	r6, r3
    915e:	4680      	mov	r8, r0
    9160:	ea4f 1962 	mov.w	r9, r2, asr #5
    9164:	dd04      	ble.n	9170 <__lshift+0x28>
    9166:	005b      	lsls	r3, r3, #1
    9168:	429e      	cmp	r6, r3
    916a:	f101 0101 	add.w	r1, r1, #1
    916e:	dcfa      	bgt.n	9166 <__lshift+0x1e>
    9170:	4640      	mov	r0, r8
    9172:	f7ff fd83 	bl	8c7c <_Balloc>
    9176:	4684      	mov	ip, r0
    9178:	2800      	cmp	r0, #0
    917a:	d052      	beq.n	9222 <__lshift+0xda>
    917c:	f1b9 0f00 	cmp.w	r9, #0
    9180:	f100 0214 	add.w	r2, r0, #20
    9184:	dd0e      	ble.n	91a4 <__lshift+0x5c>
    9186:	f109 0105 	add.w	r1, r9, #5
    918a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    918e:	4613      	mov	r3, r2
    9190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9194:	2000      	movs	r0, #0
    9196:	f843 0b04 	str.w	r0, [r3], #4
    919a:	428b      	cmp	r3, r1
    919c:	d1fb      	bne.n	9196 <__lshift+0x4e>
    919e:	f1ae 0314 	sub.w	r3, lr, #20
    91a2:	441a      	add	r2, r3
    91a4:	6929      	ldr	r1, [r5, #16]
    91a6:	f105 0314 	add.w	r3, r5, #20
    91aa:	f014 0e1f 	ands.w	lr, r4, #31
    91ae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    91b2:	d02e      	beq.n	9212 <__lshift+0xca>
    91b4:	f1ce 0920 	rsb	r9, lr, #32
    91b8:	4610      	mov	r0, r2
    91ba:	f04f 0a00 	mov.w	sl, #0
    91be:	681c      	ldr	r4, [r3, #0]
    91c0:	fa04 f40e 	lsl.w	r4, r4, lr
    91c4:	ea44 040a 	orr.w	r4, r4, sl
    91c8:	f840 4b04 	str.w	r4, [r0], #4
    91cc:	f853 4b04 	ldr.w	r4, [r3], #4
    91d0:	4299      	cmp	r1, r3
    91d2:	fa24 fa09 	lsr.w	sl, r4, r9
    91d6:	d8f2      	bhi.n	91be <__lshift+0x76>
    91d8:	1b4b      	subs	r3, r1, r5
    91da:	3b15      	subs	r3, #21
    91dc:	f023 0303 	bic.w	r3, r3, #3
    91e0:	3304      	adds	r3, #4
    91e2:	f105 0015 	add.w	r0, r5, #21
    91e6:	4281      	cmp	r1, r0
    91e8:	bf38      	it	cc
    91ea:	2304      	movcc	r3, #4
    91ec:	f1ba 0f00 	cmp.w	sl, #0
    91f0:	bf18      	it	ne
    91f2:	4637      	movne	r7, r6
    91f4:	f842 a003 	str.w	sl, [r2, r3]
    91f8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    91fc:	686a      	ldr	r2, [r5, #4]
    91fe:	f8cc 7010 	str.w	r7, [ip, #16]
    9202:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9206:	6029      	str	r1, [r5, #0]
    9208:	4660      	mov	r0, ip
    920a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    920e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9212:	3a04      	subs	r2, #4
    9214:	f853 0b04 	ldr.w	r0, [r3], #4
    9218:	f842 0f04 	str.w	r0, [r2, #4]!
    921c:	4299      	cmp	r1, r3
    921e:	d8f9      	bhi.n	9214 <__lshift+0xcc>
    9220:	e7ea      	b.n	91f8 <__lshift+0xb0>
    9222:	4b03      	ldr	r3, [pc, #12]	; (9230 <__lshift+0xe8>)
    9224:	4803      	ldr	r0, [pc, #12]	; (9234 <__lshift+0xec>)
    9226:	4662      	mov	r2, ip
    9228:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    922c:	f000 fc80 	bl	9b30 <__assert_func>
    9230:	2000070c 	.word	0x2000070c
    9234:	20000884 	.word	0x20000884

00009238 <__mcmp>:
    9238:	690b      	ldr	r3, [r1, #16]
    923a:	4684      	mov	ip, r0
    923c:	6900      	ldr	r0, [r0, #16]
    923e:	1ac0      	subs	r0, r0, r3
    9240:	d116      	bne.n	9270 <__mcmp+0x38>
    9242:	f10c 0c14 	add.w	ip, ip, #20
    9246:	3114      	adds	r1, #20
    9248:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    924c:	b410      	push	{r4}
    924e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9252:	e001      	b.n	9258 <__mcmp+0x20>
    9254:	4594      	cmp	ip, r2
    9256:	d208      	bcs.n	926a <__mcmp+0x32>
    9258:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    925c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    9260:	428c      	cmp	r4, r1
    9262:	d0f7      	beq.n	9254 <__mcmp+0x1c>
    9264:	d205      	bcs.n	9272 <__mcmp+0x3a>
    9266:	f04f 30ff 	mov.w	r0, #4294967295
    926a:	f85d 4b04 	ldr.w	r4, [sp], #4
    926e:	4770      	bx	lr
    9270:	4770      	bx	lr
    9272:	2001      	movs	r0, #1
    9274:	f85d 4b04 	ldr.w	r4, [sp], #4
    9278:	4770      	bx	lr
    927a:	bf00      	nop

0000927c <__mdiff>:
    927c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9280:	690f      	ldr	r7, [r1, #16]
    9282:	6913      	ldr	r3, [r2, #16]
    9284:	1aff      	subs	r7, r7, r3
    9286:	2f00      	cmp	r7, #0
    9288:	460e      	mov	r6, r1
    928a:	4690      	mov	r8, r2
    928c:	d17f      	bne.n	938e <__mdiff+0x112>
    928e:	f101 0514 	add.w	r5, r1, #20
    9292:	3214      	adds	r2, #20
    9294:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9298:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    929c:	e001      	b.n	92a2 <__mdiff+0x26>
    929e:	429d      	cmp	r5, r3
    92a0:	d278      	bcs.n	9394 <__mdiff+0x118>
    92a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    92a6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    92aa:	42a1      	cmp	r1, r4
    92ac:	d0f7      	beq.n	929e <__mdiff+0x22>
    92ae:	d369      	bcc.n	9384 <__mdiff+0x108>
    92b0:	6871      	ldr	r1, [r6, #4]
    92b2:	f7ff fce3 	bl	8c7c <_Balloc>
    92b6:	4681      	mov	r9, r0
    92b8:	2800      	cmp	r0, #0
    92ba:	d077      	beq.n	93ac <__mdiff+0x130>
    92bc:	6935      	ldr	r5, [r6, #16]
    92be:	f8d8 2010 	ldr.w	r2, [r8, #16]
    92c2:	60c7      	str	r7, [r0, #12]
    92c4:	f108 0e14 	add.w	lr, r8, #20
    92c8:	f106 0014 	add.w	r0, r6, #20
    92cc:	f109 0a14 	add.w	sl, r9, #20
    92d0:	f106 0110 	add.w	r1, r6, #16
    92d4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    92d8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    92dc:	4656      	mov	r6, sl
    92de:	f04f 0c00 	mov.w	ip, #0
    92e2:	f85e 4b04 	ldr.w	r4, [lr], #4
    92e6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    92ea:	b2a3      	uxth	r3, r4
    92ec:	fa1c fc8b 	uxtah	ip, ip, fp
    92f0:	ebac 0303 	sub.w	r3, ip, r3
    92f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    92f8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    92fc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    9300:	b29b      	uxth	r3, r3
    9302:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    9306:	4572      	cmp	r2, lr
    9308:	f846 3b04 	str.w	r3, [r6], #4
    930c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    9310:	d8e7      	bhi.n	92e2 <__mdiff+0x66>
    9312:	eba2 0108 	sub.w	r1, r2, r8
    9316:	3915      	subs	r1, #21
    9318:	f108 0815 	add.w	r8, r8, #21
    931c:	4542      	cmp	r2, r8
    931e:	f021 0403 	bic.w	r4, r1, #3
    9322:	f104 0404 	add.w	r4, r4, #4
    9326:	bf38      	it	cc
    9328:	2404      	movcc	r4, #4
    932a:	4420      	add	r0, r4
    932c:	f021 0203 	bic.w	r2, r1, #3
    9330:	bf38      	it	cc
    9332:	2200      	movcc	r2, #0
    9334:	4287      	cmp	r7, r0
    9336:	4452      	add	r2, sl
    9338:	4454      	add	r4, sl
    933a:	d918      	bls.n	936e <__mdiff+0xf2>
    933c:	4626      	mov	r6, r4
    933e:	4601      	mov	r1, r0
    9340:	f851 3b04 	ldr.w	r3, [r1], #4
    9344:	fa1c fc83 	uxtah	ip, ip, r3
    9348:	ea4f 422c 	mov.w	r2, ip, asr #16
    934c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    9350:	fa1f fc8c 	uxth.w	ip, ip
    9354:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    9358:	428f      	cmp	r7, r1
    935a:	f846 3b04 	str.w	r3, [r6], #4
    935e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    9362:	d8ed      	bhi.n	9340 <__mdiff+0xc4>
    9364:	3f01      	subs	r7, #1
    9366:	1a3f      	subs	r7, r7, r0
    9368:	f027 0703 	bic.w	r7, r7, #3
    936c:	19e2      	adds	r2, r4, r7
    936e:	b923      	cbnz	r3, 937a <__mdiff+0xfe>
    9370:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    9374:	3d01      	subs	r5, #1
    9376:	2b00      	cmp	r3, #0
    9378:	d0fa      	beq.n	9370 <__mdiff+0xf4>
    937a:	f8c9 5010 	str.w	r5, [r9, #16]
    937e:	4648      	mov	r0, r9
    9380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9384:	4633      	mov	r3, r6
    9386:	2701      	movs	r7, #1
    9388:	4646      	mov	r6, r8
    938a:	4698      	mov	r8, r3
    938c:	e790      	b.n	92b0 <__mdiff+0x34>
    938e:	dbf9      	blt.n	9384 <__mdiff+0x108>
    9390:	2700      	movs	r7, #0
    9392:	e78d      	b.n	92b0 <__mdiff+0x34>
    9394:	2100      	movs	r1, #0
    9396:	f7ff fc71 	bl	8c7c <_Balloc>
    939a:	4681      	mov	r9, r0
    939c:	b168      	cbz	r0, 93ba <__mdiff+0x13e>
    939e:	2201      	movs	r2, #1
    93a0:	2300      	movs	r3, #0
    93a2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    93a6:	4648      	mov	r0, r9
    93a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93ac:	4b06      	ldr	r3, [pc, #24]	; (93c8 <__mdiff+0x14c>)
    93ae:	4807      	ldr	r0, [pc, #28]	; (93cc <__mdiff+0x150>)
    93b0:	464a      	mov	r2, r9
    93b2:	f240 2145 	movw	r1, #581	; 0x245
    93b6:	f000 fbbb 	bl	9b30 <__assert_func>
    93ba:	4b03      	ldr	r3, [pc, #12]	; (93c8 <__mdiff+0x14c>)
    93bc:	4803      	ldr	r0, [pc, #12]	; (93cc <__mdiff+0x150>)
    93be:	464a      	mov	r2, r9
    93c0:	f240 2137 	movw	r1, #567	; 0x237
    93c4:	f000 fbb4 	bl	9b30 <__assert_func>
    93c8:	2000070c 	.word	0x2000070c
    93cc:	20000884 	.word	0x20000884

000093d0 <__ulp>:
    93d0:	b082      	sub	sp, #8
    93d2:	ed8d 0b00 	vstr	d0, [sp]
    93d6:	4b16      	ldr	r3, [pc, #88]	; (9430 <__ulp+0x60>)
    93d8:	9a01      	ldr	r2, [sp, #4]
    93da:	4013      	ands	r3, r2
    93dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    93e0:	2b00      	cmp	r3, #0
    93e2:	dd06      	ble.n	93f2 <__ulp+0x22>
    93e4:	2200      	movs	r2, #0
    93e6:	4619      	mov	r1, r3
    93e8:	4610      	mov	r0, r2
    93ea:	ec41 0b10 	vmov	d0, r0, r1
    93ee:	b002      	add	sp, #8
    93f0:	4770      	bx	lr
    93f2:	425b      	negs	r3, r3
    93f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    93f8:	ea4f 5223 	mov.w	r2, r3, asr #20
    93fc:	da09      	bge.n	9412 <__ulp+0x42>
    93fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    9402:	4113      	asrs	r3, r2
    9404:	2200      	movs	r2, #0
    9406:	4619      	mov	r1, r3
    9408:	4610      	mov	r0, r2
    940a:	ec41 0b10 	vmov	d0, r0, r1
    940e:	b002      	add	sp, #8
    9410:	4770      	bx	lr
    9412:	f1a2 0314 	sub.w	r3, r2, #20
    9416:	2b1e      	cmp	r3, #30
    9418:	bfda      	itte	le
    941a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
    941e:	40da      	lsrle	r2, r3
    9420:	2201      	movgt	r2, #1
    9422:	2300      	movs	r3, #0
    9424:	4619      	mov	r1, r3
    9426:	4610      	mov	r0, r2
    9428:	ec41 0b10 	vmov	d0, r0, r1
    942c:	b002      	add	sp, #8
    942e:	4770      	bx	lr
    9430:	7ff00000 	.word	0x7ff00000

00009434 <__b2d>:
    9434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9436:	6904      	ldr	r4, [r0, #16]
    9438:	f100 0614 	add.w	r6, r0, #20
    943c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    9440:	1f27      	subs	r7, r4, #4
    9442:	f854 5c04 	ldr.w	r5, [r4, #-4]
    9446:	4628      	mov	r0, r5
    9448:	f7ff fcf2 	bl	8e30 <__hi0bits>
    944c:	f1c0 0320 	rsb	r3, r0, #32
    9450:	280a      	cmp	r0, #10
    9452:	600b      	str	r3, [r1, #0]
    9454:	dd1b      	ble.n	948e <__b2d+0x5a>
    9456:	42be      	cmp	r6, r7
    9458:	d20b      	bcs.n	9472 <__b2d+0x3e>
    945a:	380b      	subs	r0, #11
    945c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9460:	d12e      	bne.n	94c0 <__b2d+0x8c>
    9462:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
    9466:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    946a:	460a      	mov	r2, r1
    946c:	ec43 2b10 	vmov	d0, r2, r3
    9470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9472:	f1b0 010b 	subs.w	r1, r0, #11
    9476:	d0f4      	beq.n	9462 <__b2d+0x2e>
    9478:	fa05 f101 	lsl.w	r1, r5, r1
    947c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    9480:	2100      	movs	r1, #0
    9482:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9486:	460a      	mov	r2, r1
    9488:	ec43 2b10 	vmov	d0, r2, r3
    948c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    948e:	f1c0 0c0b 	rsb	ip, r0, #11
    9492:	fa25 f10c 	lsr.w	r1, r5, ip
    9496:	42be      	cmp	r6, r7
    9498:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
    949c:	bf38      	it	cc
    949e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
    94a2:	f100 0015 	add.w	r0, r0, #21
    94a6:	bf34      	ite	cc
    94a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
    94ac:	2100      	movcs	r1, #0
    94ae:	fa05 f000 	lsl.w	r0, r5, r0
    94b2:	4301      	orrs	r1, r0
    94b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    94b8:	460a      	mov	r2, r1
    94ba:	ec43 2b10 	vmov	d0, r2, r3
    94be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94c0:	f1c0 0c20 	rsb	ip, r0, #32
    94c4:	4085      	lsls	r5, r0
    94c6:	fa21 f30c 	lsr.w	r3, r1, ip
    94ca:	ea45 0703 	orr.w	r7, r5, r3
    94ce:	f1a4 0508 	sub.w	r5, r4, #8
    94d2:	42ae      	cmp	r6, r5
    94d4:	fa01 f100 	lsl.w	r1, r1, r0
    94d8:	bf3c      	itt	cc
    94da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
    94de:	fa20 f00c 	lsrcc.w	r0, r0, ip
    94e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
    94e6:	bf38      	it	cc
    94e8:	4301      	orrcc	r1, r0
    94ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    94ee:	460a      	mov	r2, r1
    94f0:	ec43 2b10 	vmov	d0, r2, r3
    94f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    94f6:	bf00      	nop

000094f8 <__d2b>:
    94f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    94fc:	4688      	mov	r8, r1
    94fe:	b083      	sub	sp, #12
    9500:	2101      	movs	r1, #1
    9502:	ec57 6b10 	vmov	r6, r7, d0
    9506:	4615      	mov	r5, r2
    9508:	f7ff fbb8 	bl	8c7c <_Balloc>
    950c:	4604      	mov	r4, r0
    950e:	2800      	cmp	r0, #0
    9510:	d051      	beq.n	95b6 <__d2b+0xbe>
    9512:	f3c7 590a 	ubfx	r9, r7, #20, #11
    9516:	f3c7 0313 	ubfx	r3, r7, #0, #20
    951a:	f1b9 0f00 	cmp.w	r9, #0
    951e:	d001      	beq.n	9524 <__d2b+0x2c>
    9520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9524:	2e00      	cmp	r6, #0
    9526:	9301      	str	r3, [sp, #4]
    9528:	d118      	bne.n	955c <__d2b+0x64>
    952a:	a801      	add	r0, sp, #4
    952c:	f7ff fca0 	bl	8e70 <__lo0bits>
    9530:	9a01      	ldr	r2, [sp, #4]
    9532:	6162      	str	r2, [r4, #20]
    9534:	2201      	movs	r2, #1
    9536:	f100 0320 	add.w	r3, r0, #32
    953a:	6122      	str	r2, [r4, #16]
    953c:	f1b9 0f00 	cmp.w	r9, #0
    9540:	d025      	beq.n	958e <__d2b+0x96>
    9542:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    9546:	eb09 0203 	add.w	r2, r9, r3
    954a:	4620      	mov	r0, r4
    954c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    9550:	f8c8 2000 	str.w	r2, [r8]
    9554:	602b      	str	r3, [r5, #0]
    9556:	b003      	add	sp, #12
    9558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    955c:	4668      	mov	r0, sp
    955e:	9600      	str	r6, [sp, #0]
    9560:	f7ff fc86 	bl	8e70 <__lo0bits>
    9564:	4603      	mov	r3, r0
    9566:	b310      	cbz	r0, 95ae <__d2b+0xb6>
    9568:	e9dd 0200 	ldrd	r0, r2, [sp]
    956c:	f1c3 0120 	rsb	r1, r3, #32
    9570:	fa02 f101 	lsl.w	r1, r2, r1
    9574:	4301      	orrs	r1, r0
    9576:	40da      	lsrs	r2, r3
    9578:	6161      	str	r1, [r4, #20]
    957a:	9201      	str	r2, [sp, #4]
    957c:	2a00      	cmp	r2, #0
    957e:	61a2      	str	r2, [r4, #24]
    9580:	bf14      	ite	ne
    9582:	2202      	movne	r2, #2
    9584:	2201      	moveq	r2, #1
    9586:	6122      	str	r2, [r4, #16]
    9588:	f1b9 0f00 	cmp.w	r9, #0
    958c:	d1d9      	bne.n	9542 <__d2b+0x4a>
    958e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    9592:	f8c8 3000 	str.w	r3, [r8]
    9596:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    959a:	6918      	ldr	r0, [r3, #16]
    959c:	f7ff fc48 	bl	8e30 <__hi0bits>
    95a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    95a4:	4620      	mov	r0, r4
    95a6:	602b      	str	r3, [r5, #0]
    95a8:	b003      	add	sp, #12
    95aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    95ae:	9a00      	ldr	r2, [sp, #0]
    95b0:	6162      	str	r2, [r4, #20]
    95b2:	9a01      	ldr	r2, [sp, #4]
    95b4:	e7e2      	b.n	957c <__d2b+0x84>
    95b6:	4b03      	ldr	r3, [pc, #12]	; (95c4 <__d2b+0xcc>)
    95b8:	4803      	ldr	r0, [pc, #12]	; (95c8 <__d2b+0xd0>)
    95ba:	4622      	mov	r2, r4
    95bc:	f240 310f 	movw	r1, #783	; 0x30f
    95c0:	f000 fab6 	bl	9b30 <__assert_func>
    95c4:	2000070c 	.word	0x2000070c
    95c8:	20000884 	.word	0x20000884

000095cc <__ratio>:
    95cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    95ce:	b083      	sub	sp, #12
    95d0:	460e      	mov	r6, r1
    95d2:	4669      	mov	r1, sp
    95d4:	4607      	mov	r7, r0
    95d6:	f7ff ff2d 	bl	9434 <__b2d>
    95da:	a901      	add	r1, sp, #4
    95dc:	4630      	mov	r0, r6
    95de:	ec55 4b10 	vmov	r4, r5, d0
    95e2:	eeb0 7b40 	vmov.f64	d7, d0
    95e6:	f7ff ff25 	bl	9434 <__b2d>
    95ea:	6933      	ldr	r3, [r6, #16]
    95ec:	693a      	ldr	r2, [r7, #16]
    95ee:	1ad2      	subs	r2, r2, r3
    95f0:	e9dd 3100 	ldrd	r3, r1, [sp]
    95f4:	1a5b      	subs	r3, r3, r1
    95f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    95fa:	2b00      	cmp	r3, #0
    95fc:	dd09      	ble.n	9612 <__ratio+0x46>
    95fe:	ee17 2a90 	vmov	r2, s15
    9602:	eb02 5503 	add.w	r5, r2, r3, lsl #20
    9606:	ec45 4b17 	vmov	d7, r4, r5
    960a:	ee87 0b00 	vdiv.f64	d0, d7, d0
    960e:	b003      	add	sp, #12
    9610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9612:	ee10 2a90 	vmov	r2, s1
    9616:	ec51 0b10 	vmov	r0, r1, d0
    961a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
    961e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
    9622:	ec41 0b10 	vmov	d0, r0, r1
    9626:	ee87 0b00 	vdiv.f64	d0, d7, d0
    962a:	b003      	add	sp, #12
    962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    962e:	bf00      	nop

00009630 <__copybits>:
    9630:	3901      	subs	r1, #1
    9632:	1149      	asrs	r1, r1, #5
    9634:	f101 0c01 	add.w	ip, r1, #1
    9638:	6911      	ldr	r1, [r2, #16]
    963a:	f102 0314 	add.w	r3, r2, #20
    963e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9642:	428b      	cmp	r3, r1
    9644:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    9648:	d217      	bcs.n	967a <__copybits+0x4a>
    964a:	b510      	push	{r4, lr}
    964c:	f1a0 0e04 	sub.w	lr, r0, #4
    9650:	f853 4b04 	ldr.w	r4, [r3], #4
    9654:	f84e 4f04 	str.w	r4, [lr, #4]!
    9658:	4299      	cmp	r1, r3
    965a:	d8f9      	bhi.n	9650 <__copybits+0x20>
    965c:	1a8a      	subs	r2, r1, r2
    965e:	f1a2 0315 	sub.w	r3, r2, #21
    9662:	f023 0303 	bic.w	r3, r3, #3
    9666:	3304      	adds	r3, #4
    9668:	4418      	add	r0, r3
    966a:	4584      	cmp	ip, r0
    966c:	d904      	bls.n	9678 <__copybits+0x48>
    966e:	2300      	movs	r3, #0
    9670:	f840 3b04 	str.w	r3, [r0], #4
    9674:	4584      	cmp	ip, r0
    9676:	d8fb      	bhi.n	9670 <__copybits+0x40>
    9678:	bd10      	pop	{r4, pc}
    967a:	4584      	cmp	ip, r0
    967c:	d905      	bls.n	968a <__copybits+0x5a>
    967e:	2300      	movs	r3, #0
    9680:	f840 3b04 	str.w	r3, [r0], #4
    9684:	4584      	cmp	ip, r0
    9686:	d8fb      	bhi.n	9680 <__copybits+0x50>
    9688:	4770      	bx	lr
    968a:	4770      	bx	lr

0000968c <__any_on>:
    968c:	6903      	ldr	r3, [r0, #16]
    968e:	114a      	asrs	r2, r1, #5
    9690:	4293      	cmp	r3, r2
    9692:	f100 0014 	add.w	r0, r0, #20
    9696:	da09      	bge.n	96ac <__any_on+0x20>
    9698:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    969c:	e002      	b.n	96a4 <__any_on+0x18>
    969e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    96a2:	b9c2      	cbnz	r2, 96d6 <__any_on+0x4a>
    96a4:	4283      	cmp	r3, r0
    96a6:	d8fa      	bhi.n	969e <__any_on+0x12>
    96a8:	2000      	movs	r0, #0
    96aa:	4770      	bx	lr
    96ac:	dd10      	ble.n	96d0 <__any_on+0x44>
    96ae:	f011 011f 	ands.w	r1, r1, #31
    96b2:	d00d      	beq.n	96d0 <__any_on+0x44>
    96b4:	b410      	push	{r4}
    96b6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    96ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    96be:	fa24 f201 	lsr.w	r2, r4, r1
    96c2:	408a      	lsls	r2, r1
    96c4:	4294      	cmp	r4, r2
    96c6:	d00c      	beq.n	96e2 <__any_on+0x56>
    96c8:	2001      	movs	r0, #1
    96ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    96ce:	4770      	bx	lr
    96d0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    96d4:	e7e6      	b.n	96a4 <__any_on+0x18>
    96d6:	2001      	movs	r0, #1
    96d8:	4770      	bx	lr
    96da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    96de:	2a00      	cmp	r2, #0
    96e0:	d1f2      	bne.n	96c8 <__any_on+0x3c>
    96e2:	4283      	cmp	r3, r0
    96e4:	d8f9      	bhi.n	96da <__any_on+0x4e>
    96e6:	2000      	movs	r0, #0
    96e8:	f85d 4b04 	ldr.w	r4, [sp], #4
    96ec:	4770      	bx	lr
    96ee:	bf00      	nop

000096f0 <__ascii_wctomb>:
    96f0:	b149      	cbz	r1, 9706 <__ascii_wctomb+0x16>
    96f2:	2aff      	cmp	r2, #255	; 0xff
    96f4:	d802      	bhi.n	96fc <__ascii_wctomb+0xc>
    96f6:	700a      	strb	r2, [r1, #0]
    96f8:	2001      	movs	r0, #1
    96fa:	4770      	bx	lr
    96fc:	238a      	movs	r3, #138	; 0x8a
    96fe:	6003      	str	r3, [r0, #0]
    9700:	f04f 30ff 	mov.w	r0, #4294967295
    9704:	4770      	bx	lr
    9706:	4608      	mov	r0, r1
    9708:	4770      	bx	lr
    970a:	bf00      	nop

0000970c <fcvtbuf>:
    970c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9710:	460e      	mov	r6, r1
    9712:	4926      	ldr	r1, [pc, #152]	; (97ac <fcvtbuf+0xa0>)
    9714:	b087      	sub	sp, #28
    9716:	680f      	ldr	r7, [r1, #0]
    9718:	4604      	mov	r4, r0
    971a:	4690      	mov	r8, r2
    971c:	461d      	mov	r5, r3
    971e:	b353      	cbz	r3, 9776 <fcvtbuf+0x6a>
    9720:	aa05      	add	r2, sp, #20
    9722:	4633      	mov	r3, r6
    9724:	9201      	str	r2, [sp, #4]
    9726:	2103      	movs	r1, #3
    9728:	4622      	mov	r2, r4
    972a:	f8cd 8000 	str.w	r8, [sp]
    972e:	4638      	mov	r0, r7
    9730:	f000 faee 	bl	9d10 <_dtoa_r>
    9734:	9b05      	ldr	r3, [sp, #20]
    9736:	6832      	ldr	r2, [r6, #0]
    9738:	4298      	cmp	r0, r3
    973a:	4684      	mov	ip, r0
    973c:	f1c2 0200 	rsb	r2, r2, #0
    9740:	4629      	mov	r1, r5
    9742:	d209      	bcs.n	9758 <fcvtbuf+0x4c>
    9744:	1a10      	subs	r0, r2, r0
    9746:	f81c 3b01 	ldrb.w	r3, [ip], #1
    974a:	f801 3b01 	strb.w	r3, [r1], #1
    974e:	9b05      	ldr	r3, [sp, #20]
    9750:	4563      	cmp	r3, ip
    9752:	eb00 020c 	add.w	r2, r0, ip
    9756:	d8f6      	bhi.n	9746 <fcvtbuf+0x3a>
    9758:	4294      	cmp	r4, r2
    975a:	dd24      	ble.n	97a6 <fcvtbuf+0x9a>
    975c:	1aa2      	subs	r2, r4, r2
    975e:	440a      	add	r2, r1
    9760:	2330      	movs	r3, #48	; 0x30
    9762:	f801 3b01 	strb.w	r3, [r1], #1
    9766:	4291      	cmp	r1, r2
    9768:	d1fb      	bne.n	9762 <fcvtbuf+0x56>
    976a:	2300      	movs	r3, #0
    976c:	7013      	strb	r3, [r2, #0]
    976e:	4628      	mov	r0, r5
    9770:	b007      	add	sp, #28
    9772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9776:	6cba      	ldr	r2, [r7, #72]	; 0x48
    9778:	f100 0323 	add.w	r3, r0, #35	; 0x23
    977c:	429a      	cmp	r2, r3
    977e:	dd01      	ble.n	9784 <fcvtbuf+0x78>
    9780:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    9782:	e7cd      	b.n	9720 <fcvtbuf+0x14>
    9784:	f100 0924 	add.w	r9, r0, #36	; 0x24
    9788:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    978a:	464a      	mov	r2, r9
    978c:	4638      	mov	r0, r7
    978e:	ed8d 0b02 	vstr	d0, [sp, #8]
    9792:	f7fc fa4b 	bl	5c2c <_realloc_r>
    9796:	4605      	mov	r5, r0
    9798:	2800      	cmp	r0, #0
    979a:	d0e8      	beq.n	976e <fcvtbuf+0x62>
    979c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
    97a0:	ed9d 0b02 	vldr	d0, [sp, #8]
    97a4:	e7bc      	b.n	9720 <fcvtbuf+0x14>
    97a6:	460a      	mov	r2, r1
    97a8:	e7df      	b.n	976a <fcvtbuf+0x5e>
    97aa:	bf00      	nop
    97ac:	20001968 	.word	0x20001968

000097b0 <_fclose_r>:
    97b0:	b570      	push	{r4, r5, r6, lr}
    97b2:	2900      	cmp	r1, #0
    97b4:	d04b      	beq.n	984e <_fclose_r+0x9e>
    97b6:	4606      	mov	r6, r0
    97b8:	460c      	mov	r4, r1
    97ba:	b110      	cbz	r0, 97c2 <_fclose_r+0x12>
    97bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    97be:	2b00      	cmp	r3, #0
    97c0:	d048      	beq.n	9854 <_fclose_r+0xa4>
    97c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    97c4:	07d8      	lsls	r0, r3, #31
    97c6:	d534      	bpl.n	9832 <_fclose_r+0x82>
    97c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    97cc:	2b00      	cmp	r3, #0
    97ce:	d03e      	beq.n	984e <_fclose_r+0x9e>
    97d0:	4621      	mov	r1, r4
    97d2:	4630      	mov	r0, r6
    97d4:	f000 f850 	bl	9878 <__sflush_r>
    97d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    97da:	4605      	mov	r5, r0
    97dc:	b133      	cbz	r3, 97ec <_fclose_r+0x3c>
    97de:	69e1      	ldr	r1, [r4, #28]
    97e0:	4630      	mov	r0, r6
    97e2:	4798      	blx	r3
    97e4:	2800      	cmp	r0, #0
    97e6:	bfb8      	it	lt
    97e8:	f04f 35ff 	movlt.w	r5, #4294967295
    97ec:	89a3      	ldrh	r3, [r4, #12]
    97ee:	061a      	lsls	r2, r3, #24
    97f0:	d43c      	bmi.n	986c <_fclose_r+0xbc>
    97f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    97f4:	b141      	cbz	r1, 9808 <_fclose_r+0x58>
    97f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    97fa:	4299      	cmp	r1, r3
    97fc:	d002      	beq.n	9804 <_fclose_r+0x54>
    97fe:	4630      	mov	r0, r6
    9800:	f7fe fd10 	bl	8224 <_free_r>
    9804:	2300      	movs	r3, #0
    9806:	6323      	str	r3, [r4, #48]	; 0x30
    9808:	6c61      	ldr	r1, [r4, #68]	; 0x44
    980a:	b121      	cbz	r1, 9816 <_fclose_r+0x66>
    980c:	4630      	mov	r0, r6
    980e:	f7fe fd09 	bl	8224 <_free_r>
    9812:	2300      	movs	r3, #0
    9814:	6463      	str	r3, [r4, #68]	; 0x44
    9816:	f7fd fd49 	bl	72ac <__sfp_lock_acquire>
    981a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    981c:	2200      	movs	r2, #0
    981e:	07db      	lsls	r3, r3, #31
    9820:	81a2      	strh	r2, [r4, #12]
    9822:	d51f      	bpl.n	9864 <_fclose_r+0xb4>
    9824:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9826:	f7fe fa0f 	bl	7c48 <__retarget_lock_close_recursive>
    982a:	f7fd fd45 	bl	72b8 <__sfp_lock_release>
    982e:	4628      	mov	r0, r5
    9830:	bd70      	pop	{r4, r5, r6, pc}
    9832:	89a3      	ldrh	r3, [r4, #12]
    9834:	0599      	lsls	r1, r3, #22
    9836:	d4cb      	bmi.n	97d0 <_fclose_r+0x20>
    9838:	6da0      	ldr	r0, [r4, #88]	; 0x58
    983a:	f7fe fa07 	bl	7c4c <__retarget_lock_acquire_recursive>
    983e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9842:	2b00      	cmp	r3, #0
    9844:	d1c4      	bne.n	97d0 <_fclose_r+0x20>
    9846:	6e65      	ldr	r5, [r4, #100]	; 0x64
    9848:	f015 0501 	ands.w	r5, r5, #1
    984c:	d005      	beq.n	985a <_fclose_r+0xaa>
    984e:	2500      	movs	r5, #0
    9850:	4628      	mov	r0, r5
    9852:	bd70      	pop	{r4, r5, r6, pc}
    9854:	f7fd fd0c 	bl	7270 <__sinit>
    9858:	e7b3      	b.n	97c2 <_fclose_r+0x12>
    985a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    985c:	f7fe f9f8 	bl	7c50 <__retarget_lock_release_recursive>
    9860:	4628      	mov	r0, r5
    9862:	bd70      	pop	{r4, r5, r6, pc}
    9864:	6da0      	ldr	r0, [r4, #88]	; 0x58
    9866:	f7fe f9f3 	bl	7c50 <__retarget_lock_release_recursive>
    986a:	e7db      	b.n	9824 <_fclose_r+0x74>
    986c:	6921      	ldr	r1, [r4, #16]
    986e:	4630      	mov	r0, r6
    9870:	f7fe fcd8 	bl	8224 <_free_r>
    9874:	e7bd      	b.n	97f2 <_fclose_r+0x42>
    9876:	bf00      	nop

00009878 <__sflush_r>:
    9878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9880:	460c      	mov	r4, r1
    9882:	0711      	lsls	r1, r2, #28
    9884:	4680      	mov	r8, r0
    9886:	d447      	bmi.n	9918 <__sflush_r+0xa0>
    9888:	6863      	ldr	r3, [r4, #4]
    988a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    988e:	2b00      	cmp	r3, #0
    9890:	81a2      	strh	r2, [r4, #12]
    9892:	dd5e      	ble.n	9952 <__sflush_r+0xda>
    9894:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9896:	2d00      	cmp	r5, #0
    9898:	d058      	beq.n	994c <__sflush_r+0xd4>
    989a:	2300      	movs	r3, #0
    989c:	f8d8 6000 	ldr.w	r6, [r8]
    98a0:	f8c8 3000 	str.w	r3, [r8]
    98a4:	b293      	uxth	r3, r2
    98a6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    98aa:	d156      	bne.n	995a <__sflush_r+0xe2>
    98ac:	2301      	movs	r3, #1
    98ae:	69e1      	ldr	r1, [r4, #28]
    98b0:	4640      	mov	r0, r8
    98b2:	47a8      	blx	r5
    98b4:	1c43      	adds	r3, r0, #1
    98b6:	d067      	beq.n	9988 <__sflush_r+0x110>
    98b8:	89a3      	ldrh	r3, [r4, #12]
    98ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    98bc:	075f      	lsls	r7, r3, #29
    98be:	d505      	bpl.n	98cc <__sflush_r+0x54>
    98c0:	6863      	ldr	r3, [r4, #4]
    98c2:	1ac0      	subs	r0, r0, r3
    98c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    98c6:	b10b      	cbz	r3, 98cc <__sflush_r+0x54>
    98c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    98ca:	1ac0      	subs	r0, r0, r3
    98cc:	69e1      	ldr	r1, [r4, #28]
    98ce:	4602      	mov	r2, r0
    98d0:	2300      	movs	r3, #0
    98d2:	4640      	mov	r0, r8
    98d4:	47a8      	blx	r5
    98d6:	1c41      	adds	r1, r0, #1
    98d8:	d141      	bne.n	995e <__sflush_r+0xe6>
    98da:	f8d8 3000 	ldr.w	r3, [r8]
    98de:	2b00      	cmp	r3, #0
    98e0:	d03d      	beq.n	995e <__sflush_r+0xe6>
    98e2:	2b1d      	cmp	r3, #29
    98e4:	d001      	beq.n	98ea <__sflush_r+0x72>
    98e6:	2b16      	cmp	r3, #22
    98e8:	d156      	bne.n	9998 <__sflush_r+0x120>
    98ea:	89a3      	ldrh	r3, [r4, #12]
    98ec:	6922      	ldr	r2, [r4, #16]
    98ee:	6022      	str	r2, [r4, #0]
    98f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    98f4:	2100      	movs	r1, #0
    98f6:	6061      	str	r1, [r4, #4]
    98f8:	81a3      	strh	r3, [r4, #12]
    98fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    98fc:	f8c8 6000 	str.w	r6, [r8]
    9900:	b321      	cbz	r1, 994c <__sflush_r+0xd4>
    9902:	f104 0340 	add.w	r3, r4, #64	; 0x40
    9906:	4299      	cmp	r1, r3
    9908:	d002      	beq.n	9910 <__sflush_r+0x98>
    990a:	4640      	mov	r0, r8
    990c:	f7fe fc8a 	bl	8224 <_free_r>
    9910:	2000      	movs	r0, #0
    9912:	6320      	str	r0, [r4, #48]	; 0x30
    9914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9918:	6926      	ldr	r6, [r4, #16]
    991a:	b1be      	cbz	r6, 994c <__sflush_r+0xd4>
    991c:	b293      	uxth	r3, r2
    991e:	6825      	ldr	r5, [r4, #0]
    9920:	6026      	str	r6, [r4, #0]
    9922:	079a      	lsls	r2, r3, #30
    9924:	bf0c      	ite	eq
    9926:	6963      	ldreq	r3, [r4, #20]
    9928:	2300      	movne	r3, #0
    992a:	1bad      	subs	r5, r5, r6
    992c:	60a3      	str	r3, [r4, #8]
    992e:	e00b      	b.n	9948 <__sflush_r+0xd0>
    9930:	462b      	mov	r3, r5
    9932:	4632      	mov	r2, r6
    9934:	69e1      	ldr	r1, [r4, #28]
    9936:	6a67      	ldr	r7, [r4, #36]	; 0x24
    9938:	4640      	mov	r0, r8
    993a:	47b8      	blx	r7
    993c:	f1b0 0c00 	subs.w	ip, r0, #0
    9940:	eba5 050c 	sub.w	r5, r5, ip
    9944:	4466      	add	r6, ip
    9946:	dd17      	ble.n	9978 <__sflush_r+0x100>
    9948:	2d00      	cmp	r5, #0
    994a:	dcf1      	bgt.n	9930 <__sflush_r+0xb8>
    994c:	2000      	movs	r0, #0
    994e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    9954:	2b00      	cmp	r3, #0
    9956:	dc9d      	bgt.n	9894 <__sflush_r+0x1c>
    9958:	e7f8      	b.n	994c <__sflush_r+0xd4>
    995a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    995c:	e7ae      	b.n	98bc <__sflush_r+0x44>
    995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    9962:	6922      	ldr	r2, [r4, #16]
    9964:	6022      	str	r2, [r4, #0]
    9966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    996a:	81a3      	strh	r3, [r4, #12]
    996c:	2200      	movs	r2, #0
    996e:	04db      	lsls	r3, r3, #19
    9970:	6062      	str	r2, [r4, #4]
    9972:	d5c2      	bpl.n	98fa <__sflush_r+0x82>
    9974:	6520      	str	r0, [r4, #80]	; 0x50
    9976:	e7c0      	b.n	98fa <__sflush_r+0x82>
    9978:	89a3      	ldrh	r3, [r4, #12]
    997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    997e:	f04f 30ff 	mov.w	r0, #4294967295
    9982:	81a3      	strh	r3, [r4, #12]
    9984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9988:	f8d8 3000 	ldr.w	r3, [r8]
    998c:	2b00      	cmp	r3, #0
    998e:	d093      	beq.n	98b8 <__sflush_r+0x40>
    9990:	2b1d      	cmp	r3, #29
    9992:	d006      	beq.n	99a2 <__sflush_r+0x12a>
    9994:	2b16      	cmp	r3, #22
    9996:	d004      	beq.n	99a2 <__sflush_r+0x12a>
    9998:	89a3      	ldrh	r3, [r4, #12]
    999a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    999e:	81a3      	strh	r3, [r4, #12]
    99a0:	e7d5      	b.n	994e <__sflush_r+0xd6>
    99a2:	f8c8 6000 	str.w	r6, [r8]
    99a6:	e7d1      	b.n	994c <__sflush_r+0xd4>

000099a8 <_fflush_r>:
    99a8:	b538      	push	{r3, r4, r5, lr}
    99aa:	460c      	mov	r4, r1
    99ac:	4605      	mov	r5, r0
    99ae:	b108      	cbz	r0, 99b4 <_fflush_r+0xc>
    99b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    99b2:	b303      	cbz	r3, 99f6 <_fflush_r+0x4e>
    99b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    99b8:	b188      	cbz	r0, 99de <_fflush_r+0x36>
    99ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
    99bc:	07db      	lsls	r3, r3, #31
    99be:	d401      	bmi.n	99c4 <_fflush_r+0x1c>
    99c0:	0581      	lsls	r1, r0, #22
    99c2:	d50f      	bpl.n	99e4 <_fflush_r+0x3c>
    99c4:	4628      	mov	r0, r5
    99c6:	4621      	mov	r1, r4
    99c8:	f7ff ff56 	bl	9878 <__sflush_r>
    99cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    99ce:	07da      	lsls	r2, r3, #31
    99d0:	4605      	mov	r5, r0
    99d2:	d402      	bmi.n	99da <_fflush_r+0x32>
    99d4:	89a3      	ldrh	r3, [r4, #12]
    99d6:	059b      	lsls	r3, r3, #22
    99d8:	d508      	bpl.n	99ec <_fflush_r+0x44>
    99da:	4628      	mov	r0, r5
    99dc:	bd38      	pop	{r3, r4, r5, pc}
    99de:	4605      	mov	r5, r0
    99e0:	4628      	mov	r0, r5
    99e2:	bd38      	pop	{r3, r4, r5, pc}
    99e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99e6:	f7fe f931 	bl	7c4c <__retarget_lock_acquire_recursive>
    99ea:	e7eb      	b.n	99c4 <_fflush_r+0x1c>
    99ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    99ee:	f7fe f92f 	bl	7c50 <__retarget_lock_release_recursive>
    99f2:	4628      	mov	r0, r5
    99f4:	bd38      	pop	{r3, r4, r5, pc}
    99f6:	f7fd fc3b 	bl	7270 <__sinit>
    99fa:	e7db      	b.n	99b4 <_fflush_r+0xc>

000099fc <memcmp>:
    99fc:	2a03      	cmp	r2, #3
    99fe:	b570      	push	{r4, r5, r6, lr}
    9a00:	d914      	bls.n	9a2c <memcmp+0x30>
    9a02:	ea40 0301 	orr.w	r3, r0, r1
    9a06:	079b      	lsls	r3, r3, #30
    9a08:	d122      	bne.n	9a50 <memcmp+0x54>
    9a0a:	4604      	mov	r4, r0
    9a0c:	460b      	mov	r3, r1
    9a0e:	4619      	mov	r1, r3
    9a10:	4620      	mov	r0, r4
    9a12:	680e      	ldr	r6, [r1, #0]
    9a14:	6805      	ldr	r5, [r0, #0]
    9a16:	42b5      	cmp	r5, r6
    9a18:	f104 0404 	add.w	r4, r4, #4
    9a1c:	f103 0304 	add.w	r3, r3, #4
    9a20:	d116      	bne.n	9a50 <memcmp+0x54>
    9a22:	3a04      	subs	r2, #4
    9a24:	2a03      	cmp	r2, #3
    9a26:	4620      	mov	r0, r4
    9a28:	4619      	mov	r1, r3
    9a2a:	d8f0      	bhi.n	9a0e <memcmp+0x12>
    9a2c:	1e54      	subs	r4, r2, #1
    9a2e:	b19a      	cbz	r2, 9a58 <memcmp+0x5c>
    9a30:	1e42      	subs	r2, r0, #1
    9a32:	3901      	subs	r1, #1
    9a34:	e001      	b.n	9a3a <memcmp+0x3e>
    9a36:	18c3      	adds	r3, r0, r3
    9a38:	d00c      	beq.n	9a54 <memcmp+0x58>
    9a3a:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    9a3e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    9a42:	45e6      	cmp	lr, ip
    9a44:	eba4 0302 	sub.w	r3, r4, r2
    9a48:	d0f5      	beq.n	9a36 <memcmp+0x3a>
    9a4a:	ebae 000c 	sub.w	r0, lr, ip
    9a4e:	bd70      	pop	{r4, r5, r6, pc}
    9a50:	1e54      	subs	r4, r2, #1
    9a52:	e7ed      	b.n	9a30 <memcmp+0x34>
    9a54:	4618      	mov	r0, r3
    9a56:	bd70      	pop	{r4, r5, r6, pc}
    9a58:	4610      	mov	r0, r2
    9a5a:	bd70      	pop	{r4, r5, r6, pc}

00009a5c <strnlen>:
    9a5c:	b171      	cbz	r1, 9a7c <strnlen+0x20>
    9a5e:	4603      	mov	r3, r0
    9a60:	eb00 0c01 	add.w	ip, r0, r1
    9a64:	e001      	b.n	9a6a <strnlen+0xe>
    9a66:	4563      	cmp	r3, ip
    9a68:	d006      	beq.n	9a78 <strnlen+0x1c>
    9a6a:	461a      	mov	r2, r3
    9a6c:	3301      	adds	r3, #1
    9a6e:	7811      	ldrb	r1, [r2, #0]
    9a70:	2900      	cmp	r1, #0
    9a72:	d1f8      	bne.n	9a66 <strnlen+0xa>
    9a74:	1a10      	subs	r0, r2, r0
    9a76:	4770      	bx	lr
    9a78:	1a18      	subs	r0, r3, r0
    9a7a:	4770      	bx	lr
    9a7c:	4608      	mov	r0, r1
    9a7e:	4770      	bx	lr

00009a80 <_localeconv_r>:
    9a80:	4800      	ldr	r0, [pc, #0]	; (9a84 <_localeconv_r+0x4>)
    9a82:	4770      	bx	lr
    9a84:	200014d0 	.word	0x200014d0
	...

00009a90 <memchr>:
    9a90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9a94:	2a10      	cmp	r2, #16
    9a96:	db2b      	blt.n	9af0 <memchr+0x60>
    9a98:	f010 0f07 	tst.w	r0, #7
    9a9c:	d008      	beq.n	9ab0 <memchr+0x20>
    9a9e:	f810 3b01 	ldrb.w	r3, [r0], #1
    9aa2:	3a01      	subs	r2, #1
    9aa4:	428b      	cmp	r3, r1
    9aa6:	d02d      	beq.n	9b04 <memchr+0x74>
    9aa8:	f010 0f07 	tst.w	r0, #7
    9aac:	b342      	cbz	r2, 9b00 <memchr+0x70>
    9aae:	d1f6      	bne.n	9a9e <memchr+0xe>
    9ab0:	b4f0      	push	{r4, r5, r6, r7}
    9ab2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    9ab6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    9aba:	f022 0407 	bic.w	r4, r2, #7
    9abe:	f07f 0700 	mvns.w	r7, #0
    9ac2:	2300      	movs	r3, #0
    9ac4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    9ac8:	3c08      	subs	r4, #8
    9aca:	ea85 0501 	eor.w	r5, r5, r1
    9ace:	ea86 0601 	eor.w	r6, r6, r1
    9ad2:	fa85 f547 	uadd8	r5, r5, r7
    9ad6:	faa3 f587 	sel	r5, r3, r7
    9ada:	fa86 f647 	uadd8	r6, r6, r7
    9ade:	faa5 f687 	sel	r6, r5, r7
    9ae2:	b98e      	cbnz	r6, 9b08 <memchr+0x78>
    9ae4:	d1ee      	bne.n	9ac4 <memchr+0x34>
    9ae6:	bcf0      	pop	{r4, r5, r6, r7}
    9ae8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9aec:	f002 0207 	and.w	r2, r2, #7
    9af0:	b132      	cbz	r2, 9b00 <memchr+0x70>
    9af2:	f810 3b01 	ldrb.w	r3, [r0], #1
    9af6:	3a01      	subs	r2, #1
    9af8:	ea83 0301 	eor.w	r3, r3, r1
    9afc:	b113      	cbz	r3, 9b04 <memchr+0x74>
    9afe:	d1f8      	bne.n	9af2 <memchr+0x62>
    9b00:	2000      	movs	r0, #0
    9b02:	4770      	bx	lr
    9b04:	3801      	subs	r0, #1
    9b06:	4770      	bx	lr
    9b08:	2d00      	cmp	r5, #0
    9b0a:	bf06      	itte	eq
    9b0c:	4635      	moveq	r5, r6
    9b0e:	3803      	subeq	r0, #3
    9b10:	3807      	subne	r0, #7
    9b12:	f015 0f01 	tst.w	r5, #1
    9b16:	d107      	bne.n	9b28 <memchr+0x98>
    9b18:	3001      	adds	r0, #1
    9b1a:	f415 7f80 	tst.w	r5, #256	; 0x100
    9b1e:	bf02      	ittt	eq
    9b20:	3001      	addeq	r0, #1
    9b22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    9b26:	3001      	addeq	r0, #1
    9b28:	bcf0      	pop	{r4, r5, r6, r7}
    9b2a:	3801      	subs	r0, #1
    9b2c:	4770      	bx	lr
    9b2e:	bf00      	nop

00009b30 <__assert_func>:
    9b30:	b500      	push	{lr}
    9b32:	4c0b      	ldr	r4, [pc, #44]	; (9b60 <__assert_func+0x30>)
    9b34:	6825      	ldr	r5, [r4, #0]
    9b36:	4614      	mov	r4, r2
    9b38:	68ee      	ldr	r6, [r5, #12]
    9b3a:	461a      	mov	r2, r3
    9b3c:	b085      	sub	sp, #20
    9b3e:	4603      	mov	r3, r0
    9b40:	460d      	mov	r5, r1
    9b42:	b14c      	cbz	r4, 9b58 <__assert_func+0x28>
    9b44:	4907      	ldr	r1, [pc, #28]	; (9b64 <__assert_func+0x34>)
    9b46:	9500      	str	r5, [sp, #0]
    9b48:	e9cd 1401 	strd	r1, r4, [sp, #4]
    9b4c:	4630      	mov	r0, r6
    9b4e:	4906      	ldr	r1, [pc, #24]	; (9b68 <__assert_func+0x38>)
    9b50:	f000 ff86 	bl	aa60 <fiprintf>
    9b54:	f7fa fbfa 	bl	434c <abort>
    9b58:	4904      	ldr	r1, [pc, #16]	; (9b6c <__assert_func+0x3c>)
    9b5a:	460c      	mov	r4, r1
    9b5c:	e7f3      	b.n	9b46 <__assert_func+0x16>
    9b5e:	bf00      	nop
    9b60:	20001968 	.word	0x20001968
    9b64:	200006cc 	.word	0x200006cc
    9b68:	200006dc 	.word	0x200006dc
    9b6c:	200003c0 	.word	0x200003c0

00009b70 <_calloc_r>:
    9b70:	b538      	push	{r3, r4, r5, lr}
    9b72:	fba1 1402 	umull	r1, r4, r1, r2
    9b76:	bb8c      	cbnz	r4, 9bdc <_calloc_r+0x6c>
    9b78:	f7fb fd90 	bl	569c <_malloc_r>
    9b7c:	4605      	mov	r5, r0
    9b7e:	b1e0      	cbz	r0, 9bba <_calloc_r+0x4a>
    9b80:	f850 2c04 	ldr.w	r2, [r0, #-4]
    9b84:	f022 0203 	bic.w	r2, r2, #3
    9b88:	3a04      	subs	r2, #4
    9b8a:	2a24      	cmp	r2, #36	; 0x24
    9b8c:	d817      	bhi.n	9bbe <_calloc_r+0x4e>
    9b8e:	2a13      	cmp	r2, #19
    9b90:	d91a      	bls.n	9bc8 <_calloc_r+0x58>
    9b92:	2a1b      	cmp	r2, #27
    9b94:	e9c0 4400 	strd	r4, r4, [r0]
    9b98:	d91d      	bls.n	9bd6 <_calloc_r+0x66>
    9b9a:	2a24      	cmp	r2, #36	; 0x24
    9b9c:	bf14      	ite	ne
    9b9e:	f100 0210 	addne.w	r2, r0, #16
    9ba2:	f100 0218 	addeq.w	r2, r0, #24
    9ba6:	f04f 0300 	mov.w	r3, #0
    9baa:	e9c0 4402 	strd	r4, r4, [r0, #8]
    9bae:	bf04      	itt	eq
    9bb0:	6104      	streq	r4, [r0, #16]
    9bb2:	6144      	streq	r4, [r0, #20]
    9bb4:	e9c2 3300 	strd	r3, r3, [r2]
    9bb8:	6093      	str	r3, [r2, #8]
    9bba:	4628      	mov	r0, r5
    9bbc:	bd38      	pop	{r3, r4, r5, pc}
    9bbe:	4621      	mov	r1, r4
    9bc0:	f7fd fc66 	bl	7490 <memset>
    9bc4:	4628      	mov	r0, r5
    9bc6:	bd38      	pop	{r3, r4, r5, pc}
    9bc8:	4602      	mov	r2, r0
    9bca:	2300      	movs	r3, #0
    9bcc:	e9c2 3300 	strd	r3, r3, [r2]
    9bd0:	6093      	str	r3, [r2, #8]
    9bd2:	4628      	mov	r0, r5
    9bd4:	bd38      	pop	{r3, r4, r5, pc}
    9bd6:	f100 0208 	add.w	r2, r0, #8
    9bda:	e7f6      	b.n	9bca <_calloc_r+0x5a>
    9bdc:	f7fe f808 	bl	7bf0 <__errno>
    9be0:	230c      	movs	r3, #12
    9be2:	2500      	movs	r5, #0
    9be4:	6003      	str	r3, [r0, #0]
    9be6:	e7e8      	b.n	9bba <_calloc_r+0x4a>

00009be8 <quorem>:
    9be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bec:	6903      	ldr	r3, [r0, #16]
    9bee:	690c      	ldr	r4, [r1, #16]
    9bf0:	42a3      	cmp	r3, r4
    9bf2:	b083      	sub	sp, #12
    9bf4:	f2c0 8087 	blt.w	9d06 <quorem+0x11e>
    9bf8:	3c01      	subs	r4, #1
    9bfa:	f101 0514 	add.w	r5, r1, #20
    9bfe:	00a3      	lsls	r3, r4, #2
    9c00:	f100 0814 	add.w	r8, r0, #20
    9c04:	9300      	str	r3, [sp, #0]
    9c06:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    9c0a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9c0e:	3301      	adds	r3, #1
    9c10:	4681      	mov	r9, r0
    9c12:	429a      	cmp	r2, r3
    9c14:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    9c18:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    9c1c:	9001      	str	r0, [sp, #4]
    9c1e:	fbb2 f6f3 	udiv	r6, r2, r3
    9c22:	d33b      	bcc.n	9c9c <quorem+0xb4>
    9c24:	f04f 0c00 	mov.w	ip, #0
    9c28:	46ae      	mov	lr, r5
    9c2a:	4640      	mov	r0, r8
    9c2c:	46e2      	mov	sl, ip
    9c2e:	4663      	mov	r3, ip
    9c30:	f85e bb04 	ldr.w	fp, [lr], #4
    9c34:	6802      	ldr	r2, [r0, #0]
    9c36:	fa1f fc8b 	uxth.w	ip, fp
    9c3a:	fb06 330c 	mla	r3, r6, ip, r3
    9c3e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    9c42:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    9c46:	fb06 cc0b 	mla	ip, r6, fp, ip
    9c4a:	b29b      	uxth	r3, r3
    9c4c:	ebaa 0303 	sub.w	r3, sl, r3
    9c50:	fa1f fa8c 	uxth.w	sl, ip
    9c54:	fa13 f382 	uxtah	r3, r3, r2
    9c58:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    9c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
    9c60:	b29b      	uxth	r3, r3
    9c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    9c66:	4577      	cmp	r7, lr
    9c68:	f840 3b04 	str.w	r3, [r0], #4
    9c6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
    9c70:	ea4f 431c 	mov.w	r3, ip, lsr #16
    9c74:	d2dc      	bcs.n	9c30 <quorem+0x48>
    9c76:	9b00      	ldr	r3, [sp, #0]
    9c78:	f858 3003 	ldr.w	r3, [r8, r3]
    9c7c:	b973      	cbnz	r3, 9c9c <quorem+0xb4>
    9c7e:	9b01      	ldr	r3, [sp, #4]
    9c80:	3b04      	subs	r3, #4
    9c82:	4598      	cmp	r8, r3
    9c84:	d304      	bcc.n	9c90 <quorem+0xa8>
    9c86:	e007      	b.n	9c98 <quorem+0xb0>
    9c88:	4598      	cmp	r8, r3
    9c8a:	f104 34ff 	add.w	r4, r4, #4294967295
    9c8e:	d203      	bcs.n	9c98 <quorem+0xb0>
    9c90:	f853 2904 	ldr.w	r2, [r3], #-4
    9c94:	2a00      	cmp	r2, #0
    9c96:	d0f7      	beq.n	9c88 <quorem+0xa0>
    9c98:	f8c9 4010 	str.w	r4, [r9, #16]
    9c9c:	4648      	mov	r0, r9
    9c9e:	f7ff facb 	bl	9238 <__mcmp>
    9ca2:	2800      	cmp	r0, #0
    9ca4:	db2b      	blt.n	9cfe <quorem+0x116>
    9ca6:	3601      	adds	r6, #1
    9ca8:	4641      	mov	r1, r8
    9caa:	2300      	movs	r3, #0
    9cac:	f855 0b04 	ldr.w	r0, [r5], #4
    9cb0:	f8d1 c000 	ldr.w	ip, [r1]
    9cb4:	b282      	uxth	r2, r0
    9cb6:	1a9a      	subs	r2, r3, r2
    9cb8:	0c03      	lsrs	r3, r0, #16
    9cba:	fa12 f28c 	uxtah	r2, r2, ip
    9cbe:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    9cc2:	eb03 4322 	add.w	r3, r3, r2, asr #16
    9cc6:	b292      	uxth	r2, r2
    9cc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    9ccc:	42af      	cmp	r7, r5
    9cce:	f841 2b04 	str.w	r2, [r1], #4
    9cd2:	ea4f 4323 	mov.w	r3, r3, asr #16
    9cd6:	d2e9      	bcs.n	9cac <quorem+0xc4>
    9cd8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    9cdc:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    9ce0:	b96a      	cbnz	r2, 9cfe <quorem+0x116>
    9ce2:	3b04      	subs	r3, #4
    9ce4:	4598      	cmp	r8, r3
    9ce6:	d304      	bcc.n	9cf2 <quorem+0x10a>
    9ce8:	e007      	b.n	9cfa <quorem+0x112>
    9cea:	4598      	cmp	r8, r3
    9cec:	f104 34ff 	add.w	r4, r4, #4294967295
    9cf0:	d203      	bcs.n	9cfa <quorem+0x112>
    9cf2:	f853 2904 	ldr.w	r2, [r3], #-4
    9cf6:	2a00      	cmp	r2, #0
    9cf8:	d0f7      	beq.n	9cea <quorem+0x102>
    9cfa:	f8c9 4010 	str.w	r4, [r9, #16]
    9cfe:	4630      	mov	r0, r6
    9d00:	b003      	add	sp, #12
    9d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d06:	2000      	movs	r0, #0
    9d08:	b003      	add	sp, #12
    9d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d0e:	bf00      	nop

00009d10 <_dtoa_r>:
    9d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d14:	ed2d 8b02 	vpush	{d8}
    9d18:	b08f      	sub	sp, #60	; 0x3c
    9d1a:	ed8d 0b02 	vstr	d0, [sp, #8]
    9d1e:	9101      	str	r1, [sp, #4]
    9d20:	6b81      	ldr	r1, [r0, #56]	; 0x38
    9d22:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    9d24:	9305      	str	r3, [sp, #20]
    9d26:	ec57 6b10 	vmov	r6, r7, d0
    9d2a:	4604      	mov	r4, r0
    9d2c:	4693      	mov	fp, r2
    9d2e:	b141      	cbz	r1, 9d42 <_dtoa_r+0x32>
    9d30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    9d32:	604a      	str	r2, [r1, #4]
    9d34:	2301      	movs	r3, #1
    9d36:	4093      	lsls	r3, r2
    9d38:	608b      	str	r3, [r1, #8]
    9d3a:	f7fe ffc5 	bl	8cc8 <_Bfree>
    9d3e:	2300      	movs	r3, #0
    9d40:	63a3      	str	r3, [r4, #56]	; 0x38
    9d42:	f1b7 0800 	subs.w	r8, r7, #0
    9d46:	bfb4      	ite	lt
    9d48:	2301      	movlt	r3, #1
    9d4a:	2300      	movge	r3, #0
    9d4c:	602b      	str	r3, [r5, #0]
    9d4e:	4bbe      	ldr	r3, [pc, #760]	; (a048 <_dtoa_r+0x338>)
    9d50:	bfbc      	itt	lt
    9d52:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    9d56:	f8cd 800c 	strlt.w	r8, [sp, #12]
    9d5a:	ea33 0308 	bics.w	r3, r3, r8
    9d5e:	f000 809f 	beq.w	9ea0 <_dtoa_r+0x190>
    9d62:	ed9d 8b02 	vldr	d8, [sp, #8]
    9d66:	eeb5 8b40 	vcmp.f64	d8, #0.0
    9d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9d6e:	d111      	bne.n	9d94 <_dtoa_r+0x84>
    9d70:	9a05      	ldr	r2, [sp, #20]
    9d72:	2301      	movs	r3, #1
    9d74:	6013      	str	r3, [r2, #0]
    9d76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9d78:	2b00      	cmp	r3, #0
    9d7a:	f000 823f 	beq.w	a1fc <_dtoa_r+0x4ec>
    9d7e:	4bb3      	ldr	r3, [pc, #716]	; (a04c <_dtoa_r+0x33c>)
    9d80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9d82:	6013      	str	r3, [r2, #0]
    9d84:	3b01      	subs	r3, #1
    9d86:	9300      	str	r3, [sp, #0]
    9d88:	9800      	ldr	r0, [sp, #0]
    9d8a:	b00f      	add	sp, #60	; 0x3c
    9d8c:	ecbd 8b02 	vpop	{d8}
    9d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d94:	aa0c      	add	r2, sp, #48	; 0x30
    9d96:	a90d      	add	r1, sp, #52	; 0x34
    9d98:	4620      	mov	r0, r4
    9d9a:	eeb0 0b48 	vmov.f64	d0, d8
    9d9e:	f7ff fbab 	bl	94f8 <__d2b>
    9da2:	ea5f 5318 	movs.w	r3, r8, lsr #20
    9da6:	4605      	mov	r5, r0
    9da8:	f040 8092 	bne.w	9ed0 <_dtoa_r+0x1c0>
    9dac:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    9db0:	440b      	add	r3, r1
    9db2:	f203 4232 	addw	r2, r3, #1074	; 0x432
    9db6:	2a20      	cmp	r2, #32
    9db8:	f340 82fa 	ble.w	a3b0 <_dtoa_r+0x6a0>
    9dbc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    9dc0:	fa08 f802 	lsl.w	r8, r8, r2
    9dc4:	f203 4212 	addw	r2, r3, #1042	; 0x412
    9dc8:	40d6      	lsrs	r6, r2
    9dca:	ea48 0206 	orr.w	r2, r8, r6
    9dce:	ee07 2a10 	vmov	s14, r2
    9dd2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    9dd6:	1e58      	subs	r0, r3, #1
    9dd8:	ee17 6a90 	vmov	r6, s15
    9ddc:	ec53 2b17 	vmov	r2, r3, d7
    9de0:	f04f 0a01 	mov.w	sl, #1
    9de4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    9de8:	ed9f 3b91 	vldr	d3, [pc, #580]	; a030 <_dtoa_r+0x320>
    9dec:	ed9f 7b92 	vldr	d7, [pc, #584]	; a038 <_dtoa_r+0x328>
    9df0:	ed9f 5b93 	vldr	d5, [pc, #588]	; a040 <_dtoa_r+0x330>
    9df4:	ee06 0a90 	vmov	s13, r0
    9df8:	ec43 2b12 	vmov	d2, r2, r3
    9dfc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    9e00:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    9e04:	ee32 6b46 	vsub.f64	d6, d2, d6
    9e08:	eea6 7b03 	vfma.f64	d7, d6, d3
    9e0c:	eea4 7b05 	vfma.f64	d7, d4, d5
    9e10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    9e14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e1c:	ee16 7a90 	vmov	r7, s13
    9e20:	d508      	bpl.n	9e34 <_dtoa_r+0x124>
    9e22:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    9e26:	eeb4 6b47 	vcmp.f64	d6, d7
    9e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e2e:	bf18      	it	ne
    9e30:	f107 37ff 	addne.w	r7, r7, #4294967295
    9e34:	2f16      	cmp	r7, #22
    9e36:	f200 8145 	bhi.w	a0c4 <_dtoa_r+0x3b4>
    9e3a:	4b85      	ldr	r3, [pc, #532]	; (a050 <_dtoa_r+0x340>)
    9e3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    9e40:	ed93 7b00 	vldr	d7, [r3]
    9e44:	eeb4 8bc7 	vcmpe.f64	d8, d7
    9e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9e4c:	d557      	bpl.n	9efe <_dtoa_r+0x1ee>
    9e4e:	1a09      	subs	r1, r1, r0
    9e50:	2300      	movs	r3, #0
    9e52:	f1b1 0801 	subs.w	r8, r1, #1
    9e56:	f107 37ff 	add.w	r7, r7, #4294967295
    9e5a:	930a      	str	r3, [sp, #40]	; 0x28
    9e5c:	f100 8139 	bmi.w	a0d2 <_dtoa_r+0x3c2>
    9e60:	2300      	movs	r3, #0
    9e62:	9306      	str	r3, [sp, #24]
    9e64:	2f00      	cmp	r7, #0
    9e66:	da52      	bge.n	9f0e <_dtoa_r+0x1fe>
    9e68:	9b06      	ldr	r3, [sp, #24]
    9e6a:	9704      	str	r7, [sp, #16]
    9e6c:	1bdb      	subs	r3, r3, r7
    9e6e:	9306      	str	r3, [sp, #24]
    9e70:	427b      	negs	r3, r7
    9e72:	9308      	str	r3, [sp, #32]
    9e74:	9b01      	ldr	r3, [sp, #4]
    9e76:	2b09      	cmp	r3, #9
    9e78:	f04f 0700 	mov.w	r7, #0
    9e7c:	d84e      	bhi.n	9f1c <_dtoa_r+0x20c>
    9e7e:	2b05      	cmp	r3, #5
    9e80:	f340 829d 	ble.w	a3be <_dtoa_r+0x6ae>
    9e84:	3b04      	subs	r3, #4
    9e86:	9301      	str	r3, [sp, #4]
    9e88:	2600      	movs	r6, #0
    9e8a:	9b01      	ldr	r3, [sp, #4]
    9e8c:	1e9a      	subs	r2, r3, #2
    9e8e:	2a03      	cmp	r2, #3
    9e90:	f200 8125 	bhi.w	a0de <_dtoa_r+0x3ce>
    9e94:	e8df f012 	tbh	[pc, r2, lsl #1]
    9e98:	03a703aa 	.word	0x03a703aa
    9e9c:	037e039d 	.word	0x037e039d
    9ea0:	9a05      	ldr	r2, [sp, #20]
    9ea2:	f3c8 0813 	ubfx	r8, r8, #0, #20
    9ea6:	f242 730f 	movw	r3, #9999	; 0x270f
    9eaa:	ea58 0806 	orrs.w	r8, r8, r6
    9eae:	6013      	str	r3, [r2, #0]
    9eb0:	d11e      	bne.n	9ef0 <_dtoa_r+0x1e0>
    9eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	f000 8591 	beq.w	a9dc <_dtoa_r+0xccc>
    9eba:	4b66      	ldr	r3, [pc, #408]	; (a054 <_dtoa_r+0x344>)
    9ebc:	9300      	str	r3, [sp, #0]
    9ebe:	3308      	adds	r3, #8
    9ec0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9ec2:	9800      	ldr	r0, [sp, #0]
    9ec4:	6013      	str	r3, [r2, #0]
    9ec6:	b00f      	add	sp, #60	; 0x3c
    9ec8:	ecbd 8b02 	vpop	{d8}
    9ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ed0:	ee18 6a90 	vmov	r6, s17
    9ed4:	f3c6 0613 	ubfx	r6, r6, #0, #20
    9ed8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    9edc:	ec53 2b18 	vmov	r2, r3, d8
    9ee0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    9ee4:	990c      	ldr	r1, [sp, #48]	; 0x30
    9ee6:	f04f 0a00 	mov.w	sl, #0
    9eea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    9eee:	e77b      	b.n	9de8 <_dtoa_r+0xd8>
    9ef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	f040 833b 	bne.w	a56e <_dtoa_r+0x85e>
    9ef8:	4b57      	ldr	r3, [pc, #348]	; (a058 <_dtoa_r+0x348>)
    9efa:	9300      	str	r3, [sp, #0]
    9efc:	e744      	b.n	9d88 <_dtoa_r+0x78>
    9efe:	1a09      	subs	r1, r1, r0
    9f00:	2300      	movs	r3, #0
    9f02:	f1b1 0801 	subs.w	r8, r1, #1
    9f06:	930a      	str	r3, [sp, #40]	; 0x28
    9f08:	f100 80e3 	bmi.w	a0d2 <_dtoa_r+0x3c2>
    9f0c:	9306      	str	r3, [sp, #24]
    9f0e:	2300      	movs	r3, #0
    9f10:	9308      	str	r3, [sp, #32]
    9f12:	9b01      	ldr	r3, [sp, #4]
    9f14:	9704      	str	r7, [sp, #16]
    9f16:	2b09      	cmp	r3, #9
    9f18:	44b8      	add	r8, r7
    9f1a:	d9b0      	bls.n	9e7e <_dtoa_r+0x16e>
    9f1c:	2300      	movs	r3, #0
    9f1e:	2601      	movs	r6, #1
    9f20:	9301      	str	r3, [sp, #4]
    9f22:	9607      	str	r6, [sp, #28]
    9f24:	f04f 39ff 	mov.w	r9, #4294967295
    9f28:	469b      	mov	fp, r3
    9f2a:	2100      	movs	r1, #0
    9f2c:	63e1      	str	r1, [r4, #60]	; 0x3c
    9f2e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    9f32:	4620      	mov	r0, r4
    9f34:	f7fe fea2 	bl	8c7c <_Balloc>
    9f38:	9000      	str	r0, [sp, #0]
    9f3a:	2800      	cmp	r0, #0
    9f3c:	f000 8540 	beq.w	a9c0 <_dtoa_r+0xcb0>
    9f40:	9b00      	ldr	r3, [sp, #0]
    9f42:	63a3      	str	r3, [r4, #56]	; 0x38
    9f44:	f1b9 0f0e 	cmp.w	r9, #14
    9f48:	f200 80dc 	bhi.w	a104 <_dtoa_r+0x3f4>
    9f4c:	2e00      	cmp	r6, #0
    9f4e:	f000 80d9 	beq.w	a104 <_dtoa_r+0x3f4>
    9f52:	9b04      	ldr	r3, [sp, #16]
    9f54:	2b00      	cmp	r3, #0
    9f56:	f340 83de 	ble.w	a716 <_dtoa_r+0xa06>
    9f5a:	4a3d      	ldr	r2, [pc, #244]	; (a050 <_dtoa_r+0x340>)
    9f5c:	f003 010f 	and.w	r1, r3, #15
    9f60:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    9f64:	ed92 7b00 	vldr	d7, [r2]
    9f68:	111a      	asrs	r2, r3, #4
    9f6a:	05db      	lsls	r3, r3, #23
    9f6c:	f140 8382 	bpl.w	a674 <_dtoa_r+0x964>
    9f70:	493a      	ldr	r1, [pc, #232]	; (a05c <_dtoa_r+0x34c>)
    9f72:	ed91 6b08 	vldr	d6, [r1, #32]
    9f76:	f002 020f 	and.w	r2, r2, #15
    9f7a:	2003      	movs	r0, #3
    9f7c:	ee88 5b06 	vdiv.f64	d5, d8, d6
    9f80:	b15a      	cbz	r2, 9f9a <_dtoa_r+0x28a>
    9f82:	4936      	ldr	r1, [pc, #216]	; (a05c <_dtoa_r+0x34c>)
    9f84:	07d6      	lsls	r6, r2, #31
    9f86:	d504      	bpl.n	9f92 <_dtoa_r+0x282>
    9f88:	ed91 6b00 	vldr	d6, [r1]
    9f8c:	3001      	adds	r0, #1
    9f8e:	ee27 7b06 	vmul.f64	d7, d7, d6
    9f92:	1052      	asrs	r2, r2, #1
    9f94:	f101 0108 	add.w	r1, r1, #8
    9f98:	d1f4      	bne.n	9f84 <_dtoa_r+0x274>
    9f9a:	ee85 6b07 	vdiv.f64	d6, d5, d7
    9f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9fa0:	b13b      	cbz	r3, 9fb2 <_dtoa_r+0x2a2>
    9fa2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    9fa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
    9faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9fae:	f100 84ae 	bmi.w	a90e <_dtoa_r+0xbfe>
    9fb2:	ee07 0a90 	vmov	s15, r0
    9fb6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    9fba:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    9fbe:	eea5 7b06 	vfma.f64	d7, d5, d6
    9fc2:	ee17 2a90 	vmov	r2, s15
    9fc6:	ec51 0b17 	vmov	r0, r1, d7
    9fca:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    9fce:	f1b9 0f00 	cmp.w	r9, #0
    9fd2:	f000 8388 	beq.w	a6e6 <_dtoa_r+0x9d6>
    9fd6:	9e04      	ldr	r6, [sp, #16]
    9fd8:	464a      	mov	r2, r9
    9fda:	9b07      	ldr	r3, [sp, #28]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	f000 8447 	beq.w	a870 <_dtoa_r+0xb60>
    9fe2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    9fe6:	4b1a      	ldr	r3, [pc, #104]	; (a050 <_dtoa_r+0x340>)
    9fe8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    9fec:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    9ff0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    9ff4:	ee36 7b47 	vsub.f64	d7, d6, d7
    9ff8:	ed1c 6b02 	vldr	d6, [ip, #-8]
    9ffc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    a000:	ec41 0b16 	vmov	d6, r0, r1
    a004:	ee14 0a90 	vmov	r0, s9
    a008:	ee35 5b46 	vsub.f64	d5, d5, d6
    a00c:	9900      	ldr	r1, [sp, #0]
    a00e:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a012:	3030      	adds	r0, #48	; 0x30
    a014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a018:	f801 0b01 	strb.w	r0, [r1], #1
    a01c:	f300 84ac 	bgt.w	a978 <_dtoa_r+0xc68>
    a020:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    a024:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a028:	f04f 0c00 	mov.w	ip, #0
    a02c:	e031      	b.n	a092 <_dtoa_r+0x382>
    a02e:	bf00      	nop
    a030:	636f4361 	.word	0x636f4361
    a034:	3fd287a7 	.word	0x3fd287a7
    a038:	8b60c8b3 	.word	0x8b60c8b3
    a03c:	3fc68a28 	.word	0x3fc68a28
    a040:	509f79fb 	.word	0x509f79fb
    a044:	3fd34413 	.word	0x3fd34413
    a048:	7ff00000 	.word	0x7ff00000
    a04c:	20000e3d 	.word	0x20000e3d
    a050:	200002a8 	.word	0x200002a8
    a054:	20000a0c 	.word	0x20000a0c
    a058:	20000a18 	.word	0x20000a18
    a05c:	20000280 	.word	0x20000280
    a060:	f10c 0c01 	add.w	ip, ip, #1
    a064:	4594      	cmp	ip, r2
    a066:	da4d      	bge.n	a104 <_dtoa_r+0x3f4>
    a068:	ee27 7b04 	vmul.f64	d7, d7, d4
    a06c:	ee25 5b04 	vmul.f64	d5, d5, d4
    a070:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a074:	ee16 3a90 	vmov	r3, s13
    a078:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    a07c:	3330      	adds	r3, #48	; 0x30
    a07e:	ee37 7b43 	vsub.f64	d7, d7, d3
    a082:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a08a:	f801 3b01 	strb.w	r3, [r1], #1
    a08e:	f100 8473 	bmi.w	a978 <_dtoa_r+0xc68>
    a092:	ee32 6b47 	vsub.f64	d6, d2, d7
    a096:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a09e:	d5df      	bpl.n	a060 <_dtoa_r+0x350>
    a0a0:	9a00      	ldr	r2, [sp, #0]
    a0a2:	9604      	str	r6, [sp, #16]
    a0a4:	e002      	b.n	a0ac <_dtoa_r+0x39c>
    a0a6:	428a      	cmp	r2, r1
    a0a8:	f000 8450 	beq.w	a94c <_dtoa_r+0xc3c>
    a0ac:	4689      	mov	r9, r1
    a0ae:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    a0b2:	2b39      	cmp	r3, #57	; 0x39
    a0b4:	d0f7      	beq.n	a0a6 <_dtoa_r+0x396>
    a0b6:	3301      	adds	r3, #1
    a0b8:	b2db      	uxtb	r3, r3
    a0ba:	700b      	strb	r3, [r1, #0]
    a0bc:	9b04      	ldr	r3, [sp, #16]
    a0be:	3301      	adds	r3, #1
    a0c0:	9304      	str	r3, [sp, #16]
    a0c2:	e155      	b.n	a370 <_dtoa_r+0x660>
    a0c4:	1a09      	subs	r1, r1, r0
    a0c6:	2301      	movs	r3, #1
    a0c8:	f1b1 0801 	subs.w	r8, r1, #1
    a0cc:	930a      	str	r3, [sp, #40]	; 0x28
    a0ce:	f57f aec7 	bpl.w	9e60 <_dtoa_r+0x150>
    a0d2:	f1c1 0301 	rsb	r3, r1, #1
    a0d6:	9306      	str	r3, [sp, #24]
    a0d8:	f04f 0800 	mov.w	r8, #0
    a0dc:	e6c2      	b.n	9e64 <_dtoa_r+0x154>
    a0de:	2600      	movs	r6, #0
    a0e0:	63e6      	str	r6, [r4, #60]	; 0x3c
    a0e2:	4631      	mov	r1, r6
    a0e4:	4620      	mov	r0, r4
    a0e6:	f7fe fdc9 	bl	8c7c <_Balloc>
    a0ea:	9000      	str	r0, [sp, #0]
    a0ec:	2800      	cmp	r0, #0
    a0ee:	f000 8467 	beq.w	a9c0 <_dtoa_r+0xcb0>
    a0f2:	9b00      	ldr	r3, [sp, #0]
    a0f4:	63a3      	str	r3, [r4, #56]	; 0x38
    a0f6:	f04f 33ff 	mov.w	r3, #4294967295
    a0fa:	930b      	str	r3, [sp, #44]	; 0x2c
    a0fc:	4699      	mov	r9, r3
    a0fe:	2301      	movs	r3, #1
    a100:	46b3      	mov	fp, r6
    a102:	9307      	str	r3, [sp, #28]
    a104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a106:	2a00      	cmp	r2, #0
    a108:	db55      	blt.n	a1b6 <_dtoa_r+0x4a6>
    a10a:	9904      	ldr	r1, [sp, #16]
    a10c:	290e      	cmp	r1, #14
    a10e:	dc52      	bgt.n	a1b6 <_dtoa_r+0x4a6>
    a110:	4bb7      	ldr	r3, [pc, #732]	; (a3f0 <_dtoa_r+0x6e0>)
    a112:	f1bb 0f00 	cmp.w	fp, #0
    a116:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a11a:	ed93 6b00 	vldr	d6, [r3]
    a11e:	da15      	bge.n	a14c <_dtoa_r+0x43c>
    a120:	f1b9 0f00 	cmp.w	r9, #0
    a124:	dc12      	bgt.n	a14c <_dtoa_r+0x43c>
    a126:	f040 82f2 	bne.w	a70e <_dtoa_r+0x9fe>
    a12a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a12e:	ee26 7b07 	vmul.f64	d7, d6, d7
    a132:	eeb4 8bc7 	vcmpe.f64	d8, d7
    a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a13a:	46ca      	mov	sl, r9
    a13c:	464e      	mov	r6, r9
    a13e:	f200 826d 	bhi.w	a61c <_dtoa_r+0x90c>
    a142:	f8dd 8000 	ldr.w	r8, [sp]
    a146:	ea6f 0b0b 	mvn.w	fp, fp
    a14a:	e270      	b.n	a62e <_dtoa_r+0x91e>
    a14c:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a150:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a154:	9900      	ldr	r1, [sp, #0]
    a156:	ee17 3a10 	vmov	r3, s14
    a15a:	f1b9 0f01 	cmp.w	r9, #1
    a15e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a162:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a166:	f801 3b01 	strb.w	r3, [r1], #1
    a16a:	eea5 8b46 	vfms.f64	d8, d5, d6
    a16e:	f000 8334 	beq.w	a7da <_dtoa_r+0xaca>
    a172:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a176:	2301      	movs	r3, #1
    a178:	e011      	b.n	a19e <_dtoa_r+0x48e>
    a17a:	ee88 7b06 	vdiv.f64	d7, d8, d6
    a17e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a182:	3301      	adds	r3, #1
    a184:	ee17 2a10 	vmov	r2, s14
    a188:	454b      	cmp	r3, r9
    a18a:	f102 0230 	add.w	r2, r2, #48	; 0x30
    a18e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    a192:	f801 2b01 	strb.w	r2, [r1], #1
    a196:	eea5 8b46 	vfms.f64	d8, d5, d6
    a19a:	f000 831e 	beq.w	a7da <_dtoa_r+0xaca>
    a19e:	ee28 8b04 	vmul.f64	d8, d8, d4
    a1a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
    a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1aa:	d1e6      	bne.n	a17a <_dtoa_r+0x46a>
    a1ac:	9b04      	ldr	r3, [sp, #16]
    a1ae:	3301      	adds	r3, #1
    a1b0:	9304      	str	r3, [sp, #16]
    a1b2:	4689      	mov	r9, r1
    a1b4:	e0dc      	b.n	a370 <_dtoa_r+0x660>
    a1b6:	9b07      	ldr	r3, [sp, #28]
    a1b8:	b343      	cbz	r3, a20c <_dtoa_r+0x4fc>
    a1ba:	9b01      	ldr	r3, [sp, #4]
    a1bc:	2b01      	cmp	r3, #1
    a1be:	f340 8276 	ble.w	a6ae <_dtoa_r+0x99e>
    a1c2:	9b08      	ldr	r3, [sp, #32]
    a1c4:	f109 3aff 	add.w	sl, r9, #4294967295
    a1c8:	4553      	cmp	r3, sl
    a1ca:	f280 823f 	bge.w	a64c <_dtoa_r+0x93c>
    a1ce:	9b08      	ldr	r3, [sp, #32]
    a1d0:	f8cd a020 	str.w	sl, [sp, #32]
    a1d4:	ebaa 0203 	sub.w	r2, sl, r3
    a1d8:	4417      	add	r7, r2
    a1da:	f04f 0a00 	mov.w	sl, #0
    a1de:	f1b9 0f00 	cmp.w	r9, #0
    a1e2:	f2c0 8325 	blt.w	a830 <_dtoa_r+0xb20>
    a1e6:	9b06      	ldr	r3, [sp, #24]
    a1e8:	9309      	str	r3, [sp, #36]	; 0x24
    a1ea:	444b      	add	r3, r9
    a1ec:	44c8      	add	r8, r9
    a1ee:	9306      	str	r3, [sp, #24]
    a1f0:	2101      	movs	r1, #1
    a1f2:	4620      	mov	r0, r4
    a1f4:	f7fe fe6c 	bl	8ed0 <__i2b>
    a1f8:	4606      	mov	r6, r0
    a1fa:	e00c      	b.n	a216 <_dtoa_r+0x506>
    a1fc:	4b7d      	ldr	r3, [pc, #500]	; (a3f4 <_dtoa_r+0x6e4>)
    a1fe:	9300      	str	r3, [sp, #0]
    a200:	9800      	ldr	r0, [sp, #0]
    a202:	b00f      	add	sp, #60	; 0x3c
    a204:	ecbd 8b02 	vpop	{d8}
    a208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a20c:	9b06      	ldr	r3, [sp, #24]
    a20e:	f8dd a020 	ldr.w	sl, [sp, #32]
    a212:	9e07      	ldr	r6, [sp, #28]
    a214:	9309      	str	r3, [sp, #36]	; 0x24
    a216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a218:	b16b      	cbz	r3, a236 <_dtoa_r+0x526>
    a21a:	f1b8 0f00 	cmp.w	r8, #0
    a21e:	dd0a      	ble.n	a236 <_dtoa_r+0x526>
    a220:	4543      	cmp	r3, r8
    a222:	9906      	ldr	r1, [sp, #24]
    a224:	461a      	mov	r2, r3
    a226:	bfa8      	it	ge
    a228:	4642      	movge	r2, r8
    a22a:	1a89      	subs	r1, r1, r2
    a22c:	1a9b      	subs	r3, r3, r2
    a22e:	9106      	str	r1, [sp, #24]
    a230:	9309      	str	r3, [sp, #36]	; 0x24
    a232:	eba8 0802 	sub.w	r8, r8, r2
    a236:	9b08      	ldr	r3, [sp, #32]
    a238:	b163      	cbz	r3, a254 <_dtoa_r+0x544>
    a23a:	9b07      	ldr	r3, [sp, #28]
    a23c:	2b00      	cmp	r3, #0
    a23e:	f000 82a7 	beq.w	a790 <_dtoa_r+0xa80>
    a242:	f1ba 0f00 	cmp.w	sl, #0
    a246:	f300 8204 	bgt.w	a652 <_dtoa_r+0x942>
    a24a:	9b08      	ldr	r3, [sp, #32]
    a24c:	ebb3 020a 	subs.w	r2, r3, sl
    a250:	f040 82ff 	bne.w	a852 <_dtoa_r+0xb42>
    a254:	2101      	movs	r1, #1
    a256:	4620      	mov	r0, r4
    a258:	f7fe fe3a 	bl	8ed0 <__i2b>
    a25c:	2f00      	cmp	r7, #0
    a25e:	4682      	mov	sl, r0
    a260:	f300 80af 	bgt.w	a3c2 <_dtoa_r+0x6b2>
    a264:	9b01      	ldr	r3, [sp, #4]
    a266:	2b01      	cmp	r3, #1
    a268:	f340 8187 	ble.w	a57a <_dtoa_r+0x86a>
    a26c:	2300      	movs	r3, #0
    a26e:	9308      	str	r3, [sp, #32]
    a270:	2001      	movs	r0, #1
    a272:	2f00      	cmp	r7, #0
    a274:	f040 80b1 	bne.w	a3da <_dtoa_r+0x6ca>
    a278:	4440      	add	r0, r8
    a27a:	f010 001f 	ands.w	r0, r0, #31
    a27e:	f000 817a 	beq.w	a576 <_dtoa_r+0x866>
    a282:	f1c0 0220 	rsb	r2, r0, #32
    a286:	2a04      	cmp	r2, #4
    a288:	f300 8088 	bgt.w	a39c <_dtoa_r+0x68c>
    a28c:	f040 81f6 	bne.w	a67c <_dtoa_r+0x96c>
    a290:	9b06      	ldr	r3, [sp, #24]
    a292:	2b00      	cmp	r3, #0
    a294:	dd05      	ble.n	a2a2 <_dtoa_r+0x592>
    a296:	4629      	mov	r1, r5
    a298:	461a      	mov	r2, r3
    a29a:	4620      	mov	r0, r4
    a29c:	f7fe ff54 	bl	9148 <__lshift>
    a2a0:	4605      	mov	r5, r0
    a2a2:	f1b8 0f00 	cmp.w	r8, #0
    a2a6:	dd05      	ble.n	a2b4 <_dtoa_r+0x5a4>
    a2a8:	4651      	mov	r1, sl
    a2aa:	4642      	mov	r2, r8
    a2ac:	4620      	mov	r0, r4
    a2ae:	f7fe ff4b 	bl	9148 <__lshift>
    a2b2:	4682      	mov	sl, r0
    a2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	f040 813f 	bne.w	a53a <_dtoa_r+0x82a>
    a2bc:	f1b9 0f00 	cmp.w	r9, #0
    a2c0:	f340 8125 	ble.w	a50e <_dtoa_r+0x7fe>
    a2c4:	9b07      	ldr	r3, [sp, #28]
    a2c6:	2b00      	cmp	r3, #0
    a2c8:	f040 80a3 	bne.w	a412 <_dtoa_r+0x702>
    a2cc:	9b04      	ldr	r3, [sp, #16]
    a2ce:	3301      	adds	r3, #1
    a2d0:	9304      	str	r3, [sp, #16]
    a2d2:	f8dd 8000 	ldr.w	r8, [sp]
    a2d6:	2701      	movs	r7, #1
    a2d8:	e007      	b.n	a2ea <_dtoa_r+0x5da>
    a2da:	4629      	mov	r1, r5
    a2dc:	2300      	movs	r3, #0
    a2de:	220a      	movs	r2, #10
    a2e0:	4620      	mov	r0, r4
    a2e2:	f7fe fcfb 	bl	8cdc <__multadd>
    a2e6:	3701      	adds	r7, #1
    a2e8:	4605      	mov	r5, r0
    a2ea:	4651      	mov	r1, sl
    a2ec:	4628      	mov	r0, r5
    a2ee:	f7ff fc7b 	bl	9be8 <quorem>
    a2f2:	45b9      	cmp	r9, r7
    a2f4:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a2f8:	f808 0b01 	strb.w	r0, [r8], #1
    a2fc:	dced      	bgt.n	a2da <_dtoa_r+0x5ca>
    a2fe:	f1b9 0f00 	cmp.w	r9, #0
    a302:	9a00      	ldr	r2, [sp, #0]
    a304:	bfcc      	ite	gt
    a306:	46cb      	movgt	fp, r9
    a308:	f04f 0b01 	movle.w	fp, #1
    a30c:	4603      	mov	r3, r0
    a30e:	4493      	add	fp, r2
    a310:	2700      	movs	r7, #0
    a312:	4629      	mov	r1, r5
    a314:	2201      	movs	r2, #1
    a316:	4620      	mov	r0, r4
    a318:	9301      	str	r3, [sp, #4]
    a31a:	f7fe ff15 	bl	9148 <__lshift>
    a31e:	4651      	mov	r1, sl
    a320:	4605      	mov	r5, r0
    a322:	f7fe ff89 	bl	9238 <__mcmp>
    a326:	2800      	cmp	r0, #0
    a328:	f340 81af 	ble.w	a68a <_dtoa_r+0x97a>
    a32c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    a330:	9a00      	ldr	r2, [sp, #0]
    a332:	f10b 3bff 	add.w	fp, fp, #4294967295
    a336:	e004      	b.n	a342 <_dtoa_r+0x632>
    a338:	455a      	cmp	r2, fp
    a33a:	f000 81b1 	beq.w	a6a0 <_dtoa_r+0x990>
    a33e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a342:	2b39      	cmp	r3, #57	; 0x39
    a344:	f10b 0901 	add.w	r9, fp, #1
    a348:	d0f6      	beq.n	a338 <_dtoa_r+0x628>
    a34a:	3301      	adds	r3, #1
    a34c:	f88b 3000 	strb.w	r3, [fp]
    a350:	4651      	mov	r1, sl
    a352:	4620      	mov	r0, r4
    a354:	f7fe fcb8 	bl	8cc8 <_Bfree>
    a358:	b156      	cbz	r6, a370 <_dtoa_r+0x660>
    a35a:	b12f      	cbz	r7, a368 <_dtoa_r+0x658>
    a35c:	42b7      	cmp	r7, r6
    a35e:	d003      	beq.n	a368 <_dtoa_r+0x658>
    a360:	4639      	mov	r1, r7
    a362:	4620      	mov	r0, r4
    a364:	f7fe fcb0 	bl	8cc8 <_Bfree>
    a368:	4631      	mov	r1, r6
    a36a:	4620      	mov	r0, r4
    a36c:	f7fe fcac 	bl	8cc8 <_Bfree>
    a370:	4629      	mov	r1, r5
    a372:	4620      	mov	r0, r4
    a374:	f7fe fca8 	bl	8cc8 <_Bfree>
    a378:	2300      	movs	r3, #0
    a37a:	f889 3000 	strb.w	r3, [r9]
    a37e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    a382:	601a      	str	r2, [r3, #0]
    a384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a386:	2b00      	cmp	r3, #0
    a388:	f43f acfe 	beq.w	9d88 <_dtoa_r+0x78>
    a38c:	9800      	ldr	r0, [sp, #0]
    a38e:	f8c3 9000 	str.w	r9, [r3]
    a392:	b00f      	add	sp, #60	; 0x3c
    a394:	ecbd 8b02 	vpop	{d8}
    a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a39c:	f1c0 001c 	rsb	r0, r0, #28
    a3a0:	9b06      	ldr	r3, [sp, #24]
    a3a2:	4403      	add	r3, r0
    a3a4:	9306      	str	r3, [sp, #24]
    a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3a8:	4403      	add	r3, r0
    a3aa:	9309      	str	r3, [sp, #36]	; 0x24
    a3ac:	4480      	add	r8, r0
    a3ae:	e76f      	b.n	a290 <_dtoa_r+0x580>
    a3b0:	f1c2 0220 	rsb	r2, r2, #32
    a3b4:	fa06 f202 	lsl.w	r2, r6, r2
    a3b8:	ee07 2a10 	vmov	s14, r2
    a3bc:	e509      	b.n	9dd2 <_dtoa_r+0xc2>
    a3be:	2601      	movs	r6, #1
    a3c0:	e563      	b.n	9e8a <_dtoa_r+0x17a>
    a3c2:	4601      	mov	r1, r0
    a3c4:	463a      	mov	r2, r7
    a3c6:	4620      	mov	r0, r4
    a3c8:	f7fe fe5e 	bl	9088 <__pow5mult>
    a3cc:	9b01      	ldr	r3, [sp, #4]
    a3ce:	2b01      	cmp	r3, #1
    a3d0:	4682      	mov	sl, r0
    a3d2:	f340 81c5 	ble.w	a760 <_dtoa_r+0xa50>
    a3d6:	2300      	movs	r3, #0
    a3d8:	9308      	str	r3, [sp, #32]
    a3da:	f8da 2010 	ldr.w	r2, [sl, #16]
    a3de:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    a3e2:	6910      	ldr	r0, [r2, #16]
    a3e4:	f7fe fd24 	bl	8e30 <__hi0bits>
    a3e8:	f1c0 0020 	rsb	r0, r0, #32
    a3ec:	e744      	b.n	a278 <_dtoa_r+0x568>
    a3ee:	bf00      	nop
    a3f0:	200002a8 	.word	0x200002a8
    a3f4:	20000e3c 	.word	0x20000e3c
    a3f8:	4631      	mov	r1, r6
    a3fa:	2300      	movs	r3, #0
    a3fc:	220a      	movs	r2, #10
    a3fe:	4620      	mov	r0, r4
    a400:	f7fe fc6c 	bl	8cdc <__multadd>
    a404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a406:	2b00      	cmp	r3, #0
    a408:	4606      	mov	r6, r0
    a40a:	f340 82ce 	ble.w	a9aa <_dtoa_r+0xc9a>
    a40e:	9704      	str	r7, [sp, #16]
    a410:	4699      	mov	r9, r3
    a412:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a414:	2b00      	cmp	r3, #0
    a416:	dd05      	ble.n	a424 <_dtoa_r+0x714>
    a418:	4631      	mov	r1, r6
    a41a:	461a      	mov	r2, r3
    a41c:	4620      	mov	r0, r4
    a41e:	f7fe fe93 	bl	9148 <__lshift>
    a422:	4606      	mov	r6, r0
    a424:	9b08      	ldr	r3, [sp, #32]
    a426:	2b00      	cmp	r3, #0
    a428:	f040 81eb 	bne.w	a802 <_dtoa_r+0xaf2>
    a42c:	46b0      	mov	r8, r6
    a42e:	9b02      	ldr	r3, [sp, #8]
    a430:	9f00      	ldr	r7, [sp, #0]
    a432:	f003 0201 	and.w	r2, r3, #1
    a436:	1e7b      	subs	r3, r7, #1
    a438:	444b      	add	r3, r9
    a43a:	9308      	str	r3, [sp, #32]
    a43c:	9b01      	ldr	r3, [sp, #4]
    a43e:	920a      	str	r2, [sp, #40]	; 0x28
    a440:	4313      	orrs	r3, r2
    a442:	9309      	str	r3, [sp, #36]	; 0x24
    a444:	4651      	mov	r1, sl
    a446:	4628      	mov	r0, r5
    a448:	f7ff fbce 	bl	9be8 <quorem>
    a44c:	4631      	mov	r1, r6
    a44e:	4683      	mov	fp, r0
    a450:	4628      	mov	r0, r5
    a452:	f7fe fef1 	bl	9238 <__mcmp>
    a456:	4642      	mov	r2, r8
    a458:	4651      	mov	r1, sl
    a45a:	4681      	mov	r9, r0
    a45c:	4620      	mov	r0, r4
    a45e:	f7fe ff0d 	bl	927c <__mdiff>
    a462:	68c2      	ldr	r2, [r0, #12]
    a464:	4601      	mov	r1, r0
    a466:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    a46a:	2a00      	cmp	r2, #0
    a46c:	d142      	bne.n	a4f4 <_dtoa_r+0x7e4>
    a46e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    a472:	4628      	mov	r0, r5
    a474:	f7fe fee0 	bl	9238 <__mcmp>
    a478:	9906      	ldr	r1, [sp, #24]
    a47a:	9002      	str	r0, [sp, #8]
    a47c:	4620      	mov	r0, r4
    a47e:	f7fe fc23 	bl	8cc8 <_Bfree>
    a482:	9a02      	ldr	r2, [sp, #8]
    a484:	9b07      	ldr	r3, [sp, #28]
    a486:	b91a      	cbnz	r2, a490 <_dtoa_r+0x780>
    a488:	9909      	ldr	r1, [sp, #36]	; 0x24
    a48a:	2900      	cmp	r1, #0
    a48c:	f000 827e 	beq.w	a98c <_dtoa_r+0xc7c>
    a490:	f1b9 0f00 	cmp.w	r9, #0
    a494:	f2c0 8183 	blt.w	a79e <_dtoa_r+0xa8e>
    a498:	9901      	ldr	r1, [sp, #4]
    a49a:	ea49 0901 	orr.w	r9, r9, r1
    a49e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a4a0:	ea51 0909 	orrs.w	r9, r1, r9
    a4a4:	f000 817b 	beq.w	a79e <_dtoa_r+0xa8e>
    a4a8:	2a00      	cmp	r2, #0
    a4aa:	f300 81c6 	bgt.w	a83a <_dtoa_r+0xb2a>
    a4ae:	9a08      	ldr	r2, [sp, #32]
    a4b0:	703b      	strb	r3, [r7, #0]
    a4b2:	f107 0901 	add.w	r9, r7, #1
    a4b6:	4297      	cmp	r7, r2
    a4b8:	46cb      	mov	fp, r9
    a4ba:	f000 81c4 	beq.w	a846 <_dtoa_r+0xb36>
    a4be:	4629      	mov	r1, r5
    a4c0:	2300      	movs	r3, #0
    a4c2:	220a      	movs	r2, #10
    a4c4:	4620      	mov	r0, r4
    a4c6:	f7fe fc09 	bl	8cdc <__multadd>
    a4ca:	4546      	cmp	r6, r8
    a4cc:	4605      	mov	r5, r0
    a4ce:	4631      	mov	r1, r6
    a4d0:	f04f 0300 	mov.w	r3, #0
    a4d4:	f04f 020a 	mov.w	r2, #10
    a4d8:	4620      	mov	r0, r4
    a4da:	d012      	beq.n	a502 <_dtoa_r+0x7f2>
    a4dc:	f7fe fbfe 	bl	8cdc <__multadd>
    a4e0:	4641      	mov	r1, r8
    a4e2:	4606      	mov	r6, r0
    a4e4:	2300      	movs	r3, #0
    a4e6:	220a      	movs	r2, #10
    a4e8:	4620      	mov	r0, r4
    a4ea:	f7fe fbf7 	bl	8cdc <__multadd>
    a4ee:	464f      	mov	r7, r9
    a4f0:	4680      	mov	r8, r0
    a4f2:	e7a7      	b.n	a444 <_dtoa_r+0x734>
    a4f4:	4620      	mov	r0, r4
    a4f6:	9302      	str	r3, [sp, #8]
    a4f8:	f7fe fbe6 	bl	8cc8 <_Bfree>
    a4fc:	9b02      	ldr	r3, [sp, #8]
    a4fe:	2201      	movs	r2, #1
    a500:	e7c6      	b.n	a490 <_dtoa_r+0x780>
    a502:	f7fe fbeb 	bl	8cdc <__multadd>
    a506:	464f      	mov	r7, r9
    a508:	4606      	mov	r6, r0
    a50a:	4680      	mov	r8, r0
    a50c:	e79a      	b.n	a444 <_dtoa_r+0x734>
    a50e:	9b01      	ldr	r3, [sp, #4]
    a510:	2b02      	cmp	r3, #2
    a512:	dc71      	bgt.n	a5f8 <_dtoa_r+0x8e8>
    a514:	9b07      	ldr	r3, [sp, #28]
    a516:	2b00      	cmp	r3, #0
    a518:	f47f af7b 	bne.w	a412 <_dtoa_r+0x702>
    a51c:	9b04      	ldr	r3, [sp, #16]
    a51e:	4651      	mov	r1, sl
    a520:	3301      	adds	r3, #1
    a522:	4628      	mov	r0, r5
    a524:	9304      	str	r3, [sp, #16]
    a526:	f7ff fb5f 	bl	9be8 <quorem>
    a52a:	f8dd b000 	ldr.w	fp, [sp]
    a52e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    a532:	f80b 3b01 	strb.w	r3, [fp], #1
    a536:	2700      	movs	r7, #0
    a538:	e6eb      	b.n	a312 <_dtoa_r+0x602>
    a53a:	4651      	mov	r1, sl
    a53c:	4628      	mov	r0, r5
    a53e:	f7fe fe7b 	bl	9238 <__mcmp>
    a542:	2800      	cmp	r0, #0
    a544:	f6bf aeba 	bge.w	a2bc <_dtoa_r+0x5ac>
    a548:	4629      	mov	r1, r5
    a54a:	2300      	movs	r3, #0
    a54c:	220a      	movs	r2, #10
    a54e:	4620      	mov	r0, r4
    a550:	f7fe fbc4 	bl	8cdc <__multadd>
    a554:	9b04      	ldr	r3, [sp, #16]
    a556:	1e5f      	subs	r7, r3, #1
    a558:	9b07      	ldr	r3, [sp, #28]
    a55a:	4605      	mov	r5, r0
    a55c:	2b00      	cmp	r3, #0
    a55e:	f47f af4b 	bne.w	a3f8 <_dtoa_r+0x6e8>
    a562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a564:	2b00      	cmp	r3, #0
    a566:	f340 8218 	ble.w	a99a <_dtoa_r+0xc8a>
    a56a:	4699      	mov	r9, r3
    a56c:	e6b1      	b.n	a2d2 <_dtoa_r+0x5c2>
    a56e:	4bbc      	ldr	r3, [pc, #752]	; (a860 <_dtoa_r+0xb50>)
    a570:	9300      	str	r3, [sp, #0]
    a572:	3303      	adds	r3, #3
    a574:	e4a4      	b.n	9ec0 <_dtoa_r+0x1b0>
    a576:	201c      	movs	r0, #28
    a578:	e712      	b.n	a3a0 <_dtoa_r+0x690>
    a57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a57e:	2800      	cmp	r0, #0
    a580:	f47f ae74 	bne.w	a26c <_dtoa_r+0x55c>
    a584:	f3c1 0213 	ubfx	r2, r1, #0, #20
    a588:	2a00      	cmp	r2, #0
    a58a:	f000 80f4 	beq.w	a776 <_dtoa_r+0xa66>
    a58e:	9b02      	ldr	r3, [sp, #8]
    a590:	9308      	str	r3, [sp, #32]
    a592:	e66d      	b.n	a270 <_dtoa_r+0x560>
    a594:	2301      	movs	r3, #1
    a596:	9307      	str	r3, [sp, #28]
    a598:	9b04      	ldr	r3, [sp, #16]
    a59a:	445b      	add	r3, fp
    a59c:	f103 0901 	add.w	r9, r3, #1
    a5a0:	f1b9 0f01 	cmp.w	r9, #1
    a5a4:	46cc      	mov	ip, r9
    a5a6:	930b      	str	r3, [sp, #44]	; 0x2c
    a5a8:	bfb8      	it	lt
    a5aa:	f04f 0c01 	movlt.w	ip, #1
    a5ae:	2100      	movs	r1, #0
    a5b0:	f1bc 0f17 	cmp.w	ip, #23
    a5b4:	63e1      	str	r1, [r4, #60]	; 0x3c
    a5b6:	f77f acbc 	ble.w	9f32 <_dtoa_r+0x222>
    a5ba:	2001      	movs	r0, #1
    a5bc:	2204      	movs	r2, #4
    a5be:	0052      	lsls	r2, r2, #1
    a5c0:	f102 0314 	add.w	r3, r2, #20
    a5c4:	4563      	cmp	r3, ip
    a5c6:	4601      	mov	r1, r0
    a5c8:	f100 0001 	add.w	r0, r0, #1
    a5cc:	d9f7      	bls.n	a5be <_dtoa_r+0x8ae>
    a5ce:	63e1      	str	r1, [r4, #60]	; 0x3c
    a5d0:	e4af      	b.n	9f32 <_dtoa_r+0x222>
    a5d2:	2301      	movs	r3, #1
    a5d4:	9307      	str	r3, [sp, #28]
    a5d6:	f1bb 0f00 	cmp.w	fp, #0
    a5da:	dd52      	ble.n	a682 <_dtoa_r+0x972>
    a5dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    a5e0:	46d9      	mov	r9, fp
    a5e2:	46dc      	mov	ip, fp
    a5e4:	e7e3      	b.n	a5ae <_dtoa_r+0x89e>
    a5e6:	2300      	movs	r3, #0
    a5e8:	9307      	str	r3, [sp, #28]
    a5ea:	e7d5      	b.n	a598 <_dtoa_r+0x888>
    a5ec:	2300      	movs	r3, #0
    a5ee:	9307      	str	r3, [sp, #28]
    a5f0:	e7f1      	b.n	a5d6 <_dtoa_r+0x8c6>
    a5f2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a5f6:	9704      	str	r7, [sp, #16]
    a5f8:	f1b9 0f00 	cmp.w	r9, #0
    a5fc:	f47f ada1 	bne.w	a142 <_dtoa_r+0x432>
    a600:	4651      	mov	r1, sl
    a602:	464b      	mov	r3, r9
    a604:	2205      	movs	r2, #5
    a606:	4620      	mov	r0, r4
    a608:	f7fe fb68 	bl	8cdc <__multadd>
    a60c:	4601      	mov	r1, r0
    a60e:	4682      	mov	sl, r0
    a610:	4628      	mov	r0, r5
    a612:	f7fe fe11 	bl	9238 <__mcmp>
    a616:	2800      	cmp	r0, #0
    a618:	f77f ad93 	ble.w	a142 <_dtoa_r+0x432>
    a61c:	9b04      	ldr	r3, [sp, #16]
    a61e:	f103 0b01 	add.w	fp, r3, #1
    a622:	9b00      	ldr	r3, [sp, #0]
    a624:	2231      	movs	r2, #49	; 0x31
    a626:	4698      	mov	r8, r3
    a628:	f803 2b01 	strb.w	r2, [r3], #1
    a62c:	9300      	str	r3, [sp, #0]
    a62e:	4651      	mov	r1, sl
    a630:	4620      	mov	r0, r4
    a632:	f7fe fb49 	bl	8cc8 <_Bfree>
    a636:	f10b 0301 	add.w	r3, fp, #1
    a63a:	f8dd 9000 	ldr.w	r9, [sp]
    a63e:	9304      	str	r3, [sp, #16]
    a640:	f8cd 8000 	str.w	r8, [sp]
    a644:	2e00      	cmp	r6, #0
    a646:	f47f ae8f 	bne.w	a368 <_dtoa_r+0x658>
    a64a:	e691      	b.n	a370 <_dtoa_r+0x660>
    a64c:	eba3 0a0a 	sub.w	sl, r3, sl
    a650:	e5c5      	b.n	a1de <_dtoa_r+0x4ce>
    a652:	4631      	mov	r1, r6
    a654:	4652      	mov	r2, sl
    a656:	4620      	mov	r0, r4
    a658:	f7fe fd16 	bl	9088 <__pow5mult>
    a65c:	462a      	mov	r2, r5
    a65e:	4601      	mov	r1, r0
    a660:	4606      	mov	r6, r0
    a662:	4620      	mov	r0, r4
    a664:	f7fe fc62 	bl	8f2c <__multiply>
    a668:	4629      	mov	r1, r5
    a66a:	4605      	mov	r5, r0
    a66c:	4620      	mov	r0, r4
    a66e:	f7fe fb2b 	bl	8cc8 <_Bfree>
    a672:	e5ea      	b.n	a24a <_dtoa_r+0x53a>
    a674:	2002      	movs	r0, #2
    a676:	eeb0 5b48 	vmov.f64	d5, d8
    a67a:	e481      	b.n	9f80 <_dtoa_r+0x270>
    a67c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    a680:	e68e      	b.n	a3a0 <_dtoa_r+0x690>
    a682:	f04f 0b01 	mov.w	fp, #1
    a686:	46d9      	mov	r9, fp
    a688:	e44f      	b.n	9f2a <_dtoa_r+0x21a>
    a68a:	d103      	bne.n	a694 <_dtoa_r+0x984>
    a68c:	9b01      	ldr	r3, [sp, #4]
    a68e:	07db      	lsls	r3, r3, #31
    a690:	f53f ae4c 	bmi.w	a32c <_dtoa_r+0x61c>
    a694:	46d9      	mov	r9, fp
    a696:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    a69a:	2b30      	cmp	r3, #48	; 0x30
    a69c:	d0fa      	beq.n	a694 <_dtoa_r+0x984>
    a69e:	e657      	b.n	a350 <_dtoa_r+0x640>
    a6a0:	9b04      	ldr	r3, [sp, #16]
    a6a2:	9a00      	ldr	r2, [sp, #0]
    a6a4:	3301      	adds	r3, #1
    a6a6:	9304      	str	r3, [sp, #16]
    a6a8:	2331      	movs	r3, #49	; 0x31
    a6aa:	7013      	strb	r3, [r2, #0]
    a6ac:	e650      	b.n	a350 <_dtoa_r+0x640>
    a6ae:	f1ba 0f00 	cmp.w	sl, #0
    a6b2:	f000 8123 	beq.w	a8fc <_dtoa_r+0xbec>
    a6b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
    a6ba:	9b06      	ldr	r3, [sp, #24]
    a6bc:	9309      	str	r3, [sp, #36]	; 0x24
    a6be:	4413      	add	r3, r2
    a6c0:	f8dd a020 	ldr.w	sl, [sp, #32]
    a6c4:	9306      	str	r3, [sp, #24]
    a6c6:	4490      	add	r8, r2
    a6c8:	e592      	b.n	a1f0 <_dtoa_r+0x4e0>
    a6ca:	ee07 0a90 	vmov	s15, r0
    a6ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    a6d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a6d6:	eea6 5b07 	vfma.f64	d5, d6, d7
    a6da:	ee15 2a90 	vmov	r2, s11
    a6de:	ec51 0b15 	vmov	r0, r1, d5
    a6e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    a6e6:	ec41 0b15 	vmov	d5, r0, r1
    a6ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    a6ee:	ee36 7b47 	vsub.f64	d7, d6, d7
    a6f2:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a6fa:	f300 8137 	bgt.w	a96c <_dtoa_r+0xc5c>
    a6fe:	eeb1 5b45 	vneg.f64	d5, d5
    a702:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a70a:	f57f acfb 	bpl.w	a104 <_dtoa_r+0x3f4>
    a70e:	f04f 0a00 	mov.w	sl, #0
    a712:	4656      	mov	r6, sl
    a714:	e515      	b.n	a142 <_dtoa_r+0x432>
    a716:	f000 80f5 	beq.w	a904 <_dtoa_r+0xbf4>
    a71a:	9b04      	ldr	r3, [sp, #16]
    a71c:	4951      	ldr	r1, [pc, #324]	; (a864 <_dtoa_r+0xb54>)
    a71e:	425a      	negs	r2, r3
    a720:	f002 000f 	and.w	r0, r2, #15
    a724:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    a728:	ed91 6b00 	vldr	d6, [r1]
    a72c:	1112      	asrs	r2, r2, #4
    a72e:	ee28 6b06 	vmul.f64	d6, d8, d6
    a732:	f000 8142 	beq.w	a9ba <_dtoa_r+0xcaa>
    a736:	eeb0 7b46 	vmov.f64	d7, d6
    a73a:	494b      	ldr	r1, [pc, #300]	; (a868 <_dtoa_r+0xb58>)
    a73c:	2600      	movs	r6, #0
    a73e:	2002      	movs	r0, #2
    a740:	07d3      	lsls	r3, r2, #31
    a742:	d505      	bpl.n	a750 <_dtoa_r+0xa40>
    a744:	ed91 5b00 	vldr	d5, [r1]
    a748:	3001      	adds	r0, #1
    a74a:	2601      	movs	r6, #1
    a74c:	ee27 7b05 	vmul.f64	d7, d7, d5
    a750:	1052      	asrs	r2, r2, #1
    a752:	f101 0108 	add.w	r1, r1, #8
    a756:	d1f3      	bne.n	a740 <_dtoa_r+0xa30>
    a758:	2e00      	cmp	r6, #0
    a75a:	fe06 6b07 	vseleq.f64	d6, d6, d7
    a75e:	e41e      	b.n	9f9e <_dtoa_r+0x28e>
    a760:	9b02      	ldr	r3, [sp, #8]
    a762:	2b00      	cmp	r3, #0
    a764:	f47f ae37 	bne.w	a3d6 <_dtoa_r+0x6c6>
    a768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a76c:	f3c1 0213 	ubfx	r2, r1, #0, #20
    a770:	2a00      	cmp	r2, #0
    a772:	f040 8137 	bne.w	a9e4 <_dtoa_r+0xcd4>
    a776:	4a3d      	ldr	r2, [pc, #244]	; (a86c <_dtoa_r+0xb5c>)
    a778:	400a      	ands	r2, r1
    a77a:	2a00      	cmp	r2, #0
    a77c:	f000 80fa 	beq.w	a974 <_dtoa_r+0xc64>
    a780:	9b06      	ldr	r3, [sp, #24]
    a782:	3301      	adds	r3, #1
    a784:	9306      	str	r3, [sp, #24]
    a786:	2301      	movs	r3, #1
    a788:	f108 0801 	add.w	r8, r8, #1
    a78c:	9308      	str	r3, [sp, #32]
    a78e:	e56f      	b.n	a270 <_dtoa_r+0x560>
    a790:	4629      	mov	r1, r5
    a792:	9a08      	ldr	r2, [sp, #32]
    a794:	4620      	mov	r0, r4
    a796:	f7fe fc77 	bl	9088 <__pow5mult>
    a79a:	4605      	mov	r5, r0
    a79c:	e55a      	b.n	a254 <_dtoa_r+0x544>
    a79e:	2a00      	cmp	r2, #0
    a7a0:	dd12      	ble.n	a7c8 <_dtoa_r+0xab8>
    a7a2:	4629      	mov	r1, r5
    a7a4:	2201      	movs	r2, #1
    a7a6:	4620      	mov	r0, r4
    a7a8:	9301      	str	r3, [sp, #4]
    a7aa:	f7fe fccd 	bl	9148 <__lshift>
    a7ae:	4651      	mov	r1, sl
    a7b0:	4605      	mov	r5, r0
    a7b2:	f7fe fd41 	bl	9238 <__mcmp>
    a7b6:	2800      	cmp	r0, #0
    a7b8:	9b01      	ldr	r3, [sp, #4]
    a7ba:	f340 80e1 	ble.w	a980 <_dtoa_r+0xc70>
    a7be:	2b39      	cmp	r3, #57	; 0x39
    a7c0:	f000 80ca 	beq.w	a958 <_dtoa_r+0xc48>
    a7c4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    a7c8:	46b9      	mov	r9, r7
    a7ca:	f809 3b01 	strb.w	r3, [r9], #1
    a7ce:	9b04      	ldr	r3, [sp, #16]
    a7d0:	3301      	adds	r3, #1
    a7d2:	4637      	mov	r7, r6
    a7d4:	9304      	str	r3, [sp, #16]
    a7d6:	4646      	mov	r6, r8
    a7d8:	e5ba      	b.n	a350 <_dtoa_r+0x640>
    a7da:	ee38 8b08 	vadd.f64	d8, d8, d8
    a7de:	eeb4 8bc6 	vcmpe.f64	d8, d6
    a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7e6:	dc0a      	bgt.n	a7fe <_dtoa_r+0xaee>
    a7e8:	eeb4 8b46 	vcmp.f64	d8, d6
    a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7f0:	f47f acdc 	bne.w	a1ac <_dtoa_r+0x49c>
    a7f4:	ee17 3a10 	vmov	r3, s14
    a7f8:	07d8      	lsls	r0, r3, #31
    a7fa:	f57f acd7 	bpl.w	a1ac <_dtoa_r+0x49c>
    a7fe:	9a00      	ldr	r2, [sp, #0]
    a800:	e454      	b.n	a0ac <_dtoa_r+0x39c>
    a802:	6871      	ldr	r1, [r6, #4]
    a804:	4620      	mov	r0, r4
    a806:	f7fe fa39 	bl	8c7c <_Balloc>
    a80a:	4607      	mov	r7, r0
    a80c:	2800      	cmp	r0, #0
    a80e:	f000 80de 	beq.w	a9ce <_dtoa_r+0xcbe>
    a812:	6933      	ldr	r3, [r6, #16]
    a814:	3302      	adds	r3, #2
    a816:	009a      	lsls	r2, r3, #2
    a818:	f106 010c 	add.w	r1, r6, #12
    a81c:	300c      	adds	r0, #12
    a81e:	f7f9 f96b 	bl	3af8 <memcpy>
    a822:	4639      	mov	r1, r7
    a824:	2201      	movs	r2, #1
    a826:	4620      	mov	r0, r4
    a828:	f7fe fc8e 	bl	9148 <__lshift>
    a82c:	4680      	mov	r8, r0
    a82e:	e5fe      	b.n	a42e <_dtoa_r+0x71e>
    a830:	9b06      	ldr	r3, [sp, #24]
    a832:	eba3 0309 	sub.w	r3, r3, r9
    a836:	9309      	str	r3, [sp, #36]	; 0x24
    a838:	e4da      	b.n	a1f0 <_dtoa_r+0x4e0>
    a83a:	2b39      	cmp	r3, #57	; 0x39
    a83c:	f000 808c 	beq.w	a958 <_dtoa_r+0xc48>
    a840:	46b9      	mov	r9, r7
    a842:	3301      	adds	r3, #1
    a844:	e7c1      	b.n	a7ca <_dtoa_r+0xaba>
    a846:	9a04      	ldr	r2, [sp, #16]
    a848:	3201      	adds	r2, #1
    a84a:	4637      	mov	r7, r6
    a84c:	9204      	str	r2, [sp, #16]
    a84e:	4646      	mov	r6, r8
    a850:	e55f      	b.n	a312 <_dtoa_r+0x602>
    a852:	4629      	mov	r1, r5
    a854:	4620      	mov	r0, r4
    a856:	f7fe fc17 	bl	9088 <__pow5mult>
    a85a:	4605      	mov	r5, r0
    a85c:	e4fa      	b.n	a254 <_dtoa_r+0x544>
    a85e:	bf00      	nop
    a860:	20000a18 	.word	0x20000a18
    a864:	200002a8 	.word	0x200002a8
    a868:	20000280 	.word	0x20000280
    a86c:	7ff00000 	.word	0x7ff00000
    a870:	4b5e      	ldr	r3, [pc, #376]	; (a9ec <_dtoa_r+0xcdc>)
    a872:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    a876:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    a87a:	ed1c 3b02 	vldr	d3, [ip, #-8]
    a87e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    a882:	ee36 7b47 	vsub.f64	d7, d6, d7
    a886:	ec41 0b16 	vmov	d6, r0, r1
    a88a:	ee15 1a90 	vmov	r1, s11
    a88e:	ee23 3b06 	vmul.f64	d3, d3, d6
    a892:	9800      	ldr	r0, [sp, #0]
    a894:	3130      	adds	r1, #48	; 0x30
    a896:	2a01      	cmp	r2, #1
    a898:	f800 1b01 	strb.w	r1, [r0], #1
    a89c:	f000 8083 	beq.w	a9a6 <_dtoa_r+0xc96>
    a8a0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a8a4:	9b00      	ldr	r3, [sp, #0]
    a8a6:	1899      	adds	r1, r3, r2
    a8a8:	ee27 7b04 	vmul.f64	d7, d7, d4
    a8ac:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    a8b0:	ee16 3a90 	vmov	r3, s13
    a8b4:	3330      	adds	r3, #48	; 0x30
    a8b6:	f800 3b01 	strb.w	r3, [r0], #1
    a8ba:	4281      	cmp	r1, r0
    a8bc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    a8c0:	ee37 7b45 	vsub.f64	d7, d7, d5
    a8c4:	d1f0      	bne.n	a8a8 <_dtoa_r+0xb98>
    a8c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    a8ca:	ee33 5b06 	vadd.f64	d5, d3, d6
    a8ce:	eeb4 5bc7 	vcmpe.f64	d5, d7
    a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8d6:	f53f abe3 	bmi.w	a0a0 <_dtoa_r+0x390>
    a8da:	ee36 6b43 	vsub.f64	d6, d6, d3
    a8de:	eeb4 6bc7 	vcmpe.f64	d6, d7
    a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a8e6:	f77f ac0d 	ble.w	a104 <_dtoa_r+0x3f4>
    a8ea:	4689      	mov	r9, r1
    a8ec:	3901      	subs	r1, #1
    a8ee:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    a8f2:	2b30      	cmp	r3, #48	; 0x30
    a8f4:	d0f9      	beq.n	a8ea <_dtoa_r+0xbda>
    a8f6:	1c73      	adds	r3, r6, #1
    a8f8:	9304      	str	r3, [sp, #16]
    a8fa:	e539      	b.n	a370 <_dtoa_r+0x660>
    a8fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a8fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    a902:	e6da      	b.n	a6ba <_dtoa_r+0x9aa>
    a904:	2002      	movs	r0, #2
    a906:	eeb0 6b48 	vmov.f64	d6, d8
    a90a:	f7ff bb48 	b.w	9f9e <_dtoa_r+0x28e>
    a90e:	f1b9 0f00 	cmp.w	r9, #0
    a912:	f43f aeda 	beq.w	a6ca <_dtoa_r+0x9ba>
    a916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a918:	2a00      	cmp	r2, #0
    a91a:	f77f abf3 	ble.w	a104 <_dtoa_r+0x3f4>
    a91e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    a922:	ee26 6b04 	vmul.f64	d6, d6, d4
    a926:	3001      	adds	r0, #1
    a928:	ee07 0a90 	vmov	s15, r0
    a92c:	9b04      	ldr	r3, [sp, #16]
    a92e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    a932:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    a936:	eea6 7b05 	vfma.f64	d7, d6, d5
    a93a:	ee17 ca90 	vmov	ip, s15
    a93e:	ec51 0b17 	vmov	r0, r1, d7
    a942:	1e5e      	subs	r6, r3, #1
    a944:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    a948:	f7ff bb47 	b.w	9fda <_dtoa_r+0x2ca>
    a94c:	9b04      	ldr	r3, [sp, #16]
    a94e:	3301      	adds	r3, #1
    a950:	9304      	str	r3, [sp, #16]
    a952:	2331      	movs	r3, #49	; 0x31
    a954:	f7ff bbb1 	b.w	a0ba <_dtoa_r+0x3aa>
    a958:	9b04      	ldr	r3, [sp, #16]
    a95a:	46bb      	mov	fp, r7
    a95c:	3301      	adds	r3, #1
    a95e:	9304      	str	r3, [sp, #16]
    a960:	2339      	movs	r3, #57	; 0x39
    a962:	4637      	mov	r7, r6
    a964:	f80b 3b01 	strb.w	r3, [fp], #1
    a968:	4646      	mov	r6, r8
    a96a:	e4e1      	b.n	a330 <_dtoa_r+0x620>
    a96c:	f04f 0a00 	mov.w	sl, #0
    a970:	4656      	mov	r6, sl
    a972:	e653      	b.n	a61c <_dtoa_r+0x90c>
    a974:	9208      	str	r2, [sp, #32]
    a976:	e47b      	b.n	a270 <_dtoa_r+0x560>
    a978:	1c73      	adds	r3, r6, #1
    a97a:	9304      	str	r3, [sp, #16]
    a97c:	4689      	mov	r9, r1
    a97e:	e4f7      	b.n	a370 <_dtoa_r+0x660>
    a980:	f47f af22 	bne.w	a7c8 <_dtoa_r+0xab8>
    a984:	07da      	lsls	r2, r3, #31
    a986:	f57f af1f 	bpl.w	a7c8 <_dtoa_r+0xab8>
    a98a:	e718      	b.n	a7be <_dtoa_r+0xaae>
    a98c:	2b39      	cmp	r3, #57	; 0x39
    a98e:	d0e3      	beq.n	a958 <_dtoa_r+0xc48>
    a990:	f1b9 0f00 	cmp.w	r9, #0
    a994:	f73f af16 	bgt.w	a7c4 <_dtoa_r+0xab4>
    a998:	e716      	b.n	a7c8 <_dtoa_r+0xab8>
    a99a:	9b01      	ldr	r3, [sp, #4]
    a99c:	2b02      	cmp	r3, #2
    a99e:	f73f ae28 	bgt.w	a5f2 <_dtoa_r+0x8e2>
    a9a2:	9704      	str	r7, [sp, #16]
    a9a4:	e5ba      	b.n	a51c <_dtoa_r+0x80c>
    a9a6:	4601      	mov	r1, r0
    a9a8:	e78d      	b.n	a8c6 <_dtoa_r+0xbb6>
    a9aa:	9b01      	ldr	r3, [sp, #4]
    a9ac:	2b02      	cmp	r3, #2
    a9ae:	f73f ae20 	bgt.w	a5f2 <_dtoa_r+0x8e2>
    a9b2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    a9b6:	9704      	str	r7, [sp, #16]
    a9b8:	e52b      	b.n	a412 <_dtoa_r+0x702>
    a9ba:	2002      	movs	r0, #2
    a9bc:	f7ff baef 	b.w	9f9e <_dtoa_r+0x28e>
    a9c0:	4b0b      	ldr	r3, [pc, #44]	; (a9f0 <_dtoa_r+0xce0>)
    a9c2:	480c      	ldr	r0, [pc, #48]	; (a9f4 <_dtoa_r+0xce4>)
    a9c4:	2200      	movs	r2, #0
    a9c6:	f240 11af 	movw	r1, #431	; 0x1af
    a9ca:	f7ff f8b1 	bl	9b30 <__assert_func>
    a9ce:	4b08      	ldr	r3, [pc, #32]	; (a9f0 <_dtoa_r+0xce0>)
    a9d0:	4808      	ldr	r0, [pc, #32]	; (a9f4 <_dtoa_r+0xce4>)
    a9d2:	463a      	mov	r2, r7
    a9d4:	f240 21ef 	movw	r1, #751	; 0x2ef
    a9d8:	f7ff f8aa 	bl	9b30 <__assert_func>
    a9dc:	4b06      	ldr	r3, [pc, #24]	; (a9f8 <_dtoa_r+0xce8>)
    a9de:	9300      	str	r3, [sp, #0]
    a9e0:	f7ff b9d2 	b.w	9d88 <_dtoa_r+0x78>
    a9e4:	9b02      	ldr	r3, [sp, #8]
    a9e6:	9308      	str	r3, [sp, #32]
    a9e8:	e4f7      	b.n	a3da <_dtoa_r+0x6ca>
    a9ea:	bf00      	nop
    a9ec:	200002a8 	.word	0x200002a8
    a9f0:	2000070c 	.word	0x2000070c
    a9f4:	20000a1c 	.word	0x20000a1c
    a9f8:	20000a0c 	.word	0x20000a0c

0000a9fc <_wcrtomb_r>:
    a9fc:	b570      	push	{r4, r5, r6, lr}
    a9fe:	4605      	mov	r5, r0
    aa00:	b084      	sub	sp, #16
    aa02:	b15b      	cbz	r3, aa1c <_wcrtomb_r+0x20>
    aa04:	461c      	mov	r4, r3
    aa06:	b169      	cbz	r1, aa24 <_wcrtomb_r+0x28>
    aa08:	4b0e      	ldr	r3, [pc, #56]	; (aa44 <_wcrtomb_r+0x48>)
    aa0a:	4628      	mov	r0, r5
    aa0c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    aa10:	4623      	mov	r3, r4
    aa12:	47b0      	blx	r6
    aa14:	1c43      	adds	r3, r0, #1
    aa16:	d00f      	beq.n	aa38 <_wcrtomb_r+0x3c>
    aa18:	b004      	add	sp, #16
    aa1a:	bd70      	pop	{r4, r5, r6, pc}
    aa1c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    aa20:	2900      	cmp	r1, #0
    aa22:	d1f1      	bne.n	aa08 <_wcrtomb_r+0xc>
    aa24:	4a07      	ldr	r2, [pc, #28]	; (aa44 <_wcrtomb_r+0x48>)
    aa26:	4623      	mov	r3, r4
    aa28:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    aa2c:	4628      	mov	r0, r5
    aa2e:	460a      	mov	r2, r1
    aa30:	a901      	add	r1, sp, #4
    aa32:	47b0      	blx	r6
    aa34:	1c43      	adds	r3, r0, #1
    aa36:	d1ef      	bne.n	aa18 <_wcrtomb_r+0x1c>
    aa38:	2200      	movs	r2, #0
    aa3a:	238a      	movs	r3, #138	; 0x8a
    aa3c:	6022      	str	r2, [r4, #0]
    aa3e:	602b      	str	r3, [r5, #0]
    aa40:	b004      	add	sp, #16
    aa42:	bd70      	pop	{r4, r5, r6, pc}
    aa44:	200013e0 	.word	0x200013e0

0000aa48 <_wcsrtombs_r>:
    aa48:	b510      	push	{r4, lr}
    aa4a:	b082      	sub	sp, #8
    aa4c:	9c04      	ldr	r4, [sp, #16]
    aa4e:	e9cd 3400 	strd	r3, r4, [sp]
    aa52:	f04f 33ff 	mov.w	r3, #4294967295
    aa56:	f001 fb47 	bl	c0e8 <_wcsnrtombs_r>
    aa5a:	b002      	add	sp, #8
    aa5c:	bd10      	pop	{r4, pc}
    aa5e:	bf00      	nop

0000aa60 <fiprintf>:
    aa60:	b40e      	push	{r1, r2, r3}
    aa62:	b510      	push	{r4, lr}
    aa64:	b083      	sub	sp, #12
    aa66:	ab05      	add	r3, sp, #20
    aa68:	4c06      	ldr	r4, [pc, #24]	; (aa84 <fiprintf+0x24>)
    aa6a:	f853 2b04 	ldr.w	r2, [r3], #4
    aa6e:	9301      	str	r3, [sp, #4]
    aa70:	4601      	mov	r1, r0
    aa72:	6820      	ldr	r0, [r4, #0]
    aa74:	f000 f844 	bl	ab00 <_vfiprintf_r>
    aa78:	b003      	add	sp, #12
    aa7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa7e:	b003      	add	sp, #12
    aa80:	4770      	bx	lr
    aa82:	bf00      	nop
    aa84:	20001968 	.word	0x20001968

0000aa88 <__sprint_r.part.0>:
    aa88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa8c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    aa8e:	049c      	lsls	r4, r3, #18
    aa90:	4690      	mov	r8, r2
    aa92:	d52d      	bpl.n	aaf0 <__sprint_r.part.0+0x68>
    aa94:	6893      	ldr	r3, [r2, #8]
    aa96:	6812      	ldr	r2, [r2, #0]
    aa98:	b343      	cbz	r3, aaec <__sprint_r.part.0+0x64>
    aa9a:	468b      	mov	fp, r1
    aa9c:	4606      	mov	r6, r0
    aa9e:	f102 0908 	add.w	r9, r2, #8
    aaa2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    aaa6:	ea5f 079a 	movs.w	r7, sl, lsr #2
    aaaa:	d015      	beq.n	aad8 <__sprint_r.part.0+0x50>
    aaac:	3d04      	subs	r5, #4
    aaae:	2400      	movs	r4, #0
    aab0:	e001      	b.n	aab6 <__sprint_r.part.0+0x2e>
    aab2:	42a7      	cmp	r7, r4
    aab4:	d00e      	beq.n	aad4 <__sprint_r.part.0+0x4c>
    aab6:	f855 1f04 	ldr.w	r1, [r5, #4]!
    aaba:	465a      	mov	r2, fp
    aabc:	4630      	mov	r0, r6
    aabe:	f001 fa5b 	bl	bf78 <_fputwc_r>
    aac2:	1c43      	adds	r3, r0, #1
    aac4:	f104 0401 	add.w	r4, r4, #1
    aac8:	d1f3      	bne.n	aab2 <__sprint_r.part.0+0x2a>
    aaca:	2300      	movs	r3, #0
    aacc:	e9c8 3301 	strd	r3, r3, [r8, #4]
    aad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aad4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    aad8:	f02a 0a03 	bic.w	sl, sl, #3
    aadc:	eba3 030a 	sub.w	r3, r3, sl
    aae0:	f8c8 3008 	str.w	r3, [r8, #8]
    aae4:	f109 0908 	add.w	r9, r9, #8
    aae8:	2b00      	cmp	r3, #0
    aaea:	d1da      	bne.n	aaa2 <__sprint_r.part.0+0x1a>
    aaec:	2000      	movs	r0, #0
    aaee:	e7ec      	b.n	aaca <__sprint_r.part.0+0x42>
    aaf0:	f001 f80c 	bl	bb0c <__sfvwrite_r>
    aaf4:	2300      	movs	r3, #0
    aaf6:	e9c8 3301 	strd	r3, r3, [r8, #4]
    aafa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aafe:	bf00      	nop

0000ab00 <_vfiprintf_r>:
    ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab04:	ed2d 8b02 	vpush	{d8}
    ab08:	b0c5      	sub	sp, #276	; 0x114
    ab0a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    ab0e:	4683      	mov	fp, r0
    ab10:	ee08 1a10 	vmov	s16, r1
    ab14:	4616      	mov	r6, r2
    ab16:	2100      	movs	r1, #0
    ab18:	2208      	movs	r2, #8
    ab1a:	4650      	mov	r0, sl
    ab1c:	461c      	mov	r4, r3
    ab1e:	9307      	str	r3, [sp, #28]
    ab20:	f7fc fcb6 	bl	7490 <memset>
    ab24:	f1bb 0f00 	cmp.w	fp, #0
    ab28:	d004      	beq.n	ab34 <_vfiprintf_r+0x34>
    ab2a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    ab2e:	2b00      	cmp	r3, #0
    ab30:	f000 86a0 	beq.w	b874 <_vfiprintf_r+0xd74>
    ab34:	ee18 2a10 	vmov	r2, s16
    ab38:	6e53      	ldr	r3, [r2, #100]	; 0x64
    ab3a:	07db      	lsls	r3, r3, #31
    ab3c:	f140 8513 	bpl.w	b566 <_vfiprintf_r+0xa66>
    ab40:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    ab44:	b28a      	uxth	r2, r1
    ab46:	0495      	lsls	r5, r2, #18
    ab48:	d40b      	bmi.n	ab62 <_vfiprintf_r+0x62>
    ab4a:	ee18 3a10 	vmov	r3, s16
    ab4e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    ab52:	8199      	strh	r1, [r3, #12]
    ab54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ab56:	b28a      	uxth	r2, r1
    ab58:	ee18 1a10 	vmov	r1, s16
    ab5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ab60:	664b      	str	r3, [r1, #100]	; 0x64
    ab62:	0710      	lsls	r0, r2, #28
    ab64:	f140 8105 	bpl.w	ad72 <_vfiprintf_r+0x272>
    ab68:	ee18 3a10 	vmov	r3, s16
    ab6c:	691b      	ldr	r3, [r3, #16]
    ab6e:	2b00      	cmp	r3, #0
    ab70:	f000 80ff 	beq.w	ad72 <_vfiprintf_r+0x272>
    ab74:	f002 031a 	and.w	r3, r2, #26
    ab78:	2b0a      	cmp	r3, #10
    ab7a:	f000 810a 	beq.w	ad92 <_vfiprintf_r+0x292>
    ab7e:	2300      	movs	r3, #0
    ab80:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    ab84:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    ab88:	aa1b      	add	r2, sp, #108	; 0x6c
    ab8a:	930c      	str	r3, [sp, #48]	; 0x30
    ab8c:	9218      	str	r2, [sp, #96]	; 0x60
    ab8e:	4691      	mov	r9, r2
    ab90:	930b      	str	r3, [sp, #44]	; 0x2c
    ab92:	9305      	str	r3, [sp, #20]
    ab94:	46b0      	mov	r8, r6
    ab96:	4644      	mov	r4, r8
    ab98:	4ba8      	ldr	r3, [pc, #672]	; (ae3c <_vfiprintf_r+0x33c>)
    ab9a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ab9e:	f7fc ffbb 	bl	7b18 <__locale_mb_cur_max>
    aba2:	4622      	mov	r2, r4
    aba4:	4603      	mov	r3, r0
    aba6:	a912      	add	r1, sp, #72	; 0x48
    aba8:	f8cd a000 	str.w	sl, [sp]
    abac:	4658      	mov	r0, fp
    abae:	47a8      	blx	r5
    abb0:	2800      	cmp	r0, #0
    abb2:	f000 8145 	beq.w	ae40 <_vfiprintf_r+0x340>
    abb6:	f2c0 8139 	blt.w	ae2c <_vfiprintf_r+0x32c>
    abba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    abbc:	2a25      	cmp	r2, #37	; 0x25
    abbe:	4603      	mov	r3, r0
    abc0:	d001      	beq.n	abc6 <_vfiprintf_r+0xc6>
    abc2:	441c      	add	r4, r3
    abc4:	e7e8      	b.n	ab98 <_vfiprintf_r+0x98>
    abc6:	ebb4 0608 	subs.w	r6, r4, r8
    abca:	4605      	mov	r5, r0
    abcc:	f040 813c 	bne.w	ae48 <_vfiprintf_r+0x348>
    abd0:	2300      	movs	r3, #0
    abd2:	7861      	ldrb	r1, [r4, #1]
    abd4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    abd8:	f104 0801 	add.w	r8, r4, #1
    abdc:	9306      	str	r3, [sp, #24]
    abde:	f04f 37ff 	mov.w	r7, #4294967295
    abe2:	461e      	mov	r6, r3
    abe4:	242b      	movs	r4, #43	; 0x2b
    abe6:	f108 0801 	add.w	r8, r8, #1
    abea:	f1a1 0320 	sub.w	r3, r1, #32
    abee:	2b5a      	cmp	r3, #90	; 0x5a
    abf0:	f200 8178 	bhi.w	aee4 <_vfiprintf_r+0x3e4>
    abf4:	e8df f013 	tbh	[pc, r3, lsl #1]
    abf8:	017602b5 	.word	0x017602b5
    abfc:	02b00176 	.word	0x02b00176
    ac00:	01760176 	.word	0x01760176
    ac04:	006a0176 	.word	0x006a0176
    ac08:	01760176 	.word	0x01760176
    ac0c:	028d027d 	.word	0x028d027d
    ac10:	02880176 	.word	0x02880176
    ac14:	01760297 	.word	0x01760297
    ac18:	005b0292 	.word	0x005b0292
    ac1c:	005b005b 	.word	0x005b005b
    ac20:	005b005b 	.word	0x005b005b
    ac24:	005b005b 	.word	0x005b005b
    ac28:	005b005b 	.word	0x005b005b
    ac2c:	01760176 	.word	0x01760176
    ac30:	01760176 	.word	0x01760176
    ac34:	01760176 	.word	0x01760176
    ac38:	01760176 	.word	0x01760176
    ac3c:	025c0176 	.word	0x025c0176
    ac40:	01760084 	.word	0x01760084
    ac44:	01760176 	.word	0x01760176
    ac48:	01760176 	.word	0x01760176
    ac4c:	01760176 	.word	0x01760176
    ac50:	01760176 	.word	0x01760176
    ac54:	00e80176 	.word	0x00e80176
    ac58:	01760176 	.word	0x01760176
    ac5c:	02330176 	.word	0x02330176
    ac60:	02da0176 	.word	0x02da0176
    ac64:	01760176 	.word	0x01760176
    ac68:	0176058b 	.word	0x0176058b
    ac6c:	01760176 	.word	0x01760176
    ac70:	01760176 	.word	0x01760176
    ac74:	01760176 	.word	0x01760176
    ac78:	01760176 	.word	0x01760176
    ac7c:	025c0176 	.word	0x025c0176
    ac80:	01760086 	.word	0x01760086
    ac84:	01760176 	.word	0x01760176
    ac88:	008602cd 	.word	0x008602cd
    ac8c:	0176007f 	.word	0x0176007f
    ac90:	017602c0 	.word	0x017602c0
    ac94:	00ea02fd 	.word	0x00ea02fd
    ac98:	007f02ed 	.word	0x007f02ed
    ac9c:	02330176 	.word	0x02330176
    aca0:	0569007c 	.word	0x0569007c
    aca4:	01760176 	.word	0x01760176
    aca8:	0176056b 	.word	0x0176056b
    acac:	007c      	.short	0x007c
    acae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    acb2:	2200      	movs	r2, #0
    acb4:	f818 1b01 	ldrb.w	r1, [r8], #1
    acb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    acbc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    acc0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    acc4:	2b09      	cmp	r3, #9
    acc6:	d9f5      	bls.n	acb4 <_vfiprintf_r+0x1b4>
    acc8:	9206      	str	r2, [sp, #24]
    acca:	e78e      	b.n	abea <_vfiprintf_r+0xea>
    accc:	4658      	mov	r0, fp
    acce:	f7fe fed7 	bl	9a80 <_localeconv_r>
    acd2:	6843      	ldr	r3, [r0, #4]
    acd4:	930d      	str	r3, [sp, #52]	; 0x34
    acd6:	4618      	mov	r0, r3
    acd8:	f7fd f992 	bl	8000 <strlen>
    acdc:	900e      	str	r0, [sp, #56]	; 0x38
    acde:	4605      	mov	r5, r0
    ace0:	4658      	mov	r0, fp
    ace2:	f7fe fecd 	bl	9a80 <_localeconv_r>
    ace6:	6883      	ldr	r3, [r0, #8]
    ace8:	930b      	str	r3, [sp, #44]	; 0x2c
    acea:	2d00      	cmp	r5, #0
    acec:	f040 84d6 	bne.w	b69c <_vfiprintf_r+0xb9c>
    acf0:	f898 1000 	ldrb.w	r1, [r8]
    acf4:	e777      	b.n	abe6 <_vfiprintf_r+0xe6>
    acf6:	f898 1000 	ldrb.w	r1, [r8]
    acfa:	f046 0620 	orr.w	r6, r6, #32
    acfe:	e772      	b.n	abe6 <_vfiprintf_r+0xe6>
    ad00:	f046 0610 	orr.w	r6, r6, #16
    ad04:	06b4      	lsls	r4, r6, #26
    ad06:	f140 818e 	bpl.w	b026 <_vfiprintf_r+0x526>
    ad0a:	9b07      	ldr	r3, [sp, #28]
    ad0c:	3307      	adds	r3, #7
    ad0e:	f023 0307 	bic.w	r3, r3, #7
    ad12:	461a      	mov	r2, r3
    ad14:	6859      	ldr	r1, [r3, #4]
    ad16:	f852 3b08 	ldr.w	r3, [r2], #8
    ad1a:	9207      	str	r2, [sp, #28]
    ad1c:	460a      	mov	r2, r1
    ad1e:	2900      	cmp	r1, #0
    ad20:	f2c0 8470 	blt.w	b604 <_vfiprintf_r+0xb04>
    ad24:	1c79      	adds	r1, r7, #1
    ad26:	f000 85a2 	beq.w	b86e <_vfiprintf_r+0xd6e>
    ad2a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    ad2e:	9103      	str	r1, [sp, #12]
    ad30:	ea53 0102 	orrs.w	r1, r3, r2
    ad34:	f000 843f 	beq.w	b5b6 <_vfiprintf_r+0xab6>
    ad38:	2b0a      	cmp	r3, #10
    ad3a:	f172 0100 	sbcs.w	r1, r2, #0
    ad3e:	f080 8541 	bcs.w	b7c4 <_vfiprintf_r+0xcc4>
    ad42:	3330      	adds	r3, #48	; 0x30
    ad44:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ad48:	9e03      	ldr	r6, [sp, #12]
    ad4a:	2301      	movs	r3, #1
    ad4c:	9304      	str	r3, [sp, #16]
    ad4e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    ad52:	9b04      	ldr	r3, [sp, #16]
    ad54:	42bb      	cmp	r3, r7
    ad56:	bfb8      	it	lt
    ad58:	463b      	movlt	r3, r7
    ad5a:	9303      	str	r3, [sp, #12]
    ad5c:	2300      	movs	r3, #0
    ad5e:	9308      	str	r3, [sp, #32]
    ad60:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    ad64:	2b00      	cmp	r3, #0
    ad66:	f000 80cb 	beq.w	af00 <_vfiprintf_r+0x400>
    ad6a:	9b03      	ldr	r3, [sp, #12]
    ad6c:	3301      	adds	r3, #1
    ad6e:	9303      	str	r3, [sp, #12]
    ad70:	e0c6      	b.n	af00 <_vfiprintf_r+0x400>
    ad72:	ee18 1a10 	vmov	r1, s16
    ad76:	4658      	mov	r0, fp
    ad78:	ee18 5a10 	vmov	r5, s16
    ad7c:	f001 f840 	bl	be00 <__swsetup_r>
    ad80:	2800      	cmp	r0, #0
    ad82:	f040 8652 	bne.w	ba2a <_vfiprintf_r+0xf2a>
    ad86:	89aa      	ldrh	r2, [r5, #12]
    ad88:	f002 031a 	and.w	r3, r2, #26
    ad8c:	2b0a      	cmp	r3, #10
    ad8e:	f47f aef6 	bne.w	ab7e <_vfiprintf_r+0x7e>
    ad92:	ee18 1a10 	vmov	r1, s16
    ad96:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	f6ff aeef 	blt.w	ab7e <_vfiprintf_r+0x7e>
    ada0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    ada2:	07db      	lsls	r3, r3, #31
    ada4:	d402      	bmi.n	adac <_vfiprintf_r+0x2ac>
    ada6:	0597      	lsls	r7, r2, #22
    ada8:	f140 8612 	bpl.w	b9d0 <_vfiprintf_r+0xed0>
    adac:	ee18 1a10 	vmov	r1, s16
    adb0:	4623      	mov	r3, r4
    adb2:	4632      	mov	r2, r6
    adb4:	4658      	mov	r0, fp
    adb6:	f000 fe69 	bl	ba8c <__sbprintf>
    adba:	9005      	str	r0, [sp, #20]
    adbc:	9805      	ldr	r0, [sp, #20]
    adbe:	b045      	add	sp, #276	; 0x114
    adc0:	ecbd 8b02 	vpop	{d8}
    adc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adc8:	f046 0610 	orr.w	r6, r6, #16
    adcc:	f016 0220 	ands.w	r2, r6, #32
    add0:	f000 8136 	beq.w	b040 <_vfiprintf_r+0x540>
    add4:	9b07      	ldr	r3, [sp, #28]
    add6:	3307      	adds	r3, #7
    add8:	f023 0307 	bic.w	r3, r3, #7
    addc:	4619      	mov	r1, r3
    adde:	685a      	ldr	r2, [r3, #4]
    ade0:	f851 3b08 	ldr.w	r3, [r1], #8
    ade4:	9107      	str	r1, [sp, #28]
    ade6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    adea:	9103      	str	r1, [sp, #12]
    adec:	2100      	movs	r1, #0
    adee:	2000      	movs	r0, #0
    adf0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    adf4:	1c78      	adds	r0, r7, #1
    adf6:	f000 8210 	beq.w	b21a <_vfiprintf_r+0x71a>
    adfa:	9803      	ldr	r0, [sp, #12]
    adfc:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    ae00:	ea53 0002 	orrs.w	r0, r3, r2
    ae04:	f040 8208 	bne.w	b218 <_vfiprintf_r+0x718>
    ae08:	2f00      	cmp	r7, #0
    ae0a:	f040 8538 	bne.w	b87e <_vfiprintf_r+0xd7e>
    ae0e:	2900      	cmp	r1, #0
    ae10:	f040 83d5 	bne.w	b5be <_vfiprintf_r+0xabe>
    ae14:	9b03      	ldr	r3, [sp, #12]
    ae16:	f013 0301 	ands.w	r3, r3, #1
    ae1a:	9304      	str	r3, [sp, #16]
    ae1c:	f000 8411 	beq.w	b642 <_vfiprintf_r+0xb42>
    ae20:	2330      	movs	r3, #48	; 0x30
    ae22:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    ae26:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    ae2a:	e792      	b.n	ad52 <_vfiprintf_r+0x252>
    ae2c:	2208      	movs	r2, #8
    ae2e:	2100      	movs	r1, #0
    ae30:	4650      	mov	r0, sl
    ae32:	f7fc fb2d 	bl	7490 <memset>
    ae36:	2301      	movs	r3, #1
    ae38:	441c      	add	r4, r3
    ae3a:	e6ad      	b.n	ab98 <_vfiprintf_r+0x98>
    ae3c:	200013e0 	.word	0x200013e0
    ae40:	ebb4 0608 	subs.w	r6, r4, r8
    ae44:	4605      	mov	r5, r0
    ae46:	d01b      	beq.n	ae80 <_vfiprintf_r+0x380>
    ae48:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ae4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ae4c:	3301      	adds	r3, #1
    ae4e:	4432      	add	r2, r6
    ae50:	2b07      	cmp	r3, #7
    ae52:	e9c9 8600 	strd	r8, r6, [r9]
    ae56:	921a      	str	r2, [sp, #104]	; 0x68
    ae58:	9319      	str	r3, [sp, #100]	; 0x64
    ae5a:	dd1c      	ble.n	ae96 <_vfiprintf_r+0x396>
    ae5c:	2a00      	cmp	r2, #0
    ae5e:	f000 83a6 	beq.w	b5ae <_vfiprintf_r+0xaae>
    ae62:	ee18 1a10 	vmov	r1, s16
    ae66:	aa18      	add	r2, sp, #96	; 0x60
    ae68:	4658      	mov	r0, fp
    ae6a:	f7ff fe0d 	bl	aa88 <__sprint_r.part.0>
    ae6e:	bb20      	cbnz	r0, aeba <_vfiprintf_r+0x3ba>
    ae70:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ae74:	9b05      	ldr	r3, [sp, #20]
    ae76:	4433      	add	r3, r6
    ae78:	9305      	str	r3, [sp, #20]
    ae7a:	2d00      	cmp	r5, #0
    ae7c:	f47f aea8 	bne.w	abd0 <_vfiprintf_r+0xd0>
    ae80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ae82:	2b00      	cmp	r3, #0
    ae84:	f040 85c1 	bne.w	ba0a <_vfiprintf_r+0xf0a>
    ae88:	ee18 3a10 	vmov	r3, s16
    ae8c:	2200      	movs	r2, #0
    ae8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ae92:	9219      	str	r2, [sp, #100]	; 0x64
    ae94:	e015      	b.n	aec2 <_vfiprintf_r+0x3c2>
    ae96:	f109 0908 	add.w	r9, r9, #8
    ae9a:	e7eb      	b.n	ae74 <_vfiprintf_r+0x374>
    ae9c:	ee18 1a10 	vmov	r1, s16
    aea0:	aa18      	add	r2, sp, #96	; 0x60
    aea2:	4658      	mov	r0, fp
    aea4:	f7ff fdf0 	bl	aa88 <__sprint_r.part.0>
    aea8:	2800      	cmp	r0, #0
    aeaa:	f000 80a6 	beq.w	affa <_vfiprintf_r+0x4fa>
    aeae:	9b08      	ldr	r3, [sp, #32]
    aeb0:	b11b      	cbz	r3, aeba <_vfiprintf_r+0x3ba>
    aeb2:	9908      	ldr	r1, [sp, #32]
    aeb4:	4658      	mov	r0, fp
    aeb6:	f7fd f9b5 	bl	8224 <_free_r>
    aeba:	ee18 3a10 	vmov	r3, s16
    aebe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    aec2:	ee18 2a10 	vmov	r2, s16
    aec6:	6e52      	ldr	r2, [r2, #100]	; 0x64
    aec8:	f012 0f01 	tst.w	r2, #1
    aecc:	b29a      	uxth	r2, r3
    aece:	f000 80a0 	beq.w	b012 <_vfiprintf_r+0x512>
    aed2:	0650      	lsls	r0, r2, #25
    aed4:	f100 85b2 	bmi.w	ba3c <_vfiprintf_r+0xf3c>
    aed8:	9805      	ldr	r0, [sp, #20]
    aeda:	b045      	add	sp, #276	; 0x114
    aedc:	ecbd 8b02 	vpop	{d8}
    aee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee4:	2900      	cmp	r1, #0
    aee6:	d0cb      	beq.n	ae80 <_vfiprintf_r+0x380>
    aee8:	2300      	movs	r3, #0
    aeea:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    aeee:	2301      	movs	r3, #1
    aef0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    aef4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    aef8:	ac2b      	add	r4, sp, #172	; 0xac
    aefa:	2300      	movs	r3, #0
    aefc:	9308      	str	r3, [sp, #32]
    aefe:	461f      	mov	r7, r3
    af00:	f016 0302 	ands.w	r3, r6, #2
    af04:	9309      	str	r3, [sp, #36]	; 0x24
    af06:	d002      	beq.n	af0e <_vfiprintf_r+0x40e>
    af08:	9b03      	ldr	r3, [sp, #12]
    af0a:	3302      	adds	r3, #2
    af0c:	9303      	str	r3, [sp, #12]
    af0e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    af12:	930a      	str	r3, [sp, #40]	; 0x28
    af14:	d105      	bne.n	af22 <_vfiprintf_r+0x422>
    af16:	9b06      	ldr	r3, [sp, #24]
    af18:	9a03      	ldr	r2, [sp, #12]
    af1a:	1a9d      	subs	r5, r3, r2
    af1c:	2d00      	cmp	r5, #0
    af1e:	f300 827b 	bgt.w	b418 <_vfiprintf_r+0x918>
    af22:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    af26:	1c41      	adds	r1, r0, #1
    af28:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    af2c:	b182      	cbz	r2, af50 <_vfiprintf_r+0x450>
    af2e:	2201      	movs	r2, #1
    af30:	3301      	adds	r3, #1
    af32:	f8c9 2004 	str.w	r2, [r9, #4]
    af36:	2907      	cmp	r1, #7
    af38:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    af3c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    af40:	f8c9 2000 	str.w	r2, [r9]
    af44:	f300 824a 	bgt.w	b3dc <_vfiprintf_r+0x8dc>
    af48:	4608      	mov	r0, r1
    af4a:	f109 0908 	add.w	r9, r9, #8
    af4e:	3101      	adds	r1, #1
    af50:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af52:	b1e2      	cbz	r2, af8e <_vfiprintf_r+0x48e>
    af54:	aa11      	add	r2, sp, #68	; 0x44
    af56:	3302      	adds	r3, #2
    af58:	f8c9 2000 	str.w	r2, [r9]
    af5c:	2907      	cmp	r1, #7
    af5e:	f04f 0202 	mov.w	r2, #2
    af62:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    af66:	f8c9 2004 	str.w	r2, [r9, #4]
    af6a:	f340 8250 	ble.w	b40e <_vfiprintf_r+0x90e>
    af6e:	2b00      	cmp	r3, #0
    af70:	f000 8343 	beq.w	b5fa <_vfiprintf_r+0xafa>
    af74:	ee18 1a10 	vmov	r1, s16
    af78:	aa18      	add	r2, sp, #96	; 0x60
    af7a:	4658      	mov	r0, fp
    af7c:	f7ff fd84 	bl	aa88 <__sprint_r.part.0>
    af80:	2800      	cmp	r0, #0
    af82:	d194      	bne.n	aeae <_vfiprintf_r+0x3ae>
    af84:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    af88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    af8c:	1c41      	adds	r1, r0, #1
    af8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    af90:	2a80      	cmp	r2, #128	; 0x80
    af92:	f000 8184 	beq.w	b29e <_vfiprintf_r+0x79e>
    af96:	9a04      	ldr	r2, [sp, #16]
    af98:	1abd      	subs	r5, r7, r2
    af9a:	2d00      	cmp	r5, #0
    af9c:	f300 81d7 	bgt.w	b34e <_vfiprintf_r+0x84e>
    afa0:	9a04      	ldr	r2, [sp, #16]
    afa2:	f8c9 4000 	str.w	r4, [r9]
    afa6:	4413      	add	r3, r2
    afa8:	2907      	cmp	r1, #7
    afaa:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    afae:	f8c9 2004 	str.w	r2, [r9, #4]
    afb2:	f340 816e 	ble.w	b292 <_vfiprintf_r+0x792>
    afb6:	2b00      	cmp	r3, #0
    afb8:	f000 8275 	beq.w	b4a6 <_vfiprintf_r+0x9a6>
    afbc:	ee18 1a10 	vmov	r1, s16
    afc0:	aa18      	add	r2, sp, #96	; 0x60
    afc2:	4658      	mov	r0, fp
    afc4:	f7ff fd60 	bl	aa88 <__sprint_r.part.0>
    afc8:	2800      	cmp	r0, #0
    afca:	f47f af70 	bne.w	aeae <_vfiprintf_r+0x3ae>
    afce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    afd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    afd4:	0775      	lsls	r5, r6, #29
    afd6:	d505      	bpl.n	afe4 <_vfiprintf_r+0x4e4>
    afd8:	9a06      	ldr	r2, [sp, #24]
    afda:	9903      	ldr	r1, [sp, #12]
    afdc:	1a54      	subs	r4, r2, r1
    afde:	2c00      	cmp	r4, #0
    afe0:	f300 826b 	bgt.w	b4ba <_vfiprintf_r+0x9ba>
    afe4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    afe8:	9803      	ldr	r0, [sp, #12]
    afea:	4281      	cmp	r1, r0
    afec:	bfac      	ite	ge
    afee:	1852      	addge	r2, r2, r1
    aff0:	1812      	addlt	r2, r2, r0
    aff2:	9205      	str	r2, [sp, #20]
    aff4:	2b00      	cmp	r3, #0
    aff6:	f47f af51 	bne.w	ae9c <_vfiprintf_r+0x39c>
    affa:	9908      	ldr	r1, [sp, #32]
    affc:	2300      	movs	r3, #0
    affe:	9319      	str	r3, [sp, #100]	; 0x64
    b000:	2900      	cmp	r1, #0
    b002:	f000 8149 	beq.w	b298 <_vfiprintf_r+0x798>
    b006:	4658      	mov	r0, fp
    b008:	f7fd f90c 	bl	8224 <_free_r>
    b00c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b010:	e5c1      	b.n	ab96 <_vfiprintf_r+0x96>
    b012:	059c      	lsls	r4, r3, #22
    b014:	f53f af5d 	bmi.w	aed2 <_vfiprintf_r+0x3d2>
    b018:	ee18 4a10 	vmov	r4, s16
    b01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b01e:	f7fc fe17 	bl	7c50 <__retarget_lock_release_recursive>
    b022:	89a2      	ldrh	r2, [r4, #12]
    b024:	e755      	b.n	aed2 <_vfiprintf_r+0x3d2>
    b026:	06f0      	lsls	r0, r6, #27
    b028:	9a07      	ldr	r2, [sp, #28]
    b02a:	f100 831f 	bmi.w	b66c <_vfiprintf_r+0xb6c>
    b02e:	0671      	lsls	r1, r6, #25
    b030:	f140 8319 	bpl.w	b666 <_vfiprintf_r+0xb66>
    b034:	f932 3b04 	ldrsh.w	r3, [r2], #4
    b038:	9207      	str	r2, [sp, #28]
    b03a:	17da      	asrs	r2, r3, #31
    b03c:	4611      	mov	r1, r2
    b03e:	e66e      	b.n	ad1e <_vfiprintf_r+0x21e>
    b040:	f016 0310 	ands.w	r3, r6, #16
    b044:	9907      	ldr	r1, [sp, #28]
    b046:	f040 8309 	bne.w	b65c <_vfiprintf_r+0xb5c>
    b04a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    b04e:	f000 8301 	beq.w	b654 <_vfiprintf_r+0xb54>
    b052:	461a      	mov	r2, r3
    b054:	f851 3b04 	ldr.w	r3, [r1], #4
    b058:	9107      	str	r1, [sp, #28]
    b05a:	b29b      	uxth	r3, r3
    b05c:	e6c3      	b.n	ade6 <_vfiprintf_r+0x2e6>
    b05e:	9b07      	ldr	r3, [sp, #28]
    b060:	461a      	mov	r2, r3
    b062:	2300      	movs	r3, #0
    b064:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b068:	4613      	mov	r3, r2
    b06a:	f853 4b04 	ldr.w	r4, [r3], #4
    b06e:	9303      	str	r3, [sp, #12]
    b070:	2c00      	cmp	r4, #0
    b072:	f000 8412 	beq.w	b89a <_vfiprintf_r+0xd9a>
    b076:	2953      	cmp	r1, #83	; 0x53
    b078:	f000 8365 	beq.w	b746 <_vfiprintf_r+0xc46>
    b07c:	f016 0510 	ands.w	r5, r6, #16
    b080:	f040 8361 	bne.w	b746 <_vfiprintf_r+0xc46>
    b084:	1c7b      	adds	r3, r7, #1
    b086:	f000 84b3 	beq.w	b9f0 <_vfiprintf_r+0xef0>
    b08a:	463a      	mov	r2, r7
    b08c:	4629      	mov	r1, r5
    b08e:	4620      	mov	r0, r4
    b090:	f7fe fcfe 	bl	9a90 <memchr>
    b094:	9008      	str	r0, [sp, #32]
    b096:	2800      	cmp	r0, #0
    b098:	f000 849f 	beq.w	b9da <_vfiprintf_r+0xeda>
    b09c:	1b03      	subs	r3, r0, r4
    b09e:	9a03      	ldr	r2, [sp, #12]
    b0a0:	9304      	str	r3, [sp, #16]
    b0a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b0a6:	462f      	mov	r7, r5
    b0a8:	9207      	str	r2, [sp, #28]
    b0aa:	9303      	str	r3, [sp, #12]
    b0ac:	9508      	str	r5, [sp, #32]
    b0ae:	e657      	b.n	ad60 <_vfiprintf_r+0x260>
    b0b0:	2943      	cmp	r1, #67	; 0x43
    b0b2:	d002      	beq.n	b0ba <_vfiprintf_r+0x5ba>
    b0b4:	06f5      	lsls	r5, r6, #27
    b0b6:	f140 832d 	bpl.w	b714 <_vfiprintf_r+0xc14>
    b0ba:	9d07      	ldr	r5, [sp, #28]
    b0bc:	2208      	movs	r2, #8
    b0be:	2100      	movs	r1, #0
    b0c0:	a816      	add	r0, sp, #88	; 0x58
    b0c2:	ac2b      	add	r4, sp, #172	; 0xac
    b0c4:	f7fc f9e4 	bl	7490 <memset>
    b0c8:	ab16      	add	r3, sp, #88	; 0x58
    b0ca:	f855 2b04 	ldr.w	r2, [r5], #4
    b0ce:	4621      	mov	r1, r4
    b0d0:	4658      	mov	r0, fp
    b0d2:	f7ff fc93 	bl	a9fc <_wcrtomb_r>
    b0d6:	4603      	mov	r3, r0
    b0d8:	3301      	adds	r3, #1
    b0da:	9004      	str	r0, [sp, #16]
    b0dc:	f000 84b3 	beq.w	ba46 <_vfiprintf_r+0xf46>
    b0e0:	9b04      	ldr	r3, [sp, #16]
    b0e2:	9507      	str	r5, [sp, #28]
    b0e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b0e8:	9303      	str	r3, [sp, #12]
    b0ea:	2300      	movs	r3, #0
    b0ec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b0f0:	e703      	b.n	aefa <_vfiprintf_r+0x3fa>
    b0f2:	9b07      	ldr	r3, [sp, #28]
    b0f4:	f853 2b04 	ldr.w	r2, [r3], #4
    b0f8:	9206      	str	r2, [sp, #24]
    b0fa:	2a00      	cmp	r2, #0
    b0fc:	f280 829c 	bge.w	b638 <_vfiprintf_r+0xb38>
    b100:	9a06      	ldr	r2, [sp, #24]
    b102:	4252      	negs	r2, r2
    b104:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b108:	f898 1000 	ldrb.w	r1, [r8]
    b10c:	f046 0604 	orr.w	r6, r6, #4
    b110:	e569      	b.n	abe6 <_vfiprintf_r+0xe6>
    b112:	f898 1000 	ldrb.w	r1, [r8]
    b116:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    b11a:	e564      	b.n	abe6 <_vfiprintf_r+0xe6>
    b11c:	f898 1000 	ldrb.w	r1, [r8]
    b120:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    b124:	e55f      	b.n	abe6 <_vfiprintf_r+0xe6>
    b126:	4642      	mov	r2, r8
    b128:	f812 1b01 	ldrb.w	r1, [r2], #1
    b12c:	292a      	cmp	r1, #42	; 0x2a
    b12e:	f000 8496 	beq.w	ba5e <_vfiprintf_r+0xf5e>
    b132:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b136:	2b09      	cmp	r3, #9
    b138:	4690      	mov	r8, r2
    b13a:	f04f 0700 	mov.w	r7, #0
    b13e:	f63f ad54 	bhi.w	abea <_vfiprintf_r+0xea>
    b142:	f818 1b01 	ldrb.w	r1, [r8], #1
    b146:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b14a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    b14e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    b152:	2b09      	cmp	r3, #9
    b154:	d9f5      	bls.n	b142 <_vfiprintf_r+0x642>
    b156:	e548      	b.n	abea <_vfiprintf_r+0xea>
    b158:	f898 1000 	ldrb.w	r1, [r8]
    b15c:	f046 0601 	orr.w	r6, r6, #1
    b160:	e541      	b.n	abe6 <_vfiprintf_r+0xe6>
    b162:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    b166:	2b00      	cmp	r3, #0
    b168:	f47f adc2 	bne.w	acf0 <_vfiprintf_r+0x1f0>
    b16c:	2320      	movs	r3, #32
    b16e:	f898 1000 	ldrb.w	r1, [r8]
    b172:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    b176:	e536      	b.n	abe6 <_vfiprintf_r+0xe6>
    b178:	f898 1000 	ldrb.w	r1, [r8]
    b17c:	296c      	cmp	r1, #108	; 0x6c
    b17e:	bf03      	ittte	eq
    b180:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b184:	f046 0620 	orreq.w	r6, r6, #32
    b188:	f108 0801 	addeq.w	r8, r8, #1
    b18c:	f046 0610 	orrne.w	r6, r6, #16
    b190:	e529      	b.n	abe6 <_vfiprintf_r+0xe6>
    b192:	f898 1000 	ldrb.w	r1, [r8]
    b196:	2968      	cmp	r1, #104	; 0x68
    b198:	bf03      	ittte	eq
    b19a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    b19e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    b1a2:	f108 0801 	addeq.w	r8, r8, #1
    b1a6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    b1aa:	e51c      	b.n	abe6 <_vfiprintf_r+0xe6>
    b1ac:	f046 0310 	orr.w	r3, r6, #16
    b1b0:	9303      	str	r3, [sp, #12]
    b1b2:	9b03      	ldr	r3, [sp, #12]
    b1b4:	f013 0220 	ands.w	r2, r3, #32
    b1b8:	f000 8206 	beq.w	b5c8 <_vfiprintf_r+0xac8>
    b1bc:	9b07      	ldr	r3, [sp, #28]
    b1be:	3307      	adds	r3, #7
    b1c0:	f023 0307 	bic.w	r3, r3, #7
    b1c4:	4619      	mov	r1, r3
    b1c6:	685a      	ldr	r2, [r3, #4]
    b1c8:	f851 3b08 	ldr.w	r3, [r1], #8
    b1cc:	9107      	str	r1, [sp, #28]
    b1ce:	2101      	movs	r1, #1
    b1d0:	e60d      	b.n	adee <_vfiprintf_r+0x2ee>
    b1d2:	9a07      	ldr	r2, [sp, #28]
    b1d4:	f046 0302 	orr.w	r3, r6, #2
    b1d8:	9303      	str	r3, [sp, #12]
    b1da:	f852 3b04 	ldr.w	r3, [r2], #4
    b1de:	9207      	str	r2, [sp, #28]
    b1e0:	f647 0230 	movw	r2, #30768	; 0x7830
    b1e4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    b1e8:	4ab8      	ldr	r2, [pc, #736]	; (b4cc <_vfiprintf_r+0x9cc>)
    b1ea:	920c      	str	r2, [sp, #48]	; 0x30
    b1ec:	2102      	movs	r1, #2
    b1ee:	2200      	movs	r2, #0
    b1f0:	e5fd      	b.n	adee <_vfiprintf_r+0x2ee>
    b1f2:	06b7      	lsls	r7, r6, #26
    b1f4:	f100 8248 	bmi.w	b688 <_vfiprintf_r+0xb88>
    b1f8:	06f5      	lsls	r5, r6, #27
    b1fa:	f100 8346 	bmi.w	b88a <_vfiprintf_r+0xd8a>
    b1fe:	0674      	lsls	r4, r6, #25
    b200:	f100 83d5 	bmi.w	b9ae <_vfiprintf_r+0xeae>
    b204:	05b0      	lsls	r0, r6, #22
    b206:	f140 8340 	bpl.w	b88a <_vfiprintf_r+0xd8a>
    b20a:	9b07      	ldr	r3, [sp, #28]
    b20c:	9905      	ldr	r1, [sp, #20]
    b20e:	f853 2b04 	ldr.w	r2, [r3], #4
    b212:	9307      	str	r3, [sp, #28]
    b214:	7011      	strb	r1, [r2, #0]
    b216:	e4be      	b.n	ab96 <_vfiprintf_r+0x96>
    b218:	9603      	str	r6, [sp, #12]
    b21a:	2901      	cmp	r1, #1
    b21c:	f43f ad8c 	beq.w	ad38 <_vfiprintf_r+0x238>
    b220:	2902      	cmp	r1, #2
    b222:	ac44      	add	r4, sp, #272	; 0x110
    b224:	d111      	bne.n	b24a <_vfiprintf_r+0x74a>
    b226:	980c      	ldr	r0, [sp, #48]	; 0x30
    b228:	f003 010f 	and.w	r1, r3, #15
    b22c:	091b      	lsrs	r3, r3, #4
    b22e:	5c41      	ldrb	r1, [r0, r1]
    b230:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b234:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    b238:	0912      	lsrs	r2, r2, #4
    b23a:	ea53 0102 	orrs.w	r1, r3, r2
    b23e:	d1f3      	bne.n	b228 <_vfiprintf_r+0x728>
    b240:	9e03      	ldr	r6, [sp, #12]
    b242:	ab44      	add	r3, sp, #272	; 0x110
    b244:	1b1b      	subs	r3, r3, r4
    b246:	9304      	str	r3, [sp, #16]
    b248:	e583      	b.n	ad52 <_vfiprintf_r+0x252>
    b24a:	f003 0107 	and.w	r1, r3, #7
    b24e:	08db      	lsrs	r3, r3, #3
    b250:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    b254:	08d2      	lsrs	r2, r2, #3
    b256:	3130      	adds	r1, #48	; 0x30
    b258:	ea53 0502 	orrs.w	r5, r3, r2
    b25c:	4620      	mov	r0, r4
    b25e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b262:	d1f2      	bne.n	b24a <_vfiprintf_r+0x74a>
    b264:	9e03      	ldr	r6, [sp, #12]
    b266:	07f3      	lsls	r3, r6, #31
    b268:	d5eb      	bpl.n	b242 <_vfiprintf_r+0x742>
    b26a:	2930      	cmp	r1, #48	; 0x30
    b26c:	d0e8      	beq.n	b240 <_vfiprintf_r+0x740>
    b26e:	2330      	movs	r3, #48	; 0x30
    b270:	3802      	subs	r0, #2
    b272:	f804 3c01 	strb.w	r3, [r4, #-1]
    b276:	ab44      	add	r3, sp, #272	; 0x110
    b278:	1a1b      	subs	r3, r3, r0
    b27a:	9e03      	ldr	r6, [sp, #12]
    b27c:	9304      	str	r3, [sp, #16]
    b27e:	4604      	mov	r4, r0
    b280:	e567      	b.n	ad52 <_vfiprintf_r+0x252>
    b282:	9b04      	ldr	r3, [sp, #16]
    b284:	941b      	str	r4, [sp, #108]	; 0x6c
    b286:	2201      	movs	r2, #1
    b288:	931c      	str	r3, [sp, #112]	; 0x70
    b28a:	931a      	str	r3, [sp, #104]	; 0x68
    b28c:	9219      	str	r2, [sp, #100]	; 0x64
    b28e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b292:	f109 0908 	add.w	r9, r9, #8
    b296:	e69d      	b.n	afd4 <_vfiprintf_r+0x4d4>
    b298:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b29c:	e47b      	b.n	ab96 <_vfiprintf_r+0x96>
    b29e:	9a06      	ldr	r2, [sp, #24]
    b2a0:	9d03      	ldr	r5, [sp, #12]
    b2a2:	1b55      	subs	r5, r2, r5
    b2a4:	2d00      	cmp	r5, #0
    b2a6:	f77f ae76 	ble.w	af96 <_vfiprintf_r+0x496>
    b2aa:	2d10      	cmp	r5, #16
    b2ac:	f340 83bb 	ble.w	ba26 <_vfiprintf_r+0xf26>
    b2b0:	9409      	str	r4, [sp, #36]	; 0x24
    b2b2:	ee18 4a10 	vmov	r4, s16
    b2b6:	e007      	b.n	b2c8 <_vfiprintf_r+0x7c8>
    b2b8:	f100 0c02 	add.w	ip, r0, #2
    b2bc:	f109 0908 	add.w	r9, r9, #8
    b2c0:	4610      	mov	r0, r2
    b2c2:	3d10      	subs	r5, #16
    b2c4:	2d10      	cmp	r5, #16
    b2c6:	dd1e      	ble.n	b306 <_vfiprintf_r+0x806>
    b2c8:	4981      	ldr	r1, [pc, #516]	; (b4d0 <_vfiprintf_r+0x9d0>)
    b2ca:	f8c9 1000 	str.w	r1, [r9]
    b2ce:	1c42      	adds	r2, r0, #1
    b2d0:	3310      	adds	r3, #16
    b2d2:	2110      	movs	r1, #16
    b2d4:	2a07      	cmp	r2, #7
    b2d6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b2da:	f8c9 1004 	str.w	r1, [r9, #4]
    b2de:	ddeb      	ble.n	b2b8 <_vfiprintf_r+0x7b8>
    b2e0:	aa18      	add	r2, sp, #96	; 0x60
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d074      	beq.n	b3d0 <_vfiprintf_r+0x8d0>
    b2e6:	4621      	mov	r1, r4
    b2e8:	4658      	mov	r0, fp
    b2ea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b2ee:	f7ff fbcb 	bl	aa88 <__sprint_r.part.0>
    b2f2:	2800      	cmp	r0, #0
    b2f4:	f47f addb 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b2f8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b2fc:	3d10      	subs	r5, #16
    b2fe:	2d10      	cmp	r5, #16
    b300:	f100 0c01 	add.w	ip, r0, #1
    b304:	dce0      	bgt.n	b2c8 <_vfiprintf_r+0x7c8>
    b306:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b308:	4a71      	ldr	r2, [pc, #452]	; (b4d0 <_vfiprintf_r+0x9d0>)
    b30a:	f8c9 5004 	str.w	r5, [r9, #4]
    b30e:	442b      	add	r3, r5
    b310:	f1bc 0f07 	cmp.w	ip, #7
    b314:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    b318:	f8c9 2000 	str.w	r2, [r9]
    b31c:	f340 8194 	ble.w	b648 <_vfiprintf_r+0xb48>
    b320:	2b00      	cmp	r3, #0
    b322:	f000 831f 	beq.w	b964 <_vfiprintf_r+0xe64>
    b326:	ee18 1a10 	vmov	r1, s16
    b32a:	aa18      	add	r2, sp, #96	; 0x60
    b32c:	4658      	mov	r0, fp
    b32e:	f7ff fbab 	bl	aa88 <__sprint_r.part.0>
    b332:	2800      	cmp	r0, #0
    b334:	f47f adbb 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b338:	9a04      	ldr	r2, [sp, #16]
    b33a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b33e:	1abd      	subs	r5, r7, r2
    b340:	2d00      	cmp	r5, #0
    b342:	f100 0101 	add.w	r1, r0, #1
    b346:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b34a:	f77f ae29 	ble.w	afa0 <_vfiprintf_r+0x4a0>
    b34e:	2d10      	cmp	r5, #16
    b350:	dd29      	ble.n	b3a6 <_vfiprintf_r+0x8a6>
    b352:	9409      	str	r4, [sp, #36]	; 0x24
    b354:	2710      	movs	r7, #16
    b356:	ee18 4a10 	vmov	r4, s16
    b35a:	e007      	b.n	b36c <_vfiprintf_r+0x86c>
    b35c:	f100 0c02 	add.w	ip, r0, #2
    b360:	f109 0908 	add.w	r9, r9, #8
    b364:	4610      	mov	r0, r2
    b366:	3d10      	subs	r5, #16
    b368:	2d10      	cmp	r5, #16
    b36a:	dd1a      	ble.n	b3a2 <_vfiprintf_r+0x8a2>
    b36c:	1c42      	adds	r2, r0, #1
    b36e:	4958      	ldr	r1, [pc, #352]	; (b4d0 <_vfiprintf_r+0x9d0>)
    b370:	3310      	adds	r3, #16
    b372:	2a07      	cmp	r2, #7
    b374:	e9c9 1700 	strd	r1, r7, [r9]
    b378:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b37c:	ddee      	ble.n	b35c <_vfiprintf_r+0x85c>
    b37e:	aa18      	add	r2, sp, #96	; 0x60
    b380:	b303      	cbz	r3, b3c4 <_vfiprintf_r+0x8c4>
    b382:	4621      	mov	r1, r4
    b384:	4658      	mov	r0, fp
    b386:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b38a:	f7ff fb7d 	bl	aa88 <__sprint_r.part.0>
    b38e:	2800      	cmp	r0, #0
    b390:	f47f ad8d 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b394:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b398:	3d10      	subs	r5, #16
    b39a:	2d10      	cmp	r5, #16
    b39c:	f100 0c01 	add.w	ip, r0, #1
    b3a0:	dce4      	bgt.n	b36c <_vfiprintf_r+0x86c>
    b3a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b3a4:	4661      	mov	r1, ip
    b3a6:	4a4a      	ldr	r2, [pc, #296]	; (b4d0 <_vfiprintf_r+0x9d0>)
    b3a8:	f8c9 5004 	str.w	r5, [r9, #4]
    b3ac:	442b      	add	r3, r5
    b3ae:	2907      	cmp	r1, #7
    b3b0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    b3b4:	f8c9 2000 	str.w	r2, [r9]
    b3b8:	f300 80e7 	bgt.w	b58a <_vfiprintf_r+0xa8a>
    b3bc:	f109 0908 	add.w	r9, r9, #8
    b3c0:	3101      	adds	r1, #1
    b3c2:	e5ed      	b.n	afa0 <_vfiprintf_r+0x4a0>
    b3c4:	f04f 0c01 	mov.w	ip, #1
    b3c8:	4618      	mov	r0, r3
    b3ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b3ce:	e7ca      	b.n	b366 <_vfiprintf_r+0x866>
    b3d0:	f04f 0c01 	mov.w	ip, #1
    b3d4:	4618      	mov	r0, r3
    b3d6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b3da:	e772      	b.n	b2c2 <_vfiprintf_r+0x7c2>
    b3dc:	2b00      	cmp	r3, #0
    b3de:	f000 8104 	beq.w	b5ea <_vfiprintf_r+0xaea>
    b3e2:	ee18 1a10 	vmov	r1, s16
    b3e6:	aa18      	add	r2, sp, #96	; 0x60
    b3e8:	4658      	mov	r0, fp
    b3ea:	f7ff fb4d 	bl	aa88 <__sprint_r.part.0>
    b3ee:	2800      	cmp	r0, #0
    b3f0:	f47f ad5d 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b3f4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b3f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b3fc:	1c41      	adds	r1, r0, #1
    b3fe:	e5a7      	b.n	af50 <_vfiprintf_r+0x450>
    b400:	2302      	movs	r3, #2
    b402:	aa11      	add	r2, sp, #68	; 0x44
    b404:	931c      	str	r3, [sp, #112]	; 0x70
    b406:	921b      	str	r2, [sp, #108]	; 0x6c
    b408:	2101      	movs	r1, #1
    b40a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b40e:	4608      	mov	r0, r1
    b410:	f109 0908 	add.w	r9, r9, #8
    b414:	1c41      	adds	r1, r0, #1
    b416:	e5ba      	b.n	af8e <_vfiprintf_r+0x48e>
    b418:	2d10      	cmp	r5, #16
    b41a:	f340 82e5 	ble.w	b9e8 <_vfiprintf_r+0xee8>
    b41e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b422:	940f      	str	r4, [sp, #60]	; 0x3c
    b424:	4608      	mov	r0, r1
    b426:	ee18 4a10 	vmov	r4, s16
    b42a:	e007      	b.n	b43c <_vfiprintf_r+0x93c>
    b42c:	f100 0c02 	add.w	ip, r0, #2
    b430:	f109 0908 	add.w	r9, r9, #8
    b434:	4610      	mov	r0, r2
    b436:	3d10      	subs	r5, #16
    b438:	2d10      	cmp	r5, #16
    b43a:	dd1d      	ble.n	b478 <_vfiprintf_r+0x978>
    b43c:	4925      	ldr	r1, [pc, #148]	; (b4d4 <_vfiprintf_r+0x9d4>)
    b43e:	f8c9 1000 	str.w	r1, [r9]
    b442:	1c42      	adds	r2, r0, #1
    b444:	3310      	adds	r3, #16
    b446:	2110      	movs	r1, #16
    b448:	2a07      	cmp	r2, #7
    b44a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b44e:	f8c9 1004 	str.w	r1, [r9, #4]
    b452:	ddeb      	ble.n	b42c <_vfiprintf_r+0x92c>
    b454:	aa18      	add	r2, sp, #96	; 0x60
    b456:	b303      	cbz	r3, b49a <_vfiprintf_r+0x99a>
    b458:	4621      	mov	r1, r4
    b45a:	4658      	mov	r0, fp
    b45c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b460:	f7ff fb12 	bl	aa88 <__sprint_r.part.0>
    b464:	2800      	cmp	r0, #0
    b466:	f47f ad22 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b46a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b46e:	3d10      	subs	r5, #16
    b470:	2d10      	cmp	r5, #16
    b472:	f100 0c01 	add.w	ip, r0, #1
    b476:	dce1      	bgt.n	b43c <_vfiprintf_r+0x93c>
    b478:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    b47a:	4660      	mov	r0, ip
    b47c:	4a15      	ldr	r2, [pc, #84]	; (b4d4 <_vfiprintf_r+0x9d4>)
    b47e:	f8c9 5004 	str.w	r5, [r9, #4]
    b482:	442b      	add	r3, r5
    b484:	2807      	cmp	r0, #7
    b486:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b48a:	f8c9 2000 	str.w	r2, [r9]
    b48e:	f300 80c1 	bgt.w	b614 <_vfiprintf_r+0xb14>
    b492:	f109 0908 	add.w	r9, r9, #8
    b496:	1c41      	adds	r1, r0, #1
    b498:	e546      	b.n	af28 <_vfiprintf_r+0x428>
    b49a:	4618      	mov	r0, r3
    b49c:	f04f 0c01 	mov.w	ip, #1
    b4a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4a4:	e7c7      	b.n	b436 <_vfiprintf_r+0x936>
    b4a6:	0776      	lsls	r6, r6, #29
    b4a8:	9319      	str	r3, [sp, #100]	; 0x64
    b4aa:	d553      	bpl.n	b554 <_vfiprintf_r+0xa54>
    b4ac:	9a06      	ldr	r2, [sp, #24]
    b4ae:	9903      	ldr	r1, [sp, #12]
    b4b0:	1a54      	subs	r4, r2, r1
    b4b2:	2c00      	cmp	r4, #0
    b4b4:	dd4e      	ble.n	b554 <_vfiprintf_r+0xa54>
    b4b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b4ba:	2c10      	cmp	r4, #16
    b4bc:	f340 82b0 	ble.w	ba20 <_vfiprintf_r+0xf20>
    b4c0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b4c2:	ee18 6a10 	vmov	r6, s16
    b4c6:	2510      	movs	r5, #16
    b4c8:	e00d      	b.n	b4e6 <_vfiprintf_r+0x9e6>
    b4ca:	bf00      	nop
    b4cc:	20000aa0 	.word	0x20000aa0
    b4d0:	20000fcc 	.word	0x20000fcc
    b4d4:	20000abc 	.word	0x20000abc
    b4d8:	1c88      	adds	r0, r1, #2
    b4da:	f109 0908 	add.w	r9, r9, #8
    b4de:	4611      	mov	r1, r2
    b4e0:	3c10      	subs	r4, #16
    b4e2:	2c10      	cmp	r4, #16
    b4e4:	dd1a      	ble.n	b51c <_vfiprintf_r+0xa1c>
    b4e6:	1c4a      	adds	r2, r1, #1
    b4e8:	48b3      	ldr	r0, [pc, #716]	; (b7b8 <_vfiprintf_r+0xcb8>)
    b4ea:	3310      	adds	r3, #16
    b4ec:	2a07      	cmp	r2, #7
    b4ee:	e9c9 0500 	strd	r0, r5, [r9]
    b4f2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    b4f6:	ddef      	ble.n	b4d8 <_vfiprintf_r+0x9d8>
    b4f8:	aa18      	add	r2, sp, #96	; 0x60
    b4fa:	b333      	cbz	r3, b54a <_vfiprintf_r+0xa4a>
    b4fc:	4631      	mov	r1, r6
    b4fe:	4658      	mov	r0, fp
    b500:	f7ff fac2 	bl	aa88 <__sprint_r.part.0>
    b504:	2800      	cmp	r0, #0
    b506:	f47f acd2 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b50a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    b50e:	3c10      	subs	r4, #16
    b510:	2c10      	cmp	r4, #16
    b512:	f101 0001 	add.w	r0, r1, #1
    b516:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b51a:	dce4      	bgt.n	b4e6 <_vfiprintf_r+0x9e6>
    b51c:	4aa6      	ldr	r2, [pc, #664]	; (b7b8 <_vfiprintf_r+0xcb8>)
    b51e:	f8c9 4004 	str.w	r4, [r9, #4]
    b522:	4423      	add	r3, r4
    b524:	2807      	cmp	r0, #7
    b526:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    b52a:	f8c9 2000 	str.w	r2, [r9]
    b52e:	f77f ad59 	ble.w	afe4 <_vfiprintf_r+0x4e4>
    b532:	b17b      	cbz	r3, b554 <_vfiprintf_r+0xa54>
    b534:	ee18 1a10 	vmov	r1, s16
    b538:	aa18      	add	r2, sp, #96	; 0x60
    b53a:	4658      	mov	r0, fp
    b53c:	f7ff faa4 	bl	aa88 <__sprint_r.part.0>
    b540:	2800      	cmp	r0, #0
    b542:	f47f acb4 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b546:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b548:	e54c      	b.n	afe4 <_vfiprintf_r+0x4e4>
    b54a:	2001      	movs	r0, #1
    b54c:	4619      	mov	r1, r3
    b54e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b552:	e7c5      	b.n	b4e0 <_vfiprintf_r+0x9e0>
    b554:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    b558:	9903      	ldr	r1, [sp, #12]
    b55a:	428a      	cmp	r2, r1
    b55c:	bfac      	ite	ge
    b55e:	189b      	addge	r3, r3, r2
    b560:	185b      	addlt	r3, r3, r1
    b562:	9305      	str	r3, [sp, #20]
    b564:	e549      	b.n	affa <_vfiprintf_r+0x4fa>
    b566:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    b56a:	058f      	lsls	r7, r1, #22
    b56c:	ee18 3a10 	vmov	r3, s16
    b570:	b28a      	uxth	r2, r1
    b572:	f53f aae8 	bmi.w	ab46 <_vfiprintf_r+0x46>
    b576:	ee18 5a10 	vmov	r5, s16
    b57a:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b57c:	f7fc fb66 	bl	7c4c <__retarget_lock_acquire_recursive>
    b580:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    b584:	b28a      	uxth	r2, r1
    b586:	f7ff bade 	b.w	ab46 <_vfiprintf_r+0x46>
    b58a:	2b00      	cmp	r3, #0
    b58c:	f43f ae79 	beq.w	b282 <_vfiprintf_r+0x782>
    b590:	ee18 1a10 	vmov	r1, s16
    b594:	aa18      	add	r2, sp, #96	; 0x60
    b596:	4658      	mov	r0, fp
    b598:	f7ff fa76 	bl	aa88 <__sprint_r.part.0>
    b59c:	2800      	cmp	r0, #0
    b59e:	f47f ac86 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b5a2:	9919      	ldr	r1, [sp, #100]	; 0x64
    b5a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b5a6:	3101      	adds	r1, #1
    b5a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b5ac:	e4f8      	b.n	afa0 <_vfiprintf_r+0x4a0>
    b5ae:	9219      	str	r2, [sp, #100]	; 0x64
    b5b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b5b4:	e45e      	b.n	ae74 <_vfiprintf_r+0x374>
    b5b6:	2f00      	cmp	r7, #0
    b5b8:	f47f abc3 	bne.w	ad42 <_vfiprintf_r+0x242>
    b5bc:	9e03      	ldr	r6, [sp, #12]
    b5be:	2700      	movs	r7, #0
    b5c0:	9704      	str	r7, [sp, #16]
    b5c2:	ac44      	add	r4, sp, #272	; 0x110
    b5c4:	f7ff bbc5 	b.w	ad52 <_vfiprintf_r+0x252>
    b5c8:	9b03      	ldr	r3, [sp, #12]
    b5ca:	f013 0310 	ands.w	r3, r3, #16
    b5ce:	d154      	bne.n	b67a <_vfiprintf_r+0xb7a>
    b5d0:	9a03      	ldr	r2, [sp, #12]
    b5d2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    b5d6:	f000 816b 	beq.w	b8b0 <_vfiprintf_r+0xdb0>
    b5da:	9907      	ldr	r1, [sp, #28]
    b5dc:	461a      	mov	r2, r3
    b5de:	f851 3b04 	ldr.w	r3, [r1], #4
    b5e2:	9107      	str	r1, [sp, #28]
    b5e4:	b29b      	uxth	r3, r3
    b5e6:	2101      	movs	r1, #1
    b5e8:	e401      	b.n	adee <_vfiprintf_r+0x2ee>
    b5ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b5ec:	2a00      	cmp	r2, #0
    b5ee:	d164      	bne.n	b6ba <_vfiprintf_r+0xbba>
    b5f0:	4618      	mov	r0, r3
    b5f2:	2101      	movs	r1, #1
    b5f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b5f8:	e4c9      	b.n	af8e <_vfiprintf_r+0x48e>
    b5fa:	2101      	movs	r1, #1
    b5fc:	4618      	mov	r0, r3
    b5fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b602:	e4c4      	b.n	af8e <_vfiprintf_r+0x48e>
    b604:	425b      	negs	r3, r3
    b606:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    b60a:	9603      	str	r6, [sp, #12]
    b60c:	202d      	movs	r0, #45	; 0x2d
    b60e:	2101      	movs	r1, #1
    b610:	f7ff bbee 	b.w	adf0 <_vfiprintf_r+0x2f0>
    b614:	2b00      	cmp	r3, #0
    b616:	f000 8088 	beq.w	b72a <_vfiprintf_r+0xc2a>
    b61a:	ee18 1a10 	vmov	r1, s16
    b61e:	aa18      	add	r2, sp, #96	; 0x60
    b620:	4658      	mov	r0, fp
    b622:	f7ff fa31 	bl	aa88 <__sprint_r.part.0>
    b626:	2800      	cmp	r0, #0
    b628:	f47f ac41 	bne.w	aeae <_vfiprintf_r+0x3ae>
    b62c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    b630:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b634:	1c41      	adds	r1, r0, #1
    b636:	e477      	b.n	af28 <_vfiprintf_r+0x428>
    b638:	f898 1000 	ldrb.w	r1, [r8]
    b63c:	9307      	str	r3, [sp, #28]
    b63e:	f7ff bad2 	b.w	abe6 <_vfiprintf_r+0xe6>
    b642:	ac44      	add	r4, sp, #272	; 0x110
    b644:	f7ff bb85 	b.w	ad52 <_vfiprintf_r+0x252>
    b648:	f109 0908 	add.w	r9, r9, #8
    b64c:	f10c 0101 	add.w	r1, ip, #1
    b650:	4660      	mov	r0, ip
    b652:	e4a0      	b.n	af96 <_vfiprintf_r+0x496>
    b654:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b658:	f040 8197 	bne.w	b98a <_vfiprintf_r+0xe8a>
    b65c:	f851 3b04 	ldr.w	r3, [r1], #4
    b660:	9107      	str	r1, [sp, #28]
    b662:	f7ff bbc0 	b.w	ade6 <_vfiprintf_r+0x2e6>
    b666:	05b3      	lsls	r3, r6, #22
    b668:	f100 8188 	bmi.w	b97c <_vfiprintf_r+0xe7c>
    b66c:	f852 3b04 	ldr.w	r3, [r2], #4
    b670:	9207      	str	r2, [sp, #28]
    b672:	17da      	asrs	r2, r3, #31
    b674:	4611      	mov	r1, r2
    b676:	f7ff bb52 	b.w	ad1e <_vfiprintf_r+0x21e>
    b67a:	9907      	ldr	r1, [sp, #28]
    b67c:	f851 3b04 	ldr.w	r3, [r1], #4
    b680:	9107      	str	r1, [sp, #28]
    b682:	2101      	movs	r1, #1
    b684:	f7ff bbb3 	b.w	adee <_vfiprintf_r+0x2ee>
    b688:	9b07      	ldr	r3, [sp, #28]
    b68a:	9805      	ldr	r0, [sp, #20]
    b68c:	f853 1b04 	ldr.w	r1, [r3], #4
    b690:	9307      	str	r3, [sp, #28]
    b692:	17c2      	asrs	r2, r0, #31
    b694:	e9c1 0200 	strd	r0, r2, [r1]
    b698:	f7ff ba7d 	b.w	ab96 <_vfiprintf_r+0x96>
    b69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b69e:	2b00      	cmp	r3, #0
    b6a0:	f43f ab26 	beq.w	acf0 <_vfiprintf_r+0x1f0>
    b6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	f43f ab21 	beq.w	acf0 <_vfiprintf_r+0x1f0>
    b6ae:	f898 1000 	ldrb.w	r1, [r8]
    b6b2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    b6b6:	f7ff ba96 	b.w	abe6 <_vfiprintf_r+0xe6>
    b6ba:	2302      	movs	r3, #2
    b6bc:	aa11      	add	r2, sp, #68	; 0x44
    b6be:	931c      	str	r3, [sp, #112]	; 0x70
    b6c0:	921b      	str	r2, [sp, #108]	; 0x6c
    b6c2:	2001      	movs	r0, #1
    b6c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b6c8:	e6a2      	b.n	b410 <_vfiprintf_r+0x910>
    b6ca:	9603      	str	r6, [sp, #12]
    b6cc:	e571      	b.n	b1b2 <_vfiprintf_r+0x6b2>
    b6ce:	4b3b      	ldr	r3, [pc, #236]	; (b7bc <_vfiprintf_r+0xcbc>)
    b6d0:	930c      	str	r3, [sp, #48]	; 0x30
    b6d2:	f016 0220 	ands.w	r2, r6, #32
    b6d6:	d059      	beq.n	b78c <_vfiprintf_r+0xc8c>
    b6d8:	9b07      	ldr	r3, [sp, #28]
    b6da:	3307      	adds	r3, #7
    b6dc:	f023 0307 	bic.w	r3, r3, #7
    b6e0:	4618      	mov	r0, r3
    b6e2:	685a      	ldr	r2, [r3, #4]
    b6e4:	f850 3b08 	ldr.w	r3, [r0], #8
    b6e8:	9007      	str	r0, [sp, #28]
    b6ea:	07f4      	lsls	r4, r6, #31
    b6ec:	d509      	bpl.n	b702 <_vfiprintf_r+0xc02>
    b6ee:	ea53 0002 	orrs.w	r0, r3, r2
    b6f2:	d006      	beq.n	b702 <_vfiprintf_r+0xc02>
    b6f4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    b6f8:	2130      	movs	r1, #48	; 0x30
    b6fa:	f046 0602 	orr.w	r6, r6, #2
    b6fe:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    b702:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    b706:	9103      	str	r1, [sp, #12]
    b708:	2102      	movs	r1, #2
    b70a:	f7ff bb70 	b.w	adee <_vfiprintf_r+0x2ee>
    b70e:	4b2c      	ldr	r3, [pc, #176]	; (b7c0 <_vfiprintf_r+0xcc0>)
    b710:	930c      	str	r3, [sp, #48]	; 0x30
    b712:	e7de      	b.n	b6d2 <_vfiprintf_r+0xbd2>
    b714:	9b07      	ldr	r3, [sp, #28]
    b716:	2101      	movs	r1, #1
    b718:	f853 2b04 	ldr.w	r2, [r3], #4
    b71c:	9103      	str	r1, [sp, #12]
    b71e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    b722:	9307      	str	r3, [sp, #28]
    b724:	9104      	str	r1, [sp, #16]
    b726:	ac2b      	add	r4, sp, #172	; 0xac
    b728:	e4df      	b.n	b0ea <_vfiprintf_r+0x5ea>
    b72a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    b72e:	2a00      	cmp	r2, #0
    b730:	f040 8132 	bne.w	b998 <_vfiprintf_r+0xe98>
    b734:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b736:	2a00      	cmp	r2, #0
    b738:	f47f ae62 	bne.w	b400 <_vfiprintf_r+0x900>
    b73c:	4618      	mov	r0, r3
    b73e:	2101      	movs	r1, #1
    b740:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b744:	e427      	b.n	af96 <_vfiprintf_r+0x496>
    b746:	2100      	movs	r1, #0
    b748:	2208      	movs	r2, #8
    b74a:	a816      	add	r0, sp, #88	; 0x58
    b74c:	9413      	str	r4, [sp, #76]	; 0x4c
    b74e:	f7fb fe9f 	bl	7490 <memset>
    b752:	1c79      	adds	r1, r7, #1
    b754:	f000 80bc 	beq.w	b8d0 <_vfiprintf_r+0xdd0>
    b758:	2500      	movs	r5, #0
    b75a:	9407      	str	r4, [sp, #28]
    b75c:	462c      	mov	r4, r5
    b75e:	e00c      	b.n	b77a <_vfiprintf_r+0xc7a>
    b760:	a92b      	add	r1, sp, #172	; 0xac
    b762:	4658      	mov	r0, fp
    b764:	f7ff f94a 	bl	a9fc <_wcrtomb_r>
    b768:	1c42      	adds	r2, r0, #1
    b76a:	4420      	add	r0, r4
    b76c:	f000 816b 	beq.w	ba46 <_vfiprintf_r+0xf46>
    b770:	42b8      	cmp	r0, r7
    b772:	dc08      	bgt.n	b786 <_vfiprintf_r+0xc86>
    b774:	f000 8170 	beq.w	ba58 <_vfiprintf_r+0xf58>
    b778:	4604      	mov	r4, r0
    b77a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b77c:	5952      	ldr	r2, [r2, r5]
    b77e:	ab16      	add	r3, sp, #88	; 0x58
    b780:	3504      	adds	r5, #4
    b782:	2a00      	cmp	r2, #0
    b784:	d1ec      	bne.n	b760 <_vfiprintf_r+0xc60>
    b786:	9404      	str	r4, [sp, #16]
    b788:	9c07      	ldr	r4, [sp, #28]
    b78a:	e0af      	b.n	b8ec <_vfiprintf_r+0xdec>
    b78c:	f016 0310 	ands.w	r3, r6, #16
    b790:	9807      	ldr	r0, [sp, #28]
    b792:	d10c      	bne.n	b7ae <_vfiprintf_r+0xcae>
    b794:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    b798:	d005      	beq.n	b7a6 <_vfiprintf_r+0xca6>
    b79a:	461a      	mov	r2, r3
    b79c:	f850 3b04 	ldr.w	r3, [r0], #4
    b7a0:	9007      	str	r0, [sp, #28]
    b7a2:	b29b      	uxth	r3, r3
    b7a4:	e7a1      	b.n	b6ea <_vfiprintf_r+0xbea>
    b7a6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    b7aa:	f040 80e1 	bne.w	b970 <_vfiprintf_r+0xe70>
    b7ae:	f850 3b04 	ldr.w	r3, [r0], #4
    b7b2:	9007      	str	r0, [sp, #28]
    b7b4:	e799      	b.n	b6ea <_vfiprintf_r+0xbea>
    b7b6:	bf00      	nop
    b7b8:	20000abc 	.word	0x20000abc
    b7bc:	20000aa0 	.word	0x20000aa0
    b7c0:	20000a8c 	.word	0x20000a8c
    b7c4:	9903      	ldr	r1, [sp, #12]
    b7c6:	9704      	str	r7, [sp, #16]
    b7c8:	ac44      	add	r4, sp, #272	; 0x110
    b7ca:	469e      	mov	lr, r3
    b7cc:	ee08 ba90 	vmov	s17, fp
    b7d0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    b7d4:	f04f 0c00 	mov.w	ip, #0
    b7d8:	4623      	mov	r3, r4
    b7da:	e006      	b.n	b7ea <_vfiprintf_r+0xcea>
    b7dc:	f1be 0f0a 	cmp.w	lr, #10
    b7e0:	f172 0200 	sbcs.w	r2, r2, #0
    b7e4:	d339      	bcc.n	b85a <_vfiprintf_r+0xd5a>
    b7e6:	46a6      	mov	lr, r4
    b7e8:	462a      	mov	r2, r5
    b7ea:	49a6      	ldr	r1, [pc, #664]	; (ba84 <_vfiprintf_r+0xf84>)
    b7ec:	eb1e 0002 	adds.w	r0, lr, r2
    b7f0:	f140 0000 	adc.w	r0, r0, #0
    b7f4:	460f      	mov	r7, r1
    b7f6:	fba1 1400 	umull	r1, r4, r1, r0
    b7fa:	f024 0103 	bic.w	r1, r4, #3
    b7fe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    b802:	1a40      	subs	r0, r0, r1
    b804:	ebbe 0100 	subs.w	r1, lr, r0
    b808:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    b80c:	f162 0400 	sbc.w	r4, r2, #0
    b810:	fb05 f501 	mul.w	r5, r5, r1
    b814:	fb07 5504 	mla	r5, r7, r4, r5
    b818:	fba1 4107 	umull	r4, r1, r1, r7
    b81c:	440d      	add	r5, r1
    b81e:	2705      	movs	r7, #5
    b820:	f004 0101 	and.w	r1, r4, #1
    b824:	fba1 1b07 	umull	r1, fp, r1, r7
    b828:	1809      	adds	r1, r1, r0
    b82a:	0864      	lsrs	r4, r4, #1
    b82c:	3130      	adds	r1, #48	; 0x30
    b82e:	f803 1c01 	strb.w	r1, [r3, #-1]
    b832:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    b836:	f10c 0c01 	add.w	ip, ip, #1
    b83a:	3b01      	subs	r3, #1
    b83c:	086d      	lsrs	r5, r5, #1
    b83e:	2e00      	cmp	r6, #0
    b840:	d0cc      	beq.n	b7dc <_vfiprintf_r+0xcdc>
    b842:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b844:	7809      	ldrb	r1, [r1, #0]
    b846:	4561      	cmp	r1, ip
    b848:	d1c8      	bne.n	b7dc <_vfiprintf_r+0xcdc>
    b84a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    b84e:	d0c5      	beq.n	b7dc <_vfiprintf_r+0xcdc>
    b850:	f1be 0f0a 	cmp.w	lr, #10
    b854:	f172 0200 	sbcs.w	r2, r2, #0
    b858:	d26c      	bcs.n	b934 <_vfiprintf_r+0xe34>
    b85a:	461c      	mov	r4, r3
    b85c:	ab44      	add	r3, sp, #272	; 0x110
    b85e:	1b1b      	subs	r3, r3, r4
    b860:	9f04      	ldr	r7, [sp, #16]
    b862:	9e03      	ldr	r6, [sp, #12]
    b864:	9304      	str	r3, [sp, #16]
    b866:	ee18 ba90 	vmov	fp, s17
    b86a:	f7ff ba72 	b.w	ad52 <_vfiprintf_r+0x252>
    b86e:	9603      	str	r6, [sp, #12]
    b870:	f7ff ba62 	b.w	ad38 <_vfiprintf_r+0x238>
    b874:	4658      	mov	r0, fp
    b876:	f7fb fcfb 	bl	7270 <__sinit>
    b87a:	f7ff b95b 	b.w	ab34 <_vfiprintf_r+0x34>
    b87e:	2901      	cmp	r1, #1
    b880:	9603      	str	r6, [sp, #12]
    b882:	f47f accd 	bne.w	b220 <_vfiprintf_r+0x720>
    b886:	f7ff ba5c 	b.w	ad42 <_vfiprintf_r+0x242>
    b88a:	9b07      	ldr	r3, [sp, #28]
    b88c:	9905      	ldr	r1, [sp, #20]
    b88e:	f853 2b04 	ldr.w	r2, [r3], #4
    b892:	6011      	str	r1, [r2, #0]
    b894:	9307      	str	r3, [sp, #28]
    b896:	f7ff b97e 	b.w	ab96 <_vfiprintf_r+0x96>
    b89a:	2f06      	cmp	r7, #6
    b89c:	463b      	mov	r3, r7
    b89e:	9a03      	ldr	r2, [sp, #12]
    b8a0:	4c79      	ldr	r4, [pc, #484]	; (ba88 <_vfiprintf_r+0xf88>)
    b8a2:	9207      	str	r2, [sp, #28]
    b8a4:	bf28      	it	cs
    b8a6:	2306      	movcs	r3, #6
    b8a8:	9304      	str	r3, [sp, #16]
    b8aa:	9303      	str	r3, [sp, #12]
    b8ac:	f7ff bb25 	b.w	aefa <_vfiprintf_r+0x3fa>
    b8b0:	9b03      	ldr	r3, [sp, #12]
    b8b2:	9907      	ldr	r1, [sp, #28]
    b8b4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    b8b8:	bf14      	ite	ne
    b8ba:	f851 3b04 	ldrne.w	r3, [r1], #4
    b8be:	f851 3b04 	ldreq.w	r3, [r1], #4
    b8c2:	9107      	str	r1, [sp, #28]
    b8c4:	bf1c      	itt	ne
    b8c6:	4602      	movne	r2, r0
    b8c8:	b2db      	uxtbne	r3, r3
    b8ca:	2101      	movs	r1, #1
    b8cc:	f7ff ba8f 	b.w	adee <_vfiprintf_r+0x2ee>
    b8d0:	ab16      	add	r3, sp, #88	; 0x58
    b8d2:	9300      	str	r3, [sp, #0]
    b8d4:	2300      	movs	r3, #0
    b8d6:	4619      	mov	r1, r3
    b8d8:	aa13      	add	r2, sp, #76	; 0x4c
    b8da:	4658      	mov	r0, fp
    b8dc:	f7ff f8b4 	bl	aa48 <_wcsrtombs_r>
    b8e0:	4603      	mov	r3, r0
    b8e2:	3301      	adds	r3, #1
    b8e4:	9004      	str	r0, [sp, #16]
    b8e6:	f000 80ae 	beq.w	ba46 <_vfiprintf_r+0xf46>
    b8ea:	9413      	str	r4, [sp, #76]	; 0x4c
    b8ec:	9b04      	ldr	r3, [sp, #16]
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d030      	beq.n	b954 <_vfiprintf_r+0xe54>
    b8f2:	2b63      	cmp	r3, #99	; 0x63
    b8f4:	dc63      	bgt.n	b9be <_vfiprintf_r+0xebe>
    b8f6:	2300      	movs	r3, #0
    b8f8:	9308      	str	r3, [sp, #32]
    b8fa:	ac2b      	add	r4, sp, #172	; 0xac
    b8fc:	2208      	movs	r2, #8
    b8fe:	2100      	movs	r1, #0
    b900:	a816      	add	r0, sp, #88	; 0x58
    b902:	f7fb fdc5 	bl	7490 <memset>
    b906:	9d04      	ldr	r5, [sp, #16]
    b908:	ab16      	add	r3, sp, #88	; 0x58
    b90a:	9300      	str	r3, [sp, #0]
    b90c:	aa13      	add	r2, sp, #76	; 0x4c
    b90e:	462b      	mov	r3, r5
    b910:	4621      	mov	r1, r4
    b912:	4658      	mov	r0, fp
    b914:	f7ff f898 	bl	aa48 <_wcsrtombs_r>
    b918:	4285      	cmp	r5, r0
    b91a:	f040 80ab 	bne.w	ba74 <_vfiprintf_r+0xf74>
    b91e:	9b03      	ldr	r3, [sp, #12]
    b920:	9a04      	ldr	r2, [sp, #16]
    b922:	9307      	str	r3, [sp, #28]
    b924:	2300      	movs	r3, #0
    b926:	54a3      	strb	r3, [r4, r2]
    b928:	461f      	mov	r7, r3
    b92a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b92e:	9303      	str	r3, [sp, #12]
    b930:	f7ff ba16 	b.w	ad60 <_vfiprintf_r+0x260>
    b934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b936:	990d      	ldr	r1, [sp, #52]	; 0x34
    b938:	1a9b      	subs	r3, r3, r2
    b93a:	4618      	mov	r0, r3
    b93c:	9308      	str	r3, [sp, #32]
    b93e:	f7fb fea5 	bl	768c <strncpy>
    b942:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b944:	9b08      	ldr	r3, [sp, #32]
    b946:	784a      	ldrb	r2, [r1, #1]
    b948:	b10a      	cbz	r2, b94e <_vfiprintf_r+0xe4e>
    b94a:	3101      	adds	r1, #1
    b94c:	910b      	str	r1, [sp, #44]	; 0x2c
    b94e:	f04f 0c00 	mov.w	ip, #0
    b952:	e748      	b.n	b7e6 <_vfiprintf_r+0xce6>
    b954:	9b03      	ldr	r3, [sp, #12]
    b956:	9307      	str	r3, [sp, #28]
    b958:	9b04      	ldr	r3, [sp, #16]
    b95a:	9303      	str	r3, [sp, #12]
    b95c:	461f      	mov	r7, r3
    b95e:	9308      	str	r3, [sp, #32]
    b960:	f7ff b9fe 	b.w	ad60 <_vfiprintf_r+0x260>
    b964:	2101      	movs	r1, #1
    b966:	4618      	mov	r0, r3
    b968:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b96c:	f7ff bb13 	b.w	af96 <_vfiprintf_r+0x496>
    b970:	f850 3b04 	ldr.w	r3, [r0], #4
    b974:	9007      	str	r0, [sp, #28]
    b976:	4622      	mov	r2, r4
    b978:	b2db      	uxtb	r3, r3
    b97a:	e6b6      	b.n	b6ea <_vfiprintf_r+0xbea>
    b97c:	f912 3b04 	ldrsb.w	r3, [r2], #4
    b980:	9207      	str	r2, [sp, #28]
    b982:	17da      	asrs	r2, r3, #31
    b984:	4611      	mov	r1, r2
    b986:	f7ff b9ca 	b.w	ad1e <_vfiprintf_r+0x21e>
    b98a:	f851 3b04 	ldr.w	r3, [r1], #4
    b98e:	9107      	str	r1, [sp, #28]
    b990:	4602      	mov	r2, r0
    b992:	b2db      	uxtb	r3, r3
    b994:	f7ff ba27 	b.w	ade6 <_vfiprintf_r+0x2e6>
    b998:	2301      	movs	r3, #1
    b99a:	931c      	str	r3, [sp, #112]	; 0x70
    b99c:	2101      	movs	r1, #1
    b99e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    b9a2:	931b      	str	r3, [sp, #108]	; 0x6c
    b9a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    b9a8:	460b      	mov	r3, r1
    b9aa:	f7ff bacd 	b.w	af48 <_vfiprintf_r+0x448>
    b9ae:	9b07      	ldr	r3, [sp, #28]
    b9b0:	9905      	ldr	r1, [sp, #20]
    b9b2:	f853 2b04 	ldr.w	r2, [r3], #4
    b9b6:	9307      	str	r3, [sp, #28]
    b9b8:	8011      	strh	r1, [r2, #0]
    b9ba:	f7ff b8ec 	b.w	ab96 <_vfiprintf_r+0x96>
    b9be:	1c59      	adds	r1, r3, #1
    b9c0:	4658      	mov	r0, fp
    b9c2:	f7f9 fe6b 	bl	569c <_malloc_r>
    b9c6:	4604      	mov	r4, r0
    b9c8:	2800      	cmp	r0, #0
    b9ca:	d03c      	beq.n	ba46 <_vfiprintf_r+0xf46>
    b9cc:	9008      	str	r0, [sp, #32]
    b9ce:	e795      	b.n	b8fc <_vfiprintf_r+0xdfc>
    b9d0:	6d88      	ldr	r0, [r1, #88]	; 0x58
    b9d2:	f7fc f93d 	bl	7c50 <__retarget_lock_release_recursive>
    b9d6:	f7ff b9e9 	b.w	adac <_vfiprintf_r+0x2ac>
    b9da:	9b03      	ldr	r3, [sp, #12]
    b9dc:	9307      	str	r3, [sp, #28]
    b9de:	e9cd 7703 	strd	r7, r7, [sp, #12]
    b9e2:	9f08      	ldr	r7, [sp, #32]
    b9e4:	f7ff b9bc 	b.w	ad60 <_vfiprintf_r+0x260>
    b9e8:	9819      	ldr	r0, [sp, #100]	; 0x64
    b9ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    b9ec:	3001      	adds	r0, #1
    b9ee:	e545      	b.n	b47c <_vfiprintf_r+0x97c>
    b9f0:	9b03      	ldr	r3, [sp, #12]
    b9f2:	9307      	str	r3, [sp, #28]
    b9f4:	4620      	mov	r0, r4
    b9f6:	f7fc fb03 	bl	8000 <strlen>
    b9fa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    b9fe:	462f      	mov	r7, r5
    ba00:	9004      	str	r0, [sp, #16]
    ba02:	9303      	str	r3, [sp, #12]
    ba04:	9508      	str	r5, [sp, #32]
    ba06:	f7ff b9ab 	b.w	ad60 <_vfiprintf_r+0x260>
    ba0a:	ee18 1a10 	vmov	r1, s16
    ba0e:	aa18      	add	r2, sp, #96	; 0x60
    ba10:	4658      	mov	r0, fp
    ba12:	f7ff f839 	bl	aa88 <__sprint_r.part.0>
    ba16:	2800      	cmp	r0, #0
    ba18:	f43f aa36 	beq.w	ae88 <_vfiprintf_r+0x388>
    ba1c:	f7ff ba4d 	b.w	aeba <_vfiprintf_r+0x3ba>
    ba20:	9819      	ldr	r0, [sp, #100]	; 0x64
    ba22:	3001      	adds	r0, #1
    ba24:	e57a      	b.n	b51c <_vfiprintf_r+0xa1c>
    ba26:	468c      	mov	ip, r1
    ba28:	e46e      	b.n	b308 <_vfiprintf_r+0x808>
    ba2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    ba2c:	07d9      	lsls	r1, r3, #31
    ba2e:	d405      	bmi.n	ba3c <_vfiprintf_r+0xf3c>
    ba30:	89ab      	ldrh	r3, [r5, #12]
    ba32:	059a      	lsls	r2, r3, #22
    ba34:	d402      	bmi.n	ba3c <_vfiprintf_r+0xf3c>
    ba36:	6da8      	ldr	r0, [r5, #88]	; 0x58
    ba38:	f7fc f90a 	bl	7c50 <__retarget_lock_release_recursive>
    ba3c:	f04f 33ff 	mov.w	r3, #4294967295
    ba40:	9305      	str	r3, [sp, #20]
    ba42:	f7ff ba49 	b.w	aed8 <_vfiprintf_r+0x3d8>
    ba46:	ee18 2a10 	vmov	r2, s16
    ba4a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    ba4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba52:	8193      	strh	r3, [r2, #12]
    ba54:	f7ff ba35 	b.w	aec2 <_vfiprintf_r+0x3c2>
    ba58:	9c07      	ldr	r4, [sp, #28]
    ba5a:	9704      	str	r7, [sp, #16]
    ba5c:	e746      	b.n	b8ec <_vfiprintf_r+0xdec>
    ba5e:	9b07      	ldr	r3, [sp, #28]
    ba60:	f898 1001 	ldrb.w	r1, [r8, #1]
    ba64:	f853 7b04 	ldr.w	r7, [r3], #4
    ba68:	9307      	str	r3, [sp, #28]
    ba6a:	4690      	mov	r8, r2
    ba6c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    ba70:	f7ff b8b9 	b.w	abe6 <_vfiprintf_r+0xe6>
    ba74:	ee18 2a10 	vmov	r2, s16
    ba78:	8993      	ldrh	r3, [r2, #12]
    ba7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ba7e:	8193      	strh	r3, [r2, #12]
    ba80:	f7ff ba15 	b.w	aeae <_vfiprintf_r+0x3ae>
    ba84:	cccccccd 	.word	0xcccccccd
    ba88:	20000ab4 	.word	0x20000ab4

0000ba8c <__sbprintf>:
    ba8c:	b570      	push	{r4, r5, r6, lr}
    ba8e:	460c      	mov	r4, r1
    ba90:	8989      	ldrh	r1, [r1, #12]
    ba92:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    ba96:	f021 0102 	bic.w	r1, r1, #2
    ba9a:	f8ad 1014 	strh.w	r1, [sp, #20]
    ba9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
    baa0:	911b      	str	r1, [sp, #108]	; 0x6c
    baa2:	89e1      	ldrh	r1, [r4, #14]
    baa4:	f8ad 1016 	strh.w	r1, [sp, #22]
    baa8:	69e1      	ldr	r1, [r4, #28]
    baaa:	9109      	str	r1, [sp, #36]	; 0x24
    baac:	6a61      	ldr	r1, [r4, #36]	; 0x24
    baae:	910b      	str	r1, [sp, #44]	; 0x2c
    bab0:	a91c      	add	r1, sp, #112	; 0x70
    bab2:	9102      	str	r1, [sp, #8]
    bab4:	9106      	str	r1, [sp, #24]
    bab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    baba:	4606      	mov	r6, r0
    babc:	9104      	str	r1, [sp, #16]
    babe:	9107      	str	r1, [sp, #28]
    bac0:	a818      	add	r0, sp, #96	; 0x60
    bac2:	2100      	movs	r1, #0
    bac4:	e9cd 3200 	strd	r3, r2, [sp]
    bac8:	9108      	str	r1, [sp, #32]
    baca:	f7fc f8bb 	bl	7c44 <__retarget_lock_init_recursive>
    bace:	e9dd 3200 	ldrd	r3, r2, [sp]
    bad2:	a902      	add	r1, sp, #8
    bad4:	4630      	mov	r0, r6
    bad6:	f7ff f813 	bl	ab00 <_vfiprintf_r>
    bada:	1e05      	subs	r5, r0, #0
    badc:	db07      	blt.n	baee <__sbprintf+0x62>
    bade:	a902      	add	r1, sp, #8
    bae0:	4630      	mov	r0, r6
    bae2:	f7fd ff61 	bl	99a8 <_fflush_r>
    bae6:	2800      	cmp	r0, #0
    bae8:	bf18      	it	ne
    baea:	f04f 35ff 	movne.w	r5, #4294967295
    baee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    baf2:	065b      	lsls	r3, r3, #25
    baf4:	d503      	bpl.n	bafe <__sbprintf+0x72>
    baf6:	89a3      	ldrh	r3, [r4, #12]
    baf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bafc:	81a3      	strh	r3, [r4, #12]
    bafe:	9818      	ldr	r0, [sp, #96]	; 0x60
    bb00:	f7fc f8a2 	bl	7c48 <__retarget_lock_close_recursive>
    bb04:	4628      	mov	r0, r5
    bb06:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    bb0a:	bd70      	pop	{r4, r5, r6, pc}

0000bb0c <__sfvwrite_r>:
    bb0c:	6893      	ldr	r3, [r2, #8]
    bb0e:	2b00      	cmp	r3, #0
    bb10:	f000 8085 	beq.w	bc1e <__sfvwrite_r+0x112>
    bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    bb1c:	460c      	mov	r4, r1
    bb1e:	0719      	lsls	r1, r3, #28
    bb20:	4680      	mov	r8, r0
    bb22:	b083      	sub	sp, #12
    bb24:	4617      	mov	r7, r2
    bb26:	b298      	uxth	r0, r3
    bb28:	d525      	bpl.n	bb76 <__sfvwrite_r+0x6a>
    bb2a:	6923      	ldr	r3, [r4, #16]
    bb2c:	b31b      	cbz	r3, bb76 <__sfvwrite_r+0x6a>
    bb2e:	f010 0302 	ands.w	r3, r0, #2
    bb32:	683d      	ldr	r5, [r7, #0]
    bb34:	d02d      	beq.n	bb92 <__sfvwrite_r+0x86>
    bb36:	f04f 0a00 	mov.w	sl, #0
    bb3a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; bdfc <__sfvwrite_r+0x2f0>
    bb3e:	4656      	mov	r6, sl
    bb40:	46b9      	mov	r9, r7
    bb42:	455e      	cmp	r6, fp
    bb44:	4633      	mov	r3, r6
    bb46:	4652      	mov	r2, sl
    bb48:	bf28      	it	cs
    bb4a:	465b      	movcs	r3, fp
    bb4c:	4640      	mov	r0, r8
    bb4e:	2e00      	cmp	r6, #0
    bb50:	d052      	beq.n	bbf8 <__sfvwrite_r+0xec>
    bb52:	69e1      	ldr	r1, [r4, #28]
    bb54:	6a67      	ldr	r7, [r4, #36]	; 0x24
    bb56:	47b8      	blx	r7
    bb58:	2800      	cmp	r0, #0
    bb5a:	dd56      	ble.n	bc0a <__sfvwrite_r+0xfe>
    bb5c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    bb60:	1a1b      	subs	r3, r3, r0
    bb62:	4482      	add	sl, r0
    bb64:	1a36      	subs	r6, r6, r0
    bb66:	f8c9 3008 	str.w	r3, [r9, #8]
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d1e9      	bne.n	bb42 <__sfvwrite_r+0x36>
    bb6e:	2000      	movs	r0, #0
    bb70:	b003      	add	sp, #12
    bb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb76:	4621      	mov	r1, r4
    bb78:	4640      	mov	r0, r8
    bb7a:	f000 f941 	bl	be00 <__swsetup_r>
    bb7e:	2800      	cmp	r0, #0
    bb80:	f040 8138 	bne.w	bdf4 <__sfvwrite_r+0x2e8>
    bb84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bb88:	683d      	ldr	r5, [r7, #0]
    bb8a:	b298      	uxth	r0, r3
    bb8c:	f010 0302 	ands.w	r3, r0, #2
    bb90:	d1d1      	bne.n	bb36 <__sfvwrite_r+0x2a>
    bb92:	f010 0901 	ands.w	r9, r0, #1
    bb96:	d144      	bne.n	bc22 <__sfvwrite_r+0x116>
    bb98:	464e      	mov	r6, r9
    bb9a:	9700      	str	r7, [sp, #0]
    bb9c:	b346      	cbz	r6, bbf0 <__sfvwrite_r+0xe4>
    bb9e:	0582      	lsls	r2, r0, #22
    bba0:	f8d4 b008 	ldr.w	fp, [r4, #8]
    bba4:	f140 8085 	bpl.w	bcb2 <__sfvwrite_r+0x1a6>
    bba8:	45b3      	cmp	fp, r6
    bbaa:	465a      	mov	r2, fp
    bbac:	f200 80b4 	bhi.w	bd18 <__sfvwrite_r+0x20c>
    bbb0:	f410 6f90 	tst.w	r0, #1152	; 0x480
    bbb4:	f040 80c1 	bne.w	bd3a <__sfvwrite_r+0x22e>
    bbb8:	6820      	ldr	r0, [r4, #0]
    bbba:	9201      	str	r2, [sp, #4]
    bbbc:	4649      	mov	r1, r9
    bbbe:	f7fb fbeb 	bl	7398 <memmove>
    bbc2:	68a3      	ldr	r3, [r4, #8]
    bbc4:	9a01      	ldr	r2, [sp, #4]
    bbc6:	eba3 010b 	sub.w	r1, r3, fp
    bbca:	6823      	ldr	r3, [r4, #0]
    bbcc:	60a1      	str	r1, [r4, #8]
    bbce:	4413      	add	r3, r2
    bbd0:	46b2      	mov	sl, r6
    bbd2:	6023      	str	r3, [r4, #0]
    bbd4:	2600      	movs	r6, #0
    bbd6:	9a00      	ldr	r2, [sp, #0]
    bbd8:	6893      	ldr	r3, [r2, #8]
    bbda:	eba3 030a 	sub.w	r3, r3, sl
    bbde:	44d1      	add	r9, sl
    bbe0:	6093      	str	r3, [r2, #8]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	d0c3      	beq.n	bb6e <__sfvwrite_r+0x62>
    bbe6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    bbea:	b280      	uxth	r0, r0
    bbec:	2e00      	cmp	r6, #0
    bbee:	d1d6      	bne.n	bb9e <__sfvwrite_r+0x92>
    bbf0:	e9d5 9600 	ldrd	r9, r6, [r5]
    bbf4:	3508      	adds	r5, #8
    bbf6:	e7d1      	b.n	bb9c <__sfvwrite_r+0x90>
    bbf8:	e9d5 a600 	ldrd	sl, r6, [r5]
    bbfc:	3508      	adds	r5, #8
    bbfe:	e7a0      	b.n	bb42 <__sfvwrite_r+0x36>
    bc00:	4621      	mov	r1, r4
    bc02:	4640      	mov	r0, r8
    bc04:	f7fd fed0 	bl	99a8 <_fflush_r>
    bc08:	b388      	cbz	r0, bc6e <__sfvwrite_r+0x162>
    bc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bc0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bc12:	f04f 30ff 	mov.w	r0, #4294967295
    bc16:	81a3      	strh	r3, [r4, #12]
    bc18:	b003      	add	sp, #12
    bc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc1e:	2000      	movs	r0, #0
    bc20:	4770      	bx	lr
    bc22:	461e      	mov	r6, r3
    bc24:	46ba      	mov	sl, r7
    bc26:	4699      	mov	r9, r3
    bc28:	4618      	mov	r0, r3
    bc2a:	9500      	str	r5, [sp, #0]
    bc2c:	461f      	mov	r7, r3
    bc2e:	b366      	cbz	r6, bc8a <__sfvwrite_r+0x17e>
    bc30:	2800      	cmp	r0, #0
    bc32:	d032      	beq.n	bc9a <__sfvwrite_r+0x18e>
    bc34:	464a      	mov	r2, r9
    bc36:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    bc3a:	6820      	ldr	r0, [r4, #0]
    bc3c:	68a5      	ldr	r5, [r4, #8]
    bc3e:	42b2      	cmp	r2, r6
    bc40:	bf28      	it	cs
    bc42:	4632      	movcs	r2, r6
    bc44:	4288      	cmp	r0, r1
    bc46:	d904      	bls.n	bc52 <__sfvwrite_r+0x146>
    bc48:	eb05 0b03 	add.w	fp, r5, r3
    bc4c:	455a      	cmp	r2, fp
    bc4e:	f300 80a7 	bgt.w	bda0 <__sfvwrite_r+0x294>
    bc52:	4293      	cmp	r3, r2
    bc54:	dc64      	bgt.n	bd20 <__sfvwrite_r+0x214>
    bc56:	69e1      	ldr	r1, [r4, #28]
    bc58:	6a65      	ldr	r5, [r4, #36]	; 0x24
    bc5a:	463a      	mov	r2, r7
    bc5c:	4640      	mov	r0, r8
    bc5e:	47a8      	blx	r5
    bc60:	f1b0 0b00 	subs.w	fp, r0, #0
    bc64:	ddd1      	ble.n	bc0a <__sfvwrite_r+0xfe>
    bc66:	ebb9 090b 	subs.w	r9, r9, fp
    bc6a:	d0c9      	beq.n	bc00 <__sfvwrite_r+0xf4>
    bc6c:	2001      	movs	r0, #1
    bc6e:	f8da 3008 	ldr.w	r3, [sl, #8]
    bc72:	eba3 030b 	sub.w	r3, r3, fp
    bc76:	445f      	add	r7, fp
    bc78:	eba6 060b 	sub.w	r6, r6, fp
    bc7c:	f8ca 3008 	str.w	r3, [sl, #8]
    bc80:	2b00      	cmp	r3, #0
    bc82:	f43f af74 	beq.w	bb6e <__sfvwrite_r+0x62>
    bc86:	2e00      	cmp	r6, #0
    bc88:	d1d2      	bne.n	bc30 <__sfvwrite_r+0x124>
    bc8a:	9a00      	ldr	r2, [sp, #0]
    bc8c:	6856      	ldr	r6, [r2, #4]
    bc8e:	4613      	mov	r3, r2
    bc90:	3208      	adds	r2, #8
    bc92:	9200      	str	r2, [sp, #0]
    bc94:	2e00      	cmp	r6, #0
    bc96:	d0f8      	beq.n	bc8a <__sfvwrite_r+0x17e>
    bc98:	681f      	ldr	r7, [r3, #0]
    bc9a:	4632      	mov	r2, r6
    bc9c:	210a      	movs	r1, #10
    bc9e:	4638      	mov	r0, r7
    bca0:	f7fd fef6 	bl	9a90 <memchr>
    bca4:	2800      	cmp	r0, #0
    bca6:	f000 809c 	beq.w	bde2 <__sfvwrite_r+0x2d6>
    bcaa:	3001      	adds	r0, #1
    bcac:	eba0 0907 	sub.w	r9, r0, r7
    bcb0:	e7c0      	b.n	bc34 <__sfvwrite_r+0x128>
    bcb2:	6820      	ldr	r0, [r4, #0]
    bcb4:	6923      	ldr	r3, [r4, #16]
    bcb6:	4298      	cmp	r0, r3
    bcb8:	d816      	bhi.n	bce8 <__sfvwrite_r+0x1dc>
    bcba:	6962      	ldr	r2, [r4, #20]
    bcbc:	42b2      	cmp	r2, r6
    bcbe:	d813      	bhi.n	bce8 <__sfvwrite_r+0x1dc>
    bcc0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    bcc4:	42b3      	cmp	r3, r6
    bcc6:	bf28      	it	cs
    bcc8:	4633      	movcs	r3, r6
    bcca:	69e1      	ldr	r1, [r4, #28]
    bccc:	fb93 f3f2 	sdiv	r3, r3, r2
    bcd0:	6a67      	ldr	r7, [r4, #36]	; 0x24
    bcd2:	fb02 f303 	mul.w	r3, r2, r3
    bcd6:	4640      	mov	r0, r8
    bcd8:	464a      	mov	r2, r9
    bcda:	47b8      	blx	r7
    bcdc:	f1b0 0a00 	subs.w	sl, r0, #0
    bce0:	dd93      	ble.n	bc0a <__sfvwrite_r+0xfe>
    bce2:	eba6 060a 	sub.w	r6, r6, sl
    bce6:	e776      	b.n	bbd6 <__sfvwrite_r+0xca>
    bce8:	45b3      	cmp	fp, r6
    bcea:	46da      	mov	sl, fp
    bcec:	bf28      	it	cs
    bcee:	46b2      	movcs	sl, r6
    bcf0:	4652      	mov	r2, sl
    bcf2:	4649      	mov	r1, r9
    bcf4:	f7fb fb50 	bl	7398 <memmove>
    bcf8:	68a3      	ldr	r3, [r4, #8]
    bcfa:	6822      	ldr	r2, [r4, #0]
    bcfc:	eba3 030a 	sub.w	r3, r3, sl
    bd00:	4452      	add	r2, sl
    bd02:	60a3      	str	r3, [r4, #8]
    bd04:	6022      	str	r2, [r4, #0]
    bd06:	2b00      	cmp	r3, #0
    bd08:	d1eb      	bne.n	bce2 <__sfvwrite_r+0x1d6>
    bd0a:	4621      	mov	r1, r4
    bd0c:	4640      	mov	r0, r8
    bd0e:	f7fd fe4b 	bl	99a8 <_fflush_r>
    bd12:	2800      	cmp	r0, #0
    bd14:	d0e5      	beq.n	bce2 <__sfvwrite_r+0x1d6>
    bd16:	e778      	b.n	bc0a <__sfvwrite_r+0xfe>
    bd18:	6820      	ldr	r0, [r4, #0]
    bd1a:	46b3      	mov	fp, r6
    bd1c:	4632      	mov	r2, r6
    bd1e:	e74c      	b.n	bbba <__sfvwrite_r+0xae>
    bd20:	4639      	mov	r1, r7
    bd22:	9201      	str	r2, [sp, #4]
    bd24:	f7fb fb38 	bl	7398 <memmove>
    bd28:	9a01      	ldr	r2, [sp, #4]
    bd2a:	68a3      	ldr	r3, [r4, #8]
    bd2c:	1a9b      	subs	r3, r3, r2
    bd2e:	60a3      	str	r3, [r4, #8]
    bd30:	6823      	ldr	r3, [r4, #0]
    bd32:	4413      	add	r3, r2
    bd34:	6023      	str	r3, [r4, #0]
    bd36:	4693      	mov	fp, r2
    bd38:	e795      	b.n	bc66 <__sfvwrite_r+0x15a>
    bd3a:	6823      	ldr	r3, [r4, #0]
    bd3c:	6921      	ldr	r1, [r4, #16]
    bd3e:	eba3 0b01 	sub.w	fp, r3, r1
    bd42:	6963      	ldr	r3, [r4, #20]
    bd44:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    bd48:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    bd4c:	f10b 0301 	add.w	r3, fp, #1
    bd50:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    bd54:	4433      	add	r3, r6
    bd56:	4553      	cmp	r3, sl
    bd58:	4652      	mov	r2, sl
    bd5a:	bf84      	itt	hi
    bd5c:	469a      	movhi	sl, r3
    bd5e:	4652      	movhi	r2, sl
    bd60:	0543      	lsls	r3, r0, #21
    bd62:	d52c      	bpl.n	bdbe <__sfvwrite_r+0x2b2>
    bd64:	4611      	mov	r1, r2
    bd66:	4640      	mov	r0, r8
    bd68:	f7f9 fc98 	bl	569c <_malloc_r>
    bd6c:	2800      	cmp	r0, #0
    bd6e:	d03b      	beq.n	bde8 <__sfvwrite_r+0x2dc>
    bd70:	465a      	mov	r2, fp
    bd72:	6921      	ldr	r1, [r4, #16]
    bd74:	9001      	str	r0, [sp, #4]
    bd76:	f7f7 febf 	bl	3af8 <memcpy>
    bd7a:	89a2      	ldrh	r2, [r4, #12]
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    bd82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    bd86:	81a2      	strh	r2, [r4, #12]
    bd88:	eb03 000b 	add.w	r0, r3, fp
    bd8c:	6123      	str	r3, [r4, #16]
    bd8e:	ebaa 030b 	sub.w	r3, sl, fp
    bd92:	f8c4 a014 	str.w	sl, [r4, #20]
    bd96:	60a3      	str	r3, [r4, #8]
    bd98:	6020      	str	r0, [r4, #0]
    bd9a:	46b3      	mov	fp, r6
    bd9c:	4632      	mov	r2, r6
    bd9e:	e70c      	b.n	bbba <__sfvwrite_r+0xae>
    bda0:	4639      	mov	r1, r7
    bda2:	465a      	mov	r2, fp
    bda4:	f7fb faf8 	bl	7398 <memmove>
    bda8:	6823      	ldr	r3, [r4, #0]
    bdaa:	445b      	add	r3, fp
    bdac:	6023      	str	r3, [r4, #0]
    bdae:	4621      	mov	r1, r4
    bdb0:	4640      	mov	r0, r8
    bdb2:	f7fd fdf9 	bl	99a8 <_fflush_r>
    bdb6:	2800      	cmp	r0, #0
    bdb8:	f43f af55 	beq.w	bc66 <__sfvwrite_r+0x15a>
    bdbc:	e725      	b.n	bc0a <__sfvwrite_r+0xfe>
    bdbe:	4640      	mov	r0, r8
    bdc0:	f7f9 ff34 	bl	5c2c <_realloc_r>
    bdc4:	4603      	mov	r3, r0
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d1de      	bne.n	bd88 <__sfvwrite_r+0x27c>
    bdca:	6921      	ldr	r1, [r4, #16]
    bdcc:	4640      	mov	r0, r8
    bdce:	f7fc fa29 	bl	8224 <_free_r>
    bdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bdd6:	220c      	movs	r2, #12
    bdd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bddc:	f8c8 2000 	str.w	r2, [r8]
    bde0:	e715      	b.n	bc0e <__sfvwrite_r+0x102>
    bde2:	1c72      	adds	r2, r6, #1
    bde4:	4691      	mov	r9, r2
    bde6:	e726      	b.n	bc36 <__sfvwrite_r+0x12a>
    bde8:	220c      	movs	r2, #12
    bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bdee:	f8c8 2000 	str.w	r2, [r8]
    bdf2:	e70c      	b.n	bc0e <__sfvwrite_r+0x102>
    bdf4:	f04f 30ff 	mov.w	r0, #4294967295
    bdf8:	e6ba      	b.n	bb70 <__sfvwrite_r+0x64>
    bdfa:	bf00      	nop
    bdfc:	7ffffc00 	.word	0x7ffffc00

0000be00 <__swsetup_r>:
    be00:	b538      	push	{r3, r4, r5, lr}
    be02:	4b31      	ldr	r3, [pc, #196]	; (bec8 <__swsetup_r+0xc8>)
    be04:	681b      	ldr	r3, [r3, #0]
    be06:	4605      	mov	r5, r0
    be08:	460c      	mov	r4, r1
    be0a:	b113      	cbz	r3, be12 <__swsetup_r+0x12>
    be0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    be0e:	2a00      	cmp	r2, #0
    be10:	d04e      	beq.n	beb0 <__swsetup_r+0xb0>
    be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    be16:	0718      	lsls	r0, r3, #28
    be18:	b29a      	uxth	r2, r3
    be1a:	d51c      	bpl.n	be56 <__swsetup_r+0x56>
    be1c:	6921      	ldr	r1, [r4, #16]
    be1e:	b329      	cbz	r1, be6c <__swsetup_r+0x6c>
    be20:	f012 0001 	ands.w	r0, r2, #1
    be24:	d007      	beq.n	be36 <__swsetup_r+0x36>
    be26:	2000      	movs	r0, #0
    be28:	60a0      	str	r0, [r4, #8]
    be2a:	6960      	ldr	r0, [r4, #20]
    be2c:	4240      	negs	r0, r0
    be2e:	61a0      	str	r0, [r4, #24]
    be30:	b139      	cbz	r1, be42 <__swsetup_r+0x42>
    be32:	2000      	movs	r0, #0
    be34:	bd38      	pop	{r3, r4, r5, pc}
    be36:	0795      	lsls	r5, r2, #30
    be38:	bf58      	it	pl
    be3a:	6960      	ldrpl	r0, [r4, #20]
    be3c:	60a0      	str	r0, [r4, #8]
    be3e:	2900      	cmp	r1, #0
    be40:	d1f7      	bne.n	be32 <__swsetup_r+0x32>
    be42:	0612      	lsls	r2, r2, #24
    be44:	bf58      	it	pl
    be46:	4608      	movpl	r0, r1
    be48:	d5f4      	bpl.n	be34 <__swsetup_r+0x34>
    be4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be4e:	81a3      	strh	r3, [r4, #12]
    be50:	f04f 30ff 	mov.w	r0, #4294967295
    be54:	bd38      	pop	{r3, r4, r5, pc}
    be56:	06d1      	lsls	r1, r2, #27
    be58:	d52e      	bpl.n	beb8 <__swsetup_r+0xb8>
    be5a:	0752      	lsls	r2, r2, #29
    be5c:	d414      	bmi.n	be88 <__swsetup_r+0x88>
    be5e:	6921      	ldr	r1, [r4, #16]
    be60:	f043 0308 	orr.w	r3, r3, #8
    be64:	81a3      	strh	r3, [r4, #12]
    be66:	b29a      	uxth	r2, r3
    be68:	2900      	cmp	r1, #0
    be6a:	d1d9      	bne.n	be20 <__swsetup_r+0x20>
    be6c:	f402 7020 	and.w	r0, r2, #640	; 0x280
    be70:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    be74:	d0d4      	beq.n	be20 <__swsetup_r+0x20>
    be76:	4621      	mov	r1, r4
    be78:	4628      	mov	r0, r5
    be7a:	f000 f947 	bl	c10c <__smakebuf_r>
    be7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    be82:	6921      	ldr	r1, [r4, #16]
    be84:	b29a      	uxth	r2, r3
    be86:	e7cb      	b.n	be20 <__swsetup_r+0x20>
    be88:	6b21      	ldr	r1, [r4, #48]	; 0x30
    be8a:	b151      	cbz	r1, bea2 <__swsetup_r+0xa2>
    be8c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    be90:	4291      	cmp	r1, r2
    be92:	d004      	beq.n	be9e <__swsetup_r+0x9e>
    be94:	4628      	mov	r0, r5
    be96:	f7fc f9c5 	bl	8224 <_free_r>
    be9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    be9e:	2200      	movs	r2, #0
    bea0:	6322      	str	r2, [r4, #48]	; 0x30
    bea2:	6921      	ldr	r1, [r4, #16]
    bea4:	2200      	movs	r2, #0
    bea6:	e9c4 1200 	strd	r1, r2, [r4]
    beaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    beae:	e7d7      	b.n	be60 <__swsetup_r+0x60>
    beb0:	4618      	mov	r0, r3
    beb2:	f7fb f9dd 	bl	7270 <__sinit>
    beb6:	e7ac      	b.n	be12 <__swsetup_r+0x12>
    beb8:	2209      	movs	r2, #9
    beba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bebe:	602a      	str	r2, [r5, #0]
    bec0:	f04f 30ff 	mov.w	r0, #4294967295
    bec4:	81a3      	strh	r3, [r4, #12]
    bec6:	bd38      	pop	{r3, r4, r5, pc}
    bec8:	20001968 	.word	0x20001968

0000becc <__fputwc>:
    becc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bed0:	b082      	sub	sp, #8
    bed2:	4682      	mov	sl, r0
    bed4:	4688      	mov	r8, r1
    bed6:	4614      	mov	r4, r2
    bed8:	f7fb fe1e 	bl	7b18 <__locale_mb_cur_max>
    bedc:	2801      	cmp	r0, #1
    bede:	d103      	bne.n	bee8 <__fputwc+0x1c>
    bee0:	f108 33ff 	add.w	r3, r8, #4294967295
    bee4:	2bfe      	cmp	r3, #254	; 0xfe
    bee6:	d936      	bls.n	bf56 <__fputwc+0x8a>
    bee8:	f10d 0904 	add.w	r9, sp, #4
    beec:	4642      	mov	r2, r8
    beee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    bef2:	4649      	mov	r1, r9
    bef4:	4650      	mov	r0, sl
    bef6:	f7fe fd81 	bl	a9fc <_wcrtomb_r>
    befa:	1c42      	adds	r2, r0, #1
    befc:	4606      	mov	r6, r0
    befe:	d032      	beq.n	bf66 <__fputwc+0x9a>
    bf00:	b320      	cbz	r0, bf4c <__fputwc+0x80>
    bf02:	f89d c004 	ldrb.w	ip, [sp, #4]
    bf06:	2500      	movs	r5, #0
    bf08:	e009      	b.n	bf1e <__fputwc+0x52>
    bf0a:	6823      	ldr	r3, [r4, #0]
    bf0c:	1c5a      	adds	r2, r3, #1
    bf0e:	6022      	str	r2, [r4, #0]
    bf10:	f883 c000 	strb.w	ip, [r3]
    bf14:	3501      	adds	r5, #1
    bf16:	42b5      	cmp	r5, r6
    bf18:	d218      	bcs.n	bf4c <__fputwc+0x80>
    bf1a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    bf1e:	68a3      	ldr	r3, [r4, #8]
    bf20:	3b01      	subs	r3, #1
    bf22:	2b00      	cmp	r3, #0
    bf24:	60a3      	str	r3, [r4, #8]
    bf26:	daf0      	bge.n	bf0a <__fputwc+0x3e>
    bf28:	69a7      	ldr	r7, [r4, #24]
    bf2a:	42bb      	cmp	r3, r7
    bf2c:	4661      	mov	r1, ip
    bf2e:	4622      	mov	r2, r4
    bf30:	4650      	mov	r0, sl
    bf32:	db02      	blt.n	bf3a <__fputwc+0x6e>
    bf34:	f1bc 0f0a 	cmp.w	ip, #10
    bf38:	d1e7      	bne.n	bf0a <__fputwc+0x3e>
    bf3a:	f000 f953 	bl	c1e4 <__swbuf_r>
    bf3e:	1c43      	adds	r3, r0, #1
    bf40:	d1e8      	bne.n	bf14 <__fputwc+0x48>
    bf42:	4606      	mov	r6, r0
    bf44:	4630      	mov	r0, r6
    bf46:	b002      	add	sp, #8
    bf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf4c:	4646      	mov	r6, r8
    bf4e:	4630      	mov	r0, r6
    bf50:	b002      	add	sp, #8
    bf52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf56:	fa5f fc88 	uxtb.w	ip, r8
    bf5a:	f88d c004 	strb.w	ip, [sp, #4]
    bf5e:	4606      	mov	r6, r0
    bf60:	f10d 0904 	add.w	r9, sp, #4
    bf64:	e7cf      	b.n	bf06 <__fputwc+0x3a>
    bf66:	89a3      	ldrh	r3, [r4, #12]
    bf68:	4630      	mov	r0, r6
    bf6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bf6e:	81a3      	strh	r3, [r4, #12]
    bf70:	b002      	add	sp, #8
    bf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bf76:	bf00      	nop

0000bf78 <_fputwc_r>:
    bf78:	b530      	push	{r4, r5, lr}
    bf7a:	6e53      	ldr	r3, [r2, #100]	; 0x64
    bf7c:	f013 0f01 	tst.w	r3, #1
    bf80:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    bf84:	4614      	mov	r4, r2
    bf86:	b083      	sub	sp, #12
    bf88:	4605      	mov	r5, r0
    bf8a:	b29a      	uxth	r2, r3
    bf8c:	d101      	bne.n	bf92 <_fputwc_r+0x1a>
    bf8e:	0598      	lsls	r0, r3, #22
    bf90:	d51c      	bpl.n	bfcc <_fputwc_r+0x54>
    bf92:	0490      	lsls	r0, r2, #18
    bf94:	d406      	bmi.n	bfa4 <_fputwc_r+0x2c>
    bf96:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bf98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    bf9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    bfa0:	81a3      	strh	r3, [r4, #12]
    bfa2:	6662      	str	r2, [r4, #100]	; 0x64
    bfa4:	4622      	mov	r2, r4
    bfa6:	4628      	mov	r0, r5
    bfa8:	f7ff ff90 	bl	becc <__fputwc>
    bfac:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bfae:	07da      	lsls	r2, r3, #31
    bfb0:	4605      	mov	r5, r0
    bfb2:	d402      	bmi.n	bfba <_fputwc_r+0x42>
    bfb4:	89a3      	ldrh	r3, [r4, #12]
    bfb6:	059b      	lsls	r3, r3, #22
    bfb8:	d502      	bpl.n	bfc0 <_fputwc_r+0x48>
    bfba:	4628      	mov	r0, r5
    bfbc:	b003      	add	sp, #12
    bfbe:	bd30      	pop	{r4, r5, pc}
    bfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bfc2:	f7fb fe45 	bl	7c50 <__retarget_lock_release_recursive>
    bfc6:	4628      	mov	r0, r5
    bfc8:	b003      	add	sp, #12
    bfca:	bd30      	pop	{r4, r5, pc}
    bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    bfce:	9101      	str	r1, [sp, #4]
    bfd0:	f7fb fe3c 	bl	7c4c <__retarget_lock_acquire_recursive>
    bfd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    bfd8:	9901      	ldr	r1, [sp, #4]
    bfda:	b29a      	uxth	r2, r3
    bfdc:	e7d9      	b.n	bf92 <_fputwc_r+0x1a>
    bfde:	bf00      	nop

0000bfe0 <_wcsnrtombs_l>:
    bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bfe4:	b08b      	sub	sp, #44	; 0x2c
    bfe6:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    bfea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    bfec:	9103      	str	r1, [sp, #12]
    bfee:	4681      	mov	r9, r0
    bff0:	9205      	str	r2, [sp, #20]
    bff2:	461e      	mov	r6, r3
    bff4:	f1b8 0f00 	cmp.w	r8, #0
    bff8:	d05c      	beq.n	c0b4 <_wcsnrtombs_l+0xd4>
    bffa:	9b03      	ldr	r3, [sp, #12]
    bffc:	2b00      	cmp	r3, #0
    bffe:	d05e      	beq.n	c0be <_wcsnrtombs_l+0xde>
    c000:	9b05      	ldr	r3, [sp, #20]
    c002:	681d      	ldr	r5, [r3, #0]
    c004:	2f00      	cmp	r7, #0
    c006:	d06a      	beq.n	c0de <_wcsnrtombs_l+0xfe>
    c008:	1e74      	subs	r4, r6, #1
    c00a:	b34e      	cbz	r6, c060 <_wcsnrtombs_l+0x80>
    c00c:	9b03      	ldr	r3, [sp, #12]
    c00e:	9304      	str	r3, [sp, #16]
    c010:	3d04      	subs	r5, #4
    c012:	2600      	movs	r6, #0
    c014:	9501      	str	r5, [sp, #4]
    c016:	e00b      	b.n	c030 <_wcsnrtombs_l+0x50>
    c018:	9b03      	ldr	r3, [sp, #12]
    c01a:	bb2b      	cbnz	r3, c068 <_wcsnrtombs_l+0x88>
    c01c:	9b01      	ldr	r3, [sp, #4]
    c01e:	681a      	ldr	r2, [r3, #0]
    c020:	2a00      	cmp	r2, #0
    c022:	d03a      	beq.n	c09a <_wcsnrtombs_l+0xba>
    c024:	45bc      	cmp	ip, r7
    c026:	d25c      	bcs.n	c0e2 <_wcsnrtombs_l+0x102>
    c028:	3c01      	subs	r4, #1
    c02a:	1c63      	adds	r3, r4, #1
    c02c:	4666      	mov	r6, ip
    c02e:	d017      	beq.n	c060 <_wcsnrtombs_l+0x80>
    c030:	f8d8 3000 	ldr.w	r3, [r8]
    c034:	9302      	str	r3, [sp, #8]
    c036:	9b01      	ldr	r3, [sp, #4]
    c038:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    c03c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c040:	9301      	str	r3, [sp, #4]
    c042:	a907      	add	r1, sp, #28
    c044:	4643      	mov	r3, r8
    c046:	4648      	mov	r0, r9
    c048:	f8d8 b004 	ldr.w	fp, [r8, #4]
    c04c:	47a8      	blx	r5
    c04e:	1c42      	adds	r2, r0, #1
    c050:	d03a      	beq.n	c0c8 <_wcsnrtombs_l+0xe8>
    c052:	eb00 0c06 	add.w	ip, r0, r6
    c056:	45bc      	cmp	ip, r7
    c058:	d9de      	bls.n	c018 <_wcsnrtombs_l+0x38>
    c05a:	9b02      	ldr	r3, [sp, #8]
    c05c:	e9c8 3b00 	strd	r3, fp, [r8]
    c060:	4630      	mov	r0, r6
    c062:	b00b      	add	sp, #44	; 0x2c
    c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c068:	2800      	cmp	r0, #0
    c06a:	dd0e      	ble.n	c08a <_wcsnrtombs_l+0xaa>
    c06c:	9b04      	ldr	r3, [sp, #16]
    c06e:	9d01      	ldr	r5, [sp, #4]
    c070:	4418      	add	r0, r3
    c072:	1e5a      	subs	r2, r3, #1
    c074:	a907      	add	r1, sp, #28
    c076:	f100 3eff 	add.w	lr, r0, #4294967295
    c07a:	f811 3b01 	ldrb.w	r3, [r1], #1
    c07e:	f802 3f01 	strb.w	r3, [r2, #1]!
    c082:	4572      	cmp	r2, lr
    c084:	d1f9      	bne.n	c07a <_wcsnrtombs_l+0x9a>
    c086:	9501      	str	r5, [sp, #4]
    c088:	9004      	str	r0, [sp, #16]
    c08a:	9b05      	ldr	r3, [sp, #20]
    c08c:	681a      	ldr	r2, [r3, #0]
    c08e:	3204      	adds	r2, #4
    c090:	601a      	str	r2, [r3, #0]
    c092:	9b01      	ldr	r3, [sp, #4]
    c094:	681a      	ldr	r2, [r3, #0]
    c096:	2a00      	cmp	r2, #0
    c098:	d1c4      	bne.n	c024 <_wcsnrtombs_l+0x44>
    c09a:	9b03      	ldr	r3, [sp, #12]
    c09c:	b10b      	cbz	r3, c0a2 <_wcsnrtombs_l+0xc2>
    c09e:	9b05      	ldr	r3, [sp, #20]
    c0a0:	601a      	str	r2, [r3, #0]
    c0a2:	f10c 36ff 	add.w	r6, ip, #4294967295
    c0a6:	2200      	movs	r2, #0
    c0a8:	4630      	mov	r0, r6
    c0aa:	f8c8 2000 	str.w	r2, [r8]
    c0ae:	b00b      	add	sp, #44	; 0x2c
    c0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0b4:	9b03      	ldr	r3, [sp, #12]
    c0b6:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    c0ba:	2b00      	cmp	r3, #0
    c0bc:	d1a0      	bne.n	c000 <_wcsnrtombs_l+0x20>
    c0be:	9b05      	ldr	r3, [sp, #20]
    c0c0:	f04f 37ff 	mov.w	r7, #4294967295
    c0c4:	681d      	ldr	r5, [r3, #0]
    c0c6:	e79f      	b.n	c008 <_wcsnrtombs_l+0x28>
    c0c8:	4606      	mov	r6, r0
    c0ca:	218a      	movs	r1, #138	; 0x8a
    c0cc:	2200      	movs	r2, #0
    c0ce:	4630      	mov	r0, r6
    c0d0:	f8c9 1000 	str.w	r1, [r9]
    c0d4:	f8c8 2000 	str.w	r2, [r8]
    c0d8:	b00b      	add	sp, #44	; 0x2c
    c0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c0de:	463e      	mov	r6, r7
    c0e0:	e7be      	b.n	c060 <_wcsnrtombs_l+0x80>
    c0e2:	4666      	mov	r6, ip
    c0e4:	e7bc      	b.n	c060 <_wcsnrtombs_l+0x80>
    c0e6:	bf00      	nop

0000c0e8 <_wcsnrtombs_r>:
    c0e8:	b510      	push	{r4, lr}
    c0ea:	b084      	sub	sp, #16
    c0ec:	4c05      	ldr	r4, [pc, #20]	; (c104 <_wcsnrtombs_r+0x1c>)
    c0ee:	9806      	ldr	r0, [sp, #24]
    c0f0:	9000      	str	r0, [sp, #0]
    c0f2:	9807      	ldr	r0, [sp, #28]
    c0f4:	9001      	str	r0, [sp, #4]
    c0f6:	4804      	ldr	r0, [pc, #16]	; (c108 <_wcsnrtombs_r+0x20>)
    c0f8:	6800      	ldr	r0, [r0, #0]
    c0fa:	9402      	str	r4, [sp, #8]
    c0fc:	f7ff ff70 	bl	bfe0 <_wcsnrtombs_l>
    c100:	b004      	add	sp, #16
    c102:	bd10      	pop	{r4, pc}
    c104:	200013e0 	.word	0x200013e0
    c108:	20001968 	.word	0x20001968

0000c10c <__smakebuf_r>:
    c10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c110:	898b      	ldrh	r3, [r1, #12]
    c112:	460c      	mov	r4, r1
    c114:	0799      	lsls	r1, r3, #30
    c116:	b096      	sub	sp, #88	; 0x58
    c118:	d508      	bpl.n	c12c <__smakebuf_r+0x20>
    c11a:	f104 0343 	add.w	r3, r4, #67	; 0x43
    c11e:	2201      	movs	r2, #1
    c120:	e9c4 3204 	strd	r3, r2, [r4, #16]
    c124:	6023      	str	r3, [r4, #0]
    c126:	b016      	add	sp, #88	; 0x58
    c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c130:	2900      	cmp	r1, #0
    c132:	4606      	mov	r6, r0
    c134:	db25      	blt.n	c182 <__smakebuf_r+0x76>
    c136:	466a      	mov	r2, sp
    c138:	f000 f8ac 	bl	c294 <_fstat_r>
    c13c:	2800      	cmp	r0, #0
    c13e:	db1f      	blt.n	c180 <__smakebuf_r+0x74>
    c140:	9d01      	ldr	r5, [sp, #4]
    c142:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c146:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    c14a:	fab5 f585 	clz	r5, r5
    c14e:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c152:	096d      	lsrs	r5, r5, #5
    c154:	f44f 6700 	mov.w	r7, #2048	; 0x800
    c158:	4641      	mov	r1, r8
    c15a:	4630      	mov	r0, r6
    c15c:	f7f9 fa9e 	bl	569c <_malloc_r>
    c160:	b1e0      	cbz	r0, c19c <__smakebuf_r+0x90>
    c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c166:	f8c4 8014 	str.w	r8, [r4, #20]
    c16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c16e:	6020      	str	r0, [r4, #0]
    c170:	6120      	str	r0, [r4, #16]
    c172:	81a3      	strh	r3, [r4, #12]
    c174:	bb35      	cbnz	r5, c1c4 <__smakebuf_r+0xb8>
    c176:	433b      	orrs	r3, r7
    c178:	81a3      	strh	r3, [r4, #12]
    c17a:	b016      	add	sp, #88	; 0x58
    c17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c180:	89a3      	ldrh	r3, [r4, #12]
    c182:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    c186:	d019      	beq.n	c1bc <__smakebuf_r+0xb0>
    c188:	f04f 0840 	mov.w	r8, #64	; 0x40
    c18c:	2500      	movs	r5, #0
    c18e:	4641      	mov	r1, r8
    c190:	4630      	mov	r0, r6
    c192:	462f      	mov	r7, r5
    c194:	f7f9 fa82 	bl	569c <_malloc_r>
    c198:	2800      	cmp	r0, #0
    c19a:	d1e2      	bne.n	c162 <__smakebuf_r+0x56>
    c19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c1a0:	059a      	lsls	r2, r3, #22
    c1a2:	d4c0      	bmi.n	c126 <__smakebuf_r+0x1a>
    c1a4:	f023 0303 	bic.w	r3, r3, #3
    c1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
    c1ac:	f043 0302 	orr.w	r3, r3, #2
    c1b0:	2101      	movs	r1, #1
    c1b2:	e9c4 2104 	strd	r2, r1, [r4, #16]
    c1b6:	81a3      	strh	r3, [r4, #12]
    c1b8:	6022      	str	r2, [r4, #0]
    c1ba:	e7b4      	b.n	c126 <__smakebuf_r+0x1a>
    c1bc:	f44f 6880 	mov.w	r8, #1024	; 0x400
    c1c0:	462f      	mov	r7, r5
    c1c2:	e7c9      	b.n	c158 <__smakebuf_r+0x4c>
    c1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c1c8:	4630      	mov	r0, r6
    c1ca:	f000 f879 	bl	c2c0 <_isatty_r>
    c1ce:	b910      	cbnz	r0, c1d6 <__smakebuf_r+0xca>
    c1d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c1d4:	e7cf      	b.n	c176 <__smakebuf_r+0x6a>
    c1d6:	89a3      	ldrh	r3, [r4, #12]
    c1d8:	f023 0303 	bic.w	r3, r3, #3
    c1dc:	f043 0301 	orr.w	r3, r3, #1
    c1e0:	b21b      	sxth	r3, r3
    c1e2:	e7c8      	b.n	c176 <__smakebuf_r+0x6a>

0000c1e4 <__swbuf_r>:
    c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1e6:	460d      	mov	r5, r1
    c1e8:	4614      	mov	r4, r2
    c1ea:	4606      	mov	r6, r0
    c1ec:	b110      	cbz	r0, c1f4 <__swbuf_r+0x10>
    c1ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c1f0:	2b00      	cmp	r3, #0
    c1f2:	d04c      	beq.n	c28e <__swbuf_r+0xaa>
    c1f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c1f8:	69a3      	ldr	r3, [r4, #24]
    c1fa:	60a3      	str	r3, [r4, #8]
    c1fc:	0717      	lsls	r7, r2, #28
    c1fe:	b290      	uxth	r0, r2
    c200:	d51b      	bpl.n	c23a <__swbuf_r+0x56>
    c202:	6923      	ldr	r3, [r4, #16]
    c204:	b1cb      	cbz	r3, c23a <__swbuf_r+0x56>
    c206:	b2ed      	uxtb	r5, r5
    c208:	0481      	lsls	r1, r0, #18
    c20a:	462f      	mov	r7, r5
    c20c:	d522      	bpl.n	c254 <__swbuf_r+0x70>
    c20e:	6822      	ldr	r2, [r4, #0]
    c210:	6961      	ldr	r1, [r4, #20]
    c212:	1ad3      	subs	r3, r2, r3
    c214:	4299      	cmp	r1, r3
    c216:	dd29      	ble.n	c26c <__swbuf_r+0x88>
    c218:	3301      	adds	r3, #1
    c21a:	68a1      	ldr	r1, [r4, #8]
    c21c:	3901      	subs	r1, #1
    c21e:	60a1      	str	r1, [r4, #8]
    c220:	1c51      	adds	r1, r2, #1
    c222:	6021      	str	r1, [r4, #0]
    c224:	7015      	strb	r5, [r2, #0]
    c226:	6962      	ldr	r2, [r4, #20]
    c228:	429a      	cmp	r2, r3
    c22a:	d027      	beq.n	c27c <__swbuf_r+0x98>
    c22c:	89a3      	ldrh	r3, [r4, #12]
    c22e:	07db      	lsls	r3, r3, #31
    c230:	d501      	bpl.n	c236 <__swbuf_r+0x52>
    c232:	2d0a      	cmp	r5, #10
    c234:	d022      	beq.n	c27c <__swbuf_r+0x98>
    c236:	4638      	mov	r0, r7
    c238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c23a:	4621      	mov	r1, r4
    c23c:	4630      	mov	r0, r6
    c23e:	f7ff fddf 	bl	be00 <__swsetup_r>
    c242:	bb08      	cbnz	r0, c288 <__swbuf_r+0xa4>
    c244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    c248:	6923      	ldr	r3, [r4, #16]
    c24a:	b290      	uxth	r0, r2
    c24c:	b2ed      	uxtb	r5, r5
    c24e:	0481      	lsls	r1, r0, #18
    c250:	462f      	mov	r7, r5
    c252:	d4dc      	bmi.n	c20e <__swbuf_r+0x2a>
    c254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c258:	81a2      	strh	r2, [r4, #12]
    c25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c25c:	6961      	ldr	r1, [r4, #20]
    c25e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    c262:	6662      	str	r2, [r4, #100]	; 0x64
    c264:	6822      	ldr	r2, [r4, #0]
    c266:	1ad3      	subs	r3, r2, r3
    c268:	4299      	cmp	r1, r3
    c26a:	dcd5      	bgt.n	c218 <__swbuf_r+0x34>
    c26c:	4621      	mov	r1, r4
    c26e:	4630      	mov	r0, r6
    c270:	f7fd fb9a 	bl	99a8 <_fflush_r>
    c274:	b940      	cbnz	r0, c288 <__swbuf_r+0xa4>
    c276:	6822      	ldr	r2, [r4, #0]
    c278:	2301      	movs	r3, #1
    c27a:	e7ce      	b.n	c21a <__swbuf_r+0x36>
    c27c:	4621      	mov	r1, r4
    c27e:	4630      	mov	r0, r6
    c280:	f7fd fb92 	bl	99a8 <_fflush_r>
    c284:	2800      	cmp	r0, #0
    c286:	d0d6      	beq.n	c236 <__swbuf_r+0x52>
    c288:	f04f 37ff 	mov.w	r7, #4294967295
    c28c:	e7d3      	b.n	c236 <__swbuf_r+0x52>
    c28e:	f7fa ffef 	bl	7270 <__sinit>
    c292:	e7af      	b.n	c1f4 <__swbuf_r+0x10>

0000c294 <_fstat_r>:
    c294:	b570      	push	{r4, r5, r6, lr}
    c296:	460c      	mov	r4, r1
    c298:	4d08      	ldr	r5, [pc, #32]	; (c2bc <_fstat_r+0x28>)
    c29a:	4603      	mov	r3, r0
    c29c:	2600      	movs	r6, #0
    c29e:	4620      	mov	r0, r4
    c2a0:	4611      	mov	r1, r2
    c2a2:	461c      	mov	r4, r3
    c2a4:	602e      	str	r6, [r5, #0]
    c2a6:	f7f8 f845 	bl	4334 <_fstat>
    c2aa:	1c43      	adds	r3, r0, #1
    c2ac:	d000      	beq.n	c2b0 <_fstat_r+0x1c>
    c2ae:	bd70      	pop	{r4, r5, r6, pc}
    c2b0:	682b      	ldr	r3, [r5, #0]
    c2b2:	2b00      	cmp	r3, #0
    c2b4:	d0fb      	beq.n	c2ae <_fstat_r+0x1a>
    c2b6:	6023      	str	r3, [r4, #0]
    c2b8:	bd70      	pop	{r4, r5, r6, pc}
    c2ba:	bf00      	nop
    c2bc:	20002ee4 	.word	0x20002ee4

0000c2c0 <_isatty_r>:
    c2c0:	b538      	push	{r3, r4, r5, lr}
    c2c2:	4d07      	ldr	r5, [pc, #28]	; (c2e0 <_isatty_r+0x20>)
    c2c4:	2200      	movs	r2, #0
    c2c6:	4604      	mov	r4, r0
    c2c8:	4608      	mov	r0, r1
    c2ca:	602a      	str	r2, [r5, #0]
    c2cc:	f7f8 f838 	bl	4340 <_isatty>
    c2d0:	1c43      	adds	r3, r0, #1
    c2d2:	d000      	beq.n	c2d6 <_isatty_r+0x16>
    c2d4:	bd38      	pop	{r3, r4, r5, pc}
    c2d6:	682b      	ldr	r3, [r5, #0]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d0fb      	beq.n	c2d4 <_isatty_r+0x14>
    c2dc:	6023      	str	r3, [r4, #0]
    c2de:	bd38      	pop	{r3, r4, r5, pc}
    c2e0:	20002ee4 	.word	0x20002ee4

0000c2e4 <__aeabi_drsub>:
    c2e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c2e8:	e002      	b.n	c2f0 <__adddf3>
    c2ea:	bf00      	nop

0000c2ec <__aeabi_dsub>:
    c2ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c2f0 <__adddf3>:
    c2f0:	b530      	push	{r4, r5, lr}
    c2f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c2f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c2fa:	ea94 0f05 	teq	r4, r5
    c2fe:	bf08      	it	eq
    c300:	ea90 0f02 	teqeq	r0, r2
    c304:	bf1f      	itttt	ne
    c306:	ea54 0c00 	orrsne.w	ip, r4, r0
    c30a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c30e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c312:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c316:	f000 80e2 	beq.w	c4de <__adddf3+0x1ee>
    c31a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c31e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c322:	bfb8      	it	lt
    c324:	426d      	neglt	r5, r5
    c326:	dd0c      	ble.n	c342 <__adddf3+0x52>
    c328:	442c      	add	r4, r5
    c32a:	ea80 0202 	eor.w	r2, r0, r2
    c32e:	ea81 0303 	eor.w	r3, r1, r3
    c332:	ea82 0000 	eor.w	r0, r2, r0
    c336:	ea83 0101 	eor.w	r1, r3, r1
    c33a:	ea80 0202 	eor.w	r2, r0, r2
    c33e:	ea81 0303 	eor.w	r3, r1, r3
    c342:	2d36      	cmp	r5, #54	; 0x36
    c344:	bf88      	it	hi
    c346:	bd30      	pophi	{r4, r5, pc}
    c348:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c34c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c350:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c354:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c358:	d002      	beq.n	c360 <__adddf3+0x70>
    c35a:	4240      	negs	r0, r0
    c35c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c360:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c364:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c368:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c36c:	d002      	beq.n	c374 <__adddf3+0x84>
    c36e:	4252      	negs	r2, r2
    c370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c374:	ea94 0f05 	teq	r4, r5
    c378:	f000 80a7 	beq.w	c4ca <__adddf3+0x1da>
    c37c:	f1a4 0401 	sub.w	r4, r4, #1
    c380:	f1d5 0e20 	rsbs	lr, r5, #32
    c384:	db0d      	blt.n	c3a2 <__adddf3+0xb2>
    c386:	fa02 fc0e 	lsl.w	ip, r2, lr
    c38a:	fa22 f205 	lsr.w	r2, r2, r5
    c38e:	1880      	adds	r0, r0, r2
    c390:	f141 0100 	adc.w	r1, r1, #0
    c394:	fa03 f20e 	lsl.w	r2, r3, lr
    c398:	1880      	adds	r0, r0, r2
    c39a:	fa43 f305 	asr.w	r3, r3, r5
    c39e:	4159      	adcs	r1, r3
    c3a0:	e00e      	b.n	c3c0 <__adddf3+0xd0>
    c3a2:	f1a5 0520 	sub.w	r5, r5, #32
    c3a6:	f10e 0e20 	add.w	lr, lr, #32
    c3aa:	2a01      	cmp	r2, #1
    c3ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    c3b0:	bf28      	it	cs
    c3b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    c3b6:	fa43 f305 	asr.w	r3, r3, r5
    c3ba:	18c0      	adds	r0, r0, r3
    c3bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c3c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3c4:	d507      	bpl.n	c3d6 <__adddf3+0xe6>
    c3c6:	f04f 0e00 	mov.w	lr, #0
    c3ca:	f1dc 0c00 	rsbs	ip, ip, #0
    c3ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    c3d2:	eb6e 0101 	sbc.w	r1, lr, r1
    c3d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3da:	d31b      	bcc.n	c414 <__adddf3+0x124>
    c3dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c3e0:	d30c      	bcc.n	c3fc <__adddf3+0x10c>
    c3e2:	0849      	lsrs	r1, r1, #1
    c3e4:	ea5f 0030 	movs.w	r0, r0, rrx
    c3e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c3ec:	f104 0401 	add.w	r4, r4, #1
    c3f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c3f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c3f8:	f080 809a 	bcs.w	c530 <__adddf3+0x240>
    c3fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c400:	bf08      	it	eq
    c402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c406:	f150 0000 	adcs.w	r0, r0, #0
    c40a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c40e:	ea41 0105 	orr.w	r1, r1, r5
    c412:	bd30      	pop	{r4, r5, pc}
    c414:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c418:	4140      	adcs	r0, r0
    c41a:	eb41 0101 	adc.w	r1, r1, r1
    c41e:	3c01      	subs	r4, #1
    c420:	bf28      	it	cs
    c422:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c426:	d2e9      	bcs.n	c3fc <__adddf3+0x10c>
    c428:	f091 0f00 	teq	r1, #0
    c42c:	bf04      	itt	eq
    c42e:	4601      	moveq	r1, r0
    c430:	2000      	moveq	r0, #0
    c432:	fab1 f381 	clz	r3, r1
    c436:	bf08      	it	eq
    c438:	3320      	addeq	r3, #32
    c43a:	f1a3 030b 	sub.w	r3, r3, #11
    c43e:	f1b3 0220 	subs.w	r2, r3, #32
    c442:	da0c      	bge.n	c45e <__adddf3+0x16e>
    c444:	320c      	adds	r2, #12
    c446:	dd08      	ble.n	c45a <__adddf3+0x16a>
    c448:	f102 0c14 	add.w	ip, r2, #20
    c44c:	f1c2 020c 	rsb	r2, r2, #12
    c450:	fa01 f00c 	lsl.w	r0, r1, ip
    c454:	fa21 f102 	lsr.w	r1, r1, r2
    c458:	e00c      	b.n	c474 <__adddf3+0x184>
    c45a:	f102 0214 	add.w	r2, r2, #20
    c45e:	bfd8      	it	le
    c460:	f1c2 0c20 	rsble	ip, r2, #32
    c464:	fa01 f102 	lsl.w	r1, r1, r2
    c468:	fa20 fc0c 	lsr.w	ip, r0, ip
    c46c:	bfdc      	itt	le
    c46e:	ea41 010c 	orrle.w	r1, r1, ip
    c472:	4090      	lslle	r0, r2
    c474:	1ae4      	subs	r4, r4, r3
    c476:	bfa2      	ittt	ge
    c478:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c47c:	4329      	orrge	r1, r5
    c47e:	bd30      	popge	{r4, r5, pc}
    c480:	ea6f 0404 	mvn.w	r4, r4
    c484:	3c1f      	subs	r4, #31
    c486:	da1c      	bge.n	c4c2 <__adddf3+0x1d2>
    c488:	340c      	adds	r4, #12
    c48a:	dc0e      	bgt.n	c4aa <__adddf3+0x1ba>
    c48c:	f104 0414 	add.w	r4, r4, #20
    c490:	f1c4 0220 	rsb	r2, r4, #32
    c494:	fa20 f004 	lsr.w	r0, r0, r4
    c498:	fa01 f302 	lsl.w	r3, r1, r2
    c49c:	ea40 0003 	orr.w	r0, r0, r3
    c4a0:	fa21 f304 	lsr.w	r3, r1, r4
    c4a4:	ea45 0103 	orr.w	r1, r5, r3
    c4a8:	bd30      	pop	{r4, r5, pc}
    c4aa:	f1c4 040c 	rsb	r4, r4, #12
    c4ae:	f1c4 0220 	rsb	r2, r4, #32
    c4b2:	fa20 f002 	lsr.w	r0, r0, r2
    c4b6:	fa01 f304 	lsl.w	r3, r1, r4
    c4ba:	ea40 0003 	orr.w	r0, r0, r3
    c4be:	4629      	mov	r1, r5
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	fa21 f004 	lsr.w	r0, r1, r4
    c4c6:	4629      	mov	r1, r5
    c4c8:	bd30      	pop	{r4, r5, pc}
    c4ca:	f094 0f00 	teq	r4, #0
    c4ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c4d2:	bf06      	itte	eq
    c4d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c4d8:	3401      	addeq	r4, #1
    c4da:	3d01      	subne	r5, #1
    c4dc:	e74e      	b.n	c37c <__adddf3+0x8c>
    c4de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c4e2:	bf18      	it	ne
    c4e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c4e8:	d029      	beq.n	c53e <__adddf3+0x24e>
    c4ea:	ea94 0f05 	teq	r4, r5
    c4ee:	bf08      	it	eq
    c4f0:	ea90 0f02 	teqeq	r0, r2
    c4f4:	d005      	beq.n	c502 <__adddf3+0x212>
    c4f6:	ea54 0c00 	orrs.w	ip, r4, r0
    c4fa:	bf04      	itt	eq
    c4fc:	4619      	moveq	r1, r3
    c4fe:	4610      	moveq	r0, r2
    c500:	bd30      	pop	{r4, r5, pc}
    c502:	ea91 0f03 	teq	r1, r3
    c506:	bf1e      	ittt	ne
    c508:	2100      	movne	r1, #0
    c50a:	2000      	movne	r0, #0
    c50c:	bd30      	popne	{r4, r5, pc}
    c50e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c512:	d105      	bne.n	c520 <__adddf3+0x230>
    c514:	0040      	lsls	r0, r0, #1
    c516:	4149      	adcs	r1, r1
    c518:	bf28      	it	cs
    c51a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c51e:	bd30      	pop	{r4, r5, pc}
    c520:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c524:	bf3c      	itt	cc
    c526:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c52a:	bd30      	popcc	{r4, r5, pc}
    c52c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c530:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c534:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c538:	f04f 0000 	mov.w	r0, #0
    c53c:	bd30      	pop	{r4, r5, pc}
    c53e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c542:	bf1a      	itte	ne
    c544:	4619      	movne	r1, r3
    c546:	4610      	movne	r0, r2
    c548:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c54c:	bf1c      	itt	ne
    c54e:	460b      	movne	r3, r1
    c550:	4602      	movne	r2, r0
    c552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c556:	bf06      	itte	eq
    c558:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c55c:	ea91 0f03 	teqeq	r1, r3
    c560:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c564:	bd30      	pop	{r4, r5, pc}
    c566:	bf00      	nop

0000c568 <__aeabi_ui2d>:
    c568:	f090 0f00 	teq	r0, #0
    c56c:	bf04      	itt	eq
    c56e:	2100      	moveq	r1, #0
    c570:	4770      	bxeq	lr
    c572:	b530      	push	{r4, r5, lr}
    c574:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c578:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57c:	f04f 0500 	mov.w	r5, #0
    c580:	f04f 0100 	mov.w	r1, #0
    c584:	e750      	b.n	c428 <__adddf3+0x138>
    c586:	bf00      	nop

0000c588 <__aeabi_i2d>:
    c588:	f090 0f00 	teq	r0, #0
    c58c:	bf04      	itt	eq
    c58e:	2100      	moveq	r1, #0
    c590:	4770      	bxeq	lr
    c592:	b530      	push	{r4, r5, lr}
    c594:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c598:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c59c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c5a0:	bf48      	it	mi
    c5a2:	4240      	negmi	r0, r0
    c5a4:	f04f 0100 	mov.w	r1, #0
    c5a8:	e73e      	b.n	c428 <__adddf3+0x138>
    c5aa:	bf00      	nop

0000c5ac <__aeabi_f2d>:
    c5ac:	0042      	lsls	r2, r0, #1
    c5ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c5b2:	ea4f 0131 	mov.w	r1, r1, rrx
    c5b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c5ba:	bf1f      	itttt	ne
    c5bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c5c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c5c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c5c8:	4770      	bxne	lr
    c5ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c5ce:	bf08      	it	eq
    c5d0:	4770      	bxeq	lr
    c5d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c5d6:	bf04      	itt	eq
    c5d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c5dc:	4770      	bxeq	lr
    c5de:	b530      	push	{r4, r5, lr}
    c5e0:	f44f 7460 	mov.w	r4, #896	; 0x380
    c5e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c5ec:	e71c      	b.n	c428 <__adddf3+0x138>
    c5ee:	bf00      	nop

0000c5f0 <__aeabi_ul2d>:
    c5f0:	ea50 0201 	orrs.w	r2, r0, r1
    c5f4:	bf08      	it	eq
    c5f6:	4770      	bxeq	lr
    c5f8:	b530      	push	{r4, r5, lr}
    c5fa:	f04f 0500 	mov.w	r5, #0
    c5fe:	e00a      	b.n	c616 <__aeabi_l2d+0x16>

0000c600 <__aeabi_l2d>:
    c600:	ea50 0201 	orrs.w	r2, r0, r1
    c604:	bf08      	it	eq
    c606:	4770      	bxeq	lr
    c608:	b530      	push	{r4, r5, lr}
    c60a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c60e:	d502      	bpl.n	c616 <__aeabi_l2d+0x16>
    c610:	4240      	negs	r0, r0
    c612:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c616:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c61a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c61e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c622:	f43f aed8 	beq.w	c3d6 <__adddf3+0xe6>
    c626:	f04f 0203 	mov.w	r2, #3
    c62a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c62e:	bf18      	it	ne
    c630:	3203      	addne	r2, #3
    c632:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c636:	bf18      	it	ne
    c638:	3203      	addne	r2, #3
    c63a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c63e:	f1c2 0320 	rsb	r3, r2, #32
    c642:	fa00 fc03 	lsl.w	ip, r0, r3
    c646:	fa20 f002 	lsr.w	r0, r0, r2
    c64a:	fa01 fe03 	lsl.w	lr, r1, r3
    c64e:	ea40 000e 	orr.w	r0, r0, lr
    c652:	fa21 f102 	lsr.w	r1, r1, r2
    c656:	4414      	add	r4, r2
    c658:	e6bd      	b.n	c3d6 <__adddf3+0xe6>
    c65a:	bf00      	nop

0000c65c <__aeabi_d2lz>:
    c65c:	b508      	push	{r3, lr}
    c65e:	4602      	mov	r2, r0
    c660:	460b      	mov	r3, r1
    c662:	ec43 2b17 	vmov	d7, r2, r3
    c666:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    c66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c66e:	d403      	bmi.n	c678 <__aeabi_d2lz+0x1c>
    c670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c674:	f000 b80c 	b.w	c690 <__aeabi_d2ulz>
    c678:	eeb1 7b47 	vneg.f64	d7, d7
    c67c:	ec51 0b17 	vmov	r0, r1, d7
    c680:	f000 f806 	bl	c690 <__aeabi_d2ulz>
    c684:	4240      	negs	r0, r0
    c686:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c68a:	bd08      	pop	{r3, pc}
    c68c:	0000      	movs	r0, r0
	...

0000c690 <__aeabi_d2ulz>:
    c690:	ed9f 6b0b 	vldr	d6, [pc, #44]	; c6c0 <__aeabi_d2ulz+0x30>
    c694:	ec41 0b17 	vmov	d7, r0, r1
    c698:	ed9f 5b0b 	vldr	d5, [pc, #44]	; c6c8 <__aeabi_d2ulz+0x38>
    c69c:	ee27 6b06 	vmul.f64	d6, d7, d6
    c6a0:	eebc 6bc6 	vcvt.u32.f64	s12, d6
    c6a4:	eeb8 4b46 	vcvt.f64.u32	d4, s12
    c6a8:	eea4 7b45 	vfms.f64	d7, d4, d5
    c6ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    c6b0:	ee16 1a10 	vmov	r1, s12
    c6b4:	ee17 0a90 	vmov	r0, s15
    c6b8:	4770      	bx	lr
    c6ba:	bf00      	nop
    c6bc:	f3af 8000 	nop.w
    c6c0:	00000000 	.word	0x00000000
    c6c4:	3df00000 	.word	0x3df00000
    c6c8:	00000000 	.word	0x00000000
    c6cc:	41f00000 	.word	0x41f00000

0000c6d0 <___ZN7TwoWire5beginEv_veneer>:
    c6d0:	f85f f000 	ldr.w	pc, [pc]	; c6d4 <___ZN7TwoWire5beginEv_veneer+0x4>
    c6d4:	60001769 	.word	0x60001769

0000c6d8 <___init_veneer>:
    c6d8:	f85f f000 	ldr.w	pc, [pc]	; c6dc <___init_veneer+0x4>
    c6dc:	60001f79 	.word	0x60001f79

0000c6e0 <___reboot_Teensyduino__veneer>:
    c6e0:	f85f f000 	ldr.w	pc, [pc]	; c6e4 <___reboot_Teensyduino__veneer+0x4>
    c6e4:	60001ed1 	.word	0x60001ed1
	...

Disassembly of section .fini:

0000c6f0 <_fini>:
    c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6f2:	bf00      	nop
